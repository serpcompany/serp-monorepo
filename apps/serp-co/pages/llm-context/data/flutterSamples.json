[
  {
    "owner": "flutter",
    "repo": "samples",
    "content": "TITLE: Specifying iOS API Key in AppDelegate.swift\nDESCRIPTION: This Swift code snippet demonstrates how to provide the Google Maps API key in the AppDelegate.swift file for iOS. This is necessary for the google_maps_flutter plugin to function on iOS devices.  The `GMSServices.provideAPIKey()` method is used to set the API key. Replace \"YOUR API KEY HERE\" with your actual API key.\nSOURCE: https://github.com/flutter/samples/blob/main/place_tracker/README.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n@UIApplicationMain\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    GMSServices.provideAPIKey(\"YOUR API KEY HERE\")\n    GeneratedPluginRegistrant.register(with: self)\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Android API Key in AndroidManifest.xml\nDESCRIPTION: This code snippet shows how to specify the Google Maps API key in the Android application manifest file (AndroidManifest.xml). The API key is required for the google_maps_flutter plugin to work correctly on Android. Replace \"YOUR KEY HERE\" with your actual API key.\nSOURCE: https://github.com/flutter/samples/blob/main/place_tracker/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<manifest ...\n  <application ...\n    <meta-data android:name=\"com.google.android.geo.API_KEY\"\n               android:value=\"YOUR KEY HERE\"/>\n```\n\n----------------------------------------\n\nTITLE: Dart JS Interop Annotation\nDESCRIPTION: This Dart annotation `@js.JSExport()` is used to expose Dart functions to JavaScript. It enables communication and interaction between Dart code and JavaScript code in a Flutter web application.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/element_embedding_demo/README.md#_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\n@js.JSExport()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project.  It is essential for incorporating Flutter's build system into the overall build process.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This function `APPLY_STANDARD_SETTINGS` applies standard compilation features and options to a given target. It sets the C++ standard to 17, enables warnings, treats warnings as errors, disables specific warnings, enables exception handling, and defines debug-specific flags.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation Directories\nDESCRIPTION: This snippet sets the build bundle directory, makes the install step default, and sets the installation prefix. This is configured for running directly from Visual Studio, and makes the \"install\" target the default.  The install directory will contain the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Run all tests in test directory (Flutter)\nDESCRIPTION: This command runs all the test files located in the `test/` directory using the Flutter SDK. It's suitable for unit and widget tests that don't require a physical device or emulator.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter test\n```\n\n----------------------------------------\n\nTITLE: Generating Interop APIs with Pigeon\nDESCRIPTION: This bash command generates interop APIs and data classes using the Pigeon plugin. It takes the `schema.dart` file as input and produces corresponding Dart, Objective-C, and Java files. This allows seamless communication between Flutter, iOS, and Android platforms. Requires `pigeon` to be installed as a dev dependency.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/books/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nflutter pub run pigeon --input pigeon/schema.dart \\\n  --dart_out lib/api.dart \\\n  --objc_header_out ../ios_books/IosBooks/api.h \\\n  --objc_source_out ../ios_books/IosBooks/api.m \\\n  --objc_prefix BK \\\n  --java_out ../android_books/app/src/main/java/dev/flutter/example/books/Api.java \\\n  --java_package \"dev.flutter.example.books\"\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines the build configuration options by setting the CMAKE_BUILD_TYPE. It defaults to \"Debug\" and allows users to choose between \"Debug\", \"Profile\", and \"Release\" modes.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies for Flutter Module with Plugin (Bash)\nDESCRIPTION: This bash script automates the process of fetching Flutter packages and setting up dependencies for both Android and iOS projects. It navigates to the 'flutter_module_using_plugin' directory, runs 'flutter pub get' to fetch packages, opens the Android project in Android Studio (on macOS), navigates to the 'ios_using_plugin' directory, installs CocoaPods dependencies, and opens the iOS workspace in Xcode.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  #!/bin/bash\n  set -e\n\n  cd flutter_module_using_plugin\n  flutter pub get\n\n  # For Android builds:\n  open -a \"Android Studio\" ../android_using_plugin # macOS only\n  # Or open the ../android_using_plugin folder in Android Studio for other platforms.\n\n  # For iOS builds:\n  cd ../ios_using_plugin\n  pod install\n  open IOSUsingPlugin.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function, `APPLY_STANDARD_SETTINGS`, applies standard compilation settings to a given target. It sets the C++ standard to C++14, enables warnings as errors, and adds optimization flags and preprocessor definitions for non-Debug builds.  This ensures consistent build settings across targets.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This defines a CMake function `APPLY_STANDARD_SETTINGS` that applies common compilation features and options to a target. It sets C++ standard to 17, adds compiler warnings, disables exceptions, and adds debug definitions based on the build configuration.  The function takes a target as a parameter.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake policies and RPATH\nDESCRIPTION: This section configures modern CMake behaviors, specifically enabling the CMP0063 policy, and sets the RPATH to load bundled libraries from the 'lib/' directory relative to the binary. This ensures that the application can find its dependencies at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding API Key to web/index.html for Web\nDESCRIPTION: This HTML snippet shows how to include the Google Maps API key in the `<head>` section of the web/index.html file for the web platform. This allows the google_maps_flutter plugin to work in a web browser. Replace `<YOUR_API_KEY_HERE>` with your actual API key.\nSOURCE: https://github.com/flutter/samples/blob/main/place_tracker/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"https://maps.googleapis.com/maps/api/js?key=<YOUR_API_KEY_HERE>\"></script>\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory.  This integrates the Flutter build system into the CMake build process. This includes `flutter/` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on flutter_assemble in CMake\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target. This ensures that the Flutter tool portions of the build are executed before building the executable. This dependency is essential for building a Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setup dependencies and build prebuilt module (tl;dr)\nDESCRIPTION: This script automates the process of fetching packages, building the Flutter module for both Android (as AAR) and iOS (as framework), and opening the respective projects in Android Studio (macOS) and Xcode. It assumes that both Android and iOS toolchains are installed and configured.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/prebuilt_module/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  #!/bin/bash\n  set -e\n\n  cd flutter_module/\n  flutter pub get\n\n  # For Android builds:\n  flutter build aar\n  open -a \"Android Studio\" ../android_using_prebuilt_module/ # macOS only\n  # Or open the ../android_using_prebuilt_module folder in Android Studio for\n  # other platforms.\n\n  # For iOS builds:\n  flutter build ios-framework --xcframework --output=../ios_using_prebuilt_module/Flutter\n  open ../ios_using_prebuilt_module/IOSUsingPrebuiltModule.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a target, including C++ standard version, warning flags, and optimization levels based on the build configuration. This function promotes code quality and performance.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency in CMake\nDESCRIPTION: This snippet adds a dependency on `flutter_assemble`, ensuring that the Flutter tool portions of the build are executed. This is crucial for a Flutter project. It makes sure that the Flutter assets and Dart code are compiled before the native runner is built.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter managed directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, which likely contains Flutter-specific build rules and configurations. It sets the FLUTTER_MANAGED_DIR variable to point to the 'flutter' directory within the current source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding executable for Flutter Windows runner\nDESCRIPTION: This snippet adds the executable target for the Flutter Windows runner. It includes the source files required to build the application, such as `flutter_window.cpp`, `main.cpp`, and the generated plugin registrant. The `BINARY_NAME` variable, defined in the top-level CMakeLists.txt, determines the name of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This sets the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files. It is used to include these files later.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directory in CMake\nDESCRIPTION: This section configures the installation directory for the application bundle. It sets the `BUILD_BUNDLE_DIR` variable and the `CMAKE_INSTALL_PREFIX` to point to this directory. This ensures that the installed bundle is relocatable.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: This snippet defines a static library named 'flutter_wrapper_plugin'. It includes core wrapper sources and plugin registrar sources. Standard settings are applied to it, and it is configured to be position-independent code and use hidden C++ visibility. It links against the 'flutter' interface library and includes wrapper include directories. It also depends on the `flutter_assemble` custom target.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix. The `RUNTIME` keyword specifies that this target is an executable, and `COMPONENT Runtime` assigns this installation to the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options in CMake\nDESCRIPTION: This section defines the build type (Debug, Profile, or Release) if it's not already specified. It sets the `CMAKE_BUILD_TYPE` variable and provides available options through a cache property. This allows users to select the desired build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (App)\nDESCRIPTION: This defines the application-specific C++ wrapper source files (`flutter_engine.cc` and `flutter_view_controller.cc`) and prepends `WRAPPER_ROOT` to their paths.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Leaderboard IDs in Dart (games_services package)\nDESCRIPTION: This Dart code snippet shows how to set the leaderboard IDs for iOS and Android platforms when using the `games_services` package. The `iOSLeaderboardID` and `androidLeaderboardID` values need to be replaced with the actual leaderboard IDs obtained from App Store Connect and Google Play Console, respectively.  This configuration is typically done within the `showLeaderboard()` function of the `GamesServicesController`.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// TODO: When ready, change both these leaderboard IDs.\niOSLeaderboardID: \"some_id_from_app_store\",\nandroidLeaderboardID: \"sOmE_iD_fRoM_gPlAy\",\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App in Debug Mode\nDESCRIPTION: This command is used to launch the Flutter application in debug mode. It assumes that an Android emulator, iOS simulator, or a physical device is connected. This allows developers to test and debug their applications during development.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable file that will be created for the application. It defines the BINARY_NAME variable which is used later in the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"simplistic_editor\")\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Dependency to Flutter Pubspec\nDESCRIPTION: This snippet adds a dependency to the Flutter app's `pubspec.yaml` file, granting access to shared code located in the `../server/shared` directory. This allows the Flutter app to utilize the shared business logic.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  # Add these two lines:\n  shared:\n    path: ../server/shared\n```\n\n----------------------------------------\n\nTITLE: Installing Application Components\nDESCRIPTION: This snippet handles the installation of various application components, including the executable, ICU data file, Flutter library, bundled plugin libraries, and native assets. It also includes logic to remove and recopy assets.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros conflicting with C++\nDESCRIPTION: This line disables Windows macros that might conflict with C++ standard library functions by defining NOMINMAX.  This prevents potential compilation errors.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Flutter App Main Logic - main.dart\nDESCRIPTION: The Flutter part of the application resides within the `lib/main.dart` file.  This file contains the core Flutter logic responsible for interacting with the native iOS view. It serves as the entry point for the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/platform_view_swift/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nThe Flutter part of the application is quite simple, and all the action\ntakes place in a single file.\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to propagate include directories and link libraries to dependent targets. It links to the Flutter library and GTK, GLIB and GIO dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Core Sources\nDESCRIPTION: Creates a list of C++ source files for the core wrapper and prepends the wrapper root directory path to each. These files provide core functionalities for the C++ wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: CMake Add Flutter Assembly Dependency\nDESCRIPTION: This CMake snippet adds a dependency on the flutter_assemble target. This ensures that the Flutter tool portions of the build process are executed before building the target executable. Removing this dependency can lead to build errors.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file, which contains configuration parameters provided by the Flutter tool. This integration allows CMake to adapt the build process according to the Flutter environment.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Initialization and Executable Definition\nDESCRIPTION: Initializes the CMake project and defines the executable target for the Flutter Windows runner. It specifies the minimum required CMake version, sets the project name, and adds the source files needed to build the executable.  BINARY_NAME is expected to be defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to a specified target, including C++ standard, compiler options, and definitions.  It sets the C++ standard to 17 and disables exceptions. Be cautious when adding new options as plugins use this by default.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Defines a CMake interface library named `flutter`. It sets the include directories and link libraries required to use the Flutter library. This provides a convenient way to link against the Flutter engine in other parts of the project.  It also defines dependencies on the GTK, GLIB, and GIO packages.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating flutter_assemble Target\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, headers, and C++ wrapper sources. This target triggers the execution of the flutter tool backend command, ensuring that the Flutter assets are built before other targets that depend on them.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Variables - CMake\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and defines variables for the binary name and application ID. It also sets the CMake policy to modern behavior and loads bundled libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"context_menus\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.context_menus\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Flutter and Runner\nDESCRIPTION: This snippet adds subdirectories for the Flutter managed directory and the application runner. This includes the necessary build rules for both components. The flutter subdirectory contains the Flutter engine and framework, while runner contains the application's specific code.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This CMake function applies a standard set of build settings to a target. It sets the C++ standard to C++14, adds compiler warnings and errors, and enables optimization and disables debug symbols for non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter App Wrapper Library\nDESCRIPTION: These CMake commands add a static library for the Flutter app wrapper, including the necessary source files, applying standard settings, linking against the Flutter interface library, adding include directories, and adding a dependency on flutter_assemble. This wrapper provides a basic application setup.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the core, plugin, and app wrappers. The `TRANSFORM` command prepends the `WRAPPER_ROOT` to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Build Flutter module as AAR\nDESCRIPTION: Builds the Flutter module as an AAR (Android Archive) file, which can then be imported into an Android project. This command is executed from the `flutter_module` directory and produces AAR files for debug, profile, and release modes. The appropriate AAR is selected based on the Android app's build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/prebuilt_module/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter build aar\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the location of the C++ client wrapper directory. The directory contains the C++ code that interfaces between Flutter and the native platform.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Adding runner subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory. The runner directory likely contains application-specific build configurations and source code. This integrates the application's build process into the overall CMake project.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the installation bundle. This library contains the core Flutter runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets and AOT Library\nDESCRIPTION: This section installs the Flutter assets directory and, if not in Debug mode, the AOT library into the installation bundle. It ensures the assets directory is fully re-copied on each build to avoid stale files.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This snippet defines a function called APPLY_STANDARD_SETTINGS that applies common compilation features, options, and definitions to a specified target. This helps maintain consistency across different parts of the project. It sets C++ standard to 17, enables warnings, and disables exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Convert lcov.info to HTML (Flutter)\nDESCRIPTION: This command converts the `lcov.info` file, generated by `flutter test --coverage`, into a human-readable HTML report using the `genhtml` tool. The report is stored in the `coverage/index` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngenhtml coverage/lcov.info -o coverage/index\n```\n\n----------------------------------------\n\nTITLE: Installing Application Bundle\nDESCRIPTION: This snippet defines the installation rules for the application bundle. It copies the executable, ICU data file, Flutter library, plugin libraries, and assets to the appropriate directories within the bundle. It also removes and recreates the assets directory to ensure a clean install.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter tool portions of the build are executed before the application is built.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings for Flutter runner\nDESCRIPTION: This snippet applies a set of standard build settings to the executable target. The specifics of `apply_standard_settings` are not shown, but it likely configures compiler flags, optimization levels, and other common build configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (`libflutter_linux_gtk.so`) and sets it in the parent scope.  Also sets paths for the ICU data file and AOT library in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Append Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are required for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings to target\nDESCRIPTION: This snippet applies the standard build settings to the application target using the `apply_standard_settings` function defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Command\nDESCRIPTION: This defines a custom command that runs the Flutter tool's backend script to assemble the Flutter application. It sets up the environment for the Flutter tool and passes the target platform and configuration. A phony output file is used to ensure the command runs every time, as there is no full input/output list from the Flutter tool. This command generates the Flutter library, headers and C++ wrapper sources.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Targets and Files\nDESCRIPTION: This snippet installs the runtime targets (executable), Flutter ICU data file, Flutter library, and plugin bundled libraries into the specified installation directories.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Dependency to Server Pubspec\nDESCRIPTION: This snippet adds a dependency to the server's `pubspec.yaml` file, granting access to shared code located in the `./shared` directory.  This allows the server to utilize the shared business logic.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  # Add these two lines:\n  shared:\n    path: ./shared\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Plugin Wrapper\nDESCRIPTION: Sets the include directories for the 'flutter_wrapper_plugin' library. This specifies where the compiler should look for header files when compiling the plugin wrapper code.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This snippet defines a function APPLY_STANDARD_SETTINGS that applies standard compilation features and options to a given target. It sets C++ standard to 17, enables warnings, treats warnings as errors, disables specific warnings, enables exception handling, and disables exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package - CMake\nDESCRIPTION: This snippet uses the PkgConfig module to find the GTK+ 3.0 package, marking it as required. It imports the GTK target for linking.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: CMake Disable Conflicting Windows Macros\nDESCRIPTION: This CMake snippet disables the Windows NOMINMAX macro, which prevents conflicts between Windows macros and C++ standard library functions. This ensures proper compilation when using standard library functions that might have conflicting names with Windows macros.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages building the plugins and adding them to the application. This allows the application to utilize Flutter plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Executable\nDESCRIPTION: This snippet applies the standard build settings to the executable target, using the APPLY_STANDARD_SETTINGS function defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features (C++14), options (-Wall, -Werror), and definitions (NDEBUG for non-Debug builds) to a given target.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory and includes generated plugin build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Application ID\nDESCRIPTION: This snippet adds a definition for the application ID, which is used in the application code.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: Disables Windows macros that can collide with C++ standard library functions by defining `NOMINMAX`.  This is essential for avoiding naming conflicts and ensuring correct behavior with standard library elements.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies\nDESCRIPTION: Uses `pkg-config` to find required system libraries (GTK, GLIB, and GIO).  These libraries are essential for Flutter's graphical interface and system interactions on Linux. The `IMPORTED_TARGET` option creates CMake targets that can be linked against.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target\nDESCRIPTION: Creates a custom target named 'flutter_assemble' that depends on the flutter library, headers, and C++ wrapper sources. This target is used to trigger the execution of the custom command responsible for assembling the Flutter application. The custom command generates all the necessary files needed for the application to be built.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position independent code and hidden C++ visibility, links against the Flutter interface library, includes the wrapper include directory, and depends on the flutter_assemble target.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Define Build Configuration Option\nDESCRIPTION: Defines build configuration options, distinguishing between single-configuration and multi-configuration generators (like Visual Studio). It sets the available configuration types (Debug, Profile, Release) and the default build type.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Headers List\nDESCRIPTION: This CMake code creates a list of Flutter library header files and transforms the list to include the path to the ephemeral directory.  These header files are crucial for compiling Flutter plugins and the runner.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: This adds a dependency on the `flutter_assemble` target, which is responsible for assembling the Flutter application. This ensures that the Flutter application is built before the executable is linked.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This code defines the build configuration options (Debug, Profile, Release) based on whether the CMake generator is multi-configuration. If not multi-configuration, it sets the CMAKE_BUILD_TYPE to Debug by default and defines the available build types.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Plugin Wrapper Library\nDESCRIPTION: These CMake commands add a static library for the Flutter plugin wrapper, including the necessary source files, applying standard settings, setting target properties for position-independent code and visibility, linking against the Flutter interface library, adding include directories, and adding a dependency on flutter_assemble.  This provides a reusable wrapper for plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a generated configuration file from the ephemeral directory. This file likely contains settings provided by the Flutter tool during the build process.  It ensures that the build process uses the appropriate configuration settings for the target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL. The variable is then published to the parent scope for use in install steps along with `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY`.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target\nDESCRIPTION: Adds a custom target named `flutter_assemble` which depends on the Flutter library and header files. This target ensures that the Flutter library is built before any other targets that depend on it.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to manage include directories and link libraries required for Flutter. The `target_include_directories` command adds the ephemeral directory to the include path for the interface library. The `target_link_libraries` command links the Flutter library. A dependency on `flutter_assemble` is added to ensure the Flutter library is built before anything that depends on it.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Flutter Assets\nDESCRIPTION: This snippet removes the existing assets directory before installing the new assets, ensuring a clean installation. It then installs the Flutter assets to the data directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, header files, and wrapper sources. This target ensures that the Flutter tool backend is run before any other targets that depend on these files.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to find required system-level dependencies, including GTK, GLIB, and GIO. These libraries are essential for building Flutter applications on Linux GTK.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This code snippet initializes the CMake project, sets the minimum required CMake version, specifies the project name, and defines the languages used (CXX for C++). It also sets the binary name and application ID, important for identifying the application.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"animations\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.animations\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This code snippet defines build configuration options for the project, including Debug, Profile, and Release modes. It checks if the generator is multi-config and sets the build type accordingly. If no build type is specified, it defaults to Debug.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Re-copying Assets Directory in CMake\nDESCRIPTION: This code ensures that the assets directory is fully re-copied on each build to avoid stale files. It removes the existing directory and then installs the current assets directory.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and defines the project name and supported languages (CXX). It also sets variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"game_template\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.game_template\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` that prepends a given prefix to each element in a list. It uses `foreach` loop and `list(APPEND)` to construct a new list, and then sets the original list to the new list.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This conditionally installs the plugin bundled libraries to the install prefix. The bundled libraries are required by the included plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining standard compilation settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a target. It enables C++17, sets warning levels, disables exceptions, and configures debug-specific definitions. The function is designed to be reusable across multiple targets.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding File Header - Dart\nDESCRIPTION: This code snippet represents the standard file header required at the beginning of all files within the Flutter Samples project. It includes the copyright notice and BSD-style license information. The license indicates the terms under which the source code can be used, modified, and distributed.\nSOURCE: https://github.com/flutter/samples/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\n// Copyright 2024 The Flutter team. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures that the CMake version is compatible with the commands and features used in the configuration file.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to provide include directories and link libraries to other targets. The `target_include_directories` and `target_link_libraries` commands specify the include directories and link libraries for the `flutter` library. A dependency on the `flutter_assemble` target is also added.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs the Flutter assets directory by first removing the existing directory and then copying the new assets.  This ensures that stale files from previous builds are removed.  Installation is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysroot for Cross-Building\nDESCRIPTION: This snippet configures the sysroot for cross-building if the `FLUTTER_TARGET_PLATFORM_SYSROOT` variable is defined. It sets `CMAKE_SYSROOT` and adjusts search paths for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building and adding plugins to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Run widget tests on device/emulator (Flutter)\nDESCRIPTION: This command runs a specified widget test file on a connected physical device or emulator. Replace `<file_path>` with the relative path of the test file within the `test/` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nflutter run test/<file_path>\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Paths\nDESCRIPTION: This sets the specific installation paths for data and library files within the build bundle directory.  These variables are used in subsequent `install` commands.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Throwing an Exception for Crashlytics Testing in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to throw a `StateError` exception within a Flutter `TextButton`'s `onPressed` callback.  This is specifically for testing the integration with Firebase Crashlytics. When the button is pressed, the `StateError` will be triggered and reported to the Crashlytics console.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nTextButton(\n  onPressed: () => throw StateError('whoa!'),\n  child: Text('Test Crashlytics'),\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Packages\nDESCRIPTION: Uses `pkg-config` to find system-level dependencies like GTK, GLIB, and GIO. The `REQUIRED IMPORTED_TARGET` option creates imported targets for these libraries, making them easier to link against.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Firestore Data Structure Example\nDESCRIPTION: This snippet illustrates the expected structure of the `ice_cream_stores` collection in Cloud Firestore. It shows the fields required for each store, including `placeId`, `address`, `location` (latitude and longitude), and `name`. This data is used to populate the map markers and carousel in the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/flutter_maps_firestore/README.md#_snippet_0\n\nLANGUAGE: No Language\nCODE:\n```\nice_cream_stores:\n  ChIJ70taCKKAhYAR5IMmYwQT4Ts:\n    placeId: ChIJ70taCKKAhYAR5IMmYwQT4Ts\n    address: 432 Octavia St #1a, San Francisco, CA 94102, USA\n    location: 37.7763629, -122.4241918\n    name: Smitten Ice Cream\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the programming languages used (CXX). It also sets the binary name of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(client LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"client\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration with CMake\nDESCRIPTION: This snippet sets up the basic project configuration, including the minimum CMake version, project name, binary name, and application ID. It also enables modern CMake behaviors and configures the runtime path for bundled libraries. Sets up the minimum cmake version, the project name, binary name and the application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"form_app\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.formApp.form_app\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring installation\nDESCRIPTION: This section configures the installation process. It starts by setting the build bundle directory and the install prefix. It cleans the bundle directory and installs the target executable, ICU data file, Flutter library, bundled libraries, assets, and AOT library. The AOT library is installed only in non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing and Re-copying Flutter Assets\nDESCRIPTION: This snippet removes the existing flutter_assets directory and then installs the new directory. This ensures that the asset directory is completely updated with each build, preventing stale files from being included.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This creates a static library for the Flutter wrapper app, using the core and app source files. It applies standard settings, links to the Flutter interface library, includes directories, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile Copy Command\nDESCRIPTION: This snippet updates the `Dockerfile` to copy all files and directories, including the `shared` directory, to ensure `dart pub get` can run successfully.  The original command only copied `pubspec.*` files, which is insufficient when shared code is present.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY  pubspec.*  ./\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.  This step is crucial for including any Flutter plugins used by the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directory and Process\nDESCRIPTION: This section configures the installation process, defining the installation directory and copying necessary files, including the executable, ICU data file, Flutter library, plugin bundled libraries, native assets, and Flutter assets. It also handles AOT library installation for non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Defines a static library `flutter_wrapper_app` for the application, including core and app wrapper sources. It applies standard settings, links against the `flutter` interface library, includes the wrapper's include directory, and depends on the `flutter_assemble` target. This library is essential for building the Flutter runner application.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This function `APPLY_STANDARD_SETTINGS` applies standard compilation features, options, and definitions to a given target. It sets the C++ standard to 17, disables exceptions, and configures debug-specific settings.  It's designed to be reused across multiple targets.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend to assemble the Flutter application.  It specifies the outputs of the command (Flutter library, headers, and C++ wrapper sources) and the command to execute (the Flutter tool backend script). It uses a phony output file to force execution every time.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: This CMake code disables Windows macros that may collide with C++ standard library functions by defining `NOMINMAX`. This prevents potential compilation errors due to macro name conflicts.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: Creates a list of header files required for the Flutter library and prepends the ephemeral directory path to each.  These headers expose the Flutter API for use in native code.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: This snippet defines the build configuration options for the project. It checks if the generator is multi-config and sets the configuration types accordingly. If not multi-config, it sets the CMAKE_BUILD_TYPE to Debug and provides available options.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Files - CMake\nDESCRIPTION: This snippet installs the executable, ICU data file, and Flutter library to their respective destination directories within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable - CMake\nDESCRIPTION: This snippet links the Flutter library and the GTK library to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: These CMake commands add a custom command that executes the Flutter tool backend to assemble the Flutter library, headers, and wrapper sources. The command uses the FLUTTER_TOOL_ENVIRONMENT to execute tool_backend.bat with specified configurations. It also introduces a phony output file to ensure this command runs every time, as there is no complete input/output list available.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library and headers. This command invokes the Flutter tool backend script with the appropriate environment variables and parameters. A phony file is used to ensure the command runs every time.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: This snippet defines the build configuration type if it's not already set. It defaults to 'Debug' and provides options for 'Debug', 'Profile', and 'Release' build modes. It forces the cache to use the defined type.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initialize CMake Project\nDESCRIPTION: Initializes the CMake project, specifies the minimum required CMake version, and sets the project name with CXX language support.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File in CMake\nDESCRIPTION: This `install` command copies the ICU data file (`FLUTTER_ICU_DATA_FILE`) to the `INSTALL_BUNDLE_DATA_DIR`. This file is required for internationalization support in Flutter applications.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory\nDESCRIPTION: Removes the build bundle directory at the start of each build to ensure a clean environment. This prevents stale files from previous builds.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration CMake\nDESCRIPTION: Defines the build configuration options (Debug, Profile, Release). It checks if the generator is multi-config and sets the `CMAKE_CONFIGURATION_TYPES` accordingly. It also sets the `CMAKE_BUILD_TYPE` if not already defined, ensuring that a default build type (Debug) is selected. This snippet initializes build types, which determine compilation flags and optimizations.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets the include directories and link libraries. This library serves as an interface for other libraries that depend on the Flutter framework.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the Ahead-of-Time (AOT) compiled library for Profile and Release builds, improving the application's performance in these modes.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This snippet uses `find_package` to find system-level dependencies, specifically PkgConfig, and then uses `pkg_check_modules` to check for the GTK library. The GTK library is imported as a target named `PkgConfig::GTK`.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting install directories\nDESCRIPTION: This snippet sets the installation directories for data and libraries within the bundle. `INSTALL_BUNDLE_DATA_DIR` is set to `<CMAKE_INSTALL_PREFIX>/data` and `INSTALL_BUNDLE_LIB_DIR` is set to `<CMAKE_INSTALL_PREFIX>/lib`.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Profile and Release Builds\nDESCRIPTION: This snippet installs the AOT library (`AOT_LIBRARY`) into the `${INSTALL_BUNDLE_DATA_DIR}` only for Profile and Release configurations. This is essential for optimized performance in production builds.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets a default value for `FLUTTER_TARGET_PLATFORM` if it's not already defined. This ensures a default platform is used, like `windows-x64`, when building with older Flutter tool versions.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This iterates through a list of plugin bundled libraries and installs each one to the `lib` directory within the bundle. This ensures that any native libraries required by plugins are included in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Directories\nDESCRIPTION: This snippet defines the ephemeral directory and includes generated configuration from the flutter tool.  It sets the path to the generated configuration file and stores it in the EPHEMERAL_DIR variable for later use.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Command\nDESCRIPTION: Defines a custom command to run the Flutter tool backend script. It generates the Flutter library, headers, and wrapper sources. It also creates a phony output file to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command that runs the Flutter tool to assemble the Flutter library. This command executes the tool_backend.sh script with the specified environment variables and target platform. It forces execution every time by using a _phony_ file.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources\nDESCRIPTION: This snippet defines lists of C++ source files for the core wrapper, plugin registrar, and app-specific functionality.  The `list(TRANSFORM)` command prepends the wrapper root directory to each source file path. These wrapper sources provide the glue between the Flutter engine and platform-specific code.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: This snippet sets a default value for the `FLUTTER_TARGET_PLATFORM` variable if it is not already defined. This provides a fallback configuration for older versions of the Flutter tool. If the variable is not set, it defaults to \"windows-x64\".\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the specified destination (${INSTALL_BUNDLE_DATA_DIR}) with the Runtime component, but only for Profile and Release configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet conditionally installs plugin bundled libraries to the specified destination (${INSTALL_BUNDLE_LIB_DIR}) with the Runtime component, if PLUGIN_BUNDLED_LIBRARIES is defined.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin`.  It includes the core and plugin wrapper sources. Standard settings are applied using `apply_standard_settings`. Target properties are set for position-independent code and hidden CXX visibility. It links against the `flutter` interface library and adds the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Target Files\nDESCRIPTION: This snippet defines the installation directories for data and libraries within the bundle. It installs the executable, ICU data file, Flutter library, and bundled plugin libraries to their respective destinations.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the 'flutter/generated_plugins.cmake' file, which contains build rules for managing Flutter plugins. This ensures that the plugins are built and linked into the application.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named 'flutter'.  It sets the include directories and link libraries for this interface, pointing to the Flutter library and headers.  An interface library doesn't contain code itself, but provides include paths and link dependencies to other libraries or executables.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: This snippet adds an executable target using `add_executable`, specifying the binary name and source files required to build the application.  It's crucial for defining which source files are compiled into the final executable.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings\nDESCRIPTION: This function applies a standard set of build settings to a specified target.  It sets the C++ standard to C++14, enables compiler warnings and treats them as errors, and adds optimization flags for non-Debug configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Tool Backend Command\nDESCRIPTION: This snippet defines a custom command that runs the Flutter tool backend to generate necessary build artifacts. It uses a phony output file to ensure the command runs every time. It sets environment variables for the Flutter tool and executes the tool_backend.bat script.  The `VERBATIM` argument prevents CMake from interpreting special characters in the command.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the install prefix. This makes the executable available after the install step.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU data file (FLUTTER_ICU_DATA_FILE) to the 'data' directory within the bundle. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project. It sets the minimum required CMake version, the project name, binary name, and application ID. It also enables modern CMake behaviors and sets up the RPATH for bundled libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"material_3_demo\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.material_3_demo\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This code sets the minimum required CMake version to 3.10. This ensures that the CMake version used to build the project is compatible with the features and syntax used in the CMakeLists.txt file.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions. It loads bundled libraries from the lib/ directory relative to the binary.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Data and Library Files\nDESCRIPTION: These snippets install various files required by the Flutter application, including the ICU data file and the Flutter library, into their respective destination directories within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions for Flutter version\nDESCRIPTION: This snippet adds preprocessor definitions to the target, embedding the Flutter version information. These definitions expose the Flutter version as constants in the C++ code, allowing conditional logic based on the version.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines the directories for data and library files within the installation bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories\nDESCRIPTION: This section configures the installation directories for the application's runtime components. It ensures that support files are copied next to the executable for easy execution from Visual Studio. It sets the bundle and library install directories.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This snippet defines the location of the Flutter library (flutter_windows.dll) and the ICU data file (icudtl.dat).  It also sets the location of the AOT (Ahead-Of-Time) compiled library. These variables are then published to the parent scope for use in the installation step.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Project\nDESCRIPTION: This snippet sets up the basic CMake project, including defining the minimum required CMake version, project name, and supported languages.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet conditionally installs the Ahead-Of-Time (AOT) compiled library to the lib directory within the installation bundle, but only for non-Debug builds. AOT compilation improves application startup time.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding application build rules\nDESCRIPTION: This snippet adds the subdirectory containing the application build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: Applies the standard build settings to the created executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on flutter_assemble, ensuring that the Flutter tool portions of the build are executed.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds an executable target with the name defined by `BINARY_NAME`. It includes the main source files and the generated plugin registrant.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This snippet iterates through the plugin bundled libraries and installs each one to the library directory within the installation prefix. This ensures that any native libraries required by Flutter plugins are included in the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Target\nDESCRIPTION: This defines a custom target named `flutter_assemble`, which depends on the output of the custom command that runs the Flutter tool backend. This ensures that the Flutter application is assembled before any target that depends on it.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library, ICU data file, project build directory, and AOT library. These variables are published to the parent scope for use in install steps. The locations of the Flutter library (`libflutter_linux_gtk.so`), ICU data file (`icudtl.dat`), the build directory and the AOT compiled library are stored in variables and made available to the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the generated Flutter library and headers. This target ensures that the custom command is executed before any targets that depend on the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for bundled libraries\nDESCRIPTION: Sets the RPATH (Run-Path) for the executable so it can find bundled libraries in the 'lib' directory relative to the executable. This is crucial for deploying the application with its dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and app wrapper sources.  It applies standard settings, links it to the `flutter` interface library, and defines include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directory and Settings\nDESCRIPTION: This snippet configures the installation directory to be next to the executable, making it easier to run the application from within Visual Studio. It sets the install step as the default and defines variables for the bundle directories.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version, the project name, and the supported languages (CXX).  It sets the name of the final executable and opts into modern CMake behaviors.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(desktop_photo_search LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"desktop_photo_search\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Target Settings\nDESCRIPTION: This snippet defines a CMake function `APPLY_STANDARD_SETTINGS` that applies standard compilation settings to a given target. It sets the C++ standard to C++17, adds compiler options for warnings and exception handling, and defines preprocessor definitions.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg-config` to locate and import GTK, GLIB, and GIO system libraries. These libraries are essential for building a GTK-based Flutter application on Linux.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. This library includes the necessary header directories and links to the Flutter library and system dependencies.  `target_include_directories` adds the ephemeral directory to the include paths, and `target_link_libraries` links the library to the Flutter shared library, GTK, GLIB, and GIO.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: This snippet defines build configuration options, determining whether it's a multi-configuration generator and setting the available build types (Debug, Profile, Release).\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the 'runner' directory as a subdirectory to the CMake build, containing the application-specific build rules. It relies on runner/CMakeLists.txt\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This code installs the Flutter assets directory by first removing the existing directory and then copying the new assets.  This ensures stale files are removed.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings\nDESCRIPTION: This function applies standard compiler settings to a specified target, including C++ standard, warning flags, optimization levels (for non-Debug builds), and debug definition (for non-Debug builds). It enhances code quality and performance.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project for Flutter Runner\nDESCRIPTION: This CMake code initializes the project, sets the minimum required CMake version, and specifies the project name along with the supported language (CXX).\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This adds preprocessor definitions to enable Unicode support for the project. This ensures that the application handles Unicode characters correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets - CMake\nDESCRIPTION: This snippet removes the existing flutter_assets directory and re-copies it to ensure that the bundle contains the latest assets. It avoids stale files from previous installations.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Bundled Libraries\nDESCRIPTION: This snippet sets the RPATH (runtime search path) to load bundled libraries from the 'lib/' directory relative to the binary using `set(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")`. This ensures that the application can find its dependencies at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Settings Persistence Interface in Dart\nDESCRIPTION: Defines an abstract class `SettingsPersistence` that outlines the methods for saving and retrieving settings like music on/off, muted state, player name, and sounds on/off.  This interface acts as a contract for any concrete implementation of settings persistence using, for example, `shared_preferences`.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_17\n\nLANGUAGE: Dart\nCODE:\n```\nabstract class SettingsPersistence {\n  Future<bool> getMusicOn();\n\n  Future<bool> getMuted({required bool defaultValue});\n\n  Future<String> getPlayerName();\n\n  Future<bool> getSoundsOn();\n\n  Future<void> saveMusicOn(bool value);\n\n  Future<void> saveMuted(bool value);\n\n  Future<void> savePlayerName(String value);\n\n  Future<void> saveSoundsOn(bool value);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function that applies standard compilation settings to a target. These settings include enabling C++14 standard, setting warning flags, and enabling optimizations for non-Debug builds. The function takes the target name as input.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting up installation directories\nDESCRIPTION: This snippet sets up installation directories and makes the \"install\" step default, ensuring support files are copied next to the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target, including C++14 standard, Wall and Werror options, and optimization level based on the build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Data Files\nDESCRIPTION: This section defines the installation directories and installs the executable, ICU data file, and Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation\nDESCRIPTION: This section configures the installation process, creating a relocatable bundle in the build directory. It defines the installation directories and copies the necessary files, including the executable, data files, and libraries.  It also handles native asset installation.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug Builds)\nDESCRIPTION: This snippet conditionally installs the AOT library for non-Debug builds, improving performance in release or profile modes. The AOT library is only included when not building in debug mode.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation\nDESCRIPTION: This section configures the installation process, specifying the build bundle directory, setting the install step as default, and setting the installation prefix. It then installs the target executable, Flutter ICU data file, Flutter library, bundled plugin libraries, native assets, Flutter assets, and AOT library (on non-Debug builds) to the appropriate destinations.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to Target\nDESCRIPTION: This snippet links the Flutter and GTK libraries to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Running Server with Dart SDK\nDESCRIPTION: This shell command executes the Dart server application. It assumes the server entry point is `bin/server.dart`. The output indicates the server is listening on port 8080, signifying successful execution.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/server/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ dart run bin/server.dart\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14. This ensures that the CMake project uses features and syntax compatible with CMake 3.14 or later. It's crucial for project compatibility and proper build execution.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining the Executable Target\nDESCRIPTION: This snippet defines the executable target using `add_executable`. It includes the main source files and the generated plugin registrant. It sets the binary name as defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Files\nDESCRIPTION: Installs the executable, ICU data file, Flutter library, and bundled plugin libraries to the specified destinations.  This is part of the installation process which creates the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions (CMake)\nDESCRIPTION: This snippet defines preprocessor macros for the build version of the Flutter application. It sets `FLUTTER_VERSION`, `FLUTTER_VERSION_MAJOR`, `FLUTTER_VERSION_MINOR`, `FLUTTER_VERSION_PATCH`, and `FLUTTER_VERSION_BUILD` as compiler definitions, allowing the application to access version information at compile time. It also disables Windows macros that collide with C++ standard library functions using `NOMINMAX`.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Configures the installation process, including setting the build bundle directory and installation prefixes. This ensures that the application and its dependencies are installed in the correct locations. Defines installation directories and sets default install step.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assemble for Flutter Windows runner\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target. This ensures that the Flutter tool portions of the build are executed before the executable target is built.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend script to generate the Flutter library and headers.  The command is executed every time due to the presence of `_phony_` file. The script uses the provided Flutter tool environment variables, the Flutter root directory, target platform, and build type.  The output of the command are the Flutter library, headers, and the `_phony_` file.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the build bundle directory and updates CMAKE_INSTALL_PREFIX to the bundle directory if it's the default. This configures where the application bundle will be created during the installation process.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding version definitions for Flutter build\nDESCRIPTION: This snippet adds preprocessor definitions for the Flutter build version.  It defines macros such as `FLUTTER_VERSION`, `FLUTTER_VERSION_MAJOR`, etc., which can be used in the application code to access version information. These macros are made private to the target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This function applies standard build settings to a target, including C++ standard version, compiler options (warnings and errors), and optimization flags. These settings are generally applicable to most targets, but can be overridden when necessary.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This section configures the installation process to create a relocatable application bundle. It defines the installation prefix to be the `bundle` directory within the project binary directory. If `CMAKE_INSTALL_PREFIX` is set to its default value, it will be overridden with the bundle directory.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Dependencies\nDESCRIPTION: This snippet applies standard build settings, links the Flutter and GTK libraries to the application target, and adds a dependency on the flutter_assemble target to ensure Flutter resources are built.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command\nDESCRIPTION: Adds a custom command to generate the Flutter library and headers. This command executes a shell script from the Flutter tool to build the necessary artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: Explicitly opts in to modern CMake behaviors using `cmake_policy`. This avoids warnings with recent CMake versions by setting CMP0063 to NEW.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and setting include directories in CMake\nDESCRIPTION: This snippet links necessary libraries, including flutter, flutter_wrapper_app, and dwmapi.lib, to the executable. It also adds the source directory to the include directories, allowing the compiler to find header files.  The libraries provide Flutter functionality and Windows API access.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Flutter library and tool build rules\nDESCRIPTION: This snippet includes the Flutter library and tool build rules by adding the flutter subdirectory.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This includes the CMake file generated for managing plugins. This file contains build rules for each plugin used in the Flutter application and adds them to the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation bundle. This file is required for internationalization support.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compiler Settings\nDESCRIPTION: This snippet defines a function that applies standard compiler settings to a given target, including C++ standard, warning levels, exception handling, and debug definitions.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project for Flutter Windows runner\nDESCRIPTION: This snippet initializes the CMake project with a minimum required version and specifies the languages used (CXX for C++). It defines the project name as \"runner\".\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process.  This ensures compatibility with the CMake features used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory Properties\nDESCRIPTION: This snippet sets the `RUNTIME_OUTPUT_DIRECTORY` property for the executable target using `set_target_properties`.  This moves the unbundled executable to a subdirectory to prevent users from running it directly.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries and Include Directories (CMake)\nDESCRIPTION: Links the Flutter executable with necessary libraries, including the Flutter engine, the Flutter wrapper application, and the dwmapi library for Desktop Window Manager API access. It also adds the project's source directory to the include path, allowing source files to locate project-specific headers.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Defines a static library `flutter_wrapper_plugin` that includes core and plugin wrapper sources.  Standard settings are applied, and it is configured to be position-independent code with hidden C++ visibility. It links against the `flutter` interface library and includes the wrapper's include directory. Finally, it depends on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library to the data directory in Profile and Release build configurations. This library contains pre-compiled code for faster execution.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing runtime targets\nDESCRIPTION: This snippet installs the runtime targets, including the main binary, ICU data file, and Flutter library. These files are essential for running the application and are copied to the specified installation directories.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the languages used. It also sets variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"provider_counter\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.provider_counter\")\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the CMake project, specifying the project name and supported languages. This sets up the basic project structure and enables CMake to manage the build process.  The project name is set to \"varfont_shader_puzzle\" and the supported languages are CXX.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(varfont_shader_puzzle LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: Initializes the CMake project, sets the minimum required CMake version, specifies the project name and supported languages (CXX). It also defines variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"varfont_shader_puzzle\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.varfont_shader_puzzle\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables pointing to the Flutter library (`libflutter_linux_gtk.so`), ICU data file (`icudtl.dat`), project build directory, and AOT library (`libapp.so`). These variables are published to the parent scope for use in other parts of the build system.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Generated Plugins Inclusion CMake\nDESCRIPTION: Includes the generated plugins CMake file, which manages the building and integration of Flutter plugins into the application. This file is typically generated by Flutter's build system.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Path\nDESCRIPTION: This snippet sets the runtime path for the executable to load bundled libraries from the lib/ directory relative to the binary using CMAKE_INSTALL_RPATH.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Creates a static library `flutter_wrapper_plugin` from the specified C++ wrapper source files. It applies standard settings, sets position-independent code, configures visibility, links to the flutter INTERFACE library, and includes the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a generated configuration file (generated_config.cmake) from the ephemeral directory. This file likely contains settings and definitions provided by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake. It sets the CMake policy version to a range between 3.14 and 3.25.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library in Profile and Release configurations only.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies in CMake\nDESCRIPTION: This section uses `find_package` and `pkg_check_modules` to find and import system-level dependencies, specifically GTK. The `pkg_check_modules` command imports the GTK library as an imported target named `PkgConfig::GTK`. Requires the PkgConfig package.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings Function\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` that applies common compile features, options, and definitions to a specified target. This includes setting the C++ standard to C++17, enabling warnings, disabling exceptions, and defining debug symbols for debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This code handles the installation of Flutter assets. It first removes the existing flutter_assets directory and then re-copies the directory to avoid stale files from previous builds.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target - CMake\nDESCRIPTION: This snippet defines the executable target with source files.  It's important to include `main.cc`, `my_application.cc`, and the generated plugin registrant file.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory - CMake\nDESCRIPTION: This snippet sets the runtime output directory for the executable to a subdirectory to avoid accidental execution of the unbundled copy. This ensures the application is run from the installed bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros in CMake\nDESCRIPTION: This snippet disables Windows macros that collide with C++ standard library functions by defining the NOMINMAX preprocessor macro. This prevents potential naming conflicts and ensures proper compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to provide include directories and link libraries to other targets that depend on Flutter.  It includes the ephemeral directory for headers and links against the Flutter library .lib file.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Unicode Definition CMake\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support for the project.  This ensures that the application handles Unicode characters correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: Copies the native assets to the installation directory. This is essential for the application to function correctly after installation.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to 3.14. This ensures that the project can be built using CMake 3.14 or later.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: This links the application executable target with the Flutter library and the GTK library.  `flutter` and `PkgConfig::GTK` are added as private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: CMake Disable Windows Macros\nDESCRIPTION: This snippet disables potentially conflicting Windows macros with C++ standard library functions using the NOMINMAX definition. This prevents compilation errors or unexpected behavior when using standard C++ functions.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake using `cmake_policy(SET CMP0063 NEW)`. This ensures compatibility and adherence to modern CMake standards.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter assets directory\nDESCRIPTION: This snippet removes any existing assets directory and then installs the new assets directory to the data directory within the bundle. This ensures that the assets are up-to-date.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' custom target. This ensures that the Flutter engine is built before any target that depends on the 'flutter' interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies (GTK)\nDESCRIPTION: This snippet uses the pkg-config tool to find and import the GTK library as a required dependency.  It relies on the pkg_check_modules function.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory, containing the application-specific build rules (CMakeLists.txt), to the project. This handles the building of the application itself.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: This snippet includes the `flutter/generated_plugins.cmake` file, which manages building the plugins and adding them to the application. It uses the `include` command to incorporate the plugin build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Bundle Directory\nDESCRIPTION: This snippet removes the existing bundle directory before each install, ensuring a clean build bundle. It uses the file(REMOVE_RECURSE) command.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Library as Subdirectory\nDESCRIPTION: This snippet adds the Flutter library as a subdirectory to the project, allowing CMake to build the Flutter engine and related components.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings and Preprocessor Definitions\nDESCRIPTION: Applies standard build settings to the executable. It also adds preprocessor definitions to expose Flutter version information to the C++ code. The Flutter version variables (FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, etc.) are expected to be defined elsewhere, presumably by Flutter's build system.  NOMINMAX is defined to prevent conflicts between Windows macros and the C++ standard library.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Windows Specific Link Flags\nDESCRIPTION: Sets link flags for Windows to delay load 'jvm.dll'. This is required to properly load the JVM on Windows.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\tset_target_properties(${TARGET_NAME} PROPERTIES\n\t\tLINK_FLAGS \"/DELAYLOAD:jvm.dll\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Target Libraries\nDESCRIPTION: This snippet links the application target with the Flutter library and GTK library.  Dependencies are specified as PRIVATE.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Install Native Assets\nDESCRIPTION: Installs native assets provided by the build.dart script from all packages to the library directory within the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library for Profile and Release configurations to the data installation directory.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This snippet removes Flutter assets directory recursively and installs a new one to the data directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with CMake\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the languages used (CXX). It also sets the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"navigation_and_routing\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.navigation_and_routing\")\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: This command runs the Docker image built in the previous step. The `-it` flag enables interactive terminal access, and `-p 8080:8080` maps port 8080 on the host machine to port 8080 within the container.  The application inside the container will now be accessible on the host's port 8080.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/server/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -it -p 8080:8080 myserver\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` to apply standard compilation settings to a target. It sets the C++ standard, enables compiler warnings and errors, and adds optimization flags for non-Debug builds.  This function is meant to apply common build options to targets and is used by the main executable.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and including directories\nDESCRIPTION: This snippet adds dependency libraries and include directories to the executable target. It includes the Flutter engine library (`flutter`), the Flutter wrapper application (`flutter_wrapper_app`), and the dwmapi.lib library. It also adds the source directory to the include paths.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the core, plugin, and app components of the Flutter wrapper.  The `list(TRANSFORM)` command prepends the `WRAPPER_ROOT` to each source file, ensuring the correct paths are used during compilation. These wrapper sources are essential for integrating Flutter with native Windows code.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Enforcing modern CMake policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target for the application, specifying the source files that should be compiled and linked. The executable name is determined by the `BINARY_NAME` variable.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings for Flutter Windows\nDESCRIPTION: This snippet applies a standard set of build settings to the application. This is done using `apply_standard_settings(${BINARY_NAME})`. The build settings applied here are not explicitly defined but presumed to be configured elsewhere.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions\nDESCRIPTION: This snippet adds preprocessor definitions for the build version information.  These definitions make the Flutter version information available in the C++ code. `FLUTTER_VERSION`, `FLUTTER_VERSION_MAJOR`, `FLUTTER_VERSION_MINOR`, `FLUTTER_VERSION_PATCH`, and `FLUTTER_VERSION_BUILD` are variables set elsewhere in the CMake build process.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines settings for the Profile build mode, linking and compiler flags from the Release build are used in the Profile mode.  These flags include linker and compiler flags for C and C++.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Location\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the location of the Flutter Windows DLL. This path is within the ephemeral directory. The variable is then published to the parent scope for installation.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library to the data directory within the application bundle. This is done only for Profile and Release builds to improve performance.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Target Libraries\nDESCRIPTION: This snippet links the executable target with the Flutter library and the GTK library using `target_link_libraries`. It specifies that these are private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library on non-Debug builds only (Profile and Release).\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation Directory\nDESCRIPTION: This snippet sets up the installation directory and ensures a clean bundle directory before installation. It removes any existing files from a previous installation and defines the bundle directory.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Testing Server with curl\nDESCRIPTION: These curl commands send HTTP GET requests to the running server. The first command requests the root endpoint `/`, and the second requests the `/echo/<message>` endpoint. The server is expected to respond with predefined messages.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/server/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl http://0.0.0.0:8080\nHello, World!\n$ curl http://0.0.0.0:8080/echo/I_love_Dart\nI_love_Dart\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions for Flutter version\nDESCRIPTION: These lines add preprocessor definitions that expose the Flutter version information to the C++ code. This enables the application to access the version at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This installs the native assets from packages to the lib directory. This ensures native resources are packaged correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `pkg-config` to find system-level dependencies, specifically GTK.  It requires `pkg-config` and imports the GTK target for linking. This ensures that the application has the necessary system libraries available.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Applying standard compilation settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation settings to a given target, including setting the C++ standard to C++14, enabling warnings as errors, and setting optimization levels and preprocessor definitions for non-Debug builds. It takes `TARGET` as a parameter.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake policies and build configurations\nDESCRIPTION: Configures CMake policies to avoid warnings and defines build configurations (Debug, Profile, Release). It sets specific linker and compiler flags for the Profile build mode, inheriting settings from the Release build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros and Linking Libraries\nDESCRIPTION: This section disables Windows macros that may conflict with C++ standard library functions using `NOMINMAX`. It also links necessary libraries such as `flutter`, `flutter_wrapper_app`, and `dwmapi.lib`. Additionally, it specifies include directories to resolve dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Install Step as Default in Visual Studio\nDESCRIPTION: This snippet sets the CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD variable to 1. This makes the \"install\" step the default in Visual Studio, which is necessary to run the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This snippet installs any bundled libraries from plugins to the library directory. This ensures that the plugins' dependencies are included with the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing bundled libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries and installs each one to the lib directory within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring installation settings\nDESCRIPTION: Configures installation settings, including the build bundle directory, install prefix, and component settings.  It also copies executable, ICU data, Flutter library, plugin libraries and assets to the installation directory.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This snippet sets the default build type to \"Debug\" if CMAKE_BUILD_TYPE is not already defined, and it defines the allowed build types (Debug, Profile, Release).\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: Adds the executable target with specified source files, including main.cc, my_application.cc, and the generated plugin registrant.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running JSON code generator\nDESCRIPTION: This command executes the `generate` task defined in the `grinder` build system. This is likely used to automatically generate Dart code from JSON files, potentially for data serialization or API integration. It requires the `grinder` package to be installed.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub run grinder generate\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options for different build types (Debug, Profile, Release). It checks if the generator is multi-config and sets the CMAKE_CONFIGURATION_TYPES accordingly. If not multi-config, it sets the CMAKE_BUILD_TYPE to Debug and allows the user to select from Debug, Profile, and Release.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project. This includes the Flutter build system.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to locate system-level dependencies like PkgConfig and GTK. It imports the GTK target.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Loading Bundled Libraries\nDESCRIPTION: This snippet sets the CMAKE_INSTALL_RPATH to load bundled libraries from the lib/ directory relative to the binary. It ensures that the application can find its required libraries at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Target and Files\nDESCRIPTION: This snippet installs the executable target, ICU data file, and Flutter library into the appropriate destination directories within the bundle. It iterates through plugin bundled libraries and installs each one.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Preprocessor Definitions (CMake)\nDESCRIPTION: Defines preprocessor macros that embed the Flutter application's version information into the compiled executable. These macros include the full version string, as well as major, minor, patch, and build numbers.  The definitions are scoped to the `BINARY_NAME` target.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This code block sets the name of the executable file that will be created during the build process.  Changing the `BINARY_NAME` variable will change the name of the application's executable file on disk.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"provider_counter\")\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Bundle Directory\nDESCRIPTION: This code removes the existing build bundle directory at the start of the installation process to ensure a clean bundle. It uses the `file(REMOVE_RECURSE)` command within an `install(CODE)` block.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: Installs any bundled libraries for plugins to the library directory. These libraries are required for the plugins to function.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file. It is important for portability and reproducibility of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Configure CMake Policy\nDESCRIPTION: Configures CMake to use modern behaviors by setting CMP0063 to NEW, avoiding warnings with recent CMake versions.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings to the executable target, ensuring consistent compilation options and features.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Loading Bundled Libraries\nDESCRIPTION: Sets the runtime path for loading bundled libraries from the 'lib/' directory, relative to the location of the executable. This is essential for finding dynamically linked libraries required by the application.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that executes the Flutter tool backend script to assemble the Flutter library and headers. The command uses `CMAKE_COMMAND` to execute the script in the Flutter tool environment. The output files are the Flutter library, headers, and a phony file to force re-execution.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are executed before building the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets Directory\nDESCRIPTION: This snippet installs the native assets directory to the lib directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: This creates a list of header files related to the Flutter library, prepends the `EPHEMERAL_DIR` path to each, and then creates an interface library named `flutter`.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Defaults\nDESCRIPTION: This snippet makes the install step the default build action in Visual Studio and sets the installation prefix to the build bundle directory. This makes running the application easier after building it.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This defines a function `APPLY_STANDARD_SETTINGS` that applies common compile features and options to a given target. It sets the C++ standard to C++17, enables warnings as errors, and disables exceptions. It takes the target name as input.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This code ensures that the assets directory is fully re-copied on each build by first removing the existing directory and then installing the new one. This prevents stale files in the deployed application. This is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors by setting the CMP0063 policy to NEW. This avoids warnings with recent versions of CMake by enabling more modern and recommended CMake behavior.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Opting into Modern CMake Behaviors\nDESCRIPTION: Enables modern CMake policies to avoid warnings with recent CMake versions (3.14 to 3.25). This ensures compatibility with newer CMake features and avoids deprecation warnings.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths - CMake\nDESCRIPTION: This snippet defines the installation paths for the application bundle, including the data and lib directories. It also clears the bundle directory before each installation.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\" )\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This CMake command sets the minimum required version of CMake to 3.14. This ensures that the CMake build system has the necessary features and functionalities available for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This creates a static library named 'flutter_wrapper_plugin' that includes the core and plugin C++ wrapper sources. It applies standard settings, sets position-independent code and C++ visibility properties, links against the 'flutter' interface library, and adds the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies\nDESCRIPTION: This snippet explicitly opts-in to modern CMake behaviors to avoid warnings with recent versions of CMake.  It also sets the RPATH for bundled libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Modern CMake Policy\nDESCRIPTION: Explicitly opts in to modern CMake behaviors to avoid warnings with recent CMake versions. This line ensures compatibility with newer CMake features and standards.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Targets - CMake\nDESCRIPTION: This snippet defines a function APPLY_STANDARD_SETTINGS that applies common compilation features and options to a specified target. It sets the C++ standard to c++_std_14, adds compiler warnings and errors, and sets optimization flags based on the build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options\nDESCRIPTION: This snippet configures build options based on whether the generator is multi-configuration or single-configuration.  For multi-configuration generators (like Visual Studio), it sets the available configuration types. For single-configuration generators, it sets the `CMAKE_BUILD_TYPE` and allows the user to select from Debug, Profile, or Release.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings\nDESCRIPTION: This snippet configures the build environment for cross-building by setting the CMAKE_SYSROOT and related paths if the FLUTTER_TARGET_PLATFORM_SYSROOT variable is defined. It is essential for cross-compiling Flutter applications.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding definitions\nDESCRIPTION: This adds a preprocessor definition for the APPLICATION_ID, using the value defined earlier.  This allows the application to access the application ID at compile time.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory in CMake\nDESCRIPTION: This code snippet removes the contents of the build bundle directory before installation to ensure a clean build. This prevents stale files from a previous installation from causing issues. It uses the install(CODE) command to execute the file(REMOVE_RECURSE) command during the installation process.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, which ensures that the Flutter toolchain is run during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14. This ensures that the CMake version used to build the project is compatible with the features and commands used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This creates a static library named 'flutter_wrapper_app' that includes the core and application C++ wrapper sources. It applies standard settings, links against the 'flutter' interface library, and adds the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This installs the Flutter ICU data file to the `data` directory within the bundle. This file contains locale data needed by Flutter.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures compatibility and access to necessary features.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library, which is used for improved performance in Profile and Release builds. It specifies that the AOT library should only be installed in these configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that developers have a compatible CMake version installed to build the plugin.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Modern CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent CMake versions.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets Directory\nDESCRIPTION: This snippet installs the native assets directory, which contains assets provided by the build.dart script from all packages, to the specified destination directory.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: Adds preprocessor definitions to the target `${BINARY_NAME}` to embed the Flutter version information into the application. These definitions are used to compile-time constants accessible within the code. Defines FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, FLUTTER_VERSION_MINOR, FLUTTER_VERSION_PATCH, and FLUTTER_VERSION_BUILD.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library (FLUTTER_LIBRARY) to the 'lib' directory within the bundle. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: This snippet removes the existing assets directory and then re-copies the current assets directory to the installation location. This ensures that stale files are removed on each build.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This code block adds preprocessor definitions to enable Unicode support for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Add Runner Subdirectory\nDESCRIPTION: Adds the 'runner' subdirectory (containing the application's CMakeLists.txt) to the build process. This allows CMake to build the application itself.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compile Settings\nDESCRIPTION: This defines a function `APPLY_STANDARD_SETTINGS` to apply common compilation settings to a target. It sets the C++ standard to C++17, enables warnings, treats warnings as errors, disables specific warnings (4100), enables exception handling, and defines debug settings based on the build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This snippet defines a function APPLY_STANDARD_SETTINGS that applies standard compilation settings to a given target. It sets C++ standard to 17, adds compiler options for warnings, and disables exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Data Files\nDESCRIPTION: This snippet installs the executable, ICU data file, and Flutter library to their respective installation directories.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: This snippet disables Windows macros that can collide with C++ standard library functions, specifically by defining `NOMINMAX`. This is a common practice in C++ development on Windows to avoid naming conflicts. It prevents issues where Windows-defined macros with names like `min` and `max` conflict with the `std::min` and `std::max` functions from the C++ standard library.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting CMake policies and RPATH\nDESCRIPTION: This snippet sets modern CMake behaviors and configures the RPATH to load bundled libraries from the 'lib/' directory relative to the binary. This ensures that the application can find its dependencies at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and Plugins Subdirectories\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to include Flutter's build rules. It also includes the generated plugin build rules to manage building and integrating plugins into the application.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets\nDESCRIPTION: This snippet removes the existing assets directory and then installs the new assets directory to the specified destination (${INSTALL_BUNDLE_DATA_DIR}) with the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Build Configuration Definition\nDESCRIPTION: Defines the build configuration options (Debug, Profile, Release) based on whether the generator is multi-config or single-config.  This allows you to switch between different build configurations during the build process. It sets the `CMAKE_CONFIGURATION_TYPES` or `CMAKE_BUILD_TYPE` variables accordingly.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter library. This variable is then published to the parent scope for use in other parts of the build process and the install step.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated_plugins.cmake file, which manages the build process for any plugins used in the Flutter application, ensuring they are correctly compiled and linked.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory, ensuring that the application has access to the Flutter engine during runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This includes the CMake file responsible for building plugins and adding them to the application.  This allows for dynamically adding features and functionalities to the base application.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: CMake Target Configuration and Dependencies\nDESCRIPTION: This section configures the target executable, including applying standard settings, defining compilation definitions (NOMINMAX), linking required libraries (flutter, flutter_wrapper_app), adding include directories, and specifying dependencies (flutter_assemble).  The PRIVATE keyword ensures these settings are not propagated to other dependent targets.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to ensure that the application uses Unicode for all projects, supporting a wider range of characters.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration options (Debug, Profile, Release) based on whether the CMake generator supports multi-configuration builds. It sets the `CMAKE_CONFIGURATION_TYPES` or `CMAKE_BUILD_TYPE` variables accordingly.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target\nDESCRIPTION: This snippet defines the executable target for the application, specifying the source files to be compiled and linked. It also adds a compile definition for the APPLICATION_ID.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project for Flutter runner\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name with CXX language support. It sets up the foundation for building the Flutter Windows application runner.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Interface Include Directories\nDESCRIPTION: Sets the include directories for the 'flutter' interface library.  This specifies where the compiler should look for header files when compiling code that depends on the 'flutter' library.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target in CMake\nDESCRIPTION: This code defines the executable target for the application using `add_executable`. It specifies the binary name and lists the source files to be included in the build. It adds a preprocessor definition for the APPLICATION_ID. The standard build settings are applied to the binary.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the specified destination (${INSTALL_BUNDLE_DATA_DIR}) with the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking dependencies to target\nDESCRIPTION: This snippet links the Flutter library and the GTK library to the application target. It specifies that these libraries are private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet includes the Flutter build rules by adding the `flutter` subdirectory. It locates the Flutter-managed directory and includes it in the build process. This allows CMake to manage the Flutter-related build tasks.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining a Function to Apply Standard Settings\nDESCRIPTION: This CMake function `APPLY_STANDARD_SETTINGS` applies standard compilation features, options, and definitions to a given target. It uses C++17 standard, sets warning levels, disables specific warnings, enables exception handling, and defines conditional debug symbols.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`. It sets the include directories to the ephemeral directory and links against the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This snippet includes the generated plugin build rules from `flutter/generated_plugins.cmake`, which manage the building and integration of plugins into the application.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets Directory\nDESCRIPTION: This snippet installs the native assets directory, copying assets generated by the build process into the destination library folder.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the generated Flutter library and header files. This ensures that the Flutter library is assembled before any targets that depend on it are built.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins - CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, which handles building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory Properties\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the executable, placing it in a subdirectory to prevent users from running the unbundled copy. The application should be launched from the installed bundle to function correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and C++ wrapper sources.  This target triggers the custom command defined above, which builds the Flutter application components.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining standard compilation settings\nDESCRIPTION: Defines a function, APPLY_STANDARD_SETTINGS, to apply common compilation features, options, and definitions to a specified target.  It sets C++ standard to 17, disables exceptions, and defines debug configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific settings and dependencies. The `include` command incorporates the configurations from `generated_config.cmake` located in the `ephemeral` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' target, ensuring that the Flutter assets are built before the executable is linked.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command that runs the Flutter tool backend to assemble the Flutter library and related files. It sets up the environment variables and executes the tool_backend.bat script with the necessary arguments.  The output files are the Flutter library, headers, and wrapper sources. A phony output is used to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interacting with Dart\nDESCRIPTION: This snippet represents the JavaScript code that interacts with Dart code using the `@js.JSExport()` annotation. It shows how JavaScript functions can call and use the Dart functions exported via JS Interop.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/element_embedding_demo/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Find the JS code that interacts with Dart in `web/js/demo-js-interop.js`.\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to a specified target, including C++ standard (cxx_std_14), compiler warnings (-Wall, -Werror), and optimization flags (-O3) for non-Debug builds, and the NDEBUG definition for non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory.  The ICU data file contains locale data for the application.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Assembly in CMake\nDESCRIPTION: This code adds a dependency on the `flutter_assemble` target to ensure that the Flutter assembly process is executed before building the application. This is crucial for generating the necessary Flutter assets.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Assets\nDESCRIPTION: Installs the Flutter assets (e.g., images, fonts) to the data directory within the application bundle. It first removes any existing assets to ensure a clean install.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: This snippet uses PkgConfig to find the GTK library, marking it as a required dependency and importing the GTK target.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application. It uses the `include` command to incorporate the CMake code from the specified file.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard to C++17, adding compiler options for warnings and exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function\nDESCRIPTION: This defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features, options, and definitions to a target.  It sets C++ standard to 17, adds compiler warnings and exception handling configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Dependencies\nDESCRIPTION: This snippet defines installation rules for the executable, ICU data file, Flutter library, and bundled plugin libraries.  It installs these files to specific destinations.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: This snippet adds an interface library named `flutter`.  It sets the include directories and link libraries for the interface library.  It also adds dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This code block determines and sets the build configuration types (Debug, Profile, Release) based on whether the generator is multi-config or single-config. If no build type is specified, it defaults to 'Debug'.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Flutter Subdirectory Inclusion CMake\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build, integrating the Flutter build system.  This assumes that Flutter's build files are located in the `./flutter` subdirectory.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories\nDESCRIPTION: This snippet configures the installation directories for the application's runtime components, including the executable, ICU data file, Flutter library, and plugin libraries. It uses the `install` command to copy these files to the appropriate locations.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This snippet creates a static library for the Flutter wrapper app. It includes core and app source files, applies standard settings, links to the Flutter library, and adds include directories and dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Defines a static library named 'flutter_wrapper_plugin' that includes the core and plugin C++ wrapper sources. Standard settings are applied, position-independent code is enabled, visibility is set to hidden, and it is linked against the Flutter interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library to the data directory for Profile and Release builds. This library is the compiled Dart code for the application.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the installation prefix directory. This is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses the 'pkg_check_modules' command to find and import required GTK, GLIB, and GIO libraries using PkgConfig.  The IMPORTED_TARGET option creates CMake targets for these libraries, allowing them to be easily linked against.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target for Flutter Windows Runner\nDESCRIPTION: This snippet adds the executable target for the Flutter Windows runner. It specifies the source files to be compiled into the executable and marks it as a WIN32 application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Command\nDESCRIPTION: Creates a custom command that runs the Flutter tool backend to assemble the Flutter library and related files. This command is triggered whenever any of its outputs are out of date. It uses the `CMAKE_COMMAND` to execute the `tool_backend.bat` script with the appropriate environment variables and configuration.  The dummy `_phony_` output ensures the command runs on every build.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Removing and Re-copying Assets Directory\nDESCRIPTION: This snippet removes the assets directory recursively before re-copying it to ensure no stale files remain from previous builds.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. Interface libraries do not contain code but are used to propagate build properties, such as include directories and link libraries, to dependent targets. This allows other libraries or executables to easily link against the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Run all integration tests (Flutter)\nDESCRIPTION: This command executes all integration tests defined within the `integration_test` directory. It uses the Flutter driver to simulate user interactions and verify app behavior.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflutter test integration_test\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated_config.cmake file from the ephemeral directory. This file contains configurations provided by the Flutter tool, such as build settings and dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet adds the Flutter library and tool build rules to the project. It specifies the location of the Flutter managed directory and adds it as a subdirectory.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs the Flutter assets to the data directory within the installation prefix.  It first removes any existing assets to ensure that stale files are not included in the final bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter application is assembled before the executable is built. This step is essential for including Flutter resources in the application.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Find GTK Package\nDESCRIPTION: Finds the GTK package using pkg-config, requiring version 3.0 or higher and importing it as a target.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and defining the project name. It also explicitly opts in to modern CMake behaviors to avoid warnings.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(gemini_tasks LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: Finds system-level dependencies using PkgConfig, specifically GTK (gtk+-3.0). It imports the GTK target for linking.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources.  This target ensures that these files are generated before any other targets that depend on them are built.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Add Dependency on Flutter Assemble (CMake)\nDESCRIPTION: Creates a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are assembled before the executable is linked. This is a crucial step for building Flutter applications.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other temporary build artifacts. This is crucial for accessing Flutter's build outputs.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros conflicting with C++\nDESCRIPTION: This snippet disables Windows macros that collide with C++ standard library functions.  It defines the `NOMINMAX` macro, preventing the Windows headers from defining `min` and `max` macros, which can conflict with the C++ `std::min` and `std::max` functions. The macro is made private to the target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories in CMake\nDESCRIPTION: This code sets the installation directories for data and libraries within the bundle. It defines `INSTALL_BUNDLE_DATA_DIR` and `INSTALL_BUNDLE_LIB_DIR` relative to the `CMAKE_INSTALL_PREFIX`. These variables are used in subsequent `install` commands.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.  Minimum version is set to 3.14.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Standard Settings Function CMake\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` that applies common compilation features, options, and definitions to a target. This includes setting the C++ standard to C++17, enabling warnings, disabling exceptions, and defining the `_DEBUG` macro for Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Game Level Definition with Achievement IDs in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to define a `GameLevel` with associated achievement IDs for both iOS and Android. These IDs can be used to award achievements when the player reaches a specific level in the game.  The `achievementIdIOS` and `achievementIdAndroid` parameters correspond to the achievement IDs set up in App Store Connect and Google Play Console, respectively. The `GameLevel` is part of a system to track game progress.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nGameLevel(\n  number: 1,\n  difficulty: 5,\n  achievementIdIOS: 'first_win',\n  achievementIdAndroid: 'sOmEtHinG',\n),\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` to prepend a prefix to each element in a list. This function is used to construct absolute paths for include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Dependency on Flutter Assemble\nDESCRIPTION: This adds a dependency on the `flutter_assemble` target, ensuring that the Flutter tool portions of the build are executed. It is necessary to prepare the Flutter assets and code before linking the final executable.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: Installs any bundled plugin libraries to the installation prefix directory. It checks if there are any PLUGIN_BUNDLED_LIBRARIES defined before attempting the install. This is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and transforms the list by prepending the `EPHEMERAL_DIR` to each header path. This ensures the compiler can locate the necessary headers during the build.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the 'data' subdirectory of the installation prefix. This is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Build Bundle Directory\nDESCRIPTION: Sets the directory where the built application bundle will be placed. This is typically next to the executable file.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Type\nDESCRIPTION: This snippet configures CMake policies to avoid warnings and sets the build type (Debug, Profile, or Release). It handles both single and multi-configuration generators and sets default build modes if not already specified.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and setting the project name to \"animations\" using the CXX language. It also sets the binary name for the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(animations LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"animations\")\n```\n\n----------------------------------------\n\nTITLE: Making Install Step Default\nDESCRIPTION: This snippet makes the 'install' step the default build target in Visual Studio. This ensures that the necessary files are copied into place to run the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: Links the executable target with the Flutter library and the GTK library found by pkg-config.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: This snippet adds the Flutter-managed directory as a subdirectory to the build, allowing the Flutter build rules to be included. It sets the `FLUTTER_MANAGED_DIR` variable to the location of the flutter directory.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: CMake Policy Configuration\nDESCRIPTION: Explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake.  This ensures compatibility with newer CMake features and best practices.  The CMake policy version is set from 3.14 to 3.25.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU data file\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: Installs the Flutter assets directory (flutter_assets) to the 'data' directory within the bundle. The directory is fully re-copied on each build to avoid stale files. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition - CMake\nDESCRIPTION: This snippet adds a preprocessor definition for the APPLICATION_ID, using the value defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This adds the Flutter managed directory (containing Flutter's build files) as a subdirectory to the CMake project.  This allows CMake to build the Flutter engine and related components.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on `flutter_assemble`, ensuring that the Flutter assets are built before the Windows runner executable. This is essential for the Flutter application to run correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Filesystem for Cross-Building\nDESCRIPTION: Configures the root filesystem for cross-building scenarios. It sets the `CMAKE_SYSROOT` and `CMAKE_FIND_ROOT_PATH` based on the `FLUTTER_TARGET_PLATFORM_SYSROOT` variable. It also configures the search paths for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (`flutter_windows.dll`) and other related paths like ICU data file, project build directory and AOT library.  These paths are then published to the parent scope so that install steps can use these values. The parent scope is set using the PARENT_SCOPE keyword. \nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Make Install Step Default in Visual Studio\nDESCRIPTION: Configures Visual Studio to make the 'install' step the default build action. This is necessary to ensure that all required files are copied to the bundle directory before running the application.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Cloud Firestore Security Rules\nDESCRIPTION: These Cloud Firestore security rules enforce access control based on user authentication. The rules ensure that users can only read, update, or delete their own data, and only authenticated users can create new documents. The rules are written in the Firestore security rules language.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_5\n\nLANGUAGE: Firestore Rules\nCODE:\n```\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Make sure the uid of the requesting user matches name of the user\n    // document. The wildcard expression {userId} makes the userId variable\n    // available in rules.\n    match /users/{userId}/{document=**} {\n      allow read, update, delete: if request.auth.uid == userId;\n      allow create: if request.auth.uid != null;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for data and library files within the build bundle. This separates data and library files for organization.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows\nDESCRIPTION: This snippet initializes the CMake project for a Flutter Windows application. It sets the minimum CMake version and declares the project name, specifying CXX as the language. It also defines the application target as a WIN32 executable and specifies the source files to be included in the build. `BINARY_NAME` should be defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings to Target\nDESCRIPTION: This snippet applies the standard build settings to the executable target using the `apply_standard_settings` function defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory within the build directory. This prevents users from accidentally running the unbundled copy of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW, explicitly opting in to modern CMake behaviors to avoid warnings with recent versions of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Defining Function list_prepend\nDESCRIPTION: Defines a CMake function `list_prepend` to prepend a prefix to each element of a list.  This function emulates `list(TRANSFORM ... PREPEND ...)` which is unavailable in CMake 3.10. It takes the list name and the prefix as arguments, modifies the list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory, providing the application with the necessary internationalization and localization data.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This installs the Flutter assets by first removing the existing directory and then copying the new assets. This ensures no stale files are left over from a previous build.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, which contains Flutter-specific build rules and configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: This snippet adds a custom command that executes the Flutter tool backend script to assemble the Flutter library and generate the required header files. A phony file is used to ensure this command runs every time, as it's difficult to track all inputs and outputs.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target\nDESCRIPTION: This snippet defines the executable target for the application, specifying the source files to be included in the build. It also applies the standard build settings and links the necessary libraries.  It explicitly names the executable with the BINARY_NAME.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Making Install Step Default\nDESCRIPTION: This code block makes the \"install\" step the default in Visual Studio and sets the installation prefix to the build bundle directory, ensuring files are copied to the output directory to facilitate running.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet installs the Flutter assets directory to the data directory in the bundle. It removes the directory recursively before copying to ensure stale files are removed.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Compiler Definitions for Flutter Versioning\nDESCRIPTION: This snippet adds preprocessor definitions to the build. It defines constants such as FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, FLUTTER_VERSION_MINOR, FLUTTER_VERSION_PATCH, and FLUTTER_VERSION_BUILD, allowing the application to access versioning information at compile time.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Installing runtime targets\nDESCRIPTION: This snippet installs the runtime targets, including the executable, ICU data file, and Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file (`generated_config.cmake`) from the ephemeral directory. This file likely contains configuration settings generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries and Include Directories - CMake\nDESCRIPTION: Links required libraries and adds include directories to the target. This ensures that the application can access the necessary dependencies. Links Flutter libraries, dwmapi.lib, and includes the source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble Target\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' target to the 'flutter' interface library.  This ensures that the 'flutter_assemble' target (which likely builds the Flutter assets and libraries) is built before anything that depends on the 'flutter' library.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory and Removing Stale Files\nDESCRIPTION: This snippet installs the Flutter assets directory and includes code to remove the existing assets directory recursively before copying the new assets. This ensures that stale files from previous builds are removed.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: iOS AdMob App ID Configuration (XML)\nDESCRIPTION: This XML snippet demonstrates how to configure the AdMob App ID in the `Info.plist` file for iOS. It defines a `<key>` named `GADApplicationIdentifier` and associates it with a `<string>` containing the AdMob App ID obtained from the AdMob console.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<key>GADApplicationIdentifier</key>\n<string>ca-app-pub-1234567890123456~0987654321</string>\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated_config.cmake file from the ephemeral directory. This file contains configuration variables provided by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This part uses pkg-config to find the GTK library.  It requires pkg-config and the gtk+-3.0 package.  It creates an IMPORTED_TARGET named PkgConfig::GTK which can be used for linking.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function\nDESCRIPTION: Defines a function called list_prepend that prepends a given prefix to each element in a list. This function is used because list(TRANSFORM ... PREPEND ...) is not available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Variables\nDESCRIPTION: Defines variables for commonly used directories within the project, such as the ephemeral directory (EPHEMERAL_DIR) and wrapper root directory (WRAPPER_ROOT).  These variables are used throughout the CMake file to reference files and directories.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend script.  This script assembles the Flutter library and headers. A phony file is used to force the command to run every time due to limitations in tracking input/output files.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This adds the executable target, specifying the source files that make up the application. The executable name is determined by the `BINARY_NAME` variable.  It includes `main.cc`, `my_application.cc`, and the generated plugin registrant file.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet defines the Flutter managed directory and adds it as a subdirectory to the project, which includes the Flutter build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules in CMake\nDESCRIPTION: This code snippet includes the Flutter library and tool build rules by adding the `flutter` subdirectory. It sets the `FLUTTER_MANAGED_DIR` variable and uses `add_subdirectory` to incorporate the build rules. This ensures that the Flutter-specific build processes are integrated into the CMake build.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Runner Subdirectory Inclusion CMake\nDESCRIPTION: Adds the application runner directory as a subdirectory to the build. This includes the application-specific CMakeLists.txt file located in the `runner` directory, which defines how the application itself is built.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix to the build bundle directory, configuring where the application will be installed during the installation process.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet configures the installation prefix, which determines where the application bundle will be created. By default, it sets the prefix to a subdirectory within the build directory.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assembly\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target. This ensures that the Flutter tool portions of the build are run before the Windows runner executable is built. It's crucial for building the Flutter application correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration types (Debug, Profile, Release) based on whether the generator is multi-config or single-config. It sets the CMAKE_BUILD_TYPE to Debug if it's not already defined and sets allowed values.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. Defines the public header files needed to use the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Libraries\nDESCRIPTION: This snippet sets the RPATH (runtime search path) for libraries, ensuring that the application can find its bundled libraries in the 'lib' directory relative to the binary at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses pkg-config to find the GTK library, marking it as a required dependency.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assemble\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter build process is run before building the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory. This file is required for internationalization support.  The destination is `INSTALL_BUNDLE_DATA_DIR` and the component is Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Finds required system packages using `pkg-config`. It checks for GTK, GLib, and GIO, importing them as imported targets.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Path to Headers\nDESCRIPTION: Prepends the ephemeral directory path to each header file in the FLUTTER_LIBRARY_HEADERS list. This ensures that the compiler can find the header files during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: This snippet links the Flutter library and GTK to the application target.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library (`libflutter_linux_gtk.so`). This library is located within the `ephemeral` directory.  The variable is then published to the parent scope for use in other build steps.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of header files associated with the Flutter library. The headers are then transformed by prepending the ephemeral directory path. This ensures that the compiler can find the necessary header files when building the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter engine. This command runs the `tool_backend.sh` script from the Flutter SDK, which generates the necessary build artifacts. The `_phony_` file ensures that the command is always executed.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Executable in CMake\nDESCRIPTION: This section configures the output directory for the executable using `set_target_properties`. It moves the executable to a subdirectory (`intermediates_do_not_run`) to prevent users from running the unbundled copy, ensuring they use the correctly bundled version for proper resource loading.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: Applies the standard build settings defined in the `APPLY_STANDARD_SETTINGS` function to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and defining the project name. It also sets the name of the final executable.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(dynamic_theme LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"dynamic_theme\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This snippet defines the build type (Debug, Profile, or Release) if CMAKE_BUILD_TYPE is not already set.  It provides options for the user to select the desired build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of header files related to the Flutter library to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are necessary for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble`. This target depends on the Flutter library, headers, and wrapper sources. This ensures that the custom command to generate these files is executed before any target that depends on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet sets the path to the Flutter library (`libflutter_linux_gtk.so`) and defines variables for other important files, such as the ICU data file and the AOT library. These variables are then published to the parent scope for use in other parts of the build process, particularly the installation step.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Flutter Windows Runner\nDESCRIPTION: This snippet adds the executable target for the Flutter Windows runner, specifying the source files to be compiled. It includes main application files, generated plugin registrant, and resource files.  BINARY_NAME is defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This code installs the AOT (Ahead-Of-Time) compiled library to the data directory, but only in 'Profile' and 'Release' configurations, skipping the Debug configuration. This is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs native assets from the build directory to the lib directory within the installation bundle. These assets may include shared libraries or other platform-specific resources.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet includes the Flutter library and tool build rules by adding the `flutter` subdirectory. It also includes the application build rules from the `runner` subdirectory, and the generated plugin build rules from `flutter/generated_plugins.cmake`.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other temporary build artifacts. This directory is used to include configuration files and locate libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to the location of the ephemeral directory. This directory contains generated files and configuration specific to the Flutter build.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Definitions\nDESCRIPTION: Defines a compile definition 'DART_SHARED_LIB' for the 'health_connect' target. This definition is used during compilation to indicate that the library is intended to be used with Dart.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(health_connect PUBLIC DART_SHARED_LIB)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This code appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are necessary for compiling code that interfaces with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Target\nDESCRIPTION: Defines a custom target named `flutter_assemble`. It depends on the Flutter library, headers, and wrapper sources, triggering the custom command to run when the target is built.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `pkg-config` to find and import necessary system libraries (GTK, GLIB, GIO) as imported targets.  These libraries are required for the Flutter application to interact with the Linux system.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the EPHEMERAL_DIR variable, pointing to the 'ephemeral' subdirectory within the current source directory. This directory typically contains generated configuration files and build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: This snippet sets the runtime output directory for the executable.  The executable will be placed in the `intermediates_do_not_run` subdirectory of the build directory, preventing it from being run directly from the build directory.  This is because it requires the bundled assets to be in the correct relative locations.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This defines a function, `APPLY_STANDARD_SETTINGS`, that applies common compilation settings to a specified target.  It sets C++ standard to C++14, enables warnings, treats warnings as errors, and sets optimization level to -O3 for non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and including directories for Flutter Windows runner\nDESCRIPTION: This snippet links necessary libraries (flutter, flutter_wrapper_app, dwmapi.lib) to the executable target and adds the source directory to the include directories. Linking external libraries and including directories allows the application to depend on and use external functionality.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the directory containing generated configuration files. This directory is relative to the current source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'.  It includes the ephemeral directory as a required include directory. It also links against a placeholder '${FLUTTER_LIBRARY}.lib', and depends on the 'flutter_assemble' target.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command\nDESCRIPTION: Creates a custom command to execute the flutter tool backend. The PHONY_OUTPUT ensures the command is always run, generating the flutter library, headers, and C++ wrapper sources using a batch script. This relies on the Flutter tool's environment and target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name, and sets the language to CXX.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(navigation_and_routing LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This creates an interface library named `flutter`. Interface libraries don't contain any code but specify include directories and linked libraries for other targets that depend on them. It also adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines the build configuration options, setting the CMAKE_BUILD_TYPE to \"Debug\" if it's not already defined. It also provides options for \"Profile\" and \"Release\" build types.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Linking Libraries and Include Directories\nDESCRIPTION: This snippet links necessary libraries and adds include directories for the Flutter Windows runner. It links Flutter-related libraries (flutter, flutter_wrapper_app) and Windows-specific libraries (dwmapi.lib). It also adds the source directory to the include path, allowing the application to find necessary header files.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: CMake Linking Libraries and Include Directories\nDESCRIPTION: This section specifies the necessary libraries and include directories required by the application. The `target_link_libraries` command links essential Flutter libraries and Windows API libraries, while `target_include_directories` adds the source directory to the include path, enabling the compiler to locate header files.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: This code block explicitly opts in to modern CMake behaviors to avoid warnings with newer versions of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration - CMake\nDESCRIPTION: This snippet sets the build type to Debug if not already specified, and defines the available build types (Debug, Profile, Release).\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Path to Headers\nDESCRIPTION: This snippet uses the `list_prepend` function to prepend the `EPHEMERAL_DIR` path to each header file in the `FLUTTER_LIBRARY_HEADERS` list, creating fully qualified paths for the header files.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target. This ensures that the Flutter tool portions of the build are executed before the application is built. `flutter_assemble` is responsible for building the Flutter assets.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for App Wrapper\nDESCRIPTION: Sets the include directories for the 'flutter_wrapper_app' library. This specifies where the compiler should look for header files when compiling the application wrapper code.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` that includes the core and plugin wrapper sources. Standard settings are applied and the library is linked against the Flutter interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Link Libraries and Include Directories\nDESCRIPTION: This CMake snippet links necessary libraries and includes directories for the target executable. It links Flutter-related libraries (flutter, flutter_wrapper_app), the dwmapi.lib (Desktop Window Manager API), and adds the source directory to the include paths. This allows the application to access Flutter's functionality and the Desktop Window Manager API.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This creates a static library named `flutter_wrapper_plugin` using the core and plugin C++ wrapper sources. It applies standard settings, sets position-independent code and hidden C++ visibility, links against the `flutter` interface library, adds include directories, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the executable target, placing the unbundled executable in a subdirectory to prevent accidental execution.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Core Sources\nDESCRIPTION: Creates a list of C++ wrapper core source files. It then transforms the list by prepending the wrapper root directory to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Prepending to Library Headers\nDESCRIPTION: Prepends the ephemeral directory path to each header file in the `FLUTTER_LIBRARY_HEADERS` list using the custom `list_prepend` function.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum CMake version and setting the project name and language (CXX). It also defines variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"desktop_photo_search\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.desktop_photo_search\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency - CMake\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter assets are built before the application is linked.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: This snippet iterates through the list of bundled plugin libraries and installs each one to the lib directory within the installation bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the flutter_windows.dll file within the ephemeral directory. This DLL contains the Flutter runtime library for Windows. The value is also set in PARENT_SCOPE so that it can be used in other parts of the project or in install steps.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This function prepends a given prefix to each element in a list. It iterates over the input list, adds the prefix to each element, and stores the modified list back into the original variable in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and the project name. It also defines variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"simplistic_editor\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.simplistic_editor\")\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets the FLUTTER_TARGET_PLATFORM variable to 'windows-x64' if it is not already defined. This provides a default target platform in case the Flutter tool does not provide one.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending to Core C++ Wrapper Sources\nDESCRIPTION: Appends source files to the `CPP_WRAPPER_SOURCES_CORE` list. These sources provide core implementations for the C++ wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation\nDESCRIPTION: This section configures the installation process, defining the build bundle directory, cleaning it before each build, and setting the installation prefix. It then installs the application, ICU data file, Flutter library, and plugin bundled libraries into the bundle directory.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` that applies common compilation features and options to a target. These include setting the C++ standard to C++14, enabling warnings as errors, and optimizing for non-Debug builds. This ensures consistency across different targets.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Runner Subdirectory\nDESCRIPTION: Adds the runner directory as a subdirectory. This integrates the application-specific build rules (defined in `runner/CMakeLists.txt`).\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the CMAKE_INSTALL_PREFIX directory.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library\nDESCRIPTION: Defines an interface library called `flutter`. This library represents the Flutter engine and its dependencies. It sets include directories and link libraries necessary for compiling against the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This code uses the `pkg_check_modules` command to find and import required system-level dependencies using pkg-config. It checks for GTK, GLIB, and GIO, importing them as imported targets for later use in linking.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines the build configuration type if it is not already set. It defaults to \"Debug\" and allows the user to choose between \"Debug\", \"Profile\", and \"Release\" modes.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend to assemble the Flutter library and headers. A phony file is used to ensure the command runs every time.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app' from the core and app C++ wrapper sources. It applies standard settings, links against the 'flutter' interface library, sets the include directories, and adds a dependency on the 'flutter_assemble' target.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: Installs any bundled libraries for plugins to the lib directory in the bundle. This is achieved using a foreach loop to iterate over the PLUGIN_BUNDLED_LIBRARIES variable.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target for Flutter Windows Runner\nDESCRIPTION: This CMake code defines the executable target for the Windows runner. It specifies the source files to be compiled into the executable.  `BINARY_NAME` is a variable defined in the top-level CMakeLists.txt. The `WIN32` option creates a Windows application executable.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set RPATH for Libraries\nDESCRIPTION: Sets the CMAKE_INSTALL_RPATH to load bundled libraries from the lib/ directory relative to the binary at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This function, `APPLY_STANDARD_SETTINGS`, applies standard compilation features, options, and definitions to a given target. It sets C++ standard to 17, adds warning levels and exception handling options, and disables exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings to Target\nDESCRIPTION: This applies the standard build settings defined in the `APPLY_STANDARD_SETTINGS` function to the application executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation\nDESCRIPTION: This snippet configures the installation process, defining the build bundle directory and ensuring it's cleaned before each installation. It initializes `CMAKE_INSTALL_PREFIX` to point to the build bundle directory if it has its default value.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target named `flutter_assemble`. This target depends on the Flutter library, headers, and C++ wrapper sources, triggering their build process when the target is built.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application. This ensures that any Flutter plugins used by the application are properly built and linked.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory within the installation prefix. This library contains the core Flutter runtime and is required for running the application.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target triggers the execution of the custom command responsible for assembling the Flutter components.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings\nDESCRIPTION: This function applies standard compile features, options, and definitions to a specified target.  It enables C++14, sets warning flags, and optimizes the build for non-Debug configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Finds and imports system-level dependencies using pkg-config. This ensures that the required libraries (GTK, GLIB, GIO) are available and properly linked.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Sysroot\nDESCRIPTION: This conditional block sets up the root filesystem for cross-building. It defines CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable.  It also configures the search modes for programs, packages, libraries, and includes during cross-compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings defined in the `APPLY_STANDARD_SETTINGS` function to the application target.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions. It also sets the CMAKE_INSTALL_RPATH to load bundled libraries from the 'lib/' directory relative to the binary.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target\nDESCRIPTION: This snippet defines the executable target for the application. It specifies the source files to be included in the build, including main.cc, my_application.cc, and the generated plugin registrant file.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Core)\nDESCRIPTION: This defines the core C++ wrapper source files (`core_implementations.cc` and `standard_codec.cc`) and prepends `WRAPPER_ROOT` to their paths.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Flutter Library Headers\nDESCRIPTION: Prepends the `EPHEMERAL_DIR` to each header file in the `FLUTTER_LIBRARY_HEADERS` list. This ensures that the compiler can find the header files.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the current CMake project. This includes the necessary build rules and dependencies for the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Project Initialization & Executable Definition (CMake)\nDESCRIPTION: Initializes the CMake project, specifies CXX as the language, and defines the executable target for the Flutter Windows runner. It includes source files such as 'flutter_window.cpp', 'main.cpp', 'utils.cpp', 'win32_window.cpp', the generated plugin registrant, a resource file, and a manifest file.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`.  It specifies the include directories and link libraries required for consuming the Flutter library. It also adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: Includes a generated CMake configuration file located in the ephemeral directory. This file contains configurations specific to the Flutter tool and project setup. It allows the CMake script to leverage configurations set by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the AOT library to the 'lib' directory within the bundle, but only if the build type is not Debug. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' target to the 'flutter' library.  This ensures that the Flutter library is assembled before any target that depends on the 'flutter' interface library.  This ensures that the flutter library is built before the target requiring the interface.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Option\nDESCRIPTION: This snippet checks if the CMake generator is multi-configuration. If so, it sets the available configuration types to Debug, Profile, and Release. If not, and if the CMAKE_BUILD_TYPE is not already set, it defaults to Debug, allowing selection of Debug, Profile, or Release build modes.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Link Libraries and Set Includes\nDESCRIPTION: This adds required libraries (`flutter`, `flutter_wrapper_app`, and `dwmapi.lib`) for linking and sets the include directories. It ensures the Flutter application can access necessary functions and headers from the Flutter engine and Windows API.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This conditional snippet installs bundled plugin libraries, if they exist, to the `${INSTALL_BUNDLE_LIB_DIR}` directory. The libraries are part of the 'Runtime' component. This provides necessary plugin dependencies to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent CMake versions. Specifically, it sets the `CMP0063` policy to `NEW`.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: These CMake commands add an interface library named 'flutter', specify include directories for the interface, and link the Flutter library. This setup provides the necessary headers and library to dependent targets without creating a separate build artifact.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This CMake function, `list_prepend`, adds a specified prefix to each element of a given list. It is used as a substitute for `list(TRANSFORM ... PREPEND ...)` which isn't available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: Applies a set of standard build settings to the 'flutter_wrapper_plugin' library. This is likely a custom function defined elsewhere in the project.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` using the core and app wrapper sources. It applies standard settings, links against the `flutter` interface library, and adds the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter library file. This path is relative to the ephemeral directory. The PARENT_SCOPE option makes this variable available in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the build system has the necessary features to properly configure the project.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Add Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support in the project. This ensures that the application correctly handles Unicode characters.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated_config.cmake file, which is expected to be located in the ephemeral directory. This file likely contains configuration variables and settings generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: This section defines a CMake interface library named `flutter`.  It specifies include directories and link libraries for the interface. The `INTERFACE` keyword means no actual library file is built here, but other targets can link to this interface to inherit these settings. Dependencies on GTK, GLIB, and GIO are also added through PkgConfig.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: This snippet removes and re-copies the flutter_assets directory on each build to avoid stale files using `file(REMOVE_RECURSE)` and `install(DIRECTORY)`. The flutter assets are copied to bundle data directory.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This CMake function `list_prepend` prepends a specified prefix to each element in a given list. It iterates through the list, adds the prefix to each element, and then updates the original list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake. It sets the CMP0063 policy to NEW.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Application Wrapper Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app' using the core and app wrapper sources. Applies standard settings, links against the flutter interface library, and includes the wrapper include directory.  Depends on flutter assemble target.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding executable target\nDESCRIPTION: This snippet adds the executable target for the application, specifying the source files to be included. The executable name is determined by the `BINARY_NAME` variable.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file (used for internationalization) to the data directory within the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting up Cross-Building Environment\nDESCRIPTION: This snippet sets up the environment for cross-building by defining the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable. It configures the search paths for programs, packages, libraries, and include files.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assembly Target\nDESCRIPTION: Defines a custom target named `flutter_assemble` which depends on the Flutter library, headers, and wrapper sources. This target ensures that the Flutter library and related files are built before other targets that depend on them. The `DEPENDS` keyword specifies the dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (`flutter_windows.dll`) and sets it in the parent scope for installation. This ensures the library is available during the build and installation phases.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable to point to the ephemeral directory, which contains generated configuration files and the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration options, specifically setting the CMAKE_BUILD_TYPE to \"Debug\" if it's not already defined. It also sets the possible values for CMAKE_BUILD_TYPE to \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to run the Flutter tool backend. This command generates the Flutter library, header files, and wrapper sources. The `PHONY_OUTPUT` ensures that the command runs every time.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the executable target, placing the executable in a subdirectory to avoid accidental execution of the unbundled copy.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper App Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_app`. It includes the core and app wrapper sources, applies standard settings, links against the flutter library, sets include directories, and adds a dependency on flutter_assemble.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. This allows other libraries and executables to link against the Flutter engine without directly linking against the implementation details.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation\nDESCRIPTION: This section configures the installation process. It defines the bundle directory, handles default installation prefix, and removes the existing bundle directory at each build.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding executable for Flutter Runner\nDESCRIPTION: This CMake code defines the executable for the Flutter runner.  It adds the listed C++ source files, a resource file, and a manifest file to the executable target. The BINARY_NAME variable should be defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Deploying to GitHub Pages\nDESCRIPTION: This snippet shows how to deploy the built demos to the `gh-pages` branch of a GitHub repository. It requires that the local repository is connected to the remote repository and that the user has push access.\nSOURCE: https://github.com/flutter/samples/blob/main/web/readme.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git push origin gh-pages:gh-pages\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the build. Ensures that the CMake version used is at least 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`.  This allows other targets to link against the Flutter library and use its headers. It sets include directories and link libraries for the interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Plugin)\nDESCRIPTION: This defines the plugin-specific C++ wrapper source file (`plugin_registrar.cc`) and prepends `WRAPPER_ROOT` to its path.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter tool is run as part of the build process, compiling dart code.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the location of the ephemeral directory, which contains generated configuration files. It defines the location of dynamically generated files used during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory within the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This code adds the Flutter managed directory as a subdirectory to the CMake project.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: This snippet disables the Windows NOMINMAX macro that can collide with C++ standard library functions. This prevents potential naming conflicts.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable, indicating the directory containing C++ client wrapper code. This is used to locate the source files for the wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory Variable\nDESCRIPTION: Defines the location of the ephemeral directory where generated files are stored. This directory is relative to the current source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies using PkgConfig\nDESCRIPTION: This section uses `pkg_check_modules` to find and import system-level dependencies like GTK, GLIB, and GIO.  It requires the `PkgConfig` package and checks for the existence of the GTK+-3.0, glib-2.0, and gio-2.0 modules. IMPORTED_TARGET creates CMake targets that can be linked to later.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Appending and Transforming Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. Then, it transforms the list by prepending the `EPHEMERAL_DIR` path to each header file name.  This ensures the compiler can find the header files during compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysroot\nDESCRIPTION: This snippet sets up the sysroot for cross-building using FLUTTER_TARGET_PLATFORM_SYSROOT. It sets the CMAKE_SYSROOT, CMAKE_FIND_ROOT_PATH, and search modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to the Target in CMake\nDESCRIPTION: This code links the necessary libraries to the application target using `target_link_libraries`. It links the `flutter` library and the GTK library (`PkgConfig::GTK`) as private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Append Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the FLUTTER_LIBRARY_HEADERS variable. These headers define the API for interacting with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Installation Directory\nDESCRIPTION: Configures the installation directory and ensures a clean bundle directory for each build by removing the existing directory.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are assembled before the executable is built.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Executable Definition - CMake\nDESCRIPTION: Defines the executable target using the variable `${BINARY_NAME}`. Includes source files for the application and generated plugin registrant.  `add_executable` creates the target executable.  `${BINARY_NAME}` is typically defined in the top-level CMakeLists.txt file. This adds source files to be compiled and linked into the application.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command that runs the Flutter tool backend to generate the Flutter library and headers. The command uses a phony output file to force execution every time. It sets the FLUTTER_TOOL_ENVIRONMENT and calls tool_backend.bat.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter Windows DLL. It also sets the scope to PARENT_SCOPE, making it available to parent CMake contexts.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Files\nDESCRIPTION: This snippet installs the application executable, ICU data file, and Flutter library to the specified installation directories.  Each installation is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency (CMake)\nDESCRIPTION: This snippet adds a dependency on `flutter_assemble`. This ensures that the Flutter tool is run as part of the build process. This step is essential for assembling the Flutter application's assets and code into a form suitable for deployment.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter App for Android\nDESCRIPTION: This command builds the Flutter application for Android as an app bundle and opens the folder containing the generated bundle. This bundle can be uploaded to the Google Play Store for distribution. App bundles are the recommended format for Android app distribution.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nflutter build appbundle && open build/app/outputs/bundle/release\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the path to the ephemeral directory, which contains generated configuration files and other temporary build artifacts. This directory is used to store files generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings to Target\nDESCRIPTION: Applies the standard compilation settings to the defined executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named 'flutter_assemble' that depends on the Flutter library and headers. This target ensures that the custom command to assemble the Flutter library is executed before any targets that depend on it.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Core Wrapper Sources\nDESCRIPTION: Appends the names of core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` list. These sources provide essential functionality for interfacing with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Library\nDESCRIPTION: Adds a shared library named 'health_connect' and specifies the source file './health_connect.c'. This creates the compiled library that the Flutter plugin will use.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(health_connect SHARED\n  \"./health_connect.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Phony Output File Property\nDESCRIPTION: Sets the `SYMBOLIC` property for a phony output file, forcing the custom command to run every time due to the absence of a reliable input/output list from the flutter tool. This ensures that changes in the Flutter toolchain are always reflected in the build.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assembly Command\nDESCRIPTION: Adds a custom command to run the Flutter tool backend. This command generates the Flutter library, headers, and wrapper sources. It utilizes the `FLUTTER_TOOL_ENVIRONMENT` and executes a batch script in the Flutter tools directory. The `_phony_` output ensures the command runs every time.  The command outputs the Flutter library, header files, and C++ wrapper sources.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum CMake version required to build the project.  Ensures compatibility with the CMake features used in the build script.  It sets the minimum version to 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This adds a preprocessor definition for the application ID, which is used in the source code. It uses the value of the `APPLICATION_ID` variable defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: This snippet links the Flutter and GTK libraries to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Building the Server's Docker Image\nDESCRIPTION: This snippet shows the commands to build the server's Docker image using the Dockerfile in the server directory. The image is tagged as `my_project_server`.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd my_project/server\ndocker build . -t my_project_server\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Mode\nDESCRIPTION: This snippet defines the linker and compiler flags for the Profile build mode, setting them to be the same as the Release mode. This ensures consistent optimization and linking behavior for profiling builds.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This code creates an interface library named `flutter`. It specifies the include directories and link libraries required to use the Flutter library. This allows other targets to link against the Flutter library without needing to know its exact location.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: Defines the executable target with the name specified by `BINARY_NAME`. It lists the source files to be compiled and linked into the executable. These include main.cc, my_application.cc and the generated plugin registrant file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Type\nDESCRIPTION: This snippet defines the build type (Debug, Profile, Release) if not already specified. It sets the CMAKE_BUILD_TYPE cache variable, allowing the user to choose the desired build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library (`libflutter_linux_gtk.so`). Also sets `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` variables.  The `PARENT_SCOPE` option makes these variables available in the parent scope (likely the main CMakeLists.txt file).\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, and sets the project language to C++. It also defines the binary name of the application executable.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(isolate_example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"isolate_example\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains settings specific to the Flutter environment and build configuration, such as the target platform and build type.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assembly for runner\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are built before the runner executable is built. `flutter_assemble` is likely a custom target defined elsewhere that handles the Flutter-specific build steps.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This code sets the build bundle directory where the executable and its dependencies will be placed. It determines the directory based on the target file directory of the binary.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL. This path is then published to the parent scope for use during the installation step.  It also sets `FLUTTER_ICU_DATA_FILE` and other paths that are important for installation.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application. This integrates plugin support into the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet defines an interface library named 'flutter'. It adds include directories and links against the flutter library's .lib file, which is necessary for compiling against the Flutter engine's headers. It also establishes a dependency on the `flutter_assemble` custom target, ensuring that the Flutter library is built before any target that links against it.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Checking Angular Version\nDESCRIPTION: This command checks the version of the Angular CLI, Node, Package Manager (npm), and Operating System. It is a prerequisite to ensure that the required versions of these tools are installed for building and running the project.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/ng-flutter/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ng version\n```\n\n----------------------------------------\n\nTITLE: Installing AOT library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library on non-Debug builds (Profile and Release). AOT compilation improves performance and is typically used for production builds.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the FLUTTER_LIBRARY_HEADERS variable. These headers define the public API of the Flutter engine for Linux.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules and Application Subdirectory\nDESCRIPTION: This snippet includes the Flutter build rules by adding the `flutter` subdirectory, and it adds the application's subdirectory (`runner`) to the build process. It defines the flutter managed directory before adding it.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform Variable\nDESCRIPTION: Sets the FLUTTER_TARGET_PLATFORM variable to 'windows-x64' if it's not already defined.  This provides a fallback configuration for older versions of the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure Cross-Building Settings\nDESCRIPTION: Configures the root filesystem for cross-building by setting CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH, and configuring the search modes for programs, packages, libraries, and includes. This is conditionally executed based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory. This provides the core Flutter runtime. The destination is `INSTALL_BUNDLE_LIB_DIR` and the component is Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings for Flutter Runner\nDESCRIPTION: This applies a standard set of build settings. These settings can be customized or removed for applications with specific build requirements. The apply_standard_settings macro is assumed to be defined elsewhere.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project\nDESCRIPTION: This snippet defines the CMake project named 'simple_shader' and specifies CXX as the language. It's a foundational step for any CMake project, declaring its name and the languages used in the project.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(simple_shader LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the 'generated_config.cmake' file from the ephemeral directory. This file is generated by the Flutter tool and contains platform-specific build configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assembly\nDESCRIPTION: This line adds a dependency on the flutter_assemble target, which represents the Flutter tool build process. This ensures the Flutter assets are built before the runner.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs native assets from a specified directory to the installation library directory.  This includes platform-specific libraries required by Flutter plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Tool Backend\nDESCRIPTION: Adds a custom command to run the Flutter tool backend. It sets a phony output to force the command to run every time. It uses the `CMAKE_COMMAND` to execute the Flutter tool with the specified environment and arguments.  The `VERBATIM` argument ensures that the command is passed to the shell exactly as written, without any CMake interpretation.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find GTK, GLIB, and GIO system libraries using `PkgConfig`. It sets up imported targets for these libraries, which are then used to link against them.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Variables\nDESCRIPTION: These CMake commands define variables for the Flutter library, ICU data file, project build directory, and AOT library. These variables are published to the parent scope for use in install steps. They point to the core components needed by the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an INTERFACE library named 'flutter'. This library represents the Flutter engine and is used to link against other targets. It sets include directories and link libraries for the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Assembly Dependency\nDESCRIPTION: Adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are executed.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter assembly process is run before building the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: Installs native assets to the library directory. Native assets are provided by build.dart in packages.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Install Application Executable\nDESCRIPTION: Installs the application executable to the installation prefix, which is the application bundle directory.  The component is set to 'Runtime'.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug) - CMake\nDESCRIPTION: This snippet installs the AOT library to the bundle's lib directory, but only if the build type is not Debug.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard compilation settings to the created executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Executable Definition\nDESCRIPTION: This CMake snippet sets the minimum required CMake version, defines the project name, and adds the executable target. The executable name is determined by the BINARY_NAME variable defined in the top-level CMakeLists.txt. It also lists source files required to build the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory - CMake\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build.  It's crucial for integrating the Flutter build system into the CMake process.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command to run the Flutter tool's backend script.  This command generates the Flutter library and headers. The output files `${FLUTTER_LIBRARY}` and `${FLUTTER_LIBRARY_HEADERS}` are the output of the command. `_phony_` ensures the command runs every time.  It executes the shell script `tool_backend.sh` with specific environment variables and parameters.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory to the CMake project.  This allows CMake to process the CMakeLists.txt file located in the runner directory, responsible for application build.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. Interface libraries are used to group include directories and link libraries without creating a real library file. This allows other targets to link against Flutter without building it directly.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This code ensures that the assets directory is fully re-copied on each build to prevent stale files. It removes the existing directory and then installs the current assets.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: These snippets define the installation directories for data and libraries. INSTALL_BUNDLE_DATA_DIR is set to CMAKE_INSTALL_PREFIX/data, and INSTALL_BUNDLE_LIB_DIR is set to CMAKE_INSTALL_PREFIX, specifying where data and library files will be installed.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assemble\nDESCRIPTION: This creates a custom command that runs the Flutter tool to assemble the Flutter library and related files. It uses a phony output file to ensure the command runs every time. The command executes the `tool_backend.bat` script with the specified Flutter target platform and configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This snippet sets the path to the Flutter library and other relevant files (ICU data file, build directory, AOT library), publishing them to the parent scope for use in installation steps. These paths are essential for linking the Flutter engine and application code.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the specified destination (${INSTALL_BUNDLE_LIB_DIR}) with the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory. This file contains locale data required by the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper App Library Target\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_app` that includes the core and app wrapper sources. It applies standard settings, links to the Flutter library, includes the wrapper include directory, and adds a dependency on `flutter_assemble` custom target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including generated plugin rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application. This file is expected to be located in the `flutter` subdirectory.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings and Version Definitions\nDESCRIPTION: This snippet applies a set of standard build settings to the executable. It also adds preprocessor definitions to embed the Flutter version information into the application during compilation, allowing the application to access versioning metadata at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This code includes the generated plugin build rules for managing plugins within the application.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID.  This allows the application code to access the application ID at compile time.  The APPLICATION_ID variable is defined earlier in the file.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Finding system-level dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to find system-level dependencies, specifically PkgConfig and GTK.  It imports the GTK target for linking.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Configuration\nDESCRIPTION: This snippet initializes the CMake project with the minimum required version, project name, and plugin name. It also sets the language to CXX.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin_windows/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nset(PROJECT_NAME \"federated_plugin_windows\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed\nset(PLUGIN_NAME \"federated_plugin_windows_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifies the minimum required CMake version, sets the project name to 'simplistic_editor', and indicates that the project uses C++.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(simplistic_editor LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: This snippet defines the build configuration (Debug, Profile, Release) if not already specified. It sets the CMAKE_BUILD_TYPE variable with a default value of 'Debug' and provides options for other build types.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter` and configures its include directories and link libraries. This library acts as a dependency for other targets that need to link against the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable file that will be created during the build process.  The `BINARY_NAME` variable is used to specify the output filename.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"simplistic_calculator\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper Plugin Library Target\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_plugin` that includes the core and plugin wrapper sources. It applies standard settings, sets position-independent code and hidden CXX visibility, links to the Flutter library, includes the wrapper include directory, and adds a dependency on `flutter_assemble` custom target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Compiler Definitions for Flutter Version\nDESCRIPTION: This section sets preprocessor definitions to expose Flutter version information to the C++ code. The snippet defines constants related to the Flutter version and its components (major, minor, patch, and build numbers). This information can be utilized within the application to handle version-specific logic or for debugging purposes.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Run integration tests separately (Flutter)\nDESCRIPTION: This command runs integration tests separately using a custom driver file and target application test. This allows more control over the testing process, enabling the user to specify different driver files and test targets.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive --driver=integration_test/driver.dart --target=integration_test/app_test.dart\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library\nDESCRIPTION: This snippet defines a static library named 'flutter_wrapper_app'. It includes core wrapper sources and application wrapper sources. Standard settings are applied to it, and it links against the 'flutter' interface library and includes wrapper include directories. It also depends on the `flutter_assemble` custom target.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter runtime library to the lib directory in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake to use for the project. This ensures that the build system has the necessary features to process the CMakeLists.txt file correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position independent code and hidden visibility, and links the library to the `flutter` interface library. It also sets the include directories and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake.  It also sets the rpath.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings (CMake)\nDESCRIPTION: Applies a set of standard build settings to the specified executable target. This likely includes common compiler flags and other project-level configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. It sets the CMP0063 policy to NEW.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the Ahead-of-Time (AOT) compiled library, but only in Profile and Release configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation Directories\nDESCRIPTION: This code sets up the installation directories for the application bundle. It defines where the executable, data files, and libraries should be installed.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Variables\nDESCRIPTION: This snippet initializes the CMake project, sets the binary name and application ID. It also enables modern CMake behaviors and configures the RPATH to load bundled libraries. It defines the minimum CMake version, project name, binary name, and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"gemini_tasks\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.gemini_tasks\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function named list_prepend that prepends a given prefix to each element in a list. This is a workaround for older CMake versions that don't have the list(TRANSFORM ... PREPEND ...) command.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Include Directories\nDESCRIPTION: Specifies the libraries to link against the executable. It includes `flutter`, `flutter_wrapper_app`, and `dwmapi.lib`. It also adds the source directory to the include paths, enabling the compiler to find the necessary header files.  `${CMAKE_SOURCE_DIR}` is the top level directory of the CMake project.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library, ICU data file, project build directory, and AOT library.  These variables are published to the parent scope for use in other CMake files.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Generating Flutter Samples Index using Grinder - Bash\nDESCRIPTION: This snippet shows the commands to fetch dependencies and generate the Flutter samples index using the Grinder build system. It first retrieves the necessary packages using `dart pub get`, then executes the `generate` task to create the index in the `./web` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/web/samples_index/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ dart run grinder generate\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Plugin Sources\nDESCRIPTION: Creates a list of C++ source files for the plugin wrapper and prepends the wrapper root directory path to each. This file is specifically for plugin registration.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library. This command executes the `tool_backend.sh` script in the Flutter toolchain with the necessary environment variables and parameters. The output of the command includes the Flutter library and header files, as well as a phony file to ensure the command runs every time.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Flutter Samples Index with Grinder - Bash\nDESCRIPTION: This snippet shows the command to build the Flutter samples index into a publishable directory using Grinder. The `build-release` task compiles the index and outputs the complete built version to the `./public` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/web/samples_index/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run grinder build-release\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the location of the C++ client wrapper directory. This directory contains the C++ code that wraps the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings (CMake)\nDESCRIPTION: This snippet applies a set of standard build settings to the executable. It leverages a custom CMake function called `apply_standard_settings`. This function is assumed to be defined elsewhere and provides a standardized configuration for the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings\nDESCRIPTION: This snippet defines settings for the Profile build mode, setting linker and compiler flags to be the same as the Release build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file using `include(flutter/generated_plugins.cmake)`.  This file contains the build rules for the Flutter plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend script to assemble the Flutter engine.  This command generates the Flutter library and header files. A phony file is used as an output to force the command to always run since a full input/output list can't be obtained from the flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the lib directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend script. This script generates the Flutter library and headers. A phony file is used to force the command to run every time. The command uses the FLUTTER_TOOL_ENVIRONMENT and requires the FLUTTER_TARGET_PLATFORM and CMAKE_BUILD_TYPE variables.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target with the specified binary name and source files. It also applies standard build settings and links the target against Flutter and GTK libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application. It ensures that all necessary plugins are linked and configured correctly during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the core, plugin, and app wrapper components. It then transforms the lists by prepending the wrapper root directory to each source file path.  These sources provide a C++ interface to the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: This defines lists of C++ source files for the core, plugin, and app components of the C++ wrapper. It then prepends the wrapper root directory to each file path using `list(TRANSFORM ...)`. These source files implement the interface between Flutter and the host platform.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the main executable to the installation prefix directory. This is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries for Flutter Runner\nDESCRIPTION: These lines link necessary libraries to the executable.  It includes flutter, flutter_wrapper_app, and dwmapi.lib.  Also adds the source directory to include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Conflicting Windows Macros\nDESCRIPTION: This snippet disables Windows macros that collide with C++ standard library functions by defining `NOMINMAX`. This prevents compilation errors due to naming conflicts.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are required for compiling Flutter plugins and applications.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: This shell command builds a Docker image from the current directory, using the Dockerfile present. The `-t` flag tags the image with the name `myserver`. This step prepares the application for containerized deployment.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/server/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker build . -t myserver\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target flutter_assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter library and headers are generated before any target that depends on them. It uses `add_custom_command` to define the command that generates these files.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Variables to Parent Scope\nDESCRIPTION: Publishes the `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` variables to the parent scope, making them available to other CMake files. This is typically done for install steps or other dependent configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet copies the native assets provided by the build.dart from all packages.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Runner\nDESCRIPTION: This snippet initializes the CMake project, defines the application target, and specifies the source files to be compiled. It also sets Windows-specific configurations. The `BINARY_NAME` variable is used to dynamically name the executable. It defines the project using CMake and adds source files to the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Build Dependencies\nDESCRIPTION: This snippet adds a build dependency on `flutter_assemble`, ensuring that Flutter-specific tasks are performed during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining In-App Purchase Product ID in Dart\nDESCRIPTION: This Dart code snippet defines a constant string `productId` representing the product ID for an in-app purchase, specifically for ad removal. This value should match the product ID configured in both the Google Play Console and App Store Connect. It's crucial for correctly identifying and retrieving the in-app purchase details from the respective app stores. Replace `'remove_ads'` with the appropriate identifier.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n/// The representation of this product on the stores.\nstatic const productId = 'remove_ads';\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet defines a custom command that invokes the Flutter tool backend to assemble the Flutter library and related files. It sets a phony output to force the command to run every time. It defines the command to run `tool_backend.bat` with specific parameters.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory to the directory where the executable will be located. This is used for installing support files next to the executable, enabling it to run in place.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"<$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a compile definition for the application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target\nDESCRIPTION: This snippet defines the executable target, specifying the source files to be compiled into the application. It utilizes the BINARY_NAME variable defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Pigeon Code Generation Command\nDESCRIPTION: This command uses the Flutter Pigeon package to generate platform channel code for Dart, Objective-C, and Java.  It takes the Pigeon schema as input and generates the necessary files for interoperability between Flutter and native platforms.  This facilitates communication using higher-order functions and data classes instead of serialized primitives.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/books/flutter_module_books/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub run pigeon --input pigeon/schema.dart \\\n  --dart_out lib/api.dart \\\n  --objc_header_out ../ios_books/IosBooks/api.h \\\n  --objc_source_out ../ios_books/IosBooks/api.m \\\n  --objc_prefix BK \\\n  --java_out ../android_books/app/src/main/java/dev/flutter/example/books/Api.java \\\n  --java_package \"dev.flutter.example.books\"\n```\n\n----------------------------------------\n\nTITLE: CMake Standard Settings Application\nDESCRIPTION: This snippet applies the standard build settings to the defined executable. It uses a predefined function `apply_standard_settings` to configure build parameters for the Flutter application. This streamlines the project setup and ensures consistent settings across the Flutter project.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: This creates a custom command that runs the Flutter tool backend to generate the Flutter library, headers, and C++ wrapper sources.  The command uses a phony output file to ensure it runs every time. It sets environment variables for the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the location of the ephemeral directory. The ephemeral directory is used to store generated files and configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build, including the Flutter build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Bash Script: Fetch Packages and Setup Dependencies\nDESCRIPTION: This bash script automates the process of fetching Flutter packages and setting up dependencies for both iOS and Android platforms. It navigates to the `flutter_module` directory, runs `flutter pub get`, opens the Android project in Android Studio (macOS only), navigates to the iOS project, installs CocoaPods dependencies, and opens the Xcode workspace.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/fullscreen/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  #!/bin/bash\n  set -e\n\n  cd flutter_module/\n  flutter pub get\n\n  # For Android builds:\n  open -a \"Android Studio\" ../android_fullscreen # macOS only\n  # Or open the ../android_fullscreen folder in Android Studio for other platforms.\n\n  # For iOS builds:\n  cd ../ios_fullscreen\n  pod install\n  open IOSFullScreen.xcworkspace\n  # Then, click \"Run\" in Xcode to launch the app into your Simulator or device\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the custom command to assemble the Flutter engine is executed before any targets that depend on the `flutter` library.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build.  Ensures compatibility with the CMake features used in this file.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Flutter Version\nDESCRIPTION: This snippet adds preprocessor definitions related to the Flutter version. These definitions are used during compilation to embed the Flutter version information into the application. The variables `FLUTTER_VERSION`, `FLUTTER_VERSION_MAJOR`, `FLUTTER_VERSION_MINOR`, `FLUTTER_VERSION_PATCH`, and `FLUTTER_VERSION_BUILD` are assumed to be defined elsewhere.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Executable Definition (CMake)\nDESCRIPTION: This snippet initializes the CMake project and defines the executable target for the Flutter application. It specifies the minimum CMake version, project name, and source files. The executable target is named `${BINARY_NAME}` which should be defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library in CMake\nDESCRIPTION: This command installs the Flutter library to the specified lib directory. Ensures that the flutter library exists in the final application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named flutter. It specifies include directories and links against the Flutter library and system dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version\nDESCRIPTION: This snippet specifies the minimum required CMake version for the build process. It ensures that the CMake version is at least 3.10 for compatibility with the commands used in the file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file, which contains configuration variables provided by the Flutter tool. This file is located within the ephemeral directory.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project.  Ensures that the CMake version is compatible with the commands and features used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Managed Directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build, allowing Flutter's build rules to be included.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Profile build mode settings\nDESCRIPTION: This snippet defines the settings for the Profile build mode, copying the flags from the Release build mode. It ensures that the Profile build uses similar linker and compiler flags as the Release build.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web App in Chrome\nDESCRIPTION: This command demonstrates how to run the Flutter web application in the Chrome browser. It uses the `flutter run` command with the `-d chrome` flag to specify the target device.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/element_embedding_demo/README.md#_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: This snippet defines a list of Flutter library headers and prepends the ephemeral directory path to each header. These headers are required for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This section defines build configuration options (Debug, Profile, Release) and sets the build type based on the generator. If a multi-configuration generator is used, it sets the available configuration types. Otherwise, it sets the CMAKE_BUILD_TYPE to Debug and defines the available options.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Executable Definition\nDESCRIPTION: This snippet initializes the CMake project, defines the executable with source files and resource files specific to the Flutter Windows runner. It sets up the project and specifies the entry point for compilation and linking.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assemble\nDESCRIPTION: This creates a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target triggers the custom command defined earlier to assemble these components.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses `pkg-config` to find required system-level dependencies such as GTK, GLIB, and GIO.  These libraries are essential for building the Flutter engine on Linux with GTK support. The `REQUIRED IMPORTED_TARGET` options ensures that the build fails if the packages are not found and that imported targets are created for these packages.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Removing Bundle Directory on Install\nDESCRIPTION: Removes the entire bundle directory before each installation to ensure a clean install. This prevents stale files from previous builds.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the Ahead-Of-Time (AOT) compiled library to the lib directory of the bundle, but only for non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet conditionally installs the AOT library only for non-Debug builds.  It checks the `CMAKE_BUILD_TYPE` variable and skips installation if it matches \"Debug\".\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command that runs the Flutter tool backend to assemble the Flutter library and related files.  It uses a phony output to ensure the command runs every time, as there is no full input/output list from the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory as Subdirectory\nDESCRIPTION: This snippet sets the FLUTTER_MANAGED_DIR variable and adds the directory as a subdirectory.  This incorporates the Flutter build rules into the main CMake project.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options such as Debug, Profile, and Release. It sets the `CMAKE_BUILD_TYPE` if it's not already defined, allowing the user to specify the build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This snippet includes the `flutter/generated_plugins.cmake` file, which likely contains build rules for managing Flutter plugins. This allows CMake to handle the plugin building and integration process.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Sets the installation directories for data and libraries within the bundle.  These variables are used in subsequent install commands.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: Iterates through a list of bundled libraries (PLUGIN_BUNDLED_LIBRARIES) and installs them to the 'lib' directory within the bundle. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: Initializes the CMake project, specifying the minimum required CMake version, project name, and supported languages (CXX). It sets the binary name and application ID for the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"infinite_list\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.infinite_list\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app`. It includes the core and app wrapper sources. Standard settings are applied using `apply_standard_settings`.  It links against the `flutter` interface library and adds the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` to apply standard compiler features and options to a target. It sets the C++ standard to 17, disables specific warnings, enables exception handling (/EHsc), disables exceptions internally (_HAS_EXCEPTIONS=0), and enables debug mode definitions for Debug configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This code includes a CMake configuration file named `generated_config.cmake` located in the `EPHEMERAL_DIR`. This file likely contains configurations generated by the Flutter tool, such as platform-specific settings and dependency information.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the build process. This ensures that the CMake version used is compatible with the commands and features used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting up Cross-Building - CMake\nDESCRIPTION: This snippet configures the build for cross-compilation, setting the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on FLUTTER_TARGET_PLATFORM_SYSROOT. It defines search paths for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This function applies standard compiler features, options, and definitions to a target.  It sets C++14 standard and adds compiler warnings and optimizations based on build type. This helps ensure consistent build settings across the project.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing assets directory\nDESCRIPTION: This snippet installs the assets directory. It first removes the existing directory to avoid stale files and then copies the entire assets directory from the build directory to the installation directory. This ensures the application uses the latest assets.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to the absolute path of the 'ephemeral' directory within the current source directory. This directory contains generated files and configurations used during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This code block initializes the CMake project, specifying the minimum required CMake version, the project name, and the programming languages used (CXX for C++).\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(provider_counter LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures compatibility with the CMake features used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the build bundle directory where the relocatable application bundle will be created. Also sets the CMAKE_INSTALL_PREFIX to the bundle directory.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Defines the path to the Flutter library (flutter_windows.dll) and other important files such as the ICU data file and the AOT library. It then makes these variables available in the parent scope so that they can be used by other parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Define Profile Build Mode Settings\nDESCRIPTION: Defines specific linker and compiler flags for the 'Profile' build mode, mirroring the settings used for the 'Release' build mode. This ensures consistent optimization and linking behavior for profiling builds.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Serving Flutter Samples Index Locally using Webdev - Bash\nDESCRIPTION: This snippet demonstrates how to serve the generated Flutter samples index locally using the `webdev` package. It first activates grinder globally to be able to use it's tasks, and then starts the web server to serve the index.\nSOURCE: https://github.com/flutter/samples/blob/main/web/samples_index/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate grinder\n$ webdev serve\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` using the core and plugin wrapper sources. It applies standard settings, sets position-independent code and hidden CXX visibility, links against the `flutter` interface library, and adds the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Mode\nDESCRIPTION: This snippet sets the linker and compiler flags for the Profile build mode to be the same as the Release build mode. This ensures that the Profile mode benefits from the same optimizations as the Release mode.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_app`. It includes the core and app wrapper sources, applies standard settings, links against the Flutter interface library, specifies the include directories, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `find_package` to locate system-level dependencies, specifically PkgConfig and GTK. It requires these packages to be installed on the system.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform (Fallback)\nDESCRIPTION: Sets the `FLUTTER_TARGET_PLATFORM` variable to `windows-x64` if it's not already defined. This provides a default target platform for older versions of the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Project\nDESCRIPTION: Defines the project name and supported languages. It sets the project name to \"runner\" and specifies that the project uses C++ as a language. Project name can be configured via BINARY_NAME in the top-level CMakeLists.txt.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Libraries\nDESCRIPTION: This snippet installs the bundled libraries of plugins if PLUGIN_BUNDLED_LIBRARIES is defined.  These are placed in the installation library directory.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapper Root Directory\nDESCRIPTION: This sets the `WRAPPER_ROOT` variable to the 'cpp_client_wrapper' subdirectory within the ephemeral directory. This directory contains the C++ wrapper code that interfaces with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the `FLUTTER_LIBRARY` variable, which points to the location of the `libflutter_linux_gtk.so` library. It also sets other important paths like ICU data file, build directory, and AOT library path for parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the `ephemeral` directory within the current source directory. This directory likely contains generated files and configuration specific to the Flutter build process.  The variable is used to reference these files throughout the build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix to the build bundle directory if it's initialized to the default value. This ensures that the application is installed in the correct location.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Core C++ Wrapper Sources\nDESCRIPTION: Defines lists for C++ wrapper source files for core functionalities, plugins, and the application itself. The paths to these source files are then updated to include the wrapper root directory.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins CMake\nDESCRIPTION: Includes the 'flutter/generated_plugins.cmake' file, which contains build rules for handling Flutter plugins. This ensures that plugins are built and linked correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library and other related files. The paths are set in the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Install Prefix\nDESCRIPTION: This snippet sets the `CMAKE_INSTALL_PREFIX` to the `BUILD_BUNDLE_DIR` if it's initialized to the default value. This ensures that the application is installed in the correct location.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Target\nDESCRIPTION: This snippet installs the runtime target (${BINARY_NAME}) to the specified destination (${CMAKE_INSTALL_PREFIX}) with the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' directory as a subdirectory to the project, which contains the application build rules (see runner/CMakeLists.txt).\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of header files related to the Flutter library and prepends the ephemeral directory path to each of them using the previously defined `list_prepend` function. These headers are essential for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines the build type (Debug, Profile, or Release) if it is not already set. It provides a way to force the build type and sets available options.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend script.  This script generates the Flutter library and headers.  The `_phony_` file ensures the command runs every time, as there's no way to specify full input/output dependencies to the flutter tool currently.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This snippet defines variables related to the Flutter library, including the path to the library (`FLUTTER_LIBRARY`), the ICU data file (`FLUTTER_ICU_DATA_FILE`), the project build directory (`PROJECT_BUILD_DIR`), and the AOT library (`AOT_LIBRARY`). These variables are then published to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL within the ephemeral directory and propagates it to the parent scope for use in install steps.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for data and libraries. The data directory will contain assets and the AOT library, while the library directory will contain the Flutter library and plugin libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the path to the ephemeral directory, which contains generated configuration files and libraries. This allows for easy access to these generated resources during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings defined in the APPLY_STANDARD_SETTINGS function to the application's executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support in the project. The `-DUNICODE` and `-D_UNICODE` flags are added to the compiler definitions.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library header files and prepends the ephemeral directory path to each header file path.  This prepares the headers for inclusion in other targets.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds required system-level dependencies using the PkgConfig module. These dependencies are GTK, GLIB, and GIO, which are essential for the Flutter Linux GTK application.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter engine. This command executes a shell script (`tool_backend.sh`) from the Flutter toolchain, passing necessary arguments like the target platform and build type. A phony file is created to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This section uses `find_package` and `pkg_check_modules` to locate and import the GTK library, which is a system-level dependency. It ensures that the required GTK version is available.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin' from the core and plugin wrapper sources.  This library provides a C++ interface for Flutter plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses PkgConfig to find system-level dependencies, specifically GTK+-3.0. It imports the GTK target for linking.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This installs the AOT library for Profile and Release builds only. This step optimizes performance for production-like environments.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: This snippet creates a static library named `flutter_wrapper_plugin`. It includes the core and plugin wrapper sources, applies standard settings, sets properties for position-independent code and CXX visibility, links against the Flutter interface library, specifies the include directories, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Variables\nDESCRIPTION: This snippet sets the installation variables for creating a relocatable bundle, including the build bundle directory, install prefix, data directory, and library directory. It also handles the case where CMAKE_INSTALL_PREFIX is initialized to the default value.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the necessary libraries to the executable target, including the Flutter library and the GTK library (through PkgConfig). It specifies that these libraries are private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory. This includes the core Flutter engine library.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file. It takes the version number as input.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of header files required by the Flutter library.  These headers are then prepended with the correct path using the `list_prepend` function.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Define Preprocessor Definitions\nDESCRIPTION: This snippet defines preprocessor definitions that inject version information into the compiled code. It ensures the Flutter application has access to its version at runtime. Version components include major, minor, patch, and build numbers.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions for UNICODE and _UNICODE. This ensures that the application is built with Unicode support.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Run tests with coverage (Flutter)\nDESCRIPTION: This command runs all tests in the project and generates coverage data.  The coverage data is stored in the `lcov.info` file in the coverage directory.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nflutter test --coverage\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the WRAPPER_ROOT variable to the 'cpp_client_wrapper' subdirectory within the ephemeral directory. This directory contains the C++ client wrapper code.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies\nDESCRIPTION: Uses pkg-config to find the GTK, GLIB, and GIO system libraries. The REQUIRED keyword ensures that the build will fail if these libraries are not found.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs the native assets to the library directory. The assets are copied recursively from the ${PROJECT_BUILD_DIR}native_assets/linux/ folder.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting binary name\nDESCRIPTION: This snippet sets the name of the executable that will be created for the application.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"navigation_and_routing\")\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Definitions for Flutter Version\nDESCRIPTION: This snippet defines preprocessor definitions for the Flutter version information. This information is used by the application to identify the Flutter version it is running on. It defines the full version string and also major, minor, patch, and build version numbers separately.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring System Root for Cross-Building\nDESCRIPTION: This snippet sets the system root for cross-building, using the `FLUTTER_TARGET_PLATFORM_SYSROOT` variable.  It also configures the search paths for finding packages, libraries, and includes within the sysroot. This configuration allows building for different target platforms.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Headers\nDESCRIPTION: Defines a list of Flutter library header files.  The list_prepend function is used to prepend the full path to each header file using the EPHEMERAL_DIR.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Adding executable target for Flutter Windows application\nDESCRIPTION: This snippet defines the executable target for the Flutter Windows application. It specifies the source files that will be compiled into the executable.  `${BINARY_NAME}` is used to reference the executable name defined elsewhere (likely in a top-level CMakeLists.txt). WIN32 indicates it's a Windows executable.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring cross-building sysroot\nDESCRIPTION: This conditional block sets up the CMake sysroot configuration for cross-building. It configures CMAKE_SYSROOT, CMAKE_FIND_ROOT_PATH and related variables which specify where the target system's libraries and headers are located during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL. It also publishes this variable, along with `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY`, to the parent scope, making them available to other CMake scripts.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element in a list. This is used to add a common path to a list of header files. The function iterates through the input list, prepends the specified prefix to each element, and creates a new list with the modified elements.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Link Libraries\nDESCRIPTION: Sets the link libraries for the `flutter` interface library. This tells the linker to link against the `libflutter_linux_gtk.so` library and the GTK, GLIB, and GIO libraries when building code that depends on the `flutter` interface. This ensures that the necessary symbols are available at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This code sets the path to the Flutter library (`libflutter_linux_gtk.so`) and other related files, such as the ICU data file, AOT library and publishes them to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Finds system-level dependencies using `pkg-config`. It specifically looks for GTK version 3.0, and imports the GTK target.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation Directories\nDESCRIPTION: This snippet sets up installation directories and defines the bundle directory.  It removes the bundle directory and sets the data and lib directories for installation.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings\nDESCRIPTION: This snippet sets the linker and compiler flags for the Profile build mode, making them identical to the Release build mode settings.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Set Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: This includes the `generated_config.cmake` file from the ephemeral directory. This file likely contains configuration options provided by the Flutter tool, which are essential for building the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up RPATH\nDESCRIPTION: This snippet sets the RPATH (Run-Time Search Path) for the executable, ensuring that the application can find its shared libraries at runtime. The RPATH is set to '$ORIGIN/lib', which means the libraries are expected to be in the 'lib' subdirectory of the executable's directory.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target\nDESCRIPTION: Defines the executable target, specifying the source files to be compiled and linked.  The name of the executable is determined by BINARY_NAME.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Install Bundled Libraries\nDESCRIPTION: Installs bundled libraries to the lib directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated configuration file from the ephemeral directory. This file is typically generated by the Flutter tool and contains platform-specific settings and configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Include Directories\nDESCRIPTION: Sets the include directories for the `flutter` interface library. This tells the compiler where to find the Flutter header files when compiling code that depends on the library. The `ephemeral` directory is included as it contains generated header files.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command to assemble the Flutter library using the `tool_backend.sh` script from the Flutter tools. The command depends on a phony file to ensure it runs every time the build is executed.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Install Plugin Bundled Libraries\nDESCRIPTION: Installs any bundled libraries provided by plugins to the library directory within the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the generated Flutter library and headers. This target ensures that the Flutter library is built before any other targets that depend on it.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This snippet sets the build type if not already set. It defaults to \"Debug\" and allows the user to choose between \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Plugin Bundled Libraries\nDESCRIPTION: Installs the bundled libraries from plugins to the library directory. This ensures that plugin dependencies are included in the installation. It checks if `PLUGIN_BUNDLED_LIBRARIES` is defined before installing. The destination is `INSTALL_BUNDLE_LIB_DIR` and the component is Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. This library is used to specify include directories and link libraries for targets that depend on the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating flutter_wrapper_plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin-specific C++ wrapper sources. Sets properties like position independent code and hidden CXX visibility. Links the library against the Flutter interface library and adds the necessary include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command to run the Flutter tool backend script. This command generates the Flutter library, headers, and wrapper sources. A phony output file is used to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform Fallback\nDESCRIPTION: Sets a fallback value for the `FLUTTER_TARGET_PLATFORM` variable if it is not already defined. This ensures that a default target platform (windows-x64) is used if the Flutter tool doesn't provide one.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings to the application's executable target, using the APPLY_STANDARD_SETTINGS function defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project, including the Flutter build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Flutter Version\nDESCRIPTION: This snippet adds preprocessor definitions to the executable target, making the Flutter version information available during compilation. It defines FLUTTER_VERSION and its major, minor, patch, and build components.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings in CMake\nDESCRIPTION: This CMake code applies a standard set of build settings to the executable target. This is a custom function, presumably defined elsewhere, to apply commonly used configurations. It can be removed if the application requires different settings.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' directory as a subdirectory. The runner directory likely contains the application-specific code and resources.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and dependencies. The path to the generated configuration is specified using the EPHEMERAL_DIR variable.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Wrapper Sources List\nDESCRIPTION: These CMake commands create lists of C++ wrapper source files for core implementations, plugin registration, and Flutter engine/view controller. The lists are then transformed to include the full path to each file, prepending the wrapper root directory.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: This creates a static library named `flutter_wrapper_app` using the core and app C++ wrapper sources. It applies standard settings, links against the `flutter` interface library, adds include directories, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This code defines a custom command that runs the Flutter tool backend to assemble the Flutter library. It depends on the `FLUTTER_LIBRARY` and `FLUTTER_LIBRARY_HEADERS` files. The command uses the `FLUTTER_TOOL_ENVIRONMENT` and other variables to execute the tool backend script.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: This CMake command includes the generated configuration file from the ephemeral directory. This file contains configurations provided by the Flutter tool, which are essential for the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: CMake Standard Settings Application\nDESCRIPTION: This snippet applies the standard build settings to the defined executable.  It sets up common compiler flags and configurations necessary for building the Flutter Windows application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Cloning a specific Flutter sample using SVN\nDESCRIPTION: This command demonstrates how to download a single example from the Flutter samples repository using SVN.  This is useful for minimizing download size when only a specific sample is needed. It checks out the `provider_shopper` sample.\nSOURCE: https://github.com/flutter/samples/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsvn co https://github.com/flutter/samples/trunk/provider_shopper\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. It appends header files to FLUTTER_LIBRARY_HEADERS, prepends the ephemeral directory to those headers, sets the include directories for the interface library, links against the Flutter library (.lib), and adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs the native assets (e.g., DLLs) from the build directory to the install bundle library directory.  These assets are generated by build.dart in each package.  NATIVE_ASSETS_DIR is set to the intermediate location where these assets are gathered during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the lib directory within the installation prefix, but only on non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: Sets the name of the executable file to \"desktop_photo_search\". This defines the output filename for the application.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"desktop_photo_search\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory to each entry in the list. Then creates an INTERFACE library named `flutter`, includes the header directories, and links the appropriate library.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version, project name, and languages used (CXX). It also defines variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"deeplink_store_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.deeplink_store_example\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find required system-level dependencies such as GTK, GLIB, and GIO. These dependencies are essential for building the Flutter engine and its GTK integration. The IMPORTED_TARGET option creates CMake imported targets for each package.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Appending and Transforming C++ Wrapper Sources (Plugin)\nDESCRIPTION: Appends a list of plugin-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_PLUGIN` variable. Then, it transforms the list by prepending the `WRAPPER_ROOT` path to each source file name. This is done to ensure the compiler can find the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Type\nDESCRIPTION: This snippet sets the CMake build type to 'Debug' if it's not already defined and provides options for 'Debug', 'Profile', and 'Release'. This allows users to select the appropriate build mode for their development or deployment needs.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library `flutter_wrapper_app` from the core and application wrapper sources. It applies standard settings, links the library to the `flutter` interface library, sets the include directories, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Preprocessor Definitions - CMake\nDESCRIPTION: Adds preprocessor definitions to the target for the Flutter version. The definitions include version, major, minor, patch, and build numbers. These definitions are available during compilation and can be used in the C++ code to access version information.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Include Directories for Flutter Windows\nDESCRIPTION: This snippet links necessary libraries and adds include directories for the Flutter Windows application. It links the `flutter` and `flutter_wrapper_app` libraries, as well as `dwmapi.lib`. It also adds the source directory to the include paths.  `CMAKE_SOURCE_DIR` represents the root source directory of the project.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory in the CMake project.  This incorporates Flutter's build rules and generated code into the CMake build process, allowing for seamless integration with the Flutter framework.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with newer CMake versions, ensuring compatibility and best practices.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: Defines linker and compiler flags for the Profile build mode. It copies the flags from the Release build mode, ensuring consistent optimization and settings for profiling builds.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Defines the installation directories for data and libraries within the bundle. These are relative to the CMAKE_INSTALL_PREFIX.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command to assemble the Flutter library.  This command runs the Flutter tool backend script.  The command depends on a phony file to ensure it runs every time. This command executes the tool_backend.sh script with the necessary environment variables and parameters to build the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This function applies standard compilation settings to a target. It sets the C++ standard to C++14, adds compiler warnings, treats warnings as errors, and enables optimization flags for non-Debug builds. This function takes the target name as input.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app' from the core and application wrapper sources. This library provides a C++ interface for the Flutter application runner.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: This defines a list of header files required for the Flutter library and prepends the ephemeral directory to each path. The list is later used to define include directories for targets that depend on the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Android AdMob App ID Meta-data (XML)\nDESCRIPTION: This XML snippet demonstrates how to integrate the AdMob App ID for Android by adding a `<meta-data>` element within the `AndroidManifest.xml` file. It specifies the `com.google.android.gms.ads.APPLICATION_ID` and assigns the appropriate AdMob App ID obtained from the AdMob console.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<meta-data\n   android:name=\"com.google.android.gms.ads.APPLICATION_ID\"\n   android:value=\"ca-app-pub-1234567890123456~1234567890\"/>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target `flutter_assemble` that depends on the Flutter library and header files. This ensures that the custom command to assemble the Flutter library is executed before any targets that depend on it.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to find and import the GTK library as a required dependency using PkgConfig.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet defines an interface library named `flutter`. It specifies the include directories and link libraries required for the Flutter library. It also adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Plugin Build Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Name & Application ID\nDESCRIPTION: This snippet defines the name of the executable and the GTK application identifier. The binary name is used for the on-disk name of the application and the application ID is a unique identifier for the GTK application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"provider_shopper\")\nset(APPLICATION_ID \"dev.flutter.provider_shopper\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: Installs the native assets directory to the 'lib' directory within the bundle. The native assets are provided by the build.dart script in the packages. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element of a list. This emulates the `list(TRANSFORM ... PREPEND ...)` command, which is not available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library. Also publishes important variables to the parent scope, making them available for other CMake scripts or build steps, including install.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines specific linker and compiler flags for the 'Profile' build mode, setting them to be the same as the 'Release' build mode flags for optimized performance profiling.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Tool Backend\nDESCRIPTION: This snippet adds a custom command to run the Flutter tool backend. It sets a phony output file to force the command to run every time and specifies the command to execute the tool backend with appropriate environment variables and arguments. It generates the flutter_windows.dll.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Includes in CMake\nDESCRIPTION: This snippet specifies the libraries to link against the application and adds include directories. This includes Flutter-specific libraries and application-specific dependencies. It links the executable with Flutter libraries (`flutter`, `flutter_wrapper_app`) and the Windows API library `dwmapi.lib`. It also adds the source directory to the include paths.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency in CMake\nDESCRIPTION: This CMake code adds a dependency on `flutter_assemble`. This ensures that the Flutter tool portions of the build process are executed before the executable is built. This step is crucial for building Flutter applications.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Target\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and C++ wrapper sources. This target ensures that the Flutter tool backend is run before any other target that depends on these files.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories\nDESCRIPTION: This snippet sets up installation directories and ensures the install step is the default build action. It also sets the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet configures the installation prefix, defaulting to a 'bundle' directory within the project's binary directory. It initializes the `CMAKE_INSTALL_PREFIX` cache variable if it's set to its default value. This variable dictates where the application bundle will be created during the installation process.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory. This library contains the core Flutter engine code.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library, ICU data file, project build directory, and AOT library paths. These variables are published to the parent scope for use in other CMake configurations and install steps.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: This snippet adds an interface library named `flutter`. It specifies the include directories and link libraries required for using the Flutter library in other parts of the project.  It also adds a dependency on `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring for Cross-Building\nDESCRIPTION: This snippet configures the build environment for cross-building by setting the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable. It also configures the search paths for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and app wrapper sources. It applies standard settings, links against the Flutter interface library, includes the wrapper include directory, and depends on the flutter_assemble target.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Build Bundle Directory\nDESCRIPTION: This snippet removes the build bundle directory recursively to ensure a clean build. It uses the `file(REMOVE_RECURSE)` command within an `install(CODE)` block, which is executed during the install phase.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This snippet configures build types (Debug, Profile, Release) for the project. It checks if the generator is multi-config and sets the configuration types accordingly. If not multi-config, it sets the CMAKE_BUILD_TYPE to Debug and defines the allowed build types.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Executable\nDESCRIPTION: Adds an executable target named `${BINARY_NAME}` (which is determined in the top-level CMakeLists.txt, to be 'runner.exe'). Specifies the source files that comprise the application. These source files are compiled and linked to create the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Cross-Compilation\nDESCRIPTION: This snippet configures the CMake project for cross-compilation. It sets the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables if FLUTTER_TARGET_PLATFORM_SYSROOT is defined, specifying where to find the root file system for the target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the directory containing C++ client wrapper files. This directory is used for including header files and linking libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable. This ensures that the unbundled copy is placed in a subdirectory to prevent users from running it directly. It is intended to prevent users from running the unbundled executable, as it relies on resources in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting output directory for executable\nDESCRIPTION: This snippet sets the runtime output directory for the executable to a subdirectory (`intermediates_do_not_run`) to prevent users from running the unbundled executable. This ensures that the application is run from the installed bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: This creates a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and C++ wrapper sources.  This target ensures that the custom command to generate these files is executed before any target that depends on 'flutter_assemble'.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Variables\nDESCRIPTION: These CMake commands set the directory variables for the ephemeral and wrapper directories. EPHEMERAL_DIR is set to the location of generated config files, and WRAPPER_ROOT points to the cpp client wrapper directory. These directories are crucial for locating necessary build files.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are part of the Flutter Linux embedder API.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to expose the Flutter engine's headers and linked libraries to other parts of the project. It also sets the include directories and links the necessary dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building\nDESCRIPTION: This snippet configures the build environment for cross-building, setting the system root and search paths for programs, packages, libraries, and includes.  It uses the `FLUTTER_TARGET_PLATFORM_SYSROOT` variable.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and specifying the project name and supported languages (CXX). It also sets the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"desktop_photo_search\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.desktop_photo_search\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library (if present) on non-Debug builds only. This optimizes performance but is typically not needed during development.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies\nDESCRIPTION: Uses `pkg-config` to locate and import GTK, GLIB, and GIO system libraries. These libraries are required for Flutter's GTK embedding.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, pointing to the directory containing C++ client wrapper code. These wrappers are used to interface between Flutter and native code.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Running the Compass App in Development Environment (Bash)\nDESCRIPTION: This command navigates to the app directory and runs the Flutter application in the development environment. It utilizes local data from a JSON file for development purposes. The target file is `lib/main_development.dart`.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd app\n$ flutter run --target lib/main_development.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter ICU Data File Path\nDESCRIPTION: Sets the `FLUTTER_ICU_DATA_FILE` variable to the location of the Flutter ICU data file. This file contains internationalization data required by the Flutter engine. It also publishes the path to the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings and variables specific to the Flutter environment.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the root of the bundle directory. Specifies that it is part of the \"Runtime\" component.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Target\nDESCRIPTION: This defines a custom target named `flutter_assemble`, which depends on the Flutter library, headers, and wrapper source files. It triggers the `add_custom_command` defined earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This installs the Flutter library to the install prefix.  The library enables flutter runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command to run the Flutter tool backend, which assembles the Flutter application. This command is triggered during the build process and generates the Flutter library, headers, and wrapper sources.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard, compiler options, and preprocessor definitions. Takes the target name as input.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Files\nDESCRIPTION: These `install` commands copy the executable, ICU data file, Flutter library, and plugin bundled libraries to the installation directory. The component is set to Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name\nDESCRIPTION: Sets the name of the executable file that will be created during the build process. This name is used when creating the application binary.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"infinite_list\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the application ID, making it available in the C++ code. The value of APPLICATION_ID is defined earlier in the file.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the lib directory in the bundle, but only on non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maps Web Services API Key - Dart\nDESCRIPTION: This snippet describes the need to add a Google Maps Web Services API key to the `lib/api_key.dart` file. It also emphasizes the importance of not including the Web Service API key directly in the production binary for security reasons.  A proxy service is recommended for handling authentication and API key management.\nSOURCE: https://github.com/flutter/samples/blob/main/flutter_maps_firestore/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nYou will also need to add a Google Maps \nWeb Services API key to `lib/api_key.dart`.\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that the Flutter tool backend is run before any other targets that depend on these files.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin-specific C++ wrapper sources. It applies standard settings, sets properties for position-independent code and hidden C++ visibility, links against the Flutter interface library, adds include directories, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Adding Build Dependencies\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter-specific build tasks are executed before the main application is built.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the binary name of the executable to 'deeplink_store_example'. This determines the on-disk name of the application. Changing this value will change the executable name.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"deeplink_store_example\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library acts as a placeholder for including directories and linking against the actual Flutter library. It depends on the flutter_assemble target to ensure the Flutter library is built.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Build Directory Variable\nDESCRIPTION: Sets the `PROJECT_BUILD_DIR` variable to the path of the project's build directory. This variable is then published to the parent scope for use in other build steps. It points to the `build` directory under the project root.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Executable\nDESCRIPTION: This sets the output directory for the executable to a subdirectory (`intermediates_do_not_run`) to prevent users from running the unbundled executable directly. This is because the bundled executable relies on resources in a specific relative location.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `find_package` to find the PkgConfig package and then uses `pkg_check_modules` to find the GTK library (gtk+-3.0) as a required imported target.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file.  This incorporates the build rules for any Flutter plugins used by the application. Includes the file `flutter/generated_plugins.cmake`.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the variable `EPHEMERAL_DIR` to the absolute path of the `ephemeral` directory relative to the current source directory.  This directory contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the `ephemeral` directory to each header file path.  These headers are required for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting runtime output directory\nDESCRIPTION: This snippet sets the runtime output directory for the executable.  It places the executable in a subdirectory to avoid confusion with the installed bundle. The output directory is set to a subdirectory named 'intermediates_do_not_run'.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building\nDESCRIPTION: This snippet configures the CMake environment for cross-building. It sets the CMAKE_SYSROOT and find paths based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable, enabling cross-compilation for different platforms.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: This snippet configures the Flutter library headers by appending header file names to a list and then prepending the ephemeral directory path to each header file name.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library and header files generated by the custom command. This target ensures that the Flutter library is assembled before any other targets that depend on it are built.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: iOS Platform View Setup - PlatformViewController.swift & AppDelegate.swift\nDESCRIPTION: The Swift code in `ios/Runner/PlatformViewController.swift` and `AppDelegate.swift` manages the platform channel setup, launches a native UIViewController, and returns control to Flutter when the native view is closed. These files are crucial for the native iOS integration.\nSOURCE: https://github.com/flutter/samples/blob/main/platform_view_swift/README.md#_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nThese files contain the Swift code responsible for setting up a platform\nchannel, launching a native UIViewController, and returning control to\nFlutter when finished.\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to point to the `ephemeral` directory within the current source directory. This directory typically contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Paths\nDESCRIPTION: Sets the path to the Flutter library and other related files, such as the ICU data file and the AOT library. These paths are then published to the parent scope for use in other build steps.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that all necessary components are built before the assembly process.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the variable `EPHEMERAL_DIR` to point to the `ephemeral` directory within the current source directory. This directory contains generated configuration and build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Defines a static library named 'flutter_wrapper_app' that includes the core and app C++ wrapper sources. Standard settings are applied, and it is linked against the Flutter interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version and defining the project name. It also sets variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"simple_shader\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.simple_shader\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake. It loads bundled libraries from the lib/ directory relative to the binary and sets the CMAKE_INSTALL_RPATH.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting the Binary Name\nDESCRIPTION: This sets the name of the executable that will be created for the application. Changing this value will change the on-disk name of the application.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"gemini_tasks\")\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` that includes the core and app wrapper sources. Standard settings are applied and the library is linked against the Flutter interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Variables\nDESCRIPTION: This snippet defines variables for the Flutter library, ICU data file, project build directory, and AOT library. These variables are then published to the parent scope for use in install steps.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependencies\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, which ensures that the Flutter assets are assembled before building the executable. This is crucial for including the Flutter application's resources in the final build.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend function\nDESCRIPTION: Defines a function to prepend a prefix to each element in a list.  This function replicates the behavior of `list(TRANSFORM ... PREPEND ...)` which is not available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: CMake Preprocessor Definitions for Flutter Version\nDESCRIPTION: This CMake snippet defines preprocessor macros for the Flutter version information. These definitions make the version information available within the C++ code during compilation. It uses variables like FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, etc., which are expected to be defined elsewhere in the CMake configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` to prepend a prefix to each element in a list.  This is a workaround for CMake versions older than those that support `list(TRANSFORM ... PREPEND ...)`. Takes a list name and a prefix as input. Modifies the original list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on flutter_assemble Target\nDESCRIPTION: Adds a dependency on the `flutter_assemble` custom target. This ensures that the `flutter_assemble` target is built before any target that depends on the `flutter` interface library. This guarantees that the Flutter library and headers are generated before they are used.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL file ('flutter_windows.dll') located in the 'ephemeral' directory.  This is the main Flutter library used by the application.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries and installs each one to the specified destination.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting ICU Data File Variable\nDESCRIPTION: Sets the `FLUTTER_ICU_DATA_FILE` variable to the path of the ICU data file (`icudtl.dat`). This file is located within the `ephemeral` directory and contains internationalization data required by Flutter. The variable is then published to the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Target Definition\nDESCRIPTION: This snippet initializes the CMake project, specifies the CXX language, and defines the executable target for the Flutter runner. It uses the BINARY_NAME variable (defined in the top-level CMakeLists.txt) to name the executable and lists the source files to be compiled.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings defined in the `APPLY_STANDARD_SETTINGS` function to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet defines the `BUILD_BUNDLE_DIR` variable, which specifies the directory where the built application bundle will be placed. It uses the `TARGET_FILE_DIR` generator expression to get the directory of the binary executable.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named 'flutter'. This library is used to group together the Flutter library's header files and link library. It then links the Flutter library and sets include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: Installs the Flutter assets directory to the data directory, removing the directory recursively before install.  This keeps old assets from remaining after an install.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper code. The wrapper provides an interface between the Flutter engine and native C++ code. It's used to locate the source files for creating the static libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Linking Target Libraries\nDESCRIPTION: Links the executable target with the Flutter library and the GTK library (via PkgConfig). These are private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Header Files\nDESCRIPTION: Prepends the `EPHEMERAL_DIR` path to each header file listed in `FLUTTER_LIBRARY_HEADERS`. This ensures that the compiler can find the header files during compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Including Directories in CMake\nDESCRIPTION: This CMake code links necessary libraries to the executable and includes directories. It links `flutter`, `flutter_wrapper_app`, and `dwmapi.lib`. It also includes the source directory for header files. These dependencies are required for the Flutter application to function correctly on Windows.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of Flutter library headers to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are essential for compiling Flutter plugins and applications that interact with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assemble Custom Command\nDESCRIPTION: This defines a custom command that runs the Flutter tool backend script. It is dependent on various outputs and ensures it runs every time since it uses a phony output file. It sets the environment and invokes the flutter tool using the `tool_backend.bat` script.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Data File\nDESCRIPTION: This installs the Flutter ICU data file to the data directory within the install prefix. The ICU data file is necessary for internationalization support.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins\nDESCRIPTION: This snippet includes a CMake file that manages the building of plugins and their integration into the application. This step is crucial for using Flutter plugins in the project.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the runtime output directory for the executable to avoid running the unbundled copy.  The output is placed in the `intermediates_do_not_run` subdirectory.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required CMake version, project name, and languages.  It also sets variables for the binary name and application ID which are used later in the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"asset_transformation\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.asset_transformation\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a custom CMake function `list_prepend` to prepend a prefix to each element in a list. This is used to modify lists of file paths or other string values in the CMake configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, which points to the directory containing the C++ client wrapper code. This directory contains the code that interfaces between Flutter and native Windows code. The path is relative to the ephemeral directory.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper code. The wrapper provides an interface between the Flutter engine and the native Windows platform. The path is used to locate source files and include directories related to the C++ wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to encapsulate the Flutter library and its dependencies. The include directories and link libraries are set on the interface library.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining App Wrapper Sources\nDESCRIPTION: Creates a list of C++ wrapper source files specific to the application, prepending the wrapper root directory to each entry. These source files provide functionality for the Flutter engine and view controller.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Declaring a Constant String in Dart\nDESCRIPTION: This code snippet demonstrates how to declare a constant string variable in Dart. The `const` keyword ensures that the variable's value is known at compile time and cannot be changed during runtime. The string is assigned the value 'sample'.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/shared/README.md#_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nconst like = 'sample';\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to define the interface for the Flutter engine and is linked against by other libraries and executables. Dependencies are added to this to ensure it is built.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs bundled plugin libraries, if any, to the library installation directory.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and setting include directories for Flutter runner\nDESCRIPTION: This snippet links necessary libraries (flutter, flutter_wrapper_app, dwmapi.lib) to the executable and sets the include directory to the source directory. These dependencies are linked privately, meaning they are only visible to the target.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds required system-level dependencies using the `PkgConfig` module.  Specifically looks for GTK, GLIB, and GIO libraries, and imports their corresponding targets.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows NOMINMAX macro for std library compatibility\nDESCRIPTION: This disables the `NOMINMAX` macro to prevent conflicts with the C++ standard library's `min` and `max` functions.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: CMake Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter tool portions of the build are executed. This is essential for building Flutter assets and integrating them into the application package.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory Property\nDESCRIPTION: This snippet sets the `RUNTIME_OUTPUT_DIRECTORY` property for the executable target, placing the executable in a subdirectory to avoid confusion with the bundled version.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library acts as a placeholder for including directories and linking to the actual Flutter library. It also sets the interface include directories and links to the flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory to each entry. This ensures the correct path to the headers is used during compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting AOT Library Variable\nDESCRIPTION: Sets the `AOT_LIBRARY` variable to the path of the Ahead-Of-Time compiled library (`libapp.so`). This library is located within the `build/lib` directory under the project root. The variable is then published to the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a function `list_prepend` that prepends a given prefix to each element in a list. This is used to add the path to the Flutter library headers.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: This snippet links the necessary libraries (flutter and GTK) to the application target. These libraries are added as private dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter Linux GTK shared library.  It then publishes several variables including the library path, ICU data file, project build directory, and AOT library path, to the parent scope, making them accessible in other CMake files.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings - CMake\nDESCRIPTION: Applies a standard set of build settings to the target. This function is assumed to be defined elsewhere and encapsulates common build configurations. It simplifies the CMake file by abstracting away common settings.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: CMake Disabling Windows Macros\nDESCRIPTION: This snippet disables Windows macros that may conflict with the C++ standard library. The `NOMINMAX` definition prevents `min` and `max` macros from being defined, avoiding potential naming conflicts.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This code block explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. This helps maintain compatibility and ensures the project benefits from modern CMake features.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines a list of C++ source files specific to plugin registration within the C++ wrapper. The wrapper root is prepended to the source file paths.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing the executable\nDESCRIPTION: This snippet installs the executable to the installation prefix, under CMAKE_INSTALL_PREFIX. It specifies RUNTIME destination.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration (Debug, Profile, Release) if not already specified. It sets the `CMAKE_BUILD_TYPE` variable.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory. This allows CMake to process the CMakeLists.txt file within the Flutter directory, integrating the Flutter build system into the main project.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This adds the runner directory as a subdirectory to the CMake project, which typically contains the application-specific build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Library Target\nDESCRIPTION: This snippet adds a Flutter library as an interface target and specifies the include directories and link libraries.  The library target represents the Flutter engine and allows other parts of the project to depend on it. It also adds a dependency on `flutter_assemble` custom target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Appending App Wrapper Sources\nDESCRIPTION: Appends the names of the application-specific C++ wrapper source files to the `CPP_WRAPPER_SOURCES_APP` list. These sources provide functionality for managing the Flutter engine and view controller.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Run performance tests (Flutter)\nDESCRIPTION: This command runs performance tests on a connected device. It requires specifying a driver and target file, enabling profiling and tracing startup events for accurate performance measurements. Running in profile mode on a physical device is recommended.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive --driver=integration_test/perf_driver.dart --target=integration_test/perf_test.dart --profile --trace-startup\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: This snippet adds a custom command that runs the Flutter tool backend to generate the Flutter library and headers.  It uses a phony file to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes a CMake file for managing generated plugin build rules. This allows CMake to build the plugins and add them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin' using the core and plugin wrapper sources.  Applies standard settings and sets properties for position independent code and hidden C++ visibility.  Links against the flutter interface library and includes wrapper include directory.  Depends on flutter assemble target.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Clearing and Setting Install Directories\nDESCRIPTION: These code snippets ensure a clean installation by removing the previous build bundle directory.  They also set the directories for data and libraries within the bundle.  The removal is done via `install(CODE)` to run during the install phase.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are necessary for compiling code that uses the Flutter library. `list_prepend` is then used to prepend the path to the ephemeral directory to each header file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to a given target, including C++ standard version, warning flags, optimization levels (for non-Debug builds), and preprocessor definitions (for non-Debug builds).\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Unicode Definitions\nDESCRIPTION: Adds definitions to use Unicode for all projects. This ensures that the application supports Unicode characters. Defines UNICODE and _UNICODE.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Flutter Package Dependency Installation - Shell Script\nDESCRIPTION: This shell script snippet navigates to the multiple_flutters_module directory, installs Flutter package dependencies using `flutter pub get`, and then returns to the original directory. It ensures that all necessary Flutter dependencies are installed before building and running the Android application.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/multiple_flutters/multiple_flutters_android/README.md#_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\ncd ../multiple_flutters_module\nflutter pub get\ncd -\n```\n\n----------------------------------------\n\nTITLE: Setting install prefix and bundle directory\nDESCRIPTION: This snippet sets the installation prefix and build bundle directory. It initializes the `CMAKE_INSTALL_PREFIX` to the `BUILD_BUNDLE_DIR` if it has its default value.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization CMake\nDESCRIPTION: Initializes the CMake project, specifying the minimum required CMake version, project name, and supported languages (CXX).  It also sets the binary name and opts into modern CMake behaviors.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(form_app LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"form_app\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: Sets the install prefix to the build bundle directory. This ensures that the installation files are placed next to the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'.  Interface libraries don't contain any code themselves, but are used to define the interface (include directories and link libraries) required by other libraries or executables.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable, which points to the `ephemeral` directory within the current source directory. This directory likely contains generated or temporary files related to the Flutter build process.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the root directory for the C++ client wrapper, which provides an interface between the Flutter engine and the native Windows code.  This allows interaction between Flutter code and the underlying operating system.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory Properties\nDESCRIPTION: Sets the runtime output directory for the executable to a subdirectory called `intermediates_do_not_run` within the CMake binary directory. This prevents users from running the unbundled copy of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Android and Java Dependencies\nDESCRIPTION: Conditionally links the library with 'log' for Android or finds and links with Java and JNI for other platforms. It includes the JNI include directories if not on Android.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (ANDROID)\n\ttarget_link_libraries(health_connect log)\nelse()\n\tfind_package(Java REQUIRED)\n\tfind_package(JNI REQUIRED)\n\tinclude_directories(${JNI_INCLUDE_DIRS})\n\ttarget_link_libraries(health_connect ${JNI_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Install Directories\nDESCRIPTION: Sets the installation directories for data and libraries.  These variables are used in subsequent `install` commands to specify where to copy the files.  Sets `INSTALL_BUNDLE_DATA_DIR` and `INSTALL_BUNDLE_LIB_DIR`.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet defines a custom target named `flutter_assemble`. It depends on the Flutter library, headers, and C++ wrapper sources. This ensures that these files are built before any target that depends on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This sets the installation directories for data and library files within the build bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Import Statements for AdMob (Dart)\nDESCRIPTION: These import statements are required to enable AdMob functionality in your Flutter app.  They import the `dart:io` library for platform-specific checks and the `google_mobile_ads` package for using AdMob features.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:io';\nimport 'package:google_mobile_ads/google_mobile_ads.dart';\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the library directory within the installation prefix, but only for non-Debug builds. This optimization is intended to improve performance in release builds.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This code adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target ensures that the Flutter library is assembled before other targets that depend on it are built.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file (`FLUTTER_ICU_DATA_FILE`) to the `${INSTALL_BUNDLE_DATA_DIR}`. It is part of the 'Runtime' component. This step is necessary for proper internationalization support.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This includes the `generated_config.cmake` file from the ephemeral directory. This file likely contains configuration variables generated by the Flutter tool during the build process, such as paths and settings specific to the target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a function to prepend a prefix to each element in a list. This is used because `list(TRANSFORM ... PREPEND ...)` is not available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: Includes a generated configuration file from the `ephemeral` directory. This file likely contains build settings and variable definitions provided by the Flutter tool.  This integration allows the Flutter tool to customize the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors, specifically CMP0063, to avoid warnings with newer CMake versions.  This ensures compatibility and proper handling of CMake features.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets a fallback value for the FLUTTER_TARGET_PLATFORM variable if it is not already defined. This ensures that a default platform is used if the Flutter tool does not provide one.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings\nDESCRIPTION: This snippet defines settings for the Profile build mode, copying the linker and compiler flags from the Release build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: This snippet includes the `generated_config.cmake` file, which is generated by the Flutter tool and contains platform-specific configuration settings. This file provides essential information for building the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet manages build configurations (Debug, Profile, Release) based on whether CMake is in multi-configuration mode. It sets the `CMAKE_BUILD_TYPE` if not already specified.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Starting the Angular Development Server\nDESCRIPTION: This command starts the Angular development server, allowing you to view and test the application in a browser. It automatically reloads the application when changes are made to the Angular source files.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/ng-flutter/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and C++ wrapper sources. This target triggers the custom command defined above to build the Flutter engine and wrapper libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Ephemeral Directory\nDESCRIPTION: This sets the `EPHEMERAL_DIR` variable to the 'ephemeral' subdirectory within the current source directory.  This directory is expected to contain generated configuration and build artifacts from the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet conditionally installs the AOT library if the build type is not Debug.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Platform Fallback\nDESCRIPTION: Sets a fallback value for the `FLUTTER_TARGET_PLATFORM` variable if it is not already defined. This provides a default target platform (windows-x64) when the Flutter tool doesn't provide the configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining preprocessor definitions for Flutter version\nDESCRIPTION: This snippet defines preprocessor definitions related to the Flutter version. These definitions are private to the specified executable target. They allow the C++ code to access the Flutter version information at compile time, using variables like `FLUTTER_VERSION`, `FLUTTER_VERSION_MAJOR`, etc.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode definitions\nDESCRIPTION: Adds preprocessor definitions for Unicode support to the project.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Run state management tests (Flutter)\nDESCRIPTION: This command executes state management tests using Flutter Integration Tests. It requires a driver and a target to verify state management implementation. This approach is used to ensure that the app's state behaves as expected during interactions.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nflutter drive --driver=integration_test/driver.dart --target=integration_test/state_mgmt_test.dart\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: This uses the `find_package` and `pkg_check_modules` commands to locate and import system-level dependencies, specifically GTK (gtk+-3.0).  It requires the PkgConfig package to be installed.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for all projects, ensuring that the application can handle Unicode characters correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Wrapper Sources\nDESCRIPTION: Creates a list of C++ wrapper source files specific to plugins, prepending the wrapper root directory to each entry. These source files provide plugin registration functionality.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Checking Flutter Version\nDESCRIPTION: This command checks the version of Flutter, Dart, and DevTools. It is a prerequisite to ensure that the required versions of these tools are installed for building and running the project.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/ng-flutter/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter --version\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the ephemeral directory where generated configuration files are located.  This directory is used to store files generated by the Flutter tool.  The path is relative to the CMake source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the custom command for assembling the Flutter engine is executed before any other targets that depend on these artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: These CMake commands add a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and wrapper sources. This target is responsible for triggering the Flutter assembly process.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH\nDESCRIPTION: This snippet sets the RPATH to load bundled libraries from the lib/ directory relative to the binary. This is important for finding shared libraries at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources\nDESCRIPTION: This creates lists of C++ source files for the core, plugin, and app wrappers, prepending the `WRAPPER_ROOT` path to each.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins in CMake\nDESCRIPTION: This snippet includes the `flutter/generated_plugins.cmake` file, which contains build rules for managing and adding plugins to the application. This ensures that all plugins are properly built and linked.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files.  This target is used to trigger the execution of the `add_custom_command` that assembles the Flutter library. This target ensures the Flutter library and associated headers are built before any other targets that depend on them.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This ensures that the custom command is executed before any target that depends on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Definitions\nDESCRIPTION: This snippet adds a definition for the APPLICATION_ID, making it available during compilation.  This allows the application to access its unique identifier.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Core Wrapper Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` path to each source file name in the `CPP_WRAPPER_SOURCES_CORE` list, creating absolute paths for the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compiler Settings\nDESCRIPTION: This snippet defines a function APPLY_STANDARD_SETTINGS that applies common compiler features, options, and definitions to a specified target. This ensures consistent build settings across different parts of the project, including enabling C++17 standard and disabling exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Includes\nDESCRIPTION: Links necessary libraries to the target `${BINARY_NAME}` and adds include directories. This ensures that the application has access to the required functions and header files. Includes the flutter and flutter_wrapper_app libraries as well as dwmapi.lib, and includes the source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and build artifacts. This directory is crucial for locating Flutter-specific build components.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command\nDESCRIPTION: Adds a custom command to execute the Flutter tool backend script. This script generates the Flutter library and header files.  It is forced to run every time by creating a phony output file.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This code adds definitions to enable Unicode support for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`.  Interface libraries are used to group together include directories and link libraries without creating a physical library file.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable to the installation prefix. `TARGETS ${BINARY_NAME} RUNTIME` specifies to install the runtime component of the ${BINARY_NAME} executable into a DESTINATION. The CMAKE_INSTALL_PREFIX is set in the prior step.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for the project. It defines both UNICODE and _UNICODE preprocessor macros, ensuring wide character support across the application.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Core C++ Wrapper Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` to each source file in the `CPP_WRAPPER_SOURCES_CORE` list. This ensures that the compiler can find the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to the 'ephemeral' subdirectory within the current source directory. This directory contains generated configuration files and build artifacts produced by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the runtime output directory for the executable to avoid running unbundled copies. It specifies a subdirectory within the build directory where the executable will be placed.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appending to Flutter Library Headers List\nDESCRIPTION: Appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` list. These headers are essential for compiling against the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros conflicting with C++ standard library\nDESCRIPTION: This snippet disables Windows macros that might conflict with C++ standard library functions. It prevents potential naming conflicts by defining the NOMINMAX macro.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets in CMake\nDESCRIPTION: This section installs the native assets provided by the build.dart script from all packages. It copies the directory specified by NATIVE_ASSETS_DIR to the INSTALL_BUNDLE_LIB_DIR.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: Sets the output name of the shared library to 'health_connect'. This ensures the compiled library has the correct name.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(health_connect PROPERTIES\n  OUTPUT_NAME \"health_connect\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the library directory within the build bundle, providing the core Flutter runtime for the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros for C++ Compatibility\nDESCRIPTION: This snippet disables Windows macros that can collide with C++ standard library functions. This is done by defining the `NOMINMAX` preprocessor definition.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target.  It is intended for general use cases but can be removed and customized as needed.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Prepend Path to Flutter Headers\nDESCRIPTION: Prepends the path to the Flutter Linux headers to the `FLUTTER_LIBRARY_HEADERS` variable using the custom `list_prepend` function. This ensures that the compiler can find the header files.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Install Bundle Directory\nDESCRIPTION: Defines the directory where the application bundle will be created during installation. The default location is within the project's binary directory.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the installation prefix. This file contains locale data and is necessary for proper internationalization support.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files. This directory typically contains files generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assembly\nDESCRIPTION: This adds a dependency on the `flutter_assemble` target, ensuring that the Flutter assets are built before the executable is linked. This is a crucial step for Flutter projects.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target, ensuring that the Flutter assets are built before the application is linked.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings in CMake\nDESCRIPTION: This snippet applies a standard set of build settings to the application. This allows for a consistent build environment. It's possible to remove these settings if custom build settings are needed. The `apply_standard_settings` macro applies these settings.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: Includes the generated configuration file, which is provided by the Flutter tool and contains build settings.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake features used in the build script are supported.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Install Executable Target\nDESCRIPTION: Installs the executable target to the specified destination.  This copies the application's executable file to the installation directory. The destination is `CMAKE_INSTALL_PREFIX` and the component is Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through PLUGIN_BUNDLED_LIBRARIES and installs each bundled library to the lib directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Ad Unit ID Declaration (Dart)\nDESCRIPTION: This Dart code snippet shows how the Ad Unit ID is determined based on the platform. It uses the `defaultTargetPlatform` to check if the platform is Android or iOS and assigns the appropriate Ad Unit ID. This allows for different Ad Unit IDs to be used for different platforms.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nfinal adUnitId = defaultTargetPlatform == TargetPlatform.android\n ? 'ca-app-pub-1234567890123456/1234567890'\n : 'ca-app-pub-1234567890123456/0987654321';\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This includes the generated plugin build rules from `flutter/generated_plugins.cmake`. This allows CMake to build plugins and add them to the application.  It depends on the Flutter environment being configured.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build, allowing Flutter's build system to be integrated with CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Finding System Packages\nDESCRIPTION: Uses pkg-config to find required system libraries (GTK, GLIB, GIO). The IMPORTED_TARGET option creates CMake targets for each library, allowing them to be linked against more easily.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the path to the Flutter library (`flutter_windows.dll`). It then publishes the variable to the parent scope, making it available for installation steps. The `FLUTTER_ICU_DATA_FILE` and `PROJECT_BUILD_DIR` variables are also set and exported to the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Bundled Libraries\nDESCRIPTION: This snippet installs any bundled libraries from plugins to the library directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to App Wrapper Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` path to each source file name in the `CPP_WRAPPER_SOURCES_APP` list, creating absolute paths for the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the 'ephemeral' directory within the current source directory. This directory typically contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name\nDESCRIPTION: Sets the name of the executable that will be created.  This allows you to change the on-disk name of your application's executable file. The binary name is set to \"varfont_shader_puzzle\".\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"varfont_shader_puzzle\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Executable\nDESCRIPTION: This snippet applies the standard build settings to the executable target using the `apply_standard_settings` function defined earlier. This ensures consistent compilation options for the main application executable.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros conflicting with C++ standard library\nDESCRIPTION: This snippet disables the Windows macro `NOMINMAX`, which can cause conflicts with the C++ standard library's `min` and `max` functions.  It's a common practice in Windows C++ development.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named 'flutter_assemble' that depends on the Flutter library and header files. This target represents the process of assembling the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin wrapper sources. It applies standard settings, sets properties for position independent code and hidden visibility, links it to the `flutter` interface library, and defines include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: CMake Windows Macro and Library Linking\nDESCRIPTION: This snippet disables conflicting Windows macros using NOMINMAX and links necessary libraries for the Flutter application. It links the flutter, flutter_wrapper_app, and dwmapi.lib libraries. It also includes the CMAKE_SOURCE_DIR as a private include directory and any application specific dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions\nDESCRIPTION: This snippet adds a preprocessor definition for the APPLICATION_ID, allowing it to be used in the C++ code.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Assets\nDESCRIPTION: This snippet installs the Flutter assets directory. It first removes any existing assets from a previous install and then copies the entire assets directory to the installation destination.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compile Settings\nDESCRIPTION: This CMake function applies standard compile features, options, and definitions to a target. It sets C++ standard to 17, enables warnings, and disables exceptions.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the CXX language support. It also defines the binary name of the application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(provider_shopper LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"provider_shopper\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated configuration file from the ephemeral directory.  This file likely contains configuration settings provided by the Flutter tool.  It is included using the `include` command.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated files. This directory is used to include generated configurations and locate Flutter-related files.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Assembly\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter tool portions of the build are executed before the application is built.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  Ensures that the CMake version used is at least 3.10, which supports the features used in this file.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target. These settings are common to Flutter applications and can be removed if custom settings are required.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated_plugins.cmake file, which manages building plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to 3.10. This ensures that the CMakeLists.txt file can be processed by CMake versions that support the specified features.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter Library to App Wrapper\nDESCRIPTION: Links the 'flutter' library (the interface library) to the 'flutter_wrapper_app' library. This makes the Flutter API available to the application wrapper code.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\n```\n\n----------------------------------------\n\nTITLE: Set Binary and Application ID\nDESCRIPTION: Sets the binary name of the executable and the GTK application identifier for the Flutter application. The binary name defines the on-disk name, and the application ID is a unique identifier.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"client\")\nset(APPLICATION_ID \"com.example.client\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the relative path of the 'ephemeral' directory. This directory contains generated configuration files and the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures compatibility with the CMake features used in the script. It sets the minimum CMake version to 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: CMake Adding Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on `flutter_assemble`, which triggers the Flutter-specific build steps. It ensures that the Flutter framework and resources are built before the Windows runner executable is created.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version and project\nDESCRIPTION: This snippet specifies the minimum required CMake version and defines the project. It sets the project name and indicates that the project uses C++.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Appending to Plugin C++ Wrapper Sources\nDESCRIPTION: Appends source files to the `CPP_WRAPPER_SOURCES_PLUGIN` list. These sources provide plugin registration functionality for the C++ wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet specifies the minimum required version of CMake for the build process. It ensures that the project is built with a compatible version of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Build Directory\nDESCRIPTION: Sets the `PROJECT_BUILD_DIR` to the location of the project's build directory and publishes the directory to the parent scope. This variable is used to locate build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Prepending Flutter Library Headers Path\nDESCRIPTION: Prepends the path to the Flutter library headers to each element in the `FLUTTER_LIBRARY_HEADERS` list, using the previously defined `list_prepend` function.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and dependencies required for the build.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings for Flutter\nDESCRIPTION: This snippet applies a standard set of build settings to the Flutter Windows runner executable.  It uses the `apply_standard_settings` macro, presumably defined elsewhere, to configure common compiler and linker options.  This can be removed if custom settings are required.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Tool Backend Command\nDESCRIPTION: Adds a custom command to execute the flutter tool backend script. It uses a phony output file to force the command to run on every build, since a full input/output list cannot be retrieved from the flutter tool. The command runs `tool_backend.bat` with specific arguments and environment variables.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter App for Web using Peanut\nDESCRIPTION: This command utilizes the `peanut` package to build the Flutter application for the web with CanvasKit rendering. It includes extra arguments for setting the base href for GitHub Pages and pushes the built web game to the `gh-pages` branch. This assumes the user has set up GitHub pages for their repository.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nflutter pub global run peanut \\\n--web-renderer canvaskit \\\n--extra-args \"--base-href=/name_of_your_github_repo/\" \\\n&& git push origin --set-upstream gh-pages\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID using `add_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")`.  This makes the application ID available in the C++ code.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Updating Launcher Icon using Flutter Launcher Icons\nDESCRIPTION: This command uses the `flutter_launcher_icons` package to generate launcher icons for different platforms based on the provided images. It assumes that `assets/icon-adaptive-foreground.png` and `assets/icon.png` have been updated before running the command.  The icon configuration is managed in `pubspec.yaml`.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nflutter pub run flutter_launcher_icons:main\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This sets the minimum required CMake version for the build process to 3.14, ensuring compatibility with the CMake features used in the configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target, specifying the source files to be included in the build.  The `BINARY_NAME` variable determines the name of the executable. This defines the main application executable and its associated source files.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Flutter Library Headers Path\nDESCRIPTION: This code prepends the path to the `flutter_linux` directory within `EPHEMERAL_DIR` to the `FLUTTER_LIBRARY_HEADERS` variable. This ensures that the compiler can find the Flutter header files.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory using `add_subdirectory(${FLUTTER_MANAGED_DIR})`. This includes the Flutter build rules.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings\nDESCRIPTION: This applies the standard set of build settings using a custom CMake function `apply_standard_settings`. This configures common build options such as compiler flags and optimization levels. It centralizes build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the Flutter project and target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up Dependencies for Flutter Module\nDESCRIPTION: These bash commands fetch packages, set up dependencies, and open the Android and iOS projects. It assumes both iOS and Android toolchains are installed. It navigates to the flutter_module_books directory, gets the Flutter packages, and then opens the Android and iOS projects in their respective IDEs.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/books/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\nset -e\n\ncd flutter_module_books/\nflutter pub get\n\n# For Android builds:\nopen -a \"Android Studio\" ../android_books # macOS only\n# Or open the ../android_books folder in Android Studio for other platforms.\n\n# For iOS builds:\ncd ../ios_books\npod install\nopen IosBooks.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to App Wrapper\nDESCRIPTION: Applies a set of standard build settings to the 'flutter_wrapper_app' library. This is likely a custom function defined elsewhere in the project.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(flutter_wrapper_app)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and defines the project name and supported languages (CXX). It sets the binary name and application ID for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"dynamic_theme\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.dynamic_theme\")\n```\n\n----------------------------------------\n\nTITLE: Setting project and adding executable in CMake\nDESCRIPTION: This snippet initializes the CMake project, specifies the CXX language, and defines the executable target. It includes source files for the runner and generated plugin registrant. The BINARY_NAME variable, defined in the top-level CMakeLists.txt, is used to name the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets the `FLUTTER_TARGET_PLATFORM` variable to 'windows-x64' if it is not already defined. This provides a default target platform for building the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to the path of the 'cpp_client_wrapper' directory within the 'ephemeral' directory.  This directory contains C++ wrapper code used to interface with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command to execute the Flutter tool backend script. The command runs the tool backend to generate the Flutter library and headers.  A phony file is used as an output to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Include Directories\nDESCRIPTION: This snippet links necessary libraries to the executable target and sets include directories. It links the `flutter` and `flutter_wrapper_app` libraries, as well as `dwmapi.lib` for Windows-specific functionality. It also adds the source directory to the include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assembly Command\nDESCRIPTION: Defines a custom command that runs the Flutter tool backend script. It generates the Flutter library and headers. A phony file is used to force the command to run every time.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the Executable\nDESCRIPTION: This snippet installs the executable (TARGETS ${BINARY_NAME}) to the CMAKE_INSTALL_PREFIX directory for runtime with the component labeled 'Runtime'. This copies the built executable to the designated install location.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: Defines the build configuration options by setting the `CMAKE_BUILD_TYPE` to \"Debug\" if it's not already set. It provides options for \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers to List\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` list.  These headers are required for compiling Flutter plugins and other components that interact with the Flutter engine. The list includes various headers related to message channels, codecs, Dart project integration, engine, and views.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Application Subdirectory\nDESCRIPTION: This code adds the application runner directory as a subdirectory to the CMake project.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable (BINARY_NAME) to the installation prefix, designating it as part of the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target with the specified source files. The executable name is determined by BINARY_NAME.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake to be 3.10.  This ensures compatibility with the CMake features used in the build script.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.10, ensuring compatibility with the CMake features used in the build configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: Includes a generated CMake configuration file. This file likely contains settings and variables provided by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file located within the ephemeral directory. This file likely contains configurations provided by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter Library to Plugin Wrapper\nDESCRIPTION: Links the 'flutter' library (the interface library) to the 'flutter_wrapper_plugin' library. This makes the Flutter API available to the plugin wrapper code.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions for Flutter version info\nDESCRIPTION: This snippet adds preprocessor definitions that make the Flutter version information available in the C++ code. `${FLUTTER_VERSION}`, `${FLUTTER_VERSION_MAJOR}`, etc. are CMake variables that are likely defined elsewhere in the CMake configuration or passed in at build time.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Linker and Compiler Flags for Profile Build Mode\nDESCRIPTION: This snippet sets the linker and compiler flags for the Profile build mode to be the same as the Release build mode. This ensures that the Profile build mode uses similar optimization levels as the Release build.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files. It then transforms the list by prepending the ephemeral directory to each header file path.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name for Executable\nDESCRIPTION: This snippet sets the name of the executable to 'simple_shader'.  This determines the name of the application file created during the build process.  Changing this will change the on-disk name of your application.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"simple_shader\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin' from the core and plugin C++ wrapper sources. It applies standard settings, sets the position-independent code property, sets the C++ visibility preset to hidden, links against the 'flutter' interface library, sets the include directories, and adds a dependency on the 'flutter_assemble' target.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains configurations specific to the current Flutter project and target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Directories\nDESCRIPTION: Defines variables for important directories within the project structure. `EPHEMERAL_DIR` points to the directory containing generated configuration files and other temporary build artifacts. This is crucial for locating dependencies and outputs of the Flutter build process.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: This snippet adds a custom command to assemble the Flutter library. It executes a shell script (`tool_backend.sh`) from the Flutter tools package, passing in the target platform and build type as arguments. The `_phony_` file is used to ensure the command runs every time. The output is the Flutter library and its headers.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Build Flutter module as iOS framework\nDESCRIPTION: Builds the Flutter module as a set of frameworks for iOS, specifically for debug, profile, and release modes. The `--xcframework` flag creates an XCFramework bundle, which supports multiple architectures. The output directory is specified using the `--output` flag.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/prebuilt_module/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter build ios-framework --xcframework --output=../ios_using_prebuilt_module/Flutter\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to point to the 'ephemeral' directory within the project's source directory. This directory typically contains generated configuration files and other temporary build artifacts. It is used for locating generated CMake configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable Target in CMake\nDESCRIPTION: This `install` command copies the executable target (`BINARY_NAME`) to the installation directory specified by `CMAKE_INSTALL_PREFIX`. This makes the executable available within the installed bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the core, plugin, and app components of the Flutter C++ wrapper. It prepends the wrapper root directory to each source file path. These source files provide the glue between the Flutter engine and the native platform.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Directories\nDESCRIPTION: This snippet defines several project directories, including the ephemeral directory, the wrapper root, and the project build directory.  These are used throughout the script to refer to specific locations for generated files and build artifacts. `EPHEMERAL_DIR` is where Flutter-generated files reside, `WRAPPER_ROOT` contains the C++ wrapper code, and `PROJECT_BUILD_DIR` specifies the location for the build output.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named 'flutter_assemble'. This target depends on the Flutter library and header files, triggering the custom command to assemble them.  The `DEPENDS` argument specifies the files that the target depends on.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This includes the generated configuration file from the ephemeral directory. The file is assumed to contain important build configurations from the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: This snippet creates a list of Flutter library headers and prepends the ephemeral directory to each header file path.  These headers are essential for compiling code that interacts with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the ephemeral directory path to each entry in the list.  These headers are essential for compiling C++ code that interfaces with Flutter.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: This snippet sets the default build type to \"Debug\" if no build type or configuration types are specified.  It also defines the available build type options (Debug, Profile, Release) using a cache property.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This conditionally installs the AOT (Ahead-Of-Time) compiled library to the `lib` directory within the bundle, but only for non-Debug builds. This library is used for optimized release builds.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated_plugins.cmake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Appending and Transforming C++ Wrapper Sources (Core)\nDESCRIPTION: Appends a list of core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` variable. Then, it transforms the list by prepending the `WRAPPER_ROOT` path to each source file name. This is done to ensure the compiler can find the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library headers to the `FLUTTER_LIBRARY_HEADERS` variable.  These headers are required for compiling Flutter plugins and applications.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable Target\nDESCRIPTION: This snippet creates the executable target for the application, specifying the source files to be included in the build.  The binary name is defined by BINARY_NAME.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory to be next to the executable. This ensures support files are copied into the same location as the executable, which is required for running the application from Visual Studio.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter Windows DLL within the ephemeral directory. The PARENT_SCOPE option makes this variable available to the parent scope, which is likely the install step.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This adds definitions to ensure Unicode support for all projects. This is achieved by adding compiler definitions for UNICODE and _UNICODE.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the lib directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project with the minimum required version and sets the project name. It also defines the languages used in the project as CXX.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(simplistic_calculator LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project meets the necessary requirements and supports the features used in the CMakeLists.txt file. It sets the minimum version to 3.14.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the build. This ensures that the CMake version used is compatible with the features used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries in CMake\nDESCRIPTION: This loop iterates through the `PLUGIN_BUNDLED_LIBRARIES` list and installs each library to the `INSTALL_BUNDLE_LIB_DIR`. This ensures that all plugin-bundled libraries are included in the installed bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Bundled Libraries Configuration\nDESCRIPTION: This snippet configures the bundled libraries for the plugin. Currently, it sets an empty list of libraries to be bundled, and the changes will be visible for parent scopes.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin_windows/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# List of absolute paths to libraries that should be bundled with the plugin\nset(federated_plugin_windows_bundled_libraries\n  \"\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter library (libflutter_linux_gtk.so) within the ephemeral directory. The PARENT_SCOPE keyword makes these variables available to the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner subdirectory, which likely contains the application's main source code and build configurations, allowing CMake to build the application itself.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Config\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains configurations provided by the Flutter tool, such as build settings and dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the build system uses a compatible version of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: This snippet defines the build configuration options, specifically setting the CMAKE_BUILD_TYPE to \"Debug\" if it's not already defined. It also sets the possible values for the CMAKE_BUILD_TYPE cache property.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: Installs the AOT library to the lib directory within the installation prefix, only on non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: Applies the standard build settings defined in the APPLY_STANDARD_SETTINGS function to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode definitions\nDESCRIPTION: This snippet adds definitions to use Unicode for all projects.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This snippet installs the executable target to the specified destination in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the project.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to point to the location of the C++ client wrapper source code. This directory contains the C++ code that interfaces with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Appending to Flutter Library Headers List\nDESCRIPTION: Creates a list of header files related to the Flutter library (`FLUTTER_LIBRARY_HEADERS`). These headers are required for compiling code that interfaces with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target that depends on the output of the custom command for assembling the Flutter library. This ensures that the Flutter library is built before other targets that depend on it.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and prepends the path to the ephemeral directory. This list is used to set the include directories for the Flutter library target.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This snippet defines a custom CMake function `list_prepend` to prepend a prefix to each element in a list. This function is used because `list(TRANSFORM ... PREPEND ...)` is not available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: This installs the application executable to the root of the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Charts Demo\nDESCRIPTION: This snippet demonstrates how to run the Flutter charts demo using the `chrome` device. It assumes you are in the `charts` directory and have already run `flutter packages get`. It starts the application and provides a URL to access it in a browser.\nSOURCE: https://github.com/flutter/samples/blob/main/web/readme.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd charts\n$ flutter packages get\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Running JNIgen for HealthConnect\nDESCRIPTION: This command navigates back to the parent directory and executes the JNIgen tool using the jnigen.yaml configuration file. It generates Dart bindings for Java/Kotlin APIs, specifically for the HealthConnect API in this example.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd .. && dart run jnigen --config jnigen.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Settings\nDESCRIPTION: This snippet defines settings for the Profile build mode by setting the linker and compiler flags to be the same as the Release build mode.  This ensures profile builds use similar optimizations.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper App Sources\nDESCRIPTION: Creates a list of C++ wrapper app source files. It then transforms the list by prepending the wrapper root directory to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, using the value defined earlier in the file.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for the application. It defines variables for the build bundle directory, install bundle data directory, and install bundle library directory.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This code defines build configuration options (Debug, Profile, Release) based on whether CMake is multi-config or single-config generator. It sets the `CMAKE_BUILD_TYPE` and defines valid values for it.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: This snippet links the required libraries to the application's executable target. It links the flutter library and the GTK library (using the imported target from PkgConfig).\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet creates a static library for the Flutter wrapper plugin. It includes core and plugin source files, applies standard settings, sets target properties for position-independent code and hidden C++ visibility, links to the Flutter library, and adds include directories and dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file located in the ephemeral directory.  This file likely contains configuration options generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter` and sets include directories and link libraries. It links against the Flutter library and the system dependencies (GTK, GLIB, GIO).  This allows other parts of the project to easily link against Flutter.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the CMake version used to build the project is at least 3.14, enabling the usage of CMake features available in that version or later.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target\nDESCRIPTION: This snippet defines the executable target for the application.  It adds source files to the target and sets the binary name.  It includes `main.cc`, `my_application.cc`, and the generated plugin registrant.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources\nDESCRIPTION: These snippets define lists of C++ source files for the core, plugin, and app wrappers. It also prepends the `WRAPPER_ROOT` to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project meets the minimum requirements for the commands and features used in the CMakeLists.txt file. Version 3.14 is required.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directory\nDESCRIPTION: This snippet configures the installation directory for the build bundle, setting the CMAKE_INSTALL_PREFIX to a directory within the project binary directory. It also ensures that the build bundle directory is cleaned before each installation.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Application Sources\nDESCRIPTION: Creates a list of C++ source files for the app wrapper and prepends the wrapper root directory path to each. These files are related to the flutter engine and view controller.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Settings\nDESCRIPTION: This snippet defines specific linker and compiler flags for the 'Profile' build mode, inheriting the settings from the 'Release' build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding executable target for Flutter Windows runner\nDESCRIPTION: This snippet adds an executable target for the Flutter Windows runner, specifying source files and marking it as a WIN32 application. It includes application source files, generated plugin registrant, and resource files.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines variables for the installation directories of data and library files, specifying where these files will be placed during the installation process.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Wrapper Sources\nDESCRIPTION: This snippet configures the C++ wrapper sources by defining lists of source files for core, plugin, and app components, and then prepending the wrapper root directory path to each source file name.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Libraries\nDESCRIPTION: This configures the runtime search path (RPATH) to load bundled libraries from the 'lib/' directory relative to the binary. This ensures that the application can find its dependencies at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter assemble dependency\nDESCRIPTION: This ensures the Flutter assembly task ('flutter_assemble') is executed before building the executable target, ensuring the Flutter application is built before the native application.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Filesystem for Cross-Building\nDESCRIPTION: Configures the root filesystem for cross-building by setting CMAKE_SYSROOT and search paths. This is necessary when building the application for a different target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies on Flutter Assembly\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter application is built before the Windows runner executable. This step is crucial for the overall build process of the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: This snippet links the `flutter` and `PkgConfig::GTK` libraries to the executable target. These libraries are linked privately, meaning they are only used within the executable and are not exposed to other libraries that link against it.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for the project.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: These snippets manage the installation of Flutter assets. They first remove any existing assets from the installation directory to ensure a clean copy, and then install the new assets to the correct location.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Policy Configuration\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake, specifically versions 3.14 through 3.25.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, allowing the CMake build process to include and manage the Flutter engine and related files.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This installs the main Flutter library (the Flutter engine) to the `lib` directory within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines the linker and compiler flags for the 'Profile' build mode, setting them to the same values as the 'Release' build mode.  This ensures that the Profile mode uses optimized settings.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.14. It is essential for ensuring compatibility with the features used in the CMake script.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend function\nDESCRIPTION: This function prepends a given prefix to each element of a list. It iterates through the list, adding the prefix to each element and then updating the original list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Awarding Achievements in Dart (games_services package)\nDESCRIPTION: This Dart code snippet demonstrates how to award an achievement using the `games_services` package. It retrieves the `GamesServicesController` from the Flutter `context` using `context.read<GamesServicesController?>()`, and then calls the `awardAchievement()` method, passing in the iOS and Android achievement IDs. These IDs correspond to the achievements configured in App Store Connect and Google Play Console.  Ensure `GamesServicesController` is properly initialized.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal gamesServicesController = context.read<GamesServicesController?>();\nawait gamesServicesController?.awardAchievement(\n    iOS: 'an_achievement_id',\n    android: 'aNaChIeVeMenTiDfRoMgPlAy',\n);\n```\n\n----------------------------------------\n\nTITLE: CMake Project Initialization and Executable Definition\nDESCRIPTION: This snippet initializes the CMake project and defines the executable target for the Flutter Windows runner. It includes necessary source files and sets the target to WIN32.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.14. This ensures that the CMake features used in the project are supported by the CMake version being used for the build.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, making it available during compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function 'list_prepend' that prepends a given prefix to each element of a list. This is a workaround for CMake versions that do not have the 'list(TRANSFORM ... PREPEND ...)' command.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet sets the `WRAPPER_ROOT` variable, which points to the directory containing the C++ client wrapper code. This wrapper provides an interface between Flutter and native Windows code.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project for Flutter Windows runner\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and setting the project name. The LANGUAGES CXX parameter indicates that C++ is being used in this project.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This code installs the AOT (Ahead-of-Time) compiled library on non-Debug builds (Profile and Release) into the specified data directory.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library in CMake\nDESCRIPTION: This conditional installation includes the AOT library (`AOT_LIBRARY`) for non-Debug builds. This library provides ahead-of-time compilation for improved performance in Profile and Release builds.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated_config.cmake file from the ephemeral directory. This file is expected to contain configuration settings generated by the Flutter tool, which are used to customize the build process. The 'include' command incorporates the variables and settings defined in this file into the current CMake scope.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet installs the assets directory, ensuring that all asset files are copied to the installation directory. It removes the existing assets directory before copying the new one, preventing stale files from a previous install. `file(REMOVE_RECURSE)` is used to ensure a clean copy on each build.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the 'flutter' subdirectory to the build process. This directory contains the Flutter engine and associated build files. The `FLUTTER_MANAGED_DIR` variable defines the path to this directory.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` to prepend a prefix to each element in a given list. This function emulates the `list(TRANSFORM ... PREPEND ...)` command, which is not available in CMake 3.10. It takes a list name and a prefix as input and modifies the list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Filesystem for Cross-Building\nDESCRIPTION: This snippet configures the root filesystem for cross-building using `FLUTTER_TARGET_PLATFORM_SYSROOT`. It sets `CMAKE_SYSROOT` and `CMAKE_FIND_ROOT_PATH`, and configures the search paths to use the sysroot only for packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target using `add_dependencies`. This ensures that the Flutter assembly step is executed before building the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, pointing to the directory containing generated configuration files. This directory is crucial for accessing build configurations provided by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory to the project. It uses the `add_subdirectory` command to include the CMakeLists.txt file in the specified directory, which handles the application's build process.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the absolute path of the 'ephemeral' directory within the project's source directory.  This directory contains generated configuration files and other build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: Copies native assets from build.dart, specifically from packages, to the lib directory of the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Add Application ID Definition\nDESCRIPTION: Adds a preprocessor definition for the APPLICATION_ID, using the value defined earlier in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and setting the project name and supported languages. It also sets up CMake policies for compatibility.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\n\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysroot for Cross-building\nDESCRIPTION: This code snippet configures the sysroot and related paths for cross-building. It sets CMAKE_SYSROOT, CMAKE_FIND_ROOT_PATH, and various CMAKE_FIND_ROOT_PATH_MODE options if FLUTTER_TARGET_PLATFORM_SYSROOT is defined.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the WRAPPER_ROOT variable to point to the 'cpp_client_wrapper' subdirectory within the ephemeral directory. This directory contains the C++ wrapper code used to interface between Flutter and the native Windows platform. The variable uses EPHEMERAL_DIR.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This sets the minimum required CMake version for the build. It ensures that the project can be built with CMake version 3.14 or higher.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (flutter_windows.dll) and publishes it to the parent scope for use in the install step. It also sets the paths for ICU data file and the AOT library.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  This ensures that the CMake version used is compatible with the commands and features used in the CMakeLists.txt file.  The minimum version is set to 3.14.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter library and headers are generated before other targets that depend on them are built.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for the project by defining UNICODE and _UNICODE.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: This sets a fallback value for `FLUTTER_TARGET_PLATFORM` if it is not already defined. The default value is set to `windows-x64`.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to point to the 'ephemeral' subdirectory within the current source directory. This directory typically contains generated files and configurations during the Flutter build process. The directory path is determined using the CMAKE_CURRENT_SOURCE_DIR variable.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a target, including C++ standard, warning flags, and optimization levels.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (`libflutter_linux_gtk.so`) and makes it available in the parent scope for installation. Also sets the path to the ICU data file, the project build directory, and the AOT library.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory within the build bundle, ensuring that the application has the necessary data for internationalization.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. Interface libraries are used to propagate usage requirements, such as include directories and link libraries, to dependent targets. Defines compile time interface for the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet defines variables for the installation directories for data and libraries within the bundle. These variables will be used as the `DESTINATION` for file installation commands.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' target to the 'flutter_wrapper_plugin' library. This ensures that the 'flutter_assemble' target is built before the plugin wrapper library.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to point to the `cpp_client_wrapper` directory within the `ephemeral` directory. This directory contains C++ wrapper code used to interface with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the build. This ensures that the build system has the necessary features.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This code initializes the CMake project, specifying the minimum required CMake version, the project name, and the supported languages (CXX). It sets the binary name for the application executable.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(testing_app LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"testing_app\")\n```\n\n----------------------------------------\n\nTITLE: Install Native Assets\nDESCRIPTION: Installs the native assets from the build directory to the library directory. This includes platform-specific libraries or other resources. The destination is `INSTALL_BUNDLE_LIB_DIR` and the component is Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the Flutter ICU data file to the data directory within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Disable Windows Macros\nDESCRIPTION: This disables the `NOMINMAX` macro, preventing Windows macros from colliding with C++ standard library functions like `min` and `max`. This ensures code compatibility and avoids compilation errors.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Configuring installation directory\nDESCRIPTION: This snippet configures the installation directory for the built application. It sets the build bundle directory and ensures that the install step is the default, as it's required to run the application. It also initializes the CMAKE_INSTALL_PREFIX to the build bundle directory.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: This snippet sets the installation directories for data and library files within the build bundle, defining variables for the data and library directories.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Running the Dart Server from CLI\nDESCRIPTION: This snippet shows the commands to navigate to the server directory and run the Dart server application using the command line.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd my_project/server\ndart run bin/server.dart\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process.  This ensures compatibility with the features used in the CMake script.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file, which is dynamically created by the Flutter tool.  This file contains build settings specific to the Flutter project.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Prefix\nDESCRIPTION: This snippet sets the install prefix to the build bundle directory and forces the cache if it is initialized to default.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project.  This allows CMake to process the CMakeLists.txt file located in the flutter directory.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Target\nDESCRIPTION: This snippet defines the executable target for the application, specifying the source files to be compiled.  It creates an executable named `${BINARY_NAME}` which is defined at the top of the file.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings to Flutter Windows runner target\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target. It provides a base configuration that can be removed for applications with customized needs.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and application-specific C++ wrapper sources. It applies standard settings, links against the Flutter interface library, adds include directories, and adds a dependency on the `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines the source files for the core, plugin, and app components of the C++ wrapper.  It uses `list(APPEND)` to add the source file names to the respective lists and `list(TRANSFORM ... PREPEND)` to add the wrapper root directory to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake to use for the build process. This ensures that the CMake features used in the script are supported.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for all projects. The definitions '-DUNICODE' and '-D_UNICODE' are added to the compiler flags.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables related to the Flutter library, including the path to the Flutter Windows DLL (FLUTTER_LIBRARY), ICU data file (FLUTTER_ICU_DATA_FILE), project build directory (PROJECT_BUILD_DIR), and AOT library (AOT_LIBRARY). The PARENT_SCOPE option makes these variables available in the parent scope for use in install steps. Includes a list of exported headers for the Flutter library and transforms it to prepend the ephemeral directory.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Assembly Dependency - CMake\nDESCRIPTION: Adds a dependency on the flutter_assemble target. This ensures that the Flutter assets are built before the main target. `flutter_assemble` is a custom target that builds the Flutter app's assets.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the build. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the project language (CXX). It also defines the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"testing_app\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.testing_app\")\n```\n\n----------------------------------------\n\nTITLE: Installing the Executable\nDESCRIPTION: This installs the executable to the install prefix, creating a 'Runtime' component.  The target executable's runtime files are installed.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and specifies that the project uses CXX (C++) languages. The project name is set to \"desktop_photo_search\".\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(desktop_photo_search LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Install Executable\nDESCRIPTION: Installs the executable to the specified destination within the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the executable target, placing the unbundled copy of the executable in a subdirectory to prevent users from running it directly.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding GTK, GLIB, and GIO Packages\nDESCRIPTION: This snippet uses `pkg_check_modules` to find and import the GTK, GLIB, and GIO libraries, which are required for building Flutter applications on Linux GTK. These libraries provide the necessary UI and system functionalities.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers to List\nDESCRIPTION: Creates a list of Flutter library header files. This list is then prepended with the path to the Flutter Linux headers.  The list is built containing header file names, then the `list_prepend` function is used to add the path prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Running Flutter app in Chrome\nDESCRIPTION: This command runs the Flutter application in the Chrome browser using the Dart Dev Compiler (DDC). It's used for normal development and debugging.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Assets Directory\nDESCRIPTION: Installs the Flutter assets directory to the data directory. This copies the application's assets (images, fonts, etc.) to the installation directory, first removing the existing folder recursively. The destination is `INSTALL_BUNDLE_DATA_DIR` and the component is Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and defines the project name and languages used (CXX). It also sets variables for the binary name and application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"compass_app\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.compass_app\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that the custom command for Flutter assembly is executed before any target that depends on it.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake by setting CMP0063 to NEW.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Executable\nDESCRIPTION: This snippet installs the application's executable file to the specified installation prefix, ensuring that it is placed in the correct location during installation.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend. This command generates the Flutter library and headers.  The `_phony_` output file ensures the command runs every time, as there is no reliable way to track the tool's full input/output list.  The command executes a batch script with specific environment variables and configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper App Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_app`. This library contains the C++ wrapper code needed for the main application.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: This snippet defines a function `list_prepend` that prepends a given prefix to each element in a list. This is used to construct paths for include directories.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (App)\nDESCRIPTION: Defines a list of C++ source files related to the application-specific part of the C++ wrapper. These files handle the Flutter engine and view controller. The wrapper root is prepended to the source file paths.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and sets its include directories and linked libraries. It depends on the GTK, GLIB, and GIO packages.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the location of the ephemeral directory, which contains generated configuration files and the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter library and headers are built before any other target that depends on them.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Profile Build Mode Settings\nDESCRIPTION: Defines settings for the Profile build mode, copying the Release settings. This ensures consistent linker and compiler flags between Profile and Release builds. Copies linker and compiler flags from Release to Profile.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet installs the Flutter assets directory to the data directory within the installation bundle. This includes the application's UI resources, such as images and fonts. It first removes any existing assets to ensure a clean install.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating flutter_wrapper_app Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and application-specific C++ wrapper sources. Links against the Flutter interface library and includes the wrapper's include directory. Depends on `flutter_assemble` target.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Installation Prefix\nDESCRIPTION: Sets the installation prefix to the build bundle directory.  This ensures that installed files are placed within the application's bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Prepending Flutter Library Headers Path\nDESCRIPTION: This snippet prepends the path to the Flutter library headers in the ephemeral directory to the `FLUTTER_LIBRARY_HEADERS` list using the custom defined `list_prepend` function.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: This snippet uses `pkg-config` to find the GTK library and its dependencies. It imports the GTK target for linking against the application.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Defines the location of the 'ephemeral' directory. This directory contains generated configuration files and libraries.  The variable `EPHEMERAL_DIR` is set to the absolute path of the `ephemeral` directory, relative to the current source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses 'pkg-config' to find system-level dependencies like GTK.  It requires pkg-config and imports the GTK library if found.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to provide a unified interface for linking against the Flutter engine and its dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources (Core)\nDESCRIPTION: Defines a list of C++ source files that make up the core part of the C++ wrapper. These files provide essential functionalities for interacting with the Flutter engine. The wrapper root is prepended to the source file paths.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains settings specific to the Flutter project, such as paths to dependencies, compiler flags, and other build parameters.  It centralizes project-specific configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target\nDESCRIPTION: Links the Flutter library and GTK library to the executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable\nDESCRIPTION: Installs the executable to the `CMAKE_INSTALL_PREFIX` directory, under the runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library in CMake\nDESCRIPTION: This snippet defines the creation of a shared library for the Flutter plugin. It specifies the source file, applies standard settings, and sets visibility properties. It also configures compiler definitions, include directories, and links necessary libraries such as flutter and flutter_wrapper_plugin.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin_windows/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"federated_plugin_windows_plugin.cpp\"\n)\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Publishing Variables to Parent Scope\nDESCRIPTION: Publishes the `FLUTTER_LIBRARY`, `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` variables to the parent scope, making them available to other CMake files. This enables sharing these critical paths and locations to sub-projects or calling scripts.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Interface Library Properties\nDESCRIPTION: Sets the include directories and link libraries for the 'flutter' interface library.  The include directories specify where the compiler should look for header files, and the link libraries specify the libraries that the target should link against.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Assembly Target\nDESCRIPTION: Defines a custom target named flutter_assemble that depends on the Flutter library and headers. This target ensures that the Flutter library and headers are built before other targets that depend on them.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Variables\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and defines variables for the binary name and application ID. It also sets up the RPATH to load bundled libraries relative to the binary's location.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"isolate_example\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"dev.flutter.isolate_example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target\nDESCRIPTION: This snippet defines the executable target for the application. It adds the source files, applies standard build settings, links dependencies, and adds a dependency on the flutter_assemble target. It also sets the RUNTIME_OUTPUT_DIRECTORY to avoid running the unbundled copy of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories\nDESCRIPTION: This snippet configures the installation directories for the application. It sets the build bundle directory, makes the \"install\" step default, and sets the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies (GTK, GLIB, GIO)\nDESCRIPTION: This snippet uses `pkg_check_modules` to find and import system-level dependencies required for the Flutter application, specifically GTK, GLIB, and GIO. These dependencies are necessary for creating a GTK-based Flutter application on Linux.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Plugin Sources\nDESCRIPTION: Creates a list of C++ wrapper plugin source files. It then transforms the list by prepending the wrapper root directory to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Plugin Wrapper Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` path to each source file name in the `CPP_WRAPPER_SOURCES_PLUGIN` list, creating absolute paths for the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Firebase Initialization JavaScript\nDESCRIPTION: This JavaScript code initializes the Firebase SDK for the web application. The `firebaseConfig` object needs to be populated with the actual Firebase project credentials obtained from the Firebase console. This code is typically located in the `web/firebase_init.js` file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// web/firebase_init.js\nvar firebaseConfig = {\n    apiKey: \"\",\n    authDomain: \"\",\n    databaseURL: \"\",\n    projectId: \"\",\n    storageBucket: \"\",\n    messagingSenderId: \"\",\n    appId: \"\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Sets CMake variables for the Flutter library, ICU data file, project build directory, and AOT library.  These variables define the paths to essential Flutter components and are published to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project. This allows CMake to process the build rules and configurations defined within that directory.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding executable target for Flutter Windows runner\nDESCRIPTION: This snippet adds an executable target using `add_executable`. It defines the target's name using the `BINARY_NAME` variable (defined in the top-level CMakeLists.txt), specifies that it's a WIN32 executable, and lists the source files to be compiled into the executable.  It includes standard source files, a generated plugin registrant, and resource files.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet re-copies the assets directory on each build to avoid having stale files from a previous install.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: Defines build configuration options, setting the default build type to \"Debug\" if not already specified. It also allows the user to select between \"Debug\", \"Profile\", and \"Release\" build modes.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library headers and transforms the list to prepend the ephemeral directory to each header file path. These headers are used for compiling against the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This snippet applies the standard set of build settings for the Flutter application. It likely includes common compiler flags and optimization settings.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: This snippet removes and then copies the entire assets directory to the installation location.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter-managed directory as a subdirectory in the CMake build process.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory and plugin build rules\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the build process and includes generated plugin build rules from `flutter/generated_plugins.cmake`.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: Installs the ICU data file (used for internationalization) to the data directory in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds the executable target for the application, specifying the source files to be compiled. The executable name is determined by the BINARY_NAME variable.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building\nDESCRIPTION: This snippet configures the CMake environment for cross-building by setting the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables. It also sets the search modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: This sets a fallback value for `FLUTTER_TARGET_PLATFORM` if it is not already defined. It defaults to 'windows-x64'.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library (Non-Debug)\nDESCRIPTION: This conditional snippet installs the Ahead-Of-Time (AOT) compiled library, but only if the build type is not Debug. This optimization is typically used for Profile and Release builds to improve performance.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble (App)\nDESCRIPTION: Adds a dependency on the 'flutter_assemble' target to the 'flutter_wrapper_app' library. This ensures that the 'flutter_assemble' target is built before the application wrapper library.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries and installs each one to the library directory within the build bundle, ensuring that the application has all the necessary dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform\nDESCRIPTION: This snippet sets the `FLUTTER_TARGET_PLATFORM` variable if it's not already defined. It defaults to `windows-x64`, indicating the target platform for the Flutter build.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the location of the Flutter Windows DLL. It specifies the location of the compiled Flutter runtime library.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for the Flutter wrapper, categorized into core, plugin, and application-specific sources. These lists are then transformed to prepend the wrapper root directory (WRAPPER_ROOT) to each source file path. The sources are used in creating wrapper libraries for the plugin and application runner.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the custom command to generate these files is executed before any target that depends on `flutter_assemble`. Defines a flutter_assemble target that executes the command specified in `add_custom_command`.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Flutter and Runner\nDESCRIPTION: This snippet adds subdirectories for the Flutter managed directory and the runner application, incorporating their respective CMakeLists.txt files into the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup and Executable Definition\nDESCRIPTION: This snippet sets the minimum CMake version, defines the project name with CXX language support, and creates an executable named ${BINARY_NAME} (typically 'runner' on Windows). It includes a list of source files and resources needed for the Flutter application runner.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting installation directories\nDESCRIPTION: This snippet defines the installation directories for data and libraries. It sets the INSTALL_BUNDLE_DATA_DIR and INSTALL_BUNDLE_LIB_DIR variables, which are used to specify where to install data files and libraries respectively.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Executable Target\nDESCRIPTION: This snippet installs the executable target to the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of C++ source files for different parts of the wrapper, including core implementations, plugin registrar, and application specific code.  It prepends the `WRAPPER_ROOT` directory to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for Unicode support (`UNICODE` and `_UNICODE`). These definitions enable the use of Unicode characters and functions throughout the project.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library and header files generated by the custom command. This target ensures that the Flutter library is assembled before other targets that depend on it are built.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used is compatible with the project's CMakeLists.txt file.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the project. It uses the `add_subdirectory` command to include the CMakeLists.txt file in the specified directory, allowing the Flutter build system to be integrated.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and build artifacts. This directory is used to store intermediate build products and configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining executable target\nDESCRIPTION: This snippet defines the executable target for the Flutter application. It specifies the source files that should be included in the build. The `BINARY_NAME` variable, defined in the top-level CMakeLists.txt file, determines the name of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Including generated plugin build rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets\nDESCRIPTION: This section installs the Flutter assets. It first removes the existing asset directory and then copies the new assets.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This snippet configures the build types for the project (Debug, Profile, Release). It checks if the generator is multi-config and sets the appropriate CMake variables.  If not multi-config, it sets the CMAKE_BUILD_TYPE to \"Debug\" and provides options for \"Profile\" and \"Release\".\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Build Type\nDESCRIPTION: Defines the build type (Debug, Profile, Release) if not already specified. Sets the default build type to Debug and allows selection from Debug, Profile, and Release options.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.10, ensuring compatibility with the used CMake features.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries and including directories for Flutter app\nDESCRIPTION: This snippet links the necessary Flutter libraries (`flutter` and `flutter_wrapper_app`) and the `dwmapi.lib` library for Windows Desktop Window Manager API functions to the executable. It also includes the source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Prepending to Header List\nDESCRIPTION: Prepends the path to the `flutter_linux` directory to the `FLUTTER_LIBRARY_HEADERS` list, ensuring that the headers can be found during compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Ephemeral Directory\nDESCRIPTION: This defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other build artifacts. This directory is used to include configuration files generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This code copies the native assets provided by the build.dart script from all packages to the installation directory.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setup Flutter Module and Install Dependencies (Shell)\nDESCRIPTION: This snippet navigates to the Flutter module directory, fetches dependencies using `flutter pub get`, returns to the original directory, and installs CocoaPods dependencies. This ensures the Flutter module is properly configured before integrating with the iOS project.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/multiple_flutters/multiple_flutters_ios/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../multiple_flutters_module\nflutter pub get\ncd -\npod install\nopen MultipleFluttersIos.xcworkspace\n# (build and run)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project for Flutter Runner (Windows)\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum CMake version required and defining the project name. It also declares that the project uses CXX (C++) as a language.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library on non-Debug builds using `install(FILES)` and a conditional check for `CMAKE_BUILD_TYPE`.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Verifying Package Dependencies\nDESCRIPTION: This snippet demonstrates how to verify that `pub get` has been run on each demo using a Dart script. It ensures that all dependencies are up to date before building the demos.\nSOURCE: https://github.com/flutter/samples/blob/main/web/readme.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dart run _tool/verify_packages.dart\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory of the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Core Wrapper Sources\nDESCRIPTION: Creates a list of core C++ wrapper source files, prepending the wrapper root directory to each entry. These source files provide core functionality for wrapping the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library to the data directory. This is done only for Profile and Release builds. The destination is `INSTALL_BUNDLE_DATA_DIR` and the configurations are Profile and Release, with the component being Runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Directory to Headers\nDESCRIPTION: This snippet uses the custom `list_prepend` function to add the `EPHEMERAL_DIR` prefix to each header file in the `FLUTTER_LIBRARY_HEADERS` list. This ensures that the compiler can find the header files in the correct location.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the location of the Flutter Windows DLL. The library is then published to the parent scope for use in install steps.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory to the CMake project. This likely contains the application's main source code.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This installs the AOT (Ahead-Of-Time) compiled library for Profile and Release builds only.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: HTML Host Element for Embedding\nDESCRIPTION: This HTML element `hostElement` is used to embed the Flutter web application into the webpage.  The Flutter app is rendered within this element, allowing it to be integrated into the existing HTML structure.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/element_embedding_demo/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n// Find `hostElement` in `web/index.html`.\n```\n\n----------------------------------------\n\nTITLE: Run specific test file (Flutter)\nDESCRIPTION: This command runs a specific test file using the Flutter SDK.  Replace `<file_path>` with the path to the desired test file within the `test/` directory. It's suitable for unit and widget tests.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflutter test test/<file_path>\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies\nDESCRIPTION: This command installs the npm dependencies required for the Angular project. It fetches all the packages specified in the `package.json` file and installs them in the `node_modules` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/ng-flutter/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Define Project and Languages\nDESCRIPTION: Defines the project name and the programming languages used in the project (CXX for C++). This is a fundamental step in setting up the CMake project.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(infinite_list LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory within the build directory to prevent users from running the unbundled executable.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Directory to Header List\nDESCRIPTION: Prepends the `ephemeral/flutter_linux/` directory to the paths in the `FLUTTER_LIBRARY_HEADERS` list. This ensures that the compiler can find the header files during the build process. The `list_prepend` function (defined earlier) is used for this purpose.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Plugin Libraries\nDESCRIPTION: This snippet installs any bundled plugin libraries to the library directory, providing the application with the necessary dependencies for its plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL. It also sets the `FLUTTER_ICU_DATA_FILE` and `PROJECT_BUILD_DIR` variables.  These are published to the parent scope for installation steps.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing Games Services Controller in Dart\nDESCRIPTION: This Dart code shows how to conditionally initialize the `GamesServicesController` based on the platform and environment. It checks if the application is not running on the web (`kIsWeb`) and is running on either iOS or Android (`Platform.isIOS || Platform.isAndroid`). If these conditions are met, it creates an instance of `GamesServicesController` and calls its `initialize()` method to attempt to log the player in. This code should be uncommented to enable game services functionality.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// TODO: When ready, uncomment the following lines.\n\nGamesServicesController? gamesServicesController;\n// if (!kIsWeb && (Platform.isIOS || Platform.isAndroid)) {\n//   gamesServicesController = GamesServicesController()\n//     // Attempt to log the player in.\n//     ..initialize();\n// } \n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories\nDESCRIPTION: This defines the installation directories for data and libraries within the bundle.  `INSTALL_BUNDLE_DATA_DIR` is set to `data` under the installation prefix, and `INSTALL_BUNDLE_LIB_DIR` is set to `lib` under the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory Properties\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the application target, placing the executable in a subdirectory to prevent users from running the unbundled copy.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library to the installation data directory but only for Profile and Release configurations.  Installation is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures compatibility with the features used in the CMakeLists.txt file.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting CXX Visibility Preset\nDESCRIPTION: Sets the `CXX_VISIBILITY_PRESET` property of the 'flutter_wrapper_plugin' library to `hidden`. This hides all symbols in the library by default, preventing them from being accessed from outside the library unless explicitly exported.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14 and defines the project name as 'deeplink_store_example' using CXX as the language.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(deeplink_store_example LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the build.  This ensures compatibility with required features and syntax.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target\nDESCRIPTION: This section links the required libraries to the executable target.  It includes the Flutter library and GTK library, ensuring the application can access their functionalities.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Applying standard compilation settings\nDESCRIPTION: This snippet defines a function to apply standard compilation settings to a given target.  It sets compile features, options, and definitions, including exception handling and debug configurations.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Language\nDESCRIPTION: Defines the project name as 'health_connect', sets the version to 0.0.1, and specifies the programming language as C.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/src/health_connect/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(health_connect VERSION 0.0.1 LANGUAGES C)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: This creates a list of header files that are part of the Flutter library and prepends the `EPHEMERAL_DIR` to each path.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Mode Settings\nDESCRIPTION: This snippet defines settings specific to the Profile build mode, setting linker and compiler flags for C and C++ to match the Release build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Append Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library headers. Then prepends the ephemeral directory path to each header path in the list.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Defining Application ID\nDESCRIPTION: This snippet adds a preprocessor definition for the APPLICATION_ID, using the value previously set.  This value is later used within the application to identify it.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Running FFIgen for CoreMotion\nDESCRIPTION: This command executes the FFIgen tool using the provided configuration file (ffigen.yaml) to generate Dart bindings for the CoreMotion framework. It requires the FFIgen package to be installed and the ffigen.yaml file to be correctly configured.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart run ffigen --config ffigen.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the build system has the necessary features to execute the CMake script correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Set Executable Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable to a subdirectory to prevent running the unbundled copy.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find required system-level dependencies like GTK, GLIB, and GIO. Imports the found libraries as imported targets.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake File\nDESCRIPTION: This snippet includes the generated plugins CMake file, which handles building and adding plugins to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: Sets the build bundle directory to the location of the executable.  The application will run from this location.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options for the project, including setting the CMake build type based on whether the generator is multi-config or single-config. It defaults to Debug mode if no build type is specified.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This snippet finds the GTK package using pkg-config and imports the target.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets Directory\nDESCRIPTION: Installs the Flutter assets directory into the bundle. It first removes any existing assets to avoid stale files. The install command ensures all flutter_assets are copied correctly into their install destination.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library (`FLUTTER_LIBRARY`) into the `${INSTALL_BUNDLE_LIB_DIR}` as part of the 'Runtime' component. This makes the Flutter runtime available to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Flutter Version\nDESCRIPTION: This CMake code adds preprocessor definitions for the Flutter version information. These definitions are used during compilation. The values are obtained from variables like `${FLUTTER_VERSION}` and its major/minor/patch/build components. This allows the application to access version details at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT library\nDESCRIPTION: This snippet installs the AOT library to the lib directory within the bundle, but only if the build type is not Debug.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the `ephemeral` directory. This file likely contains configurations provided by the Flutter tool during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that the custom command to generate these files is executed before any targets that depend on them.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to App C++ Wrapper Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` to each source file in the `CPP_WRAPPER_SOURCES_APP` list. This ensures that the compiler can find the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet creates a list of header files required for the Flutter library and prepends the `EPHEMERAL_DIR` path to each header. The headers are then added to the `FLUTTER_LIBRARY_HEADERS` variable.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on Flutter assemble\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, which represents the Flutter tool portions of the build process.  This ensures that the Flutter assets and code are built before the Windows runner is built.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Sets variables for the Flutter library, ICU data file, project build directory, and AOT library. These variables are published to the parent scope for use in other build steps.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the variable EPHEMERAL_DIR to the path of the 'ephemeral' directory. This directory typically contains generated or temporary files used during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find the GTK, GLIB, and GIO libraries using pkg-config. These libraries are essential for the Flutter GTK application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Assets\nDESCRIPTION: Installs the Flutter assets directory to the data directory within the installation prefix, ensuring stale files are removed first.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific settings and dependencies required for building the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building and adding plugins to the application.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: Includes a generated configuration file from the `ephemeral` directory. This file likely contains configuration parameters provided by the Flutter tool, customizing the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Switch to Flutter Stable Channel\nDESCRIPTION: This command switches the Flutter channel back to the stable channel.  It ensures a more stable and reliable development environment after experimenting with master channel features.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter channel stable\n```\n\n----------------------------------------\n\nTITLE: Opt-in to Modern CMake Behaviors\nDESCRIPTION: Explicitly opts in to modern CMake behaviors to avoid warnings and ensure compatibility with recent CMake versions. This sets the CMake policy version to a specific range.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Server Data (Bash)\nDESCRIPTION: This command navigates to the app directory and executes the integration tests using remote data from the background server. The test file is `integration_test/app_server_data_test.dart`.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd app\n$ flutter test integration_test/app_server_data_test.dart\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version\nDESCRIPTION: This sets the minimum required CMake version for the project. It ensures that the project is built with a compatible CMake version (3.14 or higher).\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Building Android APK for JNIgen\nDESCRIPTION: This command navigates to the example directory and builds an Android APK file using Flutter. This step is necessary for JNIgen to determine the classpaths of Android Gradle libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/pedometer/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd example && flutter build apk\n```\n\n----------------------------------------\n\nTITLE: Removing and Installing Assets Directory\nDESCRIPTION: This snippet removes the existing assets directory and then installs the updated assets directory, ensuring that the application always has the latest version of its assets.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers generated by the custom command.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: This creates a static library for the Flutter wrapper plugin, using the core and plugin source files. It also applies standard settings, sets properties for position-independent code and hidden C++ visibility, links to the Flutter interface library, includes directories, and adds a dependency on `flutter_assemble`.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration CMake\nDESCRIPTION: Configures the installation process for the application, defining the destination directories for the executable, data files (ICU data, assets), and libraries.  It ensures all necessary files are copied next to the executable. This snippet defines install rules to bundle all the dependencies together.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running the Server's Docker Container\nDESCRIPTION: This snippet shows the commands to run the previously built Docker image as a container in interactive mode.  The container is named `my_project_server`.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it my_project_server\n```\n\n----------------------------------------\n\nTITLE: CMake Standard Settings and Version Definitions\nDESCRIPTION: This snippet applies standard build settings and defines preprocessor macros for the Flutter version. It sets compiler definitions for FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, FLUTTER_VERSION_MINOR, FLUTTER_VERSION_PATCH, and FLUTTER_VERSION_BUILD.  These definitions make the Flutter version available within the application's code.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Prepending Path to Plugin C++ Wrapper Sources\nDESCRIPTION: Prepends the `WRAPPER_ROOT` to each source file in the `CPP_WRAPPER_SOURCES_PLUGIN` list. This ensures that the compiler can find the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support for the project. This ensures that the application handles Unicode characters correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile Copy Command\nDESCRIPTION: This snippet updates the `Dockerfile` to copy all files and directories, including the `shared` directory, to ensure `dart pub get` can run successfully.  This is the corrected command.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY . .\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the project. This integrates the Flutter build system with CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Appending Plugin Wrapper Sources\nDESCRIPTION: Appends the name of the plugin registrar source file to the `CPP_WRAPPER_SOURCES_PLUGIN` list. This file is responsible for registering Flutter plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries - CMake\nDESCRIPTION: This snippet iterates through the PLUGIN_BUNDLED_LIBRARIES list and installs each library to the bundle's lib directory.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool.  This file contains settings specific to the Flutter environment.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the 'flutter' subdirectory to the build, which contains the Flutter library and tool build rules. This manages the Flutter-specific parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Windows Runner\nDESCRIPTION: This CMake code initializes the project, sets the minimum required CMake version, and defines the project name. It specifies CXX as a required language. This is the starting point for configuring the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the build.  This allows CMake to process the Flutter-related build files and rules.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Running Flutter app with Skia/CanvasKit\nDESCRIPTION: This command runs the Flutter application in the Chrome browser using the Skia or CanvasKit renderer. This mode improves performance and rendering quality.  FLUTTER_WEB_USE_SKIA is defined to enable Skia.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome --release --dart-define=FLUTTER_WEB_USE_SKIA=true\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Local Data (Bash)\nDESCRIPTION: This command navigates to the app directory and executes the integration tests using local data. The test file is `integration_test/app_local_data_test.dart`.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd app\n$ flutter test integration_test/app_local_data_test.dart\n```\n\n----------------------------------------\n\nTITLE: Disable Windows Macros - CMake\nDESCRIPTION: Disables Windows macros that conflict with C++ standard library functions. This prevents compilation errors caused by naming conflicts between Windows macros and C++ functions like `min` and `max`.  `NOMINMAX` avoids these conflicts.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings in CMake\nDESCRIPTION: The `APPLY_STANDARD_SETTINGS` function applies a standard set of compilation features, options, and definitions to a given target. It sets the C++ standard to 14, enables warnings and errors, and adds optimization flags and NDEBUG definition for non-Debug builds. Plugins use this function by default.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: CMake Project Initialization and Target Definition\nDESCRIPTION: This snippet initializes the CMake project, specifies the CXX language, and defines the executable target. It includes source files for the Flutter window, main application logic, utilities, Windows-specific window management, generated plugin registration, and resource files. The BINARY_NAME variable, defined in the top-level CMakeLists.txt, controls the name of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files required for building the application. The `list_prepend` function is then used to add the `EPHEMERAL_DIR` prefix to each header file path, constructing the absolute paths.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets\nDESCRIPTION: This snippet installs the native assets from the specified directory to the installation library directory. It copies the entire directory structure, and installation is marked as a 'Runtime' component.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the path to the Flutter engine's dynamic link library (DLL) for Windows. This variable is published to the parent scope for use in the install step. Also sets the path for the ICU data file and project build directory.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Install lcov on Linux\nDESCRIPTION: This command installs the `lcov` tool on Linux systems using the `apt` package manager. `lcov` is used for test coverage analysis, providing insights into how much of the code is covered by tests.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install lcov\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies and RPATH\nDESCRIPTION: This snippet configures CMake policies for modern behavior and sets the RPATH to load bundled libraries from the 'lib/' directory relative to the binary. This ensures that the application can find its dependencies at runtime.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Application Definition\nDESCRIPTION: Adds a preprocessor definition to set the application ID.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes the generated configuration file from the ephemeral directory. This file contains configurations provided by the Flutter tool, such as tool environment variables.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Assets\nDESCRIPTION: Copies the flutter assets directory to the data directory of the bundle. It first removes any existing assets to prevent stale files.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins CMake file\nDESCRIPTION: This includes a separate CMake file responsible for managing the building and integration of plugins. This file is expected to be located in the 'flutter' subdirectory.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds definitions for Unicode to ensure Unicode support across the project.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Runner\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and setting the project name with CXX language support.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the path to the `flutter_linux` directory within the `ephemeral` directory to each entry.  This makes the headers available for inclusion during compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the ephemeral directory path. This directory likely contains generated configuration files and build artifacts.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter Windows DLL. It then sets this variable and other relevant variables (ICU data file, project build directory, and AOT library path) in the parent scope for use during the installation step.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building and Running with Docker Compose\nDESCRIPTION: This snippet shows the command to use Docker Compose to build and run the server in detached mode.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncd my_project\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the APPLICATION_ID, which is used in the application code. It uses the previously defined APPLICATION_ID variable.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: Applies a set of standard build settings to the target `${BINARY_NAME}`. This function encapsulates common build configurations that can be removed for applications requiring different settings. This is typically used for configuring compiler flags and build options.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Include Directories\nDESCRIPTION: This snippet adds dependency libraries (flutter, flutter_wrapper_app, dwmapi.lib) to the executable target and includes the source directory. dwmapi.lib is the Desktop Window Manager API library.  These provide the necessary functions and headers for the Flutter application to run correctly.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Directories\nDESCRIPTION: This snippet sets the directories for ephemeral files and includes generated configuration files.  It also defines the wrapper root directory.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This includes the runner subdirectory which usually contains platform specific configurations.  It adds the runner subdirectory to the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool, which contains platform-specific settings and dependencies.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: Adds the runner directory as a subdirectory to the current CMake project. This contains the application-specific build files (e.g., main.cpp) and resources.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Output Directory\nDESCRIPTION: This snippet configures the runtime output directory for the executable, placing it in a subdirectory to prevent users from running the unbundled copy.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet removes the assets directory and re-copies it during installation to prevent stale files.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App from CLI\nDESCRIPTION: This snippet shows the commands to navigate to the client directory and run the Flutter app using the command line.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd my_project/client\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This snippet sets variables related to the Flutter library, including the path to the shared object (`FLUTTER_LIBRARY`), the path to the ICU data file (`FLUTTER_ICU_DATA_FILE`), the project build directory (`PROJECT_BUILD_DIR`), and the AOT library (`AOT_LIBRARY`). These variables are published to the parent scope for use in other parts of the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project for Flutter runner\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and setting the project name to 'runner'. It also declares the supported language as CXX (C++).\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing Application Target\nDESCRIPTION: This snippet installs the application target (the executable) to the specified destination within the installation prefix. This is a crucial step in making the application runnable after installation.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of header files that are part of the Flutter library interface. These headers provide the necessary declarations for interacting with the Flutter engine from C++ code. It then prepends the ephemeral directory to each header file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App with Custom Web Port\nDESCRIPTION: This command runs the Flutter web application on a specific port (5000 in this case). This is useful for avoiding port conflicts or for specific development configurations.  It also helps address potential CORS issues.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome --web-port=5000\n```\n\n----------------------------------------\n\nTITLE: Building the Angular and Flutter App\nDESCRIPTION: This command runs the `build` script defined in the `package.json` file, which first builds the Flutter web app and then builds the Angular application. This integrates the Flutter web app into the Angular `assets` directory.\nSOURCE: https://github.com/flutter/samples/blob/main/web_embedding/ng-flutter/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function APPLY_STANDARD_SETTINGS that applies standard compilation settings to a given target. It sets the C++ standard to c++_std_14 and adds compilation options for warnings, errors, and optimization levels.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executable\nDESCRIPTION: This snippet links the required libraries (flutter and GTK) to the executable target, ensuring that the application can access their functionalities.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings to the Flutter executable\nDESCRIPTION: This applies a set of pre-defined build settings to the executable.  The specifics of what these settings are is defined in the `apply_standard_settings` macro, which is not shown here.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: Defines the build configuration types (Debug, Profile, Release) for multi-configuration generators (e.g., Visual Studio). If not a multi-configuration generator, it sets the CMAKE_BUILD_TYPE to Debug and allows overriding it with \"Profile\" or \"Release\".\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Tool Backend Command\nDESCRIPTION: Defines a custom command to run the Flutter tool backend. It uses a phony output to force the command to run every time, as there's no full input/output list from the Flutter tool. The command invokes a batch script to generate the Flutter library, headers, and wrapper sources.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to point to the 'ephemeral' directory within the current source directory. This directory typically contains generated configuration files and libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version - CMake\nDESCRIPTION: This sets the minimum required CMake version for the project. It ensures that the CMake version used to build the project is at least 3.14. This prevents errors or unexpected behavior due to older CMake versions lacking required features.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper Plugin Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_plugin`. This library contains the C++ wrapper code needed for plugins.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project for the compass_app, specifying the minimum CMake version and supported languages.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(compass_app LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting linker and compiler flags for Profile mode\nDESCRIPTION: This snippet defines settings for the Profile build mode, linking it to the Release configuration.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble custom target. This ensures that the Flutter engine and assets are built before the runner executable is linked.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and other temporary build artifacts. This directory is crucial for accessing the Flutter library and headers.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet sets the minimum required CMake version and declares the project with the CXX language. It also sets the binary name for the application.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(context_menus LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"context_menus\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to 3.14. This ensures that the CMake version used to build the project is compatible with the features used in the script.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Logging Output Example\nDESCRIPTION: This shows example logging from the server during requests. It shows the timestamp, duration, HTTP method, response code, and path requested. It helps in debugging and monitoring the server's activity.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/server/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n2021-05-06T15:47:04.620417  0:00:00.000158 GET     [200] /\n2021-05-06T15:47:08.392928  0:00:00.001216 GET     [200] /echo/I_love_Dart\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the path to the ephemeral directory to each header file. This list is used to set up include directories for the Flutter library target.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Play Games Services IDs\nDESCRIPTION: This XML snippet defines string resources used by the Android app for integrating with Google Play Games Services. It contains the application ID (`app_id`), package name (`package_name`), and IDs for achievements and leaderboards. This file, named `games-ids.xml`, should be placed in the `android/app/src/main/res/values/` directory of the Flutter project.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!--Google Play game services IDs. Save this file as res/values/games-ids.xml in your project.-->\n<resources>\n    <!--app_id-->\n    <string name=\"app_id\" translatable=\"false\">424242424242</string>\n    <!--package_name-->\n    <string name=\"package_name\" translatable=\"false\">dev.flutter.tictactoe</string>\n    <!--achievement First win-->\n    <string name=\"achievement_first_win\" translatable=\"false\">sOmEiDsTrInG</string>\n    <!--leaderboard Highest Score-->\n    <string name=\"leaderboard_highest_score\" translatable=\"false\">sOmEiDsTrInG</string>\n</resources>\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Custom Target\nDESCRIPTION: This snippet adds a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources.  This target triggers the build of these components. It depends on the output of the `add_custom_command` defined above.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the CMake commands used in the file.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Defining the executable target\nDESCRIPTION: This snippet defines the executable target using the name specified by BINARY_NAME. It includes the listed source files in the build process. It then applies the standard build settings and adds dependencies on the flutter library and the GTK package.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the 'runner' subdirectory to the build process. This directory contains the application-specific code and resources.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Application build\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Finding GTK Package\nDESCRIPTION: This snippet uses pkg-config to find the GTK library package, setting up the necessary include paths and libraries for linking.  GTK is a GUI toolkit used by Flutter desktop applications.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: CMake Standard Build Settings Application\nDESCRIPTION: This applies a standard set of build settings to the specified binary. The exact configuration applied by `apply_standard_settings` is not specified in this snippet but it is responsible for configuring general build settings.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This defines the `WRAPPER_ROOT` variable, which points to the 'cpp_client_wrapper' directory within the ephemeral directory. This directory likely contains the C++ wrapper code for interacting with the Flutter engine.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the directory containing generated configuration files.  This directory is used to locate Flutter-specific build artifacts and configuration settings.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory Properties\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory to prevent users from running the unbundled copy.  The output directory is set to `${CMAKE_BINARY_DIR}/intermediates_do_not_run`.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Updating CocoaPods Specs Repository\nDESCRIPTION: This shell script navigates to the `ios` directory, updates the CocoaPods repository, and then returns to the parent directory. This is used to resolve issues when upgrading Flutter or plugins, particularly for iOS or macOS builds.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ncd ios\npod repo update\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions for Flutter Version\nDESCRIPTION: This snippet adds preprocessor definitions to the build, embedding Flutter version information into the compiled application. These definitions are then available in the C++ code. It sets compiler definitions for version information such as major, minor, patch, and build numbers, using variables that are presumably defined elsewhere in the CMake configuration or passed to CMake during its invocation.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\"\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories\nDESCRIPTION: This snippet defines the directories where data and library files will be installed. INSTALL_BUNDLE_DATA_DIR will contain data files, while INSTALL_BUNDLE_LIB_DIR will contain library files.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maps SDK API Key - iOS\nDESCRIPTION: This snippet describes the need to add a Google Maps SDK for iOS API key to the `ios/Runner/AppDelegate.m` file. This step is crucial for enabling the Google Map to render correctly in the iOS application. The API key allows the app to authenticate with the Google Maps service and access its functionalities.\nSOURCE: https://github.com/flutter/samples/blob/main/flutter_maps_firestore/README.md#_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nYou need to add a Google Maps SDK for iOS API key to `ios/Runner/AppDelegate.m`.\n```\n\n----------------------------------------\n\nTITLE: Setting Build Bundle Directory\nDESCRIPTION: This snippet sets the build bundle directory to the location where the executable will be placed, ensuring that support files are copied next to the executable for easier execution.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Switch to Flutter Master Channel\nDESCRIPTION: This command switches the Flutter channel to master, allowing access to experimental features and SDK versions. It's essential to run `flutter upgrade` afterward to update the Flutter SDK.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter channel master\nflutter upgrade\n```\n\n----------------------------------------\n\nTITLE: Removing existing build bundle directory\nDESCRIPTION: This snippet removes the existing build bundle directory at the start of the install process to ensure a clean build. It uses the `file(REMOVE_RECURSE)` command.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running the Compass App in Staging Environment (Bash)\nDESCRIPTION: These commands first navigate to the server directory and start a dummy HTTP server that provides fake data. Then, it navigates back to the app directory and runs the Flutter application in the staging environment. The target file is `lib/main_staging.dart`.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd server\n$ dart run\n# => Server listening on port 8080\n \n$ cd ../compass_app/app\n$ flutter run --target lib/main_staging.dart\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element in a list. This is used because `list(TRANSFORM ... PREPEND ...)` isn't available in CMake 3.10.  It iterates through the input list, prepends the specified prefix to each element, and then updates the original list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Disable Conflicting Windows Macros (CMake)\nDESCRIPTION: Disables the Windows \"NOMINMAX\" macro to prevent conflicts with the C++ standard library's min/max functions.  This ensures that standard C++ practices are not hindered by Windows-specific definitions.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines the build configuration options (Debug, Profile, Release) based on whether the CMake generator is multi-configuration or single-configuration. It sets the CMAKE_BUILD_TYPE and CMAKE_CONFIGURATION_TYPES variables accordingly.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency\nDESCRIPTION: Adds a dependency to the target `${BINARY_NAME}` on the `flutter_assemble` target. This ensures that the Flutter tool is run as part of the build process, which is essential for building a Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Wrapper Plugin Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_plugin`. It includes the core and plugin wrapper sources, applies standard settings, sets target properties for position independent code and hidden C++ visibility, links against the flutter library, sets include directories, and adds a dependency on flutter_assemble.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories for Data and Libraries\nDESCRIPTION: This snippet sets the installation directories for data and libraries within the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the CMake build, allowing Flutter's build rules to be included.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file from the `EPHEMERAL_DIR` directory.  This file likely contains configurations generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This code block sets the linker and compiler flags for the 'Profile' build mode, making them the same as the 'Release' build mode flags. This ensures that the Profile mode has similar optimization levels to Release.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Project Definition - CMake\nDESCRIPTION: This defines the project name as 'runner' and specifies CXX as the language. The project name is used throughout the build process.  CXX indicates that C++ will be used for compilation.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Demos with Peanut\nDESCRIPTION: This snippet uses the `peanut` package to build all Flutter demos, including the sample index.  It assumes `peanut` has been activated globally and that all dependencies are resolved.\nSOURCE: https://github.com/flutter/samples/blob/main/web/readme.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub global run peanut\n```\n\n----------------------------------------\n\nTITLE: Installing Cocoapods with gem\nDESCRIPTION: This command installs the latest version of Cocoapods using the gem package manager. Cocoapods is required for the iOS samples in this repository.  It should be executed on a macOS machine.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter Interface Library\nDESCRIPTION: Links the 'flutter' interface library to the 'FLUTTER_LIBRARY.lib' library.  This ensures that code depending on the 'flutter' library will be linked against the actual Flutter Windows DLL.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets a default value for FLUTTER_TARGET_PLATFORM if it is not already defined. This provides a fallback configuration for older versions of the Flutter tool where this variable might not be set. The default value is set to \"windows-x64\".\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project, integrating Flutter's build system into the overall project build process. This allows CMake to manage the Flutter-specific build steps.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/fluent_ui/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This snippet defines a function, `APPLY_STANDARD_SETTINGS`, to apply common compilation features, options, and definitions to a target. It sets C++ standard to 14, adds warning flags, and optimizes for non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components\nDESCRIPTION: This snippet installs the runtime components of the application, including the executable, ICU data file, Flutter library, and plugin libraries. It specifies the destination directories for these components and marks them as part of the Runtime component.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing project with CMake\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the CXX language. It also sets the binary name and application ID for the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"simplistic_calculator\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.simplistic_calculator\")\n```\n\n----------------------------------------\n\nTITLE: Activating Peanut Package for Deployment\nDESCRIPTION: This snippet shows how to globally activate the `peanut` package in Flutter, which is used for deploying the samples to GitHub Pages.  It requires the Flutter SDK to be installed and configured.\nSOURCE: https://github.com/flutter/samples/blob/main/web/readme.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ flutter pub global activate peanut\n```\n\n----------------------------------------\n\nTITLE: Adding application definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, using the value of the `APPLICATION_ID` variable.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the `generated_config.cmake` file from the ephemeral directory. This file contains configuration variables generated by the Flutter tool.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains important build settings and variables required for the Flutter build process.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration options (Debug, Profile, Release) based on whether the generator is multi-config or single-config. It sets CMAKE_BUILD_TYPE and ensures it is one of the supported types.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_editor/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros\nDESCRIPTION: This snippet disables Windows macros that may collide with C++ standard library functions, specifically using `NOMINMAX` to prevent conflicts with `std::min` and `std::max`.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Installing Target Executable and Supporting Files\nDESCRIPTION: This snippet installs the target executable, the ICU data file, and the Flutter library to the specified destination directories. It also installs bundled plugin libraries if they exist.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet sets the compiler and linker flags for the Profile build mode, copying them from the Release build mode.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter Windows DLL file located in the ephemeral directory. This variable is then published to the parent scope for use in install steps.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing In-App Purchase Controller in Dart\nDESCRIPTION: This Dart code shows how to conditionally initialize the `InAppPurchaseController` based on the platform and environment. The code checks if the app is not running on web (`kIsWeb`) and is running on either iOS or Android. It creates an instance of `InAppPurchaseController` and subscribes to the `InAppPurchase.instance.purchaseStream` to listen for purchase updates and calls `restorePurchases()` to restore any previous purchases. This block of code should be uncommented when in-app purchase functionality is desired.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n// TODO: When ready, uncomment the following lines.\n   \nInAppPurchaseController? inAppPurchaseController;\n// if (!kIsWeb && (Platform.isIOS || Platform.isAndroid)) {\n//   inAppPurchaseController = InAppPurchaseController(InAppPurchase.instance)\n//     // Subscribing to [InAppPurchase.instance.purchaseStream] as soon\n//     // as possible in order not to miss any updates.\n//     ..subscribe();\n//   // Ask the store what the player has bought already.\n//   inAppPurchaseController.restorePurchases();\n// } \n```\n\n----------------------------------------\n\nTITLE: Set Installation Directories\nDESCRIPTION: Defines the installation directories for data and library files within the application bundle. These directories are used when installing the necessary files for the application to run.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions\nDESCRIPTION: Adds a compiler definition to define `APPLICATION_ID` with the value specified earlier.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project by specifying the minimum required CMake version, the project name, and the supported languages. It sets the binary name and opts-in to modern CMake behaviors to avoid warnings.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(material_3_demo LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"material_3_demo\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts-in to modern CMake behaviors to avoid warnings with recent versions of CMake and loads bundled libraries from the lib/ directory relative to the binary using RPATH.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable file that will be created when the application is built.  Changing BINARY_NAME changes the on-disk name of the compiled application.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"compass_app\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.10, ensuring compatibility with the features used in the build script.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Creating App Wrapper Library\nDESCRIPTION: Creates a static library `flutter_wrapper_app` from the specified C++ wrapper source files. It applies standard settings, links to the flutter INTERFACE library, and includes the wrapper include directory.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This creates an interface library named 'flutter' and sets its include directories and link libraries. This interface provides a way for other targets to link against the Flutter library without directly linking to the DLL.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This sets the `WRAPPER_ROOT` variable, pointing to the directory containing the C++ client wrapper code. This is later used when specifying source files.\nSOURCE: https://github.com/flutter/samples/blob/main/dynamic_theme/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Prepend Directory to Headers\nDESCRIPTION: Prepends the path to the flutter_linux directory to the FLUTTER_LIBRARY_HEADERS variable using the custom list_prepend function.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting AOT Library Path\nDESCRIPTION: Sets the `AOT_LIBRARY` variable to the location of the Ahead-Of-Time compiled library. It publishes this to the parent scope. This library contains the compiled Flutter application code.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Paths\nDESCRIPTION: Sets the installation paths for the build bundle. The CMAKE_INSTALL_PREFIX is set to ${PROJECT_BINARY_DIR}/bundle if it is at its default value. The data and lib directories are also defined.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring sysroot for cross-building\nDESCRIPTION: This snippet configures the sysroot for cross-building, setting the CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables based on the FLUTTER_TARGET_PLATFORM_SYSROOT.  It also sets the search modes for programs, packages, libraries, and includes.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cross-Building Configuration\nDESCRIPTION: This snippet configures the build environment for cross-building by setting the CMAKE_SYSROOT and related paths based on the FLUTTER_TARGET_PLATFORM_SYSROOT variable. This is used to locate libraries and includes for the target platform.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings and adding compile definitions in CMake\nDESCRIPTION: This snippet applies standard build settings and defines preprocessor macros for the Flutter version. It sets compile definitions for FLUTTER_VERSION, FLUTTER_VERSION_MAJOR, FLUTTER_VERSION_MINOR, FLUTTER_VERSION_PATCH, and FLUTTER_VERSION_BUILD.  These definitions make the Flutter version information available within the C++ code.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg-config` to find required system libraries (GTK, GLib, GIO).  `pkg_check_modules` verifies the existence and availability of each module and makes them accessible as imported targets.\nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build. This ensures that the build system has the necessary features and functionality.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/client/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation Directories\nDESCRIPTION: This snippet sets up installation directories for the application and its dependencies. It configures where the executable, data files, and libraries will be installed during the installation process. It also ensures the installation step is the default build step for Visual Studio.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/federated_plugin/federated_plugin/example/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Assemble Custom Target\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library, headers, and wrapper sources. This target ensures that the Flutter tool backend command is executed before any target that depends on these files.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the APPLICATION_ID, using the value set earlier in the file. This makes the application ID available to the C++ code.\nSOURCE: https://github.com/flutter/samples/blob/main/navigation_and_routing/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the data directory in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries and installs them to the lib directory in the bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Installing bundled libraries\nDESCRIPTION: This snippet conditionally installs bundled libraries if the PLUGIN_BUNDLED_LIBRARIES variable is set. This allows for including additional libraries required by plugins in the installation.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter as Subdirectory\nDESCRIPTION: This snippet adds the Flutter directory as a subdirectory, allowing CMake to build the Flutter engine and related components.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: Creates a list of header files required for the Flutter library and prepends the ephemeral directory to each header file path. These headers are used when compiling against the Flutter library.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type\nDESCRIPTION: This snippet defines the build type if it's not already set. It defaults to \"Debug\" and provides options for \"Profile\" and \"Release\".\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking libraries for Flutter Windows runner\nDESCRIPTION: This snippet adds dependency libraries and include directories for the Flutter Windows runner. It links against `flutter`, `flutter_wrapper_app`, and `dwmapi.lib`. It also adds the source directory to the include path, allowing the application to include its own headers. These libraries are linked privately.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This includes a CMake configuration file generated by the Flutter tool. This file likely contains platform-specific settings and dependencies required to build the Flutter application.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Executable - CMake\nDESCRIPTION: This snippet applies the standard build settings defined in the APPLY_STANDARD_SETTINGS function to the application executable target.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library file to the library directory of the installation prefix.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Setting Include Directories (CMake)\nDESCRIPTION: This snippet links necessary libraries to the executable and sets include directories. It links `flutter`, `flutter_wrapper_app`, and `dwmapi.lib` libraries. It also includes the project's source directory in the include paths. This ensures that the application can access necessary Flutter components and Windows APIs.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: Includes the generated plugin build rules, managing plugin building and integration into the application. It uses the flutter/generated_plugins.cmake file.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-of-Time) compiled library to the specified destination directory, but only for Profile and Release configurations, not for Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/animations/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Position Independent Code\nDESCRIPTION: Sets the `POSITION_INDEPENDENT_CODE` property of the 'flutter_wrapper_plugin' library to `ON`. This allows the library to be loaded at any address in memory, which is often required for shared libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/windows/flutter/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Root\nDESCRIPTION: This sets the `WRAPPER_ROOT` variable, which points to the directory containing the C++ client wrapper code. This wrapper provides an interface between the Flutter engine and native Windows code.\nSOURCE: https://github.com/flutter/samples/blob/main/gemini_tasks/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Bash Script for Flutter Dependency Setup\nDESCRIPTION: This bash script automates the process of fetching Flutter dependencies and opening the Android project in Android Studio. It is designed to simplify the initial setup for developers working on integrating Flutter modules into Android apps. It assumes that the Flutter and Android development environments are already configured.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/android_view/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  #!/bin/bash\n  set -e\n\n  cd flutter_module_using_plugin/\n  flutter pub get\n\n  # For Android builds:\n  open -a \"Android Studio\" ../android_view # macOS only\n  # Or open the ../android_fullscreen folder in Android Studio for other platforms.\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the ephemeral directory, which contains generated configuration files and other temporary build artifacts. The path is relative to the current source directory.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration File\nDESCRIPTION: This snippet includes a generated configuration file from the Flutter tool. This file likely contains platform-specific settings and other configuration parameters needed for the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Variables\nDESCRIPTION: This snippet sets variables for the installation directory, including the bundle directory, data directory, and library directory.  It also forces the install step to be the default, overriding default CMake behavior, and forcing CMAKE_INSTALL_PREFIX to the bundle dir. \nSOURCE: https://github.com/flutter/samples/blob/main/deeplink_store_example/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"<$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Building Flutter App for iOS\nDESCRIPTION: This command builds the Flutter application for iOS and then opens Xcode with the generated archive. Xcode is then used to package and distribute the application to the App Store. This is a common step in the iOS app deployment process.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nflutter build ipa && open build/ios/archive/Runner.xcarchive\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake.  It ensures compatibility and best practices are followed during the build process.\nSOURCE: https://github.com/flutter/samples/blob/main/desktop_photo_search/material/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Managed Directory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project.  This allows CMake to build the necessary Flutter components. `FLUTTER_MANAGED_DIR` is defined as `CMAKE_CURRENT_SOURCE_DIR/flutter`.\nSOURCE: https://github.com/flutter/samples/blob/main/simplistic_calculator/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Add Flutter Subdirectory\nDESCRIPTION: Adds the 'flutter' subdirectory (containing Flutter engine build files) to the build process. This allows CMake to build the necessary Flutter components.\nSOURCE: https://github.com/flutter/samples/blob/main/infinite_list/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Define list_prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` to prepend a prefix to each element in a list. This function is used because `list(TRANSFORM ... PREPEND ...)` is not available in CMake 3.10.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_counter/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Appending and Transforming C++ Wrapper Sources (App)\nDESCRIPTION: Appends a list of application-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_APP` variable. Then, it transforms the list by prepending the `WRAPPER_ROOT` path to each source file name. This is done to ensure the compiler can find the source files.\nSOURCE: https://github.com/flutter/samples/blob/main/context_menus/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This loop iterates through a list of bundled libraries and installs each one to the installation library directory. This ensures that all required dependencies are included in the application bundle.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation\nDESCRIPTION: This snippet configures the installation process. It sets the build bundle directory, installs the application target, ICU data file, Flutter library, and plugin bundled libraries. It also handles copying the assets directory and installing the AOT library on non-Debug builds.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Recursive on Install\nDESCRIPTION: This snippet removes recursively all the files in build bundle directory on install.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets up the CMake project, defining the minimum required CMake version and the project name with CXX language support. This is the foundational setup for building the Flutter Windows application.\nSOURCE: https://github.com/flutter/samples/blob/main/material_3_demo/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Tool Backend Assembly\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend and defines a custom target 'flutter_assemble' that depends on the outputs of the custom command. The tool backend is responsible for assembling the Flutter library and other necessary files.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Sysroot for Cross-building in CMake\nDESCRIPTION: This code block configures the sysroot for cross-building if `FLUTTER_TARGET_PLATFORM_SYSROOT` is defined. It sets CMake variables related to finding libraries and includes within the specified sysroot. This allows for cross-compilation by pointing to the correct system root.\nSOURCE: https://github.com/flutter/samples/blob/main/form_app/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define List Prepend Function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element of a list.  This function replicates `list(TRANSFORM ... PREPEND ...)` functionality for CMake versions older than those that support it natively. The function receives the list name and the prefix as parameters, and modifies the list in the parent scope.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Open Android Studio - Shell Script\nDESCRIPTION: This macOS-specific shell script command opens the `multiple_flutters_android` project directory in Android Studio.  This step is crucial for building and running the Android application that hosts multiple Flutter instances.\nSOURCE: https://github.com/flutter/samples/blob/main/add_to_app/multiple_flutters/multiple_flutters_android/README.md#_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\nopen -a \"Android Studio\" multiple_flutters_android/ # macOS command\n```\n\n----------------------------------------\n\nTITLE: Appending to App C++ Wrapper Sources\nDESCRIPTION: Appends source files to the `CPP_WRAPPER_SOURCES_APP` list. These sources provide application-level functionality for the C++ wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/simple_shader/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet sets the minimum required CMake version and initializes the project with CXX language support.  It also sets the binary name of the executable.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(game_template LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"game_template\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the WRAPPER_ROOT variable to the path of the C++ client wrapper directory located within the ephemeral directory. This directory contains the source code for the C++ wrapper.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/varfont_shader_puzzle/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds definitions to enable Unicode support for all projects. It uses the `add_definitions` command to define UNICODE and _UNICODE.\nSOURCE: https://github.com/flutter/samples/blob/main/isolate_example/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Wrapper Sources\nDESCRIPTION: Defines lists of source files for the C++ wrapper code. These are separated into core, plugin, and app components. The ephemeral directory is prepended to each source file path.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This code defines a variable `EPHEMERAL_DIR` that points to the `ephemeral` directory within the current source directory. This directory typically contains generated files and configurations specific to the Flutter build.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Install Directories\nDESCRIPTION: This snippet defines the installation directories for data and libraries.\nSOURCE: https://github.com/flutter/samples/blob/main/provider_shopper/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration\nDESCRIPTION: This snippet defines the build configuration options, setting the CMAKE_BUILD_TYPE to \"Debug\" if not already specified. It also allows the user to choose between \"Debug\", \"Profile\", and \"Release\" build types.\nSOURCE: https://github.com/flutter/samples/blob/main/compass_app/app/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning Flutter samples with partial clone using Git\nDESCRIPTION: This command shows how to clone the Flutter samples repository using a partial clone with Git. This skips blob objects that aren't currently checked out, which reduces download size, while still including the full commit history. This method efficiently retrieves the repository structure and only downloads file content as needed.\nSOURCE: https://github.com/flutter/samples/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --filter=blob:none https://github.com/flutter/samples.git\n```\n\n----------------------------------------\n\nTITLE: AdMob Initialization (Dart)\nDESCRIPTION: This code snippet shows the commented-out code section for initializing AdMob in the Flutter game. It includes instantiating the `AdsController`, preparing the `google_mobile_ads` plugin, and handling platform checks to determine whether or not to initialize AdMob on Android or iOS. The code is conditional and commented-out by default, so it needs to be uncommented to enable AdMob integrations.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/README.md#_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\n// TODO: When ready, uncomment the following lines to enable integrations.\n\nAdsController? adsController;\n// if (!kIsWeb && (Platform.isIOS || Platform.isAndroid)) {\n//   /// Prepare the google_mobile_ads plugin so that the first ad loads\n//   /// faster. This can be done later or with a delay if startup\n//   /// experience suffers.\n//   adsController = AdsController(MobileAds.instance);\n//   adsController.initialize();\n// }\n```\n\n----------------------------------------\n\nTITLE: Stopping the Server with Docker Compose\nDESCRIPTION: This snippet shows the command to stop the server launched via Docker Compose.\nSOURCE: https://github.com/flutter/samples/blob/main/code_sharing/README.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker-compose stop\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: Initializes the CMake project, sets the minimum required CMake version to 3.14, and defines the project name and supported languages (CXX). It also defines the binary name.\nSOURCE: https://github.com/flutter/samples/blob/main/asset_transformation/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(asset_transformation LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"asset_transformation\")\n```\n\n----------------------------------------\n\nTITLE: HTML Meta Tag for Google Sign-In\nDESCRIPTION: This HTML meta tag is used to configure Google Sign-In for the web application.  The `content` attribute should be replaced with the actual Web client ID obtained from the Firebase console. This meta tag is placed in the `index.html` file.\nSOURCE: https://github.com/flutter/samples/blob/main/experimental/web_dashboard/README.md#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n  <!-- Uncomment and add Firebase client ID here: -->\n  <!-- <meta name=\"google-signin-client_id\" content=\"<YOUR WEB CLIENT ID>\"> -->\n```\n\n----------------------------------------\n\nTITLE: Install lcov on MacOS\nDESCRIPTION: This command installs the `lcov` tool on macOS using the Homebrew package manager. `lcov` is used for generating test coverage reports.\nSOURCE: https://github.com/flutter/samples/blob/main/testing_app/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nbrew install lcov\n```\n\n----------------------------------------\n\nTITLE: Apache License Copyright Notice\nDESCRIPTION: This code snippet provides the template for the copyright notice to be included when applying the Apache License 2.0 to a project.  It requires replacing '[yyyy]' with the year of copyright and '[name of copyright owner]' with the copyright holder's name. The entire block should be enclosed in the appropriate comment syntax for the file type.\nSOURCE: https://github.com/flutter/samples/blob/main/game_template/assets/Permanent_Marker/LICENSE.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n```"
  }
]