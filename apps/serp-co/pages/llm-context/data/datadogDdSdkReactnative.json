[
  {
    "owner": "datadog",
    "repo": "dd-sdk-reactnative",
    "content": "TITLE: Manually Controlling Session Replay Recording in React Native\nDESCRIPTION: Example showing how to manually start and stop Session Replay recording by using the startRecordingImmediately parameter and control methods.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-session-replay/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SessionReplay } from \"@datadog/mobile-react-native-session-replay\";\n\nSessionReplay.enable({\n  replaySampleRate: sampleRate,\n  startRecordingImmediately: false\n});\n// Do something\nSessionReplay.startRecording();\nSessionReplay.stopRecording();\n```\n\n----------------------------------------\n\nTITLE: Enabling Session Replay in React Native with Configuration Options\nDESCRIPTION: Example code showing how to enable and configure Session Replay with privacy settings for text, inputs, images, and user touches.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-session-replay/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SessionReplay } from \"@datadog/mobile-react-native-session-replay\";\n\nSessionReplay.enable({\n    replaySampleRate: sampleRate, // The percentage of sampled replays, in the range 0.0 - 100.0 (Default: 100.0).\n    textAndInputPrivacyLevel: TextAndInputPrivacyLevel.MASK_ALL, // Defines the way text and input (e.g text fields, checkboxes) should be masked (Default: `MASK_ALL`).\n    imagePrivacyLevel: ImagePrivacyLevel.MASK_ALL, // Defines the way images should be masked (Default: `MASK_ALL`).\n    touchPrivacyLevel: TouchPrivacyLevel.HIDE  // Defines the way user touches (e.g tap) should be masked (Default: `HIDE`).\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Datadog SDK with React Native Provider Component\nDESCRIPTION: Code to initialize the Datadog SDK by configuring the DatadogProvider component with application details, tracking options, and optional settings like website selection, crash reporting, sampling rates, and verbosity.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/core/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    DatadogProvider,\n    DatadogProviderConfiguration\n} from '@datadog/mobile-react-native';\n\nconst datadogConfiguration = new DatadogProviderConfiguration(\n    '<CLIENT_TOKEN>',\n    '<ENVIRONMENT_NAME>',\n    '<RUM_APPLICATION_ID>',\n    true, // track User interactions (e.g.: Tap on buttons. You can use 'accessibilityLabel' element property to give tap action the name, otherwise element type will be reported)\n    true, // track XHR Resources\n    true // track Errors\n);\n// Optional: Select your Datadog website (one of \"US1\", \"US3\", \"US5\", EU1\", or \"US1_FED\"). Default is \"US1\".\ndatadogConfiguration.site = 'US1';\n// Optional: enable or disable native crash reports\ndatadogConfiguration.nativeCrashReportEnabled = true;\n// Optional: sample RUM sessions (here, 80% of session will be sent to Datadog. Default = 100%)\ndatadogConfiguration.sessionSamplingRate = 80;\n// Optional: sample tracing integrations for network calls between your app and your backend (here, 80% of calls to your instrumented backend will be linked from the RUM view to the APM view. Default = 20%)\n// You need to specify the hosts of your backends to enable tracing with these backends\ndatadogConfiguration.resourceTracingSamplingRate = 80;\ndatadogConfiguration.firstPartyHosts = ['example.com']; // matches 'example.com' and subdomains like 'api.example.com'\n// Optional: set the reported service name (by default, it'll use the package name / bundleIdentifier of your Android / iOS app respectively)\ndatadogConfiguration.serviceName = 'com.example.reactnative';\n// Optional: let the SDK print internal logs (above or equal to the provided level. Default = undefined (meaning no logs))\ndatadogConfiguration.verbosity = SdkVerbosity.WARN;\n\nexport default function App() {\n    return (\n        <DatadogProvider configuration={datadogConfiguration}>\n            <Navigation />\n        </DatadogProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DatadogProvider in React Native App\nDESCRIPTION: This code demonstrates how to wrap the main App component with the DatadogProvider, passing it the configuration. It shows the basic structure of using the DatadogProvider in a React Native application.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/docs/migrating_to_datadog_provider.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// App.js\n\nconst config = new DatadogProviderConfiguration();\n//...\n\nexport default function App() {\n    return (\n        <DatadogProvider configuration={config}>\n            <Navigation />\n        </DatadogProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing resourceEventMapper for Filtering GraphQL Variables\nDESCRIPTION: Shows how to use resourceEventMapper in Datadog configuration to remove sensitive data (like passwords) from GraphQL variables before they are sent to Datadog.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-apollo-client/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst datadogConfiguration = new DatadogProviderConfiguration(\n    '<CLIENT_TOKEN>',\n    '<ENVIRONMENT_NAME>',\n    '<RUM_APPLICATION_ID>',\n    true,\n    true,\n    true\n);\n\ndatadogConfiguration.resourceEventMapper = event => {\n    // Variables are stored in event.context['_dd.graphql.variables'] as a JSON string when present\n    if (event.context['_dd.graphql.variables']) {\n        const variables = JSON.parse(event.context['_dd.graphql.variables']);\n        if (variables.password) {\n            variables.password = '***';\n        }\n        event.context['_dd.graphql.variables'] = JSON.stringify(variables);\n    }\n\n    return event;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom View Name Tracking in React Native Navigation\nDESCRIPTION: JavaScript code snippet demonstrating how to implement custom view name tracking for Datadog RUM in a React Native application using react-native-navigation. It shows the usage of DdRumReactNativeNavigationTracking.startTracking() with a custom ViewNamePredicate function.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-navigation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DdRumReactNativeNavigationTracking, ViewNamePredicate }  from '@datadog/mobile-react-native-navigation';\nimport { ComponentDidAppearEvent } from 'react-native-navigation';\n\nconst viewNamePredicate: ViewNamePredicate = function customViewNamePredicate(event: ComponentDidAppearEvent, trackedName: string) {\n  return \"My custom View Name\"\n}\n\nDdRumReactNativeNavigationTracking.startTracking(viewNamePredicate);\n```\n\n----------------------------------------\n\nTITLE: Initializing Datadog SDK for React Native with CodePush Support\nDESCRIPTION: JavaScript code snippet demonstrating how to initialize the Datadog SDK for React Native with CodePush support. It shows the configuration of tracking options and the use of DatadogCodepush.initialize() method.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/codepush/README.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { DdSdkReactNativeConfiguration } from '@datadog/mobile-react-native';\nimport { DatadogCodepush } from '@datadog/mobile-react-native-code-push';\n\nconst config = new DdSdkReactNativeConfiguration(\n    '<CLIENT_TOKEN>',\n    '<ENVIRONMENT_NAME>',\n    '<RUM_APPLICATION_ID>',\n    true, // track user interactions (such as a tap on buttons). You can use the 'accessibilityLabel' element property to give the tap action a name, otherwise the element type is reported\n    true, // track XHR resources\n    true // track errors\n);\n\nawait DatadogCodepush.initialize(config);\n```\n\n----------------------------------------\n\nTITLE: Adding DatadogLink to Apollo Client\nDESCRIPTION: Demonstrates how to integrate Datadog monitoring by adding the DatadogLink to the ApolloClient initialization. The DatadogLink must be positioned before the HttpLink in the chain.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-apollo-client/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloClient, from, HttpLink } from '@apollo/client';\nimport { DatadogLink } from '@datadog/mobile-react-native-apollo-client';\n\nconst apolloClient = new ApolloClient({\n    link: from([\n        new DatadogLink(),\n        new HttpLink({ uri: 'https://my.api.com/graphql' }) // always in last position\n    ])\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing View Navigation Tracking with React Navigation\nDESCRIPTION: Example of how to implement view tracking in a React Navigation application using the DdRumReactNavigationTracking utility. It demonstrates setting up a custom view name predicate and configuring the NavigationContainer's onReady callback.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-navigation/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { DdRumReactNavigationTracking, ViewNamePredicate } from '@datadog/mobile-react-navigation';\nimport { Route } from \"@react-navigation/native\";\n\nconst viewNamePredicate: ViewNamePredicate = function customViewNamePredicate(route: Route<string, any | undefined>, trackedName: string) {\n  return \"My custom View Name\"\n}\n\nfunction App() {\n  const navigationRef = React.useRef(null);\n  return (\n    <View>\n      <NavigationContainer ref={navigationRef} onReady={() => {\n        DdRumReactNavigationTracking.startTrackingViews(navigationRef.current, viewNamePredicate)\n      }}>\n        // …\n      </NavigationContainer>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Tracking View Navigation in React Native with Datadog RUM\nDESCRIPTION: Code example demonstrating how to manually track view navigation in a React Native application using Datadog RUM's startView and stopView methods, including passing custom attributes.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/core/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    DdSdkReactNative,\n    DdSdkReactNativeConfiguration,\n    DdLogs,\n    DdRum\n} from '@datadog/mobile-react-native';\n\n// Start a view with a unique view identifier, a custom view url, and an object to attach additional attributes to the view\nDdRum.startView('ViewKey', 'ViewName', Date.now(), {\n    'custom.foo': 'something'\n});\n// Stops a previously started view with the same unique view identifier, and an object to attach additional attributes to the view\nDdRum.stopView('ViewKey', Date.now(), { 'custom.bar': 42 });\n```\n\n----------------------------------------\n\nTITLE: Configuring WebView with Allowed Hosts for Datadog Tracking\nDESCRIPTION: This snippet demonstrates how to use the WebView component with the allowedHosts prop to specify which hosts should be tracked by Datadog inside the web view. This is crucial for enabling RUM tracking on specific domains within your React Native application.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-webview/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<WebView\n    source={{ uri: 'https://www.example.com' }}\n    allowedHosts={['example.com']}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Initialization Callback with DatadogProvider in React Native\nDESCRIPTION: This snippet illustrates how to add a callback that runs after the Datadog SDK initialization. It uses the onInitialization prop of the DatadogProvider component to specify the callback function.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/docs/migrating_to_datadog_provider.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n    return (\n        <DatadogProvider\n            configuration={config}\n            onInitialization={() => callback()}\n        >\n            <Navigation />\n        </DatadogProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Datadog React Native SDK in App\nDESCRIPTION: Example code showing how to initialize the Datadog SDK in a React Native application with configuration options.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DdSdkReactNative, DdSdkReactNativeConfiguration } from '@datadog/mobile-react-native';\n\nconst App: () => React$Node = () => {\n  const config = new DdSdkReactNativeConfiguration(\n    \"<CLIENT_TOKEN>\",\n    \"<ENVIRONMENT_NAME>\",\n    \"<RUM_APPLICATION_ID>\",\n    true, // track User interactions (e.g.: Tap on buttons)\n    true, // track XHR Resources\n    true // track Errors\n  )\n  DdSdkReactNative.initialize(config);\n  ...\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration Class in React Native Datadog SDK\nDESCRIPTION: This snippet shows how to change the configuration class from DdSdkReactNativeConfiguration to DatadogProviderConfiguration. It's a simple replacement of the class name in the instantiation.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/docs/migrating_to_datadog_provider.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\n- const config = new DdSdkReactNativeConfiguration(\n+ const config = new DatadogProviderConfiguration(\n```\n\n----------------------------------------\n\nTITLE: Migrating from URI to HttpLink in Apollo Client\nDESCRIPTION: Shows how to migrate from the simple URI parameter to using an explicit HttpLink when initializing ApolloClient, which is required for Datadog monitoring integration.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-apollo-client/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApolloClient, HttpLink } from '@apollo/client';\n\n// before\nconst apolloClient = new ApolloClient({\n    uri: 'https://my.api.com/graphql'\n});\n\n// after\nconst apolloClient = new ApolloClient({\n    link: new HttpLink({ uri: 'https://my.api.com/graphql' })\n});\n```\n\n----------------------------------------\n\nTITLE: Swift Symbol Resolution Error - Build Settings Configuration\nDESCRIPTION: Library search paths configuration to resolve Swift undefined symbols error in Xcode build settings. This needs to be set at the project level, not the app target level.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/TROUBLESHOOTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLIBRARY_SEARCH_PATHS = (\n  \"\\\"$(TOOLCHAIN_DIR)/usr/lib/swift/$(PLATFORM_NAME)\\\"\",\n  \"\\\"/usr/lib/swift\\\"\",\n  \"\\\"$(inherited)\\\"\",\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Datadog Credentials File for Example App\nDESCRIPTION: Sample code showing how to create a ddCredentials.js file with application credentials for the example app.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const APPLICATION_ID = \"<YOUR_APPLICATION_ID>\";\nexport const CLIENT_TOKEN = \"<YOUR_CLIENT_TOKEN>\";\nexport const ENVIRONMENT = \"<YOUR_ENVIRONMENT_NAME>\";\n```\n\n----------------------------------------\n\nTITLE: Importing WebView from Datadog Mobile React Native WebView\nDESCRIPTION: This snippet shows how to import the WebView component from Datadog's mobile React Native WebView package instead of the standard react-native-webview. This is necessary for instrumenting web views for Datadog RUM tracking.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-webview/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebView } from '@datadog/mobile-react-native-webview';\n// or\nimport WebView from '@datadog/mobile-react-native-webview';\n```\n\n----------------------------------------\n\nTITLE: React Native Module Import Fix\nDESCRIPTION: Solution for undefined RCTModule symbol error by modifying the import statement in DdSdk.m file. This addresses changes introduced in React Native v0.63.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/TROUBLESHOOTING.md#2025-04-22_snippet_1\n\nLANGUAGE: objective-c\nCODE:\n```\n// DdSdk.m\n// instead of\n#import <React/RCTBridgeModule.h>\n// maybe that:\n@import React // or @import React-Core\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog React Native SDK with Package Managers\nDESCRIPTION: Commands to install the Datadog Mobile SDK for React Native using either NPM or Yarn package managers.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @datadog/mobile-react-native\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @datadog/mobile-react-native\n```\n\n----------------------------------------\n\nTITLE: Running the Example App for Datadog React Native SDK\nDESCRIPTION: Commands to run the sample app for Android and iOS platforms from the example folder.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Run the Android sample\nyarn android\n\n# Run the ios sample\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands for Datadog React Native SDK\nDESCRIPTION: Commands to run tests, linters, and workspace-specific commands in the project.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Run the Unit Tests\nyarn test\n\n# Run the linter\nyarn lint\n\n# Run a command for the particular workspace (ex. @datadog/mobile-react-native)\nyarn workspace @datadog/mobile-react-native <command>\n```\n\n----------------------------------------\n\nTITLE: Installing Session Replay Package with Yarn in React Native\nDESCRIPTION: Command to install the Datadog Session Replay package using Yarn package manager.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-session-replay/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @datadog/mobile-react-native-session-replay\n```\n\n----------------------------------------\n\nTITLE: Installing Session Replay Package with NPM in React Native\nDESCRIPTION: Command to install the Datadog Session Replay package using NPM package manager.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-session-replay/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @datadog/mobile-react-native-session-replay\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Integration with Yarn\nDESCRIPTION: Command to install the @datadog/mobile-react-navigation package using Yarn package manager.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-navigation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @datadog/mobile-react-navigation\n```\n\n----------------------------------------\n\nTITLE: Installing @datadog/mobile-react-native-navigation with Yarn\nDESCRIPTION: Command to install the @datadog/mobile-react-native-navigation package using Yarn package manager.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-navigation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @datadog/mobile-react-native-navigation\n```\n\n----------------------------------------\n\nTITLE: Installing React Navigation Integration with NPM\nDESCRIPTION: Command to install the @datadog/mobile-react-navigation package using NPM package manager.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-navigation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @datadog/mobile-react-navigation\n```\n\n----------------------------------------\n\nTITLE: Installing @datadog/mobile-react-native-navigation with NPM\nDESCRIPTION: Command to install the @datadog/mobile-react-native-navigation package using NPM package manager.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/react-native-navigation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @datadog/mobile-react-native-navigation\n```\n\n----------------------------------------\n\nTITLE: Installing @datadog/mobile-react-native-code-push with Yarn\nDESCRIPTION: Command to install the Datadog React Native CodePush integration package using Yarn.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/codepush/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @datadog/mobile-react-native-code-push\n```\n\n----------------------------------------\n\nTITLE: Installing @datadog/mobile-react-native-code-push with NPM\nDESCRIPTION: Command to install the Datadog React Native CodePush integration package using NPM.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/packages/codepush/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @datadog/mobile-react-native-code-push\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Datadog React Native SDK\nDESCRIPTION: Command to install the required dependencies for each package in the project using Yarn.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Creating New Architecture Datadog Credentials File\nDESCRIPTION: Sample code for creating a ddCredentials.js file for the new architecture example app.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const APPLICATION_ID = '<APP_ID>';\nexport const CLIENT_TOKEN = '<CLIENT_TOKEN>';\nexport const ENVIRONMENT = '<ENVIRONMENT>';\n```\n\n----------------------------------------\n\nTITLE: Updating Version for Datadog React Native SDK\nDESCRIPTION: Command to bump the SDK version in lerna.json and related package.json files.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./update-version x.y.z\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages for Datadog React Native SDK\nDESCRIPTION: Command to publish the packages using Lerna after version updates.\nSOURCE: https://github.com/datadog/dd-sdk-reactnative/blob/develop/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nyarn run lerna publish from-package\n```"
  }
]