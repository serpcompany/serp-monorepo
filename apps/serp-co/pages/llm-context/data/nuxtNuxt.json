[
  {
    "owner": "nuxt",
    "repo": "nuxt",
    "content": "TITLE: Todo Creation with $fetch\nDESCRIPTION: Shows how to implement a todo creation function using $fetch with POST method. Demonstrates direct API interaction without server-side caching.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nasync function addTodo() {\n  const todo = await $fetch('/api/todos', {\n    method: 'POST',\n    body: {\n      // My todo data\n    }\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Endpoint in Nuxt with TypeScript\nDESCRIPTION: Defines a basic server endpoint using the defineEventHandler function. This pattern can be used for both API endpoints and middleware in a Nuxt application, supporting hot module replacement and auto-imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/13.server.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  // ... Do whatever you want here\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Form Submission with useFetch\nDESCRIPTION: Demonstrates how to use useFetch for initial data loading and $fetch for form submission handling in a Vue component. Shows proper handling of loading states and form submission.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useFetch('/api/data')\n\nasync function handleFormSubmit() {\n  const res = await $fetch('/api/submit', {\n    method: 'POST',\n    body: {\n      // My form data\n    }\n  })\n}\n</script>\n\n<template>\n  <div v-if=\"data == null\">\n    No data\n  </div>\n  <div v-else>\n    <form @submit=\"handleFormSubmit\">\n      <!-- form input tags -->\n    </form>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with useRoute\nDESCRIPTION: Demonstrates how to access route parameters using the useRoute composable in a dynamic route page. In this example, it accesses the id parameter from the URL.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\n\n// When accessing /posts/1, route.params.id will be 1\nconsole.log(route.params.id)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Nuxt Module with Type Hints\nDESCRIPTION: Example of defining a Nuxt module using the defineNuxtModule helper from @nuxt/kit, which provides type hints and a higher-level API.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule((options, nuxt) => {\n  nuxt.hook('pages:extend', pages => {\n    console.log(`Discovered ${pages.length} pages`)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Login API Route in Nuxt\nDESCRIPTION: Server-side authentication route that validates user credentials and establishes a user session using Zod for validation. This endpoint accepts email and password and sets a secure session cookie upon successful authentication.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from 'zod'\n\nconst bodySchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8)\n})\n\nexport default defineEventHandler(async (event) => {\n  const { email, password } = await readValidatedBody(event, bodySchema.parse)\n\n  if (email === 'admin@admin.com' && password === 'iamtheadmin') {\n    // set the user session in the cookie\n    // this server util is auto-imported by the auth-utils module\n    await setUserSession(event, {\n      user: {\n        name: 'John Doe'\n      }\n    })\n    return {}\n  }\n  throw createError({\n    statusCode: 401,\n    message: 'Bad credentials'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Cached Data with useFetch in Vue\nDESCRIPTION: Demonstration of using the clear function to reset data based on application state changes. This example shows clearing the data when navigating to the home route, which is useful for managing memory and ensuring fresh data when needed.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data, clear } = await useFetch('/api/users')\n\nconst route = useRoute()\nwatch(() => route.path, (path) => {\n  if (path === '/') clear()\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Data Fetching\nDESCRIPTION: Shows how to fetch user data based on route parameters using useAsyncData with a dynamic key.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { id } = useRoute().params\n\nconst { data, error } = await useAsyncData(`user:${id}`, () => {\n  return myGetFunction('users', { id })\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manual Data Refresh with useFetch in Vue\nDESCRIPTION: Example showing how to manually refresh data using the execute and refresh functions provided by useFetch. This allows triggering a new data fetch on user interaction like button clicks, independently from component lifecycle or reactive dependencies.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data, error, execute, refresh } = await useFetch('/api/users')\n</script>\n\n<template>\n  <div>\n    <p>{{ data }}</p>\n    <button @click=\"() => refresh()\">Refresh data</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Configuration in Vue Component\nDESCRIPTION: This code demonstrates how to access the runtime configuration within a Vue component using the useRuntimeConfig composable in Nuxt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst runtimeConfig = useRuntimeConfig()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useAsyncData with Reactive Keys\nDESCRIPTION: Demonstrates how to use a computed ref as the key for useAsyncData, allowing for dynamic data fetching that updates automatically when the route changes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-async-data.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst userId = computed(() => `user-${route.params.id}`)\n\n// When the route changes and userId updates, the data will be automatically refetched\nconst { data: user } = useAsyncData(\n  userId,\n  () => fetchUserById(route.params.id)\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useAsyncData in a Vue Component\nDESCRIPTION: Demonstrates basic usage of useAsyncData to fetch data from an API in a Vue component. The example shows how to destructure the returned object and use it within the setup script.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-async-data.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data, status, error, refresh, clear } = await useAsyncData(\n  'mountains',\n  () => $fetch('https://api.nuxtjs.dev/mountains')\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Runtime Configuration with Environment Variables\nDESCRIPTION: This snippet shows how to override runtime configuration values using environment variables in a .env file. It demonstrates setting the NUXT_API_SECRET variable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# This will override the value of apiSecret\nNUXT_API_SECRET=api_secret_token\n```\n\n----------------------------------------\n\nTITLE: Adding Modules to Nuxt Configuration\nDESCRIPTION: This snippet demonstrates the various ways to add modules to a Nuxt project through the nuxt.config.ts file. It shows how to include modules using package names, local module paths, modules with configuration options, and inline module definitions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/5.modules.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    // Using package name (recommended usage)\n    '@nuxtjs/example',\n\n    // Load a local module\n    './modules/example',\n\n    // Add module with inline-options\n    ['./modules/example', { token: '123' }],\n\n    // Inline module definition\n    async (inlineOptions, nuxt) => { }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Pinia Store in a Vue Component\nDESCRIPTION: Example of using a Pinia store in app.vue, fetching data using callOnce to ensure the action runs only once during SSR, and displaying the store data in the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst website = useWebsiteStore()\n\nawait callOnce(website.fetch)\n</script>\n\n<template>\n  <main>\n    <h1>{{ website.name }}</h1>\n    <p>{{ website.description }}</p>\n  </main>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Non-Immediate Data Fetching in Nuxt\nDESCRIPTION: Example of delayed data fetching using immediate: false option in useLazyFetch. Shows how to manually trigger data fetching and handle different loading states.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data, error, execute, status } = await useLazyFetch('/api/comments', {\n  immediate: false\n})\n</script>\n\n<template>\n  <div v-if=\"status === 'idle'\">\n    <button @click=\"execute\">Get data</button>\n  </div>\n\n  <div v-else-if=\"status === 'pending'\">\n    Loading comments...\n  </div>\n\n  <div v-else>\n    {{ data }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in Server API\nDESCRIPTION: Demonstrates how to create and throw custom errors with specific status codes and messages using the createError utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const id = parseInt(event.context.params.id) as number\n\n  if (!Number.isInteger(id)) {\n    throw createError({\n      statusCode: 400,\n      statusMessage: 'ID should be an integer',\n    })\n  }\n  return 'All good'\n})\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with Auto-imported useFetch\nDESCRIPTION: Shows how to use the auto-imported useFetch composable for data fetching in Vue components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n/* useFetch() is auto-imported */\nconst { data, refresh, status } = await useFetch('/api/hello')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining useFetch Function and Related Types in TypeScript for Nuxt\nDESCRIPTION: This snippet defines the useFetch function signature and various TypeScript types used for asynchronous data fetching in Nuxt. It includes UseFetchOptions, AsyncDataRequestContext, AsyncData, AsyncDataExecuteOptions, and AsyncDataRequestStatus types. The useFetch function allows for flexible URL specification and various options for customizing the fetch request and data handling.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-fetch.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useFetch<DataT, ErrorT>(\n  url: string | Request | Ref<string | Request> | (() => string | Request),\n  options?: UseFetchOptions<DataT>\n): Promise<AsyncData<DataT, ErrorT>>\n\ntype UseFetchOptions<DataT> = {\n  key?: string\n  method?: string\n  query?: SearchParams\n  params?: SearchParams\n  body?: RequestInit['body'] | Record<string, any>\n  headers?: Record<string, string> | [key: string, value: string][] | Headers\n  baseURL?: string\n  server?: boolean\n  lazy?: boolean\n  immediate?: boolean\n  getCachedData?: (key: string, nuxtApp: NuxtApp, ctx: AsyncDataRequestContext) => DataT | undefined\n  deep?: boolean\n  dedupe?: 'cancel' | 'defer'\n  default?: () => DataT\n  transform?: (input: DataT) => DataT | Promise<DataT>\n  pick?: string[]\n  watch?: WatchSource[] | false\n}\n\ntype AsyncDataRequestContext = {\n  /** The reason for this data request */\n  cause: 'initial' | 'refresh:manual' | 'refresh:hook' | 'watch'\n}\n\ntype AsyncData<DataT, ErrorT> = {\n  data: Ref<DataT | null>\n  refresh: (opts?: AsyncDataExecuteOptions) => Promise<void>\n  execute: (opts?: AsyncDataExecuteOptions) => Promise<void>\n  clear: () => void\n  error: Ref<ErrorT | null>\n  status: Ref<AsyncDataRequestStatus>\n}\n\ninterface AsyncDataExecuteOptions {\n  dedupe?: 'cancel' | 'defer'\n}\n\ntype AsyncDataRequestStatus = 'idle' | 'pending' | 'success' | 'error'\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration for Nuxt\nDESCRIPTION: Debug configuration for VS Code that enables both client-side (Chrome) and server-side debugging of Nuxt applications. Includes compound configuration for full-stack debugging.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/9.debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"client: chrome\",\n      \"url\": \"http://localhost:3000\",\n      \"webRoot\": \"${workspaceFolder}\"\n    },\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"server: nuxt\",\n      \"outputCapture\": \"std\",\n      \"program\": \"${workspaceFolder}/node_modules/nuxt/bin/nuxt.mjs\",\n      \"args\": [\n        \"dev\"\n      ],\n    }\n  ],\n  \"compounds\": [\n    {\n      \"name\": \"fullstack: nuxt\",\n      \"configurations\": [\n        \"server: nuxt\",\n        \"client: chrome\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useState in Nuxt.js\nDESCRIPTION: Creates a reactive state with a default value using a unique key. The example initializes a counter with a random value between 0 and 100.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-state.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a reactive state and set default value\nconst count = useState('counter', () => Math.round(Math.random() * 100))\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with Route Parameters in Nuxt\nDESCRIPTION: This example demonstrates how to use the useRoute composable to access dynamic route parameters in a Nuxt page. It uses the slug parameter from the route to fetch data with useFetch and render mountain information in the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-route.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst { data: mountain } = await useFetch(`/api/mountains/${route.params.slug}`)\n</script>\n\n<template>\n  <div>\n    <h1>{{ mountain.title }}</h1>\n    <p>{{ mountain.description }}</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Nuxt Plugin\nDESCRIPTION: Shows how to create a simple Nuxt plugin using the defineNuxtPlugin function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  // Doing something with nuxtApp\n})\n```\n\n----------------------------------------\n\nTITLE: Basic useFetch Implementation in Vue\nDESCRIPTION: Basic example of using useFetch to fetch data from an API endpoint in a Vue component, demonstrating the destructuring of returned reactive values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data, status, error, refresh, clear } = await useFetch('/api/modules', {\n  pick: ['title']\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Imported Components in Vue Templates\nDESCRIPTION: Demonstrates how to use the auto-imported components from the library in a Vue template. Shows components can be used with both PascalCase and kebab-case naming conventions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    My <AwesomeButton>UI button</AwesomeButton>!\n    <awesome-alert>Here's an alert!</awesome-alert>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Module Types and Interfaces in TypeScript\nDESCRIPTION: This snippet defines the types and interfaces used for creating Nuxt modules, including ModuleOptions, ModuleDefinition, NuxtModule, and related interfaces.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/1.modules.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction defineNuxtModule<OptionsT extends ModuleOptions> (definition: ModuleDefinition<OptionsT> | NuxtModule<OptionsT>): NuxtModule<OptionsT>\n\ntype ModuleOptions = Record<string, any>\n\ninterface ModuleDefinition<T extends ModuleOptions = ModuleOptions> {\n  meta?: ModuleMeta\n  defaults?: T | ((nuxt: Nuxt) => T)\n  schema?: T\n  hooks?: Partial<NuxtHooks>\n  setup?: (this: void, resolvedOptions: T, nuxt: Nuxt) => Awaitable<void | false | ModuleSetupReturn>\n}\n\ninterface NuxtModule<T extends ModuleOptions = ModuleOptions> {\n  (this: void, inlineOptions: T, nuxt: Nuxt): Awaitable<void | false | ModuleSetupReturn>\n  getOptions?: (inlineOptions?: T, nuxt?: Nuxt) => Promise<T>\n  getMeta?: () => Promise<ModuleMeta>\n}\n\ninterface ModuleSetupReturn {\n  timings?: {\n    setup?: number\n    [key: string]: number | undefined\n  }\n}\n\ninterface ModuleMeta {\n  name?: string\n  version?: string\n  configKey?: string\n  compatibility?: NuxtCompatibility\n  [key: string]: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Using NuxtLink Component for Navigation\nDESCRIPTION: Example of using the NuxtLink component to create navigation links between pages. NuxtLink automatically handles client-side navigation and prefetching for better performance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <header>\n    <nav>\n      <ul>\n        <li><NuxtLink to=\"/about\">About</NuxtLink></li>\n        <li><NuxtLink to=\"/posts/1\">Post 1</NuxtLink></li>\n        <li><NuxtLink to=\"/posts/2\">Post 2</NuxtLink></li>\n      </ul>\n    </nav>\n  </header>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Route Middleware in Nuxt\nDESCRIPTION: This snippet demonstrates how to create a named route middleware that can redirect or abort navigation based on route parameters. It shows the proper structure with defineNuxtRouteMiddleware and possible return values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  if (to.params.id === '1') {\n    return abortNavigation()\n  }\n  // In a real app you would probably not redirect every route to `/`\n  // however it is important to check `to.path` before redirecting or you\n  // might get an infinite redirect loop\n  if (to.path !== '/') {\n    return navigateTo('/')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Shared State with Auto-imported Composables\nDESCRIPTION: Defining a global type-safe state using a composable that can be auto-imported across the app. This pattern allows for centralized state definition while providing type safety.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useColor = () => useState<string>('color', () => 'pink')\n```\n\n----------------------------------------\n\nTITLE: Client-Side Only Component Directory Structure\nDESCRIPTION: This snippet shows the directory structure for client-side only components using the .client suffix. This naming convention tells Nuxt to render these components only on the client side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n| components/\n--| Comments.client.vue\n```\n\n----------------------------------------\n\nTITLE: Interceptors with useFetch\nDESCRIPTION: Implementation of request and response interceptors with useFetch, showing how to handle headers, errors, and response processing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, status, error, refresh, clear } = await useFetch('/api/auth/login', {\n  onRequest({ request, options }) {\n    options.headers.set('Authorization', '...')\n  },\n  onRequestError({ request, options, error }) {\n  },\n  onResponse({ request, response, options }) {\n    localStorage.setItem('token', response._data.token)\n  },\n  onResponseError({ request, response, options }) {\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue 3 Composition API with Nuxt 3 Auto-imports\nDESCRIPTION: Shows the same counter component implemented using Vue 3's Composition API with the setup script syntax. Demonstrates how Nuxt 3 auto-imports reactivity functions like ref, enabling more concise code and better logic organization.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/2.vuejs-development.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst count = ref(0)\nconst increment = () => count.value++\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Error Handler Plugin in Nuxt\nDESCRIPTION: Plugin implementation for handling Vue errors globally using vueApp.config.errorHandler and the vue:error hook.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/12.error-handling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.vueApp.config.errorHandler = (error, instance, info) => {\n    // handle error, e.g. report to a service\n  }\n\n  // Also possible\n  nuxtApp.hook('vue:error', (error, instance, info) => {\n    // handle error, e.g. report to a service\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLazyFetch in Vue Component with TypeScript\nDESCRIPTION: This example shows how to use useLazyFetch in a Vue component to load posts from an API without blocking navigation. It demonstrates proper handling of pending states in the template and how to use the watch function to react to data changes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-lazy-fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n/* Navigation will occur before fetching is complete.\n * Handle 'pending' and 'error' states directly within your component's template\n */\nconst { status, data: posts } = await useLazyFetch('/api/posts')\nwatch(posts, (newPosts) => {\n  // Because posts might start out null, you won't have access\n  // to its contents immediately, but you can watch it.\n})\n</script>\n\n<template>\n  <div v-if=\"status === 'pending'\">\n    Loading ...\n  </div>\n  <div v-else>\n    <div v-for=\"post in posts\">\n      <!-- do something -->\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Error Page Component in Nuxt\nDESCRIPTION: Vue component implementation for a custom error page that displays error status and provides error clearing functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/12.error-handling.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { NuxtError } from '#app'\n\nconst props = defineProps({\n  error: Object as () => NuxtError\n})\n\nconst handleError = () => clearError({ redirect: '/' })\n</script>\n\n<template>\n  <div>\n    <h2>{{ error.statusCode }}</h2>\n    <button @click=\"handleError\">Clear errors</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Data Fetching with Headers\nDESCRIPTION: Example of using useFetch with server-side header handling to access and forward cookies to API endpoints.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useFetch('/api/echo');\n</script>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// /api/echo.ts\nexport default defineEventHandler(event => parseCookies(event))\n```\n\n----------------------------------------\n\nTITLE: Injecting Vue Components in a Nuxt Module\nDESCRIPTION: This snippet demonstrates how to add Vue components to a Nuxt application from a module using the addComponent utility. It shows injecting components both from the runtime directory and from an external library.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addComponent } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    // From the runtime directory\n    addComponent({\n      name: 'MySuperComponent', // name of the component to be used in vue templates\n      export: 'MySuperComponent', // (optional) if the component is a named (rather than default) export\n      filePath: resolver.resolve('runtime/components/MySuperComponent.vue')\n    })\n\n    // From a library\n    addComponent({\n      name: 'MyAwesomeComponent', // name of the component to be used in vue templates\n      export: 'MyAwesomeComponent', // (optional) if the component is a named (rather than default) export\n      filePath: '@vue/awesome-components'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Data and State in Nuxt Plugin\nDESCRIPTION: Shows how to use useState composable within a Nuxt plugin to set and access shared state data across the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useColor = () => useState<string>('color', () => 'pink')\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  if (import.meta.server) {\n    const color = useColor()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an API Endpoint in Nuxt Server\nDESCRIPTION: Demonstrates how to define a basic API endpoint that returns JSON data using the defineEventHandler function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  return {\n    hello: 'world'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating nuxt.config from Nuxt 2 to Nuxt 3\nDESCRIPTION: Update the nuxt.config file to use the new defineNuxtConfig function for typed configuration schema.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Shared State in a Component\nDESCRIPTION: A Vue component that uses the shared color state defined in a composable. This demonstrates how to consume global state in components while maintaining type safety and SSR compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst color = useColor() // Same as useState('color')\n</script>\n\n<template>\n  <p>Current color: {{ color }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Types in useAPI Composable\nDESCRIPTION: This enhanced version of the useAPI composable allows for customization of error types returned by the API, providing more precise error handling.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/3.custom-usefetch.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { FetchError } from 'ofetch'\nimport type { UseFetchOptions } from 'nuxt/app'\n\ninterface CustomError {\n  message: string\n  statusCode: number\n}\n\nexport function useAPI<T>(\n  url: string | (() => string),\n  options?: UseFetchOptions<T>,\n) {\n  return useFetch<T, FetchError<CustomError>>(url, {\n    ...options,\n    $fetch: useNuxtApp().$api\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Reactive Data Fetching with Watch Option in Vue\nDESCRIPTION: Example of using the watch option to automatically refetch data when reactive dependencies change. This creates a reactive data fetching system that responds to state changes without needing manual refresh calls.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst id = ref(1)\n\nconst { data, error, refresh } = await useFetch('/api/users', {\n  /* Changing the id will trigger a refetch */\n  watch: [id]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useHead Composable for Dynamic Head Management\nDESCRIPTION: Demonstrates the usage of the useHead composable function to manage head tags programmatically with reactive input. This example sets the title, meta description, body attributes, and adds a script to the head.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  title: 'My App',\n  meta: [\n    { name: 'description', content: 'My amazing site.' }\n  ],\n  bodyAttrs: {\n    class: 'test'\n  },\n  script: [ { innerHTML: 'console.log(\\'Hello world\\')' } ]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Title with useHead\nDESCRIPTION: Demonstrates how to set a dynamic title using the titleTemplate option in useHead. This example shows both string-based and function-based approaches.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  // as a string,\n  // where `%s` is replaced with the title\n  titleTemplate: '%s - Site Title',\n})\n</script>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  // or as a function\n  titleTemplate: (productCategory) => {\n    return productCategory\n      ? `${productCategory} - Site Title`\n      : 'Site Title'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side and Client-Side Data Fetching in TypeScript\nDESCRIPTION: Example showing how to control when data fetching occurs based on environment. The first call is performed before hydration on both server and client, while the second call is limited to client-side only with the server:false option.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/* This call is performed before hydration */\nconst articles = await useFetch('/api/article')\n\n/* This call will only be performed on the client */\nconst { status, data: comments } = useFetch('/api/comments', {\n  lazy: true,\n  server: false\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Page Metadata with definePageMeta\nDESCRIPTION: Demonstrates how to use definePageMeta to set metadata for a specific page in the pages/ directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  title: 'Some Page'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of app.vue with Pages Directory\nDESCRIPTION: When using the pages directory in Nuxt, the app.vue must include the NuxtPage component to display the current page content from the router.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtPage />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Client-side Form Submission with $fetch\nDESCRIPTION: Shows how to use $fetch for client-side POST requests in a contact form implementation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/$fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nasync function contactForm() {\n  await $fetch('/api/contact', {\n    method: 'POST',\n    body: { hello: 'world '}\n  })\n}\n</script>\n\n<template>\n  <button @click=\"contactForm\">Contact</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Header Forwarding with useRequestHeaders\nDESCRIPTION: Shows how to manually forward specific headers like cookies to API endpoints using useRequestHeaders and $fetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst headers = useRequestHeaders(['cookie'])\n\nasync function getCurrentUser() {\n  return await $fetch('/api/me', { headers })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Request Body in Server API\nDESCRIPTION: Shows how to read and process the request body in a POST handler using the readBody utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const body = await readBody(event)\n  return { body }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic $fetch Usage in Vue Components\nDESCRIPTION: Demonstrates different approaches to fetch data in Vue components, comparing direct $fetch usage with useAsyncData and useFetch to prevent double data fetching during SSR.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/$fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// During SSR data is fetched twice, once on the server and once on the client.\nconst dataTwice = await $fetch('/api/item')\n\n// During SSR data is fetched only on the server side and transferred to the client.\nconst { data } = await useAsyncData('item', () => $fetch('/api/item'))\n\n// You can also useFetch as shortcut of useAsyncData + $fetch\nconst { data } = await useFetch('/api/item')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Route Data Fetching\nDESCRIPTION: Example of using useFetch with computed properties and route parameters for dynamic data fetching.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst id = computed(() => route.params.id)\n\nconst { data: post } = await useFetch(() => `/api/posts/${id.value}`)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Server API with Fetch\nDESCRIPTION: Demonstrates how to use runtime config values in a server API handler, including both public and private variables.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const config = useRuntimeConfig(event)\n\n  // Access public variables\n  const result = await $fetch(`/test`, {\n    baseURL: config.public.apiBase,\n    headers: {\n      // Access a private variable (only available on the server)\n      Authorization: `Bearer ${config.apiSecret}`\n    }\n  })\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSeoMeta in Nuxt with Static Values\nDESCRIPTION: Demonstrates how to use the useSeoMeta composable to define static SEO meta tags for a website, including title, Open Graph tags, and Twitter card configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-seo-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseSeoMeta({\n  title: 'My Amazing Site',\n  ogTitle: 'My Amazing Site',\n  description: 'This is my amazing site, let me tell you all about it.',\n  ogDescription: 'This is my amazing site, let me tell you all about it.',\n  ogImage: 'https://example.com/image.png',\n  twitterCard: 'summary_large_image',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom useAPI Composable in Nuxt\nDESCRIPTION: This composable creates a custom useAPI function that wraps useFetch with the custom $api fetcher. It allows for easier use of the custom API in components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/3.custom-usefetch.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { UseFetchOptions } from 'nuxt/app'\n\nexport function useAPI<T>(\n  url: string | (() => string),\n  options?: UseFetchOptions<T>,\n) {\n  return useFetch(url, {\n    ...options,\n    $fetch: useNuxtApp().$api as typeof $fetch\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters with Composition API\nDESCRIPTION: Using the useRoute composable to access route parameters in a Vue component with the Composition API and TypeScript.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\n\nif (route.params.group === 'admins' && !route.params.id) {\n  console.log('Warning! Make sure user is authenticated!')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global CSS in Nuxt\nDESCRIPTION: Demonstrates how to configure global CSS files in nuxt.config.ts\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  css: ['~/assets/css/main.css']\n})\n```\n\n----------------------------------------\n\nTITLE: Multiple Parallel API Requests\nDESCRIPTION: Example of handling multiple parallel API requests using Promise.all with useAsyncData for cart discounts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: discounts, status } = await useAsyncData('cart-discount', async () => {\n  const [coupons, offers] = await Promise.all([\n    $fetch('/cart/coupons'),\n    $fetch('/cart/offers')\n  ])\n\n  return { coupons, offers }\n})\n// discounts.value.coupons\n// discounts.value.offers\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Router in Nuxt Server\nDESCRIPTION: Implementation of a nested router for server API endpoints using h3 utilities. This allows grouping related endpoints under a common URL prefix with separate handlers for different routes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRouter, defineEventHandler, useBase } from 'h3'\n\nconst router = createRouter()\n\nrouter.get('/test', defineEventHandler(() => 'Hello World'))\n\nexport default useBase('/api/hello', router.handler)\n```\n\n----------------------------------------\n\nTITLE: Authentication Redirection Middleware Example in TypeScript\nDESCRIPTION: Example of using defineNuxtRouteMiddleware with useState to create an authentication middleware that redirects users based on their authentication status. Uses the navigateTo helper function to handle redirections.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-nuxt-route-middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  const auth = useState('auth')\n\n  if (!auth.value.isAuthenticated) {\n    return navigateTo('/login')\n  }\n\n  if (to.path !== '/dashboard') {\n    return navigateTo('/dashboard')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building a Protected Home Page with Authentication\nDESCRIPTION: Vue component for a protected home page that uses the authenticated middleware. This page displays user information and provides logout functionality, only accessible to authenticated users.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['authenticated'],\n})\n  \nconst { user, clear: clearSession } = useUserSession()\n\nasync function logout() {\n  await clearSession()\n  await navigateTo('/login')\n}\n</script>\n\n<template>\n  <div>\n    <h1>Welcome {{ user.name }}</h1>\n    <button @click=\"logout\">Logout</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Route Middleware in Nuxt Plugin\nDESCRIPTION: This example shows how to dynamically add both global and named route middleware from within a Nuxt plugin using the addRouteMiddleware utility function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(() => {\n  addRouteMiddleware('global-test', () => {\n    console.log('this global middleware was added in a plugin and will be run on every route change')\n  }, { global: true })\n\n  addRouteMiddleware('named-test', () => {\n    console.log('this named middleware was added in a plugin and would override any existing middleware of the same name')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration in Nuxt\nDESCRIPTION: This snippet shows how to create an app configuration file (app.config.ts) in Nuxt using the defineAppConfig function. It allows setting public variables determined at build time.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  title: 'Hello Nuxt',\n  theme: {\n    dark: true,\n    colors: {\n      primary: '#ff0000'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Runtime Configuration in Nuxt\nDESCRIPTION: This snippet demonstrates how to configure runtime variables in Nuxt, including both server-side and client-side accessible values. It uses the runtimeConfig option in the Nuxt config file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    // The private keys which are only available server-side\n    apiSecret: '123',\n    // Keys within public are also exposed client-side\n    public: {\n      apiBase: '/api'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side Authentication Middleware\nDESCRIPTION: Client-side middleware that checks if a user is authenticated and redirects to the login page if not. This middleware can be applied to specific routes to protect them from unauthenticated access.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware(() => {\n  const { loggedIn } = useUserSession()\n\n  // redirect the user to the login screen if they're not authenticated\n  if (!loggedIn.value) {\n    return navigateTo('/login')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Options API Data Fetching in Nuxt\nDESCRIPTION: Example of using asyncData with Options API in Nuxt components using defineNuxtComponent wrapper for proper functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default defineNuxtComponent({\n  /* Use the fetchKey option to provide a unique key */\n  fetchKey: 'hello',\n  async asyncData () {\n    return {\n      hello: await $fetch('/api/hello')\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Hooks by Augmenting Nuxt Types\nDESCRIPTION: Example of how to extend Nuxt's type system to add custom hooks. This is useful for modules that need to define their own hooks that can be consumed by the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/2.hooks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HookResult } from \"@nuxt/schema\";\n\ndeclare module '#app' {\n  interface RuntimeNuxtHooks {\n    'your-nuxt-runtime-hook': () => HookResult\n  }\n  interface NuxtHooks {\n    'your-nuxt-hook': () => HookResult\n  }\n}\n\ndeclare module 'nitro/types' {\n  interface NitroRuntimeHooks {\n    'your-nitro-hook': () => void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Route Components with navigateTo in Nuxt\nDESCRIPTION: This example demonstrates how to preload dashboard route components before navigation. The preloadRouteComponents function is called without awaiting to avoid blocking rendering, and is used in conjunction with navigateTo for smoother navigation after authentication.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/preload-route-components.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// we don't await this async function, to avoid blocking rendering\n// this component's setup function\npreloadRouteComponents('/dashboard')\n\nconst submit = async () => {\n  const results = await $fetch('/api/authentication')\n\n  if (results.token) {\n    await navigateTo('/dashboard')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using app.vue with Layouts\nDESCRIPTION: Implementation of app.vue that supports multiple layouts. This setup allows different pages to use different layouts by wrapping NuxtPage with NuxtLayout component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Optimistic Updates Implementation in a Todo Component\nDESCRIPTION: This component demonstrates the implementation details of optimistic updates. It updates the UI immediately, stores previous state, handles errors by rolling back to the previous state, and refreshes data on successful operations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-data.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst newTodo = ref('')\nlet previousTodos = []\n\n// Access to the cached value of useAsyncData in todos.vue\nconst { data: todos } = useNuxtData('todos')\n\nasync function addTodo () {\n  return $fetch('/api/addTodo', {\n    method: 'post',\n    body: {\n      todo: newTodo.value\n    },\n    onRequest () {\n      // Store the previously cached value to restore if fetch fails.\n      previousTodos = todos.value\n\n      // Optimistically update the todos.\n      todos.value = [...todos.value, newTodo.value]\n    },\n    onResponseError () {\n      // Rollback the data if the request failed.\n      todos.value = previousTodos\n    },\n    async onResponse () {\n      // Invalidate todos in the background if the request succeeded.\n      await refreshNuxtData('todos')\n    }\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using navigateTo in Vue Component (Vue)\nDESCRIPTION: Demonstrates how to use navigateTo within a Vue component setup script for different navigation scenarios, including passing a string path, a route object, and query parameters.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/navigate-to.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// passing 'to' as a string\nawait navigateTo('/search')\n\n// ... or as a route object\nawait navigateTo({ path: '/search' })\n\n// ... or as a route object with query parameters\nawait navigateTo({\n  path: '/search',\n  query: {\n    page: 1,\n    sort: 'asc'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Consuming Server API from Vue Component\nDESCRIPTION: Shows how to use the useFetch composable to call a server API endpoint from a Vue component and display the response data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useFetch('/api/hello')\n</script>\n\n<template>\n  <pre>{{ data }}</pre>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Vue Component\nDESCRIPTION: This snippet shows how to create a reusable component (AppAlert) in Nuxt. Components in the components/ directory are auto-imported.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <span>\n    <slot />\n  </span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Body Teleport in Vue\nDESCRIPTION: Example of using Teleport to move a modal component to #teleports target in the DOM. The snippet demonstrates a basic modal implementation with open/close functionality that gets teleported outside its original component hierarchy.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/11.teleports.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <button @click=\"open = true\">\n    Open Modal\n  </button>\n  <Teleport to=\"#teleports\">\n    <div v-if=\"open\" class=\"modal\">\n      <p>Hello from the modal!</p>\n      <button @click=\"open = false\">\n        Close\n      </button>\n    </div>\n  </Teleport>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Default Export Composable in Nuxt\nDESCRIPTION: Shows how to create a composable using default export syntax, which will be available as a camelCase function based on the filename.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function () {\n  return useState('foo', () => 'bar')\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Visit Counter\nDESCRIPTION: Simple example showing how to fetch and display a visit counter using useFetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: count } = await useFetch('/api/count')\n</script>\n\n<template>\n  <p>Page visits: {{ count }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Server Middleware for Authentication\nDESCRIPTION: Shows how to implement server middleware that adds authentication data to the event context for use in subsequent handlers.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  event.context.auth = { user: 123 }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Server Routes in a Nuxt Module\nDESCRIPTION: This snippet demonstrates how to add a server route to a Nuxt application from a module using the addServerHandler utility from @nuxt/kit. It shows how to specify the route path and handler file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addServerHandler, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    addServerHandler({\n      route: '/api/hello',\n      handler: resolver.resolve('./runtime/server/api/hello/index.get')\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Movie Page Error Handling Example\nDESCRIPTION: Example showing how to handle 404 errors in a movie detail page using createError utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/12.error-handling.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst { data } = await useFetch(`/api/movies/${route.params.slug}`)\n\nif (!data.value) {\n  throw createError({\n    statusCode: 404,\n    statusMessage: 'Page Not Found'\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing a Nuxt Module with installModule in TypeScript\nDESCRIPTION: This example shows how to use the installModule function within a Nuxt module's setup function to install another module (@nuxtjs/fontaine) with specific configuration options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/1.modules.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, installModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({  \n  async setup (options, nuxt) {\n    // will install @nuxtjs/fontaine with Roboto font and Impact fallback\n    await installModule('@nuxtjs/fontaine', {\n      // module configuration\n      fonts: [\n        {\n          family: 'Roboto',\n          fallbacks: ['Impact'],\n          fallbackName: 'fallback-a',\n        }\n      ]\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nuxt Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the defineNuxtConfig helper to create a Nuxt configuration. The helper is globally available without import in Nuxt projects.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.nuxt-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // My Nuxt config\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Counter with useState in Vue Component\nDESCRIPTION: A simple counter implementation using Nuxt's useState composable for creating component-local state that is reactive and SSR-friendly. The counter is initialized with a random value and includes buttons to increment and decrement.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst counter = useState('counter', () => Math.round(Math.random() * 1000))\n</script>\n\n<template>\n  <div>\n    Counter: {{ counter }}\n    <button @click=\"counter++\">\n      +\n    </button>\n    <button @click=\"counter--\">\n      -\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Layouts in Nuxt.js App\nDESCRIPTION: This snippet shows how to enable layouts by adding the NuxtLayout component to the app.vue file. It wraps the NuxtPage component to apply layouts to all pages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing State Asynchronously with callOnce\nDESCRIPTION: Using the callOnce utility to initialize state asynchronously in app.vue. This approach fetches website configuration from an API once, avoiding duplicate API calls across multiple component instances.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst websiteConfig = useState('config')\n\nawait callOnce(async () => {\n  websiteConfig.value = await $fetch('https://my-cms.com/api/website-config')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Comprehensive Nuxt Module\nDESCRIPTION: Comprehensive example of defining a Nuxt module using the recommended object syntax with meta property, defaults, hooks, and setup function. This approach provides better type inference and future compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    // Usually the npm package name of your module\n    name: '@nuxtjs/example',\n    // The key in `nuxt.config` that holds your module options\n    configKey: 'sample',\n    // Compatibility constraints\n    compatibility: {\n      // Semver version of supported nuxt versions\n      nuxt: '>=3.0.0'\n    }\n  },\n  // Default configuration options for your module, can also be a function returning those\n  defaults: {},\n  // Shorthand sugar to register Nuxt hooks\n  hooks: {},\n  // The function holding your module logic, it can be asynchronous\n  setup(moduleOptions, nuxt) {\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Config in Server Routes\nDESCRIPTION: Example of accessing runtime config within a server route handler using useRuntimeConfig. It demonstrates using a private API key for authentication in server-side API calls.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const { apiSecret } = useRuntimeConfig(event)\n  const result = await $fetch('https://my.api.com/test', {\n    headers: {\n      Authorization: `Bearer ${apiSecret}`\n    }\n  })\n  return result\n})\n```\n\n----------------------------------------\n\nTITLE: useAsyncData with Custom Function\nDESCRIPTION: Demonstrates using useAsyncData with a custom query function and proper key management for caching.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data, error } = await useAsyncData('users', () => myGetFunction('users'))\n\n// This is also possible:\nconst { data, error } = await useAsyncData(() => myGetFunction('users'))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using ClientOnly with Fallback Slot in Vue\nDESCRIPTION: Shows how to use <ClientOnly> with a fallback slot to provide content for server-side rendering and initial client display until the component is mounted.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.client-only.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Sidebar />\n    <!-- This renders the \"span\" element on the server side -->\n    <ClientOnly fallbackTag=\"span\">\n      <!-- this component will only be rendered on client side -->\n      <Comments />\n      <template #fallback>\n        <!-- this will be rendered on server side -->\n        <p>Loading comments...</p>\n      </template>\n    </ClientOnly>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using showError Function in Nuxt\nDESCRIPTION: Demonstrates how to use the showError function to display errors in a Nuxt application. The function accepts either a string message or an error object with properties like statusCode and statusMessage. The error is managed through useError() composable for reactive state management.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/show-error.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshowError(\"😱 Oh no, an error has been thrown.\")\nshowError({\n  statusCode: 404,\n  statusMessage: \"Page Not Found\"\n})\n```\n\n----------------------------------------\n\nTITLE: Using Paired Server and Client Components in Vue Templates\nDESCRIPTION: This snippet demonstrates how to use paired server and client components in a Vue template. The Comments component will render its .server version on the server and switch to the .client version once mounted in the browser.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- this component will render Comments.server on the server then Comments.client once mounted in the browser -->\n    <Comments />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining SEO Meta Tags with useSeoMeta Composable\nDESCRIPTION: Shows how to use the useSeoMeta composable to define SEO meta tags with full type safety. This example sets various Open Graph and Twitter Card meta tags.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseSeoMeta({\n  title: 'My Amazing Site',\n  ogTitle: 'My Amazing Site',\n  description: 'This is my amazing site, let me tell you all about it.',\n  ogDescription: 'This is my amazing site, let me tell you all about it.',\n  ogImage: 'https://example.com/image.png',\n  twitterCard: 'summary_large_image',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Updates with useNuxtData\nDESCRIPTION: This example demonstrates implementing optimistic UI updates with useNuxtData. It shows how to update the UI immediately before server confirmation, store previous state for rollback, and refresh data after successful updates.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-data.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// We can access same data later using 'todos' key\nconst { data } = await useAsyncData('todos', () => $fetch('/api/todos'))\n</script>\n```\n\n----------------------------------------\n\nTITLE: NuxtErrorBoundary Component Usage\nDESCRIPTION: Example demonstrating the usage of NuxtErrorBoundary component for local error handling with error logging and clearing capabilities.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/12.error-handling.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- some content -->\n  <NuxtErrorBoundary @error=\"someErrorLogger\">\n    <!-- You use the default slot to render your content -->\n    <template #error=\"{ error, clearError }\">\n      You can display the error locally here: {{ error }}\n      <button @click=\"clearError\">\n        This will clear the error.\n      </button>\n    </template>\n  </NuxtErrorBoundary>\n</template>\n```\n\n----------------------------------------\n\nTITLE: History-based Navigation Methods (TypeScript)\nDESCRIPTION: Demonstrates the usage of history-based navigation methods including back, forward, go, push, and replace.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-router.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = useRouter()\n\nrouter.back()\nrouter.forward()\nrouter.go(3)\nrouter.push({ path: \"/home\" })\nrouter.replace({ hash: \"#bio\" })\n```\n\n----------------------------------------\n\nTITLE: Parent Component for Nested Routes\nDESCRIPTION: Parent page component that includes the NuxtPage component to render child routes, demonstrating nested routing capabilities.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>I am the parent view</h1>\n    <NuxtPage :foobar=\"123\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page with User Session Management\nDESCRIPTION: Vue component that provides a login form and handles authentication through the login API. This page uses the useUserSession composable from nuxt-auth-utils to manage the user's authentication state.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { loggedIn, user, fetch: refreshSession } = useUserSession()\nconst credentials = reactive({\n  email: '',\n  password: '',\n})\nasync function login() {\n  $fetch('/api/login', {\n    method: 'POST',\n    body: credentials\n  })\n  .then(async () => {\n    // Refresh the session on client-side and redirect to the home page\n    await refreshSession()\n    await navigateTo('/')\n  })\n  .catch(() => alert('Bad credentials'))\n}\n</script>\n\n<template>\n  <form @submit.prevent=\"login\">\n    <input v-model=\"credentials.email\" type=\"email\" placeholder=\"Email\" />\n    <input v-model=\"credentials.password\" type=\"password\" placeholder=\"Password\" />\n    <button type=\"submit\">Login</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Applying Route Middleware to a Page\nDESCRIPTION: Shows how to apply a named route middleware to a specific page using definePageMeta. This example applies the 'auth' middleware to protect the dashboard page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: 'auth'\n})\n</script>\n\n<template>\n  <h1>Welcome to your dashboard</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Error Slot with NuxtErrorBoundary in Vue\nDESCRIPTION: Example showing how to use the #error slot to display fallback content when an error occurs. The slot provides access to the error object and a clearError function to reset the error state.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/6.nuxt-error-boundary.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtErrorBoundary>\n    <!-- ... -->\n    <template #error=\"{ error, clearError }\">\n      <p>An error occurred: {{ error }}</p>\n\n      <button @click=\"clearError\">Clear error</button>\n    </template>\n  </NuxtErrorBoundary>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Locale Selector Component Implementation\nDESCRIPTION: A Vue component using the locale composables to display a date formatted according to the selected locale, with a dropdown to switch between available locales. Demonstrates reactive state with locale changes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst locales = useLocales()\nconst locale = useLocale()\nconst date = useLocaleDate(new Date('2016-10-26'))\n</script>\n\n<template>\n  <div>\n    <h1>Nuxt birthday</h1>\n    <p>{{ date }}</p>\n    <label for=\"locale-chooser\">Preview a different locale</label>\n    <select id=\"locale-chooser\" v-model=\"locale\">\n      <option v-for=\"locale of locales\" :key=\"locale\" :value=\"locale\">\n        {{ locale }}\n      </option>\n    </select>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt App Config with Deep Assignment\nDESCRIPTION: Example showing how to update the app.config object at runtime using updateAppConfig. The function performs a deep merge, preserving existing nested properties while updating specified values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/update-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst appConfig = useAppConfig() // { foo: 'bar' }\n\nconst newAppConfig = { foo: 'baz' }\n\nupdateAppConfig(newAppConfig)\n\nconsole.log(appConfig) // { foo: 'baz' }\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Export Utility Function in Nuxt\nDESCRIPTION: This example demonstrates how to create a utility function using named export in a utils/index.ts file. The function formats numbers according to the British English locale with compact notation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.utils.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { format: formatNumber } = Intl.NumberFormat('en-GB', {\n  notation: 'compact',\n  maximumFractionDigits: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Transforming API Response Data in TypeScript\nDESCRIPTION: Example of using the transform function to process and reshape API response data. This allows for more complex data transformations than the pick option, enabling mapping over collections and creating new data structures.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data: mountains } = await useFetch('/api/mountains', {\n  transform: (mountains) => {\n    return mountains.map(mountain => ({ title: mountain.title, description: mountain.description }))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Providing Helpers in Nuxt Plugins\nDESCRIPTION: Demonstrates how to provide helpers on the NuxtApp instance by returning them from the plugin under a 'provide' key.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(() => {\n  return {\n    provide: {\n      hello: (msg: string) => `Hello ${msg}!`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Forwarding Context and Headers in Nuxt Server Routes\nDESCRIPTION: A server endpoint that demonstrates how to forward the request context and headers when making internal fetch requests. It uses event.$fetch to preserve the context of the original request.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  return event.$fetch('/api/forwarded')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Server Middleware for Logging\nDESCRIPTION: Shows how to implement server middleware that logs each incoming request using defineEventHandler and getRequestURL.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  console.log('New request: ' + getRequestURL(event))\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Route Matching with definePageMeta in Vue\nDESCRIPTION: Shows how to use a custom regular expression in definePageMeta to resolve conflicts between overlapping routes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-page-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  path: '/:postId(\\\\d+)-:postSlug' \n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Advanced Locale Management with Composables\nDESCRIPTION: A set of composables for managing locale settings including detecting default locale from browser or request headers, listing available locales, and formatting dates according to the selected locale.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Ref } from 'vue'\n\nexport const useLocale = () => {\n  return useState<string>('locale', () => useDefaultLocale().value)\n}\n\nexport const useDefaultLocale = (fallback = 'en-US') => {\n  const locale = ref(fallback)\n  if (import.meta.server) {\n    const reqLocale = useRequestHeaders()['accept-language']?.split(',')[0]\n    if (reqLocale) {\n      locale.value = reqLocale\n    }\n  } else if (import.meta.client) {\n    const navLang = navigator.language\n    if (navLang) {\n      locale.value = navLang\n    }\n  }\n  return locale\n}\n\nexport const useLocales = () => {\n  const locale = useLocale()\n  const locales = ref([\n    'en-US',\n    'en-GB',\n    ...\n    'ja-JP-u-ca-japanese'\n  ])\n  if (!locales.value.includes(locale.value)) {\n    locales.value.unshift(locale.value)\n  }\n  return locales\n}\n\nexport const useLocaleDate = (date: Ref<Date> | Date, locale = useLocale()) => {\n  return computed(() => new Intl.DateTimeFormat(locale.value, { dateStyle: 'full' }).format(unref(date)))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Route in Nuxt\nDESCRIPTION: Demonstrates how to create a server route without the /api prefix by placing it in the server/routes directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(() => 'Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Enabling Granular Cached Data\nDESCRIPTION: Configuration to enable using getCachedData result when refreshing data for useAsyncData and useFetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    granularCachedData: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Config in Nuxt Configuration\nDESCRIPTION: Illustrates how to define runtime configuration in the Nuxt config file, including public and private variables.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    // Private keys are only available on the server\n    apiSecret: '123',\n\n    // Public keys that are exposed to the client\n    public: {\n      apiBase: process.env.NUXT_PUBLIC_API_BASE || '/api'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Component Directories in Nuxt\nDESCRIPTION: This snippet demonstrates how to configure custom directories for component auto-imports in Nuxt. It shows various options including path prefix handling, custom component prefixes, and directory scanning order considerations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  components: [\n    // ~/calendar-module/components/event/Update.vue => <EventUpdate />\n    { path: '~/calendar-module/components' },\n\n    // ~/user-module/components/account/UserDeleteDialog.vue => <UserDeleteDialog />\n    { path: '~/user-module/components', pathPrefix: false },\n\n    // ~/components/special-components/Btn.vue => <SpecialBtn />\n    { path: '~/components/special-components', prefix: 'Special' },\n\n    // It's important that this comes last if you have overrides you wish to apply\n    // to sub-directories of `~/components`.\n    //\n    // ~/components/Btn.vue => <Btn />\n    // ~/components/base/Btn.vue => <BaseBtn />\n    '~/components'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Cached Data with useNuxtData in Vue Component\nDESCRIPTION: This example demonstrates how to fetch data with a specific key in one component and access it later using that same key. The useFetch composable is used with an explicit 'posts' key for later retrieval.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-data.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// We can access same data later using 'posts' key\nconst { data } = await useFetch('/api/posts', { key: 'posts' })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with Server-Only SEO Meta Tags in Nuxt\nDESCRIPTION: Demonstrates how to optimize performance by conditionally applying SEO meta tags only during server-side rendering for non-reactive content, while keeping reactive meta tags outside the condition.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-seo-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nif (import.meta.server) {\n  // These meta tags will only be added during server-side rendering\n  useSeoMeta({\n    robots: 'index, follow',\n    description: 'Static description that does not need reactivity',\n    ogImage: 'https://example.com/image.png',\n    // other static meta tags...\n  })\n}\n\nconst dynamicTitle = ref('My title')\n// Only use reactive meta tags outside the condition when necessary\nuseSeoMeta({\n  title: () => dynamicTitle.value,\n  ogTitle: () => dynamicTitle.value,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Throwing createError in Vue Component for Error Handling\nDESCRIPTION: Example of using createError in a Vue page component to handle a 404 error when requested movie data is not found. The error includes statusCode and statusMessage properties which trigger a full-screen error page on the server-side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/create-error.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst { data } = await useFetch(`/api/movies/${route.params.slug}`)\nif (!data.value) {\n  throw createError({ statusCode: 404, statusMessage: 'Page Not Found' })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Config in Vue Component\nDESCRIPTION: Example of accessing runtime config within a Vue component using the useRuntimeConfig composable. It demonstrates safely handling server-side-only data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst config = useRuntimeConfig()\n\nconsole.log('Runtime config:', config)\nif (import.meta.server) {\n  console.log('API secret:', config.apiSecret)\n}\n</script>\n\n<template>\n  <div>\n    <div>Check developer console!</div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Hooks for Advanced Transitions\nDESCRIPTION: Implementing JavaScript hooks for more advanced transition effects on a page. This example shows hooks for different stages of the transition that can be used with animation libraries like GSAP.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  pageTransition: {\n    name: 'custom-flip',\n    mode: 'out-in',\n    onBeforeEnter: (el) => {\n      console.log('Before enter...')\n    },\n    onEnter: (el, done) => {},\n    onAfterEnter: (el) => {}\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic package.json for Nuxt Applications\nDESCRIPTION: This shows the minimal package.json configuration needed for a Nuxt application. It includes essential scripts for development, building, and deployment, as well as the core dependencies required for a Nuxt project.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.package.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"nuxt-app\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"nuxt build\",\n    \"dev\": \"nuxt dev\",\n    \"generate\": \"nuxt generate\",\n    \"preview\": \"nuxt preview\",\n    \"postinstall\": \"nuxt prepare\"\n  },\n  \"dependencies\": {\n    \"nuxt\": \"latest\",\n    \"vue\": \"latest\",\n    \"vue-router\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paired Server and Client Component Directory Structure\nDESCRIPTION: This snippet shows the directory structure for paired server and client components using the .server and .client suffixes. This approach allows for different implementations of the same component on server and client sides.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n-| components/\n---| Comments.client.vue\n---| Comments.server.vue\n```\n\n----------------------------------------\n\nTITLE: Using Redis Storage in Nuxt Server API\nDESCRIPTION: A server endpoint demonstrating how to interact with the Redis storage layer. It shows methods for listing keys, setting values, and removing items from the Redis storage.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  // List all keys with\n  const keys = await useStorage('redis').getKeys()\n\n  // Set a key with\n  await useStorage('redis').setItem('foo', 'bar')\n\n  // Remove a key with\n  await useStorage('redis').removeItem('foo')\n\n  return {}\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Export Utility in shared/utils Directory\nDESCRIPTION: Demonstrates how to create a reusable string capitalization function as a named export in the shared/utils directory. This function will be auto-imported in both the Vue app and Nitro server.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.shared.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const capitalize = (input: string) => {\n  return input[0] ? input[0].toUpperCase() + input.slice(1) : ''\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hybrid Rendering with Route Rules in Nuxt\nDESCRIPTION: This configuration demonstrates how to use route rules in Nuxt for hybrid rendering, allowing different cache strategies for different routes. It shows various examples of prerending, SWR (stale-while-revalidate), ISR (Incremental Static Regeneration), client-side rendering, and other route-specific behaviors.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/3.rendering.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    // Homepage pre-rendered at build time\n    '/': { prerender: true },\n    // Products page generated on demand, revalidates in background, cached until API response changes\n    '/products': { swr: true },\n    // Product pages generated on demand, revalidates in background, cached for 1 hour (3600 seconds)\n    '/products/**': { swr: 3600 },\n    // Blog posts page generated on demand, revalidates in background, cached on CDN for 1 hour (3600 seconds)\n    '/blog': { isr: 3600 },\n    // Blog post page generated on demand once until next deployment, cached on CDN\n    '/blog/**': { isr: true },\n    // Admin dashboard renders only on client-side\n    '/admin/**': { ssr: false },\n    // Add cors headers on API routes\n    '/api/**': { cors: true },\n    // Redirects legacy urls\n    '/old-page': { redirect: '/new-page' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Cookies in Nuxt Server API Routes\nDESCRIPTION: Example of managing cookies in Nuxt server API routes using h3 package's getCookie and setCookie utilities. This demonstrates a counter implementation on the server side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-cookie.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(event => {\n  // Read counter cookie\n  let counter = getCookie(event, 'counter') || 0\n\n  // Increase counter cookie by 1\n  setCookie(event, 'counter', ++counter)\n\n  // Send JSON response\n  return { counter }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Page in Vue for Nuxt\nDESCRIPTION: This snippet demonstrates how to create a custom error page in Vue for a Nuxt application. It defines props for the error object and renders the error status code along with a link to go back home.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.error.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { NuxtError } from '#app'\n\nconst props = defineProps({\n  error: Object as () => NuxtError\n})\n</script>\n\n<template>\n  <div>\n    <h1>{{ error.statusCode }}</h1>\n    <NuxtLink to=\"/\">Go back home</NuxtLink>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Providing Helpers in Nuxt Plugin\nDESCRIPTION: Shows how to provide custom helpers that can be used across composables and applications using nuxtApp.provide()\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/6.nuxt-app.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nuxtApp = useNuxtApp()\nnuxtApp.provide('hello', (name) => `Hello ${name}!`)\n\nconsole.log(nuxtApp.$hello('name')) // Prints \"Hello name!\"\n```\n\n----------------------------------------\n\nTITLE: Proper Header Forwarding in SSR\nDESCRIPTION: Shows the correct way to forward headers and cookies during server-side rendering using useRequestFetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/$fetch.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// This will forward the user's headers and cookies to `/api/cookies`\nconst requestFetch = useRequestFetch()\nconst { data } = await useAsyncData(() => requestFetch('/api/cookies'))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Nuxt Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic Nuxt configuration file using the defineNuxtConfig function. It allows for customizing various aspects of the Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // My Nuxt config\n})\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation with navigateTo\nDESCRIPTION: Demonstrates how to use the navigateTo utility for programmatic navigation in a Nuxt application. This example shows navigating to a search page with query parameters from form input values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst name = ref('');\nconst type = ref(1);\n\nfunction navigate(){\n  return navigateTo({\n    path: '/search',\n    query: {\n      name: name.value,\n      type: type.value\n    }\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Named Layout in Nuxt.js Page\nDESCRIPTION: This snippet demonstrates how to use a named layout (custom) in a Nuxt.js page by using the definePageMeta function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  layout: 'custom'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining App Configuration in TypeScript\nDESCRIPTION: This snippet demonstrates how to define app configuration using the defineAppConfig function in a TypeScript file. It sets a 'foo' property with the value 'bar'.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  foo: 'bar'\n})\n```\n\n----------------------------------------\n\nTITLE: Using preloadComponents in Nuxt\nDESCRIPTION: The preloadComponents utility allows manual preloading of globally registered components to improve rendering performance. It can take either a single component name or an array of component names as parameters, using their Pascal-cased identifiers. Note that this function has no effect on the server.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/preload-components.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait preloadComponents('MyGlobalComponent')\n\nawait preloadComponents(['MyGlobalComponent1', 'MyGlobalComponent2'])\n```\n\n----------------------------------------\n\nTITLE: Error Handling Middleware Example in TypeScript\nDESCRIPTION: Example of using defineNuxtRouteMiddleware to create an error middleware that throws a 404 error when the route parameter 'id' equals '1'. This redirects the user to a custom error page with the specified error message.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-nuxt-route-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to) => {\n  if (to.params.id === '1') {\n    throw createError({ statusCode: 404, statusMessage: 'Page Not Found' })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useAsyncData with Watch Params\nDESCRIPTION: Shows how to use the watch option with useAsyncData to automatically refetch data when a reactive variable changes. This example watches a page number and updates posts accordingly.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-async-data.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst page = ref(1)\nconst { data: posts } = await useAsyncData(\n  'posts',\n  () => $fetch('https://fakeApi.com/posts', {\n    params: {\n      page: page.value\n    }\n  }), {\n    watch: [page]\n  }\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing useRequestFetch in Vue Component\nDESCRIPTION: Demonstrates how to use useRequestFetch composable in a Vue component to forward request headers to an API endpoint. Shows comparison between forwarded and non-forwarded request scenarios.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-fetch.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// This will forward the user's headers to the `/api/cookies` event handler\n// Result: { cookies: { foo: 'bar' } }\nconst requestFetch = useRequestFetch()\nconst { data: forwarded } = await useAsyncData(() => requestFetch('/api/cookies'))\n\n// This will NOT forward anything\n// Result: { cookies: {} }\nconst { data: notForwarded } = await useAsyncData(() => $fetch('/api/cookies')) \n</script>\n```\n\n----------------------------------------\n\nTITLE: Query Parameters with useFetch\nDESCRIPTION: Example showing how to add query parameters to a useFetch request using the query option, with support for reactive parameters.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst param1 = ref('value1')\nconst { data, status, error, refresh } = await useFetch('/api/modules', {\n  query: { param1, param2: 'value2' }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Route Middleware for Authentication\nDESCRIPTION: Example of a named route middleware that checks if a user is authenticated. If not, it redirects to the login page using the navigateTo helper function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  // isAuthenticated() is an example method verifying if a user is authenticated\n  if (isAuthenticated() === false) {\n    return navigateTo('/login')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Meta Tags with useHead\nDESCRIPTION: Shows how to create reactive meta tags using the useHead composable. The description meta tag is bound to a reactive ref.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst description = ref('My amazing site.')\n\nuseHead({\n  meta: [\n    { name: 'description', content: description }\n  ],\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Separating Runtime and E2E Tests in TypeScript\nDESCRIPTION: Shows how to separate runtime unit tests and end-to-end tests into different files to avoid conflicts between @nuxt/test-utils/runtime and @nuxt/test-utils/e2e.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockNuxtImport } from '@nuxt/test-utils/runtime'\n\nmockNuxtImport('useStorage', () => {\n  return () => {\n    return { value: 'mocked storage' }\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, $fetch } from '@nuxt/test-utils/e2e'\n\nawait setup({\n  setupTimeout: 10000,\n})\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Adding Server Templates in Nuxt Module\nDESCRIPTION: Shows how to add server-side virtual files using addServerTemplate utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addServerTemplate } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    // The file is added to Nitro's virtual file system and can be imported in the server code from 'my-server-module.mjs'\n    addServerTemplate({\n      filename: 'my-server-module.mjs',\n      getContents: () => 'export const myServerModule = () => \"hello world !\"'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Middleware with definePageMeta in Vue\nDESCRIPTION: Demonstrates how to define middleware using definePageMeta, both as a function and as string references to named middleware.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-page-meta.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  // define middleware as a function\n  middleware: [\n    function (to, from) {\n      const auth = useState('auth')\n\n      if (!auth.value.authenticated) {\n          return navigateTo('/login')\n      }\n\n      if (to.path !== '/checkout') {\n        return navigateTo('/checkout')\n      }\n    }\n  ],\n\n  // ... or a string\n  middleware: 'auth'\n\n  // ... or multiple strings\n  middleware: ['auth', 'another-named-middleware']\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Global Transitions with NuxtPage Component\nDESCRIPTION: Applying transitions directly on the NuxtPage component in app.vue to configure transitions globally. This approach applies the transition to all pages but cannot be overridden on individual pages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtLayout>\n      <NuxtPage :transition=\"{\n        name: 'bounce',\n        mode: 'out-in'\n      }\" />\n    </NuxtLayout>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side Only Rendering in Nuxt\nDESCRIPTION: This configuration snippet shows how to disable server-side rendering in Nuxt by setting the ssr option to false in the nuxt.config.ts file, enabling client-side only rendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/3.rendering.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  ssr: false\n})\n```\n\n----------------------------------------\n\nTITLE: Safe Data Fetching with useAsyncData in Dynamic Routes\nDESCRIPTION: Demonstrates the correct way to use useAsyncData with dynamic route parameters by providing a unique key that matches the fetched data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// This would be unsafe in a dynamic page (e.g. `[slug].vue`) because the route slug makes a difference\n// to the data fetched, but Nuxt can't know that because it's not reflected in the key.\nconst route = useRoute()\nconst { data } = await useAsyncData(async () => {\n  return await $fetch(`/api/my-page/${route.params.slug}`)\n})\n// Instead, you should use a key that uniquely identifies the data fetched.\nconst { data } = await useAsyncData(route.params.slug, async () => {\n  return await $fetch(`/api/my-page/${route.params.slug}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Pinia Store for Website Information\nDESCRIPTION: Defining a Pinia store for managing website information with state properties and an async fetch action. This demonstrates how to use Pinia as a state management solution with Nuxt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/11.state-management.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useWebsiteStore = defineStore('websiteStore', {\n  state: () => ({\n    name: '',\n    description: ''\n  }),\n  actions: {\n    async fetch() {\n      const infos = await $fetch('https://api.nuxt.com/modules/pinia')\n\n      this.name = infos.name\n      this.description = infos.description\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic useCookie Usage in TypeScript\nDESCRIPTION: Basic syntax for using the useCookie composable in Nuxt applications, which provides an SSR-friendly way to read and write cookies.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cookie = useCookie(name, options)\n```\n\n----------------------------------------\n\nTITLE: Accessing HTML Elements with ClientOnly in Vue and TypeScript\nDESCRIPTION: Illustrates how to access HTML elements rendered inside a <ClientOnly> component using template refs and watch. This is useful for performing actions after the component is mounted on the client-side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.client-only.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst nuxtWelcomeRef = useTemplateRef('nuxtWelcomeRef')\n\n// The watch will be triggered when the component is available\nwatch(nuxtWelcomeRef, () => {\n console.log('<NuxtWelcome /> mounted')\n}, { once: true })\n</script>\n\n<template>\n  <ClientOnly>\n    <NuxtWelcome ref=\"nuxtWelcomeRef\" />\n  </ClientOnly>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useServerSeoMeta in Nuxt Vue Component\nDESCRIPTION: This snippet demonstrates how to use the useServerSeoMeta composable in a Nuxt Vue component to set SEO meta tags. It sets the robots meta tag to 'index, follow'.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-server-seo-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseServerSeoMeta({\n  robots: 'index, follow'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Layout Transitions with definePageMeta\nDESCRIPTION: Customizing the layout transition for a specific page by using definePageMeta to set both the layout and a custom transition effect.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  layout: 'orange',\n  layoutTransition: {\n    name: 'slide-in'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Nuxt Server API\nDESCRIPTION: A server endpoint that demonstrates how to send HTTP redirects. It uses the sendRedirect utility to redirect clients to a different URL with a specified status code.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  await sendRedirect(event, '/path/redirect/to', 302)\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Background Tasks After Response in Nuxt Server\nDESCRIPTION: A server endpoint showing how to execute asynchronous tasks without blocking the response. It uses event.waitUntil to ensure a background task completes even after the response is sent to the client.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst timeConsumingBackgroundTask = async () => {\n  await new Promise((resolve) => setTimeout(resolve, 1000))\n};\n\nexport default eventHandler((event) => {\n  // schedule a background task without blocking the response\n  event.waitUntil(timeConsumingBackgroundTask())\n\n  // immediately send the response to the client\n  return 'done'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Rules in Nuxt Configuration\nDESCRIPTION: Demonstrates how to define route rules in nuxt.config.ts to customize rendering behavior. Includes examples of prerendering, caching, and redirections to optimize different routes in a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/13.server.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    // Generated at build time for SEO purpose\n    '/': { prerender: true },\n    // Cached for 1 hour\n    '/api/*': { cache: { maxAge: 60 * 60 } },\n    // Redirection to avoid 404\n    '/old-page': {\n      redirect: { to: '/new-page', statusCode: 302 }\n    }\n    // ...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useHead Composable for Meta Tags in Nuxt 3\nDESCRIPTION: This snippet demonstrates how to use the useHead composable in Nuxt 3 to manage meta tags reactively. It sets the title and description meta tags based on reactive references.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/4.meta.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst title = ref('My App')\nconst description = ref('My App Description')\n\n// This will be reactive when you change title/description above\nuseHead({\n  title,\n  meta: [{\n    name: 'description',\n    content: description\n  }]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Lazy Component Loading Example\nDESCRIPTION: Shows how to implement lazy loading of components using the Lazy prefix.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst show = ref(false)\n</script>\n\n<template>\n  <div>\n    <h1>Mountains</h1>\n    <LazyMountainsList v-if=\"show\" />\n    <button v-if=\"!show\" @click=\"show = true\">Show List</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization Middleware with useRequestHeader in Nuxt.js\nDESCRIPTION: Defines a Nuxt route middleware that checks if the 'authorization' request header exists. If not, it redirects the user to a not-authorized page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-header.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  if (!useRequestHeader('authorization')) {\n    return navigateTo('/not-authorized')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Layout in Nuxt.js App\nDESCRIPTION: This snippet shows how to override the default layout for all pages using the name property of the NuxtLayout component in the app.vue file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// You might choose this based on an API call or logged-in status\nconst layout = \"custom\";\n</script>\n\n<template>\n  <NuxtLayout :name=\"layout\">\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom $fetch Plugin in Nuxt\nDESCRIPTION: This Nuxt plugin creates a custom $fetch instance with a base URL, JWT token handling, and error redirection. It exposes the custom API fetcher through useNuxtApp().$api.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/3.custom-usefetch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  const { session } = useUserSession()\n\n  const api = $fetch.create({\n    baseURL: 'https://api.nuxt.com',\n    onRequest({ request, options, error }) {\n      if (session.value?.token) {\n        // note that this relies on ofetch >= 1.4.0 - you may need to refresh your lockfile\n        options.headers.set('Authorization', `Bearer ${session.value?.token}`)\n      }\n    },\n    async onResponseError({ response }) {\n      if (response.status === 401) {\n        await nuxtApp.runWithContext(() => navigateTo('/login'))\n      }\n    }\n  })\n\n  // Expose to useNuxtApp().$api\n  return {\n    provide: {\n      api\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Hooks in a Nitro Plugin\nDESCRIPTION: Example of defining server-side hooks in a Nitro plugin. These hooks allow you to interact with the rendering process on the server side, such as modifying HTML output or responses.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/2.hooks.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNitroPlugin((nitroApp) => {\n  nitroApp.hooks.hook('render:html', (html, { event }) => {\n    console.log('render:html', html)\n    html.bodyAppend.push('<hr>Appended by custom plugin')\n  })\n\n  nitroApp.hooks.hook('render:response', (response, { event }) => {\n    console.log('render:response', response)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Complex URL Construction with Computed Getters\nDESCRIPTION: Shows advanced URL construction using computed getters in Nuxt with conditional rendering based on fetch status. Includes input handling and loading states.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst id = ref(null)\n\nconst { data, status } = useLazyFetch(() => `/api/users/${id.value}`, {\n  immediate: false\n})\n\nconst pending = computed(() => status.value === 'pending');\n</script>\n\n<template>\n  <div>\n    <!-- disable the input while fetching -->\n    <input v-model=\"id\" type=\"number\" :disabled=\"pending\"/>\n\n    <div v-if=\"status === 'idle'\">\n      Type an user ID\n    </div>\n\n    <div v-else-if=\"pending\">\n      Loading ...\n    </div>\n\n    <div v-else>\n      {{ data }}\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Server Utility Handler\nDESCRIPTION: Demonstrates how to create a custom utility that wraps event handlers with additional functionality like error handling and response transformation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport type { EventHandler, EventHandlerRequest } from 'h3'\n\nexport const defineWrappedResponseHandler = <T extends EventHandlerRequest, D> (\n  handler: EventHandler<T, D>\n): EventHandler<T, D> =>\n  defineEventHandler<T>(async event => {\n    try {\n      // do something before the route handler\n      const response = await handler(event)\n      // do something after the route handler\n      return { response }\n    } catch (err) {\n      // Error handling\n      return { err }\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Routes with Pages Hook in Nuxt\nDESCRIPTION: This code demonstrates using the 'pages:extend' hook in Nuxt to add, change, or remove routes from the scanned routes. The example adds a profile route and removes routes matching TypeScript files using a recursive function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NuxtPage } from '@nuxt/schema'\n\nexport default defineNuxtConfig({\n  hooks: {\n    'pages:extend' (pages) {\n      // add a route\n      pages.push({\n        name: 'profile',\n        path: '/profile',\n        file: '~/extra-pages/profile.vue'\n      })\n\n      // remove routes\n      function removePagesMatching (pattern: RegExp, pages: NuxtPage[] = []) {\n        const pagesToRemove: NuxtPage[] = []\n        for (const page of pages) {\n          if (page.file && pattern.test(page.file)) {\n            pagesToRemove.push(page)\n          } else {\n            removePagesMatching(pattern, page.children)\n          }\n        }\n        for (const page of pagesToRemove) {\n          pages.splice(pages.indexOf(page), 1)\n        }\n      }\n      removePagesMatching(/\\.ts$/, pages)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nuxt Hooks in a Nuxt Module\nDESCRIPTION: Example of how to define hooks within a Nuxt module. The module setup function provides access to the Nuxt instance where hooks can be registered.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/2.hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    nuxt.hook('close', async () => { })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Routes Using Router Config in Nuxt\nDESCRIPTION: This code snippet demonstrates how to override or extend routes using the router.options.ts file. The routes function accepts the scanned routes and returns customized routes, allowing you to define custom routes for your Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RouterConfig } from '@nuxt/schema'\n\nexport default {\n  // https://router.vuejs.org/api/interfaces/routeroptions.html#routes\n  routes: (_routes) => [\n    {\n      name: 'home',\n      path: '/',\n      component: () => import('~/pages/home.vue')\n    }\n  ],\n} satisfies RouterConfig\n```\n\n----------------------------------------\n\nTITLE: Using refreshCookie with Vue Components\nDESCRIPTION: Example showing how to use refreshCookie in a Vue component to update cookie values after a login API call. Demonstrates integration with useCookie and computed properties for tracking login state.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/refresh-cookie.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst tokenCookie = useCookie('token')\n\nconst login = async (username, password) => {\n  const token = await $fetch('/api/token', { ... }) // Sets `token` cookie on response\n  refreshCookie('token')\n}\n\nconst loggedIn = computed(() => !!tokenCookie.value)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Scripts to Body with useHead\nDESCRIPTION: Shows how to use the tagPosition option to append scripts to the end of the <body> tag using useHead.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  script: [\n    {\n      src: 'https://third-party-script.com',\n      // valid options are: 'head' | 'bodyClose' | 'bodyOpen'\n      tagPosition: 'bodyClose'\n    }\n  ]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Custom useAPI Composable in Vue Component\nDESCRIPTION: This Vue component demonstrates how to use the custom useAPI composable to fetch modules data in a clean and concise manner.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/3.custom-usefetch.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { data: modules } = await useAPI('/modules')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Vue Component\nDESCRIPTION: Demonstrates how to use the useRuntimeConfig composable in a Vue component setup script.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst config = useRuntimeConfig()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Runtime Config\nDESCRIPTION: Example of an .env file that defines environment variables which will override runtime config values. The naming convention follows the NUXT_ prefix pattern.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nNUXT_API_SECRET=api_secret_token\nNUXT_PUBLIC_API_BASE=https://nuxtjs.org\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Layout in Nuxt Route Middleware (TypeScript)\nDESCRIPTION: This snippet defines a Nuxt route middleware that sets a custom layout for the page being navigated to. It uses the setPageLayout function to change the layout to 'other'.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/set-page-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to) => {\n  // Set the layout on the route you are navigating _to_\n  setPageLayout('other')\n})\n```\n\n----------------------------------------\n\nTITLE: Computing URLs with Reactive Values in Nuxt\nDESCRIPTION: Demonstrates how to use reactive values for URL computation in useLazyFetch composable. The code shows basic query parameter usage and automatically re-fetches when reactive values change.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst id = ref(null)\n\nconst { data, status } = useLazyFetch('/api/user', {\n  query: {\n    user_id: id\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Writing Playwright Tests for Nuxt Applications\nDESCRIPTION: Example test file using Playwright with Nuxt Test Utils. The test navigates to a page and verifies content after hydration is complete.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from '@nuxt/test-utils/playwright'\n\ntest('test', async ({ page, goto }) => {\n  await goto('/', { waitUntil: 'hydration' })\n  await expect(page.getByRole('heading')).toHaveText('Welcome to Playwright!')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cached Data as Default Values for Subsequent Fetches\nDESCRIPTION: This example shows how to use previously cached data as a placeholder while fetching specific post details. It retrieves the cached posts data and uses it to find a specific post to display while the detailed data is being loaded.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-data.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Access to the cached value of useFetch in posts.vue (parent route)\nconst { data: posts } = useNuxtData('posts')\n\nconst route = useRoute()\n\nconst { data } = useLazyFetch(`/api/posts/${route.params.id}`, {\n  key: `post-${route.params.id}`,\n  default() {\n    // Find the individual post from the cache and set it as the default value.\n    return posts.value.find(post => post.id === route.params.id)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Router Options Configuration in Nuxt\nDESCRIPTION: This snippet shows the recommended way to specify router options in Nuxt using a dedicated router.options.ts file. This approach allows for type-safe router configuration using the RouterConfig type from Nuxt's schema.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RouterConfig } from '@nuxt/schema'\n\nexport default {\n} satisfies RouterConfig\n```\n\n----------------------------------------\n\nTITLE: Navigating to External URLs with navigateTo (Vue)\nDESCRIPTION: Illustrates how to use navigateTo for external URL navigation, highlighting the difference between default behavior and using the 'external' parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/navigate-to.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// will throw an error;\n// navigating to an external URL is not allowed by default\nawait navigateTo('https://nuxt.com')\n\n// will redirect successfully with the 'external' parameter set to 'true'\nawait navigateTo('https://nuxt.com', {\n  external: true\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sending File Streams in Nuxt Server API\nDESCRIPTION: A server endpoint that demonstrates how to stream files as a response. It uses the sendStream helper to return a file stream to the client without loading the entire file into memory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'node:fs'\nimport { sendStream } from 'h3'\n\nexport default defineEventHandler((event) => {\n  return sendStream(event, fs.createReadStream('/path/to/file'))\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Data Fetching with Status Handling in Vue\nDESCRIPTION: Example of using the lazy option with useFetch to manually handle loading states. This approach prevents the component from blocking navigation while data is being fetched, requiring explicit handling of the pending status in the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { status, data: posts } = useFetch('/api/posts', {\n  lazy: true\n})\n</script>\n\n<template>\n  <!-- you will need to handle a loading state -->\n  <div v-if=\"status === 'pending'\">\n    Loading ...\n  </div>\n  <div v-else>\n    <div v-for=\"post in posts\">\n      <!-- do something -->\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing an API Route Handler for a Nuxt Module\nDESCRIPTION: This code defines an event handler for the /api/hello API route that returns a simple JSON object. It uses Nuxt's defineEventHandler function to create the route handler that will be used by the local module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.modules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(() => {\n  return { hello: 'world' }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Prefetch Triggers with NuxtLink in Vue\nDESCRIPTION: Shows how to use custom prefetch triggers for <NuxtLink> using the prefetch-on prop, allowing control over when to prefetch links based on visibility or interaction.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink prefetch-on=\"visibility\">\n    This will prefetch when it becomes visible (default)\n  </NuxtLink>\n\n  <NuxtLink prefetch-on=\"interaction\">\n    This will prefetch when hovered or when it gains focus\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Plugin with Dependencies\nDESCRIPTION: Demonstrates how to create a Nuxt plugin that depends on another plugin before it runs.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin({\n  name: 'depends-on-my-plugin',\n  dependsOn: ['my-plugin'],\n  async setup (nuxtApp) {\n    // this plugin will wait for the end of `my-plugin`'s execution before it runs\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Catch-all Route Handler\nDESCRIPTION: Shows how to implement a catch-all route with a named parameter using [...slug] syntax to make the route segments accessible via a named parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  // event.context.params.slug to get the route segment: 'bar/baz'\n  return `Default foo handler`\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NuxtLink Defaults in Nuxt Config\nDESCRIPTION: This code snippet shows how to override the default settings for NuxtLink component in the Nuxt configuration file. It demonstrates setting various properties like component name, external link attributes, active classes, and prefetching behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    defaults: {\n      nuxtLink: {\n        // default values\n        componentName: 'NuxtLink',\n        externalRelAttribute: 'noopener noreferrer',\n        activeClass: 'router-link-active',\n        exactActiveClass: 'router-link-exact-active',\n        prefetchedClass: undefined, // can be any valid string class name\n        trailingSlash: undefined // can be 'append' or 'remove'\n        prefetch: true,\n        prefetchOn: { visibility: true } \n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Injections in Composables\nDESCRIPTION: Shows how to access plugin injections from within a composable using useNuxtApp.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useHello = () => {\n  const nuxtApp = useNuxtApp()\n  return nuxtApp.$hello\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Plugins in a Nuxt Module\nDESCRIPTION: This snippet shows how to inject a plugin into a Nuxt application from a module using the addPlugin utility from @nuxt/kit. It uses createResolver to resolve the relative path to the plugin file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule, addPlugin, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    // Create resolver to resolve relative paths\n    const resolver = createResolver(import.meta.url)\n\n    addPlugin(resolver.resolve('./runtime/plugin'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Server Components in Vue Templates\nDESCRIPTION: This snippet demonstrates how to use server components in a Vue template. The HighlightedMarkdown component with a .server suffix will be rendered on the server side, keeping libraries out of the client bundle.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!--\n      this will automatically be rendered on the server, meaning your markdown parsing + highlighting\n      libraries are not included in your client bundle.\n     -->\n    <HighlightedMarkdown markdown=\"# Headline\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Hooks in Nuxt Plugin\nDESCRIPTION: Illustrates how to use the hook function to add custom logic at specific points in the Nuxt rendering lifecycle within a plugin.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.hook('page:start', () => {\n    /* your code goes here */\n  })\n  nuxtApp.hook('vue:error', (..._args) => {\n    console.log('vue:error')\n    // if (import.meta.client) {\n    //   console.log(..._args)\n    // }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Params to Dynamic Routes with NuxtLink in Vue\nDESCRIPTION: Shows how to pass parameters to dynamic routes using the <NuxtLink> component. This example links to a dynamic post page with an ID parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink :to=\"{ name: 'posts-id', params: { id: 123 } }\">\n    Post 123\n  </NuxtLink>\n</template>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/posts/123\">Post 123</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Router Manipulation Methods (TypeScript)\nDESCRIPTION: Illustrates the usage of various router manipulation methods such as addRoute, removeRoute, getRoutes, hasRoute, and resolve.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-router.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = useRouter()\n\nrouter.addRoute({ name: 'home', path: '/home', component: Home })\nrouter.removeRoute('home')\nrouter.getRoutes()\nrouter.hasRoute('home')\nrouter.resolve({ name: 'home' })\n```\n\n----------------------------------------\n\nTITLE: Using shallowRef with useState for Performance Optimization\nDESCRIPTION: Demonstrates how to combine useState with shallowRef to create state that isn't deeply reactive, which can improve performance for large objects and arrays.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-state.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useState('my-shallow-state', () => shallowRef({ deep: 'not reactive' }))\n// isShallow(state) === true\n```\n\n----------------------------------------\n\nTITLE: Injecting Composables in a Nuxt Module\nDESCRIPTION: This snippet demonstrates how to add composables to a Nuxt application from a module using the addImports utility from @nuxt/kit. It shows how to specify the name, alias, and source path of the composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addImports, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    addImports({\n      name: 'useComposable', // name of the composable to be used\n      as: 'useComposable',\n      from: resolver.resolve('runtime/composables/useComposable') // path of composable\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Event and URL with useRequestEvent in Nuxt\nDESCRIPTION: This snippet demonstrates how to use the useRequestEvent composable to access the incoming request event and retrieve the URL. It's important to note that useRequestEvent will return undefined in the browser context.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-event.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get underlying request event\nconst event = useRequestEvent()\n\n// Get the URL\nconst url = event?.path\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Method in Nuxt Plugin\nDESCRIPTION: Shows how to extend the Nuxt application context by providing a custom method using the provide function in a Nuxt plugin.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst nuxtApp = useNuxtApp()\nnuxtApp.provide('hello', (name) => `Hello ${name}!`)\n\n// Prints \"Hello name!\"\nconsole.log(nuxtApp.$hello('name'))\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Route with Parameter Access\nDESCRIPTION: Page component that demonstrates how to access route parameters using the $route object in a dynamic route file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $route.params.group }} - {{ $route.params.id }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Proxying Authorization Headers in Nuxt API Calls\nDESCRIPTION: This example demonstrates how to access and proxy the initial request's authorization header to subsequent internal API calls during server-side rendering, ensuring the authorization context is maintained.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-headers.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data } = await useFetch('/api/confidential', {\n  headers: useRequestHeaders(['authorization'])\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing App Configuration in Vue Component\nDESCRIPTION: This Vue component demonstrates how to access the app configuration using the useAppConfig composable and log the theme object.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst appConfig = useAppConfig()\n\nconsole.log(appConfig.theme)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Meta Tags with useSeoMeta\nDESCRIPTION: Demonstrates how to create reactive meta tags using the useSeoMeta composable. The description is bound to a reactive ref.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst description = ref('My amazing site.')\n\nuseSeoMeta({\n  description\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Composable Directories in a Nuxt Module\nDESCRIPTION: This snippet shows how to add an entire directory of composables to a Nuxt application using the addImportsDir utility from @nuxt/kit.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addImportsDir, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    addImportsDir(resolver.resolve('runtime/composables'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding External CSS with useHead\nDESCRIPTION: Shows how to add external CSS, specifically Google Fonts, using the link property of the useHead composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  link: [\n    {\n      rel: 'preconnect',\n      href: 'https://fonts.googleapis.com'\n    },\n    {\n      rel: 'stylesheet',\n      href: 'https://fonts.googleapis.com/css2?family=Roboto&display=swap',\n      crossorigin: ''\n    }\n  ]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Altering Nuxt Configuration in a Module\nDESCRIPTION: This snippet demonstrates how to modify Nuxt configuration within a module to enable an experimental feature. It uses defineNuxtModule to create a module that sets the componentIslands experimental flag to true.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    // We create the `experimental` object if it doesn't exist yet\n    nuxt.options.experimental ||= {}\n    nuxt.options.experimental.componentIslands = true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating useFetch to New Fetch API\nDESCRIPTION: Demonstrates migration from the old useFetch pattern to the new useLazyAsyncData or useLazyFetch composables with refresh functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/5.nuxt3-compatible-api.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n<script setup>\n- import { useFetch } from '@nuxtjs/composition-api'\n- const posts = ref([])\n- const { fetch } = useFetch(() => { posts.value = await $fetch('/api/posts') })\n+ const { data: posts, refresh } = useLazyAsyncData('posts', () => $fetch('/api/posts'))\n+ // or, more simply!\n+ const { data: posts, refresh } = useLazyFetch('/api/posts')\n  function updatePosts() {\n-   return fetch()\n+   return refresh()\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Transitions for a Specific Route\nDESCRIPTION: Using definePageMeta to disable both page and layout transitions for a specific route, overriding any global transition settings.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  pageTransition: false,\n  layoutTransition: false\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Layout Transitions with Multiple Components\nDESCRIPTION: A comprehensive example of layout transitions, showing app.vue with transition styles, two different layout components, and page components that use different layouts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n\n<style>\n.layout-enter-active,\n.layout-leave-active {\n  transition: all 0.4s;\n}\n.layout-enter-from,\n.layout-leave-to {\n  filter: grayscale(1);\n}\n</style>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <pre>default layout</pre>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\ndiv {\n  background-color: lightgreen;\n}\n</style>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <pre>orange layout</pre>\n    <slot />\n  </div>\n</template>\n\n<style scoped>\ndiv {\n  background-color: #eebb90;\n  padding: 20px;\n  height: 100vh;\n}\n</style>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>Home page</h1>\n    <NuxtLink to=\"/about\">About page</NuxtLink>\n  </div>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  layout: 'orange'\n})\n</script>\n\n<template>\n  <div>\n    <h1>About page</h1>\n    <NuxtLink to=\"/\">Home page</NuxtLink>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Props Implementation\nDESCRIPTION: Demonstrates passing and accessing custom props in NuxtPage components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/2.nuxt-page.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtPage :foobar=\"123\" />\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst props = defineProps<{ foobar: number }>()\n\nconsole.log(props.foobar) // Outputs: 123\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst attrs = useAttrs()\nconsole.log(attrs.foobar) // Outputs: 123\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining useHead Type Signature in TypeScript\nDESCRIPTION: Type definition showing the function signature for useHead composable that accepts a MaybeComputedRef of MetaObject type.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-head.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseHead(meta: MaybeComputedRef<MetaObject>): void\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Imported Utility Functions in Vue Components\nDESCRIPTION: This example demonstrates how to use auto-imported utility functions in a Vue component. The formatNumber function from utils/ is used directly in the template without explicit import.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.utils.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ formatNumber(1234) }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom NuxtLink Component\nDESCRIPTION: This snippet demonstrates how to create a custom link component by extending NuxtLink with the defineNuxtLink function. It allows for customizing the component's default behavior while maintaining the core functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtLink({\n  componentName: 'MyNuxtLink',\n  /* see signature below for more */\n})\n```\n\n----------------------------------------\n\nTITLE: Prerendering API Routes with prerenderRoutes in Nuxt 3\nDESCRIPTION: Shows how to prerender API routes for static site generation (SSG), which allows fetching data from API endpoints as if there was an available server. Includes an example of fetching the prerendered data with the proper responseType setting.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/prerender-routes.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprerenderRoutes('/api/content/article/name-of-article')\n\n// Somewhere later in App\nconst articleContent = await $fetch('/api/content/article/name-of-article', {\n  responseType: 'json',\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Content with Vue Catch-all Route\nDESCRIPTION: Vue component that creates a catch-all route to render content from the content/ directory using ContentRenderer component. It uses useAsyncData to fetch content based on the current route path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.content.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nconst route = useRoute()\nconst { data: page } = await useAsyncData(route.path, () => {\n  return queryCollection('content').path(route.path).first()\n})\n</script>\n\n<template>\n  <div>\n    <header><!-- ... --></header>\n\n    <ContentRenderer v-if=\"page\" :value=\"page\" />\n\n    <footer><!-- ... --></footer>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Inline Middleware in Vue Component\nDESCRIPTION: This Vue component demonstrates using both an inline middleware function and a named middleware reference within definePageMeta, showing the array syntax for applying multiple middleware to a page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: [\n    function (to, from) {\n      // Custom inline middleware\n    },\n    'auth',\n  ],\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of definePageMeta in Vue\nDESCRIPTION: Demonstrates how to use definePageMeta to set a custom layout for a Nuxt page component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-page-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  layout: 'default'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Error Object Structure in TypeScript for Nuxt\nDESCRIPTION: This snippet outlines the structure of the error object in TypeScript for Nuxt applications. It includes fields such as statusCode, fatal, unhandled, statusMessage, data, and cause.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.error.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  statusCode: number\n  fatal: boolean\n  unhandled: boolean\n  statusMessage?: string\n  data?: unknown\n  cause?: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom History Mode in Nuxt Router\nDESCRIPTION: This advanced configuration demonstrates how to override the history mode in Nuxt's router by providing a function that accepts the base URL and returns a custom history mode. The example creates a memory history for client-side rendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RouterConfig } from '@nuxt/schema'\nimport { createMemoryHistory } from 'vue-router'\n\nexport default {\n  // https://router.vuejs.org/api/interfaces/routeroptions.html\n  history: base => import.meta.client ? createMemoryHistory(base) : null /* default */\n} satisfies RouterConfig\n```\n\n----------------------------------------\n\nTITLE: Implementing Nuxt Hooks in nuxt.config.ts\nDESCRIPTION: Example showing how to define hooks within the Nuxt configuration file. This approach allows defining hooks that will be executed during the build process.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/2.hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    close: () => { }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Client-Side Component with Fallback in Vue\nDESCRIPTION: Demonstrates the use of <ClientOnly> component to render a Comment component only on the client-side, with a fallback content for server-side rendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.client-only.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Sidebar />\n    <!-- The <Comment> component will only be rendered on client-side -->\n    <ClientOnly fallback-tag=\"span\" fallback=\"Loading comments...\">\n      <Comment />\n    </ClientOnly>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using navigateTo in Route Middleware (TypeScript)\nDESCRIPTION: Shows how to use navigateTo within a Nuxt route middleware, including setting a redirect code. It also highlights the importance of returning the result of navigateTo in middleware.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/navigate-to.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  if (to.path !== '/search') {\n    // setting the redirect code to '301 Moved Permanently'\n    return navigateTo('/search', { redirectCode: 301 })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of NuxtRouteAnnouncer in app.vue\nDESCRIPTION: Example of adding the NuxtRouteAnnouncer component to app.vue to announce page title changes to assistive technologies. The component is placed alongside NuxtLayout and NuxtPage.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/12.nuxt-route-announcer.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtRouteAnnouncer />\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP POST Method Handler in Nuxt\nDESCRIPTION: Shows how to create an API endpoint that specifically handles POST requests using the .post suffix in the filename.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(() => 'Test post handler')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error with Additional Data in TypeScript for Nuxt\nDESCRIPTION: This snippet shows how to create a custom error with additional data fields in TypeScript for Nuxt. It demonstrates the use of createError function to include custom fields in the data property.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.error.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthrow createError({\n  statusCode: 404,\n  statusMessage: 'Page Not Found',\n  data: {\n    myCustomField: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Runtime Config in Server API\nDESCRIPTION: Demonstrates how to access runtime configuration values in a server API handler using useRuntimeConfig.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  const config = useRuntimeConfig(event)\n\n  const repo = await $fetch('https://api.github.com/repos/nuxt/nuxt', {\n    headers: {\n      Authorization: `token ${config.githubToken}`\n    }\n  })\n\n  return repo\n})\n```\n\n----------------------------------------\n\nTITLE: Minimizing Payload Size with the pick Option in Vue\nDESCRIPTION: Demonstration of using the pick option to select specific fields from an API response, reducing the payload size by including only the fields needed in the template. This optimizes the data transferred from server to client.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n/* only pick the fields used in your template */\nconst { data: mountain } = await useFetch('/api/mountains/everest', {\n  pick: ['title', 'description']\n})\n</script>\n\n<template>\n  <h1>{{ mountain.title }}</h1>\n  <p>{{ mountain.description }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Config with Environment Variables\nDESCRIPTION: Example of setting up runtime config in nuxt.config.ts with empty default values that can be overridden by environment variables at runtime.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    apiSecret: '', // can be overridden by NUXT_API_SECRET environment variable\n    public: {\n      apiBase: '', // can be overridden by NUXT_PUBLIC_API_BASE environment variable\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Layout Dynamically in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to change the layout dynamically using the setPageLayout helper function in a Nuxt.js page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nfunction enableCustomLayout () {\n  setPageLayout('custom')\n}\ndefinePageMeta({\n  layout: false,\n});\n</script>\n\n<template>\n  <div>\n    <button @click=\"enableCustomLayout\">Update layout</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Middleware to Disable Vue Transitions with View Transitions\nDESCRIPTION: This middleware automatically disables Vue's built-in transitions when the browser supports the View Transitions API. It creates a global middleware that runs on client-side navigation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware(to => {\n  if (import.meta.server || !document.startViewTransition) { return }\n\n  // Disable built-in Vue transitions\n  to.meta.pageTransition = false\n  to.meta.layoutTransition = false\n})\n```\n\n----------------------------------------\n\nTITLE: Typing App Config Input in TypeScript\nDESCRIPTION: This TypeScript declaration file extends the AppConfigInput interface to add typing for theme configuration options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'nuxt/schema' {\n  interface AppConfigInput {\n    /** Theme configuration */\n    theme?: {\n      /** Primary app color */\n      primaryColor?: string\n    }\n  }\n}\n\n// It is always important to ensure you import/export something when augmenting a type\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Programmatic Navigation Migration\nDESCRIPTION: Shows the transition from Nuxt 2's router-based navigation to Nuxt 3's navigateTo utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/6.pages-and-layouts.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  methods: {\n    navigate(){\n      this.$router.push({\n        path: '/search',\n        query: {\n          name: 'first name',\n          type: '1'\n        }\n      })\n    }\n  }\n}\n</script>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nfunction navigate(){\n  return navigateTo({\n    path: '/search',\n    query: {\n      name: 'first name',\n      type: '1'\n    }\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Nuxt Module with API Route\nDESCRIPTION: This snippet demonstrates how to define a local Nuxt module that adds a server API route. It uses the nuxt/kit helper functions to create a resolver and register a server handler at the /api/hello endpoint.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.modules.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// `nuxt/kit` is a helper subpath import you can use when defining local modules\n// that means you do not need to add `@nuxt/kit` to your project's dependencies\nimport { createResolver, defineNuxtModule, addServerHandler } from 'nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'hello'\n  },\n  setup () {\n    const resolver = createResolver(import.meta.url)\n\n    // Add an API route\n    addServerHandler({\n      route: '/api/hello',\n      handler: resolver.resolve('./runtime/api-route')\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Title Template with useHead\nDESCRIPTION: Shows how to use the titleTemplate option in useHead to provide a dynamic template for customizing the title of your site. This example uses a function to generate the title.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  titleTemplate: (titleChunk) => {\n    return titleChunk ? `${titleChunk} - Site Title` : 'Site Title';\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining addPluginTemplate Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the addPluginTemplate function and its associated interfaces. It specifies the function signature, plugin template object structure, and options for adding plugin templates.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/9.plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addPluginTemplate (pluginOptions: NuxtPluginTemplate, options: AddPluginOptions): NuxtPlugin\n\ninterface NuxtPluginTemplate<Options = Record<string, any>> {\n  src?: string,\n  filename?: string,\n  dst?: string,\n  mode?: 'all' | 'server' | 'client',\n  options?: Options,\n  getContents?: (data: Options) => string | Promise<string>,\n  write?: boolean,\n  order?: number\n}\n\ninterface AddPluginOptions { append?: boolean }\n\ninterface NuxtPlugin {\n  src: string\n  mode?: 'all' | 'server' | 'client'\n  order?: number\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dedicated Composable for useAsyncData\nDESCRIPTION: Example of extracting useAsyncData calls with the same key into a dedicated composable function to avoid inconsistent options warnings.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useUserData(userId: string) {\n  return useAsyncData(\n    `user-${userId}`,\n    () => fetchUser(userId),\n    { \n      deep: true,\n      transform: (user) => ({ ...user, lastAccessed: new Date() })\n    }\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom .env File with Nuxt CLI\nDESCRIPTION: Demonstrates how to use a custom environment file (like .env.local or .env.production) using the --dotenv flag with nuxi command.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.env.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi dev --dotenv .env.local\n```\n\n----------------------------------------\n\nTITLE: Using Head Components for Template-Based Meta Tag Definition\nDESCRIPTION: Demonstrates the use of Nuxt-provided components for defining head tags in the template. This example uses the Title, Meta, and Style components to set the page title, description, and add a style tag.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst title = ref('Hello World')\n</script>\n\n<template>\n  <div>\n    <Head>\n      <Title>{{ title }}</Title>\n      <Meta name=\"description\" :content=\"title\" />\n      <Style>\n      body { background-color: green; }\n      </Style>\n    </Head>\n\n    <h1>{{ title }}</h1>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with NuxtErrorBoundary Event in Vue\nDESCRIPTION: Example of using the @error event to handle errors in the NuxtErrorBoundary component. This allows for custom error logging or handling when errors occur in the default slot.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/6.nuxt-error-boundary.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtErrorBoundary @error=\"logSomeError\">\n    <!-- ... -->\n  </NuxtErrorBoundary>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Middleware at Build Time with pages:extend Hook\nDESCRIPTION: This configuration shows how to programmatically apply middleware to pages at build time using the pages:extend hook in nuxt.config.ts, which can conditionally apply middleware based on custom logic.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NuxtPage } from 'nuxt/schema'\n\nexport default defineNuxtConfig({\n  hooks: {\n    'pages:extend' (pages) {\n      function setMiddleware (pages: NuxtPage[]) {\n        for (const page of pages) {\n          if (/* some condition */ true) {\n            page.meta ||= {}\n            // Note that this will override any middleware set in `definePageMeta` in the page\n            page.meta.middleware = ['named']\n          }\n          if (page.children) {\n            setMiddleware(page.children)\n          }\n        }\n      }\n      setMiddleware(pages)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing App Configuration with useAppConfig in Nuxt\nDESCRIPTION: This snippet demonstrates how to use the useAppConfig composable function to access the reactive app configuration in a Nuxt project. The function returns an object containing all the app configuration which can then be used or logged.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst appConfig = useAppConfig()\n\nconsole.log(appConfig)\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata with definePageMeta\nDESCRIPTION: Using the definePageMeta macro to define custom metadata for a page that can be accessed through the route.meta object.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  title: 'My home page'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using clearError Composable in Nuxt.js\nDESCRIPTION: Demonstrates how to use the clearError composable to clear error states in a Nuxt application. The function accepts an optional options object with a redirect parameter to navigate users to a different page after clearing errors.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/clear-error.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Without redirect\nclearError()\n\n// With redirect\nclearError({ redirect: '/homepage' })\n```\n\n----------------------------------------\n\nTITLE: Using abortNavigation in Route Middleware\nDESCRIPTION: Example of using abortNavigation in a route middleware to prevent unauthorized route access. It checks if the user is authorized and aborts navigation if not, otherwise redirects to a specific page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/abort-navigation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  const user = useState('user')\n\n  if (!user.value.isAuthorized) {\n    return abortNavigation()\n  }\n\n  if (to.path !== '/edit-post') {\n    return navigateTo('/edit-post')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring App Layout with NuxtPage Component\nDESCRIPTION: Using app.vue to create a layout that's shared across all pages. The NuxtPage component renders the current page based on the route.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- Markup shared across all pages, ex: NavBar -->\n    <NuxtPage />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useLazyAsyncData in a Vue component with loading state management\nDESCRIPTION: This example demonstrates how to use useLazyAsyncData in a Nuxt page component. It shows fetching data from an API endpoint while allowing navigation to continue, implementing a loading state display, and watching for data changes since the initial value might be null.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-lazy-async-data.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n/* Navigation will occur before fetching is complete.\n  Handle 'pending' and 'error' states directly within your component's template\n*/\nconst { status, data: count } = await useLazyAsyncData('count', () => $fetch('/api/count'))\n\nwatch(count, (newCount) => {\n  // Because count might start out null, you won't have access\n  // to its contents immediately, but you can watch it.\n})\n</script>\n\n<template>\n  <div>\n    {{ status === 'pending' ? 'Loading' : count }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Calling a POST API with Body from a Vue Component\nDESCRIPTION: Demonstrates how to call a POST endpoint with a request body from a Vue component using the $fetch utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nasync function submit() {\n  const { body } = await $fetch('/api/submit', {\n    method: 'post',\n    body: { test: 123 }\n  })\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Layout Transitions and Slots\nDESCRIPTION: Examples of implementing layout transitions and named slots in NuxtLayout\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/3.nuxt-layout.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtLayout name=\"custom\">\n      <template #header> Some header template content. </template>\n    </NuxtLayout>\n  </div>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- named slot -->\n    <slot name=\"header\" />\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Styles in Vue Components\nDESCRIPTION: Demonstrates how to use scoped styles to isolate component styling using the scoped attribute in Vue components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"example\">hi</div>\n</template>\n\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using asyncData with defineNuxtComponent in Vue\nDESCRIPTION: Example showing how to implement asyncData method within a component definition using defineNuxtComponent. This approach is useful when not using script setup syntax.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-nuxt-component.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nexport default defineNuxtComponent({\n  async asyncData() {\n    return {\n      data: {\n        greetings: 'hello world!'\n      }\n    }\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Nuxt App Template Structure\nDESCRIPTION: Demonstrates the basic template structure using auto-imported components in app.vue.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div>\n    <AppHeader />\n    <NuxtPage />\n    <AppFooter />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Extending Auto-generated TypeScript Configuration in Nuxt\nDESCRIPTION: Basic tsconfig.json configuration for a Nuxt project that extends the auto-generated TypeScript configuration. This approach allows you to benefit from Nuxt's sensible defaults while still being able to customize as needed.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.tsconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./.nuxt/tsconfig.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for navigateTo (TypeScript)\nDESCRIPTION: Provides the TypeScript type definition for the navigateTo function and its associated interfaces, including NavigateToOptions and OpenOptions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/navigate-to.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction navigateTo(\n  to: RouteLocationRaw | undefined | null,\n  options?: NavigateToOptions\n) => Promise<void | NavigationFailure | false> | false | void | RouteLocationRaw \n\ninterface NavigateToOptions {\n  replace?: boolean\n  redirectCode?: number\n  external?: boolean\n  open?: OpenOptions\n}\n\ntype OpenOptions = {\n  target: string\n  windowFeatures?: OpenWindowFeatures\n}\n\ntype OpenWindowFeatures = {\n  popup?: boolean\n  noopener?: boolean\n  noreferrer?: boolean\n} & XOR<{ width?: number }, { innerWidth?: number }>\n  & XOR<{ height?: number }, { innerHeight?: number }>\n  & XOR<{ left?: number }, { screenX?: number }>\n  & XOR<{ top?: number }, { screenY?: number }>\n```\n\n----------------------------------------\n\nTITLE: Registering NPM Package Components for Auto-Import in Nuxt\nDESCRIPTION: This snippet shows how to auto-import components from an npm package using a local Nuxt module. It uses the addComponent function from @nuxt/kit to register external components for auto-importing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addComponent, defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    // import { MyComponent as MyAutoImportedComponent } from 'my-npm-package'\n    addComponent({\n      name: 'MyAutoImportedComponent',\n      export: 'MyComponent',\n      filePath: 'my-npm-package',\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Headers in Nuxt\nDESCRIPTION: Use the useRequestHeaders composable to access incoming request headers. You can retrieve all headers or specify only certain ones to return. Note that this will return an empty object in browser context.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-headers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get all request headers\nconst headers = useRequestHeaders()\n\n// Get only cookie request header\nconst headers = useRequestHeaders(['cookie'])\n```\n\n----------------------------------------\n\nTITLE: State Hydration Using useHydration Composable\nDESCRIPTION: Simplified implementation of state hydration using the useHydration composable, demonstrating cleaner code structure.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-hydration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  const myStore = new MyStore()\n\n  useHydration(\n    'myStoreState', \n    () => myStore.getState(), \n    (data) => myStore.setState(data)\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Dynamic Styling Example\nDESCRIPTION: Demonstrates Vue's dynamic styling capabilities with v-bind in style blocks\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst color = ref(\"red\")\n</script>\n\n<template>\n  <div class=\"text\">hello</div>\n</template>\n\n<style>\n.text {\n  color: v-bind(color);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating Default Head Tags in Nuxt Config\nDESCRIPTION: Shows how to override the default head tags provided by Nuxt, such as charset and viewport, using the app.head property in nuxt.config.ts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    head: {\n      // update Nuxt defaults\n      charset: 'utf-16',\n      viewport: 'width=device-width, initial-scale=1, maximum-scale=1',\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Vue-gtag in Nuxt\nDESCRIPTION: Shows how to use a Nuxt plugin to integrate the vue-gtag library for Google Analytics.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport VueGtag, { trackRouter } from 'vue-gtag-next'\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.vueApp.use(VueGtag, {\n    property: {\n      id: 'GA_MEASUREMENT_ID'\n    }\n  })\n  trackRouter(useRouter())\n})\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Values with useSeoMeta in Nuxt\nDESCRIPTION: Shows how to use reactive values with the useSeoMeta composable by utilizing computed getter syntax to ensure SEO meta tags update when reactive data changes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-seo-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst title = ref('My title')\n\nuseSeoMeta({\n  title,\n  description: () => `This is a description for the ${title.value} page`\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Error Handler Plugin Implementation\nDESCRIPTION: Basic plugin setup for handling Vue errors using the vue:error hook in Nuxt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/12.error-handling.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  nuxtApp.hook('vue:error', (err) => {\n    //\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Runtime Config\nDESCRIPTION: Example of manually typing runtime config by augmenting the Nuxt schema. This demonstrates how to add type definitions for both private and public runtime config properties.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module 'nuxt/schema' {\n  interface RuntimeConfig {\n    apiSecret: string\n  }\n  interface PublicRuntimeConfig {\n    apiBase: string\n  }\n}\n// It is always important to ensure you import/export something when augmenting a type\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Watch for useCookie in Vue Component\nDESCRIPTION: Example showing how to use useCookie with watch option set to false. This prevents the cookie from being updated when nested properties of the cookie value are changed.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-cookie.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst user = useCookie(\n  'userInfo',\n  {\n    default: () => ({ score: -1 }),\n    watch: false\n  }\n)\n\nif (user.value && user.value !== null) {\n  user.value.score++; // userInfo cookie not update with this change\n}\n</script>\n\n<template>\n  <div>User score: {{ user?.score }}</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using runWithContext in Nuxt Middleware\nDESCRIPTION: Shows how to use the runWithContext method to ensure proper Nuxt context is applied when calling functions in complex async scenarios within middleware.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware(async (to, from) => {\n  const nuxtApp = useNuxtApp()\n  let user\n  try {\n    user = await fetchUser()\n    // the Vue/Nuxt compiler loses context here because of the try/catch block.\n  } catch (e) {\n    user = null\n  }\n  if (!user) {\n    // apply the correct Nuxt context to our `navigateTo` call.\n    return nuxtApp.runWithContext(() => navigateTo('/auth'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Module Options to Runtime Configuration\nDESCRIPTION: This snippet shows how to expose module options to the runtime environment using Nuxt's runtimeConfig. It uses defu to extend the existing runtime configuration instead of overwriting it.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\nimport { defu } from 'defu'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    nuxt.options.runtimeConfig.public.myModule = defu(nuxt.options.runtimeConfig.public.myModule, {\n      foo: options.foo\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Securing API Routes with Authentication Check\nDESCRIPTION: Server-side middleware that protects API routes by requiring a valid user session. This example demonstrates how to use the requireUserSession utility to ensure only authenticated users can access protected endpoints.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async (event) => {\n  // make sure the user is logged in\n  // This will throw a 401 error if the request doesn't come from a valid user session\n  const { user } = await requireUserSession(event)\n\n  // TODO: Fetch some stats based on the user\n\n  return {}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Layer Sources in Nuxt Configuration\nDESCRIPTION: Example of extending a Nuxt application from multiple layer sources including local directories, npm packages, and git repositories using the extends property in nuxt.config.ts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/14.layers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    '../base',                     // Extend from a local layer\n    '@my-themes/awesome',          // Extend from an installed npm package\n    'github:my-themes/awesome#v1', // Extend from a git repository\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Export Utility in shared/utils Directory\nDESCRIPTION: Shows how to create a reusable string capitalization function as a default export in the shared/utils directory. This function will be auto-imported in both the Vue app and Nitro server.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.shared.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function (input: string) {\n  return input[0] ? input[0].toUpperCase() + input.slice(1) : ''\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Named Route Middleware in Nuxt Plugin\nDESCRIPTION: Example showing how to define a named route middleware within a Nuxt plugin. This will override any existing middleware with the same name in the middleware/ directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/add-route-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(() => {\n  addRouteMiddleware('named-middleware', () => {\n    console.log('named middleware added in Nuxt plugin')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Index Page with TSX Render Function\nDESCRIPTION: Creating an index page using TSX syntax with a render function, combining TypeScript with JSX for template rendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// https://nuxt.com/docs/examples/advanced/jsx\n// https://vuejs.org/guide/extras/render-function.html#jsx-tsx\nexport default defineComponent({\n  render () {\n    return <h1>Index page</h1>\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Layout on Per-page Basis in Nuxt.js\nDESCRIPTION: This snippet shows how to override a layout on a per-page basis by setting layout to false and using the NuxtLayout component within the page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  layout: false,\n})\n</script>\n\n<template>\n  <div>\n    <NuxtLayout name=\"custom\">\n      <template #header> Some header template content. </template>\n\n      The rest of the page\n    </NuxtLayout>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Config for Redis in Nuxt.js\nDESCRIPTION: Configuration for setting up Redis connection parameters as runtime config in a Nuxt application. This allows the Redis connection details to be provided at runtime or through environment variables.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    redis: { // Default values\n      host: '',\n      port: 0,\n      /* other redis connector options */\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Meta Components for Meta Tags in Nuxt 3\nDESCRIPTION: This snippet shows how to use Nuxt 3's meta components to set meta tags declaratively in the template. It sets the title and description meta tags using the Title and Meta components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/4.meta.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Head>\n      <Title>My App</Title>\n      <Meta name=\"description\" content=\"My app description\"/>\n    </Head>\n    <!-- -->\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Nuxt Plugin\nDESCRIPTION: Example of accessing runtime config within a Nuxt plugin using the useRuntimeConfig composable inside the defineNuxtPlugin function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  const config = useRuntimeConfig()\n\n  console.log('API base URL:', config.public.apiBase)\n});\n```\n\n----------------------------------------\n\nTITLE: Shallow Watch with useCookie in Vue Component\nDESCRIPTION: Example demonstrating the 'shallow' watch option with useCookie, where only top-level property changes trigger cookie updates. This requires manual handling for nested property changes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-cookie.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst list = useCookie(\n  'list',\n  {\n    default: () => [],\n    watch: 'shallow'\n  }\n)\n\nfunction add() {\n  list.value?.push(Math.round(Math.random() * 1000))\n  // list cookie not update with this change\n}\n\nfunction save() {\n  if (list.value && list.value !== null) {\n    list.value = [...list.value]\n    // list cookie update with this change\n  }\n}\n</script>\n\n<template>\n  <div>\n    <h1>List</h1>\n    <pre>{{ list }}</pre>\n    <button @click=\"add\">Add</button>\n    <button @click=\"save\">Save</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Config in Nuxt Configuration\nDESCRIPTION: Example of defining runtime configuration in nuxt.config.ts. This demonstrates setting private server-side keys and public keys that will be available on both server and client sides.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    // The private keys which are only available within server-side\n    apiSecret: '123',\n    // Keys within public, will be also exposed to the client-side\n    public: {\n      apiBase: '/api'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Exposing Public Assets in a Nuxt Module\nDESCRIPTION: This snippet shows how to expose a folder of public assets through Nitro's publicAssets configuration in a Nuxt module. It uses the nitro:config hook to modify the Nitro configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    nuxt.hook('nitro:config', async (nitroConfig) => {\n      nitroConfig.publicAssets ||= []\n      nitroConfig.publicAssets.push({\n        dir: resolver.resolve('./runtime/public'),\n        maxAge: 60 * 60 * 24 * 365 // 1 year\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Head Tags in Nuxt Config\nDESCRIPTION: Demonstrates how to statically customize the head for the entire app using the app.head property in nuxt.config.ts. This method is suitable for setting tags that won't change, such as default site title, language, and favicon.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    head: {\n      title: 'Nuxt', // default fallback title\n      htmlAttrs: {\n        lang: 'en',\n      },\n      link: [\n        { rel: 'icon', type: 'image/x-icon', href: '/favicon.ico' },\n      ]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Transitions Based on Route Parameters\nDESCRIPTION: Creating dynamic transitions that change based on route parameters using middleware within definePageMeta. This example shows different slide animations depending on whether the user is navigating to a higher or lower ID.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  pageTransition: {\n    name: 'slide-right',\n    mode: 'out-in'\n  },\n  middleware (to, from) {\n    if (to.meta.pageTransition && typeof to.meta.pageTransition !== 'boolean')\n      to.meta.pageTransition.name = +to.params.id! > +from.params.id! ? 'slide-left' : 'slide-right'\n  }\n})\n</script>\n\n<template>\n  <h1>#{{ $route.params.id }}</h1>\n</template>\n\n<style>\n.slide-left-enter-active,\n.slide-left-leave-active,\n.slide-right-enter-active,\n.slide-right-leave-active {\n  transition: all 0.2s;\n}\n.slide-left-enter-from {\n  opacity: 0;\n  transform: translate(50px, 0);\n}\n.slide-left-leave-to {\n  opacity: 0;\n  transform: translate(-50px, 0);\n}\n.slide-right-enter-from {\n  opacity: 0;\n  transform: translate(-50px, 0);\n}\n.slide-right-leave-to {\n  opacity: 0;\n  transform: translate(50px, 0);\n}\n</style>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst id = computed(() => Number(route.params.id || 1))\nconst prev = computed(() => '/' + (id.value - 1))\nconst next = computed(() => '/' + (id.value + 1))\n</script>\n\n<template>\n  <div>\n    <slot />\n    <div v-if=\"$route.params.id\">\n      <NuxtLink :to=\"prev\">⬅️</NuxtLink> |\n      <NuxtLink :to=\"next\">➡️</NuxtLink>\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Auto-imported Composable in Vue Component\nDESCRIPTION: Example of using an auto-imported composable within a Vue component with TypeScript setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst foo = useFoo()\n</script>\n\n<template>\n  <div>\n    {{ foo }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Layout Implementation\nDESCRIPTION: Example showing how to use a custom layout with the name prop in a page component\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/3.nuxt-layout.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// layouts/custom.vue\nconst layout = 'custom'\n</script>\n\n<template>\n  <NuxtLayout :name=\"layout\">\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Key Implementation\nDESCRIPTION: Shows how to use a dynamic page key based on the current route's full path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/2.nuxt-page.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<NuxtPage :page-key=\"route => route.fullPath\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing useHeadSafe with XSS Prevention\nDESCRIPTION: Example showing how useHeadSafe prevents potentially dangerous head content by sanitizing script and meta tags.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-head-safe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuseHeadSafe({\n  script: [\n    { id: 'xss-script', innerHTML: 'alert(\"xss\")' }\n  ],\n  meta: [\n    { 'http-equiv': 'refresh', content: '0;javascript:alert(1)' }\n  ]\n})\n// Will safely generate\n// <script id=\"xss-script\"></script>\n// <meta content=\"0;javascript:alert(1)\">\n```\n\n----------------------------------------\n\nTITLE: Setting Response Header in Nuxt Middleware\nDESCRIPTION: Implementation of response header setting in Nuxt middleware to apply headers across all pages using defineNuxtRouteMiddleware.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-response-header.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  const header = useResponseHeader('X-My-Always-Header');\n  header.value = `I'm Always here!`;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Pinia store in Nuxt 3\nDESCRIPTION: Define a Pinia store for state management in Nuxt 3 applications.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineStore } from 'pinia'\n\nexport const useMainStore = defineStore('main', {\n  state: () => ({\n    counter: 0,\n  }),\n  actions: {\n    increment() {\n      // `this` is the store instance\n      this.counter++\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Virtual Files in Nuxt Module\nDESCRIPTION: Demonstrates how to add virtual files to a Nuxt application using addTemplate utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addTemplate } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    // The file is added to Nuxt's internal virtual file system and can be imported from '#build/my-module-feature.mjs'\n    addTemplate({\n      filename: 'my-module-feature.mjs',\n      getContents: () => 'export const myModuleFeature = () => \"hello world !\"'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Index Page in Vue\nDESCRIPTION: A simple Vue template for an index page that displays a heading. This file will be mapped to the root route (/) of the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>Index page</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Route Rules Type Definitions\nDESCRIPTION: Type definitions for extendRouteRules function and related interfaces for configuring Nitro route behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/7.pages.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extendRouteRules (route: string, rule: NitroRouteConfig, options: ExtendRouteRulesOptions): void\n\ninterface NitroRouteConfig {\n  cache?: CacheOptions | false;\n  headers?: Record<string, string>;\n  redirect?: string | { to: string; statusCode?: HTTPStatusCode };\n  prerender?: boolean;\n  proxy?: string | ({ to: string } & ProxyOptions);\n  isr?: number | boolean;\n  cors?: boolean;\n  swr?: boolean | number;\n  static?: boolean | number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Server Directory\nDESCRIPTION: Shows how to set up a separate tsconfig.json for the server directory to improve type clarity between Nitro and Vue auto-imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP GET Method Handler in Nuxt\nDESCRIPTION: Shows how to create an API endpoint that specifically handles GET requests using the .get suffix in the filename.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler(() => 'Test get handler')\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Configuration in app.config.ts\nDESCRIPTION: This example shows how to define a theme configuration with a primary color in the app.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  theme: {\n    primaryColor: '#ababab'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Catch-all Route Handler\nDESCRIPTION: Demonstrates how to implement a catch-all route handler using [...] syntax to handle any unmatched routes in a specific path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  // event.context.path to get the route path: '/api/foo/bar/baz'\n  // event.context.params._ to get the route segment: 'bar/baz'\n  return `Default foo handler`\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugins in Nuxt 2 and Nuxt 3\nDESCRIPTION: Demonstrates the difference in plugin implementation between Nuxt 2 and Nuxt 3. Nuxt 3 uses the defineNuxtPlugin helper and provides two ways to inject functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/5.plugins-and-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default (ctx, inject) => {\n  inject('injected', () => 'my injected function')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  // now available on `nuxtApp.$injected`\n  nuxtApp.provide('injected', () => 'my injected function')\n\n  // You can alternatively use this format, which comes with automatic type support\n  return {\n    provide: {\n      injected: () => 'my injected function'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Route Metadata in Layout\nDESCRIPTION: Shows how to use the route's metadata set by definePageMeta in a layout file to dynamically set head tags.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\n\nuseHead({\n  meta: [{ property: 'og:title', content: `App Name - ${route.meta.title}` }]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Updating App Configuration at Runtime in Vue\nDESCRIPTION: This Vue component shows how to update the app configuration at runtime using the updateAppConfig utility function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst appConfig = useAppConfig() // { foo: 'bar' }\n\nconst newAppConfig = { foo: 'baz' }\n\nupdateAppConfig(newAppConfig)\n\nconsole.log(appConfig) // { foo: 'baz' }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Response Header in TypeScript\nDESCRIPTION: Basic example of setting a custom response header using the useResponseHeader composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-response-header.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the a custom response header\nconst header = useResponseHeader('X-My-Header');\nheader.value = 'my-value';\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature for defineNuxtLink\nDESCRIPTION: This code shows the TypeScript interface for NuxtLinkOptions and the function signature for defineNuxtLink. It outlines all the configuration options available when creating a custom link component, including styling classes and prefetching behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NuxtLinkOptions {\n  componentName?: string;\n  externalRelAttribute?: string;\n  activeClass?: string;\n  exactActiveClass?: string;\n  trailingSlash?: 'append' | 'remove'\n  prefetch?: boolean\n  prefetchedClass?: string\n  prefetchOn?: Partial<{\n    visibility: boolean\n    interaction: boolean\n  }>\n}\nfunction defineNuxtLink(options: NuxtLinkOptions): Component {}\n```\n\n----------------------------------------\n\nTITLE: Counter Example with useCookie in Vue Component\nDESCRIPTION: Example of a Vue component using useCookie to create and manipulate a persistent counter. The cookie initializes with a random value if it doesn't exist and provides UI controls to manipulate the counter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-cookie.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst counter = useCookie('counter')\n\ncounter.value = counter.value || Math.round(Math.random() * 1000)\n</script>\n\n<template>\n  <div>\n    <h1>Counter: {{ counter || '-' }}</h1>\n    <button @click=\"counter = null\">reset</button>\n    <button @click=\"counter--\">-</button>\n    <button @click=\"counter++\">+</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Analytics with onNuxtReady in TypeScript\nDESCRIPTION: Demonstrates how to use onNuxtReady within a Nuxt plugin to lazily load and initialize analytics after the application is ready. This pattern is ideal for non-critical functionality that shouldn't impact initial page load performance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/on-nuxt-ready.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(() => {\n  onNuxtReady(async () => {\n    const myAnalyticsLibrary = await import('my-big-analytics-library')\n    // do something with myAnalyticsLibrary\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Named Export Composable in Nuxt\nDESCRIPTION: Demonstrates how to create a composable using named export syntax that returns a useState hook.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useFoo = () => {\n  return useState('foo', () => 'bar')\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Hydration State in Component\nDESCRIPTION: Illustrates how to use the isHydrating property of nuxtApp to check if the Nuxt application is currently hydrating on the client side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineComponent({\n  setup (_props, { slots, emit }) {\n    const nuxtApp = useNuxtApp()\n    onErrorCaptured((err) => {\n      if (import.meta.client && !nuxtApp.isHydrating) {\n        // ...\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Server API Handler\nDESCRIPTION: Shows how to use useRuntimeConfig in a Nuxt server API handler to access configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const config = useRuntimeConfig(event)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing NuxtApp in Composables\nDESCRIPTION: Demonstrates how to access the nuxtApp instance within a composable function using useNuxtApp()\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/6.nuxt-app.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useMyComposable () {\n  const nuxtApp = useNuxtApp()\n  // access runtime nuxt app instance\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing All AsyncData Instances in Vue Component\nDESCRIPTION: Example Vue component showing how to refresh all asyncData instances by calling refreshNuxtData() without parameters. The example includes handling loading state during refresh.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/refresh-nuxt-data.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst refreshing = ref(false)\n\nasync function refreshAll () {\n  refreshing.value = true\n  try {\n    await refreshNuxtData()\n  } finally {\n    refreshing.value = false\n  }\n}\n</script>\n\n<template>\n  <div>\n    <button :disabled=\"refreshing\" @click=\"refreshAll\">\n      Refetch All Data\n    </button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Nitro Preset in Nuxt Configuration\nDESCRIPTION: Nuxt configuration to explicitly set the Nitro preset for deployment. This example sets the preset to 'node-server', which is suitable for Node.js server deployments.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/16.deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    preset: 'node-server'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic NuxtLayout Usage in Vue\nDESCRIPTION: Basic example of using NuxtLayout component in app.vue to implement the default layout\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/3.nuxt-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLayout>\n    some page content\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Page Transitions with definePageMeta\nDESCRIPTION: Implementing a custom page transition for a specific page using definePageMeta to override the global transition settings. Includes both the page component and the necessary CSS in app.vue.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  pageTransition: {\n    name: 'rotate'\n  }\n})\n</script>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtPage />\n</template>\n\n<style>\n/* ... */\n.rotate-enter-active,\n.rotate-leave-active {\n  transition: all 0.4s;\n}\n.rotate-enter-from,\n.rotate-leave-to {\n  opacity: 0;\n  transform: rotate3d(1, 1, 1, 15deg);\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using resolvePath in Nuxt Headless UI Module\nDESCRIPTION: Example showing how resolvePath is used in a Nuxt module to resolve component paths for Headless UI integration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/12.resolving.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// https://github.com/P4sca1/nuxt-headlessui\nimport { defineNuxtModule, resolvePath } from '@nuxt/kit'\nimport { join } from 'pathe'\n\nconst headlessComponents: ComponentGroup[] = [\n  {\n    relativePath: 'combobox/combobox.js',\n    chunkName: 'headlessui/combobox',\n    exports: [\n      'Combobox',\n      'ComboboxLabel',\n      'ComboboxButton',\n      'ComboboxInput',\n      'ComboboxOptions',\n      'ComboboxOption'\n    ]\n  },\n]\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'nuxt-headlessui',\n    configKey: 'headlessui',\n  },\n  defaults: {\n    prefix: 'Headless'\n  },\n  async setup (options) {\n    const entrypoint = await resolvePath('@headlessui/vue')\n    const root = join(entrypoint, '../components')\n\n    for (const group of headlessComponents) {\n      for (const e of group.exports) {\n        addComponent(\n          {\n            name: e,\n            export: e,\n            filePath: join(root, group.relativePath),\n            chunkName: group.chunkName,\n            mode: 'all'\n          }\n        )\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Calling Hooks Asynchronously\nDESCRIPTION: Demonstrates how to use the callHook method to asynchronously trigger a custom hook in the Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait nuxtApp.callHook('my-plugin:init')\n```\n\n----------------------------------------\n\nTITLE: Minimal Usage of app.vue in Nuxt\nDESCRIPTION: A basic example of app.vue when not using the pages directory. This setup is useful for simple applications or landing pages that don't require routing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>Hello World!</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: External Routing with NuxtLink in Vue\nDESCRIPTION: Demonstrates how to use the <NuxtLink> component for external routing to websites. The component automatically adds appropriate rel attributes for security and privacy.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink to=\"https://nuxtjs.org\">\n    Nuxt website\n  </NuxtLink>\n  <!-- <a href=\"https://nuxtjs.org\" rel=\"noopener noreferrer\">...</a> -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migrating from CommonJS to ESM Import Syntax\nDESCRIPTION: Examples of how to migrate from CommonJS require syntax to ESM import syntax, including handling of default exports in dynamic imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst myLib = require('my-lib')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport myLib from 'my-lib'\n// or\nconst myLib = await import('my-lib').then(lib => lib.default || lib)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Header in Vue Page Component\nDESCRIPTION: Example of setting a custom response header within a Vue page component, demonstrating integration with template and script setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-response-header.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// pages/test.vue\nconst header = useResponseHeader('X-My-Header');\nheader.value = 'my-value';\n</script>\n\n<template>\n  <h1>Test page with custom header</h1>\n  <p>The response from the server for this \"/test\" page will have a custom \"X-My-Header\" header.</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Storage Plugin in Nuxt Server\nDESCRIPTION: A server plugin that dynamically creates a Redis storage mount point using runtime configuration. It demonstrates how to integrate Redis storage at server initialization using the defineNitroPlugin function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport redisDriver from 'unstorage/drivers/redis'\n\nexport default defineNitroPlugin(() => {\n  const storage = useStorage()\n\n  // Dynamically pass in credentials from runtime configuration, or other sources\n  const driver = redisDriver({\n      base: 'redis',\n      host: useRuntimeConfig().redis.host,\n      port: useRuntimeConfig().redis.port,\n      /* other redis connector options */\n    })\n\n  // Mount driver\n  storage.mount('redis', driver)\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for PageMeta in Nuxt\nDESCRIPTION: Defines the TypeScript interface for the PageMeta object used in definePageMeta, including various properties for route configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-page-meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndefinePageMeta(meta: PageMeta) => void\n\ninterface PageMeta {\n  validate?: (route: RouteLocationNormalized) => boolean | Promise<boolean> | Partial<NuxtError> | Promise<Partial<NuxtError>>\n  redirect?: RouteRecordRedirectOption\n  name?: string\n  path?: string\n  props?: RouteRecordRaw['props']\n  alias?: string | string[]\n  pageTransition?: boolean | TransitionProps\n  layoutTransition?: boolean | TransitionProps\n  viewTransition?: boolean | 'always'\n  key?: false | string | ((route: RouteLocationNormalizedLoaded) => string)\n  keepalive?: boolean | KeepAliveProps\n  layout?: false | LayoutKey | Ref<LayoutKey> | ComputedRef<LayoutKey>\n  middleware?: MiddlewareKey | NavigationGuard | Array<MiddlewareKey | NavigationGuard>\n  scrollToTop?: boolean | ((to: RouteLocationNormalizedLoaded, from: RouteLocationNormalizedLoaded) => boolean)\n  [key: string]: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Route Rules in Vue Component\nDESCRIPTION: Example of using defineRouteRules directly in a Vue component to configure prerendering for a specific page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// Or set at the page level\ndefineRouteRules({\n  prerender: true,\n});\n</script>\n\n<template>\n  <div>\n    <h1>Homepage</h1>\n    <p>Pre-rendered at build time</p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling asyncContext in Nuxt Configuration\nDESCRIPTION: Enables native async context to be accessible for nested composables in Nuxt and Nitro, reducing the chance of 'Nuxt instance is unavailable' errors.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    asyncContext: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Page with Proper Single Root Element\nDESCRIPTION: Example of a correctly structured page with a single root element, which is required for route transitions to work properly.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- This page correctly has only one single root element -->\n    Page content\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Example Module Implementation with addTemplate\nDESCRIPTION: Example of using addTemplate in a Nuxt module to generate meta configuration file during build time.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addTemplate, defineNuxtModule } from '@nuxt/kit'\nimport { defu } from 'defu'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const globalMeta = defu(nuxt.options.app.head, {\n      charset: options.charset,\n      viewport: options.viewport\n    })\n\n    addTemplate({\n      filename: 'meta.config.mjs',\n      getContents: () => 'export default ' + JSON.stringify({ globalMeta, mixinKey: 'setup' })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom $api in Vue Component\nDESCRIPTION: This Vue component demonstrates how to use the custom $api fetcher with useAsyncData to fetch modules data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/3.custom-usefetch.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { $api } = useNuxtApp()\nconst { data: modules } = await useAsyncData('modules', () => $api('/modules'))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic NuxtLink Navigation Example\nDESCRIPTION: Shows how to use the NuxtLink component to navigate to the home page in a Nuxt application. NuxtLink is a built-in component for handling client-side navigation between pages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink to=\"/\">Home page</NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Environment Variable Definition in .env\nDESCRIPTION: Shows how to define a basic environment variable in a .env file that will be accessible during development, build and generate time.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.env.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nMY_ENV_VARIABLE=hello\n```\n\n----------------------------------------\n\nTITLE: Prefetching Components in Nuxt with TypeScript\nDESCRIPTION: Demonstrates how to use the prefetchComponents utility to manually prefetch individual or multiple globally registered components in a Nuxt application. The function accepts either a single component name or an array of component names as arguments.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/prefetch-components.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait prefetchComponents('MyGlobalComponent')\n\nawait prefetchComponents(['MyGlobalComponent1', 'MyGlobalComponent2'])\n```\n\n----------------------------------------\n\nTITLE: Migrating ssrRef to useState in Nuxt\nDESCRIPTION: Shows how to replace ssrRef and shallowSsrRef with the new useState composable, which requires a unique key parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/5.nuxt3-compatible-api.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { ssrRef } from '@nuxtjs/composition-api'\n\n- const ref1 = ssrRef('initialData')\n- const ref2 = ssrRef(() => 'factory function')\n+ const ref1 = useState('ref1-key', () => 'initialData')\n+ const ref2 = useState('ref2-key', () => 'factory function')\n  // accessing the state\n  console.log(ref1.value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite and Vue Options in Nuxt\nDESCRIPTION: This snippet demonstrates how to configure Vite and Vue-specific options within the Nuxt configuration file, including settings for @vitejs/plugin-vue and @vitejs/plugin-vue-jsx.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  vite: {\n    vue: {\n      customElement: true\n    },\n    vueJsx: {\n      mergeProps: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Nuxt Module Function\nDESCRIPTION: Example of a basic Nuxt module definition as a function, accepting inline options and a nuxt object. It demonstrates logging options and hooking into the 'ready' event.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function (inlineOptions, nuxt) {\n  // You can do whatever you like here..\n  console.log(inlineOptions.token) // `123`\n  console.log(nuxt.options.dev) // `true` or `false`\n  nuxt.hook('ready', async nuxt => {\n    console.log('Nuxt is ready')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Layout in Nuxt.js\nDESCRIPTION: This snippet demonstrates how to create a default layout file (default.vue) in the layouts directory. It includes a slot for page content and some shared content across all pages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <p>Some default layout content shared across all pages</p>\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Metadata Through Route Object\nDESCRIPTION: Accessing page metadata defined with definePageMeta through the route.meta object using the useRoute composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\n\nconsole.log(route.meta.title) // My home page\n</script>\n```\n\n----------------------------------------\n\nTITLE: Correct Runtime Config Usage\nDESCRIPTION: Example showing correct usage of useRuntimeConfig within a composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const useMyComposable = () => {\n  // Because your composable is called in the right place in the lifecycle,\n  // useRuntimeConfig will work here\n  const config = useRuntimeConfig()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Directory Imports with addImportsDir in TypeScript\nDESCRIPTION: Example demonstrating how to automatically import all files from a directory using addImportsDir within a Nuxt module setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/4.autoimports.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addImportsDir, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: '@vueuse/motion',\n    configKey: 'motion',\n  },\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n    addImportsDir(resolver.resolve('./runtime/composables'))\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Launching Nuxt Production Server in Node.js\nDESCRIPTION: Command to start the Nuxt production server using the output generated by the build process. This launches a Node.js server that listens on port 3000 by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/16.deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Direct Component Import Example\nDESCRIPTION: Demonstrates explicit component imports from #components instead of using auto-imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { NuxtLink, LazyMountainsList } from '#components'\n\nconst show = ref(false)\n</script>\n\n<template>\n  <div>\n    <h1>Mountains</h1>\n    <LazyMountainsList v-if=\"show\" />\n    <button v-if=\"!show\" @click=\"show = true\">Show List</button>\n    <NuxtLink to=\"/\">Home</NuxtLink>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Structured app.vue with Global Elements\nDESCRIPTION: An example of app.vue that includes global elements like header and footer surrounding the page content. These elements will appear on every page of the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <header>\n    Header content\n  </header>\n  <NuxtPage />\n  <footer>\n    Footer content\n  </footer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding a Client-Side Plugin in a Nuxt Module\nDESCRIPTION: This example demonstrates how to use addPlugin within a Nuxt module to add a client-side plugin. It uses createResolver to resolve the plugin path relative to the module file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/9.plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, addPlugin } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    const resolver = createResolver(import.meta.url)\n\n    addPlugin({\n      src: resolver.resolve('runtime/plugin.js'),\n      mode: 'client'\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Nuxt Runtime Config in TypeScript\nDESCRIPTION: The useRuntimeConfig function allows access to the resolved Nuxt runtime configuration at build-time. It returns a record with string keys and unknown values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.runtime-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRuntimeConfig (): Record<string, unknown>\n```\n\n----------------------------------------\n\nTITLE: Third-Party Package Auto-imports\nDESCRIPTION: Configuration example for enabling auto-imports from third-party packages like vue-i18n.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  imports: {\n    presets: [\n      {\n        from: 'vue-i18n',\n        imports: ['useI18n']\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Auto-imported Utilities in Server Endpoints\nDESCRIPTION: Demonstrates using auto-imported utilities from the shared directory in a Nitro server endpoint. The capitalize function is available without explicit imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.shared.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  return {\n    hello: capitalize('hello')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Page Transitions in Vue Components\nDESCRIPTION: A set of Vue components demonstrating basic page transitions implementation, including the main app.vue with transition styles and two example page components for navigation testing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtPage />\n</template>\n\n<style>\n.page-enter-active,\n.page-leave-active {\n  transition: all 0.4s;\n}\n.page-enter-from,\n.page-leave-to {\n  opacity: 0;\n  filter: blur(1rem);\n}\n</style>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>Home page</h1>\n    <NuxtLink to=\"/about\">About page</NuxtLink>\n  </div>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>About page</h1>\n    <NuxtLink to=\"/\">Home page</NuxtLink>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useLazyFetch Shorthand in Vue\nDESCRIPTION: Simplified example showing the useLazyFetch composable, which is a convenient wrapper around useFetch with the lazy option pre-enabled. This provides the same non-blocking behavior but with less configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { status, data: posts } = useLazyFetch('/api/posts')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using prerender:generate Nitro Hook for Route Control\nDESCRIPTION: Implementing the prerender:generate Nitro hook to have fine-grained control over each route during the prerendering process.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    hooks: {\n      \"prerender:generate\"(route) {\n        if (route.route?.includes(\"private\")) {\n          route.skip = true;\n        }\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Composables Usage in Nuxt\nDESCRIPTION: Demonstrates how to use one composable within another composable using auto-imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const useFoo = () => {\n  const nuxtApp = useNuxtApp()\n  const bar = useBar()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a component in a Nuxt layer\nDESCRIPTION: Demonstrates creating a Vue component within a layer that will be accessible to projects extending from the layer.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <h1>Extending Components is Fun!</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Cookies in Nuxt Server API\nDESCRIPTION: A server endpoint that parses and returns cookies from the incoming request. It uses defineEventHandler to create a server route that extracts cookies from the client request.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const cookies = parseCookies(event)\n\n  return { cookies }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating validate hook to definePageMeta in Nuxt 3\nDESCRIPTION: Demonstrates how to migrate the validate hook from Nuxt 2 to Nuxt 3 using the definePageMeta compiler macro. The validate function is used to validate route parameters before rendering the page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/7.component-options.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefinePageMeta({\n  validate: async (route) => {\n    const nuxtApp = useNuxtApp()\n    return /^\\d+$/.test(route.params.id)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Structure for Nuxt Components\nDESCRIPTION: Shows the basic directory structure for organizing Vue components in a Nuxt project.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| components/\n---| AppHeader.vue\n---| AppFooter.vue\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Vue Directive in Nuxt\nDESCRIPTION: Demonstrates how to register a custom Vue directive in a Nuxt plugin.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.vueApp.directive('focus', {\n    mounted (el) {\n      el.focus()\n    },\n    getSSRProps (binding, vnode) {\n      // you can provide SSR-specific props here\n      return {}\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Nuxt Environment in Vitest\nDESCRIPTION: Setting up Vitest configuration to use the Nuxt environment for all tests by default. This includes options for specifying the root directory and DOM environment.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\nimport { defineVitestConfig } from '@nuxt/test-utils/config'\n\nexport default defineVitestConfig({\n  test: {\n    environment: 'nuxt',\n    // you can optionally set Nuxt-specific environment options\n    // environmentOptions: {\n    //   nuxt: {\n    //     rootDir: fileURLToPath(new URL('./playground', import.meta.url)),\n    //     domEnvironment: 'happy-dom', // 'happy-dom' (default) or 'jsdom'\n    //     overrides: {\n    //       // other Nuxt config you want to pass\n    //     }\n    //   }\n    // }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin with Nuxt 3 Format\nDESCRIPTION: Demonstrates how to create a plugin using the new Nuxt 3 API format with nuxtApp parameter. The plugin injects a custom function that becomes available on nuxtApp.$injected.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/4.plugins-and-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtPlugin(nuxtApp => {\n  nuxtApp.provide('injected', () => 'my injected function')\n  // now available on `nuxtApp.$injected`\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies with Package Managers\nDESCRIPTION: Commands to install vue-tsc and typescript as development dependencies using different package managers.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/8.typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev vue-tsc typescript\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev vue-tsc typescript\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D vue-tsc typescript\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D vue-tsc typescript\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dark Mode Plugin in Nuxt\nDESCRIPTION: This snippet shows the implementation of a Nuxt plugin that sets the color mode preference to dark. It uses the defineNuxtPlugin function and hooks into the app:mounted lifecycle event.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/9.plugins.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// https://github.com/nuxt/nuxters\nexport default defineNuxtPlugin((nuxtApp) => {\n  const colorMode = useColorMode()\n\n  nuxtApp.hook('app:mounted', () => {\n    if (colorMode.preference !== 'dark') {\n      colorMode.preference = 'dark'\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Encryption Environment Variable\nDESCRIPTION: Environment variable setup for the cookie encryption key used by nuxt-auth-utils. The NUXT_SESSION_PASSWORD requires at least 32 characters for secure cookie encryption.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nNUXT_SESSION_PASSWORD=a-random-password-with-at-least-32-characters\n```\n\n----------------------------------------\n\nTITLE: Using mountSuspended for Component Testing\nDESCRIPTION: Example of using mountSuspended to test a Nuxt component. This helper allows mounting components with async setup and access to Nuxt plugin injections.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it, expect } from 'vitest'\nimport { mountSuspended } from '@nuxt/test-utils/runtime'\nimport { SomeComponent } from '#components'\n\nit('can mount some component', async () => {\n    const component = await mountSuspended(SomeComponent)\n    expect(component.text()).toMatchInlineSnapshot(\n        '\"This is an auto-imported component\"'\n    )\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Runtime Config in TypeScript\nDESCRIPTION: The updateRuntimeConfig function allows updating the runtime configuration. It merges the provided config with the existing one and triggers an HMR event to reload Nitro runtime config if initialized.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.runtime-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction updateRuntimeConfig (config: Record<string, unknown>): void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Server Imports Directory Configuration\nDESCRIPTION: Example of adding directories for Nitro auto-imports scanning\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, createResolver, addServerImportsDir } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'my-module',\n    configKey: 'myModule',\n  },\n  setup(options) {\n    const resolver = createResolver(import.meta.url)\n    addServerImportsDir(resolver.resolve('./runtime/server/utils'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining NuxtApp Interface Properties in JavaScript\nDESCRIPTION: This code snippet outlines the structure of the NuxtApp interface, including its properties such as vueApp, versions, hooks, ssrContext, and payload. It demonstrates the key components available in the runtime context of a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.internals.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst nuxtApp = {\n  vueApp, // the global Vue application: https://vuejs.org/api/application.html#application-api\n\n  versions, // an object containing Nuxt and Vue versions\n\n  // These let you call and add runtime NuxtApp hooks\n  // https://github.com/nuxt/nuxt/blob/main/packages/nuxt/src/app/nuxt.ts#L18\n  hooks,\n  hook,\n  callHook,\n\n  // Only accessible on server-side\n  ssrContext: {\n    url,\n    req,\n    res,\n    runtimeConfig,\n    noSSR,\n  },\n\n  // This will be stringified and passed from server to client\n  payload: {\n    serverRendered: true,\n    data: {},\n    state: {}\n  }\n\n  provide: (name: string, value: any) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling View Transitions API in Nuxt Configuration\nDESCRIPTION: This snippet shows how to enable the experimental View Transitions API in a Nuxt project by setting the viewTransition property in the experimental configuration object.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    viewTransition: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding View Transitions Setting for a Specific Page\nDESCRIPTION: This Vue component snippet shows how to use definePageMeta to override the default view transition setting for a specific page in a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  viewTransition: false\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin Template in a Nuxt Module for VueFire\nDESCRIPTION: This example demonstrates how to use addPluginTemplate within a Nuxt module to add a plugin template for VueFire. It uses createResolver to resolve the template path and passes options to the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/9.plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// https://github.com/vuejs/vuefire\nimport { createResolver, defineNuxtModule, addPluginTemplate } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    const resolver = createResolver(import.meta.url)\n\n    addPluginTemplate({\n      src: resolve(templatesDir, 'plugin.ejs'),\n      filename: 'plugin.mjs',\n      options: {\n        ...options,\n        ssr: nuxt.options.ssr,\n      },\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Catch-all Route\nDESCRIPTION: Implementing a catch-all route that matches all routes under a path and provides the route segments as an array in params.slug.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>{{ $route.params.slug }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Named Middleware in Vue Component with definePageMeta\nDESCRIPTION: This Vue component shows how to reference named middleware using the definePageMeta function, which connects the page with the specified middleware before navigation completes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: [\"auth\"]\n  // or middleware: 'auth'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a minimal Nuxt layer configuration\nDESCRIPTION: A minimal Nuxt layer requires a nuxt.config.ts file to indicate it's a layer. This example shows the simplest possible layer configuration file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({})\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxt Preview Command\nDESCRIPTION: Command syntax for starting a preview server for a Nuxt application. Includes optional parameters for customizing the working directory, log level, environment name, and port configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/preview.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi preview [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--envName] [--dotenv] [-p, --port]\n```\n\n----------------------------------------\n\nTITLE: Defining Page Types and Configuration in TypeScript\nDESCRIPTION: Type definitions for the extendPages function and NuxtPage interface, defining the structure for page configuration in Nuxt applications.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/7.pages.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extendPages (callback: (pages: NuxtPage[]) => void): void\n\ntype NuxtPage = {\n  name?: string\n  path: string\n  file?: string\n  meta?: Record<string, any>\n  alias?: string[] | string\n  redirect?: RouteLocationRaw\n  children?: NuxtPage[]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Server-side Code\nDESCRIPTION: Use useRuntimeConfig in server-side code to access both private and public runtime configuration values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/8.runtime-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventhandler((event) => {\n  const config = useRuntimeConfig(event)\n  // In server, you can now access config.apiSecret, in addition to config.public\n  console.log(config.apiSecret)\n  console.log(config.public.apiBase)\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Middleware Execution Based on Environment\nDESCRIPTION: This middleware implementation shows how to conditionally skip execution based on the rendering environment (server or client) and hydration state, which can prevent duplicate middleware execution.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware(to => {\n  // skip middleware on server\n  if (import.meta.server) return\n  // skip middleware on client side entirely\n  if (import.meta.client) return\n  // or only skip middleware on initial client load\n  const nuxtApp = useNuxtApp()\n  if (import.meta.client && nuxtApp.isHydrating && nuxtApp.payload.serverRendered) return\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Page Layout Definition in Vue\nDESCRIPTION: Demonstrates migration from traditional export default layout definition to using the new definePageMeta compiler macro.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/6.pages-and-layouts.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n[pages/index.vue]\n+ <script setup>\n+ definePageMeta({\n+   layout: 'custom'\n+ })\n- <script>\n- export default {\n-   layout: 'custom'\n- }\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Implementing DevOnly Component with Fallback in Vue\nDESCRIPTION: Demonstrates how to use the <DevOnly> component to conditionally render debug components during development while providing fallback content for production. The example shows usage with LazyDebugBar component and a fallback empty div.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.dev-only.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Sidebar />\n    <DevOnly>\n      <!-- this component will only be rendered during development -->\n      <LazyDebugBar />\n\n      <!-- if you ever require to have a replacement during production -->\n      <!-- be sure to test these using `nuxt preview` -->\n      <template #fallback>\n        <div><!-- empty div for flex.justify-between --></div>\n      </template>\n    </DevOnly>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining reloadNuxtApp Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the reloadNuxtApp function and the ReloadNuxtAppOptions interface. It specifies the function's parameters and the available options for customizing the reload behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/reload-nuxt-app.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreloadNuxtApp(options?: ReloadNuxtAppOptions)\n\ninterface ReloadNuxtAppOptions {\n  ttl?: number\n  force?: boolean\n  path?: string\n  persistState?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Importing defineNuxtConfig in TypeScript\nDESCRIPTION: This snippet shows how to explicitly import the defineNuxtConfig helper from 'nuxt/config' when defining a Nuxt configuration. This approach might be preferred for better code clarity or IDE support.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.nuxt-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt/config'\n\nexport default defineNuxtConfig({\n  // My Nuxt config\n})\n```\n\n----------------------------------------\n\nTITLE: Ordering Global Middleware with Numeric Prefixes\nDESCRIPTION: This bash snippet demonstrates how to control the execution order of global middleware by using numeric prefixes in filenames, ensuring they run in a specific sequence rather than alphabetically.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-| middleware/\n---| 01.setup.global.ts\n---| 02.analytics.global.ts\n---| auth.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Overrides in Nuxt\nDESCRIPTION: This code snippet shows how to set up environment-specific configuration overrides in the Nuxt config file. It includes production, development, and custom environment settings.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  $production: {\n    routeRules: {\n      '/**': { isr: true }\n    }\n  },\n  $development: {\n    //\n  },\n  $env: {\n    staging: {\n      // \n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxt Build Command\nDESCRIPTION: Command to build a Nuxt application for production. Creates a .output directory containing the application, server, and dependencies. Supports various options including working directory specification, log level control, static prerendering, and environment configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/build.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi build [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--prerender] [--preset] [--dotenv] [--envName]\n```\n\n----------------------------------------\n\nTITLE: Creating a Parallel Nuxt Plugin\nDESCRIPTION: Shows how to define a Nuxt plugin as parallel, allowing the next plugin to be executed immediately.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin({\n  name: 'my-plugin',\n  parallel: true,\n  async setup (nuxtApp) {\n    // the next plugin will be executed immediately\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Global Transitions for a Specific Page\nDESCRIPTION: Using definePageMeta to override the global transition settings for a specific page with a custom 'bounce' transition effect.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  pageTransition: {\n    name: 'bounce',\n    mode: 'out-in' // default\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Registering Mock Endpoints with registerEndpoint in TypeScript\nDESCRIPTION: Demonstrates how to use registerEndpoint to create Nitro endpoints that return mocked data. It covers both GET and POST methods for endpoint registration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerEndpoint } from '@nuxt/test-utils/runtime'\n\nregisterEndpoint('/test/', () => ({\n  test: 'test-field'\n}))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerEndpoint } from '@nuxt/test-utils/runtime'\n\nregisterEndpoint('/test/', {\n  method: 'POST',\n  handler: () => ({ test: 'test-field' })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Transpilation Using useNuxt\nDESCRIPTION: Example showing how to configure build transpilation options using the useNuxt utility in a Nuxt module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/6.context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxt } from '@nuxt/kit'\n\nexport const setupTranspilation = () => {\n  const nuxt = useNuxt()\n\n  nuxt.options.build.transpile = nuxt.options.build.transpile || []\n\n  if (nuxt.options.builder === '@nuxt/webpack-builder') {\n    nuxt.options.build.transpile.push(\n      'xstate',\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite plugins in nuxt.config.ts\nDESCRIPTION: Example of how to import and configure a Vite plugin (@rollup/plugin-yaml) in the Nuxt configuration file. This setup enables the use of YAML files directly in the project.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/2.vite-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport yaml from '@rollup/plugin-yaml'\n\nexport default defineNuxtConfig({\n  vite: {\n    plugins: [\n      yaml()\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Module Cleanup Implementation\nDESCRIPTION: Shows how to implement cleanup functionality in a Nuxt module using the close hook.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    nuxt.hook('close', async nuxt => {\n      // Your custom code here\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Refreshing Specific AsyncData Instances by Key in Vue Component\nDESCRIPTION: Example Vue component demonstrating how to refresh specific asyncData instances by providing an array of keys to refreshNuxtData(). The example refreshes only 'count' and 'user' data with loading state handling.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/refresh-nuxt-data.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst refreshing = ref(false)\n\nasync function refresh () {\n  refreshing.value = true\n  try {\n    // you could also pass an array of keys to refresh multiple data\n    await refreshNuxtData(['count', 'user'])\n  } finally {\n    refreshing.value = false\n  }\n}\n</script>\n\n<template>\n  <div v-if=\"refreshing\">\n    Loading\n  </div>\n  <button @click=\"refresh\">Refresh</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Teleport in Vue\nDESCRIPTION: Example showing how to implement client-side only teleportation using ClientOnly wrapper component. This approach is necessary when targeting DOM elements outside of #teleports selector.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/11.teleports.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ClientOnly>\n    <Teleport to=\"#some-selector\">\n      <!-- content -->\n    </Teleport>\n  </ClientOnly>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing CDN URL in Server API Handler\nDESCRIPTION: Shows how to access the CDN URL from the app namespace in a server API handler using useRuntimeConfig.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const config = useRuntimeConfig(event)\n\n  // Access cdnURL universally\n  const cdnURL = config.app.cdnURL\n})\n```\n\n----------------------------------------\n\nTITLE: Header and Cookie Handling Example\nDESCRIPTION: Demonstrates incorrect and correct ways to handle headers and cookies during SSR, showing both the frontend and API implementation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/$fetch.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// This will NOT forward headers or cookies during SSR\nconst { data } = await useAsyncData(() => $fetch('/api/cookies'))\n</script>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const foo = getCookie(event, 'foo')\n  // ... Do something with the cookie\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nuxt Layers in Configuration\nDESCRIPTION: Shows how to configure multiple pages directories using Nuxt Layers. This enables organizing app pages into separate directories with their own configurations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\n// some-app/nuxt.config.ts\nexport default defineNuxtConfig({\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: ['./some-app'],\n})\n```\n\n----------------------------------------\n\nTITLE: Linking to Static Files with NuxtLink in Vue\nDESCRIPTION: Demonstrates how to use the <NuxtLink> component with the 'external' prop to link to static files in the /public directory, bypassing Vue Router's internal routing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink to=\"/example-report.pdf\" external>\n    Download Report\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing NuxtLoadingIndicator in app.vue\nDESCRIPTION: Example of how to add the NuxtLoadingIndicator component to your app.vue file. This will display a progress bar during page navigation, providing visual feedback to users when content is loading.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/5.nuxt-loading-indicator.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLoadingIndicator />\n  <NuxtLayout>\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Up @vue/test-utils for Nuxt Unit Testing\nDESCRIPTION: Provides steps to set up @vue/test-utils for unit testing in Nuxt, including installing dependencies, configuring Vitest, and creating a sample test.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev vitest @vue/test-utils happy-dom @vitejs/plugin-vue\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vitest/config'\nimport vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [vue()],\n  test: {\n    environment: 'happy-dom',\n  },\n});\n```\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"build\": \"nuxt build\",\n  \"dev\": \"nuxt dev\",\n  ...\n  \"test\": \"vitest\"\n}\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p>Hello world</p>\n</template>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, it, expect } from 'vitest'\nimport { mount } from '@vue/test-utils'\n\nimport HelloWorld from './HelloWorld.vue'\n\ndescribe('HelloWorld', () => {\n  it('component renders Hello world properly', () => {\n    const wrapper = mount(HelloWorld)\n    expect(wrapper.text()).toContain('Hello world')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration Extension Example\nDESCRIPTION: Example showing how to extend webpack configuration to add support for .txt files using raw-loader.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, extendWebpackConfig } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    extendWebpackConfig((config) => {\n      config.module?.rules.push({\n        test: /\\.txt$/,\n        use: 'raw-loader'\n      })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Module for Component Library Registration\nDESCRIPTION: Defines a Nuxt module that registers components from a directory with a custom prefix. Uses createResolver to determine the path and addComponentsDir to register components with the 'awesome' prefix.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport { createResolver, defineNuxtModule, addComponentsDir } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    const resolver = createResolver(import.meta.url)\n\n    // Add ./components dir to the list\n    addComponentsDir({\n      path: resolver.resolve('./components'),\n      prefix: 'awesome',\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Nuxt.js Directory Structure for Layouts\nDESCRIPTION: This snippet shows the directory structure for Nuxt.js layouts, including the default and custom layout files.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-| layouts/\n---| default.vue\n---| custom.vue\n```\n\n----------------------------------------\n\nTITLE: Basic NuxtPage Component Structure\nDESCRIPTION: Shows the internal structure of the NuxtPage component including RouterView with optional Transition, KeepAlive, and Suspense components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/2.nuxt-page.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <RouterView #default=\"{ Component }\">\n    <!-- Optional, when using transitions -->\n    <Transition>\n      <!-- Optional, when using keep-alive -->\n      <KeepAlive>\n        <Suspense>\n          <component :is=\"Component\" />\n        </Suspense>\n      </KeepAlive>\n    </Transition>\n  </RouterView>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Page Key with definePageMeta\nDESCRIPTION: Using definePageMeta to define a key function for a page, which controls when the component re-renders during route transitions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  key: route => route.fullPath\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using prerenderRoutes to Add Routes at Runtime\nDESCRIPTION: Demonstration of using prerenderRoutes utility within a Vue component to dynamically add routes for prerendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nprerenderRoutes([\"/some/other/url\"]);\nprerenderRoutes(\"/api/content/article/my-article\");\n</script>\n\n<template>\n  <div>\n    <h1>This will register other routes for prerendering when prerendered</h1>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Layout in Vue\nDESCRIPTION: This snippet defines a default layout for a Nuxt application. It includes a header, footer, and a slot for page content.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <AppHeader />\n    <slot />\n    <AppFooter />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Imported Components in Vue Templates\nDESCRIPTION: This snippet demonstrates how to use auto-imported components in a Vue template. The component was registered using the addComponent utility and can be used directly without importing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!--  the component uses the name we specified and is auto-imported  -->\n    <MyAutoImportedComponent />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Auth Utils Module with CLI\nDESCRIPTION: Command to install the nuxt-auth-utils module using the nuxi CLI. This adds the module to your project dependencies and updates the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/4.sessions-and-authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add auth-utils\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Options in Nuxt Config File\nDESCRIPTION: This snippet shows how to configure router options directly in the nuxt.config file. This approach only allows JSON serializable options like linkActiveClass, linkExactActiveClass, end, sensitive, strict, hashMode, and scrollBehaviorType.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtConfig({\n  router: {\n    options: {}\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Nuxt Module\nDESCRIPTION: Shows how to implement lifecycle hooks in a Nuxt module both through the hooks map and programmatically using nuxt.hook().\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule, addPlugin, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  // Hook to the `app:error` hook through the `hooks` map\n  hooks: {\n    'app:error': (err) => {\n      console.info(`This error happened: ${err}`);\n    }\n  },\n  setup (options, nuxt) {\n    // Programmatically hook to the `pages:extend` hook\n    nuxt.hook('pages:extend', (pages) => {\n      console.info(`Discovered ${pages.length} pages`);\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Middleware in Nuxt 2 and Nuxt 3\nDESCRIPTION: Shows the difference in route middleware implementation between Nuxt 2 and Nuxt 3. Nuxt 3 uses the defineNuxtRouteMiddleware helper and useState for state management.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/5.plugins-and-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function ({ store, redirect }) {\n  // If the user is not authenticated\n  if (!store.state.authenticated) {\n    return redirect('/login')\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  const auth = useState('auth')\n  if (!auth.value.authenticated) {\n    return navigateTo('/login')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of definePageMeta in Vue\nDESCRIPTION: Shows advanced usage of definePageMeta, including setting a dynamic key, keepalive options, and custom metadata.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-page-meta.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  key: (route) => route.fullPath,\n\n  keepalive: {\n    exclude: ['modal']\n  },\n\n  pageType: 'Checkout'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Prefetching with NuxtLink in Vue\nDESCRIPTION: Demonstrates how to disable the default prefetching behavior of <NuxtLink> using the no-prefetch prop or by setting prefetch to false.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<NuxtLink to=\"/about\" no-prefetch>About page not pre-fetched</NuxtLink>\n<NuxtLink to=\"/about\" :prefetch=\"false\">About page not pre-fetched</NuxtLink>\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Programmatically Type Definition\nDESCRIPTION: Type definition for the buildNuxt function that handles bundling the application using either Vite or Webpack builders.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/2.programmatic.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function buildNuxt (nuxt: Nuxt): Promise<any>\n```\n\n----------------------------------------\n\nTITLE: Using Composables in Nuxt Plugins\nDESCRIPTION: Shows how to use composables within Nuxt plugins, with a note on limitations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  const foo = useFoo()\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Nuxt Error with useError Composable in TypeScript\nDESCRIPTION: Demonstrates how to use the useError composable to access the global Nuxt error that is being handled. This composable is available on both client and server side and creates a reactive, SSR-friendly global error state across components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-error.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst error = useError()\n```\n\n----------------------------------------\n\nTITLE: Generated Router Configuration from File-System Structure\nDESCRIPTION: Shows the JSON router configuration that Nuxt automatically generates based on the file-system structure. Note how [id].vue becomes a dynamic route parameter with :id syntax.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"routes\": [\n    {\n      \"path\": \"/about\",\n      \"component\": \"pages/about.vue\"\n    },\n    {\n      \"path\": \"/\",\n      \"component\": \"pages/index.vue\"\n    },\n    {\n      \"path\": \"/posts/:id\",\n      \"component\": \"pages/posts/[id].vue\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Entry Point in Vue\nDESCRIPTION: This snippet shows the basic structure of app.vue, which serves as the entry point for a Nuxt application. It renders content for every route of the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n   <h1>Welcome to the homepage</h1>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Validation\nDESCRIPTION: Example of route validation using the validate property in definePageMeta. This validates that the id parameter consists only of digits before rendering the page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  validate: async (route) => {\n    // Check if the id is made up of digits\n    return typeof route.params.id === 'string' && /^\\d+$/.test(route.params.id)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining a Home Page in Vue\nDESCRIPTION: This code defines the home page (index.vue) in a Nuxt application. It demonstrates the use of a heading and an auto-imported component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>Welcome to the homepage</h1>\n    <AppAlert>\n      This is an auto-imported component\n    </AppAlert>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Title Template Function in Layout\nDESCRIPTION: Implementation of a dynamic title template function within a layout component using useHead composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/6.meta.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  titleTemplate: (titleChunk) => {\n    return titleChunk ? `${titleChunk} - Site Title` : 'Site Title';\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of updateTemplates\nDESCRIPTION: Implementation example showing how to use updateTemplates to rebuild route templates when pages change in a Nuxt module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, updateTemplates } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    // watch and rebuild routes template list when one of the pages changes\n    nuxt.hook('builder:watch', async (event, relativePath) => {\n      if (event === 'change') { return }\n\n      const path = resolve(nuxt.options.srcDir, relativePath)\n      if (updateTemplatePaths.some(dir => path.startsWith(dir))) {\n        await updateTemplates({\n          filter: template => template.filename === 'routes.mjs'\n        })\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: External Stylesheet Configuration\nDESCRIPTION: Configuration for adding external stylesheets in Nuxt config\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    head: {\n      link: [{ rel: 'stylesheet', href: 'https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css' }]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Provided Helpers in Vue Components\nDESCRIPTION: Shows how to use helpers provided by plugins in Vue components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// alternatively, you can also use it here\nconst { $hello } = useNuxtApp()\n</script>\n\n<template>\n  <div>\n    {{ $hello('world') }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Vue Components\nDESCRIPTION: Use the useRuntimeConfig composable in Vue components to access public runtime configuration values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/8.runtime-config.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst config = useRuntimeConfig()\n\n// instead of process.env you will now access config.public.apiBase\nconsole.log(config.public.apiBase)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Mode in Nuxt TypeScript Config\nDESCRIPTION: Configuration to disable TypeScript strict checks when converting codebase to TypeScript.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/8.typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  typescript: {\n    strict: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Layout with Slots in Nuxt.js\nDESCRIPTION: This snippet demonstrates a custom layout (custom.vue) with named slots for header content and a default slot for the main content.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.layouts.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <header>\n      <slot name=\"header\">\n        Default header content\n      </slot>\n    </header>\n    <main>\n      <slot />\n    </main>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File\nDESCRIPTION: Shows how to set environment variables in a .env file for development and build/generate stages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nNUXT_PUBLIC_API_BASE = \"https://api.localhost:5555\"\nNUXT_API_SECRET = \"123\"\n```\n\n----------------------------------------\n\nTITLE: Adding Webpack Plugin Example\nDESCRIPTION: Example showing how to add ESLint webpack plugin to the Nuxt configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport EslintWebpackPlugin from 'eslint-webpack-plugin'\nimport { defineNuxtModule, addWebpackPlugin } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'nuxt-eslint',\n    configKey: 'eslint',\n  },\n  defaults: nuxt => ({\n    include: [`${nuxt.options.srcDir}/**/*.{js,jsx,ts,tsx,vue}`],\n    lintOnStart: true,\n  }),\n  setup(options, nuxt) {\n    const webpackOptions = {\n      ...options,\n      context: nuxt.options.srcDir,\n      files: options.include,\n      lintDirtyModulesOnly: !options.lintOnStart\n    }\n    addWebpackPlugin(new EslintWebpackPlugin(webpackOptions), { server: false })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Module with defineNuxtModule in TypeScript\nDESCRIPTION: This example demonstrates how to use the defineNuxtModule function to create a Nuxt module. It sets up metadata, default options, and a setup function that hooks into the 'modules:done' event.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/1.modules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'my-module',\n    configKey: 'myModule'\n  },\n  defaults: {\n    test: 123\n  },\n  setup (options, nuxt) {\n    nuxt.hook('modules:done', () => {\n      console.log('My module is ready with current test option: ', options.test)\n    })    \n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useRouter in Vue Component (Vue)\nDESCRIPTION: Demonstrates how to use the useRouter composable within a Vue component's setup script.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-router.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst router = useRouter()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mocking Nuxt Components with mockComponent in TypeScript\nDESCRIPTION: Shows how to use mockComponent to mock Nuxt components. It covers mocking by component name, relative path, and using SFC for redirection to a mock component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockComponent } from '@nuxt/test-utils/runtime'\n\nmockComponent('MyComponent', {\n  props: {\n    value: String\n  },\n  setup(props) {\n    // ...\n  }\n})\n\n// relative path or alias also works\nmockComponent('~/components/my-component.vue', async () => {\n  // or a factory function\n  return defineComponent({\n    setup(props) {\n      // ...\n    }\n  })\n})\n\n// or you can use SFC for redirecting to a mock component\nmockComponent('MyComponent', () => import('./MockComponent.vue'))\n\n// your tests here\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockComponent } from '@nuxt/test-utils/runtime'\n\nmockComponent('MyComponent', async () => {\n  const { ref, h } = await import('vue')\n\n  return defineComponent({\n    setup(props) {\n      const counter = ref(0)\n      return () => h('div', null, counter.value)\n    }\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt 3 with Pinia for state management\nDESCRIPTION: Set up Pinia as a replacement for Vuex in Nuxt 3 by adding it to the modules array in nuxt.config.ts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from 'nuxt/config';\n\nexport default defineNuxtConfig({\n  modules: ['@pinia/nuxt']\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Module Setup with Transpilation\nDESCRIPTION: Module implementation that uses the setupTranspilation function within a Nuxt module setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/6.context.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxt } from '@nuxt/kit'\nimport { setupTranspilation } from './setupTranspilation'\n\nexport default defineNuxtModule({\n  setup() {\n    setupTranspilation()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Anonymous Global Route Middleware in Nuxt\nDESCRIPTION: Example demonstrating how to create a global route middleware by passing a function directly as the first argument without a name. This middleware will run on every route change.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/add-route-middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(() => {\n  addRouteMiddleware((to, from) => {\n    console.log('anonymous global middleware that runs on every route change')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Nitro Plugin Implementation\nDESCRIPTION: Example of adding a Nitro server plugin with request hooks\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, addServerPlugin } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    const resolver = createResolver(import.meta.url)\n    addServerPlugin(resolver.resolve('./runtime/plugin.ts'))\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitroApp) => {\n  nitroApp.hooks.hook(\"request\", (event) => {\n    console.log(\"on request\", event.path);\n  });\n\n  nitroApp.hooks.hook(\"beforeResponse\", (event, { body }) => {\n    console.log(\"on response\", event.path, { body });\n  });\n\n  nitroApp.hooks.hook(\"afterResponse\", (event, { body }) => {\n    console.log(\"on after response\", event.path, { body });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Type Checking in Nuxt Config\nDESCRIPTION: Configuration to enable type checking at build or development time using typescript.typeCheck option.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/8.typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  typescript: {\n    typeCheck: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Internal Routing with NuxtLink in Vue\nDESCRIPTION: Demonstrates how to use the <NuxtLink> component for internal routing within a Nuxt application. The component intelligently renders as an optimized anchor tag.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink to=\"/about\">About page</NuxtLink>\n</template>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- (Vue Router & Smart Prefetching) -->\n<a href=\"/about\">About page</a>\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Node.js Handler in Nuxt Server\nDESCRIPTION: An example of using a legacy Node.js request handler in Nuxt server routes. It uses fromNodeMiddleware to adapt a traditional Node handler function to work with Nuxt's server framework.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport default fromNodeMiddleware((req, res) => {\n  res.end('Legacy handler')\n})\n```\n\n----------------------------------------\n\nTITLE: Resolving paths in layer nuxt.config.ts files\nDESCRIPTION: Demonstrates how to properly resolve relative paths in a layer's nuxt.config.ts file using Node.js path utilities to avoid path resolution issues.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fileURLToPath } from 'url'\nimport { dirname, join } from 'path'\n\nconst currentDir = dirname(fileURLToPath(import.meta.url))\n\nexport default defineNuxtConfig({\n  css: [\n    join(currentDir, './assets/main.css')\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Content with NuxtClientFallback Props\nDESCRIPTION: Example showing how to configure fallback content and tags for when server-side rendering fails, using fallback-tag and fallback props.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.nuxt-client-fallback.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n  <template>\n    <!-- render <span>Hello world</span> server-side if the default slot fails to render -->\n    <NuxtClientFallback fallback-tag=\"span\" fallback=\"Hello world\">\n      <BrokeInSsr />\n    </NuxtClientFallback>\n  </template>\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Nested Composables\nDESCRIPTION: Example of re-exporting nested composables from the index file to enable auto-imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport { utils } from './nested/utils.ts'\n```\n\n----------------------------------------\n\nTITLE: Page Meta Definition with Dynamic Key\nDESCRIPTION: Example of defining a dynamic page key using definePageMeta in a Vue component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/2.nuxt-page.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  key: route => route.fullPath\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Nuxt Plugins Directory Structure\nDESCRIPTION: Shows the directory structure for Nuxt plugins, indicating which files are scanned and registered automatically.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| plugins/\n---| foo.ts      // scanned\n---| bar/\n-----| baz.ts    // not scanned\n-----| foz.vue   // not scanned\n-----| index.ts  // currently scanned but deprecated\n```\n\n----------------------------------------\n\nTITLE: Using Auto-imported Components in Vue\nDESCRIPTION: This example demonstrates how to use auto-imported components in Nuxt. The AppAlert component is automatically available without explicit import.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>Welcome to the homepage</h1>\n    <AppAlert>\n      This is an auto-imported component.\n    </AppAlert>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Mixing Server and Client Components with nuxt-client Attribute\nDESCRIPTION: This snippet shows how to partially hydrate a server component by using the nuxt-client attribute on specific child components that should be loaded client-side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <HighlightedMarkdown markdown=\"# Headline\" />\n    <!-- Counter will be loaded and hydrated client-side -->\n    <Counter nuxt-client :count=\"5\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Unhead Plugins for Template Params and Alias Sorting\nDESCRIPTION: Shows how to explicitly enable Template Params and Alias Tag Sorting features in Unhead v2, which are no longer enabled by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TemplateParamsPlugin, AliasSortingPlugin } from '@unhead/vue/plugins'\n\nexport default defineNuxtPlugin({\n  setup() {\n    const unhead = injectHead()\n    unhead.use(TemplateParamsPlugin)\n    unhead.use(AliasSortingPlugin)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Nuxt Module with Tailwind Example\nDESCRIPTION: Demonstrates how to use installModule utility to add Tailwind as a dependency in a Nuxt module, including configuration of CSS and content paths.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, createResolver, installModule } from '@nuxt/kit'\n\nexport default defineNuxtModule<ModuleOptions>({\n  async setup (options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    // We can inject our CSS file which includes Tailwind's directives\n    nuxt.options.css.push(resolver.resolve('./runtime/assets/styles.css'))\n\n    await installModule('@nuxtjs/tailwindcss', {\n      // module configuration\n      exposeConfig: true,\n      config: {\n        darkMode: 'class',\n        content: {\n          files: [\n            resolver.resolve('./runtime/components/**/*.{vue,mjs,ts}'),\n            resolver.resolve('./runtime/*.{mjs,js,ts}')\n          ]\n        }\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue's Script Setup Context Restoration\nDESCRIPTION: Demonstrates how Vue compiler automatically handles context restoration in script setup blocks to maintain context after async operations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst __instance = getCurrentInstance() // Generated by Vue compiler\ngetCurrentInstance() // Works!\nawait someAsyncOperation() // Vue unsets the context\n__restoreInstance(__instance) // Generated by Vue compiler\ngetCurrentInstance() // Still works!\n```\n\n----------------------------------------\n\nTITLE: Extending Pages Example in Nuxt Module\nDESCRIPTION: Example showing how to use extendPages to add a new preview page route in a Nuxt module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/7.pages.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, extendPages } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options) {\n    const resolver = createResolver(import.meta.url)\n\n    extendPages((pages) => {\n      pages.unshift({\n        name: 'prismic-preview',\n        path: '/preview',\n        file: resolver.resolve('runtime/preview.vue')\n       })\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Individual Components with Nuxt Module\nDESCRIPTION: Example showing how to use addComponent to register individual components within a Nuxt module using a resolver\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/5.components.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, createResolver, addComponent } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: '@nuxt/image',\n    configKey: 'image',\n  },\n  async setup() {\n    const resolver = createResolver(import.meta.url)\n\n    addComponent({\n      name: 'NuxtImg',\n      filePath: resolver.resolve('./runtime/components/NuxtImg.vue'),\n    })\n\n    addComponent({\n      name: 'NuxtPicture',\n      filePath: resolver.resolve('./runtime/components/NuxtPicture.vue'),\n    })\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro Server in Nuxt.js\nDESCRIPTION: Configuration example for customizing the Nitro server settings in a Nuxt application. This allows direct modification of the underlying server engine configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // https://nitro.unjs.io/config\n  nitro: {}\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating router.extendRoutes to pages:extend hook in Nuxt 3\nDESCRIPTION: Replace the router.extendRoutes configuration with the new pages:extend hook in Nuxt 3.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    'pages:extend' (routes) {\n      //\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Date and Time Formatting with NuxtTime\nDESCRIPTION: Shows how to use Intl.DateTimeFormat options to customize the appearance of the date and time output.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtTime \n    :datetime=\"Date.now()\" \n    year=\"numeric\"\n    month=\"long\"\n    day=\"numeric\"\n    hour=\"2-digit\"\n    minute=\"2-digit\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a Nitro Plugin in Nuxt\nDESCRIPTION: Demonstrates how to create a Nitro plugin to extend Nitro's runtime behavior and hook into lifecycle events.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNitroPlugin((nitroApp) => {\n  console.log('Nitro plugin', nitroApp)\n})\n```\n\n----------------------------------------\n\nTITLE: Using useHead Composable in Vue Setup\nDESCRIPTION: Example of using the new useHead composable in Vue setup script to set page title.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/6.meta.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  title: 'My Nuxt App',\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic NuxtImg Component Usage\nDESCRIPTION: Example showing basic usage of the NuxtImg component with a local image source.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/9.nuxt-img.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<NuxtImg src=\"/nuxt-icon.png\" />\n```\n\n----------------------------------------\n\nTITLE: Using RouteRules for Prerendering Configuration\nDESCRIPTION: Setting up prerendering rules for different routes using the routeRules configuration in nuxt.config.ts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    // Set prerender to true to configure it to be prerendered\n    \"/rss.xml\": { prerender: true },\n    // Set it to false to configure it to be skipped for prerendering\n    \"/this-DOES-NOT-get-prerendered\": { prerender: false },\n    // Everything under /blog gets prerendered as long as it\n    // is linked to from another page\n    \"/blog/**\": { prerender: true },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Injecting CSS in a Nuxt Module\nDESCRIPTION: This snippet demonstrates how to inject a CSS stylesheet into a Nuxt application from a module by adding it to the Nuxt css array option.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule, addPlugin, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    nuxt.options.css.push(resolver.resolve('./runtime/style.css'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating defineNuxtMiddleware in JavaScript/TypeScript\nDESCRIPTION: Remove the defineNuxtMiddleware wrapper and use @nuxt/types for TypeScript support.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/3.bridge-composition-api.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { defineNuxtMiddleware } from '@nuxtjs/composition-api`\n- export default defineNuxtMiddleware((ctx) => {})\n+ export default (ctx) => {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Middleware } from '@nuxt/types'\n\nexport default <Middleware> function (ctx) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS in Nuxt\nDESCRIPTION: Configuration example for PostCSS plugins in Nuxt using the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  postcss: {\n    plugins: {\n      'postcss-nested': {},\n      'postcss-custom-media': {}\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Package.json configuration for publishing a Nuxt layer\nDESCRIPTION: The package.json configuration needed when publishing a Nuxt layer as an npm package, including the main entry point and dependency management.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-theme\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"main\": \"./nuxt.config.ts\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"nuxt\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Nuxt Scripts\nDESCRIPTION: Configuration for disabling Nuxt scripts and JS resource hints rendering. Can be configured globally or granularly within routeRules.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.features.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  features: {\n    noScripts: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Transition Settings in Nuxt Config\nDESCRIPTION: Setting global default transition settings for both page and layout transitions in the nuxt.config.ts file with custom names and modes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    pageTransition: {\n      name: 'fade',\n      mode: 'out-in' // default\n    },\n    layoutTransition: {\n      name: 'slide',\n      mode: 'out-in' // default\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Nitro Plugin for Head Modification\nDESCRIPTION: Server plugin to modify HTML head and add stylesheets programmatically\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitro) => {\n  nitro.hooks.hook('render:html', (html) => {\n    html.head.push('<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\">')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using head with defineNuxtComponent in Vue\nDESCRIPTION: Example demonstrating how to set page metadata using the head method within a component definition using defineNuxtComponent. This approach allows setting page title and other meta tags.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-nuxt-component.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\">\nexport default defineNuxtComponent({\n  head(nuxtApp) {\n    return {\n      title: 'My site'\n    }\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Transitions in Nuxt Config\nDESCRIPTION: Setting up automatic layout transitions for all layouts in the application using the nuxt.config.ts file. This configuration applies the 'layout' transition with 'out-in' mode to all layout changes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    layoutTransition: { name: 'layout', mode: 'out-in' }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Signature for useRuntimeHook\nDESCRIPTION: TypeScript function signature showing the type definition for useRuntimeHook composable. Takes a hook name and callback function as parameters.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-hook.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRuntimeHook<THookName extends keyof RuntimeNuxtHooks>(\n  name: THookName,\n  fn: RuntimeNuxtHooks[THookName] extends HookCallback ? RuntimeNuxtHooks[THookName] : never\n): void\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Fallback Generation in Nuxt\nDESCRIPTION: This snippet demonstrates how to skip generation of default HTML files (index.html, 200.html, 404.html) when prerendering a client-rendered Nuxt application. It uses the 'prerender:generate' hook from Nitro to selectively skip specific routes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/3.rendering.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  ssr: false,\n  nitro: {\n    hooks: {\n      'prerender:generate'(route) {\n        const routesToSkip = ['/index.html', '/200.html', '/404.html']\n        if (routesToSkip.includes(route.route)) {\n          route.skip = true\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using useLogger in a Nuxt Module\nDESCRIPTION: This example demonstrates how to use the `useLogger` function within a Nuxt module. It creates a logger instance with a custom tag and logs an info message.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/13.logging.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, useLogger } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const logger = useLogger('my-module')\n\n    logger.info('Hello from my module!')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Client-Side Only Components in Vue Templates\nDESCRIPTION: This snippet demonstrates how to use client-side only components in a Vue template. The Comments component with a .client suffix will only be rendered on the client side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <!-- this component will only be rendered on client side -->\n    <Comments />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Named Global Route Middleware in Nuxt\nDESCRIPTION: Example showing how to create a named global middleware by setting the global option to true in the third parameter. This middleware will be applied to every route change while maintaining a specific name.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/add-route-middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin(() => {\n  addRouteMiddleware('global-middleware', (to, from) => {\n      console.log('global middleware that runs on every route change')\n    },\n    { global: true }\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Extending from Git repositories in Nuxt configuration\nDESCRIPTION: Shows how to extend from Nuxt layers hosted in various Git repositories, including GitHub, GitLab, and Bitbucket, with examples of branch and tag selection.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    'github:username/repoName',        // GitHub Remote Source\n    'github:username/repoName/base',   // GitHub Remote Source within /base directory\n    'github:username/repoName#dev',    // GitHub Remote Source from dev branch\n    'github:username/repoName#v1.0.0', // GitHub Remote Source from v1.0.0 tag\n    'gitlab:username/repoName',        // GitLab Remote Source example\n    'bitbucket:username/repoName',     // Bitbucket Remote Source example\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Legacy Middleware in Nuxt Server\nDESCRIPTION: An example of using a legacy Node.js middleware function in Nuxt server. It shows how to implement a middleware that can access the request/response objects and pass control to the next middleware using the next() callback.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport default fromNodeMiddleware((req, res, next) => {\n  console.log('Legacy middleware')\n  next()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Payload Serializer and Deserializer\nDESCRIPTION: Demonstrates how to create a payload plugin to define custom serialization and deserialization for complex data types like Luxon DateTime.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default definePayloadPlugin((nuxtApp) => {\n  definePayloadReducer('DateTime', (value) => {\n    return value instanceof DateTime && value.toJSON()\n  })\n  definePayloadReviver('DateTime', (value) => {\n    return DateTime.fromISO(value)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining and Disabling Layouts with definePageMeta in Vue\nDESCRIPTION: Demonstrates how to set a custom layout or disable the default layout using definePageMeta.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-page-meta.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefinePageMeta({\n  // set custom layout\n  layout: 'admin'\n\n  // ... or disable a default layout\n  layout: false\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: App Runtime Hooks Reference\nDESCRIPTION: Runtime hooks that can be used in both server and client environments or specifically in one environment. These hooks allow interaction with the Vue app instance, error handling, page transitions, and other runtime events.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/6.advanced/1.hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Example hook usage\napp.hook('app:created', (vueApp) => {\n  // Called when initial vueApp instance is created\n});\n\napp.hook('app:error', (err) => {\n  // Called when a fatal error occurs\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from CommonJS to ESM Export Syntax\nDESCRIPTION: Examples of how to migrate from CommonJS export syntax to ESM export syntax, illustrating the differences in default and named exports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ...\n\nexports.hello = ...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default ...\n\nexport const hello = ...\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxi Analyze Command in Bash\nDESCRIPTION: This command runs the 'nuxi analyze' tool to analyze the production bundle of a Nuxt application. It accepts various options for customizing the analysis process, such as specifying the root directory, log level, and environment file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/analyze.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi analyze [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--dotenv] [--name=<name>] [--no-serve]\n```\n\n----------------------------------------\n\nTITLE: Optimizing Static Site Generation for Client-Side Rendering\nDESCRIPTION: This hook configuration prevents Nuxt from generating individual HTML files for each route during static site generation. It's useful for pure client-side rendered apps that only need a single entry point.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/3.rendering.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    'prerender:routes' ({ routes }) {\n      routes.clear() // Do not generate any routes (except the defaults)\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining addBuildPlugin Function and Related Interfaces in TypeScript\nDESCRIPTION: This snippet defines the addBuildPlugin function signature, AddBuildPluginFactory interface for plugin factories, and ExtendConfigOptions interface for configuration options. It allows adding Vite and Webpack plugins to Nuxt builds with fine-grained control over when and how they are applied.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addBuildPlugin (pluginFactory: AddBuildPluginFactory, options?: ExtendConfigOptions): void\n\ninterface AddBuildPluginFactory {\n  vite?: () => VitePlugin | VitePlugin[]\n  webpack?: () => WebpackPluginInstance | WebpackPluginInstance[]\n}\n\ninterface ExtendConfigOptions {\n  dev?: boolean\n  build?: boolean\n  server?: boolean\n  client?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Nuxt Project\nDESCRIPTION: Standard .gitignore configuration for Nuxt.js projects that excludes build outputs, dependencies, logs, system files, and environment configurations. This setup helps maintain clean version control by preventing unnecessary files from being tracked by git.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.gitignore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Nuxt dev/build outputs\n.output\n.data\n.nuxt\n.nitro\n.cache\ndist\n\n# Node dependencies\nnode_modules\n\n# Logs\nlogs\n*.log\n\n# Misc\n.DS_Store\n\n# Local env files\n.env\n.env.*\n!.env.example\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Module Project with npm\nDESCRIPTION: Command to create a new Nuxt module project using npm and the official starter template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create nuxt -- -t module my-module\n```\n\n----------------------------------------\n\nTITLE: Extending configuration in a Nuxt layer\nDESCRIPTION: Shows how to define configuration in a layer's nuxt.config.ts file that will be inherited by projects that extend from it. This example sets head metadata.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // Extending from base nuxt.config.ts!\n  app: {\n    head: {\n      title: 'Extending Configs is Fun!',\n      meta: [\n        { name: 'description', content: 'I am using the extends feature in Nuxt!' }\n      ],\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status in Nuxt Server-Side Rendering\nDESCRIPTION: This snippet demonstrates how to use the setResponseStatus function in Nuxt to set the status code and message for server-side responses. It checks for the existence of the request event to ensure it's running on the server.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/set-response-status.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = useRequestEvent()\n\n// event will be undefined in the browser\nif (event) {\n  // Set the status code to 404 for a custom 404 page\n  setResponseStatus(event, 404)\n\n  // Set the status message as well\n  setResponseStatus(event, 404, 'Page Not Found')\n}\n```\n\n----------------------------------------\n\nTITLE: Using NuxtClientFallback for Client-Side Rendering Fallback in Vue\nDESCRIPTION: Example of implementing the NuxtClientFallback component to render components on the client-side when they fail during server-side rendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.nuxt-client-fallback.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Sidebar />\n    <!-- this component will be rendered on client-side -->\n    <NuxtClientFallback fallback-tag=\"span\">\n      <Comments />\n      <BrokeInSSR />\n    </NuxtClientFallback>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring localLayerAliases in Nuxt Configuration\nDESCRIPTION: Resolves path aliases (~, ~~, @, @@) within layers with respect to their layer source and root directories. Enabled by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    localLayerAliases: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing Inconsistent Options in useAsyncData\nDESCRIPTION: Example showing how multiple useAsyncData calls with the same key but different options will trigger warnings in Nuxt 3. This can be fixed by extracting these calls into dedicated composables.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// This will now trigger a warning\nconst { data: users1 } = useAsyncData('users', () => $fetch('/api/users'), { deep: false })\nconst { data: users2 } = useAsyncData('users', () => $fetch('/api/users'), { deep: true })\n```\n\n----------------------------------------\n\nTITLE: Defining installModule Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the installModule function, which is used to programmatically install Nuxt modules.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/1.modules.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function installModule (moduleToInstall: string | NuxtModule, inlineOptions?: any, nuxt?: Nuxt)\n```\n\n----------------------------------------\n\nTITLE: Using prerender:routes Nuxt Hook for Dynamic Routes\nDESCRIPTION: Implementing the prerender:routes hook to fetch and register dynamic routes from an external API for prerendering.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    async \"prerender:routes\"(ctx) {\n      const { pages } = await fetch(\"https://api.some-cms.com/pages\").then(\n        (res) => res.json(),\n      );\n      for (const page of pages) {\n        ctx.routes.add(`/${page.name}`);\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Request URL in Nuxt Vue Component\nDESCRIPTION: This snippet demonstrates how to use the useRequestURL composable in a Nuxt Vue component to access and display the current request URL and path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-url.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst url = useRequestURL()\n</script>\n\n<template>\n  <p>URL is: {{ url }}</p>\n  <p>Path is: {{ url.pathname }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Plugins in Nuxt Config\nDESCRIPTION: Demonstrates how to add plugins from subdirectories using the 'plugins' option in nuxt.config.ts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  plugins: [\n    '~/plugins/bar/baz',\n    '~/plugins/bar/foz'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Layer Alias with Custom Name in Nuxt Configuration\nDESCRIPTION: Example of how to override a layer's default alias by specifying a custom name in the meta options when extending from an external layer source.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/14.layers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    [\n      'github:my-themes/awesome',\n      { \n        meta: {\n          name: 'my-awesome-theme',\n        },\n      },\n    ],\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for NuxtTime Component\nDESCRIPTION: Demonstrates how to set a specific locale (French) for the NuxtTime component using the locale prop.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtTime :datetime=\"Date.now()\" locale=\"fr-FR\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using renderSuspended for Component Testing\nDESCRIPTION: Example of using renderSuspended to test a Nuxt component with Testing Library. This helper allows rendering components with async setup and access to Nuxt plugin injections.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { it, expect } from 'vitest'\nimport { renderSuspended } from '@nuxt/test-utils/runtime'\nimport { SomeComponent } from '#components'\nimport { screen } from '@testing-library/vue'\n\nit('can render some component', async () => {\n  await renderSuspended(SomeComponent)\n  expect(screen.getByText('This is an auto-imported component')).toBeDefined()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Codes in Server Response\nDESCRIPTION: Shows how to set a custom HTTP status code for a response using the setResponseStatus utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  setResponseStatus(event, 202)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @nuxt/test-utils and Dependencies\nDESCRIPTION: Command to install @nuxt/test-utils and its peer dependencies using npm. This setup includes Vitest, Vue Test Utils, Happy DOM, and Playwright Core.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev @nuxt/test-utils vitest @vue/test-utils happy-dom playwright-core\n```\n\n----------------------------------------\n\nTITLE: Typing Nuxt Plugins\nDESCRIPTION: Demonstrates how to type injected properties from Nuxt plugins for advanced use-cases.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '#app' {\n  interface NuxtApp {\n    $hello (msg: string): string\n  }\n}\n\ndeclare module 'vue' {\n  interface ComponentCustomProperties {\n    $hello (msg: string): string\n  }\n}\n\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Route Rules Implementation Example\nDESCRIPTION: Example demonstrating how to use extendRouteRules to configure redirects and caching for routes in a Nuxt module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/7.pages.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, extendRouteRules, extendPages } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options) {\n    const resolver = createResolver(import.meta.url)\n\n    extendPages((pages) => {\n      pages.unshift({\n        name: 'preview-new',\n        path: '/preview-new',\n        file: resolver.resolve('runtime/preview.vue')\n       })\n    })\n\n    extendRouteRules('/preview', {\n      redirect: {\n        to: '/preview-new',\n        statusCode: 302\n      }\n    })\n\n    extendRouteRules('/preview-new', {\n      cache: {\n        maxAge: 60 * 60 * 24 * 7\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining tryUseNuxt Type Interface\nDESCRIPTION: TypeScript interface definition for the tryUseNuxt function that safely attempts to access the Nuxt instance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/6.context.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tryUseNuxt(): Nuxt | null\n\ninterface Nuxt {\n  options: NuxtOptions\n  hooks: Hookable<NuxtHooks>\n  hook: Nuxt['hooks']['hook']\n  callHook: Nuxt['hooks']['callHook']\n  addHooks: Nuxt['hooks']['addHooks']\n  ready: () => Promise<void>\n  close: () => Promise<void>\n  server?: any\n  vfs: Record<string, string>\n  apps: Record<string, NuxtApp>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Bridge Feature Flags in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure various feature flags for Nuxt Bridge in the nuxt.config.ts file. It includes options for enabling Vite, useHead, definePageMeta, and TypeScript transpilation, as well as disabling certain features.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/10.configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\nexport default defineNuxtConfig({\n  bridge: {\n\n    // -- Opt-in features --\n\n    // Use Vite as the bundler instead of webpack 4\n    // vite: true,\n\n    // Enable Nuxt 3 compatible useHead\n    // meta: true,\n\n    // Enable definePageMeta macro\n    // macros: {\n    //   pageMeta: true\n    // },\n\n    // Enable transpiling TypeScript with esbuild\n    // typescript: {\n    //   esbuild: true\n    // },\n\n    // -- Default features --\n\n    // Use legacy server instead of Nitro\n    // nitro: false,\n\n    // Disable Nuxt 3 compatible `nuxtApp` interface\n    // app: false,\n\n    // Disable Composition API support\n    // capi: false,\n\n    // ... or just disable legacy Composition API support\n    // capi: {\n    //   legacy: false\n    // },\n\n    // Do not transpile modules\n    // transpile: false,\n\n    // Disable <script setup> support\n    // scriptSetup: false,\n\n    // Disable composables auto importing\n    // imports: false,\n\n    // Do not warn about module incompatibilities\n    // constraints: false\n  },\n\n  vite: {\n    // Config for Vite\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Runtime Config Structure in Nuxt Config\nDESCRIPTION: Shows how to convert Nuxt 2's separate privateRuntimeConfig and publicRuntimeConfig into Nuxt 3's unified runtimeConfig structure with a public key for public values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/7.runtime-config.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\n- privateRuntimeConfig: {\n-   apiKey: process.env.NUXT_API_KEY || 'super-secret-key'\n- },\n- publicRuntimeConfig: {\n-   websiteURL: 'https://public-data.com'\n- }\n+ runtimeConfig: {\n+   apiKey: process.env.NUXT_API_KEY || 'super-secret-key',\n+   public: {\n+     websiteURL: 'https://public-data.com'\n+   }\n+ }\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt with .nuxtrc File in Bash\nDESCRIPTION: Example of a .nuxtrc file showing how to disable SSR, enable devtools, and add Nuxt modules using the flat syntax. This configuration approach is simpler than using nuxt.config.js for basic settings.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.nuxtrc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Disable SSR\nssr=false\n\n# Configuration for `@nuxt/devtools`\ndevtools.enabled=true\n\n# Add Nuxt modules\nmodules[]=@nuxt/image\nmodules[]=nuxt-security\n```\n\n----------------------------------------\n\nTITLE: Adding Router Options Files via Nuxt Hook\nDESCRIPTION: This code demonstrates how to add more router options files by using the 'pages:routerOptions' hook. It uses createResolver from @nuxt/kit to resolve the file path, and the optional flag ensures it only applies when page-based routing is already enabled.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver } from '@nuxt/kit'\n\nexport default defineNuxtConfig({\n  hooks: {\n    'pages:routerOptions' ({ files }) {\n      const resolver = createResolver(import.meta.url)\n      // add a route\n      files.push({\n        path: resolver.resolve('./runtime/app/router-options'),\n        optional: true\n      })\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Hydration Event Handling Example\nDESCRIPTION: Shows how to handle hydration events in lazy-loaded components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <LazyMyComponent hydrate-on-visible @hydrated=\"onHydrate\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nfunction onHydrate() {\n  console.log(\"Component has been hydrated!\")\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling typedPages in Nuxt Configuration\nDESCRIPTION: Enables the experimental typed router using unplugin-vue-router, providing type safety for navigation functions, links, and route parameters.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    typedPages: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Public Image in Nuxt.js Template\nDESCRIPTION: Example showing how to reference and display an image from the public directory, which is served directly at the root URL of the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/05.assets.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <img src=\"/img/nuxt.png\" alt=\"Discover Nuxt\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxi Generate Command\nDESCRIPTION: Command to pre-render a Nuxt application's routes into static HTML files. It includes optional parameters for working directory, log level, preset, environment variables, and environment name configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/generate.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi generate [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--preset] [--dotenv] [--envName]\n```\n\n----------------------------------------\n\nTITLE: Nested Routes Migration Example\nDESCRIPTION: Comparison between Nuxt 2 and Nuxt 3 implementation of nested routes and page metadata configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/6.pages-and-layouts.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtChild keep-alive :keep-alive-props=\"{ exclude: ['modal'] }\" :nuxt-child-key=\"$route.slug\" />\n  </div>\n</template>\n\n<script>\nexport default {\n  transition: 'page' // or { name: 'page' }\n}\n</script>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtPage />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  key: route => route.slug,\n  transition: {\n    name: 'page',\n  },\n  keepalive: {\n    exclude: ['modal']\n  },\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Organizing Server Directory Structure in Nuxt\nDESCRIPTION: Shows the recommended directory structure for organizing server-side code in a Nuxt application, including api, routes, and middleware folders.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| server/\n---| api/\n-----| hello.ts      # /api/hello\n---| routes/\n-----| bonjour.ts    # /bonjour\n---| middleware/\n-----| log.ts        # log all requests\n```\n\n----------------------------------------\n\nTITLE: Replacing watchQuery with a watcher in Nuxt 3\nDESCRIPTION: Shows how to replace the watchQuery option from Nuxt 2 with a watcher in Nuxt 3. This example demonstrates watching route query changes to trigger data refetching.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/7.component-options.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst route = useRoute()\nconst { data, refresh } = await useFetch('/api/user')\nwatch(() => route.query, () => refresh())\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Server API\nDESCRIPTION: Shows how to access and use query parameters from a request URL using the getQuery utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const query = getQuery(event)\n\n  return { a: query.foo, b: query.baz }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Auto-imported Utilities in Vue Components\nDESCRIPTION: Shows how to use auto-imported utilities from the shared directory in a Vue component. The capitalize function is used without explicit imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.shared.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst hello = capitalize('hello')\n</script>\n\n<template>\n  <div>\n    {{ hello }}\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Aliasing Libraries in Nuxt Configuration\nDESCRIPTION: Example of how to manually alias a library to its CommonJS version in Nuxt configuration, providing a workaround for ESM compatibility issues.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  alias: {\n    'sample-library': 'sample-library/dist/sample-library.cjs.js'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Layouts in Vue\nDESCRIPTION: This example demonstrates how to use layouts in Nuxt. It shows the app.vue file using NuxtLayout and NuxtPage components to structure the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtLayout>\n      <NuxtPage />\n    </NuxtLayout>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useRouteAnnouncer Composable in a Vue Component\nDESCRIPTION: This example demonstrates how to use the useRouteAnnouncer composable in a Vue component. It destructures the returned properties and methods, and initializes the composable with 'assertive' politeness.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-route-announcer.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  const { message, politeness, set, polite, assertive } = useRouteAnnouncer({\n    politeness: 'assertive'\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Config in Nuxt Config\nDESCRIPTION: Shows how to define runtime configuration values in the nuxt.config.ts file for use in server handlers.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    githubToken: ''\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Server Components in Nuxt Configuration\nDESCRIPTION: This snippet shows how to enable the experimental component islands feature in Nuxt configuration to use server components. This feature allows server-rendering individual components within client-side applications.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    componentIslands: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Module Project with yarn\nDESCRIPTION: Command to create a new Nuxt module project using yarn and the official starter template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create nuxt -t module my-module\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Bridge TypeScript Settings\nDESCRIPTION: Configuration setup for enabling TypeScript support in Nuxt Bridge. Includes bridge configuration with typescript enabled and optional nitro flag.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/2.typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  bridge: {\n    typescript: true,\n    nitro: false // If migration to Nitro is complete, set to true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Error Data Handling in Error Component\nDESCRIPTION: Shows how to update custom error.vue components to use the now-parsed error.data property instead of manually parsing it.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n  <script setup lang=\"ts\">\n  import type { NuxtError } from '#app'\n\n  const props = defineProps({\n    error: Object as () => NuxtError\n  })\n\n- const data = JSON.parse(error.data)\n+ const data = error.data\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for Dual CJS and ESM Support\nDESCRIPTION: Example of a package.json configuration that exposes both CommonJS and ESM versions of a library, allowing consumers to choose the appropriate format.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"sample-library\",\n  \"main\": \"dist/sample-library.cjs.js\",\n  \"module\": \"dist/sample-library.esm.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for callOnce in Nuxt 3\nDESCRIPTION: This snippet provides the TypeScript type definition for the callOnce function and its options. It shows the function signatures and the available options for customizing its behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/call-once.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncallOnce (key?: string, fn?: (() => any | Promise<any>), options?: CallOnceOptions): Promise<void>\ncallOnce(fn?: (() => any | Promise<any>), options?: CallOnceOptions): Promise<void>\n\ntype CallOnceOptions = {\n  /**\n   * Execution mode for the callOnce function\n   * @default 'render'\n   */\n  mode?: 'navigation' | 'render'\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Config in Nuxt Application\nDESCRIPTION: Example of accessing runtime configuration values using the useRuntimeConfig composable. This snippet shows how to access both private and public config values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/10.runtime-config.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst runtimeConfig = useRuntimeConfig()\n\nconsole.log(runtimeConfig.apiSecret)\nconsole.log(runtimeConfig.public.apiBase)\n```\n\n----------------------------------------\n\nTITLE: Using YAML files in a Nuxt project\nDESCRIPTION: A practical example of how to use YAML files in a Nuxt project after configuring the @rollup/plugin-yaml plugin. Shows a YAML configuration file and how to import and use it in a Vue component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/2.vite-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngreeting: \"Hello, Nuxt with Vite!\"\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport config from '~/data/hello.yaml'\n</script>\n\n<template>\n  <h1>{{ config.greeting }}</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Content Module with Nuxi CLI\nDESCRIPTION: Command to install the @nuxt/content module and add it to your nuxt.config.ts file automatically.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.content.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add content\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration Extension Example\nDESCRIPTION: Example demonstrating how to extend Vite configuration to include cross-fetch in dependency optimization.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, extendViteConfig } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    extendViteConfig((config) => {\n      config.optimizeDeps = config.optimizeDeps || {}\n      config.optimizeDeps.include = config.optimizeDeps.include || []\n      config.optimizeDeps.include.push('cross-fetch')\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Module Project with bun\nDESCRIPTION: Command to create a new Nuxt module project using bun and the official starter template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create nuxt -t module my-module\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nuxt's File-System Based Directory Structure\nDESCRIPTION: Shows how Nuxt pages are organized in the filesystem, with regular pages and dynamic route parameters indicated by square brackets in filenames.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/07.routing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| pages/\n---| about.vue\n---| index.vue\n---| posts/\n-----| [id].vue\n```\n\n----------------------------------------\n\nTITLE: Mocking Nuxt Auto Import with mockNuxtImport in TypeScript\nDESCRIPTION: Demonstrates how to use mockNuxtImport to mock Nuxt's auto import functionality, specifically for useStorage. It also shows how to use vi.hoisted for more complex mocking scenarios.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mockNuxtImport } from '@nuxt/test-utils/runtime'\n\nmockNuxtImport('useStorage', () => {\n  return () => {\n    return { value: 'mocked storage' }\n  }\n})\n\n// your tests here\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { vi } from 'vitest'\nimport { mockNuxtImport } from '@nuxt/test-utils/runtime'\n\nconst { useStorageMock } = vi.hoisted(() => {\n  return {\n    useStorageMock: vi.fn(() => {\n      return { value: 'mocked storage'}\n    })\n  }\n})\n\nmockNuxtImport('useStorage', () => {\n  return useStorageMock\n})\n\n// Then, inside a test\nuseStorageMock.mockImplementation(() => {\n  return { value: 'something else' }\n})\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Implementation Example\nDESCRIPTION: Example showing how to implement authentication middleware and register it globally in a Nuxt module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/7.pages.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  // isAuthenticated() is an example method verifying if a user is authenticated\n  if (to.path !== '/login' && isAuthenticated() === false) {\n    return navigateTo('/login')\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, addRouteMiddleware } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    const resolver = createResolver(import.meta.url)\n\n    addRouteMiddleware({\n      name: 'auth',\n      path: resolver.resolve('runtime/auth.ts'),\n      global: true\n    }, { prepend: true })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Sourcemaps in Nuxt\nDESCRIPTION: Configuration options for enabling sourcemaps in Nuxt for both server and client builds. Allows granular control over sourcemap generation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/9.debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  // or sourcemap: true\n  sourcemap: {\n    server: true,\n    client: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Failed Interop Default in ESM Context\nDESCRIPTION: Example of how to handle cases where interop default fails, requiring manual extraction of the default export from a CommonJS module in an ESM context.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from 'cjs-pkg'\n\nconsole.log(pkg) // { default: { test: 123 } }\n```\n\n----------------------------------------\n\nTITLE: Augmenting PageMeta Types in TypeScript\nDESCRIPTION: Demonstrates how to extend the PageMeta type definition to add custom metadata fields to your Nuxt pages in a type-safe way. This snippet shows adding a 'pageType' property to the PageMeta interface.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '#app' {\n  interface PageMeta {\n    pageType?: string\n  }\n}\n\n// It is always important to ensure you import/export something when augmenting a type\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Linking to Cross-App URLs with NuxtLink in Vue\nDESCRIPTION: Shows how to use the <NuxtLink> component with the 'external' prop to link to different applications on the same domain, ensuring correct navigation behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink to=\"/another-app\" external>\n    Go to Another App\n  </NuxtLink>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating TSConfig for Nuxt Bridge\nDESCRIPTION: Diff showing required changes to tsconfig.json to enable auto-generated Nuxt types support. Extends the Nuxt-generated TypeScript configuration while maintaining custom compiler options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/2.typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n+ \"extends\": \"./.nuxt/tsconfig.json\",\n  \"compilerOptions\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Vite Config from Nuxt Using Kit Utilities\nDESCRIPTION: Demonstrates how to programmatically access the Vite configuration from a Nuxt project using @nuxt/kit utilities. The function loads a Nuxt instance, intercepts the vite:extendConfig hook, and returns the client-side Vite configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/15.examples.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { loadNuxt, buildNuxt } from '@nuxt/kit'\n\n// https://github.com/nuxt/nuxt/issues/14534\nasync function getViteConfig() {\n  const nuxt = await loadNuxt({ cwd: process.cwd(), dev: false, overrides: { ssr: false } })\n  return new Promise((resolve, reject) => {\n    nuxt.hook('vite:extendConfig', (config, { isClient }) => {\n      if (isClient) {\n        resolve(config)\n        throw new Error('_stop_')\n      }\n    })\n    buildNuxt(nuxt).catch((err) => {\n      if (!err.toString().includes('_stop_')) {\n        reject(err)\n      }\n    })\n  }).finally(() => nuxt.close())\n}\n\nconst viteConfig = await getViteConfig()\nconsole.log(viteConfig)\n```\n\n----------------------------------------\n\nTITLE: Using createError in Nuxt API Route\nDESCRIPTION: Example of using createError in a server API route to trigger error handling with a 404 status code. This shows how to properly structure an error response that can propagate to the client side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/create-error.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default eventHandler(() => {\n  throw createError({\n    statusCode: 404,\n    statusMessage: 'Page Not Found'\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Image Module for NuxtPicture Component\nDESCRIPTION: This command installs and enables the Nuxt Image module, which is required to use the <NuxtPicture> component. It uses npx to run the latest version of nuxi and adds the image module to the project.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/10.nuxt-picture.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add image\n```\n\n----------------------------------------\n\nTITLE: Disable Components Auto-imports\nDESCRIPTION: Nuxt configuration to disable auto-importing of components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  components: {\n    dirs: []\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Nuxt Component Path Configuration\nDESCRIPTION: Configuration to disable path-based component naming in nuxt.config.ts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  components: [\n    {\n      path: '~/components',\n      pathPrefix: false,\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Static Page Key Implementation\nDESCRIPTION: Demonstrates using NuxtPage with a static page key to render the component only once when first mounted.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/2.nuxt-page.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtPage page-key=\"static\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Manually Interop Default Export in Static and Dynamic Imports\nDESCRIPTION: Examples of how to manually interop default exports from CommonJS modules in both static and dynamic import scenarios.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Static import\nimport { default as pkg } from 'cjs-pkg'\n\n// Dynamic import\nimport('cjs-pkg').then(m => m.default || m).then(console.log)\n```\n\n----------------------------------------\n\nTITLE: Accessing App Namespace Config in Nuxt Plugin\nDESCRIPTION: Illustrates how to access the app namespace configuration, specifically the baseURL, in a Nuxt plugin.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((NuxtApp) => {\n  const config = useRuntimeConfig()\n\n  // Access baseURL universally\n  const baseURL = config.app.baseURL\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Reactivity APIs Auto-imports\nDESCRIPTION: Example of using auto-imported Vue reactivity APIs like ref and computed.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n/* ref() and computed() are auto-imported */\nconst count = ref(1)\nconst double = computed(() => count.value * 2)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Pinia Module with Nuxi CLI\nDESCRIPTION: This command demonstrates how to use the 'nuxi module add' command to install the Pinia module for a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/module.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add pinia\n```\n\n----------------------------------------\n\nTITLE: Installing and Managing Nuxt DevTools via CLI\nDESCRIPTION: Terminal command for managing Nuxt DevTools installation and configuration. The command allows enabling or disabling DevTools globally and for specific projects, with options to specify the working directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/devtools.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi devtools <COMMAND> [ROOTDIR] [--cwd=<directory>]\n```\n\n----------------------------------------\n\nTITLE: Configuring File Exclusions with .nuxtignore in Nuxt\nDESCRIPTION: Example of a .nuxtignore file configuration that demonstrates how to exclude specific layouts, pages, and middleware files using glob patterns. The file supports standard gitignore syntax including negation patterns to include specific exceptions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.nuxtignore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# ignore layout foo.vue\nlayouts/foo.vue\n# ignore layout files whose name ends with -ignore.vue\nlayouts/*-ignore.vue\n\n# ignore page bar.vue\npages/bar.vue\n# ignore page inside ignore folder\npages/ignore/*.vue\n\n# ignore route middleware files under foo folder except foo/bar.js\nmiddleware/foo/*.js\n!middleware/foo/bar.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt to Transpile Libraries\nDESCRIPTION: Example of how to configure Nuxt to transpile specific libraries that may not be ESM-compatible, allowing them to be used in a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  build: {\n    transpile: ['sample-library']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Type Declarations in Nuxt Module\nDESCRIPTION: Demonstrates how to add TypeScript type declarations to a Nuxt project using addTypeTemplate utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtModule, addTemplate, addTypeTemplate } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup (options, nuxt) {\n    addTypeTemplate({\n      filename: 'types/my-module.d.ts',\n      getContents: () => `// Generated by my-module\n        interface MyModuleNitroRules {\n          myModule?: { foo: 'bar' }\n        }\n        declare module 'nitro/types' {\n          interface NitroRouteRules extends MyModuleNitroRules {}\n          interface NitroRouteConfig extends MyModuleNitroRules {}\n        }\n        export {}`\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: JetBrains IDEs Debug Configuration for Nuxt\nDESCRIPTION: XML configuration file for setting up debugging in JetBrains IDEs like IntelliJ, WebStorm, or PhpStorm. Includes configurations for both client and server debugging.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/9.debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<component name=\"ProjectRunConfigurationManager\">\n  <configuration default=\"false\" name=\"client: chrome\" type=\"JavascriptDebugType\" uri=\"http://localhost:3000\" useFirstLineBreakpoints=\"true\">\n    <method v=\"2\" />\n  </configuration>\n\n  <configuration default=\"false\" name=\"server: nuxt\" type=\"NodeJSConfigurationType\" application-parameters=\"dev\" path-to-js-file=\"$PROJECT_DIR$/node_modules/nuxt/bin/nuxt.mjs\" working-dir=\"$PROJECT_DIR$\">\n    <method v=\"2\" />\n  </configuration>\n\n  <configuration default=\"false\" name=\"fullstack: nuxt\" type=\"CompoundRunConfigurationType\">\n    <toRun name=\"client: chrome\" type=\"JavascriptDebugType\" />\n    <toRun name=\"server: nuxt\" type=\"NodeJSConfigurationType\" />\n    <method v=\"2\" />\n  </configuration>\n</component>\n```\n\n----------------------------------------\n\nTITLE: Defining addPlugin Function Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the addPlugin function and its associated interfaces. It specifies the function signature, plugin object structure, and options for adding plugins.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/9.plugins.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addPlugin (plugin: NuxtPlugin | string, options: AddPluginOptions): NuxtPlugin\n\ninterface NuxtPlugin {\n  src: string\n  mode?: 'all' | 'server' | 'client'\n  order?: number\n}\n\ninterface AddPluginOptions { append?: boolean }\n```\n\n----------------------------------------\n\nTITLE: Module File Resolution with import.meta.url in Nuxt\nDESCRIPTION: Demonstrates how to use import.meta.url with createResolver to handle file paths within Nuxt modules. The example shows setting up a module that registers a component using relative path resolution.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/6.advanced/2.import-meta.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver } from 'nuxt/kit'\n\n// Resolve relative from the current file\nconst resolver = createResolver(import.meta.url)\n\nexport default defineNuxtModule({\n  meta: { name: 'myModule' },\n  setup() {\n    addComponent({\n      name: 'MyModuleComponent',\n      // Resolves to '/modules/my-module/components/MyModuleComponent.vue'\n      filePath: resolver.resolve('./components/MyModuleComponent.vue')\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening a Page in a New Tab with navigateTo (Vue)\nDESCRIPTION: Demonstrates how to use navigateTo to open a page in a new tab, specifying window features like width and height.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/navigate-to.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// will open 'https://nuxt.com' in a new tab\nawait navigateTo('https://nuxt.com', {\n  open: {\n    target: '_blank',\n    windowFeatures: {\n      width: 500,\n      height: 500\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nuxt App Context in Vue Component\nDESCRIPTION: Demonstrates how to use the useNuxtApp composable within a Vue component's setup function to access the Nuxt application context.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst nuxtApp = useNuxtApp()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using defineRouteRules in a Vue Page Component\nDESCRIPTION: This example shows how to use the defineRouteRules composable in a Vue page component to enable prerendering for that specific page. When used in pages/index.vue, this will prerender the home page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-route-rules.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndefineRouteRules({\n  prerender: true\n})\n</script>\n\n<template>\n  <h1>Hello world!</h1>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Relative Time Formatting with NuxtTime\nDESCRIPTION: Demonstrates how to enable relative time formatting to display time differences in a human-readable format.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- Shows something like \"5 minutes ago\" -->\n  <NuxtTime :datetime=\"Date.now() - 5 * 60 * 1000\" relative />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Module for Nuxt\nDESCRIPTION: This command installs the ESLint module for Nuxt using nuxi. Running this command will add ESLint support to your Nuxt project, generating an eslint.config.mjs file at the project root that can be customized.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/9.code-style.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add eslint\n```\n\n----------------------------------------\n\nTITLE: Enabling CookieStore Support in Nuxt\nDESCRIPTION: Configuration to enable CookieStore support for listening to cookie updates and refreshing useCookie ref values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    cookieStore: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending from Private GitHub Repository with Authentication\nDESCRIPTION: Example of extending a Nuxt application from a private GitHub repository by providing an authentication token in the configuration options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/14.layers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    // per layer configuration\n    ['github:my-themes/private-awesome', { auth: process.env.GITHUB_TOKEN }]\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Page Reference Implementation\nDESCRIPTION: Shows how to access and use page component references in Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/2.nuxt-page.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst page = ref()\n\nfunction logFoo () {\n  page.value.pageRef.foo()\n}\n</script>\n\n<template>\n  <NuxtPage ref=\"page\" />\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst foo = () => {\n  console.log('foo method called')\n}\n\ndefineExpose({\n  foo,\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for useState\nDESCRIPTION: The type definition for the useState composable showing its function signatures. It supports generic typing and can be called with or without a key parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-state.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseState<T>(init?: () => T | Ref<T>): Ref<T>\nuseState<T>(key: string, init?: () => T | Ref<T>): Ref<T>\n```\n\n----------------------------------------\n\nTITLE: Customizing Scroll Behavior for Hash Links in Nuxt\nDESCRIPTION: This configuration customizes the scroll behavior for hash links by setting the scrollBehaviorType to 'smooth'. When this is enabled and a page is loaded with a hash link, the browser will smoothly scroll to the anchor instead of jumping to it.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  router: {\n    options: {\n      scrollBehaviorType: 'smooth'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SPA Loading Template DOM Location Before and After\nDESCRIPTION: Shows how the SPA loading template DOM location has changed, now being placed outside the Nuxt root element instead of inside it.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"__nuxt\">\n  <!-- spa loading template -->\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"__nuxt\"></div>\n<!-- spa loading template -->\n```\n\n----------------------------------------\n\nTITLE: Optimizing CSS Loading with Build Hooks\nDESCRIPTION: Advanced configuration for optimizing CSS loading by removing entry CSS files using Nuxt build hooks.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  hooks: {\n    'build:manifest': (manifest) => {\n      const css = Object.values(manifest).find(options => options.isEntry)?.css\n      if (css) {\n        for (let i = css.length - 1; i >= 0; i--) {\n          if (css[i].startsWith('entry')) css.splice(i, 1)\n        }\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Opting In to Nuxt Nightly Release Channel\nDESCRIPTION: This snippet shows how to update the package.json file to use the nightly release channel for Nuxt. It changes the 'nuxt' dependency to use the nightly version tracking the 3.x branch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/11.nightly-release-channel.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n--    \"nuxt\": \"^3.0.0\"\n++    \"nuxt\": \"npm:nuxt-nightly@3x\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Middleware Directory Structure Example\nDESCRIPTION: This bash snippet shows the typical directory structure for organizing middleware files in a Nuxt project, with both global and named middleware files.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-| middleware/\n---| analytics.global.ts\n---| setup.global.ts\n---| auth.ts\n```\n\n----------------------------------------\n\nTITLE: Using callOnce for One-Time Execution in Vue 3\nDESCRIPTION: This snippet demonstrates how to use callOnce to execute code only once, either on the server or client. It's useful for operations like logging or setting up global state that should not be repeated.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/call-once.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst websiteConfig = useState('config')\n\nawait callOnce(async () => {\n  console.log('This will only be logged once')\n  websiteConfig.value = await $fetch('https://my-cms.com/api/website-config')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview Mode in a Vue Component\nDESCRIPTION: Demonstrates a full example of using usePreviewMode in a Vue component, including conditional rendering and disabling preview mode.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-preview-mode.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { enabled, state } = usePreviewMode()\n\nconst { data } = await useFetch('/api/preview', {\n  query: {\n    apiKey: state.token\n  }\n})\n</script>\n\n<template>\n  <div>\n    Some base content\n    <p v-if=\"enabled\">\n      Only preview content: {{ state.token }}\n      <br>\n      <button @click=\"enabled = false\">\n        disable preview mode\n      </button>\n    </p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Prerendering with Routes\nDESCRIPTION: Configuring Nitro to prerender specific routes and ignore others during the build process using the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    prerender: {\n      routes: [\"/user/1\", \"/user/2\"],\n      ignore: [\"/dynamic\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Error Properties in Script with NuxtErrorBoundary in Vue\nDESCRIPTION: Example demonstrating how to access the error object and clearError function within the component's script section using a template ref. This allows for programmatic error handling outside the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/6.nuxt-error-boundary.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtErrorBoundary ref=\"errorBoundary\">\n    <!-- ... -->\n  </NuxtErrorBoundary>\n</template>\n\n<script setup lang=\"ts\">\nconst errorBoundary = useTemplateRef('errorBoundary')\n\n// errorBoundary.value?.error\n// errorBoundary.value?.clearError()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Vitest Configuration for Nuxt\nDESCRIPTION: Setting up a vitest.config.ts file using defineVitestConfig from @nuxt/test-utils/config. This allows for custom Vitest configuration tailored for Nuxt testing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineVitestConfig } from '@nuxt/test-utils/config'\n\nexport default defineVitestConfig({\n  // any custom Vitest config you require\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Syntax Nuxt Plugin\nDESCRIPTION: Demonstrates how to create a Nuxt plugin using the object syntax for more advanced use cases.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.plugins.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin({\n  name: 'my-plugin',\n  enforce: 'pre', // or 'post'\n  async setup (nuxtApp) {\n    // this is the equivalent of a normal functional plugin\n  },\n  hooks: {\n    // You can directly register Nuxt app runtime hooks here\n    'app:created'() {\n      const nuxtApp = useNuxtApp()\n      // do something in the hook\n    }\n  },\n  env: {\n    // Set this value to `false` if you don't want the plugin to run when rendering server-only or island components.\n    islands: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring renderJsonPayloads in Nuxt Configuration\nDESCRIPTION: Allows rendering of JSON payloads with support for revivifying complex types. This feature is enabled by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    renderJsonPayloads: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Transitions in Nuxt Config\nDESCRIPTION: Setting up automatic page transitions for all pages in the application using the nuxt.config.ts file. This configuration applies the 'page' transition with 'out-in' mode to all page navigations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    pageTransition: { name: 'page', mode: 'out-in' }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using callOnce in Navigation Mode for Vue 3\nDESCRIPTION: This example shows how to use callOnce in 'navigation' mode, which executes the code once initially and then on every client-side navigation. This is useful for refreshing data on each navigation while avoiding the initial server/client double load.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/call-once.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst websiteConfig = useState('config')\n\nawait callOnce(async () => {\n  console.log('This will only be logged once and then on every client side navigation')\n  websiteConfig.value = await $fetch('https://my-cms.com/api/website-config')\n}, { mode: 'navigation' })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Nightly Version of Nuxt CLI (nuxi)\nDESCRIPTION: This command shows how to use the latest nightly version of the Nuxt CLI (nuxi) directly via npx. It allows access to the most recent CLI improvements and dependency updates.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/11.nightly-release-channel.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi-nightly@latest [command]\n```\n\n----------------------------------------\n\nTITLE: Configuring externalVue in Nuxt Configuration\nDESCRIPTION: Externalizes 'vue', '@vue/*' and 'vue-router' when building. This feature is enabled by default but may be removed in the future.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    externalVue: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling viewTransition in Nuxt Configuration\nDESCRIPTION: Enables View Transition API integration with client-side router for smooth page transitions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    viewTransition: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Site Config Requirements\nDESCRIPTION: Example showing how to safely access site configuration using tryUseNuxt with fallback handling.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/6.context.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tryUseNuxt } from '@nuxt/kit'\n\ninterface SiteConfig {\n  title: string\n}\n\nexport const requireSiteConfig = (): SiteConfig => {\n  const nuxt = tryUseNuxt()\n  if (!nuxt) {\n    return { title: null }\n  }\n  return nuxt.options.siteConfig\n}\n```\n\n----------------------------------------\n\nTITLE: Error Layout Implementation\nDESCRIPTION: Example of implementing an error layout using kebab-case naming convention\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/3.nuxt-layout.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLayout name=\"error-layout\">\n    <NuxtPage />\n  </NuxtLayout>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Middleware in Nuxt 3\nDESCRIPTION: Shows how to create route middleware using the new Nuxt 3 format. The middleware accepts 'to' and 'from' parameters and implements a simple navigation redirect.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/4.plugins-and-middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to) => {\n  if (to.path !== '/') {\n    return navigateTo('/')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Template Params with useHead\nDESCRIPTION: Demonstrates the use of templateParams to provide additional placeholders in the titleTemplate. This allows for more dynamic title generation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseHead({\n  titleTemplate: (titleChunk) => {\n    return titleChunk ? `${titleChunk} %separator %siteName` : '%siteName';\n  },\n  templateParams: {\n    siteName: 'Site Title',\n    separator: '-'\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for useHeadSafe\nDESCRIPTION: TypeScript type definition showing the function signature for useHeadSafe composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-head-safe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuseHeadSafe(input: MaybeComputedRef<HeadSafe>): void\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Nuxt Component Library\nDESCRIPTION: Shows the typical directory structure of a Nuxt project with a component library named 'awesome-ui' in node_modules.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n-| node_modules/\n---| awesome-ui/\n-----| components/\n-------| Alert.vue\n-------| Button.vue\n-----| nuxt.ts\n-| pages/\n---| index.vue\n-| nuxt.config.ts\n```\n\n----------------------------------------\n\nTITLE: Defining assertNuxtCompatibility Function and NuxtCompatibility Interface in TypeScript\nDESCRIPTION: This snippet defines the assertNuxtCompatibility function and the NuxtCompatibility interface. It shows the function signature and the structure of the constraints object used for asserting Nuxt compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/3.compatibility.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function assertNuxtCompatibility(\n  constraints: NuxtCompatibility,\n  nuxt?: Nuxt\n): Promise<true>;\n\ninterface NuxtCompatibility {\n  nuxt?: string;\n  bridge?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic usage of useLoadingIndicator in Vue with TypeScript\nDESCRIPTION: Example showing how to use the useLoadingIndicator composable with custom configuration parameters for duration, throttle, and a custom progress calculation function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-loading-indicator.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  const { progress, isLoading, start, finish, clear } = useLoadingIndicator({\n    duration: 2000,\n    throttle: 200,\n    // This is how progress is calculated by default\n    estimatedProgress: (duration, elapsed) => (2 / Math.PI * 100) * Math.atan(elapsed / duration * 100 / 50)\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using abortNavigation with String Error\nDESCRIPTION: Example of using abortNavigation with a string error message in a route middleware to provide a custom error message when aborting navigation due to insufficient permissions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/abort-navigation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  const user = useState('user')\n\n  if (!user.value.isAuthorized) {\n    return abortNavigation('Insufficient permissions.')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring useLogger with Options in a Nuxt Module\nDESCRIPTION: This example shows how to use the `useLogger` function with custom options in a Nuxt module. It sets the logging level based on a 'quiet' option, demonstrating more advanced configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/13.logging.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, useLogger } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const logger = useLogger('my-module', { level: options.quiet ? 0 : 3 })\n\n    logger.info('Hello from my module!')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a VueFire Plugin Template in Nuxt\nDESCRIPTION: This snippet shows the implementation of a Nuxt plugin template for VueFire. It uses conditional rendering based on SSR option and handles both server-side and client-side initialization of VueFire.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/9.plugins.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VueFire, useSSRInitialState } from 'vuefire'\nimport { defineNuxtPlugin } from '#imports'\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const firebaseApp = nuxtApp.$firebaseApp\n\n  nuxtApp.vueApp.use(VueFire, { firebaseApp })\n\n  <% if(options.ssr) { %>\n  if (import.meta.server) {\n    nuxtApp.payload.vuefire = useSSRInitialState(undefined, firebaseApp)\n  } else if (nuxtApp.payload?.vuefire) {\n    useSSRInitialState(nuxtApp.payload.vuefire, firebaseApp)\n  }\n  <% } %>\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of usePreviewMode in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the usePreviewMode composable, returning the enabled state and preview state object.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-preview-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { enabled, state } = usePreviewMode()\n```\n\n----------------------------------------\n\nTITLE: Custom Props in NuxtLayout\nDESCRIPTION: Demonstration of passing and accessing custom props in layouts\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/3.nuxt-layout.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtLayout name=\"custom\" title=\"I am a custom layout\">\n      <-- ... -->\n    </NuxtLayout>\n  </div>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst layoutCustomProps = useAttrs()\n\nconsole.log(layoutCustomProps.title) // I am a custom layout\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Robots.txt Server Handler\nDESCRIPTION: Example showing how to add a server handler for robots.txt route using Nuxt Kit\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, addServerHandler } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options) {\n    const resolver = createResolver(import.meta.url)\n\n    addServerHandler({\n      route: '/robots.txt',\n      handler: resolver.resolve('./runtime/robots.get')\n    })\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(() => {\n  return {\n    body: `User-agent: *\\nDisallow: /`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Page Meta Extraction\nDESCRIPTION: Example of defining and extracting additional page metadata keys in Nuxt configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_21\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\ndefinePageMeta({\n  foo: 'bar'\n})\n</script>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    extraPageMetaExtractionKeys: ['foo'],\n  },\n  hooks: {\n    'pages:resolved' (ctx) {\n      // ✅ foo is available\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Example\nDESCRIPTION: Example of creating a new plugin file in the plugins directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add plugin analytics\n```\n\n----------------------------------------\n\nTITLE: Migrating from require.resolve to mlly in ESM\nDESCRIPTION: Example of how to replace the CommonJS require.resolve function with the ESM-compatible mlly library for resolving module paths.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst someFile = require.resolve('./lib/foo.js')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { resolvePath } from 'mlly'\n\nconst someFile = await resolvePath('my-lib', { url: import.meta.url })\n```\n\n----------------------------------------\n\nTITLE: Enabling restoreState in Nuxt Configuration\nDESCRIPTION: Allows Nuxt app state to be restored from sessionStorage when reloading the page after a chunk error or manual reloadNuxtApp() call. May cause hydration errors if not configured properly.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    restoreState: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Typing App Config Output in TypeScript\nDESCRIPTION: This TypeScript declaration file extends the AppConfig interface to add specific types for the theme configuration, including string literal types for the primary color.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'nuxt/schema' {\n  interface AppConfig {\n    // This will entirely replace the existing inferred `theme` property\n    theme: {\n      // You might want to type this value to add more specific types than Nuxt can infer,\n      // such as string literal types\n      primaryColor?: 'red' | 'blue'\n    }\n  }\n}\n\n// It is always important to ensure you import/export something when augmenting a type\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Configuration in nuxt.config.ts\nDESCRIPTION: This snippet demonstrates the equivalent configuration in nuxt.config.ts that would be generated from the defineRouteRules usage in the page component. It explicitly sets the route rule for the root path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-route-rules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  routeRules: {\n    '/': { prerender: true }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Index Page with TypeScript Render Function\nDESCRIPTION: An alternative approach to creating an index page using TypeScript with a render function instead of a template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// https://vuejs.org/guide/extras/render-function.html\nexport default defineComponent({\n  render () {\n    return h('h1', 'Index page')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Nuxi Dev Command in Bash\nDESCRIPTION: This command starts a Nuxt.js development server with various configuration options. It allows specifying the root directory, working directory, log level, environment settings, and server options like port, host, and HTTPS.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/dev.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi dev [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--dotenv] [--envName] [--no-clear] [--no-fork] [-p, --port] [-h, --host] [--clipboard] [-o, --open] [--https] [--publicURL] [--qr] [--public] [--tunnel] [--sslCert] [--sslKey]\n```\n\n----------------------------------------\n\nTITLE: Multiple Relative Time Examples\nDESCRIPTION: Shows different time intervals in relative format, demonstrating past and future time representations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <p>\n      <NuxtTime :datetime=\"Date.now() - 30 * 1000\" relative />\n      <!-- 30 seconds ago -->\n    </p>\n    <p>  \n      <NuxtTime :datetime=\"Date.now() - 45 * 60 * 1000\" relative />\n      <!-- 45 minutes ago -->\n    </p>\n    <p>\n      <NuxtTime :datetime=\"Date.now() + 2 * 24 * 60 * 60 * 1000\" relative />\n      <!-- in 2 days -->\n    </p>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for defineNuxtRouteMiddleware in TypeScript\nDESCRIPTION: Type definition showing the function signature and interface for route middleware in Nuxt. The middleware function takes two route location objects as parameters and returns a value compatible with Vue Router's NavigationGuard.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/define-nuxt-route-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndefineNuxtRouteMiddleware(middleware: RouteMiddleware) => RouteMiddleware\n\ninterface RouteMiddleware {\n  (to: RouteLocationNormalized, from: RouteLocationNormalized): ReturnType<NavigationGuard>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code ESLint Settings\nDESCRIPTION: VS Code settings configuration to enable ESLint auto-fix functionality when saving files. This setup helps maintain consistent code formatting using ESLint.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/4.contribution.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": \"never\",\n    \"source.fixAll.eslint\": \"explicit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addImportsSources Function\nDESCRIPTION: TypeScript type definition showing the function signature and parameter types for the addImportsSources utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/4.autoimports.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addImportsSources (importSources: ImportSource | ImportSource[]): void\n```\n\n----------------------------------------\n\nTITLE: Traditional State Hydration Implementation in Nuxt Plugin\nDESCRIPTION: Example showing state hydration implementation without using useHydration composable, using direct hook manipulation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-hydration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  const myStore = new MyStore()\n\n  if (import.meta.server) {\n    nuxt.hooks.hook('app:rendered', () => {\n      nuxtApp.payload.myStoreState = myStore.getState()\n    })\n  }\n\n  if (import.meta.client) {\n    nuxt.hooks.hook('app:created', () => {\n      myStore.setState(nuxtApp.payload.myStoreState)\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Playwright Page Instance for Browser Testing in Nuxt\nDESCRIPTION: Demonstrates creating a configured Playwright browser page instance that can be used for testing within Vitest, Jest, or Cucumber test frameworks.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPage } from '@nuxt/test-utils/e2e'\n\nconst page = await createPage('/page')\n// you can access all the Playwright APIs from the `page` variable\n```\n\n----------------------------------------\n\nTITLE: Customizing Enable and Disable Callbacks in usePreviewMode\nDESCRIPTION: Shows how to provide custom onEnable and onDisable callbacks to usePreviewMode for custom behavior when preview mode is toggled.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-preview-mode.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { enabled, state } = usePreviewMode({\n  onEnable: () => {\n    console.log('preview mode has been enabled')\n  },\n  onDisable: () => {\n    console.log('preview mode has been disabled')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Config in Nuxt 3\nDESCRIPTION: Define runtime configuration in nuxt.config.ts. This includes both server-only (private) and client-accessible (public) configuration options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/8.runtime-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  runtimeConfig: {\n    // Private config that is only available on the server\n    apiSecret: '123',\n    // Config within public will be also exposed to the client\n    public: {\n      apiBase: '/api'\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using static assets from public directory in Vue components\nDESCRIPTION: This Vue component demonstrates how to reference files from the public directory in Nuxt. The example shows setting an Open Graph image meta tag with an image file stored in the public directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.public.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseSeoMeta({\n  ogImage: '/og-image.png'\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using abortNavigation with Error Object\nDESCRIPTION: Example of using abortNavigation with an Error object caught in a try-catch block, allowing propagation of existing errors when aborting navigation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/abort-navigation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtRouteMiddleware((to, from) => {\n  try {\n    /* code that might throw an error */\n  } catch (err) {\n    return abortNavigation(err)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CommonJS Default Export\nDESCRIPTION: Example of how CommonJS modules can provide a default export using module.exports or exports, which is important for understanding interoperability between CJS and ESM.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = { test: 123 }\n// or\nexports.test = 123\n```\n\n----------------------------------------\n\nTITLE: Implementing App Hooks in a Nuxt Plugin\nDESCRIPTION: Example of registering runtime hooks within a Nuxt plugin. App hooks allow you to hook into the rendering lifecycle of your application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/2.hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.hook('page:start', () => {\n    /* your code goes here */\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Nuxt Compatibility Version\nDESCRIPTION: Configuration for enabling Nuxt v4 behavior and features while maintaining the ability to granularly re-enable Nuxt v3 behavior for testing purposes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.features.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  future: {\n    compatibilityVersion: 4,\n  },\n  // To re-enable _all_ Nuxt v3 behaviour, set the following options:\n  srcDir: '.',\n  dir: {\n    app: 'app'\n  },\n  experimental: {\n    scanPageMeta: 'after-resolve',\n    sharedPrerenderData: false,\n    compileTemplate: true,\n    resetAsyncDataToUndefined: true,\n    templateUtils: true,\n    relativeWatchPaths: true,\n    normalizeComponentNames: false\n    defaults: {\n      useAsyncData: {\n        deep: true\n      }\n    }\n  },\n  features: {\n    inlineStyles: true\n  },\n  unhead: {\n    renderSSRHeadOptions: {\n      omitLineBreaks: false\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing Nuxt 3 Directory Structure in Nuxt.config.ts\nDESCRIPTION: Configuration to revert to the Nuxt 3 directory structure when migrating to Nuxt 4. Sets srcDir back to root directory and specifies the app directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // This reverts the new srcDir default from `app` back to your root directory\n  srcDir: '.',\n  // This specifies the directory prefix for `app/router.options.ts` and `app/spa-loading-template.html`\n  dir: {\n    app: 'app'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Configuration Type Definition\nDESCRIPTION: TypeScript type definition for the extendWebpackConfig function and its options interface.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extendWebpackConfig (callback: ((config: WebpackConfig) => void), options?: ExtendWebpackConfigOptions): void\n\nexport interface ExtendWebpackConfigOptions {\n  dev?: boolean\n  build?: boolean\n  server?: boolean\n  client?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getCachedData Implementation for useAsyncData\nDESCRIPTION: Shows how to update the getCachedData function to support the new context parameter which includes cause information indicating why the data is being fetched.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\nuseAsyncData('key', fetchFunction, {\n-  getCachedData: (key, nuxtApp) => {\n-    return cachedData[key]\n-  }\n+  getCachedData: (key, nuxtApp, ctx) => {\n+    // ctx.cause - can be 'initial' | 'refresh:hook' | 'refresh:manual' | 'watch'\n+    \n+    // Example: Don't use cache on manual refresh\n+    if (ctx.cause === 'refresh:manual') return undefined\n+    \n+    return cachedData[key]\n+  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Vuelidate Plugin for Nuxt 3 Compatibility\nDESCRIPTION: This snippet demonstrates how to modify a Vuelidate plugin to ensure compatibility with Nuxt 3. It adds a default export function to the existing plugin code.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/20.module-authors.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue'\nimport Vuelidate from 'vuelidate'\n\nVue.use(Vuelidate)\n\nexport default () => { }\n```\n\n----------------------------------------\n\nTITLE: Updating Templates in Nuxt Module\nDESCRIPTION: Shows how to update templates and virtual files using the updateTemplates utility within a builder:watch hook.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nnuxt.hook('builder:watch', async (event, path) => {\n  if (path.includes('my-module-feature.config')) {\n    // This will reload the template that you registered\n    updateTemplates({ filter: t => t.filename === 'my-module-feature.mjs' })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Component Directory with Nuxt Module\nDESCRIPTION: Example of using addComponentsDir within a Nuxt module to register a component directory with custom prefix and path settings.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/5.components.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtModule({\n  meta: {\n    name: '@nuxt/ui',\n    configKey: 'ui',\n  },\n  setup() {\n    addComponentsDir({\n      path: resolve('./runtime/components'),\n      prefix: 'U',\n      pathPrefix: false\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Component Directories in a Nuxt Module\nDESCRIPTION: This snippet shows how to add an entire directory of Vue components to a Nuxt application using the addComponentsDir utility from @nuxt/kit.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addComponentsDir } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    addComponentsDir({\n      path: resolver.resolve('runtime/components')\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports in package.json\nDESCRIPTION: Example of using the exports field in package.json to define conditional exports for ES modules. This configuration specifies the entry point for ES module imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \".\": {\n      \"import\": \"./dist/mymodule.mjs\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Styles Behavior in Nuxt Config\nDESCRIPTION: Configuration option to revert to the previous behavior of inlining all CSS, including global styles, instead of just Vue component styles.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  features: {\n    inlineStyles: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling sharedPrerenderData in Nuxt Configuration\nDESCRIPTION: Automatically shares payload data between prerendered pages, significantly improving performance for sites that fetch the same data in different pages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    sharedPrerenderData: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing App Configuration in Vue Component\nDESCRIPTION: This code shows how to access the app configuration within a Vue component using the useAppConfig composable in Nuxt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst appConfig = useAppConfig()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Response Data from Server-Rendered Pages in Nuxt\nDESCRIPTION: Shows how to use the fetch API from Nuxt Test Utils to get the full response (including headers and body) from a server-rendered page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fetch } from '@nuxt/test-utils/e2e'\n\nconst res = await fetch('/')\nconst { body, headers } = res\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Server Routes in a Nuxt Module\nDESCRIPTION: This snippet shows how to add a dynamic server route with parameters to a Nuxt application from a module using the addServerHandler utility from @nuxt/kit.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addServerHandler, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    addServerHandler({\n      route: '/api/hello/:name',\n      handler: resolver.resolve('./runtime/server/api/hello/[name].get')\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Overwriting Array in Main App Configuration\nDESCRIPTION: This TypeScript file shows how to overwrite the default array value in the main app.config.ts file using a merger function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  // Overwrite default array value by using a merger function\n  array: () => ['bonjour'],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PM2 for Nuxt Deployment\nDESCRIPTION: PM2 configuration file (ecosystem.config.cjs) for deploying a Nuxt application. It sets up the app name, port, execution mode, and script path for optimal performance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/16.deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nmodule.exports = {\n  apps: [\n    {\n      name: 'NuxtAppName',\n      port: '3000',\n      exec_mode: 'cluster',\n      instances: 'max',\n      script: './.output/server/index.mjs'\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Router in Vue Template (Vue)\nDESCRIPTION: Shows how to access the router instance directly in a Vue template using $router.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-router.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <button @click=\"$router.back()\">Back</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Showing public directory structure in Nuxt\nDESCRIPTION: This snippet demonstrates the typical file structure of the public/ directory in a Nuxt project, containing common static files like favicon.ico, og-image.png, and robots.txt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.public.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-| public/\n---| favicon.ico\n---| og-image.png\n---| robots.txt\n```\n\n----------------------------------------\n\nTITLE: Normalizing Component Names in Nuxt\nDESCRIPTION: Configuration to ensure auto-generated Vue component names match the full component name used for auto-importing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    normalizeComponentNames: true\n  }\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\n├─ components/\n├─── SomeFolder/\n├───── MyComponent.vue\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Bridge with NPM\nDESCRIPTION: Command to install Nuxt Bridge and Nuxi as development dependencies using NPM.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @nuxt/bridge nuxi\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Composables Scanner\nDESCRIPTION: Nuxt configuration for scanning nested directories inside the composables folder.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.composables.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  imports: {\n    dirs: [\n      'composables',\n      'composables/*/index.{ts,js,mjs,mts}',\n      'composables/**'\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using createResolver in Pinia Nuxt Module\nDESCRIPTION: Example showing how createResolver is used in the Pinia Nuxt module to resolve plugin paths based on Vue version.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/12.resolving.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// https://github.com/vuejs/pinia/blob/v2/packages/nuxt\nimport {\n  defineNuxtModule,\n  isNuxt2,\n  createResolver,\n} from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    nuxt.hook('modules:done', () => {\n      if (isNuxt2()) {\n        addPlugin(resolver.resolve('./runtime/plugin.vue2'))\n      } else {\n        addPlugin(resolver.resolve('./runtime/plugin.vue3'))\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Export Utility Function in Nuxt\nDESCRIPTION: This example shows how to create a utility function using default export in a dedicated file. The function returns a random element from an array and will be auto-imported with the camelCase name of the file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.utils.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// It will be available as randomEntry() (camelCase of file name without extension)\nexport default function (arr: Array<any>) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Storage in Nuxt.js\nDESCRIPTION: Configuration for adding a Redis storage mount point in a Nuxt application. It shows how to set up Redis connection parameters in the Nitro storage configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    storage: {\n      redis: {\n        driver: 'redis',\n        /* redis connector options */\n        port: 6379, // Redis port\n        host: \"127.0.0.1\", // Redis host\n        username: \"\", // needs Redis >= 6\n        password: \"\",\n        db: 0, // Defaults to 0\n        tls: {} // tls/ssl\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Named Fallback Slots in NuxtClientFallback\nDESCRIPTION: Implementation of a named fallback slot to provide more complex fallback content when server-side rendering fails.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.nuxt-client-fallback.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtClientFallback>\n    <!-- ... -->\n    <template #fallback>\n      <!-- this will be rendered on server side if the default slot fails to render in ssr -->\n      <p>Hello world</p>\n    </template>\n  </NuxtClientFallback>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Nuxt Nightly Release Channel\nDESCRIPTION: This snippet demonstrates how to revert from the nightly release channel back to the stable version of Nuxt. It updates the 'nuxt' dependency in package.json to use the latest stable 3.x version.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/11.nightly-release-channel.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"devDependencies\": {\n--    \"nuxt\": \"npm:nuxt-nightly@3x\"\n++    \"nuxt\": \"^3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript Bundler Resolution\nDESCRIPTION: Configuration for enabling 'Bundler' module resolution mode in TypeScript, which improves type support for modern libraries with exports and is recommended for Nuxt and Vite.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.features.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  future: {\n    typescriptBundlerResolution: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Shared Prerender Data Configuration\nDESCRIPTION: Configuration to disable the shared prerender data feature in Nuxt config.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    sharedPrerenderData: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring watcher in Nuxt Configuration\nDESCRIPTION: Sets an alternative file watching service for Nuxt. Options include 'chokidar-granular' (default), 'parcel' (better for large projects), or 'chokidar' (watches all files).\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    watcher: 'chokidar-granular' // 'chokidar' or 'parcel' are also options\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending from npm packages in Nuxt configuration\nDESCRIPTION: Demonstrates how to extend from Nuxt layers published as npm packages, including packages with and without scopes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    // Node Module with scope\n    '@scope/moduleName',\n    // or just the module name\n    'moduleName'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating named layer aliases in Nuxt configuration\nDESCRIPTION: Shows how to create a named alias for a layer using the $meta.name property, which generates an alias accessible via #layers/example.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  $meta: {\n    name: 'example',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack and Vue Loader in Nuxt\nDESCRIPTION: This code snippet shows how to configure webpack and vue-loader options within the Nuxt configuration file when using webpack as the builder.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  webpack: {\n    loaders: {\n      vue: {\n        hotReload: true,\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Granular Cached Data Features in Nuxt Config\nDESCRIPTION: Configuration options to disable the new granularCachedData and purgeCachedData features if needed for backward compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    granularCachedData: false,\n    purgeCachedData: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Nitro Instance Access Example\nDESCRIPTION: Example showing how to access and configure the Nitro instance\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, useNitro, addPlugin, createResolver } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const resolver = createResolver(import.meta.url)\n\n    nuxt.hook('ready', () => {\n      const nitro = useNitro()\n      if (nitro.options.static && nuxt.options.experimental.payloadExtraction === undefined) {\n        console.warn('Using experimental payload extraction for full-static output. You can opt-out by setting `experimental.payloadExtraction` to `false`.')\n        nuxt.options.experimental.payloadExtraction = true\n      }\n      nitro.options.replace['process.env.NUXT_PAYLOAD_EXTRACTION'] = String(!!nuxt.options.experimental.payloadExtraction)\n      nitro.options._config.replace!['process.env.NUXT_PAYLOAD_EXTRACTION'] = String(!!nuxt.options.experimental.payloadExtraction)\n\n      if (!nuxt.options.dev && nuxt.options.experimental.payloadExtraction) {\n        addPlugin(resolver.resolve(nuxt.options.appDir, 'plugins/payload.client'))\n      }\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-imports Configuration\nDESCRIPTION: Nuxt configuration to disable auto-imports functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  imports: {\n    autoImport: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Bridge with Yarn\nDESCRIPTION: Command to install Nuxt Bridge and Nuxi as development dependencies using Yarn.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @nuxt/bridge nuxi\n```\n\n----------------------------------------\n\nTITLE: Migrating asyncData to useAsyncData in Nuxt 3\nDESCRIPTION: Shows how to replace the Nuxt 2 asyncData hook with the useAsyncData composable in Nuxt 3 for fetching data. The example demonstrates fetching a post from an API using $fetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/7.component-options.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Define params wherever, through `defineProps()`, `useRoute()`, etc.\nconst { data: post, refresh } = await useAsyncData('post', () => $fetch(`https://api.nuxtjs.dev/posts/${params.id}`) )\n// Or instead - useFetch is a convenience wrapper around useAsyncData when you're just performing a simple fetch\nconst { data: post, refresh } = await useFetch(`https://api.nuxtjs.dev/posts/${params.id}`)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Combining Crawler and Manual Routes for Prerendering\nDESCRIPTION: Configuration to crawl links for prerendering while also manually specifying routes that the crawler might not discover, such as sitemap and robots.txt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  nitro: {\n    prerender: {\n      crawlLinks: true,\n      routes: [\"/sitemap.xml\", \"/robots.txt\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for Nuxt Development\nDESCRIPTION: Command to enable Corepack, providing access to pnpm and yarn package managers for Nuxt development.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Page Structure with Comment\nDESCRIPTION: Example of a page with an HTML comment before the root element, which causes issues with client-side navigation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- This page will not render when route changes during client side navigation, because of this comment -->\n  <div>Page content</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking in Nuxt\nDESCRIPTION: Command to run type checking using nuxi CLI.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/8.typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi typecheck\n```\n\n----------------------------------------\n\nTITLE: Starting the loading indicator with force option in Vue with TypeScript\nDESCRIPTION: Example of how to start the loading indicator immediately by using the force option, which skips the interval and shows the loading state right away.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-loading-indicator.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n  const { start, set } = useLoadingIndicator()\n  // same as set(0, { force: true })\n  // set the progress to 0, and show loading immediately\n  start({ force: true })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Hash Mode for SPA in Nuxt\nDESCRIPTION: This configuration enables hash history in SPA mode using the hashMode option. In hash mode, the router uses a hash character (#) before the actual URL, and the URL is never sent to the server, which means SSR is not supported.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/1.custom-routing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  ssr: false,\n  router: {\n    options: {\n      hashMode: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Vue Components\nDESCRIPTION: Shows how to implement CSS Modules in Vue components using the module attribute and accessing styles through the $style variable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Restricting Component File Extensions in Nuxt\nDESCRIPTION: This snippet shows how to restrict which file extensions should be registered as components in Nuxt. It uses the extended form of the components directory declaration with the extensions key.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  components: [\n    {\n      path: '~/components',\n      extensions: ['.vue'], // [!code ++]\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright for Nuxt Testing\nDESCRIPTION: Example Playwright configuration file that sets up Nuxt-specific testing options. This allows defining global Nuxt configuration for all Playwright tests.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\nimport { defineConfig, devices } from '@playwright/test'\nimport type { ConfigOptions } from '@nuxt/test-utils/playwright'\n\nexport default defineConfig<ConfigOptions>({\n  use: {\n    nuxt: {\n      rootDir: fileURLToPath(new URL('.', import.meta.url))\n    }\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Custom Date Formatting Example\nDESCRIPTION: Demonstrates a detailed formatting configuration with multiple options for displaying date and time components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtTime \n    :datetime=\"Date.now()\" \n    weekday=\"long\"\n    year=\"numeric\"\n    month=\"short\"\n    day=\"numeric\"\n    hour=\"numeric\"\n    minute=\"numeric\"\n    second=\"numeric\"\n    timeZoneName=\"short\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Server Scan Directory Configuration\nDESCRIPTION: Example of adding directories for Nitro server scanning\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, createResolver, addServerScanDir } from '@nuxt/kit'\nexport default defineNuxtModule({\n  meta: {\n    name: 'my-module',\n    configKey: 'myModule',\n  },\n  setup(options) {\n    const resolver = createResolver(import.meta.url)\n    addServerScanDir(resolver.resolve('./runtime/server'))\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Parent Component with Custom Page Key for Route Transitions\nDESCRIPTION: Parent component that specifies a custom page key function for the NuxtPage component to control when child routes re-render.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <h1>I am the parent view</h1>\n    <NuxtPage :page-key=\"route => route.fullPath\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using tryUseNuxtApp for Optional Context Access\nDESCRIPTION: Example of using tryUseNuxtApp to handle cases where Nuxt context might not be available, providing a fallback mechanism.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useStandType() {\n  // Always works on the client\n  if (tryUseNuxtApp()) {\n    return useRuntimeConfig().public.STAND_TYPE\n  } else {\n    return process.env.STAND_TYPE\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Processed Asset in Nuxt.js Template\nDESCRIPTION: Example demonstrating how to reference and display an image from the assets directory, which will be processed by the build tool (Vite or webpack) during compilation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/05.assets.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <img src=\"~/assets/img/nuxt.png\" alt=\"Discover Nuxt\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Dev Server Handler Implementation\nDESCRIPTION: Examples of adding development-only server handlers using Nuxt Kit\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver, defineNuxtModule, addDevServerHandler } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    const resolver = createResolver(import.meta.url)\n\n    addDevServerHandler({\n      handler: () => {\n        return {\n          body: `Response generated at ${new Date().toISOString()}`\n        }\n      },\n      route: '/_handler'\n    })\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { joinURL } from 'ufo'\nimport { defineNuxtModule, addDevServerHandler } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  async setup(options) {\n    const route = joinURL(nuxt.options.app?.baseURL, '/_tailwind')\n\n    // @ts-ignore\n    const createServer = await import('tailwind-config-viewer/server/index.js').then(r => r.default || r) as any\n    const viewerDevMiddleware = createServer({ tailwindConfigProvider: () => options, routerPrefix: route }).asMiddleware()\n\n    addDevServerHandler({ route, handler: viewerDevMiddleware })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Static Target Script Configuration\nDESCRIPTION: Package.json script configuration for static site generation using Nuxi.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/8.nitro.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"nuxi generate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters in Server Routes\nDESCRIPTION: Shows how to create a dynamic API route with parameters in the filename and access them using getRouterParam.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const name = getRouterParam(event, 'name')\n\n  return `Hello, ${name}!`\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Runtime Config\nDESCRIPTION: Demonstrates how to set environment variables that will be injected into the runtime config at runtime.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.server.md#2025-04-22_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\nNUXT_GITHUB_TOKEN='<my-super-token>'\n```\n\n----------------------------------------\n\nTITLE: Activating Passive Development System for Nuxt\nDESCRIPTION: Command to prepare the development environment for Nuxt, activating the passive development system.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev:prepare\n```\n\n----------------------------------------\n\nTITLE: Defining Default Array in Layer Configuration\nDESCRIPTION: This TypeScript file demonstrates how to define a default array value in a layer's app.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/3.app-config.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineAppConfig({\n  // Default array value\n  array: ['hello'],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining checkNuxtCompatibility Function and Related Interfaces in TypeScript\nDESCRIPTION: This snippet defines the checkNuxtCompatibility function and related interfaces for checking Nuxt version compatibility. It includes types for constraints, compatibility issues, and the function signature.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/3.compatibility.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function checkNuxtCompatibility(\n  constraints: NuxtCompatibility,\n  nuxt?: Nuxt\n): Promise<NuxtCompatibilityIssues>;\n\ninterface NuxtCompatibility {\n  nuxt?: string;\n  bridge?: boolean;\n  builder?: {\n    // Set `false` if your module is not compatible with a builder\n    // or a semver-compatible string version constraint\n    vite?: false | string;\n    webpack?: false | string;\n  };\n}\n\ninterface NuxtCompatibilityIssue {\n  name: string;\n  message: string;\n}\n\ninterface NuxtCompatibilityIssues extends Array<NuxtCompatibilityIssue> {\n  toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Mode Enable Check in JavaScript\nDESCRIPTION: Shows how to create a custom composable that wraps usePreviewMode with a custom enable check based on a route query parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-preview-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function useMyPreviewMode () {\n  return usePreviewMode({\n    shouldEnable: () => {\n      return !!route.query.customPreview\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Options in Nuxt Bridge\nDESCRIPTION: Extended configuration example showing how to specify custom Vite options within the Nuxt configuration file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/9.vite.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  vite: {\n    // Config for Vite\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Type Checking with Nuxi CLI\nDESCRIPTION: Command to run vue-tsc type checking on a Nuxt application. Supports specifying root directory, working directory and log level options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/typecheck.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi typecheck [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>]\n```\n\n----------------------------------------\n\nTITLE: Markdown Read More Link Component\nDESCRIPTION: Markdown component for a read more link that directs to the Nuxt GitHub organization page. Includes an icon and external link target.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/7.changelog.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n::read-more{icon=\"i-simple-icons-github\" to=\"https://github.com/nuxt\" target=\"_blank\"}\nDiscover the `nuxt` organization on GitHub\n::\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt Tests\nDESCRIPTION: Command to execute all tests for the Nuxt project, ensuring changes don't break existing functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Layout Reference Implementation\nDESCRIPTION: Example of accessing and using layout references in Nuxt components\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/3.nuxt-layout.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst layout = ref()\n\nfunction logFoo () {\n  layout.value.layoutRef.foo()\n}\n</script>\n\n<template>\n  <NuxtLayout ref=\"layout\">\n    default layout\n  </NuxtLayout>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst foo = () => console.log('foo')\ndefineExpose({\n  foo\n})\n</script>\n\n<template>\n  <div>\n    default layout\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Multi-Locale Date Display Example\nDESCRIPTION: Demonstrates how to display the same date in different languages (English, French, and Japanese) by changing the locale prop.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <NuxtTime :datetime=\"Date.now()\" locale=\"en-US\" weekday=\"long\" />\n    <NuxtTime :datetime=\"Date.now()\" locale=\"fr-FR\" weekday=\"long\" />\n    <NuxtTime :datetime=\"Date.now()\" locale=\"ja-JP\" weekday=\"long\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocks in Vitest for Nuxt\nDESCRIPTION: Setting up built-in mocks for the DOM environment in Vitest configuration. This example shows how to configure IntersectionObserver and IndexedDB mocks.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineVitestConfig } from '@nuxt/test-utils/config'\n\nexport default defineVitestConfig({\n  test: {\n    environmentOptions: {\n      nuxt: {\n        mock: {\n          intersectionObserver: true,\n          indexedDb: true,\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Vue 2 Options API Example\nDESCRIPTION: Demonstrates how to provide data and logic to components in Vue 2 using the Options API, which uses pre-defined properties like data and methods to return values to the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/2.vuejs-development.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    increment(){\n      this.count++\n    }\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling SSR Errors with Event Handling in NuxtClientFallback\nDESCRIPTION: Implementation of event handling for server-side rendering errors using the @ssr-error event with the NuxtClientFallback component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.nuxt-client-fallback.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtClientFallback @ssr-error=\"logSomeError\">\n    <!-- ... -->\n  </NuxtClientFallback>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Decorator Support\nDESCRIPTION: Configuration to enable TC39 decorator proposal support across Nuxt/Nitro app.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    decorators: true,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction something (_method: () => unknown) {\n  return () => 'decorated'\n}\n\nclass SomeClass {\n  @something\n  public someMethod () {\n    return 'initial'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Options API for Meta Tags in Nuxt 3\nDESCRIPTION: This snippet demonstrates how to use the Options API with defineNuxtComponent to set meta tags in Nuxt 3. It defines a head method that returns an object with meta tag configurations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/4.meta.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n// if using options API `head` method you must use `defineNuxtComponent`\nexport default defineNuxtComponent({\n  head (nuxtApp) {\n    // `head` receives the nuxt app but cannot access the component instance\n    return {\n      meta: [{\n        name: 'description',\n        content: 'This is my page description.'\n      }]\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Dedupe Option Usage Example\nDESCRIPTION: Example showing the deprecated boolean usage of dedupe option in refresh method.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst { refresh } = await useAsyncData(async () => ({ message: 'Hello, Nuxt!' }))\n\nasync function refreshData () {\n  await refresh({ dedupe: true })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Parser API Endpoint\nDESCRIPTION: Server-side API endpoint implementation that handles cookie parsing from the incoming request event. Used to demonstrate the difference between forwarded and non-forwarded requests.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-fetch.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler((event) => {\n  const cookies = parseCookies(event)\n\n  return { cookies }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Prefetch Globally in Nuxt Config\nDESCRIPTION: Shows how to disable prefetching for all links globally in the Nuxt configuration file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    defaults: {\n      nuxtLink: {\n        prefetch: false,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cached Data Purging\nDESCRIPTION: Configuration to disable automatic purging of cached data from useAsyncData and nuxtApp.static.data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    purgeCachedData: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt 4 Migration Recipe with Different Package Managers\nDESCRIPTION: Commands to run the codemod migration recipe for Nuxt 4 with different package managers. The recipe automates the migration steps required for upgrading to Nuxt 4.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codemod@latest nuxt/4/migration-recipe\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx codemod@latest nuxt/4/migration-recipe\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx codemod@latest nuxt/4/migration-recipe\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun x codemod@latest nuxt/4/migration-recipe\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Request URL in Development\nDESCRIPTION: This snippet shows the expected HTML output when rendering the Nuxt component that uses useRequestURL in a development environment.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-url.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>URL is: http://localhost:3000/about</p>\n<p>Path is: /about</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring emitRouteChunkError in Nuxt Configuration\nDESCRIPTION: Controls how chunk loading errors are handled. Options include automatic handling, immediate reloading, manual handling, or disabling error handling completely.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    emitRouteChunkError: 'automatic' // or 'automatic-immediate', 'manual' or false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Server Component Directory Structure\nDESCRIPTION: This snippet shows the directory structure for server components using the .server suffix. This naming convention tells Nuxt to render these components on the server side.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n-| components/\n---| HighlightedMarkdown.server.vue\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Markdown Content for Nuxt Content\nDESCRIPTION: Example of a simple markdown file that can be placed in the content/ directory for Nuxt Content to parse.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.content.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello Content\n```\n\n----------------------------------------\n\nTITLE: Writing TypeScript Types Definition\nDESCRIPTION: Type definitions for the writeTypes function and Nuxt interface, used for generating and writing TypeScript configuration files.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/2.programmatic.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction writeTypes (nuxt?: Nuxt): void\n\ninterface Nuxt {\n  options: NuxtOptions\n  hooks: Hookable<NuxtHooks>\n  hook: Nuxt['hooks']['hook']\n  callHook: Nuxt['hooks']['callHook']\n  addHooks: Nuxt['hooks']['addHooks']\n  ready: () => Promise<void>\n  close: () => Promise<void>\n  server?: any\n  vfs: Record<string, string>\n  apps: Record<string, NuxtApp>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NuxtWelcome Component in Vue\nDESCRIPTION: This snippet demonstrates how to use the <NuxtWelcome> component in a Nuxt application's main app.vue file. The component is simply included in the template without any additional configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/7.nuxt-welcome.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtWelcome />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Child Component Receiving Props from Parent\nDESCRIPTION: Child page component that receives props from the parent through the NuxtPage component in a nested route setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst props = defineProps(['foobar'])\n\nconsole.log(props.foobar)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Nuxt Config Type Definition\nDESCRIPTION: Type definition for the loadNuxtConfig function that loads and returns the Nuxt configuration object.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/2.programmatic.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function loadNuxtConfig (options: LoadNuxtConfigOptions): Promise<NuxtOptions>\n```\n\n----------------------------------------\n\nTITLE: Error Page Layout Implementation in Vue\nDESCRIPTION: Shows how to implement error page with layout using NuxtLayout component in Nuxt 3.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/6.pages-and-layouts.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n[error.vue]\n<template>\n  <div>\n    <NuxtLayout name=\"default\">\n      <!-- -->\n    </NuxtLayout>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Vue Features in Nuxt\nDESCRIPTION: This snippet demonstrates how to enable experimental Vue features, such as propsDestructure, in the Nuxt configuration file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/03.configuration.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  vue: {\n    propsDestructure: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Origin Prefetch in Nuxt Config\nDESCRIPTION: Demonstrates how to enable cross-origin prefetching in the Nuxt configuration file using the Speculation Rules API.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    crossOriginPrefetch: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reset Async Data Configuration\nDESCRIPTION: Configuration to enable resetting async data to undefined instead of default values.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    resetAsyncDataToUndefined: true,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Import Sources with addImportsSources in TypeScript\nDESCRIPTION: Example showing how to add multiple imports from the h3 package using addImportsSources within a Nuxt module setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/4.autoimports.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addImportsSources } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  setup() {\n    addImportsSources({\n      from: 'h3',\n      imports: [\n        'defineEventHandler',\n        'getQuery',\n        'getRouterParams',\n        'readBody',\n        'sendRedirect'\n      ],\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Error Data Parsing in Nuxt Config\nDESCRIPTION: Configuration option to disable automatic parsing of error.data if needed for backward compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    parseErrorData: false\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling noVueServer in Nuxt Configuration\nDESCRIPTION: Disables Vue server renderer endpoint within Nitro.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    noVueServer: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Using Generated Template\nDESCRIPTION: Plugin implementation showing how to use the template generated by addTemplate in a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHead as createServerHead } from '@unhead/vue/server'\nimport { createHead as createClientHead } from '@unhead/vue/client'\nimport { defineNuxtPlugin } from '#imports'\n// @ts-ignore\nimport metaConfig from '#build/meta.config.mjs'\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  const createHead = import.meta.server ? createServerHead : createClientHead\n  const head = createHead()\n  head.push(metaConfig.globalMeta)\n\n  nuxtApp.vueApp.use(head)\n})\n```\n\n----------------------------------------\n\nTITLE: Supporting multi-layer in custom Nuxt modules\nDESCRIPTION: Shows how to access the internal _layers array in custom Nuxt modules to implement custom multi-layer handling and processing.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtModule({\n  setup(_options, nuxt) {\n    for (const layer of nuxt.options._layers) {\n      // You can check for a custom directory existence to extend for each layer\n      console.log('Custom extension for', layer.cwd, layer.config)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt Generate Command with Package Managers\nDESCRIPTION: Examples of how to execute the 'nuxi generate' command with different package managers to prerender a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/15.prerendering.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx nuxi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx nuxi generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun x nuxi generate\n```\n\n----------------------------------------\n\nTITLE: Basic Middleware Directory Structure\nDESCRIPTION: A simple example showing the directory structure for a single named middleware file that can be referenced in page components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.middleware.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n-| middleware/\n---| auth.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @rollup/plugin-yaml with package managers\nDESCRIPTION: Installation commands for the @rollup/plugin-yaml plugin using different package managers (npm, yarn, pnpm, and bun).\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/4.recipes/2.vite-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @rollup/plugin-yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @rollup/plugin-yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @rollup/plugin-yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @rollup/plugin-yaml\n```\n\n----------------------------------------\n\nTITLE: Implementation of wrapProperty Helper\nDESCRIPTION: Custom implementation of the wrapProperty helper function using getCurrentInstance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/5.nuxt3-compatible-api.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapProperty = (property, makeComputed = true) => () => {\n  const vm = getCurrentInstance().proxy\n  return makeComputed ? computed(() => vm[property]) : vm[property]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling payloadExtraction in Nuxt Configuration\nDESCRIPTION: Enables extraction of payloads of pages generated with nuxt generate.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    payloadExtraction: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheets in Vue Components\nDESCRIPTION: Shows different methods of importing CSS files in Vue components, including static imports and CSS @import statements.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport '~/assets/css/first.css'\nimport('~/assets/css/first.css')\n</script>\n\n<style>\n@import url(\"~/assets/css/second.css\");\n</style>\n```\n\n----------------------------------------\n\nTITLE: addComponentsDir Type Definition\nDESCRIPTION: Type signature for the addComponentsDir function showing parameter structure\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/5.components.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addComponentsDir (dir: ComponentsDir, opts: { prepend?: boolean } = {}): void\n```\n\n----------------------------------------\n\nTITLE: Enabling Vite with Nuxt Bridge Configuration\nDESCRIPTION: Basic configuration to enable Vite and Nitro in a Nuxt 2 application using Nuxt Bridge. This setup requires removing the nuxt-vite module as Bridge provides the same functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/9.vite.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  bridge: {\n    vite: true,\n    nitro: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending a Nuxt layer in project configuration\nDESCRIPTION: Shows how to extend from a Nuxt layer located in the './base' directory from the project's main configuration file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    './base'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Nuxt Module with Nuxi CLI\nDESCRIPTION: This command installs a Nuxt module, adds it to package.json, and updates nuxt.config. It supports various options like specifying the working directory, log level, and skipping installation or configuration steps.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/module.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module add <MODULENAME> [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--skipInstall] [--skipConfig] [--dev]\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Auto-import Example\nDESCRIPTION: Demonstrates basic usage of auto-imported ref in a Vue component setup script.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst count = ref(1) // ref is auto-imported\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extending from Git repositories with dependency installation\nDESCRIPTION: Shows how to extend from a remote Git repository while also installing its dependencies by using the install option.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  extends: [\n    ['github:username/repoName', { install: true }]\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Reactive Values Without URL Updates in Vue\nDESCRIPTION: Example showing a limitation when using the watch option with a URL that includes reactive values. This demonstrates that watching a reactive value won't automatically update the URL used for fetching, as the URL is constructed only when the function is first invoked.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst id = ref(1)\n\nconst { data, error, refresh } = await useFetch(`/api/users/${id.value}`, {\n  watch: [id]\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Styles in Nuxt\nDESCRIPTION: Configuration for enabling or disabling inline styles when rendering HTML in Nuxt. This feature is only available when using Vite and can accept either a boolean or a function that determines inlining based on component path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.features.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  features: {\n    inlineStyles: false // or a function to determine inlining\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Prerender Routes Implementation\nDESCRIPTION: Example of adding routes for prerendering in a sitemap module\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addPrerenderRoutes } from '@nuxt/kit'\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'nuxt-sitemap',\n    configKey: 'sitemap',\n  },\n  defaults: {\n    sitemapUrl: '/sitemap.xml',\n    prerender: true,\n  },\n  setup(options) {\n    if (options.prerender) {\n      addPrerenderRoutes(options.sitemapUrl)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Resolution Example\nDESCRIPTION: Demonstrates dynamic component usage with resolveComponent and direct imports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { SomeComponent } from '#components'\n\nconst MyButton = resolveComponent('MyButton')\n</script>\n\n<template>\n  <component :is=\"clickable ? MyButton : 'div'\" />\n  <component :is=\"SomeComponent\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: useHydration Type Signature Definition\nDESCRIPTION: TypeScript type signature for the useHydration composable showing its generic type parameter and function parameters.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-hydration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseHydration <T> (key: string, get: () => T, set: (value: T) => void) => void\n```\n\n----------------------------------------\n\nTITLE: Updating Runtime Config Access in Vue Components\nDESCRIPTION: Demonstrates how to update Vue component code to access public runtime config values using the new public property in Nuxt 3.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/7.runtime-config.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n// MyWidget.vue\n- <div>Website: {{ $config.websiteURL }}</div>\n+ <div>Website: {{ $config.public.websiteURL }}</div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for useNuxtData\nDESCRIPTION: This code snippet provides the TypeScript type definition for the useNuxtData composable. It shows that useNuxtData accepts a string key and returns an object with a data property that's a reactive reference to the cached data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-data.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuseNuxtData<DataT = any> (key: string): { data: Ref<DataT | null> }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Module with Site Config\nDESCRIPTION: Module implementation that uses the requireSiteConfig function to configure the application head title.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/6.context.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNuxt } from '@nuxt/kit'\nimport { requireSiteConfig } from './requireSiteConfig'\n\nexport default defineNuxtModule({\n  setup(_, nuxt) {\n    const config = requireSiteConfig()\n    nuxt.options.app.head.title = config.title\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining hasNuxtCompatibility Function and NuxtCompatibility Interface in TypeScript\nDESCRIPTION: This snippet defines the hasNuxtCompatibility function and the NuxtCompatibility interface. It shows the function signature and the structure of the constraints object used for checking Nuxt compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/3.compatibility.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function hasNuxtCompatibility(\n  constraints: NuxtCompatibility,\n  nuxt?: Nuxt\n): Promise<boolean>;\n\ninterface NuxtCompatibility {\n  nuxt?: string;\n  bridge?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Meta Settings in Nuxt Config\nDESCRIPTION: Initial configuration to enable meta bridge functionality in Nuxt Bridge while keeping Nitro optional.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/6.meta.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\nexport default defineNuxtConfig({\n  bridge: {\n    meta: true,\n    nitro: false // If migration to Nitro is complete, set to true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Layout-Specific Styles\nDESCRIPTION: Example of implementing layout-specific styling in Nuxt using Vue components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"default-layout\">\n    <h1>Default Layout</h1>\n    <slot />\n  </div>\n</template>\n\n<style>\n.default-layout {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Options in Runtime\nDESCRIPTION: This snippet demonstrates how to access module options that have been exposed to runtime configuration using the useRuntimeConfig composable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = useRuntimeConfig().public.myModule\n```\n\n----------------------------------------\n\nTITLE: Using prerenderRoutes Composable in Nuxt 3\nDESCRIPTION: Demonstrates how to use the prerenderRoutes composable to hint Nitro to prerender additional routes. This function supports both single routes as strings and arrays of routes. It only has an effect during the prerendering process.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/prerender-routes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst route = useRoute()\n\nprerenderRoutes('/')\nprerenderRoutes(['/', '/about'])\n```\n\n----------------------------------------\n\nTITLE: Basic DevOnly Component Implementation in Vue\nDESCRIPTION: Shows a simplified implementation of the DevOnly component with LazyDebugBar and fallback content. This example highlights the basic structure and usage of the component in a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/1.dev-only.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Sidebar />\n    <DevOnly>\n      <!-- this component will only be rendered during development -->\n      <LazyDebugBar />\n      <!-- be sure to test these using `nuxt preview` -->\n      <template #fallback>\n        <div><!-- empty div for flex.justify-between --></div>\n      </template>\n    </DevOnly>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Global .nuxtrc File Location for macOS/Linux\nDESCRIPTION: Path to the global .nuxtrc file location on macOS and Linux systems. This file allows users to define default Nuxt configurations that apply to all projects on their system.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.nuxtrc.md#2025-04-22_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n~/.nuxtrc\n```\n\n----------------------------------------\n\nTITLE: Enabling inlineRouteRules in Nuxt Configuration\nDESCRIPTION: Enables defining route rules at the page level using defineRouteRules. Matching route rules will be created based on the page's path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    inlineRouteRules: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Values for useAsyncData\nDESCRIPTION: Configuration to set default null values for data and error in useAsyncData responses.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    defaults: {\n      useAsyncData: {\n        value: 'null',\n        errorValue: 'null'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling writeEarlyHints in Nuxt Configuration\nDESCRIPTION: Enables writing of early hints when using node server to improve performance through resource preloading.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    writeEarlyHints: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt 3 plugin for Pinia store\nDESCRIPTION: Set up a Nuxt 3 plugin to provide global access to a Pinia store.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMainStore } from '~/store'\n\nexport default defineNuxtPlugin(({ $pinia }) => {\n  return {\n    provide: {\n      store: useMainStore($pinia)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining createResolver Function Type in TypeScript\nDESCRIPTION: Type definition for the createResolver function that creates a resolver relative to a base path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/12.resolving.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createResolver (basePath: string | URL): Resolver\n\ninterface Resolver {\n  resolve (...path: string[]): string\n  resolvePath (path: string, options?: ResolvePathOptions): Promise<string>\n}\n\ninterface ResolvePathOptions {\n  cwd?: string\n  alias?: Record<string, string>\n  extensions?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an About Page in Vue\nDESCRIPTION: This snippet shows how to create an additional page (about.vue) in a Nuxt application. It will be accessible at the /about route.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <section>\n    <p>This page will be displayed at the /about route.</p>\n  </section>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Pages Examples\nDESCRIPTION: Examples of generating new page components, including both simple and dynamic route pages.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add page about\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add page \"category/[id]\"\n```\n\n----------------------------------------\n\nTITLE: Route Middleware Type Definitions\nDESCRIPTION: Type definitions for addRouteMiddleware function and related interfaces for configuring route middleware.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/7.pages.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addRouteMiddleware (input: NuxtMiddleware | NuxtMiddleware[], options: AddRouteMiddlewareOptions): void\n\ntype NuxtMiddleware = {\n  name: string\n  path: string\n  global?: boolean\n}\n\ninterface AddRouteMiddlewareOptions {\n  override?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining isNuxt2 Function in TypeScript\nDESCRIPTION: This snippet defines the isNuxt2 function, which checks if the current Nuxt version is 2.x. It shows the function signature and the optional Nuxt parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/3.compatibility.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNuxt2(nuxt?: Nuxt): boolean;\n```\n\n----------------------------------------\n\nTITLE: Using components from a Nuxt layer\nDESCRIPTION: Demonstrates how to use components from an extended layer in a Vue template file. In this case, BaseComponent is imported from the base layer.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <BaseComponent/>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Advanced Relative Time Formatting Options\nDESCRIPTION: Shows how to use Intl.RelativeTimeFormat options to customize the appearance of relative time output.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtTime \n    :datetime=\"Date.now() - 3 * 24 * 60 * 60 * 1000\" \n    relative \n    numeric=\"auto\"\n    style=\"long\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Migrating router.base Configuration in Nuxt\nDESCRIPTION: This code snippet shows how to migrate the router.base configuration option when upgrading to Nuxt Bridge. The old router.base option is replaced with app.baseURL in the new configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/10.configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n- router: {\n-   base: '/my-app/'\n- }\n+ app: {\n+   baseURL: '/my-app/'\n+ }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Runtime Config\nDESCRIPTION: Define environment variables that correspond to runtime config values. These will automatically replace the values in the config at runtime.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/8.runtime-config.md#2025-04-22_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n# Runtime config values are automatically replaced by matching environment variables at runtime\nNUXT_API_SECRET=api_secret_token\nNUXT_PUBLIC_API_BASE=https://nuxtjs.org\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Plugin Example\nDESCRIPTION: Example demonstrating how to add an SVG plugin to the Vite configuration in Nuxt.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addVitePlugin } from '@nuxt/kit'\nimport { svg4VuePlugin } from 'vite-plugin-svg4vue'\n\nexport default defineNuxtModule({\n  meta: {\n    name: 'nuxt-svg-icons',\n    configKey: 'nuxtSvgIcons',\n  },\n  defaults: {\n    svg4vue: {\n      assetsDirName: 'assets/icons',\n    },\n  },\n  setup(options) {\n    addVitePlugin(svg4VuePlugin(options.svg4vue))\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using mlly for Safe Default Export Interop\nDESCRIPTION: Example of using the mlly library to safely handle default export interop, preserving named exports and providing a robust solution for complex module scenarios.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { interopDefault } from 'mlly'\n\n// Assuming the shape is { default: { foo: 'bar' }, baz: 'qux' }\nimport myModule from 'my-module'\n\nconsole.log(interopDefault(myModule)) // { foo: 'bar', baz: 'qux' }\n```\n\n----------------------------------------\n\nTITLE: Migrating scrollToTop property to definePageMeta in Nuxt 3\nDESCRIPTION: Shows how to migrate the scrollToTop property from Nuxt 2 to Nuxt 3 using the definePageMeta compiler macro. This property controls the scroll behavior when navigating to the page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/7.component-options.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefinePageMeta({\n  scrollToTop: false\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addTemplate Function\nDESCRIPTION: TypeScript interface definitions for the addTemplate function and its parameters, defining the structure for template generation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addTemplate (template: NuxtTemplate | string): ResolvedNuxtTemplate\n\ninterface NuxtTemplate {\n  src?: string\n  filename?: string\n  dst?: string\n  options?: Record<string, any>\n  getContents?: (data: Record<string, any>) => string | Promise<string>\n  write?: boolean\n}\n\ninterface ResolvedNuxtTemplate {\n  src: string\n  filename: string\n  dst: string\n  options: Record<string, any>\n  getContents: (data: Record<string, any>) => string | Promise<string>\n  write: boolean\n  filename: string\n  dst: string\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External CSS with Link Components\nDESCRIPTION: Demonstrates how to add external CSS, specifically Google Fonts, using the Link component in the template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/08.seo-meta.md#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <Link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n    <Link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\" crossorigin=\"\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt Module using CLI Command\nDESCRIPTION: Command line syntax for building a Nuxt module using the nuxi build-module command. Supports various options for controlling the build process, log levels, and development modes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/build-module.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi build-module [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--build] [--stub] [--sourcemap] [--prepare]\n```\n\n----------------------------------------\n\nTITLE: Defining resolvePath Function Type in TypeScript\nDESCRIPTION: Type definition for the resolvePath function that resolves full paths to files/directories respecting Nuxt aliases and extensions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/12.resolving.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function resolvePath (path: string, options?: ResolvePathOptions): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Basic Nuxi Add Command Usage\nDESCRIPTION: The main command syntax for adding new entities to a Nuxt project, with support for template type, name, and various options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add <TEMPLATE> <NAME> [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--force]\n```\n\n----------------------------------------\n\nTITLE: Adding Composable Example\nDESCRIPTION: Example of creating a new composable function in the composables directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add composable foo\n```\n\n----------------------------------------\n\nTITLE: Defining Nuxt Instance Type Interface\nDESCRIPTION: TypeScript interface definition for the Nuxt instance, specifying available properties and methods.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/6.context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useNuxt(): Nuxt\n\ninterface Nuxt {\n  options: NuxtOptions\n  hooks: Hookable<NuxtHooks>\n  hook: Nuxt['hooks']['hook']\n  callHook: Nuxt['hooks']['callHook']\n  addHooks: Nuxt['hooks']['addHooks']\n  ready: () => Promise<void>\n  close: () => Promise<void>\n  server?: any\n  vfs: Record<string, string>\n  apps: Record<string, NuxtApp>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining resolveAlias Function Type in TypeScript\nDESCRIPTION: Type definition for the resolveAlias function that resolves path aliases respecting Nuxt alias options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/12.resolving.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction resolveAlias (path: string, alias?: Record<string, string>): string\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Test Utils Module\nDESCRIPTION: Adding @nuxt/test-utils/module to the Nuxt configuration file. This enables Vitest integration in Nuxt DevTools for running unit tests in development.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    '@nuxt/test-utils/module'\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addTypeTemplate Function\nDESCRIPTION: TypeScript interface definitions for the addTypeTemplate function, used for generating and registering type definition files.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addTypeTemplate (template: NuxtTypeTemplate | string): ResolvedNuxtTemplate\n\ninterface NuxtTemplate {\n  src?: string\n  filename?: string\n  dst?: string\n  options?: Record<string, any>\n  getContents?: (data: Record<string, any>) => string | Promise<string>\n}\n\ninterface ResolvedNuxtTemplate {\n  src: string\n  filename: string\n  dst: string\n  options: Record<string, any>\n  getContents: (data: Record<string, any>) => string | Promise<string>\n  write: boolean\n  filename: string\n  dst: string\n}\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for shared/ Directory\nDESCRIPTION: Shows the directory structure for the shared/ directory and indicates which files will be auto-imported. Only files in shared/utils/ and shared/types/ are auto-imported by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.shared.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-| shared/\n---| capitalize.ts        # Not auto-imported\n---| formatters\n-----| lower.ts           # Not auto-imported\n---| utils/\n-----| lower.ts           # Auto-imported\n-----| formatters\n-------| upper.ts         # Not auto-imported\n---| types/\n-----| bar.d.ts           # Auto-imported\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addRouteMiddleware in Nuxt\nDESCRIPTION: The TypeScript interface definition for the addRouteMiddleware function, showing its two possible signatures and the options interface for configuring middleware behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/add-route-middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addRouteMiddleware (name: string, middleware: RouteMiddleware, options?: AddRouteMiddlewareOptions): void\nfunction addRouteMiddleware (middleware: RouteMiddleware): void\n\ninterface AddRouteMiddlewareOptions {\n  global?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Client-side Only Rendering\nDESCRIPTION: Nuxt configuration to disable server-side rendering (SSR) and enable client-side only rendering. This is useful for static hosting scenarios where server-side rendering is not required.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/16.deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  ssr: false\n})\n```\n\n----------------------------------------\n\nTITLE: Importing CommonJS Module in CommonJS Context\nDESCRIPTION: Example of importing a CommonJS module in a CommonJS context using require, demonstrating the expected behavior of default exports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst pkg = require('cjs-pkg')\n\nconsole.log(pkg) // { test: 123 }\n```\n\n----------------------------------------\n\nTITLE: Options API Head Method with defineNuxtComponent\nDESCRIPTION: Example showing how to use the head method with Options API using defineNuxtComponent wrapper.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/6.meta.md#2025-04-22_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n// if using options API `head` method you must use `defineNuxtComponent`\nexport default defineNuxtComponent({\n  head (nuxtApp) {\n    // `head` receives the nuxt app but cannot access the component instance\n    return {\n      meta: [{\n        name: 'description',\n        content: 'This is my page description.'\n      }]\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: refreshCookie Type Definition\nDESCRIPTION: TypeScript type definition for the refreshCookie function showing it accepts a string parameter for the cookie name and returns void.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/refresh-cookie.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrefreshCookie(name: string): void\n```\n\n----------------------------------------\n\nTITLE: Adding Client Plugin Example\nDESCRIPTION: Example of adding a client-side plugin using the client modifier flag.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add plugin sockets --client\n```\n\n----------------------------------------\n\nTITLE: Defining MetaObject Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for the MetaObject type that specifies all possible head metadata properties including title, meta tags, scripts, and HTML attributes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-head.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MetaObject {\n  title?: string\n  titleTemplate?: string | ((title?: string) => string)\n  base?: Base\n  link?: Link[]\n  meta?: Meta[]\n  style?: Style[]\n  script?: Script[]\n  noscript?: Noscript[]\n  htmlAttrs?: HtmlAttributes\n  bodyAttrs?: BodyAttributes\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Manager with Corepack in JSON\nDESCRIPTION: Demonstrates how to specify the required package manager version in package.json using Corepack to ensure consistent package manager versions across the project.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/4.contribution.md#2025-04-22_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"packageManager\": \"pnpm@7.5.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Component Example\nDESCRIPTION: Example of generating a new Vue component in the components directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add component TheHeader\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxi Prepare Command\nDESCRIPTION: Command syntax for running nuxi prepare with all available options. It creates a .nuxt directory and generates types for a Nuxt application. The command supports specifying the root directory, dotenv file path, working directory, log level, and environment name.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/prepare.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi prepare [ROOTDIR] [--dotenv] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--envName]\n```\n\n----------------------------------------\n\nTITLE: Configuring componentIslands in Nuxt Configuration\nDESCRIPTION: Enables experimental component islands support with NuxtIsland and .island.vue files. Can be set to true, false, or 'local+remote'.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    componentIslands: true // false or 'local+remote'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt Project using nuxi CLI\nDESCRIPTION: Command syntax for initializing a new Nuxt project with various configuration options including directory specification, template selection, package manager choice, and git initialization. The command uses unjs/giget under the hood for project creation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/init.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi init [DIR] [--cwd=<directory>] [-t, --template] [-f, --force] [--offline] [--preferOffline] [--no-install] [--gitInit] [--shell] [--packageManager]\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Component Naming\nDESCRIPTION: Shows the directory structure relevant to the component naming convention changes in Nuxt 3, where component names are now normalized.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n├─ components/\n├─── SomeFolder/\n├───── MyComponent.vue\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt with Node Inspector\nDESCRIPTION: Command to start Nuxt in development mode with the Node.js debugger enabled for server-side debugging.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/9.debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnuxi dev --inspect\n```\n\n----------------------------------------\n\nTITLE: Modifying Default State in usePreviewMode\nDESCRIPTION: Demonstrates how to modify the default state of usePreviewMode by providing a custom getState function.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-preview-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data1 = ref('data1')\n\nconst { enabled, state } = usePreviewMode({\n  getState: (currentState) => {\n    return { data1, data2: 'data2' }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing rel Attributes with NuxtLink in Vue\nDESCRIPTION: Shows various examples of customizing the rel attribute on <NuxtLink> components, including overriding defaults and using the noRel prop to prevent automatic rel attributes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/4.nuxt-link.md#2025-04-22_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtLink to=\"https://twitter.com/nuxt_js\">\n    Nuxt Twitter\n  </NuxtLink>\n  <!-- <a href=\"https://twitter.com/nuxt_js\" rel=\"noopener noreferrer\">...</a> -->\n\n  <NuxtLink to=\"https://discord.nuxtjs.org\" rel=\"noopener\">\n    Nuxt Discord\n  </NuxtLink>\n  <!-- <a href=\"https://discord.nuxtjs.org\" rel=\"noopener\">...</a> -->\n\n  <NuxtLink to=\"/about\" target=\"_blank\">About page</NuxtLink>\n  <!-- <a href=\"/about\" target=\"_blank\" rel=\"noopener noreferrer\">...</a> -->\n</template>\n```\n\n----------------------------------------\n\nTITLE: Meta Configuration Migration from Nuxt 2 to 3\nDESCRIPTION: Example showing how to update head configuration from Nuxt 2 format to Nuxt 3, removing the hid key for deduplication.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/6.meta.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  head: {\n    titleTemplate: '%s - Nuxt',\n    meta: [\n      { charset: 'utf-8' },\n      { name: 'viewport', content: 'width=device-width, initial-scale=1' },\n      { hid: 'description', name: 'description', content: 'Meta description' }\n    ]\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    head: {\n      titleTemplate: '%s - Nuxt',\n      meta: [\n        { charset: 'utf-8' },\n        { name: 'viewport', content: 'width=device-width, initial-scale=1' },\n        { name: 'description', content: 'Meta description' }\n      ]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using onPrehydrate in a Vue Component with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the onPrehydrate composable in a Vue component. It shows three different ways to use the callback: logging the window object, accessing the root element, and using the prehydrate ID.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/on-prehydrate.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\ndeclare const window: Window\n// ---cut---\n// onPrehydrate is guaranteed to run before Nuxt hydrates\nonPrehydrate(() => {\n  console.log(window)\n})\n\n// As long as it only has one root node, you can access the element\nonPrehydrate((el) => {\n  console.log(el.outerHTML)\n  // <div data-v-inspector=\"app.vue:15:3\" data-prehydrate-id=\":b3qlvSiBeH:\"> Hi there </div>\n})\n\n// For _very_ advanced use cases (such as not having a single root node) you\n// can access/set `data-prehydrate-id` yourself\nconst prehydrateId = onPrehydrate((el) => {})\n</script>\n\n<template>\n  <div>\n    Hi there\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Nested Components Directory Structure\nDESCRIPTION: Example of nested component directory organization for better component categorization.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-| components/\n---| base/\n-----| foo/\n-------| Button.vue\n```\n\n----------------------------------------\n\nTITLE: Defining addLayout Function and NuxtTemplate Interface in TypeScript\nDESCRIPTION: This snippet defines the type signature for the addLayout function and the NuxtTemplate interface used for registering layouts in Nuxt applications. It specifies the parameters and their types, including the complex NuxtTemplate object structure.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/8.layout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addLayout (layout: NuxtTemplate | string, name: string): void\n\ninterface NuxtTemplate {\n  src?: string\n  filename?: string\n  dst?: string\n  options?: Record<string, any>\n  getContents?: (data: Record<string, any>) => string | Promise<string>\n  write?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Nuxt Modules with Nuxi CLI\nDESCRIPTION: This command searches for Nuxt modules matching a given query. It can filter results based on Nuxt version compatibility and allows specifying a working directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/module.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module search <QUERY> [--cwd=<directory>] [--nuxtVersion=<2|3>]\n```\n\n----------------------------------------\n\nTITLE: Creating tsconfig.json for Nuxt 3 TypeScript support\nDESCRIPTION: Set up a tsconfig.json file to enable TypeScript support in Nuxt 3 projects.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./.nuxt/tsconfig.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Route Example\nDESCRIPTION: Example of generating a new API route file in the server/api directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add api hello\n```\n\n----------------------------------------\n\nTITLE: Disabling View Transitions Globally with Per-Page Opt-in\nDESCRIPTION: This configuration snippet demonstrates how to disable view transitions globally throughout a Nuxt application while allowing individual pages to opt in as needed.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    // Disable view transitions globally, and opt-in on a per page basis\n    viewTransition: false\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Whitelist Attributes Configuration\nDESCRIPTION: Definition of allowed attributes for different HTML elements when using useHeadSafe.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-head-safe.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst WhitelistAttributes = {\n  htmlAttrs: ['class', 'style', 'lang', 'dir'],\n  bodyAttrs: ['class', 'style'],\n  meta: ['name', 'property', 'charset', 'content', 'media'],\n  noscript: ['textContent'],\n  style: ['media', 'textContent', 'nonce', 'title', 'blocking'],\n  script: ['type', 'textContent', 'nonce', 'blocking'],\n  link: ['color', 'crossorigin', 'fetchpriority', 'href', 'hreflang', 'imagesrcset', 'imagesizes', 'integrity', 'media', 'referrerpolicy', 'rel', 'sizes', 'type'],\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nuxt Kit Utilities in ES Module\nDESCRIPTION: This snippet demonstrates how to import Nuxt Kit utilities in an ES module file. It specifically imports the useNuxt function from @nuxt/kit.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/4.kit.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useNuxt } from '@nuxt/kit'\n```\n\n----------------------------------------\n\nTITLE: Searching for Pinia Module with Nuxi CLI\nDESCRIPTION: This command demonstrates how to use the 'nuxi module search' command to find modules related to Pinia for a Nuxt application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/module.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi module search pinia\n```\n\n----------------------------------------\n\nTITLE: Loading Nuxt Programmatically Type Definition\nDESCRIPTION: Type definition for the loadNuxt function and its options interface. The function loads Nuxt configuration and returns a Promise with the Nuxt instance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/2.programmatic.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function loadNuxt (loadOptions?: LoadNuxtOptions): Promise<Nuxt>\n\ninterface LoadNuxtOptions extends LoadNuxtConfigOptions {\n  dev?: boolean\n  ready?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating ESM Syntax in JavaScript\nDESCRIPTION: Example of ECMAScript Modules (ESM) syntax for importing and exporting functionality, which is the modern standard for JavaScript modules.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport a from './a'\n\nexport { a }\n```\n\n----------------------------------------\n\nTITLE: Setting Up End-to-End Testing with @nuxt/test-utils/e2e in TypeScript\nDESCRIPTION: Demonstrates how to set up end-to-end testing using @nuxt/test-utils/e2e, including the setup function and available configuration options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { describe, test } from 'vitest'\nimport { setup, $fetch } from '@nuxt/test-utils/e2e'\n\ndescribe('My test', async () => {\n  await setup({\n    // test context options\n  })\n\n  test('my test', () => {\n    // ...\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Nuxt Kit in CommonJS Context\nDESCRIPTION: This snippet shows how to import Nuxt Kit in a CommonJS context using dynamic import. It demonstrates a workaround since Nuxt Kit is an ESM-only package and cannot be required directly.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/4.kit.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This does NOT work!\n// const kit = require('@nuxt/kit')\nasync function main() {\n  const kit = await import('@nuxt/kit')\n}\nmain()\n```\n\n----------------------------------------\n\nTITLE: Migrating key property to definePageMeta in Nuxt 3\nDESCRIPTION: Demonstrates how to migrate the key property from Nuxt 2 to Nuxt 3 using the definePageMeta compiler macro. This is used to define a unique key for the page component.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/7.component-options.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\ndefinePageMeta({\n  key: 'index'\n  // or a method\n  // key: route => route.fullPath\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Imports in Nuxt 3 (TypeScript)\nDESCRIPTION: Example of removing the 'components: true' configuration from nuxt.config file when migrating from Nuxt 2 to Nuxt 3. This step is necessary as Nuxt 3 auto-imports components by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/3.auto-imports.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove this line from your nuxt.config file\ncomponents: true\n```\n\n----------------------------------------\n\nTITLE: Replacing Nuxt Template Utilities with Knitwork Functions\nDESCRIPTION: This TypeScript snippet shows how to replace Nuxt's deprecated template utilities (serialize, importName, importSources) with alternatives from the knitwork package. The code provides equivalent implementations for these functions using modern module handling approaches.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport { genDynamicImport, genImport, genSafeVariableName } from 'knitwork'\n\nconst serialize = (data: any) => JSON.stringify(data, null, 2).replace(/\"{(.+)}\"(?=,?$)/gm, r => JSON.parse(r).replace(/^{(.*)}$/, '$1'))\n\nconst importSources = (sources: string | string[], { lazy = false } = {}) => {\n  return toArray(sources).map((src) => {\n    if (lazy) {\n      return `const ${genSafeVariableName(src)} = ${genDynamicImport(src, { comment: `webpackChunkName: ${JSON.stringify(src)}` })}`\n    }\n    return genImport(src, genSafeVariableName(src))\n  }).join('\\n')\n}\n\nconst importName = genSafeVariableName\n```\n\n----------------------------------------\n\nTITLE: Defining getNuxtVersion Function in TypeScript\nDESCRIPTION: This snippet defines the getNuxtVersion function, which returns the current Nuxt version. It shows the function signature and the optional Nuxt parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/3.compatibility.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getNuxtVersion(nuxt?: Nuxt): string;\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Page Structure with Multiple Root Elements\nDESCRIPTION: Example of a page with multiple root elements, which breaks client-side navigation because Vue components must have a single root element.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.pages.md#2025-04-22_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>This page</div>\n  <div>Has more than one root element</div>\n  <div>And will not render when route changes during client side navigation</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nuxt.js Project with Package Managers\nDESCRIPTION: Commands for creating a new Nuxt.js project using different package managers (npm, yarn, pnpm, bun). Replace <project-name> with your desired project name.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/02.installation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create nuxt <project-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create nuxt <project-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create nuxt <project-name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create nuxt <project-name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Transitions Globally in Nuxt Config\nDESCRIPTION: Disabling both page and layout transitions globally for the entire application in the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/09.transitions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  app: {\n    pageTransition: false,\n    layoutTransition: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Font Face Definition\nDESCRIPTION: Shows how to define and use custom fonts in CSS\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/06.styling.md#2025-04-22_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'FarAwayGalaxy';\n  src: url('/fonts/FarAwayGalaxy.woff') format('woff');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Layer Example\nDESCRIPTION: Example of creating a new Nuxt layer with its configuration file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add layer subscribe\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Import with CommonJS Modules\nDESCRIPTION: Example of using dynamic import with CommonJS modules, showing how to handle the default export structure in both CJS and ESM contexts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport('cjs-pkg').then(console.log) // [Module: null prototype] { default: { test: '123' } }\n```\n\n----------------------------------------\n\nTITLE: Nuxt Build-time Hooks Reference\nDESCRIPTION: Build-time hooks that are called during the Nuxt application build process. These hooks enable customization of the build process, module initialization, page generation, and integration with build tools like Vite and Webpack.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/6.advanced/1.hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example build hook usage\nnuxt.hook('build:before', () => {\n  // Called before Nuxt bundle builder\n});\n\nnuxt.hook('pages:extend', (pages) => {\n  // Called after page routes are scanned\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Unhead Imports\nDESCRIPTION: Shows how to update imports for useHead from direct Unhead packages to Nuxt's internal imports, which is recommended though not required.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n-import { useHead } from '@unhead/vue'\n+import { useHead } from '#imports'\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML Content from Server-Rendered Pages in Nuxt\nDESCRIPTION: Demonstrates using the $fetch API from Nuxt Test Utils to retrieve the HTML content of a server-rendered page for testing purposes.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { $fetch } from '@nuxt/test-utils/e2e'\n\nconst html = await $fetch('/')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CommonJS Module Syntax in JavaScript\nDESCRIPTION: Example of CommonJS module syntax for importing and exporting functionality between isolated JavaScript modules.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = require('./a')\n\nmodule.exports.a = a\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Server Handler\nDESCRIPTION: TypeScript interface definition for Nitro server handler configuration\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/11.nitro.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addServerHandler (handler: NitroEventHandler): void\n\nexport interface NitroEventHandler {\n  handler: string;\n  route?: string;\n  middleware?: boolean;\n  lazy?: boolean;\n  method?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling clientFallback in Nuxt Configuration\nDESCRIPTION: Enables the experimental NuxtClientFallback component for rendering content on the client if there's an error in SSR.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    clientFallback: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating useRouter and useRoute in JavaScript\nDESCRIPTION: Update useRoute usage as it no longer returns a computed property.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/3.bridge-composition-api.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { useRouter, useRoute } from '@nuxtjs/composition-api'\n\n  const router = useRouter()\n  const route = useRoute()\n\n- console.log(route.value.path)\n+ console.log(route.path)\n```\n\n----------------------------------------\n\nTITLE: Adding Named Imports with addImports in TypeScript\nDESCRIPTION: Example showing how to add multiple named imports from @storyblok/vue using addImports utility within a Nuxt module setup.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/4.autoimports.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtModule, addImports } from \"@nuxt/kit\";\n\nexport default defineNuxtModule({\n  setup(options, nuxt) {\n    const names = [\n      \"useStoryblok\",\n      \"useStoryblokApi\",\n      \"useStoryblokBridge\",\n      \"renderRichText\",\n      \"RichTextSchema\"\n    ];\n\n    names.forEach((name) =>\n      addImports({ name, as: name, from: \"@storyblok/vue\" })\n    );\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Tools in Nuxt 3\nDESCRIPTION: To configure Nuxt's build tools, use the top-level 'vite', 'webpack', and 'postcss' keys in your nuxt.config file. This replaces the previous 'build' configuration from Nuxt 2.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/10.bundling.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// nuxt.config.js\nexport default {\n  vite: { /* Vite configuration */ },\n  webpack: { /* webpack configuration */ },\n  postcss: { /* PostCSS configuration */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Image Module via Terminal\nDESCRIPTION: Command to install and enable the Nuxt Image module using npx.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/9.nuxt-img.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest module add image\n```\n\n----------------------------------------\n\nTITLE: Defining findPath Function Type in TypeScript\nDESCRIPTION: Type definition for the findPath function that resolves the first existing file in given paths with support for various options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/12.resolving.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function findPath (paths: string | string[], options?: ResolvePathOptions, pathType: 'file' | 'dir'): Promise<string | null>\n\ninterface ResolvePathOptions {\n  cwd?: string\n  alias?: Record<string, string>\n  extensions?: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxi Cleanup Command in Bash\nDESCRIPTION: This command uses npx to run the nuxi cleanup command. It can optionally specify a root directory and working directory. The command removes common generated Nuxt files and caches.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/cleanup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi cleanup [ROOTDIR] [--cwd=<directory>]\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware Example\nDESCRIPTION: Example of creating a new middleware file in the middleware directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add middleware auth\n```\n\n----------------------------------------\n\nTITLE: Example Usage of addTypeTemplate\nDESCRIPTION: Implementation example showing how to use addTypeTemplate to add type definitions for markdown files in a Nuxt module.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addTypeTemplate, defineNuxtModule } from \"@nuxt/kit\"\n\nexport default defineNuxtModule({\n  setup() {\n    addTypeTemplate({\n      filename: \"types/markdown.d.ts\",\n      getContents: () => /* ts */`\n      declare module '*.md' {\n        import type { ComponentOptions } from 'vue'\n        const Component: ComponentOptions\n        export default Component\n      }`\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt to Use the Component Library\nDESCRIPTION: Shows how to import the UI library as a Nuxt module in the nuxt.config.ts file, making all components available to the application.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/1.components.md#2025-04-22_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: ['awesome-ui/nuxt']\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating Route Metadata Access\nDESCRIPTION: Shows how to update code to access route metadata directly from the route object instead of route.meta, following the deduplication of route metadata in Nuxt 3.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nconst route = useRoute()\n  \n- console.log(route.meta.name)\n+ console.log(route.name)\n```\n\n----------------------------------------\n\nTITLE: Migrating Layout Components in Vue\nDESCRIPTION: Shows how to update layout components by replacing the Nuxt component with a slot element for rendering page content.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/6.pages-and-layouts.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n[layouts/custom.vue]\n  <template>\n    <div id=\"app-layout\">\n      <main>\n-       <Nuxt />\n+       <slot />\n      </main>\n    </div>\n  </template>\n```\n\n----------------------------------------\n\nTITLE: Type Definition of clearNuxtData in TypeScript\nDESCRIPTION: The type definition of the clearNuxtData function which accepts an optional parameter for specifying which cached data to clear. The function can take a single key, an array of keys, or a predicate function to selectively clear data.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/clear-nuxt-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclearNuxtData (keys?: string | string[] | ((key: string) => boolean)): void\n```\n\n----------------------------------------\n\nTITLE: Enabling asyncEntry in Nuxt Configuration\nDESCRIPTION: Enables generation of an async entry point for the Vue bundle, which aids module federation support.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    asyncEntry: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt Playground for Development\nDESCRIPTION: Command to start the Nuxt playground for testing changes during development.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: abortNavigation Type Signature in TypeScript\nDESCRIPTION: Type signature of the abortNavigation function that shows it accepts an optional Error or string parameter and returns false.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/abort-navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nabortNavigation(err?: Error | string): false\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addImports Function\nDESCRIPTION: TypeScript type definition showing the function signature and parameter types for the addImports utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/4.autoimports.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addImports (imports: Import | Import[]): void\n```\n\n----------------------------------------\n\nTITLE: Disabling Normalized Component Names in Nuxt Config\nDESCRIPTION: Configuration option to disable the new component name normalization feature if needed for backward compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    normalizeComponentNames: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Linting Nuxt Code\nDESCRIPTION: Command to run ESLint on the Nuxt codebase, ensuring adherence to coding standards.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Initializing a Nuxt layer with the starter template\nDESCRIPTION: Command to create a new Nuxt layer using the official starter template, which provides a basic structure to build upon.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/7.layers.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm create nuxt -- --template layer nuxt-layer\n```\n\n----------------------------------------\n\nTITLE: Adding Layout Example\nDESCRIPTION: Example of generating a new layout file in the layouts directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/add.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi add layout custom\n```\n\n----------------------------------------\n\nTITLE: Upgrading Nuxt Using Package Managers\nDESCRIPTION: Commands for upgrading Nuxt to the latest release using different package managers (npm, yarn, pnpm, and bun).\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dlx nuxi upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx nuxi upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun x nuxi upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining useLogger Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the `useLogger` function. It defines the function parameters and return type, indicating that it returns a ConsolaInstance.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/13.logging.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLogger (tag?: string, options?: Partial<ConsolaOptions>): ConsolaInstance\n```\n\n----------------------------------------\n\nTITLE: Updating Page Metadata Override Hooks\nDESCRIPTION: Shows how to update page metadata override hooks from pages:extend to pages:resolved following the change in when page metadata is scanned.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n  export default defineNuxtConfig({\n    hooks: {\n-     'pages:extend'(pages) {\n+     'pages:resolved'(pages) {\n        const myPage = pages.find(page => page.path === '/')\n        myPage.meta ||= {}\n        myPage.meta.layout = 'overridden-layout'\n      }\n    }\n  })\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition for refreshNuxtData Function in Nuxt\nDESCRIPTION: The type definition for refreshNuxtData function which accepts an optional parameter of a string or array of strings as keys for specific data refresh.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/refresh-nuxt-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrefreshNuxtData(keys?: string | string[])\n```\n\n----------------------------------------\n\nTITLE: Constructing Full URLs for Test Pages in Nuxt\nDESCRIPTION: Example of using the url helper from Nuxt Test Utils to generate a complete URL (with host and port) for a specific page path.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { url } from '@nuxt/test-utils/e2e'\n\nconst pageUrl = url('/page')\n// 'http://localhost:6840/page'\n```\n\n----------------------------------------\n\nTITLE: Defining clearNuxtState Function Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the clearNuxtState function. It takes an optional parameter 'keys' which can be a string, array of strings, or a function that returns a boolean. The function returns void.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/3.utils/clear-nuxt-state.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclearNuxtState (keys?: string | string[] | ((key: string) => boolean)): void\n```\n\n----------------------------------------\n\nTITLE: Migrating useAsync to useLazyAsyncData\nDESCRIPTION: Shows how to replace useAsync with the new useLazyAsyncData or useLazyFetch composables.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/5.nuxt3-compatible-api.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n<script setup>\n- import { useAsync } from '@nuxtjs/composition-api'\n- const posts = useAsync(() => $fetch('/api/posts'))\n+ const { data: posts } = useLazyAsyncData('posts', () => $fetch('/api/posts'))\n+ // or, more simply!\n+ const { data: posts } = useLazyFetch('/api/posts')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Hydration\nDESCRIPTION: Configuration to disable lazy hydration strategies for Lazy components.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    lazyHydration: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxi CLI Package\nDESCRIPTION: Commands for installing the Nuxi CLI package as a development dependency using different package managers.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/8.nitro.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D nuxi\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev nuxi\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D nuxi\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D nuxi\n```\n\n----------------------------------------\n\nTITLE: Type Definition for addImportsDir Function\nDESCRIPTION: TypeScript type definition showing the function signature and parameter types for the addImportsDir utility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/4.autoimports.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addImportsDir (dirs: string | string[], options?: { prepend?: boolean }): void\n```\n\n----------------------------------------\n\nTITLE: Migrating onGlobalSetup to Nuxt Plugin\nDESCRIPTION: Demonstrates how to replace onGlobalSetup with defineNuxtPlugin and the vue:setup hook.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/5.nuxt3-compatible-api.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { onGlobalSetup } from '@nuxtjs/composition-api'\n\n- export default () => {\n-   onGlobalSetup(() => {\n+ export default defineNuxtPlugin((nuxtApp) => {\n+   nuxtApp.hook('vue:setup', () => {\n      // ...\n    })\n- }\n+ })\n```\n\n----------------------------------------\n\nTITLE: Linting Nuxt Documentation\nDESCRIPTION: Command to lint the Nuxt documentation using MarkdownLint and case police for consistency.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint:docs\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt Module Project with pnpm\nDESCRIPTION: Command to create a new Nuxt module project using pnpm and the official starter template.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/3.modules.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create nuxt -- -t module my-module\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt 4 Compatibility in nuxt.config.ts\nDESCRIPTION: Configuration settings to opt into Nuxt 4 behavior while maintaining the ability to revert to Nuxt 3 features if needed. Sets compatibilityVersion to 4 with commented options for reverting to v3 behavior.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  future: {\n    compatibilityVersion: 4,\n  },\n  // To re-enable _all_ Nuxt v3 behavior, set the following options:\n  // srcDir: '.',\n  // dir: {\n  //   app: 'app'\n  // },\n  // experimental: {\n  //   scanPageMeta: 'after-resolve',\n  //   sharedPrerenderData: false,\n  //   compileTemplate: true,\n  //   resetAsyncDataToUndefined: true,\n  //   templateUtils: true,\n  //   relativeWatchPaths: true,\n  //   normalizeComponentNames: false,\n  //   spaLoadingTemplateLocation: 'within',\n  //   parseErrorData: false,\n  //   pendingWhenIdle: true,\n  //   defaults: {\n  //     useAsyncData: {\n  //       deep: true\n  //     }\n  //   }\n  // },\n  // features: {\n  //   inlineStyles: true\n  // },\n  // unhead: {\n  //   renderSSRHeadOptions: {\n  //     omitLineBreaks: false\n  //   }\n  // }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Build Cache in Nuxt\nDESCRIPTION: Configuration to enable caching of Nuxt build artifacts based on configuration and source files hash.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    buildCache: true\n  }\n})\n```\n\nLANGUAGE: bash\nCODE:\n```\n.nuxtrc\n.npmrc\npackage.json\npackage-lock.json\nyarn.lock\npnpm-lock.yaml\ntsconfig.json\nbun.lockb\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxt Upgrade Command\nDESCRIPTION: Command syntax for upgrading Nuxt to the latest version using nuxi CLI. Supports specifying root directory, working directory, log level, dependency deduplication, force upgrade, and release channel selection.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/upgrade.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi upgrade [ROOTDIR] [--cwd=<directory>] [--logLevel=<silent|info|verbose>] [--dedupe] [-f, --force] [-ch, --channel=<stable|nightly>]\n```\n\n----------------------------------------\n\nTITLE: Updating Head Tags After Unhead v2 Migration\nDESCRIPTION: Shows how to remove deprecated properties (vmid, hid) from useHead meta tags following the migration to Unhead v2.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\nuseHead({\n  meta: [{ \n    name: 'description', \n    // meta tags don't need a vmid, or a key    \n-   vmid: 'description' \n-   hid: 'description'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Nuxt 3 plugin for Vuex 4\nDESCRIPTION: Set up a Nuxt 3 plugin to use Vuex 4 for state management if migrating from Vuex is not feasible.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport store from '~/store'\n\nexport default defineNuxtPlugin(nuxtApp => {\n  nuxtApp.vueApp.use(store);\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Server within Playwright Tests\nDESCRIPTION: Shows how to configure Nuxt server options directly within a test file instead of using a global configuration. This provides flexibility for test-specific Nuxt settings.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { expect, test } from '@nuxt/test-utils/playwright'\n\ntest.use({\n  nuxt: {\n    rootDir: fileURLToPath(new URL('..', import.meta.url))\n  }\n})\n\ntest('test', async ({ page, goto }) => {\n  await goto('/', { waitUntil: 'hydration' })\n  await expect(page.getByRole('heading')).toHaveText('Welcome to Playwright!')\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of NuxtTime Component in Vue\nDESCRIPTION: Demonstrates the most basic implementation of the NuxtTime component using the current timestamp.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtTime :datetime=\"Date.now()\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Pending When Idle Configuration\nDESCRIPTION: Configuration to revert to previous pending behavior in async data handling.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    pendingWhenIdle: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Global .nuxtrc File Location for Windows\nDESCRIPTION: Path to the global .nuxtrc file location on Windows systems. This file allows users to define default Nuxt configurations that apply to all projects on their system.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.nuxtrc.md#2025-04-22_snippet_2\n\nLANGUAGE: md\nCODE:\n```\nC:\\Users\\{username}\\.nuxtrc\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Bridge with Bun\nDESCRIPTION: Command to install Nuxt Bridge and Nuxi as development dependencies using Bun.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @nuxt/bridge nuxi\n```\n\n----------------------------------------\n\nTITLE: Migrating from __dirname to import.meta.url in ESM\nDESCRIPTION: Example of how to replace the CommonJS __dirname global with ESM-compatible import.meta.url for file path operations.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { join } from 'path'\n\nconst newDir = join(__dirname, 'new-dir')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fileURLToPath } from 'node:url'\n\nconst newDir = fileURLToPath(new URL('./new-dir', import.meta.url))\n```\n\n----------------------------------------\n\nTITLE: Removing Manual Composition API Registration in JavaScript\nDESCRIPTION: Remove the plugin where you manually register the Composition API, as Nuxt Bridge will handle this automatically.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/3.bridge-composition-api.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import Vue from 'vue'\n- import VueCompositionApi from '@vue/composition-api'\n-\n- Vue.use(VueCompositionApi)\n```\n\n----------------------------------------\n\nTITLE: Example of Nuxt PR Title Format\nDESCRIPTION: Example showing the correct format for a pull request title following conventional commits guidelines.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocs: update the section about the nuxt.config.ts file\n```\n\n----------------------------------------\n\nTITLE: Configuring Nitro in Nuxt Bridge\nDESCRIPTION: TypeScript configuration to enable Nitro functionality in a Nuxt 2 application using Nuxt Bridge.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/8.nitro.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  bridge: {\n    nitro: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Head Behavior in Nuxt Config\nDESCRIPTION: Configuration option to revert to Unhead v1 behavior if needed for backward compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  unhead: {\n    legacy: true,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Opening Project in Visual Studio Code\nDESCRIPTION: Command to open your newly created Nuxt.js project in Visual Studio Code. Replace <project-name> with your project directory name.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/02.installation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncode <project-name>\n```\n\n----------------------------------------\n\nTITLE: Migrating defineNuxtPlugin in JavaScript/TypeScript\nDESCRIPTION: Remove the defineNuxtPlugin wrapper and use @nuxt/types for TypeScript support.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/3.bridge-composition-api.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { defineNuxtPlugin } from '@nuxtjs/composition-api'\n- export default defineNuxtPlugin((ctx, inject) => {})\n+ export default (ctx, inject) => {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Plugin } from '@nuxt/types'\n\nexport default <Plugin> function (ctx, inject) {}\n```\n\n----------------------------------------\n\nTITLE: Migrating router.routeNameSplitter in Nuxt 3\nDESCRIPTION: Implement custom route name generation logic using the pages:extend hook to replace router.routeNameSplitter functionality.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/7.migration/2.configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createResolver } from '@nuxt/kit'\n\nexport default defineNuxtConfig({\n  hooks: {\n    'pages:extend' (routes) {\n      const routeNameSplitter = '/'\n      const root = createResolver(import.meta.url).resolve('./pages')\n\n      function updateName(routes) {\n        if (!routes) return\n\n        for (const route of routes) {\n          const relativePath = route.file.substring(root.length + 1)\n          route.name = relativePath.slice(0, -4).replace(/\\/index$/, '').replace(/\\//g, routeNameSplitter)\n\n          updateName(route.children)\n        }\n      }\n      updateName(routes)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Server Target Script Configuration\nDESCRIPTION: Package.json script configuration for server-side rendering using Nuxi build and preview commands.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/8.nitro.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"nuxi build\",\n    \"start\": \"nuxi preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for updateTemplates Function\nDESCRIPTION: TypeScript interface definitions for the updateTemplates function and its options, used for regenerating templates.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/10.templates.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function updateTemplates (options: UpdateTemplatesOptions): void\n\ninterface UpdateTemplatesOptions {\n  filter?: (template: ResolvedNuxtTemplate) => boolean\n}\n\ninterface ResolvedNuxtTemplate {\n  src: string\n  filename: string\n  dst: string\n  options: Record<string, any>\n  getContents: (data: Record<string, any>) => string | Promise<string>\n  write: boolean\n  filename: string\n  dst: string\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Datetime Format Examples in Vue\nDESCRIPTION: Shows different ways to provide date input to the NuxtTime component using timestamp, Date object, and ISO string formats.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/13.nuxt-time.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtTime :datetime=\"Date.now()\" />\n  <NuxtTime :datetime=\"new Date()\" />\n  <NuxtTime datetime=\"2023-06-15T09:30:00.000Z\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring SPA Loading Template Location in Nuxt Config\nDESCRIPTION: Configuration option to revert to the previous behavior of placing the SPA loading template within the Nuxt root element.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    spaLoadingTemplateLocation: 'within',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring scanPageMeta in Nuxt\nDESCRIPTION: Configuration to disable page metadata scanning feature in Nuxt experimental options.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    scanPageMeta: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt Development\nDESCRIPTION: Command to install project dependencies using pnpm with a frozen lockfile, ensuring consistent package versions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --frozen-lockfile\n```\n\n----------------------------------------\n\nTITLE: Enabling Nuxt Environment for Specific Tests\nDESCRIPTION: Using the @vitest-environment comment to enable the Nuxt testing environment for a specific test file. This allows for fine-grained control over which tests use the Nuxt environment.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @vitest-environment nuxt\nimport { test } from 'vitest'\n\ntest('my test', () => {\n  // ... test with Nuxt environment!\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation in Markdown Frontmatter\nDESCRIPTION: YAML frontmatter configuration that disables navigation for this documentation page.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnavigation: false\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Bridge for Composition API in TypeScript\nDESCRIPTION: Set the bridge.capi option to true in the Nuxt configuration to enable Composition API support.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/3.bridge-composition-api.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  bridge: {\n    capi: true,\n    nitro: false // If migration to Nitro is complete, set to true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Nuxt Version in package.json\nDESCRIPTION: Updates the Nuxt dependency version to the latest Nuxt 2 version required for Bridge compatibility.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- \"nuxt\": \"^2.16.3\"\n+ \"nuxt\": \"^2.17.3\"\n```\n\n----------------------------------------\n\nTITLE: addComponent Type Definition\nDESCRIPTION: Type signature for the addComponent function showing parameter structure\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/5.components.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addComponent (options: AddComponentOptions): void\n```\n\n----------------------------------------\n\nTITLE: Updating useFetch in JavaScript\nDESCRIPTION: Replace $fetch and $fetchState with fetch and fetchState when using useFetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/3.bridge-composition-api.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nconst {\n- $fetch,\n- $fetchState,\n+ fetch,\n+ fetchState,\n} = useFetch(() => { posts.value = await $fetch('/api/posts') })\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Project Folder\nDESCRIPTION: Command to navigate into your Nuxt.js project directory. Replace <project-name> with your project directory name.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/02.installation.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <project-name>\n```\n\n----------------------------------------\n\nTITLE: Defining isNuxt3 Function in TypeScript\nDESCRIPTION: This snippet defines the isNuxt3 function, which checks if the current Nuxt version is 3.x. It shows the function signature and the optional Nuxt parameter.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/3.compatibility.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNuxt3(nuxt?: Nuxt): boolean;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Playwright Testing with Nuxt\nDESCRIPTION: Commands for installing Playwright test runner and Nuxt test utilities using various package managers.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev @playwright/test @nuxt/test-utils\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @playwright/test @nuxt/test-utils\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @playwright/test @nuxt/test-utils\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add --dev @playwright/test @nuxt/test-utils\n```\n\n----------------------------------------\n\nTITLE: Importing CommonJS Module in ESM Context\nDESCRIPTION: Example of importing a CommonJS module in an ESM context, showing how interoperability mechanisms handle default exports.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport pkg from 'cjs-pkg'\n\nconsole.log(pkg) // { test: 123 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect in Nuxt Documentation using YAML\nDESCRIPTION: A YAML front matter configuration that disables navigation and sets up a redirect to '/guide/going-further/tooling'. This is commonly used in Nuxt documentation to handle page reorganization.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nnavigation: false\nredirect: /guide/going-further/tooling\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using NPM package manager.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Extending Vite Configuration Type Definition\nDESCRIPTION: TypeScript type definition for the extendViteConfig function and its options interface.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extendViteConfig (callback: ((config: ViteConfig) => void), options?: ExtendViteConfigOptions): void\n\nexport interface ExtendViteConfigOptions {\n  dev?: boolean\n  build?: boolean\n  server?: boolean\n  client?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt.js Development Server with Different Package Managers\nDESCRIPTION: Commands to start the Nuxt.js development server using different package managers. The -o or --open flag automatically opens the application in your default browser.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/02.installation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -- -o\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev --open\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev -o\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev -o\n\n# To use the Bun runtime during development\n# bun --bun run dev -o\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Nuxt Development\nDESCRIPTION: Git command to create and checkout a new branch for working on Nuxt contributions.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/5.framework-contribution.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-branch\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Project with npm\nDESCRIPTION: Command to create a new Nuxt starter project using npm. This sets up a project with necessary files and dependencies.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create nuxt <my-project>\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js Named Import Error for CJS Module\nDESCRIPTION: Example of an error message when trying to use named imports from a CommonJS module in an ESM context, illustrating compatibility issues between module systems.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfile:///path/to/index.mjs:5\nimport { named } from 'sample-library'\n         ^^^^^\nSyntaxError: Named export 'named' not found. The requested module 'sample-library' is a CommonJS module, which may not support all module.exports as named exports.\n\nCommonJS modules can always be imported via the default export, for example using:\n\nimport pkg from 'sample-library';\nconst { named } = pkg;\n\n    at ModuleJob._instantiate (internal/modules/esm/module_job.js:120:21)\n    at async ModuleJob.run (internal/modules/esm/module_job.js:165:5)\n    at async Loader.import (internal/modules/esm/loader.js:177:24)\n    at async Object.loadESM (internal/process/esm_loader.js:68:5)\n```\n\n----------------------------------------\n\nTITLE: Customizing NuxtRouteAnnouncer with Slots\nDESCRIPTION: Example of customizing the NuxtRouteAnnouncer component using its default slot. This allows for custom formatting of the announcement message with access to the message variable.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/12.nuxt-route-announcer.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <NuxtRouteAnnouncer>\n    <template #default=\"{ message }\">\n      <p>{{ message }} was loaded.</p>\n    </template>\n  </NuxtRouteAnnouncer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Executing Nuxi Info Command in Bash\nDESCRIPTION: This command runs the 'nuxi info' command to log information about a Nuxt project. It accepts an optional ROOTDIR argument and a --cwd option to specify the working directory.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/4.commands/info.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi info [ROOTDIR] [--cwd=<directory>]\n```\n\n----------------------------------------\n\nTITLE: Updating Package Scripts for Nuxi\nDESCRIPTION: Diff showing the required changes to package.json scripts to use Nuxi commands instead of traditional Nuxt commands.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/8.nitro.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n-   \"dev\": \"nuxt\",\n+   \"dev\": \"nuxi dev\",\n-   \"build\": \"nuxt build\",\n+   \"build\": \"nuxi build\",\n-   \"start\": \"nuxt start\",\n+   \"start\": \"nuxi preview\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt Bridge in nuxt.config.ts\nDESCRIPTION: TypeScript configuration file setup for Nuxt Bridge with bridge feature disabled by default.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  bridge: false\n})\n```\n\n----------------------------------------\n\nTITLE: Documentation Header in Markdown\nDESCRIPTION: Markdown header defining the project name and providing links to the main Nuxt framework and GitHub repository.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/packages/test-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Nuxt Test Utils\n\n🧪 Test utilities for [Nuxt](https://nuxt.com).\n\n- 👉 View on GitHub at https://github.com/nuxt/test-utils\n```\n\n----------------------------------------\n\nTITLE: Adding Webpack Plugin Type Definition\nDESCRIPTION: TypeScript type definition for the addWebpackPlugin function and related types.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addWebpackPlugin (pluginOrGetter: PluginOrGetter, options?: ExtendWebpackConfigOptions): void\n\ntype PluginOrGetter = WebpackPluginInstance | WebpackPluginInstance[] | (() => WebpackPluginInstance | WebpackPluginInstance[])\n\ninterface ExtendWebpackConfigOptions {\n  dev?: boolean\n  build?: boolean\n  server?: boolean\n  client?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Production Terminal\nDESCRIPTION: Example of how to set environment variables directly in the terminal when running a Nuxt application in production mode.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/2.directory-structure/2.env.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDATABASE_HOST=mydatabaseconnectionstring node .output/server/index.mjs\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Bridge with PNPM\nDESCRIPTION: Command to install Nuxt Bridge and Nuxi as development dependencies using PNPM.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @nuxt/bridge nuxi\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Import Resolution\nDESCRIPTION: Configuration to disable template import resolution relative to the module that added them.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    templateImportResolution: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: NuxtImg Output HTML\nDESCRIPTION: Example showing the resulting HTML output after NuxtImg component is rendered.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/1.components/9.nuxt-img.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/nuxt-icon.png\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/1.overview.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack Command\nDESCRIPTION: Terminal command to enable Corepack functionality for package manager version management. This is a one-time setup required after Node.js installation.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/4.contribution.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Meta Scanning in Nuxt Config\nDESCRIPTION: Configuration option to revert to the previous behavior of scanning page metadata before the pages:extend hook instead of after.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    scanPageMeta: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Vite Plugin Type Definition\nDESCRIPTION: TypeScript type definition for the addVitePlugin function and related types.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/5.kit/14.builder.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addVitePlugin (pluginOrGetter: PluginOrGetter, options?: ExtendViteConfigOptions): void\n\ntype PluginOrGetter = VitePlugin | VitePlugin[] | (() => VitePlugin | VitePlugin[])\n\ninterface ExtendViteConfigOptions {\n  dev?: boolean\n  build?: boolean\n  server?: boolean\n  client?: boolean\n  prepend?: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Runtime Config Usage\nDESCRIPTION: Example showing incorrect usage of useRuntimeConfig outside a composable context.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/1.auto-imports.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// trying to access runtime config outside a composable\nconst config = useRuntimeConfig()\n\nexport const useMyComposable = () => {\n  // accessing runtime config here\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from EJS Templates to ES-Toolkit for Nuxt Template Compilation\nDESCRIPTION: This code demonstrates how to migrate from Nuxt's previous lodash/template EJS-based template system to using es-toolkit/compat. The change involves reading the template file directly and using the template function from es-toolkit instead of relying on the src property.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/18.upgrade.md#2025-04-22_snippet_28\n\nLANGUAGE: diff\nCODE:\n```\n+ import { readFileSync } from 'node:fs'\n+ import { template } from 'es-toolkit/compat'\n  // ...\n  addTemplate({\n    fileName: 'appinsights-vue.js'\n    options: { /* some options */ },\n-   src: resolver.resolve('./runtime/plugin.ejs'),\n+   getContents({ options }) {\n+     const contents = readFileSync(resolver.resolve('./runtime/plugin.ejs'), 'utf-8')\n+     return template(contents)({ options })\n+   },\n  })\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser DevTools Timing\nDESCRIPTION: Configuration to disable performance markers for Nuxt hooks in browser devtools.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    browserDevtoolsTiming: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling crossOriginPrefetch in Nuxt Configuration\nDESCRIPTION: Enables cross-origin prefetch using the Speculation Rules API.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    crossOriginPrefetch: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pending When Idle\nDESCRIPTION: Configuration to modify pending object behavior for useAsyncData and useFetch.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    pendingWhenIdle: false\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Module Mutation\nDESCRIPTION: Configuration to explicitly enable recording of mutations to nuxt.options in module context.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/1.experimental-features.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  experimental: {\n    debugModuleMutation: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Migrating build.publicPath Configuration in Nuxt\nDESCRIPTION: This code snippet demonstrates how to migrate the build.publicPath configuration option when upgrading to Nuxt Bridge. The old build.publicPath option is replaced with app.cdnURL in the new configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/10.configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n- build: {\n-   publicPath: 'https://my-cdn.net'\n- }\n+ app: {\n+   cdnURL: 'https://my-cdn.net'\n+ }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js ESM Import Error\nDESCRIPTION: Example of an error message when trying to import an ESM-syntax file in a Node.js context that expects CommonJS, highlighting the need for proper module configuration.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/7.esm.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(node:22145) Warning: To load an ES module, set \"type\": \"module\" in the package.json or use the .mjs extension.\n/path/to/index.js:1\n\nexport default {}\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at wrapSafe (internal/modules/cjs/loader.js:1001:16)\n    at Module._compile (internal/modules/cjs/loader.js:1049:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1114:10)\n    ....\n    at async Object.loadESM (internal/process/esm_loader.js:68:5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Meta in Nuxt Bridge\nDESCRIPTION: Configuration example showing how to enable page meta macros in Nuxt Bridge through the nuxt.config.ts file.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/6.bridge/4.plugins-and-middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineNuxtConfig } from '@nuxt/bridge'\n\nexport default defineNuxtConfig({\n  bridge: {\n    macros: {\n      pageMeta: true\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Vue Context Lifecycle in Async Operations\nDESCRIPTION: Shows how Vue's global context gets unset during async operations and why direct context access fails after async calls.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-nuxt-app.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// --- Vue internal ---\nconst _vueInstance = null\nconst getCurrentInstance = () => _vueInstance\n// ---\n\n// Vue / Nuxt sets a global variable referencing to current component in _vueInstance when calling setup()\nasync function setup() {\n  getCurrentInstance() // Works\n  await someAsyncOperation() // Vue unsets the context in same tick before async operation!\n  getCurrentInstance() // null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up End-to-End Testing with Target Host in Nuxt Test Utils\nDESCRIPTION: Example showing how to configure Nuxt Test Utils to run end-to-end tests against an existing host instead of building and launching a test server. This approach can be more efficient for testing against deployed applications.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/17.testing.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setup, createPage } from '@nuxt/test-utils/e2e'\nimport { describe, it, expect } from 'vitest'\n\ndescribe('login page', async () => {\n  await setup({\n    host: 'http://localhost:8787',\n  })\n\n  it('displays the email and password fields', async () => {\n    const page = await createPage('/login')\n    expect(await page.getByTestId('email').isVisible()).toBe(true)\n    expect(await page.getByTestId('password').isVisible()).toBe(true)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Server and Client Execution in Vue with Universal Rendering\nDESCRIPTION: This Vue component example shows which parts of code run on the server and/or client in universal rendering mode. It demonstrates a counter that initializes on the server and becomes interactive during hydration on the client.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/1.concepts/3.rendering.md#2025-04-22_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst counter = ref(0); // executes in server and client environments\n\nconst handleClick = () => {\n  counter.value++; // executes only in a client environment\n};\n</script>\n\n<template>\n  <div>\n    <p>Count: {{ counter }}</p>\n    <button @click=\"handleClick\">Increment</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Markdown Card Group Structure for Nuxt Releases\nDESCRIPTION: Markdown structure defining a card group layout that displays links to various Nuxt component releases. Each card contains an icon, title, and target link to GitHub releases.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/5.community/7.changelog.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::card-group\n  ::card\n  ---\n  icon: i-simple-icons-github\n  title: nuxt/nuxt\n  to: https://github.com/nuxt/nuxt/releases\n  target: _blank\n  ui.icon.base: text-black dark:text-white\n  ---\n  Nuxt framework releases.\n  ::\n  ::card\n  ---\n  icon: i-simple-icons-github\n  title: nuxt/cli\n  to: https://github.com/nuxt/cli/releases\n  target: _blank\n  ui.icon.base: text-black dark:text-white\n  ---\n  Nuxt CLI (`nuxi`) releases.\n  ::\n```\n\n----------------------------------------\n\nTITLE: Cookie Handling in Server-Side API Calls\nDESCRIPTION: Implementation of cookie handling for server-side API calls in Nuxt, showing how to proxy cookies from internal requests back to the client.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/10.data-fetching.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { appendResponseHeader } from 'h3'\nimport type { H3Event } from 'h3'\n\nexport const fetchWithCookie = async (event: H3Event, url: string) => {\n  /* Get the response from the server endpoint */\n  const res = await $fetch.raw(url)\n  /* Get the cookies from the response */\n  const cookies = res.headers.getSetCookie()\n  /* Attach each cookie to our incoming Request */\n  for (const cookie of cookies) {\n    appendResponseHeader(event, 'set-cookie', cookie)\n  }\n  /* Return the data of the response */\n  return res._data\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HTML Template with Nitro Plugin in TypeScript\nDESCRIPTION: This code shows how to use a Nitro plugin to extend the HTML template in Nuxt. It demonstrates modifying the head and intercepting the response.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/1.getting-started/04.views.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNitroPlugin((nitroApp) => {\n  nitroApp.hooks.hook('render:html', (html, { event }) => {\n    // This will be an object representation of the html template.\n    console.log(html)\n    html.head.push(`<meta name=\"description\" content=\"My custom description\" />`)\n  })\n  // You can also intercept the response here.\n  nitroApp.hooks.hook('render:response', (response, { event }) => { console.log(response) })\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Component with Runtime Hook Implementation\nDESCRIPTION: Example Vue component demonstrating how to use useRuntimeHook to register a link prefetch hook that logs prefetched links and automatically cleans up when the component unmounts.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-runtime-hook.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\n// Register a hook that runs every time a link is prefetched, but which will be\n// automatically cleaned up (and not called again) when the component is unmounted\nuseRuntimeHook('link:prefetch', (link) => {\n  console.log('Prefetching', link)\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Nuxt Error Interface Structure in TypeScript\nDESCRIPTION: Defines the structure of Nuxt error objects that are used with the useError composable. The interface shows the standard properties available in Nuxt error objects including HTTP status code, status message, and error message.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-error.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface {\n  //  HTTP response status code\n  statusCode: number\n  // HTTP response status message\n  statusMessage: string\n  // Error message\n  message: string\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nuxt Application Structure in Vue\nDESCRIPTION: Example of a basic Nuxt application structure using Vue. It demonstrates SEO meta tag setup, component usage, and styling.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nuseSeoMeta({\n  title: 'Meet Nuxt',\n  description: 'The Intuitive Vue Framework.'\n})\n</script>\n\n<template>\n  <div id=\"app\">\n    <AppHeader />\n    <NuxtPage />\n    <AppFooter />\n  </div>\n</template>\n\n<style scoped>\n#app {\n  background-color: #020420;\n  color: #00DC82;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Nuxt Kit Dependency in package.json\nDESCRIPTION: This snippet shows how to add @nuxt/kit as a dependency in the package.json file. It recommends using the nightly version for the latest features.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/2.guide/3.going-further/4.kit.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@nuxt/kit\": \"npm:@nuxt/kit-nightly@latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authorization Header with useRequestHeader in Nuxt.js\nDESCRIPTION: Uses the useRequestHeader composable to retrieve the 'authorization' header from incoming requests. In browser contexts, this will return undefined.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-request-header.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the authorization request header\nconst authorization = useRequestHeader('authorization')\n```\n\n----------------------------------------\n\nTITLE: Generating and Previewing Nuxt Site with Preview Mode\nDESCRIPTION: Shows the commands to generate a Nuxt site and serve it in preview mode using the Nuxt CLI.\nSOURCE: https://github.com/nuxt/nuxt/blob/main/docs/3.api/2.composables/use-preview-mode.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi generate\nnpx nuxi preview\n```"
  }
]