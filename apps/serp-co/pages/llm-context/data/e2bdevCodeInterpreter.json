[
  {
    "owner": "e2b-dev",
    "repo": "code-interpreter",
    "content": "TITLE: Implementing Sandbox Class in Python\nDESCRIPTION: Defines a Sandbox class that provides a synchronous interface for creating and managing isolated cloud environments for code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Class for E2B Cloud Sandbox in Python\nDESCRIPTION: This class represents an E2B cloud sandbox, providing methods for running code in various languages and contexts. It includes multiple overloaded run_code methods for different use cases.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox):\n    \"\"\"E2B cloud sandbox is a secure and isolated cloud environment.\n\n    The sandbox allows you to:\n    - Access Linux OS\n    - Create, list, and delete files and directories\n    - Run commands\n    - Run isolated code\n    - Access the internet\n\n    Check docs [here](https://e2b.dev/docs).\n\n    Use the `Sandbox()` to create a new sandbox.\n\n    Example:\n    ```python\n    from e2b_code_interpreter import Sandbox\n\n    sandbox = Sandbox()\n    ```\n    \"\"\"\n\n    @overload\n    def run_code(self,\n                 code: str,\n                 language: Union[Literal[\"python\"], None] = None,\n                 on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                 on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                 on_result: Optional[OutputHandler[Result]] = None,\n                 on_error: Optional[OutputHandler[ExecutionError]] = None,\n                 envs: Optional[Dict[str, str]] = None,\n                 timeout: Optional[float] = None,\n                 request_timeout: Optional[float] = None) -> Execution:\n        \"\"\"Runs the code as Python.\n\n        Specify the `language` or `context` option to run the code as a different language or in a different `Context`.\n\n        You can reference previously defined variables, imports, and functions in the code.\n\n        Args:\n            code: Code to execute\n            language: Language to use for code execution. If not defined, the default Python context is used.\n            on_stdout: Callback for stdout messages\n            on_stderr: Callback for stderr messages\n            on_result: Callback for the `Result` object\n            on_error: Callback for the `ExecutionError` object\n            envs: Custom environment variables\n            timeout: Timeout for the code execution in **seconds**\n            request_timeout: Timeout for the request in **seconds**\n\n        Returns:\n            `Execution` result object\n        \"\"\"\n        ...\n\n    @overload\n    def run_code(self,\n                 code: str,\n                 language: Optional[str] = None,\n                 on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                 on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                 on_result: Optional[OutputHandler[Result]] = None,\n                 on_error: Optional[OutputHandler[ExecutionError]] = None,\n                 envs: Optional[Dict[str, str]] = None,\n                 timeout: Optional[float] = None,\n                 request_timeout: Optional[float] = None) -> Execution:\n        \"\"\"Runs the code for the specified language.\n\n        Specify the `language` or `context` option to run the code as a different language or in a different `Context`.\n        If no language is specified, Python is used.\n\n        You can reference previously defined variables, imports, and functions in the code.\n\n        Args:\n            code: Code to execute\n            language: Language to use for code execution. If not defined, the default Python context is used.\n            on_stdout: Callback for stdout messages\n            on_stderr: Callback for stderr messages\n            on_result: Callback for the `Result` object\n            on_error: Callback for the `ExecutionError` object\n            envs: Custom environment variables\n            timeout: Timeout for the code execution in **seconds**\n            request_timeout: Timeout for the request in **seconds**\n\n        Returns:\n            `Execution` result object\n        \"\"\"\n        ...\n\n    @overload\n    def run_code(self,\n                 code: str,\n                 context: Optional[Context] = None,\n                 on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                 on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                 on_result: Optional[OutputHandler[Result]] = None,\n                 on_error: Optional[OutputHandler[ExecutionError]] = None,\n                 envs: Optional[Dict[str, str]] = None,\n                 timeout: Optional[float] = None,\n                 request_timeout: Optional[float] = None) -> Execution:\n        \"\"\"Runs the code in the specified context, if not specified, the default context is used.\n\n        Specify the `language` or `context` option to run the code as a different language or in a different `Context`.\n\n        You can reference previously defined variables, imports, and functions in the code.\n\n        Args:\n            code: Code to execute\n            context: Concrete context to run the code in. If not specified, the default context for the language is used. It's mutually exclusive with the language.\n            on_stdout: Callback for stdout messages\n            on_stderr: Callback for stderr messages\n            on_result: Callback for the `Result` object\n            on_error: Callback for the `ExecutionError` object\n            envs: Custom environment variables\n            timeout: Timeout for the code execution in **seconds**\n            request_timeout: Timeout for the request in **seconds**\n\n        Returns:\n            `Execution` result object\n        \"\"\"\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Data Class in Python\nDESCRIPTION: Dataclass representing the data displayed from cell execution in a Jupyter-like notebook, supporting multiple display formats.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n```\n\nRepresents the data to be displayed as a result of executing a cell in a Jupyter notebook.\nThe result is similar to the structure returned by ipython kernel: https://ipython.readthedocs.io/en/stable/development/execution.html#execution-semantics\n\nThe result can contain multiple types of data, such as text, images, plots, etc. Each type of data is represented\nas a string, and the result can contain multiple types of data. The display calls don't have to have text representation,\nfor the actual result the representation is always present for the result, the other representations are always optional.\n\n\n### is\\_main\\_result\n\nWhether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\n\n\n### extra\n\nExtra data that can be included. Not part of the standard types.\n\n\n### formats\n\n```python\ndef formats() -> Iterable[str]\n```\n\nReturns all available formats of the result.\n\n**Returns**:\n\nAll available formats of the result in MIME types.\n\n\n### \\_\\_str\\_\\_\n\n```python\ndef __str__() -> Optional[str]\n```\n\nReturns the text representation of the data.\n\n**Returns**:\n\nThe text representation of the data.\n\n\n### \\_repr\\_html\\_\n\n```python\ndef _repr_html_() -> Optional[str]\n```\n\nReturns the HTML representation of the data.\n\n**Returns**:\n\nThe HTML representation of the data.\n\n\n### \\_repr\\_markdown\\_\n\n```python\ndef _repr_markdown_() -> Optional[str]\n```\n\nReturns the Markdown representation of the data.\n\n**Returns**:\n\nThe Markdown representation of the data.\n\n\n### \\_repr\\_svg\\_\n\n```python\ndef _repr_svg_() -> Optional[str]\n```\n\nReturns the SVG representation of the data.\n\n**Returns**:\n\nThe SVG representation of the data.\n\n\n### \\_repr\\_png\\_\n\n```python\ndef _repr_png_() -> Optional[str]\n```\n\nReturns the base64 representation of the PNG data.\n\n**Returns**:\n\nThe base64 representation of the PNG data.\n\n\n### \\_repr\\_jpeg\\_\n\n```python\ndef _repr_jpeg_() -> Optional[str]\n```\n\nReturns the base64 representation of the JPEG data.\n\n**Returns**:\n\nThe base64 representation of the JPEG data.\n\n\n### \\_repr\\_pdf\\_\n\n```python\ndef _repr_pdf_() -> Optional[str]\n```\n\nReturns the PDF representation of the data.\n\n**Returns**:\n\nThe PDF representation of the data.\n\n\n### \\_repr\\_latex\\_\n\n```python\ndef _repr_latex_() -> Optional[str]\n```\n\nReturns the LaTeX representation of the data.\n\n**Returns**:\n\nThe LaTeX representation of the data.\n\n\n### \\_repr\\_json\\_\n\n```python\ndef _repr_json_() -> Optional[dict]\n```\n\nReturns the JSON representation of the data.\n\n**Returns**:\n\nThe JSON representation of the data.\n\n\n### \\_repr\\_javascript\\_\n\n```python\ndef _repr_javascript_() -> Optional[str]\n```\n\nReturns the JavaScript representation of the data.\n\n**Returns**:\n\nThe JavaScript representation of the data.\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSandbox Class for Isolated Code Execution in Python\nDESCRIPTION: Defines a class for creating and managing isolated cloud sandboxes for secure code execution. Provides methods to run code in different languages with callbacks for various outputs.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code as Python.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code for the specified language.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\nIf no language is specified, Python is used.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n```\n\n----------------------------------------\n\nTITLE: Defining Sandbox Class in Python\nDESCRIPTION: Class definition for E2B cloud sandbox, which provides a secure and isolated cloud environment for running code, managing files, and accessing the internet.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Data Class in Python\nDESCRIPTION: Represents the complete result of a cell execution, including results, logs, errors, and execution count, with methods for accessing text representation and JSON serialization.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n\n### results\n\nList of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n\n\n### logs\n\nLogs printed to stdout and stderr during execution.\n\n\n### error\n\nError object if an error occurred, None otherwise.\n\n\n### execution\\_count\n\nExecution count of the cell.\n\n\n### text\n\n```python\n@property\ndef text() -> Optional[str]\n```\n\nReturns the text representation of the result.\n\n**Returns**:\n\nThe text representation of the result.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Execution object.\n```\n\n----------------------------------------\n\nTITLE: Running Code in Sandbox Context (Python)\nDESCRIPTION: Executes code in a specified context within the sandbox. Allows running code in different languages or contexts with customizable output handlers and environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating E2B Sandbox in TypeScript\nDESCRIPTION: Demonstrates how to create a new E2B cloud sandbox instance using the Sandbox.create() method.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sandbox } from '@e2b/code-interpreter'\n\nconst sandbox = await Sandbox.create()\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language in Sandbox\nDESCRIPTION: Method to run code in a specified language within the sandbox. If no language is specified, Python is used as default. It allows setting callbacks, environment variables, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: E2B Cloud Sandbox Class Definition in Python\nDESCRIPTION: This class defines the E2B cloud sandbox, providing a secure and isolated cloud environment for running code, managing files, and accessing the internet.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in AsyncSandbox\nDESCRIPTION: Defines an overloaded method for running Python code in the AsyncSandbox. It allows specifying various parameters such as language, callbacks for output handling, environment variables, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Context in Sandbox\nDESCRIPTION: Method to run code in a specified context within the sandbox. If no context is provided, the default context is used. It allows setting callbacks, environment variables, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Sandbox Instance in Python\nDESCRIPTION: Demonstrates how to create a new instance of Sandbox. This is the recommended way to instantiate a new synchronous sandbox environment.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import Sandbox\n\nsandbox = Sandbox()\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncSandbox Class\nDESCRIPTION: Base class definition for AsyncSandbox that provides isolated cloud environment functionality for running code securely.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n```\n\n----------------------------------------\n\nTITLE: Running Code in Custom Context in E2B Sandbox\nDESCRIPTION: This function runs code in a specified context within the E2B sandbox, allowing for custom handlers, environment variables, and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code with Context and Callbacks in Python\nDESCRIPTION: This function runs code in a specified context with optional callbacks for handling output and errors. It supports custom environment variables and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing run_code Method for AsyncSandbox in Python\nDESCRIPTION: Defines multiple overloaded versions of the run_code method for executing code in different languages and contexts within the AsyncSandbox.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Requirements File for Python Dependencies\nDESCRIPTION: A requirements.txt file that specifies exact versions of Python packages needed for the project. Includes Jupyter server components, data processing libraries, visualization tools, and machine learning packages.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/template/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Jupyter server requirements\njupyter-server==2.13.0\nipykernel==6.29.3\nipython==8.22.2\n\norjson==3.9.15\npandas==1.5.3\nmatplotlib==3.9.2\npillow==10.3.0\n\n# Latest version for\ne2b_charts\n\n# Other packages\naiohttp==3.10.11\nbeautifulsoup4==4.12.3\nbokeh==3.3.4\ngensim==4.3.2\nimageio==2.34.0\njoblib==1.3.2\nlibrosa==0.10.1\nnltk==3.9\nnumpy==1.26.4\nopencv-python==4.9.0.80\nopenpyxl==3.1.2\nplotly==5.19.0\npytest==8.1.0\npython-docx==1.1.0\npytz==2024.1\nrequests==2.32.2\nscikit-image==0.22.0\nscikit-learn==1.5.0\nscipy==1.12.0\nseaborn==0.13.2\nsoundfile==0.12.1\nspacy==3.7.4\ntextblob==0.18.0\ntornado==6.4.2\nurllib3==1.26.19\nxarray==2024.2.0\nxlrd==2.0.1\nsympy==1.12\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in Sandbox\nDESCRIPTION: Defines an overloaded method for running Python code in the Sandbox. It provides similar functionality to the AsyncSandbox version but in a synchronous manner.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Initializing E2B Cloud Sandbox (Python)\nDESCRIPTION: Defines the Sandbox class for creating a secure and isolated cloud environment. Allows file operations, command execution, and internet access.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language in E2B Sandbox\nDESCRIPTION: This function runs code in a specified language within the E2B sandbox, with options for callbacks, environment variables, and timeouts. It defaults to Python if no language is specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Using Custom Sandbox with Code Interpreter SDK in JavaScript/TypeScript\nDESCRIPTION: This JavaScript/TypeScript code shows how to create and use a custom sandbox with the Code Interpreter SDK, including running code and proper resource cleanup.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/template/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Sandbox} from '@e2b/code-interpreter'\n\nconst sandbox = await Sandbox.create({template: 'your-custom-sandbox-name'})\nconst execution = await sandbox.runCode('print(\"hello\")')\nawait sandbox.kill()\n```\n\n----------------------------------------\n\nTITLE: Code Context Creation Method\nDESCRIPTION: Method for creating a new execution context with specified working directory and language settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Class in TypeScript\nDESCRIPTION: This class represents the result of a cell execution, including results, logs, errors, and execution count. It provides methods for accessing text representation and JSON serialization.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/messaging/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Execution(\n   results: Result[], \n   logs: Logs, \n   error?: ExecutionError, \n   executionCount?: number): Execution\n```\n\nLANGUAGE: typescript\nCODE:\n```\nget text(): undefined | string\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox with Language Specification\nDESCRIPTION: Method signature for executing code in a specified language or context, with the ability to reference previously defined variables and functions.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Initializing AsyncSandbox Class\nDESCRIPTION: Base class definition for E2B cloud sandbox that provides secure and isolated code execution environment with Linux OS access, file operations, and internet connectivity.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n```\n\n----------------------------------------\n\nTITLE: Running Code with Custom Context and Handlers in Python\nDESCRIPTION: This function runs code in a specified context with optional handlers for output, errors, and results. It allows for custom environment variables and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSandbox Class in Python\nDESCRIPTION: Main class for interacting with E2B cloud sandbox environments, providing methods to run code in various languages with configurable callback handlers for outputs, results, and errors.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n\nE2B cloud sandbox is a secure and isolated cloud environment.\n\nThe sandbox allows you to:\n- Access Linux OS\n- Create, list, and delete files and directories\n- Run commands\n- Run isolated code\n- Access the internet\n\nCheck docs [here](https://e2b.dev/docs).\n\nUse the `AsyncSandbox.create()` to create a new sandbox.\n\n**Example**:\n\n```python\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```\n\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code as Python.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code for the specified language.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\nIf no language is specified, Python is used.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n```\n\n----------------------------------------\n\nTITLE: Python Code Execution Method\nDESCRIPTION: Method overload for executing Python code with support for callbacks, environment variables, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specific Context in AsyncSandbox\nDESCRIPTION: Method overload for running code in a specified context within the AsyncSandbox. It allows defining a custom context, handling output, setting environment variables, and specifying timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSandbox Class in Python\nDESCRIPTION: A class for creating and managing E2B cloud sandbox environments, providing methods for code execution in isolated environments with various language support.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code as Python.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code for the specified language.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\nIf no language is specified, Python is used.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n```\n\n----------------------------------------\n\nTITLE: Implementing Logs Data Class in Python\nDESCRIPTION: Dataclass for capturing stdout and stderr outputs during code execution, including print statements and warnings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n```\n\nData printed to stdout and stderr during execution, usually by print statements, logs, warnings, subprocesses, etc.\n\n\n### stdout\n\nList of strings printed to stdout by prints, subprocesses, etc.\n\n\n### stderr\n\nList of strings printed to stderr by prints, subprocesses, etc.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Logs object.\n\n\n### serialize\\_results\n\n```python\ndef serialize_results(results: List[Result]) -> List[Dict[str, str]]\n```\n\nSerializes the results to JSON.\n```\n\n----------------------------------------\n\nTITLE: Initializing E2B Cloud Sandbox in Python\nDESCRIPTION: This class represents an E2B cloud sandbox, providing a secure and isolated cloud environment for code execution and file operations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Installing E2B Code Interpreter SDK via NPM\nDESCRIPTION: Command to install the E2B Code Interpreter SDK using npm package manager. This package allows communication with E2B's sandboxes.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/js/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @e2b/code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Multi-Language Code Execution Method\nDESCRIPTION: Method overload for executing code in different programming languages with configurable execution parameters.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context Asynchronously in AsyncSandbox\nDESCRIPTION: Asynchronous method to create a new context for running code within the AsyncSandbox. It allows setting the working directory, specifying the language, and defining a request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncSandbox Class in Python\nDESCRIPTION: Class definition for AsyncSandbox, which represents a secure and isolated cloud environment for running code and accessing Linux OS functionalities.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logs Dataclass in Python\nDESCRIPTION: A dataclass for representing output logs from code execution, including stdout and stderr content, with methods for JSON serialization and result processing.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n\n### stdout\n\nList of strings printed to stdout by prints, subprocesses, etc.\n\n\n### stderr\n\nList of strings printed to stderr by prints, subprocesses, etc.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Logs object.\n\n\n### serialize\\_results\n\n```python\ndef serialize_results(results: List[Result]) -> List[Dict[str, str]]\n```\n\nSerializes the results to JSON.\n```\n\n----------------------------------------\n\nTITLE: Creating an AsyncSandbox Instance in Python\nDESCRIPTION: Example code showing how to create a new E2B sandbox instance using the AsyncSandbox.create() method. This creates a secure and isolated cloud environment for code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```\n\n----------------------------------------\n\nTITLE: General Language Code Execution Method Overload\nDESCRIPTION: Method overload for running code in any specified programming language with optional parameters for handling outputs and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context (Python)\nDESCRIPTION: Creates a new context for running code with customizable working directory and language. Defaults to Python if no language is specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Initializing AsyncSandbox Class in Python\nDESCRIPTION: Defines the AsyncSandbox class which inherits from BaseAsyncSandbox. This class represents an E2B cloud sandbox, providing a secure and isolated cloud environment with various capabilities.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSandbox Class in Python\nDESCRIPTION: Main class for creating and managing E2B cloud sandboxes, providing methods to run code in secure isolated environments.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n```\n\nE2B cloud sandbox is a secure and isolated cloud environment.\n\nThe sandbox allows you to:\n- Access Linux OS\n- Create, list, and delete files and directories\n- Run commands\n- Run isolated code\n- Access the internet\n\nCheck docs [here](https://e2b.dev/docs).\n\nUse the `AsyncSandbox.create()` to create a new sandbox.\n\n**Example**:\n\n```python\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```\n\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code as Python.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n\n\n### run\\_code\n\n```python\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\nRuns the code for the specified language.\n\nSpecify the `language` or `context` option to run the code as a different language or in a different `Context`.\nIf no language is specified, Python is used.\n\nYou can reference previously defined variables, imports, and functions in the code.\n\n**Arguments**:\n\n- `code`: Code to execute\n- `language`: Language to use for code execution. If not defined, the default Python context is used.\n- `on_stdout`: Callback for stdout messages\n- `on_stderr`: Callback for stderr messages\n- `on_result`: Callback for the `Result` object\n- `on_error`: Callback for the `ExecutionError` object\n- `envs`: Custom environment variables\n- `timeout`: Timeout for the code execution in **seconds**\n- `request_timeout`: Timeout for the request in **seconds**\n\n**Returns**:\n\n`Execution` result object\n```\n\n----------------------------------------\n\nTITLE: Defining RunCodeOpts Interface in TypeScript\nDESCRIPTION: Interface definition for options when running code, including environment variables, error handling, result handling, and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional envs: Record<string, string>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onError: (error: ExecutionError) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onResult: (data: Result) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onStderr: (output: OutputMessage) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onStdout: (output: OutputMessage) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional requestTimeoutMs: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional timeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncSandbox Class in Python\nDESCRIPTION: Defines an AsyncSandbox class that provides an isolated cloud environment for running code and accessing Linux OS features.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass AsyncSandbox(BaseAsyncSandbox)\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Dataclass in Python\nDESCRIPTION: A dataclass representing data displayed as a result of executing a cell in a Jupyter notebook, supporting multiple data formats and display methods.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n\n### is\\_main\\_result\n\nWhether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\n\n\n### extra\n\nExtra data that can be included. Not part of the standard types.\n\n\n### formats\n\n```python\ndef formats() -> Iterable[str]\n```\n\nReturns all available formats of the result.\n\n**Returns**:\n\nAll available formats of the result in MIME types.\n\n\n### \\_\\_str\\_\\_\n\n```python\ndef __str__() -> Optional[str]\n```\n\nReturns the text representation of the data.\n\n**Returns**:\n\nThe text representation of the data.\n\n\n### \\_repr\\_html\\_\n\n```python\ndef _repr_html_() -> Optional[str]\n```\n\nReturns the HTML representation of the data.\n\n**Returns**:\n\nThe HTML representation of the data.\n\n\n### \\_repr\\_markdown\\_\n\n```python\ndef _repr_markdown_() -> Optional[str]\n```\n\nReturns the Markdown representation of the data.\n\n**Returns**:\n\nThe Markdown representation of the data.\n\n\n### \\_repr\\_svg\\_\n\n```python\ndef _repr_svg_() -> Optional[str]\n```\n\nReturns the SVG representation of the data.\n\n**Returns**:\n\nThe SVG representation of the data.\n\n\n### \\_repr\\_png\\_\n\n```python\ndef _repr_png_() -> Optional[str]\n```\n\nReturns the base64 representation of the PNG data.\n\n**Returns**:\n\nThe base64 representation of the PNG data.\n\n\n### \\_repr\\_jpeg\\_\n\n```python\ndef _repr_jpeg_() -> Optional[str]\n```\n\nReturns the base64 representation of the JPEG data.\n\n**Returns**:\n\nThe base64 representation of the JPEG data.\n\n\n### \\_repr\\_pdf\\_\n\n```python\ndef _repr_pdf_() -> Optional[str]\n```\n\nReturns the PDF representation of the data.\n\n**Returns**:\n\nThe PDF representation of the data.\n\n\n### \\_repr\\_latex\\_\n\n```python\ndef _repr_latex_() -> Optional[str]\n```\n\nReturns the LaTeX representation of the data.\n\n**Returns**:\n\nThe LaTeX representation of the data.\n\n\n### \\_repr\\_json\\_\n\n```python\ndef _repr_json_() -> Optional[dict]\n```\n\nReturns the JSON representation of the data.\n\n**Returns**:\n\nThe JSON representation of the data.\n\n\n### \\_repr\\_javascript\\_\n\n```python\ndef _repr_javascript_() -> Optional[str]\n```\n\nReturns the JavaScript representation of the data.\n\n**Returns**:\n\nThe JavaScript representation of the data.\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox (Language Overload)\nDESCRIPTION: An overloaded method for running code in a specified language in the E2B sandbox. It allows specifying callbacks for output handling and custom environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Logs Dataclass for Execution Output in Python\nDESCRIPTION: Creates a dataclass to capture stdout and stderr outputs from code execution, with methods for JSON serialization and result formatting.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n\n### stdout\n\nList of strings printed to stdout by prints, subprocesses, etc.\n\n\n### stderr\n\nList of strings printed to stderr by prints, subprocesses, etc.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Logs object.\n\n\n### serialize\\_results\n\n```python\ndef serialize_results(results: List[Result]) -> List[Dict[str, str]]\n```\n\nSerializes the results to JSON.\n```\n\n----------------------------------------\n\nTITLE: Executing Code with E2B Sandbox in Python\nDESCRIPTION: Example of using the E2B Sandbox to execute code in Python. It shows how to create a sandbox, run code, and print the execution result.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import Sandbox\n\nwith Sandbox() as sandbox:\n    sandbox.run_code(\"x = 1\")\n    execution = sandbox.run_code(\"x+=1; x\")\n    print(execution.text)  # outputs 2\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in AsyncSandbox\nDESCRIPTION: Method overload for running Python code in the AsyncSandbox. It allows specifying callbacks for output handling, setting environment variables, and defining timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in E2B Sandbox\nDESCRIPTION: This function runs Python code in the E2B sandbox, allowing for callbacks, custom environment variables, and timeout settings. It returns an Execution result object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Dataclass for Complete Execution Results in Python\nDESCRIPTION: Defines a dataclass that represents the complete result of a code cell execution, including results, logs, errors, and execution count.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n\n### results\n\nList of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n\n\n### logs\n\nLogs printed to stdout and stderr during execution.\n\n\n### error\n\nError object if an error occurred, None otherwise.\n\n\n### execution\\_count\n\nExecution count of the cell.\n\n\n### text\n\n```python\n@property\ndef text() -> Optional[str]\n```\n\nReturns the text representation of the result.\n\n**Returns**:\n\nThe text representation of the result.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Execution object.\n```\n\n----------------------------------------\n\nTITLE: Context-Based Code Execution Method\nDESCRIPTION: Method overload for executing code within a specific context with customizable execution settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Data Class in Python\nDESCRIPTION: Represents the data displayed as a result of executing a cell in a Jupyter-like notebook, supporting multiple data formats including text, HTML, and images.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n\n### is\\_main\\_result\n\nWhether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\n\n\n### extra\n\nExtra data that can be included. Not part of the standard types.\n\n\n### formats\n\n```python\ndef formats() -> Iterable[str]\n```\n\nReturns all available formats of the result.\n\n**Returns**:\n\nAll available formats of the result in MIME types.\n\n\n### \\_\\_str\\_\\_\n\n```python\ndef __str__() -> Optional[str]\n```\n\nReturns the text representation of the data.\n\n**Returns**:\n\nThe text representation of the data.\n\n\n### \\_repr\\_html\\_\n\n```python\ndef _repr_html_() -> Optional[str]\n```\n\nReturns the HTML representation of the data.\n\n**Returns**:\n\nThe HTML representation of the data.\n\n\n### \\_repr\\_markdown\\_\n\n```python\ndef _repr_markdown_() -> Optional[str]\n```\n\nReturns the Markdown representation of the data.\n\n**Returns**:\n\nThe Markdown representation of the data.\n\n\n### \\_repr\\_svg\\_\n\n```python\ndef _repr_svg_() -> Optional[str]\n```\n\nReturns the SVG representation of the data.\n\n**Returns**:\n\nThe SVG representation of the data.\n\n\n### \\_repr\\_png\\_\n\n```python\ndef _repr_png_() -> Optional[str]\n```\n\nReturns the base64 representation of the PNG data.\n\n**Returns**:\n\nThe base64 representation of the PNG data.\n\n\n### \\_repr\\_jpeg\\_\n\n```python\ndef _repr_jpeg_() -> Optional[str]\n```\n\nReturns the base64 representation of the JPEG data.\n\n**Returns**:\n\nThe base64 representation of the JPEG data.\n\n\n### \\_repr\\_pdf\\_\n\n```python\ndef _repr_pdf_() -> Optional[str]\n```\n\nReturns the PDF representation of the data.\n\n**Returns**:\n\nThe PDF representation of the data.\n\n\n### \\_repr\\_latex\\_\n\n```python\ndef _repr_latex_() -> Optional[str]\n```\n\nReturns the LaTeX representation of the data.\n\n**Returns**:\n\nThe LaTeX representation of the data.\n\n\n### \\_repr\\_json\\_\n\n```python\ndef _repr_json_() -> Optional[dict]\n```\n\nReturns the JSON representation of the data.\n\n**Returns**:\n\nThe JSON representation of the data.\n\n\n### \\_repr\\_javascript\\_\n\n```python\ndef _repr_javascript_() -> Optional[str]\n```\n\nReturns the JavaScript representation of the data.\n\n**Returns**:\n\nThe JavaScript representation of the data.\n```\n\n----------------------------------------\n\nTITLE: Executing Code with E2B Code Interpreter in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to create a sandbox, run Python code in it, and retrieve execution results. This snippet shows incrementing a variable and retrieving its value.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/js/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sandbox } from '@e2b/code-interpreter'\n\nconst sandbox = await Sandbox.create()\nawait sbx.runCode('x = 1')\n\nconst execution = await sbx.runCode('x+=1; x')\nconsole.log(execution.text)  // outputs 2\n```\n\n----------------------------------------\n\nTITLE: Defining Context Dataclass for Code Execution Environment in Python\nDESCRIPTION: Creates a dataclass that represents a context for code execution, with properties for ID, language, and working directory to isolate execution environments.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n\n### id\n\nThe ID of the context.\n\n\n### language\n\nThe language of the context.\n\n\n### cwd\n\nThe working directory of the context.\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in Sandbox\nDESCRIPTION: Method to run Python code in the sandbox. It allows specifying callbacks, environment variables, and timeouts. This overload is specifically for Python code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Data Class in Python\nDESCRIPTION: Dataclass representing the complete result of a cell execution, including results, logs, errors, and execution count.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n```\n\nRepresents the result of a cell execution.\n\n\n### results\n\nList of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n\n\n### logs\n\nLogs printed to stdout and stderr during execution.\n\n\n### error\n\nError object if an error occurred, None otherwise.\n\n\n### execution\\_count\n\nExecution count of the cell.\n\n\n### text\n\n```python\n@property\ndef text() -> Optional[str]\n```\n\nReturns the text representation of the result.\n\n**Returns**:\n\nThe text representation of the result.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Execution object.\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Dataclass for Jupyter-like Output in Python\nDESCRIPTION: This dataclass represents the data to be displayed as a result of executing a cell, similar to Jupyter notebook output. It includes methods for various data representations like HTML, Markdown, SVG, etc.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n\n### is_main_result\n\nWhether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\n\n### extra\n\nExtra data that can be included. Not part of the standard types.\n\n### formats\n\ndef formats() -> Iterable[str]\n\n### __str__\n\ndef __str__() -> Optional[str]\n\n### _repr_html_\n\ndef _repr_html_() -> Optional[str]\n\n### _repr_markdown_\n\ndef _repr_markdown_() -> Optional[str]\n\n### _repr_svg_\n\ndef _repr_svg_() -> Optional[str]\n\n### _repr_png_\n\ndef _repr_png_() -> Optional[str]\n\n### _repr_jpeg_\n\ndef _repr_jpeg_() -> Optional[str]\n\n### _repr_pdf_\n\ndef _repr_pdf_() -> Optional[str]\n\n### _repr_latex_\n\ndef _repr_latex_() -> Optional[str]\n\n### _repr_json_\n\ndef _repr_json_() -> Optional[dict]\n\n### _repr_javascript_\n\ndef _repr_javascript_() -> Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Sandbox with Code Interpreter SDK in Python\nDESCRIPTION: This Python code demonstrates how to create and use a custom sandbox with the Code Interpreter SDK, including running code and proper resource management.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/template/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import Sandbox\nsandbox = Sandbox(template=\"your-custom-sandbox-name\")\nexecution = sandbox.run_code(\"print('hello')\")\nsandbox.kill()\n\n# Or you can use `with` which handles closing the sandbox for you\nwith Sandbox(template=\"your-custom-sandbox-name\") as sandbox:\n    execution = sandbox.run_code(\"print('hello')\")\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in Python\nDESCRIPTION: Function to create a new context for running code. It allows setting the working directory, specifying the language, and setting a request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in Python\nDESCRIPTION: Asynchronous function to create a new context for running code. It allows setting the current working directory, specifying the language, and setting a request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language in TypeScript\nDESCRIPTION: This method runs the code in a specified language, defaulting to Python if not specified. It supports running in different contexts and referencing previously defined code elements.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Parsing Output from Code Execution in TypeScript\nDESCRIPTION: Function that parses execution output lines and calls appropriate handlers for stdout, stderr, results, and errors.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseOutput(\n   execution: Execution, \n   line: string, \n   onStdout?: (output: OutputMessage) => any, \n   onStderr?: (output: OutputMessage) => any, \n   onResult?: (data: Result) => any, \nonError?: (error: ExecutionError) => any): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Class in Python\nDESCRIPTION: Provides a class for extracting data from charts to enable interactive chart building or custom visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in E2B Sandbox\nDESCRIPTION: This function runs Python code in the E2B sandbox, allowing for custom handlers, environment variables, and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Code Execution Context\nDESCRIPTION: Method for creating a new context for code execution with optional working directory and language specification.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Running Code in Python Sandbox\nDESCRIPTION: Executes code in a specified context with options for handling output and errors. Supports custom environments and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language in TypeScript\nDESCRIPTION: Method signature for running code in a specified language, defaulting to Python if not specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language in AsyncSandbox\nDESCRIPTION: Method overload for running code in a specified language within the AsyncSandbox. It provides options for output handling, environment variables, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Class in Python\nDESCRIPTION: This class represents extracted data from a chart, useful for building interactive charts or custom visualizations. The implementation details are not provided in the snippet.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Running Python Code in Sandbox (Python)\nDESCRIPTION: Executes Python code in the sandbox environment. Supports custom output handlers, environment variables, and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in E2B Sandbox\nDESCRIPTION: This function creates a new context for running code in the E2B sandbox, allowing specification of working directory, language, and request timeout. It returns a Context object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in E2B Sandbox\nDESCRIPTION: A method for creating a new context to run code in the E2B sandbox. It allows specifying the working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specific Language in Sandbox\nDESCRIPTION: Defines an overloaded method for running code in a specified language within the Sandbox. It allows running code in different languages synchronously.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in Sandbox\nDESCRIPTION: Method to create a new context for running code within the sandbox. It allows setting the current working directory, specifying the language, and setting a request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Class in Python\nDESCRIPTION: Creates a Chart class to represent extracted data from a chart, useful for building interactive charts or custom visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language (Python)\nDESCRIPTION: Executes code in a specified language within the sandbox. Defaults to Python if no language is provided. Supports custom handlers and environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating Code Execution Context in Python\nDESCRIPTION: This function creates a new context for running code. It allows setting the current working directory, specifying the programming language, and setting a request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Defining Context Type Alias in TypeScript\nDESCRIPTION: Type alias definition for the Context object, representing a context for code execution with properties for working directory, ID, and language.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Context: object;\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in Python\nDESCRIPTION: This function creates a new context for running code, allowing specification of working directory and language. It returns a Context object for use in code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionError Dataclass in Python\nDESCRIPTION: A dataclass representing errors that occur during code execution, containing the error name, value, traceback, and a method to convert to JSON.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n\n### name\n\nName of the error.\n\n\n### value\n\nValue of the error.\n\n\n### traceback\n\nThe raw traceback of the error.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Error object.\n```\n\n----------------------------------------\n\nTITLE: Execution Result Data Class\nDESCRIPTION: Data class for representing execution results with multiple data formats and display capabilities.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n```\n\n----------------------------------------\n\nTITLE: Running Code as Python in TypeScript\nDESCRIPTION: This method runs the provided code as Python. It allows specifying different languages or contexts through options, and supports referencing previously defined variables, imports, and functions.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Language in E2B Sandbox\nDESCRIPTION: This function runs code in a specified language within the E2B sandbox, with options for custom handlers, environment variables, and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specific Context in Sandbox\nDESCRIPTION: Defines an overloaded method for running code in a specified context within the Sandbox. It allows running code in different contexts synchronously by providing a Context object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Context in Python\nDESCRIPTION: This function creates a new context for running code, allowing specification of working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Dataclass for Cell Execution Results in Python\nDESCRIPTION: This dataclass represents the result of a cell execution, including results, logs, errors, and execution count. It provides methods for accessing text representation and JSON conversion.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n\n### results\n\nList of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n\n### logs\n\nLogs printed to stdout and stderr during execution.\n\n### error\n\nError object if an error occurred, None otherwise.\n\n### execution_count\n\nExecution count of the cell.\n\n### text\n\n@property\ndef text() -> Optional[str]\n\n### to_json\n\ndef to_json() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining OutputMessage Dataclass in Python\nDESCRIPTION: A dataclass representing output messages from sandbox code execution, containing the output line, timestamp, and error status.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n```\n\n----------------------------------------\n\nTITLE: Implementing run_code Method for Sandbox in Python\nDESCRIPTION: Defines overloaded versions of the run_code method for executing code in different languages within the synchronous Sandbox environment.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox (Python Overload)\nDESCRIPTION: An overloaded method for running Python code in the E2B sandbox. It allows specifying callbacks for output handling and custom environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating E2B Sandbox in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new E2B cloud sandbox using the Sandbox.create() method.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sandbox } from '@e2b/code-interpreter'\n\nconst sandbox = await Sandbox.create()\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in AsyncSandbox\nDESCRIPTION: Defines a method to create a new context for running code in the AsyncSandbox. It allows specifying the current working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Defining Result Class in TypeScript\nDESCRIPTION: This class represents the data to be displayed as a result of executing a cell, supporting multiple data types and formats.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/messaging/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew Result(rawData: RawData, isMainResult: boolean): Result\n```\n\nLANGUAGE: typescript\nCODE:\n```\nformats(): string[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object\n```\n\n----------------------------------------\n\nTITLE: Defining Output Message Dataclass in Python\nDESCRIPTION: This dataclass represents an output message from sandbox code execution. It includes the output line, timestamp, and an error flag.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n\n### line\n\nThe output line.\n\n### timestamp\n\nUnix epoch in nanoseconds\n\n### error\n\nWhether the output is an error.\n```\n\n----------------------------------------\n\nTITLE: Creating New Code Execution Context in E2B Sandbox\nDESCRIPTION: This method creates a new context for running code in the E2B sandbox. It allows specifying the working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Setting Language in CreateCodeContextOpts Interface\nDESCRIPTION: Property definition for specifying the programming language when creating a code context, with Python as the default.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\noptional language: string;\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox (Python Default)\nDESCRIPTION: Method signature for executing code with Python as the default language, allowing references to previously defined variables and functions.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in E2B Sandbox\nDESCRIPTION: This function creates a new context for running code in the E2B sandbox, allowing specification of working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Context in TypeScript\nDESCRIPTION: This method runs the code in a specified context, using the default context if not provided. It supports language specification and referencing previously defined code elements.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionError Class in Python\nDESCRIPTION: Represents an error during cell execution, including error name, value, traceback, and JSON conversion method.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n\n### name\n\nName of the error.\n\n\n### value\n\nValue of the error.\n\n\n### traceback\n\nThe raw traceback of the error.\n\n\n### to_json\n\ndef to_json() -> str\n```\n\n----------------------------------------\n\nTITLE: Context-based Code Execution Method Overload\nDESCRIPTION: Method overload for running code in a specific context with optional parameters for handling outputs and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Default Language for Code Context\nDESCRIPTION: Shows the default programming language (Python) used when creating a code context if not explicitly specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\npython\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox with Python as Default\nDESCRIPTION: This method runs code in the E2B sandbox, defaulting to Python if no language is specified. It allows for custom callbacks and environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Union[Literal[\"python\"], None] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCodeContextOpts Interface in TypeScript\nDESCRIPTION: This interface defines the options for creating a code context, including working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional cwd: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional language: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional requestTimeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specific Context in AsyncSandbox\nDESCRIPTION: Defines an overloaded method for running code in a specified context within the AsyncSandbox. It allows running code in different contexts by providing a Context object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: ExecutionError Constructor - TypeScript\nDESCRIPTION: Constructor for the ExecutionError class that represents an error during cell execution with name, value and traceback.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew ExecutionError(\n   name: string, \n   value: string, \n   traceback: string): ExecutionError\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in Sandbox (Python)\nDESCRIPTION: Creates a new context for running code within the sandbox. Allows specifying working directory and language, with Python as the default language.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in RunCodeOpts Interface\nDESCRIPTION: Property definition for setting custom environment variables during code execution, with an empty object as the default.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\noptional envs: Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox with Specified Context\nDESCRIPTION: This overloaded method runs code in the E2B sandbox using a specified context. It allows for custom execution environments and callbacks.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in CreateCodeContextOpts Interface\nDESCRIPTION: Property definition for specifying the working directory when creating a code context, with a default value of '/home/user'.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional cwd: string;\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specific Language in AsyncSandbox\nDESCRIPTION: Defines an overloaded method for running code in a specified language within the AsyncSandbox. It allows running code in different languages by specifying the language parameter.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Optional[str] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Initializing ExecutionError Class in TypeScript\nDESCRIPTION: Constructor for the ExecutionError class which represents an error during cell execution, including name, value, and traceback information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew ExecutionError(\n   name: string, \n   value: string, \n   traceback: string): ExecutionError\n```\n\n----------------------------------------\n\nTITLE: Implementing create_code_context Method for AsyncSandbox in Python\nDESCRIPTION: Defines a method to create a new context for running code within the AsyncSandbox, allowing specification of working directory and language.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def create_code_context(\n        cwd: Optional[str] = None,\n        language: Optional[str] = None,\n        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionError Dataclass for Error Handling in Python\nDESCRIPTION: Defines a dataclass to represent execution errors with name, value, and traceback information. Includes a to_json method for serialization.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n\n### name\n\nName of the error.\n\n\n### value\n\nValue of the error.\n\n\n### traceback\n\nThe raw traceback of the error.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Error object.\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox (Context Overload)\nDESCRIPTION: An overloaded method for running code in a specified context in the E2B sandbox. It allows specifying callbacks for output handling and custom environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating a Code Context in E2B Sandbox\nDESCRIPTION: Shows the method signature for creating a new code execution context, which is used to isolate different code environments.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCodeContext(opts?: CreateCodeContextOpts): Promise<Context>\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Context in TypeScript\nDESCRIPTION: Method signature for running code in a specified context, using the default context if not provided.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Converting OutputMessage to String in TypeScript\nDESCRIPTION: Method that converts an OutputMessage instance to its string representation.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Defining OutputMessage Dataclass for Code Execution Output in Python\nDESCRIPTION: Creates a dataclass that represents an output message from sandbox code execution, containing the output line, timestamp, and error status.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionError Data Class in Python\nDESCRIPTION: Represents an error that occurred during cell execution, containing the error name, value, traceback, and JSON conversion functionality.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n\n### name\n\nName of the error.\n\n\n### value\n\nValue of the error.\n\n\n### traceback\n\nThe raw traceback of the error.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Error object.\n```\n\n----------------------------------------\n\nTITLE: Running Code as Python in TypeScript\nDESCRIPTION: Method signature for running code as Python, with options to specify different languages or contexts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox with Context Selection\nDESCRIPTION: Method signature for executing code in a specific context, with options to specify language and runtime parameters for the execution environment.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrunCode(code: string, opts?: RunCodeOpts & object): Promise<Execution>\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Class in Python\nDESCRIPTION: A class for representing extracted data from charts, useful for building interactive charts or custom visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Representation of Execution Results in TypeScript\nDESCRIPTION: Accessor method that returns the text representation of the main result of a cell execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget text(): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Execution Result Container Class\nDESCRIPTION: Data class for storing complete execution results including outputs, logs, and errors.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Class for Cell Execution Results in Python\nDESCRIPTION: This class represents the result of a cell execution, including results, logs, errors, and execution count. It provides methods for text representation and JSON conversion.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution():\n    \"\"\"Represents the result of a cell execution.\"\"\"\n\n    results: List[Result]\n    \"\"\"List of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\"\"\"\n\n    logs: Logs\n    \"\"\"Logs printed to stdout and stderr during execution.\"\"\"\n\n    error: Optional[ExecutionError]\n    \"\"\"Error object if an error occurred, None otherwise.\"\"\"\n\n    execution_count: int\n    \"\"\"Execution count of the cell.\"\"\"\n\n    @property\n    def text(self) -> Optional[str]:\n        \"\"\"Returns the text representation of the result.\n\n        Returns:\n            The text representation of the result.\n        \"\"\"\n        ...\n\n    def to_json(self) -> str:\n        \"\"\"Returns the JSON representation of the Execution object.\"\"\"\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specific Context in E2B Sandbox\nDESCRIPTION: This function runs code in a specified context within the E2B sandbox, allowing for custom contexts, callbacks, environment variables, and timeout settings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             context: Optional[Context] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Creating a Sandbox Instance in TypeScript\nDESCRIPTION: Demonstrates how to import and initialize a new E2B sandbox instance using the Sandbox.create() method.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sandbox } from '@e2b/code-interpreter'\n\nconst sandbox = await Sandbox.create()\n```\n\n----------------------------------------\n\nTITLE: Defining Context Data Class in Python\nDESCRIPTION: Dataclass for defining execution contexts with specific ID, language, and working directory.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n```\n\nRepresents a context for code execution.\n\n\n### id\n\nThe ID of the context.\n\n\n### language\n\nThe language of the context.\n\n\n### cwd\n\nThe working directory of the context.\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in TypeScript\nDESCRIPTION: Method signature for creating a new context to run code in, with optional configuration parameters.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCodeContext(opts?: CreateCodeContextOpts): Promise<Context>\n```\n\n----------------------------------------\n\nTITLE: Implementing Logs Dataclass for Execution Output in Python\nDESCRIPTION: This dataclass represents logs printed to stdout and stderr during code execution. It includes methods for JSON serialization and result serialization.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n\n### stdout\n\nList of strings printed to stdout by prints, subprocesses, etc.\n\n### stderr\n\nList of strings printed to stderr by prints, subprocesses, etc.\n\n### to_json\n\ndef to_json() -> str\n\n### serialize_results\n\ndef serialize_results(results: List[Result]) -> List[Dict[str, str]]\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Class for Cell Execution Results in Python\nDESCRIPTION: Represents the complete result of a cell execution including results, logs, errors, and execution count.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n\n### results\n\nList of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n\n\n### logs\n\nLogs printed to stdout and stderr during execution.\n\n\n### error\n\nError object if an error occurred, None otherwise.\n\n\n### execution_count\n\nExecution count of the cell.\n\n\n### text\n\n@property\ndef text() -> Optional[str]\n\n### to_json\n\ndef to_json() -> str\n```\n\n----------------------------------------\n\nTITLE: Creating Code Execution Context in Python\nDESCRIPTION: Creates a new context for code execution with options to set working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef create_code_context(cwd: Optional[str] = None,\n                        language: Optional[str] = None,\n                        request_timeout: Optional[float] = None) -> Context\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncSandbox Instance in Python\nDESCRIPTION: Demonstrates how to create a new instance of AsyncSandbox using the create() method. This is the recommended way to instantiate a new sandbox environment.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Types and Functions in TypeScript\nDESCRIPTION: This section includes type aliases for Logs, MIMEType, and RawData, as well as utility functions for extracting errors and parsing output.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/messaging/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Logs: object;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype MIMEType: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype RawData: object & E2BData;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extractError(res: Response): Promise<undefined | SandboxError>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseOutput(\n   execution: Execution, \n   line: string, \n   onStdout?: (output: OutputMessage) => any, \n   onStderr?: (output: OutputMessage) => any, \n   onResult?: (data: Result) => any, \nonError?: (error: ExecutionError) => any): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Standard Output Handling Callback in RunCodeOpts Interface\nDESCRIPTION: Property definition for registering a callback function to handle stdout output messages during code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\noptional onStdout: (output: OutputMessage) => any;\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Error Dataclass in Python\nDESCRIPTION: This dataclass represents an error that occurred during cell execution. It includes the error name, value, traceback, and a method to convert to JSON.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n\n### name\n\nName of the error.\n\n### value\n\nValue of the error.\n\n### traceback\n\nThe raw traceback of the error.\n\n### to_json\n\ndef to_json() -> str\n```\n\n----------------------------------------\n\nTITLE: Initializing Execution Class in TypeScript\nDESCRIPTION: Constructor for the Execution class which represents the result of a cell execution, including results, logs, errors, and execution count.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Execution(\n   results: Result[], \n   logs: Logs, \n   error?: ExecutionError, \n   executionCount?: number): Execution\n```\n\n----------------------------------------\n\nTITLE: Running Code with Context in Python\nDESCRIPTION: Asynchronous function to run code in a specified context or default context. It allows setting callbacks for stdout, stderr, results, and errors, as well as custom environment variables and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Dataclass in Python\nDESCRIPTION: A dataclass representing the complete results of code execution, containing results, logs, errors, and execution count, with methods for text representation and JSON serialization.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Execution()\n\n### results\n\nList of the result of the cell (interactively interpreted last line), display calls (e.g. matplotlib plots).\n\n\n### logs\n\nLogs printed to stdout and stderr during execution.\n\n\n### error\n\nError object if an error occurred, None otherwise.\n\n\n### execution\\_count\n\nExecution count of the cell.\n\n\n### text\n\n```python\n@property\ndef text() -> Optional[str]\n```\n\nReturns the text representation of the result.\n\n**Returns**:\n\nThe text representation of the result.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Execution object.\n```\n\n----------------------------------------\n\nTITLE: Defining OutputMessage Class in TypeScript\nDESCRIPTION: This class represents an output message from sandbox code execution, including the output line, timestamp, and error status.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/messaging/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew OutputMessage(\n   line: string, \n   timestamp: number, \n   error: boolean): OutputMessage\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Default Execution Timeout for Code Execution\nDESCRIPTION: Shows the default execution timeout value (60 seconds) used during code execution if not explicitly specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n60_000 // 60 seconds\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionError Class for Code Execution Errors in Python\nDESCRIPTION: This class represents an error that occurred during the execution of a cell. It includes properties for the error name, value, and traceback, along with a method to convert the error to JSON.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError():\n    \"\"\"Represents an error that occurred during the execution of a cell.\n    The error contains the name of the error, the value of the error, and the traceback.\"\"\"\n\n    name: str\n    \"\"\"Name of the error.\"\"\"\n\n    value: str\n    \"\"\"Value of the error.\"\"\"\n\n    traceback: str\n    \"\"\"The raw traceback of the error.\"\"\"\n\n    def to_json(self) -> str:\n        \"\"\"Returns the JSON representation of the Error object.\"\"\"\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Dataclass for Cell Execution Output in Python\nDESCRIPTION: Defines a dataclass to represent the output of a cell execution in a Jupyter-like environment, supporting multiple data formats and display methods.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n\n### is\\_main\\_result\n\nWhether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\n\n\n### extra\n\nExtra data that can be included. Not part of the standard types.\n\n\n### formats\n\n```python\ndef formats() -> Iterable[str]\n```\n\nReturns all available formats of the result.\n\n**Returns**:\n\nAll available formats of the result in MIME types.\n\n\n### \\_\\_str\\_\\_\n\n```python\ndef __str__() -> Optional[str]\n```\n\nReturns the text representation of the data.\n\n**Returns**:\n\nThe text representation of the data.\n\n\n### \\_repr\\_html\\_\n\n```python\ndef _repr_html_() -> Optional[str]\n```\n\nReturns the HTML representation of the data.\n\n**Returns**:\n\nThe HTML representation of the data.\n\n\n### \\_repr\\_markdown\\_\n\n```python\ndef _repr_markdown_() -> Optional[str]\n```\n\nReturns the Markdown representation of the data.\n\n**Returns**:\n\nThe Markdown representation of the data.\n\n\n### \\_repr\\_svg\\_\n\n```python\ndef _repr_svg_() -> Optional[str]\n```\n\nReturns the SVG representation of the data.\n\n**Returns**:\n\nThe SVG representation of the data.\n\n\n### \\_repr\\_png\\_\n\n```python\ndef _repr_png_() -> Optional[str]\n```\n\nReturns the base64 representation of the PNG data.\n\n**Returns**:\n\nThe base64 representation of the PNG data.\n\n\n### \\_repr\\_jpeg\\_\n\n```python\ndef _repr_jpeg_() -> Optional[str]\n```\n\nReturns the base64 representation of the JPEG data.\n\n**Returns**:\n\nThe base64 representation of the JPEG data.\n\n\n### \\_repr\\_pdf\\_\n\n```python\ndef _repr_pdf_() -> Optional[str]\n```\n\nReturns the PDF representation of the data.\n\n**Returns**:\n\nThe PDF representation of the data.\n\n\n### \\_repr\\_latex\\_\n\n```python\ndef _repr_latex_() -> Optional[str]\n```\n\nReturns the LaTeX representation of the data.\n\n**Returns**:\n\nThe LaTeX representation of the data.\n\n\n### \\_repr\\_json\\_\n\n```python\ndef _repr_json_() -> Optional[dict]\n```\n\nReturns the JSON representation of the data.\n\n**Returns**:\n\nThe JSON representation of the data.\n\n\n### \\_repr\\_javascript\\_\n\n```python\ndef _repr_javascript_() -> Optional[str]\n```\n\nReturns the JavaScript representation of the data.\n\n**Returns**:\n\nThe JavaScript representation of the data.\n```\n\n----------------------------------------\n\nTITLE: Python Code Execution Method Overload\nDESCRIPTION: Method overload for running Python code with optional parameters for stdout/stderr handling, timeouts, and environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   language: Union[Literal[\"python\"], None] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Defining Result Class for Jupyter-like Output in Python\nDESCRIPTION: Represents execution result data with multiple format representations and methods for accessing different data types.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result()\n\n### is_main_result\n\nWhether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\n\n\n### extra\n\nExtra data that can be included. Not part of the standard types.\n\n\n### formats\n\ndef formats() -> Iterable[str]\n\n### __str__\n\ndef __str__() -> Optional[str]\n\n### _repr_html_\n\ndef _repr_html_() -> Optional[str]\n\n### _repr_markdown_\n\ndef _repr_markdown_() -> Optional[str]\n\n### _repr_svg_\n\ndef _repr_svg_() -> Optional[str]\n\n### _repr_png_\n\ndef _repr_png_() -> Optional[str]\n\n### _repr_jpeg_\n\ndef _repr_jpeg_() -> Optional[str]\n\n### _repr_pdf_\n\ndef _repr_pdf_() -> Optional[str]\n\n### _repr_latex_\n\ndef _repr_latex_() -> Optional[str]\n\n### _repr_json_\n\ndef _repr_json_() -> Optional[dict]\n\n### _repr_javascript_\n\ndef _repr_javascript_() -> Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Creating OutputMessage Data Class in Python\nDESCRIPTION: Dataclass representing output messages from sandbox code execution, containing line content, timestamp, and error status.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n```\n\nRepresents an output message from the sandbox code execution.\n\n\n### line\n\nThe output line.\n\n\n### timestamp\n\nUnix epoch in nanoseconds\n\n\n### error\n\nWhether the output is an error.\n```\n\n----------------------------------------\n\nTITLE: Implementing deserializeChart Function in TypeScript\nDESCRIPTION: Defines a function to deserialize chart data into a Chart object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deserializeChart(data: any): Chart\n```\n\n----------------------------------------\n\nTITLE: Execution Error Data Class\nDESCRIPTION: Data class for representing execution errors with error name, value, and traceback information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n```\n\n----------------------------------------\n\nTITLE: Defining Context Class for Code Execution Context in Python\nDESCRIPTION: This class represents a context for code execution, including properties for ID, language, and working directory.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context():\n    \"\"\"Represents a context for code execution.\"\"\"\n\n    id: str\n    \"\"\"The ID of the context.\"\"\"\n\n    language: str\n    \"\"\"The language of the context.\"\"\"\n\n    cwd: str\n    \"\"\"The working directory of the context.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining RunCodeOpts Interface in TypeScript\nDESCRIPTION: This interface defines the options for running code, including environment variables, error handling, result handling, output handling, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noptional envs: Record<string, string>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onError: (error: ExecutionError) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onResult: (data: Result) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onStderr: (output: OutputMessage) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional onStdout: (output: OutputMessage) => any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional requestTimeoutMs: number;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional timeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecutionError Data Class in Python\nDESCRIPTION: Dataclass for representing errors that occur during cell execution, containing error name, value, and traceback information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass ExecutionError()\n```\n\nRepresents an error that occurred during the execution of a cell.\nThe error contains the name of the error, the value of the error, and the traceback.\n\n\n### name\n\nName of the error.\n\n\n### value\n\nValue of the error.\n\n\n### traceback\n\nThe raw traceback of the error.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Error object.\n```\n\n----------------------------------------\n\nTITLE: Defining OutputMessage Class for Sandbox Execution Output in Python\nDESCRIPTION: This class represents an output message from sandbox code execution. It includes properties for the output line, timestamp, and whether it's an error.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage():\n    \"\"\"Represents an output message from the sandbox code execution.\"\"\"\n\n    line: str\n    \"\"\"The output line.\"\"\"\n\n    timestamp: int\n    \"\"\"Unix epoch in nanoseconds\"\"\"\n\n    error: bool\n    \"\"\"Whether the output is an error.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining PieChart Type Alias in TypeScript\nDESCRIPTION: Defines the structure of a pie chart, extending the Chart type and specifying the elements as an array of PieData objects.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype PieChart: Chart & object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `elements` | `PieData`[] |\n| `type` | `ChartType.PIE` |\n```\n\n----------------------------------------\n\nTITLE: Execution Text Accessor - TypeScript\nDESCRIPTION: Getter method that returns the text representation of the main execution result.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget text(): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Defining Context Data Class in Python\nDESCRIPTION: Represents the execution context for code, containing an ID, language specification, and working directory information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n\n### id\n\nThe ID of the context.\n\n\n### language\n\nThe language of the context.\n\n\n### cwd\n\nThe working directory of the context.\n```\n\n----------------------------------------\n\nTITLE: Initializing Sandbox Class in Python\nDESCRIPTION: Defines the Sandbox class which inherits from BaseSandbox. This class represents a synchronous version of the E2B cloud sandbox, providing similar functionality to AsyncSandbox.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Serializing Execution Results to JSON in TypeScript\nDESCRIPTION: Method that returns a serializable representation of the execution result containing error, logs, and results information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object\n```\n\n----------------------------------------\n\nTITLE: Standard Error Handling Callback in RunCodeOpts Interface\nDESCRIPTION: Property definition for registering a callback function to handle stderr output messages during code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\noptional onStderr: (output: OutputMessage) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Type Enumeration in Python\nDESCRIPTION: An enumeration class for different chart types. It inherits from str and enum.Enum.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Execution toJSON Method - TypeScript\nDESCRIPTION: Method that returns a serializable representation of the execution result including error, logs and results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object\n```\n\n----------------------------------------\n\nTITLE: Context Type Definition for Code Execution\nDESCRIPTION: Type alias defining the structure of a Context object used for code execution, including working directory, ID, and language properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype Context: object;\n```\n\n----------------------------------------\n\nTITLE: Logs Type Definition in TypeScript\nDESCRIPTION: Type definition for Logs which represents data printed to stdout and stderr during execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Logs: object;\n```\n\n----------------------------------------\n\nTITLE: Serializing Result Data to JSON in TypeScript\nDESCRIPTION: Method that returns a serializable representation of a Result instance with various data formats.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntoJSON(): object\n```\n\n----------------------------------------\n\nTITLE: Defining OutputMessage Class in Python\nDESCRIPTION: Represents an output message from sandbox code execution, including line content, timestamp, and error status.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n\n### line\n\nThe output line.\n\n\n### timestamp\n\nUnix epoch in nanoseconds\n\n\n### error\n\nWhether the output is an error.\n```\n\n----------------------------------------\n\nTITLE: Defining Scale Type Enumeration in Python\nDESCRIPTION: An enumeration class for axis scale types. It inherits from str and enum.Enum.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Converting Execution Object to JSON in Python\nDESCRIPTION: A method that returns the JSON representation of an Execution object. This is useful for serializing execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef to_json() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Context Class for Code Execution in Python\nDESCRIPTION: A dataclass representing a context for code execution. It includes properties for ID, language, and working directory.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n```\n\n----------------------------------------\n\nTITLE: RawData Type Definition in TypeScript\nDESCRIPTION: Type definition for RawData which represents a dictionary mapping MIME types to their corresponding data representations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype RawData: object & E2BData;\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionError Class in TypeScript\nDESCRIPTION: This class represents an error that occurred during cell execution, containing the error name, value, and traceback.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/messaging/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ExecutionError(\n   name: string, \n   value: string, \n   traceback: string): ExecutionError\n```\n\n----------------------------------------\n\nTITLE: Default Request Timeout for Code Context\nDESCRIPTION: Shows the default request timeout value (30 seconds) used when creating a code context if not explicitly specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n30_000 // 30 seconds\n```\n\n----------------------------------------\n\nTITLE: Defining MIMEType Class in Python\nDESCRIPTION: Represents a MIME type as a string subclass.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Error Handling Callback in RunCodeOpts Interface\nDESCRIPTION: Property definition for registering a callback function to handle execution errors during code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\noptional onError: (error: ExecutionError) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining Logs Class for Execution Output in Python\nDESCRIPTION: This class represents the data printed to stdout and stderr during execution, including methods for JSON conversion and result serialization.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs():\n    \"\"\"Data printed to stdout and stderr during execution, usually by print statements, logs, warnings, subprocesses, etc.\"\"\"\n\n    stdout: List[str]\n    \"\"\"List of strings printed to stdout by prints, subprocesses, etc.\"\"\"\n\n    stderr: List[str]\n    \"\"\"List of strings printed to stderr by prints, subprocesses, etc.\"\"\"\n\n    def to_json(self) -> str:\n        \"\"\"Returns the JSON representation of the Logs object.\"\"\"\n        ...\n\n    @staticmethod\n    def serialize_results(results: List[Result]) -> List[Dict[str, str]]:\n        \"\"\"Serializes the results to JSON.\"\"\"\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Result Class for Cell Execution Results in Python\nDESCRIPTION: This class represents the data to be displayed as a result of executing a cell in a Jupyter notebook. It includes methods for different representations like HTML, Markdown, SVG, etc.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Result():\n    \"\"\"Represents the data to be displayed as a result of executing a cell in a Jupyter notebook.\n    The result is similar to the structure returned by ipython kernel: https://ipython.readthedocs.io/en/stable/development/execution.html#execution-semantics\n\n    The result can contain multiple types of data, such as text, images, plots, etc. Each type of data is represented\n    as a string, and the result can contain multiple types of data. The display calls don't have to have text representation,\n    for the actual result the representation is always present for the result, the other representations are always optional.\"\"\"\n\n    is_main_result: bool\n    \"\"\"Whether this data is the result of the cell. Data can be produced by display calls of which can be multiple in a cell.\"\"\"\n\n    extra: Optional[Dict[str, Any]] = None\n    \"\"\"Extra data that can be included. Not part of the standard types.\"\"\"\n\n    def formats(self) -> Iterable[str]:\n        \"\"\"Returns all available formats of the result.\n\n        Returns:\n            All available formats of the result in MIME types.\n        \"\"\"\n        ...\n\n    def __str__(self) -> Optional[str]:\n        \"\"\"Returns the text representation of the data.\n\n        Returns:\n            The text representation of the data.\n        \"\"\"\n        ...\n\n    def _repr_html_(self) -> Optional[str]:\n        \"\"\"Returns the HTML representation of the data.\n\n        Returns:\n            The HTML representation of the data.\n        \"\"\"\n        ...\n\n    # Additional methods for other representations (Markdown, SVG, PNG, JPEG, PDF, LaTeX, JSON, JavaScript) are omitted for brevity\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Class for Data Visualization in Python\nDESCRIPTION: Defines a Chart class that extracts data from charts for building interactive visualizations. This class serves as a container for chart data and metadata.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Default Working Directory for Code Context\nDESCRIPTION: Shows the default working directory used when creating a code context if not explicitly specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/home/user\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies with Version Requirements\nDESCRIPTION: Lists the required Python packages with pinned version numbers for the E2B Code Interpreter project. The dependencies include FastAPI for the web framework, httpx for HTTP requests, websockets for WebSocket support, uvicorn for the ASGI server, requests for HTTP client functionality, and pydantic for data validation.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/template/server/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi==0.111.0\nhttpx==0.27.0\nwebsockets==12.0\nuvicorn[standard]==0.30.1\nrequests==2.32.2\npydantic==2.9.1\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCodeContextOpts Interface in TypeScript\nDESCRIPTION: Interface definition for options when creating a code context, including working directory, language, and request timeout.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional cwd: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional language: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\noptional requestTimeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Logs Class for Execution Output in Python\nDESCRIPTION: Represents stdout and stderr logs from code execution with JSON serialization method.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n\n### stdout\n\nList of strings printed to stdout by prints, subprocesses, etc.\n\n\n### stderr\n\nList of strings printed to stderr by prints, subprocesses, etc.\n\n\n### to_json\n\ndef to_json() -> str\n\n\n### serialize_results\n\ndef serialize_results(results: List[Result]) -> List[Dict[str, str]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Text Representation of Execution Result in Python\nDESCRIPTION: This property method returns the text representation of an execution result. It's part of a class that handles code execution outputs.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef text() -> Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Implementing Chart Class in Python\nDESCRIPTION: Class for extracting and representing data from charts, useful for building interactive visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Defining MIMEType Class for Content Type Representation in Python\nDESCRIPTION: Creates a class that inherits from string to represent MIME types, which are used to identify the format of data in execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Running Code in Specified Context (Python)\nDESCRIPTION: Executes code in a specified context or default context if not provided. Allows running code in different languages or contexts with customizable output handlers and environment variables.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@overload\nasync def run_code(code: str,\n                   context: Optional[Context] = None,\n                   on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n                   on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n                   on_result: Optional[OutputHandler[Result]] = None,\n                   on_error: Optional[OutputHandler[ExecutionError]] = None,\n                   envs: Optional[Dict[str, str]] = None,\n                   timeout: Optional[float] = None,\n                   request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Execution Logs Data Class\nDESCRIPTION: Data class for capturing stdout and stderr output during code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n```\n\n----------------------------------------\n\nTITLE: Defining MIMEType Class in Python\nDESCRIPTION: Simple class for representing MIME content types in the code interpreter system.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Data Extraction Class in Python\nDESCRIPTION: This class is used for extracting data from charts, facilitating the creation of interactive charts or custom visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Defining E2B Cloud Sandbox Class in Python\nDESCRIPTION: A class representing an E2B cloud sandbox, which provides a secure and isolated cloud environment for running code and accessing Linux OS features.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncSandbox Instance in Python\nDESCRIPTION: Example showing how to instantiate the AsyncSandbox class to create a new sandbox environment for code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```\n\n----------------------------------------\n\nTITLE: Defining OutputMessage Data Class in Python\nDESCRIPTION: Represents an output message from sandbox code execution, containing the output line, timestamp, and error status information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n\n### line\n\nThe output line.\n\n\n### timestamp\n\nUnix epoch in nanoseconds\n\n\n### error\n\nWhether the output is an error.\n```\n\n----------------------------------------\n\nTITLE: MIMEType Type Definition in TypeScript\nDESCRIPTION: Type definition for MIMEType which represents a MIME type as a string.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype MIMEType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Class for Extracted Chart Data in Python\nDESCRIPTION: This class represents extracted data from a chart, useful for building interactive charts or custom visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass Chart():\n    \"\"\"Extracted data from a chart. It's useful for building an interactive charts or custom visualizations.\"\"\"\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: MIME Type Class Definition\nDESCRIPTION: Class representing MIME type information for execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Defining Code Execution Context in Python\nDESCRIPTION: This class represents a context for code execution, including properties like ID, language, and working directory.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n```\n\n----------------------------------------\n\nTITLE: Output Message Data Class\nDESCRIPTION: Data class for representing output messages from sandbox code execution with timestamp and error information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass OutputMessage()\n```\n\n----------------------------------------\n\nTITLE: Defining Context Class for Code Execution in Python\nDESCRIPTION: Represents an execution context with ID, language, and working directory information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n\n### id\n\nThe ID of the context.\n\n\n### language\n\nThe language of the context.\n\n\n### cwd\n\nThe working directory of the context.\n```\n\n----------------------------------------\n\nTITLE: Defining ChartType Enumeration in Python\nDESCRIPTION: An enumeration class for different chart types used in data visualization. It extends the str and enum.Enum classes.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: OutputMessage Constructor - TypeScript\nDESCRIPTION: Constructor for the OutputMessage class that represents output from sandbox code execution including the line, timestamp and error status.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew OutputMessage(\n   line: string, \n   timestamp: number, \n   error: boolean): OutputMessage\n```\n\n----------------------------------------\n\nTITLE: Defining ScaleType Enumeration Class in Python\nDESCRIPTION: Defines an enumeration class for axis scale types that inherits from string and enum.Enum. This allows for consistent specification of chart scale types.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Initializing Result Class in TypeScript\nDESCRIPTION: Constructor for the Result class which represents the data to be displayed after executing a cell, similar to ipython kernel output structure.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew Result(rawData: RawData, isMainResult: boolean): Result\n```\n\n----------------------------------------\n\nTITLE: Defining ScaleType Enum in Python\nDESCRIPTION: Enumeration class for axis scale types used in charts and visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Defining MIMEType Class in Python\nDESCRIPTION: A class representing MIME types, extending the str class to provide type-safe MIME type handling.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Execution Class Constructor - TypeScript\nDESCRIPTION: Constructor for the Execution class that represents the result of a cell execution including results, logs, errors and execution count.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Execution(\n   results: Result[], \n   logs: Logs, \n   error?: ExecutionError, \n   executionCount?: number): Execution\n```\n\n----------------------------------------\n\nTITLE: Defining ChartType Enum in Python\nDESCRIPTION: Enumeration class for different chart types that can be used in the code interpreter.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Parse Output Function - TypeScript\nDESCRIPTION: Asynchronous function that parses execution output and calls appropriate handlers for stdout, stderr, results and errors.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseOutput(\n   execution: Execution, \n   line: string, \n   onStdout?: (output: OutputMessage) => any, \n   onStderr?: (output: OutputMessage) => any, \n   onResult?: (data: Result) => any, \nonError?: (error: ExecutionError) => any): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout in CreateCodeContextOpts Interface\nDESCRIPTION: Property definition for configuring the request timeout in milliseconds when creating a code context, with a default of 30 seconds.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\noptional requestTimeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Defining MIMEType Class in Python\nDESCRIPTION: Class representing MIME types for different formats of execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Defining ChartType Enumeration in Python\nDESCRIPTION: Defines an enumeration class for different chart types that can be generated in the code interpreter environment.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Defining Chart and Scale Types Enums in Python\nDESCRIPTION: These classes define enumerations for chart types and axis scale types, useful for data visualization purposes.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Converting Execution Object to JSON in Python\nDESCRIPTION: This method converts an Execution object to its JSON representation. It's useful for serializing execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef to_json() -> str\n```\n\n----------------------------------------\n\nTITLE: Defining Default Timeout Constant in TypeScript\nDESCRIPTION: Defines a constant representing the default timeout value in milliseconds (60 seconds). This constant is likely used for operation timeouts throughout the code interpreter application.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/consts/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_TIMEOUT_MS: 60000 = 60_000;\n```\n\n----------------------------------------\n\nTITLE: Result Handling Callback in RunCodeOpts Interface\nDESCRIPTION: Property definition for registering a callback function to handle the final result of code execution.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\noptional onResult: (data: Result) => any;\n```\n\n----------------------------------------\n\nTITLE: Defining Chart and Scale Types Enums in Python\nDESCRIPTION: This snippet defines two enum classes: ChartType for different types of charts, and ScaleType for axis scale types. These are likely used in chart generation or processing.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Class for Data Extraction in Python\nDESCRIPTION: A class for extracting data from a chart. It's designed to be useful for building interactive charts or custom visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass Chart()\n```\n\n----------------------------------------\n\nTITLE: Defining E2B Sandbox Class in Python\nDESCRIPTION: This class represents an E2B cloud sandbox, providing a secure and isolated cloud environment for running code and accessing Linux OS features.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.1/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclass Sandbox(BaseSandbox)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Timeout Constant in TypeScript\nDESCRIPTION: Defines a default timeout constant of 60 seconds (60,000 milliseconds) for operations in the code interpreter. This value likely determines how long to wait before terminating a process or operation.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/consts/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_TIMEOUT_MS: 60000 = 60_000;\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Timeout in RunCodeOpts Interface\nDESCRIPTION: Property definition for configuring the code execution timeout in milliseconds, with a default of 60 seconds.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\noptional timeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Classes for Chart and Scale Types in Python\nDESCRIPTION: These classes define enumerations for chart types and axis scale types.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum):\n    \"\"\"Chart types\"\"\"\n    ...\n\nclass ScaleType(str, enum.Enum):\n    \"\"\"Ax scale types\"\"\"\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Building Custom Sandbox Template with E2B CLI\nDESCRIPTION: This shell command builds a custom sandbox template using the E2B CLI, specifying a startup script location.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ne2b template build -c \"/root/.jupyter/start-up.sh\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Text Representation in Python\nDESCRIPTION: A property method that returns the text representation of a result. It's part of a class for handling execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef text() -> Optional[str]\n```\n\n----------------------------------------\n\nTITLE: Result Constructor - TypeScript\nDESCRIPTION: Constructor for the Result class that represents display data from cell execution, similar to IPython kernel output.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/messaging/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew Result(rawData: RawData, isMainResult: boolean): Result\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout in RunCodeOpts Interface\nDESCRIPTION: Property definition for configuring the request timeout in milliseconds when executing code, with a default of 30 seconds.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\noptional requestTimeoutMs: number;\n```\n\n----------------------------------------\n\nTITLE: Defining ScaleType Enum in Python\nDESCRIPTION: Defines an enumeration class for axis scale types using Python's enum module.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Creating Code Context in TypeScript\nDESCRIPTION: This method creates a new context to run code in. It accepts optional parameters for customizing the context creation.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCodeContext(opts?: CreateCodeContextOpts): Promise<Context>\n```\n\n----------------------------------------\n\nTITLE: Getting Available Result Formats in TypeScript\nDESCRIPTION: Method that returns all the available data formats for a Result instance as an array of strings.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nformats(): string[]\n```\n\n----------------------------------------\n\nTITLE: Extracting Errors from Response in TypeScript\nDESCRIPTION: Function that extracts sandbox error information from a Response object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction extractError(res: Response): Promise<undefined | SandboxError>\n```\n\n----------------------------------------\n\nTITLE: Default Request Timeout for Code Execution\nDESCRIPTION: Shows the default request timeout value (30 seconds) used during code execution if not explicitly specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n30_000 // 30 seconds\n```\n\n----------------------------------------\n\nTITLE: Defining PointData Type in TypeScript\nDESCRIPTION: Defines the structure of PointData with label and points properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype PointData: object;\n```\n\n----------------------------------------\n\nTITLE: Defining ScatterChart Type in TypeScript\nDESCRIPTION: Defines the ScatterChart type as an extension of PointChart with a specific chart type.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScatterChart: PointChart & object;\n```\n\n----------------------------------------\n\nTITLE: Defining MIME Type Class in Python\nDESCRIPTION: This class represents a MIME type, likely used for identifying the format of data in execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str)\n```\n\n----------------------------------------\n\nTITLE: Defining ScatterChart Type Alias in TypeScript\nDESCRIPTION: Defines the structure of a scatter chart, extending the PointChart type and specifying the chart type as SCATTER.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype ScatterChart: PointChart & object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `type` | `ChartType.SCATTER` |\n```\n\n----------------------------------------\n\nTITLE: Default Environment Variables for Code Execution\nDESCRIPTION: Shows the default empty object used for environment variables during code execution if not explicitly specified.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining PieChart Type in TypeScript\nDESCRIPTION: Defines the PieChart type as an extension of Chart with specific elements and chart type.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype PieChart: Chart & object;\n```\n\n----------------------------------------\n\nTITLE: Defining BarChart Type in TypeScript\nDESCRIPTION: Defines the BarChart type as an extension of Chart2D with specific elements and chart type.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BarChart: Chart2D & object;\n```\n\n----------------------------------------\n\nTITLE: Defining MIMEType Class for MIME Type Representation in Python\nDESCRIPTION: This class represents a MIME type as a string subclass.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.5/sandbox/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MIMEType(str):\n    \"\"\"Represents a MIME type.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining PieData Type in TypeScript\nDESCRIPTION: Specifies the structure of PieData with angle, label, and radius properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype PieData: object;\n```\n\n----------------------------------------\n\nTITLE: Defining Context Type Alias in TypeScript\nDESCRIPTION: This type alias represents a context for code execution, including working directory, ID, and language.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Context: object;\n```\n\n----------------------------------------\n\nTITLE: Defining ChartTypes Union Type in TypeScript\nDESCRIPTION: Creates a union type of all available chart types for type checking and flexibility.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChartTypes: \n  | LineChart\n  | ScatterChart\n  | BarChart\n  | PieChart\n  | BoxAndWhiskerChart\n  | SuperChart;\n```\n\n----------------------------------------\n\nTITLE: Defining BarData Type Alias in TypeScript\nDESCRIPTION: Specifies the structure of data for individual bars in a bar chart, including group, label, and value properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype BarData: object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `group` | `string` |\n| `label` | `string` |\n| `value` | `string` |\n```\n\n----------------------------------------\n\nTITLE: Overview of Code Interpreter SDK Data Extraction Utility\nDESCRIPTION: A markdown description of a utility package that extracts data from DataFrames, matplotlib plots, and other sources for use with the Code Interpreter SDK.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/chart_data_extractor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Extracting Data for Code Interpreter SDK\n\nThis package is a utility used to extract data in the Code Interpreter SDK from, e.g., DataFrames and matplotlib plots.\n```\n\n----------------------------------------\n\nTITLE: Defining BoxAndWhiskerData Type Alias in TypeScript\nDESCRIPTION: Specifies the structure of data for individual box and whisker plots, including quartiles, median, min, max, and outliers.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BoxAndWhiskerData: object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `first_quartile` | `number` |\n| `label` | `string` |\n| `max` | `number` |\n| `median` | `number` |\n| `min` | `number` |\n| `outliers` | `number`[] |\n| `third_quartile` | `number` |\n```\n\n----------------------------------------\n\nTITLE: Defining Context Dataclass for Code Execution in Python\nDESCRIPTION: This dataclass represents a context for code execution, including an ID, language, and working directory. It's likely used to manage different execution environments.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.3/sandbox/page.mdx#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n\n### id\n\nThe ID of the context.\n\n### language\n\nThe language of the context.\n\n### cwd\n\nThe working directory of the context.\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Type in TypeScript\nDESCRIPTION: Defines the base Chart type with elements, title, and type properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Chart: object;\n```\n\n----------------------------------------\n\nTITLE: Setting E2B API Key Environment Variable\nDESCRIPTION: Command to set the environment variable for the E2B API key.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nE2B_API_KEY=e2b_***\n```\n\n----------------------------------------\n\nTITLE: Defining ChartType Enumeration Class in Python\nDESCRIPTION: Defines an enumeration class for chart types that inherits from string and enum.Enum. This allows for type-safe selection of chart types in the application.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.1/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Defining PointData Type Alias in TypeScript\nDESCRIPTION: Specifies the structure of data for points in scatter and line charts, including label and an array of point coordinates.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype PointData: object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `label` | `string` |\n| `points` | [`number` \\| `string`, `number` \\| `string`][] |\n```\n\n----------------------------------------\n\nTITLE: Executing Code with E2B Sandbox in JavaScript/TypeScript\nDESCRIPTION: Example of using the E2B Sandbox to execute code in JavaScript/TypeScript. It demonstrates creating a sandbox, running code, and retrieving the execution result.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Sandbox } from '@e2b/code-interpreter'\n\nconst sbx = await Sandbox.create()\nawait sbx.runCode('x = 1')\n\nconst execution = await sbx.runCode('x+=1; x')\nconsole.log(execution.text)  // outputs 2\n```\n\n----------------------------------------\n\nTITLE: Defining BoxAndWhiskerData Type in TypeScript\nDESCRIPTION: Specifies the structure of BoxAndWhiskerData with properties for quartiles, median, min, max, and outliers.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype BoxAndWhiskerData: object;\n```\n\n----------------------------------------\n\nTITLE: Installing E2B SDK for JavaScript/TypeScript\nDESCRIPTION: Command to install the E2B SDK for JavaScript/TypeScript using npm.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @e2b/code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Defining ChartType Enum in Python\nDESCRIPTION: Defines an enumeration class for chart types using Python's enum module.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.2/sandbox/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ChartType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Defining ChartTypes Union Type in TypeScript\nDESCRIPTION: Creates a union type of all available chart types for type checking and inference.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChartTypes: \n  | LineChart\n  | ScatterChart\n  | BarChart\n  | PieChart\n  | BoxAndWhiskerChart\n  | SuperChart;\n```\n\n----------------------------------------\n\nTITLE: Executing Code in E2B Sandbox using Python\nDESCRIPTION: Python script demonstrating how to use the E2B Sandbox to execute code and retrieve results. It initializes a variable, increments it, and prints the result.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import Sandbox\n\nwith Sandbox() as sandbox:\n    sandbox.run_code(\"x = 1\")\n    execution = sandbox.run_code(\"x+=1; x\")\n    print(execution.text)  # outputs 2\n```\n\n----------------------------------------\n\nTITLE: Defining BoxAndWhiskerChart Type in TypeScript\nDESCRIPTION: Defines the BoxAndWhiskerChart type as an extension of Chart2D with specific elements and chart type.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype BoxAndWhiskerChart: Chart2D & object;\n```\n\n----------------------------------------\n\nTITLE: Setting E2B API Key Environment Variable\nDESCRIPTION: Command to set the E2B API key as an environment variable for authentication.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nE2B_API_KEY=e2b_***\n```\n\n----------------------------------------\n\nTITLE: Defining ScaleType Enumeration in Python\nDESCRIPTION: An enumeration class for axis scale types used in charts and visualizations. It extends the str and enum.Enum classes.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Defining BoxAndWhiskerChart Type Alias in TypeScript\nDESCRIPTION: Defines the structure of a box and whisker chart, extending the Chart2D type and specifying the elements as an array of BoxAndWhiskerData objects.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype BoxAndWhiskerChart: Chart2D & object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `elements` | `BoxAndWhiskerData`[] |\n| `type` | `ChartType.BOX_AND_WHISKER` |\n```\n\n----------------------------------------\n\nTITLE: Defining Default Timeout Constant in TypeScript\nDESCRIPTION: This snippet defines a constant DEFAULT_TIMEOUT_MS with a value of 60,000 milliseconds (1 minute). It's likely used as a default timeout duration for operations in the code interpreter.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/consts/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst DEFAULT_TIMEOUT_MS: 60000 = 60_000;\n```\n\n----------------------------------------\n\nTITLE: Setting Jupyter Notebook Port Constant in TypeScript\nDESCRIPTION: Defines the port number (49999) to be used for Jupyter notebook connections. This constant specifies which network port the Jupyter server will listen on.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/consts/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst JUPYTER_PORT: 49999 = 49999;\n```\n\n----------------------------------------\n\nTITLE: Installing E2B Code Interpreter SDK with pip\nDESCRIPTION: Command to install the E2B Code Interpreter SDK using pip package manager.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install e2b-code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Defining ScaleType Enumeration in Python\nDESCRIPTION: Defines an enumeration class for axis scale types that can be used in charts and visualizations.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ScaleType(str, enum.Enum)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Custom Code Interpreter Sandbox\nDESCRIPTION: This Dockerfile configuration uses the prebuilt E2B Code Interpreter image as a base for creating a custom sandbox.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM e2bdev/code-interpreter:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Jupyter Port Constant in TypeScript\nDESCRIPTION: This snippet defines a constant JUPYTER_PORT with a value of 49999. It specifies the port number on which the Jupyter server for the code interpreter is expected to run.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/consts/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst JUPYTER_PORT: 49999 = 49999;\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Type Alias in TypeScript\nDESCRIPTION: Represents the base structure for all chart types, including elements, title, and type properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Chart: object;\n\nRepresents a chart.\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `elements` | `any`[] |\n| `title` | `string` |\n| `type` | `ChartType` |\n```\n\n----------------------------------------\n\nTITLE: Setting E2B API Key Environment Variable\nDESCRIPTION: Command to set the E2B API key as an environment variable. The API key is required to authenticate with E2B's services.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/js/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nE2B_API_KEY=e2b_***\n```\n\n----------------------------------------\n\nTITLE: Implementing deserializeChart Function in TypeScript\nDESCRIPTION: Defines a function to deserialize chart data from a generic input type to a Chart object.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deserializeChart(data: any): Chart\n\n#### Parameters\n\n| Parameter | Type |\n| ------ | ------ |\n| `data` | `any` |\n\n#### Returns\n\n`Chart`\n```\n\n----------------------------------------\n\nTITLE: Installing E2B SDK for Python\nDESCRIPTION: Command to install the E2B SDK for Python using pip.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install e2b-code-interpreter\n```\n\n----------------------------------------\n\nTITLE: Defining Jupyter Port Constant in TypeScript\nDESCRIPTION: Defines a constant for the port number (49999) used to connect to a Jupyter server. This ensures consistent network communication with the Jupyter service throughout the application.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/consts/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst JUPYTER_PORT: 49999 = 49999;\n```\n\n----------------------------------------\n\nTITLE: Defining BarChart Type Alias in TypeScript\nDESCRIPTION: Defines the structure of a bar chart, extending the Chart2D type and specifying the elements as an array of BarData objects.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BarChart: Chart2D & object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `elements` | `BarData`[] |\n| `type` | `ChartType.BAR` |\n```\n\n----------------------------------------\n\nTITLE: Defining SuperChart Type Alias in TypeScript\nDESCRIPTION: Defines the structure of a super chart, which can contain multiple charts of different types.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype SuperChart: Chart & object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `elements` | `Chart`[] |\n| `type` | `ChartType.SUPERCHART` |\n```\n\n----------------------------------------\n\nTITLE: AsyncSandbox Creation Example\nDESCRIPTION: Example showing how to create a new AsyncSandbox instance using the create() method.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```\n\n----------------------------------------\n\nTITLE: Defining BarData Type in TypeScript\nDESCRIPTION: Specifies the structure of BarData with group, label, and value properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype BarData: object;\n```\n\n----------------------------------------\n\nTITLE: Initializing OutputMessage Class in TypeScript\nDESCRIPTION: Constructor for the OutputMessage class which represents a single output message from sandbox code execution, with line content, timestamp, and error flag.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.1/messaging/page.mdx#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew OutputMessage(\n   line: string, \n   timestamp: number, \n   error: boolean): OutputMessage\n```\n\n----------------------------------------\n\nTITLE: Defining SuperChart Type in TypeScript\nDESCRIPTION: Defines the SuperChart type as an extension of Chart with elements as an array of Charts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype SuperChart: Chart & object;\n```\n\n----------------------------------------\n\nTITLE: Defining LineChart Type in TypeScript\nDESCRIPTION: Defines the LineChart type as an extension of PointChart with a specific chart type.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.1.0/charts/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype LineChart: PointChart & object;\n```\n\n----------------------------------------\n\nTITLE: Running Code in E2B Sandbox with Specified Language\nDESCRIPTION: This overloaded method runs code in the E2B sandbox for a specified language. It provides options for callbacks, environment variables, and timeouts.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.4/sandbox/page.mdx#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@overload\ndef run_code(code: str,\n             language: Optional[str] = None,\n             on_stdout: Optional[OutputHandler[OutputMessage]] = None,\n             on_stderr: Optional[OutputHandler[OutputMessage]] = None,\n             on_result: Optional[OutputHandler[Result]] = None,\n             on_error: Optional[OutputHandler[ExecutionError]] = None,\n             envs: Optional[Dict[str, str]] = None,\n             timeout: Optional[float] = None,\n             request_timeout: Optional[float] = None) -> Execution\n```\n\n----------------------------------------\n\nTITLE: Implementing Logs Data Class in Python\nDESCRIPTION: Stores stdout and stderr outputs during code execution, including serialization to JSON and handling of execution results.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.1.0/sandbox/page.mdx#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(repr=False)\nclass Logs()\n\n### stdout\n\nList of strings printed to stdout by prints, subprocesses, etc.\n\n\n### stderr\n\nList of strings printed to stderr by prints, subprocesses, etc.\n\n\n### to\\_json\n\n```python\ndef to_json() -> str\n```\n\nReturns the JSON representation of the Logs object.\n\n\n### serialize\\_results\n\n```python\ndef serialize_results(results: List[Result]) -> List[Dict[str, str]]\n```\n\nSerializes the results to JSON.\n```\n\n----------------------------------------\n\nTITLE: Defining PieData Type Alias in TypeScript\nDESCRIPTION: Specifies the structure of data for individual slices in a pie chart, including angle, label, and radius properties.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype PieData: object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `angle` | `number` |\n| `label` | `string` |\n| `radius` | `number` |\n```\n\n----------------------------------------\n\nTITLE: Defining LineChart Type Alias in TypeScript\nDESCRIPTION: Defines the structure of a line chart, extending the PointChart type and specifying the chart type as LINE.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-js-sdk/v1.0.4/charts/page.mdx#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype LineChart: PointChart & object;\n\n#### Type declaration\n\n| Name | Type |\n| ------ | ------ |\n| `type` | `ChartType.LINE` |\n```\n\n----------------------------------------\n\nTITLE: Defining Context Dataclass in Python\nDESCRIPTION: A dataclass representing a context for code execution, including ID, language, and working directory information.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.2.0/sandbox/page.mdx#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Context()\n\n### id\n\nThe ID of the context.\n\n\n### language\n\nThe language of the context.\n\n\n### cwd\n\nThe working directory of the context.\n```\n\n----------------------------------------\n\nTITLE: Creating AsyncSandbox Instance\nDESCRIPTION: Example showing how to create a new instance of the AsyncSandbox class.\nSOURCE: https://github.com/e2b-dev/code-interpreter/blob/main/sdk-reference/code-interpreter-python-sdk/v1.0.1/sandbox/page.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom e2b_code_interpreter import AsyncSandbox\nsandbox = await AsyncSandbox.create()\n```"
  }
]