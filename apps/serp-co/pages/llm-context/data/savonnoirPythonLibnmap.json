[
  {
    "owner": "savon-noir",
    "repo": "python-libnmap",
    "content": "TITLE: Basic Nmap Scan with Python\nDESCRIPTION: A simple example demonstrating how to run an Nmap scan synchronously with the NmapProcess class. This code scans 'scanme.nmap.org' with service version detection (-sV) and prints the result.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/process.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom libnmap.process import NmapProcess\n\nnm = NmapProcess(\"scanme.nmap.org\", options=\"-sV\")\nrc = nm.run()\n\nif nm.rc == 0:\n    print nm.stdout\nelse:\n    print nm.stderr\n```\n\n----------------------------------------\n\nTITLE: Processing and Parsing Nmap Scan Results in Python\nDESCRIPTION: Example showing how to run an Nmap scan using NmapProcess, parse the results with NmapParser, and iterate through scanned hosts. This demonstrates integration of scanning and parsing in python-libnmap.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/parser.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom libnmap.process import NmapProcess\nfrom libnmap.parser import NmapParser\n\nnm = NmapProcess(\"127.0.0.1, scanme.nmap.org\")\nnm.run()\n\nnmap_report = NmapParser.parse(nm.stdout)\n\nfor scanned_hosts in nmap_report.hosts:\n    print scanned_hosts\n```\n\n----------------------------------------\n\nTITLE: Detailed Example of Comparing NmapObjects with libnmap.diff Module\nDESCRIPTION: A comprehensive example demonstrating how to use the diff module to compare two NmapReport objects, identify changed hosts, and drill down to find specific service changes between scans.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/diff.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n\nfrom libnmap.parser import NmapParser\n\nrep1 = NmapParser.parse_fromfile('libnmap/test/files/1_hosts.xml')\nrep2 = NmapParser.parse_fromfile('libnmap/test/files/1_hosts_diff.xml')\n\nrep1_items_changed = rep1.diff(rep2).changed()\nchanged_host_id = rep1_items_changed.pop().split('::')[1]\n\nchanged_host1 = rep1.get_host_byid(changed_host_id)\nchanged_host2 = rep2.get_host_byid(changed_host_id)\nhost1_items_changed = changed_host1.diff(changed_host2).changed()\n\nchanged_service_id = host1_items_changed.pop().split('::')[1]\nchanged_service1 = changed_host1.get_service_byid(changed_service_id)\nchanged_service2 = changed_host2.get_service_byid(changed_service_id)\nservice1_items_changed = changed_service1.diff(changed_service2).changed()\n\nfor diff_attr in service1_items_changed:\n    print \"diff({0}, {1}) [{2}:{3}] [{4}:{5}]\".format(changed_service1.id,\n                                                     changed_service2.id,\n                                                     diff_attr,\n                                                     getattr(changed_service1, diff_attr),\n                                                     diff_attr,\n                                                     getattr(changed_service2, diff_attr))\n```\n\n----------------------------------------\n\nTITLE: Parsing Nmap XML Output with NmapParser\nDESCRIPTION: Example of using NmapParser to parse a Nmap XML file and print the scan summary. This demonstrates basic usage of the libnmap.parser module.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/parser.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom libnmap.parser import NmapParser\n\nnmap_report = NmapParser.parse_fromfile('libnmap/test/files/1_os_banner_scripts.xml')\nprint \"Nmap scan summary: {0}\".format(nmap_report.summary)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Nmap Scan with Callback\nDESCRIPTION: This example shows how to run an Nmap scan asynchronously using threading capabilities of NmapProcess. The code references an external example file that demonstrates background scanning with progress updates.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/process.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/proc_async.py\n```\n\n----------------------------------------\n\nTITLE: Describing NmapReport Structure in Python\nDESCRIPTION: Outlines the structure of an NmapReport object, which contains scan header data, a list of NmapHosts, and scan footer data. This structure represents the hierarchical organization of Nmap scan results.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/objects.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nNmapReport contains:\n    - Scan \"header\" data (start time, nmap command, nmap version, ...)\n    - List of NmapHosts (0 to X scanned hosts could be nested in a nmap report)\n    - Scan \"footer\" data (end time, summary, ...)\n```\n\n----------------------------------------\n\nTITLE: Describing NmapHost Structure in Python\nDESCRIPTION: Details the structure of an NmapHost object, which includes host header data, a list of NmapServices, and host footer data. This structure represents the information collected about a single host during an Nmap scan.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/objects.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nNmapHost contains:\n    - Host \"header\" data (state, hostnames, ip, ...)\n    - List of NmapService (0 to X scanned services could be nested in a scanned host)\n    - Host \"footer\" data (os version, fingerprint, uptime, ...)\n```\n\n----------------------------------------\n\nTITLE: Describing NmapService Structure in Python\nDESCRIPTION: Explains the structure of an NmapService object, which contains scan results for a specific service, including state, name, and optional data such as service banner and NSE scripts output.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/objects.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNmapService contains:\n    - scan results for this service:\n        - service state, service name\n        - optional: service banner\n        - optional: NSE scripts data\n```\n\n----------------------------------------\n\nTITLE: Nmap-like Output Formatting\nDESCRIPTION: An example that formats and displays scan results in a similar style to the Nmap command-line tool. This references an external example file that implements the formatting logic.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/process.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/proc_nmap_like.py\n```\n\n----------------------------------------\n\nTITLE: XML Parser Selection in libnmap.parser Module\nDESCRIPTION: Code snippet showing the XML parser selection logic in the libnmap.parser module. It attempts to import defusedxml first, then falls back to cElementTree, and finally to ElementTree.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/parser.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    from defusedxml.ElementTree import fromstring, iterparse\nexcept ImportError:\n    try:\n        from xml.etree.cElementTree import fromstring, iterparse\n    except ImportError:\n        from xml.etree.ElementTree import fromstring, iterparse\n```\n\n----------------------------------------\n\nTITLE: Installing defusedxml for Secure XML Parsing in Python\nDESCRIPTION: Command to install the defusedxml library, which is recommended for parsing untrusted XML scan outputs securely with python-libnmap.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/parser.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nronald@brouette:~/dev$ pip install defusedxml\n```\n\n----------------------------------------\n\nTITLE: Autodocumentation References for NmapHost Class in Python\nDESCRIPTION: Sphinx autodocumentation directives for generating documentation of the NmapHost class and its methods from the libnmap.objects module.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/objects/nmaphost.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: libnmap.objects\n.. autoclass:: NmapHost\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for libnmap.objects.service Module in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to automatically generate documentation for the libnmap.objects module and the NmapService class within it. It includes all members of the NmapService class.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/objects/nmapservice.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: libnmap.objects\n.. autoclass:: NmapService\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Installing defusedxml for Security with Python-libnmap\nDESCRIPTION: This command installs the defusedxml library to prevent XML External Entities (XXE) attacks when parsing untrusted Nmap XML scan outputs with python-libnmap.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nronald@brouette:~/dev$ pip install defusedxml\n```\n\n----------------------------------------\n\nTITLE: Installing Python-libnmap via pip\nDESCRIPTION: This command installs the python-libnmap library using pip, which is the simplest installation method.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nronald@brouette:~$ pip install python-libnmap\n```\n\n----------------------------------------\n\nTITLE: Installing Python-libnmap via git and pip\nDESCRIPTION: This sequence of commands clones the python-libnmap repository from GitHub and installs it using pip, allowing installation of the latest development version.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nronald@brouette:~$ git clone https://github.com/savon-noir/python-libnmap.git\nronald@brouette:~$ cd python-libnmap\nronald@brouette:~$ pip install .\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for CPE Module\nDESCRIPTION: ReStructuredText documentation template showing the structure for the CPE module documentation, including section headers and autodoc directives.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/docs/objects/cpe.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nlibnmap.objects.cpe\n===================\n\nUsing libnmap.objects.cpe module\n--------------------------------\n\nTODO\n\nCPE methods\n-----------\n\n.. automodule:: libnmap.objects.cpe\n.. autoclass:: CPE\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Installing Python-libnmap via git and setuptools\nDESCRIPTION: This sequence of commands clones the python-libnmap repository from GitHub and installs it using the traditional setuptools method, which is noted as deprecated.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nronald@brouette:~$ git clone https://github.com/savon-noir/python-libnmap.git\nronald@brouette:~$ cd python-libnmap\nronald@brouette:~$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: List of required Python packages with pinned versions for development and testing. Includes Black for code formatting, defusedxml for safe XML parsing, isort for import sorting, pre-commit for git hooks, pytest for testing, and flake8 for code linting.\nSOURCE: https://github.com/savon-noir/python-libnmap/blob/master/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nblack==24.3.0\ndefusedxml==0.7.1\nisort==6.0.0\npre-commit\npytest\npytest-cov\nflake8\n```"
  }
]