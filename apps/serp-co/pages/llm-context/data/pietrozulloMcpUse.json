[
  {
    "owner": "pietrozullo",
    "repo": "mcp-use",
    "content": "TITLE: Basic mcp_use Agent Implementation\nDESCRIPTION: Example of creating and running an MCPAgent with OpenAI ChatGPT integration\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom mcp_use import MCPAgent, MCPClient\n\nasync def main():\n    # Load environment variables\n    load_dotenv()\n\n    # Create configuration dictionary\n    config = {\n      \"mcpServers\": {\n        \"playwright\": {\n          \"command\": \"npx\",\n          \"args\": [\"@playwright/mcp@latest\"],\n          \"env\": {\n            \"DISPLAY\": \":1\"\n          }\n        }\n      }\n    }\n\n    # Create MCPClient from configuration dictionary\n    client = MCPClient.from_dict(config)\n\n    # Create LLM\n    llm = ChatOpenAI(model=\"gpt-4o\")\n\n    # Create agent with the client\n    agent = MCPAgent(llm=llm, client=client, max_steps=30)\n\n    # Run the query\n    result = await agent.run(\n        \"Find the best restaurant in San Francisco USING GOOGLE SEARCH\",\n    )\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing MCPAgent with Custom Parameters in Python\nDESCRIPTION: Creates an MCPAgent instance with various customization options. This initialization combines an LLM with an MCPClient to create an intelligent agent capable of using MCP tools.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPAgent, MCPClient\nfrom langchain_openai import ChatOpenAI\n\nagent = MCPAgent(\n    llm=ChatOpenAI(model=\"gpt-4o\", temperature=0.7),\n    client=MCPClient.from_config_file(\"config.json\"),\n    max_steps=30,\n    session_options={\"timeout\": 60.0},\n    auto_initialize=True,\n    memory_enabled=True,\n    system_prompt=None,\n    system_prompt_template=None,\n    additional_instructions=None,\n    disallowed_tools=None,\n    use_server_manager=False\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced MCPAgent Configuration in Python\nDESCRIPTION: Initialize an MCPAgent with advanced configuration options including server selection, auto-initialization, memory settings, custom prompts, and tool restrictions.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Advanced configuration\nagent = MCPAgent(\n    llm=ChatOpenAI(model=\"gpt-4o\", temperature=0.7),\n    client=MCPClient.from_config_file(\"config.json\"),\n    max_steps=30,\n    server_name=None,\n    auto_initialize=True,\n    memory_enabled=True,\n    system_prompt=\"Custom instructions for the agent\",\n    additional_instructions=\"Additional guidelines for specific tasks\",\n    disallowed_tools=[\"file_system\", \"network\", \"shell\"]  # Restrict potentially dangerous tools\n)\n```\n\n----------------------------------------\n\nTITLE: Basic MCPAgent Configuration in Python\nDESCRIPTION: Initialize an MCPAgent with basic configuration including a language model, client, and maximum steps.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPAgent, MCPClient\nfrom langchain_openai import ChatOpenAI\n\n# Basic configuration\nagent = MCPAgent(\n    llm=ChatOpenAI(model=\"gpt-4o\", temperature=0.7),\n    client=MCPClient.from_config_file(\"config.json\"),\n    max_steps=30\n)\n```\n\n----------------------------------------\n\nTITLE: Running an MCPAgent Query in Python\nDESCRIPTION: Executes a query using the MCPAgent. This method allows for customization of execution parameters such as maximum steps and server selection.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresult = await agent.run(\n    query=\"Find information about Python libraries\",\n    max_steps=25,\n    stop_on_first_result=False\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing MCPClient from Config File in Python\nDESCRIPTION: Creates an MCPClient instance using a JSON configuration file. This method is used to set up the client with predefined server configurations.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPClient\n\nclient = MCPClient.from_config_file(config_path=\"config.json\")\n```\n\n----------------------------------------\n\nTITLE: Creating MCP Client from Configuration File in Python\nDESCRIPTION: Python example showing how to create an MCPClient instance from a configuration file. The connection type is automatically inferred based on the parameters in the configuration.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/connection-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPClient\n\n# The connection type is automatically inferred based on your config file\nclient = MCPClient.from_config_file(\"config.json\", server_name=\"my_server\")\n```\n\n----------------------------------------\n\nTITLE: Managing Tool Access Control in MCPAgent\nDESCRIPTION: Configure and manage tool access restrictions for an MCPAgent to control which capabilities are available.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Create agent with restricted tools\nagent = MCPAgent(\n    llm=ChatOpenAI(model=\"gpt-4o\"),\n    client=client,\n    disallowed_tools=[\"file_system\", \"network\", \"shell\"]  # Restrict potentially dangerous tools\n)\n\n# Update restrictions after initialization\nagent.set_disallowed_tools([\"file_system\", \"network\", \"shell\", \"database\"])\nawait agent.initialize()  # Reinitialize to apply changes\n\n# Check current restrictions\nrestricted_tools = agent.get_disallowed_tools()\nprint(f\"Restricted tools: {restricted_tools}\")\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection Implementation\nDESCRIPTION: Example of setting up an MCPAgent with HTTP connection to an MCP server\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom mcp_use import MCPAgent, MCPClient\n\nasync def main():\n    # Load environment variables\n    load_dotenv()\n\n    # Create configuration dictionary\n    config = {\n      \"mcpServers\": {\n        \"http\": {\n          \"url\": \"http://localhost:8931/sse\"\n        }\n      }\n    }\n\n    # Create MCPClient from configuration dictionary\n    client = MCPClient.from_dict(config)\n\n    # Create LLM\n    llm = ChatOpenAI(model=\"gpt-4o\")\n\n    # Create agent with the client\n    agent = MCPAgent(llm=llm, client=client, max_steps=30)\n\n    # Run the query\n    result = await agent.run(\n        \"Find the best restaurant in San Francisco USING GOOGLE SEARCH\",\n    )\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating a Session with MCPClient in Python\nDESCRIPTION: Establishes a new session with an MCP server using the MCPClient. This method allows for customization of timeout and retry attempts for connection establishment.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsession = await client.create_session(server_name=\"my_server\")\n```\n\n----------------------------------------\n\nTITLE: Initializing MCPClient from Dictionary in Python\nDESCRIPTION: Creates an MCPClient instance using a dictionary containing MCP server configuration. This method allows for dynamic configuration of the client without relying on a file.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPClient\n\nconfig = {\n  \"mcpServers\": {\n    \"my_server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@my-mcp/server\"],\n      \"env\": {\n        \"PORT\": \"3000\"\n      }\n    }\n  }\n}\n\nclient = MCPClient.from_dict(config=config)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection for MCP Server\nDESCRIPTION: JSON configuration example for setting up an HTTP connection to an MCP server. The configuration specifies the server URL and includes an authorization header with a token placeholder.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/connection-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"http_server\": {\n      \"url\": \"http://localhost:3000\",\n      \"headers\": {\n        \"Authorization\": \"Bearer ${AUTH_TOKEN}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring STDIO Connection for MCP Server\nDESCRIPTION: JSON configuration example for setting up a STDIO connection to an MCP server. This configuration runs the server as a child process using npx with the @my-mcp/server package.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/connection-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"stdio_server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@my-mcp/server\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Server Configuration in Python\nDESCRIPTION: Demonstrates how to configure and use multiple MCP servers within a single application, including browser and custom server implementations.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPClient, MCPAgent\nfrom langchain_openai import ChatOpenAI\n\n# Create client with multiple servers\nclient = MCPClient.from_dict({\n    \"mcpServers\": {\n        \"browser\": {\n            \"command\": \"npx\",\n            \"args\": [\"@playwright/mcp@latest\"]\n        },\n        \"custom_server\": {\n            \"command\": \"python\",\n            \"args\": [\"-m\", \"my_custom_mcp_server\"]\n        }\n    }\n})\n\n# Create agent\nagent = MCPAgent(llm=ChatOpenAI(model=\"gpt-4o\"), client=client)\n\n# Run with specific server\nresult_browser = await agent.run(\n    \"Search the web for Python libraries\",\n    server_name=\"browser\"\n)\n\n# Run with different server\nresult_custom = await agent.run(\n    \"Perform custom operation\",\n    server_name=\"custom_server\"\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Server Configuration JSON\nDESCRIPTION: Configuration for multiple MCP servers including Airbnb and Playwright\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"airbnb\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"]\n    },\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"@playwright/mcp@latest\"],\n      \"env\": {\n        \"DISPLAY\": \":1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple MCP Server Configuration in JSON\nDESCRIPTION: Configure multiple MCP servers in a single configuration file, allowing the use of different servers for different tasks or combining their capabilities.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"airbnb\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@openbnb/mcp-server-airbnb\", \"--ignore-robots-txt\"]\n    },\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"@playwright/mcp@latest\"],\n      \"env\": { \"DISPLAY\": \":1\" }\n    },\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/home/pietro/projects/mcp-use/\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Server Configuration JSON\nDESCRIPTION: Example configuration file for MCP server setup\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"playwright\": {\n      \"command\": \"npx\",\n      \"args\": [\"@playwright/mcp@latest\"],\n      \"env\": {\n        \"DISPLAY\": \":1\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Tool Access in Python\nDESCRIPTION: Example of controlling tool access and restrictions for an MCP agent, including initialization and verification of restrictions.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPAgent, MCPClient\nfrom langchain_openai import ChatOpenAI\n\n# Create agent with restricted tools\nagent = MCPAgent(\n    llm=ChatOpenAI(model=\"gpt-4o\"),\n    client=client,\n    disallowed_tools=[\"file_system\", \"network\", \"shell\"]  # Restrict potentially dangerous tools\n)\n\n# Update restrictions after initialization\nagent.set_disallowed_tools([\"file_system\", \"network\", \"shell\", \"database\"])\nawait agent.initialize()  # Reinitialize to apply changes\n\n# Check current restrictions\nrestricted_tools = agent.get_disallowed_tools()\nprint(f\"Restricted tools: {restricted_tools}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Server Instance with MCPClient in Python\nDESCRIPTION: Retrieves a server instance by its name from the MCPClient. This method is used to access specific server configurations and functionalities.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nserver = client.get_server(name=\"my_server\")\n```\n\n----------------------------------------\n\nTITLE: Example MCP Server Configuration in JSON\nDESCRIPTION: A basic example of how to configure a single MCP server with a command, arguments, and environment variables.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"my_server\": {\n      \"command\": \"npx\",\n      \"args\": [\"@my-mcp/server\"],\n      \"env\": {\n        \"PORT\": \"3000\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Server Configuration Schema\nDESCRIPTION: JSON schema for configuring MCP servers with options for command execution, environment variables, timeouts, and retry logic.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"server_name\": {\n      \"command\": \"command_to_run\",\n      \"args\": [\"arg1\", \"arg2\"],\n      \"env\": {\n        \"ENV_VAR\": \"value\"\n      },\n      \"timeout\": 30.0,\n      \"retry\": {\n        \"max_attempts\": 3,\n        \"backoff_factor\": 1.5\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MCP Server Configuration Structure in JSON\nDESCRIPTION: Define the basic structure for an MCP server configuration in a JSON file, including server name, command, arguments, and environment variables.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"server_name\": {\n      \"command\": \"command_to_run\",\n      \"args\": [\"arg1\", \"arg2\"],\n      \"env\": {\n        \"ENV_VAR\": \"value\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricted Tools Implementation\nDESCRIPTION: Example of creating an MCPAgent with restricted tool access for security\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom dotenv import load_dotenv\nfrom langchain_openai import ChatOpenAI\nfrom mcp_use import MCPAgent, MCPClient\n\nasync def main():\n    # Load environment variables\n    load_dotenv()\n\n    # Create configuration dictionary\n    config = {\n      \"mcpServers\": {\n        \"playwright\": {\n          \"command\": \"npx\",\n          \"args\": [\"@playwright/mcp@latest\"],\n          \"env\": {\n            \"DISPLAY\": \":1\"\n          }\n        }\n      }\n    }\n\n    # Create MCPClient from configuration dictionary\n    client = MCPClient.from_dict(config)\n\n    # Create LLM\n    llm = ChatOpenAI(model=\"gpt-4o\")\n\n    # Create agent with restricted tools\n    agent = MCPAgent(\n        llm=llm,\n        client=client,\n        max_steps=30,\n        disallowed_tools=[\"file_system\", \"network\"]  # Restrict potentially dangerous tools\n    )\n\n    # Run the query\n    result = await agent.run(\n        \"Find the best restaurant in San Francisco USING GOOGLE SEARCH\",\n    )\n    print(f\"\\nResult: {result}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Setting Disallowed Tools in Python\nDESCRIPTION: Demonstrates how to set a list of tools that should not be available to the MCP agent for security or functionality restrictions.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nagent.set_disallowed_tools([\"tool1\", \"tool2\"])\n```\n\n----------------------------------------\n\nTITLE: Getting Disallowed Tools in Python\nDESCRIPTION: Shows how to retrieve the list of currently restricted tools from the MCP agent for verification or debugging purposes.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndisallowed = agent.get_disallowed_tools()\n```\n\n----------------------------------------\n\nTITLE: Resetting MCPAgent State in Python\nDESCRIPTION: Resets the state of the MCPAgent. This method is useful for clearing context between different tasks or when starting a new conversation thread.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nagent.reset()\n```\n\n----------------------------------------\n\nTITLE: Installing mcp-use Package\nDESCRIPTION: Instructions for installing mcp_use using pip or from source code\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mcp-use\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pietrozullo/mcp-use.git\ncd mcp-use\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Retrieving MCPAgent Interaction History in Python\nDESCRIPTION: Retrieves the interaction history of the MCPAgent. This method is helpful for debugging agent behavior or implementing custom logging.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhistory = agent.get_history()\n```\n\n----------------------------------------\n\nTITLE: Custom Output Parsing in Python\nDESCRIPTION: Shows implementation of custom output parsers for specialized MCP servers to handle structured data or specific response formats.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.schema import OutputParser\nfrom mcp_use import MCPAgent, MCPClient\n\nclass CustomOutputParser(OutputParser):\n    def parse(self, text):\n        # Custom parsing logic\n        return processed_result\n\n# Use the custom parser\nagent = MCPAgent(\n    llm=llm,\n    client=client,\n    output_parser=CustomOutputParser()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables in .env File for API Keys\nDESCRIPTION: Create a .env file to store API keys for different providers (OpenAI, Anthropic, Groq) that can be loaded into your Python environment.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# OpenAI\nOPENAI_API_KEY=your_api_key_here\n# Anthropic\nANTHROPIC_API_KEY=your_api_key_here\n# Groq\nGROQ_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File in Python\nDESCRIPTION: Load the API keys from a .env file into your Python environment using the dotenv library.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Closing All Sessions with MCPClient in Python\nDESCRIPTION: Closes all active sessions managed by the MCPClient. This method is crucial for proper resource management, especially at the end of an application's lifecycle.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait client.close_all_sessions()\n```\n\n----------------------------------------\n\nTITLE: Closing a Specific Session with MCPClient in Python\nDESCRIPTION: Closes a specific session identified by its session ID. This method is used for cleaning up resources associated with a particular session.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait client.close_session(session_id=\"session_id\")\n```\n\n----------------------------------------\n\nTITLE: MCP Error Handling in Python\nDESCRIPTION: Example of handling various MCP-related exceptions including connection, timeout, and general errors.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/api-reference/introduction.mdx#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use.exceptions import MCPConnectionError, MCPTimeoutError\n\ntry:\n    result = await agent.run(\"Find information\")\nexcept MCPConnectionError:\n    # Handle connection issues\n    print(\"Failed to connect to the MCP server\")\nexcept MCPTimeoutError:\n    # Handle timeout issues\n    print(\"Operation timed out\")\nexcept Exception as e:\n    # Handle other exceptions\n    print(f\"An error occurred: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Creating MCPAgent with Increased Verbosity in Python\nDESCRIPTION: Shows how to create an MCPAgent instance with increased verbosity for agent-specific debugging without enabling full debug mode for the entire package.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/debugging.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp_use import MCPAgent\n\n# Create agent with increased verbosity\nagent = MCPAgent(\n    llm=your_llm,\n    client=your_client,\n    verbose=True  # Only shows debug messages from the agent\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Keys from Environment Variables in Python\nDESCRIPTION: Import API keys from environment variables into your Python code using the os module.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nOPENAI_API_KEY = os.getenv(OPENAI_API_KEY,\"\")\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Flag Programmatically in Python\nDESCRIPTION: Demonstrates how to set the global debug flag directly in Python code using mcp_use.set_debug(). Different levels (0, 1, 2) control the verbosity of logging.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/debugging.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport mcp_use\n\nmcp_use.set_debug(1)  # INFO level\n# or\nmcp_use.set_debug(2)  # DEBUG level (full verbose output)\n# or\nmcp_use.set_debug(0)  # Turn off debug (WARNING level)\n```\n\n----------------------------------------\n\nTITLE: Setting API Keys Directly in Terminal\nDESCRIPTION: Set API keys directly in your terminal environment using the export command.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/configuration.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY='...\"'\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Setup\nDESCRIPTION: Example of setting up API keys in environment variables file\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_api_key_here\nANTHROPIC_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Installing LangChain Providers\nDESCRIPTION: Commands to install different LangChain provider packages for various LLM implementations\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/quickstart.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# For OpenAI\npip install langchain-openai\n\n# For Anthropic\npip install langchain-anthropic\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode via Environment Variables in Bash\nDESCRIPTION: Sets the DEBUG environment variable to enable different levels of logging for MCP-Use scripts. Level 1 shows INFO messages, while Level 2 provides full DEBUG output.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/debugging.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Level 1: Show INFO level messages\nDEBUG=1 python3.11 examples/browser_use.py\n\n# Level 2: Show DEBUG level messages (full verbose output)\nDEBUG=2 python3.11 examples/browser_use.py\n```\n\n----------------------------------------\n\nTITLE: Setting MCP_USE_DEBUG Environment Variable in Bash\nDESCRIPTION: Sets the MCP_USE_DEBUG environment variable to enable debugging for MCP-Use. This variable can be set to 1 for INFO level or 2 for DEBUG level.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/essentials/debugging.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MCP_USE_DEBUG=1 # or 2\n```\n\n----------------------------------------\n\nTITLE: Running Tests for mcp_use\nDESCRIPTION: Commands to run the test suite for mcp_use using pytest, including options for coverage and specific test files.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest\n\n# Run tests with coverage\npytest --cov=mcp_use\n\n# Run specific test file\npytest tests/test_client.py\n\n# Run tests with verbose output\npytest -v\n```\n\n----------------------------------------\n\nTITLE: Cloning the mcp_use Repository\nDESCRIPTION: Instructions for cloning the mcp_use repository from GitHub and navigating to the project directory.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/pietrozullo/mcp-use.git\ncd mcp-use\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for mcp_use\nDESCRIPTION: Command to install the development dependencies for the mcp_use project using pip.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing mcp_use to PyPI\nDESCRIPTION: Commands to build the mcp_use package and upload it to PyPI as part of the release process.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython -m build\npython -m twine upload dist/*\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for mcp_use\nDESCRIPTION: Command to install pre-commit hooks for the mcp_use project, ensuring code quality checks before commits.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server for previewing documentation changes in real-time.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Documentation Development\nDESCRIPTION: Command to install the Mintlify CLI globally using npm. This CLI tool is required to preview documentation changes locally.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Running Mintlify Development Server\nDESCRIPTION: Command to start the Mintlify development server at the root of your documentation directory where docs.json is located. This allows you to preview changes locally.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmintlify dev\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI for Documentation\nDESCRIPTION: Command to install the Mintlify CLI globally using npm for rendering and previewing documentation changes.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git\nDESCRIPTION: Git command to create a new branch for developing a feature in the mcp_use project.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to mcp_use\nDESCRIPTION: Git commands to stage and commit changes made to the mcp_use project.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Description of your changes\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes and Creating a Pull Request\nDESCRIPTION: Git command to push changes to a feature branch, preparing for a pull request in the mcp_use project.\nSOURCE: https://github.com/pietrozullo/mcp-use/blob/main/docs/development.mdx#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```"
  }
]