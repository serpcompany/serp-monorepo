[
  {
    "owner": "julienschmidt",
    "repo": "httprouter",
    "content": "TITLE: Basic HttpRouter Example in Go\nDESCRIPTION: This code demonstrates a basic example of using HttpRouter in Go. It sets up two routes: one for the index page and another for a personalized hello message using a named parameter.  It initializes a router, defines handler functions, and starts an HTTP server.\nSOURCE: https://github.com/julienschmidt/httprouter/blob/master/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"log\"\n\n    \"github.com/julienschmidt/httprouter\"\n)\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n    fmt.Fprint(w, \"Welcome!\\n\")\n}\n\nfunc Hello(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n    fmt.Fprintf(w, \"hello, %s!\\n\", ps.ByName(\"name\"))\n}\n\nfunc main() {\n    router := httprouter.New()\n    router.GET(\"/\", Index)\n    router.GET(\"/hello/:name\", Hello)\n\n    log.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Parameters with http.Handler in Go\nDESCRIPTION: This example shows how to access named parameters when using `http.Handler` with HttpRouter. It retrieves parameters from the request context using `httprouter.ParamsFromContext` and uses the `ByName` method to access the value of a parameter.\nSOURCE: https://github.com/julienschmidt/httprouter/blob/master/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    params := httprouter.ParamsFromContext(r.Context())\n\n    fmt.Fprintf(w, \"hello, %s!\\n\", params.ByName(\"name\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Basic Authentication with httprouter (Go)\nDESCRIPTION: This snippet demonstrates how to implement basic authentication (RFC 2617) for handlers in httprouter. The `BasicAuth` function is a middleware that checks for valid user credentials before delegating the request to the protected handler.  It requires the `httprouter`, `net/http`, `log` and `fmt` packages.\nSOURCE: https://github.com/julienschmidt/httprouter/blob/master/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/julienschmidt/httprouter\"\n)\n\nfunc BasicAuth(h httprouter.Handle, requiredUser, requiredPassword string) httprouter.Handle {\n\treturn func(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\t\t// Get the Basic Authentication credentials\n\t\tuser, password, hasAuth := r.BasicAuth()\n\n\t\tif hasAuth && user == requiredUser && password == requiredPassword {\n\t\t\t// Delegate request to the given handle\n\t\t\th(w, r, ps)\n\t\t} else {\n\t\t\t// Request Basic Authentication otherwise\n\t\t\tw.Header().Set(\"WWW-Authenticate\", \"Basic realm=Restricted\")\n\t\t\thttp.Error(w, http.StatusText(http.StatusUnauthorized), http.StatusUnauthorized)\n\t\t}\n\t}\n}\n\nfunc Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\tfmt.Fprint(w, \"Not protected!\\n\")\n}\n\nfunc Protected(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {\n\tfmt.Fprint(w, \"Protected!\\n\")\n}\n\nfunc main() {\n\tuser := \"gordon\"\n\tpass := \"secret!\"\n\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/protected/\", BasicAuth(Protected, user, pass))\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n```\n\n----------------------------------------\n\nTITLE: Configure CORS with Global OPTIONS Handler in httprouter (Go)\nDESCRIPTION: This snippet demonstrates how to configure CORS (Cross-Origin Resource Sharing) by modifying automatic responses to OPTIONS requests using the `Router.GlobalOPTIONS` handler in the httprouter. It sets the `Access-Control-Allow-Methods` and `Access-Control-Allow-Origin` headers and adjusts the status code to 204.\nSOURCE: https://github.com/julienschmidt/httprouter/blob/master/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrouter.GlobalOPTIONS = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    if r.Header.Get(\"Access-Control-Request-Method\") != \"\" {\n        // Set CORS headers\n        header := w.Header()\n        header.Set(\"Access-Control-Allow-Methods\", header.Get(\"Allow\"))\n        header.Set(\"Access-Control-Allow-Origin\", \"*\")\n    }\n\n    // Adjust status code to 204\n    w.WriteHeader(http.StatusNoContent)\n})\n```\n\n----------------------------------------\n\nTITLE: Handle Multi-Domain with httprouter (Go)\nDESCRIPTION: This code shows how to handle multiple domains or subdomains by defining a router per host using a custom `HostSwitch` type. It implements the `http.Handler` interface and maps hostnames to their corresponding `http.Handler`, allowing different routers to be used for different domains. It requires the `httprouter` and `net/http` packages.\nSOURCE: https://github.com/julienschmidt/httprouter/blob/master/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// We need an object that implements the http.Handler interface.\n// Therefore we need a type for which we implement the ServeHTTP method.\n// We just use a map here, in which we map host names (with port) to http.Handlers\ntype HostSwitch map[string]http.Handler\n\n// Implement the ServeHTTP method on our new type\nfunc (hs HostSwitch) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\t// Check if a http.Handler is registered for the given host.\n\t// If yes, use it to handle the request.\n\tif handler := hs[r.Host]; handler != nil {\n\t\thandler.ServeHTTP(w, r)\n\t} else {\n\t\t// Handle host names for which no handler is registered\n\t\thttp.Error(w, \"Forbidden\", 403) // Or Redirect?\n\t}\n}\n\nfunc main() {\n\t// Initialize a router as usual\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\trouter.GET(\"/hello/:name\", Hello)\n\n\t// Make a new HostSwitch and insert the router (our http handler)\n\t// for example.com and port 12345\n\ths := make(HostSwitch)\n\ths[\"example.com:12345\"] = router\n\n\t// Use the HostSwitch to listen and serve on port 12345\n\tlog.Fatal(http.ListenAndServe(\":12345\", hs))\n}\n```\n\n----------------------------------------\n\nTITLE: Serve Static Files with httprouter NotFound Handler (Go)\nDESCRIPTION: This code snippet demonstrates how to serve static files using the `Router.NotFound` handler. It sets the `NotFound` handler to `http.FileServer`, serving files from the specified directory, in this case, the \"public\" directory. It is important to note the potential routing issues and a cleaner approach using a sub-path is recommended.\nSOURCE: https://github.com/julienschmidt/httprouter/blob/master/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Serve static files from the ./public directory\nrouter.NotFound = http.FileServer(http.Dir(\"public\"))\n```"
  }
]