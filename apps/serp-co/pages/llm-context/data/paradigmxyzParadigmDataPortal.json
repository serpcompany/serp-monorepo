[
  {
    "owner": "paradigmxyz",
    "repo": "paradigm-data-portal",
    "content": "TITLE: Installing PDQ CLI Tool\nDESCRIPTION: Command to install the 'paradigm-data-portal' Python package, which provides the 'pdp' CLI tool for managing datasets.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install paradigm-data-portal\n```\n\n----------------------------------------\n\nTITLE: Downloading a Dataset with PDQ CLI\nDESCRIPTION: Command to download a specific dataset from the Paradigm Data Portal using the pdp CLI tool.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npdp download <dataset_name>\n```\n\n----------------------------------------\n\nTITLE: Using pdp CLI to Download Ethereum Contracts Dataset\nDESCRIPTION: Command for downloading all files in the Ethereum Contracts Dataset using the pdp command-line tool. The tool provides options for configuring the download process.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/datasets/ethereum_contracts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npdp download ethereum_contracts\n```\n\n----------------------------------------\n\nTITLE: Listing Available Datasets with PDQ CLI\nDESCRIPTION: Command to list all available datasets in the Paradigm Data Portal using the pdp CLI tool.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npdp ls\n```\n\n----------------------------------------\n\nTITLE: Identifying Uniswap V2 Pool Contracts on Ethereum\nDESCRIPTION: This code snippet shows how to identify all deployed Uniswap V2 pool contracts on Ethereum. It uses the bytecode of an example pool to find all contracts with matching code hash.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nexample_pool = '0xb4e16d0168e52d35cacd2c6185b44281ec28c9dc'\n\nexample_bytecode = await ctc.rpc.async_eth_get_code(example_pool)\nexample_code_hash = ctc.keccak(example_bytecode, output_format='binary')\n\nresult = (\n    pl.scan_parquet(data_path)\n    .filter(pl.col('code_hash') == example_code_hash)\n    .collect(streaming=True)\n)\npl_utils.binary_columns_to_prefix_hex(result)\n```\n\n----------------------------------------\n\nTITLE: Listing Dataset Files with PDQ CLI\nDESCRIPTION: Command to list all files within a specific dataset in the Paradigm Data Portal using the pdp CLI tool.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npdp ls <dataset_name>\n```\n\n----------------------------------------\n\nTITLE: Using pdp CLI Tool to Download Ethereum Slots Dataset\nDESCRIPTION: Command to download all files in the Ethereum Slots dataset using the pdp command line interface tool.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/datasets/ethereum_slots/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npdp download ethereum_slots\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Ethereum Contract Deployment Details\nDESCRIPTION: This snippet demonstrates how to query deployment details for a specific Ethereum contract (DAI in this case). It retrieves information such as deployer, deployment time, and creation transaction.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nDAI = '0x6b175474e89094c44da98b954eedeac495271d0f'\n\nbinary_address = ctc.binary_convert(DAI, 'binary')\n\nresult = (\n    pl.scan_parquet(data_path)\n    .filter(pl.col('contract_address') == binary_address)\n    .collect(streaming=True)\n)\npl_utils.binary_columns_to_prefix_hex(result)\n```\n\n----------------------------------------\n\nTITLE: Viewing PDQ CLI Command Help\nDESCRIPTION: Command to view the help documentation for any pdp CLI command, providing information about available options and usage.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npdp <command> -h\n```\n\n----------------------------------------\n\nTITLE: Identifying Top Ethereum Contract Deployers and Factories\nDESCRIPTION: This function retrieves the top N entities for a given column in the Ethereum contracts dataset. It's used to identify top deployers, factories, and common bytecodes.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef get_top_n(column, n):\n    col = '0x' + (pl.col(column).struct.field(column).bin.encode('hex'))\n    return (\n        pl.scan_parquet(data_path)\n        .select(pl.col(column).value_counts())\n        .select([col.alias(column), pl.col(column).struct.field('counts')])\n        .sort('counts', descending=True)\n        .head(n)\n        .collect(streaming=True)\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Ethereum Contract Data Analysis\nDESCRIPTION: This code sets up the environment for analyzing Ethereum contract data. It configures Polars display settings and defines the path to the Parquet files containing the contract data.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npl_utils.set_column_display_width()\n\ndata_path = '~/pdp/ethereum_contracts/ethereum_contracts__v1_0_0__*.parquet'\ndata_path = os.path.expanduser(data_path)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Ethereum Contract Analysis\nDESCRIPTION: This snippet imports necessary Python libraries for data analysis, visualization, and Ethereum-specific operations. It includes libraries like polars for data processing, ctc for Ethereum interactions, and matplotlib for plotting.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport math\nimport os\nimport shutil\nimport subprocess\n\nimport ctc\nimport ctc.rpc\nfrom ctc.toolbox import pl_utils\nimport polars as pl\nimport matplotlib.pyplot as plt\nimport toolplot\nimport numpy as np\nimport toolstr\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Values in Ethereum Contract Dataset\nDESCRIPTION: This function counts unique values in a specified column of the Ethereum contracts dataset. It uses Polars to efficiently scan and process the Parquet files.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_unique_column_count(column):\n    result = pl.scan_parquet(data_path).select(\n        pl.col(column).n_unique(),\n    ).collect(streaming=True)\n    return result[column][0]\n```\n\n----------------------------------------\n\nTITLE: Counting Total Ethereum Contract Deployments\nDESCRIPTION: This snippet counts the total number of contract deployments in the Ethereum network using the 'create_index' column from the dataset.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresult = pl.scan_parquet(data_path).select(pl.col('create_index').count()).collect()\nn_deployments = result['create_index'][0]\n\nn_deployments\n```\n\n----------------------------------------\n\nTITLE: Analyzing Ethereum Contracts Deployed Multiple Times\nDESCRIPTION: This code calculates the number and percentage of Ethereum contract addresses that have been deployed more than once. It uses Polars for efficient data grouping and filtering.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/notebooks/explore_ethereum_contracts.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nn_deployed_more_than_once = (\n    pl.scan_parquet(data_path)\n    .groupby(pl.col(\"contract_address\"))\n    .agg(pl.count())\n    .filter(pl.col('count') > 1)\n    .select(pl.count())\n    .collect(streaming=True)\n).rows()[0][0]\n\nmore_than_once_percent = toolstr.format(\n    n_deployed_more_than_once / n_unique_contract_addresses,\n    percentage=True,\n    decimals=2,\n)\nprint(more_than_once_percent, 'of contract addresses have been deployed more than once')\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Native Transfers Table\nDESCRIPTION: Database schema defining the structure of the native_transfers table. Each row represents a native token transfer trace with fields for block number, transfer index, transaction hash, addresses, and value.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/datasets/ethereum_native_transfers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| column | type | description |\n| - | - | - |\n| block_number | INTEGER | block number where native token was transfered |\n| transfer_index | INTEGER | increased by 1 for each native transfer in block |\n| transaction_hash | BINARY | hash of transaction that contains transfer |\n| to_address | BINARY | address that native token is transferred to |\n| from_address | BINARY | address that native token is transferred from |\n| value | BINARY | amount of native token transferred |\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to Ethereum Dataset Documentation\nDESCRIPTION: Links to three main Ethereum datasets in the Paradigm Data Portal, including contract deployments, native transfers, and contract storage slots.\nSOURCE: https://github.com/paradigmxyz/paradigm-data-portal/blob/main/datasets/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [`ethereum_contracts`](https://github.com/paradigmxyz/paradigm-data-portal/tree/main/datasets/ethereum_contracts): all historical contract deployments\n- [`ethereum_native_transfers`](https://github.com/paradigmxyz/paradigm-data-portal/tree/main/datasets/ethereum_native_transfers): all native transfers in similar format to ERC20 Transfers (excluding tx fees)\n- [`ethereum_slots`](https://github.com/paradigmxyz/paradigm-data-portal/tree/main/datasets/ethereum_slots): all slots of each contract, including historical usage metadata\n```"
  }
]