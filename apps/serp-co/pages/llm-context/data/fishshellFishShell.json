[
  {
    "owner": "fish-shell",
    "repo": "fish-shell",
    "content": "TITLE: Basic If Statement in Fish\nDESCRIPTION: Shows a basic if statement that checks if a file exists using the test command and then displays its contents if it does.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_15\n\nLANGUAGE: fish\nCODE:\n```\nif test -e /etc/os-release\n    cat /etc/os-release\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements in Fish\nDESCRIPTION: Examples of if/else conditionals and switch statements for flow control.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_11\n\nLANGUAGE: fish\nCODE:\n```\nif grep fish /etc/shells\n    echo Found fish\nelse if grep bash /etc/shells\n    echo Found bash\nelse\n    echo Got nothing\nend\n\nswitch (uname)\ncase Linux\n    echo Hi Tux!\ncase Darwin\n    echo Hi Hexley!\ncase FreeBSD NetBSD DragonFly\n    echo Hi Beastie!\ncase '*'\n    echo Hi, stranger!\nend\n```\n\n----------------------------------------\n\nTITLE: Adding to PATH with fish_add_path in Fish Shell\nDESCRIPTION: Demonstrates using the fish_add_path function to permanently add a directory to PATH by modifying the fish_user_paths universal variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_22\n\nLANGUAGE: fish\nCODE:\n```\n> fish_add_path /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Files with For Loops in Fish Shell\nDESCRIPTION: Demonstrates using a for loop to iterate over a list of text files and create backups of each file.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_15\n\nLANGUAGE: fish\nCODE:\n```\nfor file in *.txt\n    cp $file $file.bak\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Values in Fish Shell\nDESCRIPTION: This snippet demonstrates the basic usage of the for loop in Fish Shell to iterate over a list of values ('foo', 'bar', 'baz') and execute commands (printing each value). It requires no external dependencies. The key parameter is 'VARNAME', which takes each value from 'VALUES' in turn. The loop outputs each value to the console. Note that the variable scope behavior changed in Fish Shell 3.0.0, where 'VARNAME' is now visible after loop termination.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/for.rst#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nfor i in foo bar baz; echo $i; end\n```\n\n----------------------------------------\n\nTITLE: Variable Expansion in Fish Shell\nDESCRIPTION: Shows examples of variable expansion in Fish shell, including using variables in command arguments and string interpolation.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_40\n\nLANGUAGE: fish\nCODE:\n```\nset smurf_color blue\necho Smurfs are usually $smurf_color\nset pants_color red\necho Papa smurf, who is $smurf_color, wears $pants_color pants\n```\n\n----------------------------------------\n\nTITLE: Basic Fish Configuration File Example\nDESCRIPTION: Shows a simple config.fish file that modifies the PATH environment variable and defines a custom 'll' function for listing files with details.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_23\n\nLANGUAGE: fish\nCODE:\n```\n> cat ~/.config/fish/config.fish\n\nset -x PATH $PATH /sbin/\n\nfunction ll\n    ls -lh $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Function Definition in Fish\nDESCRIPTION: Shows how to define and use functions with arguments in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_12\n\nLANGUAGE: fish\nCODE:\n```\nfunction say_hello\n    echo Hello $argv\nend\nsay_hello\n# prints: Hello\nsay_hello everybody!\n# prints: Hello everybody!\n```\n\n----------------------------------------\n\nTITLE: Conditional File Existence Check with Fish if\nDESCRIPTION: This snippet demonstrates how to use the 'if' command in Fish shell along with the 'test' command to check for the existence of files and conditionally print messages based on the outcome. It checks if 'foo.txt' exists and is a regular file, and if not, it checks for 'bar.txt'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/if.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\"if test -f foo.txt\n    echo foo.txt exists\nelse if test -f bar.txt\n    echo bar.txt exists\nelse\n    echo foo.txt and bar.txt do not exist\nend\"\n```\n\n----------------------------------------\n\nTITLE: Using For Loop in Fish Shell\nDESCRIPTION: Shows how to use a for loop to iterate over files in the current directory.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_27\n\nLANGUAGE: fish\nCODE:\n```\nfor file in *\n    echo file: $file\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive User Input Function in Fish Shell\nDESCRIPTION: Defines a function that asks for user confirmation before displaying files. It demonstrates conditionals, reading user input with prompts, and handling terminal state checking.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_64\n\nLANGUAGE: fish\nCODE:\n```\nfunction show_files\n    # This will glob on all arguments. Any non-directories will be ignored.\n    set -l files $argv/*\n\n    # If there are more than 5 files\n    if test (count $files) -gt 5\n        # and both stdin (for reading input)\n        # and stdout (for writing the prompt)\n        # are terminals\n        and isatty stdin\n        and isatty stdout\n        # Keep asking until we get a valid response\n        while read --nchars 1 -l response --prompt-str=\"Are you sure? (y/n)\"\n              or return 1 # if the read was aborted with ctrl-c/ctrl-d\n            switch $response\n                case y Y\n                    echo Okay\n                    # We break out of the while and go on with the function\n                    break\n                case n N\n                    # We return from the function without printing\n                    echo Not showing\n                    return 1\n                case '*'\n                    # We go through the while loop and ask again\n                    echo Not valid input\n                    continue\n            end\n        end\n    end\n\n    # And now we print the files\n    printf '%s\\n' $files\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Universal Variables in Fish Shell\nDESCRIPTION: Demonstrates how to create a universal variable that persists across all Fish instances using set with the -U flag, using EDITOR as an example.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_26\n\nLANGUAGE: fish\nCODE:\n```\n> set -U EDITOR vim\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Fish Shell\nDESCRIPTION: Demonstrates how to set variables in Fish shell with different scopes and export settings using the set command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n# Define $PAGER *g*lobal and e*x*ported\nset -gx PAGER less\n\n# Define $alocalvariable only locally\nset -l alocalvariable foo\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Different Arguments in Fish Shell\nDESCRIPTION: This snippet shows how to call a function with different sets of arguments, demonstrating how positional arguments are accessed within the function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_56\n\nLANGUAGE: fish\nCODE:\n```\n> myfunction first second third\nfirst\nthird\n\n> myfunction apple cucumber banana\napple\nbanana\n```\n\n----------------------------------------\n\nTITLE: Basic Fish Shell Command Execution\nDESCRIPTION: Examples of running basic commands in Fish shell with argument handling and space escaping.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n> echo hello world\n> mkdir My\\ Files\n# Makes a directory called \"My Files\", with a space in the name\n> cp ~/Some\\ File 'My Files'\n# Copies a file called \"Some File\" in the home directory to \"My Files\"\n> ls \"My Files\"\nSome File\n```\n\n----------------------------------------\n\nTITLE: Numeric For Loop Using seq in Fish Shell\nDESCRIPTION: Shows how to create a numeric for loop using the seq command to generate a sequence of numbers.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_29\n\nLANGUAGE: fish\nCODE:\n```\nfor i in (seq 1 5)\n    echo $i\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Exported Variables in Fish\nDESCRIPTION: Examples of setting global exported variables (environment variables) for external programs. These are typically in uppercase and globally accessible across the session.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_47\n\nLANGUAGE: fish\nCODE:\n```\nset -gx ANDROID_HOME ~/.android # /opt/android-sdk\nset -gx CDPATH . ~ (test -e ~/Videos; and echo ~/Videos)\nset -gx EDITOR emacs -nw\nset -gx GOPATH ~/dev/go\nset -gx GTK2_RC_FILES \"$XDG_CONFIG_HOME/gtk-2.0/gtkrc\"\nset -gx LESSHISTFILE \"-\"\n```\n\n----------------------------------------\n\nTITLE: Switch Statement in Fish\nDESCRIPTION: Shows a switch statement that executes different blocks based on the output of uname. Demonstrates pattern matching with wildcards in case statements.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_19\n\nLANGUAGE: fish\nCODE:\n```\nswitch (uname)\ncase Linux\n    echo Hi Tux!\ncase Darwin\n    echo Hi Hexley!\ncase DragonFly '*BSD'\n    echo Hi Beastie! # this also works for FreeBSD and NetBSD\ncase '*'\n    echo Hi, stranger!\nend\n```\n\n----------------------------------------\n\nTITLE: Changing to directories with hyphen names\nDESCRIPTION: The cd command now understands the -- argument to change to directories starting with a hyphen, which would otherwise be interpreted as options.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_57\n\nLANGUAGE: fish\nCODE:\n```\ncd -- -my-directory-with-hyphen\n```\n\n----------------------------------------\n\nTITLE: Creating an Abbreviation in Fish Shell\nDESCRIPTION: Shows how to create an abbreviation that turns 'gco' into 'git checkout' when typed in command position and space or enter is pressed. Abbreviations allow users to type short commands that expand into longer ones.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nabbr -a gco git checkout\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Variables in Fish Shell\nDESCRIPTION: Demonstrates how to set variables with different scopes and use them in Fish shell scripts. Shows global, local, and function-scoped variables.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_39\n\nLANGUAGE: fish\nCODE:\n```\n# This variable is global, we can use it everywhere.\nset --global name Patrick\n# This variable is local, it will not be visible in a function we call from here.\nset --local place \"at the Krusty Krab\"\n\nfunction local\n    # This can find $name, but not $place\n    echo Hello this is $name $place\n\n    # This variable is local, it will not be available\n    # outside of this function\n    set --local instrument mayonnaise\n    echo My favorite instrument is $instrument\n    # This creates a local $name, and won't touch the global one\n    set --local name Spongebob\n    echo My best friend is $name\nend\n\nlocal\n# Will print:\n# Hello this is Patrick\n# My favorite instrument is mayonnaise\n# My best friend is Spongebob\n\necho $name, I am $place and my instrument is $instrument\n# Will print:\n# Patrick, I am at the Krusty Krab and my instrument is\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Function Arguments in Fish Shell\nDESCRIPTION: This snippet demonstrates how to define a function in fish shell that accesses arguments from the $argv list. It shows how to reference specific positions in the argument list and how these arguments are passed when calling the function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_55\n\nLANGUAGE: fish\nCODE:\n```\nfunction myfunction\n    echo $argv[1]\n    echo $argv[3]\nend\n```\n\n----------------------------------------\n\nTITLE: Command Substitution Examples in Fish\nDESCRIPTION: Demonstrates various ways to use command substitution in Fish shell, including basic substitution, filename manipulation and data reading.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_37\n\nLANGUAGE: fish\nCODE:\n```\necho $(basename image.jpg .jpg).png\n\n# Convert all JPEG files in the current directory to the\n# PNG format using the 'convert' program.\nfor i in *.jpg; convert $i (basename $i .jpg).png; end\n\n# Set the ``data`` variable to the contents of 'data.txt'\n# without splitting it into a list.\nset data \"$(cat data.txt)\"\n\n# Set ``$data`` to the contents of data, splitting on NUL-bytes.\nset data (cat data | string split0)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Alias in Fish Shell\nDESCRIPTION: This example demonstrates creating a simple alias 'rmi' for the 'rm' command with the '-i' option. It shows both the alias command and its equivalent function definition.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/alias.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nalias rmi=\"rm -i\"\n\n# This is equivalent to entering the following function:\nfunction rmi --wraps rm --description 'alias rmi=rm -i'\n    rm -i $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Fish Variable Management\nDESCRIPTION: Examples of setting, using and erasing variables in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n> set name 'Mister Noodle'\n> echo $name\nMister Noodle\n> mkdir $name\n> ls\nMister Noodle\n> set -e MyVariable\n> env | grep MyVariable\n```\n\n----------------------------------------\n\nTITLE: Fish Function: mkdir with CWD Change\nDESCRIPTION: Defines a Fish shell function that extends the 'mkdir' command to automatically change the current working directory to the newly created directory. It checks if the 'mkdir' command was successful and then changes the directory using 'cd'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/function.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfunction mkdir -d \"Create a directory and set CWD\"\n    command mkdir $argv\n    if test $status = 0\n        switch $argv[(count $argv)]\n            case '-*'\n\n            case '*'\n                cd $argv[(count $argv)]\n                return\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Redirecting stdout and stderr using shorthand syntax\nDESCRIPTION: New redirections &> and &| can be used to redirect or pipe stdout while also redirecting stderr to stdout.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_50\n\nLANGUAGE: fish\nCODE:\n```\ncommand &> output.txt\ncommand &| less\n```\n\n----------------------------------------\n\nTITLE: Installing Fish Shell on Ubuntu using APT\nDESCRIPTION: This snippet shows the commands to add the Fish shell PPA and install Fish on Ubuntu using apt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-add-repository ppa:fish-shell/release-4\nsudo apt update\nsudo apt install fish\n```\n\n----------------------------------------\n\nTITLE: If Statement with Command Substitution in Fish\nDESCRIPTION: Demonstrates an if statement with a command substitution that checks the output of uname to determine the operating system.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_16\n\nLANGUAGE: fish\nCODE:\n```\nif test \"$(uname)\" = Linux\n    echo I like penguins\nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Accessing Lists in Fish\nDESCRIPTION: Example of creating a list variable and printing its elements. Fish allows creating arrays of strings that can be accessed individually or iterated over.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_48\n\nLANGUAGE: fish\nCODE:\n```\n> set mylist first second third\n> printf '%s\\n' $mylist # prints each element on its own line\nfirst\nsecond\nthird\n```\n\n----------------------------------------\n\nTITLE: Defining fish_prompt Function in Fish Shell\nDESCRIPTION: This snippet shows the basic structure of defining the fish_prompt function. The function is executed when the prompt is to be shown, and its output is used as the prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    ...\nend\n```\n\n----------------------------------------\n\nTITLE: Variable Expansion and Quoting in Fish Shell\nDESCRIPTION: Demonstrates the differences in variable expansion behavior with and without quotes.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_32\n\nLANGUAGE: fish\nCODE:\n```\nset foo 1 2 3 # a variable with three elements\nrm $foo # runs the equivalent of `rm 1 2 3` - trying to delete three files: 1, 2 and 3.\nrm \"$foo\" # runs `rm '1 2 3'` - trying to delete one file called '1 2 3'\n\nset foo # an empty variable\nrm $foo # runs `rm` without arguments\nrm \"$foo\" # runs the equivalent of `rm ''`\n\nset foo \"1 2 3\"\nrm $foo # runs the equivalent of `rm '1 2 3'` - trying to delete one file\nrm \"$foo\" # same thing\n```\n\n----------------------------------------\n\nTITLE: Robust Argument Parsing with argparse in Fish Shell\nDESCRIPTION: This function demonstrates how to use fish's argparse command for robust option handling. It defines short and long form options, handles help flags, and processes arguments differently based on provided options.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_57\n\nLANGUAGE: fish\nCODE:\n```\nfunction mybetterfunction\n    # We tell argparse about -h/--help and -s/--second\n    # - these are short and long forms of the same option.\n    # The \"--\" here is mandatory,\n    # it tells it from where to read the arguments.\n    argparse h/help s/second -- $argv\n    # exit if argparse failed because\n    # it found an option it didn't recognize\n    # - it will print an error\n    or return\n\n    # If -h or --help is given, we print a little help text and return\n    if set -ql _flag_help\n        echo \"mybetterfunction [-h|--help] [-s|--second] [ARGUMENT ...]\"\n        return 0\n    end\n\n    # If -s or --second is given, we print the second argument,\n    # not the first and third.\n    # (this is also available as _flag_s because of the short version)\n    if set -ql _flag_second\n        echo $argv[2]\n    else\n        echo $argv[1]\n        echo $argv[3]\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Prompt in Fish Shell\nDESCRIPTION: This example demonstrates how to create a simple prompt that displays the user, hostname, and current directory. It uses built-in variables and functions to format the prompt with colors.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt -d \"Write out the prompt\"\n    # This shows up as USER@HOST /home/user/ >, with the directory colored\n    # $USER and $hostname are set by fish, so you can just use them\n    # instead of using `whoami` and `hostname`\n    printf '%s@%s %s%s%s > ' $USER $hostname \\\n        (set_color $fish_color_cwd) (prompt_pwd) (set_color normal)\nend\n```\n\n----------------------------------------\n\nTITLE: Function for Printing Variable Contents in Fish Shell\nDESCRIPTION: Demonstrates a function that takes variable names as arguments and prints their contents using dereferencing.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_34\n\nLANGUAGE: fish\nCODE:\n```\nfunction print_var\n    for arg in $argv\n        echo Variable $arg is $$arg\n    end\nend\n\nset -g foo 1 2 3\nset -g bar a b c\n\nprint_var foo bar\n```\n\n----------------------------------------\n\nTITLE: Fish Function with Argument Handling\nDESCRIPTION: Creates a 'debug' function in Fish shell that accepts a name and value as arguments and prints them to stderr. This function demonstrates the use of '-a' or '--argument-names' to assign command-line arguments to variables. Also, demonstrates another way to print chosen variables to stderr.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/function.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction debug -a name val\n    echo [DEBUG] $name: $val >&2\nend\n\nset foo bar\ndebug foo bar\n# prints: [DEBUG] foo: bar\n\n# OR\n\nfunction debug2 -a var\n    echo [DEBUG] $var: $$var >&2\nend\n\nset foo bar\ndebug2 foo\n# prints: [DEBUG] foo: bar\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables in Fish Shell\nDESCRIPTION: Examples of using the 'export' command to set and export environment variables in Fish shell. It demonstrates setting the PAGER variable and shows how to properly add to the PATH variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/export.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nset -gx PAGER bat\nexport PAGER=bat\n```\n\nLANGUAGE: fish\nCODE:\n```\nexport PATH=\"$PATH:/opt/bin\"\n```\n\nLANGUAGE: fish\nCODE:\n```\nset -gx PATH $PATH /opt/bin\n```\n\n----------------------------------------\n\nTITLE: Alias Function Definition\nDESCRIPTION: Example of creating an alias function for the ls command with color support.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_10\n\nLANGUAGE: fish\nCODE:\n```\nfunction ls\n    command ls --color=auto $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Pipe and Redirection Operations\nDESCRIPTION: Examples of using pipes and redirections for input/output handling in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\n> echo hello world | wc\n\n> grep fish < /etc/shells > ~/output.txt 2> ~/errors.txt\n\n> make &> make_output.txt\n```\n\n----------------------------------------\n\nTITLE: Using And/Or Combiners in Fish\nDESCRIPTION: Demonstrates the use of 'and' and 'or' combiners to create conditional logic. The example sets a configuration directory based on whether an environment variable exists.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_20\n\nLANGUAGE: fish\nCODE:\n```\n# $XDG_CONFIG_HOME is a standard place to store configuration.\n# If it's not set applications should use ~/.config.\nset -q XDG_CONFIG_HOME; and set -l configdir $XDG_CONFIG_HOME\nor set -l configdir ~/.config\n```\n\n----------------------------------------\n\nTITLE: Appending a Value to a Variable in Fish Shell\nDESCRIPTION: This command appends the value 'there' to the existing values of the variable 'foo'. The '-a' option is used with 'set' to append values.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> set -a foo there\n```\n\n----------------------------------------\n\nTITLE: Path Variable List Manipulation in Fish\nDESCRIPTION: Demonstrates basic list operations using the $PATH variable, including accessing elements, counting length, and appending values.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n> echo $PATH\n/usr/bin /bin /usr/sbin /sbin /usr/local/bin\n\n> count $PATH\n5\n\n> set PATH $PATH /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Pipe Usage in Fish Shell\nDESCRIPTION: Examples of using pipes to connect command outputs with inputs, including error redirection to less.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\ncat foo.txt | head\n\nmake fish 2>| less\n```\n\n----------------------------------------\n\nTITLE: List Indexing and Slicing in Fish\nDESCRIPTION: Shows how to access individual elements and ranges in lists using index notation, including negative indices.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\n> echo $PATH[1]\n/usr/bin\n> echo $PATH[-1]\n/usr/local/bin\n\n> echo $PATH[1..2]\n/usr/bin /bin\n> echo $PATH[-1..2]\n/usr/local/bin /sbin /usr/sbin /bin\n```\n\n----------------------------------------\n\nTITLE: If Statement with Multiple Conditions in Fish\nDESCRIPTION: Shows an if statement with multiple 'else if' conditions and a final 'else' clause, comparing a number against different thresholds.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_17\n\nLANGUAGE: fish\nCODE:\n```\nif test \"$number\" -gt 10\n   echo Your number was greater than 10\nelse if test \"$number\" -gt 5\n   echo Your number was greater than 5\nelse if test \"$number\" -gt 1\n   echo Your number was greater than 1\nelse\n   echo Your number was smaller or equal to 1\nend\n```\n\n----------------------------------------\n\nTITLE: Variable Dereferencing in Fish Shell\nDESCRIPTION: Shows how to use multiple $ symbols for variable dereferencing and loops through dereferenced variables.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_33\n\nLANGUAGE: fish\nCODE:\n```\nset foo a b c\nset a 10; set b 20; set c 30\nfor i in (seq (count $$foo))\n    echo $$foo[$i]\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fish Function using alias\nDESCRIPTION: Shows how to create a simple function using the alias command in Fish shell, which creates a function immediately. This also mentions saving the alias permanently using alias --save or funcsave.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_11\n\nLANGUAGE: fish\nCODE:\n```\nalias --save\n```\n\n----------------------------------------\n\nTITLE: Modifying PATH Variable in Fish Shell\nDESCRIPTION: Shows how to prepend directories to the PATH environment variable in Fish shell, treating it as a list rather than a string.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_19\n\nLANGUAGE: fish\nCODE:\n```\n> set PATH /usr/local/bin /usr/sbin $PATH\n```\n\n----------------------------------------\n\nTITLE: Creating Autoloaded Functions in Fish Shell\nDESCRIPTION: Example of defining a custom 'll' function in a dedicated file for autoloading, which is the preferred way to organize functions in Fish.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_24\n\nLANGUAGE: fish\nCODE:\n```\n> cat ~/.config/fish/functions/ll.fish\nfunction ll\n    ls -lh $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Running Commands with fish Shell\nDESCRIPTION: Execute specified commands in the fish shell environment using the -c option. This is helpful for running standalone commands or scripts inline with additional arguments provided as $argv.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfish -c 'echo Hi there!'\n```\n\n----------------------------------------\n\nTITLE: Wildcard Pattern Matching\nDESCRIPTION: Examples of using wildcards for file matching, including basic and recursive patterns.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\n> ls *.jpg\nlena.jpg\nmeena.jpg\nsanta maria.jpg\n\n> ls l*.p*\nlena.png\nlesson.pdf\n\n> ls /var/**.log\n/var/log/system.log\n/var/run/sntp.log\n```\n\n----------------------------------------\n\nTITLE: Fish Function Definition\nDESCRIPTION: Defines a simple Fish shell function named 'll' that executes the 'ls -l' command with any provided arguments. This allows for a shorthand command to list files in long format.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/function.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction ll\n    ls -l $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Setting a Variable Value in Fish Shell\nDESCRIPTION: This command sets the value of the variable 'foo' to 'hi'. The 'set' command followed by a variable name and value assigns the specified value to the variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> set foo hi\n```\n\n----------------------------------------\n\nTITLE: Using range expansion in Fish arrays\nDESCRIPTION: Demonstrates the range expansion syntax in Fish 3.2.0+ where range limits in index expansions can be omitted, defaulting to 1 and -1 respectively.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_36\n\nLANGUAGE: fish\nCODE:\n```\necho $var[1..]\necho $var[..-1]\necho $var[..]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Lists with Fish Commands\nDESCRIPTION: Examples of using count and contains commands to inspect fish lists, including checking the number of elements and searching for specific values.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_52\n\nLANGUAGE: fish\nCODE:\n```\n> count $smurf\n2\n\n> contains blue $smurf\n# blue was found, so it exits with status 0\n# (without printing anything)\n\n> echo $status\n0\n\n> contains -i blue $smurf\n1\n```\n\n----------------------------------------\n\nTITLE: Exit Status Checking in Fish\nDESCRIPTION: Shows how to check command exit status using the $status variable and conditional statements.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\nsomecommand\nif test $status -eq 7\n    echo \"That's my lucky number!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Lists in Fish\nDESCRIPTION: Example of using a for loop to iterate over each element in the PATH variable list, demonstrating how to process list elements individually.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_54\n\nLANGUAGE: fish\nCODE:\n```\nfor i in $PATH\n    echo $i is in the path\nend\n```\n\n----------------------------------------\n\nTITLE: Command Substitution Syntax\nDESCRIPTION: Demonstrates different ways to perform command substitution in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_10\n\nLANGUAGE: fish\nCODE:\n```\n> echo In (pwd), running $(uname)\nIn /home/tutorial, running FreeBSD\n\n> set os (uname)\n> echo $os\nLinux\n```\n\n----------------------------------------\n\nTITLE: Comparing Control Structures in Bash and Fish\nDESCRIPTION: This snippet demonstrates how various control structures (loops, conditionals, functions) differ between Bash and Fish shell syntax. Fish uses a cleaner syntax with 'end' terminators instead of Bash's 'done', 'fi', etc.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfor i in 1 2 3; do\n   echo $i\ndone\n```\n\nLANGUAGE: fish\nCODE:\n```\nfor i in 1 2 3\n   echo $i\nend\n```\n\nLANGUAGE: bash\nCODE:\n```\nwhile true; do\n   echo Weeee\ndone\n```\n\nLANGUAGE: fish\nCODE:\n```\nwhile true\n   echo Weeeeeee\nend\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n   echo Hello\n}\n```\n\nLANGUAGE: fish\nCODE:\n```\nbegin\n   echo Hello\nend\n```\n\nLANGUAGE: bash\nCODE:\n```\nif true; then\n   echo Yes I am true\nelse\n   echo \"How is true not true?\"\nfi\n```\n\nLANGUAGE: fish\nCODE:\n```\nif true\n   echo Yes I am true\nelse\n   echo \"How is true not true?\"\nend\n```\n\nLANGUAGE: bash\nCODE:\n```\nfoo() {\n   echo foo\n}\n```\n\nLANGUAGE: fish\nCODE:\n```\nfunction foo\n    echo foo\nend\n```\n\n----------------------------------------\n\nTITLE: Switch Statement Animal Classification Example in Fish\nDESCRIPTION: Example demonstrating how to use switch/case statements in Fish shell to classify different animals into categories. Shows pattern matching with multiple values per case and default case handling.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/switch.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nswitch $animal\n    case cat\n        echo evil\n    case wolf dog human moose dolphin whale\n        echo mammal\n    case duck goose albatross\n        echo bird\n    case shark trout stingray\n        echo fish\n    case '*'\n        echo I have no idea what a $animal is\nend\n```\n\n----------------------------------------\n\nTITLE: Example Usage of String Split in Fish Shell\nDESCRIPTION: Examples demonstrating how to use the `string split` command to separate strings and extract fields based on a delimiter. This includes practical command-line examples that show the flexibility of the command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-split.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n>_ string split . example.com\nexample\ncom\n```\n\nLANGUAGE: fish\nCODE:\n```\n>_ string split -r -m1 / /usr/local/bin/fish\n/usr/local/bin\nfish\n```\n\nLANGUAGE: fish\nCODE:\n```\n>_ string split '' abc\na\nb\nc\n```\n\nLANGUAGE: fish\nCODE:\n```\n>_ string split --allow-empty -f1,3-4,5 '' abcd\na\nc\nd\n```\n\n----------------------------------------\n\nTITLE: Executing Switch-Case Statement in Fish Shell\nDESCRIPTION: This snippet demonstrates how to use the switch-case structure in fish shell to classify animals based on their type. It shows various case patterns including exact matches, multiple values, and wildcards.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/case.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nswitch $animal\n    case cat\n        echo evil\n    case wolf dog human moose dolphin whale\n        echo mammal\n    case duck goose albatross\n        echo bird\n    case shark trout stingray\n        echo fish\n    # Note that the next case has a wildcard which is quoted\n    case '*'\n        echo I have no idea what a $animal is\nend\n```\n\n----------------------------------------\n\nTITLE: Using read with list option\nDESCRIPTION: The read command supports --list to read all arguments into a list inside a single variable, similar to --array but with a more descriptive name.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_62\n\nLANGUAGE: fish\nCODE:\n```\nread --list my_list < file.txt\n```\n\n----------------------------------------\n\nTITLE: String Manipulation in Fish\nDESCRIPTION: Examples of string manipulation operations in Fish using the string builtin command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nstring replace bar baz \"bar luhrmann\"\nstring split \",\" \"foo,bar\"\necho bababa | string match -r 'aba$'\nstring pad -c x -w 20 \"foo\"\nstring lower Foo\nstring upper Foo\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments with `argparse`\nDESCRIPTION: This snippet shows a basic usage of the `argparse` command to parse command-line arguments. It defines one option, `--num`, which requires an integer value between 0 and 99. The `_validate_int` function is assumed to be defined elsewhere to validate the integer input.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/argparse.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nargparse 'n/num=!_validate_int --min 0 --max 99' -- --num 42\n```\n\n----------------------------------------\n\nTITLE: Passing Lists as Command Arguments in Fish\nDESCRIPTION: Example of creating a list variable to store command arguments and passing it to a command, showing how each element becomes a separate argument.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_53\n\nLANGUAGE: fish\nCODE:\n```\nset -l grep_args -r \"my string\"\ngrep $grep_args . # will run the same as `grep -r \"my string\"` .\n```\n\n----------------------------------------\n\nTITLE: Checking Command Type in Fish Shell\nDESCRIPTION: Demonstrates how to use the 'type' command to see how Fish resolves a command, showing both the builtin and external executable paths.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_63\n\nLANGUAGE: fish\nCODE:\n```\n> type --short --all echo\necho is a builtin\necho is /usr/bin/echo\n```\n\n----------------------------------------\n\nTITLE: Using fish_add_path to add directories to PATH\nDESCRIPTION: Demonstrates the fish_add_path helper function that adds paths to $PATH without creating duplicates, useful in config.fish or for interactive use.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_34\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path /opt/mycoolthing/bin\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Directory Navigation Abbreviation in Fish Shell\nDESCRIPTION: Demonstrates creating a function and regex-based abbreviation for navigating up multiple directories. This allows '..' to expand to 'cd ../', '...' to 'cd ../../', and so on based on the number of dots entered.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nfunction multicd\n    echo cd (string repeat -n (math (string length -- $argv[1]) - 1) ../)\nend\nabbr --add dotdot --regex '^\\.\\.+$' --function multicd\n```\n\n----------------------------------------\n\nTITLE: List Iteration with For Loop\nDESCRIPTION: Example of iterating over list elements using a for loop in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\nfor val in $PATH\n  echo \"entry: $val\"\nend\n# Will print:\n# entry: /usr/bin/\n# entry: /bin\n# entry: /usr/sbin\n# entry: /sbin\n# entry: /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Basic File Redirection in Fish\nDESCRIPTION: Example showing redirection of standard error to a file and conditional number testing with error suppression.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfoo 2> output.stderr\n\nif test \"$num\" -gt 2 2>/dev/null\n    # do things with $num as a number greater than 2\nelse\n    # do things if $num is <= 2 or not a number\nend\n```\n\n----------------------------------------\n\nTITLE: Function Definition Examples\nDESCRIPTION: Examples of defining functions in Fish, including a directory listing alias and custom prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\nfunction ll\n    ls -l $argv\nend\n\nfunction fish_prompt\n    set -l user_char '►'\n    if fish_is_root_user\n        set user_char '#'\n    end\n    echo (set_color yellow)$PWD (set_color purple)$user_char\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Executing Commands with and in Shell\nDESCRIPTION: This snippet demonstrates the use of the 'and' command in a shell environment to conditionally execute subsequent commands. The 'make; and make install; or make clean' sequence runs 'make' to build a program, and if successful, installs it with 'make install'. If any step fails, 'make clean' is executed to clean up build files. Dependencies include a shell environment that supports this syntax, such as the fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/and.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake; and make install; or make clean\n```\n\n----------------------------------------\n\nTITLE: String Command Synopsis in Fish Shell\nDESCRIPTION: Complete synopsis of all available string manipulation commands in Fish shell, showing the various subcommands and their options.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nstring collect [-a | --allow-empty] [-N | --no-trim-newlines] [STRING ...]\nstring escape [-n | --no-quoted] [--style=] [STRING ...]\nstring join [-q | --quiet] [-n | --no-empty] SEP [STRING ...]\nstring join0 [-q | --quiet] [STRING ...]\nstring length [-q | --quiet] [STRING ...]\nstring lower [-q | --quiet] [STRING ...]\nstring match [-a | --all] [-e | --entire] [-i | --ignore-case] [-g | --groups-only] [-r | --regex] [-n | --index] [-q | --quiet] [-v | --invert] PATTERN [STRING ...]\nstring pad [-r | --right] [(-c | --char) CHAR] [(-w | --width) INTEGER] [STRING ...]\nstring repeat [(-n | --count) COUNT] [(-m | --max) MAX] [-N | --no-newline] [-q | --quiet] [STRING ...]\nstring replace [-a | --all] [-f | --filter] [-i | --ignore-case] [-r | --regex] [-q | --quiet] PATTERN REPLACE [STRING ...]\nstring split [(-f | --fields) FIELDS] [(-m | --max) MAX] [-n | --no-empty] [-q | --quiet] [-r | --right] SEP [STRING ...]\nstring split0 [(-f | --fields) FIELDS] [(-m | --max) MAX] [-n | --no-empty] [-q | --quiet] [-r | --right] [STRING ...]\nstring sub [(-s | --start) START] [(-e | --end) END] [(-l | --length) LENGTH] [-q | --quiet] [STRING ...]\nstring trim [-l | --left] [-r | --right] [(-c | --chars) CHARS] [-q | --quiet] [STRING ...]\nstring unescape [--style=] [STRING ...]\nstring upper [-q | --quiet] [STRING ...]\n```\n\n----------------------------------------\n\nTITLE: Conditional File Existence Check in Fish Shell\nDESCRIPTION: This snippet demonstrates how to use the 'if-else' statement in Fish shell to check if a file exists and print an appropriate message.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/else.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nif test -f foo.txt\n    echo foo.txt exists\nelse\n    echo foo.txt does not exist\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Key Binding in Fish Shell\nDESCRIPTION: This snippet demonstrates how to define a custom key binding in Fish shell using the 'bind' command. It binds Ctrl+C to cancel the current command line and print a new prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_13\n\nLANGUAGE: fish\nCODE:\n```\n# Prints ``^C`` and a new prompt\nbind ctrl-c cancel-commandline\n```\n\n----------------------------------------\n\nTITLE: Exporting List Variables in Fish\nDESCRIPTION: Examples showing how lists are exported as environment variables, with PATH variables using colon delimiters and regular variables using spaces.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_51\n\nLANGUAGE: fish\nCODE:\n```\n> set -x smurf blue small\n> set -x smurf_PATH forest mushroom\n> env | grep smurf\nsmurf=blue small\nsmurf_PATH=forest:mushroom\n```\n\n----------------------------------------\n\nTITLE: Modifying Lists in Fish\nDESCRIPTION: Example of creating, modifying, and erasing elements in a list variable. Shows how to change individual elements and remove specific items.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_50\n\nLANGUAGE: fish\nCODE:\n```\n# Set smurf to be a list with the elements 'blue' and 'small'\nset smurf blue small\n\n# Change the second element of smurf to 'evil'\nset smurf[2] evil\n\n# Erase the first element\nset -e smurf[1]\n\n# Output 'evil'\necho $smurf\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fish Greeting Function\nDESCRIPTION: Shows how to create a custom fish_greeting function that randomly selects and displays one of several greeting messages when Fish shell starts.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_greeting\n    random choice \"Hello!\" \"Hi\" \"G'day\" \"Howdy\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Prompt Function in Fish Shell\nDESCRIPTION: Example of creating a simple custom prompt function in Fish shell from the command line, which can be saved with 'funcsave'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_17\n\nLANGUAGE: fish\nCODE:\n```\n> function fish_prompt; echo \"New Prompt % \"; end\nNew Prompt % _\n```\n\n----------------------------------------\n\nTITLE: Enabling Vi Key Bindings and Rebinding Ctrl-C in Fish\nDESCRIPTION: This snippet demonstrates how to enable Vi key bindings and rebind Ctrl-C to clear the input line in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_key_bindings fish_vi_key_bindings\nbind -M insert ctrl-c kill-whole-line repaint\n```\n\n----------------------------------------\n\nTITLE: Basic Command Argument Completion in Fish\nDESCRIPTION: Example showing how to define completions for a command that accepts start/stop arguments with dynamic output list\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/completions.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n# If myprog can list the valid outputs with the list-outputs subcommand:\ncomplete -c myprog -l output -a '(myprog list-outputs)'\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Prompt Configuration\nDESCRIPTION: Example of creating a custom prompt in Fish shell using the fish_prompt function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    set -l prompt_symbol '$'\n    fish_is_root_user; and set prompt_symbol '#'\n\n    echo -s (prompt_hostname) \\\n    (set_color blue) (prompt_pwd) \\\n    (set_color yellow) $prompt_symbol (set_color normal)\nend\n```\n\n----------------------------------------\n\nTITLE: Variables as Commands in Fish Shell\nDESCRIPTION: Shows how variables can be used as commands in Fish shell, including handling of arguments and command execution.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_36\n\nLANGUAGE: fish\nCODE:\n```\nset -g EDITOR emacs\n$EDITOR foo # opens emacs, possibly the GUI version\n\nset EDITOR emacs -nw\n$EDITOR foo # opens emacs in the terminal even if the GUI is installed\nset EDITOR \"emacs -nw\"\n$EDITOR foo # tries to find a command called \"emacs -nw\"\n```\n\n----------------------------------------\n\nTITLE: Testing Directory Existence in Fish\nDESCRIPTION: Example showing how to check if a directory exists and perform an action based on the result\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/test.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nif test -d /tmp\n    cp /etc/motd /tmp/motd\nend\n```\n\n----------------------------------------\n\nTITLE: Getting Help in Fish Shell\nDESCRIPTION: Demonstrates how to access Fish shell's built-in help system and documentation.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n> man set\nset - handle shell variables\n  Synopsis...\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables in Fish Config\nDESCRIPTION: Examples of setting global variables in config.fish to customize fish shell behavior. This includes directory length in prompt, cursor style settings, and language preferences.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_42\n\nLANGUAGE: fish\nCODE:\n```\n# Don't shorten the working directory in the prompt\nset -g fish_prompt_pwd_dir_length 0\n\n# Set my preferred cursor style:\nfunction setcursors\n   set -g fish_cursor_default block\n   set -g fish_cursor_insert line\n   set -g fish_cursor_visual underscore\nend\n\n# Set my language\nset -gx LANG de_DE.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Variable List Access Examples in Fish\nDESCRIPTION: Examples demonstrating how to access and manipulate list variables in Fish shell, showing basic variable expansion and list indexing.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_35\n\nLANGUAGE: fish\nCODE:\n```\nset listone 1 2 3\nset listtwo 4 5 6\nset var listone listtwo\n\necho $$var\n# Output is 1 2 3 4 5 6\n\necho $$var[1]\n# Output is 1 2 3\n\necho $$var[2][3]\n# $var[1] is listtwo, third element of that is 6, output is 6\n\necho $$var[..][2]\n# The second element of every variable, so output is\n# 2 5\n```\n\n----------------------------------------\n\nTITLE: If Statement with Not Keyword in Fish\nDESCRIPTION: Demonstrates the use of the 'not' keyword to invert the status of a command. The example uses grep to search for a string and inverts its result.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_18\n\nLANGUAGE: fish\nCODE:\n```\n# Check if the file contains the string \"fish\" anywhere.\n# This executes the `grep` command, which searches for a string,\n# and if it finds it returns a status of 0.\n# The `not` then turns 0 into 1 or anything else into 0.\n# The `-q` switch stops it from printing any matches.\nif not grep -q fish myanimals\n    echo \"You don't have fish!\"\nelse\n    echo \"You have fish!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Managing Themes in Fish Shell\nDESCRIPTION: 'fish_config theme' facilitates theme management in the Fish shell terminal. Subcommands like 'choose', 'demo', 'dump', 'list', 'save', and 'show' allow users to select, display, save, and showcase theme options effectively.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_config.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfish_config theme (choose | demo | dump | list | save | show)\n```\n\n----------------------------------------\n\nTITLE: Using the argparse Function with Options in Fish Shell\nDESCRIPTION: This example shows how to call a function that uses argparse for option handling, demonstrating how options like -s affect the function's behavior and are removed from the $argv array.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_58\n\nLANGUAGE: fish\nCODE:\n```\n> mybetterfunction first -s second third\nsecond\n```\n\n----------------------------------------\n\nTITLE: Accessing List Elements and Using Negative Indices in Fish\nDESCRIPTION: Examples showing how to access list elements by index, use negative indices to access elements from the end, and use index ranges to slice lists.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_49\n\nLANGUAGE: fish\nCODE:\n```\n> set fruit apple orange banana\n> echo $fruit[-1]\nbanana\n\n> echo $fruit[-2..-1]\norange\nbanana\n\n> echo $fruit[-1..1] # reverses the list\nbanana\norange\napple\n```\n\n----------------------------------------\n\nTITLE: Brace Expansion in Fish Shell\nDESCRIPTION: Shows how to use brace expansion for generating multiple arguments and combining with variables in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_38\n\nLANGUAGE: fish\nCODE:\n```\necho input.{c,h,txt}\n\n# Move all files with the suffix '.c' or '.h' to the subdirectory src.\nmv *.{c,h} src/\n\n# Make a copy of `file` at `file.bak`.\ncp file{,.bak}\n\nset -l dogs hot cool cute \"good \"\necho {$dogs}dog\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with Delimiters in Fish Shell\nDESCRIPTION: The `string split` command splits strings based on a specified delimiter. It allows for options to control the number of splits, behavior on empty strings, and right-to-left splitting. This command is useful for processing text data directly in shell scripts.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-split.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nstring split [(-f | --fields) FIELDS] [(-m | --max) MAX] [-n | --no-empty] [-q | --quiet] [-r | --right] SEP [STRING ...]\n```\n\nLANGUAGE: fish\nCODE:\n```\nstring split0 [(-f | --fields) FIELDS] [(-m | --max) MAX] [-n | --no-empty] [-q | --quiet] [-r | --right] [STRING ...]\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Definition Status\nDESCRIPTION: Code examples showing how to check if variables are defined using set -q and combining checks with and/or operators\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nif set -q var1; or set -q var2\n    echo either variable defined\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handler Example\nDESCRIPTION: Demonstration of creating and using custom events with handler and generator functions.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_70\n\nLANGUAGE: fish\nCODE:\n```\nfunction handler --on-event imdone\n    echo generator is done $argv\nend\n\nfunction generator\n    sleep 1\n    emit imdone with $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying an Element in a List Variable in Fish Shell\nDESCRIPTION: The fourth element of the 'PATH' list is changed to '~/bin' using index-based assignment with 'set'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n> set PATH[4] ~/bin\n```\n\n----------------------------------------\n\nTITLE: Basic Regex Pattern Examples in Fish Shell\nDESCRIPTION: Demonstrates basic regex pattern anchors used in Fish Shell string operations. The caret (^) represents the start of a string/line, and the dollar sign ($) represents the end. The pipe symbol (|) represents alternation (OR operation).\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n^ # Start of string/line\n$ # End of string/line\n| # Alternation (OR)\n```\n\n----------------------------------------\n\nTITLE: Setting Universal Variables in Fish Shell\nDESCRIPTION: Example of setting a universal variable for personal customization which persists across sessions and shell restarts. Universal variables are stored by fish automatically.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_43\n\nLANGUAGE: fish\nCODE:\n```\n# Typically you'd run this interactively, fish takes care of keeping it.\nset -U fish_color_autosuggestion 555\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Empty Variables in Fish\nDESCRIPTION: Example demonstrating how to check if a variable is defined and non-empty\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/test.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nif test -n \"$MANPATH\"\n    echo $MANPATH\nend\n```\n\n----------------------------------------\n\nTITLE: String Replace All Occurrences in Fish\nDESCRIPTION: This snippet demonstrates replacing all occurrences of a space with an underscore using the `-a` flag.  The input string is \"spaces to underscores\".\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-replace.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string replace -a ' ' _ 'spaces to underscores'\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding an Abbreviation in fish-shell\nDESCRIPTION: This snippet illustrates how to create a new command abbreviation using the 'abbr --add' command syntax. The abbreviation can replace a literal phrase or be defined with specific options such as positioning and regex matching.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/abbr.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nabbr --add gco git checkout\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr -a --position anywhere -- -C --color\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr -a L --position anywhere --set-cursor \"% | less\"\n```\n\nLANGUAGE: fish\nCODE:\n```\nfunction last_history_item\n    echo $history[1]\nend\nabbr -a !! --position anywhere --function last_history_item\n```\n\nLANGUAGE: fish\nCODE:\n```\nfunction vim_edit\n    echo vim $argv\nend\nabbr -a vim_edit_texts --position command --regex \".+\\.txt\" --function vim_edit\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr 4DIRS --set-cursor=! \"$(string join \\n -- 'for dir in */' 'cd $dir' '!' 'cd ..' 'end')\"\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr --command git co checkout\n```\n\n----------------------------------------\n\nTITLE: String Split with No Empty Option\nDESCRIPTION: Example of string split command with the new --no-empty option to exclude empty strings.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_73\n\nLANGUAGE: fish\nCODE:\n```\nstring split --no-empty\n```\n\n----------------------------------------\n\nTITLE: Advanced For Loop with Expansions in Fish Shell\nDESCRIPTION: Demonstrates a for loop using variable expansion and brace expansion to iterate over a list of animals.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_28\n\nLANGUAGE: fish\nCODE:\n```\nset moreanimals bird fox\nfor animal in {cat,}fish dog $moreanimals\n   echo I like the $animal\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Path of a Command with Fish Shell\nDESCRIPTION: This code checks if 'type -p' returns a path for 'python' and sets 'python_path' accordingly. It then echoes the path if set.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nif set python_path (type -p python)\n    echo \"Python is at $python_path\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Continue in a For Loop with Conditional Statement (Fish)\nDESCRIPTION: This snippet demonstrates how to use the 'continue' command within a for loop in Fish shell. It processes .tmp files, skipping those containing the word 'smurf' and removing the rest.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/continue.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfor i in *.tmp\n    if grep smurf $i\n        continue\n    end\n    # This \"rm\" is skipped over if \"continue\" is executed.\n    rm $i\n    # As is this \"echo\"\n    echo $i\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Username Completion for the 'su' Command in Fish\nDESCRIPTION: This snippet demonstrates how to set up username completion for the 'su' command by extracting usernames from the /etc/passwd file.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/complete.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\ncomplete -x -c su -d \"Username\" -a \"(cat /etc/passwd | cut -d : -f 1)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Paths with Global Scope\nDESCRIPTION: Adding multiple directories using global fish_user_paths, which requires manual saving to config.fish\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_add_path.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path -g ~/.local/bin ~/.otherbin /usr/local/sbin\n```\n\n----------------------------------------\n\nTITLE: Testing Unquoted Variables in Fish\nDESCRIPTION: Example showing potential issues with unquoted variables in test expressions\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/test.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nif test -n $MANPATH\n    # This will also be reached if $MANPATH is unset,\n    # because in that case we have `test -n`, so it checks if \"-n\" is non-empty, and it is.\n    echo $MANPATH\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Key Binding Syntax in fish\nDESCRIPTION: Shows the basic syntax for binding keys to commands in fish shell. Includes options for mode selection and mode switching.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nbind [(-M | --mode) MODE] [(-m | --sets-mode) NEW_MODE] [--preset | --user] [-s | --silent] KEYS COMMAND\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loop in Fish Shell\nDESCRIPTION: Demonstrates a basic while loop in Fish shell that prints 'Still running' every second until interrupted.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_26\n\nLANGUAGE: fish\nCODE:\n```\nwhile true\n    echo Still running\n    sleep 1\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Fish to System Shells\nDESCRIPTION: Commands to add Fish shell to the system's available shells list and set it as the default shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n> echo /usr/local/bin/fish | sudo tee -a /etc/shells\n> chsh -s /usr/local/bin/fish\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Conditional Statement with Command Substitution\nDESCRIPTION: Example of using command substitution with the 'set' command in a conditional statement. The pattern demonstrates how command substitution now modifies $status, allowing for concise conditional logic.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_78\n\nLANGUAGE: fish\nCODE:\n```\nif set python_path (which python)\n   ...\nend\n```\n\n----------------------------------------\n\nTITLE: Erasing a Variable in Fish Shell\nDESCRIPTION: The command removes the variable 'smurf' from its current scope using the '-e' option with 'set'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> set -e smurf\n```\n\n----------------------------------------\n\nTITLE: Checking for Non-Empty Variables\nDESCRIPTION: Methods to check if variables contain non-empty values using string length and test commands\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nif string length -q -- $var1 $var2 $var3\n    echo at least one of these variables is not empty\nend\n\nif test -n \"$var1\" -o -n \"$var2\" -o -n \"$var3\"\n    echo at least one of these variables is not empty\nend\n```\n\n----------------------------------------\n\nTITLE: String Matching with Regex\nDESCRIPTION: Demonstrates string matching using regular expressions.  Regular expressions do not have to match the entire string. Examples showcase matching specific patterns, inverting matches, using capturing groups, and setting variables based on named capture groups.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-match.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\n    >_ string match -r 'cat|dog|fish' 'nice dog'\n    dog\n\n    >_ string match -r -v \"c.*[12]\" {cat,dog}(seq 1 4)\n    dog1\n    dog2\n    cat3\n    dog3\n    cat4\n    dog4\n\n    >_ string match -r -- '-.*' -h foo --version bar\n    # To match things that look like options, we need a `--`\n    # to tell string its options end there.\n    -h\n    --version\n\n    >_ string match -r '(\\d\\d?):(\\d\\d):(\\d\\d)' 2:34:56\n    2:34:56\n    2\n    34\n    56\n\n    >_ string match -r '^(\\w{2,4})\\1$' papa mud murmur\n    papa\n    pa\n    murmur\n    mur\n\n    >_ string match -r -a -n at ratatat\n    2 2\n    4 2\n    6 2\n\n    >_ string match -r -i '0x[0-9a-f]{1,8}' 'int magic = 0xBadC0de;'\n    0xBadC0de\n\n    >_ echo $version\n    3.1.2-1575-ga2ff32d90\n    >_ string match -rq '(?<major>\\d+).(?<minor>\\d+).(?<revision>\\d+)' -- $version\n    >_ echo \"You are using fish $major!\"\n    You are using fish 3!\n\n    >_ string match -raq ' *(?<sentence>[^.!?]+)(?<punctuation>[.!?])?' \"hello, friend. goodbye\"\n    >_ printf \"%s\\n\" -- $sentence\n    hello, friend\n    goodbye\n    >_ printf \"%s\\n\" -- $punctuation\n    .\n\n    >_ string match -rq '(?<word>hello)' 'hi'\n    >_ count $word\n    0\n\n```\n\n----------------------------------------\n\nTITLE: Managing Abbreviation Commands in fish-shell\nDESCRIPTION: This section outlines commands for managing existing abbreviations, including options to rename, show, list, erase, or query abbreviations in the fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/abbr.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nabbr --rename OLD_NAME NEW_NAME\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr [-s | --show]\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr [-l | --list]\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr [-e | --erase] NAME\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr -q or --query [NAME...]\n```\n\nLANGUAGE: fish\nCODE:\n```\nabbr -h or --help\n```\n\n----------------------------------------\n\nTITLE: Preserving Status after Variable Setting in Fish Shell\nDESCRIPTION: This series of commands demonstrates that setting a variable doesn't modify the '$status'. However, command substitution can change it.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n> echo $status\n0\n> false\n> set foo bar\n> echo $status\n1\n> true\n> set foo banana (false)\n> echo $status\n1\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Commands in fish\nDESCRIPTION: Demonstrates how to pass additional arguments to commands executed via fish, with arguments accessible via $argv. This allows dynamic input handling within command executions.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nfish -c 'printf %s\\n $argv' \"first line\" \"second line\"\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase - Fish Shell\nDESCRIPTION: The `string lower` command is used to convert each provided string argument to lowercase. If at least one string is converted, it returns an exit status of 0; otherwise, it returns 1. The command can optionally be run in quiet mode using the -q flag to check if the strings are already in lowercase without outputting the results.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-lower.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstring lower [-q | --quiet] [STRING ...]\n```\n\n----------------------------------------\n\nTITLE: Combined File Existence and Readability Check in Fish\nDESCRIPTION: This snippet illustrates how to use the 'if' command in Fish shell with the 'test' command and the 'and' operator to check for multiple conditions. It verifies if 'foo.txt' exists as a regular file and is readable, then prints a corresponding message.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/if.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\"if test -f foo.txt\n   and test -r foo.txt\n   echo \\\"foo.txt exists and is readable\\\"\nend\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Redirection and Block Handling\nDESCRIPTION: Examples of redirecting make output to a log file and using redirections with blocks.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nmake &>/log\n\nbegin\n    echo stdout\n    echo stderr >&2 # <- this goes to stderr!\nend >/dev/null # ignore stdout, so this prints \"stderr\"\n\nstring match '*foo*' <?myfile\n```\n\n----------------------------------------\n\nTITLE: Fish Prompt with String Join\nDESCRIPTION: A prompt function using string join to remove spaces between elements.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    string join '' -- $PWD '>'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating While Loops in Fish Shell\nDESCRIPTION: Shows how to create an infinite while loop in Fish shell that will continue to execute until manually interrupted with Ctrl-C.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_14\n\nLANGUAGE: fish\nCODE:\n```\nwhile true\n    echo \"Loop forever\"\nend\n# Prints:\n# Loop forever\n# Loop forever\n# Loop forever\n# yes, this really will loop forever. Unless you abort it with ctrl-c.\n```\n\n----------------------------------------\n\nTITLE: Removing Directory from PATH in Fish Shell\nDESCRIPTION: Demonstrates how to remove a specific directory from the PATH variable in Fish shell using string match with the -v (invert) flag.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_20\n\nLANGUAGE: fish\nCODE:\n```\n> set PATH (string match -v /usr/local/bin $PATH)\n```\n\n----------------------------------------\n\nTITLE: Line-by-Line Input Processing with While Loop\nDESCRIPTION: Shows how to iterate through command output line-by-line using read and while loop\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/read.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nprintf '%s\\n' line1 line2 line3 line4 | while read -l foo\n    echo \"This is another line: $foo\"\nend\n```\n\n----------------------------------------\n\nTITLE: Exporting Variables in Fish\nDESCRIPTION: Demonstrates how to export variables for use by external commands and programs.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n> set -x MyVariable SomeValue\n> env | grep MyVariable\nMyVariable=SomeValue\n```\n\n----------------------------------------\n\nTITLE: Path Extension Extraction in Fish Shell\nDESCRIPTION: This example extracts the file extension from a path using `path extension` in Fish shell. It returns the part of the path after the last '.' character, if any. The command returns 0 if an extension exists and prints the extension to standard output; otherwise, it prints an empty line and returns 1.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\n   >_ path extension ./foo.mp4\n   .mp4\n\n   >_ path extension ../banana\n   # an empty line, status 1\n\n   >_ path extension ~/.config\n   # an empty line, status 1\n\n   >_ path extension ~/.config.d\n   .d\n\n   >_ path extension ~/.config.\n   .\n\n   >_ set -l path (path change-extension '' ./foo.mp4)\n   >_ set -l extension (path extension ./foo.mp4)\n   > echo $path$extension\n   # reconstructs the original path again.\n   ./foo.mp4\n   \n```\n\n----------------------------------------\n\nTITLE: Erasing a Variable from Multiple Scopes in Fish Shell\nDESCRIPTION: This command erases the variable 'smurf' from both global and universal scopes using '-e -Ug' options with 'set'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n> set -e -Ug smurf\n```\n\n----------------------------------------\n\nTITLE: Setting maximum scale for math operations\nDESCRIPTION: The math command now accepts --scale=max for setting the maximum scale for floating point operations, providing maximum precision.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_55\n\nLANGUAGE: fish\nCODE:\n```\nmath --scale=max \"1/3\"\n```\n\n----------------------------------------\n\nTITLE: String Substring with Negative Start and End\nDESCRIPTION: Extracts a substring from the third-to-last to the second-to-last character\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nstring sub -s -3 -e -2 abcde\n```\n\n----------------------------------------\n\nTITLE: Creating Colorful Multi-line Prompt in Fish Shell\nDESCRIPTION: Demonstrates how to define a colorful multi-line prompt in Fish shell using set_color with both named colors and hex RGB values.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_18\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    set_color purple\n    date \"+%m/%d/%y\"\n    set_color F00\n    echo (pwd) '>' (set_color normal)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining fish_prompt Function with prompt_login\nDESCRIPTION: This code defines a `fish_prompt` function that utilizes `prompt_login` to display the login information, along with the present working directory (using `prompt_pwd`), and a dollar sign prompt. The function is designed to be used as the fish shell prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/prompt_login.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\"function fish_prompt\n    echo -n (prompt_login) (prompt_pwd) '$ '\nend\"\n```\n\n----------------------------------------\n\nTITLE: String Matching with Glob\nDESCRIPTION: Demonstrates basic string matching using glob patterns. The glob pattern must match the entire string to be considered a valid match. The example shows matching a simple string, using wildcards, and ignoring case.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-match.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\n    >_ string match 'a' a\n    a\n\n    >_ string match 'a*b' axxb\n    axxb\n\n    >_ string match -i 'a*B' Axxb\n    Axxb\n\n    >_ string match -- '-*' -h foo --version bar\n    # To match things that look like options, we need a `--`\n    # to tell string its options end there.\n    -h\n    --version\n\n    >_ echo 'ok?' | string match '*?'\n    ok?\n\n    # Note that only the second STRING will match here.\n    >_ string match 'foo' 'foo1' 'foo' 'foo2'\n    foo\n\n    >_ string match -e 'foo' 'foo1' 'foo' 'foo2'\n    foo1\n    foo\n    foo2\n\n    >_ string match 'foo*' 'foo1' 'foo' 'foo2'\n    foo1\n    foo2\n\n```\n\n----------------------------------------\n\nTITLE: Filtering and Transforming Paths in Fish Shell\nDESCRIPTION: Example of using the new 'path' builtin to filter and transform paths, specifically to list all unique file extensions in /usr/share/man after removing one extension.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_16\n\nLANGUAGE: fish\nCODE:\n```\npath filter -f /usr/share/man/** | path change-extension '' | path extension | path sort -u\n```\n\n----------------------------------------\n\nTITLE: Customizing the Fish Shell Title Bar\nDESCRIPTION: Demonstrates creating a custom fish_title function that displays the last command and current working directory (shortened) in the terminal's title bar.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_title\n    # `prompt_pwd` shortens the title. This helps prevent tabs from becoming very wide.\n    echo $argv[1] (prompt_pwd)\n    pwd\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Variables for Single Commands in Fish\nDESCRIPTION: Examples of temporarily setting environment variables for a single command execution. Fish processes variable assignments before expanding other parts of the command line.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_46\n\nLANGUAGE: fish\nCODE:\n```\n# Call git status on another directory\n# (can also be done via `git -C somerepo status`)\nGIT_DIR=somerepo git status\n```\n\nLANGUAGE: fish\nCODE:\n```\nset foo banana\nfoo=gagaga echo $foo\n# prints gagaga, while in other shells it might print \"banana\"\n```\n\nLANGUAGE: fish\nCODE:\n```\n# Call bash with a reasonable default path.\nPATH={/usr,}/{s,}bin bash\n```\n\nLANGUAGE: fish\nCODE:\n```\n# Run vlc on all mp3 files in the current directory\n# If no file exists it will still be run with no arguments\nmp3s=*.mp3 vlc $mp3s\n```\n\n----------------------------------------\n\nTITLE: Simple `argparse` Example with Help Flag\nDESCRIPTION: This example demonstrates a simple usage of `argparse` with a help flag. It parses the arguments, checks if the help flag is set, and then potentially prints help information and exits.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/argparse.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nargparse h/help -- $argv\nor return\n\nif set -q _flag_help\n    # TODO: Print help here\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Defining fish_prompt function with fish_git_prompt\nDESCRIPTION: This code defines a fish shell prompt function that includes the output of the `fish_git_prompt` function. The `fish_git_prompt` provides git repository information for display in the prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_git_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n     printf '%s' $PWD (fish_git_prompt) ' $ '\nend\n```\n\n----------------------------------------\n\nTITLE: Using Emit Command with Event Handler in Fish Shell\nDESCRIPTION: Demonstrates how to define an event handler function for a custom event 'test_event' and then emit that event with arguments. The handler will echo the received arguments when the event is emitted.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/emit.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction event_test --on-event test_event\n    echo event test: $argv\nend\n\nemit test_event something\n```\n\n----------------------------------------\n\nTITLE: String Replace Literal Example with Multiple Arguments in Fish\nDESCRIPTION: This example showcases `string replace` with multiple string arguments.  It replaces \"3rd\" with corresponding ordinal numbers from \"1st\" to \"last\" for each input string.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-replace.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string replace 3rd last 1st 2nd 3rd\"\n\n```\n\n----------------------------------------\n\nTITLE: Tokenized Input Reading\nDESCRIPTION: Shows read command's tokenization behavior, preserving shell-like argument parsing with quotes and escaping\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/read.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\necho 'a\\ b' | read -t first second\necho 'a\"foo bar\"b (command echo wurst)*\" \"{a,b}' | read -lt -l a b c\n```\n\n----------------------------------------\n\nTITLE: Performing basic addition\nDESCRIPTION: This example demonstrates the simplest usage of the `math` command, performing an addition operation. It calculates the sum of 1 and 1 and prints the result to standard output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\"math 1+1\"\n```\n\n----------------------------------------\n\nTITLE: String Splitting with pkg-config in Fish\nDESCRIPTION: Demonstrates how to properly split command output on spaces using string split with the -n flag to remove empty elements.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\ng++ example_01.cpp (pkg-config --cflags --libs gtk+-2.0 | string split -n \" \")\n```\n\n----------------------------------------\n\nTITLE: Complex File Testing with Logical Operators\nDESCRIPTION: Example showing how to combine multiple file tests with logical operators\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/test.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nif test \\( -f /foo -o -f /bar \\) -a \\( -f /baz -o -f /bat \\)\n    echo Success.\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Completion for RPM's --nodeps Option in Fish\nDESCRIPTION: This example shows how to add a completion for the '--nodeps' option of the 'rpm' command, but only when the '-e' or '--erase' flag is present.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/complete.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\ncomplete -c rpm -n \"__fish_contains_opt -s e erase\" -l nodeps -d \"Don't check dependencies\"\n```\n\n----------------------------------------\n\nTITLE: Example of String Joining without Separator in Fish Shell\nDESCRIPTION: Shows how to concatenate strings 'a', 'b', and 'c' without a separating delimiter using the 'string join' command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-join.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n>_ string join '' a b c\nabc\n```\n\n----------------------------------------\n\nTITLE: Path Filtering Based on Type and Permissions in Fish Shell\nDESCRIPTION: This example demonstrates filtering paths based on file type and permissions using `path filter` in Fish shell. It shows how to use options such as `-t` or `--type` to filter by file type (e.g., file, directory) and `-p` or `--perm` to filter by permissions (e.g., read, write, execute). The command returns 0 if at least one path passes the filter, and prints the filtered paths to standard output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n\n   >_ path filter /usr/bin /usr/argagagji\n   # The (hopefully) nonexistent argagagji is filtered implicitly:\n   /usr/bin\n\n   >_ path filter --type file /usr/bin /usr/bin/fish\n   # Only fish is a file\n   /usr/bin/fish\n\n   >_ path filter --type file,dir --perm exec,write /usr/bin/fish /home/me\n   # fish is a file, which passes, and executable, which passes,\n   # but probably not writable, which fails.\n   #\n   # $HOME is a directory and both writable and executable, typically.\n   # So it passes.\n   /home/me\n\n   >_ path filter -fdxw /usr/bin/fish /home/me\n   # This is the same as above: \"-f\" is \"--type=file\", \"-d\" is \"--type=dir\",\n   # \"-x\" is short for \"--perm=exec\" and \"-w\" short for \"--perm=write\"!\n   /home/me\n   \n   >_ path filter -fx $PATH/*\n   # Prints all possible commands - the first entry of each name is what fish would execute!\n\n```\n\n----------------------------------------\n\nTITLE: Path Resolve Examples - Fish Shell\nDESCRIPTION: Demonstrates path resolve functionality which provides normalized, physical and absolute versions of paths while resolving symlinks.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\n>_ path resolve /bin//sh\n/usr/bin/bash\n\n>_ path resolve /bin/foo///bar/../baz\n/usr/bin/foo/baz\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Fish\nDESCRIPTION: Examples of setting and clearing environment variables using the set command, including local and exported variables\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nset -x key value # typically set -gx key value\nset -e key\n\nkey=value echo $key\nbegin; set -lx key value; echo $key; end\n```\n\n----------------------------------------\n\nTITLE: Path Basename Extraction in Fish Shell\nDESCRIPTION: This snippet shows how to extract the basename (filename) from a given path using the `path basename` command in Fish shell. The `-E` or `--no-extension` option removes the file extension if present. The command returns 0 if a basename exists, and prints the basename to standard output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\n   >_ path basename ./foo.mp4\n   foo.mp4\n\n   >_ path basename ../banana\n   banana\n\n   >_ path basename /usr/bin/\n   bin\n\n   >_ path basename /usr/bin/*\n   # This prints all files in /usr/bin/\n   # A selection:\n   cp\n   fish\n   grep\n   rm\n\n```\n\n----------------------------------------\n\nTITLE: Viewing and Choosing Prompts\nDESCRIPTION: 'fish_config prompt' allows users to interact with sample prompts directly through the terminal. The subcommands 'choose', 'list', 'save', and 'show' enable users to preview, select, save, or display prompt options respectively in their current Fish session.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_config.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfish_config prompt (choose | list | save | show)\n```\n\n----------------------------------------\n\nTITLE: Safe Execution with Command Check in Fish\nDESCRIPTION: Demonstrates using command -sq to check if a command exists before attempting to run it, preventing errors if the command doesn't exist.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_23\n\nLANGUAGE: fish\nCODE:\n```\nif command -sq foo; and foo\n```\n\n----------------------------------------\n\nTITLE: Path Command Combinations - Fish Shell\nDESCRIPTION: Shows advanced examples of combining path commands with other tools and fish shell features.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_10\n\nLANGUAGE: fish\nCODE:\n```\npath filter -zZ -xf -- * | path resolve -z\n\nfind . -maxdepth 1 -type f -executable -print0 | path resolve -z\n\nset -l paths (path filter -p exec $PATH/fish -Z | path resolve)\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase in Fish Shell\nDESCRIPTION: Command syntax for converting strings to uppercase using the 'string upper' command. Supports optional -q/--quiet flag and accepts multiple string arguments. Returns status 0 if conversion successful, 1 otherwise.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-upper.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstring upper [-q | --quiet] [STRING ...]\n```\n\n----------------------------------------\n\nTITLE: Backgrounding Multiple Jobs by PID in Fish Shell\nDESCRIPTION: Shows how to background multiple jobs by specifying their Process IDs (PIDs) as arguments to the 'bg' command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bg.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbg 123 456 789\n```\n\n----------------------------------------\n\nTITLE: Using fish_vcs_prompt in a Custom Prompt (Fish)\nDESCRIPTION: This snippet demonstrates how to incorporate the fish_vcs_prompt function into a custom prompt function. It displays the current working directory followed by VCS information and a dollar sign.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_vcs_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n     printf '%s' $PWD (fish_vcs_prompt) ' $ '\nend\n```\n\n----------------------------------------\n\nTITLE: String Replace Regex Example in Fish\nDESCRIPTION: This example shows a regular expression replacement using `string replace -r`.  It removes all non-digit and non-period characters from the input string \"0 one two 3.14 four 5x\".\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-replace.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string replace -r -a '[^\\d.]+' ' ' '0 one two 3.14 four 5x'\"\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function-Scoped Variables in Fish\nDESCRIPTION: This code snippet shows the usage of the new --function option for set and read commands, which sets variables in the function's top scope. It compares this with the block-scoped --local option.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_23\n\nLANGUAGE: fish\nCODE:\n```\nfunction demonstration\n    if true\n        set --function foo bar\n        set --local baz banana\n    end\n    echo $foo # prints \"bar\" because $foo is still valid\n    echo $baz # prints nothing because $baz went out of scope\nend\n```\n\n----------------------------------------\n\nTITLE: Repeating Strings in Fish Shell\nDESCRIPTION: The 'string repeat' command in the fish shell allows users to repeat a given string a specified number of times using the '-n' or '--count' options. The '-m' or '--max' option limits the number of characters output, excluding newline characters. Other options include '-N' for no newline at the end and '-q' for quiet mode, which suppresses errors. The command accepts a count parameter if neither '--count' nor '--max' are explicitly provided. The exit status is 0 if the output string is non-empty, and 1 otherwise.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-repeat.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n>_ string repeat -n 2 'foo '\nfoo foo\n\n>_ echo foo | string repeat -n 2\nfoofoo\n\n>_ string repeat -n 2 -m 5 'foo'\nfoofo\n\n>_ string repeat -m 5 'foo'\nfoofo\n\n>_ string repeat 2 'foo'\nfoofoo\n\n>_ string repeat 2 -n 3\n222\n```\n\n----------------------------------------\n\nTITLE: Basic Echo Usage in Fish Shell\nDESCRIPTION: Demonstrates basic usage of the echo command to display text\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/echo.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> echo 'Hello World'\nHello World\n```\n\n----------------------------------------\n\nTITLE: Using fish_clipboard Commands in Pipes\nDESCRIPTION: Shows how to use fish_clipboard_copy and fish_clipboard_paste in pipelines, enabling easier interaction with the system clipboard in Fish 3.6.1+.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_15\n\nLANGUAGE: fish\nCODE:\n```\ngit rev-list 3.5.1 | fish_clipboard_copy\n\nfish_clipboard_paste | string join + | math\n```\n\n----------------------------------------\n\nTITLE: Complete Fish Prompt with Status\nDESCRIPTION: A full featured prompt showing status code, colored path, and proper formatting.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/prompt.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    set -l last_status $status\n    # Prompt status only if it's not 0\n    set -l stat\n    if test $last_status -ne 0\n        set stat (set_color red)\"[$last_status]\"(set_color normal)\n    end\n\n    string join '' -- (set_color green) (prompt_pwd) (set_color normal) $stat '>'\nend\n```\n\n----------------------------------------\n\nTITLE: Command Success/Failure Handling in Fish\nDESCRIPTION: Demonstrates direct command execution in if conditions and using and/or operators for conditional execution.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\nif somecommand\n    echo \"Command succeeded\"\nelse\n    echo \"Command failed\"\nend\n```\n\nLANGUAGE: fish\nCODE:\n```\nsomecommand\nor someothercommand\n```\n\n----------------------------------------\n\nTITLE: Dumping Theme Configuration\nDESCRIPTION: The command 'fish_config theme dump > ~/.config/fish/themes/my.theme' saves the current theme settings into a new theme file in the user's Fish configuration directory. This allows for easy creation and management of custom themes in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_config.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfish_config theme dump > ~/.config/fish/themes/my.theme\n```\n\n----------------------------------------\n\nTITLE: String Trim Basic Usage - Fish Shell\nDESCRIPTION: Demonstrates basic usage of string trim command to remove surrounding whitespace from a string.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-trim.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n>_ string trim ' abc  '\nabc\n```\n\n----------------------------------------\n\nTITLE: Implementing While Loop in Fish Shell\nDESCRIPTION: Example showing a while loop that checks for file existence and prints a message every 10 seconds. The loop continues as long as either foo.txt or bar.txt exists in the directory.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/while.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwhile test -f foo.txt; or test -f bar.txt ; echo file exists; sleep 10; end\n```\n\n----------------------------------------\n\nTITLE: Padding Strings to Fixed Width in Fish Shell\nDESCRIPTION: The string pad command extends each input string to a specified visible width by adding characters for padding. Users can specify padding to the right or left, and choose the padding character. This command helps format strings for better visibility in terminal displays.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-pad.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.. synopsis::\n\n    string pad [-r | --right] [(-c | --char) CHAR] [(-w | --width) INTEGER]\n               [STRING ...]\n\n``string pad`` extends each *STRING* to the given visible width by adding *CHAR* to the left. That means the width of all visible characters added together, excluding escape sequences and accounting for :envvar:`fish_emoji_width` and :envvar:`fish_ambiguous_width`. It is the amount of columns in a terminal the *STRING* occupies.\n\nThe escape sequences reflect what fish knows about, and how it computes its output. Your terminal might support more escapes, or not support escape sequences that fish knows about.\n\nIf **-r** or **--right** is given, add the padding after a string.\n\nIf **-c** or **--char** is given, pad with *CHAR* instead of whitespace.\n\nThe output is padded to the maximum width of all input strings. If **-w** or **--width** is given, use at least that.\n\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n    >_ string pad -w 10 abc abcdef\n           abc\n        abcdef\n\n    >_ string pad --right --char=🐟 \"fish are pretty\" \"rich. \"\n    fish are pretty\n    rich.  🐟🐟🐟🐟\n\n    >_ string pad -w$COLUMNS (date)\n    # Prints the current time on the right edge of the screen.\n```\n\n----------------------------------------\n\nTITLE: Setting fish_trace variable for command tracing\nDESCRIPTION: The fish_trace variable can be set to enable command tracing, similar to set -x in other shells. This helps with debugging by showing each command as it executes.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_47\n\nLANGUAGE: fish\nCODE:\n```\nset fish_trace 1\n```\n\n----------------------------------------\n\nTITLE: Evaluating File Content in Fish Shell with Source Command\nDESCRIPTION: The 'source' command evaluates commands from a specified file within the current shell environment in Fish Shell. This means changes to shell variables affect the current session, unlike executing a separate shell process. If additional arguments are provided, they populate the 'argv' variable. The command also reads from standard input if no file is specified and something is connected to standard input. The command’s exit status reflects the last job’s exit status, or non-zero if there is an error reading the file.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/source.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nsource ~/.config/fish/config.fish\n# Causes fish to re-read its initialization file.\n```\n\n----------------------------------------\n\nTITLE: Using end with begin block in Fish shell\nDESCRIPTION: Demonstrates how to terminate a begin block which groups a sequence of commands together.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/end.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nbegin\n    [COMMANDS ...] \nend\n```\n\n----------------------------------------\n\nTITLE: Package Installation with Wildcards\nDESCRIPTION: Demonstrates using double quotes with wildcards for package installation\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\napt install \"postgres-*\"\n```\n\n----------------------------------------\n\nTITLE: fish_prompt with fish_svn_prompt\nDESCRIPTION: This code defines a `fish_prompt` function that incorporates `fish_svn_prompt` to display Subversion information in the prompt.  It prints the current working directory, the output of `fish_svn_prompt`, and a prompt symbol. Subversion must be installed for `fish_svn_prompt` to function correctly.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_svn_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n     printf '%s' $PWD (fish_svn_prompt) ' $ '\n end\n```\n\n----------------------------------------\n\nTITLE: Setting PATH using fish_add_path function\nDESCRIPTION: Shows the correct handling of an undefined PATH environment variable using the fish_add_path function in Fish Shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_30\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path /some/new/path\n```\n\n----------------------------------------\n\nTITLE: Disowning a background process in Fish shell\nDESCRIPTION: This example starts Firefox in the background and then removes it from the job list using 'disown'. This ensures that Firefox continues running even after the Fish shell process is closed.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/disown.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\"firefox &; disown\"\n```\n\n----------------------------------------\n\nTITLE: Using fish_clipboard_copy in Fish Shell\nDESCRIPTION: Demonstrates two ways to use the fish_clipboard_copy command: directly and as part of a pipeline. The command copies text to the system clipboard, either from stdin or the current command line.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_clipboard_copy.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfish_clipboard_copy\n```\n\nLANGUAGE: fish\nCODE:\n```\nfoo | fish_clipboard_copy\n```\n\n----------------------------------------\n\nTITLE: Process Substitution Example with `psub`\nDESCRIPTION: This example demonstrates using `psub` to compare the sorted versions of two files, `a.txt` and `b.txt`, using the `diff` command. The output of `sort a.txt` and `sort b.txt` are passed to `diff` via process substitution.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/psub.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ndiff (sort a.txt | psub) (sort b.txt | psub)\n# shows the difference between the sorted versions of files ``a.txt`` and ``b.txt``.\n```\n\n----------------------------------------\n\nTITLE: Adding a Directory to PATH Using fish_add_path\nDESCRIPTION: Basic usage of fish_add_path to add a new directory to the path, which will prepend to fish_user_paths by default\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_add_path.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path /opt/mycoolthing/bin\n```\n\n----------------------------------------\n\nTITLE: Getting Even Numbers in Fish Shell\nDESCRIPTION: This snippet illustrates how to generate only even numbers between 2 and 20 using the 'random' command with a step of 2. It showcases the ability to control the range and spacing of the output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/random.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nrandom 2 2 20\n```\n\n----------------------------------------\n\nTITLE: While Loop with Input Redirection in Fish Shell\nDESCRIPTION: Demonstrates a while loop that reads lines from a file using input redirection.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_30\n\nLANGUAGE: fish\nCODE:\n```\nwhile read -l line\n    echo line: $line\nend < file\n```\n\n----------------------------------------\n\nTITLE: Path Dirname Extraction in Fish Shell\nDESCRIPTION: This snippet demonstrates extracting the directory name from a given path using `path dirname` in Fish shell. It removes the last component and any trailing slashes. The command returns 0 if a directory name exists, and prints the directory name to standard output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\n   >_ path dirname ./foo.mp4\n   .\n\n   >_ path dirname ../banana\n   ..\n\n   >_ path dirname /usr/bin/\n   /usr\n\n```\n\n----------------------------------------\n\nTITLE: Defining a fish_prompt function with fish_hg_prompt\nDESCRIPTION: This snippet demonstrates how to define a `fish_prompt` function that incorporates the `fish_hg_prompt` function to display Mercurial repository information along with the current working directory in the prompt. It uses `printf` to format the output, combining the directory, Mercurial status, and a prompt symbol.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_hg_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n     printf '%s' $PWD (fish_hg_prompt) ' $ '\n end\n```\n\n----------------------------------------\n\nTITLE: Function Argument Check - Fish Shell\nDESCRIPTION: This function definition in Fish Shell checks whether it was invoked with a '-q' option among its arguments using the 'contains' command. It is structured to handle this check properly without misinterpreting the argument as an option for 'contains'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/contains.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfunction hasargs\n    if contains -- -q $argv\n        echo '$argv contains a -q option'\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Finding the maximum of a set of numbers\nDESCRIPTION: This example finds the maximum value from a set of numbers using the `max` function. It identifies the largest number among 5, 2, 3, and 1.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_12\n\nLANGUAGE: fish\nCODE:\n```\n\"math max 5,2,3,1\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments with Conflicting Flags\nDESCRIPTION: This example demonstrates the use of the `-x` flag in `argparse` to specify conflicting options. If any of the conflicting options are used together, an error will be raised.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/argparse.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nargparse -x g,U -x P,U -x a,p g/global U/universal P/path p/prepend a/append h/help m/move v/verbose n/dry-run -- $argv\n```\n\n----------------------------------------\n\nTITLE: Getting Odd Numbers in Fish Shell\nDESCRIPTION: This snippet shows how to obtain odd numbers from 1 to 3 using the 'random' command. It highlights the versatility in generating numbers by setting arbitrary start and end points with a specific step.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/random.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nrandom 1 2 3 # or 1 2 4\n```\n\n----------------------------------------\n\nTITLE: Appending to Entire PATH\nDESCRIPTION: Using --append and --path flags to add directories directly to PATH instead of fish_user_paths\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_add_path.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path --append --path /opt/fallback/bin\n```\n\n----------------------------------------\n\nTITLE: Utilizing Break Command in Fish Shell Loop\nDESCRIPTION: This snippet demonstrates the use of the break command to halt the execution of an inner loop when a condition is met. The script searches for 'smurf' in all .c files and stops the search upon the first match. There are no parameters needed for the break command, and it is typically used inside conditional statements.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/break.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfor i in *.c\n    if grep smurf $i\n        echo Smurfs are present in $i\n        break\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Background Job Control\nDESCRIPTION: Example of running a program in the background using the ampersand operator.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\nemacs &\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Variable Scope in Fish Shell\nDESCRIPTION: This snippet demonstrates how to use the 'begin' command to create a local variable scope. The PIRATE variable is set inside the block and is not accessible outside it.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/begin.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nbegin\n    set -l PIRATE Yarrr\n\n    ...\nend\n\necho $PIRATE\n# This will not output anything, since the PIRATE variable\n# went out of scope at the end of the block\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple fish_command_not_found Handler in Fish\nDESCRIPTION: This snippet shows a basic implementation of the fish_command_not_found function that prints a message when a command is not found. It demonstrates how to access the missing command name using $argv[1].\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_command_not_found.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_command_not_found\n    echo Did not find command $argv[1]\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Function-Scoped Variables with Fallback in Fish Shell\nDESCRIPTION: Two alternative approaches for setting a variable with a fallback option in a fish function. Both methods check if a file exists and set a variable to an alternative path if not.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_41\n\nLANGUAGE: fish\nCODE:\n```\nfunction something\n    set -l file /path/to/my/file\n    if not test -e \"$file\"\n        set file /path/to/my/otherfile\n    end\nend\n```\n\nLANGUAGE: fish\nCODE:\n```\nfunction something\n    if test -e /path/to/my/file\n        set -f file /path/to/my/file\n    else\n        set -f file /path/to/my/otherfile\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Combined Pipes and Redirections\nDESCRIPTION: Example function demonstrating various combinations of pipes and redirections.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\nfunction print\n    echo out\n    echo err >&2\nend\n\nprint 2>&1 | less\nprint &| less\nprint >&2 2>/dev/null\nprint >/dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Subtracting from the status variable\nDESCRIPTION: This example shows how to use the `math` command with the `$status` variable, which contains the exit status of the last command. It subtracts 128 from the value of `$status` and prints the result.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\"math \\$status - 128\"\n```\n\n----------------------------------------\n\nTITLE: String Length with Visible Width in Fish Shell\nDESCRIPTION: This example showcases the use of the `--visible` flag with the `string length` command. It calculates the visible width of the string `(set_color red)foobar`, discounting the escape sequence for color and returning the length of \"foobar\" which is 6.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-length.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string length --visible (set_color red)foobar\\n# the set_color is discounted, so this is the width of \\\"foobar\\\"\\n6\"\n```\n\n----------------------------------------\n\nTITLE: Collecting Strings Using 'string collect' in Fish Shell\nDESCRIPTION: The 'string collect' command takes multiple strings as input and combines them into a single output argument. This command can handle multiline outputs from commands and optionally trims trailing newlines or allows for empty arguments.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-collect.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\necho \"zero $(echo one\\ntwo\\nthree) four\"\n```\n\nLANGUAGE: fish\nCODE:\n```\necho \"(echo one\\ntwo\\nthree | string collect)\"\n```\n\nLANGUAGE: fish\nCODE:\n```\necho \"(echo one\\ntwo\\nthree | string collect -N)\"\n```\n\nLANGUAGE: fish\nCODE:\n```\necho foo(true | string collect --allow-empty)bar\n```\n\n----------------------------------------\n\nTITLE: Using fish_status_to_signal in Fish Prompt Function\nDESCRIPTION: This example demonstrates how to use fish_status_to_signal within a fish_prompt function to display pipeline status in the shell prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_status_to_signal.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    echo -n (fish_status_to_signal $pipestatus | string join '|') (prompt_pwd) '$ '\nend\n```\n\n----------------------------------------\n\nTITLE: Running a Script with fish Shell\nDESCRIPTION: Run a specific script file using the fish shell, which is used for executing commands within the fish environment.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfish /path/to/script.fish\n```\n\n----------------------------------------\n\nTITLE: Calculating the sine of pi\nDESCRIPTION: This example calculates the sine of pi using the `sin` function. Note the parentheses are optional in this case.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n\"math \\\"sin(pi)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Echo with Double Dash in Fish Shell\nDESCRIPTION: Demonstrates using -- to signal the end of options, allowing -n to be printed as literal text\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/echo.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> echo -- -n\n-n\n```\n\n----------------------------------------\n\nTITLE: Path Existence and Filter Check in Fish Shell\nDESCRIPTION: This example demonstrates how to check if a path exists and passes a filter using `path is` in Fish shell, which is shorthand for `path filter -q`. It returns true (0) if any of the given paths passes the filter and false (1) otherwise. It does not produce any output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n\n   >_ path is /usr/bin /usr/argagagji\n   # /usr/bin exists, so this returns a status of 0 (true). It prints nothing.\n   >_ path is /usr/argagagji\n   # /usr/argagagji does not, so this returns a status of 1 (false). It also prints nothing.\n   >_ path is -fx /bin/sh\n   # /bin/sh is usually an executable file, so this returns true.\n\n```\n\n----------------------------------------\n\nTITLE: Standard Error Redirection\nDESCRIPTION: Shows the updated syntax for redirecting stderr, replacing deprecated ^ with 2>.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_71\n\nLANGUAGE: fish\nCODE:\n```\n2>\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Numbers with Seq in Fish Shell\nDESCRIPTION: Shows how to use the 'seq' command in a for loop to iterate over a sequence of numbers and create numbered files.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_16\n\nLANGUAGE: fish\nCODE:\n```\nfor x in (seq 5)\n    touch file_$x.txt\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Greeting Function Example in Fish Shell\nDESCRIPTION: Example of a custom fish_greeting function that displays a personalized message including the current time (with colored output) and the hostname of the machine.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_greeting.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_greeting\n      echo Hello friend!\n      echo The time is (set_color yellow)(date +%T)(set_color normal) and this machine is called $hostname\n  end\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Variable Scope in Fish Functions\nDESCRIPTION: A function that demonstrates local, function, and implicit function scopes. Local variables die after their block, while function-scoped variables remain accessible throughout the function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_44\n\nLANGUAGE: fish\nCODE:\n```\nfunction test-scopes\n    begin\n        # This is a nice local scope where all variables will die\n        set -l pirate 'There be treasure in them thar hills'\n        set -f captain Space, the final frontier\n        # If no variable of that name was defined, it is function-local.\n        set gnu \"In the beginning there was nothing, which exploded\"\n    end\n\n    # This will not output anything, since the pirate was local\n    echo $pirate\n    # This will output the good Captain's speech\n    # since $captain had function-scope.\n    echo $captain\n    # This will output Sir Terry's wisdom.\n    echo $gnu\nend\n```\n\n----------------------------------------\n\nTITLE: Using Vared to Edit Environment Variables in Fish Shell\nDESCRIPTION: Examples demonstrating how to use the vared command to edit environment variables, including array elements. The command allows interactive editing of single variables or specific array indices.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/vared.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvared VARIABLE_NAME\n```\n\nLANGUAGE: shell\nCODE:\n```\nvared PATH[3]\n```\n\n----------------------------------------\n\nTITLE: PATH Variable Handling in Fish Shell\nDESCRIPTION: This example demonstrates how PATH variables in fish are automatically joined and split on colons when quoted, allowing compatibility with Unix colon-separated path lists while maintaining fish's list variable capabilities.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_59\n\nLANGUAGE: fish\nCODE:\n```\nset MYPATH 1 2 3\necho \"$MYPATH\"\n# 1:2:3\nset MYPATH \"$MYPATH:4:5\"\necho $MYPATH\n# 1 2 3 4 5\necho \"$MYPATH\"\n# 1:2:3:4:5\n```\n\n----------------------------------------\n\nTITLE: Performing bitwise OR operation\nDESCRIPTION: This example demonstrates a bitwise OR operation using the `bitor` function. It performs a bitwise OR between 9 and 2 and prints the result.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\n\"math \\\"bitor(9,2)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Complex String Formatting with printf in Fish Shell\nDESCRIPTION: This example shows how to use printf for complex string formatting in Fish Shell, especially involving multiple types. It requires no dependencies and takes format strings with suitable arguments for conversion. Here, a string format and an integer argument are used to produce a formatted output. The generated output is the supplied string followed by an integer, printed without a newline.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/printf.rst#2025-04-21_snippet_1\n\nLANGUAGE: Fish\nCODE:\n```\nprintf \"%s: %d\" \"Number of bananas in my pocket\" 42\n```\n\n----------------------------------------\n\nTITLE: Starting Fish Configuration Interface - Web\nDESCRIPTION: The command 'fish_config' launches a web-based configuration interface for the Fish shell, allowing users to view and modify settings for functions, variables, and visual themes. If invoked without arguments or with the 'browse' command, it starts a local web server and opens a web browser for configuration. It respects the BROWSER environment variable if set.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_config.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfish_config [browse]\n```\n\n----------------------------------------\n\nTITLE: Using string split0 with success status\nDESCRIPTION: The string split0 command now returns exit status 0 when it successfully splits something, allowing for conditional execution based on split success.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_53\n\nLANGUAGE: fish\nCODE:\n```\nif string split0 < file\n    echo \"Split successful\"\nend\n```\n\n----------------------------------------\n\nTITLE: Binding Keys in Insert Mode for Vi Bindings in Fish Shell\nDESCRIPTION: This snippet demonstrates how to bind a key in insert mode when using Vi bindings in Fish shell. It binds Ctrl+C to clear the command line in insert mode.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_15\n\nLANGUAGE: fish\nCODE:\n```\nbind --mode insert ctrl-c 'commandline -r \"\"'\n```\n\n----------------------------------------\n\nTITLE: Executing the printf Command in Fish Shell\nDESCRIPTION: This snippet demonstrates the printf command in Fish Shell, showing how to print formatted text using format specifiers. No additional dependencies are required. The FORMAT argument is applied to each ARGUMENT, allowing for flexible text formatting. Inputs are taken as format specifiers with associated arguments. The output is formatted text according to the specifiers, and a non-zero return status is given if format conversion fails or if no argument is provided.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/printf.rst#2025-04-21_snippet_0\n\nLANGUAGE: Fish\nCODE:\n```\nprintf \"%s\\t%s\\n\" flounder fish\n```\n\n----------------------------------------\n\nTITLE: Using String Match with Groups-Only Option in Fish\nDESCRIPTION: This snippet shows the usage of the new --groups-only option with string match, which outputs only capturing groups, allowing for simple transformations.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_27\n\nLANGUAGE: fish\nCODE:\n```\n> string match -r --groups-only '(.*)fish' 'catfish' 'twofish' 'blue fish' | string escape\ncat\ntwo\n'blue '\n```\n\n----------------------------------------\n\nTITLE: Fish Path Configuration\nDESCRIPTION: Example of adding a directory to PATH in Fish configuration for login shells.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nif status --is-login\n    set -gx PATH $PATH ~/linux/bin\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiter Input Parsing\nDESCRIPTION: Demonstrates reading input with a custom delimiter and storing values in multiple variables\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/read.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\necho a==b==c | read -d == -l a b c\n```\n\n----------------------------------------\n\nTITLE: Negating Exit Status with Fish Shell\nDESCRIPTION: The provided snippet demonstrates using the 'not' command to check for the existence of a file named 'spoon'. If the file does not exist, an error message is printed and the script exits with status 1. The 'not' command negates the exit status of the 'test' command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/not.rst#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nif not test -f spoon\n    echo There is no spoon\n    exit 1\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Input Reading in Fish Shell\nDESCRIPTION: Demonstrates reading a simple input value and storing it in a variable using pipe redirection\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/read.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\necho hello | read foo\n```\n\n----------------------------------------\n\nTITLE: Creating a Function with Comments in Fish\nDESCRIPTION: Shows how to create a function named 'ls' with explanatory comments. The function wraps the command ls with the --color=auto option.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_13\n\nLANGUAGE: fish\nCODE:\n```\nfunction ls\n    # The function is called ls,\n    # so we have to explicitly call `command ls` to avoid calling ourselves.\n    command ls --color=auto $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Searching Command History with Substring Match\nDESCRIPTION: Shows how to search command history for entries containing a specific substring. This example searches for all previous commands that include the string 'foo'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/history.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhistory search --contains \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Shorten strings with inferred width\nDESCRIPTION: This example demonstrates using `string shorten` to truncate strings based on the shortest string's length. It infers the target width from the shortest input string and truncates longer strings accordingly, adding an ellipsis.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string shorten foo foobar\n# No width was given, we infer, and \\\"foo\\\" is the shortest.\nfoo\nfo…\"\n```\n\n----------------------------------------\n\nTITLE: Basic Wait Command with PID\nDESCRIPTION: Demonstrates how to spawn a sleep command in background and wait for it to complete using its PID.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/wait.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nsleep 10 &\nwait $last_pid\n```\n\n----------------------------------------\n\nTITLE: Path Normalize Examples - Fish Shell\nDESCRIPTION: Shows how path normalize cleans up paths by removing duplicates and resolving relative components without following symlinks.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\n>_ path normalize /usr/bin//../../etc/fish\n/etc/fish\n\n>_ path normalize /bin//bash\n/bin/bash\n\n>_ path normalize ./my/subdirs/../sub2\nmy/sub2\n\n>_ path normalize -- -/foo\n./-/foo\n```\n\n----------------------------------------\n\nTITLE: Showing Variable Inheritance in Fish Shell\nDESCRIPTION: Demonstrates the --show option for the set command, which now indicates when a variable was inherited from the parent process, helping with debugging environment issues.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_14\n\nLANGUAGE: fish\nCODE:\n```\n> set --show XDG_DATA_DIRS\n$XDG_DATA_DIRS: set in global scope, exported, a path variable with 4 elements\n$XDG_DATA_DIRS[1]: |/home/alfa/.local/share/flatpak/exports/share|\n$XDG_DATA_DIRS[2]: |/var/lib/flatpak/exports/share|\n$XDG_DATA_DIRS[3]: |/usr/local/share|\n$XDG_DATA_DIRS[4]: |/usr/share|\n$XDG_DATA_DIRS: originally inherited as |/home/alfa/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/|\n```\n\n----------------------------------------\n\nTITLE: Customizing fish_mode_prompt for Vi Modes in Fish Shell\nDESCRIPTION: This snippet demonstrates how to customize the fish_mode_prompt function to output different indicators based on the current vi mode. It utilizes a switch statement to output specific characters for each mode: 'N' for default, 'I' for insert, 'R' for replace_one, and 'V' for visual.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_mode_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_mode_prompt\n  switch $fish_bind_mode\n    case default\n      set_color --bold red\n      echo 'N'\n    case insert\n      set_color --bold green\n      echo 'I'\n    case replace_one\n      set_color --bold green\n      echo 'R'\n    case visual\n      set_color --bold brmagenta\n      echo 'V'\n    case '*'\n      set_color --bold red\n      echo '?'\n  end\n  set_color normal\nend\n```\n\n----------------------------------------\n\nTITLE: Interactive Shell Check in Fish Config\nDESCRIPTION: Shows how to guard interactive-only commands in fish configuration files to prevent SSH issues.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_11\n\nLANGUAGE: fish\nCODE:\n```\nif status is-interactive\n    ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Binding for Prepending sudo in Fish Shell\nDESCRIPTION: Example of how to create a key binding (Alt-S) that prepends 'sudo' to the command line in Fish shell, allowing quick elevation of privileges for commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_68\n\nLANGUAGE: fish\nCODE:\n```\nbind \\es 'commandline -f execute; and commandline -i sudo \" \"'\n```\n\n----------------------------------------\n\nTITLE: Basic Echo Command in Fish\nDESCRIPTION: Demonstrates basic command syntax using the echo command to print text to screen\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\necho hello world\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Documentation\nDESCRIPTION: The 'help' command displays the documentation for Fish Shell. If a specific section is provided, it shows the help related to that section. Users can set a specific browser for displaying the documentation using the 'BROWSER' environment variable or the '$fish_help_browser' variable for customizable options.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/help.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhelp [SECTION]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nhelp fg\n```\n\n----------------------------------------\n\nTITLE: Wait for Specific Process Type\nDESCRIPTION: Demonstrates waiting for specific process types by name, waiting only for sleep processes while ignoring other background jobs.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/wait.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfor i in (seq 1 5); sleep 10 &; end\nhoge &\nwait sleep\n```\n\n----------------------------------------\n\nTITLE: Binding Ctrl-D to Exit Shell in Fish\nDESCRIPTION: This snippet demonstrates how to bind the Ctrl-D key combination to exit the Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nbind ctrl-d 'exit'\n```\n\n----------------------------------------\n\nTITLE: Using read with tokenize option\nDESCRIPTION: The read command has a new --tokenize option that splits a string into variables according to shell tokenization rules, respecting quoting and escaping.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_63\n\nLANGUAGE: fish\nCODE:\n```\nread --tokenize a b c <<< \"first 'second quoted' third\"\n```\n\n----------------------------------------\n\nTITLE: Basic Fish Prompt Function\nDESCRIPTION: A simple Fish prompt function that displays the current working directory and a prompt symbol.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    echo $PWD '>'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Empty Greeting in Fish Shell\nDESCRIPTION: Shows how to set an empty greeting by setting the fish_greeting variable to empty using the universal flag, which persists across shell sessions.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_greeting.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset -U fish_greeting\n```\n\n----------------------------------------\n\nTITLE: Wait for Multiple Background Jobs\nDESCRIPTION: Shows how to spawn multiple background sleep processes and wait for all of them to complete.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/wait.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfor i in (seq 1 5); sleep 10 &; end\nwait\n```\n\n----------------------------------------\n\nTITLE: Path Mtime Usage Example - Fish Shell\nDESCRIPTION: Demonstrates usage of path mtime command to get file modification times both in absolute and relative formats.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n>_ date +%s\n1657217847\n\n>_ path mtime /etc/\n1657213796\n\n>_ path mtime -R /etc/\n4078\n\n>_ math (date +%s) - (path mtime /etc/)\n```\n\n----------------------------------------\n\nTITLE: Setting LS_COLORS Using Dircolors\nDESCRIPTION: Command to manually set the LS_COLORS environment variable using dircolors output from a .dircolors file. This replaces the automatic setting that was removed in Fish 3.6.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nset -gx LS_COLORS (dircolors -c .dircolors | string split ' ')[3]\n```\n\n----------------------------------------\n\nTITLE: String Length with Carriage Return and Visible Width in Fish Shell\nDESCRIPTION: This example illustrates the effect of a carriage return (`\\r`) on the visible width calculation using the `--visible` flag. The carriage return causes the characters after it to overwrite the beginning of the string, resulting in a displayed string of \"123def\" with a width of 6.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-length.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string length --visible abcdef\\r123\\n# this displays as \\\"123def\\\", so the width is 6\\n6\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fish Prompt in a Separate File\nDESCRIPTION: Shows how to define the Fish prompt function in a dedicated file for autoloading, which is the preferred approach for prompt customization.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_25\n\nLANGUAGE: fish\nCODE:\n```\n> cat ~/.config/fish/functions/fish_prompt.fish\nfunction fish_prompt\n    echo (pwd) \"> \"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Fish Features\nDESCRIPTION: Setting universal Fish shell features that persist across sessions using set -U.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_67\n\nLANGUAGE: fish\nCODE:\n```\n> set -U fish_features regex-easyesc qmark-noglob\n```\n\n----------------------------------------\n\nTITLE: Joining Strings with Delimiter using Fish Shell\nDESCRIPTION: The 'string join' command concatenates its STRING arguments into a single string separated by the specified delimiter SEP. If the '-q' or '--quiet' flag is used, warnings are suppressed. The command returns an exit status of 0 if at least one join is made, or 1 otherwise. Support for '--no-empty' allows exclusion of empty strings from the result.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-join.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nstring join [-q | --quiet] SEP [STRING ...]\n```\n\n----------------------------------------\n\nTITLE: Counting Environment Variable Elements in Fish Shell\nDESCRIPTION: The `count` command in Fish Shell prints the number of arguments passed to it, including the count of newlines from stdin. It is particularly useful for determining the number of elements in variable lists or lines in files. The command does not accept options and exits with a specific status based on the arguments received.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/count.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ncount $PATH\n# Returns the number of directories in the users PATH variable.\n```\n\nLANGUAGE: fish\nCODE:\n```\ncount *.txt\n# Returns the number of files in the current working directory\n# ending with the suffix '.txt'.\n```\n\nLANGUAGE: fish\nCODE:\n```\ngit ls-files --others --exclude-standard | count\n# Returns the number of untracked files in a git repository\n```\n\nLANGUAGE: fish\nCODE:\n```\nprintf '%s\\n' foo bar | count baz\n# Returns 3 (2 lines from stdin plus 1 argument)\n```\n\nLANGUAGE: fish\nCODE:\n```\ncount < /etc/hosts\n# Counts the number of entries in the hosts file\n```\n\n----------------------------------------\n\nTITLE: String Split Example in Fish Shell\nDESCRIPTION: Shows the equivalent of tr command using string split in Fish Shell. This command splits input based on a specified delimiter.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstring split somedelimiter\n```\n\n----------------------------------------\n\nTITLE: Backgrounding a Long-Running Command in Fish Shell\nDESCRIPTION: Demonstrates how to start a command, stop it with Ctrl-Z, and then continue it in the background using the 'bg' command. The example shows finding JavaScript files across the filesystem.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bg.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfind / -name \"*.js\" >/tmp/jsfiles 2>/dev/null # oh no, this takes too long, let's press Ctrl-z!\nfish: Job 1, 'find / -name \"*.js\" >/tmp/jsfil…' has stopped\nbg\nSend job 1 'find / -name \"*.js\" >/tmp/jsfiles 2>/dev/null' to background\n# I can continue using this shell!\n# Eventually:\nfish: Job 1, 'find / -name \"*.js\" >/tmp/jsfil…' has ended\n```\n\n----------------------------------------\n\nTITLE: Echo with Escape Sequences in Fish Shell\nDESCRIPTION: Shows how to use the -e flag to enable interpretation of escape sequences for newlines\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/echo.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> echo -e 'Top\\nBottom'\nTop\nBottom\n```\n\n----------------------------------------\n\nTITLE: Fish Prompt with Shortened Path\nDESCRIPTION: A prompt function using prompt_pwd to display shortened directory paths.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/prompt.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    string join '' -- (set_color green) (prompt_pwd --full-length-dirs 2) (set_color normal) '>'\nend\n```\n\n----------------------------------------\n\nTITLE: Using complete with force-files option\nDESCRIPTION: The complete command has a new --force-files option to re-enable file completions for commands where they would otherwise be disabled.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_60\n\nLANGUAGE: fish\nCODE:\n```\ncomplete -c sudo -s E --force-files\n```\n\n----------------------------------------\n\nTITLE: Copying a Function in Fish Shell\nDESCRIPTION: This command copies the definition of the `foo` function to a new function named `bar`. This creates a new function with the same body as the original.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/functions.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\"functions -c foo bar\"\n```\n\n----------------------------------------\n\nTITLE: Fish Function: Job Completion Notification\nDESCRIPTION: This Fish shell function, 'notify', beeps when the most recent job completes. It uses '--on-job-exit' to trigger a sub-function when the job finishes, and '--inherit-variable' to access the job id within the sub-function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/function.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nfunction notify\n    set -l job (jobs -l -g)\n    or begin; echo \"There are no jobs\" >&2; return 1; end\n\n    function _notify_job_$job --on-job-exit $job --inherit-variable job\n        echo -n \\a # beep\n        functions -e _notify_job_$job\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Commands from History in Fish Shell\nDESCRIPTION: This example demonstrates how to prevent specific commands (vault, mysql, ls) from being added to the shell history. It uses string matching to identify these commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_should_add_to_history.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_should_add_to_history\n    for cmd in vault mysql ls\n         string match -qr \"^$cmd\" -- $argv; and return 1\n    end\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Private Mode Launch Command\nDESCRIPTION: Command to start Fish shell in private mode, preventing history persistence.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_72\n\nLANGUAGE: fish\nCODE:\n```\nfish --private\n```\n\n----------------------------------------\n\nTITLE: Cleaning All Abbreviations with Abbr Command\nDESCRIPTION: Command to erase all existing abbreviations by using abbr's list functionality to get all abbreviation names and then passing them to the erase function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nabbr --erase (abbr --list)\n```\n\n----------------------------------------\n\nTITLE: Joining Strings with NUL Byte using Fish Shell\nDESCRIPTION: The 'string join0' command concatenates its STRING arguments into a single string separated by a NUL byte, with a trailing NUL byte added. This facilitates usage with tools that process NUL-delimited inputs, like 'sort -z'. It returns an exit status of 0 if at least one join operation is successful. Due to Unix limitations, the result may not function as command arguments.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-join.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nstring join0 [-q | --quiet] [STRING ...]\n```\n\n----------------------------------------\n\nTITLE: Using fish_key_reader to Identify Key Names in Fish Shell\nDESCRIPTION: This snippet shows the usage of the fish_key_reader command to identify the name of a key combination for use in key bindings. It demonstrates the output for the Alt+right-arrow key combination.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_16\n\nLANGUAGE: fish\nCODE:\n```\n> fish_key_reader # Press Alt + right-arrow\nPress a key:\nbind alt-right 'do something'\n```\n\n----------------------------------------\n\nTITLE: Performing multiplication with escaping\nDESCRIPTION: This example shows different ways to perform multiplication using the `math` command.  The asterisk `*` is a glob character and needs to be quoted or escaped.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\n\"math 5 \\\\* 2\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"math \\\"5 * 2\\\"\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"math 5 \\\"*\\\" 2\"\n```\n\n----------------------------------------\n\nTITLE: Deleting History Entries by Prefix\nDESCRIPTION: Demonstrates interactive deletion of history entries that begin with a specific prefix. Allows selecting multiple entries for removal through an interactive prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/history.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhistory delete --prefix \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Appending Directories to PATH - Fish Shell\nDESCRIPTION: This snippet shows a loop in Fish Shell where directories are added to the PATH environment variable if they do not already exist in it. It checks for each directory using the 'contains' command and requires modification of PATH if directories are not present.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/contains.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfor i in ~/bin /usr/local/bin\n    if not contains $i $PATH\n        set PATH $PATH $i\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Prompt Function Definition\nDESCRIPTION: Example of a simple custom prompt function for fish shell\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    set_color $fish_color_cwd\n    echo -n (prompt_pwd)\n    set_color normal\n    echo -n ' > '\nend\n```\n\n----------------------------------------\n\nTITLE: Viewing Function Source in Fish Shell\nDESCRIPTION: Demonstrates how to view the source code of a function in Fish shell using the 'functions' command, showing the 'ls' function as an example.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_13\n\nLANGUAGE: fish\nCODE:\n```\n> functions ls\nfunction ls --description 'List contents of directory'\n    command ls -G $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Path Sort Examples - Fish Shell\nDESCRIPTION: Demonstrates sorting path names with various options including reverse sorting and key-based sorting.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\n>_ path sort 10-foo 2-bar\n2-bar\n10-foo\n\n>_ path sort --reverse 10-foo 2-bar\n10-foo\n2-bar\n\n>_ path sort --unique --key=basename $fish_function_path/*.fish\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Greeting with Universal Variable\nDESCRIPTION: Shows how to set the fish_greeting variable as a universal variable to customize or disable the greeting message displayed when Fish shell starts.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\nset -U fish_greeting\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Greeting Message in Configuration\nDESCRIPTION: Shows how to set the fish greeting variable permanently as a universal or global variable. This is necessary because fish_greeting is no longer implicitly a universal variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nset -U fish_greeting\n```\n\n----------------------------------------\n\nTITLE: Translating Strings in Fish Shell\nDESCRIPTION: The `_` command translates its arguments into the current language, relying on gettext support during the build process. If no translation is available or the support is disabled, it returns the original argument. Language settings are based on the locale specified by the environment variables LANG and LC_MESSAGES.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/_.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n> _ File\n    Datei\n```\n\n----------------------------------------\n\nTITLE: String Substring with End Position\nDESCRIPTION: Extracts a substring from the start to position 3\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nstring sub --end=3 abcde\n```\n\n----------------------------------------\n\nTITLE: Running a Command - Fish Shell\nDESCRIPTION: The command executes a specified program while ignoring any functions or builtins with the same name. It can take various options to modify its behavior, such as printing command paths or checking for command availability.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/command.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command [OPTIONS] [COMMANDNAME [ARG ...]]\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command ls\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command -s ls\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command -q git; and command git log\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command -sq git\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command -q git\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n\"command -vq git\"\n```\n\n----------------------------------------\n\nTITLE: Numerical Comparison Example\nDESCRIPTION: Example demonstrating numerical comparison with test command\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/test.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nif test 42 -eq \"The answer to life, the universe and everything\"\n    echo So long and thanks for all the fish # will not be executed\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Argument Options for Grep's -d Flag in Fish\nDESCRIPTION: This example shows how to define that the '-d' option for the 'grep' command should be followed by one of three specific arguments: 'read', 'skip', or 'recurse'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/complete.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\ncomplete -c grep -s d -x -a \"read skip recurse\"\n```\n\n----------------------------------------\n\nTITLE: Using hexadecimal numbers\nDESCRIPTION: This example demonstrates the use of hexadecimal numbers with the `math` command. The first command interprets `0xFF` as 255. The second command shows that `x` is interpreted as multiplication only when followed by whitespace, otherwise it is parsed as part of a hexadecimal number.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\n\"math 0xFF\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"math 0 x 3\"\n```\n\n----------------------------------------\n\nTITLE: String Trim with Character Set - Fish Shell\nDESCRIPTION: Shows how to use string trim with --right and --chars flags to remove specific characters from the right side of strings.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-trim.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n>_ string trim --right --chars=yz xyzzy zany\nx\nzan\n```\n\n----------------------------------------\n\nTITLE: Using math functions in Fish Shell\nDESCRIPTION: Demonstrates the use of math functions in Fish Shell, including the new log2, max, and min functions. Functions can now be used without parentheses and have the lowest precedence in operations.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_29\n\nLANGUAGE: fish\nCODE:\n```\nmath sin 2 + 6\n```\n\n----------------------------------------\n\nTITLE: Executing Builtin Command in Fish Shell\nDESCRIPTION: This snippet demonstrates how to use the 'builtin' command to execute the 'jobs' builtin, even if a function named 'jobs' exists. It ensures that the shell's builtin command is used rather than any potentially overriding function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/builtin.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nbuiltin jobs\n# executes the jobs builtin, even if a function named jobs exists\n```\n\n----------------------------------------\n\nTITLE: Wrapper for Backwards Compatible Command-Not-Found Handler in Fish\nDESCRIPTION: This snippet demonstrates how to create a wrapper that works with both new and old versions of fish. It defines both the fish_command_not_found function and an event handler that calls it.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_command_not_found.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_command_not_found\n     echo \"G'day mate, could not find your command: $argv\"\nend\n\nfunction __fish_command_not_found_handler --on-event fish_command_not_found\n     fish_command_not_found $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Options with Required Value\nDESCRIPTION: This snippet shows how to define multiple options where the second flag requires a value using the fish_opt command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_opt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset -l options (fish_opt -s h -l help)\nset options $options (fish_opt -s m -l max --required-val)\nargparse $options -- $argv\n```\n\n----------------------------------------\n\nTITLE: Testing if standard input is not a TTY\nDESCRIPTION: These commands demonstrate scenarios where 'isatty' returns a non-zero exit status, indicating that the specified file descriptor is not connected to a terminal.  This includes cases where input is piped, an invalid file descriptor is used, or output is redirected to a file.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/isatty.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\"echo | isatty\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"isatty 9\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"isatty stdout > file\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"isatty 2 2> file\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Sequence Delay in Fish Shell\nDESCRIPTION: This snippet shows how to configure the delay for disambiguating key sequences in Fish shell using the fish_sequence_key_delay_ms variable. It includes an example of binding a key sequence.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_18\n\nLANGUAGE: fish\nCODE:\n```\n# This binds the sequence j,k to switch to normal mode in vi mode.\n# If you kept it like that, every time you press \"j\",\n# fish would wait for a \"k\" or other key to disambiguate\nbind -M insert -m default j,k cancel repaint-mode\n\n# After setting this, fish only waits 200ms for the \"k\",\n# or decides to treat the \"j\" as a separate sequence, inserting it.\nset -g fish_sequence_key_delay_ms 200\n```\n\n----------------------------------------\n\nTITLE: Customizing Git prompt status order in Fish Shell\nDESCRIPTION: Shows how to customize the order of status symbols in the Git prompt for Fish Shell using the __fish_git_prompt_status_order variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_32\n\nLANGUAGE: fish\nCODE:\n```\nset -g __fish_git_prompt_status_order staged stashed dirty\n```\n\n----------------------------------------\n\nTITLE: Defining fish_right_prompt Function Syntax in Fish\nDESCRIPTION: This snippet shows the basic syntax for defining the fish_right_prompt function in the fish shell. The function body is represented by ellipsis, indicating where custom prompt logic should be placed.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_right_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_right_prompt\n    ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using argparse with ignore-unknown option\nDESCRIPTION: The argparse command has a new --ignore-unknown option to keep unrecognized options, allowing multiple argparse passes to parse different sets of options.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_61\n\nLANGUAGE: fish\nCODE:\n```\nargparse --ignore-unknown 'h/help' 'v/verbose' -- $argv\n```\n\n----------------------------------------\n\nTITLE: Tokenizing Current Process for Completions in Fish Shell\nDESCRIPTION: Common usage in completions to get the current process tokenized into separate entries, up to but excluding the currently being completed token.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/commandline.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset -l tokens (commandline -xpc)\n```\n\n----------------------------------------\n\nTITLE: Performing division with zero scale\nDESCRIPTION: This example shows how to use the `--scale` option to set the scale to 0, which truncates the result to an integer. It divides 10.0 by 6.0 and prints the integer part of the result.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n\"math -s0 10.0 / 6.0\"\n```\n\n----------------------------------------\n\nTITLE: String Substring with Negative End Index\nDESCRIPTION: Extracts a substring from the start to the second-to-last character\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstring sub -e -1 abcde\n```\n\n----------------------------------------\n\nTITLE: Using String Split0 for NUL Delimited Strings in Fish Shell\nDESCRIPTION: The `string split0` command splits strings based on the NUL byte, which is particularly useful for handling data that may contain newlines. This command is designed to be used with piping rather than command substitution due to NUL limitations in command-line arguments.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-split.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n>_ count (find . -print0 | string split0)\n42\n```\n\nLANGUAGE: fish\nCODE:\n```\n>_ set foo beta alpha\\ngamma\n>_ set foo (string join0 $foo | sort -z | string split0)\n>_ string escape $foo[1]\nalpha\\ngamma\n```\n\n----------------------------------------\n\nTITLE: Example of String Joining with Delimiter in Fish Shell\nDESCRIPTION: Demonstrates the usage of 'string join' to concatenate numbers from a sequence separated by ellipses (...).\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-join.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n>_ seq 3 | string join ...\n1...2...3\n```\n\n----------------------------------------\n\nTITLE: Setting Exit Status in Fish Shell\nDESCRIPTION: The 'false' command is used to set the exit status to 1, indicating failure. It does not take any parameters and is a built-in command of the Fish shell. Its primary purpose is to facilitate control in scripts where an unsuccessful command outcome is needed.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/false.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``false`` sets the exit status to 1.\n```\n\n----------------------------------------\n\nTITLE: Binding Ctrl-G to Run Git Diff and Repaint in Fish\nDESCRIPTION: This example shows how to bind Ctrl-G to execute 'git diff' and repaint the command line in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\nbind ctrl-g 'git diff' repaint\n```\n\n----------------------------------------\n\nTITLE: Default Binding Example in fish\nDESCRIPTION: Example showing how to set the default binding for unbound keys to the self-insert function\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nbind '' self-insert\n```\n\n----------------------------------------\n\nTITLE: Backwards Compatible Command-Not-Found Handler for Fish\nDESCRIPTION: This example shows how to define a command-not-found handler that works with older versions of fish using the fish_command_not_found event. It prints a custom message when a command is not found.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_command_not_found.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nfunction __fish_command_not_found_handler --on-event fish_command_not_found\n     echo COMMAND WAS NOT FOUND MY FRIEND $argv[1]\nend\n```\n\n----------------------------------------\n\nTITLE: Fish Exit Event Handler\nDESCRIPTION: Function definition for handling Fish shell exit events.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfunction on_exit --on-event fish_exit\n    echo fish is now exiting\nend\n```\n\n----------------------------------------\n\nTITLE: Setting fish_kill_signal Variable in Fish\nDESCRIPTION: A new variable 'fish_kill_signal' is set to the signal that terminated the last foreground job, or 0 if the job exited normally.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_37\n\nLANGUAGE: fish\nCODE:\n```\necho $fish_kill_signal\n```\n\n----------------------------------------\n\nTITLE: Clearing Command History in Fish Shell\nDESCRIPTION: Demonstrates how to completely clear the command history using the history clear command. This operation removes all previously recorded commands from the history file.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/history.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhistory clear\n```\n\n----------------------------------------\n\nTITLE: String Length Calculation in Fish Shell\nDESCRIPTION: This example demonstrates how to use the `string length` command to calculate the length of a string in the fish shell. It prints the length of the string 'hello, world', which is 12 characters.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-length.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string length 'hello, world'\\n12\"\n```\n\n----------------------------------------\n\nTITLE: Performing division with default scale\nDESCRIPTION: This example demonstrates division using the `math` command, showing the default scale (number of decimal places) of 6. It divides 10 by 6 and prints the result with 6 decimal places.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\"math 10 / 6\"\n```\n\n----------------------------------------\n\nTITLE: Calculating combinations\nDESCRIPTION: This example calculates the number of possible 6-from-49 lotto picks using the `ncr` function (combinations).\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_11\n\nLANGUAGE: fish\nCODE:\n```\n\"math 'ncr(49,6)'\"\n```\n\n----------------------------------------\n\nTITLE: String Substring with Negative Start Index\nDESCRIPTION: Extracts a substring starting from the second-to-last character to the end\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstring sub --start=-2 abcde\n```\n\n----------------------------------------\n\nTITLE: Executing Commands Conditionally with Fish Shell\nDESCRIPTION: This snippet demonstrates the use of the 'or' command in Fish shell to handle conditional execution based on command success. If the 'make' command fails, 'make clean' is executed to remove generated files. There are no additional dependencies, and the snippet relies on standard Fish shell syntax.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/or.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake; and make install; or make clean\n```\n\n----------------------------------------\n\nTITLE: String Substring Basic Usage in Fish Shell\nDESCRIPTION: Extracts a substring of length 2 from the start of the string\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstring sub --length 2 abcde\n```\n\n----------------------------------------\n\nTITLE: Defining fish_status_to_signal Command Synopsis in Fish\nDESCRIPTION: This snippet shows the synopsis for using the fish_status_to_signal command, which takes a numeric argument representing an exit code.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_status_to_signal.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfish_status_to_signal NUM\n```\n\n----------------------------------------\n\nTITLE: Setting Signal Handler in Fish Shell\nDESCRIPTION: Example showing how to set up a trap handler for SIGUSR1 signal that prints a stack trace whenever the signal is received by the shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/trap.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ntrap \"status --print-stack-trace\" SIGUSR1\n```\n\n----------------------------------------\n\nTITLE: String Replace Regex with Newline Insertion in Fish\nDESCRIPTION: This demonstrates inserting a newline character using `string replace -r`. It replaces the phrase \"\\s*newline\\s*\" with \"\\n\" to insert newlines.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-replace.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string replace -r '\\s*newline\\s*' '\\n' 'put a newline here'\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic fish_breakpoint_prompt Function\nDESCRIPTION: Empty function declaration showing the basic structure of the fish_breakpoint_prompt function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_breakpoint_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_breakpoint_prompt\n    ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using fish_status_to_signal Function in Fish\nDESCRIPTION: A new 'fish_status_to_signal' function for transforming exit statuses to signal names has been added.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_44\n\nLANGUAGE: fish\nCODE:\n```\nfish_status_to_signal $status\n```\n\n----------------------------------------\n\nTITLE: Starting Fish Shell in Terminal\nDESCRIPTION: Basic commands to start and exit a Fish shell session.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n> fish\n> exit\n```\n\n----------------------------------------\n\nTITLE: String Length with Newline and Visible Width in Fish Shell\nDESCRIPTION: This example demonstrates how `string length --visible` handles newline characters (`\\n`).  It counts each line separately, printing the length of each line. In this case, it prints the length of \"a\" (1) and then the length of \"bc\" (2).\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-length.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string length --visible a\\nbc\\n# counts \\\"a\\\" and \\\"bc\\\" as separate lines, so it prints width for each\\n1\\n2\"\n```\n\n----------------------------------------\n\nTITLE: Checking if a builtin or command exists\nDESCRIPTION: The -q option can be used with builtin and command to query if a builtin or command exists, providing a consistent way to check command availability.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_54\n\nLANGUAGE: fish\nCODE:\n```\nif builtin -q some_builtin\n    echo \"Builtin exists\"\nend\n\nif command -q some_command\n    echo \"Command exists\"\nend\n```\n\n----------------------------------------\n\nTITLE: Forcing Move of Existing Path Entry\nDESCRIPTION: Using the -m/--move flag to reposition an existing path entry to the front\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_add_path.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path -m ~/.local/bin\n```\n\n----------------------------------------\n\nTITLE: Using Contains Command in Conditional Statements - Fish Shell\nDESCRIPTION: This code sample demonstrates how to use the 'contains' command in Fish Shell to check if a list of animals contains a specific item ('cat') and outputs a message if the condition is met. It requires a predefined variable for the list of animals.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/contains.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nif contains cat $animals\n   echo Your animal list is evil!\nend\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Configuration Example\nDESCRIPTION: Example of interactive shell configuration check in config.fish\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nif status is-interactive\n    # use the coolbeans theme\n    fish_config theme choose coolbeans\nend\n```\n\n----------------------------------------\n\nTITLE: Searching History Items Containing Text in Fish\nDESCRIPTION: Example of using the history builtin to search for history items containing specific text.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_81\n\nLANGUAGE: fish\nCODE:\n```\nhistory --contains foo\n```\n\n----------------------------------------\n\nTITLE: Converting FFI job list to Rust Slice\nDESCRIPTION: This Rust function defines how to handle shared pointers in FFI interactions by converting a raw pointer structure to a Rust slice, facilitating safer access to jobs from C++.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/rust-devel.md#2025-04-21_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\npub fn get_jobs(ffi_jobs: &ffi::RustFFIJobList) -> &[SharedPtr<job_t>] {\n    unsafe { slice::from_raw_parts(ffi_jobs.jobs, ffi_jobs.count) }\n}\n```\n\n----------------------------------------\n\nTITLE: Using end with various control structures in Fish shell\nDESCRIPTION: Shows syntax for terminating function definitions, if statements with optional else clauses, switch statements with cases, while loops, and for loops in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/end.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction NAME [OPTIONS]; COMMANDS ...; end\nif CONDITION; COMMANDS_TRUE ...; [else; COMMANDS_FALSE ...;] end\nswitch VALUE; [case [WILDCARD ...]; [COMMANDS ...]; ...] end\nwhile CONDITION; COMMANDS ...; end\nfor VARNAME in [VALUES ...]; COMMANDS ...; end\n```\n\n----------------------------------------\n\nTITLE: Profiling fish Startup\nDESCRIPTION: Profiles the startup time of the fish shell to determine what configuration elements take the most time. The output is directed to a specified profile file for further analysis.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nfish --profile-startup /tmp/start.prof -ic exit\nsort -nk2 /tmp/start.prof\n```\n\n----------------------------------------\n\nTITLE: Building Locally Without Code Signing - Shell\nDESCRIPTION: This shell script runs the `make_pkg.sh` script to build macOS packages locally without code signing or notarization. By default, it places the packages in the `~/fish_built` directory. However, these packages will produce warnings during installation due to the lack of signing.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/mac-artifacts.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> ./build_tools/make_pkg.sh\n```\n\n----------------------------------------\n\nTITLE: Required Terminal Control Sequences\nDESCRIPTION: Essential control sequences that must be implemented by terminals to enable basic fish shell functionality. Includes cursor movement, screen clearing, and device attribute commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/terminal-compatibility.rst#2025-04-21_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n\\r - Move cursor to beginning of line\n\\n - Move cursor down one line\n\\e[ Ps A - Move cursor up Ps columns\n\\e[ Ps C - Move cursor right Ps columns\n\\x08 - Move cursor left one column\n\\e[ Ps D - Move cursor left Ps times\n\\e[H - Set cursor position\n\\e[K - Clear to end of line\n\\e[J - Clear to end of screen\n\\e[2J - Clear screen\n\\e[0c - Request primary device attribute\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Buffer in Fish Shell\nDESCRIPTION: Example of using the commandline command to replace the current job under the cursor with the third item from the command line history.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/commandline.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ncommandline -j $history[3]\n```\n\n----------------------------------------\n\nTITLE: Basic Time Command Example with String Repeat\nDESCRIPTION: Example showing timing of string repetition and grep command, demonstrating both fish internal and external command timing metrics.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/time.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ntime string repeat -n 10000000 y\\n | command grep y >/dev/null\n```\n\n----------------------------------------\n\nTITLE: Using the exit Command in Fish Shell\nDESCRIPTION: The 'exit' command is used to exit the shell. It can be called with an optional exit code. If no code is provided, the exit status of the last executed command is used. The command behaves differently when used in a sourced file.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/exit.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nexit [CODE]\n```\n\n----------------------------------------\n\nTITLE: Adding Ruby Homebrew Path\nDESCRIPTION: Simple example of adding a Ruby installation path from Homebrew\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_add_path.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path /usr/local/opt/ruby/bin\n```\n\n----------------------------------------\n\nTITLE: Evaluating Commands in Fish Shell\nDESCRIPTION: This snippet demonstrates how to define a command string and evaluate it using the eval command in Fish shell. The provided example shows how to execute the ls command and truncate each filename output to a maximum of 12 characters. The key functionality includes command evaluation and string manipulation using shell variables.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/eval.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nset cmd ls \\| cut -c 1-12\neval $cmd\n```\n\n----------------------------------------\n\nTITLE: Lazy Evaluation with Combiners in Fish - Example 2\nDESCRIPTION: Shows how combiners use lazy evaluation, only executing commands as needed. This example demonstrates a scenario that runs quickly because the first condition fails immediately.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_22\n\nLANGUAGE: fish\nCODE:\n```\nif false; and sleep 2\n    echo 'How did I get here? This should be impossible'\nend\n```\n\n----------------------------------------\n\nTITLE: Using string split with --fields Option in Fish\nDESCRIPTION: The 'string split' command has a new '--fields' option to specify fields to output, similar to 'cut -f'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_40\n\nLANGUAGE: fish\nCODE:\n```\nstring split , --fields 1,3 'a,b,c,d'\n```\n\n----------------------------------------\n\nTITLE: Including Contributing Guidelines in RST Documentation\nDESCRIPTION: Sphinx documentation include directive that references the CONTRIBUTING.rst file from the parent directory.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Example of NUL-Separated String Joining in Fish Shell\nDESCRIPTION: Illustrates the 'string join0' command to generate a NUL-separated list of filenames for disk usage analysis via the GNU 'du' command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-join.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n>_ string join0 file1 file2 file\\nwith\\nmultiple\\nlines | du --files0-from=-\n```\n\n----------------------------------------\n\nTITLE: Defining Signal Handler\nDESCRIPTION: Example of creating a function that handles the WINCH signal in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_69\n\nLANGUAGE: fish\nCODE:\n```\nfunction my_signal_handler --on-signal WINCH\n    echo Got WINCH signal!\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Vim File Type and Text Width in reStructuredText\nDESCRIPTION: This snippet sets Vim editor options for the file, specifying the file type as reStructuredText and disabling text wrapping.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_84\n\nLANGUAGE: rst\nCODE:\n```\n.. vim: ft=rst : tw=0 :\n```\n\n----------------------------------------\n\nTITLE: Setting fish_escape_delay_ms Variable for Meta Key Configuration\nDESCRIPTION: Configuration for setting escape as the Meta modifier key with a 300ms delay. This allows fish to wait after seeing an escape character before determining if it's a standalone key or a modifier.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_74\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_escape_delay_ms 300\n```\n\n----------------------------------------\n\nTITLE: Mode Change Command in fish\nDESCRIPTION: Command to change the fish binding mode programmatically from within a function\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nset fish_bind_mode MODE\n```\n\n----------------------------------------\n\nTITLE: Setting a List-Based Editor Variable in Fish\nDESCRIPTION: Example showing how to set the EDITOR environment variable as a list in Fish shell, allowing for editors with arguments.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_79\n\nLANGUAGE: fish\nCODE:\n```\nset EDITOR gvim -f\n```\n\n----------------------------------------\n\nTITLE: Executing Command with Fish Shell exec\nDESCRIPTION: Replaces the current shell process with a specified command, terminating the current shell session. Cannot be used in pipelines.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/exec.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nexec emacs\n```\n\n----------------------------------------\n\nTITLE: Initialize and Run Script with fish\nDESCRIPTION: Run a target script while sourcing an initial configuration file. The --init-cmd option sources the specified file before executing the script.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfish --init-cmd \"source otherfile\" script.fish\n```\n\n----------------------------------------\n\nTITLE: Path Change-Extension Examples - Fish Shell\nDESCRIPTION: Shows how to change or remove file extensions using the change-extension subcommand.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/path.rst#2025-04-21_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\n>_ path change-extension mp4 ./foo.wmv\n./foo.mp4\n\n>_ path change-extension .mp4 ./foo.wmv\n./foo.mp4\n\n>_ path change-extension '' ../banana\n../banana\n\n>_ path change-extension '' ~/.config\n/home/alfa/.config\n\n>_ path change-extension '' ~/.config.d\n/home/alfa/.config\n\n>_ path change-extension '' ~/.config.\n/home/alfa/.config\n```\n\n----------------------------------------\n\nTITLE: Creating a Command-not-found Handler in Fish\nDESCRIPTION: Example of overriding the default command-not-found handler by defining a custom function in config.fish. This allows for custom behavior when a command is not found.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_75\n\nLANGUAGE: fish\nCODE:\n```\nfunction __fish_command_not_found_handler\n    # Custom handler code here\nend\n```\n\n----------------------------------------\n\nTITLE: Using fish_commandline_prepend and fish_commandline_append functions\nDESCRIPTION: Demonstrates the use of new functions fish_commandline_prepend and fish_commandline_append for toggling prefixes or suffixes on the current command line in Fish Shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_31\n\nLANGUAGE: fish\nCODE:\n```\nfish_commandline_prepend sudo\nfish_commandline_append '&'\n```\n\n----------------------------------------\n\nTITLE: Setting Variable Based on Parsed Flag\nDESCRIPTION: This snippet shows how to set a variable based on whether a flag is present after parsing arguments with `argparse`. It checks if the `_flag_path` variable is set and, if so, sets the `var` variable to `PATH`.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/argparse.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nset -l var fish_user_paths\nset -q _flag_path\nand set var PATH\n```\n\n----------------------------------------\n\nTITLE: Using the Default Command-Not-Found Handler in Fish\nDESCRIPTION: This snippet demonstrates how to use fish's built-in default handler for command-not-found situations. It calls the __fish_default_command_not_found_handler function with all arguments passed to it.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_command_not_found.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_command_not_found\n    __fish_default_command_not_found_handler $argv\nend\n```\n\n----------------------------------------\n\nTITLE: Example Output of Jobs Command\nDESCRIPTION: An example showing the output format of the 'jobs' command when it is executed, detailing how jobs are displayed.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/jobs.rst#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n   Job Group   State   Command\n   2   26012   running nc -l 55232 < /dev/random &\n   1   26011   running python tests/test_11.py &\n```\n\n----------------------------------------\n\nTITLE: Creating a History Expansion Abbreviation in Fish Shell\nDESCRIPTION: Defines a function to retrieve the last history item and creates an abbreviation '!!' that expands to the last command, similar to Bash's history expansion. Uses the new position-anywhere feature in Fish 3.6.0+.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_10\n\nLANGUAGE: fish\nCODE:\n```\nfunction last_history_item; echo $history[1]; end\nabbr -a !! --position anywhere --function last_history_item\n```\n\n----------------------------------------\n\nTITLE: Executing prompt_login in Fish Shell\nDESCRIPTION: This code snippet demonstrates the direct execution of the `prompt_login` command in the fish shell.  It showcases the expected output format, which includes the username and hostname.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/prompt_login.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\">_ prompt_login\nroot@bananablaster\"\n```\n\n----------------------------------------\n\nTITLE: Disowning all jobs in Fish shell\nDESCRIPTION: This example uses the 'jobs -p' command to retrieve the PIDs of all current jobs, and then uses 'disown' to remove them all from the job list. This allows all background processes to continue running after the Fish shell session ends.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/disown.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\"disown (jobs -p)\"\n```\n\n----------------------------------------\n\nTITLE: Command Substitution Examples\nDESCRIPTION: Demonstrates how fish handles command substitution and output splitting\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\ncount (printf '%s ' a b c)\ncount (printf '%s\\n' a b c)\n```\n\n----------------------------------------\n\nTITLE: Inline Comment in Fish Shell\nDESCRIPTION: Demonstrates how to add an inline comment after a command in Fish shell. The example shows setting a global environment variable with an explanatory comment.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_14\n\nLANGUAGE: fish\nCODE:\n```\nset -gx EDITOR emacs # I don't like vim.\n```\n\n----------------------------------------\n\nTITLE: Converting Bash Subshells to Fish Alternatives\nDESCRIPTION: This snippet demonstrates how to replace Bash subshell grouping with Fish's 'begin/end' blocks. Unlike Bash, Fish's pipe operations don't create separate processes, allowing variable modifications to persist.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n(foo; bar) | baz\n# when it should really have been:\n{ foo; bar; } | baz\n```\n\nLANGUAGE: fish\nCODE:\n```\nbegin; foo; bar; end | baz\n```\n\nLANGUAGE: fish\nCODE:\n```\nfoo | while read bar\n    set -g VAR VAL\n    baz &\nend\n\necho $VAR # will print VAL\njobs # will show \"baz\"\n```\n\n----------------------------------------\n\nTITLE: Backgrounding a Job by Job Number in Fish Shell\nDESCRIPTION: Illustrates how to background a specific job using its job number with the 'bg' command in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bg.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbg %2\n```\n\n----------------------------------------\n\nTITLE: Setting Escape Delay in Fish Shell\nDESCRIPTION: This snippet demonstrates how to set the escape delay in Fish shell using the fish_escape_delay_ms variable. This affects how Fish distinguishes between the Escape key and Alt key combinations.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_17\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_escape_delay_ms 100\n```\n\n----------------------------------------\n\nTITLE: Accessing Universal Variables in Fish Shell\nDESCRIPTION: Shows how to access a previously set universal variable from another Fish shell instance, demonstrating the persistence of these variables.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_27\n\nLANGUAGE: fish\nCODE:\n```\n> echo $EDITOR\nvim\n```\n\n----------------------------------------\n\nTITLE: Bitwise XOR with a mask\nDESCRIPTION: This example demonstrates using bitwise XOR to negate a specific number with a specified width.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_13\n\nLANGUAGE: fish\nCODE:\n```\n\"> math --base=hex bitxor 0x0F, 0xFF\\n0xF0\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"> math --base=hex bitxor 0x2, 0x3\\n# Here we mask with 0x3 == 0b111, so our number is 3 bits wide\\n# Only the 1 bit isn't set.\\n0x1\"\n```\n\n----------------------------------------\n\nTITLE: String Replace Regex with Capturing Groups in Fish\nDESCRIPTION: This snippet utilizes capturing groups in a regular expression to swap the order of two words.  It replaces \"left right\" with \"right left $\".\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-replace.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string replace -r '(\\w+)\\s+(\\w+)' '$2 $1 $$' 'left right'\"\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of fish_status_to_signal in Fish Shell\nDESCRIPTION: This snippet shows an interactive example of using fish_status_to_signal to convert an exit code (from a interrupted sleep command) to a human-readable signal name.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_status_to_signal.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n>_ sleep 5\n^C⏎\n>_ fish_status_to_signal $status\nSIGINT\n```\n\n----------------------------------------\n\nTITLE: Command Substitution Example in Fish Shell\nDESCRIPTION: Example showing Fish's command substitution syntax, which replaces both subshells and process substitution found in other shells.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/design.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n``fish``\n```\n\n----------------------------------------\n\nTITLE: Enabling Vi Mode in Fish Shell\nDESCRIPTION: Running the fish_vi_key_bindings function to switch fish into Vi mode, which provides key bindings familiar to users of the Vi editor. The older fish_vi_mode function is deprecated.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_77\n\nLANGUAGE: fish\nCODE:\n```\nfish_vi_key_bindings\n```\n\n----------------------------------------\n\nTITLE: Example Fish Title Function\nDESCRIPTION: This example demonstrates how to set a custom terminal title using the `fish_title` function.  It uses the `fish_prompt_pwd_dir_length` variable and the first argument passed to the function (the last executed command) to create a dynamic title string showing the current directory and command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_title.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n   function fish_title\n       set -q argv[1]; or set argv fish\n       # Looks like ~/d/fish: git log\n       # or /e/apt: fish\n       echo (fish_prompt_pwd_dir_length=1 prompt_pwd): $argv; \n   end\n```\n\n----------------------------------------\n\nTITLE: Using type Command in Fish Shell\nDESCRIPTION: Example showing how to use the 'type' command to identify the nature of the 'fg' command in Fish shell. The output indicates that 'fg' is a shell builtin.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/type.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n>_ type fg\nfg is a builtin\n```\n\n----------------------------------------\n\nTITLE: Erasing a Function in Fish Shell\nDESCRIPTION: This command erases the function named `bar`. This removes the function definition from the current session and prevents it from autoloading.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/functions.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\"functions -e bar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vi Mode Cursor Shapes in Fish Shell\nDESCRIPTION: Configuration snippet for customizing cursor shapes in different Vi modes within Fish shell. Sets cursor appearances for normal, insert, replace, and external modes.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Emulates vim's cursor shape behavior\n# Set the normal and visual mode cursors to a block\nset fish_cursor_default block\n# Set the insert mode cursor to a line\nset fish_cursor_insert line\n# Set the replace mode cursors to an underscore\nset fish_cursor_replace_one underscore\nset fish_cursor_replace underscore\n# Set the external cursor to a line. The external cursor appears when a command is started. \n# The cursor shape takes the value of fish_cursor_default when fish_cursor_external is not specified.\nset fish_cursor_external line\n# The following variable can be used to configure cursor shape in\n# visual mode, but due to fish_cursor_default, is redundant here\nset fish_cursor_visual block\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenSUSE's Command-Not-Found Handler in Fish\nDESCRIPTION: This example shows how to use OpenSUSE's command-not-found utility within the fish_command_not_found function. It delegates the handling to the system's command-not-found binary.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_command_not_found.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_command_not_found\n    /usr/bin/command-not-found $argv[1]\nend\n```\n\n----------------------------------------\n\nTITLE: String Length with Quiet Mode in Fish Shell\nDESCRIPTION: This example shows how to use the `string length` command with the `-q` flag to check if a string is empty. It sets the variable `str` to 'foo', then uses `string length -q $str` to check its length and prints the exit status.  An exit status of 0 indicates the string is non-empty.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-length.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\">_ set str foo\\n>_ string length -q $str; echo $status\\n0\\n# Equivalent to test -n \\\"$str\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Lazy Evaluation with Combiners in Fish - Example 1\nDESCRIPTION: Shows how combiners use lazy evaluation, only executing commands as needed. This example demonstrates a scenario that always takes 2 seconds to run because the sleep must be evaluated.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_21\n\nLANGUAGE: fish\nCODE:\n```\nif sleep 2; and false\n    echo 'How did I get here? This should be impossible'\nend\n```\n\n----------------------------------------\n\nTITLE: Colored Fish Prompt\nDESCRIPTION: A prompt function with color formatting using set_color command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/prompt.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    string join '' -- (set_color green) $PWD (set_color normal) '>'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Option Specification\nDESCRIPTION: This snippet demonstrates how to define a single option specification for the boolean help flag using the fish_opt command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_opt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nset -l options (fish_opt -s h -l help)\nargparse $options -- $argv\n```\n\n----------------------------------------\n\nTITLE: Printing and Formatting PWD for Shell Prompts in Fish-Shell\nDESCRIPTION: The 'prompt_pwd' function is used to print the current working directory for use in prompts, replacing the home directory with \"~\" and shortening path components. It uses options like '--dir-length' and '--full-length-dirs' to customize the output, overriding environment variables like 'fish_prompt_pwd_dir_length'. Inputs include optional path arguments to shorten, with outputs as formatted directory paths. It supports usage through shell command options with help available via '--help'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/prompt_pwd.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nprompt_pwd\n```\n\n----------------------------------------\n\nTITLE: Defining File Argument Completion for GCC's -o Option in Fish\nDESCRIPTION: This snippet demonstrates how to specify that the '-o' short option for the 'gcc' command requires a file argument.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/complete.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\ncomplete -c gcc -s o -r\n```\n\n----------------------------------------\n\nTITLE: Status Check Examples\nDESCRIPTION: Examples showing how to test command exit status\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/test.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nif test $status -eq 0\n    echo \"Previous command succeeded\"\nend\n```\n\nLANGUAGE: fish\nCODE:\n```\nif test ! $status -eq 0\n    echo \"Previous command failed\"\nend\n```\n\nLANGUAGE: fish\nCODE:\n```\nif test $status -ne 0\n    echo \"Previous command failed\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Hybrid Key Bindings in Fish Shell\nDESCRIPTION: Defines a custom key binding function that combines both Emacs and Vi style bindings. This function sets up default (Emacs) bindings first, then adds Vi bindings without erasing the Emacs ones.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_10\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_hybrid_key_bindings --description \\\n\"Vi-style bindings that inherit emacs-style bindings in all modes\"\n    for mode in default insert visual\n        fish_default_key_bindings -M $mode\n    end\n    fish_vi_key_bindings --no-erase\nend\nset -g fish_key_bindings fish_hybrid_key_bindings\n```\n\n----------------------------------------\n\nTITLE: Using fish_job_summary Function in Fish\nDESCRIPTION: A new 'fish_job_summary' function is called whenever a background job stops or ends, or any job terminates from a signal. The default behavior can be customized by redefining it.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_41\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_job_summary\n    echo \"Custom job summary: $argv\"\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Build Type for Fish Shell\nDESCRIPTION: Validates the specified build type against a list of supported types (Release, RelWithDebInfo, Debug) and displays a warning message if an unsupported build type is selected.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(build_types Release RelWithDebInfo Debug \"\")\nif(NOT \"${CMAKE_BUILD_TYPE}\" IN_LIST build_types)\n  message(WARNING \"Unsupported build type ${CMAKE_BUILD_TYPE}. If this doesn't build, try one of Release, RelWithDebInfo or Debug\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Fish Shell Prompt Function\nDESCRIPTION: This snippet demonstrates how to define a custom prompt function using the prompt_hostname utility within the fish shell. The function outputs a prompt indicating the current user and a shortened hostname, followed by the present working directory and a dollar symbol.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/prompt_hostname.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\\n    echo -n (whoami)@(prompt_hostname) (prompt_pwd) '\\$ '\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining the Default fish_mode_prompt Function in Fish Shell\nDESCRIPTION: This snippet defines the default appearance of the mode indicator for the vi mode in Fish shell. It uses the $fish_bind_mode variable to determine the current vi mode and outputs the corresponding indicator. This function can be customized or defined as empty to remove the indicators.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_mode_prompt.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_mode_prompt\n    echo -n \"$fish_bind_mode \"\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fish Error Highlighting with Squiggly Lines\nDESCRIPTION: Shows how Fish Shell 3.6.1 highlights syntax errors with squiggly lines that mark the entire extent of the error, improving on the previous caret-only indication.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_13\n\nLANGUAGE: fish\nCODE:\n```\nchecks/set.fish (line 471): for: a,b: invalid variable name. See `help identifiers`\nfor a,b in y 1 z 3\n    ^~^\n```\n\n----------------------------------------\n\nTITLE: Variable Comparison Between Bash and Fish\nDESCRIPTION: Shows how variable handling differs between Bash and Fish, particularly in word splitting behavior.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfoo=\"bar baz\"\nprintf '\"%s\"\\n' $foo\n```\n\nLANGUAGE: fish\nCODE:\n```\nset foo \"bar baz\"\nprintf '\"%s\"\\n' $foo\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Status Variable in Fish Shell\nDESCRIPTION: This snippet shows how the status and pipestatus variables work in Fish Shell, particularly the difference between them when using the 'not' operator in a pipeline.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_61\n\nLANGUAGE: fish\nCODE:\n```\nnot cat file | grep -q fish\necho status is: $status pipestatus is $pipestatus\n```\n\n----------------------------------------\n\nTITLE: Using History Command with Search Prefix in Fish\nDESCRIPTION: Example of using the history builtin to search for history items beginning with a specific prefix.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_80\n\nLANGUAGE: fish\nCODE:\n```\nhistory --prefix echo\n```\n\n----------------------------------------\n\nTITLE: File Removal with Quoted Arguments\nDESCRIPTION: Shows how to handle filenames containing spaces using quotes in fish shell\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nrm \"my file.txt\"\n```\n\n----------------------------------------\n\nTITLE: Fish Shell Environment Variables\nDESCRIPTION: Example of common fish shell environment variable usage and paths\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$XDG_CACHE_HOME/fish\" or \"~/.cache/fish\n```\n\n----------------------------------------\n\nTITLE: Conditional History Addition Based on Command and Directory in Fish Shell\nDESCRIPTION: This example shows how to prevent 'git pull' commands from being added to history when in a specific directory. It uses string matching for both the command and the current working directory.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_should_add_to_history.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_should_add_to_history\n    # I don't want `git pull`s in my history when I'm in a specific repository\n    if string match -qr '^git pull'\n    and string match -qr \"^/home/me/my-secret-project/\" -- (pwd -P)\n        return 1\n    end\n\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Building Fish Documentation with Sphinx\nDESCRIPTION: Command to build the Fish shell documentation using Sphinx. This generates HTML documentation in the specified output directory.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsphinx-build -j 8 -b html -n doc_src/ /tmp/fish-doc/\n```\n\n----------------------------------------\n\nTITLE: Using status dirname and basename in Fish\nDESCRIPTION: The 'status' command gained new 'dirname' and 'basename' convenience subcommands to get just the directory to the running script or the name of it.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_42\n\nLANGUAGE: fish\nCODE:\n```\necho (status dirname)\necho (status basename)\n```\n\n----------------------------------------\n\nTITLE: Misleading Combiner Chain in Fish\nDESCRIPTION: Shows a problematic chain of combiners that can lead to unexpected behavior due to step-by-step execution. The return statement will execute even when the test succeeds.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_24\n\nLANGUAGE: fish\nCODE:\n```\ntest -e /etc/my.config\nor echo \"OH NO WE NEED A CONFIG FILE\"\nand return 1\n```\n\n----------------------------------------\n\nTITLE: Enabling informative status in fish_hg_prompt\nDESCRIPTION: This snippet shows how to enable the more informative status display in `fish_hg_prompt` by setting the `$fish_prompt_hg_show_informative_status` variable.  This requires using `set --universal` to make the variable globally available for every shell instance. Enabling this will run `hg status`.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_hg_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset --universal fish_prompt_hg_show_informative_status\n```\n\n----------------------------------------\n\nTITLE: Basic fish_greeting Function Declaration Syntax in Fish Shell\nDESCRIPTION: Shows the basic syntax for declaring a custom fish_greeting function in Fish shell. The function body would contain code to display a welcome message when a Fish shell starts interactively.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_greeting.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_greeting\n      ...\n  end\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Jobs in Fish Shell\nDESCRIPTION: The 'jobs' command in Fish Shell prints a list of currently running jobs and their status.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/jobs.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\njobs [OPTIONS] [PID | %JOBID]\n```\n\n----------------------------------------\n\nTITLE: Implementing False Command in Fish Shell Function\nDESCRIPTION: A simple function that demonstrates the `return` command by always returning a non-zero exit status, simulating the behavior of the standard false command\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/return.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction false\n    return 1\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Autosuggestions in Fish Shell\nDESCRIPTION: Command to disable the autosuggestion feature in Fish shell by setting the fish_autosuggestion_enabled global variable to 0.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_autosuggestion_enabled 0\n```\n\n----------------------------------------\n\nTITLE: Using string pad Subcommand in Fish\nDESCRIPTION: A new subcommand 'string pad' allows extending strings to a given width.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_38\n\nLANGUAGE: fish\nCODE:\n```\nstring pad -w 10 'hello'\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Date-based Right Prompt in Fish\nDESCRIPTION: This example demonstrates a simple implementation of the fish_right_prompt function. It displays the current date in MM/DD/YY format on the right side of the terminal window.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_right_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_right_prompt -d \"Write out the right prompt\"\n    date '+%m/%d/%y'\nend\n```\n\n----------------------------------------\n\nTITLE: Building Fish as a self-installing binary\nDESCRIPTION: This shows commands used to build fish as a self-installing binary using cargo. This method allows easily copying to another system where it can extract supporting files. The first command installs from the local path and the second builds a release binary.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path .\n```\n\nLANGUAGE: bash\nCODE:\n```\n# or `cargo build --release` and copy target/release/fish{,_indent,_key_reader} wherever you want\n```\n\n----------------------------------------\n\nTITLE: Finding Fish Shell Vendor Completions Directory Using pkg-config\nDESCRIPTION: Command to discover the Fish shell vendor completions directory path using the pkg-config framework. This allows developers to properly install their program's completions in the appropriate system location.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/completions.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npkg-config --variable completionsdir fish\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias with Escaped Spaces in Fish Shell\nDESCRIPTION: This example shows how to create an alias for a command path containing spaces. The spaces in the command path need to be escaped to prevent them from being interpreted as argument separators.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/alias.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n# This needs to have the spaces escaped or \"Chrome.app...\"\n# will be seen as an argument to \"/Applications/Google\":\nalias chrome='/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome'\n```\n\n----------------------------------------\n\nTITLE: Example prompt using fish_hg_prompt\nDESCRIPTION: This is an example prompt definition showcasing usage of `fish_hg_prompt`. It first enables the informative status. Then it prints the current working directory and the output of `fish_hg_prompt`, followed by a '$' character.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_hg_prompt.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    ...\n    set -g fish_prompt_hg_show_informative_status\n    printf '%s %s$' $PWD (fish_hg_prompt)\nend\n```\n\n----------------------------------------\n\nTITLE: Using fish_clipboard_paste Command in fish Shell\nDESCRIPTION: Examples of how to use the fish_clipboard_paste command to retrieve text from the system clipboard, either directly or piped to another command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_clipboard_paste.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfish_clipboard_paste\n```\n\nLANGUAGE: shell\nCODE:\n```\nfish_clipboard_paste | foo\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables for a single command\nDESCRIPTION: The VAR=val cmd syntax allows running a command with modified environment variables without affecting the parent shell's environment.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_51\n\nLANGUAGE: fish\nCODE:\n```\nVAR=val command\n```\n\n----------------------------------------\n\nTITLE: Wrapping Git Completions for the 'hub' Command in Fish\nDESCRIPTION: This snippet demonstrates how to make the 'hub' command inherit all completions from the 'git' command using the --wraps option.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/complete.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\ncomplete -c hub -w git\n```\n\n----------------------------------------\n\nTITLE: Setting Error Highlighting Color in Fish Shell\nDESCRIPTION: Command to customize the error highlighting color in Fish shell to bold red text.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset fish_color_error red --bold\n```\n\n----------------------------------------\n\nTITLE: Shell Keyboard Bindings in Vi Mode\nDESCRIPTION: Example of Vi mode keyboard bindings showing clipboard interaction and text manipulation commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"\",+,p\" and \"\",+,y,y\"\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Greeting with Global Variable\nDESCRIPTION: Demonstrates setting a custom greeting message globally in the config.fish file using a global variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_greeting 'Hey, stranger!'\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Grep\nDESCRIPTION: Example of using single quotes to search for a pattern ending with 'enabled)'\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\ngrep 'enabled)$' foo.txt\n```\n\n----------------------------------------\n\nTITLE: Timedatectl Completion Example in Fish\nDESCRIPTION: Comprehensive example showing completion configuration for systemd's timedatectl command, including subcommands, conditions, and descriptions\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/completions.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n# All subcommands that timedatectl knows - this is useful for later.\nset -l commands status set-time set-timezone list-timezones set-local-rtc set-ntp\n\n# Disable file completions for the entire command\n# because it does not take files anywhere\ncomplete -c timedatectl -f\n\n# This line offers the subcommands\ncomplete -c timedatectl -n \"not __fish_seen_subcommand_from $commands\" \\\n    -a \"status set-time set-timezone list-timezones\"\n\n# If the \"set-timezone\" subcommand is used,\ncomplete -c timedatectl -n \"__fish_seen_subcommand_from set-timezone\" \\\n    -a \"(timedatectl list-timezones)\"\n\ncomplete -c timedatectl -n \"not __fish_seen_subcommand_from $commands\" \\\n    -a \"set-local-rtc\" -d \"Maintain RTC in local time\"\n\ncomplete -c timedatectl -n \"__fish_seen_subcommand_from set-local-rtc\" \\\n    -l adjust-system-clock -d 'Synchronize system clock from the RTC'\n\ncomplete -c timedatectl -s h -l help -d 'Print a short help text and exit'\ncomplete -c timedatectl -l version -d 'Print a short version string and exit'\ncomplete -c timedatectl -l no-pager -d 'Do not pipe output into a pager'\n```\n\n----------------------------------------\n\nTITLE: Using path mtime to Check File Modification Times in Fish\nDESCRIPTION: Demonstrates the path mtime command to check the modification timestamp of a file. This example shows how to use the --relative flag to get the time in seconds since the file was last modified.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_11\n\nLANGUAGE: fish\nCODE:\n```\n> touch foo\n> sleep 10\n> path mtime --relative foo\n10\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Debug Prompt in Fish Shell\nDESCRIPTION: A simplified version of the default debugging prompt that displays the current function name and line number. Uses color formatting and status command to retrieve execution context information.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_breakpoint_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_breakpoint_prompt -d \"Write out the debug prompt\"\n    set -l function (status current-function)\n    set -l line (status current-line-number)\n    set -l prompt \"$function:$line >\"\n    echo -ns (set_color $fish_color_status) \"BP $prompt\" (set_color normal) ' '\nend\n```\n\n----------------------------------------\n\nTITLE: Using variables as builtin command names\nDESCRIPTION: The builtin command now correctly handles variable arguments, allowing dynamic selection of which builtin to execute.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_56\n\nLANGUAGE: fish\nCODE:\n```\nset cmd_name echo\nbuiltin $cmd_name \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: String Substring with Start Position and Length\nDESCRIPTION: Extracts a substring starting from position 2 with length 2\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstring sub -s 2 -l 2 abcde\n```\n\n----------------------------------------\n\nTITLE: Running Fish with Temporary Home Directory\nDESCRIPTION: This code runs the Fish shell with a temporary home directory set by 'mktemp -d'. The home directory is set temporarily using either 'set -lx HOME' in a block or 'VAR=VALUE command' syntax.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n> HOME=(mktemp -d) fish\n```\n\nLANGUAGE: shell\nCODE:\n```\n> begin; set -lx HOME (mktemp -d); fish; end\n```\n\n----------------------------------------\n\nTITLE: Counting lines from standard input\nDESCRIPTION: The count command now counts lines fed on standard input in addition to its arguments, making it more versatile for pipeline operations.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_59\n\nLANGUAGE: fish\nCODE:\n```\ncat file.txt | count\n```\n\n----------------------------------------\n\nTITLE: Exporting PATH Variables in Fish Shell\nDESCRIPTION: This example shows how PATH variables in fish are automatically exported in colon-separated format for compatibility with external commands, using the -gx flag to set a global exported variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_60\n\nLANGUAGE: fish\nCODE:\n```\n> set -gx MYPATH /bin /usr/bin /sbin\n> env | grep MYPATH\nMYPATH=/bin:/usr/bin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Defining Event Listener and Blocking Events in Fish Shell\nDESCRIPTION: This snippet demonstrates how to create a function that listens for events, block event delivery, emit an event, and then unblock event delivery in fish shell. It shows the effect of blocking on event propagation.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/block.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n# Create a function that listens for events\nfunction --on-event foo foo; echo 'foo fired'; end\n\n# Block the delivery of events\nblock -g\n\nemit foo\n# No output will be produced\n\nblock -e\n# 'foo fired' will now be printed\n```\n\n----------------------------------------\n\nTITLE: Variable Isolation Between Fish Functions\nDESCRIPTION: Example showing how local variables in one function aren't accessible or modifiable by other called functions. This demonstrates variable scope isolation in function calls.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_45\n\nLANGUAGE: fish\nCODE:\n```\nfunction shiver\n    set phrase 'Shiver me timbers'\nend\n\nfunction avast\n    set --local phrase 'Avast, mateys'\n    # Calling the shiver function here can not\n    # change any variables in the local scope\n    # so phrase remains as we set it here.\n    shiver\n    echo $phrase\nend\navast\n\n# Outputs \"Avast, mateys\"\n```\n\n----------------------------------------\n\nTITLE: Setting File Creation Mask - Fish Shell\nDESCRIPTION: Example of setting the umask to allow read and write permissions for owner only, with no permissions for other users. Shows both octal and symbolic notation methods.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/umask.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\numask 177\n```\n\nLANGUAGE: bash\nCODE:\n```\numask u=rw\n```\n\n----------------------------------------\n\nTITLE: Testing if standard input is a TTY\nDESCRIPTION: These commands test if standard input (file descriptor 0) or standard output (file descriptor 1) or standard error (file descriptor 2) is a terminal device. When run in an interactive shell, where standard input, output, and error are connected to a terminal, the command exits with a return value of zero.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/isatty.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\"isatty\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"isatty stdout\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"isatty 2\"\n\n```\n\nLANGUAGE: fish\nCODE:\n```\n\"echo | isatty 1\"\n\n```\n\n----------------------------------------\n\nTITLE: Using string replace with regex in Fish Shell\nDESCRIPTION: Example demonstrating the regex-easyesc feature which simplifies backslash escaping in replacement expressions for string replace commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_18\n\nLANGUAGE: fish\nCODE:\n```\nstring replace -ra '([ab])' '\\\\$1' foobar\n```\n\n----------------------------------------\n\nTITLE: String Substring with Start and Negative End\nDESCRIPTION: Extracts a substring from position 2 to the second-to-last character\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-sub.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstring sub -s 2 -e -1 abcde\n```\n\n----------------------------------------\n\nTITLE: Example Usage of fish_key_reader\nDESCRIPTION: This example demonstrates how to use `fish_key_reader` to identify the key sequence generated by the up-arrow key. The output provides the `bind` command needed to associate an action with the up-arrow key.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_key_reader.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   > fish_key_reader\n   Press a key:\n   # press up-arrow\n   bind up 'do something'\n```\n\n----------------------------------------\n\nTITLE: Disabling warning-path debug category in Fish Shell\nDESCRIPTION: This command demonstrates how to disable the new warning-path debug category in Fish Shell 3.2, which controls warnings about read-only filesystems.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nfish --debug=-warning-path\n```\n\n----------------------------------------\n\nTITLE: Printing Global Exported Variables in Fish Shell\nDESCRIPTION: This command prints all global and exported variables currently defined in the Fish shell environment. It uses the 'set -gx' option to filter these specific variables.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/set.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> set -gx\n```\n\n----------------------------------------\n\nTITLE: Fish Profile Command Example\nDESCRIPTION: Example of using Fish's profiling capability to measure command execution time.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_71\n\nLANGUAGE: fish\nCODE:\n```\n> fish --profile /tmp/sleep.prof -ic 'sleep 3s'\n> cat /tmp/sleep.prof\nTime    Sum     Command\n3003419 3003419 > sleep 3s\n```\n\n----------------------------------------\n\nTITLE: Optional Terminal Control Sequences\nDESCRIPTION: Additional control sequences for enhanced functionality including text formatting, color support, cursor styling, and terminal-specific features like mouse reporting and clipboard operations.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/terminal-compatibility.rst#2025-04-21_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n\\t - Move to next tab stop\n\\e[m - Reset attributes\n\\e[1m - Bold mode\n\\e[2m - Dim mode\n\\e[3m - Italic mode\n\\e[4m - Underline mode\n\\e[7m - Reverse video mode\n\\e[38;5;Ps m - Select foreground color\n\\e[48;5;Ps m - Select background color\n\\e[38;2;Ps;Ps;Ps m - 24-bit RGB foreground\n\\e[48;2;Ps;Ps;Ps m - 24-bit RGB background\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim for Fish Scripts\nDESCRIPTION: Vim configuration for better Fish script editing. It enables syntax highlighting, proper indentation, and sets up compiler integration for syntax checking.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\nsyntax enable\nfiletype plugin indent on\n```\n\nLANGUAGE: vim\nCODE:\n```\n\" Set up :make to use fish for syntax checking.\ncompiler fish\n\n\" Set this to have long lines wrap inside comments.\nsetlocal textwidth=79\n\n\" Enable folding of block structures in fish.\nsetlocal foldmethod=expr\n```\n\n----------------------------------------\n\nTITLE: Command Status Variable Example\nDESCRIPTION: Demonstrates the replacement for deprecated $_ variable using status current-command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_70\n\nLANGUAGE: fish\nCODE:\n```\nstatus current-command\n```\n\n----------------------------------------\n\nTITLE: Using math with --base Option in Fish\nDESCRIPTION: The 'math' command now has a '--base' option to output the result in hexadecimal or octal, and new bitwise functions 'bitand', 'bitor', and 'bitxor'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_43\n\nLANGUAGE: fish\nCODE:\n```\nmath --base=hex \"15 + 7\"\nmath \"bitand(0xFE, 5)\"\n```\n\n----------------------------------------\n\nTITLE: popd Usage Example\nDESCRIPTION: This example demonstrates how to use `pushd` to add directories to the stack, and then `popd` to remove the top directory and change the working directory.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/popd.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\npushd /usr/src\n# Working directory is now /usr/src\n# Directory stack contains /usr/src\n\npushd /usr/src/fish-shell\n# Working directory is now /usr/src/fish-shell\n# Directory stack contains /usr/src /usr/src/fish-shell\n\npopd\n# Working directory is now /usr/src\n# Directory stack contains /usr/src\n```\n\n----------------------------------------\n\nTITLE: Simple Sleep Command Timing\nDESCRIPTION: Basic example showing how to time a sleep command with output metrics for execution, user, and system time.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/time.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\ntime sleep 1s\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Feature Flags\nDESCRIPTION: This snippet shows how to set feature flags in Fish, specifically the ampersand-nobg-in-token and qmark-noglob flags, which affect how certain characters are interpreted in commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_25\n\nLANGUAGE: fish\nCODE:\n```\n> set -Ua fish_features ampersand-nobg-in-token\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Custom Prompt with VCS Information (Fish)\nDESCRIPTION: This example shows a more detailed custom prompt that includes VCS information. It sets a global variable to show upstream git information and then displays the current working directory followed by VCS information and a dollar sign.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_vcs_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    ...\n    set -g __fish_git_prompt_showupstream auto\n    printf '%s %s$' $PWD (fish_vcs_prompt)\nend\n```\n\n----------------------------------------\n\nTITLE: String Replace Literal Example in Fish\nDESCRIPTION: This snippet demonstrates a simple literal string replacement using `string replace`.  It replaces the first occurrence of \"is\" with \"was\" in the input string \"blue is my favorite\".\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-replace.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string replace is was 'blue is my favorite'\"\n\n```\n\n----------------------------------------\n\nTITLE: fish_prompt Example with fish_svn_prompt\nDESCRIPTION: This example demonstrates a basic `fish_prompt` function utilizing `fish_svn_prompt` to show Subversion repository information. It displays the current working directory and the output of `fish_svn_prompt` followed by a '$' prompt symbol. Subversion is required for this example to work correctly.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_svn_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    ...\n    printf '%s %s$' $PWD (fish_svn_prompt)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Pager Background Color in Fish Shell\nDESCRIPTION: Command to set the background color of each pager row in Fish shell to white.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nset fish_pager_color_background --background=white\n```\n\n----------------------------------------\n\nTITLE: Bash Wildcard Loop Example\nDESCRIPTION: Demonstrates how bash handles wildcard expansion with a safety check for matching files.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nfor f in ./*.mpg; do\n    # We need to test if the file really exists because\n    # the wildcard might have failed to match.\n    test -f \"$f\" || continue\n    mympgviewer \"$f\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Configuring Vi Mode with Emacs Bindings in Fish Shell\nDESCRIPTION: Function to configure Fish shell to use both Vi and Emacs key bindings. This setup allows Emacs bindings in insert mode while preserving Vi bindings for other modes.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nfunction fish_user_key_bindings\n    # Execute this once per mode that emacs bindings should be used in\n    fish_default_key_bindings -M insert\n\n    # Then execute the vi-bindings so they take precedence when there's a conflict.\n    # Without --no-erase fish_vi_key_bindings will default to\n    # resetting all bindings.\n    # The argument specifies the initial mode (insert, \"default\" or visual).\n    fish_vi_key_bindings --no-erase insert\nend\n```\n\n----------------------------------------\n\nTITLE: Fish Theme Configuration\nDESCRIPTION: Commands for configuring and customizing Fish shell's color themes.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nfish_config theme choose none\nfish_config theme show\n```\n\n----------------------------------------\n\nTITLE: Timing a For Loop Block\nDESCRIPTION: Example demonstrating how to time a block of code using a for loop with multiple sleep commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/time.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\ntime for i in 1 2 3; sleep 1s; end\n```\n\n----------------------------------------\n\nTITLE: Using time builtin to measure command execution\nDESCRIPTION: The time builtin command allows timing fish functions and builtins as well as external commands, providing execution time information.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_48\n\nLANGUAGE: fish\nCODE:\n```\ntime some_command\n```\n\n----------------------------------------\n\nTITLE: Example fish_prompt function with upstream setting\nDESCRIPTION: This example shows how to set the `$__fish_git_prompt_showupstream` variable to `auto` and incorporate the `fish_git_prompt` function into a fish shell prompt. This allows for the display of git upstream information in the prompt.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_git_prompt.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    # ...\n    set -g __fish_git_prompt_showupstream auto\n    printf '%s %s$' $PWD (fish_git_prompt)\nend\n```\n\n----------------------------------------\n\nTITLE: Binding Multi-Character Sequence in Fish\nDESCRIPTION: This snippet demonstrates how to bind a multi-character sequence 'jk' to insert 'foo' into the command line in Fish shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_7\n\nLANGUAGE: fish\nCODE:\n```\nbind j,k 'commandline -i foo'\n# or `bind jk`\n```\n\n----------------------------------------\n\nTITLE: Shorten strings with custom ellipsis\nDESCRIPTION: This example uses the `--char` option to specify a custom ellipsis. The target width is determined by the shortest input string (3 characters of 'foo'), and the custom ellipsis is also 3 characters ('...').\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string shorten --char=\\\"...\\\" foo foobar\n# The target width is 3 because of \\\"foo\\\",\n# and our ellipsis is 3 too, so we can't really show anything.\n# This is the default ellipsis if your locale doesn't allow \\\"…\\\".\nfoo\n...\"\n```\n\n----------------------------------------\n\nTITLE: Shortening Strings with Maximum Width in Fish Shell\nDESCRIPTION: Shows how to use the string shorten command to limit a string to a specified visual width. When the string exceeds the width, it's truncated and an ellipsis is added.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_12\n\nLANGUAGE: fish\nCODE:\n```\n> string shorten --max 10 \"Hello this is a long string\"\nHello thi…\n```\n\n----------------------------------------\n\nTITLE: Example Prompt PWD Command in Fish Shell\nDESCRIPTION: Example showing prompt_pwd command with options to customize directory component shortening.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_28\n\nLANGUAGE: fish\nCODE:\n```\n> prompt_pwd --full-length-dirs 2 -d 1 ~/dev/fish-shell/share/tools/web_config\n~/d/f/s/tools/web_config\n```\n\n----------------------------------------\n\nTITLE: Using Math with Visual Separators in Fish Shell\nDESCRIPTION: Demonstrates the use of underscores as visual separators in numbers with the math command in Fish shell, making large numbers more readable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_21\n\nLANGUAGE: fish\nCODE:\n```\nmath 5 + 2_123_252\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SIGPIPE in Fish Shell Pipelines\nDESCRIPTION: This snippet shows a common scenario where the first command in a pipeline receives a SIGPIPE when the second command terminates early, and how to check the resulting pipestatus values.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_62\n\nLANGUAGE: fish\nCODE:\n```\ncat file1 file2 | head -n 50\n# 50 lines of output\necho $pipestatus\n```\n\n----------------------------------------\n\nTITLE: Using String Length with Visible Flag in Fish\nDESCRIPTION: This example demonstrates the use of the new --visible flag with the string length command, which excludes escape sequences like colors when calculating string length.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_24\n\nLANGUAGE: fish\nCODE:\n```\n> string length --visible (set_color red)foo\n3\n```\n\n----------------------------------------\n\nTITLE: Using true command in fish shell\nDESCRIPTION: The true command and its colon alias that return a successful exit status (0). This is commonly used in shell scripts for conditional logic or as a no-op operation.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/true.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntrue\n```\n\nLANGUAGE: shell\nCODE:\n```\n:\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Table in reStructuredText for System Call Comparison\nDESCRIPTION: This snippet uses reStructuredText with raw HTML to create a table comparing system call usage between Fish Shell and Bash. It includes rows for fork, write, and other system calls.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_83\n\nLANGUAGE: rst\nCODE:\n```\n.. raw:: html\n\n   <td>\n\n4\n\n.. raw:: html\n\n   <tr>\n\n.. raw:: html\n\n   <th>\n\nwrite\n\n.. raw:: html\n\n   <td>\n\n172\n\n.. raw:: html\n\n   <td>\n\n149\n\n.. raw:: html\n\n   <td>\n\n0\n\n.. raw:: html\n\n   </table>\n```\n\n----------------------------------------\n\nTITLE: Counting Down Random Even Numbers in Fish Shell\nDESCRIPTION: This snippet demonstrates how to count down from a randomly generated even number between 10 and 20 to 1 using the 'random' command. It leverages the 'seq' command to create a countdown sequence, which is then echoed to the output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/random.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfor i in (seq (random 10 2 20) -1 1)\n    echo $i\nend\n```\n\n----------------------------------------\n\nTITLE: Using Math Min Function with Multiple Arguments in Fish Shell\nDESCRIPTION: Shows how to use the min function in the math command with variable number of arguments to find the minimum value among multiple numbers.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_22\n\nLANGUAGE: fish\nCODE:\n```\n> math min 8,2,4\n2\n```\n\n----------------------------------------\n\nTITLE: Escaping a String with string escape in Fish Shell\nDESCRIPTION: This example demonstrates how to use the `string escape` command to escape special characters in a string. The input string \"\\x07\" is escaped and the output is \"\\cg\".\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-escape.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\">_ echo \\\\x07 | string escape\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Fish Features\nDESCRIPTION: Example of enabling multiple Fish shell features for a single session using the --features flag.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_66\n\nLANGUAGE: fish\nCODE:\n```\n> fish --features qmark-noglob,regex-easyesc\n```\n\n----------------------------------------\n\nTITLE: Redirecting stderr in Fish Shell (old vs new syntax)\nDESCRIPTION: Example showing the deprecated caret (^) syntax for redirecting stderr and the preferred 2> syntax that should be used instead.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_17\n\nLANGUAGE: fish\nCODE:\n```\ntest \"$foo\" -gt 8 ^/dev/null\n```\n\nLANGUAGE: fish\nCODE:\n```\ntest \"$foo\" -gt 8 2>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Defining a Multicd Function with Regex Abbreviation in Fish Shell\nDESCRIPTION: Creates a 'multicd' function that expands '..' to 'cd ../', '...' to 'cd ../../', etc. using the new regex abbreviation feature. The function calculates the number of parent directories based on the number of dots provided.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\nfunction multicd\n    echo cd (string repeat -n (math (string length -- $argv[1]) - 1) ../)\nend\n\nabbr --add dotdot --regex '^\\.\\.+$' --function multicd\n```\n\n----------------------------------------\n\nTITLE: Transient Fish Prompt\nDESCRIPTION: A prompt function implementing transient prompt functionality with conditional rendering.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/prompt.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_prompt\n    set -l last_status $status\n    set -l stat\n    set -l pwd\n    if contains -- --final-rendering $argv\n        set pwd (path basename $PWD)\n    else\n        set pwd (prompt_pwd)\n        if test $last_status -ne 0\n            set stat (set_color red)\"[$last_status]\"(set_color normal)\n        end\n    end\n\n    string join '' -- (set_color green) $pwd (set_color normal) $stat '>'\nend\n```\n\n----------------------------------------\n\nTITLE: Fish Script Shebang Examples\nDESCRIPTION: Examples of shebang lines for Fish scripts, including a portable version using env.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n#!/usr/bin/env fish\necho Hello from fish $version\n```\n\n----------------------------------------\n\nTITLE: Block Termination in Fish Shell\nDESCRIPTION: Demonstrates Fish's consistent block syntax where all blocks are terminated with the 'end' built-in command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/design.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Synopsis for 'cdh' Command in reStructuredText\nDESCRIPTION: This snippet defines the synopsis for the 'cdh' command using reStructuredText syntax. It shows the basic usage of the command with an optional DIRECTORY argument.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/cdh.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. synopsis::\n\n    cdh [DIRECTORY]\n```\n\n----------------------------------------\n\nTITLE: Timing with Inline Variable Assignment\nDESCRIPTION: Example showing how to use time command with inline variable assignment for sleep duration.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/time.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\ntime a_moment=1.5m sleep $a_moment\n```\n\n----------------------------------------\n\nTITLE: Using string sub with --end Option in Fish\nDESCRIPTION: The 'string sub' command now has a new '--end' option to specify the end index of a substring.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_39\n\nLANGUAGE: fish\nCODE:\n```\nstring sub --start 1 --end 5 'hello world'\n```\n\n----------------------------------------\n\nTITLE: Understanding Variable Scope in Fish Shell For Loop\nDESCRIPTION: This code snippet highlights scope behavior of variables declared in a for loop in Fish Shell prior to version 3.0.0. The example elucidates scenario where 'var' inside the loop is not available outside the loop if declared before version 3.0.0. It simulates breaking out of the loop with 'break_from_loop' condition. Ensure to understand version implications on variable visibility post loop.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/for.rst#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nfor var in a b c\n    if break_from_loop\n        break\n    end\nend\necho $var\n```\n\n----------------------------------------\n\nTITLE: Using brace expansion with Git commands\nDESCRIPTION: Brace expansion now only takes place with commas or variables, allowing common Git commands without escaping braces.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_49\n\nLANGUAGE: fish\nCODE:\n```\ngit reset HEAD@{0}\n```\n\n----------------------------------------\n\nTITLE: Defining the wchar prelude in Rust\nDESCRIPTION: This Rust module defines a prelude that imports essential utilities for working with wide string types, making the transition smoother when porting from C++. It allows for more ergonomic handling of Rust strings.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/rust-devel.md#2025-04-21_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\npub(crate) mod prelude {\n    pub(crate) use crate::{\n        wchar::{wstr, IntoCharIter, WString, L},\n        wchar_ext::{ToWString, WExt},\n        wutil::{sprintf, wgettext, wgettext_fmt, wgettext_str},\n    };\n    pub(crate) use widestring_suffix::widestrs;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling keyboard protocols in Fish\nDESCRIPTION: This snippet shows how to disable the 'keyboard-protocols' feature flag in Fish shell. This is a temporary measure to work around buggy terminals, and it is recommended to use this if something like '=0' or '=5u' appears in your commandline mysteriously.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nset -Ua fish_features no-keyboard-protocols\n```\n\n----------------------------------------\n\nTITLE: Escaping for Variable Names with string escape in Fish Shell\nDESCRIPTION: This example demonstrates using `string escape --style=var` to escape a string for use as a variable name.  The non-alphanumeric characters and unicode characters are hex encoded.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-escape.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string escape --style=var 'a1 b2'\\\\u6161\"\n```\n\n----------------------------------------\n\nTITLE: Using math with exponent operator\nDESCRIPTION: The math command's exponent operator (^) now uses right-associative behavior, changing how expressions with multiple exponents are evaluated.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_52\n\nLANGUAGE: fish\nCODE:\n```\nmath '3^0.5^2'\n```\n\n----------------------------------------\n\nTITLE: Using Begin Block for Variable Scoping in Fish Shell\nDESCRIPTION: Shows how to use a begin block to create a new variable scope.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_31\n\nLANGUAGE: fish\nCODE:\n```\nbegin\n   set -l foo bar # this variable will only be available in this block!\nend\n```\n\n----------------------------------------\n\nTITLE: Color Variable Configuration Example in Fish Shell\nDESCRIPTION: Shows how to configure color variables in Fish. This example sets the command color to blue while leaving the keyword color empty, which causes it to inherit from the command color setting.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_20\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_color_command blue\nset -g fish_color_keyword\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Features (no-qmark-noglob)\nDESCRIPTION: This snippet demonstrates how to disable the `qmark-noglob` feature in Fish Shell, which prevents `?` from acting as a single-character glob. This is achieved by adding `no-qmark-noglob` to the `fish_features` environment variable. This setting is a temporary measure and will eventually be made read-only.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nset -Ua fish_features no-qmark-noglob\n```\n\n----------------------------------------\n\nTITLE: Using string match to filter ongoing output in Fish\nDESCRIPTION: Demonstrates how to use string match to filter ongoing output from a command like dmesg, showing that Fish 3.2.0+ builtins can output before all data is read.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_33\n\nLANGUAGE: fish\nCODE:\n```\n# Show all dmesg lines related to \"usb\"\ndmesg -w | string match '*usb*'\n```\n\n----------------------------------------\n\nTITLE: Installing Fish Shell with Embedded Data using Cargo\nDESCRIPTION: This snippet shows how to install Fish shell with embedded data files using Cargo, including options for building from a git clone or specific version.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --path /path/to/fish # if you have a git clone\ncargo install --git https://github.com/fish-shell/fish-shell --tag 4.0.0 # to build from git with a specific version\ncargo install --git https://github.com/fish-shell/fish-shell # to build the current development snapshot without cloning\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs for Fish Scripts\nDESCRIPTION: Emacs configuration for Fish script editing. It includes setup for fish-mode and a hook to run fish_indent before saving files.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_4\n\nLANGUAGE: elisp\nCODE:\n```\n(add-hook 'fish-mode-hook (lambda ()\n    (add-hook 'before-save-hook 'fish_indent-before-save)))\n```\n\n----------------------------------------\n\nTITLE: Using fish_default_key_bindings Command in Fish Shell\nDESCRIPTION: Example showing how to invoke the fish_default_key_bindings command to enable emacs-style key bindings in the fish shell. This command takes no parameters and immediately sets up the default key bindings.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_default_key_bindings.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfish_default_key_bindings\n```\n\n----------------------------------------\n\nTITLE: Proper Conditional Block in Fish\nDESCRIPTION: Shows the correct way to structure conditional logic using an if statement instead of combiners for more complex conditions. This ensures the return only happens when the test fails.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_25\n\nLANGUAGE: fish\nCODE:\n```\nif not test -e /etc/my.config\n    echo \"OH NO WE NEED A CONFIG FILE\"\n    return 1\nend\n```\n\n----------------------------------------\n\nTITLE: Interactively Deleting History Items in Fish\nDESCRIPTION: Example of using the history builtin to interactively delete history items containing specific text.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_82\n\nLANGUAGE: fish\nCODE:\n```\nhistory --delete --contains foo\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Options with Multiple Values\nDESCRIPTION: This snippet illustrates how to define a third flag that can be given multiple times, saving the value of each instance seen, with only the long flag name being used.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_opt.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nset -l options (fish_opt --short=h --long=help)\nset options $options (fish_opt --short=m --long=max --required-val)\nset options $options (fish_opt --short=t --long=token --multiple-vals --long-only)\nargparse $options -- $argv\n```\n\n----------------------------------------\n\nTITLE: Disabling Fish Features\nDESCRIPTION: Example of disabling a specific Fish feature (qmark-noglob) using the no- prefix.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_68\n\nLANGUAGE: fish\nCODE:\n```\nset -Ua fish_features no-qmark-noglob\n```\n\n----------------------------------------\n\nTITLE: Using type with short option\nDESCRIPTION: The type command supports a new --short option, which suppresses function expansion to provide a more concise output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_66\n\nLANGUAGE: fish\nCODE:\n```\ntype --short some_function\n```\n\n----------------------------------------\n\nTITLE: Checking for Dry-Run Flag\nDESCRIPTION: This code snippet demonstrates how to check for the presence of the `--dry-run` flag (which is stored as `_flag_dry_run`) and perform an action if it's not set. It utilizes `not set -ql` to check if the variable is not set locally.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/argparse.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nnot set -ql _flag_dry_run\nand set $var $result\n```\n\n----------------------------------------\n\nTITLE: File Completion Pattern\nDESCRIPTION: Example showing file completion pattern with escaped separators for rsync command\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrsync --files-from=\\: \\=\n```\n\n----------------------------------------\n\nTITLE: Shorten multiline file names\nDESCRIPTION: This example demonstrates shortening multiline file names using the `-N` option. It iterates through files, shortens each filename to its first line, and adds an ellipsis if the filename was multiline.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n\">_ touch \\\"a multiline\\n\\\"\\\"file\\\"\"\n        }, {\n          \"language\": \"fish\",\n          \"code\": \">_ for file in *; string shorten -N -- $file; end\n# Shorten the multiline file so we only show one line per file:\na multiline…\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Fish Title Setting\nDESCRIPTION: This snippet shows how to disable the setting of the terminal title.  By defining an empty `fish_title` function, no title will be set.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_title.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n   function fish_title\n   end\n```\n\n----------------------------------------\n\nTITLE: Finding function definition path\nDESCRIPTION: The type --path command with a function argument will output the path to the file containing the function definition, if it exists.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_67\n\nLANGUAGE: fish\nCODE:\n```\ntype --path my_function\n```\n\n----------------------------------------\n\nTITLE: Using fuzzy matching with complete --do-complete\nDESCRIPTION: The complete --do-complete now also performs fuzzy matches, enhancing tab completion capabilities with more flexible matching.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_58\n\nLANGUAGE: fish\nCODE:\n```\ncomplete --do-complete=\"some_partial_command\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fish Utility Executable Targets\nDESCRIPTION: Creates build targets for the fish_indent and fish_key_reader utility executables that are part of the Fish shell project.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_target(fish_indent)\n\ncreate_target(fish_key_reader)\n```\n\n----------------------------------------\n\nTITLE: Binding Page Up to History Search in Fish\nDESCRIPTION: This example shows how to bind the Page Up key to perform a backward history search in Fish.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/bind.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nbind pageup history-search-backward\n```\n\n----------------------------------------\n\nTITLE: Using fish_is_root_user in a Fish Shell Function\nDESCRIPTION: This snippet demonstrates how to use the fish_is_root_user command within a Fish shell function. It checks if the current user is root and executes different code accordingly.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_is_root_user.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction example --description 'Just an example'\n    if fish_is_root_user\n        do_something_different\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Style Checks for Fish Shell Code\nDESCRIPTION: Commands to run the style checker on Fish shell code. The first command checks only modified files, while the second checks the entire codebase.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbuild_tools/style.fish\n```\n\nLANGUAGE: shell\nCODE:\n```\nbuild_tools/style.fish --all\n```\n\n----------------------------------------\n\nTITLE: Shorten Git branch name\nDESCRIPTION: This example combines `git branch`, `string match`, and `string shorten` to extract and shorten the current Git branch name. It matches the branch name using a regular expression, then shortens it to a maximum length of 20 characters.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_5\n\nLANGUAGE: fish\nCODE:\n```\n\">_ git branch | string match -rg '^\\* (.*)' | string shorten -m20\n# Take the current git branch and shorten it at 20 columns.\n# Here the branch is \\\"builtin-path-with-expand\\\"\\nbuiltin-path-with-e…\"\n```\n\n----------------------------------------\n\nTITLE: Process Substitution with Suffix and File Output\nDESCRIPTION: This example showcases using `psub` with the `-f` (file) and `-s` (suffix) options to highlight a C source file (`main.c`) after preprocessing.  The preprocessed output of `cpp main.c` is passed to `source-highlight` via a file with the `.c` suffix.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/psub.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nsource-highlight -f esc (cpp main.c | psub -f -s .c)\n# highlights ``main.c`` after preprocessing as a C source.\n```\n\n----------------------------------------\n\nTITLE: Using multiplication in math expressions\nDESCRIPTION: The math command now understands x for multiplication when followed by whitespace, providing an alternative to the * operator.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_64\n\nLANGUAGE: fish\nCODE:\n```\nmath \"2 x 3\"\n```\n\n----------------------------------------\n\nTITLE: Various Commandline Usage Examples in Fish Shell\nDESCRIPTION: Multiple examples showing different options of the commandline command and their outputs based on the example command line buffer.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/commandline.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n>_ commandline -t\n$flounder\n>_ commandline -ct\n$fl\n>_ commandline -b # or just commandline\necho $flounder >&2 | less; and echo $catfish\n>_ commandline -p\necho $flounder >&2\n>_ commandline -j\necho $flounder >&2 | less\n```\n\n----------------------------------------\n\nTITLE: Git Pre-Push Hook for Fish Shell Development\nDESCRIPTION: A Git pre-push hook script that can be used to automatically run tests before pushing changes to the Fish shell repository.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n#### A pre-push hook for the fish-shell project\n```\n\n----------------------------------------\n\nTITLE: Shorten strings with no ellipsis\nDESCRIPTION: This example shows how to use `string shorten` with an empty `--char` option to truncate strings without adding an ellipsis.  The `--max` option specifies the maximum width to truncate to.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string shorten --char=\\\"\\\" --max 4 abcdef 123456\n# Leaving the char empty makes us not add an ellipsis\n# So this truncates at 4 columns:\nabcd\n1234\"\n```\n\n----------------------------------------\n\nTITLE: Erasing a Custom Key Binding in Fish Shell\nDESCRIPTION: This snippet shows how to erase a custom key binding in Fish shell, reverting it back to the default behavior. It uses the '--erase' option with the 'bind' command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_14\n\nLANGUAGE: fish\nCODE:\n```\nbind --erase ctrl-c\n```\n\n----------------------------------------\n\nTITLE: Options for Jobs Command in Fish Shell\nDESCRIPTION: This section describes the different options available for the 'jobs' command, detailing their functionalities.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/jobs.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n**-c** or **--command**\n    Prints the command name for each process in jobs.\n\n**-g** or **--group**\n    Only prints the group ID of each job.\n\n**-l** or **--last**\n    Prints only the last job to be started.\n\n**-p** or **--pid**\n    Prints the process ID for each process in all jobs.\n\n**-q** or **--query**\n    Prints no output for evaluation of jobs by exit status only. For compatibility with old fish versions this is also **--quiet** (but this is deprecated).\n\n**-h** or **--help**\n    Displays help about using this command.\n```\n\n----------------------------------------\n\nTITLE: Listing Defined Functions in Fish Shell\nDESCRIPTION: This command lists all currently defined functions in the Fish shell. It displays the names of the functions without including those that start with an underscore.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/functions.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n\"functions -n\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Fish Shell Repository\nDESCRIPTION: Command to clone a forked repository of Fish shell to start contributing. This requires creating a fork on GitHub first.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<USERNAME>/fish-shell.git\n```\n\n----------------------------------------\n\nTITLE: Querying abbreviations\nDESCRIPTION: The abbr command has a new --query option to check for the existence of an abbreviation, allowing conditional logic based on abbreviation existence.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_65\n\nLANGUAGE: fish\nCODE:\n```\nif abbr --query gs\n    echo \"gs abbreviation exists\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Pager Colors in Fish Shell\nDESCRIPTION: Commands to customize the pager colors in Fish shell with black text on alternating white and gray backgrounds.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/interactive.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nset fish_pager_color_prefix black\nset fish_pager_color_completion black\nset fish_pager_color_description black\nset fish_pager_color_background --background=white\nset fish_pager_color_secondary_background --background=brwhite\n```\n\n----------------------------------------\n\nTITLE: Creating strings using wchar crate\nDESCRIPTION: This Rust function illustrates how to create a static reference to a wide string literal using the wchar crate's macro. It shows how to utilize Rust types to create string values for the fish-shell.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/rust-devel.md#2025-04-21_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nuse crate::wchar::prelude::*;\n// This imports wstr, the L! macro, WString, a ToWString trait that supplies .to_wstring() along with other things\n\nfn get_shell_name() -> &'static wstr {\n    L!(\"fish\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Help for exec Command\nDESCRIPTION: Displays help information for the exec command using the --help or -h option.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/exec.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nexec --help\n```\n\n----------------------------------------\n\nTITLE: String Length with Emoji and Visible Width in Fish Shell\nDESCRIPTION: This example demonstrates calculating the visible width of a string containing emojis using the `--visible` flag. The output depends on the value of `$fish_emoji_width`, which determines the width of each emoji character. New terminals should return 8.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-length.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n\">_ string length --visible 🐟🐟🐟🐟\\n# depending on $fish_emoji_width, this is either 4 or 8\\n# in new terminals it should be\\n8\"\n```\n\n----------------------------------------\n\nTITLE: Suspending Fish Shell\nDESCRIPTION: Command syntax for suspending the current fish shell instance. The command accepts an optional --force flag to bypass the login shell restriction. Sends SIGTSTP signal to pause execution and can be resumed with SIGCONT.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/suspend.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsuspend [--force]\n```\n\n----------------------------------------\n\nTITLE: Redirecting Output of Multiple Commands in Fish Shell\nDESCRIPTION: This example shows how to use 'begin' to group multiple commands and redirect their combined output to a file. All output from the commands within the block is redirected to 'out.html'.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/begin.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nbegin\n    echo $xml_header\n    echo $html_header\n    if test -e $file\n        ...\n    end\n    ...\nend > out.html\n```\n\n----------------------------------------\n\nTITLE: Including CHANGELOG in RST Documentation\nDESCRIPTION: ReStructuredText directive to include the CHANGELOG.rst file from the parent directory into the current document.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/relnotes.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGELOG.rst\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Features Flag Example in Fish Shell\nDESCRIPTION: Demonstrates how to turn off feature flags in Fish shell by adding them to the fish_features environment variable and restarting fish. This example shows disabling the regex-easyesc feature.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_19\n\nLANGUAGE: fish\nCODE:\n```\nset -Ua fish_features no-regex-easyesc\n```\n\n----------------------------------------\n\nTITLE: Fish Title Function Definition\nDESCRIPTION: This snippet shows the basic structure of a `fish_title` function in fish shell. It demonstrates how to define a function that will be executed to set the terminal title.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_title.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n  function fish_title\n      ...\n  end\n```\n\n----------------------------------------\n\nTITLE: Basic Umask Command Syntax - Fish Shell\nDESCRIPTION: Basic command syntax for the umask command showing optional parameters. The command can be used with options and an optional mask parameter.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/umask.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\numask [OPTIONS] [MASK]\n```\n\n----------------------------------------\n\nTITLE: Performing bitwise AND operation\nDESCRIPTION: This example shows how to perform a bitwise AND operation using the `bitand` function. It performs a bitwise AND between `0xFE` and `0x2e` and prints the result.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_8\n\nLANGUAGE: fish\nCODE:\n```\n\"math bitand 0xFE, 0x2e\"\n```\n\n----------------------------------------\n\nTITLE: Viewing PATH as String in Fish Shell\nDESCRIPTION: Shows how PATH is displayed as a colon-separated string when quoted, for compatibility with other shells and external commands.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/tutorial.rst#2025-04-21_snippet_21\n\nLANGUAGE: fish\nCODE:\n```\n> echo \"$PATH\"\n/usr/local/sbin:/usr/local/bin:/usr/bin\n```\n\n----------------------------------------\n\nTITLE: Deprecated Event Handler Syntax\nDESCRIPTION: Shows the old deprecated and new recommended syntax for fish_exit event handlers.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_69\n\nLANGUAGE: fish\nCODE:\n```\nfunction --on-event fish_exit\n```\n\n----------------------------------------\n\nTITLE: Adding Current Working Directory with Verbose Mode\nDESCRIPTION: Adding a subdirectory of current path with verbose output to show the resulting configuration\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_add_path.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\nfish_add_path -v bin/\n```\n\n----------------------------------------\n\nTITLE: Creating strings with widestrs proc-macro\nDESCRIPTION: This Rust function shows how to create a wide string literal using the widestrs proc-macro, enhancing code clarity by reducing the need for boilerplate.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/rust-devel.md#2025-04-21_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nuse crate::wchar::{wstr, widestrs}\n// also imported by the prelude\n\n#[widestrs]\nfn get_shell_name() -> &'static wstr {\n    \"fish\"L // equivalent to L!(\"fish\")\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Token for Completions in Fish Shell\nDESCRIPTION: Retrieving the in-progress token for use in completions, typically used in conjunction with tokenizing the current process.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/commandline.rst#2025-04-21_snippet_2\n\nLANGUAGE: fish\nCODE:\n```\nset -l current (commandline -ct)\n```\n\n----------------------------------------\n\nTITLE: Setting Hard Stack Size Limit in Fish Shell\nDESCRIPTION: Example showing how to set the hard stack size limit to 64 kilobytes using the ulimit command.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/ulimit.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nulimit -Hs 64\n```\n\n----------------------------------------\n\nTITLE: Basic ulimit Command Syntax in Fish Shell\nDESCRIPTION: Basic syntax for the ulimit command showing optional parameters for setting resource limits.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/ulimit.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nulimit [OPTIONS] [LIMIT]\n```\n\n----------------------------------------\n\nTITLE: Printing a number in hexadecimal format\nDESCRIPTION: This example demonstrates how to use the `--base` option to print a number in hexadecimal format. It prints the decimal number 192 in hexadecimal format with a `0x` prefix.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_10\n\nLANGUAGE: fish\nCODE:\n```\n\"math --base=hex 192\"\n```\n\n----------------------------------------\n\nTITLE: Function Autoloading Path Structure in Fish\nDESCRIPTION: Demonstrates the standard structure of the $fish_function_path variable, showing the directories Fish searches when attempting to autoload a function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_12\n\nLANGUAGE: fish\nCODE:\n```\n~/.config/fish/functions\n/etc/fish/functions\n$__fish_user_data_dir/fish/vendor_functions.d\n/usr/share/fish/vendor_functions.d\n/usr/local/share/fish/vendor_functions.d\n$__fish_data_dir/functions\n```\n\n----------------------------------------\n\nTITLE: Configuring PWD Shortening in Fish Prompt\nDESCRIPTION: Setting the fish_prompt_pwd_dir_length variable to control how the current directory path is shortened in the prompt. The value determines the maximum length of each path component.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_76\n\nLANGUAGE: fish\nCODE:\n```\nset -g fish_prompt_pwd_dir_length 1\n```\n\n----------------------------------------\n\nTITLE: Starting fish Shell\nDESCRIPTION: This command starts the fish shell, an interactive command-line shell designed primarily for user-friendly interactive use.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfish\n```\n\n----------------------------------------\n\nTITLE: Building Fish Shell with Man Pages using Cargo\nDESCRIPTION: This snippet demonstrates how to build Fish shell with man pages included using Cargo and the FISH_BUILD_DOCS environment variable.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/README.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nFISH_BUILD_DOCS=1 cargo install --path .\n```\n\n----------------------------------------\n\nTITLE: Example Command Line Buffer in Fish Shell\nDESCRIPTION: An example of a complex command line buffer used to demonstrate various commandline options.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/commandline.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\necho $flounder >&2 | less; and echo $catfish\n```\n\n----------------------------------------\n\nTITLE: Setting Fish Features (remove-percent-self, test-require-arg)\nDESCRIPTION: This snippet shows how to enable the 'remove-percent-self' and 'test-require-arg' feature flags in Fish shell. These flags modify the behavior of PID expansion and the `test` command, respectively. These features are intended to be enabled by default in the future.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\nset -Ua fish_features remove-percent-self test-require-arg\n```\n\n----------------------------------------\n\nTITLE: Defining fish_should_add_to_history Function in Fish Shell\nDESCRIPTION: This snippet shows the basic structure of the fish_should_add_to_history function. The actual implementation is not provided and should be filled in by the user.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/fish_should_add_to_history.rst#2025-04-21_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\nfunction fish_should_add_to_history\n    ...\nend\n```\n\n----------------------------------------\n\nTITLE: Performing division with a custom scale\nDESCRIPTION: This example uses the `--scale` option to set the scale to 3. It divides 10 by 6 and prints the result rounded to 3 decimal places.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/math.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n\"math -s3 10 / 6\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Fish Shell Feature Flags\nDESCRIPTION: Shows how to list current feature flags in Fish shell using the 'status features' command, which displays the state of various compatibility features.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/language.rst#2025-04-21_snippet_65\n\nLANGUAGE: fish\nCODE:\n```\n> status features\nstderr-nocaret          on  3.0 ^ no longer redirects stderr\nqmark-noglob            on  3.0 ? no longer globs\nregex-easyesc           on  3.1 string replace -r needs fewer \\\\'s\nampersand-nobg-in-token on  3.4 & only backgrounds if followed by a separating character\nremove-percent-self     off 4.0 %self is no longer expanded (use $fish_pid)\ntest-require-arg        off 4.0 builtin test requires an argument\nignore-terminfo         on  4.1 do not look up $TERM in terminfo database\n```\n\n----------------------------------------\n\nTITLE: Running Fish Shell Tests with Cargo\nDESCRIPTION: Commands to run tests for Fish shell directly using Cargo and the test driver. This builds the Rust components and runs unit, script, and interactive tests.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\ncargo test # for the unit tests\ntests/test_driver.py --cachedir=/tmp target/debug # for the script and interactive tests\n```\n\n----------------------------------------\n\nTITLE: Implementing Git Pre-Push Hook in Bash\nDESCRIPTION: This bash script serves as a Git pre-push hook that runs tests before allowing a push to the master branch. It reads branch information from Git, runs 'make fish_run_tests' to execute tests, and prevents the push if tests fail. This script should be placed in .git/hooks/pre-push and made executable. It has no specific parameters and expects no output if successful, but outputs an error if the tests fail. Circumvent this check with 'git push --no-verify' if necessary.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# This will run the tests when a push to master is detected, and will stop that if the tests fail\n# Save this as .git/hooks/pre-push and make it executable\n\nprotected_branch='master'\n\n# Git gives us lines like \"refs/heads/frombranch SOMESHA1 refs/heads/tobranch SOMESHA1\"\n# We're only interested in the branches\nwhile read from _ to _; do\n    if [ \"x$to\" = \"xrefs/heads/$protected_branch\" ]; then\n        isprotected=1\n    fi\ndone\nif [ \"x$isprotected\" = x1 ]; then\n    echo \"Running tests before push to master\"\n    make fish_run_tests\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n        echo \"Tests failed for a push to master, we can't let you do that\" >&2\n        exit 1\n    fi\nfi\nexit 0\n```\n\n----------------------------------------\n\nTITLE: Using fish-printf for String Formatting in Rust\nDESCRIPTION: Demonstrates basic usage of fish-printf crate for string formatting, including creating new strings and appending to existing strings using sprintf macro. Shows floating-point number formatting with precision control.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/printf/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse fish_printf::sprintf;\n\n// Create a `String` from a format string.\nlet s = sprintf!(\"%0.5g\", 123456.0) // 1.2346e+05\n\n// Append to an existing string.\nlet mut s = String::new();\nsprintf!(=> &mut s, \"%0.5g\", 123456.0) // 1.2346e+05\n```\n\n----------------------------------------\n\nTITLE: Improved test command error reporting in Fish\nDESCRIPTION: Shows how Fish's test command provides better error reporting with appropriate index information when syntax errors are encountered.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_35\n\nLANGUAGE: fish\nCODE:\n```\n> test 1 = 2 and echo true or false\ntest: Expected a combining operator like '-a' at index 4\n1 = 2 and echo true or echo false\n      ^\n```\n\n----------------------------------------\n\nTITLE: Shorten ss output to fit the screen\nDESCRIPTION: This example uses `string shorten` to truncate the output of the `ss` command to fit the screen width. The `-m$COLUMNS` option specifies the maximum width based on the terminal's column size, and `-c \\\"\\\"` removes the ellipsis.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_4\n\nLANGUAGE: fish\nCODE:\n```\n\">_ ss -p | string shorten -m$COLUMNS -c \\\"\\\"\\n# `ss` from Linux' iproute2 shows socket information, but prints extremely long lines.\n# This shortens input so it fits on the screen without overflowing lines.\"\n```\n\n----------------------------------------\n\nTITLE: Building fish-shell using CMake and Ninja\nDESCRIPTION: This shell command guide instructs users on how to build fish-shell project using CMake with Ninja as the generator. It sets the directory structure in a way that facilitates the Rust build process.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/rust-devel.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd fish-shell\n$ mkdir build && cd build\n$ cmake -G Ninja ..\n$ ninja\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Subshells in Bash\nDESCRIPTION: This snippet shows how Bash uses subshells with parentheses, which create isolated shell processes. This feature doesn't exist in Fish, which requires explicit workarounds.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/fish_for_bash_users.rst#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# A list of commands in `()` parentheses\n(foo; bar) | baz\n\n# Both sides of a pipe\nfoo | while read -r bar; do\n    # This will not be visible outside of the loop.\n    VAR=VAL\n    # This background process will not be, either\n    baz &\ndone\n```\n\n----------------------------------------\n\nTITLE: Creating Rust Target Build Function for Fish Shell\nDESCRIPTION: Defines a custom function that builds Rust binaries with correct configuration based on the CMake build type. It handles features, profiles, and target copying to ensure proper integration of Rust components in the build process.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(CREATE_TARGET target)\n  add_custom_target(\n    ${target} ALL\n    COMMAND\n      \"${CMAKE_COMMAND}\" -E\n        env ${VARS_FOR_CARGO}\n          ${Rust_CARGO}\n            build --bin ${target}\n            $<$<CONFIG:Release>:--release>\n            $<$<CONFIG:RelWithDebInfo>:--profile=release-with-debug>\n            --target ${Rust_CARGO_TARGET}\n            --no-default-features\n            ${CARGO_FLAGS}\n            ${FEATURES_ARG}\n      &&\n      \"${CMAKE_COMMAND}\" -E\n        copy \"${rust_target_dir}/${rust_profile}/${target}\" \"${CMAKE_CURRENT_BINARY_DIR}\"\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    USES_TERMINAL\n  )\nendfunction(CREATE_TARGET)\n```\n\n----------------------------------------\n\nTITLE: Building libfish_rust.a with Cargo\nDESCRIPTION: These commands demonstrate how to build only the Rust library component of fish-shell after ensuring CMake has prepared the necessary config files.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/rust-devel.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd fish-shell/fish-rust\n$ cargo build\n```\n\n----------------------------------------\n\nTITLE: Setting Build Directory Path Variables for Fish Shell\nDESCRIPTION: Resolves and stores real paths for the source and binary directories, then defines them as compilation definitions so they can be accessed within the code at compile time.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_filename_component(REAL_CMAKE_BINARY_DIR \"${CMAKE_BINARY_DIR}\" REALPATH)\nget_filename_component(REAL_CMAKE_SOURCE_DIR \"${CMAKE_SOURCE_DIR}\" REALPATH)\nadd_definitions(-DCMAKE_BINARY_DIR=\"${REAL_CMAKE_BINARY_DIR}\")\nadd_definitions(-DCMAKE_SOURCE_DIR=\"${REAL_CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Building Fish Shell from Source using CMake\nDESCRIPTION: This snippet demonstrates the commands to build Fish shell from source using CMake and install it into /usr/local.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build; cd build\ncmake ..\ncmake --build .\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type in CMake for Fish Shell\nDESCRIPTION: Checks if a build type is not explicitly specified and sets a default build type of 'RelWithDebInfo' if none is provided. This ensures the project has sensible default compilation settings.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEFAULT_BUILD_TYPE \"RelWithDebInfo\")\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    message(STATUS \"Setting build type to default '${DEFAULT_BUILD_TYPE}'\")\n    set(CMAKE_BUILD_TYPE \"${DEFAULT_BUILD_TYPE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Locally With Code Signing and Notarization - Shell\nDESCRIPTION: This shell script example is used to build macOS packages locally with code signing and notarization. It requires .p12 certificate files for \"Developer ID Application\" and \"Developer ID Installer\", a password for these files, and a JSON file with authentication data for Apple's notarization services.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_internal/mac-artifacts.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n> ./build_tools/make_pkg.sh -s \\\n    -f fish-developer-id-application.p12 \\\n    -i fish-developer-id-installer.p12 \\\n    -p \"$NOTARIZE_PASSWORD\"  \\\n    -n \\\n    -j notarize-data.json\n```\n\n----------------------------------------\n\nTITLE: Defining Fish Shell Main Executable Target\nDESCRIPTION: Creates the build target for the main Fish shell executable using the previously defined CREATE_TARGET function.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_target(fish)\n```\n\n----------------------------------------\n\nTITLE: Opening Random Pictures in Fish Shell\nDESCRIPTION: This snippet uses the 'random choice' feature of the 'random' command to select and open a random image file from any subdirectory containing '.jpg' files. It demonstrates the flexibility of selecting random items through command line.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/random.rst#2025-04-21_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nopen (random choice **.jpg)\n```\n\n----------------------------------------\n\nTITLE: Using String Collect with Allow-Empty Option in Fish\nDESCRIPTION: This example demonstrates the use of the new --allow-empty option with string collect, which outputs an empty argument in a command substitution that has no output.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#2025-04-21_snippet_26\n\nLANGUAGE: fish\nCODE:\n```\ntest -n (echo -n | string collect --allow-empty)\n```\n\n----------------------------------------\n\nTITLE: Shorten Git branch name from the right\nDESCRIPTION: This example is similar to the previous one, but uses the `--left` option to shorten the Git branch name from the right, effectively displaying the last 20 characters of the branch name.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-shorten.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\n\">_ git branch | string match -rg '^\\* (.*)' | string shorten -m20 --left\n# Taking 20 columns from the right instead:\n…in-path-with-expand\"\n```\n\n----------------------------------------\n\nTITLE: Running Fish Shell Tests with CMake\nDESCRIPTION: Commands to run tests for Fish shell using CMake. This builds Fish and runs the test suite to verify functionality.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/CONTRIBUTING.rst#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncmake path/to/fish-shell\nmake fish_run_tests\n```\n\n----------------------------------------\n\nTITLE: Including String Escape Documentation in RST\nDESCRIPTION: RST directive to include content from string-escape.rst file starting from line 2\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/cmds/string-unescape.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: string-escape.rst\n   :start-line: 2\n```\n\n----------------------------------------\n\nTITLE: Wildcard Handling in SCP\nDESCRIPTION: Shows proper wildcard quoting in remote file operations to prevent local expansion.\nSOURCE: https://github.com/fish-shell/fish-shell/blob/master/doc_src/faq.rst#2025-04-21_snippet_9\n\nLANGUAGE: fish\nCODE:\n```\nscp user@ip:/dir/\"string-*\"\n```"
  }
]