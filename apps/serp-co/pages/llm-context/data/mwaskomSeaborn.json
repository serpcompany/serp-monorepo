[
  {
    "owner": "mwaskom",
    "repo": "seaborn",
    "content": "TITLE: Overlaying Histograms with Data Filtering\nDESCRIPTION: This snippet demonstrates overlaying histograms with data filtering. It defines a histogram binning configuration and then adds two sets of bars: one for the entire dataset and another for only 'Ideal' cut diamonds, which is filtered using diamonds.query. The 'Ideal' bars are given a distinct color and width.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nhist = so.Hist(binwidth=.075, binrange=(2, 5))\n(\n    p.add(so.Bars(), hist)\n    .add(\n        so.Bars(color=\".9\", width=.5), hist,\n        data=diamonds.query(\"cut == 'Ideal'\")\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-faceted Linear Model Plot with Seaborn in Python\nDESCRIPTION: This snippet shows how to create a multi-faceted linear model plot using both columns and rows. It creates separate plots for different times of the day and genders, with hue distinguishing between smokers and non-smokers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\",\n           col=\"time\", row=\"sex\", data=tips, height=3);\n```\n\n----------------------------------------\n\nTITLE: Creating Pair Plot with Regression and Hue in Seaborn (Python)\nDESCRIPTION: This code demonstrates how to create a pair plot with regression and hue using Seaborn's pairplot function. It creates multiple scatter plots with regression lines, distinguishing between smokers and non-smokers using different colors.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(tips, x_vars=[\"total_bill\", \"size\"], y_vars=[\"tip\"],\n             hue=\"smoker\", height=5, aspect=.8, kind=\"reg\");\n```\n\n----------------------------------------\n\nTITLE: Quickstart example using Seaborn in Python\nDESCRIPTION: This snippet shows a basic example of using Seaborn to load a dataset and create a pairplot. It demonstrates importing Seaborn, loading data, and creating a visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/installing.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\ndf = sns.load_dataset(\"penguins\")\nsns.pairplot(df, hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Regression Plot with Seaborn in Python\nDESCRIPTION: This code loads the 'tips' dataset and creates a simple regression plot using Seaborn's regplot function. It visualizes the relationship between total bill and tip amount.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.regplot(x=\"total_bill\", y=\"tip\", data=tips);\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Relational Plot in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a highly customized relational plot using the penguins dataset, with custom styling, labels, and layout adjustments.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme(style=\"ticks\", font_scale=1.25)\ng = sns.relplot(\n    data=penguins,\n    x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"body_mass_g\",\n    palette=\"crest\", marker=\"x\", s=100,\n)\ng.set_axis_labels(\"Bill length (mm)\", \"Bill depth (mm)\", labelpad=10)\ng.legend.set_title(\"Body mass (g)\")\ng.figure.set_size_inches(6.5, 4.5)\ng.ax.margins(.15)\ng.despine(trim=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Plot with Seaborn in Python\nDESCRIPTION: This snippet demonstrates how to import Seaborn, set a theme, load a dataset, and create a relational plot using the tips dataset. It visualizes the relationship between total bill and tip, with additional dimensions represented by time, smoker status, and party size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Import seaborn\nimport seaborn as sns\n\n# Apply the default theme\nsns.set_theme()\n\n# Load an example dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Plot with Multiple Variables in Seaborn\nDESCRIPTION: This code creates a relational plot using the tips dataset, visualizing the relationship between total bill and tip, with additional dimensions represented by time, smoker status, and party size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create a visualization\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"smoker\", style=\"smoker\", size=\"size\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding bar labels to a Seaborn barplot\nDESCRIPTION: Creates a barplot and then adds text labels on top of each bar using matplotlib's bar_label method, demonstrating how to combine Seaborn with matplotlib functionality.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nax = sns.barplot(flights, x=\"year\", y=\"passengers\", estimator=\"sum\", errorbar=None)\nax.bar_label(ax.containers[0], fontsize=10);\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Grid Layout with GridSpec\nDESCRIPTION: Demonstrates how to create a complex layout with multiple subplots using Matplotlib's GridSpec, illustrating the difference between long-form and wide-form data visualization approaches.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nf = plt.figure(figsize=(7, 5))\n\ngs = plt.GridSpec(\n    ncols=6, nrows=2, figure=f,\n    left=0, right=.35, bottom=0, top=.9,\n    height_ratios=(1, 20),\n    wspace=.1, hspace=.01\n)\n\ncolors = [c + (.5,) for c in sns.color_palette()]\n\nf.add_subplot(gs[0, :], facecolor=\".8\")\n[\n    f.add_subplot(gs[1:, i], facecolor=colors[i])\n    for i in range(gs.ncols)\n]\n\ngs = plt.GridSpec(\n    ncols=2, nrows=2, figure=f,\n    left=.4, right=1, bottom=.2, top=.8,\n    height_ratios=(1, 8), width_ratios=(1, 11),\n    wspace=.015, hspace=.02\n)\n\nf.add_subplot(gs[0, 1:], facecolor=colors[2])\nf.add_subplot(gs[1:, 0], facecolor=colors[1])\nf.add_subplot(gs[1, 1], facecolor=colors[0])\n\nfor ax in f.axes:\n    ax.set(xticks=[], yticks=[])\n\nf.text(.35 / 2, .91, \"Long-form\", ha=\"center\", va=\"bottom\", size=15)\nf.text(.7, .81, \"Wide-form\", ha=\"center\", va=\"bottom\", size=15)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Relational Plot in Seaborn\nDESCRIPTION: This code creates a simple relational plot using the penguins dataset, showing the relationship between bill length and depth, colored by body mass.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=penguins,\n    x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"body_mass_g\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pair Plot in Seaborn\nDESCRIPTION: This code creates a pair plot using the penguins dataset, showing pairwise relationships between variables, colored by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(data=penguins, hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the required imports and initializes Seaborn theme for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom IPython.display import HTML\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Creating a Joint Plot in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a joint plot using the penguins dataset, showing the relationship between flipper length and bill length, colored by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.jointplot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating Pairplot for Iris Dataset in Python\nDESCRIPTION: This snippet creates a pairplot, which is a simplified version of PairGrid, for the iris dataset with scatter plots and histograms, differentiating between species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(iris, hue=\"species\", height=2.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Pair Plot with Regression in Seaborn (Python)\nDESCRIPTION: This snippet shows how to create a pair plot with regression using Seaborn's pairplot function. It creates multiple scatter plots with regression lines for different combinations of variables.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(tips, x_vars=[\"total_bill\", \"size\"], y_vars=[\"tip\"],\n             height=5, aspect=.8, kind=\"reg\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Model Plot for Discrete X-axis with Seaborn in Python\nDESCRIPTION: This code creates a linear model plot using Seaborn's lmplot function, but with a discrete x-axis (party size). It shows the relationship between party size and tip amount.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"size\", y=\"tip\", data=tips);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Swarmplot with Total Bill Data in Python\nDESCRIPTION: This code loads the 'tips' dataset and creates a basic swarmplot showing the distribution of total bill amounts. It demonstrates the simplest use of sns.swarmplot() with a single variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.swarmplot(data=tips, x=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Faceted Plots with Multiple Variables\nDESCRIPTION: Shows how to create faceted plots using column and row arrangements to display multiple relationships simultaneously.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=fmri, kind=\"line\",\n    x=\"timepoint\", y=\"signal\", hue=\"subject\",\n    col=\"region\", row=\"event\", height=3,\n    estimator=None\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with Facets using Seaborn in Python\nDESCRIPTION: This snippet creates a line plot with facets using Seaborn's relplot function. It visualizes the relationship between timepoint and signal, with different colors and styles for events, and separate columns for regions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=fmri, x=\"timepoint\", y=\"signal\", col=\"region\",\n    hue=\"event\", style=\"event\", kind=\"line\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Plots\nDESCRIPTION: Demonstrates various distribution plot configurations using Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", multiple=\"stack\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", multiple=\"stack\", kind=\"kde\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", col=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Model Plot with Seaborn in Python\nDESCRIPTION: This snippet uses Seaborn's lmplot function to create a linear model plot. It visualizes the relationship between total bill and tip amount, similar to the previous example but with additional features.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"tip\", data=tips);\n```\n\n----------------------------------------\n\nTITLE: Installing Seaborn with pip\nDESCRIPTION: Commands for installing the Seaborn package and its dependencies using pip. Includes an option for installing with additional statistical dependencies.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install seaborn\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install seaborn[stats]\n```\n\n----------------------------------------\n\nTITLE: Using Z-Score Normalization with Centered Colormap\nDESCRIPTION: Normalizes data using z-scores along axis 0 (rows), applies a diverging colormap ('vlag') centered at zero to emphasize positive and negative deviations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.clustermap(iris, z_score=0, cmap=\"vlag\", center=0)\n```\n\n----------------------------------------\n\nTITLE: Faceted Histogram with Proportion Stat\nDESCRIPTION: This snippet facets the plot `p` by the `island` variable, creating separate histograms for each island. It then adds a `so.Bars` mark and a `so.Hist` statistical transformation with `stat=\"proportion\"` to each facet, displaying proportions within each island.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np = p.facet(\"island\")\np.add(so.Bars(), so.Hist(stat=\"proportion\"))\n```\n\n----------------------------------------\n\nTITLE: Customizing Linear Model Plot with Markers and Colors in Seaborn (Python)\nDESCRIPTION: This snippet shows how to customize a linear model plot by specifying markers and colors. It creates a plot similar to the previous example but with custom markers for each category and a specific color palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips,\n           markers=[\"o\", \"x\"], palette=\"Set1\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring a Plot - Seaborn Objects Python\nDESCRIPTION: This snippet demonstrates creating a plot using the 'anscombe' dataset, with facets and layers like lines and dots. It uses the Seaborn objects interface to set up a Plot with x and y axis as well as dataset-based coloring, adding linear regression fitting.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = (\n    so.Plot(anscombe, \"x\", \"y\", color=\"dataset\")\n    .facet(\"dataset\", wrap=2)\n    .add(so.Line(), so.PolyFit(order=1))\n    .add(so.Dot())\n)\np\n```\n\n----------------------------------------\n\nTITLE: Creating a Boxen Plot with Color Encoding in Seaborn\nDESCRIPTION: Demonstrates a boxen plot with an additional categorical variable (sex) encoded using the 'hue' parameter, with automatic legend placement.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=df, x=\"age\", y=\"class\", hue=\"sex\", kind=\"boxen\")\n```\n\n----------------------------------------\n\nTITLE: Basic Seaborn Count Plot by Passenger Class\nDESCRIPTION: Creates a basic count plot showing the distribution of passengers across different class categories.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/countplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.countplot(titanic, x=\"class\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Relational Plot with Seaborn in Python\nDESCRIPTION: This snippet creates a basic relational plot using Seaborn's relplot function. It visualizes the relationship between total bill and tip, with different colors for each day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"day\")\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Area Plot with Transparency in Seaborn\nDESCRIPTION: This snippet creates a stacked area plot with the 'healthexp' dataset, introducing an alpha value for transparency. This visualization helps in comparing spending across countries while maintaining an elegant display. It builds upon the previous plot context with an additional stacking functionality.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n( so.Plot(healthexp, \"Year\", \"Spending_USD\", color=\"Country\")\n    .add(so.Area(alpha=.7), so.Stack()) )\n```\n\n----------------------------------------\n\nTITLE: Comprehensive FacetGrid Customization in Python\nDESCRIPTION: Shows a complex FacetGrid setup with custom labels, titles, axis limits, and saving the plot to a file.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"sex\", row=\"time\", margin_titles=True)\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\")\ng.set_axis_labels(\"Total bill ($)\", \"Tip ($)\")\ng.set_titles(col_template=\"{col_name} patrons\", row_template=\"{row_name}\")\ng.set(xlim=(0, 60), ylim=(0, 12), xticks=[10, 30, 50], yticks=[2, 6, 10])\ng.tight_layout()\ng.savefig(\"facet_plot.png\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Hue for Flights\nDESCRIPTION: Creates a line plot showing passenger trends over years, with different colors for each month.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue=\"month\")\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset with Seaborn\nDESCRIPTION: This snippet imports the Seaborn library and loads the 'mpg' dataset for use in subsequent plots. The dataset is essential for understanding the relationships between different car attributes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nmpg = load_dataset(\"mpg\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Linear Regression Plot with Seaborn\nDESCRIPTION: Creates a simple linear regression plot showing the relationship between bill length and bill depth of penguins. This demonstrates the basic usage of the lmplot function with only required parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lmplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Library in Python\nDESCRIPTION: This snippet shows how to import the Seaborn library, which is essential for creating statistical data visualizations in Python.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Import seaborn\nimport seaborn as sns\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Heatmap from Pivoted Dataset\nDESCRIPTION: Loads the 'glue' dataset from Seaborn, pivots it to create a matrix suitable for heatmap visualization, and generates a basic heatmap.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nglue = sns.load_dataset(\"glue\").pivot(index=\"Model\", columns=\"Task\", values=\"Score\")\nsns.heatmap(glue)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Dataset in Python\nDESCRIPTION: This snippet imports the Seaborn objects module and loads the 'tips' dataset for use in subsequent plotting examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ntips = load_dataset(\"tips\")\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Plot Matrix with PairGrid in Python\nDESCRIPTION: This code creates a PairGrid with histograms on the diagonal and colored scatter plots on the off-diagonal, differentiating between different species in the iris dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(iris, hue=\"species\")\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Creating a Boxenplot with Hue for Subgroups in Python\nDESCRIPTION: This code creates a boxenplot of diamond prices by clarity, with an additional hue dimension for large diamonds (>1 carat).\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlarge_diamond = diamonds[\"carat\"].gt(1).rename(\"large_diamond\")\nsns.boxenplot(data=diamonds, x=\"price\", y=\"clarity\", hue=large_diamond, gap=.2)\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot with Tips Dataset\nDESCRIPTION: Creates a simple scatter plot showing the relationship between total bill and tip amounts.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for FMRI Data with Markers\nDESCRIPTION: Creates a line plot using the FMRI dataset, showing signal changes over time with markers and different colors for events.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=fmri,\n    x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\",\n    markers=True, dashes=False\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Quantile Plot with FacetGrid in Python\nDESCRIPTION: This code defines a custom quantile plot function and maps it to a FacetGrid to visualize the distribution of total bill amounts for different genders.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom scipy import stats\ndef quantile_plot(x, **kwargs):\n    quantiles, xr = stats.probplot(x, fit=False)\n    plt.scatter(xr, quantiles, **kwargs)\n    \ng = sns.FacetGrid(tips, col=\"sex\", height=4)\ng.map(quantile_plot, \"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Histogram using Seaborn in Python\nDESCRIPTION: This code creates a stacked histogram of flipper lengths for different species using the 'multiple' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", multiple=\"stack\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scatter Plot with Color Encoding\nDESCRIPTION: Creates a scatter plot of penguin bill measurements with species encoded by color.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = (\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n    .add(so.Dot(), color=\"species\")\n)\np.label(x=\"Length\", y=\"Depth\", color=\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Residual Plot with Seaborn in Python\nDESCRIPTION: This code creates a residual plot using Seaborn, showing the relationship between 'weight' and 'displacement' variables from the mpg dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/residplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.residplot(data=mpg, x=\"weight\", y=\"displacement\")\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot\nDESCRIPTION: Creates a basic scatter plot comparing total bill and tip amounts.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Different Upper, Lower, and Diagonal Plots\nDESCRIPTION: Configures a PairGrid with scatterplots in the upper triangle, KDE plots in the lower triangle, and KDE plots on the diagonal. The diagonal y-axis scaling is independent from other plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, diag_sharey=False)\ng.map_upper(sns.scatterplot)\ng.map_lower(sns.kdeplot)\ng.map_diag(sns.kdeplot)\n```\n\n----------------------------------------\n\nTITLE: Creating a Seaborn FacetGrid in Python\nDESCRIPTION: This code loads the 'tips' dataset and creates a FacetGrid object, which is used for creating multi-plot grids.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\ng = sns.FacetGrid(tips, col=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot Matrix with PairGrid in Python\nDESCRIPTION: This code loads the 'iris' dataset and creates a PairGrid with scatter plots for all pairs of variables in the dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\niris = sns.load_dataset(\"iris\")\ng = sns.PairGrid(iris)\ng.map(sns.scatterplot)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bivariate KDE Plot using Seaborn in Python\nDESCRIPTION: This snippet creates a bivariate KDE plot of flipper lengths and bill lengths using Seaborn's displot function with 'x', 'y', and 'kind' parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", kind=\"kde\")\n```\n\n----------------------------------------\n\nTITLE: Robust Regression Plot\nDESCRIPTION: Demonstrates robust regression between horsepower and weight.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"horsepower\", y=\"weight\", robust=True)\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Hue by Species in Python\nDESCRIPTION: This snippet creates a pairplot of the penguins dataset, coloring points by species using the 'hue' parameter. This allows for better differentiation and analysis of species-specific characteristics.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Customizing FacetGrid Appearance in Python\nDESCRIPTION: This code creates a FacetGrid with custom styling, maps a scatter plot, and then customizes various aspects of the plot including axis labels, ticks, and subplot spacing.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith sns.axes_style(\"white\"):\n    g = sns.FacetGrid(tips, row=\"sex\", col=\"smoker\", margin_titles=True, height=2.5)\ng.map(sns.scatterplot, \"total_bill\", \"tip\", color=\"#334488\")\ng.set_axis_labels(\"Total bill (US Dollars)\", \"Tip\")\ng.set(xticks=[10, 30, 50], yticks=[2, 6, 10])\ng.figure.subplots_adjust(wspace=.02, hspace=.02)\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregated Band and Line Plot for FMRI Data\nDESCRIPTION: Creates a more complex plot using the FMRI dataset with both Band and Line objects. The plot shows signal over timepoints, colored by event type, with both a Band and Line visualization using estimation and aggregation methods respectively.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Band.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(fmri, x=\"timepoint\", y=\"signal\", color=\"event\")\n    .add(so.Band(), so.Est())\n    .add(so.Line(), so.Agg())\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Facets in Seaborn Objects\nDESCRIPTION: This example shows how to wrap facets across both dimensions in Seaborn Objects. It creates a plot of carat vs price for diamonds, faceted by color grade and wrapped into 4 columns.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(diamonds, x=\"carat\", y=\"price\").add(so.Dots())\np.facet(\"color\", wrap=4)\n```\n\n----------------------------------------\n\nTITLE: Creating LOWESS Smoothing Plot with Seaborn in Python\nDESCRIPTION: This snippet shows how to create a plot with LOWESS (Locally Weighted Scatterplot Smoothing) using Seaborn's lmplot function. It provides a non-parametric regression line for the relationship between total bill and tip.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"tip\", data=tips,\n           lowess=True, line_kws={\"color\": \"C1\"});\n```\n\n----------------------------------------\n\nTITLE: Creating Regression Jointplot\nDESCRIPTION: Creates a jointplot with regression line fitted to the data points, showing the linear relationship between bill length and depth.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"reg\")\n```\n\n----------------------------------------\n\nTITLE: Faceting While Pairing\nDESCRIPTION: This snippet demonstrates how to combine pairing with faceting. It pairs the 'horsepower' and 'acceleration' dependent variables while facetting by the 'origin' categorical variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg, x=\"weight\")\n    .pair(y=[\"horsepower\", \"acceleration\"])\n    .facet(col=\"origin\")\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Flights Dataset\nDESCRIPTION: Loads the 'flights' dataset using Seaborn's load_dataset function and displays the first few rows using the head() method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nflights = sns.load_dataset(\"flights\")\nflights.head()\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Bivariate KDE Plots\nDESCRIPTION: Creates bivariate KDE plots with a third variable mapped to the hue, showing different conditional joint distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=geyser, x=\"waiting\", y=\"duration\", hue=\"kind\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Transforming Health Expenditure Data with Seaborn\nDESCRIPTION: This snippet loads the health expenditure dataset, pivots it for analysis, interpolates missing values, and prepares it for plotting. It is crucial to have the Seaborn library installed. The expected input is a dataset with country spending data across different years, and the output is a transformed DataFrame ready for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nhealthexp = (\n    load_dataset(\"healthexp\")\n    .pivot(index=\"Year\", columns=\"Country\", values=\"Spending_USD\")\n    .interpolate()\n    .stack()\n    .rename(\"Spending_USD\")\n    .reset_index()\n    .sort_values(\"Country\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Plot Matrix with PairGrid in Python\nDESCRIPTION: This snippet creates a PairGrid with histograms on the diagonal and scatter plots on the off-diagonal to visualize relationships between all pairs of variables in the iris dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(iris)\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot)\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Color and Size Parameters\nDESCRIPTION: Creates a PairGrid with species-colored histograms on the diagonal, and scatterplots off-diagonal where point sizes are determined by the 'sex' variable, with a customized legend.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, hue=\"species\")\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot, size=penguins[\"sex\"])\ng.add_legend(title=\"\", adjust_subtitles=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bivariate KDE Plot\nDESCRIPTION: Loads the 'geyser' dataset and creates a bivariate KDE plot showing the joint distribution of 'waiting' and 'duration' variables.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ngeyser = sns.load_dataset(\"geyser\")\nsns.kdeplot(data=geyser, x=\"waiting\", y=\"duration\")\n```\n\n----------------------------------------\n\nTITLE: Fully Customized Boxplot with Notches\nDESCRIPTION: Creates a highly customized boxplot with notches, custom outlier markers, box colors, and median line properties.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(\n    data=titanic, x=\"age\", y=\"class\",\n    notch=True, showcaps=False,\n    flierprops={\"marker\": \"x\"},\n    boxprops={\"facecolor\": (.3, .5, .7, .5)},\n    medianprops={\"color\": \"r\", \"linewidth\": 2},\n)\n```\n\n----------------------------------------\n\nTITLE: Reducing Overplotting with Dodge and Jitter in Seaborn Objects\nDESCRIPTION: Illustrates the use of dodging and jittering to minimize overplotting, enhancing plot readability. This example creates a plot of 'tips' dataset with 'total_bill' by 'day', colored by 'sex', and adds jittering and dodging transformations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n(so.Plot(tips, \"total_bill\", \"day\", color=\"sex\")\n    .add(so.Dot(), so.Dodge(), so.Jitter(.2)))\n```\n\n----------------------------------------\n\nTITLE: Advanced Visualization Techniques\nDESCRIPTION: Demonstrates advanced visualization techniques including joint plots, pair plots, and combined visualizations using multiple Seaborn functions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/distributions.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(\n    data=penguins,\n    x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\",\n    kind=\"kde\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot_joint(sns.histplot)\ng.plot_marginals(sns.boxplot)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins)\n```\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins)\ng.map_upper(sns.histplot)\ng.map_lower(sns.kdeplot, fill=True)\ng.map_diag(sns.histplot, kde=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Display Scaling Factor\nDESCRIPTION: This code snippet sets the display scaling factor for `seaborn.objects` plots to 0.7. This scales the plot size by a factor of 0.7. It provides a way to adjust the overall size of the plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nso.Plot.config.display[\"scaling\"] = 0.7\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with KDE Overlay using Seaborn in Python\nDESCRIPTION: This snippet creates a histogram of flipper lengths with a KDE curve overlay using the 'kde' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", kde=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plot from Wide-Form Data\nDESCRIPTION: Generates box plots for each month using the wide-format flights data to show distribution of passengers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=flights_wide, kind=\"box\")\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Multiple Variables\nDESCRIPTION: Creates a scatter plot mapping additional variables to visual properties like color and point size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/objects_interface.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(\n        penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n        color=\"species\", pointsize=\"body_mass_g\",\n    )\n    .add(so.Dot())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Line Plot with Facets in Python\nDESCRIPTION: This code creates a customized line plot with facets using Seaborn. It visualizes the relationship between timepoint and signal, with different colors and styles for events, separate columns for regions, and custom height and aspect ratio.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=fmri,\n    x=\"timepoint\", y=\"signal\",\n    hue=\"event\", style=\"event\", col=\"region\",\n    height=4, aspect=.7, kind=\"line\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Filtered Data Overlay in Python\nDESCRIPTION: This snippet creates a scatter plot with all data points and overlays a subset of data (size == 2) with different colors using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, \"total_bill\", \"tip\")\n    .add(so.Dot(color=\"#aabc\"))\n    .add(so.Dot(), data=tips.query(\"size == 2\"), color=\"time\")\n)\n```\n\n----------------------------------------\n\nTITLE: Box and Violin Plot Examples\nDESCRIPTION: Demonstrates box and violin plot variations with different customization options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/categorical.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, x=\"day\", y=\"total_bill\", kind=\"box\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(\n    data=tips, x=\"total_bill\", y=\"day\", hue=\"sex\",\n    kind=\"violin\", bw_adjust=.5, cut=0,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting a Title for a Single-Axes Plot\nDESCRIPTION: Demonstrates how to add a descriptive title to a single plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.label(title=\"Penguin species exhibit distinct bill shapes\")\n```\n\n----------------------------------------\n\nTITLE: Creating Residual Plot for Anscombe Dataset II with Seaborn in Python\nDESCRIPTION: This snippet creates a residual plot for the second dataset in the Anscombe quartet. It demonstrates how residual plots can reveal non-linear patterns that are not apparent in the original scatter plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsns.residplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),\n              scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: Using Distribution Plot Functions (Python/Seaborn)\nDESCRIPTION: Examples of the new distribution plotting functions displot(), histplot() and ecdfplot() with improved features like hue semantic mapping, flexible binning, and KDE fitting.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.0.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Univariate or bivariate histogram\ndisplot(data)\n\n# Histogram with hue semantic and density normalization\nhistplot(data, x=\"var\", hue=\"category\", stat=\"density\")\n\n# Empirical cumulative distribution function\necdfplot(data, x=\"var\")\n```\n\n----------------------------------------\n\nTITLE: Creating a barplot with custom estimator and no error bars\nDESCRIPTION: Creates a barplot showing the sum of passengers by year rather than the default mean, and removes error bars entirely by setting errorbar to None.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(flights, x=\"year\", y=\"passengers\", estimator=\"sum\", errorbar=None)\n```\n\n----------------------------------------\n\nTITLE: Combining Histogram and KDE Plot\nDESCRIPTION: Creates a compound visualization with both a histogram and KDE line on the same plot, allowing for comparison between the discrete binned data and smooth density estimation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np2 = p.add(so.Bars(alpha=.3), so.Hist(\"density\"))\np2.add(so.Line(), so.KDE())\n```\n\n----------------------------------------\n\nTITLE: Bar Plot with Offset Text Annotations in Python\nDESCRIPTION: This snippet extends the previous bar plot to include text annotations with a specified offset for clarity. The bars represent average scores per model, with annotations offset to prevent overlap, improving readability.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n(\n    so.Plot(glue, x=\"Average\", y=\"Model\", text=\"Average\")\n    .add(so.Bar())\n    .add(so.Text(color=\"w\", halign=\"right\", offset=6))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Paired Plot using Seaborn's Object-Oriented Interface in Python\nDESCRIPTION: This code creates a paired plot using Seaborn's object-oriented interface. It specifies the data source, x and y variables for pairing, layout size, and shared axes. The plot is initialized with a Paths object for basic line representation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Paths.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = (\n    so.Plot(networks)\n    .pair(\n        x=[\"5\", \"8\", \"12\", \"15\"],\n        y=[\"6\", \"13\", \"16\"],\n    )\n    .layout(size=(8, 5))\n    .share(x=True, y=True)\n)\np.add(so.Paths())\n```\n\n----------------------------------------\n\nTITLE: Creating a Jittered Scatter Plot with Seaborn Objects in Python\nDESCRIPTION: This snippet creates a jittered scatter plot of total bill vs. size, colored by time, using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, x=\"total_bill\", y=\"size\", color=\"time\")\n    .add(so.Dot(alpha=.5), so.Dodge(), so.Jitter(.4), orient=\"y\")\n)\n```\n\n----------------------------------------\n\nTITLE: Common import statements for Seaborn usage in Python\nDESCRIPTION: This snippet shows the typical import statements used when working with Seaborn, including NumPy, Pandas, Matplotlib, and Seaborn itself.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/installing.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nimport seaborn.objects as so\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Custom Plot and Diagonal Options in Python\nDESCRIPTION: This snippet customizes the pairplot with specific plotting options for the lower and diagonal plots, enhancing the visual distinction of the data points and their distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(\n    penguins,\n    plot_kws=dict(marker=\"+\", linewidth=1),\n    diag_kws=dict(fill=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Plot with Dashes and Dots\nDESCRIPTION: Creates a complex visualization that combines aggregated, dodged dash marks with jittered dot points for detailed data representation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(\n    p\n    .add(so.Dash(), so.Agg(), so.Dodge())\n    .add(so.Dots(), so.Dodge(), so.Jitter())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empirical Cumulative Distribution Function Plot in Seaborn\nDESCRIPTION: This snippet demonstrates how to create an ECDF plot of total bill amounts from the tips dataset, separated by time and smoker status, with added rug plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=tips, kind=\"ecdf\", x=\"total_bill\", col=\"time\", hue=\"smoker\", rug=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Encoder Alignment in Python\nDESCRIPTION: This snippet depicts a dot plot for 'RTE' against 'MRPC' scores, colored by 'Encoder' and text annotations aligned based on 'Encoder' type. Custom scale aligns text left or right depending on the encoder, enhancing clarity.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n(\n    so.Plot(glue, x=\"RTE\", y=\"MRPC\", color=\"Encoder\", text=\"Model\")\n    .add(so.Dot())\n    .add(so.Text(), halign=\"Encoder\")\n    .scale(halign={\"LSTM\": \"left\", \"Transformer\": \"right\"})\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Highly Customized Line Plot with Additional Features in Python\nDESCRIPTION: This snippet creates a highly customized line plot using Seaborn and Matplotlib. It visualizes the relationship between timepoint and signal, with different colors and styles for events, separate columns for regions, and includes additional features like a horizontal line, custom labels, and titles.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ng = sns.relplot(\n    data=fmri,\n    x=\"timepoint\", y=\"signal\",\n    hue=\"event\", style=\"event\", col=\"region\",\n    height=4, aspect=.7, kind=\"line\"\n)\n(g.map(plt.axhline, y=0, color=\".7\", dashes=(2, 1), zorder=0)\n  .set_axis_labels(\"Timepoint\", \"Percent signal change\")\n  .set_titles(\"Region: {col_name} cortex\")\n  .tight_layout(w_pad=0))\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Regression Plot in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a linear regression plot using the tips dataset, showing the relationship between total bill and tip, separated by time and smoker status.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(data=tips, x=\"total_bill\", y=\"tip\", col=\"time\", hue=\"smoker\")\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional KDE Plots with Hue Mapping\nDESCRIPTION: Creates multiple KDE plots on the same axes, with different colors representing different categories of the 'time' variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Glue Dataset with Facets and Limits in Seaborn Objects\nDESCRIPTION: Creates a faceted plot of the 'glue' dataset using the Seaborn Objects API, showcasing 'Score' versus 'Model' and faceting by 'Task' with a limit on the x-axis. This plot demonstrates more complex layout and axis configurations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\np2 = so.Plot(glue, \"Score\", \"Model\").facet(\"Task\", wrap=4).limit(x=(-5, 105))\np2.add(so.Dot())\n```\n\n----------------------------------------\n\nTITLE: Layering Multiple Plot Types in Seaborn\nDESCRIPTION: Demonstrates layering two different plot types (violin and swarm) to create a more informative visualization that shows both distribution and individual data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=df, x=\"age\", y=\"class\", kind=\"violin\", color=\".9\", inner=None)\nsns.swarmplot(data=df, x=\"age\", y=\"class\", size=3)\n```\n\n----------------------------------------\n\nTITLE: Advanced Categorical Plots with Various Options\nDESCRIPTION: Demonstrates different variations of categorical plots with options like jitter, swarm, and hue parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/categorical.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, x=\"day\", y=\"total_bill\", jitter=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, x=\"day\", y=\"total_bill\", kind=\"swarm\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, x=\"day\", y=\"total_bill\", hue=\"sex\", kind=\"swarm\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Scaling to Clustermap\nDESCRIPTION: Standardizes the data along axis 1 (columns) before clustering, which normalizes features to have comparable scales for more meaningful comparisons.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.clustermap(iris, standard_scale=1)\n```\n\n----------------------------------------\n\nTITLE: Setting Seaborn's Default Theme and Creating a Bar Plot in Python\nDESCRIPTION: This snippet demonstrates how to set Seaborn's default theme using set_theme() and then create a bar plot. This affects all subsequent plots, including those made with matplotlib.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme()\nsns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Customized Regression Plot\nDESCRIPTION: Shows regression with custom confidence interval, markers, colors, and line properties.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(\n    data=mpg, x=\"weight\", y=\"horsepower\",\n    ci=99, marker=\"x\", color=\".3\", line_kws=dict(color=\"r\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Mixed Plot Matrix with Upper and Lower Triangles in Python\nDESCRIPTION: This code creates a PairGrid with different plot types in the upper and lower triangles, and kernel density plots on the diagonal for the iris dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(iris)\ng.map_upper(sns.scatterplot)\ng.map_lower(sns.kdeplot)\ng.map_diag(sns.kdeplot, lw=3, legend=False)\n```\n\n----------------------------------------\n\nTITLE: Adjusting KDE Bandwidth\nDESCRIPTION: Modifies the KDE visualization by adjusting the bandwidth parameter to create a smoother or more detailed density curve.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), so.KDE(bw_adjust=0.25))\n```\n\n----------------------------------------\n\nTITLE: Using Ranking Values as Annotations in Heatmap\nDESCRIPTION: Creates a heatmap where cells are annotated with their rank values calculated across columns rather than showing the original data values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, annot=glue.rank(axis=\"columns\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Distribution Plots\nDESCRIPTION: Demonstrates various distribution plot configurations including histograms, KDE plots, and ECDF plots using different datasets and parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/distributions.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.displot(penguins, x=\"flipper_length_mm\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(penguins, x=\"flipper_length_mm\", binwidth=3)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(penguins, x=\"flipper_length_mm\", bins=20)\n```\n\n----------------------------------------\n\nTITLE: Changing Distance Metric and Linkage Method in Clustermap\nDESCRIPTION: Modifies the clustering algorithm parameters by using correlation as the distance metric and single linkage as the method for hierarchical clustering.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.clustermap(iris, metric=\"correlation\", method=\"single\")\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Model Plot for Anscombe Dataset I in Python\nDESCRIPTION: This code creates a linear model plot for the first dataset in the Anscombe quartet. It demonstrates how to filter data and customize plot appearance in Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'I'\"),\n           ci=None, scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Line Plot for FMRI Data\nDESCRIPTION: Creates a faceted line plot using the FMRI dataset, with separate subplots for each region and different colors and styles for events.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=fmri, x=\"timepoint\", y=\"signal\",\n    col=\"region\", hue=\"event\", style=\"event\",\n    kind=\"line\"\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Scatter Plot Customization\nDESCRIPTION: Shows various ways to customize scatter plots using different visual attributes like hue, style, size, and custom palettes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=tips,\n    x=\"total_bill\", y=\"tip\", hue=\"smoker\", style=\"smoker\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Scatter Plot Matrix with PairGrid in Python\nDESCRIPTION: This code creates a PairGrid with colored scatter plots for all variable pairs in the tips dataset, using party size for color coding.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(tips, hue=\"size\", palette=\"GnBu_d\")\ng.map(plt.scatter, s=50, edgecolor=\"white\")\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: JointGrid with Hue-based Scatter and Histogram\nDESCRIPTION: Demonstrates how to create a JointGrid with scatter and histogram plots colored by a categorical variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\")\ng.plot(sns.scatterplot, sns.histplot)\n```\n\n----------------------------------------\n\nTITLE: Stacked KDE Plot by Sex\nDESCRIPTION: Creates a stacked area plot of kernel density estimates grouped by sex, allowing for comparison of distributions while maintaining the total density.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), so.KDE(), so.Stack(), color=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical KDE Plot\nDESCRIPTION: Creates a kernel density estimation plot with the y-axis representing flipper length, demonstrating how to change plot orientation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(penguins, y=\"flipper_length_mm\").add(so.Area(), so.KDE())\n```\n\n----------------------------------------\n\nTITLE: Advanced Histogram with Aggregation and Error Bars in Seaborn Python\nDESCRIPTION: Demonstrates creating a complex plot that includes dodged bars, aggregated statistics, and standard deviation error bars, visualizing 'body_mass_g' by 'species' and 'sex' in the 'penguins' dataset using Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n(\\n    so.Plot(penguins, \"body_mass_g\", \"species\", color=\"sex\")\\n    .add(so.Bar(alpha=.5), so.Agg(), so.Dodge())\\n    .add(so.Range(), so.Est(errorbar=\"sd\"), so.Dodge())\\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Aesthetics in Bar and Histogram Plot with Seaborn Python\nDESCRIPTION: This snippet exhibits advanced customization in Seaborn plots by mapping multiple aesthetic properties like 'color', 'alpha', and 'edgestyle' to 'sex' when plotting 'species' in the 'penguins' dataset, alongside dodged bars and histograms.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n(\\n    so.Plot(\\n        penguins, x=\"species\",\\n        color=\"sex\", alpha=\"sex\", edgestyle=\"sex\",\\n    )\\n    .add(so.Bar(edgewidth=2), so.Hist(), so.Dodge(\"fill\"))\\n)\n```\n\n----------------------------------------\n\nTITLE: Drawing Histograms on Nominal Variables with Seaborn in Python\nDESCRIPTION: This snippet uses Seaborn to draw bars and histograms on a nominal scale variable 'species' from the 'penguins' dataset. It illustrates the ability to combine different plot layers in a single visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(penguins, x=\"species\").add(so.Bar(), so.Hist())\n```\n\n----------------------------------------\n\nTITLE: Creating a Corner PairGrid\nDESCRIPTION: Creates a corner PairGrid (lower triangle only) with scatterplots in the lower triangle and KDE plots on the diagonal, with independent diagonal y-axis scaling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, diag_sharey=False, corner=True)\ng.map_lower(sns.scatterplot)\ng.map_diag(sns.kdeplot)\n```\n\n----------------------------------------\n\nTITLE: Basic Clustermap Visualization with Iris Dataset\nDESCRIPTION: Loads the iris dataset, separates the species column, and creates a basic clustermap visualization of the remaining numeric features.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\niris = sns.load_dataset(\"iris\")\nspecies = iris.pop(\"species\")\nsns.clustermap(iris)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for Dots Data with Custom Palette\nDESCRIPTION: Creates a line plot using the dots dataset with a custom color palette for coherence levels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\npalette = sns.color_palette(\"mako_r\", 6)\nsns.lineplot(\n    data=dots, x=\"time\", y=\"firing_rate\",\n    hue=\"coherence\", style=\"choice\",\n    palette=palette\n)\n```\n\n----------------------------------------\n\nTITLE: KDE with Color Grouping by Species\nDESCRIPTION: Creates KDE plots colored by species, allowing for comparison of distributions across different penguin species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), so.KDE(), color=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Weighted Bar Chart with Seaborn Objects in Python\nDESCRIPTION: This code creates a weighted bar chart showing the total patrons by day using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, \"day\")\n    .add(so.Bar(), so.Hist(), weight=\"size\")\n    .label(y=\"Total patrons\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Band Plot with Seaborn Objects\nDESCRIPTION: Initializes a Plot object with the sea ice dataset, specifying the x-axis as 'Day' and using columns '1980' and '2019' as the lower and upper bounds for a band visualization. A simple Band object is added to visualize the range between the two years.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Band.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(seaice, x=\"Day\", ymin=\"1980\", ymax=\"2019\")\np.add(so.Band())\n```\n\n----------------------------------------\n\nTITLE: Customizing Clustermap Figure Size and Layout\nDESCRIPTION: Creates a clustermap with custom figure size, disables row clustering, and adjusts the dendrogram ratio and colorbar position parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.clustermap(\n    iris,\n    figsize=(7, 5),\n    row_cluster=False,\n    dendrogram_ratio=(.1, .2),\n    cbar_pos=(0, .2, .03, .4)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Normalized Stacked KDE Distributions\nDESCRIPTION: Creates a stacked KDE plot where distributions are normalized at each value point, showing the relative proportion of each category at each x value.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"time\", multiple=\"fill\")\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Plot - Seaborn - Python\nDESCRIPTION: This snippet creates a bar plot using Seaborn's Plot class, visualizing the count of passengers for each class differentiated by sex in the Titanic dataset. The 'color' parameter specifies the grouping variable, 'sex'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Stack.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(titanic, x=\"class\", color=\"sex\").add(so.Bar(), so.Count(), so.Stack())\n```\n\n----------------------------------------\n\nTITLE: Seaborn Theme and Style Examples\nDESCRIPTION: Multiple examples showing different Seaborn themes and styles including whitegrid, dark, white, and ticks, along with various plot types and customizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme()\nsinplot()\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"whitegrid\")\ndata = np.random.normal(size=(20, 6)) + np.arange(6) / 2\nsns.boxplot(data=data);\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"dark\")\nsinplot()\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"white\")\nsinplot()\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"ticks\")\nsinplot()\n```\n\n----------------------------------------\n\nTITLE: Installing Seaborn using conda in Python\nDESCRIPTION: This snippet demonstrates how to install Seaborn using conda. It includes two commands: one using the main Anaconda repository and another using the conda-forge channel.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/installing.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install seaborn\n```\n\nLANGUAGE: bash\nCODE:\n```\nconda install seaborn -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Creating Filled Contour Bivariate KDE Plots\nDESCRIPTION: Creates bivariate KDE plots with filled contours, showing density regions for different categories.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(\n    data=geyser, x=\"waiting\", y=\"duration\", hue=\"kind\", fill=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Point Estimates in Seaborn\nDESCRIPTION: This code creates a violin plot of age distribution by deck, using point estimates for the inner representation. It shows how to use the 'inner' parameter with the 'point' option.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"age\", y=\"deck\", inner=\"point\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for FMRI Data with Error Bars\nDESCRIPTION: Creates a line plot using the FMRI dataset, showing signal changes over time with error bars representing standard error.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=fmri, x=\"timepoint\", y=\"signal\", hue=\"event\", err_style=\"bars\", errorbar=(\"se\", 2),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Joint and Pair Plots\nDESCRIPTION: Shows different types of joint distribution visualizations and pairwise relationships.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", hue=\"species\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(data=penguins, hue=\"species\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", hue=\"species\", kind=\"hist\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with fMRI Data in Seaborn\nDESCRIPTION: This code creates a line plot using the fMRI dataset, visualizing signal changes over time for different regions and events.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfmri = sns.load_dataset(\"fmri\")\nsns.relplot(\n    data=fmri, kind=\"line\",\n    x=\"timepoint\", y=\"signal\", col=\"region\",\n    hue=\"event\", style=\"event\",\n)\n```\n\n----------------------------------------\n\nTITLE: Pairing Without Cross-Pairing\nDESCRIPTION: In this snippet, lists for both `x` and `y` are passed to pair specific positions without showing all combinations by using `cross=False`. The independent variables are 'weight' and 'acceleration', paired with 'displacement' and 'horsepower'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg)\n    .pair(\n        x=[\"weight\", \"acceleration\"],\n        y=[\"displacement\", \"horsepower\"],\n        cross=False,\n    )\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Faceted Line Plot with Seaborn\nDESCRIPTION: This snippet initializes a plot with multiple aspects by mapping 'region' and 'event' as color and linestyle keys, and adds line and aggregation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\np = so.Plot(fmri, \"timepoint\", \"signal\", color=\"region\", linestyle=\"event\")\np.add(so.Line(), so.Agg())\n```\n\n----------------------------------------\n\nTITLE: Creating Binary Outcome Plot with Seaborn in Python\nDESCRIPTION: This snippet shows how to create a plot for binary outcomes using Seaborn's lmplot function. It creates a new binary variable 'big_tip' and plots it against the total bill.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ntips[\"big_tip\"] = (tips.tip / tips.total_bill) > .15\nsns.lmplot(x=\"total_bill\", y=\"big_tip\", data=tips,\n           y_jitter=.03);\n```\n\n----------------------------------------\n\nTITLE: Dodged Bar Plot with Color Encoding in Seaborn\nDESCRIPTION: This snippet creates a dodged bar plot, where the bars are grouped by the 'cut' variable, and color-encoded accordingly. It aggregates by the mean by default.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Agg.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bar(), so.Agg(), so.Dodge(), color=\"cut\")\n```\n\n----------------------------------------\n\nTITLE: Creating Hexbin Plot with FacetGrid in Python\nDESCRIPTION: This snippet defines a custom hexbin plot function and maps it to a FacetGrid with a dark style to visualize the relationship between total bill and tip amounts for different times of day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef hexbin(x, y, color, **kwargs):\n    cmap = sns.light_palette(color, as_cmap=True)\n    plt.hexbin(x, y, gridsize=15, cmap=cmap, **kwargs)\n\nwith sns.axes_style(\"dark\"):\n    g = sns.FacetGrid(tips, hue=\"time\", col=\"time\", height=4)\ng.map(hexbin, \"total_bill\", \"tip\", extent=[0, 50, 0, 10]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Jointplot Markers and Marginals\nDESCRIPTION: Creates a jointplot with customized marker style, size, and marginal plot settings, showing how to adjust the appearance of both the main scatter plot and the marginal distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(\n    data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n    marker=\"+\", s=100, marginal_kws=dict(bins=25, fill=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating KDE Jointplot with Categorical Hue\nDESCRIPTION: Creates a kernel density estimation (KDE) jointplot with data separated by species, showing the density distributions of bill measurements for each species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", kind=\"kde\")\n```\n\n----------------------------------------\n\nTITLE: Creating ECDF Plots from Wide-Form Data\nDESCRIPTION: Shows how to create ECDF plots when neither x nor y is specified, using wide-form data. In this case, a separate ECDF is created for each numeric column containing 'bill_' in the name.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.ecdfplot(data=penguins.filter(like=\"bill_\", axis=\"columns\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Bar Plot with Seaborn Plot in Python\nDESCRIPTION: This snippet demonstrates how to create a basic bar plot using the Seaborn Plot API by plotting the 'month' and 'passengers' variables from the 'flights' dataset. It showcases the simplest form of plotting by using Seaborn's object-oriented interface.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(flights[\"month\"], flights[\"passengers\"]).add(so.Bar())\n```\n\n----------------------------------------\n\nTITLE: Creating a highly customized barplot with styled error bars\nDESCRIPTION: Creates a barplot with custom error bars showing percentile intervals, customized caps, and styled bars with transparent fill and custom edge colors and linewidths.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(\n    penguins, x=\"body_mass_g\", y=\"island\",\n    errorbar=(\"pi\", 50), capsize=.4,\n    err_kws={\"color\": \".5\", \"linewidth\": 2.5},\n    linewidth=2.5, edgecolor=\".5\", facecolor=(0, 0, 0, 0),\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Plot Features with Seaborn Objects\nDESCRIPTION: Demonstrates complex plot configurations, including shifting, jittering, aggregation, and error bars, applied to the 'tips' dataset. This snippet showcases extensive use of Seaborn features to create a comprehensive visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n(so.Plot(tips, x=\"total_bill\", y=\"day\")\n    .add(so.Dot(pointsize=3), so.Shift(y=.2), so.Jitter(.2))\n    .add(so.Dot(), so.Agg())\n    .add(so.Range(), so.Est(errorbar=(\"se\", 2)))\n)\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Dodged Points in Python\nDESCRIPTION: This snippet creates a swarmplot of total bill by day, with points colored by sex and dodged for better separation. It introduces the 'dodge' parameter for improved visibility of categories.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"sex\", dodge=True)\n```\n\n----------------------------------------\n\nTITLE: Categorical Distribution Analysis\nDESCRIPTION: Shows distribution plots for categorical data using the tips dataset with various binning and display options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/distributions.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.displot(tips, x=\"size\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(tips, x=\"size\", bins=[1, 2, 3, 4, 5, 6, 7])\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(tips, x=\"size\", discrete=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(tips, x=\"day\", shrink=.8)\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Bar Chart with Seaborn Objects in Python\nDESCRIPTION: This code creates a grouped bar chart showing the distribution of days by sex using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, y=\"day\", color=\"sex\")\n    .add(so.Bar(), so.Hist(), so.Dodge())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Linear Regression Plot by Sex with Hue\nDESCRIPTION: Creates a faceted plot with separate panels for each sex, while also coloring by species. This more complex visualization combines categorical variables as both hue and column facets with customized height parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lmplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(\n    data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n    hue=\"species\", col=\"sex\", height=4,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Two-Dimensional Faceted Grid in Seaborn Objects\nDESCRIPTION: This example shows how to create a two-dimensional faceted grid using two variables ('species' and 'sex') in Seaborn Objects. It extends the previous plot to create subplots for each combination of species and sex.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"species\", \"sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Line Plot with Band for FMRI Data\nDESCRIPTION: Builds a visualization of FMRI data that includes both individual subject lines and an aggregated band. The plot shows signal over timepoints, colored by event type, with thin lines for individual subjects and a band representing the overall pattern.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Band.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(fmri, x=\"timepoint\", y=\"signal\", color=\"event\")\n    .add(so.Line(linewidth=.5), group=\"subject\")\n    .add(so.Band())\n)\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Histogram Kind in Python\nDESCRIPTION: This snippet creates a pairplot with the histogram representation for each variable's distribution, allowing for quick visual assessments of univariate distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, kind=\"hist\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Plot with Column Facets in Python\nDESCRIPTION: This code creates a relational plot with column facets using Seaborn. It visualizes the relationship between total bill and tip, with different colors for each day and separate plots for different times.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"day\", col=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Two-Dimensional Grid of Subplots\nDESCRIPTION: This snippet highlights how to create a grid of subplots by wrapping the independent variables while plotting against the 'mpg' dependent variable. This example uses four independent variables across two rows.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg, y=\"mpg\")\n    .pair(x=[\"displacement\", \"weight\", \"horsepower\", \"cylinders\"], wrap=2)\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Advanced Jitter Customization for Seaborn Plot\nDESCRIPTION: Features a scatter plot after rounding 'body_mass_g' and 'flipper_length_mm' to specified magnitudes, applying custom jitters of 200 for x and 5 for y. This advanced customization empowers fine control over visual clutter in data presentation, supporting better interpretations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(\n        penguins[\"body_mass_g\"].round(-3),\n        penguins[\"flipper_length_mm\"].round(-1),\n    )\n    .add(so.Dots(), so.Jitter(x=200, y=5))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Model Plot with Hue in Seaborn (Python)\nDESCRIPTION: This code demonstrates how to create a linear model plot with different hues using Seaborn's lmplot function. It visualizes the relationship between total bill and tip, with separate regression lines for smokers and non-smokers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips);\n```\n\n----------------------------------------\n\nTITLE: Logistic Regression Plot\nDESCRIPTION: Creates a logistic regression plot for binary outcome (USA vs non-USA origin).\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(x=mpg[\"weight\"], y=mpg[\"origin\"].eq(\"usa\").rename(\"from_usa\"), logistic=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Histogram with Log Scale\nDESCRIPTION: This snippet creates a basic histogram of the 'price' variable from the 'diamonds' dataset using seaborn.objects. It initializes a Plot object, adds Bars representing the histogram, and applies a logarithmic scale to the x-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(diamonds, \"price\").scale(x=\"log\")\np.add(so.Bars(), so.Hist())\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Regression Plot with Categorical Coloring\nDESCRIPTION: Enhances the linear regression plot by using the 'hue' parameter to color data points by penguin species. This visualization helps identify how the relationship between bill measurements varies across different species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lmplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Enhancing Plot with Additional Elements in Seaborn\nDESCRIPTION: This snippet enhances the initialized plot by adding a line with aggregated statistics and a band to show estimation, grouped by 'event'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n(\n    p\n    .add(so.Line(), so.Agg())\n    .add(so.Band(), so.Est(), group=\"event\")\n)\n```\n\n----------------------------------------\n\nTITLE: JointGrid with Regression and Box Plots\nDESCRIPTION: Creates a JointGrid with a regression plot on the joint axis and box plots on the marginal axes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot(sns.regplot, sns.boxplot)\n```\n\n----------------------------------------\n\nTITLE: Creating Logistic Regression Plot with Seaborn in Python\nDESCRIPTION: This code demonstrates how to create a logistic regression plot using Seaborn's lmplot function. It fits a logistic regression model to the binary 'big_tip' outcome.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"big_tip\", data=tips,\n           logistic=True, y_jitter=.03);\n```\n\n----------------------------------------\n\nTITLE: Creating a KDE Plot with Log Scaling\nDESCRIPTION: Loads the 'diamonds' dataset and creates a KDE plot with logarithmic scaling on the x-axis to better visualize skewed data distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndiamonds = sns.load_dataset(\"diamonds\")\nsns.kdeplot(data=diamonds, x=\"price\", log_scale=True)\n```\n\n----------------------------------------\n\nTITLE: Bar Plot by Day with Count\nDESCRIPTION: Creates a bar plot showing the count of records for each day in the tips dataset\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Count.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(tips, x=\"day\").add(so.Bar(), so.Count())\n```\n\n----------------------------------------\n\nTITLE: Using Mean Estimator in Seaborn Linear Model Plot in Python\nDESCRIPTION: This code shows how to use a mean estimator for the x-axis in a Seaborn linear model plot. It calculates the mean tip for each unique party size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"size\", y=\"tip\", data=tips, x_estimator=np.mean);\n```\n\n----------------------------------------\n\nTITLE: Customizing Area Plot with Edge Color in Seaborn\nDESCRIPTION: This snippet modifies the area plot by setting a specific edge color for the areas based on 'Country' and defining a constant fill color. This allows for a stylized visual effect in the plot, adding to the aesthetics of the data representation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(color=\".5\", edgewidth=2), edgecolor=\"Country\")\n```\n\n----------------------------------------\n\nTITLE: Multiple Subplot Styles\nDESCRIPTION: Creates a figure with multiple subplots, each using a different Seaborn style.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nf = plt.figure(figsize=(6, 6))\ngs = f.add_gridspec(2, 2)\n\nwith sns.axes_style(\"darkgrid\"):\n    ax = f.add_subplot(gs[0, 0])\n    sinplot(6)\n    \nwith sns.axes_style(\"white\"):\n    ax = f.add_subplot(gs[0, 1])\n    sinplot(6)\n\nwith sns.axes_style(\"ticks\"):\n    ax = f.add_subplot(gs[1, 0])\n    sinplot(6)\n\nwith sns.axes_style(\"whitegrid\"):\n    ax = f.add_subplot(gs[1, 1])\n    sinplot(6)\n    \nf.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Penguins Body Mass Distribution\nDESCRIPTION: Creates a plot of penguin body mass by species using Seaborn objects. Incorporates jittered dot plot and range visualization with percentile markers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Shift.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, \"species\", \"body_mass_g\")\n    .add(so.Dots(), so.Jitter())\n    .add(so.Range(), so.Perc([25, 75]), so.Shift(x=.2))\n)\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Size Hue\nDESCRIPTION: Creates a scatter plot with points colored by party size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\")\n```\n\n----------------------------------------\n\nTITLE: Adding Alpha Transparency by 'clarity' Category\nDESCRIPTION: This snippet modifies the histogram by adding alpha transparency to the bars based on the 'clarity' category of the diamonds.  This helps to visualize overlapping bars and the density of data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(edgewidth=0), so.Hist(), so.Stack(), alpha=\"clarity\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Scale Plot with Different Transformations\nDESCRIPTION: Creates a plot with three panels demonstrating different scale transformations (log, symlog, sqrt) with customized tick locations and styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(y=[0, 0, 0])\n    .pair(x=[[1, 10, 100], [-100, 0, 100], [0, 10, 40]])\n    .limit(\n    )\n    .add(so.Dot(marker=\"\"))\n    .scale(\n        y=so.Continuous().tick(count=0),\n        x0=so.Continuous(trans=\"log\"),\n        x1=so.Continuous(trans=\"symlog\").tick(at=[-100, -10, 0, 10, 100]),\n        x2=so.Continuous(trans=\"sqrt\").tick(every=10),\n    )\n    .layout(size=(7, 1), engine=\"tight\")\n    .label(x0=\"trans='log'\", x1=\"trans='symlog'\", x2=\"trans='sqrt'\")\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n        \"axes.labelpad\": 8,\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Total Bill by Day in Python\nDESCRIPTION: This snippet creates a swarmplot that shows the distribution of total bill amounts for each day of the week. It introduces the use of both x and y parameters in sns.swarmplot().\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"day\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Rounded Age and Native Scale in Seaborn\nDESCRIPTION: This snippet creates a violin plot of fare distribution by rounded age groups, using native scale for the violins. It shows how to preprocess data and use the 'native_scale' parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(x=df[\"age\"].round(-1) + 5, y=df[\"fare\"], native_scale=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with FacetGrid in Python\nDESCRIPTION: This code creates a FacetGrid with multiple dimensions (columns and hues) and maps a scatter plot to visualize the relationship between total bill and tip.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"sex\", hue=\"smoker\")\ng.map(sns.scatterplot, \"total_bill\", \"tip\", alpha=.7)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Create Faceted Line Plot with Error Bars\nDESCRIPTION: This snippet creates a line plot faceted by 'species', with 'sex' on the x-axis, 'body_mass_g' on the y-axis, and 'species' defining the line style. It adds layers for lines with markers and range with standard deviation error bars. Faceting allows for visualizing the relationship between variables for each species separately.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Range.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, x=\"sex\", y=\"body_mass_g\", linestyle=\"species\")\n    .facet(\"species\")\n    .add(so.Line(marker=\"o\"), so.Agg())\n    .add(so.Range(), so.Est(errorbar=\"sd\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Visualization\nDESCRIPTION: Creates a figure with both scatter plot and histogram using subplots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nf, axs = plt.subplots(1, 2, figsize=(8, 4), gridspec_kw=dict(width_ratios=[4, 3]))\nsns.scatterplot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", hue=\"species\", ax=axs[0])\nsns.histplot(data=penguins, x=\"species\", hue=\"species\", shrink=.8, alpha=.8, legend=False, ax=axs[1])\nf.tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Violin Plot with Seaborn in Python\nDESCRIPTION: This code loads the Titanic dataset and creates a simple violin plot of the 'age' column. It demonstrates the basic usage of sns.violinplot() function with a single variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = sns.load_dataset(\"titanic\")\nsns.violinplot(x=df[\"age\"])\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Time Hue and Style\nDESCRIPTION: Creates a scatter plot with points colored and styled by time of day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\", style=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Create Faceted Dot and Range Plot\nDESCRIPTION: This snippet creates a faceted dot and range plot. It plots 'sex' on the x-axis and 'body_mass_g' on the y-axis, faceted by 'species'.  Dots are added with a point size of 6, and ranges are added with a linewidth of 2. The range spans the full data extent at each unique 'sex' value within each 'species' facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Range.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, x=\"sex\", y=\"body_mass_g\")\n    .facet(\"species\")\n    .add(so.Dots(pointsize=6))\n    .add(so.Range(linewidth=2))\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing FacetGrid Size and Aspect Ratio in Python\nDESCRIPTION: Creates a FacetGrid with custom height and aspect ratio, mapping histograms to each facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"day\", height=3.5, aspect=.65)\ng.map(sns.histplot, \"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Creating Hexbin Jointplot\nDESCRIPTION: Creates a hexbin jointplot that aggregates points into hexagonal bins, useful for visualizing the density of observations when there are many data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"hex\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Percent Change Line Plot for Healthcare Spending in Python using Seaborn\nDESCRIPTION: Creates a line plot showing the percent change in healthcare spending since 1970 for different countries. The visualization normalizes data at the minimum year value (1970) and displays the percent change from that baseline.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Norm.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(healthexp, x=\"Year\", y=\"Spending_USD\", color=\"Country\")\n    .add(so.Lines(), so.Norm(where=\"x == x.min()\", percent=True))\n    .label(y=\"Percent change in spending from 1970 baseline\")\n)\n```\n\n----------------------------------------\n\nTITLE: Comparing Nominal and Continuous Color Palettes in Seaborn\nDESCRIPTION: This code creates a visualization comparing nominal and continuous color palettes using seaborn's faceting capabilities. It displays 9 colors from the 'deep' color palette and a cubehelix palette across two different facets.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nn = 9\nrgb = color_palette(\"deep\", n) + color_palette(\"ch:\", n)\n(\n    color_plot\n    .facet([\"nominal\"] * n + [\"continuous\"] * n)\n    .add(\n        color_mark,\n        x=list(range(n)) * 2,\n        y=[0] * n * 2,\n        color=rgb,\n        legend=False,\n    )\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum and Maximum Values for Heatmap Color Scale\nDESCRIPTION: Creates a heatmap with a custom color scale range from 50 to 100, which helps emphasize specific ranges of data values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, vmin=50, vmax=100)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for FMRI Data with Event Hue\nDESCRIPTION: Creates a line plot using the FMRI dataset, showing signal changes over time with different colors for each event.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=fmri, x=\"timepoint\", y=\"signal\", hue=\"event\")\n```\n\n----------------------------------------\n\nTITLE: Creating Quadratic Model Plot for Anscombe Dataset II in Python\nDESCRIPTION: This code demonstrates how to create a quadratic model plot using Seaborn's lmplot function. It fits a second-order polynomial to the second dataset in the Anscombe quartet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),\n           order=2, ci=None, scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: KDE with Separate Normalization by Group\nDESCRIPTION: Creates KDE plots for different species with individual normalization, making each density curve integrate to 1.0 independently.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), so.KDE(common_norm=False), color=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Path Plot for Healthcare Spending vs Life Expectancy\nDESCRIPTION: Initializes a Seaborn Plot object with healthcare spending and life expectancy data, colored by country, and adds a basic path layer.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Path.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(healthexp, \"Spending_USD\", \"Life_Expectancy\", color=\"Country\")\np.add(so.Path())\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple KDE Plots using Seaborn in Python\nDESCRIPTION: This snippet creates multiple KDE plots of flipper lengths, separated by species and sex, using the 'col' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", col=\"sex\", kind=\"kde\")\n```\n\n----------------------------------------\n\nTITLE: Orienting Area Plot in Seaborn\nDESCRIPTION: This snippet further customizes the area plot by orienting it horizontally, effectively switching the axes for better readability of the representation. The x and y parameters are swapped compared to previous snippets.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), x=\"Spending_USD\", y=\"Year\", orient=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Corner Option in Python\nDESCRIPTION: This snippet creates a pairplot that only includes the lower triangle of the matrix, which can be useful for reducing clutter in the visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, corner=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ECDF Plot Along X-Axis\nDESCRIPTION: Loads the penguins dataset and creates a basic empirical cumulative distribution function plot showing the distribution of flipper lengths along the x-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.ecdfplot(data=penguins, x=\"flipper_length_mm\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Contour Levels in Bivariate KDE Plots\nDESCRIPTION: Creates bivariate KDE plots with custom contour levels and threshold, showing only the denser regions of the distribution.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(\n    data=geyser, x=\"waiting\", y=\"duration\", hue=\"kind\",\n    levels=5, thresh=.2,\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing a pivoted DataFrame with barplot\nDESCRIPTION: Pivots the flights dataset to create a wide-format DataFrame with years as index and months as columns, then visualizes this data structure with barplot to show passenger counts across all months and years.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflights_wide = flights.pivot(index=\"year\", columns=\"month\", values=\"passengers\")\nsns.barplot(flights_wide)\n```\n\n----------------------------------------\n\nTITLE: Adding Row Colors to Clustermap Based on Species\nDESCRIPTION: Enhances the clustermap by adding row color annotations based on species information, creating a lookup table that maps each species to a specific color (red, blue, green).\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlut = dict(zip(species.unique(), \"rbg\"))\nrow_colors = species.map(lut)\nsns.clustermap(iris, row_colors=row_colors)\n```\n\n----------------------------------------\n\nTITLE: Creating a grouped barplot with hue parameter\nDESCRIPTION: Creates a grouped barplot showing body mass by island with bars split by sex, using the hue parameter to create subgroups within each island category.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(penguins, x=\"island\", y=\"body_mass_g\", hue=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for Dots Data with Log-scaled Color\nDESCRIPTION: Creates a line plot using the dots dataset (filtered for positive coherence), with a logarithmic color scale for coherence.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=dots.query(\"coherence > 0\"),\n    x=\"time\", y=\"firing_rate\", hue=\"coherence\", style=\"choice\",\n     palette=\"flare\", hue_norm=mpl.colors.LogNorm(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cubehelix Color Palette for Heatmap\nDESCRIPTION: Generates a heatmap with a custom color palette created using Seaborn's cubehelix_palette function converted to a colormap.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, cmap=sns.cubehelix_palette(as_cmap=True))\n```\n\n----------------------------------------\n\nTITLE: Advanced JointGrid Customization\nDESCRIPTION: Shows how to further customize a JointGrid by separately plotting the joint and marginal axes with different plot types and parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot_joint(sns.scatterplot, s=100, alpha=.5)\ng.plot_marginals(sns.histplot, kde=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple ECDF Plots with Customization using Seaborn in Python\nDESCRIPTION: This code creates multiple ECDF plots of flipper lengths, separated by species and sex, with custom height and aspect ratio using Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(\n    data=penguins, y=\"flipper_length_mm\", hue=\"sex\", col=\"species\",\n    kind=\"ecdf\", height=4, aspect=.7,\n)\n```\n\n----------------------------------------\n\nTITLE: Pairplot with KDE Mapping in Python\nDESCRIPTION: This snippet generates a pairplot with a KDE for the lower plots and specifies levels for contour lines, providing a detailed density representation of the data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng = sns.pairplot(penguins, diag_kind=\"kde\")\ng.map_lower(sns.kdeplot, levels=4, color=\".2\")\n```\n\n----------------------------------------\n\nTITLE: Creating Complementary ECDF Plots\nDESCRIPTION: Demonstrates how to create complementary empirical cumulative distribution function plots (1 - CDF) by setting the complementary parameter to True.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.ecdfplot(data=penguins, x=\"bill_length_mm\", hue=\"species\", complementary=True)\n```\n\n----------------------------------------\n\nTITLE: Mapping Histogram to FacetGrid in Python\nDESCRIPTION: This snippet creates a FacetGrid and maps a histogram plot to it, visualizing the distribution of tips across different times of day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\")\ng.map(sns.histplot, \"tip\")\n```\n\n----------------------------------------\n\nTITLE: Customizing KDE Plot Appearance\nDESCRIPTION: Creates a KDE plot with custom visual properties including filled areas, custom color palette, transparency, and no outline lines.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(\n   data=tips, x=\"total_bill\", hue=\"size\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Swarm Plot in Seaborn\nDESCRIPTION: This code creates a swarm plot using the tips dataset, showing the distribution of total bill amounts for each day, colored by smoker status.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, kind=\"swarm\", x=\"day\", y=\"total_bill\", hue=\"smoker\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dodged Bar Plot - Single Chain\nDESCRIPTION: Creates a bar plot showing count by day, with bars dodged by time using method chaining syntax\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, \"day\", color=\"time\")\n    .add(so.Bar(), so.Count(), so.Dodge())\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Color Attribute to Area Plot in Seaborn\nDESCRIPTION: This snippet enhances the previous plot by adding color to the area plots based on 'Country'. This allows for better visual distinction between different countries in the plot. It builds on the previous context of the created plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), color=\"Country\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Customizing Multiple KDE Plots using Seaborn in Python\nDESCRIPTION: This snippet creates multiple KDE plots of flipper lengths, separated by species and sex, and customizes the axis labels and titles using Seaborn's displot function and FacetGrid methods.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng = sns.displot(\n    data=penguins, y=\"flipper_length_mm\", hue=\"sex\", col=\"species\",\n    kind=\"kde\", height=4, aspect=.7,\n)\ng.set_axis_labels(\"Density (a.u.)\", \"Flipper length (mm)\")\ng.set_titles(\"{col_name} penguins\")\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Histogram Diagonal in Python\nDESCRIPTION: This snippet generates a pairplot where the diagonal displays histograms instead of the default scatter plots. It provides a visualization of the distribution of each variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, hue=\"species\", diag_kind=\"hist\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Distribution Plot in Seaborn\nDESCRIPTION: This code creates a distribution plot of total bill amounts from the tips dataset, separated by time and including a kernel density estimate.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=tips, x=\"total_bill\", col=\"time\", kde=True)\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Diamond Visualization with Jitter and Range\nDESCRIPTION: Builds a more complex Seaborn plot that combines jittered points, percentile ranges, and shifting. This visualization shows the price distribution by cut with both individual points and the interquartile range (25th to 75th percentile).\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Perc.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(diamonds, \"price\", \"cut\")\n    .add(so.Dots(pointsize=1, alpha=.2), so.Jitter(.3))\n    .add(so.Range(color=\"k\"), so.Perc([25, 75]), so.Shift(y=.2))\n    .scale(x=\"log\")\n)\n```\n\n----------------------------------------\n\nTITLE: Point Plot with Custom Error Bars\nDESCRIPTION: This snippet generates a point plot for 'body_mass_g' against 'island' with custom error bars specified as a percentile and capsize. It requires the same dataset. The expected output is a plot with custom error representations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(\n    data=penguins, x=\"body_mass_g\", y=\"island\",\n    errorbar=(\"pi\", 100), capsize=.4,\n    color=\".5\", linestyle=\"none\", marker=\"D\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with Seaborn Plot Function\nDESCRIPTION: This snippet creates a line plot connecting sorted observations of the 'dowjones' dataset by mapping 'Date' to x-axis and 'Price' to y-axis using Seaborn's Plot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(dowjones, \"Date\", \"Price\").add(so.Line())\n```\n\n----------------------------------------\n\nTITLE: Stacking Conditional KDE Distributions\nDESCRIPTION: Creates a stacked KDE plot where the distributions for different categories are stacked on top of each other, showing both individual distributions and the combined distribution.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"time\", multiple=\"stack\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Scatter and Histogram on JointGrid\nDESCRIPTION: Creates a JointGrid and adds a scatter plot to the joint axis and histograms to the marginal axes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot(sns.scatterplot, sns.histplot)\n```\n\n----------------------------------------\n\nTITLE: Producing a LOWESS Residual Plot with Custom Line Color in Python\nDESCRIPTION: This snippet creates a residual plot using LOWESS (locally weighted scatterplot smoothing) and customizes the line color to red for the relationship between 'horsepower' and 'mpg'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/residplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.residplot(data=mpg, x=\"horsepower\", y=\"mpg\", lowess=True, line_kws=dict(color=\"r\"))\n```\n\n----------------------------------------\n\nTITLE: Faceted Line Plot with Seaborn Objects\nDESCRIPTION: This snippet creates a faceted line plot using seaborn.objects, showing the sea ice extent over time for different years.  It uses the 'Date' column (converted to day of year) as x, 'Extent' as y, and colors lines by year.  Facets are created based on rounded decades of the year.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Lines.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(\n        x=seaice[\"Date\"].dt.day_of_year,\n        y=seaice[\"Extent\"],\n        color=seaice[\"Date\"].dt.year\n    )\n    .facet(seaice[\"Date\"].dt.year.round(-1))\n    .add(so.Lines(linewidth=.5, color=\"#bbca\"), col=None)\n    .add(so.Lines(linewidth=1))\n    .scale(color=\"ch:rot=-.2,light=.7\")\n    .layout(size=(8, 4))\n    .label(title=\"{}s\".format)\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Bar Appearance (Fill, Edge Color, Width)\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the histogram bars.  It sets fill to False, adds an edge color (C0), and adjusts the edge width to 1.5. This can be used to create a different visual style for the histogram.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(fill=False, edgecolor=\"C0\", edgewidth=1.5), so.Hist())\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Day and Time Visual Encoding\nDESCRIPTION: Creates a scatter plot with points colored by day and styled by time.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"day\", style=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Filtering and Plotting Subset of Data with Seaborn\nDESCRIPTION: This snippet filters 'fmri' data for specific 'region' and 'event', then plots 'timepoint' against 'signal' with line plots grouped by 'subject'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n(\n    fmri\n    .query(\"region == 'parietal' and event == 'stim'\")\n    .pipe(so.Plot, \"timepoint\", \"signal\")\n    .add(so.Line(color=\".2\", linewidth=1), group=\"subject\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Point Plot with Hue for Penguins Dataset\nDESCRIPTION: This snippet enhances the previous point plot by adding a hue based on 'sex', allowing a comparison of body mass across islands and sexes. It requires the same datasets as before. The output is a colored point plot illustrating this relationship.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(data=penguins, x=\"island\", y=\"body_mass_g\", hue=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Advanced FacetGrid Customization with Subplot Styling in Python\nDESCRIPTION: Creates a FacetGrid with custom background colors for specific facets and adjusts subplot spacing.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"sex\", row=\"time\", margin_titles=True, despine=False)\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\")\ng.figure.subplots_adjust(wspace=0, hspace=0)\nfor (row_val, col_val), ax in g.axes_dict.items():\n    if row_val == \"Lunch\" and col_val == \"Female\":\n        ax.set_facecolor(\".95\")\n    else:\n        ax.set_facecolor((0, 0, 0, 0))\n```\n\n----------------------------------------\n\nTITLE: Horizontal Swarmplot with Custom Point Size in Python\nDESCRIPTION: This snippet creates a horizontal swarmplot similar to the previous one but with smaller point sizes. It shows how to adjust the size of the points in the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"size\", orient=\"h\", size=3)\n```\n\n----------------------------------------\n\nTITLE: Adding Median Estimation to Seaborn Plot\nDESCRIPTION: Adds a layer to the plot that uses the median as the central tendency measure instead of the default mean.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Range(), so.Est(\"median\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Distribution Plot with Custom Legend in Python using Seaborn\nDESCRIPTION: This code creates a faceted distribution plot using Seaborn's displot function. It visualizes bill length across species and islands, with a custom legend placement using move_legend.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/move_legend.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ng = sns.displot(\n    penguins,\n    x=\"bill_length_mm\", hue=\"species\",\n    col=\"island\", col_wrap=2, height=3,\n)\nsns.move_legend(g, \"upper left\", bbox_to_anchor=(.55, .45))\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Heatmap\nDESCRIPTION: Creates a heatmap with numerical annotations showing the actual values in each cell of the matrix.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, annot=True)\n```\n\n----------------------------------------\n\nTITLE: Create Scatter Plot with Aggregation and Dodging\nDESCRIPTION: This snippet creates a scatter plot using the seaborn.objects interface. It maps 'body_mass_g' to the x-axis, 'species' to the y-axis, and 'sex' to the color. It then adds layers for dots, aggregates, and range with standard deviation error bars, utilizing dodging to prevent overlap.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Range.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, x=\"body_mass_g\", y=\"species\", color=\"sex\")\n    .add(so.Dot(), so.Agg(), so.Dodge())\n    .add(so.Range(), so.Est(errorbar=\"sd\"), so.Dodge())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Unfilled Grouped Violin Plot in Seaborn\nDESCRIPTION: This code creates a grouped violin plot similar to the previous example, but with unfilled violins. It shows how to use the 'fill' parameter to control the appearance of the violins.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"class\", y=\"age\", hue=\"alive\", fill=False)\n```\n\n----------------------------------------\n\nTITLE: Basic Stripplot with Single Variable\nDESCRIPTION: Creates a basic stripplot showing the distribution of total bill amounts using the tips dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.stripplot(data=tips, x=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Pair Grid in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a custom pair grid using the penguins dataset, with different plot types for lower and diagonal subplots, and a customized legend.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, hue=\"species\", corner=True)\ng.map_lower(sns.kdeplot, hue=None, levels=5, color=\".2\")\ng.map_lower(sns.scatterplot, marker=\"+\")\ng.map_diag(sns.histplot, element=\"step\", linewidth=0, kde=True)\ng.add_legend(frameon=True)\ng.legend.set_bbox_to_anchor((.61, .6))\n```\n\n----------------------------------------\n\nTITLE: Customizing Jitter Intensity in Seaborn Plot in Python\nDESCRIPTION: This code creates a scatter plot similar to the previous snippet but applies a specified jitter magnitude of 0.5 to the data points along the plot's axes. This customization helps manage data point spread more precisely within visualization, allowing developers to tailor plots finely. Dependencies: Seaborn library.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, \"species\", \"body_mass_g\")\n    .add(so.Dots(), so.Jitter(.5))\n)\n```\n\n----------------------------------------\n\nTITLE: Changing Heatmap Color Palette with Named Colormap\nDESCRIPTION: Creates a heatmap using a predefined color palette named 'crest' instead of the default colormap.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, cmap=\"crest\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Different Color Naming Conventions in Seaborn\nDESCRIPTION: This code demonstrates various color naming conventions in matplotlib/seaborn by creating a faceted plot showing colors specified using different formats: matplotlib cycle colors, short color names, grayscale values, hex codes, X11 color names, and XKCD color names.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncolor_dict = {\n    \"cycle\": [\"C0\", \"C1\", \"C2\"],\n    \"short\": [\"r\", \"y\", \"b\"],\n    \"gray\": [\".3\", \".7\", \".5\"],\n    \"hex\": [\"#825f87\", \"#05696b\", \"#de7e5d\"],\n    \"X11\": [\"seagreen\", \"sienna\", \"darkblue\"],\n    \"XKCD\": [\"xkcd:gold\", \"xkcd:steel\", \"xkcd:plum\"],\n}\ngroups = [k for k in color_dict for _ in range(3)]\ncolors = [c for pal in color_dict.values() for c in pal]\n(\n    so.Plot(\n        x=[0] * len(colors),\n        y=[f\"'{c}'\" for c in colors],\n        color=colors,\n    )\n    .theme({\n        **axes_style(\"ticks\"),\n        **no_spines,\n        \"axes.ymargin\": .2,\n        \"axes.titlesize\": 14,\n        \n    })\n    .facet(groups)\n    .layout(size=(8, 1.15), engine=\"constrained\")\n    .scale(x=so.Continuous().tick(count=0))\n    .add(color_mark)\n    .limit(x=(-.2, .5))\n    # .label(title=\"{}      \".format)\n    .label(title=\"\")\n    .scale(color=None)\n    .share(y=False)\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Stacked Bar Histogram with Color Encoding\nDESCRIPTION: This snippet adds `so.Bars` mark with `so.Hist` stat and stacks them with `so.Stack`, and color encodes by `sex` variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(), so.Stack(), color=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for FMRI Data with Region and Event\nDESCRIPTION: Creates a line plot using the FMRI dataset, showing signal changes over time with different colors for regions and line styles for events.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=fmri, x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plot with Seaborn Objects in Python\nDESCRIPTION: This snippet creates a simple line plot with specified x and y values using Seaborn's object-oriented interface. The 'Plot' class from Seaborn is instantiated with data points, and a line plot with circle markers is added. No external data is required, and the plot is stored in the variable 'p'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.limit.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\np = so.Plot(x=[1, 2, 3], y=[1, 3, 2]).add(so.Line(marker=\"o\"))\np\n```\n\n----------------------------------------\n\nTITLE: Creating Weighted KDE Plots from Aggregated Data\nDESCRIPTION: Groups and aggregates the tips dataset by 'size', then creates a KDE plot using weights to represent the count of observations in each group.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntips_agg = (tips\n    .groupby(\"size\")\n    .agg(total_bill=(\"total_bill\", \"mean\"), n=(\"total_bill\", \"count\"))\n)\nsns.kdeplot(data=tips_agg, x=\"total_bill\", weights=\"n\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Area Plot with Seaborn\nDESCRIPTION: This snippet creates a faceted area plot using the 'healthexp' dataset where 'Year' is plotted on the x-axis and 'Spending_USD' on the y-axis, faceted by 'Country'. The plot is designed for visualizing spending trends across multiple countries over time. It requires Seaborn's Plot module.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(healthexp, \"Year\", \"Spending_USD\").facet(\"Country\", wrap=3)\np.add(so.Area())\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Different Diagonal and Off-diagonal Plots\nDESCRIPTION: Maps histograms to the diagonal positions and scatterplots to the off-diagonal positions, showing distributions and relationships in one visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins)\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Seaborn Plot with Range and Default Estimation\nDESCRIPTION: Creates a plot object using clarity and carat variables from the diamonds dataset and adds a range display with default estimation method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(diamonds, \"clarity\", \"carat\")\np.add(so.Range(), so.Est())\n```\n\n----------------------------------------\n\nTITLE: Dot Plot with Bold Text and Alignment in Python\nDESCRIPTION: This snippet demonstrates a dot plot with bold text annotations, correlating 'RTE' and 'MRPC' with encoder-based alignment scales. Bold font weight highlights the text in each data point, adapting alignment per encoder type.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n(\n    so.Plot(glue, x=\"RTE\", y=\"MRPC\", color=\"Encoder\", text=\"Model\")\n    .add(so.Dot())\n    .add(so.Text({\"fontweight\": \"bold\"}), halign=\"Encoder\")\n    .scale(halign={\"LSTM\": \"left\", \"Transformer\": \"right\"})\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Hue and Style for Flights\nDESCRIPTION: Creates a line plot showing passenger trends over years, with different colors and line styles for each month.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\", hue=\"month\", style=\"month\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Pair Plot with Seaborn\nDESCRIPTION: This snippet constructs another plot using the 'flipper_length_mm' as the y-axis while pairing it with 'bill_length_mm' and 'bill_depth_mm'. It also enables sharing of the x-axis among the plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.share.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, y=\"flipper_length_mm\")\n    .pair(x=[\"bill_length_mm\", \"bill_depth_mm\"])\n    .add(so.Dots())\n    .share(x=True)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Normalized Line Plot for Healthcare Spending in Python using Seaborn\nDESCRIPTION: Creates a line plot showing healthcare spending over time for different countries, with values normalized relative to the maximum amount. This visualization helps compare spending trends between countries regardless of their absolute spending levels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Norm.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(healthexp, x=\"Year\", y=\"Spending_USD\", color=\"Country\")\n    .add(so.Lines(), so.Norm())\n    .label(y=\"Spending relative to maximum amount\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Size Variation and Trend Line in Python\nDESCRIPTION: This code creates a scatter plot with point sizes varying by 'size' and adds a polynomial fit trend line using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, \"total_bill\", \"tip\")\n    .add(so.Dots(), pointsize=\"size\")\n    .add(so.Line(color=\".3\", linewidth=3), so.PolyFit())\n    .scale(pointsize=(2, 10))\n)\n```\n\n----------------------------------------\n\nTITLE: Area Histogram with Color Encoding\nDESCRIPTION: This snippet adds a `so.Area` mark and a `so.Hist` statistical transformation to the plot, creating an area-based histogram. The `color=\"sex\"` parameter encodes the area by the `sex` variable, showing the distribution of flipper length for each sex.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(), so.Hist(), color=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a violin plot using the tips dataset, showing the distribution of total bill amounts for each day, split by smoker status.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, kind=\"violin\", x=\"day\", y=\"total_bill\", hue=\"smoker\", split=True)\n```\n\n----------------------------------------\n\nTITLE: Pairplot with KDE Kind in Python\nDESCRIPTION: This snippet creates a pairplot with kernel density estimates (KDE) for each variable's distribution, providing a smooth representation of the data distribution.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, kind=\"kde\")\n```\n\n----------------------------------------\n\nTITLE: Using Lists of Vectors for Pairing\nDESCRIPTION: This snippet shows how to use lists of vectors for pairing in the plot. Instead of column names, it provides specific column values for the variable 'weight' and pairs it with 'horsepower' and 'acceleration'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg[\"weight\"])\n    .pair(y=[mpg[\"horsepower\"], mpg[\"acceleration\"]])\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Creating a Bivariate Boxenplot with Categories in Python\nDESCRIPTION: This snippet generates a boxenplot comparing diamond prices across different clarity categories using Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(data=diamonds, x=\"price\", y=\"clarity\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Multiple Specific Percentiles on Diamond Price Data\nDESCRIPTION: Extends the diamond price visualization by showing multiple specific percentiles (10th, 25th, 50th, 75th, and 90th) for each cut category. This provides a more comprehensive view of the price distribution.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Perc.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dot(), so.Perc([10, 25, 50, 75, 90]))\n```\n\n----------------------------------------\n\nTITLE: Customizing Heatmap Axes and Tick Positions\nDESCRIPTION: Creates an annotated heatmap, removes x and y axis labels, and moves the x-axis ticks to the top of the plot for better readability.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nax = sns.heatmap(glue, annot=True)\nax.set(xlabel=\"\", ylabel=\"\")\nax.xaxis.tick_top()\n```\n\n----------------------------------------\n\nTITLE: Customizing Seaborn FacetGrid Properties\nDESCRIPTION: Creates a faceted bar plot and customizes various plot elements including axis labels, tick labels, subplot titles, axis limits, and spine visibility using FacetGrid methods.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ng = sns.catplot(\n    data=df, x=\"who\", y=\"survived\", col=\"class\",\n    kind=\"bar\", height=4, aspect=.6,\n)\ng.set_axis_labels(\"\", \"Survival Rate\")\ng.set_xticklabels([\"Men\", \"Women\", \"Children\"])\ng.set_titles(\"{col_name} {col_var}\")\ng.set(ylim=(0, 1))\ng.despine(left=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying Bill Depth Variation by Sex and Species\nDESCRIPTION: This snippet plots 'bill_depth_mm' against 'sex' using color differentiation based on 'species', allowing for a comparative analysis. It requires the 'penguins' dataset. The output is a point plot with hues representing different species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(data=penguins, x=\"sex\", y=\"bill_depth_mm\", hue=\"species\", dodge=True)\n```\n\n----------------------------------------\n\nTITLE: Time Series Scatter Plot\nDESCRIPTION: Creates a scatter plot using time series data with multiple variables.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nindex = pd.date_range(\"1 1 2000\", periods=100, freq=\"m\", name=\"date\")\ndata = np.random.randn(100, 4).cumsum(axis=0)\nwide_df = pd.DataFrame(data, index, [\"a\", \"b\", \"c\", \"d\"])\nsns.scatterplot(data=wide_df)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Relational Plot with Multiple Variables in Python\nDESCRIPTION: This snippet creates a complex relational plot using Seaborn, incorporating multiple variables. It visualizes the relationship between total bill and tip, with different colors and sizes for various attributes, using a custom palette and size range.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=tips, x=\"total_bill\", y=\"tip\", col=\"time\",\n    hue=\"time\", size=\"size\", style=\"sex\",\n    palette=[\"b\", \"r\"], sizes=(10, 100)\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dot Plot with Specific Dodge\nDESCRIPTION: Adds a dot layer with dodge transformation specifically by color variable\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dot(), so.Dodge(by=[\"color\"]), fill=\"smoker\")\n```\n\n----------------------------------------\n\nTITLE: Inverting Axis in Seaborn Plots in Python\nDESCRIPTION: This snippet shows how to invert the y-axis of a plot using Seaborn's 'limit' method. By reversing the minimum and maximum values of the y-axis, an inverted axis effect is achieved.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.limit.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\np.limit(y=(4, 0))\n```\n\n----------------------------------------\n\nTITLE: Mean Estimation with Polynomial Fit\nDESCRIPTION: Uses mean estimation for categorical variable with second-order polynomial fit.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"cylinders\", y=\"acceleration\", x_estimator=np.mean, order=2)\n```\n\n----------------------------------------\n\nTITLE: Faceting Plots in Seaborn\nDESCRIPTION: This snippet shows how to facet a Seaborn plot using the `facet` method. It takes two lists as arguments, which define the categories to use for faceting along the rows and columns of the plot grid.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.layout.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.facet([\"A\", \"B\"], [\"X\", \"Y\"])\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Selected Variable Pairs in Python\nDESCRIPTION: This snippet generates a pairplot for specific variables in the dataset, focused on bill length and depth, providing targeted visual analysis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(\n    penguins,\n    x_vars=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\"],\n    y_vars=[\"bill_length_mm\", \"bill_depth_mm\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Pivoting Flights Data and Displaying\nDESCRIPTION: Pivots the flights dataset to create a wide format with years as index, months as columns, and passenger counts as values. Displays the first few rows of the pivoted data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflights_wide = flights.pivot(index=\"year\", columns=\"month\", values=\"passengers\")\nflights_wide.head()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Jointplot with Seaborn\nDESCRIPTION: Loads the penguins dataset and creates a basic jointplot showing the relationship between bill length and bill depth measurements.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Band Plot Appearance in Seaborn\nDESCRIPTION: Modifies the appearance of the previously created band plot by adding a new Band object with custom transparency (alpha=0.5) and edge width (edgewidth=2) parameters. This demonstrates how to customize visual properties of Seaborn object plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Band.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Band(alpha=.5, edgewidth=2))\n```\n\n----------------------------------------\n\nTITLE: Using Format Strings for Title Customization\nDESCRIPTION: Applies a format string function to create dynamic titles for each facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"sex\").label(title=\"{} penguins\".format)\n```\n\n----------------------------------------\n\nTITLE: Creating an Unfilled Boxenplot with Hue in Python\nDESCRIPTION: This snippet shows how to create a boxenplot with unfilled boxes and using the 'clarity' variable for both y-axis and hue.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(data=diamonds, x=\"price\", y=\"clarity\", hue=\"clarity\", fill=False)\n```\n\n----------------------------------------\n\nTITLE: Age Distribution by Class with Survival Status\nDESCRIPTION: Creates a boxplot showing age distribution across passenger classes, separated by survival status using hue.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(data=titanic, x=\"class\", y=\"age\", hue=\"alive\")\n```\n\n----------------------------------------\n\nTITLE: Creating a KDE Plot with Rug Plot using Seaborn in Python\nDESCRIPTION: This code creates a KDE plot of flipper lengths and bill lengths with a marginal rug plot using the 'rug' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ng = sns.displot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", kind=\"kde\", rug=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Rugplot to Both Axes in Seaborn\nDESCRIPTION: Shows how to create a rugplot along both x and y axes with a scatter plot. Visualizes the relationship between total bill and tip amounts.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/rugplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\nsns.rugplot(data=tips, x=\"total_bill\", y=\"tip\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Visual Properties with Binary Scale\nDESCRIPTION: Creates a scatter plot with semi-transparent dots where color represents 'origin' and fill color represents 'weight' using a binary color scale. The fillalpha parameter sets dot transparency to 0.5.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dots.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(\n    p1.add(so.Dots(fillalpha=.5), color=\"origin\", fillcolor=\"weight\")\n    .scale(fillcolor=\"binary\")\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Facet Titles\nDESCRIPTION: Customizes facet titles by adding a prefix label to identify the facet variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"sex\").label(col=\"Sex:\")\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Linear Model Plot with Seaborn in Python\nDESCRIPTION: This code demonstrates how to create a faceted linear model plot using Seaborn's lmplot function. It creates separate plots for different times of the day, with hue distinguishing between smokers and non-smokers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", col=\"time\", data=tips);\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregated Bar Plot\nDESCRIPTION: Creates a bar plot showing sum of total bill by day, with bars dodged by sex and custom gap\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(tips, \"day\", \"total_bill\", color=\"sex\")\np.add(so.Bar(), so.Agg(\"sum\"), so.Dodge(gap=.1))\n```\n\n----------------------------------------\n\nTITLE: Styled Stripplot with Custom Markers\nDESCRIPTION: Creates a stripplot with custom styling including marker type, size, linewidth, and transparency.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(\n    data=tips, x=\"total_bill\", y=\"day\", hue=\"time\",\n    jitter=False, s=20, marker=\"D\", linewidth=1, alpha=.1,\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Plot with Edgecolor in Seaborn Objects\nDESCRIPTION: Demonstrates how to modify the appearance of data points by setting the 'edgecolor' to white using Seaborn's Objects API. This customization enhances visual distinction in plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\np1.add(so.Dot(edgecolor=\"w\"))\n```\n\n----------------------------------------\n\nTITLE: LOWESS Smoothing Regression\nDESCRIPTION: Uses LOWESS smoothing for regression between horsepower and MPG.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"horsepower\", y=\"mpg\", lowess=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Diamonds Carat and Clarity Distribution\nDESCRIPTION: Generates a plot showing the relationship between diamond carat and clarity using Seaborn objects. Applies jittering to dots and includes range visualization with percentile markers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Shift.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(diamonds, \"carat\", \"clarity\")\n    .add(so.Dots(), so.Jitter())\n    .add(so.Range(), so.Perc([25, 75]), so.Shift(y=.25))\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Line and Polynomial Fit to Scatter Plot in Python\nDESCRIPTION: This snippet adds a line and polynomial fit to an existing scatter plot using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Line(), so.PolyFit())\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Custom Color Palette in Python\nDESCRIPTION: This code creates a swarmplot similar to the previous one but uses a custom color palette ('deep'). It demonstrates how to customize the colors used in the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"size\", palette=\"deep\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Violin Plot with Hue in Seaborn\nDESCRIPTION: This example creates a grouped violin plot, showing age distribution by class and survival status. It demonstrates the use of the 'hue' parameter to add another categorical variable to the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"class\", y=\"age\", hue=\"alive\")\n```\n\n----------------------------------------\n\nTITLE: Creating Subfigures with Seaborn for Advanced Visualization in Python\nDESCRIPTION: This snippet demonstrates the use of Matplotlib's subfigure layout to create and plot multiple related visualizations in the same figure. Seaborn's object-oriented API is used to generate plots with facets and custom scale configurations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.on.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nf = mpl.figure.Figure(figsize=(7, 4), dpi=100, layout=\"constrained\")\nsf1, sf2 = f.subfigures(1, 2)\n\np.on(sf1).plot()\n(\n    so.Plot(diamonds, x=\"price\")\n    .add(so.Bars(), so.Hist())\n    .facet(row=\"cut\")\n    .scale(x=\"log\")\n    .share(y=False)\n    .on(sf2)\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Marker Display Plot Template in Seaborn\nDESCRIPTION: This code creates a reusable plot configuration for displaying different marker styles. It configures a horizontal plot with specific theme settings that hides most axis elements and properly scales the y-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nmarker_plot = (\n    so.Plot()\n    .scale(marker=None, y=so.Continuous().tick(count=0))\n    .layout(size=(10, .5), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        \"axes.spines.left\": False,\n        \"axes.spines.top\": False,\n        \"axes.spines.right\": False,\n        \"xtick.labelsize\":12,\n        \"axes.xmargin\": .02,\n    })\n\n)\nmarker_mark = so.Dot(pointsize=15, color=\".2\", stroke=1.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for Dots Data with Size Variation\nDESCRIPTION: Creates a line plot using the dots dataset with line thickness varying by coherence and colors for choice.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=dots, x=\"time\", y=\"firing_rate\",\n    size=\"coherence\", hue=\"choice\",\n    legend=\"full\"\n)\n```\n\n----------------------------------------\n\nTITLE: Grouped Numeric Boxplot with Native Scaling\nDESCRIPTION: Creates a boxplot grouped by rounded age values against fare, preserving native scale and adding a vertical reference line.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nax = sns.boxplot(x=titanic[\"age\"].round(-1), y=titanic[\"fare\"], native_scale=True)\nax.axvline(25, color=\".3\", dashes=(2, 2))\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Line to FacetGrid in Python\nDESCRIPTION: Creates a FacetGrid with scatterplots and adds a reference line based on the median tip value.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\", margin_titles=True)\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\")\ng.refline(y=tips[\"tip\"].median())\n```\n\n----------------------------------------\n\nTITLE: Plotting Distributions for Multiple Columns\nDESCRIPTION: Loads the 'iris' dataset and creates KDE plots for each numeric column in the dataset simultaneously.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\niris = sns.load_dataset(\"iris\")\nsns.kdeplot(data=iris)\n```\n\n----------------------------------------\n\nTITLE: Basic Categorical Plot with Tips Dataset\nDESCRIPTION: Creates a basic categorical plot using the tips dataset showing total bill by day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/categorical.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.catplot(data=tips, x=\"day\", y=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Jointplot Size and Ratio\nDESCRIPTION: Creates a jointplot with customized figure height and aspect ratio between the joint and marginal plots, and adds tick marks to the marginal axes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", height=5, ratio=2, marginal_ticks=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot from Wide-Format Data using Seaborn in Python\nDESCRIPTION: This snippet creates a line plot using Seaborn's relplot function with the wide-format flights data. It automatically creates a line plot for each column (month) in the DataFrame.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=flights_wide, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Faceted KDE Plot with Column-wise Normalization\nDESCRIPTION: Creates a faceted KDE plot separated by sex, with normalization applied within each column, and colored by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n(\n    p.facet(\"sex\")\n    .add(so.Area(), so.KDE(common_norm=[\"col\"]), color=\"species\")\n)\n```\n\n----------------------------------------\n\nTITLE: Faceted Categorical Plot\nDESCRIPTION: Creates a faceted plot using catplot with multiple subplots organized by day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, x=\"time\", y=\"total_bill\", hue=\"sex\", col=\"day\", aspect=.5)\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Normalized Size Range\nDESCRIPTION: Creates a scatter plot with normalized size range and custom hue normalization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(\n    data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\", size=\"size\",\n    sizes=(20, 200), hue_norm=(0, 7), legend=\"full\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Linear Regression Plot\nDESCRIPTION: Creates a simple linear regression plot comparing weight and acceleration.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"weight\", y=\"acceleration\")\n```\n\n----------------------------------------\n\nTITLE: Multi-panel Swarmplot using Catplot in Python\nDESCRIPTION: This snippet creates a multi-panel swarmplot using sns.catplot(). It shows total bill by time of day, with separate panels for each day and colors for sex. It demonstrates how to create more complex, faceted plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(\n    data=tips, kind=\"swarm\",\n    x=\"time\", y=\"total_bill\", hue=\"sex\", col=\"day\",\n    aspect=.5\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Line Plot with Aggregation in Python\nDESCRIPTION: This code creates a multi-line plot showing aggregated total bill and tip values by party size using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, x=\"size\")\n    .add(so.Line(color=\"C1\"), so.Agg(), y=\"total_bill\", label=\"Bill\")\n    .add(so.Line(color=\"C2\"), so.Agg(), y=\"tip\", label=\"Tip\")\n    .label(y=\"Value\")\n)\n```\n\n----------------------------------------\n\nTITLE: Manually Populating JointGrid with Custom Plots\nDESCRIPTION: Demonstrates how to manually add plots to an empty JointGrid, including a scatter plot and separate marginal plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid()\nx, y = penguins[\"bill_length_mm\"], penguins[\"bill_depth_mm\"]\nsns.scatterplot(x=x, y=y, ec=\"b\", fc=\"none\", s=100, linewidth=1.5, ax=g.ax_joint)\nsns.histplot(x=x, fill=False, linewidth=2, ax=g.ax_marg_x)\nsns.kdeplot(y=y, linewidth=2, ax=g.ax_marg_y)\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped FacetGrid in Python with Seaborn\nDESCRIPTION: Demonstrates creating a wrapped FacetGrid with custom height and number of columns, mapping histograms to each facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"size\", height=2.5, col_wrap=3)\ng.map(sns.histplot, \"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Custom Size Range\nDESCRIPTION: Creates a scatter plot with customized point size range and full legend.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(\n    data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\", size=\"size\",\n    sizes=(20, 200), legend=\"full\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Matplotlib Style to Seaborn Plot - Python\nDESCRIPTION: Demonstrates how to apply a Matplotlib style ('fivethirtyeight') to the Seaborn plot, merging Matplotlib's visual customizations with Seaborn's visualization capabilities.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom matplotlib import style\np.theme(style.library[\"fivethirtyeight\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Univariate KDE Plot Along Y-Axis\nDESCRIPTION: Flips the orientation of the KDE plot by assigning the data variable to the y-axis instead of the x-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=tips, y=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Scaling Font Elements in Seaborn Plot Context\nDESCRIPTION: This snippet shows how to scale font elements relative to the current context using the font_scale parameter in set_context. It then creates a line plot with the adjusted font scaling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_context.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"notebook\", font_scale=1.25)\nsns.lineplot(x=[0, 1, 2], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Age Distribution by Deck with Custom Whisker Range\nDESCRIPTION: Creates a boxplot showing age distribution across different decks with custom whisker range (0-100).\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(data=titanic, x=\"age\", y=\"deck\", whis=(0, 100))\n```\n\n----------------------------------------\n\nTITLE: Creating Dodged Bar Plot - Step by Step\nDESCRIPTION: Creates the same dodged bar plot but using separate plot creation and layer addition steps\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(tips, \"day\", color=\"time\")\np.add(so.Bar(), so.Count(), so.Dodge())\n```\n\n----------------------------------------\n\nTITLE: Modifying Rotation of Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with increased color rotation. The rot parameter controls the number of rotations through the color cycle.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(rot=.2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Plot with a Single Variable in Seaborn Objects\nDESCRIPTION: This snippet demonstrates how to create a faceted plot using a single variable ('species') in Seaborn Objects. It plots bill length against bill depth for penguins, with separate subplots for each species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(penguins, \"bill_length_mm\", \"bill_depth_mm\").add(so.Dots())\np.facet(\"species\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Dataset\nDESCRIPTION: Imports the Seaborn objects module and loads the diamonds dataset for statistical visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for Dots Data with Custom Size Range\nDESCRIPTION: Creates a line plot using the dots dataset with a custom range for line thickness based on coherence.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=dots, x=\"time\", y=\"firing_rate\",\n    size=\"coherence\", hue=\"choice\",\n    sizes=(.25, 2.5)\n)\n```\n\n----------------------------------------\n\nTITLE: Categorical Stripplot with Days\nDESCRIPTION: Creates stripplots showing the relationship between total bills and days of the week in different orientations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"day\", y=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot using Seaborn Objects in Python\nDESCRIPTION: This snippet creates a dot plot representing the relationship between 'carat' and 'price' in the 'diamonds' dataset. It utilizes Seaborn's object-oriented interface and Matplotlib's subplots. The primary dependencies are seaborn and matplotlib.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.on.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(diamonds, \"carat\", \"price\").add(so.Dots())\nf, ax = plt.subplots()\np.on(ax).show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Markers Based on Categories\nDESCRIPTION: Demonstrates how to map different marker shapes to the 'origin' variable in the scatter plot. Uses a stroke width of 1 and scales the marker shapes to circles, x-marks, and a custom marker type.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dots.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np1.add(so.Dots(stroke=1), marker=\"origin\").scale(marker=[\"o\", \"x\", (6, 2, 1)])\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Hue by Day in Python\nDESCRIPTION: This snippet creates a swarmplot of total bill by day, with points colored by day. It introduces the 'hue' parameter and disables the legend for a cleaner look.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"day\", legend=False)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Alpha Transparency in Seaborn Scatter Plot\nDESCRIPTION: This code creates a faceted plot showing the effect of different alpha (transparency) values on scatter plot points. It generates random points within a unit circle and displays them with alpha values ranging from 0.1 to 0.9.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nrng = np.random.default_rng(3)\nn_samp = 300\nx = 1 - rng.exponential(size=n_samp)\ny = rng.uniform(-1, 1, size=n_samp)\nkeep = np.sqrt(x ** 2 + y ** 2) < 1\nx, y = x[keep], y[keep]\nn = keep.sum()\nalpha_vals = np.linspace(.1, .9, 9).round(1)\nxs = np.concatenate([x for _ in alpha_vals])\nys = np.concatenate([y for _ in alpha_vals])\nalphas = np.repeat(alpha_vals, n)\n(\n    so.Plot(x=xs, y=ys, alpha=alphas)\n    .facet(alphas)\n    .add(so.Dot(color=\".2\", pointsize=3))\n    .scale(\n        alpha=None,\n        x=so.Continuous().tick(count=0),\n        y=so.Continuous().tick(count=0)\n    )\n    .layout(size=(9, 1), engine=None)\n    .theme({\n        **axes_style(\"white\"),\n        **no_spines,\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Scatter Plots with Seaborn Objects in Python\nDESCRIPTION: This snippet creates faceted scatter plots by day, with different color schemes for each facet, using Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(tips, \"total_bill\", \"tip\", color=\"day\")\n    .facet(col=\"day\")\n    .add(so.Dot(color=\"#aabc\"), col=None, color=None)\n    .add(so.Dot())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot with Multiple Variables in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a line plot using the dots dataset, visualizing firing rate over time with additional dimensions like alignment, choice, and coherence.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndots = sns.load_dataset(\"dots\")\nsns.relplot(\n    data=dots, kind=\"line\",\n    x=\"time\", y=\"firing_rate\", col=\"align\",\n    hue=\"choice\", size=\"coherence\", style=\"choice\",\n    facet_kws=dict(sharex=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing JointGrid Size and Ratio\nDESCRIPTION: Demonstrates how to customize the size, ratio, and space between subplots in a JointGrid.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.JointGrid(height=4, ratio=2, space=.05)\n```\n\n----------------------------------------\n\nTITLE: Labeling Axes in a Plot\nDESCRIPTION: This snippet enhances a plot by adding custom labels for the x and y axes while plotting against 'mpg'. It uses the columns 'weight' and 'displacement' as independent variables and applies specific labels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg, y=\"mpg\")\n    .pair(x=[\"weight\", \"displacement\"])\n    .label(x0=\"Weight (lb)\", x1=\"Displacement (cu in)\", y=\"MPG\")\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Histogram with Flipper Length\nDESCRIPTION: This snippet initializes a `so.Plot` object with the `flipper_length_mm` variable as the data source.  It then adds a `so.Bars` mark with a `so.Hist` statistical transformation to generate a histogram representing the distribution of flipper lengths.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(penguins, \"flipper_length_mm\")\np.add(so.Bars(), so.Hist())\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scatter Plot\nDESCRIPTION: Creates a basic scatter plot visualization using horsepower as the x-axis and mpg (miles per gallon) as the y-axis with the default dot markers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dots.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np1 = so.Plot(mpg, \"horsepower\", \"mpg\")\np1.add(so.Dots())\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Custom Line Styling in Seaborn\nDESCRIPTION: This snippet creates a violin plot with custom line width and color. It shows how to use the 'linewidth' and 'linecolor' parameters to adjust the appearance of the violin outlines.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"age\", linewidth=1, linecolor=\"k\")\n```\n\n----------------------------------------\n\nTITLE: Age Distribution by Passenger Class\nDESCRIPTION: Creates a boxplot showing age distribution across different passenger classes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(data=titanic, x=\"age\", y=\"class\")\n```\n\n----------------------------------------\n\nTITLE: Sharing Axes for Plotting\nDESCRIPTION: This snippet demonstrates how to adjust the sharing of axes for the created plot, allowing individual control over the sharing of x and y axes. The flexibility accommodates various visualization needs.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.share.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.share(x=False, y=False)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Marker to Point Plot\nDESCRIPTION: This snippet generates a point plot for June passenger counts and adds a custom marker at a specific data point. It showcases how to manipulate the plot further using Axes objects. It requires the 'flights_wide' dataset. The output will be the plot with an additional marker.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nax = sns.pointplot(flights_wide[\"Jun\"], native_scale=True)\nax.plot(1955, 335, marker=\"*\", color=\"r\", markersize=10)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dot Plot with Encoder Colors in Python\nDESCRIPTION: This snippet creates a dot plot comparing 'SST-2' and 'MRPC' scores, with data points colored by encoder type. The visualization emphasizes the role of 'Encoder' in the data while adding model name annotations in case of overlaps.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n(\n    so.Plot(glue, x=\"SST-2\", y=\"MRPC\", color=\"Encoder\", text=\"Model\")\n    .add(so.Dot())\n    .add(so.Text(valign=\"bottom\"))\n\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Plot with Seaborn\nDESCRIPTION: This code creates a faceted plot using the loaded 'penguins' dataset by specifying axes for bill length and depth, and facets for species and sex. It utilizes the Dots functionality to represent data points visually.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.share.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = (\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n    .facet(col=\"species\", row=\"sex\")\n    .add(so.Dots())\n)\np\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Style Options in Seaborn\nDESCRIPTION: This code creates a visualization showing different line style options in matplotlib/seaborn. It displays both standard string-based styles ('-', '--', '-.', ':') and custom dash patterns specified as tuples. Each style is shown on a separate row.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nxx = np.linspace(0, 1, 100)\ndashes = [\"-\", \"--\", \"-.\", \":\", (6, 2), (2, 1), (.5, .5), (4, 1, 2, 1)] \ndash_data = (\n    pd.DataFrame({i: xx for i in range(len(dashes))})\n    .stack()\n    .reset_index(1)\n    .set_axis([\"y\", \"x\"], axis=1)\n    .reset_index(drop=True)\n)\n(\n    so.Plot(dash_data, \"x\", \"y\", linestyle=\"y\")\n    .add(so.Line(linewidth=1.7, color=\".2\"), legend=None)\n    .scale(\n        linestyle=dashes,\n        x=so.Continuous().tick(count=0),\n        y=so.Continuous().tick(every=1).label(like={\n            i: f\"'$\\mathtt{{{pat}}}$'\" if isinstance(pat, str) else pat\n            for i, pat in enumerate(dashes)\n        }.get)\n    )\n    .label(x=\"\", y=\"\")\n    .limit(x=(0, 1), y=(7.5, -0.5))\n    .layout(size=(9, 2.5), engine=None)\n    .theme({\n        **axes_style(\"white\"),\n        **no_spines,\n        \"ytick.labelsize\": 12,\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Matplotlib's Figure Object for Plotting in Python\nDESCRIPTION: This code snippet showcases the use of Matplotlib's Figure object to plot a Seaborn object-oriented plot. The dependencies are seaborn and matplotlib, with the 'diamonds' dataset as data input.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.on.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf = mpl.figure.Figure()\np.on(f).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic KDE Plot with Area\nDESCRIPTION: Creates a basic kernel density estimation plot with area fill, visualizing the distribution of flipper length measurements.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(penguins, x=\"flipper_length_mm\")\np.add(so.Area(), so.KDE())\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot from Wide-Form Data\nDESCRIPTION: Generates a line plot from the wide-format flights data, automatically using columns as series.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=flights_wide, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Enhancing Path Plot with Markers and Custom Styling\nDESCRIPTION: Adds a styled path layer with circular markers, customized point size, line width, and white fill color to improve visualization clarity.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Path.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Path(marker=\"o\", pointsize=2, linewidth=.75, fillcolor=\"w\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Joint Plot with Regression in Seaborn (Python)\nDESCRIPTION: This code demonstrates how to create a joint plot with regression using Seaborn's jointplot function. It combines a scatter plot with marginal histograms and includes a regression line.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Kernel Density Estimate (KDE) Plot with Seaborn in Python\nDESCRIPTION: This snippet creates a KDE plot of flipper lengths using the 'kind' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", kind=\"kde\")\n```\n\n----------------------------------------\n\nTITLE: Updating Theme with axes_style\nDESCRIPTION: This code snippet imports the `axes_style` function from seaborn and uses it to update the `seaborn.objects` theme with the \"whitegrid\" style. This applies a predefined set of styling parameters to the plot. It provides a convenient way to quickly apply a consistent visual style.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom seaborn import axes_style\nso.Plot.config.theme.update(axes_style(\"whitegrid\"))\n```\n\n----------------------------------------\n\nTITLE: Creating another basic Bar Plot with Aggregation in Seaborn\nDESCRIPTION: This snippet creates a basic barplot with clarity and carat. It uses the diamonds dataset and the default aggregation function (`mean`) to summarize the carat variable for each clarity category.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Agg.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(diamonds, \"carat\", \"clarity\").add(so.Bar(), so.Agg())\n```\n\n----------------------------------------\n\nTITLE: Customizing Boxenplot Depth and Trust Level in Python\nDESCRIPTION: This snippet creates a boxenplot with customized k-depth and trust alpha parameters for more detailed visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(data=diamonds, x=\"price\", y=\"clarity\", k_depth=\"trustworthy\", trust_alpha=0.01)\n```\n\n----------------------------------------\n\nTITLE: Formatting June Passenger Counts Display\nDESCRIPTION: This snippet demonstrates how to customize the display format of the point plot for June passenger counts by applying a specific formatting function. The prerequisite is the 'flights_wide' dataset. The output is a styled point plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(flights_wide[\"Jun\"], formatter=lambda x: f\"'{x % 1900}\")\n```\n\n----------------------------------------\n\nTITLE: Layering Multiple Plots on a Jointplot\nDESCRIPTION: Creates a jointplot and then adds additional visualization layers to it - a KDE contour plot to the joint plot and rugplots to the marginals, demonstrating how to create more complex composite visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng = sns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot_joint(sns.kdeplot, color=\"r\", zorder=0, levels=6)\ng.plot_marginals(sns.rugplot, color=\"r\", height=-.15, clip_on=False)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Boxenplot Width Method in Python\nDESCRIPTION: This snippet demonstrates how to create a boxenplot with a linear width method for the boxes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(data=diamonds, x=\"price\", y=\"clarity\", width_method=\"linear\")\n```\n\n----------------------------------------\n\nTITLE: Creating Point Plot from Long-Form Anagrams Data\nDESCRIPTION: Generates a point plot to visualize scores across different solution types, grouped by attention condition.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=anagrams_long, x=\"solutions\", y=\"score\", hue=\"attnr\", kind=\"point\")\n```\n\n----------------------------------------\n\nTITLE: Bar Plot by Day with Color and Dodge\nDESCRIPTION: Generates a bar plot showing count by day, color-coded by sex with dodged bar positioning\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Count.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(tips, x=\"day\", color=\"sex\").add(so.Bar(), so.Count(), so.Dodge())\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fill Property with Different Plot Types in Seaborn\nDESCRIPTION: This code creates a visualization showing how the 'fill' property affects different plot types (Bar, Dot, and Area). It demonstrates filled vs unfilled states for each mark type by setting the fill parameter to True or False.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnan = float(\"nan\")\nx_bar = [0, 1]\ny_bar = [2, 1]\nf_bar = [True, False]\n\nx_dot = [2.2, 2.5, 2.8, 3.2, 3.5, 3.8]\ny_dot = [1.2, 1.7, 1.4, 0.7, 1.2, 0.9]\nf_dot = [True, True, True, False, False, False]\n\nxx = np.linspace(0, .8, 100)\nyy = xx ** 2 * np.exp(-xx * 10)\nx_area = list(4.5 + xx) + list(5.5 + xx)\ny_area = list(yy / yy.max() * 2) + list(yy / yy.max())\nf_area = [True] * 100 + [False] * 100\n\n(\n    so.Plot()\n    .add(\n        so.Bar(color=\".3\", edgecolor=\".2\", edgewidth=2.5),\n        x=x_bar + [nan for _ in x_dot + x_area],\n        y=y_bar + [nan for _ in y_dot + y_area],\n        fill=f_bar + [nan for _ in f_dot + f_area]\n    )\n    .add(\n        so.Dot(color=\".2\", pointsize=13, stroke=2.5),\n        x=[nan for _ in x_bar] + x_dot + [nan for _ in x_area],\n        y=[nan for _ in y_bar] + y_dot + [nan for _ in y_area],\n        fill=[nan for _ in f_bar] + f_dot + [nan for _ in f_area],\n    )\n    .add(\n        so.Area(color=\".2\", edgewidth=2.5),\n        x=[nan for _ in x_bar + x_dot] + x_area,\n        y=[nan for _ in y_bar + y_dot] + y_area,\n        fill=[nan for _ in f_bar + f_dot] + f_area,\n    )\n    .theme({\n        **axes_style(\"ticks\"),\n        \"axes.spines.left\": False,\n        \"axes.spines.top\": False,\n        \"axes.spines.right\": False,\n        \"xtick.labelsize\": 14,\n    })\n    .layout(size=(9, 1.25), engine=None)\n    .scale(\n        fill=None,\n        x=so.Continuous().tick(at=[0, 1, 2.5, 3.5, 4.8, 5.8]).label(\n            like={\n                0: True, 1: False, 2.5: True, 3.5: False, 4.8: True, 5.8: False\n            }.get,\n        ),\n        y=so.Continuous().tick(count=0),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Width Options in Seaborn\nDESCRIPTION: This code creates a visualization showing different line widths from 0.5 to 4.5. It displays horizontal lines with increasing thickness to demonstrate how the linewidth parameter affects the appearance of lines.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nlw = np.arange(0.5, 5, .5)\nx = [i for i in [0, 1] for _ in lw]\ny = [*lw, *lw]\n(\n    so.Plot(x=x, y=y, linewidth=y)\n    .add(so.Line(color=\".2\"))\n    .limit(y=(4.9, .1))\n    .layout(size=(9, 1.4), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"bottom\", \"right\", \"top\"]},\n        \"xtick.labelsize\": 12,\n        \"axes.xmargin\": .015,\n        \"ytick.labelsize\": 12,\n    })\n    .scale(\n        linewidth=None,\n        x=so.Continuous().tick(count=0),\n        y=so.Continuous().tick(every=1, between=(.5, 4.5), minor=1),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Heat Map-style KDE Plot with Custom Colormap\nDESCRIPTION: Creates a smooth bivariate KDE plot that fills the entire axes range, with 100 contour levels and a custom colormap for a heat map-like visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(\n    data=geyser, x=\"waiting\", y=\"duration\",\n    fill=True, thresh=0, levels=100, cmap=\"mako\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with No Cutoff and Stick Estimates in Seaborn\nDESCRIPTION: This snippet creates a violin plot of age distribution by survival status, with no cutoff at the ends and using stick estimates for the inner representation. It shows the use of 'cut' and 'inner' parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"age\", y=\"alive\", cut=0, inner=\"stick\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Split Violin Plot with Quartile Lines in Seaborn\nDESCRIPTION: This snippet demonstrates how to create a split violin plot with quartile lines inside. It uses the 'split' and 'inner' parameters to customize the appearance of the violins.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"class\", y=\"age\", hue=\"alive\", split=True, inner=\"quart\")\n```\n\n----------------------------------------\n\nTITLE: Avoiding Bar Overlaps with Dodge in Seaborn Python\nDESCRIPTION: This code snippet shows the use of Dodging to prevent bar overlaps when plotting 'species' by 'sex' with bars and histograms for the 'penguins' dataset. Dodging spaces bars for better clarity and comparison.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(penguins, x=\"species\", color=\"sex\").add(so.Bar(), so.Hist(), so.Dodge())\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Model Plot for Anscombe Dataset III in Python\nDESCRIPTION: This snippet creates a linear model plot for the third dataset in the Anscombe quartet. It shows how outliers can affect the linear regression line.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'III'\"),\n           ci=None, scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: Creating a Quadratic Residual Plot with Seaborn in Python\nDESCRIPTION: This code generates a residual plot with a quadratic fit (order=2) for the relationship between 'horsepower' and 'mpg' from the mpg dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/residplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.residplot(data=mpg, x=\"horsepower\", y=\"mpg\", order=2)\n```\n\n----------------------------------------\n\nTITLE: Customizing Line Plot Appearance Using Seaborn\nDESCRIPTION: This snippet adds a line with markers to a plot, omitting the linestyle, and adjusts the marker's edge color.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\np.add(so.Line(marker=\"o\", edgecolor=\"w\"), so.Agg(), linestyle=None)\n```\n\n----------------------------------------\n\nTITLE: Polynomial Regression Plot\nDESCRIPTION: Demonstrates a polynomial regression of order 2 between weight and MPG.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"weight\", y=\"mpg\", order=2)\n```\n\n----------------------------------------\n\nTITLE: Adding Color to Histogram by 'cut' Category\nDESCRIPTION: This snippet extends the previous example by adding color to the histogram bars based on the 'cut' category of the diamonds. This allows for visualizing the distribution of prices for different diamond cut qualities.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(), color=\"cut\")\n```\n\n----------------------------------------\n\nTITLE: Creating Single Axis Rugplot in Seaborn\nDESCRIPTION: Demonstrates how to add a basic rugplot along a single axis using the tips dataset. Shows distribution of total bill amounts using both KDE and rug plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/rugplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns; sns.set_theme()\ntips = sns.load_dataset(\"tips\")\nsns.kdeplot(data=tips, x=\"total_bill\")\nsns.rugplot(data=tips, x=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Faceted Histogram with Independent Proportions\nDESCRIPTION: This snippet adds a `so.Bars` mark and a `so.Hist` statistical transformation to the faceted plot `p`, displaying proportions calculated independently within each facet.  The `common_norm=False` parameter ensures that each facet is normalized independently.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(stat=\"proportion\", common_norm=False))\n```\n\n----------------------------------------\n\nTITLE: Customizing Point Plot for Penguins Dataset\nDESCRIPTION: This snippet customizes the point plot by setting different markers and line styles for the categories defined by 'sex'. Required dependencies are the same as previous snippets. The output is a visually distinct point plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(\n    data=penguins,\n    x=\"island\", y=\"body_mass_g\", hue=\"sex\",\n    markers=[\"o\", \"s\"], linestyles=[\"-\", \"--\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Facets in Row Direction in Seaborn Objects\nDESCRIPTION: This snippet demonstrates how to wrap facets in the row direction in Seaborn Objects. It creates a plot faceted by color grade, wrapped into 2 rows.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\np.facet(row=\"color\", wrap=2)\n```\n\n----------------------------------------\n\nTITLE: Customizing JointGrid Plot Appearance\nDESCRIPTION: Demonstrates how to customize the appearance of the scatter plot and histograms on a JointGrid.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot(sns.scatterplot, sns.histplot, alpha=.7, edgecolor=\".2\", linewidth=.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic FacetGrid in Python with Seaborn\nDESCRIPTION: Demonstrates the basic initialization of a FacetGrid object using the 'tips' dataset. This creates the grid structure but doesn't plot any data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.FacetGrid(tips)\n```\n\n----------------------------------------\n\nTITLE: Faceting and Creating Histogram - Seaborn - Python\nDESCRIPTION: This snippet uses a faceted plot to visualize the ages of passengers in the Titanic dataset, separated by sex. It adds bars and a histogram to represent the distribution of ages with a specified bin width, allowing for detailed analysis of age demographics.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Stack.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(titanic, x=\"age\", alpha=\"alive\")\n    .facet(\"sex\")\n    .add(so.Bars(), so.Hist(binwidth=10), so.Stack())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Two-Variable Violin Plot with Seaborn in Python\nDESCRIPTION: This snippet creates a violin plot comparing age distribution across different passenger classes. It shows how to use the 'data', 'x', and 'y' parameters in sns.violinplot().\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"class\", y=\"age\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Plot Orientation in Seaborn\nDESCRIPTION: This snippet changes the orientation by mapping 'Price' to x-axis and 'Date' to y-axis while drawing a line to connect observations. The 'orient=\"y\"' parameter indicates the y-axis connection priority.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(dowjones, x=\"Price\", y=\"Date\").add(so.Line(), orient=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Point Plot with Standard Deviation Error Bars\nDESCRIPTION: In this snippet, a point plot is created that displays error bars representing standard deviation for 'body_mass_g' against 'island'. The code requires the 'penguins' dataset. The expected output will be a point plot with standard deviation as error bars.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(data=penguins, x=\"island\", y=\"body_mass_g\", errorbar=\"sd\")\n```\n\n----------------------------------------\n\nTITLE: Creating a barplot with native scale and adding custom markers\nDESCRIPTION: Creates a barplot with native scale (preserving the actual data values) and adds a custom red star marker at a specific coordinate using matplotlib's plot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nax = sns.barplot(\n    flights, x=\"year\", y=\"passengers\",\n    native_scale=True,\n    estimator=\"sum\", errorbar=None,\n)\nax.plot(1955, 3600, \"*\", markersize=10, color=\"r\")\n```\n\n----------------------------------------\n\nTITLE: Creating a KDE Plot with Hue Separation using Seaborn in Python\nDESCRIPTION: This snippet creates a KDE plot of flipper lengths with separate curves for each species using the 'hue' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization with Seaborn Objects in Python\nDESCRIPTION: Enhances plot visualization by adding customizations such as 'pointsize', 'color', and 'marker'. Utilizes 'scale' for adjusting marker shapes and color palette, demonstrating the extensibility of plot aesthetics in Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n(p2\n    .add(so.Dot(pointsize=6), color=\"Year\", marker=\"Encoder\")\n    .scale(marker=[\"o\", \"s\"], color=\"flare\"))\n```\n\n----------------------------------------\n\nTITLE: Adding 20th Percentile to Diamond Price Plot\nDESCRIPTION: Builds on the previous plot by specifically calculating the 20th percentile of diamond prices for each cut category. This demonstrates how to specify a single percentile value.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Perc.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dot(), so.Perc(20))\n```\n\n----------------------------------------\n\nTITLE: Applying Jitter to Categorical Y-Axis\nDESCRIPTION: Creates a scatter plot with 'origin' on the y-axis (which is categorical) and applies jittering to reduce overplotting. The jitter parameter adds random noise of 0.25 units to the y-position of each point.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dots.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(mpg, \"horsepower\", \"origin\")\n    .add(so.Dots(), so.Jitter(.25))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for Dots Data\nDESCRIPTION: Creates a line plot using the dots dataset, showing firing rate over time with different colors for coherence and line styles for choice.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=dots, x=\"time\", y=\"firing_rate\", hue=\"coherence\", style=\"choice\",\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Legend with String Capitalization\nDESCRIPTION: Modifies the color legend labels by capitalizing each species name.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.label(color=str.capitalize)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plot with Dash Marks\nDESCRIPTION: Creates a basic plot with species on x-axis and body mass on y-axis, with color differentiation by sex, using Dash marks.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(penguins, \"species\", \"body_mass_g\", color=\"sex\")\np.add(so.Dash())\n```\n\n----------------------------------------\n\nTITLE: Faceted Scatter Plot\nDESCRIPTION: Creates a faceted scatter plot using relplot with time and day encodings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(\n    data=tips, x=\"total_bill\", y=\"tip\",\n    col=\"time\", hue=\"day\", style=\"day\",\n    kind=\"scatter\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Plot with Aggregation in Seaborn\nDESCRIPTION: This snippet creates a bar plot of `clarity` vs `carat` from the diamonds dataset. It uses the default aggregation function (`mean`) to summarize the `carat` variable for each `clarity` category.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Agg.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(diamonds, \"clarity\", \"carat\")\np.add(so.Bar(), so.Agg())\n```\n\n----------------------------------------\n\nTITLE: Formatting Heatmap Annotations\nDESCRIPTION: Displays a heatmap with annotations and specifies the format of the annotated values to show one decimal place.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, annot=True, fmt=\".1f\")\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Colormap and Value Range for Clustermap\nDESCRIPTION: Customizes the clustermap appearance by specifying the 'mako' colormap and setting explicit minimum and maximum values for color scaling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.clustermap(iris, cmap=\"mako\", vmin=0, vmax=10)\n```\n\n----------------------------------------\n\nTITLE: Showing Multiple Pairwise Relationships\nDESCRIPTION: This snippet demonstrates how to visualize multiple pairwise relationships by providing lists for both `x` and `y`. It pairs 'displacement' and 'weight' with 'horsepower' and 'acceleration'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg)\n    .pair(x=[\"displacement\", \"weight\"], y=[\"horsepower\", \"acceleration\"])\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Mapping Regression Plot to FacetGrid in Python\nDESCRIPTION: This snippet creates a complex FacetGrid with multiple dimensions and maps a regression plot to visualize the relationship between party size and total bill.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, row=\"smoker\", col=\"time\", margin_titles=True)\ng.map(sns.regplot, \"size\", \"total_bill\", color=\".3\", fit_reg=False, x_jitter=.1)\n```\n\n----------------------------------------\n\nTITLE: Controlling Plot Extent in Seaborn\nDESCRIPTION: This snippet demonstrates how to control the size of the plot relative to the underlying figure using the `extent` parameter in the `layout` method. The `extent` parameter takes a list of four values representing the left, bottom, right, and top coordinates of the plot within the figure, as a fraction of the figure size. This is especially useful for saving or displaying plots in contexts outside of the notebook.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.layout.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.layout(extent=[0, 0, .8, 1]).show()\n```\n\n----------------------------------------\n\nTITLE: Creating a basic barplot with categorical x-axis\nDESCRIPTION: Creates a simple barplot showing body mass by island for penguins. The x-axis displays the categorical variable 'island' while the y-axis shows the numeric 'body_mass_g'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(penguins, x=\"island\", y=\"body_mass_g\")\n```\n\n----------------------------------------\n\nTITLE: Basic Line Plot with Seaborn Objects\nDESCRIPTION: This snippet creates a simple line plot using the seaborn.objects API. It plots the 'Date' column on the x-axis and the 'Extent' column on the y-axis from the `seaice` dataset, adding lines to visualize the data trend.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Lines.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(seaice, \"Date\", \"Extent\").add(so.Lines())\n```\n\n----------------------------------------\n\nTITLE: Adding Stroke and Fill Customization in Seaborn Objects\nDESCRIPTION: Shows how to add dots with stroke and fill properties, enhancing detail by specifying 'stroke' and using 'Encoder' for both fill and color features in the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\np2.add(so.Dot(stroke=1.5), fill=\"Encoder\", color=\"Encoder\")\n```\n\n----------------------------------------\n\nTITLE: Creating Faceted Distribution Plot with Internal Legend in Python using Seaborn\nDESCRIPTION: This snippet demonstrates creating a faceted distribution plot similar to the previous example, but with the legend inside the plot area. It uses facet_kws to keep the legend within the plot and customizes its appearance and position.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/move_legend.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng = sns.displot(\n    penguins,\n    x=\"bill_length_mm\", hue=\"species\",\n    col=\"island\", col_wrap=2, height=3,\n    facet_kws=dict(legend_out=False),\n)\nsns.move_legend(g, \"upper left\", bbox_to_anchor=(.55, .45), frameon=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Different X and Y Variables\nDESCRIPTION: Creates a PairGrid with different sets of variables for x and y axes, effectively creating a single row of plots comparing body mass to other measurements, colored by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nx_vars = [\"body_mass_g\", \"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\"]\ny_vars = [\"body_mass_g\"]\ng = sns.PairGrid(penguins, hue=\"species\", x_vars=x_vars, y_vars=y_vars)\ng.map_diag(sns.histplot, color=\".3\")\ng.map_offdiag(sns.scatterplot)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Plot in Seaborn\nDESCRIPTION: This code creates a bar plot using the tips dataset, showing average total bill amounts for each day, separated by smoker status.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips, kind=\"bar\", x=\"day\", y=\"total_bill\", hue=\"smoker\")\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Legend on Right in Python using Seaborn\nDESCRIPTION: This code creates a histogram of penguin bill lengths, grouped by species, using Seaborn's histplot function. The legend is moved to the center right of the plot for better visibility.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/move_legend.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nax = sns.histplot(penguins, x=\"bill_length_mm\", hue=\"species\")\nsns.move_legend(ax, \"center right\")\n```\n\n----------------------------------------\n\nTITLE: Dodged Bar Plot with Drop Empty\nDESCRIPTION: Adds a bar layer with dodge transformation that drops empty categories\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bar(), so.Count(), so.Dodge(empty=\"drop\"))\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Custom Markers\nDESCRIPTION: Creates a scatter plot with custom markers for different time categories.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmarkers = {\"Lunch\": \"s\", \"Dinner\": \"X\"}\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", style=\"time\", markers=markers)\n```\n\n----------------------------------------\n\nTITLE: Creating a barplot with hue matching the y-axis variable\nDESCRIPTION: Creates a barplot with body mass on the x-axis and island on the y-axis. The hue parameter is set to island as well, and the legend is disabled since it would be redundant.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(penguins, x=\"body_mass_g\", y=\"island\", hue=\"island\", legend=False)\n```\n\n----------------------------------------\n\nTITLE: Pivoting Flights Dataset and Point Plot\nDESCRIPTION: This snippet pivots the 'flights' dataset to create a wide format suitable for visualization and generates a point plot based on the pivoted data. It requires the 'flights' dataset. The expected output is a point plot illustrating passenger counts over years.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nflights_wide = flights.pivot(index=\"year\", columns=\"month\", values=\"passengers\")\nsns.pointplot(flights_wide)\n```\n\n----------------------------------------\n\nTITLE: Inverting Axis and Jittering with Seaborn in Python\nDESCRIPTION: Illustrates how to flip the axes for the same dataset, using 'body_mass_g' as the independent variable and 'species' as the dependent, adding jitter of intensity 0.5. This technique assists in a different visual interpretation of the same data attributes by reversing axis orientation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, \"body_mass_g\", \"species\")\n    .add(so.Dots(), so.Jitter(.5))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Stacked Histograms\nDESCRIPTION: Creates a PairGrid with stacked, step-style histograms on the diagonal showing the distribution of each species, and scatterplots on the off-diagonal colored by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, hue=\"species\")\ng.map_diag(sns.histplot, multiple=\"stack\", element=\"step\")\ng.map_offdiag(sns.scatterplot)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for FMRI Data with Individual Subjects\nDESCRIPTION: Creates a line plot using the FMRI dataset filtered for the frontal region, showing individual subject data without aggregation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(\n    data=fmri.query(\"region == 'frontal'\"),\n    x=\"timepoint\", y=\"signal\", hue=\"event\", units=\"subject\",\n    estimator=None, lw=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empirical Cumulative Distribution Function (ECDF) Plot with Seaborn in Python\nDESCRIPTION: This code creates an ECDF plot of flipper lengths using the 'kind' parameter in Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", kind=\"ecdf\")\n```\n\n----------------------------------------\n\nTITLE: Customized Boxplot with Gap and No Fill\nDESCRIPTION: Creates a boxplot with customized appearance, removing fill and adding gap between boxes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(data=titanic, x=\"class\", y=\"age\", hue=\"alive\", fill=False, gap=.1)\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Species Hue\nDESCRIPTION: Creates a PairGrid with histograms on the diagonal and scatterplots off-diagonal, colored by the 'species' variable, and adds a legend to identify the species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, hue=\"species\")\ng.map_diag(sns.histplot)\ng.map_offdiag(sns.scatterplot)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations and Custom Graphics in Seaborn Plot with Matplotlib in Python\nDESCRIPTION: This code snippet adds a custom rectangle and text annotation to a Seaborn plot on a Matplotlib Figure. It demonstrates advanced usage by modifying the plot axes with Matplotlib's patches and text. Dependencies include seaborn and matplotlib.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.on.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nf = mpl.figure.Figure()\nres = p.on(f).plot()\n\nax = f.axes[0]\nrect = mpl.patches.Rectangle(\n    xy=(0, 1), width=.4, height=.1,\n    color=\"C1\", alpha=.2,\n    transform=ax.transAxes, clip_on=False,\n)\nax.add_artist(rect)\nax.text(\n    x=rect.get_width() / 2, y=1 + rect.get_height() / 2,\n    s=\"Diamonds: very sparkly!\", size=12,\n    ha=\"center\", va=\"center\", transform=ax.transAxes,\n)\n\nres\n```\n\n----------------------------------------\n\nTITLE: Dodged Bar Plot with Fill Empty\nDESCRIPTION: Adds a bar layer with dodge transformation that fills empty categories\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bar(), so.Count(), so.Dodge(empty=\"fill\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized Violin Plot in Seaborn\nDESCRIPTION: Creates a violin plot with customized appearance by passing additional parameters (bw_adjust, cut, split) to the underlying violin plot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(\n    data=df, x=\"age\", y=\"class\", hue=\"sex\",\n    kind=\"violin\", bw_adjust=.5, cut=0, split=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Color Plot with Square Markers in Seaborn\nDESCRIPTION: This code defines a color_mark style with square markers and creates a color_plot configuration with custom theme settings. It removes all spines, configures title size and spacing, and sets continuous scales with no tick marks.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncolor_mark = so.Dot(marker=\"s\", pointsize=20, edgewidth=2.5, alpha=.7, edgealpha=1)\ncolor_plot = (\n    so.Plot()\n    .theme({\n        **axes_style(\"white\"),\n        **no_spines,\n        \"axes.titlesize\": 15,\n        \"figure.subplot.wspace\": .1,\n        \"axes.xmargin\": .1,\n    })\n    .scale(\n        x=so.Continuous().tick(count=0),\n        y=so.Continuous().tick(count=0),\n        color=None, edgecolor=None,\n    )\n    .layout(size=(9, .5), engine=None)\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Histogram Bins in FacetGrid with Seaborn\nDESCRIPTION: Creates a FacetGrid with histograms, specifying custom bin width and range for the 'total_bill' variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\", row=\"sex\")\ng.map_dataframe(sns.histplot, x=\"total_bill\", binwidth=2, binrange=(0, 60))\n```\n\n----------------------------------------\n\nTITLE: External Rugplot Placement in Seaborn\nDESCRIPTION: Demonstrates how to place rugplot marks outside the main plotting area using negative height and clip_on parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/rugplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\nsns.rugplot(data=tips, x=\"total_bill\", y=\"tip\", height=-.02, clip_on=False)\n```\n\n----------------------------------------\n\nTITLE: Overlapping Bars Using Additional Variables in Seaborn Python\nDESCRIPTION: Demonstrates how additional variables, like 'color', impact the default overlapping behavior of bars when visualizing 'species' against sex in the 'penguins' dataset using Seaborn Plot API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(penguins, x=\"species\", color=\"sex\").add(so.Bar(), so.Hist())\n```\n\n----------------------------------------\n\nTITLE: Advanced Seaborn Theme Customization with RC Parameters in Python\nDESCRIPTION: This snippet demonstrates advanced theme customization by defining custom RC parameters. It removes the top and right spines of the plot axes, sets the style to 'ticks', and creates a bar plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncustom_params = {\"axes.spines.right\": False, \"axes.spines.top\": False}\nsns.set_theme(style=\"ticks\", rc=custom_params)\nsns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked KDE Plot\nDESCRIPTION: Generates a stacked kernel density estimation plot of penguin flipper lengths by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", multiple=\"stack\")\n```\n\n----------------------------------------\n\nTITLE: Setting Figure Size in Seaborn\nDESCRIPTION: This snippet demonstrates how to control the overall dimensions of the figure using the `size` parameter in the `layout` method of a `seaborn.objects.Plot` object. The `size` parameter accepts a tuple specifying the width and height of the figure.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.layout.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot().layout(size=(4, 4))\np\n```\n\n----------------------------------------\n\nTITLE: Bar Plot with Custom Quantile Aggregation in Seaborn\nDESCRIPTION: This snippet creates a bar plot using a custom aggregation function. The aggregation calculates the interquartile range (IQR), by taking the difference between the 75th and 25th percentile for each clarity category of the carat variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Agg.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bar(), so.Agg(lambda x: x.quantile(.75) - x.quantile(.25)))\n```\n\n----------------------------------------\n\nTITLE: Creating Error Bar Type Visualization Grid\nDESCRIPTION: Creates a 2x2 grid showing different types of error bars with annotations and styling\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/error_bars.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport io\nfrom IPython.display import SVG\nf = mpl.figure.Figure(figsize=(8, 5))\naxs = f.subplots(2, 2, sharex=True, sharey=True,)\n\nplt.setp(axs, xlim=(-1, 1), ylim=(-1, 1), xticks=[], yticks=[])\nfor ax, color in zip(axs.flat, [\"C0\", \"C2\", \"C3\", \"C1\"]):\n    ax.set_facecolor(mpl.colors.to_rgba(color, .25))\n\nkws = dict(x=0, y=.2, ha=\"center\", va=\"center\", size=18)\naxs[0, 0].text(s=\"Standard deviation\", **kws)\naxs[0, 1].text(s=\"Standard error\", **kws)\naxs[1, 0].text(s=\"Percentile interval\", **kws)\naxs[1, 1].text(s=\"Confidence interval\", **kws)\n\nkws = dict(x=0, y=-.2, ha=\"center\", va=\"center\", size=18, font=\"Courier New\")\naxs[0, 0].text(s='errorbar=(\"sd\", scale)', **kws)\naxs[0, 1].text(s='errorbar=(\"se\", scale)', **kws)\naxs[1, 0].text(s='errorbar=(\"pi\", width)', **kws)\naxs[1, 1].text(s='errorbar=(\"ci\", width)', **kws)\n\nkws = dict(size=18)\naxs[0, 0].set_title(\"Spread\", **kws)\naxs[0, 1].set_title(\"Uncertainty\", **kws)\naxs[0, 0].set_ylabel(\"Parametric\", **kws)\naxs[1, 0].set_ylabel(\"Nonparametric\", **kws)\n\nf.tight_layout()\nf.subplots_adjust(hspace=.05, wspace=.05 * (4 / 6))\nf.savefig(svg:=io.StringIO(), format=\"svg\")\nSVG(svg.getvalue())\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple ECDF Plots with Hue Mapping\nDESCRIPTION: Demonstrates how to create multiple ECDF plots from a long-form dataset by using the hue parameter to differentiate between different species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.ecdfplot(data=penguins, x=\"bill_length_mm\", hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating Q-Q Plot with FacetGrid in Python\nDESCRIPTION: This snippet defines a custom Q-Q plot function and maps it to a FacetGrid to compare the distributions of total bill and tip amounts for smokers and non-smokers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef qqplot(x, y, **kwargs):\n    _, xr = stats.probplot(x, fit=False)\n    _, yr = stats.probplot(y, fit=False)\n    plt.scatter(xr, yr, **kwargs)\n    \ng = sns.FacetGrid(tips, col=\"smoker\", height=4)\ng.map(qqplot, \"total_bill\", \"tip\")\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Jitter using Seaborn in Python\nDESCRIPTION: This snippet creates a scatter plot using Seaborn's object-oriented API, with 'species' and 'body_mass_g' as axes. It demonstrates adding jitter to data points to improve plot readability by preventing overplotting's visual impact. Dependencies include Seaborn, and knowledge of its API is required.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, \"species\", \"body_mass_g\")\n    .add(so.Dots(), so.Jitter())\n)\n```\n\n----------------------------------------\n\nTITLE: Rounding Data and Jittering Scatter Plots in Seaborn\nDESCRIPTION: This snippet rounds the 'body_mass_g' measures to the nearest thousand to reduce data variability and produces a scatter plot against 'flipper_length_mm' rounded to the nearest millimeter. Adding jitter enhances visual differentiation of the data points. Requirements include Seaborn and necessary dataset operations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins[\"body_mass_g\"].round(-3), penguins[\"flipper_length_mm\"])\n    .add(so.Dots(), so.Jitter())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Series Objects\nDESCRIPTION: Shows how to create a line plot by passing pandas Series objects directly as x and y parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nyear = flights_avg.index\npassengers = flights_avg[\"passengers\"]\nsns.relplot(x=year, y=passengers, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Customized Color Boxplot\nDESCRIPTION: Creates a boxplot with custom box color and line properties.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(data=titanic, x=\"age\", y=\"deck\", color=\".8\", linecolor=\"#137\", linewidth=.75)\n```\n\n----------------------------------------\n\nTITLE: Creating a Plot with Y-oriented Dash Marks\nDESCRIPTION: Creates a plot with body mass vs. rounded flipper length, using dash marks oriented along the y-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(\n        penguins[\"body_mass_g\"],\n        penguins[\"flipper_length_mm\"].round(-1),\n    )\n    .add(so.Dash(), orient=\"y\")\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Facets with Unshared X-axis in Seaborn Objects\nDESCRIPTION: This example shows how to wrap facets and disable x-axis sharing in Seaborn Objects. It creates a plot faceted by clarity, wrapped into 3 columns, with separate x-axes for each subplot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"clarity\", wrap=3).share(x=False)\n```\n\n----------------------------------------\n\nTITLE: Creating a Univariate KDE Plot Along X-Axis\nDESCRIPTION: Loads the 'tips' dataset and creates a basic kernel density plot showing the distribution of the 'total_bill' variable along the x-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\nsns.kdeplot(data=tips, x=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing 2D NumPy Array\nDESCRIPTION: Demonstrates how to create a line plot from a 2D NumPy array derived from the wide-format data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nflights_array = flights_wide.to_numpy()\nsns.relplot(data=flights_array, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Plotting Dependent Variable Against Multiple Independents\nDESCRIPTION: This snippet creates a plot that shows the relationship between the 'acceleration' dependent variable and two independent variables: 'displacement' and 'weight'. Dots represent the data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.pair.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot(mpg, y=\"acceleration\")\n    .pair(x=[\"displacement\", \"weight\"])\n    .add(so.Dots()))\n```\n\n----------------------------------------\n\nTITLE: Bar Plot by Table Size Count\nDESCRIPTION: Creates a bar plot showing the count of records for each table size\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Count.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(tips, x=\"size\").add(so.Bar(), so.Count())\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Random Data\nDESCRIPTION: Generates random data using NumPy and creates a line plot without sorting the data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nx, y = np.random.normal(size=(2, 5000)).cumsum(axis=1)\nsns.lineplot(x=x, y=y, sort=False, lw=1)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Plot with Average Scores in Python\nDESCRIPTION: This snippet creates a bar plot showing average scores per model. The 'Average' score is plotted against 'Model', with text annotations added using Seaborn's Bar and Text aesthetics. The plot highlights the 'Average' score visually and textually.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n(\n    so.Plot(glue, x=\"Average\", y=\"Model\", text=\"Average\")\n    .add(so.Bar())\n    .add(so.Text(color=\"w\", halign=\"right\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a horizontal barplot with the orient parameter\nDESCRIPTION: Creates a horizontal barplot by setting the orient parameter to 'y', swapping the traditional roles of the x and y axes while maintaining the correct orientation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(flights, x=\"passengers\", y=\"year\", orient=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Creating KDE Plots with Numeric Hue Mapping\nDESCRIPTION: Creates conditional KDE plots where the hue variable is numeric rather than categorical, showing distributions for different numeric values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=tips, x=\"total_bill\", hue=\"size\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Plot Context in Seaborn\nDESCRIPTION: This code demonstrates how to set the default context for all Seaborn plots using the set_context function. It then creates a simple line plot using the lineplot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_context.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"notebook\")\nsns.lineplot(x=[0, 1, 2], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Setting Default Style and Creating Bar Plot with Seaborn in Python\nDESCRIPTION: This example demonstrates how to set a default style for all Seaborn plots using set_style() and create a simple bar plot using barplot(). The 'whitegrid' style is applied to enhance the visual appearance of the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_style.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"whitegrid\")\nsns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Line Plot Examples with Time Series Data\nDESCRIPTION: Demonstrates creating line plots using time series data from different datasets with various customization options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndowjones = sns.load_dataset(\"dowjones\")\nsns.relplot(data=dowjones, x=\"Date\", y=\"Price\", kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Creating Subset PairGrid in Python\nDESCRIPTION: This snippet creates a PairGrid using only a subset of variables from the iris dataset, with colored scatter plots differentiating between species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(iris, vars=[\"sepal_length\", \"sepal_width\"], hue=\"species\")\ng.map(sns.scatterplot)\n```\n\n----------------------------------------\n\nTITLE: Mapping Histogram to FacetGrid using Dataframe in Python\nDESCRIPTION: Demonstrates mapping a histogram of 'total_bill' to a FacetGrid using the map_dataframe method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\",  row=\"sex\")\ng.map_dataframe(sns.histplot, x=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Creating Function Visualization Diagram\nDESCRIPTION: Creates a complex visualization showing Seaborn's plotting functions organized by category with custom styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom matplotlib.patches import FancyBboxPatch\n\nf, ax = plt.subplots(figsize=(7, 5))\nf.subplots_adjust(0, 0, 1, 1)\nax.set_axis_off()\nax.set(xlim=(0, 1), ylim=(0, 1))\n\n\nmodules = \"relational\", \"distributions\", \"categorical\"\n\npal = sns.color_palette(\"deep\")\ncolors = dict(relational=pal[0], distributions=pal[1], categorical=pal[2])\n\npal = sns.color_palette(\"dark\")\ntext_colors = dict(relational=pal[0], distributions=pal[1], categorical=pal[2])\n\n\nfunctions = dict(\n    relational=[\"scatterplot\", \"lineplot\"],\n    distributions=[\"histplot\", \"kdeplot\", \"ecdfplot\", \"rugplot\"],\n    categorical=[\"stripplot\", \"swarmplot\", \"boxplot\", \"violinplot\", \"pointplot\", \"barplot\"],\n)\n\npad = .06\n\nw = .2\nh = .15\n\nxs = np.arange(0, 1,  1 / 3) + pad * 1.05\ny = .7\n\nfor x, mod in zip(xs, modules):\n    color = colors[mod] + (.2,)\n    text_color = text_colors[mod]\n    box = FancyBboxPatch((x, y), w, h, f\"round,pad={pad}\", color=\"white\")\n    ax.add_artist(box)\n    box = FancyBboxPatch((x, y), w, h, f\"round,pad={pad}\", linewidth=1, edgecolor=text_color, facecolor=color)\n    ax.add_artist(box)\n    ax.text(x + w / 2, y + h / 2, f\"{mod[:3]}plot\\n({mod})\", ha=\"center\", va=\"center\", size=22, color=text_color)\n\n    for i, func in enumerate(functions[mod]):\n        x_i = x + w / 2\n        y_i =  y - i * .1 - h / 2 - pad\n        box = FancyBboxPatch((x_i - w / 2, y_i - pad / 3), w, h / 4, f\"round,pad={pad / 3}\",\n                              color=\"white\")\n        ax.add_artist(box)\n        box = FancyBboxPatch((x_i - w / 2, y_i - pad / 3), w, h / 4, f\"round,pad={pad / 3}\",\n                             linewidth=1, edgecolor=text_color, facecolor=color)\n        ax.add_artist(box)\n        ax.text(x_i, y_i, func, ha=\"center\", va=\"center\", size=18, color=text_color)\n\n    ax.plot([x_i, x_i], [y, y_i], zorder=-100, color=text_color, lw=1)\n```\n\n----------------------------------------\n\nTITLE: Customizing ECDF Plot Statistics\nDESCRIPTION: Shows how to modify the display statistics of ECDF plots by using the stat parameter. This example displays absolute counts instead of the default normalized proportions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.ecdfplot(data=penguins, x=\"bill_length_mm\", hue=\"species\", stat=\"count\")\n```\n\n----------------------------------------\n\nTITLE: Histogram with Specified Bins\nDESCRIPTION: This snippet adds a `so.Bars` mark and a `so.Hist` statistical transformation to the plot `p`, creating a histogram with 20 bins. The `bins=20` parameter specifies the desired number of bins for the histogram.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(bins=20))\n```\n\n----------------------------------------\n\nTITLE: Customized Stripplots with Advanced Parameters\nDESCRIPTION: Shows advanced stripplot customization using parameters like palette, dodge, jitter, and orientation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"size\", palette=\"deep\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"sex\", dodge=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"sex\", dodge=True, jitter=False)\n```\n\n----------------------------------------\n\nTITLE: Limiting Axis Ranges in Seaborn Plots in Python\nDESCRIPTION: This snippet demonstrates how to set limits for x and y axes on a plot created using Seaborn's object-oriented interface. It specifies the range for both axes to control their display within given bounds.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.limit.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\np.limit(x=(0, 4), y=(-1, 6))\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Plot with Seaborn Objects in Python\nDESCRIPTION: This snippet creates a simple text plot using Seaborn's object-oriented API. It plots 'SST-2' scores against 'MRPC' scores, adding model names as text annotations. This is a basic example of adding textual information to data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n(\n    so.Plot(glue, x=\"SST-2\", y=\"MRPC\", text=\"Model\")\n    .add(so.Text())\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Custom Formatting in Seaborn\nDESCRIPTION: This example creates a violin plot similar to the previous one, but with custom formatting for the x-axis labels. It demonstrates how to use a lambda function with the 'formatter' parameter to customize tick labels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndecades = lambda x: f\"{int(x)}–{int(x + 10)}\"\nsns.violinplot(x=df[\"age\"].round(-1), y=df[\"fare\"], formatter=decades)\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Customized Markers in Python\nDESCRIPTION: This snippet generates a pairplot using different markers for each species, enhancing visualization clarity by visually distinguishing between different groups.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, hue=\"species\", markers=[\"o\", \"s\", \"D\"])\n```\n\n----------------------------------------\n\nTITLE: Creating an Independent-Axes Faceted Linear Regression Plot\nDESCRIPTION: Creates a grid of plots with independent x and y axes for each facet through the facet_kws parameter. This example demonstrates how to customize the sharing behavior of axes in a faceted visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lmplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(\n    data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n    col=\"species\", row=\"sex\", height=3,\n    facet_kws=dict(sharex=False, sharey=False),\n)\n```\n\n----------------------------------------\n\nTITLE: Combined Strip and Point Plot for Bill Depth\nDESCRIPTION: This snippet utilizes both a strip and point plot to visualize the relationship between 'bill_depth_mm' and 'species', incorporating hues from 'sex'. The code requires the 'penguins' dataset. The output combines dense and averaged display modes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(\n    data=penguins, x=\"species\", y=\"bill_depth_mm\", hue=\"sex\",\n    dodge=True, alpha=.2, legend=False,\n)\nsns.pointplot(\n    data=penguins, x=\"species\", y=\"bill_depth_mm\", hue=\"sex\",\n    dodge=.4, linestyle=\"none\", errorbar=None,\n    marker=\"_\", markersize=20, markeredgewidth=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Hue by Sex in Python\nDESCRIPTION: This code creates a swarmplot of total bill by day, with points colored by sex. It demonstrates how to use a different variable for the 'hue' parameter to show additional dimensions of the data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Temporarily Changing Plotting Parameters with Context Manager\nDESCRIPTION: This snippet demonstrates how to use `sns.plotting_context()` as a context manager to temporarily change the plotting parameters. Inside the `with` block, the `sns.lineplot()` function will use the \"talk\" style, and after the block, the parameters will revert to their previous values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/plotting_context.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith sns.plotting_context(\"talk\"):\\n    sns.lineplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Combining Seaborn Styles and Contexts - Python\nDESCRIPTION: This snippet applies both an axes style and plotting context to the plot using bitwise OR to combine 'whitegrid' and 'talk', which influences grid lines and context-related parameters such as font size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom seaborn import plotting_context\np.theme(axes_style(\"whitegrid\") | plotting_context(\"talk\"))\n```\n\n----------------------------------------\n\nTITLE: Ordering Facets with Multiple Variables in Seaborn Objects\nDESCRIPTION: This snippet demonstrates how to order facets when using multiple faceting variables in Seaborn Objects. It uses a dictionary to specify the order for both column ('species') and row ('sex') variables.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"species\", \"sex\", order={\"col\": [\"Gentoo\", \"Adelie\"], \"row\": [\"Female\", \"Male\"]})\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Hue by Party Size in Python\nDESCRIPTION: This snippet creates a swarmplot of total bill by day, with points colored by party size. It shows how to use a numeric variable for the 'hue' parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"size\")\n```\n\n----------------------------------------\n\nTITLE: Adding Hue to FacetGrid Scatterplot in Python\nDESCRIPTION: Creates a FacetGrid with scatterplots, using 'sex' as a hue variable and adding a legend.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\", hue=\"sex\")\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\")\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Setting Display Format to SVG\nDESCRIPTION: This code snippet sets the display format for `seaborn.objects` plots to \"svg\". This will render plots in the Scalable Vector Graphics format. SVG format is suitable for high-quality graphics that scale well without loss of detail.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nso.Plot.config.display[\"format\"] = \"svg\"\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Jointplot\nDESCRIPTION: Creates a jointplot with histogram marginals, displaying the frequency distributions of bill length and depth as histograms on the axes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", kind=\"hist\")\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Size Mapping\nDESCRIPTION: Creates a scatter plot with points sized and colored by party size.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\", size=\"size\")\n```\n\n----------------------------------------\n\nTITLE: Adding Line Overlay to Area Plot in Seaborn\nDESCRIPTION: This snippet builds upon the area plot by adding a line overlay, thus providing a clearer view of data trends and changes over the years. It uses the default settings with no additional specifications for the line and area.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Area.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Area(edgewidth=0)).add(so.Line())\n```\n\n----------------------------------------\n\nTITLE: Loading and Preparing Datasets in Seaborn\nDESCRIPTION: Imports Seaborn objects API and loads two datasets (FMRI and sea ice). The FMRI data is filtered for the parietal region, while the sea ice dataset undergoes more complex transformations including date manipulation, filtering, pivoting, and reshaping to compare data from 1980 and 2019.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Band.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nfmri = load_dataset(\"fmri\").query(\"region == 'parietal'\")\nseaice = (\n    load_dataset(\"seaice\")\n    .assign(\n        Day=lambda x: x[\"Date\"].dt.day_of_year,\n        Year=lambda x: x[\"Date\"].dt.year,\n    )\n    .query(\"Year >= 1980\")\n    .astype({\"Year\": str})\n    .pivot(index=\"Day\", columns=\"Year\", values=\"Extent\")\n    .filter([\"1980\", \"2019\"])\n    .dropna()\n    .reset_index()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Scale Plot with Different Data Types\nDESCRIPTION: Creates a plot with three panels showing continuous, nominal, and temporal data scales. Customizes layout, labels, and theme with ticks style and modified spine visibility.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(y=[0, 0, 0])\n    .pair(x=[\n        [1, 2, 3],\n        [\"A\", \"B\", \"C\"],\n        np.array([\"2020-01-01\", \"2020-02-01\", \"2020-03-01\"], dtype=\"datetime64\"),\n    ])\n    .limit(\n        x0=(0, 10),\n        x1=(-.5, 2.5),\n        x2=(pd.Timestamp(\"2020-01-01\"), pd.Timestamp(\"2020-03-01\"))\n    )\n    .scale(y=so.Continuous().tick(count=0), x2=so.Temporal().label(concise=True))\n    .layout(size=(7, 1), engine=\"tight\")\n    .label(x0=\"Continuous\", x1=\"Nominal\", x2=\"Temporal\")\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Continuous Hue Parameter\nDESCRIPTION: Creates a PairGrid with grayscale histograms on the diagonal and scatterplots off-diagonal, colored by the continuous 'body_mass_g' variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, hue=\"body_mass_g\")\ng.map_diag(sns.histplot, hue=None, color=\".3\")\ng.map_offdiag(sns.scatterplot)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Limits for JointGrid\nDESCRIPTION: Demonstrates how to set custom limits for the x and y axes when creating a JointGrid.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.JointGrid(xlim=(-2, 5), ylim=(0, 10))\n```\n\n----------------------------------------\n\nTITLE: Creating Cumulative Distribution Functions\nDESCRIPTION: Estimates cumulative distribution functions for each category, with individual normalization for each subset while using a common grid for comparison.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(\n    data=tips, x=\"total_bill\", hue=\"time\",\n    cumulative=True, common_norm=False, common_grid=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Installing seaborn documentation dependencies with pip\nDESCRIPTION: Command to install seaborn with additional dependencies required for building the documentation and statistical functionality.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install seaborn[stats,docs]\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Vertical Orientation\nDESCRIPTION: Creates a line plot with a vertical orientation, swapping the x and y axes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=flights, x=\"passengers\", y=\"year\", orient=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Count-Based Density in Seaborn\nDESCRIPTION: This example creates a violin plot similar to the previous one, but with count-based density normalization. It demonstrates the use of the 'density_norm' parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"age\", y=\"deck\", inner=\"point\", density_norm=\"count\")\n```\n\n----------------------------------------\n\nTITLE: Mapping KDE Plot to FacetGrid in Python\nDESCRIPTION: This snippet creates a FacetGrid with ordered rows and maps a kernel density estimation plot to visualize the distribution of total bill amounts across different days.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nordered_days = tips.day.value_counts().index\ng = sns.FacetGrid(tips, row=\"day\", row_order=ordered_days,\n                  height=1.7, aspect=4,)\ng.map(sns.kdeplot, \"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Vertical Bar Plot of Table Size Count\nDESCRIPTION: Generates a vertical bar plot showing the count of records for each table size\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Count.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(tips, y=\"size\").add(so.Bar(), so.Count())\n```\n\n----------------------------------------\n\nTITLE: Jittered Categorical Regression\nDESCRIPTION: Applies jittering to categorical variable (cylinders) for better visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"cylinders\", y=\"weight\", x_jitter=.15)\n```\n\n----------------------------------------\n\nTITLE: Ordering Facets with a Single Variable in Seaborn Objects\nDESCRIPTION: This example shows how to order facets when using a single faceting variable in Seaborn Objects. It limits the plot to show only 'Gentoo' and 'Adelie' species, in that order.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"species\", order=[\"Gentoo\", \"Adelie\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Viridis Colormap Object\nDESCRIPTION: Generates a continuous colormap object from the Viridis palette for advanced color mapping\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/mpl_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.mpl_palette(\"viridis\", as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Faceted Histogram with Column-Wise Independent Proportions and Color Encoding\nDESCRIPTION: This snippet adds a `so.Bars` mark and a `so.Hist` statistical transformation with `stat=\"proportion\"` to the faceted plot `p`.  The `common_norm=[\"col\"]` parameter calculates proportions independently for each column (facet). The `color=\"sex\"` parameter encodes the histogram bars by the `sex` variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(stat=\"proportion\", common_norm=[\"col\"]), color=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Error Errorbar to Seaborn Plot\nDESCRIPTION: Configures the plot to show standard error as the error bar type for statistical estimation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Range(), so.Est(errorbar=\"se\"))\n```\n\n----------------------------------------\n\nTITLE: Age Distribution by Deck with Custom Width\nDESCRIPTION: Creates a boxplot showing age distribution across decks with custom box width.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(data=titanic, x=\"age\", y=\"deck\", width=.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Text Plot with Alignment Controls in Seaborn\nDESCRIPTION: Creates a plot with aligned text markers and dots using Seaborn's object interface. Customizes plot appearance with specific alignment, markers, and theme settings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ny = np.zeros(len(x))\n(\n    so.Plot(x=[f\"'{_x_}'\" for _x_ in x], y=y, halign=ha, valign=va)\n    .add(so.Dot(marker=\"+\", color=\"r\", alpha=.5, stroke=1, pointsize=24))\n    .add(so.Text(text=\"XyZ\", fontsize=14, offset=0))\n    .scale(y=so.Continuous().tick(at=[]), halign=None, valign=None)\n    .limit(x=(-.25, len(x) - .75))\n    .layout(size=(9, .6), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n        \"xtick.labelsize\": 12,\n        \"axes.xmargin\": .015,\n        \"ytick.labelsize\": 12,\n    })\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Plot with FacetGrid in Python\nDESCRIPTION: This code creates a FacetGrid and maps a bar plot to it, comparing total bill amounts between males and females across different days of the week.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"day\", height=4, aspect=.5)\ng.map(sns.barplot, \"sex\", \"total_bill\", order=[\"Male\", \"Female\"])\n```\n\n----------------------------------------\n\nTITLE: Generating HLS Colormap\nDESCRIPTION: This snippet generates an HLS colormap using `sns.hls_palette(as_cmap=True)`.  The `as_cmap=True` parameter indicates that the output should be a matplotlib colormap object rather than a list of colors.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.hls_palette(as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Loading and Pairplotting Penguins Dataset in Python\nDESCRIPTION: This snippet loads the penguins dataset from the Seaborn library and generates a pairplot to visualize relationships between features. The output is a grid of scatter plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.pairplot(penguins)\n```\n\n----------------------------------------\n\nTITLE: Import Seaborn and Set Theme\nDESCRIPTION: This snippet imports the seaborn library and sets the default theme. It also patches the colormap display function for improved visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/dark_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Histogram with Proportion Stat\nDESCRIPTION: This snippet adds a `so.Bars` mark and a `so.Hist` statistical transformation to the plot `p`, creating a histogram that displays proportions instead of counts. The `stat=\"proportion\"` parameter normalizes the histogram such that the area under the curve sums to 1.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(stat=\"proportion\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Point Plot with FacetGrid in Python\nDESCRIPTION: This snippet loads the 'attention' dataset, creates a FacetGrid with multiple columns, and maps a point plot to visualize scores across different solutions for multiple subjects.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nattend = sns.load_dataset(\"attention\").query(\"subject <= 12\")\ng = sns.FacetGrid(attend, col=\"subject\", col_wrap=4, height=2, ylim=(0, 10))\ng.map(sns.pointplot, \"solutions\", \"score\", order=[1, 2, 3], color=\".3\", errorbar=None)\n```\n\n----------------------------------------\n\nTITLE: Simple Age Distribution Boxplot\nDESCRIPTION: Creates a basic boxplot showing the distribution of passenger ages.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.boxplot(x=titanic[\"age\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Bivariate Histogram using Seaborn in Python\nDESCRIPTION: This code creates a bivariate histogram of flipper lengths and bill lengths using Seaborn's displot function with both 'x' and 'y' parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.displot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Custom Inner Plot Styling in Seaborn\nDESCRIPTION: This example creates a violin plot with custom styling for the inner box plot. It demonstrates how to use the 'inner_kws' parameter to adjust various aspects of the inner representation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"age\", inner_kws=dict(box_width=15, whis_width=2, color=\".8\"))\n```\n\n----------------------------------------\n\nTITLE: Using Seaborn Style for Plot Theme - Python\nDESCRIPTION: Applies a tick style derived from Seaborn's axes_style function to the plot, enhancing the plot’s aesthetics by modifying visual elements such as ticks.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seaborn import axes_style\np.theme(axes_style(\"ticks\"))\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects API and Loading Healthcare Dataset\nDESCRIPTION: Imports the Seaborn objects API and loads the healthcare expenditure dataset, sorting it by Country and Year.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Path.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nhealthexp = load_dataset(\"healthexp\").sort_values([\"Country\", \"Year\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Plot with Wrapped Columns in Python\nDESCRIPTION: This code creates a relational plot with wrapped columns using Seaborn. It visualizes the relationship between total bill and tip, with different colors for time and separate columns for days, wrapped into two columns.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\", col=\"day\", col_wrap=2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Measure Line Plot with Legend\nDESCRIPTION: Constructs a more complex plot showing two aggregated measurements with different colors and a custom legend label.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, x=\"species\")\n    .add(so.Line(color=\"C1\"), so.Agg(), y=\"bill_length_mm\", label=\"length\")\n    .add(so.Line(color=\"C2\"), so.Agg(), y=\"bill_depth_mm\", label=\"depth\")\n    .label(legend=\"Measurement\")\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling HiDPI Scaling\nDESCRIPTION: This code snippet disables HiDPI (High Dots Per Inch) scaling for `seaborn.objects` plots by setting the `hidpi` property to `False`. This can be useful for ensuring consistent plot appearance across different devices. It prevents the plots from being scaled up on high-resolution displays.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nso.Plot.config.display[\"hidpi\"] = False\n```\n\n----------------------------------------\n\nTITLE: Creating HUSL Color Palette with Custom Hue\nDESCRIPTION: Creates a HUSL color palette with a specific starting hue value (h=0.5). This controls the base hue from which the palette colors are generated.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.husl_palette(h=.5)\n```\n\n----------------------------------------\n\nTITLE: Adding Color Dimension to Scatter Plot\nDESCRIPTION: Enhances the scatter plot by mapping the 'origin' variable to the color of the dots, allowing for categorical differentiation in the visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dots.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np1.add(so.Dots(), color=\"origin\")\n```\n\n----------------------------------------\n\nTITLE: Generating HLS Palette with Specified Lightness\nDESCRIPTION: This snippet generates an HLS color palette with a specified lightness value. Setting `l=.3` modifies the lightness component of the HLS color model to 0.3.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.hls_palette(l=.3)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the Seaborn visualization environment by importing necessary libraries and setting the default theme.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Creating faceted barplots with catplot\nDESCRIPTION: Creates multiple barplots faceted by species using catplot with the 'bar' kind parameter, showing the relationship between sex and body mass for each penguin species in separate panels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(\n    penguins, kind=\"bar\",\n    x=\"sex\", y=\"body_mass_g\", col=\"species\",\n    height=4, aspect=.5,\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Seaborn Theme with Style and Palette in Python\nDESCRIPTION: This snippet demonstrates how to customize the Seaborn theme by setting a specific style ('whitegrid') and color palette ('pastel'). It then creates a bar plot with these settings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme(style=\"whitegrid\", palette=\"pastel\")\nsns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Scatterplot PairGrid\nDESCRIPTION: Creates a PairGrid and maps a scatterplot to all positions in the grid, showing relationships between all variable pairs.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins)\ng.map(sns.scatterplot)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Loading Dataset in Python\nDESCRIPTION: This snippet sets up the Seaborn environment with a white grid style and loads the 'diamonds' dataset for subsequent visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\ndiamonds = sns.load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn and Loading Healthcare Spending Dataset in Python\nDESCRIPTION: Imports the Seaborn objects interface and loads the healthcare expenditure dataset. This setup is required before creating any visualizations with the data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Norm.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nhealthexp = load_dataset(\"healthexp\")\n```\n\n----------------------------------------\n\nTITLE: Creating an ECDF Plot Along Y-Axis\nDESCRIPTION: Demonstrates how to flip the orientation of the ECDF plot by assigning the data variable to the y-axis instead of the x-axis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.ecdfplot(data=penguins, y=\"flipper_length_mm\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Violin Plot with Adjusted Bandwidth in Seaborn\nDESCRIPTION: This example creates a violin plot similar to the previous one, but with adjusted bandwidth for kernel density estimation. It demonstrates the use of the 'bw_adjust' parameter to control the smoothness of the violin shape.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"age\", y=\"alive\", bw_adjust=.5, inner=\"stick\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Percentile Plot with Log Scale\nDESCRIPTION: Creates a basic plot showing diamond prices by cut quality with a logarithmic y-scale. Uses the Perc() function without arguments to calculate default percentiles across the categories.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Perc.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = (\n    so.Plot(diamonds, \"cut\", \"price\")\n    .scale(y=\"log\")\n)\np.add(so.Dot(), so.Perc())\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Dataset\nDESCRIPTION: Sets up the Seaborn objects interface and loads the penguins dataset for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Legend Outside Plot in Python using Seaborn\nDESCRIPTION: This snippet generates a histogram similar to the previous one but moves the legend to the upper left, outside the plot area. It uses bbox_to_anchor to position the legend precisely.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/move_legend.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nax = sns.histplot(penguins, x=\"bill_length_mm\", hue=\"species\")\nsns.move_legend(ax, \"upper left\", bbox_to_anchor=(1, 1))\n```\n\n----------------------------------------\n\nTITLE: Mixed Format Color Palette Blending\nDESCRIPTION: Demonstrates blending colors using different format specifications: hex code, decimal value, and XKCD color name.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/blend_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.blend_palette([\"#45a872\", \".8\", \"xkcd:golden\"])\n```\n\n----------------------------------------\n\nTITLE: Regression Without Confidence Interval\nDESCRIPTION: Shows regression plot without confidence interval bands.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"weight\", y=\"horsepower\", ci=None)\n```\n\n----------------------------------------\n\nTITLE: Pivoting Flights Dataset in Python\nDESCRIPTION: This code loads the 'flights' dataset using Seaborn's load_dataset function and pivots it to create a wide-format DataFrame with years as index, months as columns, and passenger counts as values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nflights_wide = (\n    sns.load_dataset(\"flights\")\n    .pivot(index=\"year\", columns=\"month\", values=\"passengers\")\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Scatterplot to FacetGrid in Python with Seaborn\nDESCRIPTION: Creates a FacetGrid and maps a scatterplot of 'total_bill' vs 'tip' to each facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\",  row=\"sex\")\ng.map(sns.scatterplot, \"total_bill\", \"tip\")\n```\n\n----------------------------------------\n\nTITLE: Rugplot with Hue Mapping in Seaborn\nDESCRIPTION: Demonstrates how to add color mapping to rugplots using the 'hue' parameter. Uses time of day as a categorical variable for color differentiation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/rugplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\")\nsns.rugplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Styling Boxenplot Elements in Python\nDESCRIPTION: This code demonstrates how to customize various elements of a boxenplot, including line width, colors, and outlier appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(\n    data=diamonds, x=\"price\", y=\"clarity\",\n    linewidth=.5, linecolor=\".7\",\n    line_kws=dict(linewidth=1.5, color=\"#cde\"),\n    flier_kws=dict(facecolor=\".7\", linewidth=.5),\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Facet Labels in Seaborn Objects\nDESCRIPTION: This snippet demonstrates how to customize facet labels in Seaborn Objects. It creates a plot faceted by color grade and adds a custom title format for each facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"color\").label(title=\"{} grade\".format)\n```\n\n----------------------------------------\n\nTITLE: Using Native Scale in Categorical Plots\nDESCRIPTION: Example of using the new native_scale parameter in stripplot or swarmplot to plot numeric or datetime categories with their original scale.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.0.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(x=\"category\", y=\"value\", data=df, native_scale=True)\n```\n\n----------------------------------------\n\nTITLE: Filtered Data Stripplots\nDESCRIPTION: Creates stripplots with filtered data using query and additional visualization parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(\n    data=tips.query(\"size in [2, 3, 5]\"),\n    x=\"total_bill\", y=\"size\", orient=\"h\",\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(\n    data=tips.query(\"size in [2, 3, 5]\"),\n    x=\"total_bill\", y=\"size\", orient=\"h\",\n    native_scale=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Seaborn Bar Plot in Python\nDESCRIPTION: This code creates a simple bar plot using Seaborn's barplot function. It uses default matplotlib settings and plots three bars with labels A, B, and C.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Optimizing Rugplot for Large Datasets in Seaborn\nDESCRIPTION: Shows how to create effective rugplots for large datasets by adjusting line width and transparency. Uses the diamonds dataset to demonstrate density visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/rugplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndiamonds = sns.load_dataset(\"diamonds\")\nsns.scatterplot(data=diamonds, x=\"carat\", y=\"price\", s=5)\nsns.rugplot(data=diamonds, x=\"carat\", y=\"price\", lw=1, alpha=.005)\n```\n\n----------------------------------------\n\nTITLE: Parameterized Jitter for Scatter Plot in Seaborn Python\nDESCRIPTION: Employs parameterized jitter with a magnitude of 100 on the x-axis while visualizing 'body_mass_g' against 'flipper_length_mm'. This snippet showcases controlling data point displacement along one axis, enhancing focus on specific features in the plot. Requires Seaborn and comprehension of plot manipulations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins[\"body_mass_g\"].round(-3), penguins[\"flipper_length_mm\"])\n    .add(so.Dots(), so.Jitter(x=100))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Figure and Displaying a Plot with Seaborn in Python\nDESCRIPTION: This snippet demonstrates the creation of a Matplotlib figure and displays a Seaborn plot on it. The example continues to use the 'diamonds' dataset for visualization. It requires seaborn and matplotlib libraries.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.on.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf = plt.figure()\np.on(f).show()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Line Width in Seaborn Plot - Python\nDESCRIPTION: This snippet adjusts the width of the lines in the plot by setting a new line width parameter within the theme.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.theme({\"lines.linewidth\": 4})\n```\n\n----------------------------------------\n\nTITLE: Histogram with Specified Binwidth\nDESCRIPTION: This snippet adds a `so.Bars` mark and a `so.Hist` statistical transformation to the plot `p`, creating a histogram with a bin width of 5. The `binwidth=5` parameter specifies the width of each bin in the histogram.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(binwidth=5))\n```\n\n----------------------------------------\n\nTITLE: Customizing Histogram Legend in Python with Seaborn\nDESCRIPTION: This example creates a histogram and extensively customizes the legend. It positions the legend at the bottom center, spreads it horizontally, removes the title and frame, and adjusts its location using bbox_to_anchor.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/move_legend.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nax = sns.histplot(penguins, x=\"bill_length_mm\", hue=\"species\")\nsns.move_legend(\n    ax, \"lower center\",\n    bbox_to_anchor=(.5, 1), ncol=3, title=None, frameon=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Visualization with Titanic Dataset\nDESCRIPTION: Shows various plotting techniques using the Titanic dataset including bar plots and point plots with custom styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/categorical.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntitanic = sns.load_dataset(\"titanic\")\nsns.catplot(data=titanic, x=\"sex\", y=\"survived\", hue=\"class\", kind=\"bar\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(\n    data=titanic, x=\"class\", y=\"survived\", hue=\"sex\",\n    palette={\"male\": \"g\", \"female\": \"m\"},\n    markers=[\"^\", \"o\"], linestyles=[\"-\", \"--\"],\n    kind=\"point\"\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Histogram with Seaborn Objects\nDESCRIPTION: This snippet creates a basic histogram using the `so.Plot` object, mapping the `island` variable to the x-axis. It then adds a `so.Bar` mark with a `so.Hist` stat transformation, effectively creating a histogram of the island variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nso.Plot(penguins, \"island\").add(so.Bar(), so.Hist())\n```\n\n----------------------------------------\n\nTITLE: Creating Basic JointGrid with Penguins Dataset\nDESCRIPTION: Loads the penguins dataset and creates a basic JointGrid object without specifying plot types.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Palette with Hex Code\nDESCRIPTION: This snippet creates a dark color palette using the hex code \"#79C\" as the base color. The `sns.dark_palette` function generates a gradient from white to the specified hex color.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/dark_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.dark_palette(\"#79C\")\n```\n\n----------------------------------------\n\nTITLE: Wide-form and Oriented Stripplots\nDESCRIPTION: Demonstrates wide-form plotting and horizontal orientation options for stripplots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, orient=\"h\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"size\", orient=\"h\")\n```\n\n----------------------------------------\n\nTITLE: Adding Weighted Estimation Based on Price Variable\nDESCRIPTION: Demonstrates how to create a weighted statistical estimate by assigning the price variable as a weight in the estimation layer.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Range(), so.Est(), weight=\"price\")\n```\n\n----------------------------------------\n\nTITLE: Parameterized Cubehelix Palette Specification\nDESCRIPTION: Shows the new string format for specifying cubehelix color palettes in Seaborn using the 'ch:' prefix followed by parameters. Keywords can be spelled out or referenced by first letter, and '_r' can be appended to reverse the palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.9.0.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"ch:-.1,.2,l=.7\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Scatter Plot with Seaborn Objects in Python\nDESCRIPTION: This code creates a basic scatter plot using the Plot object and Dot mark from Seaborn's object-oriented API.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.add.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\np = so.Plot(tips, \"total_bill\", \"tip\").add(so.Dot())\np\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Custom Color Palette\nDESCRIPTION: Creates a scatter plot with points colored by size using a deep color palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"size\", palette=\"deep\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Matplotlib and Random Seed\nDESCRIPTION: Configures Matplotlib for inline display and sets a reproducible random seed based on the string 'aesthetics'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nnp.random.seed(sum(map(ord, \"aesthetics\")))\n```\n\n----------------------------------------\n\nTITLE: Generating a Residual Plot for Horsepower vs MPG in Python\nDESCRIPTION: This snippet creates a residual plot to visualize the relationship between 'horsepower' and 'mpg' (miles per gallon) from the mpg dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/residplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.residplot(data=mpg, x=\"horsepower\", y=\"mpg\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Boxplot with Seaborn catplot\nDESCRIPTION: Creates a box plot representation of age distribution by passenger class using the 'kind' parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=df, x=\"age\", y=\"class\", kind=\"box\")\n```\n\n----------------------------------------\n\nTITLE: Create Range Plot with Renamed Index\nDESCRIPTION: This snippet creates a range plot where the x-axis represents the penguin index, and the y-axis represents the range between 'bill_depth_mm' (ymin) and 'bill_length_mm' (ymax). The index is renamed to 'penguin' for clarity. The plot uses 'island' to determine the color of the ranges.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Range.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(\n    penguins\n    .rename_axis(index=\"penguin\")\n    .pipe(so.Plot, x=\"penguin\", ymin=\"bill_depth_mm\", ymax=\"bill_length_mm\")\n    .add(so.Range(), color=\"island\")\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Theme in Seaborn\nDESCRIPTION: This code applies the default theme to all subsequent Seaborn plots, ensuring consistent styling across visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Apply the default theme\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Palette with Color Name\nDESCRIPTION: This snippet creates a dark color palette based on the \"seagreen\" color using the `sns.dark_palette` function. The palette is generated with a darkening gradient from white to the specified color.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/dark_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.dark_palette(\"seagreen\")\n```\n\n----------------------------------------\n\nTITLE: Adding Jitter to X-axis in Seaborn Linear Model Plot in Python\nDESCRIPTION: This snippet demonstrates how to add jitter to the x-axis in a Seaborn linear model plot. It helps to visualize overlapping points when dealing with discrete x-axis values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"size\", y=\"tip\", data=tips, x_jitter=.05);\n```\n\n----------------------------------------\n\nTITLE: Visualizing List of Series\nDESCRIPTION: Shows how to create a line plot from a list of pandas Series objects extracted from the wide-format data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nflights_wide_list = [col for _, col in flights_wide.items()]\nsns.relplot(data=flights_wide_list, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset with Seaborn\nDESCRIPTION: This snippet imports necessary components from the Seaborn library and loads the 'penguins' dataset for further analysis. The dataset is essential for creating plots with various animal characteristics.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.share.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Loading Dataset and Initializing PairGrid\nDESCRIPTION: Loads the penguins dataset from Seaborn and creates a basic PairGrid object without any mapping.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\ng = sns.PairGrid(penguins)\n```\n\n----------------------------------------\n\nTITLE: Creating Light Palette from Named Color in Python\nDESCRIPTION: Creates a light palette using a named color ('seagreen') as the base. This generates a sequential palette from light to dark shades of the specified color.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/light_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.light_palette(\"seagreen\")\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Custom Palette in Python\nDESCRIPTION: This code creates a FacetGrid with a custom color palette and maps a scatter plot to visualize the relationship between total bill and tip, differentiated by time of day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npal = dict(Lunch=\"seagreen\", Dinner=\".7\")\ng = sns.FacetGrid(tips, hue=\"time\", palette=pal, height=5)\ng.map(sns.scatterplot, \"total_bill\", \"tip\", s=100, alpha=.5)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Creating Dictionary of Arrays for Plotting\nDESCRIPTION: Shows how to create a dictionary mapping series names to NumPy arrays for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntwo_arrays_dict = {s.name: s.to_numpy() for s in two_series}\nsns.relplot(data=two_arrays_dict, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Seaborn Style and Creating Line Plot in Python\nDESCRIPTION: This snippet shows how to override Seaborn's default style parameters and create a line plot. The 'darkgrid' style is applied with custom grid color and line style, demonstrating fine-grained control over plot aesthetics.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_style.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"darkgrid\", {\"grid.color\": \".6\", \"grid.linestyle\": \":\"})\nsns.lineplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the Seaborn environment with default theme settings for consistent visualization styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/clustermap.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: KDE with Customized Grid Size\nDESCRIPTION: Modifies the KDE visualization by specifying a custom grid size for the density estimation calculation, which affects the smoothness of the curve.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dots(), so.KDE(gridsize=100))\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Plot with Dots, Bars, and Ranges in Seaborn\nDESCRIPTION: This snippet creates a complex visualization with multiple layers including dots with various markers, bars with alpha transparency, and range plots with different line styles. The plot uses various styling options and scale configurations to create a custom appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(so.Plot()\n    .add(\n        so.Dot(edgewidth=3, stroke=3),\n        so.Dodge(by=[\"group\"]),\n        x=[\"A\", \"A\", \"A\", \"A\", \"A\"],\n        y=[1.75, 2.25, 2.75, 2.0, 2.5],\n        color=[1, 2, 3, 1, 3],\n        marker=[mpl.markers.MarkerStyle(x) for x in \"os^+o\"],\n        pointsize=(9, 9, 9, 13, 10),\n        fill=[True, False, True, True, False],\n        group=[1, 2, 3, 4, 5], width=.5, legend=False,\n    )\n    .add(\n        so.Bar(edgewidth=2.5, alpha=.2, width=.9),\n        so.Dodge(gap=.05),\n        x=[\"B\", \"B\", \"B\",], y=[2, 2.5, 1.75], color=[1, 2, 3],\n        legend=False,\n    )\n    .add(\n        so.Range({\"capstyle\": \"round\"}, linewidth=3),\n        so.Dodge(by=[\"group\"]),\n        x=[\"C\", \"C\", \"C\"], ymin=[1.5, 1.75, 1.25], ymax=[2.5, 2.75, 2.25],\n        color=[1, 2, 2], linestyle=[\"-\", \"-\", \":\"],\n        group=[1, 2, 3], width=.5, legend=False,\n    )\n    .layout(size=(4, 4), engine=None)\n    .limit(x=(-.5, 2.5), y=(0, 3))\n    .label(x=\"X Axis (nominal)\", y=\"Y Axis (continuous)\")\n    .scale(\n        color=\"dark:C0_r\", #None,\n        fill=None, marker=None,\n        pointsize=None, linestyle=None,\n        y=so.Continuous().tick(every=1, minor=1)\n    )\n    .theme({\n        **axes_style(\"ticks\"),\n        \"axes.spines.top\": False, \"axes.spines.right\": False,\n        \"axes.labelsize\": 14,\n    })\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the Seaborn environment with basic configuration and random seed for reproducibility.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/categorical.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"ticks\", color_codes=True)\nnp.random.seed(sum(map(ord, \"categorical\")))\n```\n\n----------------------------------------\n\nTITLE: Percentage-based Count Plot with Survival Data\nDESCRIPTION: Creates a percentage-based visualization of survival rates across different passenger classes using the stat parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/countplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.countplot(titanic, x=\"class\", hue=\"survived\", stat=\"percent\")\n```\n\n----------------------------------------\n\nTITLE: Creating FacetGrid Objects\nDESCRIPTION: Demonstrates different ways to initialize Seaborn FacetGrid objects with various parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(penguins)\n```\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(penguins, col=\"sex\")\n```\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(penguins, col=\"sex\", height=3.5, aspect=.75)\n```\n\n----------------------------------------\n\nTITLE: Horizontal Swarmplot in Python\nDESCRIPTION: This code creates a horizontal swarmplot of total bill by party size. It demonstrates how to change the orientation of the plot using the 'orient' parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"total_bill\", y=\"size\", orient=\"h\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dash Marks with Fixed Width\nDESCRIPTION: Adds dash marks with a specified fixed width of 0.5 to an existing plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dash(width=.5))\n```\n\n----------------------------------------\n\nTITLE: Adjusting Start Color of Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with a different starting color. The start parameter determines the starting position in the color cycle (0-3).\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(start=2)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for All Months (Wide Format)\nDESCRIPTION: Creates a line plot using all columns from the pivoted flights data, showing trends for all months.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=flights_wide)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Line Plot for Flights\nDESCRIPTION: Creates a simple line plot showing passenger trends over years using the original flights dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=flights, x=\"year\", y=\"passengers\")\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Selected Variables\nDESCRIPTION: Creates a PairGrid with a specified subset of variables to visualize, using 'body_mass_g' as a continuous color variable and grayscale histograms on the diagonal.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nvariables = [\"body_mass_g\", \"bill_length_mm\", \"flipper_length_mm\"]\ng = sns.PairGrid(penguins, hue=\"body_mass_g\", vars=variables)\ng.map_diag(sns.histplot, hue=None, color=\".3\")\ng.map_offdiag(sns.scatterplot)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Penguin Dataset\nDESCRIPTION: Initializes the environment by importing Seaborn's object-oriented API and loading the penguin dataset for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Converting Anagrams Data to Long Format\nDESCRIPTION: Transforms the anagrams data from wide to long format using pandas' melt function to prepare it for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nanagrams_long = anagrams.melt(id_vars=[\"subidr\", \"attnr\"], var_name=\"solutions\", value_name=\"score\")\nanagrams_long.head()\n```\n\n----------------------------------------\n\nTITLE: Adding Dash Marks with Dodge Transformation\nDESCRIPTION: Adds dash marks with dodge transformation to separate categories visually on an existing plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dash(), so.Dodge())\n```\n\n----------------------------------------\n\nTITLE: Using Dictionary Data for Visualization\nDESCRIPTION: Demonstrates how to create a line plot using a dictionary derived from the flights DataFrame.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nflights_dict = flights.to_dict()\nsns.relplot(data=flights_dict, x=\"year\", y=\"passengers\", hue=\"month\", kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Custom Annotation Function for FacetGrid in Python\nDESCRIPTION: Demonstrates using a custom function to annotate each facet with the number of data points.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\ndef annotate(data, **kws):\n    n = len(data)\n    ax = plt.gca()\n    ax.text(.1, .6, f\"N = {n}\", transform=ax.transAxes)\n\ng = sns.FacetGrid(tips, col=\"time\")\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\")\ng.map_dataframe(annotate)\n```\n\n----------------------------------------\n\nTITLE: Using Vector References for Faceting in Seaborn Objects\nDESCRIPTION: This snippet demonstrates how to use vector references for faceting in Seaborn Objects. It uses the 'island' column from the penguins dataset directly as a faceting variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.facet(penguins[\"island\"])\n```\n\n----------------------------------------\n\nTITLE: Modifying Hue of Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with increased hue intensity. The hue parameter controls the saturation of the colors in the palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(hue=1)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Month on X-Axis\nDESCRIPTION: Creates an alternative view of the flights data with month on the x-axis and years as different lines.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=flights, x=\"month\", y=\"passengers\", hue=\"year\", kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Loading Anscombe Dataset in Python with Seaborn\nDESCRIPTION: This snippet loads the Anscombe quartet dataset using Seaborn's load_dataset function. The Anscombe quartet is a set of four datasets that have nearly identical simple descriptive statistics but very different distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nanscombe = sns.load_dataset(\"anscombe\")\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Line to FacetGrid in Python\nDESCRIPTION: This snippet creates a FacetGrid with a scatter plot and adds a reference line to each subplot using a loop over the axes dictionary.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"smoker\", margin_titles=True, height=4)\ng.map(plt.scatter, \"total_bill\", \"tip\", color=\"#338844\", edgecolor=\"white\", s=50, lw=1)\nfor ax in g.axes_dict.values():\n    ax.axline((0, 0), slope=.2, c=\".2\", ls=\"--\", zorder=0)\ng.set(xlim=(0, 60), ylim=(0, 14))\n```\n\n----------------------------------------\n\nTITLE: Customizing Plot Aesthetics with Seaborn\nDESCRIPTION: This snippet demonstrates how to customize plot elements like labels, titles, and axis limits using the `set` method on a Seaborn plot object. It shows an example using `sns.scatterplot` and then modifying its appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n\"ax = sns.scatterplot(...)\n    ax.set(\n        xlabel=\"The x label\",\n        ylabel=\"The y label\",\n        title=\"The title\"\n        xlim=(xmin, xmax),\n        xticks=[...],\n        xticklabels=[...],\n    )\"\n```\n\n----------------------------------------\n\nTITLE: Constrained Layout Engine for Faceting\nDESCRIPTION: This snippet demonstrates how to specify a layout engine for faceting plots. It uses the `constrained` engine, which can provide better results for specific plot arrangements. Different layout engines may produce varying results depending on the plot's complexity and desired appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.layout.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.facet([\"A\", \"B\"], [\"X\", \"Y\"]).layout(engine=\"constrained\")\n```\n\n----------------------------------------\n\nTITLE: Showing Seaborn plot using Matplotlib in Python\nDESCRIPTION: This snippet demonstrates how to explicitly show a Seaborn plot using Matplotlib's show function, which may be necessary in some environments.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/installing.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Creating Diverging Palette with Different Hues\nDESCRIPTION: Creates a diverging color palette using purple (280) and teal (150) as endpoint hues.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(280, 150)\n```\n\n----------------------------------------\n\nTITLE: Creating a Relational Plot with Row and Column Facets in Python\nDESCRIPTION: This snippet creates a relational plot with both row and column facets using Seaborn. It visualizes the relationship between total bill and tip, with different colors for each day, separate columns for time, and separate rows for sex.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"day\", col=\"time\", row=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Light Palette from HSL Values in Python\nDESCRIPTION: Creates a light palette using HSL color values (20, 60, 50) as the base, with the input parameter set to 'husl'. This specifies the color space to use for generating the palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/light_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.light_palette((20, 60, 50), input=\"husl\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Seaborn environment and loading datasets\nDESCRIPTION: Initializes Seaborn with a white grid style and loads two example datasets: penguins and flights. These datasets will be used in subsequent visualization examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\npenguins = sns.load_dataset(\"penguins\")\nflights = sns.load_dataset(\"flights\")\n```\n\n----------------------------------------\n\nTITLE: Generating HLS Palette with Specified Saturation\nDESCRIPTION: This snippet generates an HLS color palette with a specified saturation value. Setting `s=.3` modifies the saturation component of the HLS color model to 0.3.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.hls_palette(s=.3)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Transposed Wide-Form Data\nDESCRIPTION: Demonstrates how to transpose the wide-form data and create a line plot, effectively swapping rows and columns.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=flights_wide.transpose(), kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Using PolyFit in Seaborn Objects Interface\nDESCRIPTION: Improves the PolyFit class to handle missing data more robustly.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nobjects.PolyFit\n```\n\n----------------------------------------\n\nTITLE: Mapping Scatterplot with Hue to FacetGrid in Python\nDESCRIPTION: Demonstrates mapping a scatterplot to a FacetGrid with 'sex' as a hue variable within each facet.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, col=\"time\")\ng.map_dataframe(sns.scatterplot, x=\"total_bill\", y=\"tip\", hue=\"sex\")\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Applying a Predefined Plotting Style\nDESCRIPTION: This snippet demonstrates how to apply a predefined plotting style using `sns.plotting_context(\"talk\")`. This will return the parameter values associated with the \"talk\" style, which is designed for presentations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/plotting_context.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.plotting_context(\"talk\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn with Default Theme\nDESCRIPTION: Sets up the Seaborn library by importing it and applying the default theme settings for consistent visualization styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Adjusting KDE Smoothing (Less Smoothing)\nDESCRIPTION: Creates a KDE plot with reduced smoothing by setting bw_adjust parameter to a value less than 1.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.kdeplot(data=tips, x=\"total_bill\", bw_adjust=.2)\n```\n\n----------------------------------------\n\nTITLE: Updating Seaborn Plot Configuration - Python\nDESCRIPTION: Directly updates the Seaborn global plot configuration with a new theme setting (white axes style), showcasing a method to globally adjust plot appearances.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nso.Plot.config.theme.update(axes_style(\"white\"))\np\n```\n\n----------------------------------------\n\nTITLE: Creating Q-Q Plot with Multiple Dimensions in Python\nDESCRIPTION: This code creates a FacetGrid with multiple dimensions (hue and columns) and maps a Q-Q plot to compare the distributions of total bill and tip amounts across different times and genders.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(tips, hue=\"time\", col=\"sex\", height=4)\ng.map(qqplot, \"total_bill\", \"tip\")\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Creating Relation Plots\nDESCRIPTION: Demonstrates relation plots with custom line and axis labels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\ng = sns.relplot(data=tips, x=\"total_bill\", y=\"tip\")\ng.ax.axline(xy1=(10, 2), slope=.2, color=\"b\", dashes=(5, 2))\n```\n\nLANGUAGE: python\nCODE:\n```\ng = sns.relplot(data=penguins, x=\"flipper_length_mm\", y=\"bill_length_mm\", col=\"sex\")\ng.set_axis_labels(\"Flipper length (mm)\", \"Bill length (mm)\")\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Loading Dataset\nDESCRIPTION: This snippet imports the necessary libraries: seaborn.objects as so and seaborn. It then loads the 'diamonds' dataset using seaborn's load_dataset function, which will be used in subsequent plotting operations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Plots with Subplots in Seaborn\nDESCRIPTION: Creates a multi-panel bar plot faceted by 'sex' column with customized figure dimensions using height and aspect parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(\n    data=df, x=\"class\", y=\"survived\", col=\"sex\",\n    kind=\"bar\", height=4, aspect=.6,\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Methods to Seaborn Grid Objects\nDESCRIPTION: Example of using the new apply and pipe methods for customizing FacetGrid, PairGrid, or JointGrid objects in a fluent style.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.0.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng = sns.FacetGrid(df, col=\"category\")\ng.map(plt.scatter, \"x\", \"y\").apply(lambda x: x.set_title(\"Custom Title\")).tight_layout()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Categorical Plot with Seaborn\nDESCRIPTION: Loads the Titanic dataset and creates a basic categorical plot comparing age across passenger classes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndf = sns.load_dataset(\"titanic\")\nsns.catplot(data=df, x=\"age\", y=\"class\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Stroke Width Options for X Markers in Seaborn\nDESCRIPTION: This code shows how different stroke width values affect 'x' markers. It displays a series of x markers with increasing stroke width from 0 to 4 using the previously defined edge_plot template.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n(\n    edge_plot\n    .add(so.Dot(color=\".2\", marker=\"x\", pointsize=11), stroke=x)\n    .scale(stroke=None)\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Axes Facecolor\nDESCRIPTION: This code snippet sets the `axes.facecolor` property in the seaborn.objects theme configuration to \"white\". This will change the background color of the plot axes to white.  It customizes the visual appearance of plots created using `seaborn.objects`.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nso.Plot.config.theme[\"axes.facecolor\"] = \"white\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Split Violin Plot with Gap in Seaborn\nDESCRIPTION: This example builds on the previous one by adding a gap between the split violins. It shows how to use the 'gap' parameter to adjust the spacing between violin halves.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"class\", y=\"age\", hue=\"alive\", split=True, gap=.1, inner=\"quart\")\n```\n\n----------------------------------------\n\nTITLE: Context and Scaling Examples\nDESCRIPTION: Shows different Seaborn plotting contexts (paper, talk, poster) and custom scaling options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"paper\")\nsinplot()\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"talk\")\nsinplot()\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"poster\")\nsinplot()\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\nsinplot()\n```\n\n----------------------------------------\n\nTITLE: Temporary Style Application with Context Manager\nDESCRIPTION: Demonstrates using a context manager to temporarily apply the 'whitegrid' style to a bar plot visualization\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/axes_style.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith sns.axes_style(\"whitegrid\"):\n    sns.barplot(x=[1, 2, 3], y=[2, 5, 3])\n```\n\n----------------------------------------\n\nTITLE: Seaborn Despine Examples\nDESCRIPTION: Demonstrates the use of Seaborn's despine function to remove plot spines with various options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsinplot()\nsns.despine()\n```\n\nLANGUAGE: python\nCODE:\n```\nf, ax = plt.subplots()\nsns.violinplot(data=data)\nsns.despine(offset=10, trim=True);\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.set_style(\"whitegrid\")\nsns.boxplot(data=data, palette=\"deep\")\nsns.despine(left=True)\n```\n\n----------------------------------------\n\nTITLE: Adding facet_kws parameter to lmplot in Python\nDESCRIPTION: Enhancement to the lmplot function, adding a new facet_kws parameter and deprecating sharex, sharey, and legend_out parameters. These should now be passed in a facet_kws dictionary.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.2.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nlmplot(..., facet_kws={\"sharex\": True, \"sharey\": True, \"legend_out\": True})\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Setting Theme in Python\nDESCRIPTION: Sets up the Seaborn visualization library by importing it, setting the default theme, and patching the colormap display functionality.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/light_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Adjusting KDE Smoothing (More Smoothing) with Boundary Control\nDESCRIPTION: Creates a KDE plot with increased smoothing by setting bw_adjust parameter to a value greater than 1, while preventing smoothing beyond the data range with cut=0.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nax= sns.kdeplot(data=tips, x=\"total_bill\", bw_adjust=5, cut=0)\n```\n\n----------------------------------------\n\nTITLE: Loading and Sorting Dataset - Seaborn - Python\nDESCRIPTION: This snippet imports the Seaborn library and loads the Titanic dataset, sorting it by the 'alive' status in descending order. The dataset is prepared for future visualizations based on the survivors and non-survivors of the Titanic disaster.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Stack.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ntitanic = load_dataset(\"titanic\").sort_values(\"alive\", ascending=False)\n```\n\n----------------------------------------\n\nTITLE: Resolving Categorical/Numeric Plot Alignment in Seaborn\nDESCRIPTION: This code demonstrates how to manually map numeric values to integer indexes when combining categorical plots with line plots. This works around the issue where categorical plots use integer positions while numeric plots use actual values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nunique_xs = sorted(df[\"x\"].unique())\nsns.violinplot(data=df, x=\"x\", y=\"y\")\nsns.lineplot(data=df, x=df[\"x\"].map(unique_xs.index), y=\"y\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Loading Titanic Dataset\nDESCRIPTION: Sets up Seaborn visualization environment with a whitegrid style and loads the built-in Titanic dataset for analysis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/countplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\ntitanic = sns.load_dataset(\"titanic\")\n```\n\n----------------------------------------\n\nTITLE: Creating Uppercase Letter Plot with Variable Font Sizes\nDESCRIPTION: Generates a plot displaying uppercase letters with varying font sizes using ASCII characters. Implements custom scaling and theme settings for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom string import ascii_uppercase\nn = 26\ns = np.arange(n) + 1\ny = np.zeros(n)\nt = list(ascii_uppercase[:n])\n(\n    so.Plot(x=s, y=y, text=t, fontsize=s)\n    .add(so.Text())\n    .scale(x=so.Nominal(), y=so.Continuous().tick(at=[]))\n    .layout(size=(9, .5), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n        \"xtick.labelsize\": 12,\n        \"axes.xmargin\": .015,\n        \"ytick.labelsize\": 12,\n    })\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Pairplot with Specified Height in Python\nDESCRIPTION: This snippet creates a pairplot with a specified height for each subplot, allowing for better control over the plot size and presentation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.pairplot(penguins, height=1.5)\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Histogram Plot\nDESCRIPTION: Creates a stacked histogram of penguin flipper lengths grouped by species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.histplot(data=penguins, x=\"flipper_length_mm\", hue=\"species\", multiple=\"stack\")\n```\n\n----------------------------------------\n\nTITLE: Reversing Rotation of Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with reversed color rotation. Using a negative rot value reverses the direction of rotation through the color cycle.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(rot=-.2)\n```\n\n----------------------------------------\n\nTITLE: Displaying the Finalized Plot\nDESCRIPTION: Renders the plot with all previously applied customizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\np\n```\n\n----------------------------------------\n\nTITLE: Creating Default Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a default cubehelix palette using Seaborn. The cubehelix palette is a sequential color scheme that increases in lightness as it progresses through the color wheel.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette()\n```\n\n----------------------------------------\n\nTITLE: Defining Text Alignment Options in Seaborn\nDESCRIPTION: This code defines arrays of horizontal and vertical alignment options for text elements in matplotlib/seaborn. It prepares for a demonstration of how different alignment settings affect text positioning.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nx = [\"left\", \"right\", \"top\", \"bottom\", \"baseline\", \"center\"]\nha = x[:2] + [\"center\"] * 4\nva = [\"center_baseline\"] * 2 + x[2:]\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Setting Theme\nDESCRIPTION: Sets up the Seaborn environment by importing the library, applying a default theme, and patching the colormap display functionality.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Creating a Grid-Faceted Linear Regression Plot by Species and Sex\nDESCRIPTION: Creates a grid of plots with species as columns and sex as rows. This advanced visualization technique organizes multiple categorical comparisons into a single figure with customized height.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lmplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(\n    data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\",\n    col=\"species\", row=\"sex\", height=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Light Palette with XKCD Color and Specified Size in Python\nDESCRIPTION: Creates a light palette using an XKCD color name ('copper') as the base, with a specified size of 8 colors. This produces a palette with exactly 8 distinct colors from light to dark.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/light_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.light_palette(\"xkcd:copper\", 8)\n```\n\n----------------------------------------\n\nTITLE: Setting Matplotlib and Random Seed\nDESCRIPTION: Configures Matplotlib for inline display and sets a random seed for reproducibility.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nnp.random.seed(sum(map(ord, \"relational\")))\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Setting Random Seed in Python\nDESCRIPTION: This snippet sets up the Seaborn environment, imports necessary libraries, and sets a random seed for reproducibility. It's typically used at the beginning of a Seaborn-based data visualization script.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(color_codes=True)\nnp.random.seed(sum(map(ord, \"regression\")))\n```\n\n----------------------------------------\n\nTITLE: Loading Seaborn Datasets in Python\nDESCRIPTION: Imports Seaborn objects and loads predefined datasets for visualization purposes. Retrieves penguins and diamonds datasets for further analysis and plotting.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Shift.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Creating a PairGrid with Matplotlib Functions\nDESCRIPTION: Creates a PairGrid using direct Matplotlib functions (plt.hist and plt.scatter) instead of Seaborn functions, colored by the 'species' variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(penguins, hue=\"species\")\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter)\ng.add_legend()\n```\n\n----------------------------------------\n\nTITLE: Initialize Seaborn Environment\nDESCRIPTION: Sets up the Seaborn environment and matplotlib for inline plotting in notebooks.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/distributions.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport seaborn as sns; sns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Creating HUSL Color Palette with Specified Number of Colors\nDESCRIPTION: Generates a HUSL color palette with 8 distinct colors. The parameter controls the number of colors in the resulting palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.husl_palette(8)\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Pairplot for Iris Dataset in Python\nDESCRIPTION: This code creates a customized pairplot for the iris dataset, using kernel density estimation plots on the diagonal and a specific color palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ng = sns.pairplot(iris, hue=\"species\", palette=\"Set2\", diag_kind=\"kde\", height=2.5)\n```\n\n----------------------------------------\n\nTITLE: Extracting 8 Discrete Colors from Viridis Palette\nDESCRIPTION: Samples 8 distinct colors from the Viridis colormap, useful for categorical color assignments\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/mpl_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.mpl_palette(\"viridis\", 8)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Plot with Median Aggregation in Seaborn\nDESCRIPTION: This snippet creates a bar plot of `clarity` vs `carat` from the diamonds dataset. It uses the `median` aggregation function to summarize the `carat` variable for each `clarity` category.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Agg.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bar(), so.Agg(\"median\"))\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Tip Rate Hue\nDESCRIPTION: Creates a scatter plot with points colored by calculated tip rate.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntip_rate = tips.eval(\"tip / total_bill\").rename(\"tip_rate\")\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=tip_rate)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dictionary of Axis Spine Settings in Python\nDESCRIPTION: This snippet creates a dictionary comprehension that sets all axis spines (left, right, bottom, top) to False. This is commonly used in seaborn styling to remove plot borders.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nno_spines = {\n    f\"axes.spines.{side}\": False\n    for side in [\"left\", \"right\", \"bottom\", \"top\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Univariate Boxenplot in Python\nDESCRIPTION: This code creates a basic boxenplot showing the distribution of diamond prices using Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(x=diamonds[\"price\"])\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Edge Width Demo Plot Template in Seaborn\nDESCRIPTION: This code creates a reusable plot template for demonstrating edge width variations. It configures a horizontal layout with specific theme settings that hide most axis elements and include minor tick marks.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nx = np.arange(0, 21) / 5\ny = [0 for _ in x]\nedge_plot = (\n    so.Plot(x, y)\n    .layout(size=(9, .5), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n        \"xtick.labelsize\": 12,\n        \"axes.xmargin\": .02,\n    })\n    .scale(\n        x=so.Continuous().tick(every=1, minor=4),\n        y=so.Continuous().tick(count=0),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Point Size Scaling in Seaborn\nDESCRIPTION: This code creates a visualization showing different point sizes from 1 to 20. The dots are arranged horizontally with increasing size to demonstrate how the pointsize parameter affects the appearance of markers.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nx = np.arange(1, 21)\ny = [0 for _ in x]\n(\n    so.Plot(x, y)\n    .add(so.Dots(color=\".2\", stroke=1), pointsize=x)\n    .layout(size=(9, .5), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n        \"xtick.labelsize\": 12,\n        \"axes.xmargin\": .025,\n    })\n    .scale(\n        pointsize=None,\n        x=so.Continuous().tick(every=1),\n        y=so.Continuous().tick(count=0),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Plot for May Flights\nDESCRIPTION: Filters the flights dataset for May and creates a line plot showing passengers over years.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmay_flights = flights.query(\"month == 'May'\")\nsns.lineplot(data=may_flights, x=\"year\", y=\"passengers\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dash Marks with Alpha and Variable Linewidth\nDESCRIPTION: Adds semi-transparent dash marks to an existing plot with linewidth that varies based on flipper length.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dash(alpha=.5), linewidth=\"flipper_length_mm\")\n```\n\n----------------------------------------\n\nTITLE: Adding Colormap Display Methods to Matplotlib\nDESCRIPTION: Implements PNG and HTML representation methods for Matplotlib colormaps to enable visual display of color palettes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/color_palettes.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef _repr_png_(self):\n    \"\"\"Generate a PNG representation of the Colormap.\"\"\"\n    import io\n    from PIL import Image\n    import numpy as np\n    IMAGE_SIZE = (400, 50)\n    X = np.tile(np.linspace(0, 1, IMAGE_SIZE[0]), (IMAGE_SIZE[1], 1))\n    pixels = self(X, bytes=True)\n    png_bytes = io.BytesIO()\n    Image.fromarray(pixels).save(png_bytes, format='png')\n    return png_bytes.getvalue()\n    \ndef _repr_html_(self):\n    \"\"\"Generate an HTML representation of the Colormap.\"\"\"\n    import base64\n    png_bytes = self._repr_png_()\n    png_base64 = base64.b64encode(png_bytes).decode('ascii')\n    return ('<img ' +\n            'alt=\"' + self.name + ' color map\" ' +\n            'title=\"' + self.name + '\"' +\n            'src=\"data:image/png;base64,' + png_base64 + '\">')\n    \nimport matplotlib as mpl\nmpl.colors.Colormap._repr_png_ = _repr_png_\nmpl.colors.Colormap._repr_html_ = _repr_html_\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn and Matplotlib in Python\nDESCRIPTION: This snippet shows how to import the Seaborn and Matplotlib libraries, which are essential for creating data visualizations in Python.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Creating FacetGrid with Column and Row Facets in Python\nDESCRIPTION: Initializes a FacetGrid with 'time' as column facets and 'sex' as row facets using the 'tips' dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.FacetGrid(tips, col=\"time\", row=\"sex\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Theme in Python\nDESCRIPTION: Sets up the Seaborn library and configures the default theme style to 'ticks'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n```\n\n----------------------------------------\n\nTITLE: Filtered Horizontal Swarmplot in Python\nDESCRIPTION: This code creates a horizontal swarmplot of total bill by party size, but only for parties of size 2, 3, or 5. It demonstrates how to filter data before plotting using the query method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(\n    data=tips.query(\"size in [2, 3, 5]\"),\n    x=\"total_bill\", y=\"size\", orient=\"h\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Setting Theme in Python\nDESCRIPTION: This snippet imports the Seaborn library and sets the default theme to 'whitegrid'. It's typically used at the beginning of a script to configure the visual style for subsequent plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n```\n\n----------------------------------------\n\nTITLE: Converting HUSL Color Palette to a Colormap\nDESCRIPTION: Creates a HUSL palette and returns it as a matplotlib colormap object instead of a list of RGB tuples, which can be used for continuous color mapping.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.husl_palette(as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Categorical Hue\nDESCRIPTION: Enhances the scatter plot by adding color coding based on the smoker status.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"smoker\")\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Time Hue\nDESCRIPTION: Creates a scatter plot with points colored by time of day.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", hue=\"time\")\n```\n\n----------------------------------------\n\nTITLE: Count Plot with Survival Data\nDESCRIPTION: Enhances the class distribution plot by adding survival information through color coding using the hue parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/countplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.countplot(titanic, x=\"class\", hue=\"survived\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Theme in Python\nDESCRIPTION: This snippet sets the visual theme for all Seaborn plots to a ticks style, enhancing aesthetics. The only dependency is the Seaborn library.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pairplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\n```\n\n----------------------------------------\n\nTITLE: Creating Point Plot for Penguins Dataset\nDESCRIPTION: This snippet creates a point plot of 'body_mass_g' against 'island' from the 'penguins' dataset. It helps to visualize the relationship between these two variables. The expected output is a point plot displayed on the screen.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(data=penguins, x=\"island\", y=\"body_mass_g\")\n```\n\n----------------------------------------\n\nTITLE: Basic Sine Plot\nDESCRIPTION: Demonstrates the basic sine plot without any styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsinplot()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Aggregated Yearly Data\nDESCRIPTION: Creates a line plot showing the average passenger count per year after grouping the data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nflights_avg = flights.groupby(\"year\").mean(numeric_only=True)\nsns.relplot(data=flights_avg, x=\"year\", y=\"passengers\", kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Style Parameters\nDESCRIPTION: Gets the current default style parameters for Seaborn plots\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/axes_style.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.axes_style()\n```\n\n----------------------------------------\n\nTITLE: Enabling Marginal Ticks on JointGrid\nDESCRIPTION: Shows how to create a JointGrid with ticks displayed on the marginal axes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.JointGrid(marginal_ticks=True)\n```\n\n----------------------------------------\n\nTITLE: Import Seaborn Objects\nDESCRIPTION: This code snippet imports the `seaborn.objects` module, which provides tools for creating and customizing Seaborn plots using an object-oriented approach.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.layout.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Dataset and Objects - Python\nDESCRIPTION: This snippet imports necessary modules from Seaborn to load and handle datasets, specifically loading the 'anscombe' dataset for further visualization tasks using the Seaborn objects interface.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nanscombe = load_dataset(\"anscombe\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Theme\nDESCRIPTION: Sets up Seaborn with a whitegrid style theme for consistent visualization appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n```\n\n----------------------------------------\n\nTITLE: Filtered Horizontal Swarmplot with Native Scale in Python\nDESCRIPTION: This snippet creates a horizontal swarmplot similar to the previous one but uses native scaling. It introduces the 'native_scale' parameter for adjusting point distribution.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(\n    data=tips.query(\"size in [2, 3, 5]\"),\n    x=\"total_bill\", y=\"size\", orient=\"h\",\n    native_scale=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn with Basic Settings\nDESCRIPTION: Sets up the basic Seaborn environment with white style theme and custom tick padding settings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/color_palettes.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport matplotlib as mpl\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"white\", rc={\"xtick.major.pad\": 1, \"ytick.major.pad\": 1})\n```\n\n----------------------------------------\n\nTITLE: Creating Default HUSL Color Palette\nDESCRIPTION: Generates a HUSL color palette with default parameters. HUSL is a human-friendly alternative to HSL that attempts to achieve perceptual uniformity.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.husl_palette()\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Bars in Seaborn Plots\nDESCRIPTION: Demonstration of the new errorbar parameter in lineplot, barplot, or pointplot to select different types of error representations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.0.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(x=\"x\", y=\"y\", data=df, errorbar=\"ci\")\n```\n\n----------------------------------------\n\nTITLE: Stacking Histogram Bars by 'cut' Category\nDESCRIPTION: This snippet builds upon the previous example by stacking the histogram bars based on the 'cut' category. The so.Stack() transform is used to achieve this, providing a visualization of the composition of prices within each cut category.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bars.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Bars(), so.Hist(), so.Stack(), color=\"cut\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Loading Dataset in Python\nDESCRIPTION: This snippet sets up the Seaborn environment and loads the 'penguins' dataset. It demonstrates how to import Seaborn, set a theme, and load a built-in dataset for further analysis.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/move_legend.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\npenguins = sns.load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn with Default Theme\nDESCRIPTION: Sets up the Seaborn library and configures the default theme with a whitegrid style for consistent visualization appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/catplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot for May Flights (Wide Format)\nDESCRIPTION: Creates a line plot using the 'May' column from the pivoted flights data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.lineplot(data=flights_wide[\"May\"])\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Parameters in Seaborn Plot Context\nDESCRIPTION: This code example demonstrates how to override specific parameters when setting the plot context in Seaborn. It uses the rc parameter to set the line width, then creates a line plot with the custom styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_context.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.set_context(\"notebook\", rc={\"lines.linewidth\": 3})\nsns.lineplot(x=[0, 1, 2], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Modifying Default Titles in Faceted Plots\nDESCRIPTION: Creates a faceted plot by penguin sex and applies uppercase formatting to default titles.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.label.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.facet(\"sex\").label(title=str.upper)\n```\n\n----------------------------------------\n\nTITLE: Generating Set2 Color Palette\nDESCRIPTION: Returns discrete color samples from the Set2 colormap using default sampling\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/mpl_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.mpl_palette(\"Set2\")\n```\n\n----------------------------------------\n\nTITLE: Defining Sine Wave Plot Function\nDESCRIPTION: Creates a function to plot multiple sine waves with varying amplitudes and phase shifts for demonstration purposes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef sinplot(n=10, flip=1):\n    x = np.linspace(0, 14, 100)\n    for i in range(1, n + 1):\n        plt.plot(x, np.sin(x + i * .5) * (n + 2 - i) * flip)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the Seaborn visualization environment with default theme and patches the colormap display function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Data and Imports\nDESCRIPTION: Sets up the required imports and loads sample datasets for visualization examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/objects_interface.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport matplotlib as mpl\ntips = sns.load_dataset(\"tips\")\npenguins = sns.load_dataset(\"penguins\").dropna()\ndiamonds = sns.load_dataset(\"diamonds\")\nhealthexp = sns.load_dataset(\"healthexp\").sort_values([\"Country\", \"Year\"]).query(\"Year <= 2020\")\n```\n\n----------------------------------------\n\nTITLE: Generating Viridis Color Palette as List\nDESCRIPTION: Returns discrete color samples from the Viridis colormap without specifying number of colors, using default sampling\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/mpl_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.mpl_palette(\"viridis\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the Python environment by importing required libraries and configuring Seaborn's visual theme.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/relational.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"darkgrid\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Theme\nDESCRIPTION: Sets up the Seaborn library and applies the default theme for consistent styling across visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Loading Example Dataset in Seaborn\nDESCRIPTION: This snippet demonstrates how to load an example dataset (tips) provided by Seaborn, which can be used for various visualization examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/introduction.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Load an example dataset\ntips = sns.load_dataset(\"tips\")\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Custom Markers in Python\nDESCRIPTION: This code creates a swarmplot of total bill by day using 'x' markers instead of dots. It demonstrates how to customize the appearance of points in the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(\n    data=tips, x=\"total_bill\", y=\"day\",\n    marker=\"x\", linewidth=1, \n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Rugplot Height in Seaborn\nDESCRIPTION: Shows how to modify the height of rug marks using the height parameter. Creates a taller rug visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/rugplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\")\nsns.rugplot(data=tips, x=\"total_bill\", y=\"tip\", height=.1)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Loading Dataset\nDESCRIPTION: Sets up the Seaborn environment and loads the MPG dataset for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport seaborn as sns\nsns.set_theme()\nmpg = sns.load_dataset(\"mpg\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Seaborn Theme\nDESCRIPTION: Imports the Seaborn library and sets the visual theme to 'white' style for all subsequent plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"white\")\n```\n\n----------------------------------------\n\nTITLE: Swarmplot with Day by Total Bill in Python\nDESCRIPTION: This code creates a swarmplot with day on the x-axis and total bill on the y-axis, inverting the previous plot. It shows how changing the order of variables affects the plot orientation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.swarmplot(data=tips, x=\"day\", y=\"total_bill\")\n```\n\n----------------------------------------\n\nTITLE: Using refline method in FacetGrid and JointGrid in Python\nDESCRIPTION: New method for plotting horizontal and/or vertical reference lines on every subplot in one step for FacetGrid and JointGrid objects.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.2.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ng = FacetGrid(data, ...)\ng.refline(x=0, y=0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Setting Theme in Python\nDESCRIPTION: This snippet imports Seaborn, sets the theme, and patches the colormap display. It's typically used at the beginning of a Seaborn-based visualization script to set up the environment.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Displaying Standard Matplotlib Marker Codes in Seaborn\nDESCRIPTION: This code creates a visualization showing all standard matplotlib marker symbols (e.g., 'o', '^', 's') with their corresponding codes as labels. It uses the previously defined marker_plot template to create a consistent layout.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nmarker_codes = [\n    \"o\", \"^\", \"v\", \"<\", \">\",\"s\", \"D\", \"d\", \"p\", \"h\", \"H\", \"8\",\n    \"X\", \"*\", \".\", \"P\", \"x\", \"+\", \"1\", \"2\", \"3\", \"4\", \"|\", \"_\",\n]\nx, y = [f\"'{m}'\" for m in marker_codes], [0] * len(marker_codes)\nmarker_objs = [mpl.markers.MarkerStyle(m) for m in marker_codes]\nmarker_plot.add(marker_mark, marker=marker_objs, x=x, y=y).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Colormap\nDESCRIPTION: This snippet creates a dark colormap using the hex code \"#b285bc\" as the base color. The `as_cmap=True` argument specifies that the result should be a colormap object instead of a discrete color palette, suitable for continuous data representations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/dark_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.dark_palette(\"#b285bc\", as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Creating 10-Color Set2 Palette\nDESCRIPTION: Samples 10 distinct colors from the Set2 colormap, providing a larger categorical color range\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/mpl_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.mpl_palette(\"Set2\", 10)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Dataset\nDESCRIPTION: Imports the seaborn.objects module and loads the 'mpg' dataset which contains information about fuel economy and automobile characteristics.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dots.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nmpg = load_dataset(\"mpg\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Gamma of Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with modified gamma. The gamma parameter adjusts the brightness of the palette's middle range.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(gamma=.5)\n```\n\n----------------------------------------\n\nTITLE: Adjusting KDE Cut Parameter\nDESCRIPTION: Modifies the KDE visualization by setting the cut parameter to zero, which affects how the density curve is extended at the boundaries of the data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np2.add(so.Line(), so.KDE(cut=0))\n```\n\n----------------------------------------\n\nTITLE: Loading Datasets with Seaborn in Python\nDESCRIPTION: This snippet imports the necessary components from Seaborn and loads two datasets: 'penguins' and a filtered version of 'flights' containing data from the year 1960. These datasets are typically used as examples to demonstrate plotting capabilities.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\nflights = load_dataset(\"flights\").query(\"year == 1960\")\n```\n\n----------------------------------------\n\nTITLE: Setting higher DPI for sharper plots in Jupyter notebooks with matplotlib\nDESCRIPTION: This code demonstrates how to increase the DPI (dots per inch) of plots in Jupyter notebooks using matplotlib's rcParams to create sharper visualizations. It can be used either directly with plt.rcParams or when initializing seaborn's theme.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nplt.rcParams.update({\"figure.dpi\": 96})\n```\n\n----------------------------------------\n\nTITLE: Setting Axis to Infinite Range in Seaborn Plots in Python\nDESCRIPTION: This snippet demonstrates setting an axis to an infinite range by using 'None' as one of the bounds. This is helpful in allowing an axis to expand automatically based on the data range.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.limit.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\np.limit(y=(0, None))\n```\n\n----------------------------------------\n\nTITLE: Adding Grid Lines to Heatmap\nDESCRIPTION: Generates a heatmap with annotations and visible grid lines separating the cells with a specified line width.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/heatmap.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.heatmap(glue, annot=True, linewidth=.5)\n```\n\n----------------------------------------\n\nTITLE: Loading Tips Dataset\nDESCRIPTION: Loads the built-in tips dataset from Seaborn and displays the first few rows.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\ntips.head()\n```\n\n----------------------------------------\n\nTITLE: Loading Datasets with Seaborn in Python\nDESCRIPTION: This snippet demonstrates how to load datasets using the Seaborn library's `load_dataset` function. It imports necessary modules and loads the 'tips' and 'glue' datasets, which are used in subsequent plotting operations. The datasets are prerequisites for the plotting examples that follow.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ntips = load_dataset(\"tips\")\nglue = load_dataset(\"glue\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying FMRI Dataset in Python\nDESCRIPTION: This code loads the 'fmri' dataset using Seaborn's load_dataset function and displays the first few rows using the head() method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfmri = sns.load_dataset(\"fmri\")\nfmri.head()\n```\n\n----------------------------------------\n\nTITLE: Using new stat options in histplot in Python\nDESCRIPTION: Added new options for normalization in histplot: stat=\"percent\" for bar heights summing to 100, and stat=\"proportion\" as an alias for stat=\"probability\".\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.2.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nhistplot(data, stat=\"percent\")\nhistplot(data, stat=\"proportion\")\n```\n\n----------------------------------------\n\nTITLE: KDE with Automatic Grid Size\nDESCRIPTION: Creates a KDE plot with automatic grid size determination by explicitly setting gridsize to None, letting Seaborn choose the optimal value.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dots(), so.KDE(gridsize=None))\n```\n\n----------------------------------------\n\nTITLE: Cumulative KDE Plot\nDESCRIPTION: Creates a cumulative kernel density estimation plot, showing the cumulative distribution function (CDF) rather than the probability density function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.KDE.ipynb#2025-04-14_snippet_12\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Line(), so.KDE(cumulative=True))\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn with Titanic Dataset\nDESCRIPTION: Sets up Seaborn visualization environment with whitegrid style and loads the Titanic dataset for subsequent visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\ntitanic = sns.load_dataset(\"titanic\")\n```\n\n----------------------------------------\n\nTITLE: Generating Cubehelix Palette with Specified Colors in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with 8 colors. The number parameter determines how many colors are in the resulting palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(8)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Datasets in Python\nDESCRIPTION: This snippet imports the Seaborn Objects module and loads two datasets: penguins and diamonds. These datasets will be used for demonstration in subsequent examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.facet.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Creating Cubehelix Palette as Colormap in Python using Seaborn\nDESCRIPTION: This snippet generates a cubehelix palette as a colormap object. Setting as_cmap=True returns a matplotlib colormap instead of a list of colors.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Enabling Dark Mode in Seaborn\nDESCRIPTION: This snippet shows how to enable dark mode in Seaborn plots using Matplotlib's `dark_background` style sheet.  It also explains how to adjust the color palette to ensure good contrast against the dark background.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n\"sns.set_theme(style=\"ticks\", rc=plt.style.library[\"dark_background\"])\"\n```\n\n----------------------------------------\n\nTITLE: Creating HUSL Color Palette with Custom Luminance\nDESCRIPTION: Creates a HUSL color palette with reduced luminance (l=0.4). Lower luminance values produce darker colors in the palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.husl_palette(l=.4)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn and Matplotlib in Python\nDESCRIPTION: This snippet imports the Seaborn and Matplotlib libraries, which are essential for creating data visualizations in Python.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Creating a barplot from a single Series\nDESCRIPTION: Creates a barplot from just the 'Jun' column of the pivoted flights dataset, demonstrating how to visualize a single series of data with barplot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(flights_wide[\"Jun\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Diverging Palette\nDESCRIPTION: Creates a basic diverging color palette using blue (240) and yellow-orange (20) as endpoint hues.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(240, 20)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the required imports for data visualization and sets Seaborn theme to darkgrid\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/error_bars.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"darkgrid\")\n```\n\n----------------------------------------\n\nTITLE: Creating Figure Objects\nDESCRIPTION: Shows different ways to create matplotlib figure objects.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/function_overview.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nf, ax = plt.subplots()\n```\n\nLANGUAGE: python\nCODE:\n```\nf, ax = plt.subplots(1, 2, sharey=True)\n```\n\n----------------------------------------\n\nTITLE: Getting Default Plotting Context\nDESCRIPTION: This snippet demonstrates how to call `sns.plotting_context()` with no arguments to retrieve the current default parameters for scaling plot elements like fonts and lines. The returned object contains the default settings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/plotting_context.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.plotting_context()\n```\n\n----------------------------------------\n\nTITLE: Using Light Color Palette in Categorical Plot (Python)\nDESCRIPTION: Example of how to specify a light color palette based on a specific color in categorical plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.13.0.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npalette=\"light:{color}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Matplotlib Marker Tuples in Seaborn\nDESCRIPTION: This code creates a visualization showing custom polygon markers defined using tuples (sides, style, angle). It demonstrates how matplotlib can create regular polygons with different numbers of sides, filled/unfilled styles, and rotations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nmarker_codes = [\n    (4, 0, 0), (4, 0, 45), (8, 0, 0),\n    (4, 1, 0), (4, 1, 45), (8, 1, 0),\n    (4, 2, 0), (4, 2, 45), (8, 2, 0),\n]\nx, y = [f\"{m}\" for m in marker_codes], [0] * len(marker_codes)\nmarker_objs = [mpl.markers.MarkerStyle(m) for m in marker_codes]\nmarker_plot.add(marker_mark, marker=marker_objs, x=x, y=y).plot()\n```\n\n----------------------------------------\n\nTITLE: Stripplots with Categorical Hue Variables\nDESCRIPTION: Demonstrates using different categorical variables (day, sex, size) for color-coding the points in stripplots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/stripplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"day\", legend=False)\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"sex\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.stripplot(data=tips, x=\"total_bill\", y=\"day\", hue=\"size\")\n```\n\n----------------------------------------\n\nTITLE: Scatter Plot with Fixed Styling\nDESCRIPTION: Creates a scatter plot with fixed point size, color, and marker style.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsns.scatterplot(data=tips, x=\"total_bill\", y=\"tip\", s=100, color=\".2\", marker=\"+\")\n```\n\n----------------------------------------\n\nTITLE: Generating HLS Palette with Specified Colors\nDESCRIPTION: This snippet generates an HLS color palette with a specified number of colors (8 in this case). The `sns.hls_palette(8)` function creates a palette with 8 distinct colors based on the HLS color model.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.hls_palette(8)\n```\n\n----------------------------------------\n\nTITLE: Plotting Subset of Series with Different Date Ranges\nDESCRIPTION: Creates a line plot using two series with different date ranges extracted from the wide-format data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntwo_series = [flights_wide.loc[:1955, \"Jan\"], flights_wide.loc[1952:, \"Aug\"]]\nsns.relplot(data=two_series, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Basic Color Palette Blending with Blue and Red\nDESCRIPTION: Creates a color gradient between blue and red using Seaborn's blend_palette function with basic color names.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/blend_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.blend_palette([\"b\", \"r\"])\n```\n\n----------------------------------------\n\nTITLE: Import Seaborn Objects and Load Dataset\nDESCRIPTION: This snippet imports the necessary modules from the seaborn library, specifically `seaborn.objects` as `so`, and loads the 'penguins' dataset for visualization. The `load_dataset` function retrieves the dataset, which will be used in subsequent plotting examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Range.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Generating HLS Palette with Specified Hue\nDESCRIPTION: This snippet generates an HLS color palette with a specified hue value. Setting `h=.5` modifies the hue component of the HLS color model to 0.5.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.hls_palette(h=.5)\n```\n\n----------------------------------------\n\nTITLE: Setting Seaborn Theme in Python\nDESCRIPTION: This code sets the Seaborn theme to 'ticks', which affects the visual style of subsequent plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme(style=\"ticks\")\n```\n\n----------------------------------------\n\nTITLE: Adding Text Mark in Seaborn Objects Interface\nDESCRIPTION: Introduces the new Text mark class in the Seaborn objects interface for adding text elements to plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Text\n```\n\n----------------------------------------\n\nTITLE: Plotting Tips Dataset with Seaborn Objects in Python\nDESCRIPTION: Uses the Seaborn Objects API to create a basic scatter plot of the 'tips' dataset, mapping 'total_bill' to the x-axis and 'tip' to the y-axis, and adding dots to represent data points. This snippet requires the 'seaborn.objects' module and the 'tips' dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\np1 = so.Plot(tips, \"total_bill\", \"tip\")\np1.add(so.Dot())\n```\n\n----------------------------------------\n\nTITLE: Basic Scatter Plot with Seaborn Objects\nDESCRIPTION: Creates a simple scatter plot using the Seaborn objects interface with penguin bill measurements.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/objects_interface.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n    .add(so.Dot())\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Dependencies\nDESCRIPTION: Imports required libraries for Seaborn plotting including NumPy, Pandas, Matplotlib and Seaborn objects interface.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport seaborn.objects as so\nfrom seaborn import axes_style, color_palette\n```\n\n----------------------------------------\n\nTITLE: Checking Predefined Style Parameters\nDESCRIPTION: Retrieves the parameter values for a specific predefined style (darkgrid)\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/axes_style.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.axes_style(\"darkgrid\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Redundant Hue in Categorical Plot (Python)\nDESCRIPTION: Example of how to retain previous color behavior in categorical plots by explicitly assigning a redundant hue variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.13.0.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nboxplot(data, x=\"x\", y=\"y\", hue=\"x\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Penguin Dataset\nDESCRIPTION: Imports the Seaborn Objects API and loads the penguins dataset for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dash.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Seaborn Markers in Sequence\nDESCRIPTION: This code demonstrates Seaborn's default sequence of markers by displaying the first 14 markers from the Marker property's default values. It uses the marker_plot template with consistent styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom seaborn._core.properties import Marker\nn = 14\nmarker_objs = Marker()._default_values(n)\nx, y = list(map(str, range(n))), [0] * n\nmarker_plot.add(marker_mark, marker=marker_objs, x=x, y=y).plot()\n```\n\n----------------------------------------\n\nTITLE: Creating Residual Plot for Anscombe Dataset I with Seaborn in Python\nDESCRIPTION: This code creates a residual plot for the first dataset in the Anscombe quartet using Seaborn's residplot function. It helps visualize the fit of a linear model by plotting residuals against the predictor variable.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsns.residplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'I'\"),\n              scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: Reversing Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a reversed cubehelix palette. Setting reverse=True flips the order of colors in the palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(reverse=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the seaborn environment by importing the library and applying the default theme settings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/ecdfplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns; sns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Configuring Matplotlib and NumPy in Python\nDESCRIPTION: This snippet sets up Matplotlib for inline plotting in Jupyter notebooks and initializes NumPy's random seed for reproducibility.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nimport numpy as np\nnp.random.seed(sum(map(ord, \"axis_grids\")))\n```\n\n----------------------------------------\n\nTITLE: Importing and Loading Datasets with Seaborn\nDESCRIPTION: This snippet imports necessary modules from Seaborn and loads predefined datasets 'dowjones' and 'fmri'. These datasets are utilized for demonstrating plotting functionalities in other snippets.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Line.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ndowjones = load_dataset(\"dowjones\")\nfmri = load_dataset(\"fmri\")\n```\n\n----------------------------------------\n\nTITLE: Adding Percentile Statistic in Seaborn Objects Interface\nDESCRIPTION: Introduces the new Perc statistic class in the Seaborn objects interface for calculating percentiles of data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Perc\n```\n\n----------------------------------------\n\nTITLE: Installing Seaborn using pip in Python\nDESCRIPTION: This snippet shows how to install Seaborn using pip. It includes two commands: one for basic installation and another for including optional dependencies.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/installing.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install seaborn\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install seaborn[stats]\n```\n\n----------------------------------------\n\nTITLE: Using Axes-Level Functions with Matplotlib\nDESCRIPTION: This snippet illustrates how to use Seaborn's axes-level functions in conjunction with Matplotlib's object-oriented interface. It shows how to call a Seaborn function and then further customize the resulting axes object using its methods.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n\"ax = sns.histplot(...)\n    ax.set(...) \"\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Palette with HUSL Input\nDESCRIPTION: This snippet creates a dark color palette using a HUSL tuple (20, 60, 50) as the base color. The `input=\"husl\"` argument specifies that the input is in HUSL color space, and `sns.dark_palette` generates a palette based on this HUSL value.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/dark_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.dark_palette((20, 60, 50), input=\"husl\")\n```\n\n----------------------------------------\n\nTITLE: Using move_legend function in Python\nDESCRIPTION: New convenience function for repositioning the legend on an existing axes or figure and updating its properties. This should be preferred over calling ax.legend with no legend data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.2.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nmove_legend(ax, \"upper left\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects in Python\nDESCRIPTION: This snippet imports the 'objects' submodule from the Seaborn library. It is a prerequisite for using the object-oriented interface for plotting with Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.limit.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport seaborn.objects as so\n```\n\n----------------------------------------\n\nTITLE: Resetting Seaborn Objects Theme\nDESCRIPTION: This code snippet resets the `seaborn.objects` theme to its default settings. This removes any customizations that have been applied to the theme. This provides a way to start with a clean slate for plot styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nso.Plot.config.theme.reset()\n```\n\n----------------------------------------\n\nTITLE: Using Different Histogram Styles in PairGrid with Multiple Hue Levels\nDESCRIPTION: Shows the new capability to use different styles (such as step) for PairGrid histograms when displaying multiple hue levels, allowing for more customized visualization options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.7.1.rst#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n:class:`PairGrid`\n```\n\n----------------------------------------\n\nTITLE: Loading Seaborn Tips Dataset\nDESCRIPTION: Imports Seaborn objects and loads the built-in tips dataset for visualization and analysis\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Count.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\\nfrom seaborn import load_dataset\\ntips = load_dataset(\"tips\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Split Violin Plot without Hue in Seaborn\nDESCRIPTION: This snippet creates a split violin plot without using the 'hue' parameter. It demonstrates how the 'split' option works when there's no hue variable specified.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/violinplot.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.violinplot(data=df, x=\"class\", y=\"age\", split=True, inner=\"quart\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Loading MPG Dataset in Python\nDESCRIPTION: This snippet sets up the Seaborn library, applies a default theme, and loads the 'mpg' dataset for use in subsequent visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/residplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nmpg = sns.load_dataset(\"mpg\")\n```\n\n----------------------------------------\n\nTITLE: Creating Dark-Centered Diverging Palette\nDESCRIPTION: Creates a diverging color palette with a dark center point, using blue and yellow-orange as endpoint hues.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(240, 20, center=\"dark\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Library\nDESCRIPTION: Basic import statement for the Seaborn data visualization library\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/axes_style.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Structure\nDESCRIPTION: ReStructuredText markup defining a hierarchical table of contents for Seaborn version documentation, using toctree directives to organize version history from v0.2 to v0.13.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _whatsnew:\\n\\nWhat's new in each version\\n==========================\\n\\nv0.13\\n-----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.13.2\\n   v0.13.1\\n   v0.13.0\\n\\nv0.12\\n-----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.12.2\\n   v0.12.1\\n   v0.12.0\\n\\nv0.11\\n-----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.11.2\\n   v0.11.1\\n   v0.11.0\\n\\nv0.10\\n-----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.10.1\\n   v0.10.0\\n\\nv0.9\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.9.1\\n   v0.9.0\\n\\nv0.8\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.8.1\\n   v0.8.0\\n\\nv0.7\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.7.1\\n   v0.7.0\\n\\nv0.6\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.6.0\\n\\nv0.5\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.5.1\\n   v0.5.0\\n\\nv0.4\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.4.0\\n\\nv0.3\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.3.1\\n   v0.3.0\\n\\nv0.2\\n----\\n.. toctree::\\n   :maxdepth: 2\\n\\n   v0.2.1\\n   v0.2.0\n```\n\n----------------------------------------\n\nTITLE: Using KDE and Rugplot Functions (Python/Seaborn)\nDESCRIPTION: Updated usage of kdeplot() and rugplot() functions with new API including x/y parameters, hue semantic mapping, and enhanced density estimation options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.0.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# KDE plot with adjusted bandwidth and multiple densities\nkdeplot(data, x=\"var\", hue=\"group\", bw_adjust=0.5, multiple=\"layer\")\n\n# Bivariate rug plot\nrugplot(data, x=\"var1\", y=\"var2\")\n```\n\n----------------------------------------\n\nTITLE: Setting the NB_KERNEL environment variable for Jupyter conversion\nDESCRIPTION: Command to set the NB_KERNEL environment variable to specify which Jupyter kernel to use for notebook conversion.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NB_KERNEL=\"python3\"\n```\n\n----------------------------------------\n\nTITLE: Setting Axis Labels in Seaborn (Python)\nDESCRIPTION: This method is used to set or customize axis labels in Seaborn plots. It belongs to a class responsible for managing axis attributes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/scale.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: label\n```\n\n----------------------------------------\n\nTITLE: Point Plot for June Passenger Counts\nDESCRIPTION: This snippet generates a point plot for passenger counts in June from the pivoted flights dataset, allowing for focused analysis on that month. It requires the 'flights_wide' dataset. The output is a point plot of June passenger data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.pointplot(flights_wide[\"Jun\"])\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Deviation Errorbar to Seaborn Plot\nDESCRIPTION: Sets the error bar type to standard deviation for the statistical estimation in the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Range(), so.Est(errorbar=\"sd\"))\n```\n\n----------------------------------------\n\nTITLE: Applying Default Jitter in Seaborn Objects Interface\nDESCRIPTION: Updates the Jitter move to apply a small amount of jitter by default in the objects interface.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Jitter\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Bars in Seaborn Plots with barplot or pointplot\nDESCRIPTION: Shows how to use the new capsize and errwidth parameters in barplot and pointplot functions to customize error bars with caps and control line width. These parameters are also available in factorplot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.7.1.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:func:`barplot` or :func:`pointplot`\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects\nDESCRIPTION: This code snippet imports the `seaborn.objects` module, which is used for creating and customizing plots in seaborn. It is a necessary first step before any seaborn.objects functionality can be used. This import statement makes the `so` alias available for referring to the `seaborn.objects` module.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\n```\n\n----------------------------------------\n\nTITLE: Loading and Transforming the Glue Dataset in Python\nDESCRIPTION: The snippet loads a dataset named 'glue', pivots it to reorganize data by 'Model', 'Encoder', and 'Task', and calculates the average score. The resulting DataFrame is then sorted by the average score for further visualization. This setup is fundamental for subsequent plotting examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Text.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nglue = (\n    load_dataset(\"glue\")\n    .pivot(index=[\"Model\", \"Encoder\"], columns=\"Task\", values=\"Score\")\n    .assign(Average=lambda x: x.mean(axis=1).round(1))\n    .sort_values(\"Average\", ascending=False)\n)\n```\n\n----------------------------------------\n\nTITLE: Using Band and Range Marks in Seaborn Objects Interface\nDESCRIPTION: Enhances the Band and Range marks to cover the full extent of data when min/max variables are not explicitly set.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Band\n```\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Range\n```\n\n----------------------------------------\n\nTITLE: Listing available Jupyter kernels\nDESCRIPTION: Command to list all available Jupyter kernels on the system to help select the appropriate kernel for notebook conversion.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njupyter kernelspec list\n```\n\n----------------------------------------\n\nTITLE: Sharing Axes Only Across Rows or Columns\nDESCRIPTION: This code allows sharing of axes selectively across rows or columns. It modifies the axis sharing settings so that only specified axes are shared, aiding in visualization clarity.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.share.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np.share(x=\"col\", y=\"row\")\n```\n\n----------------------------------------\n\nTITLE: Creating Diverging Palette with Separation Value\nDESCRIPTION: Creates a diverging colormap with a specified separation value (30) between the two endpoint hues.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(240, 20, sep=30, as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Light Palette from Hex Color Code in Python\nDESCRIPTION: Creates a light palette using a hex color code ('#79C') as the base. This generates a sequential palette from light to dark shades of the specified color.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/light_palette.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.light_palette(\"#79C\")\n```\n\n----------------------------------------\n\nTITLE: Working with FacetGrid and Unicode Compatibility\nDESCRIPTION: References improvements to FacetGrid for handling unicode characters and fixing issues with col_wrap when there are missing col levels.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.7.1.rst#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n:class:`FacetGrid`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Edge Width Options for Dots in Seaborn\nDESCRIPTION: This code shows how different edge width values affect circular markers (dots). It displays a series of markers with increasing edge width from 0 to 4 using the previously defined edge_plot template.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n(\n    edge_plot\n    .add(so.Dot(color=\".75\", edgecolor=\".2\", marker=\"o\", pointsize=14), edgewidth=x)\n    .scale(edgewidth=None)\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Generated Image File in Python\nDESCRIPTION: Checks for the existence of the previously saved plot file and removes it if found.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/FacetGrid.ipynb#2025-04-14_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nif os.path.exists(\"facet_plot.png\"):\n    os.remove(\"facet_plot.png\")\n```\n\n----------------------------------------\n\nTITLE: Using Line Mark in Seaborn Objects Interface\nDESCRIPTION: Improves the sorting algorithm for marks that sort along the orient axis, such as the Line mark.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Line\n```\n\n----------------------------------------\n\nTITLE: Creating Diverging Palette as Colormap\nDESCRIPTION: Converts a diverging color palette to a colormap object that can be used with matplotlib functions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(240, 20, as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Setting higher DPI when activating seaborn theme\nDESCRIPTION: This snippet shows how to increase figure DPI when initializing the seaborn theme, which will make plots appear sharper in Jupyter notebooks while maintaining the seaborn styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme(rc={\"figure.dpi\": 96})\n```\n\n----------------------------------------\n\nTITLE: Creating KDE Plots in Seaborn\nDESCRIPTION: Fixes a regression in the kdeplot function where passing cmap for an unfilled bivariate plot raised an exception.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nkdeplot\n```\n\n----------------------------------------\n\nTITLE: Building the complete seaborn documentation\nDESCRIPTION: Make command to convert notebooks, generate gallery examples, and build the HTML documentation site from the doc directory.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake notebooks html\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Inline Backend and Loading Dataset with Seaborn in Python\nDESCRIPTION: This snippet configures the Jupyter notebook inline backend for high-resolution figures and loads the 'diamonds' dataset from Seaborn's repository. It requires the seaborn library and a compatible Jupyter environment.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.on.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%config InlineBackend.figure_format = \"retina\"\nimport seaborn as sns\nimport seaborn.objects as so\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom seaborn import load_dataset\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Using tsplot() Function with DataFrame in Seaborn v0.2.0\nDESCRIPTION: Example of the API change in tsplot() function that now accepts data in a long-form DataFrame. Instead of the old syntax, users must now specify heights as the first parameter with time as an optional named parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.2.0.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old syntax (pre v0.2.0)\nsns.tsplot(time, heights)\n\n# New syntax (v0.2.0+)\nsns.tsplot(heights, time=time)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Library in Python\nDESCRIPTION: This snippet shows how to import the Seaborn library, which is commonly used for statistical data visualization in Python.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_context.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\n```\n\n----------------------------------------\n\nTITLE: Setting up Seaborn Environment\nDESCRIPTION: Imports required libraries and sets the Seaborn theme for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/scatterplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Creating Colormap from Hex Color Codes\nDESCRIPTION: Generates a continuous colormap from a sequence of hex color codes, using the as_cmap parameter to return a colormap object.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/blend_palette.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.blend_palette([\"#bdc\", \"#7b9\", \"#47a\"], as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Setting SVG vector format for matplotlib figures in Jupyter\nDESCRIPTION: This IPython magic command configures matplotlib to output plots in SVG vector format, providing infinite resolution regardless of zoom level. Useful for publication-quality graphics but may impact browser performance for complex plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%config InlineBackend.figure_format = \"svg\"\n```\n\n----------------------------------------\n\nTITLE: Setting Current Module in Sphinx with Jinja\nDESCRIPTION: This snippet uses Jinja to insert the `module` variable into the `currentmodule` Sphinx directive. This tells Sphinx which module the following documented objects belong to.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/object.rst#2025-04-14_snippet_1\n\nLANGUAGE: Jinja\nCODE:\n```\n.. currentmodule:: {{ module }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Continuous Scale Labels in Seaborn Objects Interface\nDESCRIPTION: Enhances the Continuous scale label method to allow overriding the default formatter with a log transform.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Continuous.label\n```\n\n----------------------------------------\n\nTITLE: Partially Updating Seaborn Theme in Python\nDESCRIPTION: This code shows how to update only specific aspects of the Seaborn theme. It sets the style to 'white' while keeping the current palette by passing None.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.set_theme(style=\"white\", palette=None)\nsns.barplot(x=[\"A\", \"B\", \"C\"], y=[1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Lines to JointGrid\nDESCRIPTION: Shows how to add horizontal and vertical reference lines to a JointGrid plot using the refline method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\ng.plot(sns.scatterplot, sns.histplot)\ng.refline(x=45, y=16)\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Without Changing Matplotlib Style\nDESCRIPTION: Alternative import method that allows using Seaborn plotting functions without applying Seaborn's default styling to matplotlib. This preserves any custom matplotlibrc settings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.3.0.rst#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.apionly as sns\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom seaborn.apionly import lmplot\n```\n\n----------------------------------------\n\nTITLE: Installing Seaborn with Optional Dependencies\nDESCRIPTION: Command to install Seaborn with optional statistical dependencies using pip. This ensures compatibility with scipy and statsmodels libraries.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.0.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install seaborn[stats]\n```\n\n----------------------------------------\n\nTITLE: Customizing Axis Ticks in Seaborn (Python)\nDESCRIPTION: This method allows for customization of axis ticks in Seaborn visualizations. It is part of a class that handles axis properties.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/scale.rst#2025-04-14_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: tick\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Tips Dataset in Python\nDESCRIPTION: This code loads the 'tips' dataset using Seaborn's load_dataset function and displays the first few rows using the head() method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntips = sns.load_dataset(\"tips\")\ntips.head()\n```\n\n----------------------------------------\n\nTITLE: Setting Random Seed\nDESCRIPTION: Sets a reproducible random seed based on string encoding\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/error_bars.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnp.random.seed(sum(map(ord, \"errorbars\")))\n```\n\n----------------------------------------\n\nTITLE: Converting Flights Data to Wide Format\nDESCRIPTION: Pivots the long-form flights data to a wide format where months become columns and years become the index.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nflights_wide = flights.pivot(index=\"year\", columns=\"month\", values=\"passengers\")\nflights_wide.head()\n```\n\n----------------------------------------\n\nTITLE: Creating Point Plots with Labels in Seaborn\nDESCRIPTION: Adds a label parameter to the pointplot function, addressing a regression when used with FacetGrid.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\npointplot\n```\n\nLANGUAGE: Python\nCODE:\n```\nFacetGrid\n```\n\n----------------------------------------\n\nTITLE: Converting Series to NumPy Arrays for Plotting\nDESCRIPTION: Demonstrates how to convert pandas Series to NumPy arrays before using them in a line plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntwo_arrays = [s.to_numpy() for s in two_series]\nsns.relplot(data=two_arrays, kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Updating Theme with Matplotlib Parameters\nDESCRIPTION: This code snippet imports the `matplotlib` library and updates the `seaborn.objects` theme with the current matplotlib parameters (`mpl.rcParams`). This allows seaborn.objects plots to inherit the styling from matplotlib's configuration. It ensures consistency between matplotlib and seaborn plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.config.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib as mpl\nso.Plot.config.theme.update(mpl.rcParams)\n```\n\n----------------------------------------\n\nTITLE: Generating Autodoc for Class in Sphinx with Jinja\nDESCRIPTION: This snippet uses Jinja to insert the `objname` variable into the `autoclass` Sphinx directive. This tells Sphinx to automatically generate documentation for the class with the given name.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/object.rst#2025-04-14_snippet_2\n\nLANGUAGE: Jinja\nCODE:\n```\n.. autoclass:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Using warn_singular parameter in kdeplot in Python\nDESCRIPTION: New parameter in kdeplot to silence the warning about data with zero variance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.2.rst#2025-04-14_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nkdeplot(data, warn_singular=False)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Light and Dark Range of Cubehelix Palette in Python using Seaborn\nDESCRIPTION: This snippet creates a cubehelix palette with custom light and dark range. The dark and light parameters set the intensity range of the palette.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/cubehelix_palette.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsns.cubehelix_palette(dark=.25, light=.75)\n```\n\n----------------------------------------\n\nTITLE: Accessing matplotlib figure in Seaborn objects in Python\nDESCRIPTION: FacetGrid, PairGrid, and JointGrid objects now have a .figure attribute to reference the underlying matplotlib figure. This can be used on the return value from any seaborn function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.11.2.rst#2025-04-14_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nplot = sns.scatterplot(data=df, x=\"x\", y=\"y\")\nfig = plot.figure\n```\n\n----------------------------------------\n\nTITLE: Creating Linear Model Plot for Anscombe Dataset II in Python\nDESCRIPTION: This snippet creates a linear model plot for the second dataset in the Anscombe quartet. It shows how different datasets can have similar linear relationships but different distributions.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'II'\"),\n           ci=None, scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nominal Scale Axes in Seaborn Objects Interface\nDESCRIPTION: Updates the behavior of axes with Nominal scale to match classic Seaborn categorical axes styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Nominal\n```\n\n----------------------------------------\n\nTITLE: Loading Datasets with Seaborn\nDESCRIPTION: This snippet imports Seaborn, sets a visual theme, and loads two sample datasets: 'penguins' and 'flights'. Required dependencies include the Seaborn library. The expected output is the loaded datasets assigned to variables.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/pointplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\npenguins = sns.load_dataset(\"penguins\")\nflights = sns.load_dataset(\"flights\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with NumPy Array and List\nDESCRIPTION: Demonstrates creating a line plot using a NumPy array for x-values and a Python list for y-values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(x=year.to_numpy(), y=passengers.to_list(), kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Using Fixed Random Seed for Consistent Bootstrap Estimations\nDESCRIPTION: Sets a specific random seed (0) to ensure reproducible results when using bootstrap estimation methods.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Est.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Range(), so.Est(seed=0))\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure and content of the Seaborn documentation using reStructuredText directives. It includes a grid layout for example thumbnails, content sections, and a table of contents.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:html_theme.sidebar_secondary.remove:\n\nseaborn: statistical data visualization\n=======================================\n\n.. grid:: 6\n  :gutter: 1\n\n  .. grid-item::\n\n      .. image:: example_thumbs/scatterplot_matrix_thumb.png\n        :target: ./examples/scatterplot_matrix.html\n\n  .. grid-item::\n\n      .. image:: example_thumbs/errorband_lineplots_thumb.png\n        :target: examples/errorband_lineplots.html\n\n  .. grid-item::\n\n      .. image:: example_thumbs/scatterplot_sizes_thumb.png\n        :target: examples/scatterplot_sizes.html\n\n  .. grid-item::\n\n      .. image:: example_thumbs/timeseries_facets_thumb.png\n        :target: examples/timeseries_facets.html\n\n  .. grid-item::\n\n      .. image:: example_thumbs/horizontal_boxplot_thumb.png\n        :target: examples/horizontal_boxplot.html\n\n  .. grid-item::\n\n      .. image:: example_thumbs/regression_marginals_thumb.png\n        :target: examples/regression_marginals.html\n\n.. grid:: 1 1 3 3\n\n  .. grid-item::\n    :columns: 12 12 6 6\n\n    Seaborn is a Python data visualization library based on `matplotlib\n    <https://matplotlib.org>`_. It provides a high-level interface for drawing\n    attractive and informative statistical graphics.\n\n    For a brief introduction to the ideas behind the library, you can read the\n    :doc:`introductory notes <tutorial/introduction>` or the `paper\n    <https://joss.theoj.org/papers/10.21105/joss.03021>`_. Visit the\n    :doc:`installation page <installing>` to see how you can download the package\n    and get started with it. You can browse the :doc:`example gallery\n    <examples/index>` to see some of the things that you can do with seaborn,\n    and then check out the :doc:`tutorials <tutorial>` or :doc:`API reference <api>`\n    to find out how.\n\n    To see the code or report a bug, please visit the `GitHub repository\n    <https://github.com/mwaskom/seaborn>`_. General support questions are most at home\n    on `stackoverflow <https://stackoverflow.com/questions/tagged/seaborn/>`_, which\n    has a dedicated channel for seaborn.\n\n  .. grid-item-card:: Contents\n    :columns: 12 12 2 2\n    :class-title: sd-fs-5\n    :class-body: sd-pl-4\n\n    .. toctree::\n      :maxdepth: 1\n\n      Installing <installing>\n      Gallery <examples/index>\n      Tutorial <tutorial>\n      API <api>\n      Releases <whatsnew/index>\n      Citing <citing>\n      FAQ <faq>\n\n  .. grid-item-card:: Features\n    :columns: 12 12 4 4\n    :class-title: sd-fs-5\n    :class-body: sd-pl-3\n\n    * :bdg-secondary:`New` Objects: :ref:`API <objects_api>` | :doc:`Tutorial <tutorial/objects_interface>`\n    * Relational plots: :ref:`API <relational_api>` | :doc:`Tutorial <tutorial/relational>`\n    * Distribution plots: :ref:`API <distribution_api>` | :doc:`Tutorial <tutorial/distributions>`\n    * Categorical plots: :ref:`API <categorical_api>` | :doc:`Tutorial <tutorial/categorical>`\n    * Regression plots: :ref:`API <regression_api>` | :doc:`Tutorial <tutorial/regression>`\n    * Multi-plot grids: :ref:`API <grid_api>` | :doc:`Tutorial <tutorial/axis_grids>`\n    * Figure theming: :ref:`API <style_api>` | :doc:`Tutorial <tutorial/aesthetics>`\n    * Color palettes: :ref:`API <palette_api>` | :doc:`Tutorial <tutorial/color_palettes>`\n```\n\n----------------------------------------\n\nTITLE: Adding Count Statistic in Seaborn Objects Interface\nDESCRIPTION: Introduces the new Count statistic class in the Seaborn objects interface for counting occurrences in data.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Count\n```\n\n----------------------------------------\n\nTITLE: Binned Regression Plot\nDESCRIPTION: Creates regression plot with binned x-axis values and polynomial fit.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"weight\", y=\"mpg\", x_bins=np.arange(2000, 5500, 250), order=2)\n```\n\n----------------------------------------\n\nTITLE: Creating a barplot with standard deviation error bars\nDESCRIPTION: Creates a barplot showing body mass by island with error bars representing standard deviation instead of the default confidence interval, using the errorbar parameter.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/barplot.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.barplot(penguins, x=\"island\", y=\"body_mass_g\", errorbar=\"sd\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Environment\nDESCRIPTION: Sets up the Seaborn environment with default theme settings for consistent visualization styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/kdeplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns; sns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Using Plot Class in Seaborn Objects Interface\nDESCRIPTION: Fixes a bug in the Plot class that occurred when adding multiple layers with the same mappings.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Plot\n```\n\n----------------------------------------\n\nTITLE: Creating Diverging Palette with Custom Luminance\nDESCRIPTION: Creates a diverging color palette using purple and teal hues with a reduced luminance value of 35.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(280, 150, l=35)\n```\n\n----------------------------------------\n\nTITLE: Import Seaborn Objects and Load Dataset\nDESCRIPTION: This snippet imports the `seaborn.objects` module as `so` and loads the `penguins` dataset from Seaborn. The `penguins` dataset is then stored in the `penguins` variable for use in subsequent plotting operations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Hist.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Import Seaborn and Load Dataset\nDESCRIPTION: This snippet imports the necessary libraries, seaborn.objects as so and seaborn, and loads the 'seaice' dataset using `load_dataset`. The loaded dataset is assigned to the variable `seaice` for subsequent plotting.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Lines.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nseaice = load_dataset(\"seaice\")\n```\n\n----------------------------------------\n\nTITLE: Creating Regression Plot Matrix with PairGrid in Python\nDESCRIPTION: This snippet creates a PairGrid with regression plots for specific variable pairs from the tips dataset, customizing the plot appearance.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/axis_grids.ipynb#2025-04-14_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ng = sns.PairGrid(tips, y_vars=[\"tip\"], x_vars=[\"total_bill\", \"size\"], height=4)\ng.map(sns.regplot, color=\".3\")\ng.set(ylim=(-1, 11), yticks=[0, 5, 10])\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram with Seaborn in Python\nDESCRIPTION: This code loads the 'penguins' dataset and creates a histogram of flipper lengths using Seaborn's displot function.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npenguins = sns.load_dataset(\"penguins\")\nsns.displot(data=penguins, x=\"flipper_length_mm\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Theme and Color Handling\nDESCRIPTION: Sets up the default Seaborn theme and patches colormap display, preparing the environment for color palette manipulation\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/mpl_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading the Diamonds Dataset\nDESCRIPTION: Imports the Seaborn objects module and loads the diamonds dataset for visualization. This is the initial setup required for creating the visualizations shown in subsequent examples.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Perc.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Width for Boxenplot in Python\nDESCRIPTION: This code shows how to create a boxenplot with a fixed width of 0.5 for all boxes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/boxenplot.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.boxenplot(data=diamonds, x=\"price\", y=\"clarity\", width=.5)\n```\n\n----------------------------------------\n\nTITLE: Seaborn Citation BibTeX Entry\nDESCRIPTION: BibTeX entry for citing the Seaborn library in academic publications. References the 2021 paper published in the Journal of Open Source Software.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/citing.rst#2025-04-14_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{Waskom2021,\n    doi = {10.21105/joss.03021},\n    url = {https://doi.org/10.21105/joss.03021},\n    year = {2021},\n    publisher = {The Open Journal},\n    volume = {6},\n    number = {60},\n    pages = {3021},\n    author = {Michael L. Waskom},\n    title = {seaborn: statistical data visualization},\n    journal = {Journal of Open Source Software}\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Matplotlib Backend and Random Seed\nDESCRIPTION: Configures Matplotlib for inline display and sets a reproducible random seed based on the string 'palettes'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/color_palettes.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\nnp.random.seed(sum(map(ord, \"palettes\")))\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Template for Seaborn Plot Class\nDESCRIPTION: A reStructuredText template that defines the documentation structure for the seaborn Plot class. It includes method groupings for specification, subplot handling, customization, integration, and output operations, along with configuration documentation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/plot.rst#2025-04-14_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\nMethods\n~~~~~~~\n\n.. rubric:: Specification methods\n\n.. autosummary::\n   :toctree: ./\n   :nosignatures:\n\n   ~Plot.add\n   ~Plot.scale\n\n.. rubric:: Subplot methods\n\n.. autosummary::\n   :toctree: ./\n   :nosignatures:\n\n   ~Plot.facet\n   ~Plot.pair\n\n.. rubric:: Customization methods\n\n.. autosummary::\n   :toctree: ./\n   :nosignatures:\n\n   ~Plot.layout\n   ~Plot.label\n   ~Plot.limit\n   ~Plot.share\n   ~Plot.theme\n\n.. rubric:: Integration methods\n\n.. autosummary::\n   :toctree: ./\n   :nosignatures:\n\n   ~Plot.on\n\n.. rubric:: Output methods\n\n.. autosummary::\n   :toctree: ./\n   :nosignatures:\n\n   ~Plot.plot\n   ~Plot.save\n   ~Plot.show\n\nConfiguration\n~~~~~~~~~~~~\n\nThe :class:`Plot` object's default behavior can be configured through its :attr:`Plot.config` attribute. Notice that this is a property of the class, not a method on an instance.\n\n.. include:: ../docstrings/objects.Plot.config.rst\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn\nDESCRIPTION: This snippet imports the Seaborn library, which is required for all subsequent examples. It's a standard import statement that assigns the alias `sns` to the Seaborn module.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/plotting_context.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn and Setting Theme in Python\nDESCRIPTION: This snippet imports the Seaborn library and sets the plot theme to 'whitegrid'. It's typically used at the beginning of a script to configure the visual style for subsequent plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/swarmplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Objects and Loading Dataset in Python\nDESCRIPTION: This code snippet imports the `seaborn.objects` module as `so` and loads the `diamonds` dataset from the seaborn library. It sets up the environment for creating visualizations using the Seaborn objects interface.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Agg.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ndiamonds = load_dataset(\"diamonds\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning tutorial intermediate files\nDESCRIPTION: Command to clean only the intermediate files related to the tutorial section of the documentation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake -C tutorial clean\n```\n\n----------------------------------------\n\nTITLE: Adding Dash Mark in Seaborn Objects Interface\nDESCRIPTION: Introduces the new Dash mark class in the Seaborn objects interface for creating dashed line elements in plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nobjects.Dash\n```\n\n----------------------------------------\n\nTITLE: Escaping and Underlining Full Name in Jinja\nDESCRIPTION: This snippet uses Jinja templating to escape the `fullname` variable for safe rendering and then underlines it, likely for display as a title or heading within the documentation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/object.rst#2025-04-14_snippet_0\n\nLANGUAGE: Jinja\nCODE:\n```\n\"{{\\ fullname | escape | underline}}\"\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to Seaborn Plot - Python\nDESCRIPTION: Shows how to apply a theme to modify the axes appearance of a plot. It changes the face color and edge color of the axes within the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Plot.theme.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.theme({\"axes.facecolor\": \"w\", \"axes.edgecolor\": \"slategray\"})\n```\n\n----------------------------------------\n\nTITLE: Setting up Seaborn and Loading the Penguins Dataset in Python\nDESCRIPTION: Initializes Seaborn with the 'ticks' style theme and loads the built-in penguins dataset for visualization. This setup is required before creating any visualization with the dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lmplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme(style=\"ticks\")\npenguins = sns.load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Using Pandas Objects for Row and Column Colors in Clustermap\nDESCRIPTION: Demonstrates the improved row and column color display functionality in clustermap, where Pandas objects can be used to provide semantic information and labels. Color data is matched based on index rather than position.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.7.1.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n:func:`clustermap`\n```\n\n----------------------------------------\n\nTITLE: Loading and Viewing Anagrams Dataset\nDESCRIPTION: Loads the anagrams dataset from Seaborn's built-in datasets and displays its contents.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nanagrams = sns.load_dataset(\"anagrams\")\nanagrams\n```\n\n----------------------------------------\n\nTITLE: Loading Penguins Dataset with Seaborn in Python\nDESCRIPTION: The code initializes the Seaborn 'objects' module and loads the 'penguins' dataset, which is to be used in further visualizations. It requires the Seaborn library to be installed and then imports it alongside a specific dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Jitter.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\npenguins = load_dataset(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Installing Seaborn with conda\nDESCRIPTION: Command for installing the Seaborn package using the conda package manager.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install seaborn\n```\n\n----------------------------------------\n\nTITLE: Cleaning API docstring intermediate files\nDESCRIPTION: Command to clean only the intermediate files related to the API docstrings section of the documentation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake -C docstrings clean\n```\n\n----------------------------------------\n\nTITLE: Adding Jittered Dot Plot\nDESCRIPTION: Adds a dot layer with both dodge transformation and jitter for better point separation\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dot(), so.Dodge(), so.Jitter())\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying FMRI Dataset\nDESCRIPTION: Loads the 'fmri' dataset using Seaborn's load_dataset function and displays the first few rows using the head() method.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfmri = sns.load_dataset(\"fmri\")\nfmri.head()\n```\n\n----------------------------------------\n\nTITLE: Adding Dodged Dot Plot with Fill\nDESCRIPTION: Adds a dot layer with dodge transformation and fill aesthetic mapped to smoker variable\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Dot(), so.Dodge(), fill=\"smoker\")\n```\n\n----------------------------------------\n\nTITLE: Defining Error Bar Plot Function\nDESCRIPTION: Creates a utility function for plotting error bars with various configurations\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/error_bars.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef plot_errorbars(arg, **kws):\n    np.random.seed(sum(map(ord, \"error_bars\")))\n    x = np.random.normal(0, 1, 100)\n    f, axs = plt.subplots(2, figsize=(7, 2), sharex=True, layout=\"tight\")\n    sns.pointplot(x=x, errorbar=arg, **kws, capsize=.3, ax=axs[0])\n    sns.stripplot(x=x, jitter=.3, ax=axs[1])\n```\n\n----------------------------------------\n\nTITLE: Creating Empty JointGrid\nDESCRIPTION: Initializes an empty JointGrid without specifying data or axes, allowing for manual plotting later.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/JointGrid.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng = sns.JointGrid()\n```\n\n----------------------------------------\n\nTITLE: Example Regression Plot\nDESCRIPTION: Creates a regression plot with random data showing relationship between x and y variables\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/error_bars.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nx = np.random.normal(0, 1, 50)\ny = x * 2 + np.random.normal(0, 2, size=x.size)\nsns.regplot(x=x, y=y)\n```\n\n----------------------------------------\n\nTITLE: Creating Bar Chart with Text Annotations\nDESCRIPTION: Creates a bar chart with text annotations using linearly spaced x-values. Includes customized bar appearance, text positioning, and specific axis formatting.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nn = 17\nx = np.linspace(0, 8, n)\ny = np.full(n, .5)\n(\n    so.Plot(x=x, y=y, offset=x)\n    .add(so.Bar(color=\".6\", edgecolor=\"k\"))\n    .add(so.Text(text=\"abc\", valign=\"bottom\"))\n    .scale(\n        x=so.Continuous().tick(every=1, minor=1),\n        y=so.Continuous().tick(at=[]),\n        offset=None,\n    )\n    .limit(y=(0, 1.5))\n    .layout(size=(9, .5), engine=None)\n    .theme({\n        **axes_style(\"ticks\"),\n        **{f\"axes.spines.{side}\": False for side in [\"left\", \"right\", \"top\"]},\n        \"axes.xmargin\": .015,\n        \"xtick.labelsize\": 12,\n        \"ytick.labelsize\": 12,\n    })\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plots in Seaborn\nDESCRIPTION: Addresses a performance regression in the lineplot function when dealing with a large number of unique x values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.12.1.rst#2025-04-14_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nlineplot\n```\n\n----------------------------------------\n\nTITLE: Logarithmic X-Axis Regression\nDESCRIPTION: Shows regression with logarithmic transformation of the x-axis for displacement vs MPG.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/regplot.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.regplot(data=mpg, x=\"displacement\", y=\"mpg\", logx=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Seaborn Package Dependencies with Version Requirements\nDESCRIPTION: Lists all required Python packages with their minimum version specifications using the tilde (~) notation. This ensures compatible versions of numpy, pandas, matplotlib, scipy, statsmodels, and pillow are installed when setting up Seaborn.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/ci/deps_pinned.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy~=1.20.0\npandas~=1.2.0\nmatplotlib~=3.4.0\nscipy~=1.7.0\nstatsmodels~=0.12.0\npillow~=10.3.0\n```\n\n----------------------------------------\n\nTITLE: Creating Robust Linear Model Plot for Anscombe Dataset III in Python\nDESCRIPTION: This code demonstrates how to create a robust linear model plot using Seaborn's lmplot function. It uses robust regression to minimize the influence of outliers in the third Anscombe dataset.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/regression.ipynb#2025-04-14_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nsns.lmplot(x=\"x\", y=\"y\", data=anscombe.query(\"dataset == 'III'\"),\n           robust=True, ci=None, scatter_kws={\"s\": 80});\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Class Documentation with Jinja2\nDESCRIPTION: This Jinja2 template creates a Sphinx documentation page for a Python class. It includes sections for the class initialization, methods, and attributes. The template uses Sphinx directives like autoclass, automethod, and autosummary to generate detailed documentation.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/class.rst#2025-04-14_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   .. automethod:: __init__\n\n   {% if methods %}\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: ./\n   {% for item in methods %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting up Seaborn and Matplotlib\nDESCRIPTION: Imports and initializes Seaborn with the default theme and Matplotlib for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/PairGrid.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns; sns.set_theme()\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Customizing Seaborn Plot with Styled Paths in Python\nDESCRIPTION: This snippet adds an additional layer to the existing plot, using Paths with custom linewidth, alpha, and color settings. The 'hemi' variable is used for color differentiation in the plot.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Paths.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np.add(so.Paths(linewidth=1, alpha=.8), color=\"hemi\")\n```\n\n----------------------------------------\n\nTITLE: Reversing Axes in Bar Plot with Seaborn Plot in Python\nDESCRIPTION: This code snippet illustrates how to create a bar plot using Seaborn's Plot object with reversed axes, plotting 'passengers' against 'month' for the 'flights' dataset. It helps in understanding flexibility in axis assignment.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Bar.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nso.Plot(flights[\"passengers\"], flights[\"month\"]).add(so.Bar())\n```\n\n----------------------------------------\n\nTITLE: Loading and Preprocessing Brain Networks Dataset with Seaborn in Python\nDESCRIPTION: This snippet loads the brain networks dataset using Seaborn's load_dataset function, then performs a series of data transformations including stacking, grouping, and filtering to prepare the data for visualization.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Paths.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\nnetworks = (\n    load_dataset(\"brain_networks\", header=[0, 1, 2], index_col=0)\n    .rename_axis(\"timepoint\")\n    .stack([0, 1, 2])\n    .groupby([\"timepoint\", \"network\", \"hemi\"])\n    .mean()\n    .unstack(\"network\")\n    .reset_index()\n    .query(\"timepoint < 100\")\n)\n```\n\n----------------------------------------\n\nTITLE: Annotating Bar Plots with Matplotlib\nDESCRIPTION: This snippet showcases how to annotate bar plots with their values using Matplotlib's `bar_label` function. It demonstrates the process for both axes-level and figure-level Seaborn functions with single and multiple subplots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n\"# Axes-level\n    ax = sns.histplot(df, x=\"x_var\")\n    for bars in ax.containers:\n        ax.bar_label(bars)\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"# Figure-level, one subplot\n    g = sns.displot(df, x=\"x_var\")\n    for bars in g.ax.containers:\n        g.ax.bar_label(bars)\"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"# Figure-level, multiple subplots\n    g = sns.displot(df, x=\"x_var\", col=\"col_var)\n    for ax in g.axes.flat:\n        for bars in ax.containers:\n            ax.bar_label(bars)\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Seaborn Theme and Patching Colormap\nDESCRIPTION: This snippet imports the seaborn library, sets the default theme, and patches the colormap display. The `sns.set_theme()` function applies a default visual theme to plots, and `sns.palettes._patch_colormap_display()` ensures proper display of color palettes.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Improved Heatmap Annotations with Separate Dataset\nDESCRIPTION: Shows how the annot parameter in heatmap now accepts a rectangular dataset instead of just boolean values, allowing different values to be used for annotations while the main dataset controls cell colors.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.7.1.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n:func:`heatmap`\n```\n\n----------------------------------------\n\nTITLE: Generating Seaborn API Documentation with Sphinx and Jinja2\nDESCRIPTION: This template creates a standardized structure for Seaborn API documentation. It includes the full name of the object, sets the current module context, and generates automatic documentation for the specified object type and name.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_templates/autosummary/base.rst#2025-04-14_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. auto{{ objtype }}:: {{ objname }}\n```\n\n----------------------------------------\n\nTITLE: Resetting Matplotlib Parameters with reset_orig\nDESCRIPTION: Explains how the reset_orig function resets matplotlib rcParams to their values at the time seaborn was imported, which is useful when working with Jupyter notebook backends that may modify rcParams.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.7.1.rst#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n:func:`reset_orig`\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Imports the necessary Python libraries including NumPy for numerical operations, Seaborn for statistical visualizations, and Matplotlib for plotting.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/aesthetics.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Creating a Faceted Color Demonstration Plot in Seaborn\nDESCRIPTION: This code creates a visualization showing different color, edgecolor, and fillcolor configurations using seaborn's faceting capabilities. It displays 6 color values from the default matplotlib color cycle across three different color properties.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/properties.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nn = 6\nrgb = [f\"C{i}\" for i in range(n)]\n(\n    color_plot\n    .facet([\"color\"] * n + [\"edgecolor\"] * n + [\"fillcolor\"] * n)\n    .add(\n        color_mark,\n        x=np.tile(np.arange(n), 3),\n        y=np.zeros(n * 3),\n        color=rgb + [\".8\"] * n + rgb,\n        edgecolor=rgb + rgb + [\".3\"] * n,\n        legend=False,\n    )\n    .plot()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Matplotlib Bar Plot After Setting Seaborn Theme in Python\nDESCRIPTION: This code shows that the Seaborn theme affects matplotlib plots as well. It creates a bar plot using matplotlib's plt.bar() function after setting the Seaborn theme.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_theme.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplt.bar([\"A\", \"B\", \"C\"], [1, 3, 2])\n```\n\n----------------------------------------\n\nTITLE: Filtered Data Visualization\nDESCRIPTION: Shows how to create plots with filtered data using query and scale options.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/categorical.ipynb#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips.query(\"size != 3\"), x=\"size\", y=\"total_bill\")\n```\n\nLANGUAGE: python\nCODE:\n```\nsns.catplot(data=tips.query(\"size != 3\"), x=\"size\", y=\"total_bill\", native_scale=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter IPython for retina display mode\nDESCRIPTION: This magic command configures the Jupyter notebook to use retina mode for matplotlib figures, which creates higher resolution plots that look better on high-pixel-density displays.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%config InlineBackend.figure_format = \"retina\"\n```\n\n----------------------------------------\n\nTITLE: Generating Default HLS Palette\nDESCRIPTION: This snippet generates a default HLS color palette using `sns.hls_palette()`. Without specifying any parameters, it produces a palette with the default number of colors and default HLS values.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/hls_palette.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsns.hls_palette()\n```\n\n----------------------------------------\n\nTITLE: Loading and Displaying Dots Dataset\nDESCRIPTION: Loads the 'dots' dataset using Seaborn's load_dataset function, filters for 'align' equal to 'dots', and displays the first few rows.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndots = sns.load_dataset(\"dots\").query(\"align == 'dots'\")\ndots.head()\n```\n\n----------------------------------------\n\nTITLE: Adding Categorical Hue to Jointplot\nDESCRIPTION: Creates a jointplot with points colored by the 'species' categorical variable, allowing for comparison between different penguin species.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/jointplot.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.jointplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\")\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot from Long-Form Data\nDESCRIPTION: Visualizes passenger trends over years using a line plot with months represented by different colors.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsns.relplot(data=flights, x=\"year\", y=\"passengers\", hue=\"month\", kind=\"line\")\n```\n\n----------------------------------------\n\nTITLE: Loading and Previewing Flights Dataset\nDESCRIPTION: Loads the built-in flights dataset from Seaborn and displays the first few rows to examine its structure.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/data_structure.ipynb#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nflights = sns.load_dataset(\"flights\")\nflights.head()\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn with Custom Theme Settings\nDESCRIPTION: Sets up Seaborn visualization library with default theme and patches colormap display functionality.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/blend_palette.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nsns.set_theme()\nsns.palettes._patch_colormap_display()\n```\n\n----------------------------------------\n\nTITLE: Importing Libraries and Setting Seaborn Theme\nDESCRIPTION: Imports necessary libraries including NumPy, Pandas, Seaborn, and Matplotlib. Sets the Seaborn theme for consistent styling.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/lineplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nsns.set_theme()\n```\n\n----------------------------------------\n\nTITLE: Customized Scatter Plot\nDESCRIPTION: Demonstrates scatter plot customization with color and size parameters.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_tutorial/objects_interface.ipynb#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(\n    so.Plot(penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\")\n    .add(so.Dot(color=\"g\", pointsize=4))\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn Dataset\nDESCRIPTION: Imports Seaborn's object interface and loads the tips dataset, converting the 'time' column to string type\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/objects.Dodge.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn.objects as so\nfrom seaborn import load_dataset\ntips = load_dataset(\"tips\").astype({\"time\": str})\n```\n\n----------------------------------------\n\nTITLE: Initializing Seaborn in Python\nDESCRIPTION: This snippet imports the Seaborn library and sets the default theme style to 'ticks'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/displot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns; sns.set_theme(style=\"ticks\")\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn Library in Python\nDESCRIPTION: This snippet shows how to import the Seaborn library, which is commonly used for statistical data visualization in Python.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/set_style.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\n```\n\n----------------------------------------\n\nTITLE: Importing Seaborn and Matplotlib in Python\nDESCRIPTION: This snippet imports the Seaborn and Matplotlib libraries, setting up the environment for data visualization. It also sets the Seaborn theme style to 'ticks'.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/relplot.ipynb#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_theme(style=\"ticks\")\n```\n\n----------------------------------------\n\nTITLE: Using Dark Color Palette in Categorical Plot (Python)\nDESCRIPTION: Example of how to specify a dark color palette based on a specific color in categorical plots.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/whatsnew/v0.13.0.rst#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npalette=\"dark:{color}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Subplots from Figure-Level Functions\nDESCRIPTION: This snippet demonstrates how to access and customize subplots created by Seaborn's figure-level functions. It shows how to access single subplots directly and iterate through multiple subplots using `FacetGrid.axes_dict` and `FacetGrid.axes`.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/faq.rst#2025-04-14_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n\"g = sns.displot(...)\n    g.ax.set(...) \"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"g = sns.displot(..., col=...)\n    for col, ax in g.axes_dict.items():\n        ax.set(...) \"\n```\n\nLANGUAGE: python\nCODE:\n```\n\"g = sns.displot(...)\n    g.set(...) \"\n```\n\n----------------------------------------\n\nTITLE: Creating a Dark Palette with XKCD Color\nDESCRIPTION: This snippet creates a dark color palette using an XKCD color name \"xkcd:golden\". The `8` argument specifies that the palette should contain 8 colors, resulting in a gradient from white to the specified XKCD color with 8 distinct shades.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/dark_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.dark_palette(\"xkcd:golden\", 8)\n```\n\n----------------------------------------\n\nTITLE: Creating Light Palette as Continuous Colormap in Python\nDESCRIPTION: Creates a light palette using a hex color code ('#a275ac') and returns it as a continuous colormap (as_cmap=True) instead of a list of discrete colors. This is useful for mapping continuous values in visualizations.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/light_palette.ipynb#2025-04-14_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsns.light_palette(\"#a275ac\", as_cmap=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Diverging Palette with Custom Saturation\nDESCRIPTION: Creates a diverging color palette using purple and teal hues with a reduced saturation value of 50.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/diverging_palette.ipynb#2025-04-14_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsns.diverging_palette(280, 150, s=50)\n```\n\n----------------------------------------\n\nTITLE: Creating HUSL Color Palette with Custom Saturation\nDESCRIPTION: Generates a HUSL color palette with reduced saturation (s=0.4). Lower saturation values produce more muted, less vibrant colors.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/_docstrings/husl_palette.ipynb#2025-04-14_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsns.husl_palette(s=.4)\n```\n\n----------------------------------------\n\nTITLE: Cleaning all documentation build files\nDESCRIPTION: Command to remove the built site and all intermediate files generated during the documentation build process.\nSOURCE: https://github.com/mwaskom/seaborn/blob/master/doc/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake clean\n```"
  }
]