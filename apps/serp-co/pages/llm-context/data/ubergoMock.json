[
  {
    "owner": "uber-go",
    "repo": "mock",
    "content": "TITLE: Building a Mock with Expectations in Go Tests\nDESCRIPTION: Example of how to build a mock with specific expectations in a Go test. This mock will assert that Bar() is called with exactly 99 and will return 101.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc TestFoo(t *testing.T) {\n  ctrl := gomock.NewController(t)\n\n  m := NewMockFoo(ctrl)\n\n  // Asserts that the first and only call to Bar() is passed 99.\n  // Anything else will fail.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(99)).\n    Return(101)\n\n  SUT(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Stub with DoAndReturn and Return in Go Tests\nDESCRIPTION: Example of how to build a stub that doesn't make assertions but instead implements specific behavior. The stub uses DoAndReturn to execute custom code and Return to provide fixed return values.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc TestFoo(t *testing.T) {\n  ctrl := gomock.NewController(t)\n\n  m := NewMockFoo(ctrl)\n\n  // Does not make any assertions. Executes the anonymous functions and returns\n  // its result when Bar is invoked with 99.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(99)).\n    DoAndReturn(func(_ int) int {\n      time.Sleep(1*time.Second)\n      return 101\n    }).\n    AnyTimes()\n\n  // Does not make any assertions. Returns 103 when Bar is invoked with 101.\n  m.\n    EXPECT().\n    Bar(gomock.Eq(101)).\n    Return(103).\n    AnyTimes()\n\n  SUT(m)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Go Interface for Mocking\nDESCRIPTION: A simple Go interface definition that will be used in the mocking examples. It defines a Foo interface with a Bar method that takes an integer and returns an integer.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Foo interface {\n  Bar(x int) int\n}\n\nfunc SUT(f Foo) {\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing mockgen Tool Using Go Install\nDESCRIPTION: Command to install the mockgen tool using Go's install mechanism. This tool is used to generate mock implementations for Go interfaces.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install go.uber.org/mock/mockgen@latest\n```\n\n----------------------------------------\n\nTITLE: Running mockgen in Source Mode\nDESCRIPTION: Example of using mockgen in source mode, which generates mock interfaces from a source file using the -source flag.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmockgen -source=foo.go [other options]\n```\n\n----------------------------------------\n\nTITLE: Running mockgen in Package Mode\nDESCRIPTION: Examples of using mockgen in package mode, which works by specifying the package and interface names to be mocked.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmockgen database/sql/driver Conn,Driver\n\n# Convenient for `go:generate`.\nmockgen . Conn,Driver\n```\n\n----------------------------------------\n\nTITLE: Verifying mockgen Installation\nDESCRIPTION: Command to verify that mockgen was installed correctly by checking its version.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmockgen -version\n```\n\n----------------------------------------\n\nTITLE: Modifying Want Output in Gomock Failure Messages\nDESCRIPTION: Example of how to modify the 'Want' part of failure messages in gomock to improve readability. This uses WantFormatter with a custom StringerFunc to provide more descriptive output.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ngomock.WantFormatter(\n  gomock.StringerFunc(func() string { return \"is equal to fifteen\" }),\n  gomock.Eq(15),\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Got Output in Gomock Failure Messages\nDESCRIPTION: Example of how to modify the 'Got' part of failure messages in gomock to improve readability. This uses GotFormatterAdapter with a custom formatting function to format the received value.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ngomock.GotFormatterAdapter(\n  gomock.GotFormatterFunc(func(i any) string {\n    // Leading 0s\n    return fmt.Sprintf(\"%02d\", i)\n  }),\n  gomock.Eq(15),\n)\n```\n\n----------------------------------------\n\nTITLE: Running GoMock Sample Tests\nDESCRIPTION: Command to execute the test suite for the GoMock sample package. The test includes mock implementations and demonstrations of mock expectations.\nSOURCE: https://github.com/uber-go/mock/blob/main/sample/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test go.uber.org/mock/sample\n```\n\n----------------------------------------\n\nTITLE: Adding GOPATH/bin to PATH Environment Variable\nDESCRIPTION: Command to add the Go binary directory to your PATH environment variable, ensuring mockgen is accessible from the command line.\nSOURCE: https://github.com/uber-go/mock/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=$PATH:$(go env GOPATH)/bin\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Mock Tests with Race Detection in Go\nDESCRIPTION: Command to execute concurrent mock tests using Go's test runner with the race detector enabled. The test runs against the concurrent sample package in the uber-go/mock project.\nSOURCE: https://github.com/uber-go/mock/blob/main/sample/concurrent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race go.uber.org/mock/sample/concurrent\n```\n\n----------------------------------------\n\nTITLE: Defining Interface with Conflicting Parameter Names in Go\nDESCRIPTION: This code snippet defines an interface 'Example' with a method that has parameter names that could potentially conflict with generated mock code identifiers.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/generated_identifier_conflict/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Example interface {\n    Method(_m, _mr, m, mr int)\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Mock Method with Conflicting Receiver Name in Go\nDESCRIPTION: This code snippet shows a generated mock method where the receiver name '_m' conflicts with a parameter name from the original interface method, causing a compilation error.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/generated_identifier_conflict/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Method mocks base method\nfunc (_m *MockExample) Method(_m int, _mr int, m int, mr int) {\n    _m.ctrl.Call(_m, \"Method\", _m, _mr, m, mr)\n}\n```\n\n----------------------------------------\n\nTITLE: Source Interface Definition with Import Alias\nDESCRIPTION: Demonstrates the source code structure that causes the embedded interface issue, showing the import alias and interface definition.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/aux_imports_embedded_interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// source\nimport (\n    alias \"some.org/package/imported\"\n)\n\ntype Source interface {\n    alias.Foreign\n}\n```\n\n----------------------------------------\n\nTITLE: Foreign Package Interface Definitions\nDESCRIPTION: Shows the structure of the imported package containing the Foreign and Embedded interfaces that cause the parsing issue.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/aux_imports_embedded_interface/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// some.org/package/imported\ntype Foreign interface {\n    Embedded\n}\n\ntype Embedded interface {}\n```\n\n----------------------------------------\n\nTITLE: Problematic Parser Code\nDESCRIPTION: Shows the incorrect assumption in the parseInterface method where embedded interfaces are expected to be in the source file.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/aux_imports_embedded_interface/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ncase *ast.Ident:\n        // Embedded interface in this package.\n        ei := p.auxInterfaces[\"\"][v.String()]\n        if ei == nil {\n                return nil, p.errorf(v.Pos(), \"unknown embedded interface %s\", v.String())\n        }\n```\n\n----------------------------------------\n\nTITLE: Running Go Commands After Patch in Test Package\nDESCRIPTION: Demonstrates successful execution of the same commands after applying the patch, showing that the tests now pass without errors.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/mock_in_test_package/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go generate\n$ go test\nok      github.com/golang/mock/mockgen/internal/tests/mock_in_test_package  0.031s\n```\n\n----------------------------------------\n\nTITLE: Executing go generate for greeter.go (Post-Fix)\nDESCRIPTION: This snippet demonstrates the successful execution of 'go generate' on greeter.go after the fix was applied. It shows that the command runs without errors and exits with a status code of 0.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/custom_package_name/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go generate greeter/greeter.go\n$ echo $?\n0\n```\n\n----------------------------------------\n\nTITLE: Running Go Commands Before Patch in Test Package\nDESCRIPTION: Shows the command execution and error output before applying the patch. The error indicates that the User type is undefined in the test package.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/mock_in_test_package/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go generate\n$ go test\n# github.com/golang/mock/mockgen/internal/tests/mock_in_test_package_test [github.com/golang/mock/mockgen/internal/tests/mock_in_test_package.test]\n./mock_test.go:36:44: undefined: User\n./mock_test.go:38:21: undefined: User\nFAIL    github.com/golang/mock/mockgen/internal/tests/mock_in_test_package [build failed]\n```\n\n----------------------------------------\n\nTITLE: Executing go generate for greeter.go (Pre-Fix)\nDESCRIPTION: This snippet shows the error output when running 'go generate' on greeter.go before the fix was implemented. It demonstrates the failure to parse returns due to an unknown package.\nSOURCE: https://github.com/uber-go/mock/blob/main/mockgen/internal/tests/custom_package_name/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go generate greeter/greeter.go\n2018/03/05 22:44:52 Loading input failed: greeter.go:17:11: failed parsing returns: greeter.go:17:14: unknown package \"client\"\ngreeter/greeter.go:1: running \"mockgen\": exit status 1\n```\n\n----------------------------------------\n\nTITLE: Linking to Uber's CLA in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown to Uber's Contributor License Agreement (CLA). It's used to direct contributors to the CLA signing process.\nSOURCE: https://github.com/uber-go/mock/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[Uber's CLA](https://cla-assistant.io/uber-go/mock)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Issue Link in Markdown\nDESCRIPTION: This snippet shows how to create a hyperlink in Markdown to the 'new issue' page of the project's GitHub repository. It's used to guide contributors to the correct location for opening new issues.\nSOURCE: https://github.com/uber-go/mock/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[new issue](https://github.com/uber-go/mock/issues/new/choose)\n```"
  }
]