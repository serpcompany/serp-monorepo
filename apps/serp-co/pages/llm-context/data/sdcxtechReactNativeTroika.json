[
  {
    "owner": "sdcxtech",
    "repo": "react-native-troika",
    "content": "TITLE: Custom PullToRefresh Footer Component (TypeScript)\nDESCRIPTION: Defines a custom pull-to-refresh footer component for load-more functionality. It uses `onStateChanged`, `onOffsetChanged`, and props like `refreshing` and `noMoreData` to implement custom load-more effects. The `manual` prop on the `PullToRefreshFooter` should be set to `true` to enable manual mode.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  PullToRefreshFooter,\n  PullToRefreshFooterProps,\n  PullToRefreshStateChangedEvent,\n  PullToRefreshStateIdle,\n  PullToRefreshStateRefreshing,\n} from '@sdcx/pull-to-refresh'\n\nexport function CustomPullToRefreshFooter(props: PullToRefreshFooterProps) {\n  const { onRefresh, refreshing, noMoreData } = props\n\n  const [text, setText] = useState('上拉加载更多')\n\n  const onStateChanged = useCallback((event: PullToRefreshStateChangedEvent) => {\n    const state = event.nativeEvent.state\n    if (state === PullToRefreshStateIdle) {\n      setText('上拉加载更多')\n    } else if (state === PullToRefreshStateRefreshing) {\n      setText('正在加载更多...')\n    } else {\n      setText('松开加载更多')\n    }\n  }, [])\n\n  const onOffsetChanged = useCallback((event: PullToRefreshOffsetChangedEvent) => {\n    console.log('refresh footer offset', event.nativeEvent.offset)\n  }, [])\n\n  return (\n    <PullToRefreshFooter\n      style={styles.container}\n      manual={true /* 设置模式为手动 */}\n      onOffsetChanged={onOffsetChanged}\n      onStateChanged={onStateChanged}\n      onRefresh={onRefresh}\n      refreshing={refreshing}\n      noMoreData={noMoreData}>\n      <Text style={styles.text}>{noMoreData ? '没有更多数据了' : text}</Text>\n    </PullToRefreshFooter>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Custom PullToRefresh Header Component (TypeScript)\nDESCRIPTION: Defines a custom pull-to-refresh header component. It uses `onStateChanged` and `onOffsetChanged` callbacks to implement custom pull-to-refresh effects. Requires importing relevant types from `@sdcx/pull-to-refresh`.  Props `onRefresh` and `refreshing` should be passed to the component.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  PullToRefreshHeader,\n  PullToRefreshHeaderProps,\n  PullToRefreshOffsetChangedEvent,\n  PullToRefreshStateChangedEvent,\n  PullToRefreshState,\n  PullToRefreshStateIdle,\n  PullToRefreshStateRefreshing,\n} from '@sdcx/pull-to-refresh'\n\nexport function CustomPullToRefreshHeader(props: PullToRefreshHeaderProps) {\n  const { onRefresh, refreshing } = props\n\n  const [text, setText] = useState('下拉刷新')\n\n  const onStateChanged = useCallback((event: PullToRefreshStateChangedEvent) => {\n    const state = event.nativeEvent.state\n    if (state === PullToRefreshStateIdle) {\n      setText('下拉刷新')\n    } else if (state === PullToRefreshStateRefreshing) {\n      setText('正在刷新...')\n    } else {\n      setText('松开刷新')\n    }\n  }, [])\n\n  const onOffsetChanged = useCallback((event: PullToRefreshOffsetChangedEvent) => {\n    console.log('refresh header offset', event.nativeEvent.offset)\n  }, [])\n\n  return (\n    <PullToRefreshHeader\n      style={styles.container}\n      onOffsetChanged={onOffsetChanged}\n      onStateChanged={onStateChanged}\n      onRefresh={onRefresh}\n      refreshing={refreshing}>\n      <Text style={styles.text}>{text}</Text>\n    </PullToRefreshHeader>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: BottomSheet Offset Changed Event Data Type Definition\nDESCRIPTION: Defines the TypeScript types for the BottomSheet's offset change event.  It defines the structure of the event data passed to the onSlide callback, including the progress (ratio between collapsed and expanded offsets), the current offset, the expanded offset, and the collapsed offset.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/bottom-sheet/README.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface OffsetChangedEventData {\n    progress: number // 是指 `BottomSheet` 当前的位置在 `collapsedOffset` 和 `expandedOffset` 之间的比例，它的值在 0 和 1 之间。\n    offset: number // 是指 `BottomSheet` 当前的位置，它的值在 `collapsedOffset` 和 `expandedOffset` 之间。\n    expandedOffset: number // 是指 `BottomSheet` 完全展开时，内层顶部距离外层顶部的距离，通常是 0。但如果设置了 `fitToContents` 属性，则可能大于 0。\n    collapsedOffset: number // 是指 `BottomSheet` 完全收起时，内层顶部距离外层顶部的距离。可以看到，它的值等于外层的高度减去 `peekHeight`。\n  }\n\n  interface NativeBottomSheetProps extends ViewProps {\n    onSlide?: (event: NativeSyntheticEvent<OffsetChangedEventData>) => void\n  }\n```\n\n----------------------------------------\n\nTITLE: Using getEdgeInsetsForView Function\nDESCRIPTION: Shows how to use `getEdgeInsetsForView` to determine the distance between a given view (e.g., a `TextInput`) and the edges of the screen. This is useful for calculating custom offsets or positioning UI elements relative to the screen boundaries.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getEdgeInsetsForView } from '@sdcx/keyboard-insets'\n\nfunction MyComponent() {\n  const inputRef = useRef<TextInput>(null)\n\n  const onLayout = useCallback(() => {\n    const viewTag = findNodeHandle(inputRef.current)\n    if (viewTag === null) {\n      return\n    }\n\n    // 获得 TextInput 距离屏幕四边的距离\n    getEdgeInsetsForView(viewTag, insets => {\n      console.log('insets', insets)\n    })\n  }, [])\n\n  return (\n    <View>\n      <TextInput ref={inputRef} onLayout={onLayout} />\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Usage of NestedScrollView Component TypeScript\nDESCRIPTION: Demonstrates how to use the `NestedScrollView` and `NestedScrollViewHeader` components in a React Native application. It shows how to nest components like `Image`, `TabBar`, `PagerView`, `FlatList`, `ScrollView`, and `WebView` within the `NestedScrollView` structure. The `nestedScrollEnabled` property is used for inner scrollable components, specifically FlatList and ScrollView.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/nested-scroll/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { NestedScrollView, NestedScrollViewHeader } from '@sdcx/nested-scroll'\n\nconst App = () => {\n  return (\n    <NestedScrollView>\n      <NestedScrollViewHeader stickyHeaderBeginIndex={1}>\n        <Image />\n        <TabBar />\n      </NestedScrollViewHeader>\n      <PagerView>\n        <FlatList nestedScrollEnabled />\n        <ScrollView nestedScrollEnabled />\n        <WebView />\n      </PagerView>\n    </NestedScrollView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BottomSheet Component Usage in React Native\nDESCRIPTION: This snippet demonstrates the basic implementation of the BottomSheet component. It showcases how to import the BottomSheet component and use it within a React Native application, including setting the peeekHeight and nesting various content within it, such as Views, PagerView, FlatList, ScrollView, and WebView.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/bottom-sheet/README.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport BottomSheet from '@sdcx/bottom-sheet'\n\nconst App = () => {\n  return (\n    <View style={styles.container}>\n      <ScrollView>...</ScrollView>\n      <BottomSheet peeekHeight={200}>\n        {\n          // 在这里放置你的内容，可以是任何组件，如：\n        }\n        <View />\n        <PagerView>\n          <FlatList nestedScrollEnabled />\n          <ScrollView nestedScrollEnabled />\n          <WebView />\n        </PagerView>\n      </BottomSheet>\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PullToRefresh Usage with FlatList (TypeScript)\nDESCRIPTION: Demonstrates a basic implementation of the `PullToRefresh` component wrapping a `FlatList`.  It showcases the use of `refreshing` and `onRefresh` props to handle the refresh state.  The `setTimeout` simulates an asynchronous refresh operation.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nfunction App() {\n  const [refreshing, setRefreshing] = useState(false)\n\n  return (\n    <PullToRefresh\n      refreshing={refreshing}\n      onRefresh={() => {\n        setRefreshing(true)\n        setTimeout(() => {\n          setRefreshing(false)\n        }, 2000)\n      }}>\n      <FlatList\n        nestedScrollEnabled\n        data={Array.from({ length: 20 })}\n        renderItem={({ item, index }) => <Text>{index}</Text>}\n        keyExtractor={(item, index) => index.toString()}\n      />\n    </PullToRefresh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using RefreshControl within FlatList (TypeScript)\nDESCRIPTION: Shows how to use the `RefreshControl` component directly within a `FlatList`.  It uses the `refreshing` and `onRefresh` properties to manage the refresh state. `nestedScrollEnabled` must be enabled on Android.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RefreshControl } from '@sdcx/pull-to-refresh'\n\nfunction App() {\n  const [refreshing, setRefreshing] = useState(false)\n\n  return (\n    <FlatList\n      nestedScrollEnabled\n      refreshControl={\n        <RefreshControl\n          refreshing={refreshing}\n          onRefresh={() => {\n            setRefreshing(true)\n            setTimeout(() => {\n              setRefreshing(false)\n            }, 2000)\n          }}\n        />\n      }\n      data={Array.from({ length: 20 })}\n      renderItem={({ item, index }) => <Text>{index}</Text>}\n      keyExtractor={(item, index) => index.toString()}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Header for PullToRefresh (TypeScript)\nDESCRIPTION: Demonstrates how to set a specific header for the `PullToRefresh` component using the `header` prop.  The `onRefresh` and `refreshing` props should be passed to the custom header component.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nfunction App() {\n  const [refreshing, setRefreshing] = useState(false)\n\n  return (\n    <PullToRefresh\n      header={\n        <CustomPullToRefreshHeader\n          refreshing={refreshing}\n          onRefresh={() => {\n            setRefreshing(true)\n            setTimeout(() => {\n              setRefreshing(false)\n            }, 2000)\n          }}\n        />\n      }>\n      <FlatList\n        nestedScrollEnabled\n        data={Array.from({ length: 20 })}\n        renderItem={({ item, index }) => <Text>{index}</Text>}\n        keyExtractor={(item, index) => index.toString()}\n      />\n    </PullToRefresh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: PullToRefresh with LoadMore (TypeScript)\nDESCRIPTION: Demonstrates how to use the `PullToRefresh` component with loading more data functionality. It uses the `loadingMore`, `onLoadMore` and `noMoreData` props to manage the loading state.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nfunction App() {\n  const [loadingMore, setLoadingMore] = useState(false)\n  const [noMoreData, setNoMoreData] = useState(false)\n\n  const loadMore = () => {\n    setLoadingMore(true)\n    setTimeout(() => {\n      setLoadingMore(false)\n    }, 2000)\n  }\n\n  return (\n    <PullToRefresh loadingMore={loadingMore} onLoadMore={loadMore} noMoreData={noMoreData}>\n      <FlatList\n        nestedScrollEnabled\n        data={Array.from({ length: 20 })}\n        renderItem={({ item, index }) => <Text>{index}</Text>}\n        keyExtractor={(item, index) => index.toString()}\n      />\n    </PullToRefresh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Local Footer for PullToRefresh (TypeScript)\nDESCRIPTION: Demonstrates how to set a specific footer for the `PullToRefresh` component using the `footer` prop. The `loadingMore` and `onLoadMore` props should be passed to the custom footer component.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nfunction App() {\n  const [loadingMore, setLoadingMore] = useState(false)\n\n  return (\n    <PullToRefresh\n      footer={\n        <LocalPullToRefreshFooter\n          loadingMore={loadingMore}\n          onLoadMore={() => {\n            setLoadingMore(true)\n            setTimeout(() => {\n              setLoadingMore(false)\n            }, 2000)\n          }}\n        />\n      }>\n      <FlatList\n        nestedScrollEnabled\n        data={Array.from({ length: 20 })}\n        renderItem={({ item, index }) => <Text>{index}</Text>}\n        keyExtractor={(item, index) => index.toString()}\n      />\n    </PullToRefresh>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ReactPackage with RNCNestedScrollWebViewManager (Java)\nDESCRIPTION: This Java code defines a ReactPackage that includes the RNCNestedScrollWebViewManager.  This is necessary to register the custom WebView component with React Native. The package must be created and registered to use the patched WebView.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/nested-scroll-webview/README.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.myuidemo;\n\nimport com.reactnativecommunity.webview.RNCNestedScrollWebViewManager;\nimport java.util.Arrays;\n\npublic class MyUiPackage implements ReactPackage {\n    @NonNull\n    @Override\n    public List<NativeModule> createNativeModules(@NonNull ReactApplicationContext reactContext) {\n        return Collections.emptyList();\n    }\n\n    @NonNull\n    @Override\n    public List<ViewManager> createViewManagers(@NonNull ReactApplicationContext reactContext) {\n        return Arrays.asList(\n                new RNCNestedScrollWebViewManager()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useKeyboard Hook\nDESCRIPTION: Demonstrates how to use the `useKeyboard` hook to access keyboard state information (height) and handle keyboard events manually via the `onKeyboard` callback. This allows for custom keyboard handling logic within the component.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboard } from '@sdcx/keyboard-insets'\n\nfunction MyComponent() {\n  const { keyboard, onKeyboard } = useKeyboard()\n\n  console.log(keyboard.height), // 键盘的高度\n\n  return (\n    <KeyboardInsetsView onKeyboard={onKeyboard}>\n      <TextInput />\n    </KeyboardInsetsView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Handle SafeArea with react-native-safe-area-context\nDESCRIPTION: Demonstrates how to use `react-native-safe-area-context` to handle overlapping UI elements with system UI (e.g., virtual navigation keys) after enabling edge-to-edge mode.  It renders `SafeAreaView` component conditionally on Android to add bottom margin.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Platform } from 'react-native'\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context'\n\nfunction App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>...</NavigationContainer>\n      {Platform.OS === 'android' && <SafeAreaView mode=\"margin\" edges={['bottom']} />}\n    </SafeAreaProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using KeyboardInsetsView Component\nDESCRIPTION: Demonstrates basic usage of the `KeyboardInsetsView` component to wrap a `ScrollView` and `TextInput`. The `extraHeight` prop adds extra spacing between the input and the keyboard. This configuration ensures the input field remains visible when the keyboard appears.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardInsetsView } from '@sdcx/keyboard-insets'\n\nfunction MyComponent() {\n  return (\n    <KeyboardInsetsView extraHeight={16} style={{ flex: 1 }}>\n      <ScrollView>\n        ...\n        <TextInput />\n        ...\n      </ScrollView>\n    </KeyboardInsetsView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting KeyboardInsetsView components\nDESCRIPTION: Shows how to nest `KeyboardInsetsView` components to handle complex layouts with multiple input fields. Each `KeyboardInsetsView` can have its own `extraHeight` to control the spacing between the input and the keyboard.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KeyboardInsetsView } from '@sdcx/keyboard-insets'\n\nfunction MyComponent() {\n  return (\n    <KeyboardInsetsView extraHeight={16} style={{ flex: 1 }}>\n      ...\n      <KeyboardInsetsView extraHeight={8}>\n        <TextInput />\n      </KeyboardInsetsView>\n      ...\n    </KeyboardInsetsView>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Keyboard Handling in react-native-bars\nDESCRIPTION: Shows how to disable the built-in keyboard handling logic of `react-native-bars` when using it in conjunction with `KeyboardInsetsView`. This prevents conflicts and ensures that `KeyboardInsetsView` correctly manages the keyboard behavior.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// in MainActivity.java\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    // ...other code\n    super.onCreate(savedInstanceState);\n    RNBars.init(this, \"dark-content\", false); // <- 第三个参数必须要设置为false\n    // ...other code\n  }\n```\n\n----------------------------------------\n\nTITLE: Configure react-native.config.js\nDESCRIPTION: This JavaScript code configures the `react-native.config.js` file to link the `@sdcx/overlay` package's Android native module. It modifies the dependencies section to include platform-specific configuration for Android and requires `getReactNativeHost()` to be available in the context.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/overlay/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// react-native.config.js\nmodule.exports = {\n  dependencies: {\n    '@sdcx/overlay': {\n      platforms: {\n        android: {\n          packageInstance: 'new OverlayPackage(getReactNativeHost())',\n        },\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: BottomSheet State Changed Event Data Type Definition\nDESCRIPTION: Defines the TypeScript types for the BottomSheet's state change event. It includes the possible states ('collapsed', 'expanded', 'hidden') and the structure of the event data passed to the onStateChanged callback.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/bottom-sheet/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport type BottomSheetState = 'collapsed' | 'expanded' | 'hidden'\n\nexport interface StateChangedEventData {\n  state: BottomSheetState\n}\n\ninterface NativeBottomSheetProps extends ViewProps {\n  onStateChanged?: (event: NativeSyntheticEvent<StateChangedEventData>) => void\n}\n```\n\n----------------------------------------\n\nTITLE: OnScroll Type Definition TypeScript\nDESCRIPTION: Defines the type for the `onScroll` callback function used in `NestedScrollViewHeader`. This function receives an event object containing the scroll offset (x and y coordinates) of the content. This can be used to implement parallax scrolling or other header effects.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/nested-scroll/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OnScroll = (event: {\n    nativeEvent: {\n      contentOffset: {\n        x: number\n        y: number\n      }\n    }\n  }) => void\n```\n\n----------------------------------------\n\nTITLE: Set windowSoftInputMode in AndroidManifest.xml\nDESCRIPTION: Sets the `android:windowSoftInputMode` attribute to `adjustResize` in the `AndroidManifest.xml` file. This ensures compatibility with older Android versions (prior to Android 10) by allowing the activity to resize when the keyboard is displayed.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<!-- AndroidManifest.xml -->\n<activity\n  android:name=\".MainActivity\"\n    ...\n  android:windowSoftInputMode=\"adjustResize\">\n  <intent-filter>\n    ...\n  </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Using Custom RefreshControl (TypeScript)\nDESCRIPTION: Shows how to use the custom `CustomRefreshControl` component within a `FlatList`.  It manages the `refreshing` and `onRefresh` properties.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction App() {\n  const [refreshing, setRefreshing] = useState(false)\n\n  return (\n    <FlatList\n      nestedScrollEnabled\n      refreshControl={\n        <CustomRefreshControl\n          refreshing={refreshing}\n          onRefresh={() => {\n            setRefreshing(true)\n            setTimeout(() => {\n              setRefreshing(false)\n            }, 2000)\n          }}\n        />\n      }\n      data={Array.from({ length: 20 })}\n      renderItem={({ item, index }) => <Text>{index}</Text>}\n      keyExtractor={(item, index) => index.toString()}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Edge-to-Edge Mode in MainActivity.java (Android)\nDESCRIPTION: Enables edge-to-edge mode in the `MainActivity.java` file to allow the app's UI to fill the entire screen, avoiding obstruction by system UI elements. This is done using `WindowCompat.setDecorFitsSystemWindows`.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// MainActivity.java\nimport androidx.core.view.WindowCompat;\n\npublic class MainActivity extends ReactActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(null);\n        // enable Edge-to-Edge\n        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom RefreshControl Component (TypeScript)\nDESCRIPTION: Creates a custom `RefreshControl` component that uses the `PullToRefresh` component on Android and the custom header directly on other platforms. This allows consistent styling across platforms.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { RefreshControlProps } from 'react-native'\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nexport function CustomRefreshControl(props: RefreshControlProps) {\n  if (Platform.OS === 'android') {\n    return <PullToRefresh header={<CustomPullToRefreshHeader {...props} />} />\n  }\n  return <CustomPullToRefreshHeader {...props} />\n}\n```\n\n----------------------------------------\n\nTITLE: ImageCropView Component Usage\nDESCRIPTION: Illustrates the usage of the ImageCropView component in a React Native application. It shows how to set the ref, style, file URI, crop style, cropped image callback, and object rectangle for defining the crop area.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/image-crop/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n <ImageCropView\n    ref={imageCropViewRef}\n    style={'your style'}\n    fileUri={'your file uri'}\n    cropStyle={'circular' | 'default'}\n    onCropped={(uri: string) => {}}\n    objectRect={objectRect}\n  />\n```\n\n----------------------------------------\n\nTITLE: Adding the ReactPackage to MainApplication (Java)\nDESCRIPTION: This Java code demonstrates how to add the custom ReactPackage (MyUiPackage) to the getPackages() method in MainApplication.java. This step is crucial to register the RNCNestedScrollWebViewManager with the React Native application.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/nested-scroll-webview/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\n   @Override\n    protected List<ReactPackage> getPackages() {\n        @SuppressWarnings(\"UnnecessaryLocalVariable\")\n        List<ReactPackage> packages = new PackageList(this).getPackages();\n        packages.add(new MyUiPackage());\n        return packages;\n    }\n```\n\n----------------------------------------\n\nTITLE: Using ActivityIndicator in a React Native App\nDESCRIPTION: This example demonstrates how to import and use the ActivityIndicator component within a React Native application. It imports the component, renders it within a View component with a defined style, and utilizes TypeScript syntax.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/activity-indicator/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ActivityIndicator from '@sdcx/activity-indicator'\n\nfunction App() {\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator />\n    </View>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Install Overlay package\nDESCRIPTION: This shell command installs the `@sdcx/overlay` package and runs `pod install` to link native dependencies.  It requires yarn installed to add the npm package and CocoaPods setup to link the iOS native modules.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/overlay/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @sdcx/overlay\n# &\npod install\n```\n\n----------------------------------------\n\nTITLE: Installing NestedScrollWebView with Yarn\nDESCRIPTION: This snippet shows how to install the react-native-webview and @sdcx/nested-scroll-webview libraries using yarn. The second command installs the nested scrolling patch.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/nested-scroll-webview/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add react-native-webview\nyarn add @sdcx/nested-scroll-webview\n```\n\n----------------------------------------\n\nTITLE: Install iOS Dependencies with Pod\nDESCRIPTION: Navigates to the iOS directory and installs the necessary CocoaPods dependencies. This step is required to link the native iOS modules for the `KeyboardInsetsView` component.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd ios\npod install\n```\n\n----------------------------------------\n\nTITLE: Installing BottomSheet Package with Yarn\nDESCRIPTION: This command installs the @sdcx/bottom-sheet package using yarn and executes pod install, essential for native dependencies in React Native projects, especially for iOS.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/bottom-sheet/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @sdcx/bottom-sheet\n# &\npod install\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Footer (TypeScript)\nDESCRIPTION: Sets the global default pull-to-refresh footer component using `PullToRefresh.setDefaultFooter`.  This affects the default appearance of load more functionality across the app.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nPullToRefresh.setDefaultFooter(CustomPullToRefreshFooter)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Default Header (TypeScript)\nDESCRIPTION: Sets the global default pull-to-refresh header component using `PullToRefresh.setDefaultHeader`. This setting affects both `PullToRefresh` and `RefreshControl` components.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PullToRefresh } from '@sdcx/pull-to-refresh'\n\nPullToRefresh.setDefaultHeader(CustomPullToRefreshHeader)\n```\n\n----------------------------------------\n\nTITLE: Trigger Cropping Action\nDESCRIPTION: Shows how to programmatically trigger the image cropping action using the reference to the ImageCropView component. The resulting cropped image URI is then provided in the onCropped callback.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/image-crop/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimageCropViewRef.crop()\n```\n\n----------------------------------------\n\nTITLE: Installing ActivityIndicator with Yarn\nDESCRIPTION: This command installs the @sdcx/activity-indicator package using Yarn. It adds the dependency to your project, allowing you to use the ActivityIndicator component in your React Native application.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/activity-indicator/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sdcx/activity-indicator\n```\n\n----------------------------------------\n\nTITLE: Install Nested Scroll Package Shell\nDESCRIPTION: Installs the `@sdcx/nested-scroll` package using yarn. The `pod install` command is also run, likely for iOS dependencies.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/nested-scroll/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add @sdcx/nested-scroll\n# &\npod install\n```\n\n----------------------------------------\n\nTITLE: Install KeyboardInsetsView with Yarn\nDESCRIPTION: Installs the `@sdcx/keyboard-insets` package using Yarn. This is the first step in setting up the component for use in a React Native project.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/keyboard-insets/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sdcx/keyboard-insets\n```\n\n----------------------------------------\n\nTITLE: Installing PullToRefresh via Yarn\nDESCRIPTION: Installs the `@sdcx/pull-to-refresh` package using yarn, along with installing necessary pod dependencies for iOS.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/pull-to-refresh/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add @sdcx/pull-to-refresh\n# &\npod install\n```\n\n----------------------------------------\n\nTITLE: Install Image Crop Dependency\nDESCRIPTION: Installs the @sdcx/image-crop package using yarn and installs CocoaPods dependencies for the native iOS module.\nSOURCE: https://github.com/sdcxtech/react-native-troika/blob/master/packages/image-crop/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @sdcx/image-crop\n# &\npod install\n```"
  }
]