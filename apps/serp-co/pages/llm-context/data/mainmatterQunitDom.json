[
  {
    "owner": "mainmatter",
    "repo": "qunit-dom",
    "content": "TITLE: Basic DOM Assertions with QUnit-DOM\nDESCRIPTION: Demonstrates common DOM assertions including element existence, class checking, text content verification, and input field validation.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('h1').exists();\nassert.dom('h1').hasClass('title');\nassert.dom('h1').hasText('Welcome to Ember, John Doe!');\n\nassert.dom('input').isFocused();\nassert.dom('input').hasValue(/.+ Doe/);\nassert.dom('input').hasAttribute('type', 'text');\n```\n\n----------------------------------------\n\nTITLE: Testing element properties with hasProperty in JavaScript\nDESCRIPTION: Asserts that an HTML element has a specific property with an optional value check. The value can be either a regular expression or any other value for direct comparison.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.password-input').hasProperty('type', 'password');\n```\n\n----------------------------------------\n\nTITLE: Using assert.dom() for Element Assertions in QUnit Tests\nDESCRIPTION: Demonstrates how to use the assert.dom() method to make assertions about DOM elements in QUnit tests. The method takes a CSS selector or HTMLElement as its target.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the title exists', function(assert) {\n  assert.dom('#title').exists();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Test Example\nDESCRIPTION: Example of a basic QUnit test using qunit-dom assertions to verify page content.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest('the title is welcoming', function(assert) {\n  assert.dom('#title').hasText('Welcome to QUnit');\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Existence with QUnit DOM\nDESCRIPTION: Shows how to use the exists() method to assert that an element exists in the DOM. It can also check for a specific count of matching elements.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('#title').exists();\nassert.dom('.choice').exists({ count: 4 });\n```\n\n----------------------------------------\n\nTITLE: Ember Test Helper Setup\nDESCRIPTION: Configuration code for setting up qunit-dom in an Ember project's test helper file with ember-qunit v6.x and above.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// tests/test-helper.js\nimport * as QUnit from 'qunit';\nimport { setup } from 'qunit-dom';\n\n//...\n\nsetup(QUnit.assert);\n\nsetApplication(Application.create(config.APP));\n\nstart();\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility with QUnit DOM\nDESCRIPTION: Shows how to use isVisible() method to check if an element is visible on the page, based on its dimensions and DOMRect properties.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('#title').isVisible();\nassert.dom('.choice').isVisible({ count: 4 });\n```\n\n----------------------------------------\n\nTITLE: Testing text content with hasText in JavaScript\nDESCRIPTION: Asserts that the text content of an HTML element matches the expected text or regular expression. This assertion strips and collapses whitespace when comparing with string values.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// <h2 id=\"title\">\n//   Welcome to <b>QUnit</b>\n// </h2>\n\nassert.dom('#title').hasText('Welcome to QUnit');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.foo').hasText(/[12]\\d{3}/);\n```\n\n----------------------------------------\n\nTITLE: Checking Element Attributes with QUnit DOM\nDESCRIPTION: Demonstrates the use of hasAttribute() method to assert the presence and optionally the value of an attribute on an element.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.password-input').hasAttribute('type', 'password');\n```\n\n----------------------------------------\n\nTITLE: Testing input values with hasValue in JavaScript\nDESCRIPTION: Asserts that the value property of an HTML input element matches the expected text or regular expression. If no expected value is provided, the assertion will fail if the value is empty.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.username').hasValue('HSimpson');\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Content with String Comparison in QUnit\nDESCRIPTION: Shows how to assert the inner HTML content of an element using string comparison or regular expression patterns.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// <h1>\n//   A <b>great</b> thing\n// </h1>\n\nassert.dom('h1').hasHtml('A <b>great</b> thing');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('h1').hasHtml(/.*\\s<b>great.+/);\n```\n\n----------------------------------------\n\nTITLE: Checking Checkbox State with QUnit DOM\nDESCRIPTION: Shows how to use isChecked() method to assert that a checkbox or element with aria-checked is in a checked state.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.active').isChecked();\n```\n\n----------------------------------------\n\nTITLE: Testing disabled state with isDisabled in JavaScript\nDESCRIPTION: Asserts that an HTML element or an element matching the selector is disabled. This is useful for testing form controls and interactive elements.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.foo').isDisabled();\n```\n\n----------------------------------------\n\nTITLE: Testing CSS classes with hasClass in JavaScript\nDESCRIPTION: Asserts that an HTML element has a specific CSS class using classList. The expected parameter can be a string or a regular expression to match against any of the element's classes.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input[type=\"password\"]').hasClass('secret-password-input');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input[type=\"password\"]').hasClass(/.*password-input/);\n```\n\n----------------------------------------\n\nTITLE: Testing text content inclusion with includesText in JavaScript\nDESCRIPTION: Asserts that the text content of an HTML element contains the given text. This assertion will collapse whitespace in textContent before searching for the substring.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('#title').includesText('Welcome');\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Commands\nDESCRIPTION: Shows installation commands for adding qunit-dom to a project using either npm or yarn package managers.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev qunit-dom\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev qunit-dom\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Focus State with QUnit DOM\nDESCRIPTION: Demonstrates the use of isFocused() method to check if an element currently has focus.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.email').isFocused();\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Content Includes Substring in QUnit\nDESCRIPTION: Shows how to verify that an element's HTML content includes a specific HTML substring.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('#title').includesHtml('<b>nice</b>');\n```\n\n----------------------------------------\n\nTITLE: Testing computed styles with hasStyle in JavaScript\nDESCRIPTION: Asserts that an HTML element has specific style declarations using window.getComputedStyle. The expected parameter is an object with CSS property names and their expected values.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.progress-bar').hasStyle({\n  opacity: 1,\n  display: 'block'\n});\n```\n\n----------------------------------------\n\nTITLE: Testing non-empty text content with hasAnyText in JavaScript\nDESCRIPTION: Asserts that the textContent property of an HTML element is not empty. This is useful for verifying that an element contains some text without being specific about what that text is.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('button.share').hasAnyText();\n```\n\n----------------------------------------\n\nTITLE: Testing non-empty input value with hasAnyValue in JavaScript\nDESCRIPTION: Asserts that the value property of an HTML input element is not empty. This is useful for verifying that a form field has been filled without being specific about what that value is.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.username').hasAnyValue();\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Non-Existence with QUnit DOM\nDESCRIPTION: Demonstrates the use of doesNotExist() method to assert that an element is not present in the DOM.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.should-not-exist').doesNotExist();\n```\n\n----------------------------------------\n\nTITLE: Testing enabled state with isNotDisabled in JavaScript\nDESCRIPTION: Asserts that an HTML element or an element matching the selector is not disabled. This method can also be called using the alias isEnabled.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.foo').isNotDisabled();\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Element Tag Name in QUnit\nDESCRIPTION: Demonstrates how to assert that an HTML element has a specific tag name using QUnit's DOM assertions.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// <h1 id=\"title\">\n//   Title\n// </h1>\n\nassert.dom('#title').hasTagName('h1');\n```\n\n----------------------------------------\n\nTITLE: Testing input value inclusion with includesValue in JavaScript\nDESCRIPTION: Asserts that the value property of an HTML input element includes the expected text. This can also be called using aliases containsValue or hasValueContaining.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('textarea.description').includesValue('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Running QUnit-DOM Tests in Bash\nDESCRIPTION: Commands to execute the test suite and generate test coverage reports for the QUnit-DOM project.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/qunit-dom/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:ember\npnpm test:coverage\n```\n\n----------------------------------------\n\nTITLE: Checking Input Required State with QUnit DOM\nDESCRIPTION: Shows how to use isRequired() method to assert that an input element is marked as required.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input[type=\"text\"]').isRequired();\n```\n\n----------------------------------------\n\nTITLE: Testing ARIA attributes with hasAria in JavaScript\nDESCRIPTION: Asserts that an HTML element has a specific ARIA attribute with an optional value check. The assertion accepts a name parameter and an optional value to match against.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('button').hasAria('pressed', 'true');\n```\n\n----------------------------------------\n\nTITLE: Validating Form Elements with QUnit DOM\nDESCRIPTION: Demonstrates the use of isValid() method to check if an element passes validation using the reportValidity() function.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.input').isValid();\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Content Does Not Include Substring in QUnit\nDESCRIPTION: Demonstrates how to verify that an element's HTML content does not include a specific HTML substring.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('#title').doesNotIncludeHtml('<i>nope</i>');\n```\n\n----------------------------------------\n\nTITLE: Testing empty input value with hasNoValue in JavaScript\nDESCRIPTION: Asserts that the value property of an HTML input element is empty. This method can also be called using the alias lacksValue.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.username').hasNoValue();\n```\n\n----------------------------------------\n\nTITLE: Testing pseudo-element styles with hasPseudoElementStyle in JavaScript\nDESCRIPTION: Asserts that a pseudo-element of an HTML element has specific style declarations using window.getComputedStyle. Requires a selector for the pseudo-element and an object with expected style properties.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.progress-bar').hasPseudoElementStyle(':after', {\n  content: '\";\\'',\n});\n```\n\n----------------------------------------\n\nTITLE: Asserting Absence of Attributes with QUnit DOM\nDESCRIPTION: Shows how to use doesNotHaveAttribute() method to check that an element does not have a specific attribute.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input.username').doesNotHaveAttribute('disabled');\n```\n\n----------------------------------------\n\nTITLE: Testing absence of CSS classes with doesNotHaveClass in JavaScript\nDESCRIPTION: Asserts that an HTML element does not have a specific CSS class. The expected parameter can be a string or regular expression. This method can also be called using aliases hasNoClass or lacksClass.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input[type=\"password\"]').doesNotHaveClass('username-input');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input[type=\"password\"]').doesNotHaveClass(/username-.*-input/);\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Content Does Not Match in QUnit\nDESCRIPTION: Demonstrates how to verify that an element's HTML content does not match an expected value.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// <section>\n//   a <b>great</b> thing\n// </section>\n\nassert.dom('section').doesNotHaveHtml('<b>fantastic</b>');\n```\n\n----------------------------------------\n\nTITLE: Testing text content exclusion with doesNotIncludeText in JavaScript\nDESCRIPTION: Asserts that the text content of an HTML element does not contain the given text. This can also be called using aliases doesNotContainText or doesNotHaveTextContaining.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('#title').doesNotIncludeText('Welcome');\n```\n\n----------------------------------------\n\nTITLE: Testing empty text content with hasNoText in JavaScript\nDESCRIPTION: Asserts that the textContent property of an HTML element is empty. This allows verification that an element does not contain any text content.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('div').hasNoText();\n```\n\n----------------------------------------\n\nTITLE: Testing absence of styles with doesNotHaveStyle in JavaScript\nDESCRIPTION: Asserts that an HTML element does not have specific style declarations. The expected parameter is an object with CSS property names and values that should not be present.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.progress-bar').doesNotHaveStyle({\n  opacity: 1,\n  display: 'block'\n});\n```\n\n----------------------------------------\n\nTITLE: Testing CSS selector matching with matchesSelector in JavaScript\nDESCRIPTION: Asserts that the target selector selects only elements that are also selected by compareSelector. This allows verification that elements match multiple selector conditions.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('p.red').matchesSelector('div.wrapper p:last-child')\n```\n\n----------------------------------------\n\nTITLE: Testing input value exclusion with doesNotIncludeValue in JavaScript\nDESCRIPTION: Asserts that the value property of an HTML input element does not include the expected text. This can also be called using aliases doesNotContainValue or doesNotHaveValueContaining.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('textarea.description').doesNotIncludeValue('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Testing absence of ARIA attributes with doesNotHaveAria in JavaScript\nDESCRIPTION: Asserts that an HTML element does not have a specific ARIA attribute. This method can also be called using the aliases hasNoAria or lacksAria.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('button').doesNotHaveAria('pressed');\n```\n\n----------------------------------------\n\nTITLE: Testing CSS selector non-matching with doesNotMatchSelector in JavaScript\nDESCRIPTION: Asserts that the target selector selects only elements that are not also selected by compareSelector. This is useful for verifying elements don't match certain conditions.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('input').doesNotMatchSelector('input[disabled]')\n```\n\n----------------------------------------\n\nTITLE: Asserting HTML Element Does Not Have Tag Name in QUnit\nDESCRIPTION: Shows how to verify that an HTML element does not have a specific tag name using QUnit's DOM assertions.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// <section id=\"block\">\n//   Title\n// </section>\n\nassert.dom('section#block').doesNotHaveTagName('div');\n```\n\n----------------------------------------\n\nTITLE: Testing absence of pseudo-element styles with doesNotHavePseudoElementStyle in JavaScript\nDESCRIPTION: Asserts that a pseudo-element of an HTML element does not have specific style declarations. Requires a selector for the pseudo-element and an object with style properties that should not be present.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/API.md#2025-04-12_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nassert.dom('.progress-bar').doesNotHavePseudoElementStyle(':after', {\n  content: '\";\\'',\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Configuration\nDESCRIPTION: Shows how to import qunit-dom types in a TypeScript environment for proper type checking and editor support.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'qunit-dom';\n```\n\n----------------------------------------\n\nTITLE: Browser Script Integration\nDESCRIPTION: HTML script tags for including qunit-dom in a browser environment after loading QUnit.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/qunitjs/qunit/qunit.js\"></script>\n<script src=\"https://unpkg.com/qunit-dom/dist/qunit-dom.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Ember Tests\nDESCRIPTION: Commands for running Ember tests, including a continuous testing option with the server flag.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/test-app/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nember test\nember test --server\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Ember Test App\nDESCRIPTION: Commands for cloning the repository, navigating to the project directory, and installing dependencies using npm.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/test-app/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\ncd test-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Generating QUnit-DOM API Documentation\nDESCRIPTION: Command to generate API.md documentation file from source code comments.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/qunit-dom/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Running Ember Development Server\nDESCRIPTION: Command to start the Ember development server using Ember CLI.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/test-app/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nember serve\n```\n\n----------------------------------------\n\nTITLE: Building Ember Application\nDESCRIPTION: Ember CLI commands for building the application in development and production environments.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/test-app/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nember build\nember build --environment production\n```\n\n----------------------------------------\n\nTITLE: Linting Ember Application\nDESCRIPTION: npm commands for running linting checks and automatically fixing linting issues.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/test-app/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\nnpm run lint:fix\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt file that specifies crawling permissions for web robots. This configuration allows all user agents (crawlers) to access all content on the site, as indicated by the empty Disallow directive.\nSOURCE: https://github.com/mainmatter/qunit-dom/blob/master/packages/test-app/public/robots.txt#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# http://www.robotstxt.org\nUser-agent: *\nDisallow:\n```"
  }
]