[
  {
    "owner": "live-codes",
    "repo": "livecodes",
    "content": "TITLE: Embedding LiveCodes Playground in HTML\nDESCRIPTION: This snippet shows how to embed a LiveCodes playground in a web page using the createPlayground function from the LiveCodes SDK. It initializes a playground with markdown, CSS, and JavaScript content, and opens the console by default.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/README.md#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n<script type=\"module\">\n  import { createPlayground } from 'https://cdn.jsdelivr.net/npm/livecodes';\n\n  createPlayground('#container', {\n    params: {\n      markdown: '# Hello LiveCodes!',\n      css: 'h1 {color: dodgerblue;}',\n      js: 'console.log(\"Hello, from JS!\");',\n      console: 'open',\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Interpreter with LiveCodes SDK and CodeMirror\nDESCRIPTION: Sets up a web-based Python interpreter using LiveCodes SDK and CodeMirror editor. Includes code editor initialization, playground setup, real-time code execution, and console output monitoring. Uses debounced updates and custom styling for error handling.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/headless.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<textarea id=\"editor\" style=\"display: none\"></textarea>\n<div id=\"output\">Loading...</div>\n\n<script type=\"module\">\n  import { createPlayground } from \"https://cdn.jsdelivr.net/npm/livecodes@0.2.0\";\n  import debounce from \"https://jspm.dev/debounce\";\n\n  const initialCode = `def say_hello(name):\n  return f\"Hello, {name}!\"\n\nprint(say_hello(\"LiveCodes\"))\n`;\n\n  // the code editor\n  const editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n    lineNumbers: true,\n    mode: \"python\",\n  });\n  editor.setSize(\"100%\", 250);\n  editor.setValue(initialCode);\n\n  // the playground\n  const options = {\n    view: \"headless\",\n  };\n\n  const livecodes = await createPlayground(options);\n  await livecodes.load();\n\n  const run = async () => {\n    await livecodes.setConfig({\n      autoupdate: true,\n      script: {\n        language: \"python\",\n        content: editor.doc.getValue(),\n      },\n    });\n  };\n\n  // watch for changes\n  editor.on(\"change\", debounce(run, 1000));\n  livecodes.watch(\"console\", ({ method, args }) => {\n    const output = document.querySelector(\"#output\");\n    output.innerHTML = args.join(\"\\n\");\n    if (method === \"error\") {\n      output.style.color = \"red\";\n    } else {\n      output.style.color = \"unset\";\n    }\n  });\n\n  await run();\n</script>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/codemirror@5.65.15/lib/codemirror.css\" />\n<script src=\"https://unpkg.com/codemirror@5.65.15/lib/codemirror.js\"></script>\n<script src=\"https://unpkg.com/codemirror@5.65.15/mode/python/python.js\"></script>\n\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: hidden;\n  }\n  #output {\n    flex: 1;\n    margin: 1em;\n    white-space: pre;\n    font-family: monospace;\n  }\n  #output iframe {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configure Playground with Config Object vs Params\nDESCRIPTION: Compares two different approaches to configure a LiveCodes playground: using a config object or using URL query parameters.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\n// use config\ncreatePlayground('#container', {\n  config: {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  },\n});\n\n// use params\ncreatePlayground('#container', { params: { md: '# Hello World!' } });\n```\n\n----------------------------------------\n\nTITLE: Running Tests in LiveCodes\nDESCRIPTION: Demonstrates how to execute project tests and retrieve test results using the runTests() method.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  const { results } = await playground.runTests();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Settings Panel in TypeScript\nDESCRIPTION: This code shows how to set up a complete custom settings panel with multiple text inputs. It creates three settings fields and composes them into a panel layout.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/custom-settings.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// create settings panel\nconst customSettings = document.createElement('div');\ncustomSettings.className = 'custom-settings';\ncustomSettings.innerHTML = `\n  <div class=\"panel-heading\">Custom Settings</div>\n  <div class=\"panel-body\">\n    ${createTextSetting({\n      id: 'apiKey',\n      label: 'API Key',\n      description: 'Your API Key',\n    })}\n    ${createTextSetting({\n      id: 'server',\n      label: 'Server',\n      description: 'Server URL',\n    })}\n    ${createTextSetting({\n      id: 'timeout',\n      label: 'Timeout',\n      description: 'Timeout in ms',\n    })}\n  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveCodes Playground with Configuration Object (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a new LiveCodes playground using the SDK, including setting and retrieving the configuration object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\n(async () => {\n  const playground = await createPlayground('#container', {\n    config: {\n      // config options here\n    },\n  });\n\n  // the object can be retrieved using the method `getConfig`\n  console.log(await playground.getConfig());\n\n  // and can be later changed using the method `setConfig`\n  await playground.setConfig({\n    // new config options\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a Playground with Vanilla JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to create a basic LiveCodes playground using the vanilla JavaScript SDK. It initializes a playground in a container element with Markdown content and sets the view to show only the result.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/README.md#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', {\n  config: {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  },\n  view: 'result',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Headless Playground with LiveCodes SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a headless playground using the LiveCodes SDK. It sets up a Markdown editor and retrieves the compiled code and result HTML.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/headless.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground({\n  view: 'headless',\n  config: {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  },\n}).then(async (playground) => {\n  const code = await playground.getCode();\n  console.log(code.markup.compiled); // \"<h1>Hello World!</h1>\"\n  console.log(code.result); // (result page HTML)\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Result Page Structure in LiveCodes\nDESCRIPTION: This HTML pseudo-code demonstrates the structure of the result page generated by LiveCodes. It includes configuration placeholders, CSS and JavaScript loading sequence, and the order in which content from editors and external resources is integrated into the final page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/result.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html { Config.htmlAttrs }*>\n  <head>\n    <title>{ Config.title }*</title>\n    <meta name=\"title\" content=\"{ Config.title }*\" />\n    <meta name=\"description\" content=\"{ Config.description }*\" />\n\n    { Config.head }*\n\n    { CSS preset }**\n\n    { External CSS }**\n\n    { Editor CSS }\n\n    { Language(s) run-time CSS }***\n\n    { Language(s) run-time JS }***\n\n    { Import map }****\n\n  </head>\n  <body>\n\n    { Editor HTML }\n\n    { External JS }**\n\n    { Editor JS }\n\n    { Spacing script (if enabled) }*****\n\n    { Test scripts (if enabled) }******\n\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic LiveCodes React Component Usage\nDESCRIPTION: Demonstrates importing and using the LiveCodes React component in a JSX file. This example shows the minimal setup required to embed a LiveCodes playground in a React application.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from 'livecodes/react';\n\nexport const Playground = () => <LiveCodes />;\n```\n\n----------------------------------------\n\nTITLE: Complete React App with LiveCodes Example\nDESCRIPTION: A complete example of a React application using the LiveCodes component with initial HTML, CSS, and JavaScript content. This demo also opens the console by default for viewing output.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from \"livecodes/react\";\n\nconst App = () => {\n  const params = {\n    html: \"<h1>Hello World!</h1>\",\n    css: \"h1 {color: blue;}\",\n    js: 'console.log(\"Hello, World!\")',\n    console: \"open\",\n  };\n\n  return <LiveCodes params={params} />;\n};\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Getting Share URLs for a LiveCodes Playground\nDESCRIPTION: Shows how to get share URLs (both long and short formats) for the current state of a LiveCodes playground.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  const longUrl = await playground.getShareUrl();\n  const shortUrl = await playground.getShareUrl(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Welcome Screen Component in TypeScript React\nDESCRIPTION: This code defines the Welcome component, which renders a welcome screen for the Live Codes project. It includes project information, quick start options, and links to documentation and examples. The component uses Material-UI components for styling and layout.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/welcome.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  },\n  title: {\n    marginBottom: theme.spacing(2),\n  },\n  description: {\n    marginBottom: theme.spacing(3),\n  },\n  buttons: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport const Welcome: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\n        Welcome to Live Codes\n      </Typography>\n      <Typography variant=\"body1\" className={classes.description}>\n        Live Codes is an open-source, client-side, web-based code playground.\n        It supports 90+ languages, has many features and integrations, and requires no setup.\n      </Typography>\n      <Box className={classes.buttons}>\n        <Button variant=\"contained\" color=\"primary\" href=\"#\">\n          Quick Start\n        </Button>\n        <Button variant=\"outlined\" color=\"primary\" href=\"https://livecodes.io/docs\" target=\"_blank\">\n          Documentation\n        </Button>\n        <Button variant=\"outlined\" color=\"primary\" href=\"https://livecodes.io/docs/features/code-prefill\" target=\"_blank\">\n          Examples\n        </Button>\n      </Box>\n      <Box mt={4}>\n        <Typography variant=\"body2\">\n          For more information, visit{' '}\n          <Link href=\"https://livecodes.io\" target=\"_blank\" rel=\"noopener\">\n            livecodes.io\n          </Link>\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating MDX Editor with LiveCodes SDK in HTML and JavaScript\nDESCRIPTION: This snippet implements an MDX editor using CodeMirror and LiveCodes SDK in headless mode. It watches for code changes and updates the output, displaying the result HTML.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/headless.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<textarea id=\"editor\" style=\"display: none;\"></textarea>\n<div id=\"output\">Loading...</div>\n\n<script type=\"module\">\n  import { createPlayground } from \"https://cdn.jsdelivr.net/npm/livecodes@0.2.0\";\n  import debounce from \"https://jspm.dev/debounce\";\n\n  const initialCode = `import { useState, useEffect } from 'react';\n\nexport const Hello = ({name}) => {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <h1>Hello, {name}!</h1>\n      <p>You clicked {count} times.</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </>\n  );\n};\n\n<Hello name=\"LiveCodes\"></Hello>\n\n## MDX in short\n\n- ❤️ Powerful\n- 💻 Everything is a component\n- 🔧 Customizable\n- 📚 Markdown-based\n- 🔥 Blazingly blazing fast\n\n> from [mdxjs.com](https://mdxjs.com/)\n`;\n\n  // the code editor\n  const editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n    lineNumbers: true,\n    mode: \"markdown\",\n  });\n  editor.setSize(\"100%\", 200);\n  editor.setValue(initialCode);\n\n  // the playground\n  const options = {\n    view: \"headless\",\n    config: { autoupdate: false },\n  };\n\n  const livecodes = await createPlayground(options);\n  await livecodes.load();\n\n  const compile = async () => {\n    await livecodes.setConfig({\n      autoupdate: false,\n      markup: {\n        language: \"mdx\",\n        content: editor.doc.getValue(),\n      },\n    });\n  };\n\n  // watch for changes\n  editor.on(\"change\", debounce(compile, 1000));\n  livecodes.watch(\"code\", ({ code, config }) => {\n    createSandbox(document.querySelector(\"#output\"), code.result);\n  });\n\n  await compile();\n\n  // create a sandbox for safe execution of compiled code\n  function createSandbox (container, html) {\n    const iframe = document.createElement(\"iframe\");\n    iframe.src = \"https://livecodes-sandbox.pages.dev/v7/\";\n    iframe.sandbox =\n      \"allow-same-origin allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-presentation allow-scripts\";\n    iframe.onload = () => {\n      iframe.contentWindow.postMessage({ html }, \"*\");\n    };\n    container.innerHTML = \"\";\n    container.appendChild(iframe);\n    return iframe;\n  };\n</script>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/codemirror@5.65.15/lib/codemirror.css\" />\n<script src=\"https://unpkg.com/codemirror@5.65.15/lib/codemirror.js\"></script>\n<script src=\"https://unpkg.com/codemirror@5.65.15/mode/markdown/markdown.js\"></script>\n\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: hidden;\n  }\n  #output {\n    flex: 1;\n  }\n  #output iframe {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Formatting Code in a LiveCodes Playground\nDESCRIPTION: Demonstrates how to use the format() method to format code in all editors or just the active editor in a LiveCodes playground.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  await playground.format();\n  // code in editors is formatted\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Integration with Props\nDESCRIPTION: Example showing TypeScript integration with proper type imports and prop typing\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/vue.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import LiveCodes, { type Props } from 'livecodes/vue';\n  const options: Props = {\n    // embed options\n  };\n</script>\n\n<template>\n  <LiveCodes v-bind=\"options\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CSS Modules Classes in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to import and use CSS Modules classes in the script, including different import methods and accessing class names.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport classes from './style.module.css';\nimport { smallText } from './styles.module.css';\nimport * as allClasses from './styles.module.css';\n\nconsole.log(classes.title);\n\n// .small-text -> smallText\nconsole.log(smallText);\n\n// .large-text -> largeText\nconsole.log(allClasses.largeText);\n\n// bracket notation for class with dash\nconsole.log(allClasses['large-text']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Editor with LiveCodes SDK in HTML and JavaScript\nDESCRIPTION: This code snippet creates a Markdown editor using CodeMirror and LiveCodes SDK in headless mode. It watches for code changes and updates the output in real-time.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/headless.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<textarea id=\"editor\" style=\"display: none;\"></textarea>\n<div id=\"output\">Loading...</div>\n\n<script type=\"module\">\n  import { createPlayground } from \"https://cdn.jsdelivr.net/npm/livecodes@0.2.0\";\n  import debounce from \"https://jspm.dev/debounce\";\n\n  const initialCode = \"# Hello, LiveCodes!\\n\\n\";\n\n  // the code editor\n  const editor = CodeMirror.fromTextArea(document.getElementById(\"editor\"), {\n    lineNumbers: true,\n    mode: \"markdown\",\n  });\n  editor.setSize(\"100%\", 200);\n  editor.setValue(initialCode);\n\n  // the playground\n  const options = {\n    view: \"headless\",\n  };\n\n  const livecodes = await createPlayground(options);\n  await livecodes.load();\n\n  const compile = async () => {\n    await livecodes.setConfig({\n      autoupdate: false,\n      markup: {\n        language: \"markdown\",\n        content: editor.doc.getValue(),\n      },\n    });\n  };\n\n  // watch for changes\n  editor.on(\"change\", debounce(compile, 1000));\n  livecodes.watch(\"code\", ({ code, config }) => {\n    createSandbox(document.querySelector(\"#output\"), code.markup.compiled);\n  });\n\n  await compile();\n\n  // create a sandbox for safe execution of compiled code\n  function createSandbox (container, html) {\n    const iframe = document.createElement(\"iframe\");\n    iframe.src = \"https://livecodes-sandbox.pages.dev/v7/\";\n    iframe.sandbox =\n      \"allow-same-origin allow-downloads allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-presentation allow-scripts\";\n    iframe.onload = () => {\n      iframe.contentWindow.postMessage({ html }, \"*\");\n    };\n    container.innerHTML = \"\";\n    container.appendChild(iframe);\n    return iframe;\n  };\n</script>\n\n<link rel=\"stylesheet\" href=\"https://unpkg.com/codemirror@5.65.15/lib/codemirror.css\" />\n<script src=\"https://unpkg.com/codemirror@5.65.15/lib/codemirror.js\"></script>\n<script src=\"https://unpkg.com/codemirror@5.65.15/mode/markdown/markdown.js\"></script>\n\n<style>\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  body {\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: hidden;\n  }\n  #output {\n    flex: 1;\n  }\n  #output iframe {\n    width: 100%;\n    height: 100%;\n    border: none;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveCodes Playground with Custom Module and Type Definitions\nDESCRIPTION: JavaScript code showing how to create a LiveCodes playground that provides both implementation and type definitions for a custom module. It configures the playground with custom imports and types for intellisense support.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/intellisense.mdx#2025-04-13_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\nconst config = {\n  activeEditor: 'script',\n  script: {\n    language: 'javascript',\n    content: `import { foo } from 'my-module';\\n\\nconsole.log(foo());`\n  };\n  imports: {\n    'my-module': 'https://my-website.com/my-module/index.js',\n  },\n  types: {\n    'my-module': 'https://my-website.com/my-module/my-module.d.ts',\n  },\n};\n\ncreatePlayground('#container', {config});\n```\n\n----------------------------------------\n\nTITLE: ESM CDN Integration\nDESCRIPTION: Example of loading and using the LiveCodes SDK via CDN using ES modules.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/index.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n<script type=\"module\">\n  import { createPlayground } from 'https://cdn.jsdelivr.net/npm/livecodes';\n\n  createPlayground('#container', {\n    // embed options\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing LiveCodes SDK Methods from React Component\nDESCRIPTION: Demonstrates how to access the full SDK capabilities by using the sdkReady callback to get a reference to the playground instance. This example shows setting up a button that can run the playground code on demand.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport LiveCodes from 'livecodes/react';\nimport type { Playground } from 'livecodes';\n\nexport const App = () => {\n  const [playground, setPlayground] = useState<Playground>();\n\n  const onReady = (sdk: Playground) => {\n    setPlayground(sdk);\n  };\n\n  const run = async () => {\n    await playground?.run();\n  };\n\n  return (\n    <>\n      <LiveCodes sdkReady={onReady} />\n      <button onClick={run}>Run</button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a User Class in Ruby WebAssembly\nDESCRIPTION: This snippet demonstrates basic Ruby class definition with attribute accessors, constructor, and custom methods. It creates a User class with a name property and an admin check method, then instantiates it and outputs results to the console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/ruby-wasm.mdx#2025-04-13_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass User\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  def admin?\n    @name == 'Admin'\n  end\nend\n\nuser = User.new('Bob')\n\n# the output will go to the console\nputs user\nputs user.admin?\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Playground with React SDK Component\nDESCRIPTION: This code snippet shows how to use the LiveCodes React component to create a playground. It imports the React component from the LiveCodes package and renders a playground with Markdown content, displaying only the result.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/README.md#2025-04-13_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from 'livecodes/react';\n\nconst config = {\n  markup: {\n    language: 'markdown',\n    content: '# Hello World!',\n  },\n};\nconst Playground = () => <LiveCodes config={config} view=\"result\" />;\nexport default Playground;\n```\n\n----------------------------------------\n\nTITLE: Basic LiveCodes URL Query Parameter Example\nDESCRIPTION: Shows a simple example of using URL query parameters to configure LiveCodes with JavaScript code and open console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://livecodes.io?js=console.log('Hello World!')&console=open\n```\n\n----------------------------------------\n\nTITLE: Using LiveCodes SDK as Svelte Action\nDESCRIPTION: This example shows how to use the LiveCodes SDK's createPlayground function as a Svelte action. It provides a simpler syntax for integrating the playground into a component.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/svelte.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { createPlayground } from 'livecodes';\n  let options = {\n    // embed options\n  };\n</script>\n\n<div use:createPlayground=\"{options}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Importing UUID Module in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the v4 function from the uuid module and use it to generate a UUID in the browser.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 } from 'uuid';\n\ndocument.body.innerHTML = v4();\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveCodes React Component with Content\nDESCRIPTION: Example of providing configuration options to the LiveCodes React component, specifically setting the markup language to markdown and providing initial content. Also demonstrates setting the default view to 'result'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from 'livecodes/react';\n\nconst config = {\n  markup: {\n    language: 'markdown',\n    content: '# Hello World!',\n  },\n};\nexport const Playground = () => <LiveCodes config={config} view=\"result\" />;\n```\n\n----------------------------------------\n\nTITLE: Creating LiveCodes Playground with Bundler\nDESCRIPTION: JavaScript code showing how to create a LiveCodes playground using the SDK with a bundler.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/getting-started.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', {\n  template: 'react',\n  // other embed options\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Code from LiveCodes Playground\nDESCRIPTION: Demonstrates how to get playground code including source code, language and compiled code for each editor and result page HTML using the getCode() method.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  const code = await playground.getCode();\n\n  // source code, language and compiled code for the script editor\n  const { content, language, compiled } = code.script;\n\n  // result page HTML\n  const result = code.result;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary Search in Java\nDESCRIPTION: This code snippet demonstrates a binary search algorithm implementation in Java. It includes a method to perform binary search on a sorted array and a main method to test the implementation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/java.mdx#2025-04-13_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class BinarySearchSnippet {\n  /**\n   * Search an item with binarySearch algorithm.\n   *\n   * @param arr sorted array to search\n   * @param item an item to search\n   * @return if item is found, return the index position of the array item otherwise return -1\n   */\n\n  public static int binarySearch(int[] arr, int left, int right, int item) {\n    if (right >= left) {\n      int mid = left + (right - left) / 2;\n      if (arr[mid] == item) {\n        return mid;\n      }\n\n      if (arr[mid] > item) {\n        return binarySearch(arr, left, mid - 1, item);\n      }\n\n      return binarySearch(arr, mid + 1, right, item);\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int[] sortedArray = {1, 3, 5, 7, 9, 11, 13, 15};\n    int itemToSearch = 7;\n\n    int result = binarySearch(sortedArray, 0, sortedArray.length - 1, itemToSearch);\n\n    if (result == -1) {\n      System.out.println(\"Result: Item not found in the array.\");\n    } else {\n      System.out.println(\"Result: Item found at index -> \" + result);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Styling Example for LiveCodes Container\nDESCRIPTION: Demonstrates how to customize the LiveCodes container styling by disabling default styles and applying custom ones.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" data-default-styles=\"false\" class=\"custom\"></div>\n<script type=\"module\">\n  import { createPlayground } from 'livecodes';\n  createPlayground('#container');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic ClojureScript Usage with NPM Module Integration\nDESCRIPTION: Demonstrates how to use ClojureScript in LiveCodes with an npm module (canvas-confetti). The code creates a button click event listener that triggers a confetti animation and prints a message to the console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/clojurescript.mdx#2025-04-13_snippet_0\n\nLANGUAGE: clojurescript\nCODE:\n```\n(ns demo\n  ;; you can use npm modules\n  (:require [\"canvas-confetti$default\" :as confetti]))\n\n(let [el (js/document.getElementById \"test\")]\n  (.addEventListener el \"click\"\n    (fn []\n      (confetti)\n      (println \"test\"))))\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Component Integration\nDESCRIPTION: Basic setup for integrating the LiveCodes component in a Vue application using script setup syntax.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/vue.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import LiveCodes from 'livecodes/vue';\n</script>\n\n<template>\n  <LiveCodes />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using styled-components with JSX\nDESCRIPTION: Demonstrates how to use styled-components CSS-in-JS library with JSX in LiveCodes. Components are styled directly in the JSX file using tagged template literals.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n text-align: center;\n font-family: sans-serif;\n color: palevioletred;\n`;\n\nexport default function () {\n return <Title>Hello, styled-components!</Title>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Regression Decision Tree in Python\nDESCRIPTION: A complete implementation of a regression decision tree class that handles continuous 1-dimensional input data. The implementation includes methods for calculating mean squared error, training the tree, making predictions, and includes test cases. The tree can be configured with custom depth and minimum leaf size parameters.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/python-wasm.mdx#2025-04-13_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# From: https://github.com/TheAlgorithms/Python\n# License: https://github.com/TheAlgorithms/Python/blob/master/LICENSE.mdx\n\n\"\"\"\nImplementation of a basic regression decision tree.\nInput data set: The input data set must be 1-dimensional with continuous labels.\nOutput: The decision tree maps a real number input to a real number output.\n\"\"\"\nimport numpy as np\n\n\nclass DecisionTree:\n    def __init__(self, depth=5, min_leaf_size=5):\n        self.depth = depth\n        self.decision_boundary = 0\n        self.left = None\n        self.right = None\n        self.min_leaf_size = min_leaf_size\n        self.prediction = None\n\n    def mean_squared_error(self, labels, prediction):\n        \"\"\"\n        mean_squared_error:\n        @param labels: a one dimensional numpy array\n        @param prediction: a floating point value\n        return value: mean_squared_error calculates the error if prediction is used to\n            estimate the labels\n        >>> tester = DecisionTree()\n        >>> test_labels = np.array([1,2,3,4,5,6,7,8,9,10])\n        >>> test_prediction = float(6)\n        >>> tester.mean_squared_error(test_labels, test_prediction) == (\n        ...     TestDecisionTree.helper_mean_squared_error_test(test_labels,\n        ...         test_prediction))\n        True\n        >>> test_labels = np.array([1,2,3])\n        >>> test_prediction = float(2)\n        >>> tester.mean_squared_error(test_labels, test_prediction) == (\n        ...     TestDecisionTree.helper_mean_squared_error_test(test_labels,\n        ...         test_prediction))\n        True\n        \"\"\"\n        if labels.ndim != 1:\n            print(\"Error: Input labels must be one dimensional\")\n\n        return np.mean((labels - prediction) ** 2)\n\n    def train(self, x, y):\n        \"\"\"\n        train:\n        @param x: a one dimensional numpy array\n        @param y: a one dimensional numpy array.\n        The contents of y are the labels for the corresponding X values\n\n        train does not have a return value\n        \"\"\"\n\n        \"\"\"\n        this section is to check that the inputs conform to our dimensionality\n        constraints\n        \"\"\"\n        if x.ndim != 1:\n            print(\"Error: Input data set must be one dimensional\")\n            return\n        if len(x) != len(y):\n            print(\"Error: X and y have different lengths\")\n            return\n        if y.ndim != 1:\n            print(\"Error: Data set labels must be one dimensional\")\n            return\n\n        if len(x) < 2 * self.min_leaf_size:\n            self.prediction = np.mean(y)\n            return\n\n        if self.depth == 1:\n            self.prediction = np.mean(y)\n            return\n\n        best_split = 0\n        min_error = self.mean_squared_error(x, np.mean(y)) * 2\n\n        \"\"\"\n        loop over all possible splits for the decision tree. find the best split.\n        if no split exists that is less than 2 * error for the entire array\n        then the data set is not split and the average for the entire array is used as\n        the predictor\n        \"\"\"\n        for i in range(len(x)):\n            if len(x[:i]) < self.min_leaf_size:\n                continue\n            elif len(x[i:]) < self.min_leaf_size:\n                continue\n            else:\n                error_left = self.mean_squared_error(x[:i], np.mean(y[:i]))\n                error_right = self.mean_squared_error(x[i:], np.mean(y[i:]))\n                error = error_left + error_right\n                if error < min_error:\n                    best_split = i\n                    min_error = error\n\n        if best_split != 0:\n            left_x = x[:best_split]\n            left_y = y[:best_split]\n            right_x = x[best_split:]\n            right_y = y[best_split:]\n\n            self.decision_boundary = x[best_split]\n            self.left = DecisionTree(\n                depth=self.depth - 1, min_leaf_size=self.min_leaf_size\n            )\n            self.right = DecisionTree(\n                depth=self.depth - 1, min_leaf_size=self.min_leaf_size\n            )\n            self.left.train(left_x, left_y)\n            self.right.train(right_x, right_y)\n        else:\n            self.prediction = np.mean(y)\n\n        return\n\n    def predict(self, x):\n        \"\"\"\n        predict:\n        @param x: a floating point value to predict the label of\n        the prediction function works by recursively calling the predict function\n        of the appropriate subtrees based on the tree's decision boundary\n        \"\"\"\n        if self.prediction is not None:\n            return self.prediction\n        elif self.left or self.right is not None:\n            if x >= self.decision_boundary:\n                return self.right.predict(x)\n            else:\n                return self.left.predict(x)\n        else:\n            print(\"Error: Decision tree not yet trained\")\n            return None\n\n\nclass TestDecisionTree:\n    \"\"\"Decision Tres test class\"\"\"\n\n    @staticmethod\n    def helper_mean_squared_error_test(labels, prediction):\n        \"\"\"\n        helper_mean_squared_error_test:\n        @param labels: a one dimensional numpy array\n        @param prediction: a floating point value\n        return value: helper_mean_squared_error_test calculates the mean squared error\n        \"\"\"\n        squared_error_sum = float(0)\n        for label in labels:\n            squared_error_sum += (label - prediction) ** 2\n\n        return float(squared_error_sum / labels.size)\n\n\ndef main():\n    \"\"\"\n    In this demonstration we're generating a sample data set from the sin function in\n    numpy.  We then train a decision tree on the data set and use the decision tree to\n    predict the label of 10 different test values. Then the mean squared error over\n    this test is displayed.\n    \"\"\"\n    x = np.arange(-1.0, 1.0, 0.005)\n    y = np.sin(x)\n\n    tree = DecisionTree(depth=10, min_leaf_size=10)\n    tree.train(x, y)\n\n    test_cases = (np.random.rand(10) * 2) - 1\n    predictions = np.array([tree.predict(x) for x in test_cases])\n    avg_error = np.mean((predictions - test_cases) ** 2)\n\n    print(\"Test values: \" + str(test_cases))\n    print(\"Predictions: \" + str(predictions))\n    print(\"Average error: \" + str(avg_error))\n\n\nif __name__ == \"__main__\":\n    main()\n    import doctest\n    doctest.testmod(name=\"mean_squarred_error\", verbose=True)\n```\n\n----------------------------------------\n\nTITLE: Embedding Deploy Screen Link Using RunInLiveCodes Component in React/JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the RunInLiveCodes component to create a direct link to the Deploy screen in the LiveCodes application. The component accepts a params object with a screen property set to 'deploy'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/deploy.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\n\n<RunInLiveCodes params={{ screen: 'deploy' }} linkText=\"direct link\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting Functions for Testing in JavaScript\nDESCRIPTION: Demonstrates how to export functions and values from the script editor for use in tests. This includes default and named exports, as well as assigning to the global window object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function greet() {\n  return 'Hello, World!';\n}\n\nexport const add = (x, y) => x + y;\n\nwindow.multiply = (x, y) => x * y;\n```\n\n----------------------------------------\n\nTITLE: Importing DOM Testing Library in JavaScript\nDESCRIPTION: Demonstrates how to import specific functions from the DOM Testing Library for use in tests.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  getByLabelText,\n  getByText,\n  getByTestId,\n  queryByTestId,\n  waitFor,\n} from '@testing-library/dom';\n```\n\n----------------------------------------\n\nTITLE: Creating LiveCodes Playground with Lite Mode\nDESCRIPTION: Demonstrates how to create a LiveCodes playground instance with lite mode enabled using the SDK. The configuration object sets the mode to 'lite' for a lightweight editor experience.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/lite.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', { config: { mode: 'lite' } });\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS Require for UUID Module\nDESCRIPTION: This example shows how to use CommonJS require syntax to import the v4 function from the uuid module, which is supported but not recommended in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { v4 } = require('uuid');\n\ndocument.body.innerHTML = v4();\n```\n\n----------------------------------------\n\nTITLE: Event Watching in LiveCodes\nDESCRIPTION: Shows how to watch various playground events including code changes, console output, and test results using the watch() method with event removal functionality.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then((playground) => {\n  const codeWatcher = playground.watch('code', ({ code, config }) => {\n    // this will run on every code change\n    console.log('code:', code);\n    console.log('config:', config);\n  });\n\n  const consoleWatcher = playground.watch('console', ({ method, args }) => {\n    // this will run on every console output\n    console[method](...args);\n  });\n\n  const testsWatcher = playground.watch('tests', ({ results }) => {\n    // this will run when tests run\n    results.forEach((testResult) => {\n      console.log('status:', testResult.status); // \"pass\", \"fail\" or \"skip\"\n      console.log(testResult.errors); // array of errors as strings\n    });\n  });\n\n  // then later\n  codeWatcher.remove();\n  consoleWatcher.remove();\n  testsWatcher.remove();\n  // events are no longer watched\n});\n```\n\n----------------------------------------\n\nTITLE: Running Code in a LiveCodes Playground\nDESCRIPTION: Shows how to programmatically run code in a LiveCodes playground using the run() method, which compiles and executes the code.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  await playground.run();\n  // new result page is displayed\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules with React\nDESCRIPTION: Demonstrates how to use CSS Modules with React in LiveCodes. This approach provides locally scoped CSS classes to avoid naming conflicts.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_7\n\nLANGUAGE: react\nCODE:\n```\nimport classes from './style.module.css';\n\nexport default function() {\n  return <h1 className={classes.title}>Hello, CSS Modules!</h1>;\n}\n\n```\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  color: green;\n  font-family: sans-serif;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript SDK Usage\nDESCRIPTION: Example showing how to import and use the createPlayground function from the LiveCodes SDK to create an interactive playground.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/index.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', {\n  // embed options\n});\n```\n\n----------------------------------------\n\nTITLE: Creating LiveCodes Playground with Custom Content\nDESCRIPTION: Example showing how to create a LiveCodes playground with custom markup, styling, and JavaScript content.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/getting-started.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\nconst config = {\n  markup: {\n    language: 'markdown',\n    content: '# Hello LiveCodes!',\n  },\n  style: {\n    language: 'css',\n    content: 'body { color: blue; }',\n  },\n  script: {\n    language: 'javascript',\n    content: 'console.log(\"hello from JavaScript!\");',\n  },\n  activeEditor: 'script',\n};\n\ncreatePlayground('#container', { config, params: { console: 'open' } });\n```\n\n----------------------------------------\n\nTITLE: Importing NPM Modules in React\nDESCRIPTION: Example of importing React hooks, third-party libraries, and CSS frameworks in a React component. The component uses useState and useEffect with confetti animations.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_4\n\nLANGUAGE: react\nCODE:\n```\nimport { useState, useEffect } from \"react\";\nimport confetti from \"canvas-confetti\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    if (count > 0) {\n      confetti();\n    }\n  }, [count]);\n\n  return (\n    <div className=\"m-5 text-center\">\n      <p>You clicked {count} times.</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Root Element for React Rendering\nDESCRIPTION: Demonstrates how to specify a custom root element for React rendering by using an element with id 'livecodes-app'. The content is replaced during rendering.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"livecodes-app\">Loading...</div>\n```\n\nLANGUAGE: react\nCODE:\n```\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Result View in LiveCodes\nDESCRIPTION: This code configures the LiveCodes component to use the 'result' view. In this setup, the result page is visible by default, while the code editor is collapsed but can be accessed when needed.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/default-view.mdx#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes config={{ view: 'result' }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing Components between Editors\nDESCRIPTION: Demonstrates how to export components from the script editor and import them in the markup editor using the './script' import path. This example uses MDX to import a React component.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\nimport Greeting from \"./script\";\n\n<Greeting name=\"MDX\" />\n\n```\n\nLANGUAGE: react\nCODE:\n```\nexport default function(props) {\n  return <h1>Greeting from {props.name}!</h1>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: React Component with New JSX Transform\nDESCRIPTION: Example showing that React's new JSX transform is utilized, eliminating the need to import React. This simplifies component code and reduces bundle size.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// this is not needed:\n// import React from 'react';\n\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor View in LiveCodes\nDESCRIPTION: This snippet shows how to set up the LiveCodes component with the 'editor' view. In this configuration, the code editor is visible by default, while the result page is collapsed but can be accessed.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/default-view.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes config={{ view: 'editor' }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Importing Different Versions of Lodash\nDESCRIPTION: This snippet demonstrates how to import different versions of the Lodash library and log their version numbers to the console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport latest from 'lodash';\nimport v3 from 'lodash@3';\n\nconsole.log(latest.VERSION); // -> 4.17.21\nconsole.log(v3.VERSION); // -> 3.10.1\n```\n\n----------------------------------------\n\nTITLE: Basic Scheme Example with DOM Manipulation and Event Handling in LiveCodes\nDESCRIPTION: This example demonstrates Scheme code running in LiveCodes that updates DOM content, implements a click counter, and uses conditional expressions. It shows how to set content in HTML elements, add event handlers, and log messages to the console based on the current time.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/scheme.mdx#2025-04-13_snippet_0\n\nLANGUAGE: scheme\nCODE:\n```\n(let ((title \"Scheme\"))\n  (set-content! \"#title\" title))\n\n(let ((counter 0))\n(add-handler! \"#counter-button\" \"click\"\n(lambda (ev)\n(set! counter (+ counter 1))\n(set-content! \"#counter\" (number->string counter)))))\n\n; check console\n(let ((time-now (date-hour (current-date))))\n(console-log\n(cond ((< time-now 12) \"Good morning\")\n((< time-now 18) \"Good afternoon\")\n(else \"Good evening\"))))\n```\n\n----------------------------------------\n\nTITLE: Importing Deno Module for UUID Generation\nDESCRIPTION: This snippet demonstrates how to import a UUID module from deno.land and use it to generate a UUID in the browser.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { uuid } from 'https://deno.land/x/uuid/mod.ts';\n\ndocument.body.innerHTML = uuid();\n```\n\n----------------------------------------\n\nTITLE: Using LiveCodes Component with Console Full Parameter\nDESCRIPTION: Demonstrates how to use the LiveCodes component with the console pane in full mode and JavaScript code that logs 'hello' to the console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tools-pane.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes params={{ console: 'full', js: \"console.log('hello')\" }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Rendering LiveCodes Sync Screen Link Component in React/JSX\nDESCRIPTION: A React component named RunInLiveCodes that creates a direct link to the LiveCodes sync screen. The component accepts parameters to specify the screen to open.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/sync.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<RunInLiveCodes params={{ screen: 'sync' }} linkText=\"direct link\" />\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Component with Auto-rendering in React\nDESCRIPTION: A simple JSX component that demonstrates auto-rendering in LiveCodes. The component is exported as the default export and will be automatically rendered by React.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Child Svelte Component with TypeScript and Tailwind CSS\nDESCRIPTION: This snippet represents a child Svelte component using TypeScript and Tailwind CSS. It implements a counter with increment, decrement, and reset functionality, showcasing component props and state management.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  let { start } = $props();\n  let count = $state(start);\n</script>\n\n<div class=\"mt-8 text-center\">\n  <span class=\"text-3xl font-bold\">{count}</span>\n</div>\n<div class=\"mt-4 space-x-4 text-center\">\n  <button on:click={() => count--} class=\"text-md font-medium bg-gray-500 hover:bg-gray-600 transition py-1 px-4 text-white rounded drop-shadow-xl\">-</button>\n  <button on:click={() => count++} class=\"text-md font-medium bg-gray-500 hover:bg-gray-600 transition py-1 px-4 text-white rounded drop-shadow-xl\">+</button>\n</div>\n<div class=\"mt-4 space-x-4 text-center\">\n  <button on:click={() => count = start} class=\"text-md font-medium bg-red-500 hover:bg-red-600 transition py-1 px-4 text-white rounded drop-shadow-xl\">Reset</button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-rendering with Custom Settings\nDESCRIPTION: Example showing how to disable the auto-rendering feature using custom settings. This gives more control when you want to handle rendering manually.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\nLANGUAGE: html\nCODE:\n```\nJSX auto-rendering is disabled. Set from Project menu → Custom Settings.\n```\n\n----------------------------------------\n\nTITLE: Controlling R Code Evaluation Timing\nDESCRIPTION: Shows how to manually control when R code is evaluated by setting autoEvaluate to false and using livecodes.r.run() to trigger evaluation when desired.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h2>Output</h2>\n<div id=\"output\"></div>\n<h2>Plots</h2>\n<div id=\"plots\"></div>\n\n<script type=\"module\">\n  livecodes.r.config = {\n    container: null,\n    autoEvaluate: false,\n  };\n\n  await livecodes.r.run();\n\n  const pre = document.createElement('pre');\n  pre.innerHTML = livecodes.r.output;\n  document.querySelector('#output').appendChild(pre);\n\n  document.querySelector('#plots').appendChild(...livecodes.r.plots);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in Svelte Component\nDESCRIPTION: This example demonstrates how to import npm modules and stylesheets in a Svelte component within LiveCodes. It uses canvas-confetti for a visual effect and imports Bootstrap CSS for styling.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import confetti from \"canvas-confetti\";\n  import \"bootstrap/dist/css/bootstrap.css\";\n\n  let count = $state(0);\n  function increment() {\n    count++;\n    confetti();\n  }\n</script>\n\n<div class=\"m-5 text-center\">\n  <p>You clicked {count} times.</p>\n  <button on:click={increment}>Click me</button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: React Component Usage with Assets Screen Parameter\nDESCRIPTION: Example of using the RunInLiveCodes component with parameters to display the assets screen and a direct link.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/assets.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<RunInLiveCodes params={{ screen: 'assets' }} linkText=\"direct link\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting and Importing JSX Components Between Editors\nDESCRIPTION: Demonstrates how to export components from the script editor and import them in the markup editor using the './script' import path. This example shows a component being imported into MDX.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function(props) {\n  return <h1>Greeting from {props.name}!</h1>;\n}\n\n```\n\nLANGUAGE: mdx\nCODE:\n```\nimport Greeting from \"./script\";\n\n<Greeting name=\"MDX\" />\n\n```\n\n----------------------------------------\n\nTITLE: Printing to Console in Python\nDESCRIPTION: Shows how to use the print function in Python to output a message to the integrated console. This example demonstrates the console functionality in a Python REPL-like environment.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/console.mdx#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nprint('hello from python')\n```\n\n----------------------------------------\n\nTITLE: Simple Mode JSX Configuration Object\nDESCRIPTION: Configuration object for LiveCodes in simple mode, setting up a JSX environment with custom styling and layout options\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/display-modes.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const simpleConfig = {\n  mode: 'simple',\n  layout: 'vertical',\n  activeEditor: 'script',\n  editor: 'monaco',\n  tools: { status: 'none' },\n  script: {\n    language: 'jsx',\n    content: `import { atom, useAtom } from 'jotai';\n\nconst countAtom = atom(0);\n\nconst Counter = () => {\n  const [count, setCount] = useAtom(countAtom);\n  const inc = () => setCount((c) => c + 1);\n  return (\n    <>\n      {count} <button onClick={inc}>+1</button>\n    </>\n  );\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Hello Jotai</h1>\n    <h2>Enjoy coding!</h2>\n    <Counter />\n  </div>\n);\n\nexport default App;\n`,\n  },\n  style: {\n    language: 'css',\n    content: '.App {\n font-family: sans-serif;\n text-align: center;\n}\n'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Settings Data in LiveCodes\nDESCRIPTION: This snippet demonstrates how to handle custom settings data. It shows how to get references to input elements, retrieve values from localStorage, and update the UI with stored values.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/custom-settings.mdx#2025-04-13_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// get input elements\nconst apiKeyInput = customSettings.querySelector(\n  '#apiKey',\n) as HTMLInputElement;\nconst serverInput = customSettings.querySelector(\n  '#server',\n) as HTMLInputElement;\nconst timeoutInput = customSettings.querySelector(\n  '#timeout',\n) as HTMLInputElement;\n\n// read values from localStorage\nconst apiKey = localStorage.getItem('custom-apiKey') || '';\nconst server = localStorage.getItem('custom-server') || '';\nconst timeout = localStorage.getItem('custom-timeout') || '';\n\n// update UI\napiKeyInput.value = apiKey;\nserverInput.value = server;\ntimeoutInput.value = timeout;\n```\n\n----------------------------------------\n\nTITLE: Importing JSR Module for Text Transformation\nDESCRIPTION: This example shows how to import a module from jsr.io using the 'jsr:' prefix and use it to transform text in the browser.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { yassify } from 'jsr:@kwhinnery/yassify';\n\ndocument.body.innerHTML = yassify('Hello, World!');\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to LiveCodes Playgrounds\nDESCRIPTION: This code snippet shows how to generate a URL to a LiveCodes playground using the SDK. It imports the getPlaygroundUrl function and creates a URL for a playground with Markdown content, which can be used to create links to playgrounds.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/README.md#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getPlaygroundUrl } from 'livecodes';\n\nconst url = getPlaygroundUrl({\n  config: {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  },\n});\n\nconsole.log(url);\n```\n\n----------------------------------------\n\nTITLE: NPM Module Integration in Gleam\nDESCRIPTION: Demonstrates how to use NPM and JSR modules as external functions in Gleam code.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/gleam.mdx#2025-04-13_snippet_4\n\nLANGUAGE: gleam\nCODE:\n```\nimport gleam/io\n\n// npm module (https://www.npmjs.com/package/uuid)\n@external(javascript, \"npm:uuid\", \"v4\")\npub fn uuid() -> String\n\n// jsr module (https://jsr.io/@kwhinnery/yassify)\n@external(javascript, \"jsr:@kwhinnery/yassify\", \"yassify\")\npub fn yassify(str: String) -> String\n\npub fn main() {\n io.println(uuid())\n io.println(yassify(\"Hello, World!\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a LiveCodes Playground Explicitly\nDESCRIPTION: Demonstrates how to use the load() method to explicitly load a playground when the loading option is set to 'click'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  await playground.load();\n  // playground loaded\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration for a LiveCodes Playground\nDESCRIPTION: Shows how to set a new configuration for a LiveCodes playground, effectively loading a new project with specified content.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  const config = {\n    markup: {\n      language: 'html',\n      content: 'Hello World!',\n    },\n  };\n  const newConfig = await playground.setConfig(config);\n  // new project loaded\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Playground Using LiveCodes SDK in JavaScript\nDESCRIPTION: This code snippet shows how to create a read-only LiveCodes playground using the SDK. It imports the createPlayground function and sets up a playground with JavaScript template and read-only configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/read-only.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', { template: 'javascript', config: { readonly: true } });\n```\n\n----------------------------------------\n\nTITLE: Basic React Component with Default Export\nDESCRIPTION: A simple React component that renders a heading and is exported as the default export, enabling auto-rendering in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_0\n\nLANGUAGE: react\nCODE:\n```\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with JSX\nDESCRIPTION: Example showing how to use Tailwind CSS utility classes with JSX in LiveCodes. Tailwind directives are added to the style editor to enable utility class generation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function() {\n  return <h1 className=\"text-3xl font-bold text-gray-500 text-center m-4\">Hello, Tailwind CSS!</h1>;\n}\n\n```\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n```\n\n----------------------------------------\n\nTITLE: Importing and Using LiveCodes Component with BBCode in JSX/TSX\nDESCRIPTION: Demonstrates how to import the LiveCodes component and configure it to use BBCode. The example shows setting up a configuration object with BBCode content and rendering the LiveCodes component with compiled view open.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/bbcode.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n\nexport const config = {markup: {language: 'bbcode', content: '[i]Text[/i]'}};\n\nexport const params = {compiled: 'open'};\n\n<LiveCodes config={config} params={params}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Module Imports and External Dependencies in Vue\nDESCRIPTION: Shows how to import and use external npm modules and stylesheets in Vue components.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n   import { ref } from 'vue';\n   import confetti from 'canvas-confetti';\n   import \"bootstrap/dist/css/bootstrap.css\"\n\n   const count = ref(0);\n   function increment() {\n     count.value++;\n     confetti();\n   }\n</script>\n\n<template>\n  <div class=\"m-5 text-center\">\n    <p>You clicked {{ count }} times.</p>\n    <button @click=\"increment()\">Click me</button>\n  </div>\n</template>\n\n```\n\n----------------------------------------\n\nTITLE: Pre-processor Integration with Vue SFC\nDESCRIPTION: Example of using multiple pre-processors (Pug, TypeScript, SCSS) within a Vue component using lang attributes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<template lang=\"pug\">\nh1 {{ msg }}\n</template>\n\n<script lang=\"ts\" setup>\n  const msg: string = 'Hello!'\n</script>\n\n<style lang=\"scss\">\n  $primary-color: #666;\n  body {\n    color: $primary-color;\n  }\n</style>\n\n```\n\n----------------------------------------\n\nTITLE: JSX Implementation in Vue Components\nDESCRIPTION: Demonstrates using JSX in Vue render functions with state management and event handling.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  export default {\n    data() {\n      return {\n        counter: 0,\n        align: \"center\",\n      };\n    },\n    methods: {\n      increment() {\n        this.counter += 1;\n      },\n    },\n    render() {\n      return (\n        <div class=\"container\">\n          <h1>Hello, Vue!</h1>\n          <p>You clicked {this.counter} times.</p>\n          <button onClick={this.increment}>Click me</button>\n        </div>\n      );\n    },\n  };\n</script>\n\n<style scoped>\n  .container,\n  .container button {\n    text-align: v-bind(\"align\");\n    font: 1em sans-serif;\n  }\n  .logo {\n    width: 150px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Explicit React DOM Rendering\nDESCRIPTION: A React component that is manually rendered using React DOM's createRoot method. This approach provides more control over the rendering process.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_1\n\nLANGUAGE: react\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\n\nfunction App() {\n  return <h1>Hello World!</h1>;\n}\n\nconst root = createRoot(document.querySelector(\"#root\"));\nroot.render(<App />);\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"></div>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling Example\nDESCRIPTION: Shows how to apply custom styles to the LiveCodes component\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/vue.mdx#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import LiveCodes from 'livecodes/vue';\n\n  const style = {\n    margin: 'auto',\n    width: '80%',\n  };\n</script>\n\n<template>\n  <LiveCodes :style=\"style\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing SQL Result as Objects in JavaScript (LiveCodes)\nDESCRIPTION: Shows how to use the livecodes.sql.getResultAsObjects() method to retrieve SQL query results as an array of objects in the result page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/postgresql.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  livecodes.sql\n    .getResultAsObjects()\n    .then((result) => {\n      console.log(result);\n      // [[{ columnA: 'row 1 - value A', columnB: 'row 1 - value B' }, { columnA: 'row 2 - value A', columnB: 'row 2 - value B' }]]\n    })\n    .catch((error) => {\n      console.error(error);\n      // 'error message'\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing SQL Result as JSON Object in JavaScript\nDESCRIPTION: Demonstrates how to use the livecodes.sql.getResult() method to access the SQL query result as a JSON object. The result contains column names and values for each query.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/sql.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  livecodes.sql\n    .getResult()\n    .then((result) => {\n      console.log(result);\n      // { data: [{ columns: ['columnA', 'columnB'], values: [['row 1 - value A', 'row 1 - value B'], ['row 2 - value A', 'row 2 - value B']] }] }\n    })\n    .catch((error) => {\n      console.error(error);\n      // 'error message'\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: R Demo with Iris Dataset Visualization\nDESCRIPTION: A complete example that displays the iris dataset and creates a scatter plot of petal width vs length, colored by species. The output and plots are separated into different containers.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nhead(iris)\n\nPW <- iris$Petal.Width\nPL <- iris$Petal.Length\nspecies <- iris$Species\nspeciesID <- as.numeric(species)\n\nplot(PL, PW,\n     pch = speciesID,\n     col = speciesID,\n     main = \"Petal Width vs Length\",\n     xlab = \"Petal Length\",\n     ylab = \"Petal Width\")\nlegend(\"topleft\",\n       levels(species),\n       pch = 1:3,\n       col = 1:3)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Function from Data URL in JavaScript\nDESCRIPTION: This example shows how to import a function from a data URL and use it in JavaScript. It imports the 'sayHello' function from a base64-encoded data URL and calls it with an argument.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/data-urls.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sayHello } from 'data:text/javascript;charset=UTF-8;base64,ZXhwb3J0IGNvbnN0IHNheUhlbGxvID0gKG5hbWUpID0+ICdIZWxsbyAnICsgbmFtZTs=';\n\nconsole.log(sayHello('Ali'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom React Settings in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure custom settings for React in LiveCodes. It shows how to disable auto-rendering for React components.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LiveCodes Component with Console Open Parameter\nDESCRIPTION: Demonstrates how to use the LiveCodes component with the console pane opened and JavaScript code that logs 'hello' to the console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tools-pane.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes params={{ console: 'open', js: \"console.log('hello')\" }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Integrating LiveCodes SDK in Svelte Component\nDESCRIPTION: This snippet demonstrates how to use the LiveCodes JS SDK within a Svelte component. It initializes a playground with custom options, handles component lifecycle, and provides cleanup on unmount.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/svelte.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { onMount } from 'svelte';\n  import { createPlayground } from 'livecodes';\n\n  // Embed Options\n  const options = {\n    params: {\n      html: '<h1>Hello World!</h1>',\n      css: 'h1 {color: blue;}',\n      js: 'console.log(\"Hello, Svelte!\")',\n      console: 'open',\n    },\n  };\n\n  let container;\n  let playground = $state(null);\n  onMount(() => {\n    createPlayground(container, options).then((p) => {\n      playground = p; // now the SDK is available\n    });\n    // cleanup when the component is destroyed\n    return () => playground?.destroy();\n  });\n</script>\n\n<div bind:this=\"{container}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Import Maps in LiveCodes Configuration (JSON)\nDESCRIPTION: This snippet shows how to configure custom import maps for module resolution in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"moment\": \"https://cdn.jsdelivr.net/npm/moment@2.29.4/dist/moment.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Settings for CSS Modules in LiveCodes\nDESCRIPTION: This JSON snippet shows how to configure custom settings for CSS Modules in LiveCodes, including options for exporting globals and naming conventions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cssmodules\": {\n    \"exportGlobals\": true,\n    \"localsConvention\": \"camelCaseOnly\",\n    \"addClassesToHTML\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Digital Signal Waveforms with WaveDrom in HTML\nDESCRIPTION: Implementation of a digital signal waveform diagram using WaveDrom's JSON format. The diagram shows clock, bus, and wire signals with their respective timing and is rendered as an SVG.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"wavedrom.svg\"></div>\n<script type=\"application/diagram-wavedrom\" data-output=\"wavedrom.svg\">\n  { signal : [\n    { name: \"clk\",  wave: \"p......\" },\n    { name: \"bus\",  wave: \"x.34.5x\",   data: \"head body tail\" },\n    { name: \"wire\", wave: \"0.1..0.\" },\n  ]}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration from a LiveCodes Playground\nDESCRIPTION: Demonstrates how to retrieve the current configuration object from a LiveCodes playground using the getConfig() method.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  const config = await playground.getConfig();\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Attributes in LiveCodes (JavaScript/JSON)\nDESCRIPTION: This example demonstrates how to set HTML attributes for the result page in LiveCodes using either an object or a string format.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ lang: \"en\", class: \"dark\" } // or\n'lang=\"en\" class=\"dark\"'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Svelte Component with Preprocessors\nDESCRIPTION: This snippet shows a Svelte component using Pug for markup, TypeScript for scripting, and SCSS for styling. It demonstrates how different preprocessors can be used within a single Svelte component in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<template lang=\"pug\">\nh1 {msg}\n</template>\n\n<script lang=\"ts\">\n  let msg: string = 'Hello!'\n</script>\n\n<style lang=\"scss\">\n  $primary-color: #555;\n  h1 {\n    color: $primary-color;\n  }\n</style>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Broadcast Token for Server Authorization\nDESCRIPTION: This JavaScript code snippet shows how to set a user token for authorization with a broadcast server. The token is saved for the current user across app reloads and is included in all broadcast requests.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/broadcast.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait livecodes.exec('setBroadcastToken', 'my-token');\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules in Vue Components\nDESCRIPTION: Shows implementation of CSS Modules in Vue components using the module attribute, which exposes CSS classes via the $style object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <p :class=\"$style.red\">This should be red</p>\n</template>\n\n<style module>\n.red {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component\nDESCRIPTION: Import statement for the LiveCodes component from the project source directory.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/compiled-code.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Converting Bare Module Imports to ESM Imports in JavaScript\nDESCRIPTION: This snippet demonstrates how bare module imports are converted to ESM imports when exporting to CodePen or JSFiddle. It shows the transformation of a React import statement.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/export.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'https://cdn.skypack.dev/react';\n```\n\n----------------------------------------\n\nTITLE: Complete LiveCodes Integration Example\nDESCRIPTION: Full HTML example showing LiveCodes integration with version pinning for SDK, app URL, and package imports.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/permanent-url.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n<script type=\"module\">\n  import { createPlayground } from 'https://cdn.jsdelivr.net/npm/livecodes@${siteConfig.customFields.sdkVersion}';\n\n  createPlayground('#container', {\n    appUrl: 'https://v${siteConfig.customFields.appVersion}.livecodes.io',\n    config: {\n        script: {\n            language: 'javascript',\n            content: 'import lodash from \"lodash@4.17.21\";\\\\nconsole.log(lodash.VERSION);',\n        },\n        activeEditor: 'script',\n        tools: { status: 'open', active: 'console' },\n    },\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Manual Rendering with React DOM\nDESCRIPTION: Example showing how to explicitly render a React component using React DOM's createRoot API. This approach gives more control over where and how components are rendered.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from \"react-dom/client\";\n\nfunction App() {\n  return <h1>Hello World!</h1>;\n}\n\nconst root = createRoot(document.querySelector(\"#root\"));\nroot.render(<App />);\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"root\"></div>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styles to LiveCodes Component\nDESCRIPTION: Shows how to apply custom inline styles to the LiveCodes playground container using the style prop. These styles override the default styles provided by the SDK.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from 'livecodes/react';\n\nconst style = {\n  margin: 'auto',\n  width: '80%',\n};\nexport const Playground = () => <LiveCodes style={style} />;\n```\n\n----------------------------------------\n\nTITLE: Installing LiveCodes via NPM\nDESCRIPTION: Command to install LiveCodes package from npm registry.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/getting-started.mdx#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install livecodes\n```\n\n----------------------------------------\n\nTITLE: Logging and Evaluating in TypeScript Console\nDESCRIPTION: Demonstrates various console methods in TypeScript, including logging variables, objects, tables, and warnings. It also shows how variables can be accessed and evaluated in the console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/console.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 5;\nconsole.log('x:', x);\nconsole.log({x, y: 6});\nconsole.table({x, y: 6});\nconsole.warn('take care!');\nconst z = x * y;\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Stylesheets in React\nDESCRIPTION: Shows how to import CSS stylesheets in a React component. The imported stylesheets are added as link elements in the page head.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_6\n\nLANGUAGE: react\nCODE:\n```\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport default () => <h1 className=\"m-5 text-center\">Hello World!</h1>;\n\n```\n\n----------------------------------------\n\nTITLE: Enabling AI Code Assistant in LiveCodes Configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to enable the AI code assistant in LiveCodes using the configuration object. The 'enableAI' property is set to true in the config object passed to the createPlayground function.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/ai.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', {\n  config: {\n    // highlight-next-line\n    enableAI: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveCodes in Codeblock Display Mode with React\nDESCRIPTION: This code snippet demonstrates how to use the LiveCodes component in codeblock display mode. It imports the LiveCodes component and sets the configuration to use codeblock mode with a React template.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/examples/display-modes/codeblock.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../../src/components/LiveCodes.tsx';\n\n<LiveCodes config={{mode:'codeblock'}} template=\"react\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Configuration Example with Markdown\nDESCRIPTION: Demonstrates setting up LiveCodes with custom configuration for markdown content and view options\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/vue.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import LiveCodes from 'livecodes/vue';\n\n  const config = {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  };\n</script>\n\n<template>\n  <LiveCodes :config=\"config\" view=\"result\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Root Element for Svelte Application\nDESCRIPTION: This HTML snippet demonstrates how to specify a custom root element for mounting a Svelte application in LiveCodes. It uses an element with the id 'livecodes-app' as the mounting point.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Custom Root Element</h1>\n<div id=\"livecodes-app\"></div>\n<p>...other page content</p>\n\n```\n\n----------------------------------------\n\nTITLE: Dynamic Art-template Example\nDESCRIPTION: This example shows dynamic usage of art-template with data provided at runtime through JavaScript.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/art-template.mdx#2025-04-13_snippet_5\n\nLANGUAGE: art-template\nCODE:\n```\nHello {{name}}!\n```\n\n----------------------------------------\n\nTITLE: Height Configuration Example\nDESCRIPTION: Shows how to set custom height for the LiveCodes playground container\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/vue.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import LiveCodes from 'livecodes/vue';\n</script>\n\n<template>\n  <LiveCodes height=\"500px\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: PHP-JavaScript DOM Interaction Example\nDESCRIPTION: Demonstrates PHP interaction with JavaScript DOM using VRZNO extension, including reading and modifying DOM elements and console logging\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/php-wasm.mdx#2025-04-13_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// read from DOM\n$oldTitle = vrzno_eval('document.querySelector(\"#title\").innerText');\necho $oldTitle;\n\n$newTitle = 'Changed@' . date('h:i:s');\n\n// set DOM properties\nvrzno_eval('document.querySelector(\"#title\").innerText = \"' . $newTitle . '\"' );\n\n// run console.log\nvrzno_eval('console.log(\"Hello, World!\")');\n```\n\n----------------------------------------\n\nTITLE: Configuring EJS Compiler Options in Custom Settings\nDESCRIPTION: JSON configuration showing how to pass custom options to the EJS compiler. This example changes the default delimiter from '<%= %>' to '<% %>'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/ejs.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ejs\": {\n    \"delimiter\": \"%\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Panel Display in LiveCodes\nDESCRIPTION: Shows how to control panel visibility and layout with options for full screen display, line/column navigation, and zoom levels using the show() method.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container').then(async (playground) => {\n  const delay = (duration) =>\n    new Promise((resolve) => {\n      setTimeout(resolve, duration);\n    });\n\n  await playground.show('toggle-result');\n  await delay(2000);\n  await playground.show('style');\n  await delay(2000);\n  await playground.show('result', { full: true });\n  await delay(2000);\n  await playground.show('script');\n  await delay(2000);\n  await playground.show('result', { zoom: 0.5 });\n  await delay(2000);\n  await playground.show('console', { full: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS with React\nDESCRIPTION: Example of using Tailwind CSS with React in LiveCodes. The utility classes are processed by Tailwind CSS to generate the final styles.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_8\n\nLANGUAGE: react\nCODE:\n```\nexport default function() {\n  return <h1 className=\"text-3xl font-bold text-gray-500 text-center m-4\">Hello, Tailwind CSS!</h1>;\n}\n\n```\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n```\n\n----------------------------------------\n\nTITLE: Creating a LiveCodes Playground with Options\nDESCRIPTION: Demonstrates how to use the createPlayground function with configuration options to embed a LiveCodes playground in a container element.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPlayground, type EmbedOptions } from 'livecodes';\n\nconst options: EmbedOptions = {\n  // appUrl: ...\n  // config: ...\n  // headless: ...\n  // import: ...\n  // loading: ...\n  // params: ...\n  // template: ...\n};\n\ncreatePlayground('#container', options).then((playground) => {\n  // the `playground` object exposes the SDK methods\n  // e.g. playground.run()\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings for React Native in LiveCodes\nDESCRIPTION: Example of custom settings JSON configuration that can be added to disable auto-rendering for React Native components in LiveCodes. The settings are passed to the TypeScript compiler as compiler options.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react-native.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LiveCodes Version Using SDK Exec Method\nDESCRIPTION: This JavaScript snippet demonstrates how to use the LiveCodes SDK exec method to display the current version of LiveCodes in the browser console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// in browser console of full app (e.g. https://livecodes.io)\nawait livecodes.exec('showVersion');\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Type in LiveCodes\nDESCRIPTION: Configuration option to select which code editor to use in LiveCodes. Options include Monaco, CodeMirror, CodeJar, or auto. The default behavior depends on device type and mode.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### `editor`\n\nType: [`\"monaco\" | \"codemirror\" | \"codejar\" | \"auto\" | undefined`](../api/interfaces/Config.md#editor)\n\nDefault: `undefined`\n\nSelects the [code editor](../features/editor-settings.mdx#code-editor) to use.\n\nIf `undefined` (the default):<br />\nMonaco editor is used on desktop,<br />\nCodeMirror is used on mobile and in `simple` mode,<br />\nwhile CodeJar is used in [`codeblock` mode](../features/display-modes.mdx#codeblock), in [`lite` mode](../features/lite.mdx) and in [`readonly`](#readonly) playgrounds.\n\nIf set to `auto`, Monaco editor is used on desktop and CodeMirror is used on mobile regardless of other settings.\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Stylesheets in JSX\nDESCRIPTION: Example showing how to import CSS stylesheets in JSX. The imported stylesheet is added as a link tag in the document head.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport default () => <h1 className=\"m-5 text-center\">Hello World!</h1>;\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript React Component with Sucrase\nDESCRIPTION: Example TypeScript code demonstrating a React component using Sucrase compilation. Shows type annotations and JSX syntax that Sucrase will transform.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/sucrase.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Greet = (name: string) => <>Hello {name}!</>;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Data for Pre-rendered Haml Templates in JSON\nDESCRIPTION: JSON configuration for providing template data to Haml in pre-rendered mode. This sets the value of the 'name' expression that can be used in the Haml template.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/haml.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX with React's New Transform\nDESCRIPTION: Example showing that React's new JSX transform is used in LiveCodes, eliminating the need to import React explicitly when using JSX.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// this is not needed:\n// import React from 'react';\n\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Playground with Vue SDK Component\nDESCRIPTION: This code snippet demonstrates how to use the LiveCodes Vue component. It imports the Vue component from the LiveCodes package and creates a playground with Markdown content, setting the view to display only the result.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/README.md#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup>\n  import LiveCodes from 'livecodes/vue';\n\n  const config = {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  };\n</script>\n\n<template>\n  <LiveCodes :config=\"config\" view=\"result\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Specifying Root Element for React Rendering\nDESCRIPTION: Example demonstrating how to specify a custom root element for React component rendering by using the 'livecodes-app' ID.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"livecodes-app\">Loading...</div>\n```\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return <h1>Hello World!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Default Presets in LiveCodes\nDESCRIPTION: Default JSON configuration used for Babel in LiveCodes. It includes presets for env (with modules set to false), TypeScript, and React to ensure compatibility across different environments.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/babel.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"babel\": { \"presets\": [[\"env\", { \"modules\": false }], \"typescript\", \"react\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Class to LiveCodes Component\nDESCRIPTION: Shows how to add custom CSS classes to the LiveCodes playground container using the className prop, which allows for styling the component within your application's CSS.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from 'livecodes/react';\n\nexport const Playground = () => <LiveCodes className=\"centered\" />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Rendering Mode for Haml Templates in JSON\nDESCRIPTION: JSON configuration to enable dynamic rendering mode for Haml templates by setting the 'prerender' property to false. This allows runtime evaluation of template expressions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/haml.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveCodes Component for Editor Mode in React\nDESCRIPTION: This code snippet demonstrates how to import and use the LiveCodes component with specific configuration options. It sets the display mode to 'editor' and uses the 'react' template.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/examples/display-modes/editor.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveCodes config={{mode:'editor'}} template=\"react\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Importing Compiled CSS as String in JavaScript\nDESCRIPTION: Shows how to import the compiled and processed CSS from the style editor as a string in JavaScript. This can be useful for dynamic style manipulation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/css.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport styles from './style.css';\n\nconsole.log(styles); // => compiled CSS as string\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Twig Templates with Custom Settings\nDESCRIPTION: JSON configuration for pre-rendered Twig templates where expression values are supplied in advance through custom settings and evaluated during compilation. This example provides the value for the 'name' expression.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/twig.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings for Pre-rendered Templates in Vento\nDESCRIPTION: JSON configuration for supplying data values to template expressions in pre-rendered mode. This example provides the value 'LiveCodes' for the expression 'name'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vento.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Pug Template Data in JSON\nDESCRIPTION: Custom settings JSON configuration for providing data to Pug templates in pre-rendered mode. This example supplies the value for the 'name' expression used in the template.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/pug.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Playground Links with getPlaygroundUrl\nDESCRIPTION: Shows how to use the getPlaygroundUrl function to generate a URL to a LiveCodes playground with specific configuration, which can be used as a link target.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<pre><code class=\"language-markdown\"># Hello World!</code></pre>\n<a href=\"#\" id=\"playground-link\" target=\"_blank\">Open in playground</a>\n<script type=\"module\">\n  // highlight-next-line\n  import { getPlaygroundUrl } from 'livecodes';\n  const config = {\n    markup: {\n      language: 'markdown',\n      content: '# Hello World!',\n    },\n  };\n  // highlight-next-line\n  const url = getPlaygroundUrl({ config });\n  document.querySelector('#playground-link').href = url;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Split View in LiveCodes\nDESCRIPTION: This code demonstrates how to configure the LiveCodes component to use the 'split' view, where both the code editor and result page are visible. This is the default view for the playground.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/default-view.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes config={{ view: 'split' }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Greeter Class Implementation\nDESCRIPTION: A TypeScript class implementation that demonstrates how to create a Greeter class with private properties and public methods. This would be the source code that gets compiled to JavaScript and generates type definitions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/intellisense.mdx#2025-04-13_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport class Greeter {\n  private morningGreetings = ['Good morning', 'Have a good day', 'How are you today?'];\n  private eveningGreetings = ['Good evening', 'Good night', 'Sleep well'];\n\n  private randomSelector(array: string[]) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n\n  public morning() {\n    return this.randomSelector(this.morningGreetings);\n  }\n\n  public evening() {\n    return this.randomSelector(this.eveningGreetings);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React from Specific CDN\nDESCRIPTION: This example shows how to import the useState hook from React using a specific CDN provider (esm.sh) in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'esm.sh:react';\n```\n\n----------------------------------------\n\nTITLE: Accessing SQL Result as Array of Objects in JavaScript\nDESCRIPTION: Shows how to use the livecodes.sql.getResultAsObjects() method to get the SQL query result as an array of objects, where each object represents a row with column names as keys.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/sql.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  livecodes.sql\n    .getResultAsObjects()\n    .then((result) => {\n      console.log(result);\n      // [[{ columnA: 'row 1 - value A', columnB: 'row 1 - value B' }, { columnA: 'row 2 - value A', columnB: 'row 2 - value B' }]]\n    })\n    .catch((error) => {\n      console.error(error);\n      // 'error message'\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Mermaid Diagram Implementation in HTML\nDESCRIPTION: Shows how to create a basic flow chart using Mermaid diagrams by defining a target div and script element with diagram syntax.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"my-diagram\"></div>\n\n<script type=\"application/diagram-mermaid\" data-output=\"my-diagram\">\n  graph TD\n    A-->B\n    A-->C\n    B-->D\n    C-->D\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveCodes Component with Result Display Mode for React Template\nDESCRIPTION: This code snippet demonstrates how to import and configure the LiveCodes component to use the 'result' display mode. It sets the mode property to 'result' and specifies 'react' as the template, which will show only the output of the React code.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/examples/display-modes/result.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes config={{mode:'result'}} template=\"react\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Liquid Custom Delimiters\nDESCRIPTION: JSON configuration example showing how to customize Liquid template delimiters through custom settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/liquid.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"liquid\": {\n    \"outputDelimiterLeft\": \"<%=\",\n    \"outputDelimiterRight\": \"%>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LiveCodes Component with Parameters in React\nDESCRIPTION: Example of using the LiveCodes component in React with specific parameters to configure JavaScript code and console display.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes params={{ js: \"console.log('Hello World!')\", console: 'open' }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Types from LiveCodes\nDESCRIPTION: Shows how to import TypeScript types from the LiveCodes library for better type checking and intellisense.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { EmbedOptions, Playground } from 'livecodes';\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TSX\nDESCRIPTION: This snippet imports the LiveCodes component from a relative path. It's likely used to render the LiveCodes playground in a React or similar framework application.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/default-view.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Code Directly in URL Parameters\nDESCRIPTION: Example of using a language code (js) directly as a query parameter to specify code content for that language.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nhttps://livecodes.io?js=console.log('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Importing External Code into LiveCodes from GitHub\nDESCRIPTION: Shows how to use the import embed option to load code from a GitHub directory into a LiveCodes playground.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes import=\"https://github.com/bradtraversy/50projects50days/tree/master/progress-steps\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Using LiveCodes Component with Read-Only Configuration in JSX\nDESCRIPTION: This example demonstrates how to use the LiveCodes component in JSX with read-only mode enabled. It sets the template to JavaScript and applies the read-only configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/read-only.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveCodes template=\"javascript\" config={{ readonly: true }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Package with Different Import Name (setuptools) in Pyodide\nDESCRIPTION: This example shows how to use micropip to explicitly install the setuptools package and then import pkg_resources from it. It demonstrates the process for packages where the import name differs from the package name.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/python-wasm.mdx#2025-04-13_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport micropip\nawait micropip.install(\"setuptools\")\n\nimport pkg_resources\nprint(pkg_resources.get_distribution(\"setuptools\").version)\n\n```\n\n----------------------------------------\n\nTITLE: Basic MJML Email Template Structure Example\nDESCRIPTION: Simple MJML example showing the basic structure of an email template with mjml, mj-body, mj-section, mj-column, and mj-text elements to display a 'Hello World!' message.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/mjml.mdx#2025-04-13_snippet_1\n\nLANGUAGE: mjml\nCODE:\n```\n<mjml>\n\t<mj-body>\n\t\t<mj-section>\n\t\t\t<mj-column>\n\t\t\t\t<mj-text>\n\t\t\t\t\tHello World!\n\t\t\t\t</mj-text>\n\t\t\t</mj-column>\n\t\t</mj-section>\n\t</mj-body>\n</mjml>\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings for SQL in LiveCodes\nDESCRIPTION: Example of custom settings for SQL in LiveCodes, including specifying a remote database URL, SQL script URLs, and custom parameters.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/sql.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postgresql\": {\n    \"dbURL\": \"https://myserver.com/sqlite.db\",\n    \"scriptURLs\": [\"https://myserver.com/sql.sql\"],\n    \"params\": {\n      \"param1\": \"value1\",\n      \"param2\": \"value2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Gleam Standard Library Usage\nDESCRIPTION: Demonstrates basic usage of Gleam's standard library with string manipulation and console output.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/gleam.mdx#2025-04-13_snippet_0\n\nLANGUAGE: gleam\nCODE:\n```\nimport gleam/io\nimport gleam/string\n\npub fn main() {\n  \"hello world!\"\n  |> string.uppercase\n  |> io.println\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Editor Types in LiveCodes\nDESCRIPTION: Defines the editor types that support Vue.js in LiveCodes. The 'script' and 'markup' editors can be used for Vue components.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`script`, `markup`\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Module in CSS\nDESCRIPTION: Demonstrates how to import a CSS module using the @import rule. This example imports the GitHub Markdown CSS stylesheet.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/css.mdx#2025-04-13_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import 'github-markdown-css/github-markdown.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Type Definitions in JSON Settings\nDESCRIPTION: JSON configuration that demonstrates how to provide custom type definitions for modules in the LiveCodes standalone app. The types property maps module names to URLs of their type definition files.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/intellisense.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"my-module\": \"https://cdn.jsdelivr.net/npm/my-module@1.0.0/types/my-module.d.ts\",\n    \"my-other-module\": \"https://my-website.com/my-other-module/my-other-module.d.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure After CSS Modules Processing\nDESCRIPTION: This HTML snippet demonstrates how the structure looks after CSS Modules processing, with generated class names injected.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"page\">\n  <h1>Page Title</h1>\n  <p class=\"small-text _small-text_1ygro_19 _text_1ygro_9\">\n    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Dolore earum blanditiis quidem non\n    beatae ipsam autem maiores ut et delectus unde repudiandae, repellendus aut. Aspernatur\n    similique facere facilis minima tempora.\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Module with Full URL in CSS\nDESCRIPTION: Shows how the bare module import is converted to a full URL from a CDN (in this case, unpkg) when processed by LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/css.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'https://unpkg.com/github-markdown-css/github-markdown.css';\n```\n\n----------------------------------------\n\nTITLE: Prefilling Code with Config Object in LiveCodes\nDESCRIPTION: Demonstrates using the config embed option to pre-fill HTML and CSS content in a LiveCodes playground component.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes\n  config={{\n    markup: { language: 'html', content: '<h1>Hello World!</h1>' },\n    style: { language: 'css', content: 'h1 { color: blue; }' },\n  }}\n></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for LiveCodes React Component\nDESCRIPTION: Shows how to use the LiveCodes React component with TypeScript, including importing the Props type for proper type checking. This allows for type-safe configuration of the playground options.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes, { type Props } from 'livecodes/react';\n\nconst options: Props = {\n  // embed options\n};\nexport const Playground = () => <LiveCodes {...options} />;\n```\n\n----------------------------------------\n\nTITLE: Specifying Container for R Output\nDESCRIPTION: Basic example that demonstrates how to specify a container element for R output and plots using the livecodes.r.config object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n\n<script>\n  livecodes.r.config = {\n    container: document.querySelector('#container'),\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading R Packages Example using dplyr\nDESCRIPTION: Demonstrates how to load an R package (dplyr) and use it to filter data from the starwars dataset. Packages are loaded using the library() function and are served from a CRAN-like repository.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlibrary(dplyr)\n\nstarwars %>% \n  filter(species == \"Droid\")\n\n```\n\n----------------------------------------\n\nTITLE: Importing GitHub Module for Array Flattening\nDESCRIPTION: This snippet demonstrates how to import a module directly from a GitHub repository and use it to flatten an array in the browser console.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/module-resolution.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { flatten } from 'https://github.com/remeda/remeda/blob/master/src/flatten.ts';\n\nconsole.log(flatten([[1, 2], [3], [4, 5]]));\n```\n\n----------------------------------------\n\nTITLE: Importing Template List Component\nDESCRIPTION: React/JavaScript import statement for the TemplateList component used to display available templates.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/templates.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport TemplateList from '../../src/components/TemplateList';\n```\n\n----------------------------------------\n\nTITLE: Rendering Advanced Topics DocCardList in MDX for LiveCodes Documentation\nDESCRIPTION: This code snippet uses Docusaurus components and hooks to create a filtered list of documentation cards for advanced topics. It imports the DocCardList component and useCurrentSidebarCategory hook, then renders the DocCardList with filtered items from the current sidebar category.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items.filter(item => item.docId !== 'languages/index')}/>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Semicolon Usage in LiveCodes Formatter\nDESCRIPTION: Boolean configuration option that determines whether Prettier code formatter should use semicolons. Default is true, adding semicolons where appropriate.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### `semicolons`\n\nType: [`boolean`](../api/interfaces/Config.md#semicolons)\n\nDefault: `true`\n\nConfigures Prettier [code formatter](../features/code-format.mdx) to use [semi-colons](https://prettier.io/docs/en/options.html#semicolons).\n```\n\n----------------------------------------\n\nTITLE: Using SDK with Self-Hosted LiveCodes\nDESCRIPTION: JavaScript example showing how to initialize the LiveCodes SDK with a custom appUrl pointing to a self-hosted instance of the application.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/self-hosting.mdx#2025-04-13_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\nconst options = {\n  appUrl: 'https://playground.my-website.com',\n  template: 'react',\n  // other embed options\n};\ncreatePlayground('#container', options);\n```\n\n----------------------------------------\n\nTITLE: Using styled-components with React\nDESCRIPTION: Demonstrates how to use styled-components, a CSS-in-JS library, with React in LiveCodes. This approach allows defining component styles directly in JavaScript.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_9\n\nLANGUAGE: react\nCODE:\n```\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n text-align: center;\n font-family: sans-serif;\n color: palevioletred;\n`;\n\nexport default function () {\n return <Title>Hello, styled-components!</Title>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: String-level Translation in TypeScript with HTML Support\nDESCRIPTION: Example of string-level translation in TypeScript files using the translateString function with HTML content. Includes the isHTML flag to properly handle HTML tags during translation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.deps.translateString(\n  'namespace:file.key1.subkey1',\n  'default <strong>value</strong>, {{interpol}}',\n  {\n    isHTML: true,\n    interpol: 'abc',\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Placeholder Sponsor Logo Box in React\nDESCRIPTION: A React JSX component that displays a placeholder for sponsor logos with responsive styling. The component uses inline styles with CSS variables for theming compatibility and creates a flexible container with centered content.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sponsor.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n  style={{\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: ' 60px',\n    width: '300px',\n    border: '1px solid var(--ifm-table-border-color)',\n    borderRadius: '3px',\n    backgroundColor: 'var(--ifm-color-emphasis-100)',\n    margin: '0.5em',\n    marginBottom: '1.5em',\n    color: 'var(--ifm-color-content-secondary)',\n  }}\n>\n  Your logo here\n</div>\n```\n\n----------------------------------------\n\nTITLE: Separating R Output and Plots into Different Containers\nDESCRIPTION: Advanced example showing how to place R text output and plot elements in separate containers by setting container to null and manually handling the output and plots after evaluation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h2>Output</h2>\n<div id=\"output\"></div>\n<h2>Plots</h2>\n<div id=\"plots\"></div>\n\n<script type=\"module\">\n  livecodes.r.config = {\n    container: null,\n  };\n\n  await livecodes.r.evaluated;\n\n  const pre = document.createElement('pre');\n  pre.innerHTML = livecodes.r.output;\n  document.querySelector('#output').appendChild(pre);\n\n  document.querySelector('#plots').appendChild(...livecodes.r.plots);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Modules Classes\nDESCRIPTION: This CSS snippet demonstrates how to define classes using CSS Modules syntax, including global styles, composition, and pseudo-classes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:global .page {\n  padding: 20px;\n}\n\n.text {\n  color: black;\n  font-family: sans-serif;\n}\n\n.small-text {\n  composes: text;\n  font-size: 20px;\n}\n\n.large-text {\n  composes: text;\n  font-size: 40px;\n}\n\n.large-text:hover {\n  color: red;\n}\n\n.title {\n  composes: large-text;\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Service Provider Logos in JSX\nDESCRIPTION: This code snippet renders a grid of logos for various service providers used by LiveCodes. It uses JSX syntax with inline styles to create a flexible, centered layout of linked images.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/credits.mdx#2025-04-13_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<div\n  style={{\n    backgroundColor: '#fff',\n    float: 'left',\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-evenly',\n  }}\n>\n  <p>\n    <a href=\"https://pages.cloudflare.com/\" target=\"_blank\" title=\"Cloudflare Pages\">\n      <img\n        alt=\"Cloudflare Pages\"\n        width=\"200\"\n        style={{ margin: '0.5em' }}\n        src=\"/docs/img/credits/cloudflare-pages.svg\"\n      ></img>\n    </a>\n  </p>\n  {/* Additional similar <p> elements for other service providers */}\n</div>\n<div style={{ clear: 'both' }}></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Element-level Translation in HTML with data-i18n Attributes\nDESCRIPTION: Examples of how to implement element-level translation in HTML files using the data-i18n attribute. Shows basic text content translation, property-specific translation, and innerHTML translation with HTML tags.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal-title\" data-i18n=\"assets.heading\">Assets</div>\n\n<input\n  id=\"search-assets\"\n  type=\"text\"\n  placeholder=\"Search\"\n  data-i18n=\"assets.search\"\n  data-i18n-prop=\"placeholder\"\n/>\n\n<div class=\"description\" data-i18n=\"backup.backup.desc\" data-i18n-prop=\"innerHTML\">\n  Backup LiveCodes data, so that it can be later restored on this or other devices. <br />\n  Please visit the\n  <a href=\"{{DOCS_BASE_URL}}features/backup-restore\" target=\"_blank\" rel=\"noopener\"\n    >documentations</a\n  >\n  for details.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Writing Jest Tests with Imported Functions in JavaScript\nDESCRIPTION: Shows how to import functions from the script editor and use them in Jest tests. This example includes testing both imported functions and globally assigned functions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport greet, { add } from './script'; // relative import without extension\n\ndescribe('test imported', () => {\n  test('greet', () => {\n    expect(greet()).toBe('Hello, World!');\n  });\n\n  test('add', () => {\n    expect(add(1, 2)).toBe(3);\n  });\n});\n\ndescribe('test global', () => {\n  test('multiply', () => {\n    expect(window.multiply(2, 3)).toBe(6);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using External Python Package (snowballstemmer) with Pyodide\nDESCRIPTION: This snippet demonstrates how to import and use the snowballstemmer package in Pyodide without explicit installation. It creates an English stemmer and applies it to a list of words.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/python-wasm.mdx#2025-04-13_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport snowballstemmer\nstemmer = snowballstemmer.stemmer('english')\nprint(stemmer.stemWords('go goes going gone'.split()))\n\n```\n\n----------------------------------------\n\nTITLE: Creating Internationalized Playground with SDK\nDESCRIPTION: Example of creating a LiveCodes playground with language configuration using the SDK. The appLanguage property can be set to 'auto' for automatic language detection or a specific language code.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/i18n.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPlayground } from 'livecodes';\n\ncreatePlayground('#container', { template: 'javascript', config: { appLanguage: 'auto' } });\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript\nDESCRIPTION: JavaScript code that sets template data for dynamic rendering by assigning values to window.livecodes.templateData before page load.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/nunjucks.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a User Class in Ruby\nDESCRIPTION: This snippet demonstrates creating a User class with attributes, methods, and instance creation. It also shows how to use the 'puts' method for console output.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/ruby.mdx#2025-04-13_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass User\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  def admin?\n    @name == 'Admin'\n  end\nend\n\nuser = User.new('Bob')\n\n# the output will go to the console\nputs user\nputs user.admin?\n\n```\n\n----------------------------------------\n\nTITLE: Loading a Template in LiveCodes\nDESCRIPTION: Shows how to use the template embed option to load a predefined React starter template into a LiveCodes playground.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes template=\"react\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Boolean Parameter Set to False Example\nDESCRIPTION: Shows how to explicitly set a boolean parameter to false in the URL query string.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n?lite=false\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to set template data dynamically at runtime by assigning an object to window.livecodes.templateData.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/art-template.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Running Tests for LiveCodes in Shell\nDESCRIPTION: Command to run linters, formatters, and unit tests for the LiveCodes project using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run test\n```\n\n----------------------------------------\n\nTITLE: HTML Structure Before CSS Modules Processing\nDESCRIPTION: This HTML snippet shows the structure before CSS Modules classes are applied, using the original class names.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"page\">\n  <h1>Page Title</h1>\n  <p class=\"small-text\">\n    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Dolore earum blanditiis quidem non\n    beatae ipsam autem maiores ut et delectus unde repudiandae, repellendus aut. Aspernatur\n    similique facere facilis minima tempora.\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: LiveCodes SDK as Svelte Action with Cleanup\nDESCRIPTION: This snippet demonstrates a more robust implementation of the LiveCodes SDK as a Svelte action. It includes proper cleanup when the component is unmounted, ensuring better resource management.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/svelte.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  import { createPlayground } from 'livecodes';\n  let options = {\n    // embed options\n  };\n\n  const livecodes = (node, opts) => {\n    let playground = $state(null);\n    const ready = new Promise(async (res) => {\n      playground = await createPlayground(node, opts);\n      res();\n    });\n    return { destroy: () => ready.then(() => playground?.destroy()) };\n  };\n</script>\n\n<div use:livecodes=\"{options}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom JSX Settings\nDESCRIPTION: JSON configuration example for customizing JSX compiler options. Shows how to disable auto-rendering and set custom JSX factory and fragment factory settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsx\": {\n    \"disableAutoRender\": true,\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sequence Diagram with Pintora in HTML\nDESCRIPTION: Implementation of a sequence diagram using Pintora's syntax. The diagram is rendered to an SVG output and shows interactions between entities with notes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"pintora.svg\"></div>\n<script type=\"application/diagram-pintora\" data-output=\"pintora.svg\">\n  sequenceDiagram\n    Frida-->>Georgia: Flowers are beautiful\n    @note over Frida,Georgia: Painters\n    @note right of Georgia: Right\n    @note left of Georgia\n    multiline\n    note\n    @end_note\n</script>\n```\n\n----------------------------------------\n\nTITLE: External JavaScript Function Implementation\nDESCRIPTION: JavaScript implementation of an external function to be used in Gleam code.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/gleam.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const hello = (str) => `Hello, ${str}!`;\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for LiveCodes in Shell\nDESCRIPTION: Command to start Storybook for LiveCodes on http://localhost:6006 and watch for changes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run storybook\n```\n\n----------------------------------------\n\nTITLE: Graphviz Flow Chart Implementation\nDESCRIPTION: Shows how to create a flow chart using Graphviz DOT language with subgraphs, custom node shapes and styling.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"flow-chart.svg\"></div>\n<script type=\"application/diagram-graphviz\" data-output=\"flow-chart.svg\">\n  digraph G {\n    node [shape=rect];\n\n    subgraph cluster_0 {\n      style=filled;\n      color=lightgrey;\n      node [style=filled,color=white];\n      a0 -> a1 -> a2 -> a3;\n      label = \"Hello\";\n    }\n\n    subgraph cluster_1 {\n      node [style=filled];\n      b0 -> b1 -> b2 -> b3;\n      label = \"World!\";\n      color=blue\n    }\n\n    start -> a0;\n    start -> b0;\n    a1 -> b3;\n    b2 -> a3;\n    a3 -> a0;\n    a3 -> end;\n    b3 -> end;\n\n    start [shape=Mdiamond];\n    end [shape=Msquare];\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Handlebars Template Data\nDESCRIPTION: Custom settings configuration for providing template data in pre-rendered mode. Sets the name variable that can be used in Handlebars expressions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/handlebars.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled JavaScript Greeter Class\nDESCRIPTION: The JavaScript output compiled from the TypeScript Greeter class. This shows how TypeScript code transpiles to JavaScript with constructor initialization of class properties.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/intellisense.mdx#2025-04-13_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nexport class Greeter {\n  constructor() {\n    this.morningGreetings = ['Good morning', 'Have a good day', 'How are you today?'];\n    this.eveningGreetings = ['Good evening', 'Good night', 'Sleep well'];\n  }\n  randomSelector(array) {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n  morning() {\n    return this.randomSelector(this.morningGreetings);\n  }\n  evening() {\n    return this.randomSelector(this.eveningGreetings);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Modules in JSX with State and Effects\nDESCRIPTION: Example demonstrating module imports in JSX, including React hooks, third-party libraries, and CSS stylesheets. Shows how to use useState and useEffect with confetti effects.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from \"react\";\nimport confetti from \"canvas-confetti\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    if (count > 0) {\n      confetti();\n    }\n  }, [count]);\n\n  return (\n    <div className=\"m-5 text-center\">\n      <p>You clicked {count} times.</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Main Svelte Component Importing Child Component\nDESCRIPTION: This snippet shows a main Svelte component in the markup editor importing a child component from the script editor. It demonstrates how multiple components can be used together in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\nimport Counter from './Counter.svelte';\n</script>\n\n<Counter start=\"5\" />\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings for TSX in LiveCodes\nDESCRIPTION: This example shows how to configure custom settings for TSX in LiveCodes. The settings disable auto-rendering and specify custom JSX factory functions, which allows using libraries other than React, such as Preact.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/tsx.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tsx\": {\n    \"disableAutoRender\": true,\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Height for LiveCodes Component\nDESCRIPTION: Demonstrates setting the height of the LiveCodes playground container element using the height prop, providing explicit control over the playground's vertical space.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/react.mdx#2025-04-13_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from 'livecodes/react';\n\nexport const Playground = () => <LiveCodes height=\"500px\" />;\n```\n\n----------------------------------------\n\nTITLE: Implementing VegaLite Line Chart from External Source in HTML\nDESCRIPTION: Example of how to integrate a Vega-Lite line chart diagram by referencing an external JSON specification. The diagram is rendered as an SVG and loaded from the Vega-Lite examples repository.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"vega-lite.svg\"></div>\n<script\n  type=\"application/diagram-vega-lite\"\n  data-output=\"vega-lite.svg\"\n  src=\"https://vega.github.io/vega-lite/examples/sequence_line_fold.vl.json\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration File for Greeter Class\nDESCRIPTION: The TypeScript declaration file (.d.ts) for the Greeter class that defines its public API. This file provides type information for IntelliSense without exposing implementation details.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/intellisense.mdx#2025-04-13_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport declare class Greeter {\n  private morningGreetings;\n  private eveningGreetings;\n  private randomSelector;\n  morning(): string;\n  evening(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Preact with Custom JSX Runtime\nDESCRIPTION: Example showing how to use Preact as a JSX runtime. Uses the h function as JSX factory and demonstrates component rendering. Includes pragma directive for TypeScript compiler configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n/** @jsx h */\nimport { h, render } from 'preact';\n\nconst App = (props) => <h1>Hello, {props.name}</h1>;\n\nrender(<App name=\"Preact\" />, document.body);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing SQL Result in JavaScript (LiveCodes)\nDESCRIPTION: Demonstrates how to use the livecodes.sql.getResult() method to access the SQL query result as a JSON object in the result page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/postgresql.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  livecodes.sql\n    .getResult()\n    .then((result) => {\n      console.log(result);\n      // { data: [{ columns: ['columnA', 'columnB'], values: [['row 1 - value A', 'row 1 - value B'], ['row 2 - value A', 'row 2 - value B']] }] }\n    })\n    .catch((error) => {\n      console.error(error);\n      // 'error message'\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: ELK Graph Layout Implementation\nDESCRIPTION: Shows how to create a directed graph layout using ELK with defined nodes, edges and layout algorithm configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"elk.svg\"></div>\n<script type=\"application/diagram-elk\" data-output=\"elk.svg\">\n  {\n    \"id\": \"root\",\n    \"layoutOptions\": {\n      \"elk.algorithm\": \"layered\"\n    },\n    \"children\": [\n      {\"id\": \"n1\", \"width\": 70, \"height\": 70},\n      {\"id\": \"n2\", \"width\": 70, \"height\": 70},\n      {\"id\": \"n3\", \"width\": 70, \"height\": 70},\n      {\"id\": \"n4\", \"width\": 70, \"height\": 70},\n      {\"id\": \"n5\", \"width\": 70, \"height\": 70},\n      {\"id\": \"n6\", \"width\": 70, \"height\": 70}\n    ],\n    \"edges\": [\n      {\"id\": \"e1\", \"sources\": [\"n1\"], \"targets\": [\"n2\"]},\n      {\"id\": \"e2\", \"sources\": [\"n1\"], \"targets\": [\"n3\"]},\n      {\"id\": \"e3\", \"sources\": [\"n2\"], \"targets\": [\"n4\"]},\n      {\"id\": \"e4\", \"sources\": [\"n3\"], \"targets\": [\"n5\"]},\n      {\"id\": \"e5\", \"sources\": [\"n5\"], \"targets\": [\"n6\"]},\n      {\"id\": \"e6\", \"sources\": [\"n4\"], \"targets\": [\"n6\"]}\n    ]\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-rendering with Custom Settings\nDESCRIPTION: Shows how to disable the auto-rendering feature using custom settings. This configuration is specified in the project's custom settings JSON.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react.mdx#2025-04-13_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cytoscape Graph Implementation\nDESCRIPTION: Demonstrates creating a directed graph using Cytoscape.js with custom styling and grid layout configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"cytoscape.svg\"></div>\n<script type=\"application/diagram-cytoscape\" data-output=\"cytoscape.svg\">\n  {\n    \"elements\": [\n      {\n        \"data\": { \"id\": \"a\" }},\n      {\n        \"data\": { \"id\": \"b\" }},\n      {\n        \"data\": { \"id\": \"ab\", \"source\": \"a\", \"target\": \"b\" }}],\n\n    \"style\": [\n      {\n        \"selector\": \"node\",\n        \"style\": {\n          \"background-color\": \"#666\",\n          \"label\": \"data(id)\"}\n      },\n\n      {\n        \"selector\": \"edge\",\n        \"style\": {\n          \"width\": 3,\n          \"line-color\": \"#ccc\",\n          \"target-arrow-color\": \"#ccc\",\n          \"target-arrow-shape\": \"triangle\",\n          \"curve-style\": \"bezier\"\n        }\n      }\n    ],\n\n    \"layout\": {\n      \"name\": \"grid\",\n      \"rows\": 1\n    }\n\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Template Data in Custom Settings\nDESCRIPTION: JSON configuration for providing template data values in pre-rendered mode. Sets the value for the 'name' expression to be used in Liquid templates.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/liquid.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Scheme Demo in LiveCodes\nDESCRIPTION: CSS styling for the Scheme example that centers text in the container and button, sets the font family, and defines the logo width. This provides basic styling for the demo interface.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/scheme.mdx#2025-04-13_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.container,\n.container button {\n  text-align: center;\n  font: 1em sans-serif;\n}\n.logo {\n  width: 150px;\n}\n\n```\n\n----------------------------------------\n\nTITLE: SDK Event Handling Example\nDESCRIPTION: Demonstrates handling the sdkReady event and using SDK methods with TypeScript support\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/vue.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import type { Playground } from 'livecodes';\n  import LiveCodes, { type Props } from 'livecodes/vue';\n\n  const options: Props = {\n    config: {\n      markup: {\n        language: 'html',\n        content: '<h1>Hello World!</h1>',\n      },\n    },\n  };\n\n  let playground: Playground | undefined;\n  const onReady = (sdk: Playground) => {\n    playground = sdk;\n  };\n\n  const run = async () => {\n    await playground?.run();\n  };\n</script>\n\n<template>\n  <LiveCodes v-bind=\"options\" @sdk-ready=\"onReady\" />\n  <button @click=\"run\">run</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering SQL Result as HTML Table\nDESCRIPTION: Demonstrates how to use the livecodes.sql.render() method to automatically render the SQL query result as an HTML table in a specified element.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/sql.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"tables\"></div>\n<script>\n  livecodes.sql.render('#tables');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring R Output Container in HTML\nDESCRIPTION: Shows how to specify a container element for R output by setting the livecodes.r.config object. This directs where the R code results will be rendered.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"output\"></div>\n\n<script>\n  livecodes.r.config = {\n    container: document.querySelector('#output'),\n    // other options\n  };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Type Declarations with Additional Options in LiveCodes\nDESCRIPTION: This example shows how to configure custom type declarations with additional options like autoload and declareAsModule in the LiveCodes configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"my-demo-lib\": {\n      \"url\": \"https://my-custom-domain/types.d.ts\",\n      \"autoload\": true,\n      \"declareAsModule\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheet in JavaScript\nDESCRIPTION: Demonstrates how to import an external CSS stylesheet in the script editor. This method adds a link element to the result page's head.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/css.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'https://unpkg.com/github-markdown-css/github-markdown.css';\n```\n\n----------------------------------------\n\nTITLE: Creating ASCII Art Diagrams with Svgbob in HTML\nDESCRIPTION: Implementation of an ASCII art diagram using Svgbob. The diagram shows a 3D coordinate system and geometric elements that are rendered as an SVG.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"svgbob.svg\"></div>\n<script type=\"application/diagram-svgbob\" data-output=\"svgbob.svg\">\n  o-> Graphics Diagram\n\n     0       3                          P *\n      *-------*      +y                    \\\n   1 /|    2 /|       ^                     \\\n    *-+-----* |       |                v0    \\       v3\n    | |4    | |7      | ◄╮               *----\\-----*\n    | *-----|-*     ⤹ +-----> +x        /      v X   \\\n    |/      |/       / ⤴               /        o     \\\n    *-------*       v                 /                \\\n   5       6      +z              v1 *------------------* v2\n</script>\n```\n\n----------------------------------------\n\nTITLE: React Component for App Version Link\nDESCRIPTION: TypeScript React component that generates a link to a specific version of the LiveCodes application using site configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/permanent-url.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AppVersionLink = () => {\n  const { siteConfig } = useDocusaurusContext();\n  return (\n    <a href={`https://v${siteConfig.customFields.appVersion}.livecodes.io`} target=\"\\_blank\">\n      https://v{siteConfig.customFields.appVersion}.livecodes.io\n    </a>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using CSS Modules with JSX\nDESCRIPTION: Demonstrates how to use CSS Modules with JSX in LiveCodes. CSS classes are imported as a module and applied to components using the imported classes object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/jsx.mdx#2025-04-13_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport classes from './style.module.css';\n\nexport default function() {\n  return <h1 className={classes.title}>Hello, CSS Modules!</h1>;\n}\n\n```\n\nLANGUAGE: css\nCODE:\n```\n.title {\n  color: green;\n  font-family: sans-serif;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integrating Vega Specification from External Source in HTML\nDESCRIPTION: Example of how to integrate a Vega bar chart diagram by referencing an external JSON specification. The diagram is rendered as an SVG and loaded from the Vega examples repository.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"vega.svg\"></div>\n<script\n  type=\"application/diagram-vega\"\n  data-output=\"vega.svg\"\n  src=\"https://vega.github.io/vega/examples/stacked-bar-chart.vg.json\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: HTML Container Setup for Iris Dataset Demo\nDESCRIPTION: HTML markup that creates separate containers for the R output and plots, with JavaScript that handles the display after the R code has been evaluated.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<h2>Output</h2>\n<div id=\"output\"></div>\n<h2>Plots</h2>\n<div id=\"plots\"></div>\n\n<script type=\"module\">\n  livecodes.r.config = {\n    container: null,\n  };\n\n  await livecodes.r.evaluated;\n\n  const pre = document.createElement('pre');\n  pre.innerHTML = livecodes.r.output;\n  document.querySelector('#output').appendChild(pre);\n\n  document.querySelector('#plots').appendChild(...livecodes.r.plots);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tools Pane in LiveCodes\nDESCRIPTION: This JSON configuration example shows how to set up the tools pane in LiveCodes, specifying enabled tools, active tool, and pane status.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tools\": {\n    \"enabled\": [\"console\", \"compiled\"],\n    \"active\": \"console\",\n    \"status\": \"open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Code Block Example for DOM Import\nDESCRIPTION: Example showing how to structure HTML code blocks for importing into LiveCodes using CSS selectors. The code must be HTML-encoded to avoid interference with the page HTML.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/import.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<code class=\"livecodes\">\n  <pre data-lang=\"html\">This is identified as &lt;strong&gt;HTML&lt;/strong&gt; code</pre>\n</code>\n```\n\n----------------------------------------\n\nTITLE: Configuring LiveCodes for Java\nDESCRIPTION: This JavaScript code configures LiveCodes for Java usage. It sets up the editor, specifies the Java code content, and defines other configuration options for the LiveCodes component.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/java.mdx#2025-04-13_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const javaConfig = {\n  activeEditor: 'script',\n  script: {\n    language: 'java',\n    content: `public class BinarySearchSnippet {\n  /**\n   * Search an item with binarySearch algorithm.\n   *\n   * @param arr sorted array to search\n   * @param item an item to search\n   * @return if item is found, return the index position of the array item otherwise return -1\n   */\n\n  public static int binarySearch(int[] arr, int left, int right, int item) {\n    if (right >= left) {\n      int mid = left + (right - left) / 2;\n      if (arr[mid] == item) {\n        return mid;\n      }\n\n      if (arr[mid] > item) {\n        return binarySearch(arr, left, mid - 1, item);\n      }\n\n      return binarySearch(arr, mid + 1, right, item);\n    }\n    return -1;\n  }\n\n  public static void main(String[] args) {\n    int[] sortedArray = {1, 3, 5, 7, 9, 11, 13, 15};\n    int itemToSearch = 7;\n\n    int result = binarySearch(sortedArray, 0, sortedArray.length - 1, itemToSearch);\n\n    if (result == -1) {\n      System.out.println(\"Result: Item not found in the array.\");\n    } else {\n      System.out.println(\"Result: Item found at index -> \" + result);\n    }\n  }\n}\n`,\n  },\n  mode: 'simple',\n  editor: 'auto',\n  tools: {\n    status: 'full',\n},\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Demo Component in TypeScript/React\nDESCRIPTION: Imports the ThemeDemo component from the components directory, used for demonstrating theme functionality in the documentation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/themes.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport ThemeDemo from '../../src/components/ThemeDemo.tsx';\n```\n\n----------------------------------------\n\nTITLE: UMD CDN Integration\nDESCRIPTION: Example of loading and using the LiveCodes SDK via CDN using the UMD build, which provides a global livecodes object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/index.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n<script src=\"https://cdn.jsdelivr.net/npm/livecodes/livecodes.umd.js\"></script>\n<script>\n  // the UMD version provides the global object `livecodes`\n  livecodes.createPlayground('#container', {\n    // embed options\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Mermaid Class Diagram Implementation\nDESCRIPTION: Demonstrates creating a class diagram using Mermaid with various relationship types and class attributes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"class-diagram.svg\"></div>\n<script type=\"application/diagram-mermaid\" data-output=\"class-diagram.svg\">\n  classDiagram\n  Class01 <|-- AveryLongClass : Cool\n  Class03 *-- Class04\n  Class05 o-- Class06\n  Class07 .. Class08\n  Class09 --> C2 : Where am i?\n  Class09 --* C3\n  Class09 --|> Class07\n  Class07 : equals()\n  Class07 : Object[] elementData\n  Class01 : size()\n  Class01 : int chimp\n  Class01 : int gorilla\n  Class08 <--> C2: Cool label\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript\nDESCRIPTION: JavaScript code to set template data at runtime by assigning values to window.livecodes.templateData.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/handlebars.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Configuring Eta Compiler Options\nDESCRIPTION: Example of custom settings for configuring the Eta compiler options, showing how to set the variable name used in templates.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/eta.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eta\": {\n    \"varName\": \"data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Import in TypeScript\nDESCRIPTION: Import statement for RunInLiveCodes React component that provides direct access to the assets screen.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/assets.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Rendering SQL Result as HTML Table (LiveCodes)\nDESCRIPTION: Demonstrates how to use the livecodes.sql.render() method to display SQL query results as an HTML table in the result page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/postgresql.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"tables\"></div>\n<script>\n  livecodes.sql.render('#tables');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Building LiveCodes Project in Shell\nDESCRIPTION: Command to build the LiveCodes project using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Importing React Testing Library in JavaScript\nDESCRIPTION: Shows how to import functions from the React Testing Library for testing React components.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, fireEvent, waitFor, screen } from '@testing-library/react';\n```\n\n----------------------------------------\n\nTITLE: Creating LiveCodes Custom Settings Configuration\nDESCRIPTION: This example shows how to create the configuration object needed to register custom settings with a LiveCodes instance. It defines the panel title, custom UI element, and styles.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/custom-settings.mdx#2025-04-13_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// create configuration object\nconst config = {\n  title: 'Custom', // tab title\n  content: customSettings, // the UI element\n  styles: `\n    .custom-settings .setting {\n      margin-bottom: 10px;\n    }\n    .custom-settings .setting-label {\n      font-weight: bold;\n    }\n    .custom-settings .setting-description {\n      font-size: 0.8em;\n      color: #888;\n    }\n  `,\n};\n\n// add custom settings\nlivecodesInstance.registerCustomSettings(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a CoffeeScript Editor Instance\nDESCRIPTION: This snippet demonstrates how to create a LiveCodes instance with CoffeeScript as the template. The height is set to 80% of the viewport height.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/coffeescript.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveCodes template=\"coffeescript\" height=\"80vh\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Numbers in LiveCodes\nDESCRIPTION: Configuration option to control line number display in the code editor. Can be boolean or 'relative'. Default is true, showing absolute line numbers. Relative mode can be useful with vim editor mode.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### `lineNumbers`\n\nType: [`boolean | \"relative\"`](../api/interfaces/Config.md#linenumbers)\n\nDefault: `true`\n\nShow line numbers in [code editor](../features/editor-settings.mdx).\nIf set to `\"relative\"`, line numbers are shown relative to the current line. This can be useful with [vim mode](#editormode).\n```\n\n----------------------------------------\n\nTITLE: Importing RunInLiveCodes Component in TypeScript/React\nDESCRIPTION: React/TypeScript component import statement for the RunInLiveCodes component used in the documentation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/import.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Gleam External Function Usage\nDESCRIPTION: Example of using external JavaScript functions in Gleam code with the @external attribute.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/gleam.mdx#2025-04-13_snippet_3\n\nLANGUAGE: gleam\nCODE:\n```\nimport gleam/io\n\n@external(javascript, \"my_pkg/greet.js\", \"hello\")\npub fn hello(str: String) -> String\n\npub fn main() {\n io.println(hello(\"from JavaScript\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in React\nDESCRIPTION: Imports the LiveCodes component from the project's source directory for use in React applications.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: LiveCodes Component Implementation\nDESCRIPTION: Example of using LiveCodes component with specific parameters to demonstrate TypeScript compilation. Imports code from a Gist and configures the editor to show TypeScript compilation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/compiled-code.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveCodes\n  import=\"https://gist.github.com/hatemhosny/4bed283ef9757a6a541aee685c710dc7\"\n  params={{ 'ts-selector': 'playground.ts', activeEditor: 'script', compiled: 'full' }}\n></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Event Handling for Custom Settings in LiveCodes\nDESCRIPTION: This code implements event handlers for the custom settings inputs. It saves input values to localStorage when they change and provides a way to reset values to their defaults.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/custom-settings.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// handle input changes\nconst handleApiKeyChange = () => {\n  localStorage.setItem('custom-apiKey', apiKeyInput.value);\n};\nconst handleServerChange = () => {\n  localStorage.setItem('custom-server', serverInput.value);\n};\nconst handleTimeoutChange = () => {\n  localStorage.setItem('custom-timeout', timeoutInput.value);\n};\n\n// attach event listeners\napiKeyInput.addEventListener('change', handleApiKeyChange);\nserverInput.addEventListener('change', handleServerChange);\ntimeoutInput.addEventListener('change', handleTimeoutChange);\n\n// add a reset button\nconst resetButton = document.createElement('button');\nresetButton.textContent = 'Reset';\nresetButton.addEventListener('click', () => {\n  localStorage.removeItem('custom-apiKey');\n  localStorage.removeItem('custom-server');\n  localStorage.removeItem('custom-timeout');\n  apiKeyInput.value = '';\n  serverInput.value = '';\n  timeoutInput.value = '';\n});\ncustomSettings.querySelector('.panel-body')?.appendChild(resetButton);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Box Plot with Plotly in HTML\nDESCRIPTION: Implementation of a box plot visualization using Plotly's JSON syntax. The diagram shows normalized moisture data for different vegetables across two days and is rendered as an SVG.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"plotly.svg\"></div>\n<script type=\"application/diagram-plotly\" data-output=\"plotly.svg\">\n  {\n    \"data\": [\n      {\n        \"y\": [\n          0.2,\n          0.2,\n          0.6,\n          1,\n          0.5,\n          0.4,\n          0.2,\n          0.7,\n          0.9,\n          0.1,\n          0.5,\n          0.3\n        ],\n        \"x\": [\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\"\n        ],\n        \"name\": \"kale\",\n        \"marker\": {\n          \"color\": \"#3D9970\"\n        },\n        \"type\": \"box\"\n      },\n      {\n        \"y\": [\n          0.6,\n          0.7,\n          0.3,\n          0.6,\n          0,\n          0.5,\n          0.7,\n          0.9,\n          0.5,\n          0.8,\n          0.7,\n          0.2\n        ],\n        \"x\": [\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\"\n        ],\n        \"name\": \"radishes\",\n        \"marker\": {\n          \"color\": \"#FF4136\"\n        },\n        \"type\": \"box\"\n      },\n      {\n        \"y\": [\n          0.1,\n          0.3,\n          0.1,\n          0.9,\n          0.6,\n          0.6,\n          0.9,\n          1,\n          0.3,\n          0.6,\n          0.8,\n          0.5\n        ],\n        \"x\": [\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 1\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\",\n          \"day 2\"\n        ],\n        \"name\": \"carrots\",\n        \"marker\": {\n          \"color\": \"#FF851B\"\n        },\n        \"type\": \"box\"\n      }\n    ],\n    \"layout\": {\n      \"yaxis\": {\n        \"title\": \"normalized moisture\",\n        \"zeroline\": false\n      },\n      \"boxmode\": \"group\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Size in LiveCodes\nDESCRIPTION: Numeric configuration option that sets the number of spaces per indentation level. Default is 2 spaces. This setting also affects code formatting.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n### `tabSize`\n\nType: [`number`](../api/interfaces/Config.md#tabsize)\n\nDefault: `2`\n\nThe number of spaces per indentation-level. Also used in [code formatting](../features/code-format.mdx).\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TypeScript/React\nDESCRIPTION: This snippet shows how to import the LiveCodes component from the project's source files. It's likely used for embedding LiveCodes in a React application.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/css.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Installing LiveCodes via NPM\nDESCRIPTION: This code snippet shows how to install the LiveCodes package using npm. The package provides the SDK for embedding and interacting with LiveCodes playgrounds in various applications.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/README.md#2025-04-13_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i livecodes\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TypeScript\nDESCRIPTION: TypeScript import statement for the LiveCodes component from the source directory\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/display-modes.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Basic Svelte Component with State Management\nDESCRIPTION: This Svelte component demonstrates basic state management using the $state syntax introduced in Svelte 5. It creates a simple component that displays its name.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  let name = $state('Svelte');\n</script>\n\n<div>I'm a {name} component</div>\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lua Usage in LiveCodes\nDESCRIPTION: This code snippet showcases Lua usage in LiveCodes, including JavaScript interoperability and DOM access. It uses the 'js' module for browser interactions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/lua.mdx#2025-04-13_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlocal js = require(\"js\")\nlocal window = js.global\nlocal document = window.document\n\n-- DOM manipulation\ndocument:getElementById(\"output\"):setAttribute(\"style\", \"white-space: pre;\")\n\n-- print to output div\nlocal print = function(...)\n  local args = {...}\n  local output = \"\"\n  for i = 1, #args do\n    output = output .. tostring(args[i]) .. \"\\t\"\n  end\n  document:getElementById(\"output\").innerHTML =\n    document:getElementById(\"output\").innerHTML .. output .. \"\\n\"\nend\n\n-- Lua code\nprint(\"Hello from Lua!\")\n\nlocal function factorial(n)\n  if n == 0 then\n    return 1\n  else\n    return n * factorial(n - 1)\n  end\n\nend\n\nprint(\"Factorial of 5 is: \" .. factorial(5))\n\n-- JS interop\nlocal math = window.Math\nprint(\"Random number: \" .. math:random())\n\n-- DOM event\ndocument:getElementById(\"myButton\"):addEventListener(\"click\", function()\n  print(\"Button clicked!\")\nend)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Size in LiveCodes\nDESCRIPTION: Configuration option to set the font size in the code editor. Default is undefined, which sets the font size to 14px for the full app and 12px for embeds.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### `fontSize`\n\nType: [`number | undefined`](../api/interfaces/Config.md#fontfamily)\n\nDefault: `undefined`\n\nSets the [code editor](../features/editor-settings.mdx) font size.\n\nIf `undefined` (the default), the font size is set to 14 for the full app and 12 for [embeds](../features/embeds.mdx).\n```\n\n----------------------------------------\n\nTITLE: Basic Haml Template Example with Variable Interpolation\nDESCRIPTION: A simple Haml template that displays a greeting message with an interpolated variable 'name'. This is used in both the pre-rendered and dynamic examples.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/haml.mdx#2025-04-13_snippet_3\n\nLANGUAGE: haml\nCODE:\n```\n%p Hello, #{name}!\n```\n\n----------------------------------------\n\nTITLE: Setting i18n Interpolation Data in TypeScript\nDESCRIPTION: How to set the data-i18n-interpolation attribute programmatically in TypeScript. This allows dynamic values to be inserted into translated strings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ncharactersSpan.dataset.i18nInterpolation = JSON.stringify({ urlLength });\n```\n\n----------------------------------------\n\nTITLE: Using RunInLiveCodes Component with Embed Screen\nDESCRIPTION: Example of using the RunInLiveCodes component with embed screen configuration and custom link text.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/embeds.mdx#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<RunInLiveCodes params={{ screen: 'embed' }} linkText=\"direct link\" />\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TypeScript\nDESCRIPTION: TypeScript import statement for the LiveCodes component used for PHP integration\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/php.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing Chai Assertion Library in JavaScript\nDESCRIPTION: Demonstrates how to import the assert function from the Chai assertion library for use in tests.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { assert } from 'chai';\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function as Data URL in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple JavaScript function that can be exported as a data URL. It defines a function 'sayHello' that takes a name parameter and returns a greeting string.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/data-urls.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const sayHello = (name) => 'Hello ' + name;\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters with LiveCodes Component\nDESCRIPTION: Demonstrates using the params property to pass query parameters directly to a LiveCodes component for prefilling content.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes params={{ md: '**Hello World!**' }}></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Template Data in JSON\nDESCRIPTION: This JSON snippet demonstrates how to provide values for template expressions using custom settings in the pre-rendered mode.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/art-template.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Information String Translation with Dynamic Content\nDESCRIPTION: Example of translating a user login message with a dynamic username value. Demonstrates how to use the translateString function with simple variable interpolation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.deps.translateString('core.login.successWithName', 'Logged in as: {{name}}', {\n  name: displayName,\n});\n```\n\n----------------------------------------\n\nTITLE: Package Version Import Example\nDESCRIPTION: JavaScript example demonstrating how to import a specific version of a package in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/permanent-url.mdx#2025-04-13_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport lodash from 'lodash@4.17.21';\n\nconsole.log(lodash.VERSION); // -> 4.17.21\n```\n\n----------------------------------------\n\nTITLE: Installing LiveCodes SDK via NPM\nDESCRIPTION: Command to install the LiveCodes SDK package using npm package manager.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install livecodes\n```\n\n----------------------------------------\n\nTITLE: Searching for NPM Packages in LiveCodes\nDESCRIPTION: Demonstrates how to search for NPM packages in LiveCodes, allowing users to find and add default scripts or stylesheets hosted by jsDelivr. The example shows various search terms for the jQuery package, including version-specific searches.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/external-resources.mdx#2025-04-13_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njque\n\njquery\n\njquery@3\n\njquery@3.6\n\njquery@3.6.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings for React TSX in LiveCodes\nDESCRIPTION: An example JSON configuration for custom settings in LiveCodes for React TSX, showing how to disable auto-rendering functionality through the custom settings interface.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react-tsx.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-tsx\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind CSS in Svelte Project\nDESCRIPTION: This CSS snippet shows how to import Tailwind CSS into a Svelte project in LiveCodes. It's a simple one-line import that enables Tailwind's utility classes throughout the project.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/svelte.mdx#2025-04-13_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import \"tailwindcss\";\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Template Mode in Custom Settings\nDESCRIPTION: JSON configuration to enable dynamic template rendering mode by setting prerender to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/liquid.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Pug Template Example\nDESCRIPTION: A basic Pug template example that displays a greeting using a variable. The variable gets substituted with the value provided either via pre-rendered data or dynamic assignment.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/pug.mdx#2025-04-13_snippet_4\n\nLANGUAGE: pug\nCODE:\n```\np Hello, #{name}!\n```\n\n----------------------------------------\n\nTITLE: LiveCodes SDK Integration Example\nDESCRIPTION: HTML example showing how to integrate LiveCodes with a specific SDK version and app URL for version stability.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/permanent-url.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\"></div>\n<script type=\"module\">\n  // specific SDK version\n  import { createPlayground } from 'https://cdn.jsdelivr.net/npm/livecodes@${siteConfig.customFields.sdkVersion}';\n\n  createPlayground('#container', {\n    // App permanent URL\n    appUrl: 'https://v${siteConfig.customFields.appVersion}.livecodes.io',\n    template: 'react',\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing jest-dom in JavaScript\nDESCRIPTION: Demonstrates how to import jest-dom for additional DOM-based test assertions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@testing-library/jest-dom';\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Info Display using WebAssembly\nDESCRIPTION: Demonstrates basic PHP functionality by displaying PHP configuration information using phpinfo() function in WebAssembly environment\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/php-wasm.mdx#2025-04-13_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nphpinfo();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Template Mode\nDESCRIPTION: Custom settings configuration to enable dynamic template rendering mode by setting prerender to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/handlebars.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Settings for Solid in LiveCodes\nDESCRIPTION: Example of custom settings configuration for Solid in LiveCodes. This JSON shows how to disable auto-rendering functionality by setting the 'disableAutoRender' option to true.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/solid.tsx.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"solid\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pug Compiler Options in LiveCodes\nDESCRIPTION: Custom settings configuration for the Pug compiler. This example enables the 'pretty' option which formats the HTML output with proper indentation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/pug.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pug\": {\n    \"pretty\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gnuplot Contour Plot Implementation\nDESCRIPTION: Demonstrates creating a 3D contour plot using Gnuplot with custom terminal settings and external data file.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"contour.svg\"></div>\n<script type=\"application/diagram-gnuplot\">\n  set terminal svg size 600,400 enhanced fname 'arial' fsize 10 butt solid\n  set output 'contour.svg'\n  set view 60, 30, 0.85, 1.1\n  set samples 25, 25\n  set isosamples 26, 26\n  set contour base\n  set cntrparam bspline\n  set cntrparam levels auto 10\n  set style data lines\n  set title \"3D gnuplot demo - contour of data grid plotting\"\n  set xlabel \"X axis\"\n  set xrange [ 0.00000 : 15.0000 ] noreverse nowriteback\n  set ylabel \"Y axis\"\n  set yrange [ 0.00000 : 15.0000 ] noreverse nowriteback\n  set zlabel \"Z axis\"\n  set zlabel  offset character 1, 0, 0 font \"\" textcolor lt -1 norotate\n  set zrange [ -1.20000 : 1.20000 ] noreverse nowriteback\n\n  # \"glass.dat\" is defined below\n  splot \"glass.dat\" using 1\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped CSS in Vue SFC\nDESCRIPTION: Demonstrates how to use scoped CSS styles that only apply to elements within the current component using the scoped attribute.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style scoped>\n.example {\n  color: red;\n}\n</style>\n\n<template>\n  <div class=\"example\">hi</div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Providing Dynamic Data to Pug Templates with JavaScript\nDESCRIPTION: JavaScript code that assigns data to Pug templates at runtime. This sets the 'name' variable that can be referenced in the template using #{name}.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/pug.mdx#2025-04-13_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic Twig Template Rendering\nDESCRIPTION: JSON configuration to enable dynamic rendering mode for Twig templates by setting the 'prerender' property to false. This allows expressions to be evaluated at runtime.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/twig.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Pug Template Mode in JSON\nDESCRIPTION: Custom settings JSON configuration for enabling dynamic mode in Pug templates. This disables pre-rendering and allows runtime data assignment.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/pug.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Data to Dynamic EJS Templates via JavaScript\nDESCRIPTION: JavaScript code that assigns data to the 'window.livecodes.templateData' object, making it available for EJS templates in dynamic rendering mode. This must be executed before page load event.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/ejs.mdx#2025-04-13_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Components in JavaScript\nDESCRIPTION: This snippet shows how to import the RunInLiveCodes and LiveCodes components from their respective files in the project structure.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/python.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing a Shared Project into LiveCodes\nDESCRIPTION: Demonstrates importing a previously shared LiveCodes project using its unique identifier.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes import=\"id/6ys2b8txf33\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data with JavaScript in LiveCodes\nDESCRIPTION: JavaScript code to provide dynamic data to a Haml template by assigning values to the window.livecodes.templateData object. This must be done before the page load event.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/haml.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Template Rendering in Vento\nDESCRIPTION: JSON configuration to enable dynamic rendering mode in Vento templates by setting the prerender property to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vento.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Mode in Mustache Templates\nDESCRIPTION: JSON configuration to enable dynamic mode for Mustache templates by setting prerender to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/mustache.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dynamic EJS Template Rendering in Custom Settings\nDESCRIPTION: JSON configuration for enabling dynamic rendering mode for EJS templates by setting the 'prerender' property to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/ejs.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Files with Hash Placeholders in TypeScript\nDESCRIPTION: Demonstrates how to import modules using hash placeholders in TypeScript. The placeholder '{{hash:file-name.js}}' is replaced with a hash of the file content during the build process, enabling aggressive caching.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst mod = await import(baseUrl + '{{hash:file-name.js}}');\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom TypeScript Type Definitions in LiveCodes\nDESCRIPTION: This snippet demonstrates how to declare custom TypeScript type definitions for a module in LiveCodes. It shows a type declaration file and how to reference it in the LiveCodes configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'my-demo-lib' {\n  export class Greeter {\n    morning(): string;\n    evening(): string;\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"my-demo-lib\": \"https://my-custom-domain/my-type-declarations.d.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript\nDESCRIPTION: JavaScript code showing how to provide template data at runtime by assigning values to window.livecodes.templateData.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/eta.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Templates in Custom Settings\nDESCRIPTION: JSON configuration for pre-rendered templates where expression values are supplied in advance. This example sets a 'name' value that will be used in template expressions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/dot.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Settings Configuration for React Native TSX\nDESCRIPTION: JSON configuration example showing how to set custom options for React Native TSX in LiveCodes. The example demonstrates disabling auto-rendering functionality.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react-native-tsx.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"react-native-tsx\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LiveCodes PHP Template Implementation\nDESCRIPTION: Example usage of LiveCodes component with PHP template configuration and custom height setting\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/php.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<LiveCodes template=\"php\" height=\"80vh\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Settings UI in TypeScript\nDESCRIPTION: This snippet demonstrates how to create custom UI components for settings in LiveCodes. It uses a helper function to generate HTML for text inputs with labels and descriptions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/custom-settings.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// helper function to create setting UI\nconst createTextSetting = ({\n  id,\n  label,\n  description,\n}: {\n  id: string;\n  label: string;\n  description: string;\n}) => `\n  <div class=\"setting\">\n    <div class=\"setting-label\">\n      <label for=\"${id}\">${label}</label>\n    </div>\n    <div class=\"setting-input\">\n      <input id=\"${id}\" type=\"text\" />\n    </div>\n    <div class=\"setting-description\">\n      <div>${description}</div>\n    </div>\n  </div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Twig Template Data in JavaScript\nDESCRIPTION: JavaScript code that sets template data for dynamic Twig rendering by assigning values to the global window.livecodes.templateData object. This must occur before the page load event.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/twig.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Pre-rendered Art-template Example\nDESCRIPTION: This example demonstrates pre-rendered usage of art-template with custom data provided through settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/art-template.mdx#2025-04-13_snippet_4\n\nLANGUAGE: art-template\nCODE:\n```\nHello {{name}}!\n```\n\n----------------------------------------\n\nTITLE: Configuring ShowSpacing in LiveCodes\nDESCRIPTION: Boolean configuration option that enables showing element spacing in the result page when set to true. Default value is false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### `showSpacing`\n\nType: [`boolean`](../api/interfaces/Config.md#showspacing)\n\nDefault: `false`\n\nEnables [showing element spacing](../features/result.mdx#show-spacings) in the result page.\n```\n\n----------------------------------------\n\nTITLE: Container Height Configuration\nDESCRIPTION: Shows how to customize the LiveCodes container height using the data-height attribute.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/sdk/js-ts.mdx#2025-04-13_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" data-height=\"500\"></div>\n<script type=\"module\">\n  import { createPlayground } from 'livecodes';\n  createPlayground('#container');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Mustache Templates with Custom Settings\nDESCRIPTION: JSON configuration for pre-rendered Mustache templates, demonstrating how to supply template data through custom settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/mustache.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet Support in LiveCodes\nDESCRIPTION: Boolean configuration option to enable or disable Emmet support for HTML/CSS snippet expansion. Default is true, enabling Emmet functionality in the editor.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n### `emmet`\n\nType: [`boolean`](../api/interfaces/Config.md#emmet)\n\nDefault: `true`\n\nEnables [Emmet](../features/editor-settings.mdx#emmet).\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript\nDESCRIPTION: JavaScript code to set template data values at runtime by assigning to window.livecodes.templateData.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/liquid.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript\nDESCRIPTION: JavaScript code showing how to provide data to templates dynamically at runtime by assigning values to window.livecodes.templateData. This must be done before the page load event.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/dot.mdx#2025-04-13_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Version Information Command\nDESCRIPTION: JavaScript command to retrieve version information and permanent URLs for the LiveCodes app and SDK.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/permanent-url.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait livecodes.exec('showVersion');\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Template Rendering in JSON\nDESCRIPTION: This JSON snippet shows how to set the template rendering mode to dynamic using custom settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/art-template.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Art-template Compiler Options in JSON\nDESCRIPTION: This JSON snippet shows how to pass custom options to the art-template compiler using the custom settings property.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/art-template.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"art-template\": {\n    \"minimize\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pintora Diagram with Custom Settings in LiveCodes\nDESCRIPTION: Example of how to configure Pintora diagrams using the custom settings object with a dark theme. The configuration is specified under the 'pintora' key in the settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pintora\": {\n    \"themeConfig\": {\n      \"theme\": \"dark\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Assignment for Mustache Templates\nDESCRIPTION: JavaScript code showing how to assign template data dynamically at runtime using window.livecodes.templateData.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/mustache.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Commas in LiveCodes Formatter\nDESCRIPTION: Boolean configuration option that determines whether Prettier code formatter should use trailing commas in multiline object literals, arrays, etc. Default is true.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n### `trailingComma`\n\nType: [`boolean`](../api/interfaces/Config.md#trailingcomma)\n\nDefault: `true`\n\nConfigures Prettier [code formatter](../features/code-format.mdx) to use [trailing commas](https://prettier.io/docs/en/options.html#trailing-commas).\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Nunjucks Template Mode\nDESCRIPTION: Custom settings configuration to enable dynamic template rendering mode in Nunjucks by setting prerender to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/nunjucks.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding LiveCodes Component with React Template\nDESCRIPTION: This code snippet demonstrates how to import and use the LiveCodes component with a React template specified. The component is rendered with the 'full' display mode which is implied by the context of the page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/examples/display-modes/full.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../../src/components/LiveCodes.tsx';\n\n<LiveCodes template=\"react\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Template Data in JavaScript for Vento\nDESCRIPTION: JavaScript code to provide data for Vento templates in dynamic rendering mode. This assigns an object with the name property to window.livecodes.templateData.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vento.mdx#2025-04-13_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.livecodes.templateData = { name: 'LiveCodes' };\n```\n\n----------------------------------------\n\nTITLE: Importing RunInLiveCodes Component in TSX\nDESCRIPTION: Imports a RunInLiveCodes component from the project's src/components directory. This component is used to create a direct link to the editor settings screen.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/editor-settings.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Object for CSS Modules Classes\nDESCRIPTION: This JSON object represents the mapping between original class names and their generated unique identifiers, which can be imported in JavaScript.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text\": \"_text_1ygro_9\",\n  \"small-text\": \"_small-text_1ygro_19 _text_1ygro_9\",\n  \"large-text\": \"_large-text_1ygro_29 _text_1ygro_9\",\n  \"title\": \"_title_1ygro_47 _large-text_1ygro_29 _text_1ygro_9\",\n  \"smallText\": \"_small-text_1ygro_19 _text_1ygro_9\",\n  \"largeText\": \"_large-text_1ygro_29 _text_1ygro_9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Template URL Format Example\nDESCRIPTION: Example URL format for accessing a specific template in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/templates.mdx#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n?template={template_name}\n```\n\n----------------------------------------\n\nTITLE: Nomnoml Diagram Implementation\nDESCRIPTION: Shows how to create a UML-style diagram using Nomnoml with custom styling and relationships.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/diagrams.mdx#2025-04-13_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-src=\"nomnoml.svg\"></div>\n<script type=\"application/diagram-nomnoml\" data-output=\"nomnoml.svg\">\n  [Pirate|eyeCount: Int|raid();pillage()|\n    [beard]--[parrot]\n    [beard]-:>[foul mouth]\n  ]\n\n  [<table>mischief | bawl | sing || yell | drink]\n\n  [<abstract>Marauder]<:--[Pirate]\n  [Pirate]- 0..7[mischief]\n  [jollyness]->[Pirate]\n  [jollyness]->[rum]\n  [jollyness]->[singing]\n  [Pirate]-> *[rum|tastiness: Int|swig()]\n  [Pirate]->[singing]\n  [singing]<->[rum]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered EJS Templates using Custom Settings\nDESCRIPTION: JSON configuration for supplying data to EJS templates in pre-rendered mode. The example sets the value for the 'name' expression to be used in the template.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/ejs.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TSX\nDESCRIPTION: Basic import statement for the LiveCodes component from the src/components directory.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/embeds.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Quote Style in LiveCodes Formatter\nDESCRIPTION: Boolean configuration option for Prettier code formatter to use single or double quotes. Default is false, meaning double quotes will be used.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n### `singleQuote`\n\nType: [`boolean`](../api/interfaces/Config.md#singlequote)\n\nDefault: `false`\n\nConfigures Prettier [code formatter](../features/code-format.mdx) to use [single quotes instead of double quotes](https://prettier.io/docs/en/options.html#quotes).\n```\n\n----------------------------------------\n\nTITLE: Boolean Parameter Values Examples\nDESCRIPTION: Demonstrates various ways to set boolean parameters to true or false using different syntax variations.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n?lite=true\n?lite=1\n?lite=any\n?lite\n```\n\n----------------------------------------\n\nTITLE: Triggering Full Pyodide Reload in LiveCodes\nDESCRIPTION: This code snippet shows a special comment that can be used to trigger a full reload of the Pyodide environment in LiveCodes, similar to restarting a kernel in Jupyter notebooks.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/python-wasm.mdx#2025-04-13_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# __livecodes_reload__\n```\n\n----------------------------------------\n\nTITLE: Configuring doT Custom Settings\nDESCRIPTION: JSON configuration for passing custom doT compiler settings. This example changes the variable name used to access data in templates from the default to 'data'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/dot.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dot\": {\n    \"varname\": \"data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TSX\nDESCRIPTION: Imports the LiveCodes component from the source directory for use in React/TSX applications.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Region Folding in LiveCodes\nDESCRIPTION: Boolean configuration option to enable folding of code regions marked by #region and #endregion comments when the project loads. Default is false, leaving all regions unfolded.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n### `foldRegions`\n\nType: [`boolean`](../api/interfaces/Config.md#foldregions)\n\nDefault: `false`\n\nWhen set to `true`, regions marked by `#region` and `#endregion` comments are folded when the project is loaded.\n```\n\n----------------------------------------\n\nTITLE: Importing Contact Components in TypeScript\nDESCRIPTION: Imports the ContactForm and MailLink components from the src/components directory to handle contact functionality\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contact.mdx#2025-04-13_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport ContactForm from '../src/components/ContactForm.tsx'\nimport MailLink from '../src/components/MailLink.tsx'\n```\n\n----------------------------------------\n\nTITLE: Using LiveCodes Component with JavaScript Template\nDESCRIPTION: Example of using the LiveCodes component with a JavaScript template configuration.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/embeds.mdx#2025-04-13_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<LiveCodes template=\"javascript\"></LiveCodes>\n```\n\n----------------------------------------\n\nTITLE: Configuring MJML Custom Settings in LiveCodes\nDESCRIPTION: JSON configuration example for customizing MJML compiler behavior by passing options like keepComments and minify settings to control output formatting.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/mjml.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mjml\": {\n    \"keepComments\": false,\n    \"minify\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing RunInLiveCodes Component in JSX\nDESCRIPTION: This code snippet imports the RunInLiveCodes component from a specific path. The component is likely used to provide a direct link to the Backup/Restore screen in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/backup-restore.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Parameters with Comma-Separated Values\nDESCRIPTION: Example of setting parameters that accept arrays by using comma-separated values in the query string.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n?languages=html,md,css,ts\n```\n\n----------------------------------------\n\nTITLE: Email Link Components\nDESCRIPTION: Renders MailLink components for different department email addresses with encoded email values for security\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contact.mdx#2025-04-13_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<MailLink email=\"info&#64;livecodes&#46;io\" />\n<MailLink email=\"security&#64;livecodes&#46;io\" />\n<MailLink email=\"sponsor&#64;livecodes&#46;io\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom PostgreSQL Settings in LiveCodes\nDESCRIPTION: Shows how to set custom PostgreSQL settings in LiveCodes, including database name and script URLs for initialization.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/postgresql.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"postgresql\": {\n    \"dbName\": \"mydb\",\n    \"scriptURLs\": [\"https://myserver.com/sql.sql\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Close Brackets in LiveCodes\nDESCRIPTION: Boolean configuration option to enable or disable auto-complete for brackets and quotes. Default is true, automatically closing brackets and quotes when typing.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n### `closeBrackets`\n\nType: [`boolean`](../api/interfaces/Config.md#closebrackets)\n\nDefault: `true`\n\nUse auto-complete to close brackets and quotes.\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component for React Native Demo\nDESCRIPTION: Imports the LiveCodes component from a relative path to be used for displaying React Native examples in documentation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/react-native-tsx.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme and Editor Settings via Query Parameters\nDESCRIPTION: Example of setting theme, delay, and line numbers configurations through URL query parameters.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/query-params.mdx#2025-04-13_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n?theme=light&delay=500&lineNumbers=false\n```\n\n----------------------------------------\n\nTITLE: Using JSR Package Registry Example in JavaScript\nDESCRIPTION: Example demonstrating how to import packages from JSR (JavaScript Registry) using the 'jsr:' prefix in import statements. This shows importing the 'yassify' function and using it to transform a string.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { yassify } from 'jsr:@kwhinnery/yassify';\n\nconsole.log(yassify('Hello, World!'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Nunjucks Template Data\nDESCRIPTION: Custom settings configuration for pre-rendered Nunjucks templates. Defines template data that will be evaluated during result page compilation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/nunjucks.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Wrap in LiveCodes\nDESCRIPTION: Boolean configuration option to enable or disable word wrapping for long lines in the code editor. Default is false, meaning no word wrap is applied.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n### `wordWrap`\n\nType: [`boolean`](../api/interfaces/Config.md#wordwrap)\n\nDefault: `false`\n\nEnables word-wrap for long lines.\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Configuration Types (TypeScript)\nDESCRIPTION: This snippet shows how to import the TypeScript types for the LiveCodes configuration object.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Config } from 'livecodes';\n```\n\n----------------------------------------\n\nTITLE: Resulting Import Map in LiveCodes Result Page (HTML)\nDESCRIPTION: This snippet demonstrates the HTML output of the import map configuration in the LiveCodes result page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"moment\": \"https://cdn.jsdelivr.net/npm/moment@2.29.4/dist/moment.js\",\n      \"lodash\": \"https://esm.sh/lodash\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Methods in Markdown\nDESCRIPTION: This snippet outlines the two main methods for configuring LiveCodes: using a Configuration Object and Query Parameters. It provides links to more detailed documentation for each method.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [Configuration Object](./configuration-object.mdx)\n\nA JavaScript object used for configuration and keeping state.\n\n### [Query Parameters](./query-params.mdx)\n\nA flexible and convenient way to configure the app using URL query parameters\n```\n\n----------------------------------------\n\nTITLE: Building LiveCodes Without Documentation\nDESCRIPTION: Command to build the LiveCodes app without including documentation, redirecting all documentation links to the main LiveCodes site.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/self-hosting.mdx#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx cross-env DOCS_BASE_URL=null npm run build:app\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-rendered Eta Template Data\nDESCRIPTION: Custom settings configuration for providing template data in pre-rendered mode. Demonstrates how to supply values for template expressions during compilation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/eta.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"data\": {\n      \"name\": \"LiveCodes\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Mode in LiveCodes\nDESCRIPTION: Configuration option to set special editor modes like vim or emacs. Default is undefined, using the standard editor behavior without vim or emacs keybindings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n### `editorMode`\n\nType: [`\"vim\" | \"emacs\" | undefined`](../api/interfaces/Config.md#editormode)\n\nDefault: `undefined`\n\nSets [editor mode](../features/editor-settings.mdx#editor-modes).\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Content Link with Query Parameters\nDESCRIPTION: Creates a hyperlink to the LiveCodes application with a query parameter to prefill Markdown content.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-prefill.mdx#2025-04-13_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://livecodes.io/?md=**Hello World!**\" target=\"_blank\">\n  {'https://livecodes.io/?md=**Hello World!**'}\n</a>\n```\n\n----------------------------------------\n\nTITLE: Using RunInLiveCodes Component with Backup Screen Parameter in JSX\nDESCRIPTION: This code snippet demonstrates the usage of the RunInLiveCodes component. It sets the 'screen' parameter to 'backup' and specifies 'direct link' as the link text. This likely creates a direct link to the Backup/Restore screen in the LiveCodes application.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/backup-restore.mdx#2025-04-13_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<RunInLiveCodes params={{ screen: 'backup' }} linkText=\"direct link\" />\n```\n\n----------------------------------------\n\nTITLE: Custom Build Configuration with Environment Variables\nDESCRIPTION: Shell command showing how to customize the build process by setting the DOCS_BASE_URL environment variable when hosting LiveCodes in a subdirectory.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/self-hosting.mdx#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx cross-env DOCS_BASE_URL=\"/playground/docs/\" npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Handlebars Compiler Options\nDESCRIPTION: Custom settings configuration for Handlebars compiler options, demonstrating how to set preventIndent option.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/handlebars.mdx#2025-04-13_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"handlebars\": {\n    \"preventIndent\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Settings Configuration for Gleam Modules\nDESCRIPTION: JSON configuration for setting up custom Gleam modules with source and compiled URLs.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/gleam.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gleam\": {\n    \"modules\": {\n      \"plinth/browser/document\": {\n        \"srcUrl\": \"https://cdn.jsdelivr.net/gh/live-codes/gleam-precompiled@v0.3.0/build/packages/plinth/src/plinth/browser/document.gleam\",\n        \"compiledUrl\": \"https://cdn.jsdelivr.net/gh/live-codes/gleam-precompiled@v0.3.0/build/dev/javascript/plinth/plinth/browser/document.mjs\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled CSS Output\nDESCRIPTION: This shows the compiled CSS output after CSS Modules processing, with unique class names generated to avoid naming collisions.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssmodules.mdx#2025-04-13_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.page {\n  padding: 20px;\n}\n\n._text_1ygro_9 {\n  color: black;\n  font-family: sans-serif;\n}\n\n._small-text_1ygro_19 {\n  font-size: 20px;\n}\n\n._large-text_1ygro_29 {\n  font-size: 40px;\n}\n\n._large-text_1ygro_29:hover {\n  color: red;\n}\n\n._title_1ygro_47 {\n  color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing user-event in JavaScript\nDESCRIPTION: Shows how to import the user-event library for simulating user interactions in tests.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tests.mdx#2025-04-13_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport userEvent from '@testing-library/user-event';\n```\n\n----------------------------------------\n\nTITLE: Cloning and Deploying LiveCodes to GitHub Pages\nDESCRIPTION: Commands for cloning the LiveCodes repository, building the application locally, and deploying it to GitHub Pages. Includes commands for both production and development workflows.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/self-hosting.mdx#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/{your-username}/livecodes\ncd livecodes\nnpm install\nnpm build          # build the app to \"build\" directory\nnpm run serve      # locally serve to http://localhost:8080\n\n# deploy\nnpm run deploy     # build and deploy to github pages\n\n# for development\nnpm start          # start local development with code watch, rebuild and live-reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Sucrase Compiler Settings in JSON\nDESCRIPTION: Example configuration for Sucrase compiler showing how to specify transform options. This configuration enables TypeScript and imports transforms.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/sucrase.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sucrase\": { \"transforms\": [\"typescript\", \"imports\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component for CoffeeScript\nDESCRIPTION: This code snippet shows how to import the LiveCodes component, which can be used to create a CoffeeScript editor instance.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/coffeescript.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Vue Starter Template URL\nDESCRIPTION: URL to a starter template for Vue development in LiveCodes. This provides a quick way to start coding with Vue.js in the platform.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://livecodes.io/?template=vue\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Code Formatting in LiveCodes\nDESCRIPTION: The keyboard shortcut Alt+Shift+F can be used to trigger code formatting for the active editor in LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/code-format.mdx#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Alt</kbd> + <kbd>Shift</kbd> + <kbd>F</kbd>\n```\n\n----------------------------------------\n\nTITLE: Exporting i18n Source Texts in Shell\nDESCRIPTION: Command to export all source texts for internationalization in the LiveCodes project.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run i18n-export\n```\n\n----------------------------------------\n\nTITLE: Custom Settings for Solid in LiveCodes\nDESCRIPTION: Example of JSON configuration for custom Solid settings in LiveCodes. This snippet shows how to disable auto-rendering by setting the 'disableAutoRender' option to true.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/solid.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"solid\": {\n    \"disableAutoRender\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Settings in JSON for Live Codes Integration\nDESCRIPTION: Example JSON structure for specifying custom settings for a language integration in Live Codes. The settings are passed as a JSON object to the compiler during compile time. The example shows an empty object assigned to the 'name' property, which should be replaced with actual language-specific settings.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/_template.mdx#2025-04-13_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in MDX\nDESCRIPTION: This MDX code block imports and uses Docusaurus components to display a filtered list of documentation cards for supported languages. It leverages the useCurrentSidebarCategory hook to obtain sidebar items and filters out the index page from the list.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items.filter(item => item.docId !== 'languages/index')}/>\n```\n\n----------------------------------------\n\nTITLE: Importing MailLink Component in TypeScript React\nDESCRIPTION: This code snippet imports the MailLink component from a specific path in the project. The MailLink component is likely used to render secure email links in the documentation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/security.mdx#2025-04-13_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MailLink from '../../src/components/MailLink.tsx';\n```\n\n----------------------------------------\n\nTITLE: Starting a Release for LiveCodes in Shell\nDESCRIPTION: Command to start a new release process for the LiveCodes project using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run start-release\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Card List in MDX\nDESCRIPTION: This code snippet imports and uses DocCardList component from Docusaurus theme to display a list of documentation items. It utilizes the useCurrentSidebarCategory hook to fetch the current sidebar category items.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/overview.mdx#2025-04-13_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Creating 'Edit in LiveCodes' Bookmarklet in JavaScript\nDESCRIPTION: This JavaScript code creates a bookmarklet that opens LiveCodes in a new window and imports the current webpage URL. It encodes the current location URL and appends it to the LiveCodes URL as a query parameter.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/bookmarklet.mdx#2025-04-13_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\njavascript:(()=>{window.open(\"https://livecodes.io/?x=\"+encodeURIComponent(location.href),\"_blank\");})();\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference - Code Block Alignment\nDESCRIPTION: Git commit hash referencing documentation code block alignment fix.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n751c7663f9644fc31b306ab6d465aac8171cfd3c\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Usage in LiveCodes\nDESCRIPTION: Boolean configuration option to determine whether to use tabs instead of spaces for indentation. Default is false, meaning spaces are used. This setting also affects code formatting.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n### `useTabs`\n\nType: [`boolean`](../api/interfaces/Config.md#usetabs)\n\nDefault: `false`\n\nIf `true`, lines are indented with tabs instead of spaces. Also used in [code formatting](../features/code-format.mdx).\n```\n\n----------------------------------------\n\nTITLE: Multiple Properties Translation in HTML Element\nDESCRIPTION: Example showing how to translate multiple properties of an HTML element using the data-i18n-prop attribute with space-separated property names. This creates full keys in the format 'key.to.title#property'.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div title=\"This is a title\" data-i18n=\"key.to.title\" data-i18n-prop=\"title textContent\">\n  This is a content\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Button Element for ClojureScript Example\nDESCRIPTION: Creates a simple HTML button with the ID 'test' that will be targeted by the ClojureScript code for event handling.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/clojurescript.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"test\">test</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Card List using Docusaurus Components in JSX\nDESCRIPTION: This code imports Docusaurus theme components and uses them to render a card list of all items under the current sidebar category. This is typically used for creating section landing pages in documentation.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/examples/display-modes/index.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport {useCurrentSidebarCategory} from '@docusaurus/theme-common';\n\n<DocCardList items={useCurrentSidebarCategory().items}/>\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for LiveCodes in Shell\nDESCRIPTION: Command to run end-to-end tests for the LiveCodes project using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run e2e\n```\n\n----------------------------------------\n\nTITLE: Displaying Commit Hash in Markdown\nDESCRIPTION: Shows how commit hashes are referenced in the changelog using Markdown syntax. This format is used consistently throughout the document to link to specific commits.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n([9769fd2](https://github.com/live-codes/livecodes/commit/9769fd2617dfe27e96aa332ca55875005438d1ff))\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Family in LiveCodes\nDESCRIPTION: Configuration option to set the font family used in the code editor. Default is undefined, which uses the editor's default font.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/configuration/configuration-object.mdx#2025-04-13_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### `fontFamily`\n\nType: [`string | undefined`](../api/interfaces/Config.md#fontfamily)\n\nDefault: `undefined`\n\nSets the [code editor](../features/editor-settings.mdx) font family.\n```\n\n----------------------------------------\n\nTITLE: Cloning LiveCodes Repository in Shell\nDESCRIPTION: Commands to fork and clone the LiveCodes repository to the local machine. This is the first step in setting up the project for contribution.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/<your-name>/livecodes\n$ cd livecodes\n```\n\n----------------------------------------\n\nTITLE: Serving LiveCodes App Locally in Shell\nDESCRIPTION: Command to serve the LiveCodes app locally on http://127.0.0.1:8080 using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Eta Template Mode\nDESCRIPTION: Custom settings configuration to enable dynamic template rendering mode by setting prerender to false.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/eta.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Release Command for LiveCodes Project\nDESCRIPTION: Command to initiate the release process which handles version increments, changelog generation, and branch creation\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/release.mdx#2025-04-13_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start-release\n```\n\n----------------------------------------\n\nTITLE: Starting LiveCodes App with Watch Mode in Shell\nDESCRIPTION: Command to start the LiveCodes app and watch for changes using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Scheme Demo in LiveCodes\nDESCRIPTION: HTML structure used with the Scheme example, providing the DOM elements that are manipulated by the Scheme code. It includes a heading, logo image, counter display, and a button for user interaction.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/scheme.mdx#2025-04-13_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <h1>Hello, <span id=\"title\">World</span>!</h1>\n  <img class=\"logo\" alt=\"logo\" src=\"https://livecodes.io/livecodes/assets/templates/scheme.svg\" />\n  <p>You clicked <span id=\"counter\">0</span> times.</p>\n  <button id=\"counter-button\">Click me</button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Version Format Examples\nDESCRIPTION: Format specification showing the version numbering conventions for App and SDK releases\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/release.mdx#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nApp versions are numeric e.g. `v20`  \nSDK versions are semver e.g. `v1.2.3`\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Templates in Custom Settings\nDESCRIPTION: JSON configuration to enable dynamic template mode by setting the 'prerender' property to false. This allows templates to be rendered at runtime.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/dot.mdx#2025-04-13_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": {\n    \"prerender\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading for Version Release\nDESCRIPTION: Demonstrates the format used for version release headers in the changelog. It includes the version number, a link to compare with the previous version, and the release date.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## [v0.3.0](https://github.com/live-codes/livecodes/compare/v0.2.0...v.0.3.0) (2021-02-11)\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference - Console Update\nDESCRIPTION: Git commit hash referencing fix for console clearing in style-only updates.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nf6ebeb54e8dc62aa4bcfe21adedee30081213e21\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in JSX\nDESCRIPTION: This snippet shows how to import the LiveCodes component from the project's source files. It's typically used at the beginning of a React component file that utilizes LiveCodes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/read-only.mdx#2025-04-13_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TSX\nDESCRIPTION: Shows how to import the LiveCodes component from the components directory\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/lite.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Building LiveCodes Application with Custom Services\nDESCRIPTION: Command to rebuild the LiveCodes application after modifying services. The built application will be available in the build directory for deployment on any static file server.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/advanced/services.mdx#2025-04-13_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Vue Compiler Package Reference\nDESCRIPTION: Identifies the official Vue compiler package used in LiveCodes. The platform uses the official @vue/compiler-sfc for compiling Vue Single-File Components.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/vue.mdx#2025-04-13_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`@vue/compiler-sfc`: v3.5.13\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component\nDESCRIPTION: Import statement for the LiveCodes component from the source directory.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/i18n.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing RunInLiveCodes Component\nDESCRIPTION: Import statement for the RunInLiveCodes component used for embedding functionality.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/embeds.mdx#2025-04-13_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport RunInLiveCodes from '../../src/components/RunInLiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TypeScript\nDESCRIPTION: TypeScript import statement for the LiveCodes component from the source directory.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/getting-started.mdx#2025-04-13_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport LiveCodes from '../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Deploying LiveCodes to GitHub Pages in Shell\nDESCRIPTION: Command to deploy the built LiveCodes app to GitHub Pages using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run gh-pages\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Interpolation in i18n Context\nDESCRIPTION: Example of an HTML element with dynamic content using interpolation. Shows how to structure elements that require variable data to be inserted at runtime.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contribution/i18n.mdx#2025-04-13_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"share-encoded-url-expiry\">\n  <span class=\"{{warnClass}}\" data-i18n=\"share.characters\">{{urlLength}} characters</span\n  ><a href=\"#\" data-i18n=\"share.shortURL\">Get short URL</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Form Component\nDESCRIPTION: Renders the ContactForm component for user interaction\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/contact.mdx#2025-04-13_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<ContactForm></ContactForm>\n```\n\n----------------------------------------\n\nTITLE: Placeholder for cssnano Configuration in Markdown\nDESCRIPTION: This snippet is a markdown heading indicating the file is for cssnano configuration, followed by a TODO comment. It serves as a placeholder for future cssnano setup.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/cssnano.mdx#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# cssnano\n\nTODO...\n```\n\n----------------------------------------\n\nTITLE: Starting LiveCodes Documentation Server in Shell\nDESCRIPTION: Command to start the documentation server for LiveCodes on http://localhost:3000/docs and watch for changes.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run docs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LiveCodes in Shell\nDESCRIPTION: Command to install all necessary dependencies for the LiveCodes project using npm.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CONTRIBUTING.md#2025-04-13_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: R Live Reload Comment Example\nDESCRIPTION: Shows the special comment that can be used to force a complete reload of the WebR environment, similar to restarting a kernel in Jupyter notebooks.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/r.mdx#2025-04-13_snippet_7\n\nLANGUAGE: r\nCODE:\n```\n# __livecodes_reload__\n```\n\n----------------------------------------\n\nTITLE: Importing LiveCodes Component in TSX\nDESCRIPTION: Imports the LiveCodes component from the src/components directory, which is used to create interactive code examples on the page.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/features/tools-pane.mdx#2025-04-13_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: JavaScript Interoperability Configuration Import\nDESCRIPTION: TypeScript configuration for importing LiveCodes component\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/docs/docs/languages/php-wasm.mdx#2025-04-13_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport LiveCodes from '../../src/components/LiveCodes.tsx';\n```\n\n----------------------------------------\n\nTITLE: Reporting Security Vulnerability Email Template in Markdown\nDESCRIPTION: This snippet provides a template for reporting security vulnerabilities via email. It includes key information that should be included in the report, such as the type of issue, affected versions, and steps to reproduce.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/SECURITY.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Type of issue (e.g. cross-site scripting, authentication or authorization flaws etc.)\n- Version(s) of the App/SDK affected.\n- Full paths of source file(s) related to the manifestation of the issue\n- The location of the affected source code (tag/branch/commit or direct URL)\n- Any special configuration required to reproduce the issue\n- Step-by-step instructions to reproduce the issue\n- Proof-of-concept or exploit code (if possible)\n- Impact of the issue, including how an attacker might exploit the issue\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference - React Compiler\nDESCRIPTION: Git commit hash referencing the addition of React Compiler support.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n353ed9734b664fecaa79231d2bd573016bbc65a9\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference - Svelte Upgrade\nDESCRIPTION: Git commit hash referencing the upgrade to Svelte version 5.\nSOURCE: https://github.com/live-codes/livecodes/blob/develop/CHANGELOG.md#2025-04-13_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ndb3053ce407a7996add3586e4549eceae77f72c3\n```"
  }
]