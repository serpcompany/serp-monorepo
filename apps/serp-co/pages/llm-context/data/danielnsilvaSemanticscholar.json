[
  {
    "owner": "danielnsilva",
    "repo": "semanticscholar",
    "content": "TITLE: Searching Papers by Publication Date Range\nDESCRIPTION: This snippet searches for papers using the `search_paper` function from the `semanticscholar` library. The `publication_date_or_year` parameter restricts the search to a specific date range (YYYY-MM-DD:YYYY-MM-DD, YYYY-MM, or YYYY). The function returns results matching the provided query and publication date criteria. The `sch` object is an instance of `SemanticScholar` class.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nresults = sch.search_paper('turing test', publication_date_or_year='2020-01-01:2021-12-31')\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying Semantic Scholar API in Python\nDESCRIPTION: Python snippet demonstrating how to instantiate the Semantic Scholar client, fetch a paper by its ID using the get_paper method, and print the paper's title. It requires the semanticscholar package installed and active internet connection to query the live API.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/overview.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom semanticscholar import SemanticScholar\n\nsch = SemanticScholar()\npaper = sch.get_paper('10.1093/mind/lix.236.433')\nprint(paper.title)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Paginated Paper Search Results\nDESCRIPTION: This snippet demonstrates how to iterate over all results for a paper search that returns paginated results. It initializes a `SemanticScholar` object, searches for a paper using the `search_paper` function and iterates through the results. It then utilizes a list comprehension to iterate over the results object. This is the preferred method.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom semanticscholar import SemanticScholar\nsch = SemanticScholar()\nresults = sch.search_paper('Computing Machinery and Intelligence')\nall_results = [item for item in results]\n```\n\n----------------------------------------\n\nTITLE: Searching Papers and Specifying Returned Fields\nDESCRIPTION: This snippet demonstrates how to search for papers and specify the fields to be returned in the results. The `fields` parameter is used to define which fields are included in the output.  This reduces output size and improves performance when unnecessary fields are omitted.  It initializes a SemanticScholar object and uses the `search_paper` method with the `fields` parameter.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom semanticscholar import SemanticScholar\nsch = SemanticScholar()\nresults = sch.search_paper('software engineering', fields=['title','year'])\n```\n\n----------------------------------------\n\nTITLE: Querying Paper Data using SemanticScholar Client - Python\nDESCRIPTION: This example demonstrates initializing the SemanticScholar client, requesting metadata about a paper with a known ID, and accessing the resulting object's title property. Dependencies include the semanticscholar Python package. The primary parameter is a paper ID string passed to get_paper(). The input is a Semantic Scholar paper ID; output is a Python object with details about the paper, such as its title. This sample assumes a functioning network connection and proper installation of the semanticscholar package.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/README.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# First, import the client from semanticscholar module\nfrom semanticscholar import SemanticScholar\n\n# You'll need an instance of the client to request data from the API\nsch = SemanticScholar()\n\n# Get a paper by its ID\npaper = sch.get_paper('10.1093/mind/lix.236.433')\n\n# Print the paper title\nprint(paper.title)\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for the Library Only\nDESCRIPTION: This snippet enables debug-level logging specifically for the `semanticscholar` library, which is useful for detailed debugging information related to the library. This restricts debug-level logging to the semanticscholar library and is suitable when the specific output of this library alone is needed.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.getLogger('semanticscholar').setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Getting Recommended Papers for a Given Paper\nDESCRIPTION: This snippet demonstrates how to get recommended papers based on a given paper ID.  It imports the SemanticScholar class and uses `get_recommended_papers` method. The method takes a paper ID as input and returns a list of recommended papers.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom semanticscholar import SemanticScholar\nsch = SemanticScholar()\nresults = sch.get_recommended_papers('10.2139/ssrn.2250500')\n```\n\n----------------------------------------\n\nTITLE: Searching Papers by Minimum Citations Count\nDESCRIPTION: This code snippet searches for papers using the `search_paper` function from the `semanticscholar` library and filters results based on a minimum citation count. The `min_citation_count` parameter specifies the minimum number of citations a paper must have to be included in the results. The `sch` object is an instance of `SemanticScholar` class.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresults = sch.search_paper('turing test', min_citation_count=100)\n```\n\n----------------------------------------\n\nTITLE: Getting Recommended Papers from Positive/Negative Examples\nDESCRIPTION: This snippet demonstrates how to get recommended papers based on lists of positive and negative paper IDs. It utilizes the `get_recommended_papers_from_lists` method. It returns recommended papers based on the positive and negative example paper IDs. The method also handles the case where only positive IDs are provided.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom semanticscholar import SemanticScholar\nsch = SemanticScholar()\npositive_paper_ids = ['10.1145/3544585.3544600']\nnegative_paper_ids = ['10.1145/301250.301271']\nresults = sch.get_recommended_papers_from_lists(positive_paper_ids, negative_paper_ids)\n```\n\n----------------------------------------\n\nTITLE: Accessing the First Page of Paper Search Results\nDESCRIPTION: This snippet shows how to directly access the items on the first page of the search results to avoid extra API calls. It initializes a `SemanticScholar` object, searches for papers using the `search_paper` function, and accesses the items property to get the first page of the results.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresults = sch.search_paper('Computing Machinery and Intelligence')\nfirst_page = results.items\n```\n\n----------------------------------------\n\nTITLE: Fetching the Next Page of Results\nDESCRIPTION: This snippet fetches the next page of results after a paper search. It utilizes `next_page()` method to append the next batch of items to the current list. It initializes a `SemanticScholar` object, searches for a paper using the `search_paper` function, and then calls the next_page() method.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresults = sch.search_paper('Computing Machinery and Intelligence')\nresults.next_page()\nfirst_two_pages = results.items\n```\n\n----------------------------------------\n\nTITLE: Searching Papers with a Limit on Results\nDESCRIPTION: This snippet shows how to limit the number of results returned by the API. The limit parameter represents the maximum number of results to return for each API call. Setting a smaller limit can reduce output size and latency. The default limit is 100. It initializes a SemanticScholar object and calls the search_paper method with the limit parameter.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom semanticscholar import SemanticScholar\nsch = SemanticScholar()\nresults = sch.search_paper('software engineering', limit=5)\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Scholar Python Client using Bash\nDESCRIPTION: Installation snippet showing how to install the Semantic Scholar Python client library using pip. This is a prerequisite step required to use the library for API access.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/overview.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install semanticscholar\n```\n\n----------------------------------------\n\nTITLE: Installing semanticscholar latest release with pip (Bash)\nDESCRIPTION: This command installs the latest released version of the semanticscholar library from the Python Package Index (PyPI) using pip. It requires pip to be installed and configured properly. It installs the package and its dependencies.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/install.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install semanticscholar\n```\n\n----------------------------------------\n\nTITLE: Installing semanticscholar development version (Bash)\nDESCRIPTION: This set of commands clones the semanticscholar repository from GitHub, navigates into the cloned directory, and then installs the library from the local source code using pip. It requires Git and pip to be installed and configured correctly. This installs the development version directly from the source code.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/install.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:danielnsilva/semanticscholar.git\ncd semanticscholar\npip install .\n```\n\n----------------------------------------\n\nTITLE: Installing semanticscholar via VCS support (Bash)\nDESCRIPTION: This command installs the semanticscholar library directly from the GitHub repository using pip's VCS support. It requires pip and Git to be installed and configured correctly and utilizes pip to install from a git repository URL. It specifies installing from the master branch.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/install.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/danielnsilva/semanticscholar@master\n```\n\n----------------------------------------\n\nTITLE: Installing the SemanticScholar Python Library using pip - Console\nDESCRIPTION: This snippet shows how to install the semanticscholar library from PyPI using pip in a console or command-line environment. The only dependency is pip, and the syntax should be run in a terminal. Input is not required and the output consists of installation progress in the terminal. No network or OS-specific constraints are described, but an active internet connection is needed to fetch the package.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/README.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\npip install semanticscholar\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Paper Title Retrieval in Text\nDESCRIPTION: Text snippet showing the expected output from running the example Python code, which prints the title of the paper with the specified ID. This confirms the functionality of the API call and client library.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/overview.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nComputing Machinery and Intelligence\n```\n\n----------------------------------------\n\nTITLE: Displaying Paper Title Output in Console - Console\nDESCRIPTION: This snippet illustrates the expected output from running the previous Python usage example. When the get_paper method is called with a specific ID, the title of the retrieved paper is output to the terminal. The process assumes a valid API response and correct paper ID. No additional dependencies or user input are required.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/README.md#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\nComputing Machinery and Intelligence\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to Semantic Scholar API for Paper Batch Retrieval\nDESCRIPTION: Debug log showing a POST request to the Semantic Scholar Graph API v1 to retrieve batch paper information. The request includes an API key in the headers and a payload with three paper IDs in different formats (CorpusId, DOI, and SHA hash).\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/tests/data/debug_output.txt#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ids\": [\"CorpusId:470667\", \"10.2139/ssrn.2250500\", \"0f40b1f08821e22e859c6050916cec3667778613\"]\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H 'x-api-key: F@k3K3y' -d '{\"ids\": [\"CorpusId:470667\", \"10.2139/ssrn.2250500\", \"0f40b1f08821e22e859c6050916cec3667778613\"]}' https://api.semanticscholar.org/graph/v1/paper/batch?fields=abstract,authors,citationCount,citationStyles,corpusId,externalIds,fieldsOfStudy,influentialCitationCount,isOpenAccess,journal,openAccessPdf,paperId,publicationDate,publicationTypes,publicationVenue,referenceCount,s2FieldsOfStudy,title,url,venue,year\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging Globally\nDESCRIPTION: This snippet enables debug-level logging for all loggers. This is useful for understanding the internal workings of the `semanticscholar` library and identifying issues.  This can provide valuable context for identifying related issues or understanding broader behavior.\nSOURCE: https://github.com/danielnsilva/semanticscholar/blob/master/docs/source/usage.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.getLogger().setLevel(logging.DEBUG)\n```"
  }
]