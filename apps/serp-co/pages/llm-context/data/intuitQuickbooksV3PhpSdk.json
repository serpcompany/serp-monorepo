[
  {
    "owner": "intuit",
    "repo": "quickbooks-v3-php-sdk",
    "content": "TITLE: Complete QuickBooks Invoice Creation Example - PHP\nDESCRIPTION: Full example showing the complete process of creating an invoice including DataService configuration, invoice creation, and error handling.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse QuickBooksOnline\\API\\Core\\ServiceContext;\nuse QuickBooksOnline\\API\\DataService\\DataService;\nuse QuickBooksOnline\\API\\Core\\Http\\Serialization\\XmlObjectSerializer;\nuse QuickBooksOnline\\API\\Facades\\Invoice;\n// Prep Data Services\n$dataService = DataService::Configure(array(\n  'auth_mode' => 'oauth2',\n  'ClientID' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'ClientSecret' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'accessTokenKey' => 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n  'refreshTokenKey' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'QBORealmID' => \"123456789123456\",\n  'baseUrl' => \"Production\"\n))->setLogLocation(\"/location/to/newFolderForLog\")\n  ->throwExceptionOnError(true);\n//Add a new Invoice\n$invoiceToCreate = Invoice::create([\n  \"DocNumber\" => \"101\",\n  \"Line\" => [\n    [\n      \"Description\" => \"Sewing Service for Alex\",\n      \"Amount\" => 150.00,\n      \"DetailType\" => \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\" => [\n        \"ItemRef\" => [\n          \"value\" => 1,\n          \"name\" => \"Services\"\n        ]\n      ]\n    ]\n  ],\n  \"CustomerRef\" => [\n      \"value\" => \"1\",\n      \"name\" => \"Alex\"\n  ]\n]);\n\n$resultObj = $dataService->Add($invoiceToCreate);\n$error = $dataService->getLastError();\nif ($error) {\n    echo \"The Status code is: \" . $error->getHttpStatusCode() . \"\\n\";\n    echo \"The Helper message is: \" . $error->getOAuthHelperError() . \"\\n\";\n    echo \"The Response message is: \" . $error->getResponseBody() . \"\\n\";\n}else {\n    echo \"Created Id={$resultObj->Id}. Reconstructed response body:\\n\\n\";\n    $xmlBody = XmlObjectSerializer::getPostXmlFromArbitraryEntity($resultingObj, $urlResource);\n    echo $xmlBody . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth 2.0 DataService in PHP for QuickBooks API\nDESCRIPTION: Demonstrates how to initialize a DataService object using OAuth 2.0 credentials. This code configures the required parameters like ClientID, ClientSecret, RedirectURI, scope, and baseUrl for making API calls to QuickBooks Online.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse QuickBooksOnline\\API\\DataService\\DataService;\n\n\n// Prep Data Services\n$dataService = DataService::Configure(array(\n      'auth_mode' => 'oauth2',\n      'ClientID' => \"Client ID from the app's keys tab\",\n      'ClientSecret' => \"Client Secret from the app's keys tab\",\n      'RedirectURI' => \"The redirect URI provided on the Redirect URIs part under keys tab\",\n      'scope' => \"com.intuit.quickbooks.accounting or com.intuit.quickbooks.payment\",\n      'baseUrl' => \"Development/Production\"\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth 2.0 DataService in PHP\nDESCRIPTION: This snippet demonstrates how to configure the DataService object for OAuth 2.0 authentication by providing necessary parameters like Client ID, Client Secret, RedirectURI, scope, and baseUrl.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse QuickBooksOnline\\API\\DataService\\DataService;\n\n// Prep Data Services\n$dataService = DataService::Configure(array(\n      'auth_mode' => 'oauth2',\n      'ClientID' => \"Client ID from the app's keys tab\",\n      'ClientSecret' => \"Client Secret from the app's keys tab\",\n      'RedirectURI' => \"The redirect URI provided on the Redirect URIs part under keys tab\",\n      'scope' => \"com.intuit.quickbooks.accounting or com.intuit.quickbooks.payment\",\n      'baseUrl' => \"Development/Production\"\n));\n```\n\n----------------------------------------\n\nTITLE: Creating Invoice with Tax using QuickBooks Online V3 PHP SDK\nDESCRIPTION: This snippet demonstrates how to create an invoice with tax for a Canadian QuickBooks Online company using the QuickBooks Online V3 PHP SDK. It includes setting up the DataService, creating an invoice object, and handling the API response.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse QuickBooksOnline\\API\\Core\\ServiceContext;\nuse QuickBooksOnline\\API\\DataService\\DataService;\nuse QuickBooksOnline\\API\\Core\\Http\\Serialization\\XmlObjectSerializer;\nuse QuickBooksOnline\\API\\Facades\\Invoice;\n// Prep Data Services\n$dataService = DataService::Configure(array(\n  'auth_mode' => 'oauth2',\n  'ClientID' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'ClientSecret' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'accessTokenKey' => 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n  'refreshTokenKey' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'QBORealmID' => \"123456789123456\",\n  'baseUrl' => \"Production\"\n))->setLogLocation(\"/location/to/newFolderForLog\")\n  ->throwExceptionOnError(true);\n//Add a new Invoice\n$invoiceToCreate = Invoice::create([\n  \"DocNumber\" => \"101\",\n  \"Line\" => [\n    [\n      \"Description\" => \"Sewing Service for Jimmy in Canada\",\n      \"Amount\" => 150.00,\n      \"DetailType\" => \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\" => [\n        \"ItemRef\" => [\n          \"value\" => 1,\n          \"name\" => \"Services\"\n        ],\n        \"TaxCodeRef\" => [\n          \"value\" => 2\n        ]\n      ]\n    ]\n  ],\n  \"CustomerRef\" => [\n      \"value\" => \"2\",\n      \"name\" => \"Jimmy\"\n  ]\n]);\n\n$resultObj = $dataService->Add($invoiceToCreate);\n$error = $dataService->getLastError();\nif ($error) {\n    echo \"The Status code is: \" . $error->getHttpStatusCode() . \"\\n\";\n    echo \"The Helper message is: \" . $error->getOAuthHelperError() . \"\\n\";\n    echo \"The Response message is: \" . $error->getResponseBody() . \"\\n\";\n}else {\n    echo \"Created Id={$resultObj->Id}. Reconstructed response body:\\n\\n\";\n    $xmlBody = XmlObjectSerializer::getPostXmlFromArbitraryEntity($resultingObj, $urlResource);\n    echo $xmlBody . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Change Data Capture (CDC) in QuickBooks Online API (PHP)\nDESCRIPTION: Complete example showing how to use the Change Data Capture (CDC) operation to retrieve entities that have changed since a specified time. The code captures changes for invoices, items, and bills.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse QuickBooksOnline\\API\\Core\\OAuth\\OAuth2\\OAuth2LoginHelper;\nuse QuickBooksOnline\\API\\DataService\\DataService;\n\n// Prep Data Services\n$dataService = DataService::Configure(array(\n  'auth_mode' => 'oauth2',\n  'ClientID' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'ClientSecret' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'accessTokenKey' => 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',\n  'refreshTokenKey' => \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\n  'QBORealmID' => \"123456789123456\",\n  'baseUrl' => \"Production\"\n));\n\n\n// Use CDC APIs\n$entityList = array('invoice','item', 'bill');\n\n$cdcResponse = $dataService->CDC($entityList, \"2017-03-07T12:28:32-08:00\");\n$error = $dataService->getLastError();\nif ($error) {\n  echo \"The Status code is: \" . $error->getHttpStatusCode() . \"\\n\";\n  echo \"The Helper message is: \" . $error->getOAuthHelperError() . \"\\n\";\n  echo \"The Response message is: \" . $error->getResponseBody() . \"\\n\";\n  exit();\n}\n\nif ($cdcResponse->entities) {\n  foreach ($cdcResponse->entities as $entityName => $entityArray) {\n      echo \"CDC Says \" . count($entityArray) . \" Updated Entities of Type = {$entityName}\\n\";\n  }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Batch Requests in QuickBooks Online API (PHP)\nDESCRIPTION: Demonstrates how to create and execute batch requests that combine multiple operations. The example shows adding a query and an entity operation to a batch request and retrieving the response.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$batch = $dataService->CreateNewBatch();\n$batch->AddQuery(\"select * from Customer startPosition 0 maxResults 20\", \"queryCustomer\", \"uniqueQuery\");\n$batch->AddEntity($invoice, \"uniqueIdentifier\", \"create\");\n$batch->Execute();\n\n$batchItemResponse = $batch->intuitBatchItemResponses[\"uniqueIdentifier\"];\n```\n\n----------------------------------------\n\nTITLE: Querying Resources using QuickBooks Online V3 PHP SDK\nDESCRIPTION: This snippet shows how to perform query operations using the Query() method of the QuickBooks Online V3 PHP SDK. It includes examples of basic queries, pagination, counting, and filtering.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$allInvoices = $dataServices->Query(\"SELECT * FROM Invoice\");\n\n$firstTenInvoices = $dataServices->Query(\"SELECT * FROM Invoice STARTPOSITION 1 MAXRESULTS 10\");\n\n$firstTenInvoices = $dataServices->Query(\"SELECT * FROM Invoice\", 1, 10);\n\n$statement = \"SELECT COUNT\" . \"(\" . \"*\" . \")\" . \"FROM CUSTOMER\";\n$numberOfCustomers = $dataServices->Query($statement);\n\n$invoicesGreaterThenThousand = $dataServices->Query(\"SELECT * FROM Invoice WHERE TotalAmt > '1000.0'\");\n\n$theInvoice = $dataServices->Query(\"SELECT * FROM Invoice WHERE CustomerRef='58'\");\n\n$customers = $dataServices->Query(\"SELECT * FROM Customer ORDERBY FamilyName\");\n```\n\n----------------------------------------\n\nTITLE: Creating Invoice with Direct Field Access in QuickBooks Online API (PHP)\nDESCRIPTION: Example showing how to create an invoice by directly accessing entity fields instead of using associative arrays. This approach uses object properties to create a structured invoice with line items.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// Add an invoice\n$invoice = new IPPInvoice();\n$invoice->Deposit       = 0;\n$invoice->domain        =  \"QBO\";\n$invoice->AutoDocNumber = true;\n$invoice->TxnDate = date('Y-m-d', time());\n$invoice->CustomerRef   = \"66\";\n$invoice->PrivateNote   = \"SomeNote\";\n$invoice->TxnStatus     = \"Payable\";\n\n$line = new IPPLine();\n$line->Id = \"0\";\n$line->LineNum          = \"1\";\n$line->Description      = \"test\";\n$line->Amount           = 1000;\n$line->DetailType = \"DescriptionOnly\";\n\n$sub_line = new IPPLine();\n$sub_line->Id           = \"0\";\n$sub_line->LineNum      = \"2\";\n$sub_line->Description  = \"Sub Total\";\n$sub_line->Amount       = 2000;\n$sub_line->DetailType   = \"SubtotalLineDetail\";\n\n\n$invoice->Line          = array($line, $sub_line);\n$invoice->RemitToRef    = \"66\";\n$invoice->TotalAmt      = 1000;\n$invoice->FinanceCharge = 'false';\n\n// Add a invoice\n$resultingInvoiceObj = $dataService->Add($invoice);\n```\n\n----------------------------------------\n\nTITLE: Updating an Invoice with New Line Items in QuickBooks PHP SDK\nDESCRIPTION: Complete example of updating an existing invoice with new line items using the Invoice::update() method. This demonstrates the sparse update pattern and shows how to replace all line items in an invoice, including adding a discount line.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$updatedInvoice = Invoice::update($theInvoice, [\n    \"sparse\" => true,\n    \"Line\" => [\n      [\n        \"Description\" => \"Sewing Service for Alex\",\n        \"Amount\" => 150.00,\n        \"DetailType\" => \"SalesItemLineDetail\",\n        \"SalesItemLineDetail\" => [\n          \"ItemRef\" => [\n            \"value\" => 1,\n            \"name\" => \"Services\"\n          ]\n        ]\n      ],\n      [\n        \"Description\" => \"Discount for Alex\",\n        \"Amount\" => -10.00,\n        \"DetailType\" => \"SalesItemLineDetail\",\n        \"SalesItemLineDetail\" => [\n          \"ItemRef\" => [\n            \"value\" => 21,\n            \"name\" => \"Discount\"\n          ]\n        ]\n      ]\n     ]\n]);\n$updatedResult = dataService->Update($updatedInvoice);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Object in QuickBooks V3 PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve the error object after making an API call using the DataService object. It uses the getLastError() method to check if an error occurred during the API request.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/handle-error.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Make the API call\n$result = $dataService->Add($theTargetObj);\n$error =  $dataService->getLastError();\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Tokens in PHP\nDESCRIPTION: This snippet shows how to exchange the authorization code for OAuth 2.0 tokens after the user has authorized the application. It requires the authorization code and RealmID.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$accessToken = $OAuth2LoginHelper->exchangeAuthorizationCodeForToken(\"authorizationCode\", \"RealmID\");\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth 2.0 Token with DataService in PHP\nDESCRIPTION: This snippet demonstrates how to refresh an expired OAuth 2.0 access token using the refresh token. It shows how to configure the DataService and use OAuth2LoginHelper.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse QuickBooksOnline\\API\\DataService\\DataService;\n\n// Prep Data Services\n$dataService = DataService::Configure(array(\n     'auth_mode' => 'oauth2',\n     'ClientID' => \"Client ID from the app's keys tab\",\n     'ClientSecret' => \"Client Secret from the app's keys tab\",\n     //get the refresh token from session or database\n     'refreshTokenKey' => \"Your latest OAuth 2 Refresh Token\",\n     'QBORealmID' => \"The Company ID which the app wants to access\",\n     'baseUrl' => \"Development/Production\"\n));\n\n$OAuth2LoginHelper = $dataService->getOAuth2LoginHelper();\n$refreshedAccessTokenObj = $OAuth2LoginHelper->refreshToken();\n$error = $OAuth2LoginHelper->getLastError();\nif($error){\n  ...\n}else{\n  //Refresh Token is called successfully\n  $dataService->updateOAuth2Token($refreshedAccessTokenObj);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Using OAuth 2.0 Tokens in PHP\nDESCRIPTION: This snippet shows how to configure the DataService with existing OAuth 2.0 tokens, allowing developers to make API calls without going through the token generation process.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse QuickBooksOnline\\API\\DataService\\DataService;\n\n// Prep Data Services\n$dataService = DataService::Configure(array(\n     'auth_mode' => 'oauth2',\n     'ClientID' => \"Client ID from the app's keys tab\",\n     'ClientSecret' => \"Client Secret from the app's keys tab\",\n     'accessTokenKey' => 'OAuth 2 Access Token',\n     'refreshTokenKey' => \"OAuth 2 Refresh Token\",\n     'QBORealmID' => \"The Company ID which the app wants to access\",\n     'baseUrl' => \"Development/Production\"\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Info and Preferences using QuickBooks Online V3 PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve company information and preferences using the getCompanyInfo() and getCompanyPreferences() methods of the QuickBooks Online V3 PHP SDK.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$CompanyInfo = $dataService->getCompanyInfo();\n\n$CompanyPrefs = $dataService->getCompanyPreferences();\n```\n\n----------------------------------------\n\nTITLE: Querying Resources by ID using QuickBooks Online V3 PHP SDK\nDESCRIPTION: This snippet shows how to query resources by their ID using the FindById() method of the QuickBooks Online V3 PHP SDK. It demonstrates two ways of using the method: with an object and with a string endpoint name.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n//The $invoice object which has an Id\n$dataService->FindById($invoice);\n\n//We are looking for Invoice with id=1. You can use\n//Bill, Customer, Purchase, etc\n$dataService->FindById(\"Invoice\", 1);\n```\n\n----------------------------------------\n\nTITLE: Creating Invoice Object with Facade - PHP\nDESCRIPTION: Uses the Invoice Facade to create a complete invoice object with customer reference, line items, and document number.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$invoiceToCreate = Invoice::create([\n  \"DocNumber\" => \"101\",\n  \"Line\" => [\n    [\n      \"Description\" => \"Sewing Service for Alex\",\n      \"Amount\" => 150.00,\n      \"DetailType\" => \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\" => [\n        \"ItemRef\" => [\n          \"value\" => 1,\n          \"name\" => \"Services\"\n        ]\n      ]\n    ]\n  ],\n  \"CustomerRef\" => [\n      \"value\" => \"1\",\n      \"name\" => \"Alex\"\n  ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Invoice Line Items with Discount in PHP for QuickBooks API\nDESCRIPTION: Example of creating an invoice line item structure with a service item and a discount item. This structure is used to update an existing invoice, showing the necessary format for the Line array containing both a service and a discount item.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"Line\" => [\n    [\n      \"Description\" => \"Sewing Service for Alex\",\n      \"Amount\" => 150.00,\n      \"DetailType\" => \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\" => [\n        \"ItemRef\" => [\n          \"value\" => 1,\n          \"name\" => \"Services\"\n        ]\n      ]\n    ],\n    [\n      \"Description\" => \"Discount for Alex\",\n      \"Amount\" => -10.00,\n      \"DetailType\" => \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\" => [\n        \"ItemRef\" => [\n          \"value\" => 21,\n          \"name\" => \"Discount\"\n        ]\n      ]\n    ]\n  ]\n```\n\n----------------------------------------\n\nTITLE: Sending Email for an Invoice in QuickBooks Online API (PHP)\nDESCRIPTION: Code example showing how to send an email for an invoice using the SendEmail method. This operation requires the invoice entity and the recipient's email address.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$invoice = $dataService->FindById(\"invoice\", 1);\n$result = $dataSerivce->SendEmail($invoice, \"abc@xyz.com\");\n```\n\n----------------------------------------\n\nTITLE: Deleting an Invoice in QuickBooks Online API (PHP)\nDESCRIPTION: Demonstrates how to delete an invoice resource from QuickBooks Online by providing the Id and SyncToken. The Delete method requires both these parameters to identify and verify the entity being deleted.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$invoice = Invoice::create([\n    \"Id\" => \"1\",\n    \"SyncToken\" => \"0\"\n]);\n$currentResultObj = $dataService->Delete($invoice);\n```\n\n----------------------------------------\n\nTITLE: Updating Tax Amount for Invoice in QuickBooks Online API (PHP)\nDESCRIPTION: Code snippet showing how to update just the tax amount of an invoice instead of updating the tax code. This demonstrates overriding TxnTaxDetail.TotalTax and TxnTaxDetail.TaxLine.Amount properties.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n{\n  \"sparse\" : \"true\",\n  \"Id\": \"1\",\n  \"SyncToken\": \"9\",\n  \"TxnTaxDetail\": {\n    \"TotalTax\": 45.0,\n    \"TaxLine\": [\n    {\n      \"Amount\": 30.0,\n      \"DetailType\": \"TaxLineDetail\",\n      \"TaxLineDetail\": {\n        \"TaxRateRef\": {\n          \"value\": \"12\"\n        },\n        \"PercentBased\": true,\n        \"TaxPercent\": 15,\n        \"NetAmountTaxable\": 200.0\n      }\n    },\n    {\n      \"Amount\": 15,\n      \"DetailType\": \"TaxLineDetail\",\n      \"TaxLineDetail\": {\n        \"TaxRateRef\": {\n          \"value\": \"2\"\n        },\n        \"PercentBased\": true,\n        \"TaxPercent\": 0,\n        \"NetAmountTaxable\": 100.0\n        }\n     }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Invoice with Tax Information in QuickBooks PHP SDK\nDESCRIPTION: Example of updating an invoice with corrected tax information. This shows the structure needed to update tax codes, percentages, and amounts on line items. When updating tax details, all related fields must be explicitly provided.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n{\n  \"Deposit\": 0,\n  \"AllowIPNPayment\": false,\n  \"AllowOnlinePayment\": false,\n  \"AllowOnlineCreditCardPayment\": false,\n  \"AllowOnlineACHPayment\": false,\n  \"domain\": \"QBO\",\n  \"sparse\": false,\n  \"Id\": \"1\",\n  \"SyncToken\": \"4\",\n  \"MetaData\": {\n    \"CreateTime\": \"2018-03-13T16:33:42-07:00\",\n    \"LastUpdatedTime\": \"2018-03-13T17:05:39-07:00\"\n  },\n  \"CustomField\": [],\n  \"DocNumber\": \"1001\",\n  \"TxnDate\": \"2018-03-13\",\n  \"CurrencyRef\": {\n    \"value\": \"CAD\",\n    \"name\": \"Canadian Dollar\"\n  },\n  \"LinkedTxn\": [],\n  \"Line\": [\n    {\n      \"Id\": \"1\",\n      \"LineNum\": 1,\n      \"Description\": \"Jimmy Service hours\",\n      \"Amount\": 200.0,\n      \"DetailType\": \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\": {\n        \"ItemRef\": {\n          \"value\": \"2\",\n          \"name\": \"Hours\"\n        },\n        \"UnitPrice\": 200,\n        \"Qty\": 1,\n        \"TaxCodeRef\": {\n          \"value\": \"6\"\n        }\n      }\n    },\n    {\n      \"Id\": \"2\",\n      \"LineNum\": 2,\n      \"Description\": \"Jimmy extra hours\",\n      \"Amount\": 100.0,\n      \"DetailType\": \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\": {\n        \"ItemRef\": {\n          \"value\": \"2\",\n          \"name\": \"Hours\"\n        },\n        \"UnitPrice\": 100,\n        \"Qty\": 1,\n        \"TaxCodeRef\": {\n          \"value\": \"6\"\n        }\n      }\n    },\n    {\n      \"Amount\": 300.0,\n      \"DetailType\": \"SubTotalLineDetail\",\n      \"SubTotalLineDetail\": {}\n    }\n  ],\n  \"TxnTaxDetail\": {\n    \"TotalTax\": 45.0,\n    \"TaxLine\": [\n      {\n        \"Amount\": 45.0,\n        \"DetailType\": \"TaxLineDetail\",\n        \"TaxLineDetail\": {\n          \"TaxRateRef\": {\n            \"value\": \"12\"\n          }\n\n```\n\n----------------------------------------\n\nTITLE: Canadian Invoice with Tax Structure in QuickBooks API\nDESCRIPTION: Complete example of an invoice JSON response from the QuickBooks API for a Canadian company with tax information. This shows the structure of invoice line items, tax details, and totals for a tax-enabled invoice.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n{\n  \"Deposit\": 0,\n  \"AllowIPNPayment\": false,\n  \"AllowOnlinePayment\": false,\n  \"AllowOnlineCreditCardPayment\": false,\n  \"AllowOnlineACHPayment\": false,\n  \"domain\": \"QBO\",\n  \"sparse\": false,\n  \"Id\": \"1\",\n  \"SyncToken\": \"0\",\n  \"MetaData\": {\n    \"CreateTime\": \"2018-03-13T16:33:42-07:00\",\n    \"LastUpdatedTime\": \"2018-03-13T16:33:42-07:00\"\n  },\n  \"CustomField\": [],\n  \"DocNumber\": \"1001\",\n  \"TxnDate\": \"2018-03-13\",\n  \"CurrencyRef\": {\n    \"value\": \"CAD\",\n    \"name\": \"Canadian Dollar\"\n  },\n  \"LinkedTxn\": [],\n  \"Line\": [\n  {\n    \"Id\": \"1\",\n    \"LineNum\": 1,\n    \"Description\": \"Jimmy Service hours\",\n    \"Amount\": 200.0,\n    \"DetailType\": \"SalesItemLineDetail\",\n    \"SalesItemLineDetail\": {\n      \"ItemRef\": {\n        \"value\": \"2\",\n        \"name\": \"Hours\"\n      },\n      \"UnitPrice\": 200,\n      \"Qty\": 1,\n      \"TaxCodeRef\": {\n        \"value\": \"6\"\n      }\n    }\n   },\n   {\n    \"Id\": \"2\",\n    \"LineNum\": 2,\n    \"Description\": \"Jimmy extra hours\",\n    \"Amount\": 100.0,\n    \"DetailType\": \"SalesItemLineDetail\",\n    \"SalesItemLineDetail\": {\n      \"ItemRef\": {\n        \"value\": \"2\",\n        \"name\": \"Hours\"\n      },\n      \"UnitPrice\": 100,\n      \"Qty\": 1,\n      \"TaxCodeRef\": {\n        \"value\": \"2\"\n      }\n    }\n   },\n   {\n    \"Amount\": 300.0,\n    \"DetailType\": \"SubTotalLineDetail\",\n    \"SubTotalLineDetail\": {}\n   }\n ],\n \"TxnTaxDetail\": {\n  \"TotalTax\": 30.0,\n  \"TaxLine\": [\n    {\n      \"Amount\": 30.0,\n      \"DetailType\": \"TaxLineDetail\",\n      \"TaxLineDetail\": {\n        \"TaxRateRef\": {\n          \"value\": \"12\"\n        },\n        \"PercentBased\": true,\n        \"TaxPercent\": 15,\n        \"NetAmountTaxable\": 200.0\n      }\n    },\n    {\n      \"Amount\": 0,\n      \"DetailType\": \"TaxLineDetail\",\n      \"TaxLineDetail\": {\n        \"TaxRateRef\": {\n          \"value\": \"2\"\n        },\n        \"PercentBased\": true,\n        \"TaxPercent\": 0,\n        \"NetAmountTaxable\": 100.0\n      }\n    }\n   ]\n },\n \"CustomerRef\": {\n  \"value\": \"1\",\n  \"name\": \"Jimmy\"\n },\n \"SalesTermRef\": {\n  \"value\": \"3\"\n },\n \"DueDate\": \"2018-04-12\",\n \"GlobalTaxCalculation\": \"TaxExcluded\",\n \"TotalAmt\": 330.0,\n \"PrintStatus\": \"NotSet\",\n \"EmailStatus\": \"NotSet\",\n \"Balance\": 330.0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Merging Line Items with Helper Class in QuickBooks PHP SDK\nDESCRIPTION: Alternative approach to updating invoice line items using the Line helper class. This demonstrates how to create a new line item, remove the subtotal line, and merge the new line with existing ones before performing the update.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$LineObj = Line::create([\n    \"Description\" => \"Discount for Alex\",\n    \"Amount\" => -10.00,\n    \"DetailType\" => \"SalesItemLineDetail\",\n    \"SalesItemLineDetail\" => [\n      \"ItemRef\" => [\n        \"value\" => 21,\n        \"name\" => \"Discount\"\n      ]\n    ]\n]);\n//Remove last element of Line Item.\n$lineArray = array_pop($theInvoice->Line);\n$lineArray[] = $LineObj;\n$updatedInvoice = Invoice::update($theInvoice, [\n    \"sparse\" => true,\n    \"Line\" => $lineArray\n]);\n$updatedResult = dataService->Update($updatedInvoice);\n```\n\n----------------------------------------\n\nTITLE: Processing Query Results for Invoice Update in QuickBooks PHP SDK\nDESCRIPTION: Retrieves the target invoice from the query results array. This code checks if exactly one invoice was found and retrieves it using the current() function for subsequent update operations.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nif(!empty($targetInvoiceArray) && sizeof($targetInvoiceArray) == 1){\n    $theInvoice = current($targetInvoiceArray);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Invoice by DocNumber in QuickBooks API using PHP\nDESCRIPTION: Query operation to find a specific invoice in QuickBooks Online using the DocNumber field. This snippet demonstrates how to retrieve an invoice with a specific document number for further updating.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$targetInvoiceArray = $dataService->Query(\"select * from Invoice where DocNumber='101'\");\n```\n\n----------------------------------------\n\nTITLE: Constructing Line Item for QuickBooks Invoice - PHP\nDESCRIPTION: Creates a Line array structure for an invoice that represents a sales transaction. Includes amount, description, and item reference details.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"Line\" => [\n    [\n      \"Description\" => \"Sewing Service for Alex\",\n      \"Amount\" => 150.00,\n      \"DetailType\" => \"SalesItemLineDetail\",\n      \"SalesItemLineDetail\" => [\n        \"ItemRef\" => [\n          \"value\" => 1,\n          \"name\" => \"Services\"\n        ]\n      ]\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Constructing CustomerRef for QuickBooks Invoice - PHP\nDESCRIPTION: Creates a CustomerRef array structure to specify the customer for a QuickBooks invoice. Requires customer ID and optionally includes customer name.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"CustomerRef\" => [\n    \"value\" => \"1\",\n    \"name\" => \"Alex\"\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Intuit-tid for Error Reporting in QuickBooks V3 PHP SDK\nDESCRIPTION: This code shows how to retrieve the Intuit-tid from the error response. This value is useful when reporting unclear errors to Intuit Support for further diagnosis.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/handle-error.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$intuit_tid = $error->getIntuitTid();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Details in QuickBooks V3 PHP SDK\nDESCRIPTION: This snippet demonstrates how to retrieve detailed error information when an API request fails. It uses getHttpStatusCode() and getResponseBody() methods to get the status code and response message of the failed request.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/handle-error.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//Make the API call\n$result = $dataService->Add($theTargetObj);\n$error =  $dataService->getLastError();\nif($error) {\n    echo \"The Status code is: \" . $error->getHttpStatusCode() . \"\\n\";\n    echo \"The Response message is: \" . $error->getResponseBody() . \"\\n\";\n} else {\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Checking API Request Success in QuickBooks V3 PHP SDK\nDESCRIPTION: This code shows how to check if the last API request was successful using an if statement. It retrieves the error object and evaluates it to determine the success of the API call.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/handle-error.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Make the API call\n$result = $dataService->Add($theTargetObj);\n$error =  $dataService->getLastError();\nif($error) {\n    ...\n} else {\n    ....\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ServiceContext in QuickBooks PHP SDK\nDESCRIPTION: Demonstrates how to get the ServiceContext object which contains all OAuth values and configuration information associated with the current DataService instance.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$dataService->getServiceContext()\n```\n\n----------------------------------------\n\nTITLE: Enabling Exception Throwing on Errors in QuickBooks PHP SDK\nDESCRIPTION: Shows how to configure the SDK to throw exceptions when API requests fail instead of just storing the error. By default, exceptions are not thrown and errors must be checked manually.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$dataService->throwExceptionOnError(true);\n```\n\n----------------------------------------\n\nTITLE: Error Handling in QuickBooks PHP SDK\nDESCRIPTION: Demonstrates how to check for errors after making API requests using the getLastError() method. Any response with a non-200 status code is considered a failed request and will be stored in the lastError object.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$error = $dataService->getLastError();\nif($error){\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Location in QuickBooks PHP SDK\nDESCRIPTION: Shows how to change the default log directory location from 'tmp/IdsLogs' to a custom path. This is useful when you need to store logs in a different location for security or organization purposes.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$dataService->setLogLocation(\"/Your/Path/ForLog\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Logging in QuickBooks PHP SDK\nDESCRIPTION: Demonstrates how to disable the default logging functionality in the QuickBooks V3 PHP SDK. By default, logging is enabled and tracks all API requests and responses.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$dataService->disableLog();\n```\n\n----------------------------------------\n\nTITLE: Setting Minor Version for QuickBooks API in PHP\nDESCRIPTION: Shows how to set the minor version of the QuickBooks API to use. This allows developers to specify which version of the API they want to target, with the default being version 8 if not specified.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/configuration.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$dataService->setMinorVersion(\"9\");\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth 2.0 Token in PHP\nDESCRIPTION: This snippet demonstrates how to revoke an OAuth 2.0 token (either access token or refresh token) using the OAuth2LoginHelper. This is useful for sign-out functionality.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse QuickBooksOnline\\API\\Core\\OAuth\\OAuth2\\OAuth2LoginHelper;\n//The first parameter of OAuth2LoginHelper is the ClientID, second parameter is the client Secret\n$oauth2LoginHelper = new OAuth2LoginHelper(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");\n$revokeResult = $oauth2LoginHelper->revokeToken(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");\nif($revokeResult){\n    echo \"RefreshToken Token revoked.\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth 2.0 Token with OAuth2LoginHelper in PHP\nDESCRIPTION: This snippet shows how to directly construct the OAuth2LoginHelper and use it to refresh an OAuth 2.0 access token. It also demonstrates how to extract the new tokens.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse QuickBooksOnline\\API\\Core\\OAuth\\OAuth2\\OAuth2LoginHelper;\n\n//The first parameter of OAuth2LoginHelper is the ClientID, second parameter is the client Secret\n$oauth2LoginHelper = new OAuth2LoginHelper(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\",\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");\n$accessTokenObj = $oauth2LoginHelper->\n                      refreshAccessTokenWithRefreshToken(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");\n$accessTokenValue = $accessTokenObj->getAccessToken();\n$refreshTokenValue = $accessTokenObj->getRefreshToken();\necho \"Access Token is:\";\nprint_r($accessTokenValue);\necho \"RefreshToken Token is:\";\nprint_r($refreshTokenValue);\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth 2.0 Refresh Token Value in PHP\nDESCRIPTION: This snippet demonstrates how to extract the OAuth 2.0 Refresh Token value from the access token object, which should be stored for refreshing access tokens.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$refreshTokenValue = $accessTokenObj->getRefreshToken();\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth 2.0 Access Token Value in PHP\nDESCRIPTION: This snippet shows how to extract the OAuth 2.0 Access Token value from the access token object, which can be stored in a database for later use.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$accessTokenValue = $accessTokenObj->getAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Updating DataService with OAuth 2.0 Token in PHP\nDESCRIPTION: This snippet demonstrates how to update the DataService object with the OAuth 2.0 token after it has been generated, allowing the DataService to make API calls.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$dataService->updateOAuth2Token($accessTokenObj);\n```\n\n----------------------------------------\n\nTITLE: Example of Exchanging Authorization Code for Tokens in PHP\nDESCRIPTION: This is a practical example of exchanging an authorization code for OAuth 2.0 tokens with specific values for the authorization code and RealmID.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$accessTokenObj = $OAuth2LoginHelper->exchangeAuthorizationCodeForToken(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", \"1234567891234567\");\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization Code URL in PHP\nDESCRIPTION: This snippet demonstrates how to generate the Authorization Code URL that will be presented to users in a browser to authorize the application to access their QuickBooks data.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$authorizationCodeUrl = $OAuth2LoginHelper->getAuthorizationCodeURL();\n```\n\n----------------------------------------\n\nTITLE: Getting OAuth2LoginHelper from DataService in PHP\nDESCRIPTION: This snippet shows how to retrieve the OAuth2LoginHelper object from the DataService, which is used to complete the OAuth 2.0 authentication process.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/authorization.rst.txt#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$OAuth2LoginHelper = $dataService->getOAuth2LoginHelper();\n```\n\n----------------------------------------\n\nTITLE: Error Handling for QuickBooks API Response - PHP\nDESCRIPTION: Demonstrates how to handle API responses and errors when creating an invoice. Includes status code and error message extraction.\nSOURCE: https://github.com/intuit/quickbooks-v3-php-sdk/blob/master/docs/_sources/quickstart.rst.txt#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$error = $dataService->getLastError();\nif ($error) {\n    echo \"The Status code is: \" . $error->getHttpStatusCode() . \"\\n\";\n    echo \"The Helper message is: \" . $error->getOAuthHelperError() . \"\\n\";\n    echo \"The Response message is: \" . $error->getResponseBody() . \"\\n\";\n}else {\n    echo \"Created Id={$resultObj->Id}. Reconstructed response body:\\n\\n\";\n    $xmlBody = XmlObjectSerializer::getPostXmlFromArbitraryEntity($resultingObj, $urlResource);\n    echo $xmlBody . \"\\n\";\n}\n```"
  }
]