[
  {
    "owner": "gridstack",
    "repo": "gridstack.js",
    "content": "TITLE: Import GridStack in ES6 or Typescript\nDESCRIPTION: This snippet demonstrates how to import the gridstack library and its associated CSS file in an ES6 or Typescript project. It assumes that gridstack has been installed as a dependency. The CSS import is required for styling the grid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'gridstack/dist/gridstack.min.css';\nimport { GridStack } from 'gridstack';\n```\n\n----------------------------------------\n\nTITLE: Basic GridStack Usage React\nDESCRIPTION: This snippet demonstrates basic usage of the React GridStack wrapper. It imports necessary components, defines a simple text component, sets up grid options, and renders the GridStack using the GridStackProvider, GridStackRenderProvider, and GridStackRender components. It uses a component map to render components within the grid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/react/README.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  GridStackProvider,\n  GridStackRender,\n  GridStackRenderProvider,\n} from \"path/to/lib\";\nimport \"gridstack/dist/gridstack.css\";\nimport \"path/to/demo.css\";\n\nfunction Text({ content }: { content: string }) {\n  return <div>{content}</div>;\n}\n\nconst COMPONENT_MAP = {\n  Text,\n  // ... other components\n};\n\n// Grid options\nconst gridOptions = {\n  acceptWidgets: true,\n  margin: 8,\n  cellHeight: 50,\n  children: [\n    {\n      id: \"item1\",\n      h: 2,\n      w: 2,\n      content: JSON.stringify({\n        name: \"Text\",\n        props: { content: \"Item 1\" },\n      }),\n    },\n    // ... other grid items\n  ],\n};\n\nfunction App() {\n  return (\n    <GridStackProvider initialOptions={gridOptions}>\n      {/* Maybe a toolbar here. Access to addWidget and addSubGrid by useGridStackContext() */}\n\n      {/* Grid Stack Root Element */}\n      <GridStackRenderProvider>\n        {/* Grid Stack Default Render */}\n        <GridStackRender componentMap={COMPONENT_MAP} />\n      </GridStackRenderProvider>\n\n      {/* Maybe other UI here */}\n    </GridStackProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular Basic Component Code\nDESCRIPTION: Illustrates the TypeScript code for a simple Angular component using Gridstack. It includes importing necessary modules, defining grid options, and setting up initial grid items. Requires `gridstack` package.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GridStackOptions } from 'gridstack';\nimport { GridstackComponent, GridstackItemComponent } from 'gridstack/dist/angular';\n\n@Component({\n  imports: [ // SKIP if doing module import instead (next)\n    GridstackComponent,\n    GridstackItemComponent\n  ]\n  ...\n })\nexport class MyComponent {\n  // sample grid options + items to load...\n  public gridOptions: GridStackOptions = {\n    margin: 5,\n    children: [ // or call load(children) or addWidget(children[0]) with same data\n      {x:0, y:0, minW:2, content:'Item 1'},\n      {x:1, y:0, content:'Item 2'},\n      {x:0, y:1, content:'Item 3'},\n    ]\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GridStack Usage - Dynamic Item Creation\nDESCRIPTION: This snippet shows how to initialize a grid and dynamically add a widget to it.  First, a div with the class 'grid-stack' is added to the HTML.  Then, in the script, the GridStack is initialized and a widget with width 2 and the content 'item 1' is added.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...in your HTML\n<div class=\"grid-stack\"></div>\n\n// ...in your script\nvar grid = GridStack.init();\ngrid.addWidget({w: 2, content: 'item 1'});\n```\n\n----------------------------------------\n\nTITLE: Basic GridStack Usage - Loading from Data\nDESCRIPTION: This snippet demonstrates how to load a grid from a serialized data array instead of using .addWidget(). The array contains objects with x, y, w, h and content properties which define the layout of the grid items. The grid.load() method is then used to populate the grid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// using serialize data instead of .addWidget()\nconst serializedData = [\n  {x: 0, y: 0, w: 2, h: 2},\n  {x: 2, y: 3, w: 3, content: 'item 2'},\n  {x: 1, y: 3}\n];\n\ngrid.load(serializedData);\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiple Grids with GridStack.initAll()\nDESCRIPTION: This code snippet demonstrates how to initialize multiple GridStack instances using the `GridStack.initAll()` method. It initializes a list of elements (given a selector) and returns an array of GridStack instances, allowing for easy iteration and manipulation of multiple grids.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet grids = GridStack.initAll();\ngrids.forEach(...)\n```\n\n----------------------------------------\n\nTITLE: Change Grid Columns Initialization\nDESCRIPTION: This JavaScript snippet shows how to initialize GridStack with a custom number of columns (N).  The 'column' option is set to the desired number of columns when initializing the GridStack instance. This allows creating grids with a different column structure than the default of 12.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nGridStack.init( {column: N} );\n```\n\n----------------------------------------\n\nTITLE: Install Gridstack using Yarn or NPM\nDESCRIPTION: This snippet demonstrates how to install the gridstack library using either yarn or npm.  It shows the commands to add gridstack as a project dependency.  No specific configuration is required after installation.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nyarn add gridstack\n// or\npm install --save gridstack\n```\n\n----------------------------------------\n\nTITLE: Make Subgrid in GridStack\nDESCRIPTION: This code snippet shows how to create a subgrid within an existing GridStack grid item. It initializes the main GridStack, creates HTML content with a nested grid, and then calls `makeSubGrid` to integrate the nested grid as a subgrid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst grid = Gridstack.init()\n// ...create some html content, possibly looking like: \n// <div id=\"gsi-1\" gs-x=\"0\" gs-y=\"0\" gs-w=\"3\" gs-h=\"2\">\n//  <div class=\"grid-stack\" id=\"nested-grid\">\n//    <div id=\"gsi-2\" gs-w=\"3\" gs-h=\"2\"></div>\n//  </div>\n//</div>\ngrid.makeSubGrid(grid.el.getElementById('nested-grid'))\n```\n\n----------------------------------------\n\nTITLE: Adding a Widget to GridStack\nDESCRIPTION: This code snippet shows how to add a widget to the grid using `grid.addWidget`. The widget's properties, such as width and content, are defined within the object passed to the function. The function returns the GridItemHTMLElement created for the widget.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet grid = GridStack.init();\ngrid.addWidget({w: 3, content: 'hello'});\n```\n\n----------------------------------------\n\nTITLE: Toolbar Operations React\nDESCRIPTION: This snippet showcases toolbar operations within the React GridStack wrapper, providing access to `addWidget` and `addSubGrid` functions via the `useGridStackContext` hook. It demonstrates how to add new components and sub-grids to the grid stack using button click events.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/react/README.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Toolbar() {\n  const { addWidget, addSubGrid } = useGridStackContext();\n\n  return (\n    <div>\n      <button onClick={() => addWidget(/* ... */)}>Add Component</button>\n      <button onClick={() => addSubGrid(/* ... */)}>Add SubGrid</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular Basic HTML Usage\nDESCRIPTION: Demonstrates the basic HTML structure to include the Gridstack component in an Angular application.  This snippet shows how to bind the `gridOptions` to the Gridstack component. This is the root container for grid items.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<gridstack [options]=\"gridOptions\"></gridstack>\n```\n\n----------------------------------------\n\nTITLE: Basic GridStack Usage - DOM Created Items\nDESCRIPTION: This snippet shows how to initialize a grid from existing DOM elements.  The HTML contains div elements with the classes 'grid-stack' and 'grid-stack-item'.  The gs-w attribute is used to specify the width of a grid item.  GridStack.init() initializes the grid using these existing elements.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// ...in your HTML\n<div class=\"grid-stack\">\n  <div class=\"grid-stack-item\">\n    <div class=\"grid-stack-item-content\">Item 1</div>\n  </div>\n  <div class=\"grid-stack-item\" gs-w=\"2\">\n    <div class=\"grid-stack-item-content\">Item 2 wider</div>\n  </div>\n</div>\n\n// ...in your script\nGridStack.init();\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'added' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'added' event in GridStack.js. The callback function is executed when widgets are added to the grid, receiving the event and an array of GridStackNode objects representing the added widgets. The snippet iterates through the added items.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('added', function(event: Event, items: GridStackNode[]) {\n  items.forEach(function(item) {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular ngFor Component Code\nDESCRIPTION: Demonstrates the TypeScript code for using Gridstack with `ngFor`. It includes defining the `gridOptions`, the `items` array, the `onChange` event handler, and the `identify` trackBy function. Requires `gridstack` package.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GridStackOptions, GridStackWidget } from 'gridstack';\nimport { nodesCB } from 'gridstack/dist/angular';\n\n/** sample grid options and items to load... */\npublic gridOptions: GridStackOptions = { margin: 5 }\npublic items: GridStackWidget[] = [\n  {x:0, y:0, minW:2, id:'1'}, // must have unique id used for trackBy\n  {x:1, y:0, id:'2'},\n  {x:0, y:1, id:'3'},\n];\n\n// called whenever items change size/position/etc..\npublic onChange(data: nodesCB) {\n  console.log('change ', data.nodes.length > 1 ? data.nodes : data.nodes[0]);\n}\n\n// ngFor unique node id to have correct match between our items used and GS\npublic identify(index: number, w: GridStackWidget) {\n  return w.id; // or use index if no id is set and you only modify at the end...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GridStack with GridStack.init()\nDESCRIPTION: This code snippet demonstrates how to initialize a GridStack instance using the `GridStack.init()` method. It shows how to retrieve the GridStack instance associated with an HTMLElement after initialization. The HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieved later.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet grid = GridStack.init();\n// Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\nlet grid = document.querySelector('.grid-stack').gridstack;\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'change' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'change' event in GridStack.js. The callback function is executed when widgets change their position or size due to constraints or direct changes. The event and an array of GridStackNode objects representing the changed widgets are passed to the callback function. The snippet iterates through the changed items.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('change', function(event: Event, items: GridStackNode[]) {\n  items.forEach(function(item) {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'dragstart' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'dragstart' event in GridStack.js. This event is triggered when the user starts dragging a grid item. The callback function receives the event object and the dragged GridItemHTMLElement.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('dragstart', function(event: Event, el: GridItemHTMLElement) {\n});\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Widget Resizing in GridStack\nDESCRIPTION: This code snippet demonstrates how to enable or disable widget resizing within a GridStack instance. It's a shortcut that sets the `disableResize` option and calls `resizable()` method.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.opts.disableResize = !doEnable;\ngrid.resizable('.grid-stack-item', doEnable);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'dragstop' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'dragstop' event in GridStack.js. This event is triggered after the user finishes moving a grid item. The callback function receives the event object and the dragged GridItemHTMLElement. The code extracts the final 'x' position and the GridStackNode data from the element.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('dragstop', function(event: Event, el: GridItemHTMLElement) {\n  let x = parseInt(el.getAttribute('gs-x')) || 0;\n  // or all values...\n  let node: GridStackNode = el.gridstackNode; // {x, y, width, height, id, ....}\n});\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular Advanced HTML Usage\nDESCRIPTION: Shows a more complete HTML example including the `changeCB` event binding, and usage of the `empty-content` slot. This requires an Angular component to handle the `change` event.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<gridstack [options]=\"gridOptions\" (changeCB)=\"onChange($event)\">\n  <div empty-content>message when grid is empty</div>\n</gridstack>\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'dropped' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'dropped' event in GridStack.js.  The callback function is executed when an item has been dropped and accepted over a grid. It receives the event, the previous widget (if the item came from another grid), and the new widget.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('dropped', function(event: Event, previousWidget: GridStackNode, newWidget: GridStackNode) {\n  console.log('Removed widget that was dragged out of grid:', previousWidget);\n  console.log('Added widget in dropped grid:', newWidget);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'enable' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'enable' event in GridStack.js. This event is triggered when the grid is enabled. The callback function receives the event object, from which the GridStack instance is retrieved.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('enable', function(event: Event) {\n  let grid: GridStack = event.target.gridstack;\n});\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular Module Import\nDESCRIPTION: Demonstrates how to import the Gridstack module into an Angular module. This is an alternative to standalone components, and requires adding `GridstackModule` to the `imports` array of the module.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GridstackModule } from 'gridstack/dist/angular';\n\n@NgModule({\n  imports: [GridstackModule, ...]\n  ...\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'removed' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates how to attach an event listener to the 'removed' event in GridStack.js. The callback function is executed when widgets are removed from the grid, receiving the event and an array of GridStackNode objects representing the removed widgets. The snippet iterates through the removed items.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('removed', function(event: Event, items: GridStackNode[]) {\n  items.forEach(function(item) {...});\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'resizestart' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'resizestart' event in GridStack.js. This event is triggered before the user starts resizing a grid item. The callback function receives the event object and the resized GridItemHTMLElement.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('resizestart', function(event: Event, el: GridItemHTMLElement) {\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'resize' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'resize' event in GridStack.js. This event is triggered while a grid item is being resized. The callback function receives the event object and the resized GridItemHTMLElement. The event is triggered for each new row/column value, not every pixel.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('resize', function(event: Event, el: GridItemHTMLElement) {\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'resizestop' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'resizestop' event in GridStack.js. This event is triggered after the user finishes resizing a grid item. The callback function receives the event object and the resized GridItemHTMLElement. The code extracts the final 'width' and the GridStackNode data from the element.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('resizestop', function(event: Event, el: GridItemHTMLElement) {\n  let width = parseInt(el.getAttribute('gs-w')) || 0;\n  // or all values...\n  let node: GridStackNode = el.gridstackNode; // {x, y, width, height, id, ....}\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Cell Height of GridStack\nDESCRIPTION: This code snippet demonstrates how to update the cell height of a GridStack instance using the `grid.cellHeight()` method. It shows how to calculate a new cell height based on the current cell width. Note that you can expect performance issues if call this method too often.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.cellHeight(grid.cellWidth() * 1.2);\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Widget Moving in GridStack\nDESCRIPTION: This code snippet demonstrates how to enable or disable widget moving within a GridStack instance. It's a shortcut that sets the `disableDrag` option and calls `movable()` method.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.opts.disableDrag = !doEnable;\ngrid.movable('.grid-stack-item', doEnable);\n```\n\n----------------------------------------\n\nTITLE: Make Widget in GridStack\nDESCRIPTION: This code snippet demonstrates how to convert an existing HTML element into a GridStack widget. It initializes GridStack and then uses the `makeWidget` method to transform the specified element into a manageable widget within the grid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet grid = GridStack.init();\n// ...create some html content, possibly looking like: \n// <div id=\"item-1\" gs-x=\"0\" gs-y=\"0\" gs-w=\"3\" gs-h=\"2\"></div>'\ngrid.makeWidget('#item-1');\n```\n\n----------------------------------------\n\nTITLE: Check if Widget Fits in GridStack\nDESCRIPTION: This code snippet demonstrates how to use the `willItFit` method to determine if a new widget can be added to the grid without exceeding the grid's height constraint. If there's enough space, the widget is added; otherwise, an alert is displayed.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nif (grid.willItFit(newNode.x, newNode.y, newNode.w, newNode.h, newNode.autoPosition)) {\n  grid.addWidget(newNode.el, newNode);\n}\nelse {\n  alert('Not enough free space to place the widget');\n}\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular Advanced Component Code\nDESCRIPTION: Illustrates a more complex Angular component that utilizes custom components within the Gridstack layout. It includes defining custom components (`AComponent`, `BComponent`), registering them with `GridstackComponent`, and handling the `onChange` event. Requires `gridstack` and `@angular/core` packages.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { GridStack, GridStackOptions } from 'gridstack';\nimport { GridstackComponent, gsCreateNgComponents, NgGridStackWidget, nodesCB, BaseWidget } from 'gridstack/dist/angular';\n\n// some custom components\n@Component({\n  selector: 'app-a',\n  template: 'Comp A {{text}}',\n})\nexport class AComponent extends BaseWidget implements OnDestroy {\n  @Input() text: string = 'foo'; // test custom input data\n  public override serialize(): NgCompInputs | undefined  { return this.text ? {text: this.text} : undefined; }\n  ngOnDestroy() {\n    console.log('Comp A destroyed'); // test to make sure cleanup happens\n  }\n}\n\n@Component({\n  selector: 'app-b',\n  template: 'Comp B',\n})\nexport class BComponent extends BaseWidget {\n}\n\n// ...in your module (classic), OR your ng19 app.config provideEnvironmentInitializer call this:\nconstructor() {\n  // register all our dynamic components types created by the grid\n  GridstackComponent.addComponentToSelectorType([AComponent, BComponent]) ;\n}\n\n// now our content will use Components instead of dummy html content\npublic gridOptions: NgGridStackOptions = {\n  margin: 5,\n  minRow: 1, // make space for empty message\n  children: [ // or call load()/addWidget() with same data\n    {x:0, y:0, minW:2, selector:'app-a'},\n    {x:1, y:0, minW:2, selector:'app-a', input: { text: 'bar' }}, // custom input that works using BaseWidget.deserialize() Object.assign(this, w.input)\n    {x:2, y:0, selector:'app-b'},\n    {x:3, y:0, content:'plain html'},\n  ]\n}\n\n// called whenever items change size/position/etc.. see other events\npublic onChange(data: nodesCB) {\n  console.log('change ', data.nodes.length > 1 ? data.nodes : data.nodes[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Extend GridStack with Custom Method\nDESCRIPTION: This snippet demonstrates how to extend the GridStack prototype with a custom method. This allows adding new functionality to all GridStack instances.  In this example, a method 'printCount' is added, which logs the number of items in the grid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// extend gridstack with our own custom method\nGridStack.prototype.printCount = function() {\n  console.log('grid has ' + this.engine.nodes.length + ' items');\n};\n\nlet grid = GridStack.init();\n\n// you can now call\ngrid.printCount();\n```\n\n----------------------------------------\n\nTITLE: Layout Saving React\nDESCRIPTION: This snippet illustrates how to save the current layout of the React GridStack using the `saveOptions` function from the `useGridStackContext` hook. It retrieves the current grid configuration and stores it in the `currentLayout` variable.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/react/README.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { saveOptions } = useGridStackContext();\n\nconst currentLayout = saveOptions();\n```\n\n----------------------------------------\n\nTITLE: Rendering Widget Content in GridStack v11+ (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to render custom HTML content within a GridStack widget in v11+.  It uses the new `GridStack.renderCB` callback to set the `innerHTML` of the widget element.  The example emphasizes the need for sanitization to prevent XSS vulnerabilities.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// NOTE: REAL apps would sanitize-html or DOMPurify before blinding setting innerHTML. see #2736\nGridStack.renderCB = function(el: HTMLElement, w: GridStackNode) {\n  el.innerHTML = w.content;\n};\n```\n\n----------------------------------------\n\nTITLE: Extend GridStack Engine with Custom Engine\nDESCRIPTION: This TypeScript snippet shows how to create a custom layout engine by extending GridStackEngine.  The example overrides the moveNode method to customize node movement behavior.  The custom engine is then registered globally using GridStack.registerEngine().\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GridStack, GridStackEngine, GridStackNode, GridStackMoveOpts } from 'gridstack';\n\nclass CustomEngine extends GridStackEngine {\n\n  /** refined this to move the node to the given new location */\n  public override moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // keep the same original X and Width and let base do it all...\n    o.x = node.x;\n    o.w = node.w;\n    return super.moveNode(node, o);\n  }\n}\n\nGridStack.registerEngine(CustomEngine); // globally set our custom class\n```\n\n----------------------------------------\n\nTITLE: Include GridStack for older browsers (ES5)\nDESCRIPTION: This snippet demonstrates how to include gridstack for older browsers (IE) using the ES5 compatible files along with polyfills. This approach provides broader browser support at the cost of a larger file size.  It also relies on specific file locations within the 'node_modules' directory.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"node_modules/gridstack/dist/gridstack.min.css\" rel=\"stylesheet\"/>\n<script src=\"node_modules/gridstack/dist/es5/gridstack-poly.js\"></script>\n<script src=\"node_modules/gridstack/dist/es5/gridstack-all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Webpack Alias Configuration for jQuery (JavaScript)\nDESCRIPTION: This configuration snippet demonstrates how to define aliases in webpack to specify the location of jQuery and jQuery UI files for GridStack. This is needed when importing GridStack with jQuery.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n  alias: {\n    'jquery': 'gridstack/dist/jq/jquery.js',\n    'jquery-ui': 'gridstack/dist/jq/jquery-ui.js',\n    'jquery.ui': 'gridstack/dist/jq/jquery-ui.js',\n    'jquery.ui.touch-punch': 'gridstack/dist/jq/jquery.ui.touch-punch.js',\n  },\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'drag' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'drag' event in GridStack.js. This event is triggered while a grid item is being dragged. The callback function receives the event object and the dragged GridItemHTMLElement. The event is triggered for each new row/column value, not every pixel.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('drag', function(event: Event, el: GridItemHTMLElement) {\n});\n```\n\n----------------------------------------\n\nTITLE: Include Extra CSS for Custom Columns\nDESCRIPTION: This HTML snippet shows how to include the 'gridstack-extra.min.css' file, which provides CSS definitions for grids with a number of columns (N) between 2 and 11. This file is necessary when using a custom number of columns less than 12.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"node_modules/gridstack/dist/gridstack.min.css\" rel=\"stylesheet\"/>\n<link href=\"node_modules/gridstack/dist/gridstack-extra.min.css\" rel=\"stylesheet\"/>\n\n<div class=\"grid-stack\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Migrating to v1: Initializing, Adding, Event - NEW - JS\nDESCRIPTION: This JavaScript snippet demonstrates the new way of initializing GridStack, adding a widget, and attaching an event handler in v1. It uses `GridStack.init()` to initialize the grid, which returns the grid instance directly. It also shows how to add a widget and listen for events on the grid.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// element identifier defaults to '.grid-stack', returns the grid\n// Note: for Typescript use window.GridStack.init() until next native 2.x TS version\nvar grid = GridStack.init(opts?, element?);\n\n// returns DOM element\ngrid.addWidget('<div><div class=\"grid-stack-item-content\"> test </div></div>', {width: 2});\n// Note: in 3.x it's ever simpler \n// grid.addWidget({w:2, content: 'test'})\n\n// event handler\ngrid.on('added', function(e, items) {/* items contains info */});\n\n// grid access after init\nvar grid = el.gridstack; // where el = document.querySelector('.grid-stack') or other ways...\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for 'disable' Event in GridStack.js\nDESCRIPTION: This code snippet demonstrates attaching an event listener to the 'disable' event in GridStack.js. This event is triggered when the grid is disabled. The callback function receives the event object, from which the GridStack instance is retrieved.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/doc/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.on('disable', function(event: Event) {\n  let grid: GridStack = event.target.gridstack;\n});\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular ngFor HTML Usage\nDESCRIPTION: Illustrates the HTML structure for using Gridstack with `ngFor` in Angular. It shows how to iterate over an array of items and create `gridstack-item` components for each item. Angular 17+ and Angular 16 examples are given.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<gridstack [options]=\"gridOptions\" (changeCB)=\"onChange($event)\">\n  <!-- Angular 17+ -->\n   @for (n of items; track n.id) {\n    <gridstack-item [options]=\"n\">Item {{n.id}}</gridstack-item>\n  }\n  <!-- Angular 16 -->\n  <gridstack-item *ngFor=\"let n of items; trackBy: identify\" [options]=\"n\"> Item {{n.id}} </gridstack-item>\n</gridstack>\n```\n\n----------------------------------------\n\nTITLE: Importing GridStack with jQuery (JavaScript)\nDESCRIPTION: This snippet shows how to import GridStack with jQuery and associated CSS. It requires specifying the location of jQuery and jQuery UI in the webpack configuration, or equivalent, and importing the gridstack-dd-jqueryui module.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'gridstack/dist/gridstack.min.css';\nimport { GridStack } from 'gridstack';\nimport 'gridstack/dist/jq/gridstack-dd-jqueryui';\n```\n\n----------------------------------------\n\nTITLE: Include GridStack in HTML (single file)\nDESCRIPTION: This snippet shows how to include gridstack in an HTML file using a single combined file ('gridstack-all.js'). This method requires including both the CSS file for styling and the JavaScript file for functionality.  The paths assume the files are located within the 'node_modules' directory.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"node_modules/gridstack/dist/gridstack.min.css\" rel=\"stylesheet\"/>\n<script src=\"node_modules/gridstack/dist/gridstack-all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Overriding Resizable Options - JS\nDESCRIPTION: This JavaScript snippet demonstrates how to override the default resizable options in Gridstack.js during initialization. It sets the `handles` property to allow resizing from all sides of the grid item.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nGridStack.init({\n  resizable: {\n    handles: 'e,se,s,sw,w'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including GridStack files in HTML\nDESCRIPTION: This snippet illustrates how to include GridStack CSS and JavaScript files directly in an HTML file, either using the HTML5 drag and drop version or the jQuery UI version.  It provides alternatives to the ES6 module imports.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"node_modules/gridstack/dist/gridstack.min.css\" rel=\"stylesheet\"/>\n<!-- HTML5 drag&drop (70k) -->\n<script src=\"node_modules/gridstack/dist/gridstack-h5.js\"></script>\n<!-- OR jquery-ui drag&drop (195k) -->\n<script src=\"node_modules/gridstack/dist/gridstack-jq.js\"></script>\n<!-- OR static grid (40k) -->\n<script src=\"node_modules/gridstack/dist/gridstack-static.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Gulp Command for Custom Columns - JS\nDESCRIPTION: This Gulp task snippet demonstrates how to modify the gridstack-extra.scss file to generate CSS for a specific number of columns (30 in this example). It uses the `replace` and `sass` plugins to adjust column settings and compile the SCSS to CSS.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\ngulp.src('node_modules/gridstack/dist/src/gridstack-extra.scss')\n        .pipe(replace('$start: 2 !default;','$start: 30;'))\n        .pipe(replace('$end: 11 !default;','$end: 30;'))\n        .pipe(sass({outputStyle: 'compressed'}))\n        .pipe(rename({extname: '.min.css'}))\n        .pipe(gulp.dest('dist/css'))\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for Dynamic Columns - SCSS\nDESCRIPTION: This SCSS snippet generates CSS rules for a grid with a dynamic number of columns. It uses a loop to create styles for item positions (gs-x) and widths (gs-w), ensuring proper layout regardless of the column count. Requires an SCSS compiler to convert to CSS.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_12\n\nLANGUAGE: scss\nCODE:\n```\n$columns: 20;\n@function fixed($float) {\n  @return round($float * 1000) / 1000; // total 2+3 digits being %\n}\n.gs-#{$columns} > .grid-stack-item {\n\n  width: fixed(100% / $columns);\n\n  @for $i from 1 through $columns - 1 {\n    &[gs-x='#{$i}'] { left: fixed((100% / $columns) * $i); }\n    &[gs-w='#{$i+1}'] { width: fixed((100% / $columns) * ($i+1)); }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Touch Device Support Configuration - JS\nDESCRIPTION: This JavaScript snippet configures Gridstack.js for touch devices.  It sets the `alwaysShowResizeHandle` option to 'mobile' to enable resize handles on mobile devices. This example requires GridStack to be initialized with the specified options.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nlet options = {\n  alwaysShowResizeHandle: 'mobile' // true if we're on mobile devices\n};\nGridStack.init(options);\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular Basic CSS Styling\nDESCRIPTION: Shows the CSS styling for the Gridstack component, importing the base styles and defining custom styles for the grid and its items. This includes setting the background color for the grid and the item content.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import \"gridstack/dist/gridstack.min.css\";\n\n.grid-stack {\n  background: #fafad2;\n}\n.grid-stack-item-content {\n  text-align: center;\n  background-color: #18bc9c;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to v2: Add Widget Params Change - JS\nDESCRIPTION: This JavaScript snippet shows the changes in method signatures when migrating to v2.  Old functions with multiple parameters now take a single object containing the parameters. All set methods now return `GridStack` so they can be chain-able.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\n`addWidget(el, x, y, width, height)` --> `addWidget(el, {with: 2})`\n// Note: in 2.1.x you can now just do addWidget({with: 2, content: \"text\"})`\n```\n\n----------------------------------------\n\nTITLE: Migrating to v1: Initializing, Adding, Event - OLD - JS\nDESCRIPTION: This JavaScript snippet shows the old way of initializing GridStack with jQuery, adding a widget, and attaching an event handler. The initialization returned a jQuery element and required a second call to get the GridStack instance. This is the code before v1 migration.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// initialization returned Jquery element, requiring second call to get GridStack var\nvar grid = $('.grid-stack').gridstack(opts?).data('gridstack');\n\n// returned Jquery element\ngrid.addWidget($('<div><div class=\"grid-stack-item-content\"> test </div></div>'), undefined, undefined, 2, undefined, true);\n\n// jquery event handler\n$('.grid-stack').on('added', function(e, items) {/* items contains info */});\n\n// grid access after init\nvar grid = $('.grid-stack').data('gridstack');\n```\n\n----------------------------------------\n\nTITLE: Other Rename Changes - JS\nDESCRIPTION: This Javascript snippet details the API renames for v1 migration.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\n`GridStackUI` --> `GridStack`\n`GridStackUI.GridStackEngine` --> `GridStack.Engine`\n`grid.container` (jquery grid wrapper) --> `grid.el` // (grid DOM element)\n`grid.grid` (GridStackEngine) --> `grid.engine`\n`grid.setColumn(N)` --> `grid.column(N)` and `grid.column()` // to get value, old API still supported though\n```\n\n----------------------------------------\n\nTITLE: Migrating to v4: Engine Method Changes - JS\nDESCRIPTION: This Javascript snippet illustrates the internal method changes in GridStackEngine that are unlikely to affect public facing API usage, during migration to v4.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\n// moved to 3 methods with new option params to support new code and pixel coverage check\n`collision()` -> `collide(), collideAll(), collideCoverage()`\n`moveNodeCheck(node, x, y, w, h)` -> `moveNodeCheck(node, opt: GridStackMoveOpts)`\n`isNodeChangedPosition(node, x, y, w, h)` -> `changedPosConstrain(node, opt: GridStackMoveOpts)`\n`moveNode(node, x, y, w, h, noPack)` -> `moveNode(node, opt: GridStackMoveOpts)`\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for 4-Column Grid - CSS\nDESCRIPTION: This CSS snippet demonstrates how to manually define styles for a 4-column grid layout in Gridstack.js. It sets the left and width properties for grid items based on their position and size, ensuring proper alignment within the grid. Note that this approach is older and no longer necessary in v12+ which uses CSS variables.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/README.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.gs-4 > .grid-stack-item[gs-x=\"1\"]  { left: 25% }\n.gs-4 > .grid-stack-item[gs-x=\"2\"]  { left: 50% }\n.gs-4 > .grid-stack-item[gs-x=\"3\"]  { left: 75% }\n\n.gs-4 > .grid-stack-item { width: 25% }\n.gs-4 > .grid-stack-item[gs-w=\"2\"]  { width: 50% }\n.gs-4 > .grid-stack-item[gs-w=\"3\"]  { width: 75% }\n.gs-4 > .grid-stack-item[gs-w=\"4\"]  { width: 100% }\n```\n\n----------------------------------------\n\nTITLE: Gridstack Angular ComponentFactoryResolver Example\nDESCRIPTION: Provides an example of using `ComponentFactoryResolver` for Angular versions below 14.  This involves manually creating and attaching components. This approach is necessary when the dynamic `createComponent()` API is unavailable.\nSOURCE: https://github.com/gridstack/gridstack.js/blob/master/angular/README.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nprotected resolver: ComponentFactoryResolver,\n...\nconst factory = this.resolver.resolveComponentFactory(GridItemComponent);\nconst gridItemRef = grid.container.createComponent(factory) as ComponentRef<GridItemComponent>;\n// ...do the same for widget selector...\n```"
  }
]