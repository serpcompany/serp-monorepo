[
  {
    "owner": "wurstmeister",
    "repo": "kafka-docker",
    "content": "TITLE: Example Kafka Topic Creation Configuration\nDESCRIPTION: This snippet shows how to automatically create topics in Kafka during container creation using the `KAFKA_CREATE_TOPICS` environment variable in `docker-compose.yml`. It defines two topics: Topic1 with 1 partition and 3 replicas, and Topic2 with 1 partition, 1 replica, and a cleanup policy set to compact.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  KAFKA_CREATE_TOPICS: \"Topic1:1:3,Topic2:1:1:compact\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Port Configuration for Kafka in Swarm\nDESCRIPTION: This snippet shows the recommended port configuration in a Docker Compose file for deploying Kafka in Docker Swarm.  It uses the \"long\" port definition with `mode: host` to ensure that external requests are directly routed to the correct Kafka broker. This configuration avoids potential issues with Kafka clients when connections to specific brokers cannot be guaranteed.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n   - target: 9094\n     published: 9094\n     protocol: tcp\n     mode: host\n```\n\n----------------------------------------\n\nTITLE: Example Listener Configuration\nDESCRIPTION: This environment block shows example listener configuration in docker-compose.yml. It retrieves hostname from AWS metadata service, defines listeners for inside and outside network, defines security protocols and specifies the inter broker listener name.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nHOSTNAME_COMMAND: curl http://169.254.169.254/latest/meta-data/public-hostname\nKAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094\nKAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094\nKAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\nKAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\n```\n\n----------------------------------------\n\nTITLE: JMX Configuration Example\nDESCRIPTION: This example configures JMX for monitoring Kafka, including setting the hostname and RMI port. It disables authentication and SSL for simplicity. The example assumes port 1099 is exposed. Jconsole can be used to connect to the Kafka broker.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nKAFKA_JMX_OPTS: \"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=1099\"\nJMX_PORT: 1099\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Cluster with Docker Compose\nDESCRIPTION: This command starts the Kafka cluster defined in the `docker-compose.yml` file in detached mode. It relies on `docker-compose` being installed and configured correctly. It creates and starts the Kafka containers as specified in the `docker-compose.yml` file.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Scaling Kafka Brokers with Docker Compose\nDESCRIPTION: This command scales the Kafka service defined in the `docker-compose.yml` file to three instances. It requires `docker-compose` to be installed and the Kafka service to be defined in the `docker-compose.yml` file.  It increases the number of Kafka broker containers to three.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose scale kafka=3\n```\n\n----------------------------------------\n\nTITLE: Starting a Single-Broker Kafka Cluster\nDESCRIPTION: This command starts a single-broker Kafka cluster defined in the `docker-compose-single-broker.yml` file. It requires `docker-compose` to be installed and the `docker-compose-single-broker.yml` file to be present. The `-f` flag specifies the compose file to use.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose -f docker-compose-single-broker.yml up\n```\n\n----------------------------------------\n\nTITLE: Port Command Example\nDESCRIPTION: This example command shows how to programmatically determine the advertised port with the PORT_COMMAND environment variable. It uses docker port to obtain the port, hostname to get the container name, and cut to extract only the port number.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker port $$(hostname) 9092/tcp | cut -d: -f2\n```\n\n----------------------------------------\n\nTITLE: Executing JMX Scenario with Shell Script\nDESCRIPTION: This snippet demonstrates how to execute the JMX test scenario for kafka-docker. It requires navigating to the `test/scenarios` directory and running the `runJmxScenario.sh` script. The script is expected to spin up necessary containers and exercise the required code paths, returning an exit code of zero for success.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/test/scenarios/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd test/scenarios\n./runJmxScenario.sh\n```\n\n----------------------------------------\n\nTITLE: AWS Metadata Service Command for Hostname\nDESCRIPTION: This command retrieves the local IPv4 address of the host instance from the AWS metadata service.  It uses `wget` to fetch the IP address from the specified URL. The command is designed for use in AWS environments where the metadata service is available. It fetches the local ipv4 address.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwget -t3 -T2 -qO-  http://169.254.169.254/latest/meta-data/local-ipv4\n```\n\n----------------------------------------\n\nTITLE: Example Rack Command\nDESCRIPTION: This command fetches the availability zone information from the AWS metadata service. It's intended for configuring broker rack affinity in AWS deployments. The command utilizes `curl` to query the metadata service.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://169.254.169.254/latest/meta-data/placement/availability-zone\n```\n\n----------------------------------------\n\nTITLE: Running Specific Kafka Test\nDESCRIPTION: This command runs a specific Kafka test within a Docker container. It uses docker-compose to manage the test environment and executes the test specified by `<testname pattern>`.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/test/Readme.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose run --rm kafkatest <testname pattern>\n```\n\n----------------------------------------\n\nTITLE: Stopping Kafka Cluster with Docker Compose\nDESCRIPTION: This command stops all services defined in the `docker-compose.yml` file. It requires `docker-compose` to be installed and configured.  It halts all the Kafka broker containers and any other related services defined in the `docker-compose.yml` file.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose stop\n```\n\n----------------------------------------\n\nTITLE: Listing Available Kafka Docker Tags using Curl and JQ\nDESCRIPTION: This command retrieves the available tags for the wurstmeister/kafka Docker image from Docker Hub, filters them to include only those matching the Kafka version format, and sorts them uniquely.  It requires `curl`, `jq`, `sort`, and `egrep` to be installed. The output is a list of Kafka image tags.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -s https://registry.hub.docker.com/v2/repositories/wurstmeister/kafka/tags\\?page_size\\=1024 | jq -r '.results[].name' | sort -u | egrep '\\d.\\d{2}-.*'\n```\n\n----------------------------------------\n\nTITLE: Running Specific Kafkacat Test\nDESCRIPTION: This command runs a specific Kafkacat test within a Docker container. It sets the `BROKER_LIST` environment variable using `internal-broker-list.sh` and allows specifying the Kafka version using the `KAFKA_VERSION` environment variable.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/test/Readme.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nBROKER_LIST=$(./internal-broker-list.sh) [KAFKA_VERSION=<version>] docker-compose run --rm kafkacattest <testname pattern>\n```\n\n----------------------------------------\n\nTITLE: Running All Kafka Docker Tests\nDESCRIPTION: This shell script executes all tests after building the Kafka Docker images. It starts the Zookeeper and Kafka containers and then runs the test script.\nSOURCE: https://github.com/wurstmeister/kafka-docker/blob/master/test/Readme.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd test\ndocker-compose up -d zookeeper kafka_1 kafka_2\n./runAllTests.sh\n```"
  }
]