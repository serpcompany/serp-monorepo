[
  {
    "owner": "supertokens",
    "repo": "supertokens-auth-react",
    "content": "TITLE: Migrating Custom Styles from Object-based to CSS Styling in SuperTokens\nDESCRIPTION: Example showing how to migrate from the old object-based styling approach to the new CSS-based styling method in SuperTokens. The code demonstrates the before and after initialization patterns for ThirdPartyEmailPassword recipe.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    appInfo: {\n        apiDomain: \"...\",\n        appName: \"...\",\n        websiteDomain: \"...\",\n    },\n    recipeList: [\n        ThirdPartyEmailPassword.init({\n            style: {\n                container: {\n                    fontFamily: \"cursive\",\n                },\n            },\n        }),\n        Session.init(),\n    ],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    appInfo: {\n        apiDomain: \"...\",\n        appName: \"...\",\n        websiteDomain: \"...\",\n    },\n    recipeList: [\n        ThirdPartyEmailPassword.init({\n            style: `\n                [data-supertokens~=container] {\n                    font-family: cursive;\n                }\n            `,\n        }),\n        Session.init(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Pre-Migration SuperTokens Auth React Component Structure\nDESCRIPTION: This code snippet shows the structure of SuperTokens Auth React components before migration. It includes imports, a basic component using session context, SuperTokens initialization, and routing setup with authentication checks.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n// .... other imports\nimport SuperTokens, { getSuperTokensRoutesForReactRouterDom, SuperTokensWrapper } from \"supertokens-auth-react\";\nimport { useSessionContext } from \"supertokens-auth-react/recipe/session\";\nimport { ThirdPartyEmailPasswordAuth } from \"supertokens-auth-react/recipe/thirdpartyemailpassword\";\n\nfunction Component() {\n    const sessionContext = useSessionContext();\n\n    return <div className=\"fill\">{sessionContext.doesSessionExist ? \"logged in\" : \"logged out\"}</div>;\n}\n\nSuperTokens.init({\n    /* config... */\n});\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <div className=\"fill\">\n                    <Routes>\n                        {getSuperTokensRoutesForReactRouterDom(require(\"react-router-dom\"))}\n                        <Route\n                            path=\"/some-path\"\n                            element={\n                                <ThirdPartyEmailPasswordAuth requireAuth={true}>\n                                    {/*\n                                        In this case, Component will always display logged in.\n                                        If doesSessionExist is false after the session is loaded, the user is redirected to the login screen\n                                    */}\n                                    <Component />\n                                </ThirdPartyEmailPasswordAuth>\n                            }\n                        />\n                        <Route\n                            path=\"/\"\n                            element={\n                                <ThirdPartyEmailPasswordAuth requireAuth={false}>\n                                    <Component />\n                                </ThirdPartyEmailPasswordAuth>\n                            }\n                        />\n                    </Routes>\n                </div>\n            </Router>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Migration SuperTokens Auth React Component Structure\nDESCRIPTION: This code snippet demonstrates the updated structure of SuperTokens Auth React components after migration. It includes changes such as handling loading state in the component, wrapping the app with SuperTokensWrapper, and adjusting route configurations.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n// .... other imports\nimport SuperTokens, { getSuperTokensRoutesForReactRouterDom, SuperTokensWrapper } from \"supertokens-auth-react\";\nimport { useSessionContext } from \"supertokens-auth-react/recipe/session\";\nimport { ThirdPartyEmailPasswordAuth } from \"supertokens-auth-react/recipe/thirdpartyemailpassword\";\n\nfunction Component() {\n    const sessionContext = useSessionContext();\n\n    if (sessionContext.loading === true) {\n        // You could display a loading screen here, but session context loading is very fast\n        // so returning null is better in most cases to avoid content popping in and out\n        return null;\n    }\n\n    return <div className=\"fill\">{sessionContext.doesSessionExist ? \"logged in\" : \"logged out\"}</div>;\n}\n\nSuperTokens.init({\n    /* config is unchanged */\n});\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SuperTokensWrapper>\n                <Router>\n                    <div className=\"fill\">\n                        <Routes>\n                            {getSuperTokensRoutesForReactRouterDom(require(\"react-router-dom\"))}\n                            <Route\n                                path=\"/some-path\"\n                                element={\n                                    <ThirdPartyEmailPasswordAuth requireAuth={true}>\n                                        {/* \n                                            In this case, Component will never hit the loading === true branch.\n                                            It will only be rendered if `loading === false && doesSessionExist === true`\n                                            If doesSessionExist is false after the session is loaded, the user is redirected to the login screen\n                                        */}\n                                        <Component />\n                                    </ThirdPartyEmailPasswordAuth>\n                                }\n                            />\n                            <Route path=\"/\" element={<Component />} />\n                        </Routes>\n                    </div>\n                </Router>\n            </SuperTokensWrapper>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom Color Palette from Object-based to CSS Variables in SuperTokens\nDESCRIPTION: Example showing how to migrate from the old palette object to the new CSS variables-based approach for customizing colors in SuperTokens. The code shows the before and after initialization patterns.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    appInfo: {\n        apiDomain: \"...\",\n        appName: \"...\",\n        websiteDomain: \"...\",\n    },\n    recipeList: [\n        ThirdPartyEmailPassword.init({\n            palette: {\n                background: \"#333\",\n                inputBackground: \"#292929\",\n                textTitle: \"white\",\n                textLabel: \"white\",\n                textPrimary: \"white\",\n                error: \"#ad2e2e\",\n                textInput: \"#a9a9a9\",\n                textLink: \"#a9a9a9\",\n            },\n        }),\n        Session.init(),\n    ],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    appInfo: {\n        apiDomain: \"...\",\n        appName: \"...\",\n        websiteDomain: \"...\",\n    },\n    recipeList: [\n        ThirdPartyEmailPassword.init({\n            style: `\n                [data-supertokens~=container] {\n                    --palette-background: 51, 51, 51;\n                    --palette-inputBackground: 41, 41, 41;\n                    --palette-inputBorder: 41, 41, 41;\n                    --palette-textTitle: 255, 255, 255;\n                    --palette-textLabel: 255, 255, 255;\n                    --palette-textPrimary: 255, 255, 255;\n                    --palette-error: 173, 46, 46;\n                    --palette-textInput: 169, 169, 169;\n                    --palette-textLink: 169, 169, 169;\n                }\n            `,\n        }),\n        Session.init(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Passwordless Provider with Custom Logo in React\nDESCRIPTION: Example of using the new 'logo' property for third-party custom providers in ThirdPartyPasswordless initialization. The snippet shows how to set up providers including a custom Discord provider with an SVG logo.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nThirdPartyPasswordless.init({\n      signInUpFeature: {\n        providers: [\n          ThirdPartyPasswordless.Google.init(),\n          ThirdPartyPasswordless.Apple.init(),\n          {\n            id: \"discord\",\n            name: \"Discord\",\n            logo: <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        height=\"1em\"\n                        viewBox=\"0 0 640 512\"\n                      >\n                        <path d=\"M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z\" />\n                      </svg>,\n...\n```\n\n----------------------------------------\n\nTITLE: Migrating Auth Wrapper Components in React\nDESCRIPTION: Shows how to migrate from EmailPasswordAuth to SessionAuth components in React applications. This change simplifies authentication wrappers by making them more general-purpose and session-focused rather than recipe-specific.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ProtectedHomeComponent() {\n    return (\n        <EmailPasswordAuth>\n            <Home />\n        </EmailPasswordAuth>\n    );\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nfunction ProtectedHomeComponent() {\n    return (\n        <SessionAuth>\n            <Home />\n        </SessionAuth>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Login Methods Check in SuperTokens Web JS (TypeScript)\nDESCRIPTION: This snippet shows how to update the login methods check using the new firstFactors array instead of the previous enabled flags in the getLoginMethods function from SuperTokens Web JS.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nasync function checkLoginMethods() {\n    const loginMethods = await Multitenancy.getLoginMethods();\n    if (loginMethods.firstFactors.includes(\"thirdparty\")) {\n        // custom logic\n    }\n    if (loginMethods.firstFactors.includes(\"emailpassword\")) {\n        // custom logic\n    }\n\n    if (\n        loginMethods.firstFactors.includes(\"otp-email\") ||\n        loginMethods.firstFactors.includes(\"otp-phone\") ||\n        loginMethods.firstFactors.includes(\"link-email\") ||\n        loginMethods.firstFactors.includes(\"link-phone\")\n    ) {\n        // custom logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating EmailVerification Recipe Configuration in TypeScript\nDESCRIPTION: Shows how to migrate EmailVerification recipe configuration from being nested within EmailPassword to being a standalone recipe in the recipeList. Configuration options and event handlers related to email verification should be moved from EmailPassword to the EmailVerification recipe.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nSuperTokens.init({\n    // Normal init conf...\n    recipeList: [\n        EmailPassword.init({\n            getRedirectionURL: (context) => {\n                if (context.action === \"SIGN_IN_AND_UP\") {\n                    // This handler should be moved to the SuperTokens.init level\n                    return \"/auth\";\n                }\n                // All email verification related context should be now handled in the config of the EmailVerification recipe\n            },\n            onHandleEvent: () => {\n                // Handle email verification related events here in the onHandleEvent of the EmailVerification config\n            },\n            preAPIHook: (context) => {\n                // Move email verification related pre-API hooks into the preAPIHook of the EmailVerification config\n            },\n            postAPIHook: (context) => {\n                // Move email verification related post-API hooks into the postAPIHook of the EmailVerification config\n            }\n            emailVerificationFeature: {\n                mode: \"REQUIRED\",\n                // Any other props here should be moved into the config of the EmailVerification recipe\n            },\n            override: {\n                emailVerificationFeature: {\n                    // These overrides should be moved into the config of the EmailVerification recipe\n                }\n            }\n        }),\n    ]\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nSuperTokens.init({\n    // Normal init conf...\n    getRedirectionURL: (context) => {\n        if (context.action === \"TO_AUTH\") {\n            // Move handling the SIGN_IN_AND_UP action here\n            return \"/auth\";\n        }\n    },\n    recipeList: [\n        EmailVerification.init({\n            mode: \"REQUIRED\",\n            // Props from emailVerificationFeature of the EmailPassword.init config should be moved here.\n            override: {\n                // The overrides from emailVerificationFeature in the overrides of the EmailPassword config should be moved here\n            },\n\n            getRedirectionURL: (context) => {\n                // Move handling email verification related redirects here\n            },\n            onHandleEvent: () => {\n                // Handle email verification related events here\n            },\n            preAPIHook: (context) => {\n                // Move email verification related pre-API hooks here\n            },\n            postAPIHook: (context) => {\n                // Move email verification related post-API hooks here\n            },\n        }),\n        EmailPassword.init({}),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating ThirdPartyEmailPassword Authorization URL Function Parameters in TypeScript\nDESCRIPTION: Changes to the getAuthorisationURLWithQueryParamsAndSetState function signature in the ThirdPartyEmailPassword recipe, replacing providerId with thirdPartyId and authorisationURL with frontendRedirectURI.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nimport { getAuthorisationURLWithQueryParamsAndSetState } from 'supertokens-auth-react/recipe/thirdpartyemailpassword';\n\ngetAuthorisationURLWithQueryParamsAndSetState({\n-  providerId: \"google\",\n+  thirdPartyId: \"google\",\n-  authorisationURL: \"http://localhost/auth/callback/google\",\n+  frontendRedirectURI: \"http://localhost/auth/callback/google\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Sign Up Form with Custom Components in EmailPassword\nDESCRIPTION: Example of customizing the EmailPassword recipe's sign up form with a custom dropdown select component. It demonstrates setting default values, custom error messages, and implementing a custom input component.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nEmailPassword.init({\n    signInAndUpFeature: {\n        signUpForm: {\n            formFields: [\n                {\n                    id: \"select-dropdown\",\n                    label: \"Select Option\",\n                    getDefaultValue: () => \"option 2\",\n                    nonOptionalErrorMsg: \"Select dropdown is required\",\n                    inputComponent: ({ value, name, onChange }) => (\n                        <select\n                            value={value}\n                            name={name}\n                            onChange={(e) => onChange(e.target.value)}\n                            placeholder=\"Select Option\">\n                            <option value=\"\" disabled hidden>\n                                Select an option\n                            </option>\n                            <option value=\"option 1\">Option 1</option>\n                            <option value=\"option 2\">Option 2</option>\n                            <option value=\"option 3\">Option 3</option>\n                        </select>\n                    ),\n                },\n            ],\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating ThirdParty Authorization URL Function Parameters in TypeScript\nDESCRIPTION: Changes to the getAuthorisationURLWithQueryParamsAndSetState function signature in the ThirdParty recipe, replacing providerId with thirdPartyId and authorisationURL with frontendRedirectURI.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\nimport { getAuthorisationURLWithQueryParamsAndSetState } from 'supertokens-auth-react/recipe/thirdparty';\n\ngetAuthorisationURLWithQueryParamsAndSetState({\n-  providerId: \"google\",\n+  thirdPartyId: \"google\",\n-  authorisationURL: \"http://localhost/auth/callback/google\",\n+  frontendRedirectURI: \"http://localhost/auth/callback/google\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Client-Side Navigation with PreBuiltUI Components in React Router\nDESCRIPTION: Example showing how to use the navigate prop with PreBuiltUI components to enable client-side navigation rather than full-page refreshes when redirecting. This example uses react-router-dom v6's useNavigate hook.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignInUp } from \"supertokens-auth-react/recipe/passwordless/prebuiltui\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction CustomSignInUp() {\n    const navigate = useNavigate();\n    return <SignInUp navigate={navigate} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying EmailPassword signIn Function to Include fetchResponse Field\nDESCRIPTION: Updated example showing the correct way to include the fetchResponse field in the return object of an overridden EmailPassword signIn function. The fetchResponse should be a clone of the original network response object.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n...\nsignIn: async function (input) {\n    let response = makeNetworkRequest();\n    // TODO: some custom logic\n\n    return {\n        status: \"OK\",\n        user: {...},\n        fetchResponse: response.clone()\n    };\n},\n...\n```\n\n----------------------------------------\n\nTITLE: Migrating Configuration Options in SuperTokens.init (After)\nDESCRIPTION: This code snippet demonstrates the new configuration structure where options like useShadowDom and defaultToSignUp have been moved to the root configuration passed to SuperTokens.init.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    appInfo: {\n        // appInfo\n    },\n    useShadowDom: false,\n    defaultToSignUp: true,\n    privacyPolicyLink: \"http://example.com\",\n    termsOfServiceLink: \"http://example.com\",\n    recipeList: [EmailPassword.init(), Session.init()],\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Component Overrides to Recipe-Specific Provider in SuperTokens\nDESCRIPTION: Example showing how to migrate from the old component override configuration in recipe initialization to the new approach using recipe-specific provider components. The code demonstrates both the legacy and new pattern.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    recipeList: [\n        EmailPassword.init({\n            override: {\n                components: {\n                    EmailPasswordSignIn_Override: ({ DefaultComponent, ...props }) => {\n                        return (\n                            <div>\n                                <img src=\"octocat.jpg\" />\n                                <DefaultComponent {...props} />\n                            </div>\n                        );\n                    },\n                },\n            },\n        }),\n    ],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport EmailPassword, { EmailPasswordComponentsOverrideProvider } from \"supertokens-auth-react/recipe/emailpassword\";\n\nSuperTokens.init({\n    recipeList: [EmailPassword.init()],\n});\n\nfunction App() {\n    return (\n        <SuperTokensWrapper>\n            <EmailPasswordComponentsOverrideProvider\n                components={{\n                    EmailPasswordSignIn_Override: ({ DefaultComponent, ...props }) => {\n                        return (\n                            <div>\n                                <img src=\"octocat.jpg\" />\n                                <DefaultComponent {...props} />\n                            </div>\n                        );\n                    },\n                }}>\n                {/* The rest of JSX */}\n            </EmailPasswordComponentsOverrideProvider>\n        </SuperTokensWrapper>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Redirection with EmailPassword in React\nDESCRIPTION: Example of customizing EmailPassword's getRedirectionURL function to prevent automatic redirection after successful sign-in/up by returning null. This is useful for popup-based authentication flows where you want to dismiss the popup instead of redirecting.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nEmailPassword.init({\n    getRedirectionURL: async (context, userContext) => {\n        if (context.action === \"SUCCESS\") {\n            return null;\n        }\n        // Returning undefined falls back to the default redirection strategy\n        return undefined;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens EmailPassword Demo App with NPX\nDESCRIPTION: Command to create a new SuperTokens application with the thirdpartyemailpassword recipe. This utilizes NPX to execute the create-supertokens-app package without requiring global installation.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=thirdpartyemailpassword\n```\n\n----------------------------------------\n\nTITLE: Adding Checkbox Terms Acceptance to ThirdPartyEmailPassword Sign Up\nDESCRIPTION: Example showing how to add a custom checkbox for terms and conditions acceptance to the ThirdPartyEmailPassword sign up form. It includes default value setting, custom error message, and styling for the checkbox component.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nThirdPartyEmailPassword.init({\n    signInAndUpFeature: {\n        signUpForm: {\n            formFields: [\n                {\n                    id: \"terms\",\n                    label: \"\",\n                    optional: false,\n                    getDefaultValue: () => \"true\",\n                    nonOptionalErrorMsg: \"You must accept the terms and conditions\",\n                    inputComponent: ({ name, onChange, value }) => (\n                        <div\n                            style={{\n                                display: \"flex\",\n                                alignItems: \"center\",\n                                justifyContent: \"left\",\n                            }}>\n                            <input\n                                value={value}\n                                checked={value === \"true\"}\n                                name={name}\n                                type=\"checkbox\"\n                                onChange={(e) => onChange(e.target.checked.toString())}></input>\n                            <span style={{ marginLeft: 5 }}>I agree to the terms and conditions</span>\n                        </div>\n                    ),\n                },\n            ],\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handler in SuperTokens Init (TypeScript/React)\nDESCRIPTION: This snippet illustrates how to update the event handler in SuperTokens initialization to use the new createdNewSession flag and rid (recipe ID) in the context object for SUCCESS actions.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport SuperTokens, { SuperTokensWrapper, getSuperTokensRoutesForReactRouterDom } from \"supertokens-auth-react\";\nimport Passwordless from \"supertokens-auth-react/recipe/passwordless\";\n\nSuperTokens.init({\n    appInfo: {\n        // appInfo\n    },\n    recipeList: [\n        Passwordless.init({\n            contactMethod: \"EMAIL_OR_PHONE\",\n\n            onHandleEvent(context) {\n                if (context.action === \"SUCCESS\" && context.createdNewSession) {\n                    let user = context.user;\n                    let rid = context.rid;\n                    if (context.isNewRecipeUser && context.user.loginMethods.length === 1) {\n                        // sign up success\n                    } else {\n                        // sign in success\n                    }\n                }\n            },\n        }),\n        Session.init(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating EmailPassword Override Function with fetchResponse in SuperTokens Auth React\nDESCRIPTION: Example of modifying an overridden EmailPassword signIn function to include the required fetchResponse field, which should be a clone of the original response object. This is part of the migration guide for the breaking changes in function return types.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport SuperTokens from \"supertokens-auth-react\";\nimport EmailPassword from \"supertokens-auth-react/recipe/emailpassword\";\n\nSuperTokens.init({\n    appInfo: {\n        apiDomain: \"...\",\n        appName: \"...\",\n        websiteDomain: \"...\"\n    },\n    recipeList: [\n        EmailPassword.init({\n            override: {\n                functions: (originalImplementation) => {\n                    return {\n                        ...originalImplementation,\n                        signIn: async function (input) {\n                            let response = makeNetworkRequest();\n                            // TODO: some custom logic\n\n                            return {\n                                status: \"OK\",\n                                user: {...},\n                            };\n                        },\n                    }\n                },\n            }\n        })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SuperTokens EmailPassword Demo App using NPX\nDESCRIPTION: This command uses npx to create a new SuperTokens demo application with the EmailPassword authentication recipe. It sets up the necessary project structure and dependencies for a quick start with SuperTokens authentication.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-passwordless/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=passwordless\n```\n\n----------------------------------------\n\nTITLE: Using Original Implementation in EmailPassword Override with fetchResponse\nDESCRIPTION: Example showing how to access the fetchResponse field from the original implementation in an overridden EmailPassword signIn function, allowing for custom logic while maintaining the required return structure.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport SuperTokens from \"supertokens-auth-react\";\nimport EmailPassword from \"supertokens-auth-react/recipe/emailpassword\";\n\nSuperTokens.init({\n    appInfo: {\n        apiDomain: \"...\",\n        appName: \"...\",\n        websiteDomain: \"...\"\n    },\n    recipeList: [\n        EmailPassword.init({\n            override: {\n                functions: (originalImplementation) => {\n                    return {\n                        ...originalImplementation,\n                        signIn: async function (input) {\n                            let response = await originalImplementation.signIn(input);\n                            // TODO: some custom logic\n\n                            return {\n                                status: \"OK\",\n                                user: {...},\n                                fetchResponse: response.fetchResponse\n                            };\n\n                            // OR return the default implementation\n                            // return await originalImplementation.signIn(input)\n                        },\n                    }\n                },\n            }\n        })\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Success Redirections in SuperTokens Init (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to update the SuperTokens initialization to handle success redirections using the new getRedirectionURL callback at the SuperTokens.init level, replacing the previous recipe-level approach.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport SuperTokens, { SuperTokensWrapper, getSuperTokensRoutesForReactRouterDom } from \"supertokens-auth-react\";\nimport Passwordless from \"supertokens-auth-react/recipe/passwordless\";\n\nSuperTokens.init({\n    appInfo: {\n        // appInfo\n    },\n    async getRedirectionURL(context, userContext) {\n        if (context.action === \"SUCCESS\" && context.newSessionCreated) {\n            if (context.createdNewUser && context.recipeId === \"passwordless\") {\n                // custom logic\n            }\n        }\n        // Returning undefined means we use the default redirection\n        return undefined;\n    },\n    recipeList: [\n        Passwordless.init({\n            contactMethod: \"EMAIL_OR_PHONE\",\n        }),\n        Session.init(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens Multi-Factor Auth Demo\nDESCRIPTION: Command to create a new SuperTokens demo application with multi-factor authentication using npx. The command uses the create-supertokens-app utility with the multifactorauth recipe.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=multifactorauth\n```\n\n----------------------------------------\n\nTITLE: Migrating Embeddable Components (After)\nDESCRIPTION: This code snippet demonstrates the updated approach using the new AuthPage component with appropriate preBuiltUIList and factors props, which replaces the previous SignInAndUp component.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PasswordlessPreBuiltUI } from \"supertokens-auth-react/recipe/passwordless/prebuiltui\";\nimport { AuthPage } from \"supertokens-auth-react/ui\";\n\nconst Component = () => {\n    const navigate = useNavigate();\n\n    return <AuthPage preBuiltUIList={[PasswordlessPreBuiltUI]} factors={[\"otp-phone\"]} navigate={navigate} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating ThirdPartyPasswordless Authorization URL Function Parameters in TypeScript\nDESCRIPTION: Changes to the getThirdPartyAuthorisationURLWithQueryParamsAndSetState function signature in the ThirdPartyPasswordless recipe, replacing providerId with thirdPartyId and authorisationURL with frontendRedirectURI.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\nimport { getAuthorisationURLWithQueryParamsAndSetState } from 'supertokens-auth-react/recipe/thirdpartypasswordless';\n\ngetAuthorisationURLWithQueryParamsAndSetState({\n-  providerId: \"google\",\n+  thirdPartyId: \"google\",\n-  authorisationURL: \"http://localhost/auth/callback/google\",\n+  frontendRedirectURI: \"http://localhost/auth/callback/google\",\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Demo Application\nDESCRIPTION: Command to compile and serve the React application while starting the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-account-linking/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Migrating Embeddable Components (Before)\nDESCRIPTION: This code snippet shows how embeddable components like SignInAndUp were used before the update, with a simple component that takes a navigate prop.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SignInAndUp } from \"supertokens-auth-react/recipe/thirdpartyemailpassword/prebuiltui\";\n\nconst Component = () => {\n    const navigate = useNavigate();\n\n    return <SignInAndUp navigate={navigate} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating Configuration Options in SuperTokens.init (Before)\nDESCRIPTION: This code snippet shows how configuration options were structured before the update, with options like useShadowDom and defaultToSignUp specified in the recipe-specific configs.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nSuperTokens.init({\n    appInfo: {\n        // appInfo\n    },\n    recipeList: [\n        EmailPassword.init({\n            useShadowDom: false,\n            signInAndUpFeature: {\n                defaultToSignUp: true,\n                signUpForm: {\n                    privacyPolicyLink: \"http://example.com\",\n                    termsOfServiceLink: \"http://example.com\",\n                },\n            },\n        }),\n        Session.init(),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Running SuperTokens Google One Tap Demo\nDESCRIPTION: Command to start the demo app, which compiles and serves the React frontend and starts the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-google-onetap/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Updated Component Override Syntax in React\nDESCRIPTION: Example of the new syntax for overriding components in React.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Old\noverride: (DefaultComponent) => (props) => <CustomComponent {...props} />\n\n// New\noverride: ({ DefaultComponent, ...props }) => <CustomComponent {...props} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Passwordless Magic Link Account Linking\nDESCRIPTION: Example showing how to enable session-based account linking for magic link flows by overriding the consumeCode function.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nPasswordless.init({\n    override: {\n        functions: (original) => {\n            return {\n                ...original,\n                consumeCode: async (input) => {\n                    // Please note that this is means that the session is required and will cause an error if it is not present\n                    return original.consumeCode({ ...input, shouldTryLinkingWithSessionUser: true });\n                },\n            };\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Demo Application\nDESCRIPTION: Command to compile and serve the React app while starting the backend API server on port 3001. The application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-with-otp/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Updating Claim Validator Error Handling (TypeScript)\nDESCRIPTION: This snippet shows how to update the handling of claim validator errors, using the new 'id' property instead of the previous 'validatorId' in the error object returned by Session.validateClaims().\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nasync function checkValidators() {\n    const validationErrors = await Session.validateClaims();\n    for (const error of validationErrors) {\n        console.log(error.id, error.reason);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EmailPassword Redirection URL - After Migration\nDESCRIPTION: Updated implementation of getRedirectionURL that includes the tenant ID parameter in the query string.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nEmailPassword.init({\n    async getRedirectionURL(context) {\n        return `/reset-password?tenantId=${context.tenantIdFromQueryParams}`;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura JWT Secret\nDESCRIPTION: JSON configuration for the Hasura GraphQL JWT secret environment variable, which specifies the JWK URL that Hasura should use to verify JWTs issued by SuperTokens.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hasura-thirdpartyemailpassword/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jwk_url\": \"https://....ngrok.io/auth/jwt/jwks.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Demo Application\nDESCRIPTION: Command to start the demo application which runs both frontend (port 3000) and backend (port 3001) servers.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-cli-login/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Host File for Multi-Tenancy in Unix-based Systems\nDESCRIPTION: This snippet shows the entries to be added to the /etc/hosts file to enable multi-tenancy support locally. It maps multiple subdomains to the localhost IP address.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-per-subdomain/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1   tenant1.example.com\n127.0.0.1   tenant2.example.com\n127.0.0.1   tenant3.example.com\n127.0.0.1   example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring EmailPassword Redirection URL - Before Migration\nDESCRIPTION: Example showing the previous implementation of getRedirectionURL in EmailPassword recipe configuration before tenant ID changes.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nEmailPassword.init({\n    async getRedirectionURL(context) {\n        if (context.action === \"RESET_PASSWORD\") {\n            return `/reset-password`;\n        }\n        return \"\";\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server which runs the React app and backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-i18next/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Resolving React Router DOM Conflicts in SuperTokens Auth React\nDESCRIPTION: Commands to temporarily move the react-router-dom package to avoid conflicts when using the test app. This solution prevents the 'Invariant failed: You should not use <Route> outside a <Router>' error.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/for-tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv node_modules/react-router-dom node_modules/react-router-dom-test\n```\n\n----------------------------------------\n\nTITLE: Building and Running the SuperTokens Demo App in Production\nDESCRIPTION: Commands to create a production build of the application and start the production server.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartyemailpassword-passwordless/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Starting the Test Application for SuperTokens Auth React\nDESCRIPTION: Command to start the test application for manual testing and development of the SuperTokens Auth React library.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting the Frontend Development Server\nDESCRIPTION: Commands to install dependencies and start the frontend development server. The frontend application will run on port 3000.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-okta-multi-tenant-pkce-flow/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating SuperTokens 2FA Auth Demo App with NPX\nDESCRIPTION: Command to generate a new SuperTokens demo application with multi-factor authentication functionality. This uses the create-supertokens-app package to scaffold a new project with the multifactorauth recipe.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartyemailpassword-2fa-passwordless/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=multifactorauth\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperTokens Multi-factor Auth Demo\nDESCRIPTION: Commands to clone the repository, navigate to the project directory, and install dependencies for the main project, frontend, and backend.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth-recovery-codes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-account-linking\nnpm install\ncd frontend && npm install && cd ../\ncd backend && npm install && cd ../\n```\n\n----------------------------------------\n\nTITLE: Initializing SuperTokens App with Vue and Node\nDESCRIPTION: Command to bootstrap a new SuperTokens authentication project using the create-supertokens-app CLI tool. This sets up a Vue frontend with a Node.js backend implementing the thirdpartyemailpassword authentication recipe.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-vue-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app --frontend=vue --backend=node --recipe=thirdpartyemailpassword\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the SuperTokens Hasura Demo\nDESCRIPTION: Commands to clone the repository and install project dependencies using npm. These steps prepare the local development environment for running the SuperTokens Hasura demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hasura-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-hasura-thirdpartyemailpassword\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating SuperTokens Demo App with Remix\nDESCRIPTION: This command uses npx to create a new SuperTokens demo application with Remix as the frontend framework. It utilizes the create-supertokens-app package to set up the boilerplate project.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-remix/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-supertokens-app@latest --frontend=remix\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the SuperTokens Demo Project\nDESCRIPTION: Commands to clone the repository, navigate to the example directory, and install project dependencies using npm.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-with-otp/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-emailverification-with-otp\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running SuperTokens Auth React Supabase Integration Demo App\nDESCRIPTION: This command compiles and serves the Next.js application on port 3000. It starts the development server for the SuperTokens Auth React integration with Supabase demo app, allowing you to test the authentication and Supabase querying functionality.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-supabase/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens Demo App with LocalStorage\nDESCRIPTION: Commands to clone the repository, navigate to the example directory, install dependencies, and start the demo application that uses localStorage instead of cookies for authentication token storage.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-localstorage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-localstorage\n\nnpm install\n\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens Demo App with Hash Router\nDESCRIPTION: Commands to clone the repository, navigate to the with-hash-router example directory, install dependencies, and start the demo application. This allows you to see a working implementation of SuperTokens with hash-based routing.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hash-router/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-hash-router\n\nnpm install\n\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands for cloning the repository and installing necessary dependencies for both frontend and backend components of the demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-account-linking/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-account-linking\nnpm install\ncd frontend && npm install && cd ../\ncd backend && npm install && cd ../\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperTokens Google One Tap Demo\nDESCRIPTION: Commands to clone the repository, navigate to the project directory, and install dependencies for the demo app.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-google-onetap/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-thirdparty-google-onetap\nnpm install\ncd frontend && npm install && cd ../\ncd backend && npm install && cd ../\n```\n\n----------------------------------------\n\nTITLE: Renaming JWT Payload Function in TypeScript\nDESCRIPTION: Example of the breaking change where getJWTPayloadSecurely is renamed to getAccessTokenPayloadSecurely.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// Old\nconst payload = await getJWTPayloadSecurely();\n\n// New\nconst payload = await getAccessTokenPayloadSecurely();\n```\n\n----------------------------------------\n\nTITLE: Creating a SuperTokens App with Angular, Node.js and ThirdPartyEmailPassword Recipe\nDESCRIPTION: Command to initialize a new SuperTokens authentication application with an Angular frontend, Node.js backend, and the ThirdPartyEmailPassword authentication recipe. This generates a project template with the necessary configuration for implementing social login and email/password authentication.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-angular-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app --frontend=angular --backend=node --recipe=thirdpartyemailpassword\n```\n\n----------------------------------------\n\nTITLE: Setting up SuperTokens Update Email Demo Project\nDESCRIPTION: Commands to clone the repository, navigate to the project directory, and install dependencies for the SuperTokens update email post verification demo.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-update-email-post-verification/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-update-email-post-verification\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Ngrok to Expose API Server\nDESCRIPTION: Command to set up an ngrok tunnel to expose the local API server (running on port 3001) to the internet, which is necessary for Hasura to communicate with the authentication service.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hasura-thirdpartyemailpassword/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3001\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens Email Password Demo App using NPX\nDESCRIPTION: Command to create a new SuperTokens application with third-party authentication functionality. The command uses the npx create-supertokens-app tool to scaffold a demo application with the thirdparty authentication recipe.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=thirdparty\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens 2FA Demo App\nDESCRIPTION: Command to create a new SuperTokens demo application with multi-factor authentication recipe using npx.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-2fa-passwordless/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=multifactorauth\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting up the SuperTokens Demo Project\nDESCRIPTION: Commands to clone the repository, navigate to the example directory, and install the necessary dependencies for the SuperTokens auth React demo.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-sign-in-up-split-emailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-sign-in-up-split-emailpassword\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting up the SuperTokens Electron Demo Application\nDESCRIPTION: Commands for cloning the repository and installing project dependencies to set up the SuperTokens demo application with Electron client integration.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartypasswordless-electron/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-thirdpartypasswordless-electron\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing SuperTokens EmailPassword Demo with NPX\nDESCRIPTION: Command to create a new SuperTokens demo application with EmailPassword authentication recipe using npx create-supertokens-app.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=emailpassword\n```\n\n----------------------------------------\n\nTITLE: Installing Demo Dependencies with NPM\nDESCRIPTION: Commands to clone the repository and install project dependencies for the SuperTokens demo app.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-i18next/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-i18next\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Electron Demo in Development Mode\nDESCRIPTION: Command to start the Electron application in development mode, which compiles and serves the app while starting the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartypasswordless-electron/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for SuperTokens Auth React\nDESCRIPTION: Command to initialize the SuperTokens Auth React project and install all required dependencies.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run init\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing the SuperTokens Demo App\nDESCRIPTION: Commands for cloning the SuperTokens repository, navigating to the demo app directory, and installing the project dependencies using npm.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartyemailpassword-passwordless/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-thirdpartyemailpassword-passwordless\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Pre-commit Hooks for SuperTokens Auth React\nDESCRIPTION: Command to set up Git pre-commit hooks for the SuperTokens Auth React project to ensure code quality before commits.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run set-up-hooks\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies for SuperTokens Auth Demo\nDESCRIPTION: Commands to clone the repository, navigate to the demo directory, and install required dependencies using npm.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-then-password-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-emailverification-then-password-thirdpartyemailpassword\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SuperTokens MFA Demo\nDESCRIPTION: Commands to clone the repository and install dependencies for both frontend and backend components of the SuperTokens MFA demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth-phone-chooser/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-multifactorauth-phone-chooser\nnpm install\ncd frontend && npm install && cd ../\ncd backend && npm install && cd ../\n```\n\n----------------------------------------\n\nTITLE: Running Linter on SuperTokens Auth React\nDESCRIPTION: Command to run the linter on the SuperTokens Auth React project to ensure code quality and consistency.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Demo App in Development Mode\nDESCRIPTION: Command to compile and serve the React app while starting the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multiple-email-sign-in/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Demo Application in Development Mode\nDESCRIPTION: Command to start the development server which compiles the React app and runs the backend API server on port 3001. The frontend will be accessible at http://localhost:3000.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-sign-in-up-split-emailpassword/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating SuperTokens Demo App with thirdpartypasswordless Recipe\nDESCRIPTION: Command to generate a new SuperTokens demo application with the thirdpartypasswordless authentication recipe using npx.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartypasswordless/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-supertokens-app@latest --recipe=thirdpartypasswordless\n```\n\n----------------------------------------\n\nTITLE: Starting Testing Environment for SuperTokens\nDESCRIPTION: Command to start the testing environment in the supertokens-root repository with wait flag to ensure proper initialization.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./startTestEnv --wait\n```\n\n----------------------------------------\n\nTITLE: Installing CLI Login Demo Dependencies\nDESCRIPTION: Commands to clone the repository and install the required npm dependencies for the demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-cli-login/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-cli-login\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Screenshot Capturing for Failed Tests\nDESCRIPTION: Command to run tests with automatic screenshot capturing for failed e2e tests, storing them in a specified directory.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSCREENSHOT_ROOT=test_report npm run test\n```\n\n----------------------------------------\n\nTITLE: Running Tests for SuperTokens Auth React\nDESCRIPTION: Command to run all tests for the SuperTokens Auth React project.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Creating a New Netlify Site\nDESCRIPTION: Optional command to create a new Netlify site using the CLI. This generates a new site in your Netlify account that will host the SuperTokens Auth React demo.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-netlify/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnetlify sites:create\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node Server for Testing SuperTokens Auth React\nDESCRIPTION: Commands to setup the node server required for testing SuperTokens Auth React, including installing dependencies and the SuperTokens Node SDK.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ./test/server/\nnpm i -d\nnpm i git+https://github.com:supertokens/supertokens-node.git\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting SuperTokens Auth React Test App\nDESCRIPTION: Commands to install dependencies and start the test application for development purposes.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/for-tests-react-16/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens MFA Demo Application\nDESCRIPTION: Command to start the React frontend application and backend API server. The frontend runs on port 3000 while the backend runs on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth-phone-chooser/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building the SuperTokens Auth React Project\nDESCRIPTION: Command to build the SuperTokens Auth React project after making code modifications.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-pretty\n```\n\n----------------------------------------\n\nTITLE: Moving React Router DOM to Avoid Package Conflicts\nDESCRIPTION: Commands to temporarily relocate the react-router-dom package to prevent conflicts between the test app and the main SuperTokens package.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/for-tests-react-16/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv node_modules/react-router-dom node_modules/react-router-dom-test\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens Phone Auth Demo Application\nDESCRIPTION: Command to start the demo application which runs both the React frontend and backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-phone-password-mfa/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens Demo Application\nDESCRIPTION: Command to start the development server for the SuperTokens Hasura demo application, which will run on http://localhost:3000 by default.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hasura-thirdpartyemailpassword/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Ejecting Configuration with Yarn\nDESCRIPTION: Ejects the build configuration to enable custom configuration of webpack, Babel, ESLint and other tools. This is a one-way operation.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/test/with-typescript/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eject\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for SuperTokens EmailPassword Demo\nDESCRIPTION: Command to install the necessary dependencies for the SuperTokens EmailPassword Vercel demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailpassword-vercel/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Multi-factor Auth Demo\nDESCRIPTION: Command to start the demo application, which compiles and serves the React app and starts the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth-recovery-codes/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Phone Auth Demo\nDESCRIPTION: Command to start the demo application which runs the React frontend on port 3000 and backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-phone-password/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Netlify CLI Globally\nDESCRIPTION: Command to install the Netlify command-line interface globally using npm. This is required to manage the Netlify deployment from the terminal.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-netlify/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g netlify-cli\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens ThirdPartyPopup Demo Application\nDESCRIPTION: Command to start the demo application which compiles and serves the React frontend while also starting the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-popup/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building and Starting the SuperTokens App in Production Mode\nDESCRIPTION: Commands to create a production build of the app and start it.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multiple-email-sign-in/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all required project dependencies using Yarn. This ensures all necessary packages are available before building the project.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-netlify/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Auth Demo in Development Mode\nDESCRIPTION: Command to compile and serve the React app while starting the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-then-password-thirdpartyemailpassword/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SuperTokens Phone Auth Demo\nDESCRIPTION: Commands to clone the SuperTokens auth demo repository and install required npm dependencies.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-phone-password/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-phone-password\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SuperTokens Auth React Supabase Integration\nDESCRIPTION: This command installs the project dependencies using Yarn package manager. It should be run in the project root directory to set up all necessary packages for the SuperTokens Auth React integration with Supabase.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-supabase/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Demo Application\nDESCRIPTION: Command to compile and serve the React app while starting the backend API server on port 3001. This launches the complete demo application for testing.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-no-session-on-sign-up-thirdpartyemailpassword/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SuperTokens Phone Auth Demo\nDESCRIPTION: Commands to clone the repository and install project dependencies using npm. Sets up the demo application environment.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-phone-password-mfa/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-phone-password-mfa\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with Ngrok\nDESCRIPTION: Command to use Ngrok for exposing the local server running on port 3000 to the internet.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-next-iframe/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Restoring React Router DOM for Main Package Development\nDESCRIPTION: Command to move the react-router-dom package back to its original location when working on the main SuperTokens Auth React package.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/for-tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmv node_modules/react-router-dom-test node_modules/react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Setting up the SuperTokens Multi-Email Project in Bash\nDESCRIPTION: Commands to clone the repository, enter the directory, and install project dependencies using npm.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multiple-email-sign-in/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-multiple-email-sign-in\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts File for Multi-Tenant Subdomains\nDESCRIPTION: Host file configuration that maps example.com and various tenant subdomains to localhost for local development of a multi-tenant application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1   example.com\n127.0.0.1   tenant1.example.com\n127.0.0.1   tenant2.example.com\n127.0.0.1   tenant3.example.com\n```\n\n----------------------------------------\n\nTITLE: Running SuperTokens Update Email Demo App\nDESCRIPTION: Command to start the demo application, which compiles and serves the React frontend on port 3000 and starts the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-update-email-post-verification/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building the SuperTokens Electron Application for Production\nDESCRIPTION: Command to create a production-ready build of the Electron application, which generates the packaged application in the 'out' directory.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartypasswordless-electron/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run package\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SuperTokens ThirdPartyPopup Demo\nDESCRIPTION: Commands to clone the repository and install dependencies for the SuperTokens ThirdPartyPopup demo application, setting up both frontend and backend components.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-popup/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-thirdparty-popup\ncd backend\nnpm install\ncd ../frontend\nnpm install\ncd ..\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tenant Setup Script\nDESCRIPTION: Command to execute the tenant setup script that adds configured tenants to the core SuperTokens instance.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode tenant-setup.mjs\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Demo App in Development Mode\nDESCRIPTION: Command to compile and serve the React app while starting the backend API server on port 3001.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartyemailpassword-passwordless/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with NPM\nDESCRIPTION: This command installs dependencies and starts the React development server. After running this, the application can be accessed at http://a.example.com:3000 in the browser.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-per-subdomain/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i && npm start\n```\n\n----------------------------------------\n\nTITLE: Adding Tenants to Core Instance with Node.js\nDESCRIPTION: This command runs a Node.js script to add the configured tenants to the core instance of the application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-per-subdomain/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode tenant-setup.mjs\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Production Version\nDESCRIPTION: Commands to create a production build of the application and start the production server. This optimizes the application for performance in a production environment.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hasura-thirdpartyemailpassword/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with npm\nDESCRIPTION: Command to install dependencies and start the development server for the React application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i && npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (User-agent: *) to access all parts of the website with no path restrictions (empty Disallow directive).\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdpartyemailpassword-passwordless/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building and Starting the SuperTokens Auth Demo for Production\nDESCRIPTION: Commands to create a production build of the application and start the server.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-then-password-thirdpartyemailpassword/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Building and Starting Next.js Production Server\nDESCRIPTION: Commands to build the Next.js application for production and start the production server.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-next-iframe/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A basic robots.txt configuration that allows all web crawlers to access the entire site. The file includes a reference to the standard specification and sets no restrictions on crawling behavior.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-phone-password/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Commands to create a production build and start the production server.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-i18next/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-next-iframe/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access for All User Agents in robots.txt\nDESCRIPTION: This robots.txt configuration allows unrestricted access to all user agents. It specifies no disallowed paths, effectively permitting crawling of the entire site.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-then-password-thirdpartyemailpassword/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building and Running the SuperTokens Demo in Production Mode\nDESCRIPTION: Commands to create a production build of the application and start the production server. This optimizes the application for performance in a production environment.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-sign-in-up-split-emailpassword/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn\nDESCRIPTION: Command to install the project dependencies using Yarn package manager.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-next-iframe/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Running the SuperTokens Svelte Demo\nDESCRIPTION: Command to start the development server which runs the Svelte app on port 8080 and the backend server on port 4000.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-svelte-react-thirdpartyemailpassword/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt file that defines access rules for web crawlers. This configuration allows all user agents (crawlers) to access the entire website without any restrictions.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-i18next/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Restoring React Router DOM for Main Package Development\nDESCRIPTION: Command to move the react-router-dom package back to its original location when working on the main SuperTokens package.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/for-tests-react-16/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmv node_modules/react-router-dom-test node_modules/react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Running the API Server with Go\nDESCRIPTION: Command to navigate to the api-server directory and start the backend server using Go. The server will run on port 8000.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-okta-multi-tenant-pkce-flow/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd api-server\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers/robots to access the entire website without any restrictions. The file follows the robots exclusion protocol format.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-google-onetap/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn\nDESCRIPTION: Launches the interactive test runner for executing project tests.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/test/with-typescript/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Building and Starting SuperTokens Demo for Production\nDESCRIPTION: Commands to create a production build of the application and start it in production mode. This optimizes the application for performance rather than development experience.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-no-session-on-sign-up-thirdpartyemailpassword/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build && npm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the default access rules for web crawlers. It allows all user agents (crawlers) to access all content on the site without any restrictions.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-no-session-on-sign-up-thirdpartyemailpassword/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Command to launch the test runner in interactive watch mode for running application tests\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/frontend/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Up SuperTokens Demo Project with Bash Commands\nDESCRIPTION: Commands to clone the repository, navigate to the demo directory, and install project dependencies using npm. This is the initial setup required to run the demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-no-session-on-sign-up-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-no-session-on-sign-up-thirdpartyemailpassword\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Full Web Crawler Access\nDESCRIPTION: This robot.txt configuration allows unrestricted access to all web crawlers. It specifies that any user agent can access all parts of the website without any disallowed areas.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-okta-multi-tenant-pkce-flow/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Version in package.json\nDESCRIPTION: Example of updating the supertokens-website dependency version in package.json.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/CHANGELOG.md#2025-04-17_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"supertokens-website\": \"^9.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to SuperTokens Demo Project Directory\nDESCRIPTION: Commands to change directory to the with-emailpassword-vercel folder that contains the SuperTokens demo application.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailpassword-vercel/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd supertokens-auth-react/examples/with-emailpassword-vercel\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all user agents (web crawlers) complete access to the website without any restrictions. The file follows the robotstxt.org protocol, with no paths disallowed.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-thirdparty-popup/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers (User-agent: *) to access the entire website by not specifying any disallowed paths (Disallow: empty). It follows the standard robots exclusion protocol format.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth-phone-chooser/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Deploying SuperTokens EmailPassword Demo to Vercel\nDESCRIPTION: Command to deploy the SuperTokens EmailPassword demo application to Vercel in production mode.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailpassword-vercel/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvercel --prod\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SuperTokens Svelte Demo\nDESCRIPTION: Commands to clone the repository and install project dependencies using npm. These steps are required to set up the demo application locally.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-svelte-react-thirdpartyemailpassword/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supertokens/supertokens-auth-react\ncd supertokens-auth-react/examples/with-svelte-react-thirdpartyemailpassword\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robots.txt file to allow unrestricted access to web crawlers. It specifies that all user agents are permitted, and no paths are disallowed.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/test/with-typescript/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt to Allow All Web Crawlers\nDESCRIPTION: This configuration allows all web crawlers to access the entire website without restrictions. It specifies that any user-agent can crawl all pages as there are no disallowed paths.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-update-email-post-verification/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Starting the SuperTokens EmailPassword Demo App Locally\nDESCRIPTION: Command to start the SuperTokens EmailPassword Vercel demo application in a local development environment.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailpassword-vercel/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Standard robots.txt configuration that allows unrestricted access to all web crawlers. Uses the wildcard user-agent (*) and empty Disallow directive to permit full site crawling.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multiple-email-sign-in/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying to Netlify\nDESCRIPTION: Command to build the project and deploy it to Netlify. This runs the predefined Netlify deployment script configured in the project's package.json.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-netlify/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run netlify\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers (user-agents) full access to the website. Uses the standard robots.txt protocol syntax.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-localstorage/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle with Yarn\nDESCRIPTION: Creates an optimized production build in the build folder with minification and hash-based cache busting.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/test/with-typescript/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in Robot.txt\nDESCRIPTION: Standard robots.txt configuration that allows all user agents full access to the website. No paths are explicitly disallowed.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailpassword-vercel/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Yarn\nDESCRIPTION: Starts the development server on localhost:3000 with hot reload and error reporting capabilities.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/test/with-typescript/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robot.txt file to allow unrestricted access for all web crawlers. It specifies the user-agent as '*' (all crawlers) and sets no disallow rules, effectively permitting crawling of the entire site.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-sign-in-up-split-emailpassword/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SuperTokens Auth React Development Environment\nDESCRIPTION: Commands to install dependencies and start the development server for SuperTokens Auth React. These steps are intended for development purposes only and should not be used as a starting point for production projects.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/for-tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Default Robot Access Rules\nDESCRIPTION: Standard robots.txt configuration that defines default access rules for web crawlers. Uses the wildcard User-agent (*) to apply to all bots and has no disallow directives, effectively allowing full access.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-account-linking/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Command to eject from Create React App configuration to expose all build dependencies and configurations\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/frontend/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Command to build the application for production deployment with optimizations and bundling\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/frontend/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Command to start the React application in development mode with hot reloading at localhost:3000\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/frontend/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers (User-agent: *) to access all content on the site with no restrictions (empty Disallow directive).\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-many-subdomains/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robots.txt file to allow all web crawlers full access to the website. It specifies a wildcard user-agent and does not disallow any paths, effectively permitting crawling of the entire site.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-phone-password-mfa/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire website. It uses standard syntax with User-agent and Disallow directives, with an empty Disallow indicating no restrictions.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-netlify/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules in robots.txt\nDESCRIPTION: This snippet defines the standard robots.txt directives that allow all web crawlers to access the entire website. The configuration includes a User-agent directive that applies to all bots and an empty Disallow directive indicating no restrictions.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hash-router/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access all pages of the website. This configuration uses the wildcard User-agent selector (*) and includes no Disallow directives, effectively permitting complete access.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-emailverification-with-otp/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in Robot.txt\nDESCRIPTION: This snippet defines the default rules for web crawlers. It allows unrestricted access to all parts of the website for all user agents.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-one-login-per-subdomain/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: Standard robots.txt configuration that allows unrestricted access to all web crawlers. The file includes a reference to the robots.txt standard and uses basic directives to control crawler behavior.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-multifactorauth-recovery-codes/frontend/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Setting Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that allows unrestricted access to all web crawlers. It uses standard directives to specify crawler behavior.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-cli-login/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robots.txt file to allow unrestricted access to web crawlers. It specifies that all user agents are allowed to crawl the entire website without any disallowed paths.\nSOURCE: https://github.com/supertokens/supertokens-auth-react/blob/master/examples/with-hasura-thirdpartyemailpassword/public/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]