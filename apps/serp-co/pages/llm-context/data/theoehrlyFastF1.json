[
  {
    "owner": "theoehrly",
    "repo": "fast-f1",
    "content": "TITLE: Loading a Formula 1 Session with FastF1\nDESCRIPTION: This snippet demonstrates how to load a specific Formula 1 session using FastF1. It loads the Qualifying session of the 7th race in the 2021 season and shows how to access basic session information.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastf1\nsession = fastf1.get_session(2021, 7, 'Q')\nsession.name\nsession.date\n```\n\n----------------------------------------\n\nTITLE: Loading Session Data with FastF1 in Python\nDESCRIPTION: Demonstrates how to load session data for a specific Formula 1 race using FastF1. It retrieves the qualifying session for the 2021 French Grand Prix and displays the results as a pandas DataFrame.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> session = fastf1.get_session(2021, 'French Grand Prix', 'Q')\n>>> session.load()\n>>> session.results\n   DriverNumber BroadcastName Abbreviation  ... Time Status Points\n33           33  M VERSTAPPEN          VER  ...  NaT           NaN\n44           44    L HAMILTON          HAM  ...  NaT           NaN\n77           77      V BOTTAS          BOT  ...  NaT           NaN\n11           11       S PEREZ          PER  ...  NaT           NaN\n55           55       C SAINZ          SAI  ...  NaT           NaN\n10           10       P GASLY          GAS  ...  NaT           NaN\n16           16     C LECLERC          LEC  ...  NaT           NaN\n4             4      L NORRIS          NOR  ...  NaT           NaN\n14           14      F ALONSO          ALO  ...  NaT           NaN\n3             3   D RICCIARDO          RIC  ...  NaT           NaN\n31           31        E OCON          OCO  ...  NaT           NaN\n5             5      S VETTEL          VET  ...  NaT           NaN\n99           99  A GIOVINAZZI          GIO  ...  NaT           NaN\n63           63     G RUSSELL          RUS  ...  NaT           NaN\n47           47  M SCHUMACHER          MSC  ...  NaT           NaN\n6             6      N LATIFI          LAT  ...  NaT           NaN\n7             7   K RAIKKONEN          RAI  ...  NaT           NaN\n9             9     N MAZEPIN          MAZ  ...  NaT           NaN\n18           18      L STROLL          STR  ...  NaT           NaN\n22           22     Y TSUNODA          TSU  ...  NaT           NaN\n<BLANKLINE>\n[20 rows x 21 columns]\n```\n\n----------------------------------------\n\nTITLE: Loading Formula 1 Events by Name with FastF1\nDESCRIPTION: This code demonstrates FastF1's flexible event loading capabilities. It shows how to load events using partial or full names, and how the library attempts to match the provided string to the correct event.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nevent = fastf1.get_event(2021, 'French Grand Prix')\nevent['EventName']\n\nevent = fastf1.get_event(2021, 'Spain')\nevent['EventName']\n\nevent = fastf1.get_event(2021, 'Emilian')\nevent['EventName']\n\nevent = fastf1.get_event(2021, 'Emilia Romagna')\nevent['EventName']\n\nsession = fastf1.get_session(2021, 'Silverstone', 'Q')\nsession.event['EventName']\n```\n\n----------------------------------------\n\nTITLE: Basic Driver Information Retrieval with FastF1\nDESCRIPTION: A simple example showing how to import FastF1, load a session, and access driver information. This snippet loads a qualifying session from Monza 2019 with minimal data and prints a driver's first name.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastf1\nsession = fastf1.get_session(2019, 'Monza', 'Q')\nsession.load(telemetry=False, laps=False, weather=False)\nvettel = session.get_driver('VET')\nprint(f\"Pronto {vettel['FirstName']}?\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Top 10 Drivers and Q3 Times with FastF1\nDESCRIPTION: Demonstrates how to extract and display specific data from the session results. This example shows the top 10 drivers and their Q3 times.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> session.results.iloc[0:10].loc[:, ['Abbreviation', 'Q3']]\n   Abbreviation                     Q3\n33          VER 0 days 00:01:29.990000\n44          HAM 0 days 00:01:30.248000\n77          BOT 0 days 00:01:30.376000\n11          PER 0 days 00:01:30.445000\n55          SAI 0 days 00:01:30.840000\n10          GAS 0 days 00:01:30.868000\n16          LEC 0 days 00:01:30.987000\n4           NOR 0 days 00:01:31.252000\n14          ALO 0 days 00:01:31.340000\n3           RIC 0 days 00:01:31.382000\n```\n\n----------------------------------------\n\nTITLE: Plotting Speed Telemetry Data with FastF1\nDESCRIPTION: An advanced example that demonstrates plotting car speed data from a Formula 1 session. This script loads a qualifying session from Monza 2019, retrieves the fastest lap from Leclerc, extracts speed telemetry data, and creates a time vs. speed plot.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom matplotlib import pyplot as plt\nimport fastf1\nimport fastf1.plotting\n\nfastf1.plotting.setup_mpl(misc_mpl_mods=False, color_scheme='fastf1')\n\nsession = fastf1.get_session(2019, 'Monza', 'Q')\n\nsession.load()\nfast_leclerc = session.laps.pick_drivers('LEC').pick_fastest()\nlec_car_data = fast_leclerc.get_car_data()\nt = lec_car_data['Time']\nvCar = lec_car_data['Speed']\n\n# The rest is just plotting\nfig, ax = plt.subplots()\nax.plot(t, vCar, label='Fast')\nax.set_xlabel('Time')\nax.set_ylabel('Speed [Km/h]')\nax.set_title('Leclerc is')\nax.legend()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing Lap Data with FastF1 in Python\nDESCRIPTION: Shows how to access and display lap data for a Formula 1 session using FastF1. This includes loading the session and accessing the laps property, which returns a Laps object (a subclass of pandas DataFrame).\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> session = fastf1.get_session(2021, 'French Grand Prix', 'Q')\n>>> session.load()\n>>> session.laps\n                      Time Driver  ... FastF1Generated IsAccurate\n0   0 days 00:17:35.479000    GAS  ...           False      False\n1   0 days 00:27:42.702000    GAS  ...           False      False\n2   0 days 00:30:15.038000    GAS  ...           False      False\n3   0 days 00:31:46.936000    GAS  ...           False       True\n4   0 days 00:34:20.695000    GAS  ...           False      False\n..                     ...    ...  ...             ...        ...\n265 0 days 00:54:22.881000    GIO  ...           False       True\n266 0 days 01:00:32.369000    GIO  ...           False      False\n267 0 days 01:03:24.940000    GIO  ...           False      False\n268 0 days 01:04:56.753000    GIO  ...           False       True\n269 0 days 01:06:42.885000    GIO  ...           False      False\n<BLANKLINE>\n[270 rows x 31 columns]\n```\n\n----------------------------------------\n\nTITLE: Finding Fastest Lap and Pole Position with FastF1\nDESCRIPTION: Shows how to use the Laps object's pick_fastest() method to find the fastest lap time and identify the driver on pole position.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> fastest_lap = session.laps.pick_fastest()\n>>> fastest_lap['LapTime']\nTimedelta('0 days 00:01:29.990000')\n>>> fastest_lap['Driver']\n'VER'\n```\n\n----------------------------------------\n\nTITLE: Accessing Fastest Lap Telemetry in Fast-F1 (Python)\nDESCRIPTION: This snippet demonstrates how to load a session, find the fastest lap, and access its telemetry data. The resulting data is interpolated to match the exact start and end of the lap, suitable for visualization but not for further calculations.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/howto_accurate_calculations.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsession = fastf1.get_session(2020, 4, 'Q')\nsession.load()\nfastest_lap = session.laps.pick_fastest()\ntel = fastest_lap.telemetry\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Data in Python with FastF1 v2.2.0\nDESCRIPTION: Demonstrates how to access event data using the new Event class, which replaces the deprecated Weekend class. Shows the transition from old attribute access to new pandas Series-style access.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.2.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Old way (deprecated)\nWeekend.name\nWeekend.date\nWeekend.gp\n\n# New way\nEvent.EventName  # or Event['EventName']\nEvent.EventDate  # or Event['EventDate']\nEvent.RoundNumber  # or Event['RoundNumber']\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Lap Data Columns in FastF1\nDESCRIPTION: Demonstrates how to view the available columns in the lap data DataFrame. This helps in understanding what information is available for each lap.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> session.laps.columns  # doctest: +NORMALIZE_WHITESPACE\nIndex(['Time', 'Driver', 'DriverNumber', 'LapTime', 'LapNumber', 'Stint',\n       'PitOutTime', 'PitInTime', 'Sector1Time', 'Sector2Time', 'Sector3Time',\n       'Sector1SessionTime', 'Sector2SessionTime', 'Sector3SessionTime',\n       'SpeedI1', 'SpeedI2', 'SpeedFL', 'SpeedST', 'IsPersonalBest',\n       'Compound', 'TyreLife', 'FreshTyre', 'Team', 'LapStartTime',\n       'LapStartDate', 'TrackStatus', 'Position', 'Deleted', 'DeletedReason',\n       'FastF1Generated', 'IsAccurate'],\n      dtype='object')\n```\n\n----------------------------------------\n\nTITLE: Loading and Examining Telemetry Time Data in Fast-F1\nDESCRIPTION: This snippet demonstrates how to load telemetry data for a specific driver session and examine the Time, SessionTime, and Date columns. It shows the relationship between these different time measurements in a full dataset.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/time_explanation.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> tel = session.car_data['33'].loc[:, ['Time', 'SessionTime', 'Date']]\n>>> tel\n                      Time            SessionTime                    Date\n0     0 days 00:00:02.984000 0 days 00:00:02.984000 2020-09-06 12:40:03.180\n1     0 days 00:00:03.224000 0 days 00:00:03.224000 2020-09-06 12:40:03.420\n2     0 days 00:00:03.464000 0 days 00:00:03.464000 2020-09-06 12:40:03.660\n3     0 days 00:00:03.704000 0 days 00:00:03.704000 2020-09-06 12:40:03.900\n4     0 days 00:00:03.944000 0 days 00:00:03.944000 2020-09-06 12:40:04.140\n...                      ...                    ...                     ...\n35533 0 days 02:23:27.764000 0 days 02:23:27.764000 2020-09-06 15:03:27.960\n35534 0 days 02:23:28.004000 0 days 02:23:28.004000 2020-09-06 15:03:28.200\n35535 0 days 02:23:28.244000 0 days 02:23:28.244000 2020-09-06 15:03:28.440\n35536 0 days 02:23:28.484000 0 days 02:23:28.484000 2020-09-06 15:03:28.680\n35537 0 days 02:23:28.724000 0 days 02:23:28.724000 2020-09-06 15:03:28.920\n<BLANKLINE>\n[35538 rows x 3 columns]\n```\n\n----------------------------------------\n\nTITLE: Accessing Driver Results in Python with FastF1 v2.2.0\nDESCRIPTION: Shows how to access driver result data using the new DriverResult class, which replaces the deprecated Driver class. Illustrates the transition from old attribute access to new pandas Series-style access.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.2.0.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Old way (deprecated)\nDriver.name\nDriver.familyname\nDriver.team\nDriver.grid\nDriver.position\n\n# New way\nDriverResult.FirstName  # or DriverResult['FirstName']\nDriverResult.LastName  # or DriverResult['LastName']\nDriverResult.TeamName  # or DriverResult['TeamName']\nDriverResult.GridPosition  # or DriverResult['GridPosition']\nDriverResult.Position  # or DriverResult['Position']\n```\n\n----------------------------------------\n\nTITLE: Loading an Event Directly with FastF1\nDESCRIPTION: This snippet illustrates how to load an event directly using FastF1's get_event function. It also shows how to access a specific session (the race) from the loaded event.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nevent = fastf1.get_event(2021, 7)\nevent\nsession = event.get_race()\nsession.name\n```\n\n----------------------------------------\n\nTITLE: Processing Raw Lap Data for Calculations in Fast-F1 (Python)\nDESCRIPTION: This code shows how to access raw lap data for accurate calculations. It uses padding to ensure values outside the desired range for later interpolation, performs calculations on the raw data, merges channels, and then slices the result to remove padding and interpolate exact first and last values.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/howto_accurate_calculations.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsession = fastf1.get_session(2020, 4, 'Q')\nsession.load()\nfastest_lap = session.laps.pick_fastest()\n\n# use padding so that there are values outside of the desired range for accurate interpolation later\ncar_data = fastest_lap.get_car_data(pad=1, pad_side='both')\npos_data = fastest_lap.get_pos_data(pad=1, pad_side='both')\n\n# do calculations here\n# ...\n# ...\n\nmerged_data = car_data.merge_channels(pos_data)\n\n# slice again to remove the padding and interpolate the exact first and last value\nmerged_data = merged_data.slice_by_lap(fastest_lap, interpolate_edges=True)\n```\n\n----------------------------------------\n\nTITLE: Selecting Laps by Multiple Drivers in FastF1 v3.1.0\nDESCRIPTION: Demonstrates the new method for selecting laps from one or multiple drivers in FastF1 v3.1.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLaps.pick_drivers()\n```\n\n----------------------------------------\n\nTITLE: Accessing Formula 1 Season Schedule with FastF1\nDESCRIPTION: This snippet shows how to load and work with the full event schedule for a Formula 1 season using FastF1. It demonstrates that the EventSchedule is a subclass of pandas.DataFrame and shows how to access specific events from the schedule.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nschedule = fastf1.get_event_schedule(2021)\nschedule\nschedule.columns\n\ngp_12 = schedule.get_event_by_round(12)\ngp_12['Country']\ngp_austin = schedule.get_event_by_name('Austin')\ngp_austin['Country']\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Information in FastF1\nDESCRIPTION: This code shows how to access detailed event information from a loaded session. It demonstrates that the Event object is a subclass of pandas.Series and how to access individual values.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsession.event\nsession.event['EventName']\nsession.event['EventDate']\n```\n\n----------------------------------------\n\nTITLE: Selecting Non-Deleted Laps in FastF1 v3.1.0\nDESCRIPTION: Demonstrates the new method for selecting all laps that haven't been deleted in FastF1 v3.1.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nLaps.pick_not_deleted()\n```\n\n----------------------------------------\n\nTITLE: Importing and Setting Up FastF1 Plotting Module\nDESCRIPTION: This snippet demonstrates how to import and set up the FastF1 plotting module for use with Matplotlib. It's recommended to call setup_mpl() to enable extended support for Matplotlib and related libraries.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/plotting.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastf1.plotting\nfastf1.plotting.setup_mpl()\n```\n\n----------------------------------------\n\nTITLE: Slicing Telemetry Data by Time in Fast-F1\nDESCRIPTION: This snippet shows how to slice telemetry data by a specific time range using the slice_by_time method. It demonstrates how Time values are reset relative to the first sample while SessionTime and Date maintain their original reference points.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/time_explanation.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> t1 = pandas.Timedelta(hours=1, minutes=20)\n>>> t2 = pandas.Timedelta(hours=1, minutes=30)\n>>> tel.slice_by_time(t1, t2)\n                      Time            SessionTime                    Date\n19811 0 days 00:00:00.195000 0 days 01:20:00.195000 2020-09-06 14:00:00.391\n19812 0 days 00:00:00.435000 0 days 01:20:00.435000 2020-09-06 14:00:00.631\n19813 0 days 00:00:00.676000 0 days 01:20:00.676000 2020-09-06 14:00:00.872\n19814 0 days 00:00:00.916000 0 days 01:20:00.916000 2020-09-06 14:00:01.112\n19815 0 days 00:00:01.156000 0 days 01:20:01.156000 2020-09-06 14:00:01.352\n...                      ...                    ...                     ...\n22288 0 days 00:09:59.076000 0 days 01:29:59.076000 2020-09-06 14:09:59.272\n22289 0 days 00:09:59.277000 0 days 01:29:59.277000 2020-09-06 14:09:59.473\n22290 0 days 00:09:59.517000 0 days 01:29:59.517000 2020-09-06 14:09:59.713\n22291 0 days 00:09:59.757000 0 days 01:29:59.757000 2020-09-06 14:09:59.953\n22292 0 days 00:09:59.997000 0 days 01:29:59.997000 2020-09-06 14:10:00.193\n<BLANKLINE>\n[2482 rows x 3 columns]\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Laps by Number in FastF1 v3.1.0\nDESCRIPTION: Shows how to use the new method for selecting one or multiple laps by their lap number in FastF1 v3.1.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nLaps.pick_laps()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Colormap in FastF1 Plotting\nDESCRIPTION: This snippet shows how to set the default colormap for FastF1 plotting. The function set_default_colormap() is used to change the default colormap used for team and driver colors.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/plotting.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom fastf1.plotting import set_default_colormap\n\nset_default_colormap('official')  # or 'fastf1'\n```\n\n----------------------------------------\n\nTITLE: Accessing Result Columns in FastF1 Session Data\nDESCRIPTION: Shows how to view the available columns in the session results DataFrame. This is useful for understanding what data is available for analysis.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/examples/basics.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> session.results.columns  # doctest: +NORMALIZE_WHITESPACE\nIndex(['DriverNumber', 'BroadcastName', 'Abbreviation', 'DriverId', 'TeamName',\n       'TeamColor', 'TeamId', 'FirstName', 'LastName', 'FullName',\n       'HeadshotUrl', 'CountryCode', 'Position', 'ClassifiedPosition',\n       'GridPosition', 'Q1', 'Q2', 'Q3', 'Time', 'Status', 'Points'],\n      dtype='object')\n```\n\n----------------------------------------\n\nTITLE: Selecting Laps by Multiple Compounds in FastF1 v3.1.0\nDESCRIPTION: Shows how to use the new method for selecting laps driven on one or multiple compounds in FastF1 v3.1.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nLaps.pick_compounds()\n```\n\n----------------------------------------\n\nTITLE: Installing FastF1 via pip\nDESCRIPTION: Command to install the FastF1 package using Python's pip package manager.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install fastf1\n```\n\n----------------------------------------\n\nTITLE: Adding Sorted Driver Legend to FastF1 Plot\nDESCRIPTION: This snippet shows how to add a sorted driver legend to a FastF1 plot using the add_sorted_driver_legend() function. This is useful for creating consistent and readable legends in multi-driver plots.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/plotting.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom fastf1.plotting import add_sorted_driver_legend\n\n# Assume 'ax' is your plot axis\nadd_sorted_driver_legend(ax)\n```\n\n----------------------------------------\n\nTITLE: Improved Track Status Selection in FastF1 v3.1.0\nDESCRIPTION: Demonstrates the improved track status selection method with additional options for excluding or matching specific track statuses in FastF1 v3.1.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nLaps.pick_track_status()\n```\n\n----------------------------------------\n\nTITLE: Installing FastF1 using conda\nDESCRIPTION: Alternative installation command for FastF1 using conda package manager from the conda-forge channel.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge fastf1\n```\n\n----------------------------------------\n\nTITLE: Accessing Car Data in Python F1 Telemetry\nDESCRIPTION: Python list representation of car telemetry data with compressed content and timestamp. The structure contains the file name 'CarData.z', binary content (represented as a Base64 string), and a UTC timestamp.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n['CarData.z', '7Za9CsIwEIDf5ea25C4/TbIW30AXxaFIQUE61G6l724bQRxE7eHQ4TJcQshHkkvykQE2bd9dmhvEwwC7/gQRSBHmSufkt2iipUihcN5Yr3EPGVMqAUdYomRftoz9U4pk4WZ5mcY3Llcg5nLjA5VFwQmTtE7lHgbzmlN2v1zCmJmNnR3Oxo9gXnptVwr5xd8jZQvaKOu8uSsdgEBt4DmdBPggpkrCmdCEoEJYISQa1MUFoV6IxFEj+Jn8RP4qf1+clMxQX5QImgRFB/FdRTF6Ko74o6jnc=', '2021-03-28T14:52:30.4444696Z']\n```\n\n----------------------------------------\n\nTITLE: Accessing Circuit Information in FastF1 v3.1.0\nDESCRIPTION: Demonstrates how to access the newly added circuit information in FastF1 v3.1.0, including corner locations, marshal lights, sectors, and track map rotation.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Session.get_circuit_info()\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Ergast API Interface in Python\nDESCRIPTION: Shows how to import the Ergast class from FastF1 and create an interface object with default arguments.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from fastf1.ergast import Ergast\n>>> ergast = Ergast()\n```\n\n----------------------------------------\n\nTITLE: Processing Weather Data in Python F1 Telemetry\nDESCRIPTION: Python list representation of weather conditions during a race. Contains measurements for air temperature, humidity, pressure, rainfall, track temperature, wind direction, wind speed, and a timestamp.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n['WeatherData', {'AirTemp': '20.5', 'Humidity': '53.6', 'Pressure': '1014.9', 'Rainfall': '0', 'TrackTemp': '28.6', 'WindDirection': '358', 'WindSpeed': '1.1', '_kf': True}, '2021-03-28T14:56:43.048Z']\n```\n\n----------------------------------------\n\nTITLE: Getting Team and Driver Information in FastF1\nDESCRIPTION: This snippet demonstrates various functions to retrieve team and driver information, such as colors, names, and abbreviations. These functions are useful for customizing plot appearance and labels.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/plotting.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastf1.plotting import get_team_color, get_driver_name, get_driver_abbreviation\n\nteam_color = get_team_color('Mercedes')\ndriver_name = get_driver_name('HAM')\ndriver_abbr = get_driver_abbreviation('Lewis Hamilton')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Formula One Seasons Data using Ergast API in Python\nDESCRIPTION: This code snippet demonstrates how to use the Ergast API to retrieve Formula One season data. It fetches 3 seasons starting from the 7th season (offset=6) and displays the season year and corresponding Wikipedia URL for each season.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> ergast.get_seasons(limit=3, offset=6)\n   season                                          seasonUrl\n0    1956  https://en.wikipedia.org/wiki/1956_Formula_One...\n1    1957  https://en.wikipedia.org/wiki/1957_Formula_One...\n2    1958  https://en.wikipedia.org/wiki/1958_Formula_One...\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Fast-F1\nDESCRIPTION: This snippet lists the required Python packages and their specific versions for the Fast-F1 project. It includes popular libraries like matplotlib, numpy, pandas, and requests, as well as more specialized packages like timple and websockets.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/requirements/minver.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nmatplotlib==3.5.1\nnumpy==1.23.1\npandas==1.4.1\nrequests==2.28.1\nrequests-cache==1.0.0\nscipy==1.8.1\ntimple==0.1.6\nwebsockets==10.3\n```\n\n----------------------------------------\n\nTITLE: Accessing Driver Colors in Fast-F1\nDESCRIPTION: New function for getting driver-specific colors that are variations of team colors to better differentiate between teammates in visualizations.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.2.5.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.plotting.driver_color\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Data from Ergast API in Python\nDESCRIPTION: Shows how to get raw data instead of DataFrame results by specifying the return type as 'raw'.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> ergast.get_circuits(season=2022, result_type='raw')  # doctest: +NORMALIZE_WHITESPACE\n[{'circuitId': 'albert_park',\n  'url': 'https://en.wikipedia.org/wiki/Albert_Park_Circuit',\n  'circuitName': 'Albert Park Grand Prix Circuit',\n  'Location': {'lat': -37.8497,\n               'long': 144.968,\n               'locality': 'Melbourne',\n               'country': 'Australia'}},\n...]\n```\n\n----------------------------------------\n\nTITLE: Installing FastF1 using pip\nDESCRIPTION: Installation command for FastF1 using pip package manager. Requires Python 3.8 or higher.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install fastf1\n```\n\n----------------------------------------\n\nTITLE: Accessing Team Colors in Fast-F1 Plotting Module\nDESCRIPTION: Demonstrates the new method for accessing team colors in the fastf1.plotting module. This change may break existing code.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.0.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.plotting.team_color\n```\n\n----------------------------------------\n\nTITLE: Comparing Auto-cast and Non-auto-cast Results from Ergast API in Python\nDESCRIPTION: Shows the difference between automatic type casting (default) and disabling it using auto_cast=False.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> ergast.get_circuits(season=2022, result_type='raw')[0]['Location']\n{'lat': -37.8497, 'long': 144.968, 'locality': 'Melbourne', 'country': 'Australia'}\n\n>>> ergast.get_circuits(season=2022, result_type='raw', auto_cast=False)[0]['Location']\n{'lat': '-37.8497', 'long': '144.968', 'locality': 'Melbourne', 'country': 'Australia'}\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for FastF1 Logger Module using Sphinx\nDESCRIPTION: This reStructuredText directive instructs Sphinx to automatically generate documentation for the fastf1.logger module. The show-inheritance flag ensures that inheritance relationships are shown in the generated documentation.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/logging.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: fastf1.logger\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Calculating Delta Time Between Drivers in Fast-F1\nDESCRIPTION: Introduces a new utility function for comparing lost or gained time between two drivers.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.0.1.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfastf1.utils.delta_time\n```\n\n----------------------------------------\n\nTITLE: Querying Constructor Standings using Ergast API in Python\nDESCRIPTION: Demonstrates how to retrieve constructor standings data, which returns a complex data structure as an ErgastMultiResponse.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> standings = ergast.get_constructor_standings()  # doctest: +SKIP\n\n>>> standings.description  # doctest: +SKIP\n   season  round\n0    1958     11\n1    1959      9\n2    1960     10\n\n>>> standings.content[0]  # doctest: +SKIP\n   position positionText  ...  constructorName  constructorNationality\n0         1            1  ...          Vanwall                 British\n1         2            2  ...          Ferrari                 Italian\n...\n7         8            8  ...        Connaught                 British\n8         9            9  ...             OSCA                 Italian\n\n[9 rows x 8 columns]\n```\n\n----------------------------------------\n\nTITLE: Using get_driver_style Function for Recursive Color Replacement in Python\nDESCRIPTION: The get_driver_style function now recursively replaces the 'auto' color keyword, allowing for more complex plotting styles, particularly when using the Plotly library.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.5.x.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.plotting.get_driver_style\n```\n\n----------------------------------------\n\nTITLE: Using Pagination with Ergast API in Python\nDESCRIPTION: Shows how to use pagination to retrieve additional results when the response exceeds the limit for the maximum number of results.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> seasons = ergast.get_seasons(limit=3)\n>>> seasons\n   season                                          seasonUrl\n0    1950  https://en.wikipedia.org/wiki/1950_Formula_One...\n1    1951  https://en.wikipedia.org/wiki/1951_Formula_One...\n2    1952  https://en.wikipedia.org/wiki/1952_Formula_One...\n\n>>> seasons.is_complete\nFalse\n>>> seasons.total_results # doctest: +SKIP\n74\n\n>>> seasons.get_next_result_page()\n   season                                          seasonUrl\n0    1953  https://en.wikipedia.org/wiki/1953_Formula_One...\n1    1954  https://en.wikipedia.org/wiki/1954_Formula_One...\n2    1955  https://en.wikipedia.org/wiki/1955_Formula_One...\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Fastest Lap in Python\nDESCRIPTION: The pick_fastest() method on Laps objects now returns None if no fastest lap exists, instead of returning an empty Lap object as it did previously.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.5.x.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLaps.pick_fastest()\n```\n\n----------------------------------------\n\nTITLE: Accessing Telemetry Data in Fast-F1 v2.1.0\nDESCRIPTION: Demonstrates the changes in accessing telemetry data from lap objects. Shows the transition from dictionary-style access to property access for telemetry data in the new version.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlaps = session.load_laps()\nfastest = laps.pick_fastest()\n\ntel = fastest['telemetry']  # will now fail as telemetry is no longer saved in DataFrame/Series\ntel = fastest.telemetry  # will (still) work as this now accesses the computed property\n```\n\n----------------------------------------\n\nTITLE: Function Reference - fastf1.utils.delta_time\nDESCRIPTION: Function for calculating time deltas in racing data, with improved accuracy implemented in v3.3.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.3.x.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfastf1.utils.delta_time\n```\n\n----------------------------------------\n\nTITLE: Accessing Weather Data in Fast-F1 v2.1.6\nDESCRIPTION: New methods and attributes for retrieving weather data in Fast-F1. This includes methods for individual laps, multiple laps, and a new attribute for the entire session.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.6.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncore.Lap.get_weather_data()\ncore.Laps.get_weather_data()\ncore.Session.weather_data\n```\n\n----------------------------------------\n\nTITLE: Function Reference - fastf1.utils.to_datetime\nDESCRIPTION: Function that parses datetime strings, with improved handling for empty strings added in v3.3.1.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.3.x.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.utils.to_datetime\n```\n\n----------------------------------------\n\nTITLE: Accessing Sprint Qualifying Data with Fast-F1\nDESCRIPTION: Code example showing how to access sprint qualifying data using the fastf1.get_session function with the event parameter set to 'SQ'. This is part of a temporary patch to support the changed order of sessions on sprint qualifying weekends.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.8.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.get_session(event='SQ')\n```\n\n----------------------------------------\n\nTITLE: Class Reference - fastf1.core.Laps\nDESCRIPTION: Core class for handling lap data with track status information in DataFrame format.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.3.x.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Laps\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Info in FastF1 v3.1.0\nDESCRIPTION: Shows how to access the newly available 'SessionInfo' data from the F1 livetiming API in FastF1 v3.1.0.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.1.x.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Session.session_info\n```\n\n----------------------------------------\n\nTITLE: Removed FastF1 Core Methods and Properties\nDESCRIPTION: List of removed core functionality including Session methods (load_laps, load_telemetry), DriverResult properties (name, familyname, grid, position, team), and removed classes (Driver, Weekend).\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.0.x.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Session.load_laps()\nfastf1.core.Session.load_telemetry()\nfastf1.core.Session.weekend\nfastf1.core.DriverResult.name\nfastf1.core.DriverResult.familyname\nfastf1.core.DriverResult.grid\nfastf1.core.DriverResult.position\nfastf1.core.DriverResult.team\nfastf1.core.Driver\nfastf1.core.Weekend\nfastf1.ergast.fetch_weekend\n```\n\n----------------------------------------\n\nTITLE: Picking Drivers in Fast-F1 Core Laps Module\nDESCRIPTION: Shows the updated method for selecting drivers in the fastf1.core.Laps module. The function now accepts both driver numbers and three-letter identifiers.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.0.1.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Laps.pick_driver\nfastf1.core.Laps.pick_drivers\n```\n\n----------------------------------------\n\nTITLE: FastF1 Deprecated Modules\nDESCRIPTION: Modules marked for deprecation including fastf1.api (to become private) and fastf1.utils.delta_time (due to accuracy issues).\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.0.x.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfastf1.api\nfastf1.utils.delta_time\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache with Force Renew Option in Fast-F1 - Python\nDESCRIPTION: Reference to the API function for enabling cache, which was fixed to properly clear the requests cache when the force_renew parameter is set to True.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.12.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfastf1.api.Cache.enable_cache\n```\n\n----------------------------------------\n\nTITLE: FastF1 API Performance Improvements\nDESCRIPTION: Performance improvements implemented in car_data and pos_data API functions.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v3.0.x.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfastf1.api.car_data\nfastf1.api.pos_data\n```\n\n----------------------------------------\n\nTITLE: Referencing calculate_driver_ahead Function in Python\nDESCRIPTION: Reference to a bug fix for the calculate_driver_ahead function in the fastf1.Telemetry module, which previously crashed when car data was missing. The function is used to determine which driver is ahead on track.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.2.3.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.Telemetry.calculate_driver_ahead\n```\n\n----------------------------------------\n\nTITLE: Accessing Race Control Messages in Fast-F1\nDESCRIPTION: New attribute for accessing race control messages from a session object.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.2.5.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Session.race_control_messages\n```\n\n----------------------------------------\n\nTITLE: Referencing LiveTimingData Class in Python\nDESCRIPTION: Example showing the reference to the LiveTimingData class within the fastf1.livetiming.data module that received robustness improvements for data parsing.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.5.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.livetiming.data.LiveTimingData\n```\n\n----------------------------------------\n\nTITLE: Referencing Laps.pick_fastest Method in Python Fast-F1 Library\nDESCRIPTION: Reference to the core functionality that was updated to support reading drivers' personal best lap information from the API. The function now defaults to returning the quickest lap that is also marked as a personal best lap of any driver.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.2.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n:func:`~fastf1.core.Laps.pick_fastest`\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Fast-F1 Functions in Python\nDESCRIPTION: This snippet demonstrates the import and usage of various Fast-F1 functions and classes mentioned in the release notes. It includes examples of functions that have been fixed or added in this version.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.3.0.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastf1\n\n# Using fixed functions\nfastf1.core.Telemetry.calculate_driver_ahead()\nfastf1.core.Telemetry.add_driver_ahead()\nfastf1.core.Telemetry.merge_channels()\nfastf1.core.Telemetry.resample_channels()\nfastf1.legacy.inject_driver_ahead()\nfastf1.core.Session.load()\n\n# New function\nfastf1.get_events_remaining()\n\n# Enabling cache with shorthand path\nfastf1.Cache.enable_cache('~/cache')\n\n# Deprecated function (to be removed in v3.0.0)\nfastf1.ergast.fetch_weekend()\n\n# Functions with upcoming changes (in v3.0.0)\nfastf1.utils.to_timedelta()\nfastf1.utils.to_datetime()\n```\n\n----------------------------------------\n\nTITLE: Using Telemetry.calculate_driver_ahead Function in Fast-F1 - Python\nDESCRIPTION: Reference to a function that calculates which driver is ahead, which was fixed to prevent crashes when a driver didn't participate in a session. Contributed by GitHub user bambz96.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.12.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.core.Telemetry.calculate_driver_ahead\n```\n\n----------------------------------------\n\nTITLE: Accessing Session Time Reference Points in Fast-F1\nDESCRIPTION: This snippet demonstrates how to access the reference points for a session, including t0_date (the relation between SessionTime and Date) and session_start_time (when the session officially started).\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/time_explanation.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> session.t0_date\nTimestamp('2020-09-06 12:40:00.196000')\n\n>>> session.session_start_time\ndatetime.timedelta(seconds=2008, microseconds=79000)\n>>> str(session.session_start_time)\n'0:33:28.079000'\n```\n\n----------------------------------------\n\nTITLE: Fixed Method Call for Position Data in Fast-F1\nDESCRIPTION: Correction for an error that occurred when calling the get_pos_data method on Laps objects.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.6.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncore.Laps.get_pos_data()\n```\n\n----------------------------------------\n\nTITLE: Standard Import Conventions for FastF1\nDESCRIPTION: Example showing the standard import conventions to follow when contributing code to FastF1, following the SciPy conventions for common packages.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/contributing.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Changed Session.load_laps Default Behavior in Python\nDESCRIPTION: The method fastf1.Session.load_laps now loads timing data without telemetry by default to prevent confusing errors when telemetry data is not available.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.1.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfastf1.Session.load_laps\n```\n\n----------------------------------------\n\nTITLE: Running Ruff Code Style Checker\nDESCRIPTION: Command to install and run the Ruff code style checker for ensuring PEP8 compliance. This is used to verify code style before submitting pull requests.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/contributing.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install ruff\nruff check .\n```\n\n----------------------------------------\n\nTITLE: API Module Modifications - Python\nDESCRIPTION: Changes in the fastf1.api module including renaming of 'LastLapTime' column to 'LapTime' for consistency, improved pit data handling, and better error reporting for unavailable sessions.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.0.2.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napi.timing_data()  # Now returns 'LapTime' instead of 'LastLapTime'\napi._laps_data_driver()  # Internal function with modified behavior\napi.SessionNotAvailableError  # New error handling for unavailable sessions\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Exceptions for Optional Functions (Python)\nDESCRIPTION: Shows how to use the soft_exceptions decorator in FastF1 to handle errors in optional functions gracefully. This allows the library to continue functioning with limited capability instead of crashing completely.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/contributing.rst#2025-04-17_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastf1.logger import soft_exceptions\n\n@soft_exceptions(descr_name=\"optional data processing\",\n               msg=\"Failed to do some optional data processing\",\n               logger=logger)\ndef _optional_data_loading():\n    ...\n    return\n```\n\n----------------------------------------\n\nTITLE: Importing and Using fastf1.api Module\nDESCRIPTION: Example of how to import and use functions from the fastf1.api module\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/api.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport fastf1.api\n\n# Example usage\npage_data = fastf1.api.pages()\ntiming_data = fastf1.api.timing_data()\ncar_data = fastf1.api.car_data()\n\n# Error handling\ntry:\n    session_data = fastf1.api.fetch_page()\nexcept fastf1.api.SessionNotAvailableError:\n    print(\"Session data not available\")\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment (Windows PowerShell)\nDESCRIPTION: This command activates the Python virtual environment on Windows systems using PowerShell. It should be run before working on FastF1 development.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n<file folder location>\\Scripts\\Activate.ps1\n```\n\n----------------------------------------\n\nTITLE: Querying Circuit Information using Ergast API in Python\nDESCRIPTION: Demonstrates how to get information about circuits that hosted a Grand Prix in 2022 using the Ergast API interface.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> response_frame = ergast.get_circuits(season=2022)\n>>> response_frame\n        circuitId  ...       country\n0     albert_park  ...     Australia\n1        americas  ...           USA\n2         bahrain  ...       Bahrain\n...\n19     villeneuve  ...        Canada\n20     yas_marina  ...           UAE\n21      zandvoort  ...   Netherlands\n\n[22 rows x 7 columns]\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment (Windows cmd.exe)\nDESCRIPTION: This command activates the Python virtual environment on Windows systems using cmd.exe. It should be run before working on FastF1 development.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n<file folder location>\\Scripts\\activate.bat\n```\n\n----------------------------------------\n\nTITLE: Examining DataFrame Columns from Ergast API Response in Python\nDESCRIPTION: Demonstrates how to view the column names in the response DataFrame, showing renamed keys from the raw result.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/ergast.rst#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> response_frame.columns\nIndex(['circuitId', 'circuitUrl', 'circuitName', 'lat', 'long', 'locality',\n       'country'],\n      dtype='object')\n```\n\n----------------------------------------\n\nTITLE: Cloning FastF1 Repository from GitHub\nDESCRIPTION: This Git command clones the FastF1 repository from GitHub, placing the source code in a 'Fast-F1' directory below the current working directory.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/theOehrly/Fast-F1.git\n```\n\n----------------------------------------\n\nTITLE: Checking FastF1 Version in Python\nDESCRIPTION: Code snippet showing how to check the installed version of FastF1 and Python when reporting bugs. This helps developers reproduce issues in the correct environment.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/contributing.rst#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import fastf1\n>>> fastf1.__version__  # doctest: +SKIP\n'2.2.1'\n>>> import platform\n>>> platform.python_version()  # doctest: +SKIP\n'3.9.2'\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Development Dependencies\nDESCRIPTION: This pip command installs additional dependencies required for FastF1 development and testing, as specified in the requirements/dev.txt file.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements/dev.txt\n```\n\n----------------------------------------\n\nTITLE: Using Logging in FastF1 Modules (Python)\nDESCRIPTION: Demonstrates how to set up and use logging in FastF1 modules. It shows how to create a logger and use different logging levels for various types of messages.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/contributing.rst#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom fastf1.logger import get_logger\n\n# set up the logger once (!)\nlogger = get_logger(__name__)\n\n# code\nlogger.info('Here is some information')\nlogger.debug('Here is some more detailed information')\n# more code\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for FastF1\nDESCRIPTION: These commands install pre-commit and set up hooks for FastF1 development. The hooks automatically check and partially fix code style issues using ruff linter and isort when running git commit.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command creates a new Python virtual environment using the venv module. It allows for isolating the FastF1 development environment from other Python installations.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv <file folder location>\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Sphinx for Fast-F1\nDESCRIPTION: Command to build the HTML documentation from the docs/ directory. This uses the make utility to process the reStructuredText files into HTML format according to the configuration in conf.py.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/documenting_fastf1.rst#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment (Linux/macOS)\nDESCRIPTION: This command activates the Python virtual environment on Linux or macOS systems. It should be run before working on FastF1 development.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource <file folder location>/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Opening Documentation in Browser for Fast-F1\nDESCRIPTION: Command to open the generated HTML documentation in a web browser. This displays the homepage of the documentation build after it has been generated.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/documenting_fastf1.rst#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake show\n```\n\n----------------------------------------\n\nTITLE: Installing FastF1 in Editable Mode\nDESCRIPTION: This pip command installs FastF1 in editable mode, allowing for development and immediate importing of modified versions without reinstallation.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Fast-F1 Development Environment\nDESCRIPTION: This snippet lists all the Python package dependencies required for developing and testing the Fast-F1 project. It includes packages for code formatting (isort, ruff), testing (pytest), HTTP requests (requests), WebSocket communication, and other development tools with specific version constraints where necessary.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/requirements/dev.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nisort\npre-commit\npytest-mpl==0.14.0  # logging issues in newer versions\npytest>=6.0.0  # equals pytest min version requirement\nrequests-mock\nrequests>=2.28.1\nruff\nwebsockets>=10.3,<14\nwheel\nxdoctest\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Build Dependencies\nDESCRIPTION: This pip command installs additional dependencies required for building FastF1 documentation, as specified in the requirements/doc-build.txt file.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/devenv_setup.rst#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -r requirements/doc-build.txt\n```\n\n----------------------------------------\n\nTITLE: RST Autodoc Reference for Circuit Information Class\nDESCRIPTION: Sphinx autodoc directive for generating documentation from the CircuitInfo class in the fastf1.mvapi module. This directive instructs Sphinx to automatically extract and display all members of the specified class.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/circuit_info.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: fastf1.mvapi.CircuitInfo\n  :members:\n```\n\n----------------------------------------\n\nTITLE: Processing Tire Data in Python F1 Telemetry\nDESCRIPTION: Python list representation of timing app data focusing on tire information. Contains detailed information about drivers' tire compounds (SOFT/MEDIUM), whether tires are new, total laps on tires, and other stint-related information organized by car number.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n['TimingAppData', {'Lines': {'33': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '44': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '77': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '16': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '10': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '3': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '4': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '55': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '14': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '18': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '11': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '99': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '22': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'false', 'TyresNotChanged': '0', 'TotalLaps': 3, 'StartLaps': 3}]}, '7': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '63': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '31': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '6': {'Stints': [{'LapFlags': 0, 'Compound': 'SOFT', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '47': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '9': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}, '5': {'Stints': [{'LapFlags': 0, 'Compound': 'MEDIUM', 'New': 'true', 'TyresNotChanged': '0', 'TotalLaps': 0, 'StartLaps': 0}]}}}, '2021-03-28T14:57:06.206Z']\n```\n\n----------------------------------------\n\nTITLE: Running pytest for FastF1\nDESCRIPTION: Command to run pytest for FastF1 project. This should be executed in the root directory of the development repository.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/testing.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Including the Utils Module Documentation using Sphinx automodule\nDESCRIPTION: This restructuredtext directive tells Sphinx to automatically generate API documentation for the fastf1.utils module. It includes all members of the module and shows inheritance relationships between classes.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/utils.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: fastf1.utils\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running a single pytest in FastF1\nDESCRIPTION: Command to run a specific test file or function in FastF1 using pytest. This example demonstrates running a test from the test_events.py file.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/testing.rst#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest fastf1/tests/test_events.py::test_event_get_session_date\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for FastF1 Legacy Module\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation for the fastf1.legacy module. Shows all members, undocumented members and inheritance relationships.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/legacy.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: fastf1.legacy\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Running Ruff for code style checking in FastF1\nDESCRIPTION: Command to run Ruff for checking code style consistency in the FastF1 project.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/testing.rst#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nruff check .\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in RST for FastF1 Contributing Guide\nDESCRIPTION: A toctree directive in RST (reStructuredText) that creates a table of contents for the contributing guide documentation, with a maximum depth of 2 levels, listing various contribution-related pages.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   contributing.rst\n   devenv_setup.rst\n   testing.rst\n   documenting_fastf1.rst\n   coding_guide.rst\n```\n\n----------------------------------------\n\nTITLE: Running isort for import order checking in FastF1\nDESCRIPTION: Command to run isort for checking and correcting import order in the FastF1 project.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/testing.rst#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython -m isort .\n```\n\n----------------------------------------\n\nTITLE: Structuring Release Notes Table of Contents in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for release notes documentation using reStructuredText directives. It organizes version notes hierarchically with the toctree directive and maxdepth parameter.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/previous.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:orphan:\n\n.. _previous-release-notes:\n\nRelease Notes for Older Versions\n================================\n\n.. toctree::\n  :maxdepth: 1\n\n  v3.4.x\n  v3.3.x\n  v3.2.x\n  v3.1.x\n  v3.0.x\n  v2.3.2\n  v2.3.1\n  v2.3.0\n\n  v2.2.9\n  v2.2.8\n  v2.2.7\n  v2.2.6\n  v2.2.5\n  v2.2.4\n  v2.2.3\n  v2.2.2\n  v2.2.1\n  v2.2.0\n\n  v2.1.13\n  v2.1.12\n  v2.1.11\n  v2.1.10\n  v2.1.9\n  v2.1.8\n  v2.1.7\n  v2.1.6\n  v2.1.5\n  v2.1.4\n  v2.1.3\n  v2.1.2\n  v2.1.1\n  v2.1.0\n\n  v2.0.2\n  v2.0.1\n  v2.0.0\n  v1.5.1\n```\n\n----------------------------------------\n\nTITLE: Amending Git Commits for Pull Requests in Bash\nDESCRIPTION: This snippet demonstrates how to amend the initial commit and force-push changes when updating a pull request. It helps maintain a clean commit history in the FastF1 project.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/coding_guide.rst#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend --no-edit\ngit push [your-remote-repo] [your-branch] --force-with-lease\n```\n\n----------------------------------------\n\nTITLE: Parsing F1 TimingAppData in JSON\nDESCRIPTION: This snippet represents the structure of TimingAppData for Formula 1 races. It contains information about driver stints, tire compounds, and lap counts for each car.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n[\"TimingAppData\", {\"Lines\": {\"33\": {}, \"44\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"77\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"16\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"10\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"3\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"4\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"55\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"14\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"18\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"11\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"99\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"22\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"false\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 3, \"StartLaps\": 3}]}, \"7\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"63\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"31\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"6\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"SOFT\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"47\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"9\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}, \"5\": {\"Stints\": [{\"LapFlags\": 0, \"Compound\": \"MEDIUM\", \"New\": \"true\", \"TyresNotChanged\": \"0\", \"TotalLaps\": 0, \"StartLaps\": 0}]}}}, \"2021-03-28T14:57:06.206Z\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Buttons Using HTML in RST for FastF1 Contributing Guide\nDESCRIPTION: A raw HTML block embedded in RST that creates styled navigation buttons for different contribution options, including bug reporting, feature requests, code contributions, and documentation writing.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/contributing/index.rst#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"margin: 2em 0\">\n  <a href=\"contributing.html#submitting-a-bug-report\"><span class=\"ff1-button\">Report a bug</span></a>\n  <a href=\"contributing.html#request-a-new-feature\"><span class=\"ff1-button\">Request a feature</span></a>\n  <a href=\"contributing.html#contributing-code\"><span class=\"ff1-button\">Contribute code</span></a>\n  <a href=\"contributing.html#contributing-documentation\"><span class=\"ff1-button\">Write documentation</span></a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Parsing F1 TimingData in JSON\nDESCRIPTION: This snippet shows the structure of TimingData for Formula 1 races. It includes sector and segment information for specific drivers during the race.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n[\"TimingData\", {\"Lines\": {\"10\": {\"Sectors\": {\"0\": {\"Segments\": {\"3\": {\"Status\": 2048}}}}}}}, \"2021-03-28T15:00:18.342Z\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for fastf1 module\nDESCRIPTION: This is a reStructuredText (rst) directive that automatically generates documentation for the fastf1 Python module. It pulls docstrings and API details from the code itself.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/fastf1.rst#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: fastf1\n```\n\n----------------------------------------\n\nTITLE: Parsing F1 SessionData in JSON\nDESCRIPTION: This snippet represents the structure of SessionData for Formula 1 races. It contains information about the session status series, including track status and timing.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n[\"SessionData\", {\"StatusSeries\": {\"2\": {\"Utc\": \"2021-03-28T14:57:41.297Z\", \"TrackStatus\": \"AllClear\"}}}, \"2021-03-28T14:57:41.297Z\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for FastF1 LiveTiming Module\nDESCRIPTION: This Sphinx directive configures automatic documentation generation for the fastf1.livetiming module. It includes all members, undocumented members, and shows inheritance relationships between classes.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/livetiming.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: fastf1.livetiming\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Processing Race Control Messages in Python F1 Telemetry\nDESCRIPTION: Python list representation of race control messages. Contains structured data about official communications including message category, status, lap number, and timestamp information for events like DRS activation status.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n['RaceControlMessages', {'Messages': {'1': {'Utc': '2021-03-28T14:57:06', 'Lap': 1, 'Category': 'Drs', 'Status': 'DISABLED', 'Message': 'DRS DISABLED'}}}, '2021-03-28T14:57:05.795Z']\n```\n\n----------------------------------------\n\nTITLE: Including v3.5.x Release Notes in reStructuredText\nDESCRIPTION: A directive that includes the v3.5.x.rst file, which presumably contains release notes for version 3.5.x of the Fast-F1 package. This is a common pattern in reStructuredText for composing documentation from multiple source files.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. include:: v3.5.x.rst\n```\n\n----------------------------------------\n\nTITLE: Accessing Position Data in Python F1 Telemetry\nDESCRIPTION: Python list representation of position data with compressed content and timestamp. The structure contains the file name 'Position.z', binary content (represented as a Base64 string), and a UTC timestamp.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n['Position.z', '7ZS7bsJAEEX/ZWqDdl77cJ86kUKREKVAEYUVBSJwKuR/j8F28DYTCsptLNny0ezcvToneNofm7bZ76B+O8Gq+doe283Xuo4GHXHprtEeoT8Pnx3G7an/4VHnerw+bjs//lBeoFO6zgFWp2EitY919QU1eBGAwlPzB4hq+MWnNELgw5/mNiz3iLYR0YijqfEyxG04XBQDKfk8yzDRkQUjYH3W2DaD4I0YTCCEnIJllxc3ADJDG7IjSzc2G8V84nRTOIcaeUB0F0004qc4jNIPxQIVSfpcd2V2nqaraTmGWNaYSUMshu0Rh5zJunZsWnIJTTHPLmTuqn9LLjBfN4TqedssiT2XLlcSd0V6jrqv+1EoMkRi1aKVopWilauYtW2C1dkphisUqxSrFKscq9rMJ99bz4opWilaKVopWbtPLe/QI=', '2021-03-28T14:52:30.3148646Z']\n```\n\n----------------------------------------\n\nTITLE: Installing FastF1 via conda\nDESCRIPTION: Command to install the FastF1 package using the conda package manager from conda-forge channel.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nconda install -c conda-forge fastf1\n```\n\n----------------------------------------\n\nTITLE: Processing Heartbeat Data in Python F1 Telemetry\nDESCRIPTION: Python list representation of system heartbeat data with timestamp information. The structure contains type designation 'Heartbeat', a dictionary with UTC timestamp and keyframe flag, and a second timestamp.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n['Heartbeat', {'Utc': '2021-03-28T14:52:34.2188616Z', '_kf': True}, '2021-03-28T14:52:32.124219Z']\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Dependencies for Fast-F1 Project\nDESCRIPTION: This requirements file lists all necessary Python packages for building the Fast-F1 project documentation. It includes Sphinx for documentation generation, visualization libraries like plotly and seaborn, and additional Sphinx extensions for enhanced documentation features.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/requirements/doc-build.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nautodocsumm>=0.2.10  # support for sphinx v6\nfuro\nkaleido\nplotly\nseaborn>0.13.0\nsphinx-autodoc-typehints\nsphinx-gallery>=0.10.0\nsphinx>=8.0\n```\n\n----------------------------------------\n\nTITLE: Parsing F1 TrackStatus in JSON\nDESCRIPTION: This snippet shows the structure of TrackStatus data for Formula 1 races. It includes information about the current track status and any messages associated with it.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/fastf1/testing/reference_data/livedata/with_errors.txt#2025-04-17_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n[\"TrackStatus\", {\"Status\": \"1\", \"Message\": \"AllClear\", \"_kf\": true}, \"2021-03-28T14:57:41.297Z\"]\n```\n\n----------------------------------------\n\nTITLE: Fixed Telemetry Retrieval for First Lap in Fast-F1\nDESCRIPTION: Resolution for an error that occurred when calling get_telemetry on the first lap or a set of laps including the first lap.\nSOURCE: https://github.com/theOehrly/Fast-F1/blob/master/docs/changelog/v2.1.6.rst#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nget_telemetry()\n```"
  }
]