[
  {
    "owner": "vendure-ecommerce",
    "repo": "vendure",
    "content": "TITLE: Implementing Job Cancellation Checking in Vendure Job Queue\nDESCRIPTION: A complete example of setting up a product export service that properly handles job cancellation. The code demonstrates how to create a job queue, implement cancellation checking, and gracefully stop processing when a job is cancelled.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { JobQueue, JobQueueService, Product, TransactionalConnection,\n    SerializedRequestContext, RequestContext, Job, JobState } from '@vendure/core';\nimport { IsNull } from 'typeorm';\n\n@Injectable()\nclass ProductExportService implements OnModuleInit {\n\n    private jobQueue: JobQueue<{ ctx: SerializedRequestContext; }>;\n\n    constructor(private jobQueueService: JobQueueService,\n                private connection: TransactionalConnection) {\n    }\n\n    async onModuleInit() {\n        this.jobQueue = await this.jobQueueService.createQueue({\n            name: 'export-products',\n            process: async job => {\n                const ctx = RequestContext.deserialize(job.data.ctx);\n                const allProducts = await this.connection.getRepository(ctx, Product).find({\n                    where: { deletedAt: IsNull() }\n                });\n                let successfulExportCount = 0;\n                for (const product of allProducts) {\n                    // highlight-start\n                    if (job.state === JobState.CANCELLED) {\n                        // If the job has been cancelled, stop processing\n                        // to prevent unnecessary work.\n                        throw new Error('Job was cancelled');\n                    }\n                    // highlight-end\n\n                    // ... logic to export the product omitted for brevity\n                    successfulExportCount++;\n                }\n                return { successfulExportCount };\n            },\n        });\n    }\n\n    exportAllProducts(ctx: RequestContext) {\n        return this.jobQueue.add({ ctx: ctx.serialize() });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VendureConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface defining all possible configuration options for a Vendure e-commerce application. Includes settings for API, assets, authentication, catalog, database connections, custom fields, and various system operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/vendure-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VendureConfig {\n    apiOptions: ApiOptions;\n    assetOptions?: AssetOptions;\n    authOptions: AuthOptions;\n    catalogOptions?: CatalogOptions;\n    customFields?: CustomFields;\n    dbConnectionOptions: DataSourceOptions;\n    defaultChannelToken?: string | null;\n    defaultLanguageCode?: LanguageCode;\n    entityIdStrategy?: EntityIdStrategy<any>;\n    entityOptions?: EntityOptions;\n    importExportOptions?: ImportExportOptions;\n    orderOptions?: OrderOptions;\n    paymentOptions: PaymentOptions;\n    plugins?: Array<DynamicModule | Type<any>>;\n    promotionOptions?: PromotionOptions;\n    shippingOptions?: ShippingOptions;\n    logger?: VendureLogger;\n    taxOptions?: TaxOptions;\n    jobQueueOptions?: JobQueueOptions;\n    systemOptions?: SystemOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Custom Fields\nDESCRIPTION: Demonstrates how to create a unique custom field with a database constraint.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Customer: [\n            {\n                name: 'externalId',\n                type: 'string',\n                // highlight-next-line\n                unique: true,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Fields for Elasticsearch in Vendure\nDESCRIPTION: Example of configuring script fields for Elasticsearch to calculate distance between product locations and user coordinates. This setup extends the search input type, defines custom mapping properties, and implements a script field for distance calculation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nextendSearchInputType: {\n  latitude: 'Float',\n  longitude: 'Float',\n},\nindexMappingProperties: {\n  // The `product-location` field corresponds to the `location` customProductMapping\n  // defined below. Here we specify that it would be index as a `geo_point` type,\n  // which will allow us to perform geo-spacial calculations on it in our script field.\n  'product-location': {\n    type: 'geo_point', // contains function arcDistance\n  },\n},\ncustomProductMappings: {\n  location: {\n    graphQlType: 'String',\n    valueFn: (product: Product) => {\n      // Assume that the Product entity has this customField defined\n      const custom = product.customFields.location;\n      return `${custom.latitude},${custom.longitude}`;\n    },\n  }\n},\nsearchConfig: {\n  scriptFields: {\n    distance: {\n      graphQlType: 'Float!',\n      // Run this script only when grouping results by product\n      context: 'product',\n      scriptFn: (input) => {\n        // The SearchInput was extended with latitude and longitude\n        // via the `extendSearchInputType` option above.\n        const lat = input.latitude;\n        const lon = input.longitude;\n        return {\n          script: `doc['product-location'].arcDistance(${lat}, ${lon})`,\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Access Using TypeORM QueryBuilder API\nDESCRIPTION: Examples of using TypeORM's QueryBuilder API for complex database queries, including subqueries and complex WHERE clauses.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-service-layer/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { ID, RequestContext, TransactionalConnection } from '@vendure/core';\nimport { Brackets, IsNull } from 'typeorm';\nimport { Item } from '../entities/item.entity';\n\n@Injectable()\nexport class ItemService {\n\n    constructor(private connection: TransactionalConnection) {}\n\n    findById(ctx: RequestContext, itemId: ID): Promise<Item | null> {\n        return this.connection.getRepository(ctx, Item).createQueryBuilder('item')\n            .where('item.id = :id', { id: itemId })\n            .getOne();\n    }\n\n    findManyWithSubquery(ctx: RequestContext, name: string) {\n        return this.connection.getRepository(ctx, Item).createQueryBuilder('item')\n            .where('item.name = :name', { name })\n            .andWhere(\n                new Brackets(qb1 => {\n                    qb1.where('item.state = :state1', { state1: 'PENDING' })\n                       .orWhere('item.state = :state2', { state2: 'RETRYING' });\n                }),\n            )\n            .orderBy('item.createdAt', 'ASC')\n            .getMany();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of PermissionDefinition in TypeScript\nDESCRIPTION: Defines the structure and construction logic for the PermissionDefinition class. The class requires a PermissionDefinitionConfig object as its parameter, outlining the basic contract for creating a permission.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass PermissionDefinition {\n    constructor(config: PermissionDefinitionConfig)\n    Permission: Permission\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-in Resolvers\nDESCRIPTION: Demonstrates how to override existing Vendure resolver functions with custom implementations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Query, Mutation, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext } from '@vendure/core'\n\n@Resolver()\nclass OverrideExampleResolver {\n\n    @Query()\n    products(@Ctx() ctx: RequestContext, @Args() args: any) {\n        // when the `products` query is executed, this resolver function will\n        // now handle it.\n    }\n\n    @Transaction()\n    @Mutation()\n    addItemToOrder(@Ctx() ctx: RequestContext, @Args() args: any) {\n        // when the `addItemToOrder` mutation is executed, this resolver function will\n        // now handle it.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products with Extended Fields - Shop API\nDESCRIPTION: Extended GraphQL query to fetch products including additional fields like slug, description and featured asset details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  products {\n    totalItems\n    items {\n      id\n      name\n      slug\n      description\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tax Calculation Strategies in Vendure\nDESCRIPTION: TypeScript configuration example showing default tax settings including tax zone strategy, tax line calculation strategy, and order item price calculation strategy setup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/taxes/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DefaultTaxLineCalculationStrategy,\n    DefaultTaxZoneStrategy,\n    DefaultOrderItemPriceCalculationStrategy,\n    VendureConfig\n} from '@vendure/core';\n\nexport const config: VendureConfig = {\n  taxOptions: {\n    taxZoneStrategy: new DefaultTaxZoneStrategy(),\n    taxLineCalculationStrategy: new DefaultTaxLineCalculationStrategy(),\n  },\n  orderOptions: {\n    orderItemPriceCalculationStrategy: new DefaultOrderItemPriceCalculationStrategy()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CatalogOptions Interface in TypeScript\nDESCRIPTION: The TypeScript interface defining configuration options for catalog-related functionality in Vendure. It includes options for collection filters, product variant price selection, calculation, and update strategies, as well as stock display and location strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/catalog-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CatalogOptions {\n    collectionFilters?: Array<CollectionFilter<any>>;\n    productVariantPriceSelectionStrategy?: ProductVariantPriceSelectionStrategy;\n    productVariantPriceCalculationStrategy?: ProductVariantPriceCalculationStrategy;\n    productVariantPriceUpdateStrategy?: ProductVariantPriceUpdateStrategy;\n    stockDisplayStrategy?: StockDisplayStrategy;\n    stockLocationStrategy?: StockLocationStrategy;\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Enum Declaration in GraphQL\nDESCRIPTION: Defines the Permission enum used to control access to GraphQL resolvers. Includes special permissions (Authenticated, SuperAdmin, Owner, Public) and CRUD permissions for various entities like Products, Settings, Administrators, Assets, etc.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum Permission {\n  Authenticated\n  SuperAdmin\n  Owner\n  Public\n  UpdateGlobalSettings\n  CreateCatalog\n  ReadCatalog\n  UpdateCatalog\n  DeleteCatalog\n  CreateSettings\n  ReadSettings\n  UpdateSettings\n  DeleteSettings\n  CreateAdministrator\n  ReadAdministrator\n  UpdateAdministrator\n  DeleteAdministrator\n  CreateAsset\n  ReadAsset\n  UpdateAsset\n  DeleteAsset\n  CreateChannel\n  ReadChannel\n  UpdateChannel\n  DeleteChannel\n  CreateCollection\n  ReadCollection\n  UpdateCollection\n  DeleteCollection\n  CreateCountry\n  ReadCountry\n  UpdateCountry\n  DeleteCountry\n  CreateCustomer\n  ReadCustomer\n  UpdateCustomer\n  DeleteCustomer\n  CreateCustomerGroup\n  ReadCustomerGroup\n  UpdateCustomerGroup\n  DeleteCustomerGroup\n  CreateFacet\n  ReadFacet\n  UpdateFacet\n  DeleteFacet\n  CreateOrder\n  ReadOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Payment to Order - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to add payment to the order using the selected payment method and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddPaymentToOrder($input: PaymentInput!) {\n  addPaymentToOrder(input: $input) {\n    ...ActiveOrder\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Service in Vendure\nDESCRIPTION: Example of a basic ProductService implementation with dependency injection and a findOne method. Shows how to use TransactionalConnection and TranslatorService to fetch and translate product data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-service-layer/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { IsNull } from 'typeorm';\nimport { ID, Product, RequestContext, TransactionalConnection, TranslatorService } from '@vendure/core';\n\n@Injectable()\nexport class ProductService {\n\n    constructor(private connection: TransactionalConnection,\n                private translator: TranslatorService){}\n\n    /**\n     * @description\n     * Returns a Product with the given id, or undefined if not found.\n     */\n    async findOne(ctx: RequestContext, productId: ID): Promise<Product | undefined> {\n        const product = await this.connection.findOneInChannel(ctx, Product, productId, ctx.channelId, {\n            where: {\n                deletedAt: IsNull(),\n            },\n        });\n        if (!product) {\n            return;\n        }\n        return this.translator.translate(product, ctx);\n    }\n\n    // ... other methods\n    findMany() {}\n    create() {}\n    update() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Owner Permission Check in GraphQL Resolver\nDESCRIPTION: Example showing how to implement Permission.Owner check in a GraphQL resolver for the activeCustomer query. Demonstrates proper access control implementation for owner-specific resources.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/permission.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Query()\n@Allow(Permission.Owner)\nasync activeCustomer(@Ctx() ctx: RequestContext): Promise<Customer | undefined> {\n  const userId = ctx.activeUserId;\n  if (userId) {\n    return this.customerService.findOneByUserId(ctx, userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering New Seller - GraphQL Mutation\nDESCRIPTION: GraphQL mutation for registering a new seller in the marketplace, creating associated Channel, Role, Administrator, ShippingMethod and StockLocation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation RegisterSeller {\n  registerNewSeller(input: {\n    shopName: \"Bob's Parts\",\n    seller: {\n      firstName: \"Bob\"\n      lastName: \"Dobalina\"\n      emailAddress: \"bob@bobs-parts.com\"\n      password: \"test\",\n    }\n  }) {\n    id\n    code\n    token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove from Wishlist Mutation in GraphQL for Vendure\nDESCRIPTION: This GraphQL mutation removes an item from the user's wishlist in a Vendure e-commerce system. It takes an itemId as input and returns the updated wishlist after removal.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\nmutation RemoveFromWishlist {\n    removeFromWishlist(itemId: \"4\") {\n        id\n        productVariant {\n            id\n            name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Enum for Access Control in GraphQL\nDESCRIPTION: This GraphQL enum defines all possible permission values used in Vendure to control access to resolvers. It includes special permissions like Owner and Public, as well as granular CRUD permissions for various entities such as Catalog, Settings, Administrator, and more.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum Permission {\n  Authenticated\n  SuperAdmin\n  Owner\n  Public\n  UpdateGlobalSettings\n  CreateCatalog\n  ReadCatalog\n  UpdateCatalog\n  DeleteCatalog\n  CreateSettings\n  ReadSettings\n  UpdateSettings\n  DeleteSettings\n  CreateAdministrator\n  ReadAdministrator\n  UpdateAdministrator\n  DeleteAdministrator\n  CreateAsset\n  ReadAsset\n  UpdateAsset\n  DeleteAsset\n  CreateChannel\n  ReadChannel\n  UpdateChannel\n  DeleteChannel\n  CreateCollection\n  ReadCollection\n  UpdateCollection\n  DeleteCollection\n  CreateCountry\n  ReadCountry\n  UpdateCountry\n  DeleteCountry\n  CreateCustomer\n  ReadCustomer\n  UpdateCustomer\n  DeleteCustomer\n  CreateCustomerGroup\n  ReadCustomerGroup\n  UpdateCustomerGroup\n  DeleteCustomerGroup\n  CreateFacet\n  ReadFacet\n  UpdateFacet\n  DeleteFacet\n  CreateOrder\n  ReadOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Customer for Order - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to set or create a customer for the current order. Creates a new Customer record if the email doesn't exist.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetCustomerForOrder($input: CreateCustomerInput!) {\n  setCustomerForOrder(input: $input) {\n    ...ActiveOrder\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"title\": \"Mr.\",\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Dobalina\",\n    \"phoneNumber\": \"1234556\",\n    \"emailAddress\": \"b.dobalina@email.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Customer Entity Class - Vendure TypeScript\nDESCRIPTION: Defines the Customer entity as a TypeScript class using TypeORM and Vendure decorators. It manages customer-specific data and relationships, including personal details, associations with groups, addresses, orders, and linked User accounts. Dependencies include TypeORM entities, decorators, and Vendure types. The class includes fields for names, email, phone, soft-deletion, related entities, and supports custom fields extension via CustomCustomerFields. Inputs can be optionally passed via the constructor as a DeepPartial<Customer>, while outputs are populated entity instances ready for database use. All relationships and fields are explicitly declared, mirroring database schema constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/customer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Customer extends VendureEntity implements ChannelAware, HasCustomFields, SoftDeletable {\n    constructor(input?: DeepPartial<Customer>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    @Column({ nullable: true })\n    title: string;\n    @Column() firstName: string;\n    @Column() lastName: string;\n    @Column({ nullable: true })\n    phoneNumber: string;\n    @Column()\n    emailAddress: string;\n    @ManyToMany(type => CustomerGroup, group => group.customers)\n    @JoinTable()\n    groups: CustomerGroup[];\n    @OneToMany(type => Address, address => address.customer)\n    addresses: Address[];\n    @OneToMany(type => Order, order => order.customer)\n    orders: Order[];\n    @OneToOne(type => User, { eager: true })\n    @JoinColumn()\n    user?: User;\n    @Column(type => CustomCustomerFields)\n    customFields: CustomCustomerFields;\n    @ManyToMany(type => Channel, channel => channel.customers)\n    @JoinTable()\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Detail Data with GraphQL Query\nDESCRIPTION: GraphQL query to fetch comprehensive product information including name, description, assets, variants, pricing, and stock information based on a product slug.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetProductDetail($slug: String!) {\n  product(slug: $slug) {\n    id\n    name\n    description\n    featuredAsset {\n      id\n      preview\n    }\n    assets {\n      id\n      preview\n    }\n    variants {\n      id\n      name\n      sku\n      stockLevel\n      currencyCode\n      price\n      priceWithTax\n      featuredAsset {\n        id\n        preview\n      }\n      assets {\n        id\n        preview\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Order Process with Additional State in TypeScript\nDESCRIPTION: Demonstrates how to define a custom OrderProcess that adds a new state 'ValidatingCustomer' between 'AddingItems' and 'ArrangingPayment'. This is useful for adding custom validation steps to the order flow.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProcess } from '@vendure/core';\n\nexport const customerValidationProcess: OrderProcess<'ValidatingCustomer'> = {\n  transitions: {\n    AddingItems: {\n      to: ['ValidatingCustomer'],\n      mergeStrategy: 'replace',\n    },\n    ValidatingCustomer: {\n      to: ['ArrangingPayment', 'AddingItems'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Count CLI Script in TypeScript\nDESCRIPTION: A stand-alone script that bootstraps the Vendure Worker and queries the total number of products in the database. Uses ProductService and RequestContextService to create a minimal working example.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/stand-alone-scripts/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker, Logger, ProductService, RequestContextService } from '@vendure/core';\n\nimport { config } from './vendure-config';\n\nif (require.main === module) {\n    getProductCount()\n        .then(() => process.exit(0))\n        .catch(err => {\n            Logger.error(err);\n            process.exit(1);\n        });\n}\n\nasync function getProductCount() {\n    const { app } = await bootstrapWorker(config);\n    const productService = app.get(ProductService);\n    const ctx = await app.get(RequestContextService).create({\n        apiType: 'admin',\n    });\n    const { totalItems } = await productService.findAll(ctx, {take: 0});\n\n    Logger.info(\n        [\n            '\\n-----------------------------',\n            `There are ${totalItems} products`,\n            '------------------------------',\n        ].join('\\n'),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Percentage Discount Promotion Action in TypeScript\nDESCRIPTION: An example of creating a custom PromotionOrderAction that applies a percentage discount to the entire order. It defines the action's code, description, configurable arguments, and the execute function that calculates the discount amount.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, PromotionOrderAction } from '@vendure/core';\n\nexport const orderPercentageDiscount = new PromotionOrderAction({\n    // See the custom condition example above for explanations\n    // of code, description & args fields.\n    code: 'order_percentage_discount',\n    description: [{languageCode: LanguageCode.en, value: 'Discount order by { discount }%'}],\n    args: {\n        discount: {\n            type: 'int',\n            ui: {\n                component: 'number-form-input',\n                suffix: '%',\n            },\n        },\n    },\n\n    /**\n     * This is the function that defines the actual amount to be discounted.\n     * It should return a negative number representing the discount in\n     * pennies/cents etc. Rounding to an integer is handled automatically.\n     */\n    execute(ctx, order, args) {\n        const orderTotal = ctx.channel.pricesIncludeTax ? order.subTotalWithTax : order.subTotal;\n        return -orderTotal * (args.discount / 100);\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AuthOptions Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `AuthOptions` used in Vendure configuration. This interface specifies various options for managing authentication and authorization, including token methods (`cookie`, `bearer`), session handling (duration, cache strategy), user verification, credential management, authentication strategies for shop and admin APIs, custom permissions, and password hashing/validation strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/auth-options.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface AuthOptions {\n    disableAuth?: boolean;\n    tokenMethod?: 'cookie' | 'bearer' | ReadonlyArray<'cookie' | 'bearer'>;\n    cookieOptions?: CookieOptions;\n    authTokenHeaderKey?: string;\n    sessionDuration?: string | number;\n    sessionCacheStrategy?: SessionCacheStrategy;\n    sessionCacheTTL?: string | number;\n    requireVerification?: boolean;\n    verificationTokenDuration?: string | number;\n    superadminCredentials?: SuperadminCredentials;\n    shopAuthenticationStrategy?: AuthenticationStrategy[];\n    adminAuthenticationStrategy?: AuthenticationStrategy[];\n    customPermissions?: PermissionDefinition[];\n    passwordHashingStrategy?: PasswordHashingStrategy;\n    passwordValidationStrategy?: PasswordValidationStrategy;\n    verificationTokenStrategy?: VerificationTokenStrategy;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Order - Shop API Mutation\nDESCRIPTION: GraphQL mutation to add a product variant to an order with quantity specification and response handling for both success and error cases.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addItemToOrder(productVariantId: 42, quantity: 1) {\n    ...on Order {\n      id\n      code\n      totalQuantity\n      totalWithTax\n      lines {\n        productVariant {\n          name\n        }\n        quantity\n        linePriceWithTax\n      }\n    }\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST Controller for Products in Vendure\nDESCRIPTION: Creates a NestJS controller that defines a REST endpoint for fetching all products. Uses ProductService injection and RequestContext for data access.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/rest-endpoint/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// products.controller.ts\nimport { Controller, Get } from '@nestjs/common';\nimport { Ctx, ProductService, RequestContext } from '@vendure/core';\n\n@Controller('products')\nexport class ProductsController {\n    constructor(private productService: ProductService) {\n    }\n\n    @Get()\n    findAll(@Ctx() ctx: RequestContext) {\n        return this.productService.findAll(ctx);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ProductVariant GraphQL Type\nDESCRIPTION: Demonstrates how to extend the ProductVariant type with a new delivery field using GraphQL schema extensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const shopApiExtensions = gql`\n  type DeliveryEstimate {\n    from: Int!\n    to: Int!\n  }\n\n  extend type ProductVariant {\n    delivery: DeliveryEstimate!\n  }\n}`;\n```\n\n----------------------------------------\n\nTITLE: Performing Admin Login with GraphQL\nDESCRIPTION: This GraphQL mutation demonstrates how to authenticate an administrator in the Admin API using username and password credentials with the native authentication strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  login(username: \"superadmin\", password: \"superadmin\") {\n    ...on CurrentUser {\n      id\n      identifier\n    }\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Promotion Conditions in Vendure Configuration\nDESCRIPTION: This snippet shows how to register custom promotion conditions in the Vendure configuration file. It imports the default promotion conditions and adds a custom condition to make it available when setting up promotions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultPromotionConditions, VendureConfig } from '@vendure/core';\nimport { minimumOrderAmount } from './minimum-order-amount';\n\nexport const config: VendureConfig = {\n    // ...\n    promotionOptions: {\n        promotionConditions: [\n            ...defaultPromotionConditions,\n            minimumOrderAmount,\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TranslatorService in ProductService Example\nDESCRIPTION: Example showing how to use TranslatorService to translate a product entity and its related facet values in a ProductService class. Demonstrates proper injection and usage of the translator with relation paths.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/translator-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { ID, Product, RequestContext, TransactionalConnection, TranslatorService } from '@vendure/core';\n\n@Injectable()\nexport class ProductService {\n\n    constructor(private connection: TransactionalConnection,\n                private translator: TranslatorService){}\n\n    async findOne(ctx: RequestContext, productId: ID): Promise<Product | undefined> {\n        const product = await this.connection.findOneInChannel(ctx, Product, productId, ctx.channelId, {\n            relations: {\n                 facetValues: {\n                     facet: true,\n                 }\n            }\n        });\n        if (!product) {\n            return;\n        }\n        return this.translator.translate(product, ctx, ['facetValues', ['facetValues', 'facet']]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a React App with Vendure GraphQL Client in TypeScript\nDESCRIPTION: A React application component that uses the GraphQL client to fetch and display products from Vendure. It demonstrates passing variables to a GraphQL query and handling loading/error states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from './client';\nimport './style.css';\n\nconst GET_PRODUCTS = /*GraphQL*/ `\n    query GetProducts($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                id\n                name\n                slug\n                featuredAsset {\n                    preview\n                }\n            }\n        }\n    }\n`;\n\nexport default function App() {\n    const { data, loading, error } = useQuery(GET_PRODUCTS, {\n        options: { take: 3 },\n    });\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error : {error.message}</p>;\n\n    return data.products.items.map(({ id, name, slug, featuredAsset }) => (\n        <div key={id}>\n            <h3>{name}</h3>\n            <img src={`${featuredAsset.preview}?preset=small`} alt={name} />\n        </div>\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Breadcrumb in React Component Using usePageMetadata - TSX\nDESCRIPTION: This React code uses the usePageMetadata hook to update the route's breadcrumb from within the component. Calling setBreadcrumb('New breadcrumb') upon button click updates the breadcrumb trail in the UI. Dependencies include Card, usePageMetadata from @vendure/admin-ui/react, and React. The main parameter is the new breadcrumb label. Input is user interaction, output is an updated breadcrumb in the UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_18\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Card, usePageMetadata } from '@vendure/admin-ui/react';\\nimport React from 'react';\\n\\nexport function Test() {\\n    // highlight-next-line\\n    const { setBreadcrumb } = usePageMetadata();\\n\\n    function handleClick() {\\n        // highlight-next-line\\n        setBreadcrumb('New breadcrumb');\\n    }\\n    return (\\n        <div className=\\\"page-block\\\">\\n            <Card>\\n                <button className=\\\"button primary\\\" onClick={handleClick}>\\n                    Update title\\n                </button>\\n            </Card>\\n        </div>\\n    );\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Listing with TanStack Query and Vendure GraphQL API\nDESCRIPTION: React component that fetches and displays products from Vendure using TanStack Query. It demonstrates how to query products with pagination options and render the results. The component handles loading states and displays product names and images.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from 'react';\nimport { gql } from 'graphql-request';\nimport { useQuery } from '@tanstack/react-query';\nimport { request } from './client';\n\nconst GET_PRODUCTS = gql`\n    query GetProducts($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                id\n                name\n                slug\n                featuredAsset {\n                    preview\n                }\n            }\n        }\n    }\n`;\n\nexport default function App() {\n    const { isLoading, data } = useQuery({\n        queryKey: ['products'],\n        queryFn: async () =>\n            request(GET_PRODUCTS, {\n                options: { take: 3 },\n            }),\n    });\n\n    if (isLoading) return <p>Loading...</p>;\n\n    return data ? (\n        data.products.items.map(({ id, name, slug, featuredAsset }) => (\n            <div key={id}>\n                <h3>{name}</h3>\n                <img src={`${featuredAsset.preview}?preset=small`} alt={name} />\n            </div>\n        ))\n    ) : (\n        <>Loading...</>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Order Process Implementation\nDESCRIPTION: Implements a custom order process with a new 'ValidatingPayment' state and defines permitted state transitions\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProcess } from '@vendure/core';\n/**\n * Define a new \"ValidatingPayment\" Order state, and set up the\n * permitted transitions to/from it.\n */\nconst customOrderProcess: OrderProcess<'ValidatingPayment'> = {\n    transitions: {\n        ArrangingPayment: {\n            to: ['ValidatingPayment'],\n            mergeStrategy: 'replace',\n        },\n        ValidatingPayment: {\n            to: ['PaymentAuthorized', 'PaymentSettled', 'ArrangingAdditionalPayment'],\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Fields in VendureConfig\nDESCRIPTION: Example of defining custom fields for Product and User entities in the Vendure configuration file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            { name: 'infoUrl', type: 'string' },\n            { name: 'downloadable', type: 'boolean' },\n            { name: 'shortName', type: 'localeString' },\n        ],\n        User: [\n            { name: 'socialLoginToken', type: 'string', unique: true },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PostgresSearchStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the PostgresSearchStrategy class, which implements the SearchStrategy interface. It includes methods for initializing the strategy, getting facet value IDs, collection IDs, search results, and total count based on search input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/postgres-search-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PostgresSearchStrategy implements SearchStrategy {\n    init(injector: Injector) => ;\n    getFacetValueIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<Map<ID, number>>;\n    getCollectionIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<Map<ID, number>>;\n    getSearchResults(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<SearchResult[]>;\n    getTotalCount(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Eligible Payment Methods in GraphQL\nDESCRIPTION: This GraphQL query retrieves the list of eligible payment methods for the current order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetEligiblePaymentMethods {\n    eligiblePaymentMethods {\n        code\n        name\n        isEligible\n        eligibilityMessage\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Banner Query Resolver\nDESCRIPTION: Demonstrates implementation of a GraphQL query resolver for the banner feature, showing how to handle context and arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Query, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext } from '@vendure/core';\nimport { BannerService } from '../services/banner.service.ts';\n\n@Resolver()\nclass BannerShopResolver {\n    constructor(private bannerService: BannerService) {}\n\n    @Query()\n    activeBanner(@Ctx() ctx: RequestContext, @Args() args: { locationId: string; }) {\n        return this.bannerService.getBanner(ctx, args.locationId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Options in Vendure\nDESCRIPTION: Example of configuring API-related settings in Vendure including hostname, port, API paths, and middleware for the Shop API route.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  apiOptions: {\n    hostname: 'localhost',\n    port: 3000,\n    adminApiPath: '/admin',\n    shopApiPath: '/shop',\n    middleware: [{\n      // add some Express middleware to the Shop API route\n      handler: timeout('5s'),\n      route: 'shop',\n    }]\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateGlobalSettingsInput in GraphQL\nDESCRIPTION: Input type for updating global settings in Vendure. Allows configuring available languages, inventory tracking settings, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_185\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateGlobalSettingsInput {\n  availableLanguages: [LanguageCode!]\n  trackInventory: Boolean\n  outOfStockThreshold: Int\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Extensions in Vendure Config\nDESCRIPTION: Shows how to register UI extension providers in the Vendure configuration file using the AdminUiPlugin and compileUiExtensions utilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/nav-menu/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            port: 3002,\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [\n                    {\n                        id: 'greeter',\n                        extensionPath: path.join(__dirname, 'plugins/greeter/ui'),\n                        routes: [{ route: 'greet', filePath: 'routes.ts' }],\n                        providers: ['providers.ts']\n                    },\n                ],\n            }),\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Struct Custom Fields with GraphQL\nDESCRIPTION: Example GraphQL query showing how to access a struct custom field's nested properties when querying a Product.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    product(id: 1) {\n        customFields {\n            dimensions {\n                length\n                width\n                height\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products with Facet Values in GraphQL\nDESCRIPTION: GraphQL query that searches for products with a given term while returning facet values that can be used for filtering. The query also requests product details including name, slug, asset, price, and currency code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery SearchProducts($term: String!, $skip: Int, $take: Int) {\n  search(\n    input: {\n      term: $term,\n      groupByProduct: true,\n      skip: $skip,\n      take: $take }\n  ) {\n    totalItems\n    // highlight-start\n    facetValues {\n      count\n      facetValue {\n        id\n        name\n        facet {\n          id\n          name\n        }\n      }\n    }\n    // highlight-end\n    items {\n      productName\n      slug\n      productAsset {\n        id\n        preview\n      }\n      priceWithTax {\n        ... on SinglePrice {\n          value\n        }\n        ... on PriceRange {\n          min\n          max\n        }\n      }\n      currencyCode\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Control for REST Endpoints\nDESCRIPTION: Shows how to secure REST endpoints using the @Allow decorator to enforce permission requirements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/rest-endpoint/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@nestjs/common';\nimport { Allow, Permission, Ctx, ProductService, RequestContext } from '@vendure/core';\n\n@Controller('products')\nexport class ProductsController {\n    constructor(private productService: ProductService) {}\n\n    // highlight-next-line\n    @Allow(Permission.ReadProduct)\n    @Get()\n    findAll(@Ctx() ctx: RequestContext) {\n        return this.productService.findAll(ctx);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataTable2Component in Angular Templates\nDESCRIPTION: An example of how to implement the DataTable2Component in an Angular template to display a list of product reviews with various column configurations, search functionality, and bulk actions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/data-table2component.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<vdr-data-table-2\n    id=\"product-review-list\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-bulk-action-menu\n        locationId=\"product-review-list\"\n        [hostComponent]=\"this\"\n        [selectionManager]=\"selectionManager\"\n    />\n    <vdr-dt2-search\n        [searchTermControl]=\"searchTermControl\"\n        searchTermPlaceholder=\"Filter by title\"\n    />\n    <vdr-dt2-column [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\n        <ng-template let-review=\"item\">\n            {{ review.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.created-at' | translate\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-review=\"item\">\n            {{ review.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n        [heading]=\"'common.updated-at' | translate\"\n        [hiddenByDefault]=\"true\"\n        [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-review=\"item\">\n            {{ review.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column [heading]=\"'common.name' | translate\" [optional]=\"false\" [sort]=\"sorts.get('name')\">\n        <ng-template let-review=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', review.id]\"\n                ><span>{{ review.name }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n```\n\n----------------------------------------\n\nTITLE: Implementing Digital FulfillmentHandler in Vendure\nDESCRIPTION: Creates a custom fulfillment handler that generates download URLs for digital products when an order is fulfilled.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const digitalFulfillmentHandler = new FulfillmentHandler({\n    code: 'digital-fulfillment',\n    description: [\n        {\n            languageCode: LanguageCode.en,\n            value: 'Generates product keys for the digital download',\n        },\n    ],\n    args: {},\n    init: injector => {\n        connection = injector.get(TransactionalConnection);\n    },\n    createFulfillment: async (ctx, orders, lines) => {\n        const digitalDownloadUrls: string[] = [];\n        const orderLines = await connection.getRepository(ctx, OrderLine).find({\n            where: {\n                id: In(lines.map(l => l.orderLineId)),\n            },\n            relations: {\n                productVariant: true,\n            },\n        });\n        for (const orderLine of orderLines) {\n            if (orderLine.productVariant.customFields.isDigital) {\n                const downloadUrl = await generateDownloadUrl(orderLine);\n                digitalDownloadUrls.push(downloadUrl);\n            }\n        }\n        return {\n            method: 'Digital Fulfillment',\n            trackingCode: 'DIGITAL',\n            customFields: {\n                downloadUrls: digitalDownloadUrls,\n            },\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Union Types\nDESCRIPTION: Demonstrates how to implement type resolution for GraphQL union types in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype MyCustomErrorResult implements ErrorResult {\n  errorCode: ErrorCode!\n  message: String!\n}\n\nunion MyCustomMutationResult = Order | MyCustomErrorResult\n\nextend type Mutation {\n  myCustomMutation(orderId: ID!): MyCustomMutationResult!\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext, ProductVariant } from '@vendure/core';\n\n@Resolver('MyCustomMutationResult')\nexport class MyCustomMutationResultResolver {\n  \n  @ResolveField()\n  __resolveType(value: any): string {\n    return value.hasOwnProperty('id') ? 'Order' : 'MyCustomErrorResult';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Items to an Order - Vendure TypeScript\nDESCRIPTION: Adds several items to an Order in a batch operation for efficiency. Requires context, orderId, an array of items (each with productVariantId, quantity, and optional customFields), and optional relations. Returns a Promise resolving to the updated Order and an array of error results for partial failures. Reduce redundant order fetches and price recalculations by using this over repeated addItemToOrder calls.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, items: Array<{ productVariantId: ID; quantity: number; customFields?: { [key: string]: any }; }>, relations?: RelationPaths<Order>) => Promise<{ order: Order; errorResults: Array<JustErrorResults<UpdateOrderItemsResult>> }>\n```\n\n----------------------------------------\n\nTITLE: Defining JobConfig Interface in TypeScript\nDESCRIPTION: Comprehensive interface for job configuration including queue name, data, retry settings, and status tracking properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JobConfig<T extends JobData<T>> {\n    queueName: string;\n    data: T;\n    retries?: number;\n    attempts?: number;\n    id?: ID;\n    state?: JobState;\n    progress?: number;\n    result?: any;\n    error?: any;\n    createdAt?: Date;\n    startedAt?: Date;\n    settledAt?: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Avatar Plugin in TypeScript\nDESCRIPTION: Example of a minimal Vendure plugin that adds a custom field to the Customer entity. Shows basic plugin structure with the VendurePlugin decorator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, PluginCommonModule, VendurePlugin } from '@vendure/core';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    configuration: config => {\n        config.customFields.Customer.push({\n            type: 'string',\n            name: 'avatarUrl',\n            label: [{ languageCode: LanguageCode.en, value: 'Avatar URL' }],\n            list: true,\n        });\n        return config;\n    },\n})\nexport class AvatarPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Product Review Entity Definition\nDESCRIPTION: Shows the TypeORM entity definition for a product review system with relationships to the Product entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial } from '@vendure/common/lib/shared-types';\nimport { VendureEntity, Product, EntityId, ID } from '@vendure/core';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nclass ProductReview extends VendureEntity {\n    constructor(input?: DeepPartial<ProductReview>) {\n        super(input);\n    }\n\n    @ManyToOne(type => Product)\n    product: Product;\n    \n    @EntityId()\n    productId: ID;\n\n    @Column()\n    text: string;\n\n    @Column()\n    rating: number;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Extension for Video Processing\nDESCRIPTION: Extends the Admin API schema with a mutation for adding video to products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const adminApiExtensions = gql`\n  extend type Mutation {\n    addVideoToProduct(productId: ID! videoUrl: String!): Job!\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendure with Plugin-based Subscribers\nDESCRIPTION: Updates the Vendure configuration to use a plugin-based subscriber approach instead of directly registering subscribers in dbConnectionOptions. This enables dependency injection for the subscribers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/db-subscribers/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nexport const config: VendureConfig = {\n    dbConnectionOptions: {\n        // We no longer need to pass the subscriber here\n        // subscribers: [ProductSubscriber],\n    },\n    plugins: [\n        MyPlugin,\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Review Entity with TypeORM in Vendure\nDESCRIPTION: Creates a ProductReview entity class using TypeORM decorators and Vendure-specific decorators. The entity includes relationships with Product entity and basic review fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/database-entity/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial } from '@vendure/common/lib/shared-types';\nimport { VendureEntity, Product, EntityId, ID } from '@vendure/core';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nclass ProductReview extends VendureEntity {\n    constructor(input?: DeepPartial<ProductReview>) {\n        super(input);\n    }\n\n    @ManyToOne(type => Product)\n    product: Product;\n    \n    @EntityId()\n    productId: ID;\n\n    @Column()\n    text: string;\n\n    @Column()\n    rating: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Top Products Plugin with GraphQL Extension\nDESCRIPTION: Demonstrates how to create a Vendure plugin that extends the Shop API with a new top products query. Shows basic plugin setup with schema extensions and resolver configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport gql from 'graphql-tag';\nimport { TopSellersResolver } from './api/top-products.resolver';\n\nconst schemaExtension = gql`\n  extend type Query {\n    topProducts: [Product!]!\n  }\n`\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    shopApiExtensions: {\n        schema: schemaExtension,\n        resolvers: [TopProductsResolver],\n    },\n})\nexport class TopProductsPlugin {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Customer and optionally a linked User if a password is provided. It takes a CreateCustomerInput object and an optional password string, returning a CreateCustomerResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createCustomer(input: CreateCustomerInput!, password: String): CreateCustomerResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Permissions in Resolver\nDESCRIPTION: Shows how to implement CRUD operations with corresponding permissions in a GraphQL resolver for the ProductReview entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-permissions/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { Allow, Transaction } from '@vendure/core';\nimport { productReviewPermission } from '../constants';\n\n@Resolver()\nexport class ProductReviewResolver {\n\n    @Allow(productReviewPermission.Read)\n    @Query()\n    productReviews(/* ... */) {\n        // ...\n    }\n    \n    @Allow(productReviewPermission.Create)\n    @Mutation()\n    @Transaction()\n    createProductReview(/* ... */) {\n        // ...\n    }\n    \n    @Allow(productReviewPermission.Update)\n    @Mutation()\n    @Transaction()\n    updateProductReview(/* ... */) {\n        // ...\n    }\n    \n    @Allow(productReviewPermission.Delete)\n    @Mutation()\n    @Transaction()\n    deleteProductReview(/* ... */) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Filtering Query Example\nDESCRIPTION: GraphQL query example demonstrating complex nested filtering with logical operators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/paginated-list/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  productReviews(\n    options: {\n    skip: 0\n    take: 10\n    filter: {\n      _and: [\n        { text: { startsWith: \"phone\" } },\n        {\n          _or: [\n            { rating: { gte: 4 } },\n            { rating: { eq: 0 } }\n          ]\n        }\n      ]\n    }\n    }) {\n    totalItems\n    items {\n      id\n      createdAt\n      product {\n        name\n      }\n      text\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Values in JavaScript\nDESCRIPTION: A utility function that formats monetary values from the minor currency unit (integer) to a human-readable format using the Intl.NumberFormat API, which handles different currency formats and locales.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function formatCurrency(value: number, currencyCode: string, locale?: string) {\n    const majorUnits = value / 100;\n    try {\n        // Note: if no `locale` is provided, the browser's default\n        // locale will be used.\n        return new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currencyCode,\n        }).format(majorUnits);\n    } catch (e: any) {\n        // A fallback in case the NumberFormat fails for any reason\n        return majorUnits.toFixed(2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ApiOptions Interface Definition in TypeScript for Vendure\nDESCRIPTION: Interface that defines the configuration options for Vendure's GraphQL APIs, including server settings, API paths, playground options, security configurations, and extension points.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/api-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ApiOptions {\n    hostname?: string;\n    port: number;\n    adminApiPath?: string;\n    shopApiPath?: string;\n    adminApiPlayground?: boolean | RenderPageOptions;\n    shopApiPlayground?: boolean | RenderPageOptions;\n    adminApiDebug?: boolean;\n    shopApiDebug?: boolean;\n    shopListQueryLimit?: number;\n    adminListQueryLimit?: number;\n    adminApiValidationRules?: Array<(context: ValidationContext) => any>;\n    shopApiValidationRules?: Array<(context: ValidationContext) => any>;\n    channelTokenKey?: string;\n    cors?: boolean | CorsOptions;\n    middleware?: Middleware[];\n    apolloServerPlugins?: ApolloServerPlugin[];\n    introspection?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Free Gift Promotion Plugin with Side Effect API\nDESCRIPTION: A complete plugin implementation for adding free gifts to orders using Vendure's side effect API. It includes a PromotionItemAction that zeroes the price of gift items and adds/removes them automatically when the promotion becomes active/inactive.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tID, idsAreEqual, isGraphQlErrorResult, LanguageCode, Logger,\n\tOrderLine, OrderService, PromotionItemAction, VendurePlugin,\n} from \"@vendure/core\";\nimport { createHash } from \"crypto\";\n\nlet orderService: OrderService;\nexport const freeGiftAction = new PromotionItemAction({\n\tcode: \"free_gift\",\n\tdescription: [{ languageCode: LanguageCode.en, value: \"Add free gifts to the order\" }],\n\targs: {\n\t\tproductVariantIds: {\n\t\t\ttype: \"ID\",\n\t\t\tlist: true,\n\t\t\tui: { component: \"product-selector-form-input\" },\n\t\t\tlabel: [{ languageCode: LanguageCode.en, value: \"Gift product variants\" }],\n\t\t},\n\t},\n\tinit(injector) {\n\t\torderService = injector.get(OrderService);\n\t},\n\texecute(ctx, orderLine, args) {\n\t\t// This part is responsible for ensuring the variants marked as\n\t\t// \"free gifts\" have their price reduced to zero\n\t\tif (lineContainsIds(args.productVariantIds, orderLine)) {\n\t\t\tconst unitPrice = orderLine.productVariant.listPriceIncludesTax\n\t\t\t\t? orderLine.unitPriceWithTax\n\t\t\t\t: orderLine.unitPrice;\n\t\t\treturn -unitPrice;\n\t\t}\n\t\treturn 0;\n\t},\n\t// The onActivate function is part of the side effect API, and\n\t// allows us to perform some action whenever a Promotion becomes active\n\t// due to it's conditions & constraints being satisfied.\n\tasync onActivate(ctx, order, args, promotion) {\n\t\tfor (const id of args.productVariantIds) {\n\t\t\tif (\n\t\t\t\t!order.lines.find(\n\t\t\t\t\t(line) =>\n\t\t\t\t\t\tidsAreEqual(line.productVariant.id, id) &&\n\t\t\t\t\t\tline.customFields.freeGiftPromotionId == null\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// The order does not yet contain this free gift, so add it\n\t\t\t\tconst result = await orderService.addItemToOrder(ctx, order.id, id, 1, {\n\t\t\t\t\tfreeGiftPromotionId: promotion.id.toString(),\n\t\t\t\t});\n\t\t\t\tif (isGraphQlErrorResult(result)) {\n\t\t\t\t\tLogger.error(`Free gift action error for variantId \"${id}\": ${result.message}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// The onDeactivate function is the other part of the side effect API and is called\n\t// when an active Promotion becomes no longer active. It should reverse any\n\t// side effect performed by the onActivate function.\n\tasync onDeactivate(ctx, order, args, promotion) {\n\t\tconst linesWithFreeGift = order.lines.filter(\n\t\t\t(line) => line.customFields.freeGiftPromotionId === promotion.id.toString()\n\t\t);\n\t\tfor (const line of linesWithFreeGift) {\n\t\t\tawait orderService.removeItemFromOrder(ctx, order.id, line.id);\n\t\t}\n\t},\n});\n\nfunction lineContainsIds(ids: ID[], line: OrderLine): boolean {\n\treturn !!ids.find((id) => idsAreEqual(id, line.productVariant.id));\n}\n\n@VendurePlugin({\n\tconfiguration: (config) => {\n\t\tconfig.customFields.OrderLine.push({\n\t\t\tname: \"freeGiftPromotionId\",\n\t\t\ttype: \"string\",\n\t\t\tpublic: true,\n\t\t\treadonly: true,\n\t\t\tnullable: true,\n\t\t});\n\t\tconfig.customFields.OrderLine.push({\n\t\t\tname: \"freeGiftDescription\",\n\t\t\ttype: \"string\",\n\t\t\tpublic: true,\n\t\t\treadonly: true,\n\t\t\tnullable: true,\n\t\t});\n\t\tconfig.promotionOptions.promotionActions.push(freeGiftAction);\n\t\treturn config;\n\t},\n})\nexport class FreeGiftPromotionPlugin {}\n```\n\n----------------------------------------\n\nTITLE: PaymentStateTransitionEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle payment state transitions. Triggered when a Payment transitions between PaymentStates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nclass PaymentStateTransitionEvent extends VendureEvent {\n    constructor(fromState: PaymentState, toState: PaymentState, ctx: RequestContext, payment: Payment, order: Order)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WishlistItem Entity in TypeScript\nDESCRIPTION: Defines a TypeORM entity for storing wishlist items with a relationship to ProductVariant entity and necessary decorators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial, ID, ProductVariant, VendureEntity, EntityId } from '@vendure/core';\nimport { Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nexport class WishlistItem extends VendureEntity {\n    constructor(input?: DeepPartial<WishlistItem>) {\n        super(input);\n    }\n\n    @ManyToOne(type => ProductVariant)\n    productVariant: ProductVariant;\n\n    @EntityId()\n    productVariantId: ID;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Products from External Platform to Vendure using TypeScript\nDESCRIPTION: Implementation of a data migration script that imports products from an external e-commerce platform ('OldCommerce') into Vendure. Uses bootstrapWorker to access Vendure services, transforms product data to match Vendure's schema, and handles product import with progress tracking. Includes utility function for creating superadmin context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/importing-data/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { INestApplicationContext } from '@nestjs/common';\nimport {\n    bootstrapWorker,\n    ConfigService,\n    Importer,\n    LanguageCode,\n    ParsedProductWithVariants,\n    RequestContext, RequestContextService,\n    TransactionalConnection, User,\n    SearchService,\n} from '@vendure/core';\nimport { createClient, OldCommerceProduct } from '@old-commerce/client';\n\nimport { config } from './vendure-config';\n\nif (require.main === module) {\n    importData().then(\n        () => process.exit(0),\n        err => {\n            console.log(err);\n            process.exit(1);\n        },\n    );\n}\n\nasync function importData() {\n    // We use the bootstrapWorker() function instead of bootstrap() because we don't \n    // need to start the server, we just need access to the services.\n    const {app} = await bootstrapWorker(config);\n\n    // Create an instace of the client we'll be using to interact with the\n    // OldCommerce API\n    const client = createClient({\n        // OldCommerce client config\n    });\n\n    // Let's grab a reference to each of the Vendure services we'll need.\n    const importer = app.get(Importer);\n\n    // Most service methods require a RequestContext, so we'll create one here.\n    const ctx = await getSuperadminContext(app);\n\n    // To reindex after importing products\n    const searchService = app.get(SearchService);\n\n    // Fetch all the products to import from the OldCommerce API\n    const productsToImport: OldCommerceProduct[] = await client.getAllProducts();\n\n    // Transform the OldCommerce products into the format expected by the Importer\n    const importRows: ParsedProductWithVariants[] = productsToImport.map(product => ({\n        product: {\n            translations: [\n                {\n                    languageCode: LanguageCode.en,\n                    name: product.name,\n                    slug: product.slug,\n                    description: product.description,\n                    customFields: {},\n                },\n            ],\n            assetPaths: product.images.map(image => image.sourceUrl),\n            facets: [],\n            optionGroups: product.options.map(option => ({\n                translations: [\n                    {\n                        languageCode: LanguageCode.en,\n                        name: option.name,\n                        values: option.values.map(value => value.name),\n                    },\n                ],\n            })),\n        },\n        variants: product.variations.map(variation => {\n            const optionValues = variation.options.map(option => option.value);\n            return {\n                sku: variation.productCode,\n                price: variation.price,\n                stockOnHand: variation.stock,\n                translations: [{languageCode: LanguageCode.en, optionValues}],\n            };\n        }),\n    }));\n\n    // Import the products\n    await importer.importProducts(ctx, importRows, progress => {\n        console.log(`Imported ${progress.imported} of ${importRows.length} products`);\n    });\n\n    // Rebuild search index \n    await searchService.reindex(ctx);\n\n    // Close the app\n    await app.close();\n}\n\n/**\n * Creates a RequestContext configured for the default Channel with the activeUser set\n * as the superadmin user.\n */\nexport async function getSuperadminContext(app: INestApplicationContext): Promise<RequestContext> {\n    const {superadminCredentials} = app.get(ConfigService).authOptions;\n    const superAdminUser = await app.get(TransactionalConnection)\n        .getRepository(User)\n        .findOneOrFail({where: {identifier: superadminCredentials.identifier}});\n    return app.get(RequestContextService).create({\n        apiType: 'admin',\n        user: superAdminUser,\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Client with Authentication for Vendure\nDESCRIPTION: Sets up a GraphQL client with authentication middleware for Vendure. The client handles bearer token authentication, storing tokens in localStorage, and includes middlewares for request/response processing. Provides utility functions for setting language code and channel token.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n    GraphQLClient,\n    RequestDocument,\n    RequestMiddleware,\n    ResponseMiddleware,\n    Variables,\n} from 'graphql-request';\n\n// If using bearer-token based session management, we'll store the token\n// in localStorage using this key.\nconst AUTH_TOKEN_KEY = 'auth_token';\n\nconst API_URL = 'http://localhost:3000/shop-api';\n\n// If we have a session token, add it to the outgoing request\nconst requestMiddleware: RequestMiddleware = async (request) => {\n    const authToken = localStorage.getItem(AUTH_TOKEN_KEY);\n    return {\n        ...request,\n        headers: {\n            ...request.headers,\n            ...(authToken ? { authorization: `Bearer ${authToken}` } : {}),\n        },\n    };\n};\n\n// Check all responses for a new session token\nconst responseMiddleware: ResponseMiddleware = (response) => {\n    if (!(response instanceof Error) && !response.errors) {\n        const authHeader = response.headers.get('vendure-auth-token');\n        if (authHeader) {\n            // If the session token has been returned by the Vendure\n            // server, we store it in localStorage\n            localStorage.setItem(AUTH_TOKEN_KEY, authHeader);\n        }\n    }\n};\n\nconst client = new GraphQLClient(API_URL, {\n    // Required for cookie-based sessions\n    credentials: 'include',\n    requestMiddleware,\n    responseMiddleware,\n});\n\n/**\n * Sets the languageCode to be used for all subsequent requests.\n */\nexport function setLanguageCode(languageCode: string | undefined) {\n    if (!languageCode) {\n        client.setEndpoint(API_URL);\n    } else {\n        client.setEndpoint(`${API_URL}?languageCode=${languageCode}`);\n    }\n}\n\n/**\n * Sets the channel token to be used for all subsequent requests.\n */\nexport function setChannelToken(channelToken: string | undefined) {\n    if (!channelToken) {\n        client.setHeader('vendure-token', undefined);\n    } else {\n        client.setHeader('vendure-token', channelToken);\n    }\n}\n\n/**\n * Makes a GraphQL request using the `graphql-request` client.\n */\nexport function request<T, V extends Variables = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    variables: Record<string, any> = {}\n) {\n    return client.request(document, variables);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxLineCalculationStrategy Interface in TypeScript\nDESCRIPTION: This snippet defines the TaxLineCalculationStrategy interface, which extends InjectableStrategy and includes a calculate method for determining tax lines on order items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/tax-line-calculation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TaxLineCalculationStrategy extends InjectableStrategy {\n    calculate(args: CalculateTaxLinesArgs): TaxLine[] | Promise<TaxLine[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Registering a CustomDetailComponent in Vendure Admin UI\nDESCRIPTION: This example demonstrates creating a ProductInfoComponent that implements the CustomDetailComponent interface and registers it to be displayed in the product detail page. The component fetches extra product information and displays it.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/register-custom-detail-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { switchMap } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { CustomFieldConfig } from '@vendure/common/lib/generated-types';\nimport {\n    DataService,\n    SharedModule,\n    CustomDetailComponent,\n    registerCustomDetailComponent,\n    GetProductWithVariants\n} from '@vendure/admin-ui/core';\n\n@Component({\n    template: `{{ extraInfo$ | async | json }}`,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class ProductInfoComponent implements CustomDetailComponent, OnInit {\n    // These two properties are provided by Vendure and will vary\n    // depending on the particular detail page you are embedding this\n    // component into.\n    entity$: Observable<GetProductWithVariants.Product>\n    detailForm: FormGroup;\n\n    extraInfo$: Observable<any>;\n\n    constructor(private cmsDataService: CmsDataService) {}\n\n    ngOnInit() {\n        this.extraInfo$ = this.entity$.pipe(\n            switchMap(entity => this.cmsDataService.getDataFor(entity.id))\n        );\n    }\n}\n\nexport default [\n    registerCustomDetailComponent({\n        locationId: 'product-detail',\n        component: ProductInfoComponent,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Translatable Entity in TypeScript\nDESCRIPTION: Implementation of a ProductRequest entity that implements the Translatable interface. Shows how to set up translatable fields and the translations relation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translateable/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial } from '@vendure/common/lib/shared-types';\nimport { VendureEntity, Product, EntityId, ID, Translatable } from '@vendure/core';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\nimport { ProductRequestTranslation } from './product-request-translation.entity';\n\n@Entity()\nclass ProductRequest extends VendureEntity implements Translatable {\n    constructor(input?: DeepPartial<ProductRequest>) {\n        super(input);\n    }\n    text: LocaleString;\n    \n    @ManyToOne(type => Product)\n    product: Product;\n\n    @EntityId()\n    productId: ID;\n\n    @OneToMany(() => ProductRequestTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<ProductRequest>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Item to Order Mutation\nDESCRIPTION: GraphQL mutation for adding items to an active order with error handling for insufficient stock scenarios.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddItemToOrder($productVariantId: ID!, $quantity: Int!) {\n  addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n    ...ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n    ... on InsufficientStockError {\n      quantityAvailable\n      order {\n        ...ActiveOrder\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Product. It takes a CreateProductInput object as input and returns a Product object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createProduct(input: CreateProductInput!): Product!\n}\n```\n\n----------------------------------------\n\nTITLE: Order State Transition Mutation\nDESCRIPTION: GraphQL mutation for transitioning an order to a different state.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nmutation TransitionOrder($state: String!){\n  transitionOrderToState(state: $state) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CustomerService Class Definition\nDESCRIPTION: Core service class for managing customer operations in Vendure. Provides methods for CRUD operations on customers, address management, email verification, and password reset functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, userService: UserService, countryService: CountryService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, historyService: HistoryService, channelService: ChannelService, customFieldRelationService: CustomFieldRelationService, translator: TranslatorService)\n    findAll(ctx: RequestContext, options: ListQueryOptions<Customer> | undefined, relations: RelationPaths<Customer> = []) => Promise<PaginatedList<Customer>>;\n    findOne(ctx: RequestContext, id: ID, relations: RelationPaths<Customer> = []) => Promise<Customer | undefined>;\n    findOneByUserId(ctx: RequestContext, userId: ID, filterOnChannel:  = true) => Promise<Customer | undefined>;\n    findAddressesByCustomerId(ctx: RequestContext, customerId: ID) => Promise<Address[]>;\n    getCustomerGroups(ctx: RequestContext, customerId: ID) => Promise<CustomerGroup[]>;\n    create(ctx: RequestContext, input: CreateCustomerInput, password?: string) => Promise<ErrorResultUnion<CreateCustomerResult, Customer>>;\n    update(ctx: RequestContext, input: UpdateCustomerShopInput & { id: ID }) => Promise<Customer>;\n    update(ctx: RequestContext, input: UpdateCustomerInput) => Promise<ErrorResultUnion<UpdateCustomerResult, Customer>>;\n    update(ctx: RequestContext, input: UpdateCustomerInput | (UpdateCustomerShopInput & { id: ID })) => Promise<ErrorResultUnion<UpdateCustomerResult, Customer>>;\n    registerCustomerAccount(ctx: RequestContext, input: RegisterCustomerInput) => Promise<RegisterCustomerAccountResult | EmailAddressConflictError | PasswordValidationError>;\n    refreshVerificationToken(ctx: RequestContext, emailAddress: string) => Promise<void>;\n    verifyCustomerEmailAddress(ctx: RequestContext, verificationToken: string, password?: string) => Promise<ErrorResultUnion<VerifyCustomerAccountResult, Customer>>;\n    requestPasswordReset(ctx: RequestContext, emailAddress: string) => Promise<void>;\n    resetPassword(ctx: RequestContext, passwordResetToken: string, password: string) => Promise<\n        User | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError\n    >;\n    requestUpdateEmailAddress(ctx: RequestContext, userId: ID, newEmailAddress: string) => Promise<boolean | EmailAddressConflictError>;\n    updateEmailAddress(ctx: RequestContext, token: string) => Promise<boolean | IdentifierChangeTokenInvalidError | IdentifierChangeTokenExpiredError>;\n    createOrUpdate(ctx: RequestContext, input: Partial<CreateCustomerInput> & { emailAddress: string }, errorOnExistingUser: boolean = false) => Promise<Customer | EmailAddressConflictError>;\n    createAddress(ctx: RequestContext, customerId: ID, input: CreateAddressInput) => Promise<Address>;\n    updateAddress(ctx: RequestContext, input: UpdateAddressInput) => Promise<Address>;\n    deleteAddress(ctx: RequestContext, id: ID) => Promise<boolean>;\n    softDelete(ctx: RequestContext, customerId: ID) => Promise<DeletionResponse>;\n    createAddressesForNewCustomer(ctx: RequestContext, order: Order) => ;\n    addNoteToCustomer(ctx: RequestContext, input: AddNoteToCustomerInput) => Promise<Customer>;\n    updateCustomerNote(ctx: RequestContext, input: UpdateCustomerNoteInput) => Promise<HistoryEntry>;\n    deleteCustomerNote(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Order Processes in VendureConfig\nDESCRIPTION: Shows how to add both the default order process and a custom order process to the Vendure configuration. This allows extending the order workflow while maintaining the standard processes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultOrderProcess, VendureConfig } from '@vendure/core';\nimport { customerValidationProcess } from './plugins/tax-id/customer-validation-process';\n\nexport const config: VendureConfig = {\n  // ...\n  orderOptions: {\n    process: [defaultOrderProcess, customerValidationProcess],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using Apollo Client in a React Component with Vendure\nDESCRIPTION: A React component that uses Apollo Client's useQuery hook to fetch products from the Vendure API. It demonstrates Apollo's approach to handling GraphQL operations, including loading and error states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useQuery, gql } from '@apollo/client';\n\nconst GET_PRODUCTS = gql`\n    query GetProducts($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                id\n                name\n                slug\n                featuredAsset {\n                    preview\n                }\n            }\n        }\n    }\n`;\n\nexport default function App() {\n    const { loading, error, data } = useQuery(GET_PRODUCTS, {\n        variables: { options: { take: 3 } },\n    });\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>Error : {error.message}</p>;\n\n    return data.products.items.map(({ id, name, slug, featuredAsset }) => (\n        <div key={id}>\n            <h3>{name}</h3>\n            <img src={`${featuredAsset.preview}?preset=small`} alt={name} />\n        </div>\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Updating Breadcrumb in Angular Component - TypeScript\nDESCRIPTION: This Angular snippet demonstrates dynamic breadcrumb updates from a component using PageMetadataService.setBreadcrumb(). On button click, handleClick sets the breadcrumb to a new string. The code assumes integration with the Vendure admin UI, use of SharedModule and PageMetadataService. Input comes from the user click; output affects the route's breadcrumb in the UI header/navigation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PageMetadataService, SharedModule } from '@vendure/admin-ui/core';\\nimport { Component } from '@angular/core';\\n\\n@Component({\\n    selector: 'test',\\n    template: `\\n        <vdr-page-block>\\n            <vdr-card>\\n                // highlight-next-line\\n                <button class=\\\"button primary\\\" (click)=\\\"handleClick()\\\">Update breadcrumb</button>\\n            </vdr-card>\\n        </vdr-page-block>`,\\n    standalone: true,\\n    imports: [SharedModule],\\n})\\nexport class TestComponent {\\n    // highlight-next-line\\n    constructor(private pageMetadataService: PageMetadataService) {}\\n\\n    handleClick() {\\n        // highlight-next-line\\n        pageMetadataService.setBreadcrumb('New breadcrumb');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Detail Component in TypeScript\nDESCRIPTION: Example of a detail component class that extends TypedBaseDetailComponent to handle product reviews. Includes GraphQL operations, form handling, and CRUD operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-detail-views/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResultOf } from '@graphql-typed-document-node/core';\nimport { ChangeDetectionStrategy, Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { TypedBaseDetailComponent, LanguageCode, NotificationService, SharedModule } from '@vendure/admin-ui/core';\n\nexport const reviewDetailFragment = graphql(`\n  fragment ReviewDetail on ProductReview {\n    id\n    createdAt\n    updatedAt\n    title\n    rating\n    text\n    authorName\n    productId\n  }\n`);\n\nexport const getReviewDetailDocument = graphql(`\n  query GetReviewDetail($id: ID!) {\n    review(id: $id) {\n      ...ReviewDetail\n    }\n  }\n`);\n\nexport const createReviewDocument = graphql(`\n  mutation CreateReview($input: CreateProductReviewInput!) {\n    createProductReview(input: $input) {\n      ...ReviewDetail\n    }\n  }\n`);\n\nexport const updateReviewDocument = graphql(`\n  mutation UpdateReview($input: UpdateProductReviewInput!) {\n    updateProductReview(input: $input) {\n      ...ReviewDetail\n    }\n  }\n`);\n\n@Component({\n    selector: 'review-detail',\n    templateUrl: './review-detail.component.html',\n    styleUrls: ['./review-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class ReviewDetailComponent extends TypedBaseDetailComponent<typeof getReviewDetailDocument, 'review'> implements OnInit, OnDestroy {\n    detailForm = this.formBuilder.group({\n        title: [''],\n        rating: [1],\n        authorName: [''],\n    });\n\n    constructor(private formBuilder: FormBuilder, private notificationService: NotificationService) {\n        super();\n    }\n\n    ngOnInit() {\n        this.init();\n    }\n\n    ngOnDestroy() {\n        this.destroy();\n    }\n\n    create() {\n        const { title, rating, authorName } = this.detailForm.value;\n        if (!title || rating == null || !authorName) {\n            return;\n        }\n        this.dataService\n            .mutate(createReviewDocument, {\n                input: { title, rating, authorName },\n            })\n            .subscribe(({ createProductReview }) => {\n                if (createProductReview.id) {\n                    this.notificationService.success('Review created');\n                    this.router.navigate(['extensions', 'reviews', createProductReview.id]);\n                }\n            });\n    }\n\n    update() {\n        const { title, rating, authorName } = this.detailForm.value;\n        this.dataService\n            .mutate(updateReviewDocument, {\n                input: { id: this.id, title, rating, authorName },\n            })\n            .subscribe(() => {\n                this.notificationService.success('Review updated');\n            });\n    }\n\n    protected setFormValues(entity: NonNullable<ResultOf<typeof getReviewDetailDocument>['review']>, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            title: entity.name,\n            rating: entity.rating,\n            authorName: entity.authorName,\n            productId: entity.productId,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Validation Strategy in TypeScript\nDESCRIPTION: Provides an example of configuring the `passwordValidationStrategy` within Vendure's `AuthOptions`. It demonstrates instantiating `DefaultPasswordValidationStrategy` with a custom regular expression to enforce a stricter password policy: minimum eight characters, requiring at least one letter and one number. This customization enhances security compared to the default policy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/auth-options.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  passwordValidationStrategy: new DefaultPasswordValidationStrategy({\n    // Minimum eight characters, at least one letter and one number\n    regexp: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/,\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Product Details - Admin API\nDESCRIPTION: GraphQL query to fetch detailed product information including variants, prices, and stock levels from the Admin API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  product(id: 42) {\n    enabled\n    name\n    variants {\n      id\n      name\n      enabled\n      prices {\n        currencyCode\n        price\n      }\n      stockLevels {\n        stockLocationId\n        stockOnHand\n        stockAllocated\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Queries in TypeScript\nDESCRIPTION: Example demonstrating how to perform a GraphQL query to fetch product data with pagination parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-devkit-client.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphQlQuery } from '@vendure/ui-devkit';\n\nconst productList = await graphQlQuery(`\n  query GetProducts($skip: Int, $take: Int) {\n      products(options: { skip: $skip, take: $take }) {\n          items { id, name, enabled },\n          totalItems\n      }\n  }`, {\n    skip: 0,\n    take: 10,\n  }).then(data => data.products);\n```\n\n----------------------------------------\n\nTITLE: Type-Safe ErrorResult Handling with GraphQL Codegen\nDESCRIPTION: Enhanced version of error handling that uses GraphQL code generation to provide TypeScript type checking. Includes an exhaustive check that ensures all possible error types are handled in the switch statement.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await query(APPLY_COUPON_CODE, { code: 'INVALID-CODE' });\n\nswitch (result.applyCouponCode.__typename) {\n    case 'Order':\n        // handle success\n        break;\n    case 'CouponCodeExpiredError':\n        // handle expired code\n        break;\n    case 'CouponCodeInvalidError':\n        // handle invalid code\n        break;\n    case 'CouponCodeLimitError':\n        // handle limit error\n        break;\n    default:\n        // this line will cause a TypeScript error if there are any\n        // ErrorResults which we have not handled in the switch cases\n        // above.\n        const _exhaustiveCheck: never = result.applyCouponCode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionLineActionConfig Interface in TypeScript\nDESCRIPTION: Interface that extends PromotionActionConfig to define configuration for line-level promotion actions. Includes an execute function that calculates discounts for order lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionLineActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {\n    execute: ExecutePromotionLineActionFn<T, U>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderSellerStrategy for Order Splitting in Vendure\nDESCRIPTION: This snippet outlines the key methods of the OrderSellerStrategy API used for splitting orders and calculating platform fees in a multi-vendor marketplace. The splitOrder method divides OrderLines and ShippingLines among sellers, while afterSellerOrdersCreated assigns platform fees to each Seller Order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nOrderSellerStrategy.splitOrder\nOrderSellerStrategy.afterSellerOrdersCreated\n```\n\n----------------------------------------\n\nTITLE: Declaring StockMovementEvent Class - TypeScript\nDESCRIPTION: Declares a StockMovementEvent class, fired whenever StockMovement entities are created (such as after sales or manual adjustments). This event extends VendureEvent; its constructor takes a RequestContext and a list of StockMovement objects. Dependencies include the VendureEvent base, RequestContext, and StockMovement types. Input parameters are ctx (context) and stockMovements (array), and the output is a fully-formed event for downstream handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StockMovementEvent extends VendureEvent {\n    public readonly type: StockMovementType;\n    constructor(ctx: RequestContext, stockMovements: StockMovement[])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple TypeORM Product Subscriber in Vendure\nDESCRIPTION: Creates a basic TypeORM subscriber that listens for Product entity updates. This implementation defines a subscriber class with a beforeUpdate hook that logs when a product is about to be updated.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/db-subscribers/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Product, VendureConfig } from '@vendure/core';\nimport { EntitySubscriberInterface, EventSubscriber, UpdateEvent } from 'typeorm';\n\n@EventSubscriber()\nexport class ProductSubscriber implements EntitySubscriberInterface<Product> {\n  listenTo() {\n    return Product;\n  }\n  \n  beforeUpdate(event: UpdateEvent<Product>) {\n    console.log(`BEFORE PRODUCT UPDATED: `, event.entity);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HealthCheckStrategy Interface Definition\nDESCRIPTION: The TypeScript interface definition for HealthCheckStrategy which extends InjectableStrategy. It requires implementing the getHealthIndicator method that returns a HealthIndicatorFunction as defined by the NestJS Terminus module.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/health-check-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HealthCheckStrategy extends InjectableStrategy {\n    getHealthIndicator(): HealthIndicatorFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentUser GraphQL Type in Vendure Shop API\nDESCRIPTION: Defines the `CurrentUser` type representing the currently authenticated user in the Vendure Shop API. It includes the user's unique ID, identifier (typically email address), and a list of channels the user has access to, along with their permissions within each channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ntype CurrentUser {\n  id: ID!\n  identifier: String!\n  channels: [CurrentUserChannel!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Limited Products - Shop API with Pagination\nDESCRIPTION: GraphQL query demonstrating pagination by limiting the number of returned products to 5.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  products(options: { take: 5 }) {\n    totalItems\n    items {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ProductVariant Entity Class in TypeScript\nDESCRIPTION: This TypeScript code defines the `ProductVariant` entity class for the Vendure e-commerce framework using TypeORM decorators. It outlines the structure of a product variant, including its properties (like SKU, price, inventory tracking), relationships to other entities (Product, Asset, TaxCategory, Options, FacetValues), and inheritance from `VendureEntity`. The class implements interfaces like `Translatable`, `HasCustomFields`, `SoftDeletable`, and `ChannelAware`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/product-variant.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass ProductVariant extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable, ChannelAware {\n    constructor(input?: DeepPartial<ProductVariant>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    name: LocaleString;\n    @Column({ default: true })\n    enabled: boolean;\n    @Column()\n    sku: string;\n    listPrice: number;\n    listPriceIncludesTax: boolean;\n    currencyCode: CurrencyCode;\n    price: number\n    priceWithTax: number\n    taxRateApplied: TaxRate;\n    @Index()\n    @ManyToOne(type => Asset, asset => asset.featuredInVariants, { onDelete: 'SET NULL' })\n    featuredAsset: Asset;\n    @EntityId({ nullable: true })\n    featuredAssetId: ID;\n    @OneToMany(type => ProductVariantAsset, productVariantAsset => productVariantAsset.productVariant, {\n        onDelete: 'SET NULL',\n    })\n    assets: ProductVariantAsset[];\n    @Index()\n    @ManyToOne(type => TaxCategory, taxCategory => taxCategory.productVariants)\n    taxCategory: TaxCategory;\n    @EntityId({ nullable: true })\n    taxCategoryId: ID;\n    @OneToMany(type => ProductVariantPrice, price => price.variant, { eager: true })\n    productVariantPrices: ProductVariantPrice[];\n    @OneToMany(type => ProductVariantTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<ProductVariant>>;\n    @Index()\n    @ManyToOne(type => Product, product => product.variants)\n    product: Product;\n    @EntityId({ nullable: true })\n    productId: ID;\n    @Column({ default: 0 })\n    outOfStockThreshold: number;\n    @Column({ default: true })\n    useGlobalOutOfStockThreshold: boolean;\n    @Column({ type: 'varchar', default: GlobalFlag.INHERIT })\n    trackInventory: GlobalFlag;\n    @OneToMany(type => StockLevel, stockLevel => stockLevel.productVariant)\n    stockLevels: StockLevel[];\n    @OneToMany(type => StockMovement, stockMovement => stockMovement.productVariant)\n    stockMovements: StockMovement[];\n    @ManyToMany(type => ProductOption, productOption => productOption.productVariants)\n    @JoinTable()\n    options: ProductOption[];\n    @ManyToMany(type => FacetValue, facetValue => facetValue.productVariants)\n    @JoinTable()\n    facetValues: FacetValue[];\n    @Column(type => CustomProductVariantFields)\n    customFields: CustomProductVariantFields;\n    @ManyToMany(type => Collection, collection => collection.productVariants)\n    collections: Collection[];\n    @ManyToMany(type => Channel, channel => channel.productVariants)\n    @JoinTable()\n    channels: Channel[];\n    @OneToMany(type => OrderLine, orderLine => orderLine.productVariant)\n    lines: OrderLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Fetching Product Data in Vendure\nDESCRIPTION: This query demonstrates how to fetch product data using the Vendure API, including basic product information and variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  product(slug: \"football\") {\n    id\n    name\n    slug\n    variants {\n      sku\n      priceWithTax\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Populating Vendure Server with Initial Data\nDESCRIPTION: Script demonstrating how to use the populate() function to initialize a Vendure server with initial data and products from a CSV file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/importing-data/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap, DefaultJobQueuePlugin } from '@vendure/core';\nimport { populate } from '@vendure/core/cli';\nimport path from \"path\";\n\nimport { config } from './vendure-config';\nimport { initialData } from './my-initial-data';\n\nconst productsCsvFile = path.join(__dirname, 'path/to/products.csv')\n\nconst populateConfig = {\n    ...config,\n    plugins: (config.plugins || []).filter(\n        plugin => plugin !== DefaultJobQueuePlugin,\n    ),\n}\n\npopulate(\n    () => bootstrap(populateConfig),\n    initialData,\n    productsCsvFile,\n    'my-channel-token'\n)\n    .then(app => {\n        return app.close();\n    })\n    .then(\n        () => process.exit(0),\n        err => {\n            console.log(err);\n            process.exit(1);\n        },\n    );\n```\n\n----------------------------------------\n\nTITLE: Defining the BlockingEventHandlerOptions Type in TypeScript\nDESCRIPTION: This TypeScript type alias `BlockingEventHandlerOptions` defines the configuration object for registering event handlers that block the event publishing flow until completion. It requires the `event` type (or an array of types) derived from `VendureEvent`, the potentially asynchronous `handler` function, a unique string `id`, and optional `before` and `after` properties (string IDs) to specify execution order relative to other handlers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/blocking-event-handler-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BlockingEventHandlerOptions<T extends VendureEvent> = {\n    event: Type<T> | Array<Type<T>>;\n    handler: (event: T) => void | Promise<void>;\n    id: string;\n    before?: string;\n    after?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entity by ID in a Channel - TypeORM Vendure Helper - TypeScript\nDESCRIPTION: The `findOneInChannel` method retrieves a single instance of an entity by its ID, scoped to a specific channel. It mirrors TypeORM's `Repository.findOne()` but ensures the result belongs to the provided channel, using parameters for context, type, ID, channel ID, and optional query options. Required dependencies include the TypeORM repository system, Vendure channel context, and ID typing. The method enhances security by scoping data to channels, and expects valid IDs and entity classes as input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/transactional-connection.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n(ctx: RequestContext, entity: Type<T>, id: ID, channelId: ID, options: FindOneOptions<T> = {}) => \n```\n\n----------------------------------------\n\nTITLE: Implementing Permission in Resolver\nDESCRIPTION: Shows how to use the custom permission with the @Allow decorator in a GraphQL resolver to protect the syncInventory mutation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-permissions/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { Allow } from '@vendure/core';\nimport { sync } from '../constants';\n\n@Resolver()\nexport class InventorySyncResolver {\n\n    @Allow(sync.Permission)\n    @Mutation()\n    syncInventory(/* ... */) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to an Order - Vendure TypeScript\nDESCRIPTION: Adds a single product variant to an existing Order. Requires valid context, orderId, productVariantId, quantity, optional customFields, and optional related entity fetches. Returns a Promise resolving to an ErrorResultUnion of UpdateOrderItemsResult or Order. Input parameters ensure traceability and validation in multi-user or multi-step orders. Use addItemsToOrder for batch operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, productVariantId: ID, quantity: number, customFields?: { [key: string]: any }, relations?: RelationPaths<Order>) => Promise<ErrorResultUnion<UpdateOrderItemsResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: Defining StockLocation Entity in Vendure - TypeScript\nDESCRIPTION: This code snippet defines the StockLocation class within the Vendure e-commerce framework using TypeScript. It specifies the entity's fields such as name, description, customFields, channels, and stockMovements. Dependencies include VendureEntity, CustomStockLocationFields, Channel, and StockMovement. The StockLocation acts as a key entity to track where inventory is stored and how it is moved, implementing both HasCustomFields and ChannelAware interfaces. The class is annotated for TypeORM ORM mapping and expects properties describing the location and relationships to other entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-location.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StockLocation extends VendureEntity implements HasCustomFields, ChannelAware {\n    constructor(input: DeepPartial<StockLocation>)\n    @Column()\n    name: string;\n    @Column()\n    description: string;\n    @Column(type => CustomStockLocationFields)\n    customFields: CustomStockLocationFields;\n    @ManyToMany(type => Channel, channel => channel.stockLocations)\n    @JoinTable()\n    channels: Channel[];\n    @OneToMany(type => StockMovement, movement => movement.stockLocation)\n    stockMovements: StockMovement[];\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition for User in TypeScript\nDESCRIPTION: Defines the User class that represents authenticated users in the Vendure API, supporting both administrators and customers. Requires VendureEntity, HasCustomFields, and SoftDeletable as dependencies. Includes properties for user identification and authentication handling, with methods to retrieve authentication methods. Inputs typically include partial user data; outputs will be a user object with various properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/user.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass User extends VendureEntity implements HasCustomFields, SoftDeletable {\n    constructor(input?: DeepPartial<User>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    @Column()\n    identifier: string;\n    @OneToMany(type => AuthenticationMethod, method => method.user)\n    authenticationMethods: AuthenticationMethod[];\n    @Column({ default: false })\n    verified: boolean;\n    @ManyToMany(type => Role)\n    @JoinTable()\n    roles: Role[];\n    @Column({ type: Date, nullable: true })\n    lastLogin: Date | null;\n    @Column(type => CustomUserFields)\n    customFields: CustomUserFields;\n    @OneToMany(type => AuthenticatedSession, session => session.user)\n    sessions: AuthenticatedSession[];\n    getNativeAuthenticationMethod() => NativeAuthenticationMethod;\n    getNativeAuthenticationMethod(strict?: boolean) => NativeAuthenticationMethod | undefined;\n    getNativeAuthenticationMethod(strict?: boolean) => NativeAuthenticationMethod | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Token Authentication with GraphQL\nDESCRIPTION: Example implementation of bearer token authentication for Vendure's Shop API, including token extraction from response headers and storage for subsequent requests.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet token: string | undefined = localStorage.getItem('token')\n\nexport async function request(query: string, variables: any) {\n     // If we already know the token, set the Authorization header.\n     const headers = token ? { Authorization: `Bearer ${token}` } : {};\n\n     const response = await someGraphQlClient(query, variables, headers);\n\n     // Check the response headers to see if Vendure has set the\n     // auth token. The header key \"vendure-auth-token\" may be set to\n     // a custom value with the authOptions.authTokenHeaderKey config option.\n     const authToken = response.headers.get('vendure-auth-token');\n     if (authToken != null) {\n         token = authToken;\n     }\n     return response.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Payment Method Handler Implementation\nDESCRIPTION: Creates a payment method handler that initializes payments in the custom 'Validating' state\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, PaymentMethodHandler } from '@vendure/core';\n\n/**\n * This PaymentMethodHandler creates the Payment in the custom \"Validating\"\n * state.\n */\nconst myPaymentHandler = new PaymentMethodHandler({\n    code: 'my-payment-handler',\n    description: [{languageCode: LanguageCode.en, value: 'My payment handler'}],\n    args: {},\n    createPayment: (ctx, order, amount, args, metadata) => {\n        // payment provider logic omitted\n        return {\n            state: 'Validating' as any,\n            amount,\n            metadata,\n        };\n    },\n    settlePayment: (ctx, order, payment) => {\n        return {\n            success: true,\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handler Strategy in Vendure - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to implement a custom error handling strategy for Vendure, by extending the `ErrorHandlerStrategy`. The strategy handles errors occurring on the server and worker through methods `handleServerError` and `handleWorkerError`. It makes use of the Vendure `Injector` class to integrate a monitoring service, `MonitoringService`, which captures exceptions along with their context. Required dependencies include Vendure Core and NestJS.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-handler-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArgumentsHost, ExecutionContext } from '@nestjs/common';\nimport { GqlContextType, GqlExecutionContext } from '@nestjs/graphql';\nimport { ErrorHandlerStrategy, I18nError, Injector, Job, LogLevel } from '@vendure/core';\n\nimport { MonitoringService } from './monitoring.service';\n\nexport class CustomErrorHandlerStrategy implements ErrorHandlerStrategy {\n    private monitoringService: MonitoringService;\n\n    init(injector: Injector) {\n        this.monitoringService = injector.get(MonitoringService);\n    }\n\n    handleServerError(error: Error, { host }: { host: ArgumentsHost }) {\n         const errorContext: any = {};\n         if (host?.getType<GqlContextType>() === 'graphql') {\n             const gqlContext = GqlExecutionContext.create(host as ExecutionContext);\n             const info = gqlContext.getInfo();\n             errorContext.graphQlInfo = {\n                 fieldName: info.fieldName,\n                 path: info.path,\n             };\n         }\n         this.monitoringService.captureException(error, errorContext);\n    }\n\n    handleWorkerError(error: Error, { job }: { job: Job }) {\n        const errorContext = {\n            queueName: job.queueName,\n            jobId: job.id,\n        };\n        this.monitoringService.captureException(error, errorContext);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Operation Example\nDESCRIPTION: Demonstrates a mutation operation for updating customer email with its response\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  updateCustomerEmail(input: {\n    customerId: \"1\",\n    email: \"john.smith@email.com\"\n  }) {\n    id\n    name\n    email\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updateCustomerEmail\": {\n      \"id\": \"1\",\n      \"name\": \"John Smith\",\n      \"email\": \"john.smith@email.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom PaymentMethodHandler in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom PaymentMethodHandler for integrating with a payment provider. It includes methods for creating, settling, and cancelling payments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    CancelPaymentResult,\n    CancelPaymentErrorResult,\n    PaymentMethodHandler,\n    VendureConfig,\n    CreatePaymentResult,\n    SettlePaymentResult,\n    SettlePaymentErrorResult\n} from '@vendure/core';\nimport { sdk } from 'payment-provider-sdk';\n\n/**\n * This is a handler which integrates Vendure with an imaginary\n * payment provider, who provide a Node SDK which we use to\n * interact with their APIs.\n */\nconst myPaymentHandler = new PaymentMethodHandler({\n    code: 'my-payment-method',\n    description: [{\n        languageCode: LanguageCode.en,\n        value: 'My Payment Provider',\n    }],\n    args: {\n        apiKey: {type: 'string'},\n    },\n\n    /** This is called when the `addPaymentToOrder` mutation is executed */\n    createPayment: async (ctx, order, amount, args, metadata): Promise<CreatePaymentResult> => {\n        try {\n            const result = await sdk.charges.create({\n                amount,\n                apiKey: args.apiKey,\n                source: metadata.token,\n            });\n            return {\n                amount: order.total,\n                state: 'Authorized' as const,\n                transactionId: result.id.toString(),\n                metadata: {\n                    cardInfo: result.cardInfo,\n                    // Any metadata in the `public` field\n                    // will be available in the Shop API,\n                    // All other metadata is private and\n                    // only available in the Admin API.\n                    public: {\n                        referenceCode: result.publicId,\n                    }\n                },\n            };\n        } catch (err) {\n            return {\n                amount: order.total,\n                state: 'Declined' as const,\n                metadata: {\n                    errorMessage: err.message,\n                },\n            };\n        }\n    },\n\n    /** This is called when the `settlePayment` mutation is executed */\n    settlePayment: async (ctx, order, payment, args): Promise<SettlePaymentResult | SettlePaymentErrorResult> => {\n        try {\n            const result = await sdk.charges.capture({\n                apiKey: args.apiKey,\n                id: payment.transactionId,\n            });\n            return {success: true};\n        } catch (err) {\n            return {\n                success: false,\n                errorMessage: err.message,\n            }\n        }\n    },\n\n    /** This is called when a payment is cancelled. */\n    cancelPayment: async (ctx, order, payment, args): Promise<CancelPaymentResult | CancelPaymentErrorResult> => {\n        try {\n            const result = await sdk.charges.cancel({\n                apiKey: args.apiKey,\n                id: payment.transactionId,\n            });\n            return {success: true};\n        } catch (err) {\n            return {\n                success: false,\n                errorMessage: err.message,\n            }\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Stripe Payment Submission in React\nDESCRIPTION: TypeScript/React component (`CheckoutForm`) demonstrating how to use Stripe hooks (`useStripe`, `useElements`, `PaymentElement`) from `@stripe/react-stripe-js`. It renders the Stripe Payment Element and handles form submission by calling `stripe.confirmPayment`, providing a `return_url` for redirection after payment completion or failure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// CheckoutForm.tsx\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nimport { FormEvent } from 'react';\n\nexport const CheckoutForm = ({ orderCode }: { orderCode: string }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event: FormEvent) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: location.origin + `/checkout/confirmation/${orderCode}`,\n      },\n    });\n\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      console.log(result.error.message);\n    } else {\n      // Your customer will be redirected to your `return_url`. For some payment\n      // methods like iDEAL, your customer will be redirected to an intermediate\n      // site first to authorize the payment, then redirected to the `return_url`.\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PaymentElement />\n      <button disabled={!stripe}>Submit</button>\n    </form>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariant GraphQL Object Type\nDESCRIPTION: Defines the ProductVariant object type with fields for inventory tracking, pricing, stock levels, and associated product information. It includes relationships to other types like Product, Asset, and TaxCategory.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_140\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariant {\n  enabled: Boolean!\n  trackInventory: GlobalFlag!\n  stockOnHand: Int!\n  stockAllocated: Int!\n  outOfStockThreshold: Int!\n  useGlobalOutOfStockThreshold: Boolean!\n  prices: [ProductVariantPrice!]!\n  stockLevels: [StockLevel!]!\n  stockMovements(options: StockMovementListOptions): StockMovementList!\n  channels: [Channel!]!\n  id: ID!\n  product: Product!\n  productId: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  sku: String!\n  name: String!\n  featuredAsset: Asset\n  assets: [Asset!]!\n  price: Money!\n  currencyCode: CurrencyCode!\n  priceWithTax: Money!\n  stockLevel: String!\n  taxRateApplied: TaxRate!\n  taxCategory: TaxCategory!\n  options: [ProductOption!]!\n  facetValues: [FacetValue!]!\n  translations: [ProductVariantTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Promotion Condition in TypeScript for Vendure\nDESCRIPTION: This code demonstrates how to create a custom promotion condition for minimum order amount. It defines a unique code, description, configurable arguments, and the check function that determines whether the condition is met based on order total and tax settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, PromotionCondition } from '@vendure/core';\n\nexport const minimumOrderAmount = new PromotionCondition({\n    /** A unique identifier for the condition */\n    code: 'minimum_order_amount',\n\n    /**\n     * A human-readable description. Values defined in the\n     * `args` object can be interpolated using the curly-braces syntax.\n     */\n    description: [\n        {languageCode: LanguageCode.en, value: 'If order total is greater than { amount }'},\n    ],\n\n    /**\n     * Arguments which can be specified when configuring the condition\n     * in the Admin UI. The values of these args are then available during\n     * the execution of the `check` function.\n     */\n    args: {\n        amount: {\n            type: 'int',\n            // The optional `ui` object allows you to customize\n            // how this arg is rendered in the Admin UI.\n            ui: {component: 'currency-form-input'},\n        },\n        taxInclusive: {type: 'boolean'},\n    },\n\n    /**\n     * This is the business logic of the condition. It is a function that\n     * must resolve to a boolean value indicating whether the condition has\n     * been satisfied.\n     */\n    check(ctx, order, args) {\n        if (args.taxInclusive) {\n            return order.subTotalWithTax >= args.amount;\n        } else {\n            return order.subTotal >= args.amount;\n        }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: User Login Mutation in GraphQL\nDESCRIPTION: This mutation allows a user to log in using native authentication. It takes username and password as input, with an optional 'rememberMe' parameter for extended session duration. The result is a 'NativeAuthenticationResult'. It serves as an alias for the authenticate mutation using the native strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { login(username: String!, password: String!, rememberMe: Boolean): NativeAuthenticationResult! }\n```\n\n----------------------------------------\n\nTITLE: Vendure Configuration Integration\nDESCRIPTION: Combines all custom payment components in the Vendure configuration\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultOrderProcess, defaultPaymentProcess, VendureConfig } from '@vendure/core';\nimport { customOrderProcess } from './plugins/my-payment-plugin/order-process';\nimport { customPaymentProcess } from './plugins/my-payment-plugin/payment-process';\nimport { myPaymentHandler } from './plugins/my-payment-plugin/payment-method-handler';\nimport { MyOrderPlacedStrategy } from './plugins/my-payment-plugin/order-placed-strategy';\n\n// Combine the above in the VendureConfig\nexport const config: VendureConfig = {\n    // ...\n    orderOptions: {\n        process: [defaultOrderProcess, customOrderProcess],\n        orderPlacedStrategy: new MyOrderPlacedStrategy(),\n    },\n    paymentOptions: {\n        process: [defaultPaymentProcess, customPaymentProcess],\n        paymentMethodHandlers: [myPaymentHandler],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic GraphQL Client with Fetch for Vendure in TypeScript\nDESCRIPTION: A TypeScript implementation of a GraphQL client using the fetch API. It handles authentication tokens, language codes, and channel tokens, and includes a React hook for convenient use in components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState, useEffect } from 'react';\n\n// If using bearer-token based session management, we'll store the token\n// in localStorage using this key.\nconst AUTH_TOKEN_KEY = 'auth_token';\n\nconst API_URL = 'https://readonlydemo.vendure.io/shop-api';\n\nlet languageCode: string | undefined;\nlet channelToken: string | undefined;\n\nexport function setLanguageCode(value: string | undefined) {\n    languageCode = value;\n}\n\nexport function setChannelToken(value: string | undefined) {\n    channelToken = value;\n}\n\nexport function query(document: string, variables: Record<string, any> = {}) {\n    const authToken = localStorage.getItem(AUTH_TOKEN_KEY);\n    const headers = new Headers({\n        'content-type': 'application/json',\n    });\n    if (authToken) {\n        headers.append('authorization', `Bearer ${authToken}`);\n    }\n    if (channelToken) {\n        headers.append('vendure-token', channelToken);\n    }\n    let endpoint = API_URL;\n    if (languageCode) {\n        endpoint += `?languageCode=${languageCode}`;\n    }\n    // highlight-start\n    return fetch(endpoint, {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        body: JSON.stringify({\n            query: document,\n            variables,\n        }),\n    // highlight-end\n    }).then((res) => {\n        if (!res.ok) {\n            throw new Error(`An error ocurred, HTTP status: ${res.status}`);\n        }\n        const newAuthToken = res.headers.get('vendure-auth-token');\n        if (newAuthToken) {\n            localStorage.setItem(AUTH_TOKEN_KEY, newAuthToken);\n        }\n        return res.json();\n    });\n}\n\n/**\n * Here we have wrapped the `query` function into a React hook for convenient use in\n * React components.\n */\n export function useQuery(\n    document: string,\n    variables: Record<string, any> = {}\n) {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        query(document, variables)\n            .then((result) => {\n                setData(result.data);\n                setError(null);\n            })\n            .catch((err) => {\n                setError(err.message);\n                setData(null);\n            })\n            .finally(() => {\n                setLoading(false);\n            });\n    }, []);\n\n    return { data, loading, error };\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Customer Avatar Plugin\nDESCRIPTION: Complete implementation of the CustomerAvatarPlugin combining all components\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/uploading-files/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Asset, PluginCommonModule, VendurePlugin } from '@vendure/core';\n\nimport { shopApiExtensions } from './api/api-extensions';\nimport { CustomerAvatarResolver } from './api/customer-avatar.resolver';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    shopApiExtensions: {\n        schema: shopApiExtensions,\n        resolvers: [CustomerAvatarResolver],\n    },\n    configuration: config => {\n        config.customFields.Customer.push({\n            name: 'avatar',\n            type: 'relation',\n            label: [{languageCode: LanguageCode.en, value: 'Customer avatar'}],\n            entity: Asset,\n            nullable: true,\n        });\n        return config;\n    },\n})\nexport class CustomerAvatarPlugin {\n}\n```\n\n----------------------------------------\n\nTITLE: DataTable2Component Class Signature\nDESCRIPTION: The TypeScript class signature for DataTable2Component, showing its inputs, outputs, and lifecycle methods. This component implements AfterContentInit, OnChanges, and OnDestroy interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/data-table2component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DataTable2Component<T> implements AfterContentInit, OnChanges, OnDestroy {\n    @Input() id: DataTableLocationId;\n    @Input() items: T[];\n    @Input() itemsPerPage: number;\n    @Input() currentPage: number;\n    @Input() totalItems: number;\n    @Input() emptyStateLabel: string;\n    @Input() filters: DataTableFilterCollection;\n    @Input() activeIndex = -1;\n    @Input() trackByPath = 'id';\n    @Output() pageChange = new EventEmitter<number>();\n    @Output() itemsPerPageChange = new EventEmitter<number>();\n    @Output() visibleColumnsChange = new EventEmitter<Array<DataTable2ColumnComponent<T>>>();\n    @ContentChildren(DataTable2ColumnComponent) columns: QueryList<DataTable2ColumnComponent<T>>;\n    @ContentChildren(DataTableCustomFieldColumnComponent)\n    customFieldColumns: QueryList<DataTableCustomFieldColumnComponent<T>>;\n    @ContentChild(DataTable2SearchComponent) searchComponent: DataTable2SearchComponent;\n    @ContentChild(BulkActionMenuComponent) bulkActionMenuComponent: BulkActionMenuComponent;\n    @ContentChild('vdrDt2CustomSearch') customSearchTemplate: TemplateRef<any>;\n    @ContentChildren(TemplateRef) templateRefs: QueryList<TemplateRef<any>>;\n    injector = inject(Injector);\n    route = inject(ActivatedRoute);\n    filterPresetService = inject(FilterPresetService);\n    dataTableCustomComponentService = inject(DataTableCustomComponentService);\n    dataTableConfigService = inject(DataTableConfigService);\n    protected customComponents = new Map<string, { config: DataTableComponentConfig; injector: Injector }>();\n    rowTemplate: TemplateRef<any>;\n    currentStart: number;\n    currentEnd: number;\n    disableSelect = false;\n    showSearchFilterRow = false;\n    protected uiLanguage$: Observable<LanguageCode>;\n    protected destroy$ = new Subject<void>();\n    constructor(changeDetectorRef: ChangeDetectorRef, dataService: DataService)\n    selectionManager: void\n    allColumns: void\n    visibleSortedColumns: void\n    sortedColumns: void\n    ngOnChanges(changes: SimpleChanges) => ;\n    ngOnDestroy() => ;\n    ngAfterContentInit() => void;\n    onColumnReorder(event: { column: DataTable2ColumnComponent<any>; newIndex: number }) => ;\n    onColumnsReset() => ;\n    toggleSearchFilterRow() => ;\n    trackByFn(index: number, item: any) => ;\n    onToggleAllClick() => ;\n    onRowClick(item: T, event: MouseEvent) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Custom Column Component for Product Slug\nDESCRIPTION: Defines an Angular component that renders a product slug as a clickable link. The component receives the product entity as rowItem input and implements the CustomColumnComponent interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-data-table-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\nimport { CustomColumnComponent } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'slug-link',\n    template: `\n        <a [href]=\"'https://example.com/products/' + rowItem.slug\" target=\"_blank\">{{ rowItem.slug }}</a>\n    `,\n    standalone: true,\n})\nexport class SlugLinkComponent implements CustomColumnComponent {\n    @Input() rowItem: { slug: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Bcrypt Password Hashing Strategy in Vendure (TypeScript)\nDESCRIPTION: Defines the BcryptPasswordHashingStrategy class, implementing the PasswordHashingStrategy interface with async methods for hashing and verifying password strings using bcrypt. Requires the bcrypt library and TypeScript, and is intended to provide secure password storage for Vendure-based projects. The class exposes two main functions: hash (to convert plaintext passwords to hashed strings) and check (to verify provided plaintext against a stored hash), both returning Promises. Input parameters include plaintext and hash strings; outputs are a hashed password (string) or a boolean indicating match status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/bcrypt-password-hashing-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass BcryptPasswordHashingStrategy implements PasswordHashingStrategy {\n    hash(plaintext: string) => Promise<string>;\n    check(plaintext: string, hash: string) => Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockMovementService Class in TypeScript\nDESCRIPTION: This snippet defines the StockMovementService class with its properties and methods for managing stock movements in Vendure. It includes operations for adjusting stock levels, creating allocations, sales, cancellations, and releases for orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/stock-movement-service.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StockMovementService {\n    shippingEligibilityCheckers: ShippingEligibilityChecker[];\n    shippingCalculators: ShippingCalculator[];\n    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, globalSettingsService: GlobalSettingsService, stockLevelService: StockLevelService, eventBus: EventBus, stockLocationService: StockLocationService, configService: ConfigService)\n    getStockMovementsByProductVariantId(ctx: RequestContext, productVariantId: ID, options: StockMovementListOptions) => Promise<PaginatedList<StockMovement>>;\n    adjustProductVariantStock(ctx: RequestContext, productVariantId: ID, stockOnHandNumberOrInput: number | StockLevelInput[]) => Promise<StockAdjustment[]>;\n    createAllocationsForOrder(ctx: RequestContext, order: Order) => Promise<Allocation[]>;\n    createAllocationsForOrderLines(ctx: RequestContext, lines: OrderLineInput[]) => Promise<Allocation[]>;\n    createSalesForOrder(ctx: RequestContext, lines: OrderLineInput[]) => Promise<Sale[]>;\n    createCancellationsForOrderLines(ctx: RequestContext, lineInputs: OrderLineInput[]) => Promise<Cancellation[]>;\n    createReleasesForOrderLines(ctx: RequestContext, lineInputs: OrderLineInput[]) => Promise<Release[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Full-Text Product Search Query\nDESCRIPTION: GraphQL query for performing full-text search across products using the search term parameter. Includes pagination and detailed product information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery SearchProducts($term: String!, $skip: Int, $take: Int) {\n  search(\n    input: {\n      term: $term,\n      groupByProduct: true,\n      skip: $skip,\n      take: $take }\n  ) {\n    totalItems\n    items {\n      productName\n      slug\n      productAsset {\n        id\n        preview\n      }\n      priceWithTax {\n        ... on SinglePrice {\n          value\n        }\n        ... on PriceRange {\n          min\n          max\n        }\n      }\n      currencyCode\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"term\": \"camera\",\n  \"skip\": 0,\n  \"take\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route for Product Detail in React\nDESCRIPTION: This snippet demonstrates how to define a custom route for the product detail page in React. It uses the registerReactRouteComponent function to set up the route with a custom component and reuses the core GraphQL query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetProductDetailDocument } from '@vendure/admin-ui/core';\nimport { registerReactRouteComponent } from '@vendure/admin-ui/react';\nimport { MyProductDetail } from './components/ProductDetail';\n\nexport default [\n    registerReactRouteComponent({\n        component: MyProductDetail,\n        // The path must then match the remainder\n        // of the built-in route path\n        path: 'products/:id',\n        // We can re-use the GraphQL query from the core to get\n        // access to the same data in our component\n        query: GetProductDetailDocument,\n        entityKey: 'product',\n        getBreadcrumbs: entity => [\n            { label: 'breadcrumb.products', link: ['/catalog/products'] },\n            { label: entity?.name ?? 'catalog.create-new-product', link: ['.'] },\n        ],\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Relation Custom Fields in GraphQL\nDESCRIPTION: GraphQL mutation showing how to update a customer with a relation custom field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n    updateCustomer(input: {\n        id: 1\n        customFields: {\n            avatarId: 42,\n        }\n    }) {\n        id\n        customFields {\n            avatar {\n                id\n                name\n                preview\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAssetInput schema in GraphQL\nDESCRIPTION: An input type for updating an Asset entity in Vendure. Allows for modifying metadata like name and tags, as well as setting a focal point for images.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_175\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateAssetInput {\n  id: ID!\n  name: String\n  focalPoint: CoordinateInput\n  tags: [String!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vendure Dependencies in package.json\nDESCRIPTION: Example diff showing how to update Vendure dependencies and TypeScript version in the package.json file for migration from v1 to v2.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/index.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  // ...\n  \"dependencies\": {\n-    \"@vendure/common\": \"1.9.7\",\n-    \"@vendure/core\": \"1.9.7\",\n+    \"@vendure/common\": \"2.0.0\",\n+    \"@vendure/core\": \"2.0.0\",\n     // etc.\n  },\n  \"devDependencies\": {\n-    \"typescript\": \"4.3.5\",\n+    \"typescript\": \"4.9.5\",\n     // etc.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Digital ShippingEligibilityChecker in Vendure\nDESCRIPTION: Implements a shipping eligibility checker that allows shipping methods only for orders containing digital products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const digitalShippingEligibilityChecker = new ShippingEligibilityChecker({\n    code: 'digital-shipping-eligibility-checker',\n    description: [\n        {\n            languageCode: LanguageCode.en,\n            value: 'Allows only orders that contain at least 1 digital product',\n        },\n    ],\n    args: {},\n    check: (ctx, order, args) => {\n        const digitalOrderLines = order.lines.filter(l => l.productVariant.customFields.isDigital);\n        return digitalOrderLines.length > 0;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Compilation Script for Stand-alone Admin UI Deployment\nDESCRIPTION: A complete script for compiling the Vendure Admin UI as a stand-alone application for deployment on platforms like Vercel. It handles compilation, custom base href configuration, and overwrites the API configuration for production deployment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploying-admin-ui.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\nimport { DEFAULT_BASE_HREF } from '@vendure/ui-devkit/compiler/constants';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\n/**\n * Compiles the Admin UI. If the BASE_HREF is defined, use that.\n * Otherwise, go back to the default admin route.\n */\ncompileUiExtensions({\n    outputPath: path.join(__dirname, 'build'),\n    baseHref: process.env.BASE_HREF ?? DEFAULT_BASE_HREF,\n    extensions: [\n        /* any UI extensions would go here, or leave empty */\n    ],\n})\n    .compile?.()\n    .then(() => {\n        // If building for Vercel deployment, replace the config to make \n        // api calls to api.example.com instead of localhost.\n        if (process.env.VERCEL) {\n            console.log('Overwriting the vendure-ui-config.json for Vercel deployment.');\n            return fs.writeFile(\n                path.join(__dirname, 'build', 'dist', 'vendure-ui-config.json'),\n                JSON.stringify({\n                    apiHost: 'https://api.example.com',\n                    apiPort: '443',\n                    adminApiPath: 'admin-api',\n                    tokenMethod: 'cookie',\n                    defaultLanguage: 'en',\n                    availableLanguages: ['en', 'de'],\n                    hideVendureBranding: false,\n                    hideVersion: false,\n                }),\n            );\n        }\n    })\n    .then(() => {\n        process.exit(0);\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Column Component in TypeScript and Angular\nDESCRIPTION: This snippet demonstrates how to create a custom component that implements the CustomColumnComponent interface for use in a DataTable column.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-table-components/register-data-table-component.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Component, Input } from '@angular/core';\nimport { CustomColumnComponent } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'custom-slug-component',\n    template: `\n        <a [href]=\"'https://example.com/products/' + rowItem.slug\" target=\"_blank\">{{ rowItem.slug }}</a>\n    `,\n    standalone: true,\n})\nexport class CustomTableComponent implements CustomColumnComponent {\n    @Input() rowItem: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Next Available Order States - Vendure TypeScript\nDESCRIPTION: Determines the next valid workflow states for an Order entity. Accepts an Order object and returns a readonly array of OrderState options based on business rules. Supports order process visualization and state transitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n(order: Order) => readonly OrderState[]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Dashboard Widget Layout\nDESCRIPTION: Configuration for defining the default layout of dashboard widgets including their order and widths. Demonstrates how to arrange multiple widgets in a grid layout.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/dashboard-widgets/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerDashboardWidget, setDashboardWidgetLayout } from '@vendure/admin-ui/core';\n\nexport default [\n    registerDashboardWidget('reviews', {\n        // omitted for brevity\n    }),\n    setDashboardWidgetLayout([\n        { id: 'welcome', width: 12 },\n        { id: 'orderSummary', width: 4 },\n        { id: 'latestOrders', width: 8 },\n        { id: 'reviews', width: 6 },\n    ]),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Price Calculation Strategy\nDESCRIPTION: Implementation of OrderItemPriceCalculationStrategy to add additional cost for engraving service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/configurable-products/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    RequestContext, PriceCalculationResult,\n    ProductVariant, OrderItemPriceCalculationStrategy\n} from '@vendure/core';\n\nexport class EngravingPriceStrategy implements OrderItemPriceCalculationStrategy {\n\n    calculateUnitPrice(\n        ctx: RequestContext,\n        productVariant: ProductVariant,\n        customFields: { engravingText?: string },\n    ) {\n        let price = productVariant.listPrice;\n        if (customFields.engravingText) {\n            // Add $10 for engraving\n            price += 1000;\n        }\n        return {\n            price,\n            priceIncludesTax: productVariant.listPriceIncludesTax,\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Stock Display Strategy in TypeScript\nDESCRIPTION: Shows how to create a custom StockDisplayStrategy to display exact stock levels instead of the default in/out of stock indicators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/stock-control/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestContext, StockDisplayStrategy, ProductVariant } from '@vendure/core';\n\nexport class ExactStockDisplayStrategy implements StockDisplayStrategy {\n    getStockLevel(ctx: RequestContext, productVariant: ProductVariant, saleableStockLevel: number): string {\n        return saleableStockLevel.toString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Payment Method Handler in TypeScript with Vendure\nDESCRIPTION: A complete example of creating a PaymentMethodHandler that integrates with a mock payment gateway called 'gripe'. It demonstrates how to configure the handler with arguments, create payments, and settle payments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodHandler, CreatePaymentResult, SettlePaymentResult, LanguageCode } from '@vendure/core';\n// A mock 3rd-party payment SDK\nimport gripeSDK from 'gripe';\n\nexport const examplePaymentHandler = new PaymentMethodHandler({\n  code: 'example-payment-provider',\n  description: [{\n    languageCode: LanguageCode.en,\n    value: 'Example Payment Provider',\n  }],\n  args: {\n    apiKey: { type: 'string' },\n  },\n  createPayment: async (ctx, order, amount, args, metadata): Promise<CreatePaymentResult> => {\n    try {\n      const result = await gripeSDK.charges.create({\n        amount,\n        apiKey: args.apiKey,\n        source: metadata.authToken,\n      });\n      return {\n        amount: order.total,\n        state: 'Settled' as const,\n        transactionId: result.id.toString(),\n        metadata: result.outcome,\n      };\n    } catch (err: any) {\n      return {\n        amount: order.total,\n        state: 'Declined' as const,\n        metadata: {\n          errorMessage: err.message,\n        },\n      };\n    }\n  },\n  settlePayment: async (ctx, order, payment, args): Promise<SettlePaymentResult> => {\n    return { success: true };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Product Variants with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for bulk deleting multiple product variants. Accepts an array of product variant IDs and returns an array of DeletionResponse objects for each deletion operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_54\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple ProductVariants\n\"\"\"\ntype Mutation {\n  deleteProductVariants(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Seller Entity in Vendure TypeScript\nDESCRIPTION: This TypeScript snippet defines the `Seller` class which extends from `VendureEntity` and implements `SoftDeletable` and `HasCustomFields` interfaces. The `Seller` class manages seller-specific data, including optional deletion date, name, custom fields, and associated channels. Key dependencies include importing `DeepPartial`, `Channel`, and `CustomSellerFields`. The `Seller` entity represents a person or organization selling goods on a channel. Required fields include `name` and `customFields`. The `deletedAt` field is nullable, accommodating soft deletions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/seller.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Seller extends VendureEntity implements SoftDeletable, HasCustomFields {\n    constructor(input?: DeepPartial<Seller>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    @Column() name: string;\n    @Column(type => CustomSellerFields)\n    customFields: CustomSellerFields;\n    @OneToMany(type => Channel, channel => channel.seller)\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Eligible Shipping Methods\nDESCRIPTION: GraphQL query to get available shipping methods for the current order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetShippingMethods{\n  eligibleShippingMethods {\n    id\n    name\n    code\n    description\n    priceWithTax\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Order Service Method Signatures\nDESCRIPTION: TypeScript method signatures for OrderService class showing available order management operations including address management, shipping methods, payment processing, fulfillment handling and order modifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nunsetBillingAddress(ctx: RequestContext, orderId: ID): Promise<Order>\n\ngetEligibleShippingMethods(ctx: RequestContext, orderId: ID): Promise<ShippingMethodQuote[]>\n\ngetEligiblePaymentMethods(ctx: RequestContext, orderId: ID): Promise<PaymentMethodQuote[]>\n\nsetShippingMethod(ctx: RequestContext, orderId: ID, shippingMethodIds: ID[]): Promise<ErrorResultUnion<SetOrderShippingMethodResult, Order>>\n\ntransitionToState(ctx: RequestContext, orderId: ID, state: OrderState): Promise<Order | OrderStateTransitionError>\n\ntransitionFulfillmentToState(ctx: RequestContext, fulfillmentId: ID, state: FulfillmentState): Promise<Fulfillment | FulfillmentStateTransitionError>\n\ntransitionRefundToState(ctx: RequestContext, refundId: ID, state: RefundState, transactionId?: string): Promise<Refund | RefundStateTransitionError>\n\nmodifyOrder(ctx: RequestContext, input: ModifyOrderInput): Promise<ErrorResultUnion<ModifyOrderResult, Order>>\n\ntransitionPaymentToState(ctx: RequestContext, paymentId: ID, state: PaymentState): Promise<ErrorResultUnion<TransitionPaymentToStateResult, Payment>>\n\naddPaymentToOrder(ctx: RequestContext, orderId: ID, input: PaymentInput): Promise<ErrorResultUnion<AddPaymentToOrderResult, Order>>\n\naddManualPaymentToOrder(ctx: RequestContext, input: ManualPaymentInput): Promise<ErrorResultUnion<AddManualPaymentToOrderResult, Order>>\n\nsettlePayment(ctx: RequestContext, paymentId: ID): Promise<ErrorResultUnion<SettlePaymentResult, Payment>>\n\ncancelPayment(ctx: RequestContext, paymentId: ID): Promise<ErrorResultUnion<CancelPaymentResult, Payment>>\n\ncreateFulfillment(ctx: RequestContext, input: FulfillOrderInput): Promise<ErrorResultUnion<AddFulfillmentToOrderResult, Fulfillment>>\n\ngetOrderFulfillments(ctx: RequestContext, order: Order): Promise<Fulfillment[]>\n```\n\n----------------------------------------\n\nTITLE: Defining AutoIncrementIdStrategy Class in TypeScript\nDESCRIPTION: Implementation of an ID strategy that uses auto-increment integers as primary keys. This is Vendure's default entity ID strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-id-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AutoIncrementIdStrategy implements EntityIdStrategy<'increment'> {\n    readonly primaryKeyType = 'increment';\n    decodeId(id: string) => number;\n    encodeId(primaryKey: number) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Entity in TypeScript for Vendure\nDESCRIPTION: This code defines the Asset entity class with properties for file metadata, relationships to other entities, and custom fields. It extends VendureEntity and implements Taggable, ChannelAware, and HasCustomFields interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/asset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Asset extends VendureEntity implements Taggable, ChannelAware, HasCustomFields {\n    constructor(input?: DeepPartial<Asset>)\n    @Column() name: string;\n    @Column('varchar') type: AssetType;\n    @Column() mimeType: string;\n    @Column({ default: 0 }) width: number;\n    @Column({ default: 0 }) height: number;\n    @Column() fileSize: number;\n    @Column() source: string;\n    @Column() preview: string;\n    @Column('simple-json', { nullable: true })\n    focalPoint?: { x: number; y: number };\n    @ManyToMany(type => Tag)\n    @JoinTable()\n    tags: Tag[];\n    @ManyToMany(type => Channel)\n    @JoinTable()\n    channels: Channel[];\n    @OneToMany(type => Collection, collection => collection.featuredAsset)\n    featuredInCollections?: Collection[];\n    @OneToMany(type => ProductVariant, productVariant => productVariant.featuredAsset)\n    featuredInVariants?: ProductVariant[];\n    @OneToMany(type => Product, product => product.featuredAsset)\n    featuredInProducts?: Product[];\n    @Column(type => CustomAssetFields)\n    customFields: CustomAssetFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing and Extending Default Email Handlers in TypeScript\nDESCRIPTION: Explains how to import and adapt default email event handlers for custom business needs, such as changing subject lines or loading additional data. Relies on handler import from '@vendure/email-plugin' and optionally other services (e.g., CustomerService). Input involves event payloads and services; output is an array of handlers with custom settings passed to the plugin. Limitations: handler extension must adhere to handler API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Rather than importing `defaultEmailHandlers`, you can\n// import the handler individually\nimport {\n  orderConfirmationHandler,\n  emailVerificationHandler,\n  passwordResetHandler,\n  emailAddressChangeHandler,\n} from '@vendure/email-plugin';\nimport { CustomerService } from '@vendure/core';\n\n// This allows you to then customize each handler to your needs.\n// For example, let's set a new subject line to the order confirmation:\nconst myOrderConfirmationHandler = orderConfirmationHandler\n  .setSubject(`We received your order!`);\n\n// Another example: loading additional data and setting new\n// template variables.\nconst myPasswordResetHandler = passwordResetHandler\n  .loadData(async ({ event, injector }) => {\n    const customerService = injector.get(CustomerService);\n    const customer = await customerService.findOneByUserId(event.ctx, event.user.id);\n    return { customer };\n  })\n  .setTemplateVars(event => ({\n    passwordResetToken: event.user.getNativeAuthenticationMethod().passwordResetToken,\n    customer: event.data.customer,\n  }));\n\n// Then you pass the handler to the EmailPlugin init method\n// individually\nEmailPlugin.init({\n  handler: [\n    myOrderConfirmationHandler,\n    myPasswordResetHandler,\n    emailVerificationHandler,\n    emailAddressChangeHandler,\n  ],\n  // ...\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Order Code Strategy in TypeScript\nDESCRIPTION: Example of implementing a custom OrderCodeStrategy that integrates with an external order management system to generate order codes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-code-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyOrderCodeStrategy implements OrderCodeStrategy {\n  // Some imaginary service which calls out to an existing external\n  // order management system.\n  private mgmtService: ExternalOrderManagementService;\n\n  init(injector: Injector) {\n    this.mgmtService = injector.get(ExternalOrderManagementService);\n  }\n\n  async generate(ctx: RequestContext) {\n    const result = await this.mgmtService.getAvailableOrderParams();\n    return result.code;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Initializing BraintreePlugin in VendureConfig (TypeScript)\nDESCRIPTION: Demonstrates the import and initialization of the BraintreePlugin within a VendureConfig's `plugins` array. The snippet includes enabling customer vaulting with `storeCustomersInBraintree: true`. It requires prior installation of the plugin and Braintree library, and assumes that a valid Braintree environment (e.g., Sandbox) is provided. Adapt as needed for your project's plugin setup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BraintreePlugin } from '@vendure/payments-plugin/package/braintree';\nimport { Environment } from 'braintree';\n\n// ...\n\nplugins: [\n  BraintreePlugin.init({\n    environment: Environment.Sandbox,\n    // This allows saving customer payment\n    // methods with Braintree (see \"vaulting\"\n    // section below for details)\n    storeCustomersInBraintree: true,\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining JobQueueStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for JobQueueStrategy that extends InjectableStrategy. Provides methods for adding jobs to the queue, starting and stopping queue processing. Used to configure how jobs are persisted and accessed in the JobQueueService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-queue-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JobQueueStrategy extends InjectableStrategy {\n    add<Data extends JobData<Data> = object>(job: Job<Data>, jobOptions?: JobQueueStrategyJobOptions<Data>): Promise<Job<Data>>;\n    start<Data extends JobData<Data> = object>(\n        queueName: string,\n        process: (job: Job<Data>) => Promise<any>,\n    ): Promise<void>;\n    stop<Data extends JobData<Data> = object>(\n        queueName: string,\n        process: (job: Job<Data>) => Promise<any>,\n    ): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Decorator for Database Operations\nDESCRIPTION: Example of using @Transaction decorator from @vendure/core to wrap a mutation in a database transaction.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { Transaction } from '@vendure/core';\n\n@Resolver()\nexport class WishlistResolver {\n\n    @Transaction()\n    @Mutation()\n    addItemToWishlist() {\n        // if an error is thrown here, the\n        // entire transaction will be rolled back\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wishlist Service in TypeScript\nDESCRIPTION: Core service implementation that handles wishlist operations including adding, removing, and fetching wishlist items. Uses dependency injection and implements business logic for wishlist management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport {\n    Customer,\n    ForbiddenError,\n    ID,\n    InternalServerError,\n    ProductVariantService,\n    RequestContext,\n    TransactionalConnection,\n    UserInputError,\n} from '@vendure/core';\n\nimport { WishlistItem } from '../entities/wishlist-item.entity';\n\n@Injectable()\nexport class WishlistService {\n    constructor(\n        private connection: TransactionalConnection,\n        private productVariantService: ProductVariantService,\n    ) {}\n\n    async getWishlistItems(ctx: RequestContext): Promise<WishlistItem[]> {\n        try {\n            const customer = await this.getCustomerWithWishlistItems(ctx);\n            return customer.customFields.wishlistItems;\n        } catch (err: any) {\n            return [];\n        }\n    }\n\n    /**\n     * Adds a new item to the active Customer's wishlist.\n     */\n    async addItem(ctx: RequestContext, variantId: ID): Promise<WishlistItem[]> {\n        const customer = await this.getCustomerWithWishlistItems(ctx);\n        const variant = await this.productVariantService.findOne(ctx, variantId);\n        if (!variant) {\n            throw new UserInputError(`No ProductVariant with the id ${variantId} could be found`);\n        }\n        const existingItem = customer.customFields.wishlistItems.find(i => i.productVariantId === variantId);\n        if (existingItem) {\n            // Item already exists in wishlist, do not\n            // add it again\n            return customer.customFields.wishlistItems;\n        }\n        const wishlistItem = await this.connection\n            .getRepository(ctx, WishlistItem)\n            .save(new WishlistItem({ productVariantId: variantId }));\n        customer.customFields.wishlistItems.push(wishlistItem);\n        await this.connection.getRepository(ctx, Customer).save(customer, { reload: false });\n        return this.getWishlistItems(ctx);\n    }\n\n    /**\n     * Removes an item from the active Customer's wishlist.\n     */\n    async removeItem(ctx: RequestContext, itemId: ID): Promise<WishlistItem[]> {\n        const customer = await this.getCustomerWithWishlistItems(ctx);\n        const itemToRemove = customer.customFields.wishlistItems.find(i => i.id === itemId);\n        if (itemToRemove) {\n            await this.connection.getRepository(ctx, WishlistItem).remove(itemToRemove);\n            customer.customFields.wishlistItems = customer.customFields.wishlistItems.filter(\n                i => i.id !== itemId,\n            );\n        }\n        await this.connection.getRepository(ctx, Customer).save(customer);\n        return this.getWishlistItems(ctx);\n    }\n\n    /**\n     * Gets the active Customer from the context and loads the wishlist items.\n     */\n    private async getCustomerWithWishlistItems(ctx: RequestContext): Promise<Customer> {\n        if (!ctx.activeUserId) {\n            throw new ForbiddenError();\n        }\n        const customer = await this.connection.getRepository(ctx, Customer).findOne({\n            where: { user: { id: ctx.activeUserId } },\n            relations: {\n                customFields: {\n                    wishlistItems: {\n                        productVariant: true,\n                    },\n                },\n            },\n        });\n        if (!customer) {\n            throw new InternalServerError(`Customer was not found`);\n        }\n        return customer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ListQueryBuilder Class Definition in TypeScript\nDESCRIPTION: This snippet defines the ListQueryBuilder class with its constructor and methods for building list queries and checking filter object properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/list-query-builder.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass ListQueryBuilder implements OnApplicationBootstrap {\n    constructor(connection: TransactionalConnection, configService: ConfigService)\n    filterObjectHasProperty(filterObject: FP | NullOptionals<FP> | null | undefined, property: keyof FP) => boolean;\n    build(entity: Type<T>, options: ListQueryOptions<T> = {}, extendedOptions: ExtendedListQueryOptions<T> = {}) => SelectQueryBuilder<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cache Tags for Grouped Invalidation\nDESCRIPTION: Demonstrates how to use cache tags to group related cache entries. This enables invalidating multiple cache entries at once when a related entity changes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst cacheKey = `ProductService.getVariantIds:${productId}`;\n\nawait this.cacheService.set(cacheKey, newValue, {\n    tags: [`Product:${productId}`]\n});\n\n// later\n\nawait this.cacheService.invalidateTags([`Product:${productId}`]);\n```\n\n----------------------------------------\n\nTITLE: Defining the AssetStorageStrategy Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the `AssetStorageStrategy`, which dictates how asset files are stored and retrieved in Vendure. It includes methods for writing files (`writeFileFromBuffer`, `writeFileFromStream`), reading files (`readFileToBuffer`, `readFileToStream`), deleting files (`deleteFile`), checking existence (`fileExists`), and optionally converting identifiers to absolute URLs (`toAbsoluteUrl`). Implementations of this interface are configured via `assetOptions.assetStorageStrategy` in `VendureConfig` and must extend `InjectableStrategy`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/assets/asset-storage-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface AssetStorageStrategy extends InjectableStrategy {\n    writeFileFromBuffer(fileName: string, data: Buffer): Promise<string>;\n    writeFileFromStream(fileName: string, data: Stream): Promise<string>;\n    readFileToBuffer(identifier: string): Promise<Buffer>;\n    readFileToStream(identifier: string): Promise<Stream>;\n    deleteFile(identifier: string): Promise<void>;\n    fileExists(fileName: string): Promise<boolean>;\n    toAbsoluteUrl?(request: Request, identifier: string): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying GraphQL Union Types with Conditional Fragments\nDESCRIPTION: Example GraphQL mutation that handles both success and error cases using conditional fragments. Shows how to access fields specific to different result types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ApplyCoupon($code: String!) {\n  applyCouponCode(couponCode: $code) {\n    __typename\n    ...on Order {\n      id\n      couponCodes\n      totalWithTax\n    }\n    # querying the ErrorResult fields\n    # \"catches\" all possible errors\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n    # you can also specify particular fields\n    # if your client app needs that specific data\n    # as part of handling the error.\n    ...on CouponCodeLimitError {\n      limit\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Type in TypeScript for Vendure\nDESCRIPTION: Defines the ID type as either a string or number, which is used for entity identification in Vendure. The actual type depends on the configured EntityIdStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ID = string | number\n```\n\n----------------------------------------\n\nTITLE: Handling ErrorResults in Vendure Plugin Code\nDESCRIPTION: Example of a service method in a Vendure plugin that handles ErrorResults from internal service calls. Uses isGraphQlErrorResult() to check for errors and throws them appropriately.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable} from '@nestjs/common';\nimport { isGraphQlErrorResult, Order, OrderService, OrderState, RequestContext } from '@vendure/core';\n\n@Injectable()\nexport class MyService {\n\n    constructor(private orderService: OrderService) {}\n\n    async myMethod(ctx: RequestContext, order: Order, newState: OrderState) {\n        const transitionResult = await this.orderService.transitionToState(ctx, order.id, newState);\n        if (isGraphQlErrorResult(transitionResult)) {\n            // The transition failed with an ErrorResult\n            throw transitionResult;\n        } else {\n            // TypeScript will correctly infer the type of `transitionResult` to be `Order`\n            return transitionResult;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SessionService Class Structure in TypeScript\nDESCRIPTION: Definition of the SessionService class that implements EntitySubscriberInterface. Contains methods for managing authenticated and anonymous sessions, handling active orders and channels, and session deletion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/session-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SessionService implements EntitySubscriberInterface {\n    constructor(connection: TransactionalConnection, configService: ConfigService, orderService: OrderService)\n    createNewAuthenticatedSession(ctx: RequestContext, user: User, authenticationStrategyName: string) => Promise<AuthenticatedSession>;\n    createAnonymousSession() => Promise<CachedSession>;\n    getSessionFromToken(sessionToken: string) => Promise<CachedSession | undefined>;\n    serializeSession(session: AuthenticatedSession | AnonymousSession) => CachedSession;\n    setActiveOrder(ctx: RequestContext, serializedSession: CachedSession, order: Order) => Promise<CachedSession>;\n    unsetActiveOrder(ctx: RequestContext, serializedSession: CachedSession) => Promise<CachedSession>;\n    setActiveChannel(serializedSession: CachedSession, channel: Channel) => Promise<CachedSession>;\n    deleteSessionsByUser(ctx: RequestContext, user: User) => Promise<void>;\n    deleteSessionsByActiveOrderId(ctx: RequestContext, activeOrderId: ID) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order Fragment in TypeScript\nDESCRIPTION: Defines a reusable GraphQL fragment for Order objects that captures common order properties including items, prices, shipping, and discounts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ACTIVE_ORDER_FRAGMENT = /*GraphQL*/`\nfragment ActiveOrder on Order {\n  __typename\n  id\n  code\n  couponCodes\n  state\n  currencyCode\n  totalQuantity\n  subTotalWithTax\n  shippingWithTax\n  totalWithTax\n  discounts {\n    description\n    amountWithTax\n  }\n  lines {\n    id\n    unitPriceWithTax\n    quantity\n    linePriceWithTax\n    productVariant {\n      id\n      name\n      sku\n    }\n    featuredAsset {\n      id\n      preview\n    }\n  }\n  shippingLines {\n    shippingMethod {\n      description\n    }\n    priceWithTax\n  }\n}`\n```\n\n----------------------------------------\n\nTITLE: Defining the Fulfillment Entity Class (TypeScript)\nDESCRIPTION: Defines the `Fulfillment` class in TypeScript, extending `VendureEntity` and implementing `HasCustomFields`. It represents the fulfillment of order lines, including properties like `state`, `trackingCode`, `method`, `handlerCode`, and relationships to `FulfillmentLine` and `Order`. Custom fields are also supported via `CustomFulfillmentFields`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/fulfillment.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass Fulfillment extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<Fulfillment>)\n    @Column('varchar') state: FulfillmentState;\n    @Column({ default: '' })\n    trackingCode: string;\n    @Column()\n    method: string;\n    @Column()\n    handlerCode: string;\n    @OneToMany(type => FulfillmentLine, fulfillmentLine => fulfillmentLine.fulfillment)\n    lines: FulfillmentLine[];\n    @ManyToMany(type => Order, order => order.fulfillments)\n    orders: Order[];\n    @Column(type => CustomFulfillmentFields)\n    customFields: CustomFulfillmentFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field UI in Vendure (TypeScript)\nDESCRIPTION: This snippet demonstrates how to override default UI components for custom fields in Vendure's configuration. It shows how to set a currency input for a 'rrp' field on ProductVariant.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'rrp',\n                type: 'int',\n                // highlight-next-line\n                ui: { component: 'currency-form-input' },\n            },\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Products in GraphQL\nDESCRIPTION: GraphQL query for searching products based on criteria defined in a SearchInput parameter. Returns a SearchResponse containing the matching products and additional search metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  search(input: SearchInput!): SearchResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Custom Events in Vendure Service\nDESCRIPTION: Shows how to publish custom events using EventBus.publish() method within a service. Demonstrates creating and publishing a ProductEvent.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { EventBus, ProductEvent, RequestContext, Product } from '@vendure/core';\n\n@Injectable()\nexport class MyPluginService {\n    constructor(private eventBus: EventBus) {}\n\n    async doSomethingWithProduct(ctx: RequestContext, product: Product) {\n        // ... do something\n        await this.eventBus.publish(new ProductEvent(ctx, product, 'updated'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoader Service in Vendure\nDESCRIPTION: Creates a request-scoped DataLoader service that handles multiple dataloaders across different channels. Includes a specific implementation for the 'isSubscription' field resolver with batch loading functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/dataloaders/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport DataLoader from 'dataloader'\n\nconst LoggerCtx = 'SubscriptionDataloaderService'\n\n@Injectable({ scope: Scope.REQUEST }) // Important! Dataloaders live at the request level\nexport class DataloaderService {\n\n  /**\n   * first level is channel identifier, second level is dataloader key\n   */\n  private loaders = new Map<string, Map<string, DataLoader<ID, any>>>()\n\n  constructor(private service: SubscriptionExtensionService) {}\n\n  getLoader(ctx: RequestContext, dataloaderKey: string) {\n    const token = ctx.channel?.code ?? `${ctx.channelId}`\n    \n    Logger.debug(`Dataloader retrieval: ${token}, ${dataloaderKey}`, LoggerCtx)\n\n    if (!this.loaders.has(token)) {\n      this.loaders.set(token, new Map<string, DataLoader<ID, any>>())\n    }\n\n    const channelLoaders = this.loaders.get(token)!\n    if (!channelLoaders.get(dataloaderKey)) {\n      let loader: DataLoader<ID, any>\n\n      switch (dataloaderKey) {\n        case 'is-subscription':\n          loader = new DataLoader<ID, any>((ids) =>\n            this.batchLoadIsSubscription(ctx, ids as ID[]),\n          )\n          break\n        // Implement cases for your other dataloaders here\n        default:\n          throw new Error(`Unknown dataloader key ${dataloaderKey}`)\n      }\n\n      channelLoaders.set(dataloaderKey, loader)\n    }\n    return channelLoaders.get(dataloaderKey)!\n  }\n\n  private async batchLoadIsSubscription(\n    ctx: RequestContext,\n    ids: ID[],\n  ): Promise<Boolean[]> {\n    // Returns an array of ids that represent those input ids that are subscriptions\n    // Remember: this array can be smaller than the input array\n    const subscriptionIds = await this.service.whichSubscriptions(ctx, ids)\n\n    Logger.debug(`Dataloader is-subscription: ${ids}: ${subscriptionIds}`, LoggerCtx)\n\n    return ids.map((id) => subscriptionIds.includes(id)) // Important! preserve order and size of input ids array\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Avatar Resolver Implementation\nDESCRIPTION: Resolver implementation for handling avatar file uploads and updating customer records\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/uploading-files/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Mutation, Resolver } from '@nestjs/graphql';\nimport { Asset } from '@vendure/common/lib/generated-types';\nimport {\n    Allow, AssetService, Ctx, CustomerService, isGraphQlErrorResult,\n    Permission, RequestContext, Transaction\n} from '@vendure/core';\n\n@Resolver()\nexport class CustomerAvatarResolver {\n    constructor(private assetService: AssetService, private customerService: CustomerService) {}\n\n    @Transaction()\n    @Mutation()\n    @Allow(Permission.Authenticated)\n    async setCustomerAvatar(\n        @Ctx() ctx: RequestContext,\n        @Args() args: { file: any },\n    ): Promise<Asset | undefined> {\n        const userId = ctx.activeUserId;\n        if (!userId) {\n            return;\n        }\n        const customer = await this.customerService.findOneByUserId(ctx, userId);\n        if (!customer) {\n            return;\n        }\n        const asset = await this.assetService.create(ctx, {\n            file: args.file,\n            tags: ['avatar'],\n        });\n        if (isGraphQlErrorResult(asset)) {\n            throw asset;\n        }\n        await this.customerService.update(ctx, {\n            id: customer.id,\n            customFields: {\n                avatarId: asset.id,\n            },\n        });\n\n        return asset;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Order Type Definition for Vendure Admin API\nDESCRIPTION: Defines the Order type for the Vendure GraphQL API, including order properties such as state management, customer details, line items, financial calculations, and relationships to other entities like payments and fulfillments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_111\n\nLANGUAGE: graphql\nCODE:\n```\ntype Order {\n  nextStates: [String!]!\n  modifications: [OrderModification!]!\n  sellerOrders: [Order!]\n  aggregateOrder: Order\n  aggregateOrderId: ID\n  channels: [Channel!]!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  type: OrderType!\n  \"\"\"\n  The date & time that the Order was placed, i.e. the Customer\n  completed the checkout and the Order is no longer \"active\"\n  \"\"\"\n  orderPlacedAt: DateTime\n  \"\"\"\n  A unique code for the Order\n  \"\"\"\n  code: String!\n  state: String!\n  \"\"\"\n  An order is active as long as the payment process has not been completed\n  \"\"\"\n  active: Boolean!\n  customer: Customer\n  shippingAddress: OrderAddress\n  billingAddress: OrderAddress\n  lines: [OrderLine!]!\n  \"\"\"\n  Surcharges are arbitrary modifications to the Order total which are neither\n  ProductVariants nor discounts resulting from applied Promotions. For example,\n  one-off discounts based on customer interaction, or surcharges based on payment\n  methods.\n  \"\"\"\n  surcharges: [Surcharge!]!\n  discounts: [Discount!]!\n  \"\"\"\n  An array of all coupon codes applied to the Order\n  \"\"\"\n  couponCodes: [String!]!\n  \"\"\"\n  Promotions applied to the order. Only gets populated after the payment process has completed.\n  \"\"\"\n  promotions: [Promotion!]!\n  payments: [Payment!]\n  fulfillments: [Fulfillment!]\n  totalQuantity: Int!\n  \"\"\"\n  The subTotal is the total of all OrderLines in the Order. This figure also includes any Order-level\n  discounts which have been prorated (proportionally distributed) amongst the items of each OrderLine.\n  To get a total of all OrderLines which does not account for prorated discounts, use the\n  sum of `OrderLine.discountedLinePrice` values.\n  \"\"\"\n  subTotal: Money!\n  \"\"\"\n  Same as subTotal, but inclusive of tax\n  \"\"\"\n  subTotalWithTax: Money!\n  currencyCode: CurrencyCode!\n  shippingLines: [ShippingLine!]!\n  shipping: Money!\n  shippingWithTax: Money!\n  \"\"\"\n  Equal to subTotal plus shipping\n  \"\"\"\n  total: Money!\n  \"\"\"\n  The final payable amount. Equal to subTotalWithTax plus shippingWithTax\n  \"\"\"\n  totalWithTax: Money!\n  \"\"\"\n  A summary of the taxes being applied to this Order\n  \"\"\"\n  taxSummary: [OrderTaxSummary!]!\n  history(options: HistoryEntryListOptions): HistoryEntryList!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query Example\nDESCRIPTION: Demonstrates a simple GraphQL query to fetch a product by slug\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  product(slug: \"football\") {\n    id\n    name\n    slug\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a REST API Plugin in Vendure\nDESCRIPTION: This example demonstrates how to create a simple plugin that adds a REST endpoint for querying products in Vendure. It uses the VendurePlugin decorator to define the plugin structure and imports necessary dependencies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Controller, Get } from '@nestjs/common';\nimport { Ctx, PluginCommonModule, ProductService, RequestContext, VendurePlugin } from '@vendure/core';\n\n@Controller('products')\nexport class ProductsController {\n    constructor(private productService: ProductService) {}\n\n    @Get()\n    findAll(@Ctx() ctx: RequestContext) {\n        return this.productService.findAll(ctx);\n    }\n}\n\n\n//A simple plugin which adds a REST endpoint for querying products.\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    controllers: [ProductsController],\n})\nexport class RestPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shipping Calculator in TypeScript\nDESCRIPTION: This code defines a custom ShippingCalculator that consults an external data source to calculate shipping costs and estimated delivery times. It includes configuration for tax rates and returns metadata about the shipping estimate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, ShippingCalculator } from '@vendure/core';\nimport { shippingDataSource } from './shipping-data-source';\n\nexport const externalShippingCalculator = new ShippingCalculator({\n    code: 'external-shipping-calculator',\n    description: [{languageCode: LanguageCode.en, value: 'Calculates cost from external source'}],\n    args: {\n        taxRate: {\n            type: 'int',\n            ui: {component: 'number-form-input', suffix: '%'},\n            label: [{languageCode: LanguageCode.en, value: 'Tax rate'}],\n        },\n    },\n    calculate: async (ctx, order, args) => {\n        const { rate, deliveryDate, courier } = await shippingDataSource.getRate({\n            destination: order.shippingAddress,\n            contents: order.lines,\n        });\n\n        return {\n            price: rate,\n            priceIncludesTax: ctx.channel.pricesIncludeTax,\n            taxRate: args.taxRate,\n            metadata: { courier, deliveryDate },\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: React Slider Form Input Component\nDESCRIPTION: Custom React component implementation for rendering a range slider input with value display using hooks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { useFormControl, ReactFormInputOptions, useInjector } from '@vendure/admin-ui/react';\n\nexport function SliderFormInput({ readonly, config }: ReactFormInputOptions) {\n    const { value, setFormValue } = useFormControl();\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const val = +e.target.value;\n        setFormValue(val);\n    };\n    return (\n        <>\n            <input\n                type=\"range\"\n                readOnly={readonly}\n                min={config.min || 0}\n                max={config.max || 100}\n                value={value}\n                onChange={handleChange}\n            />\n            {value}\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Route Components in Vendure Admin UI\nDESCRIPTION: Example showing how to register route components for a product reviews feature. Demonstrates both simple and detailed route registration with breadcrumb configuration, GraphQL queries, and entity handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/routes/register-route-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\nimport { registerReactRouteComponent } from '@vendure/admin-ui/react';\n\nimport { ProductReviewDetailComponent } from './components/product-review-detail/product-review-detail.component';\nimport { AllProductReviewsList } from './components/all-product-reviews-list/all-product-reviews-list.component';\nimport { GetReviewDetailDocument } from './generated-types';\n\nexport default [\n    registerRouteComponent({\n        path: '',\n        component: AllProductReviewsList,\n        breadcrumb: 'Product reviews',\n    }),\n    registerRouteComponent({\n        path: ':id',\n        component: ProductReviewDetailComponent,\n        query: GetReviewDetailDocument,\n        entityKey: 'productReview',\n        getBreadcrumbs: entity => [\n            {\n                label: 'Product reviews',\n                link: ['/extensions', 'product-reviews'],\n            },\n            {\n                label: `#${entity?.id} (${entity?.product.name})`,\n                link: [],\n            },\n        ],\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionCacheStrategy with Redis in TypeScript\nDESCRIPTION: Provides a full TypeScript implementation of `SessionCacheStrategy` using Redis via the `ioredis` library. It defines `RedisSessionCacheStrategy` with `init`, `destroy`, `get`, `set`, and `delete` methods for Redis interaction, and includes a `RedisSessionCachePlugin` to integrate the strategy into Vendure configuration. Requires the `ioredis` package dependency.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/session-cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { CachedSession, Logger, SessionCacheStrategy, VendurePlugin } from '@vendure/core';\nimport { Redis, RedisOptions } from 'ioredis';\n\nexport interface RedisSessionCachePluginOptions {\n  namespace?: string;\n  redisOptions?: RedisOptions;\n}\nconst loggerCtx = 'RedisSessionCacheStrategy';\nconst DEFAULT_NAMESPACE = 'vendure-session-cache';\nconst DEFAULT_TTL = 86400;\n\nexport class RedisSessionCacheStrategy implements SessionCacheStrategy {\n  private client: Redis;\n  constructor(private options: RedisSessionCachePluginOptions) {}\n\n  init() {\n    this.client = new Redis(this.options.redisOptions as RedisOptions);\n    this.client.on('error', err => Logger.error(err.message, loggerCtx, err.stack));\n  }\n\n  async destroy() {\n    await this.client.quit();\n  }\n\n  async get(sessionToken: string): Promise<CachedSession | undefined> {\n    try {\n      const retrieved = await this.client.get(this.namespace(sessionToken));\n      if (retrieved) {\n        try {\n          return JSON.parse(retrieved);\n        } catch (e: any) {\n          Logger.error(`Could not parse cached session data: ${e.message}`, loggerCtx);\n        }\n      }\n    } catch (e: any) {\n      Logger.error(`Could not get cached session: ${e.message}`, loggerCtx);\n    }\n  }\n\n  async set(session: CachedSession) {\n    try {\n      await this.client.set(this.namespace(session.token), JSON.stringify(session), 'EX', DEFAULT_TTL);\n    } catch (e: any) {\n      Logger.error(`Could not set cached session: ${e.message}`, loggerCtx);\n    }\n  }\n\n  async delete(sessionToken: string) {\n    try {\n      await this.client.del(this.namespace(sessionToken));\n    } catch (e: any) {\n      Logger.error(`Could not delete cached session: ${e.message}`, loggerCtx);\n    }\n  }\n\n  clear() {\n    // not implemented\n  }\n\n  private namespace(key: string) {\n    return `${this.options.namespace ?? DEFAULT_NAMESPACE}:${key}`;\n  }\n}\n\n@VendurePlugin({\n  configuration: config => {\n    config.authOptions.sessionCacheStrategy = new RedisSessionCacheStrategy(\n      RedisSessionCachePlugin.options,\n    );\n    return config;\n  },\n})\nexport class RedisSessionCachePlugin {\n  static options: RedisSessionCachePluginOptions;\n  static init(options: RedisSessionCachePluginOptions) {\n    this.options = options;\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CacheConfig Interface in TypeScript\nDESCRIPTION: This snippet defines the CacheConfig interface used to configure a new Cache instance in Vendure's TypeScript API. It specifies a required getKey function for generating cache keys from string or numeric IDs and an optional options property for additional cache storage settings. The interface is fundamental for creating customizable and conflict-resistant cache strategies, and is expected in packages using Vendure\\'s core caching utilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/cache-config.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CacheConfig {\n    getKey: (id: string | number) => string;\n    options?: SetCacheKeyOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Next Order States Query Response in JSON\nDESCRIPTION: Shows the response containing available next states for the current order. In this example, the order can transition to either 'ArrangingPayment' or 'Cancelled'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"nextOrderStates\": [\n      \"ArrangingPayment\",\n      \"Cancelled\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vendure Layout Components in React\nDESCRIPTION: Example showing how to use Vendure layout components in React, importing PageBlock, ActionBar, Card, and PageDetailLayout from the @vendure/admin-ui/react package. The component structure mirrors the Angular implementation with equivalent functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { \n    ActionBar,\n    Card,\n    PageBlock,\n    PageDetailLayout,\n} from '@vendure/admin-ui/react';\n\nexport function DemoComponent() {\n    return (\n        <>\n            <PageBlock>\n                <ActionBar leftContent={<div>Action bar left contents</div>}>\n                    <button className=\"button primary\">Primary action</button>\n                </ActionBar>\n            </PageBlock>\n\n            <PageDetailLayout\n                sidebar={\n                    <div>\n                        <Card>Sidebar content</Card>\n                    </div>\n                }\n            >\n                <PageBlock>\n                    <Card title=\"Card\">\n                        This is a card. On a detail page, content should usually be placed inside a card.\n                    </Card>\n                </PageBlock>\n            </PageDetailLayout>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Authentication Strategies in Vendure\nDESCRIPTION: This TypeScript example shows how to configure multiple authentication strategies in Vendure, including the default NativeAuthenticationStrategy and custom strategies for social login and SSO.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig, NativeAuthenticationStrategy } from '@vendure/core';\n\nimport { FacebookAuthenticationStrategy } from './plugins/authentication/facebook-authentication-strategy';\nimport { GoogleAuthenticationStrategy } from './plugins/authentication/google-authentication-strategy';\nimport { KeycloakAuthenticationStrategy } from './plugins/authentication/keycloak-authentication-strategy';\n\nexport const config: VendureConfig = {\n  authOptions: {\n      shopAuthenticationStrategy: [\n        new NativeAuthenticationStrategy(),\n        new FacebookAuthenticationStrategy(),\n        new GoogleAuthenticationStrategy(),\n      ],\n      adminAuthenticationStrategy: [\n        new NativeAuthenticationStrategy(),\n        new KeycloakAuthenticationStrategy(),\n      ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntityAssetInput Interface in TypeScript\nDESCRIPTION: This code snippet defines the EntityAssetInput interface, which is used when updating entities that implement EntityWithAssets. It includes optional properties for asset IDs and featured asset ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/asset-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EntityAssetInput {\n    assetIds?: ID[] | null;\n    featuredAssetId?: ID | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up TanStack Query Provider in React Application\nDESCRIPTION: Initializes a React application with TanStack Query integration. Creates a QueryClient instance and wraps the App component with QueryClientProvider to enable query capabilities throughout the application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport * as React from 'react';\nimport { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nimport App from './App';\n\n// Create a client\nconst queryClient = new QueryClient();\n\nconst rootElement = document.getElementById('root');\nconst root = createRoot(rootElement);\n\nroot.render(\n    <StrictMode>\n        <QueryClientProvider client={queryClient}>\n            <App />\n        </QueryClientProvider>\n    </StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Tag by ID with GraphQL\nDESCRIPTION: This GraphQL query fetches a specific tag by its ID. It returns a `Tag` object, requiring an `ID` as input, which must be a unique identifier for the tag.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_42\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntag(id: ID!): Tag!\n}\n```\n\n----------------------------------------\n\nTITLE: Email Plugin Configuration\nDESCRIPTION: TypeScript configuration for Vendure's EmailPlugin, setting up verification and password reset URLs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nEmailPlugin.init({\n    route: 'mailbox',\n    handlers: defaultEmailHandlers,\n    templatePath: path.join(__dirname, '../static/email/templates'),\n    outputPath: path.join(__dirname, '../static/email/output'),\n    globalTemplateVars: {\n        fromAddress: '\"Vendure Demo Store\" <noreply@vendure.io>',\n        verifyEmailAddressUrl: 'https://demo.vendure.io/storefront/account/verify',\n        passwordResetUrl: 'https://demo.vendure.io/storefront/account/reset-password',\n        changeEmailAddressUrl: 'https://demo.vendure.io/storefront/account/change-email-address'\n    },\n    devMode: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Review List Component Template in Angular\nDESCRIPTION: HTML template for the review list component using Vendure's DataTable2Component with column definitions and filtering options\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-list-views/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n        <vdr-ab-right>\n            <a class=\"btn btn-primary\" *vdrIfPermissions=\"['CreateReview']\" [routerLink]=\"['./', 'create']\">\n                <clr-icon shape=\"plus\"></clr-icon>\n                Create a review\n            </a>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<vdr-data-table-2\n        id=\"review-list\"\n        [items]=\"items$ | async\"\n        [itemsPerPage]=\"itemsPerPage$ | async\"\n        [totalItems]=\"totalItems$ | async\"\n        [currentPage]=\"currentPage$ | async\"\n        [filters]=\"filters\"\n        (pageChange)=\"setPageNumber($event)\"\n        (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <vdr-bulk-action-menu\n            locationId=\"review-list\"\n            [hostComponent]=\"this\"\n            [selectionManager]=\"selectionManager\"\n    />\n    \n    <vdr-dt2-search\n            [searchTermControl]=\"searchTermControl\"\n            searchTermPlaceholder=\"Filter by title\"\n    />\n    \n    <vdr-dt2-column id=\"id\" [heading]=\"'common.id' | translate\" [hiddenByDefault]=\"true\">\n        <ng-template let-review=\"item\">\n            {{ review.id }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n            id=\"created-at\"\n            [heading]=\"'common.created-at' | translate\"\n            [hiddenByDefault]=\"true\"\n            [sort]=\"sorts.get('createdAt')\"\n    >\n        <ng-template let-review=\"item\">\n            {{ review.createdAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column\n            id=\"updated-at\"\n            [heading]=\"'common.updated-at' | translate\"\n            [hiddenByDefault]=\"true\"\n            [sort]=\"sorts.get('updatedAt')\"\n    >\n        <ng-template let-review=\"item\">\n            {{ review.updatedAt | localeDate : 'short' }}\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column id=\"title\" heading=\"Title\" [optional]=\"false\" [sort]=\"sorts.get('title')\">\n        <ng-template let-review=\"item\">\n            <a class=\"button-ghost\" [routerLink]=\"['./', review.id]\">\n                <span>{{ review.title }}</span>\n                <clr-icon shape=\"arrow right\"></clr-icon>\n            </a>\n        </ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column id=\"rating\" heading=\"Rating\" [sort]=\"sorts.get('rating')\">\n        <ng-template let-review=\"item\"><my-star-rating-component [rating]=\"review.rating\"    /></ng-template>\n    </vdr-dt2-column>\n    <vdr-dt2-column id=\"author\" heading=\"Author\" [sort]=\"sorts.get('authorName')\">\n        <ng-template let-review=\"item\">{{ review.authorName }}</ng-template>\n    </vdr-dt2-column>\n</vdr-data-table-2>\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Scheduled Task Script in TypeScript\nDESCRIPTION: Implementation of a standalone script that generates a sitemap using Vendure's bootstrapWorker. The script initializes necessary services and executes the sitemap generation task.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/scheduled-tasks/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker, Logger, RequestContextService } from '@vendure/core';\nimport { SitemapService } from './plugins/sitemap';\n\nimport { config } from './vendure-config';\n\nif (require.main === module) {\n    generateSitemap()\n        .then(() => process.exit(0))\n        .catch(err => {\n            Logger.error(err);\n            process.exit(1);\n        });\n}\n\nasync function generateSitemap() {\n    const { app } = await bootstrapWorker(config);\n    const sitemapService = app.get(SitemapService);\n    const ctx = await app.get(RequestContextService).create({\n        apiType: 'admin',\n    });\n    \n    await sitemapService.generateSitemap(ctx);\n\n    Logger.info(`Completed sitemap generation`);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Transition Validation in Vendure\nDESCRIPTION: Demonstrates how to implement a custom order process that validates a customer's tax ID before allowing transition to payment state. Uses the onTransitionStart hook to perform validation logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProcess } from '@vendure/core';\nimport { TaxIdService } from './services/tax-id.service';\n\nlet taxIdService: TaxIdService;\n\nconst customerValidationProcess: OrderProcess<'ValidatingCustomer'> = {\n  transitions: {\n    AddingItems: {\n      to: ['ValidatingCustomer'],\n      mergeStrategy: 'replace',\n    },\n    ValidatingCustomer: {\n      to: ['ArrangingPayment', 'AddingItems'],\n    },\n  },\n\n  init(injector) {\n    taxIdService = injector.get(TaxIdService);\n  },\n\n  async onTransitionStart(fromState, toState, data) {\n    if (fromState === 'ValidatingCustomer' && toState === 'ArrangingPayment') {\n      const isValid = await taxIdService.verifyTaxId(data.order.customer);\n      if (!isValid) {\n        return `The tax ID is not valid`;\n      }\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Items from an Order - Vendure TypeScript\nDESCRIPTION: Removes several OrderLines in a batch, using order context, orderId, and an array of orderLineIds. Returns a Promise resolving to an ErrorResultUnion of RemoveOrderItemsResult or Order. Reduces database fetches and computes price finalization once, improving efficiency over repeated removeItemFromOrder calls.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, orderLineIds: ID[]) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Order with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for adding a product variant to the order with proper error handling. Includes fragments to handle different response types including error cases.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddItemToOrder($variantId: ID!, $quantity: Int!) {\n  addItemToOrder(productVariantId: $variantId, quantity: $quantity) {\n    __typename\n    ...UpdatedOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n    ... on InsufficientStockError {\n      quantityAvailable\n      order {\n        ...UpdatedOrder\n      }\n    }\n  }\n}\n\nfragment UpdatedOrder on Order {\n  id\n  code\n  state\n  totalQuantity\n  totalWithTax\n  currencyCode\n  lines {\n    id\n    unitPriceWithTax\n    quantity\n    linePriceWithTax\n    productVariant {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Session Cache Strategy with LRU in TypeScript\nDESCRIPTION: Defines the TypeScript class InMemorySessionCacheStrategy that implements the SessionCacheStrategy interface with an in-memory LRU caching mechanism. The class exposes methods to set, get, delete, and clear cached sessions and allows configuring the LRU cache size via the constructor's optional parameter. All operations work with session tokens or CachedSession objects, but being memory-only, this approach is not suitable for distributed/multi-server environments. The code illustrates interface compliance without specific implementation bodies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/in-memory-session-cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass InMemorySessionCacheStrategy implements SessionCacheStrategy {\n    constructor(cacheSize?: number)\n    delete(sessionToken: string) => ;\n    get(sessionToken: string) => ;\n    set(session: CachedSession) => ;\n    clear() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Login Mutation in GraphQL for Vendure\nDESCRIPTION: This GraphQL mutation is used to log in a user in the Vendure e-commerce system. It returns the user's ID and identifier on successful login, or error information if the login fails.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Login {\n    login(username: \"alec.breitenberg@gmail.com\", password: \"test\") {\n        ... on CurrentUser {\n            id\n            identifier\n        }\n        ... on ErrorResult {\n            errorCode\n            message\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Login Mutation\nDESCRIPTION: GraphQL mutation for authenticating a customer with email and password, supporting remember me functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation LogIn($emailAddress: String!, $password: String!, $rememberMe: Boolean!) {\n  login(username: $emailAddress, password: $password, rememberMe: $rememberMe) {\n    ... on  CurrentUser {\n      id\n      identifier\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ShippingLine Class in TypeScript\nDESCRIPTION: The ShippingLine class models the application of a shipping method to an order in Vendure. This TypeScript class includes properties for identifiers, prices, discounts, and tax calculations. Dependencies include the VendureEntity base class and interfaces such as HasCustomFields. The expected input is optionally a partial ShippingLine instance, and expected outputs include various attributes of a shipping line. The class enforces constraints such as the cascading deletion of related orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/shipping-line.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShippingLine extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<ShippingLine>)\n    @EntityId()\n    shippingMethodId: ID | null;\n    @Index()\n    @ManyToOne(type => ShippingMethod)\n    shippingMethod: ShippingMethod;\n    @Index()\n    @ManyToOne(type => Order, order => order.shippingLines, { onDelete: 'CASCADE' })\n    order: Order;\n    @Money()\n    listPrice: number;\n    @Column()\n    listPriceIncludesTax: boolean;\n    @Column('simple-json')\n    adjustments: Adjustment[];\n    @Column('simple-json')\n    taxLines: TaxLine[];\n    @OneToMany(type => OrderLine, orderLine => orderLine.shippingLine)\n    orderLines: OrderLine[];\n    @Column(type => CustomShippingLineFields)\n    customFields: CustomShippingLineFields;\n    price: number\n    priceWithTax: number\n    discountedPrice: number\n    discountedPriceWithTax: number\n    taxRate: number\n    discounts: Discount[]\n    addAdjustment(adjustment: Adjustment) => ;\n    clearAdjustments() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRateService Class in TypeScript\nDESCRIPTION: This code snippet defines the TaxRateService class, which contains methods for managing TaxRate entities in Vendure. It includes a constructor and methods for finding, creating, updating, and deleting tax rates, as well as determining the applicable tax rate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/tax-rate-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TaxRateService {\n    constructor(connection: TransactionalConnection, eventBus: EventBus, listQueryBuilder: ListQueryBuilder, configService: ConfigService, customFieldRelationService: CustomFieldRelationService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<TaxRate>, relations?: RelationPaths<TaxRate>) => Promise<PaginatedList<TaxRate>>;\n    findOne(ctx: RequestContext, taxRateId: ID, relations?: RelationPaths<TaxRate>) => Promise<TaxRate | undefined>;\n    create(ctx: RequestContext, input: CreateTaxRateInput) => Promise<TaxRate>;\n    update(ctx: RequestContext, input: UpdateTaxRateInput) => Promise<TaxRate>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    getApplicableTaxRate(ctx: RequestContext, zone: Zone | ID, taxCategory: TaxCategory | ID) => Promise<TaxRate>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing DataLoader Package\nDESCRIPTION: Command to install the dataloader npm package which is required for implementing GraphQL dataloaders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/dataloaders/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install dataloader\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Authentication Call\nDESCRIPTION: An example GraphQL call for authenticating using the defined input type strategy, which includes a token parameter to perform the authentication. This aids in visualizing how to structure authentication requests in a GraphQL format.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/authentication-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\nauthenticate(input: {\\n  my_auth: {\\n    token: \"foo\"\\n  }\\n}) {\\n  # ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Post-Transition Actions in Vendure\nDESCRIPTION: Shows how to implement post-transition logic using onTransitionEnd hook to create referrals when orders are completed with a referral code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProcess, OrderState } from '@vendure/core';\n\nimport { ReferralService } from '../service/referral.service';\n\nlet referralService: ReferralService;\n\nexport const referralOrderProcess: OrderProcess<OrderState> = {\n    init: (injector) => {\n        referralService = injector.get(ReferralService);\n    },\n    onTransitionEnd: async (fromState, toState, data) => {\n        const { order, ctx } = data;\n        if (toState === 'PaymentSettled') {\n            if (order.customFields.referralCode) {\n                await referralService.createReferralForOrder(ctx, order);\n            }\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TestShippingMethodInput Input Type in GraphQL\nDESCRIPTION: Input type for testing a specific shipping method configuration. Includes the checker and calculator operations along with shipping address and order lines to evaluate shipping costs and eligibility.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_170\n\nLANGUAGE: graphql\nCODE:\n```\ninput TestShippingMethodInput {\n  checker: ConfigurableOperationInput!\n\n  calculator: ConfigurableOperationInput!\n\n  shippingAddress: CreateAddressInput!\n\n  lines: [TestShippingMethodOrderLineInput!]!\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BullMQJobQueueStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the BullMQJobQueueStrategy class, which implements the InspectableJobQueueStrategy interface. It provides methods for initializing, adding, canceling, finding, and managing jobs in a queue using BullMQ.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass BullMQJobQueueStrategy implements InspectableJobQueueStrategy {\n    init(injector: Injector) => Promise<void>;\n    destroy() => ;\n    add(job: Job<Data>) => Promise<Job<Data>>;\n    cancelJob(jobId: string) => Promise<Job | undefined>;\n    findMany(options?: JobListOptions) => Promise<PaginatedList<Job>>;\n    findManyById(ids: ID[]) => Promise<Job[]>;\n    findOne(id: ID) => Promise<Job | undefined>;\n    removeSettledJobs(queueNames?: string[], olderThan?: Date) => Promise<number>;\n    start(queueName: string, process: (job: Job<Data>) => Promise<any>) => Promise<void>;\n    stop(queueName: string, process: (job: Job<Data>) => Promise<any>) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Channel-Aware Entity with ChannelService\nDESCRIPTION: Demonstrates how to create a channel-aware entity using the ChannelService's assignToCurrentChannel helper function. Shows proper channel assignment during entity creation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/channel-aware/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChannelService } from '@vendure/core';\n\nexport class RequestService {\n\n    constructor(private channelService: ChannelService) {}\n\n    async create(ctx: RequestContext, input: CreateRequestInput): Promise<ProductRequest> {\n        const request = new ProductRequest(input);\n        await this.channelService.assignToCurrentChannel(input, ctx);\n        \n        return await this.connection.getRepository(ProductRequest).save(request);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariant GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductVariant, including its properties such as id, product, productId, createdAt, updatedAt, languageCode, sku, name, featuredAsset, assets, price, currencyCode, priceWithTax, stockLevel, taxRateApplied, taxCategory, options, facetValues, translations, and customFields. It represents a specific variant of a product.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_95\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariant {\n  id: ID!\n  product: Product!\n  productId: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  sku: String!\n  name: String!\n  featuredAsset: Asset\n  assets: [Asset!]!\n  price: Money!\n  currencyCode: CurrencyCode!\n  priceWithTax: Money!\n  stockLevel: String!\n  taxRateApplied: TaxRate!\n  taxCategory: TaxCategory!\n  options: [ProductOption!]!\n  facetValues: [FacetValue!]!\n  translations: [ProductVariantTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Cache Strategy Class in TypeScript\nDESCRIPTION: Defines a RedisCacheStrategy class that implements the CacheStrategy interface. The class provides methods for initializing, destroying, getting, setting, deleting cache entries and invalidating cache tags using Redis as the storage backend.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/redis-cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RedisCacheStrategy implements CacheStrategy {\n    constructor(options: RedisCachePluginInitOptions)\n    init() => ;\n    destroy() => ;\n    get(key: string) => Promise<T | undefined>;\n    set(key: string, value: T, options?: SetCacheKeyOptions) => Promise<void>;\n    delete(key: string) => Promise<void>;\n    invalidateTags(tags: string[]) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Collection Job Buffer in TypeScript\nDESCRIPTION: Example implementation of a JobBuffer for collection filter jobs. This buffer collects 'apply-collection-filters' jobs and reduces them by aggregating all collectionIds into a single deduplicated job when flushed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-buffer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a buffer which will collect all the\n// 'apply-collection-filters' jobs and buffer them.\nexport class CollectionJobBuffer implements JobBuffer<ApplyCollectionFiltersJobData> {\n  readonly id = 'apply-collection-filters-buffer';\n\n  collect(job: Job): boolean {\n    return job.queueName === 'apply-collection-filters';\n  }\n\n\n  // When the buffer gets flushed, this function will be passed all the collected jobs\n  // and will reduce them down to a single job that has aggregated all of the collectionIds.\n  reduce(collectedJobs: Array<Job<ApplyCollectionFiltersJobData>>): Array<Job<any>> {\n    // Concatenate all the collectionIds from all the events that were buffered\n    const collectionIdsToUpdate = collectedJobs.reduce((result, job) => {\n      return [...result, ...job.data.collectionIds];\n    }, [] as ID[]);\n\n    const referenceJob = collectedJobs[0];\n\n    // Create a new Job containing all the concatenated collectionIds,\n    // de-duplicated to include each collectionId only once.\n    const batchedCollectionJob = new Job<ApplyCollectionFiltersJobData>({\n      ...referenceJob,\n      id: undefined,\n      data: {\n        collectionIds: unique(collectionIdsToUpdate),\n        ctx: referenceJob.data.ctx,\n        applyToChangedVariantsOnly: referenceJob.data.applyToChangedVariantsOnly,\n      },\n    });\n\n    // Only this single job will get added to the job queue\n    return [batchedCollectionJob];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultSearchPlugin Class Definition (TypeScript)\nDESCRIPTION: This snippet shows the class definition of DefaultSearchPlugin. It implements OnApplicationBootstrap and OnApplicationShutdown interfaces, and includes static options and an init method for configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultSearchPlugin implements OnApplicationBootstrap, OnApplicationShutdown {\n    static options: DefaultSearchPluginInitOptions = {};\n    init(options: DefaultSearchPluginInitOptions) => Type<DefaultSearchPlugin>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CalculatedPropertySubscriber Class in TypeScript\nDESCRIPTION: This code defines the CalculatedPropertySubscriber class which implements EntitySubscriberInterface. It includes two methods: afterLoad and afterInsert, which are called after an entity is loaded or inserted respectively.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/calculated-property-subscriber.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CalculatedPropertySubscriber implements EntitySubscriberInterface {\n    afterLoad(event: any) => ;\n    afterInsert(event: InsertEvent<any>) => Promise<any> | void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Synchronization Across Channels in Vendure\nDESCRIPTION: Example configuration to enable synchronization of product variant prices across all channels using DefaultProductVariantPriceUpdateStrategy with syncPricesAcrossChannels set to true.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/channels/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultProductVariantPriceUpdateStrategy, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    // highlight-start\n    productVariantPriceUpdateStrategy: new DefaultProductVariantPriceUpdateStrategy({\n        syncPricesAcrossChannels: true,\n    }),\n    // highlight-end\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Address Entity Class in TypeScript for Vendure\nDESCRIPTION: This code defines the Address entity class for the Vendure e-commerce framework. It extends VendureEntity and implements HasCustomFields. The class includes properties for storing various address details such as full name, company, street lines, city, province, postal code, country, and phone number. It also has flags for default shipping and billing addresses, and supports custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/address.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Address extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<Address>)\n    @Index()\n    @ManyToOne(type => Customer, customer => customer.addresses)\n    customer: Customer;\n    @Column({ default: '' }) fullName: string;\n    @Column({ default: '' })\n    company: string;\n    @Column() streetLine1: string;\n    @Column({ default: '' })\n    streetLine2: string;\n    @Column({ default: '' }) city: string;\n    @Column({ default: '' })\n    province: string;\n    @Column({ default: '' }) postalCode: string;\n    @Index()\n    @ManyToOne(type => Country)\n    country: Country;\n    @Column({ default: '' })\n    phoneNumber: string;\n    @Column({ default: false })\n    defaultShippingAddress: boolean;\n    @Column({ default: false })\n    defaultBillingAddress: boolean;\n    @Column(type => CustomAddressFields)\n    customFields: CustomAddressFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Orders via Structured Input - GraphQL\nDESCRIPTION: Defines the input for modifying an order, including fields for dry run mode, order ID, item adjustments, surcharges, address updates, notes, refunds, options, coupon codes, and shipping method IDs. Incorporates both deprecated and new refund mechanisms. Requires references to various input types including AddItemInput, SurchargeInput, and AdministratorRefundInput.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_102\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ModifyOrderInput {\n  dryRun: Boolean!\n  orderId: ID!\n  addItems: [AddItemInput!]\n  adjustOrderLines: [OrderLineInput!]\n  surcharges: [SurchargeInput!]\n  updateShippingAddress: UpdateOrderAddressInput\n  updateBillingAddress: UpdateOrderAddressInput\n  note: String\n  \"\"\"\n  Deprecated in v2.2.0. Use <code>refunds</code> instead to allow multiple refunds to be\n  applied in the case that multiple payment methods have been used on the order.\n  \"\"\"\n  refund: AdministratorRefundInput\n  refunds: [AdministratorRefundInput!]\n  options: ModifyOrderOptions\n  couponCodes: [String!]\n  \"\"\"\n  Added in v2.2\n  \"\"\"\n  shippingMethodIds: [ID!]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OrderCodeStrategy in TypeScript\nDESCRIPTION: Example of creating a custom OrderCodeStrategy to integrate with an external order code generation service. Demonstrates the use of the init() method to inject dependencies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderCodeStrategy, RequestContext } from '@vendure/core';\nimport { OrderCodeService } from '../services/order-code.service';\n\nexport class MyOrderCodeStrategy implements OrderCodeStrategy {\n\n    private orderCodeService: OrderCodeService;\n\n    init(injector) {\n        this.orderCodeService = injector.get(OrderCodeService);\n    }\n\n    async generate(ctx: RequestContext): string {\n        return this.orderCodeService.getNewOrderCode();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Braintree Drop-In and Payment Flow in a Storefront (TypeScript)\nDESCRIPTION: Framework-agnostic example of setting up the Braintree Drop-in UI in a storefront project, handling events for payment readiness, requesting payment method metadata, and invoking `addPaymentToOrder` via GraphQL. Demonstrates lazy-loading of the Drop-in, event handling for payment method selection, and managing UI states (like submit button and processing spinner). Requires `braintree-web-drop-in`, a working GraphQL client, and valid server-side mutations for token generation and payment addition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// The Braintree Dropin instance\nlet dropin: import('braintree-web-drop-in').Dropin;\n\n// Used to show/hide a \"submit\" button, which would be bound to the\n// `submitPayment()` method below.\nlet showSubmitButton = false;\n\n// Used to display a \"processing...\" spinner\nlet processing = false;\n\n//\n// This method would be invoked when the payment screen is mounted/created.\n//\nasync function renderDropin(order: Order, clientToken: string) {\n  // Lazy load braintree dropin because it has a reference\n  // to `window` which breaks SSR\n  dropin = await import('braintree-web-drop-in').then((module) =>\n    module.default.create({\n      authorization: clientToken,\n      // This assumes a div in your view with the corresponding ID\n      container: '#dropin-container',\n      card: {\n        cardholderName: {\n            required: true,\n        },\n        overrides: {},\n      },\n      // Additional config is passed here depending on\n      // which payment methods you have enabled in your\n      // Braintree account.\n      paypal: {\n        flow: 'checkout',\n        amount: order.totalWithTax / 100,\n        currency: 'GBP',\n      },\n    }),\n  );\n\n  // If you are using the `storeCustomersInBraintree` option, then the\n  // customer might already have a stored payment method selected as\n  // soon as the dropin script loads. In this case, show the submit\n  // button immediately.\n  if (dropin.isPaymentMethodRequestable()) {\n    showSubmitButton = true;\n  }\n\n  dropin.on('paymentMethodRequestable', (payload) => {\n    if (payload.type === 'CreditCard') {\n      showSubmitButton = true;\n    }\n    if (payload.type === 'PayPalAccount') {\n      this.submitPayment();\n    }\n  });\n\n  dropin.on('noPaymentMethodRequestable', () => {\n    // Display an error\n  });\n}\n\nasync function generateClientToken() {\n  const { generateBraintreeClientToken } = await graphQlClient.query(gql`\n    query GenerateBraintreeClientToken {\n      generateBraintreeClientToken\n    }\n  `);\n  return generateBraintreeClientToken;\n}\n\nasync submitPayment() {\n  if (!dropin.isPaymentMethodRequestable()) {\n    return;\n  }\n  showSubmitButton = false;\n  processing = true;\n\n  const paymentResult = await dropin.requestPaymentMethod();\n\n  const { addPaymentToOrder } = await graphQlClient.query(gql`\n    mutation AddPayment($input: PaymentInput!) {\n      addPaymentToOrder(input: $input) {\n        ... on Order {\n          id\n          payments {\n            id\n            amount\n            errorMessage\n            method\n            state\n            transactionId\n            createdAt\n          }\n        }\n        ... on ErrorResult {\n          errorCode\n          message\n        }\n      }\n    }`, {\n      input: {\n        method: 'braintree', // The code of you Braintree PaymentMethod\n        metadata: paymentResult,\n      },\n    },\n  );\n\n  switch (addPaymentToOrder?.__typename) {\n      case 'Order':\n          // Adding payment succeeded!\n          break;\n      case 'OrderStateTransitionError':\n      case 'OrderPaymentStateError':\n      case 'PaymentDeclinedError':\n      case 'PaymentFailedError':\n        // Display an error to the customer\n        dropin.clearSelectedPaymentMethod();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PromotionService Class Definition in TypeScript\nDESCRIPTION: Defines the PromotionService class that contains methods for managing promotions, including CRUD operations, channel assignment, coupon validation, and promotion application to orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/promotion-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionService {\n    availableConditions: PromotionCondition[] = [];\n    availableActions: PromotionAction[] = [];\n    constructor(connection: TransactionalConnection, configService: ConfigService, channelService: ChannelService, listQueryBuilder: ListQueryBuilder, configArgService: ConfigArgService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translatableSaver: TranslatableSaver, translator: TranslatorService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Promotion>, relations: RelationPaths<Promotion> = []) => Promise<PaginatedList<Promotion>>;\n    findOne(ctx: RequestContext, adjustmentSourceId: ID, relations: RelationPaths<Promotion> = []) => Promise<Promotion | undefined>;\n    getPromotionConditions(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getPromotionActions(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    createPromotion(ctx: RequestContext, input: CreatePromotionInput) => Promise<ErrorResultUnion<CreatePromotionResult, Promotion>>;\n    updatePromotion(ctx: RequestContext, input: UpdatePromotionInput) => Promise<ErrorResultUnion<UpdatePromotionResult, Promotion>>;\n    softDeletePromotion(ctx: RequestContext, promotionId: ID) => Promise<DeletionResponse>;\n    assignPromotionsToChannel(ctx: RequestContext, input: AssignPromotionsToChannelInput) => Promise<Promotion[]>;\n    removePromotionsFromChannel(ctx: RequestContext, input: RemovePromotionsFromChannelInput) => ;\n    validateCouponCode(ctx: RequestContext, couponCode: string, customerId?: ID) => Promise<JustErrorResults<ApplyCouponCodeResult> | Promotion>;\n    getActivePromotionsInChannel(ctx: RequestContext) => ;\n    getActivePromotionsOnOrder(ctx: RequestContext, orderId: ID) => Promise<Promotion[]>;\n    runPromotionSideEffects(ctx: RequestContext, order: Order, promotionsPre: Promotion[]) => ;\n    addPromotionsToOrder(ctx: RequestContext, order: Order) => Promise<Order>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin with Middleware in TypeScript\nDESCRIPTION: Example of a Vendure plugin implementing the NestModule interface to configure custom middleware.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MiddlewareConsumer, NestModule } from '@nestjs/common';\nimport { EventBus, PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { MyMiddleware } from './api/my-middleware';\n\n@VendurePlugin({\n    imports: [PluginCommonModule]\n})\nexport class MyPlugin implements NestModule {\n\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(MyMiddleware)\n      .forRoutes('my-custom-route');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLine Type in Vendure GraphQL Schema (GraphQL, SDL)\nDESCRIPTION: Defines the OrderLine GraphQL object type, representing a single line item within a customer's order. Fields provide comprehensive coverage of pricing, including unit and line prices with/without tax and discounts, as well as historical price changes. Relationships to other types such as ProductVariant, Asset, Discount, TaxLine, Order, and FulfillmentLine are modeled. Inline triple-quoted documentation details the purpose and calculation logic for key fields. All price and tax fields use a custom Money scalar; fields are non-null where appropriate. No runtime dependencies, but references multiple types from the Vendure schema.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_71\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype OrderLine {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nproductVariant: ProductVariant!\nfeaturedAsset: Asset\n\"\"\"\nThe price of a single unit, excluding tax and discounts\n\"\"\"\nunitPrice: Money!\n\"\"\"\nThe price of a single unit, including tax but excluding discounts\n\"\"\"\nunitPriceWithTax: Money!\n\"\"\"\nNon-zero if the unitPrice has changed since it was initially added to Order\n\"\"\"\nunitPriceChangeSinceAdded: Money!\n\"\"\"\nNon-zero if the unitPriceWithTax has changed since it was initially added to Order\n\"\"\"\nunitPriceWithTaxChangeSinceAdded: Money!\n\"\"\"\nThe price of a single unit including discounts, excluding tax.\n\nIf Order-level discounts have been applied, this will not be the\nactual taxable unit price (see `proratedUnitPrice`), but is generally the\ncorrect price to display to customers to avoid confusion\nabout the internal handling of distributed Order-level discounts.\n\"\"\"\ndiscountedUnitPrice: Money!\n\"\"\"\nThe price of a single unit including discounts and tax\n\"\"\"\ndiscountedUnitPriceWithTax: Money!\n\"\"\"\nThe actual unit price, taking into account both item discounts _and_ prorated (proportionally-distributed)\nOrder-level discounts. This value is the true economic value of the OrderItem, and is used in tax\nand refund calculations.\n\"\"\"\nproratedUnitPrice: Money!\n\"\"\"\nThe proratedUnitPrice including tax\n\"\"\"\nproratedUnitPriceWithTax: Money!\n\"\"\"\nThe quantity of items purchased\n\"\"\"\nquantity: Int!\n\"\"\"\nThe quantity at the time the Order was placed\n\"\"\"\norderPlacedQuantity: Int!\ntaxRate: Float!\n\"\"\"\nThe total price of the line excluding tax and discounts.\n\"\"\"\nlinePrice: Money!\n\"\"\"\nThe total price of the line including tax but excluding discounts.\n\"\"\"\nlinePriceWithTax: Money!\n\"\"\"\nThe price of the line including discounts, excluding tax\n\"\"\"\ndiscountedLinePrice: Money!\n\"\"\"\nThe price of the line including discounts and tax\n\"\"\"\ndiscountedLinePriceWithTax: Money!\n\"\"\"\nThe actual line price, taking into account both item discounts _and_ prorated (proportionally-distributed)\nOrder-level discounts. This value is the true economic value of the OrderLine, and is used in tax\nand refund calculations.\n\"\"\"\nproratedLinePrice: Money!\n\"\"\"\nThe proratedLinePrice including tax\n\"\"\"\nproratedLinePriceWithTax: Money!\n\"\"\"\nThe total tax on this line\n\"\"\"\nlineTax: Money!\ndiscounts: [Discount!]!\ntaxLines: [TaxLine!]!\norder: Order!\nfulfillmentLines: [FulfillmentLine!]\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Authentication Strategy in TypeScript\nDESCRIPTION: The NativeAuthenticationStrategy class implements username/password credential-based authentication for the Vendure framework. It requires the AuthenticationStrategy interface and uses various methods to manage authentication, such as init, defineInputType, authenticate, and verifyUserPassword. The strategy is primarily implemented for managing authentication using user credentials stored in the Vendure database.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/native-authentication-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass NativeAuthenticationStrategy implements AuthenticationStrategy<NativeAuthenticationData> {\n    readonly name = NATIVE_AUTH_STRATEGY_NAME;\n    init(injector: Injector) => ;\n    defineInputType() => DocumentNode;\n    authenticate(ctx: RequestContext, data: NativeAuthenticationData) => Promise<User | false>;\n    verifyUserPassword(ctx: RequestContext, userId: ID, password: string) => Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using withTransaction Method in TypeScript\nDESCRIPTION: This example demonstrates how to use the withTransaction method to wrap database operations in a transaction, ensuring atomicity and consistency.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/transactional-connection.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nprivate async transferCredit(outerCtx: RequestContext, fromId: ID, toId: ID, amount: number) {\n  await this.connection.withTransaction(outerCtx, async ctx => {\n    // Note you must not use `outerCtx` here, instead use `ctx`. Otherwise, this query\n    // will be executed outside of transaction\n    await this.giftCardService.updateCustomerCredit(ctx, fromId, -amount);\n\n    await this.connection.getRepository(ctx, GiftCard).update(fromId, { transferred: true })\n\n    // If some intermediate logic here throws an Error,\n    // then all DB transactions will be rolled back and neither Customer's\n    // credit balance will have changed.\n\n    await this.giftCardService.updateCustomerCredit(ctx, toId, amount);\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: OrderPlacedEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle order placement events. Triggered when an Order transitions to placed state.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderPlacedEvent extends VendureEvent {\n    constructor(fromState: OrderState, toState: OrderState, ctx: RequestContext, order: Order)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Email Event Handler in TypeScript\nDESCRIPTION: Example showing how to create an email event handler for order confirmation emails that triggers on order state transition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmationHandler = new EmailEventListener('order-confirmation')\n  .on(OrderStateTransitionEvent)\n  .filter(event => event.toState === 'PaymentSettled')\n  .setRecipient(event => event.order.customer.emailAddress)\n  .setFrom('{{ fromAddress }}')\n  .setSubject(`Order confirmation for #{{ order.code }}`)\n  .setTemplateVars(event => ({ order: event.order }));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Shipping Calculator with Dependency Injection in TypeScript\nDESCRIPTION: Example showing how to create a custom shipping calculator that injects and uses a service. Demonstrates dependency injection pattern and configuration of a ConfigurableOperationDef.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injector, ShippingCalculator } from '@vendure/core';\nimport { ShippingRatesService } from './shipping-rates.service';\n\n// We keep reference to our injected service by keeping it\n// in the top-level scope of the file.\nlet shippingRatesService: ShippingRatesService;\n\nexport const customShippingCalculator = new ShippingCalculator({\n  code: 'custom-shipping-calculator',\n  description: [],\n  args: {},\n\n  init(injector: Injector) {\n    // The init function is called during bootstrap, and allows\n    // us to inject any providers we need.\n    shippingRatesService = injector.get(ShippingRatesService);\n  },\n\n  calculate: async (order, args) => {\n    // We can now use the injected provider in the business logic.\n    const { price, priceWithTax } = await shippingRatesService.getRate({\n      destination: order.shippingAddress,\n      contents: order.lines,\n    });\n\n    return {\n      price,\n      priceWithTax,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: ProductService Class Definition in TypeScript\nDESCRIPTION: Core service class for managing Product entities in Vendure. Provides methods for CRUD operations, channel management, option groups, and facet values handling. Requires various service dependencies for complete product management functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/product-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductService {\n    constructor(connection: TransactionalConnection, channelService: ChannelService, assetService: AssetService, productVariantService: ProductVariantService, facetValueService: FacetValueService, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, slugValidator: SlugValidator, customFieldRelationService: CustomFieldRelationService, translator: TranslatorService, productOptionGroupService: ProductOptionGroupService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Product>, relations?: RelationPaths<Product>) => Promise<PaginatedList<Translated<Product>>>;\n    findOne(ctx: RequestContext, productId: ID, relations?: RelationPaths<Product>) => Promise<Translated<Product> | undefined>;\n    findByIds(ctx: RequestContext, productIds: ID[], relations?: RelationPaths<Product>) => Promise<Array<Translated<Product>>>;\n    getProductChannels(ctx: RequestContext, productId: ID) => Promise<Channel[]>;\n    getFacetValuesForProduct(ctx: RequestContext, productId: ID) => Promise<Array<Translated<FacetValue>>>;\n    findOneBySlug(ctx: RequestContext, slug: string, relations?: RelationPaths<Product>) => Promise<Translated<Product> | undefined>;\n    create(ctx: RequestContext, input: CreateProductInput) => Promise<Translated<Product>>;\n    update(ctx: RequestContext, input: UpdateProductInput) => Promise<Translated<Product>>;\n    softDelete(ctx: RequestContext, productId: ID) => Promise<DeletionResponse>;\n    assignProductsToChannel(ctx: RequestContext, input: AssignProductsToChannelInput) => Promise<Array<Translated<Product>>>;\n    removeProductsFromChannel(ctx: RequestContext, input: RemoveProductsFromChannelInput) => Promise<Array<Translated<Product>>>;\n    addOptionGroupToProduct(ctx: RequestContext, productId: ID, optionGroupId: ID) => Promise<Translated<Product>>;\n    removeOptionGroupFromProduct(ctx: RequestContext, productId: ID, optionGroupId: ID, force?: boolean) => Promise<ErrorResultUnion<RemoveOptionGroupFromProductResult, Translated<Product>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Vendure Migration Script\nDESCRIPTION: This code snippet shows a typical migration script used in Vendure projects. It defines CLI commands for generating, running, and reverting migrations using Vendure's helper functions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrations/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateMigration, revertLastMigration, runMigrations } from '@vendure/core';\nimport program from 'commander';\n\nimport { config } from './src/vendure-config';\n\nprogram\n    .command('generate <name>')\n    .description('Generate a new migration file with the given name')\n    .action(name => {\n        return generateMigration(config, { name, outputDir: './src/migrations' });\n    });\n\nprogram\n    .command('run')\n    .description('Run all pending migrations')\n    .action(() => {\n        return runMigrations(config);\n    });\n\nprogram\n    .command('revert')\n    .description('Revert the last applied migration')\n    .action(() => {\n        return revertLastMigration(config);\n    });\n\nprogram.parse(process.argv);\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Tabs Documentation\nDESCRIPTION: Imports various React components used for displaying member information, generation details, and member descriptions in the documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/tabs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Implementing StockLocationStrategy with Options\nDESCRIPTION: Shows how to create a custom StockLocationStrategy that accepts configuration options through its constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport  { ID, ProductVariant, RequestContext, StockLevel, StockLocationStrategy } from '@vendure/core';\n\nexport class MyStockLocationStrategy implements StockLocationStrategy {\n\n    constructor(private options: { maxDistance: number }) {}\n\n    getAvailableStock(\n        ctx: RequestContext,\n        productVariantId: ID,\n        stockLevels: StockLevel[]\n    ): ProductVariant[] {\n        const maxDistance = this.options.maxDistance;\n        // ... implementation omitted\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldConfig Type in TypeScript\nDESCRIPTION: Type definition for CustomFieldConfig that represents different types of custom fields that can be configured in Vendure. It includes support for various data types like strings, numbers, booleans, dates, relations, and structured data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/custom-field-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomFieldConfig = | StringCustomFieldConfig\n    | LocaleStringCustomFieldConfig\n    | TextCustomFieldConfig\n    | LocaleTextCustomFieldConfig\n    | IntCustomFieldConfig\n    | FloatCustomFieldConfig\n    | BooleanCustomFieldConfig\n    | DateTimeCustomFieldConfig\n    | RelationCustomFieldConfig\n    | StructCustomFieldConfig\n```\n\n----------------------------------------\n\nTITLE: Processing Order Refund in Vendure (TypeScript)\nDESCRIPTION: Creates a Refund against the order and invokes the createRefund() method of the PaymentMethodHandler. It takes a RequestContext and RefundOrderInput as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefundOrder(ctx: RequestContext, input: RefundOrderInput): Promise<ErrorResultUnion<RefundOrderResult, Refund>>\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultVerificationTokenStrategy Class Signature (TypeScript)\nDESCRIPTION: This TypeScript code defines the class signature for `DefaultVerificationTokenStrategy`. It implements the `VerificationTokenStrategy` interface and outlines methods for initializing the strategy (`init`), generating a base64-encoded time-based token (`generateVerificationToken`), and verifying the token's validity based on the configured duration (`verifyVerificationToken`).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/default-verification-token-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\nclass DefaultVerificationTokenStrategy implements VerificationTokenStrategy {\n    init(injector: Injector) => ;\n    generateVerificationToken(_ctx: RequestContext) => string;\n    verifyVerificationToken(_ctx: RequestContext, token: string) => boolean;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Database-backed Cache Strategy in TypeScript\nDESCRIPTION: The SqlCacheStrategy class implementation that stores cached items in the database. It includes configuration options for cache size and TTL provider, along with methods for cache manipulation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/sql-cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SqlCacheStrategy implements CacheStrategy {\n    protected cacheSize = 10_000;\n    protected ttlProvider: CacheTtlProvider;\n    constructor(config?: { cacheSize?: number; cacheTtlProvider?: CacheTtlProvider })\n    protected connection: TransactionalConnection;\n    protected configService: ConfigService;\n    init(injector: Injector) => ;\n    get(key: string) => Promise<T | undefined>;\n    set(key: string, value: T, options?: SetCacheKeyOptions) => ;\n    delete(key: string) => ;\n    invalidateTags(tags: string[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Order Confirmation Email Handler in Vendure\nDESCRIPTION: Example of an EmailEventListener for sending order confirmation emails when an order transitions to the PaymentSettled state. It demonstrates filtering events, loading additional data, setting recipient, and defining template variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/email/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { OrderStateTransitionEvent } from '@vendure/core';\nimport { EmailEventListener, transformOrderLineAssetUrls, hydrateShippingLines } from '@vendure/email-plugin';\n\n// The 'order-confirmation' string is used by the EmailPlugin to identify\n// which template to use when rendering the email.\nexport const orderConfirmationHandler = new EmailEventListener('order-confirmation')\n    .on(OrderStateTransitionEvent)\n    // Only send the email when the Order is transitioning to the\n    // \"PaymentSettled\" state and the Order has a customer associated with it.\n    .filter(\n        event =>\n            event.toState === 'PaymentSettled'\n            && !!event.order.customer,\n    )\n    // We commonly need to load some additional data to be able to render the email\n    // template. This is done via the `loadData()` method. In this method we are\n    // mutating the Order object to ensure that product images are correctly\n    // displayed in the email, as well as fetching shipping line data from the database.\n    .loadData(async ({ event, injector }) => {\n        transformOrderLineAssetUrls(event.ctx, event.order, injector);\n        const shippingLines = await hydrateShippingLines(event.ctx, event.order, injector);\n        return { shippingLines };\n    })\n    // Here we are setting the recipient of the email to be the\n    // customer's email address.\n    .setRecipient(event => event.order.customer!.emailAddress)\n    // We can interpolate variables from the EmailPlugin's configured\n    // `globalTemplateVars` object.\n    .setFrom('{{ fromAddress }}')\n    // We can also interpolate variables made available by the\n    // `setTemplateVars()` method below\n    .setSubject('Order confirmation for #{{ order.code }}')\n    // The object returned here defines the variables which are\n    // available to the email template.\n    .setTemplateVars(event => ({ order: event.order, shippingLines: event.data.shippingLines }))\n```\n\n----------------------------------------\n\nTITLE: Setting Readonly Custom Fields\nDESCRIPTION: Demonstrates how to create a readonly custom field that can only be modified through plugin code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'profitMargin',\n                type: 'int',\n                // highlight-next-line\n                readonly: true,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response\nDESCRIPTION: Example response showing the structure of data returned from a GraphQL product query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"id\": \"1\",\n      \"name\": \"Laptop\",\n      \"description\": \"Now equipped with seventh-generation Intel Core processors, Laptop is snappier than ever. From daily tasks like launching apps and opening files to more advanced computing, you can power through your day thanks to faster SSDs and Turbo Boost processing up to 3.6GHz.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing OrderLine Adjustments Field in Vendure GraphQL API\nDESCRIPTION: Details the deprecation of the `OrderLine.adjustments` field in Vendure's GraphQL API as part of the v1.0.0 update. To query discounts applied at the order line level, use the `OrderLine.discounts` field instead.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\n# Deprecated field on OrderLine\nadjustments\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Replacement field (v1.0.0+)\ndiscounts\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring AssetServerPlugin in TypeScript\nDESCRIPTION: Example of how to install and configure the AssetServerPlugin in a Vendure project. It shows how to add the plugin to the plugins array in the VendureConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetServerPlugin } from '@vendure/asset-server-plugin';\n\nconst config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    AssetServerPlugin.init({\n      route: 'assets',\n      assetUploadDir: path.join(__dirname, 'assets'),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: bootstrapWorker Function Signature - TypeScript\nDESCRIPTION: Specifies the TypeScript signature for the bootstrapWorker function, which accepts a partial VendureConfig and optional BootstrapWorkerOptions, returning a Promise that resolves to a VendureWorker instance. The contract clarifies required parameter types and return structure, intended for developers integrating with the Vendure API. Dependencies include the relevant Vendure type definitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/worker/bootstrap-worker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bootstrapWorker(userConfig: Partial<VendureConfig>, options?: BootstrapWorkerOptions): Promise<VendureWorker>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Storage with S3/MinIO in Vendure\nDESCRIPTION: Setup for using Digital Ocean Spaces (S3-compatible storage) for asset storage in Vendure, with MinIO configuration options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-digital-ocean-app-platform/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AssetServerPlugin, configureS3AssetStorage } from '@vendure/asset-server-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AssetServerPlugin.init({\n            route: 'assets',\n            assetUploadDir: process.env.ASSET_UPLOAD_DIR || path.join(__dirname, '../static/assets'),\n            storageStrategyFactory: process.env.MINIO_ENDPOINT ?  configureS3AssetStorage({\n                bucket: 'vendure-assets',\n                credentials: {\n                    accessKeyId: process.env.MINIO_ACCESS_KEY,\n                    secretAccessKey: process.env.MINIO_SECRET_KEY,\n                },\n                nativeS3Configuration: {\n                    endpoint: process.env.MINIO_ENDPOINT,\n                    forcePathStyle: true,\n                    signatureVersion: 'v4',\n                    region: 'eu-west-1',\n                },\n            }) : undefined,\n        }),\n    ],\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Vendure Entity Base Class with Decorators in TypeScript\nDESCRIPTION: This snippet defines the VendureEntity class, the base class for all entities in the Vendure framework. It uses TypeScript decorators (@PrimaryGeneratedId, @CreateDateColumn, and @UpdateDateColumn) to mark fields for automatic ID generation and timestamp management. The constructor accepts a partial object for flexible initialization. Dependencies include the decorator utilities and a strategy for entity ID generation. Inputs: an optional partial entity; Outputs: a new VendureEntity instance with managed fields; The class requires the Vendure ORM environment and relevant decorators to function properly.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/vendure-entity.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VendureEntity {\n    constructor(input?: DeepPartial<VendureEntity>)\n    @PrimaryGeneratedId()\n    id: ID;\n    @CreateDateColumn() createdAt: Date;\n    @UpdateDateColumn() updatedAt: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ShippingMethod Entity Class in TypeScript\nDESCRIPTION: This TypeScript class defines the `ShippingMethod` entity in Vendure. It extends `VendureEntity` and implements interfaces like `ChannelAware`, `SoftDeletable`, `HasCustomFields`, and `Translatable`. The class includes properties for configuration (`checker`, `calculator`), identification (`code`, `name`), relationships (`channels`, `translations`), custom fields, and methods (`apply`, `test`) to determine shipping eligibility and calculate the cost for a given order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/shipping-method.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass ShippingMethod extends VendureEntity implements ChannelAware, SoftDeletable, HasCustomFields, Translatable {\n    constructor(input?: DeepPartial<ShippingMethod>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    @Column() code: string;\n    name: LocaleString;\n    description: LocaleString;\n    @Column('simple-json') checker: ConfigurableOperation;\n    @Column('simple-json') calculator: ConfigurableOperation;\n    @Column()\n    fulfillmentHandlerCode: string;\n    @ManyToMany(type => Channel, channel => channel.shippingMethods)\n    @JoinTable()\n    channels: Channel[];\n    @OneToMany(type => ShippingMethodTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<ShippingMethod>>;\n    @Column(type => CustomShippingMethodFields)\n    customFields: CustomShippingMethodFields;\n    apply(ctx: RequestContext, order: Order) => Promise<ShippingCalculationResult | undefined>;\n    test(ctx: RequestContext, order: Order) => Promise<boolean>;\n    toJSON() => any;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom OrderProcess for Synchronizing Order States in Vendure\nDESCRIPTION: This snippet introduces the concept of a custom OrderProcess in Vendure. It's used to keep the states of the Aggregate Order and its Seller Orders synchronized, ensuring proper state transitions based on the status of all related orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nOrderProcess\n```\n\n----------------------------------------\n\nTITLE: Configuring Banner Plugin\nDESCRIPTION: Shows how to configure a Vendure plugin with GraphQL extensions, including service and resolver registration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { BannerService } from './services/banner.service';\nimport { BannerShopResolver } from './api/banner-shop.resolver';\nimport { shopApiExtensions } from './api/api-extensions';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    shopApiExtensions: {\n        schema: shopApiExtensions,\n        resolvers: [BannerShopResolver],\n    },\n    providers: [BannerService],\n})\nexport class BannerPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Field Resolver with DataLoader in Vendure\nDESCRIPTION: Implements a GraphQL field resolver for the 'isSubscription' field on OrderLine entities using the DataLoader service to efficiently batch load subscription data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/dataloaders/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver(() => OrderLine)\nexport class MyPluginOrderLineEntityResolver {\n  constructor(\n    private dataloaderService: DataloaderService,\n  ) {}\n\n  @ResolveField()\n  isSubscription(@Ctx() ctx: RequestContext, @Parent() parent: OrderLine) {\n    const loader = this.dataloaderService.getLoader(ctx, 'is-subscription')\n    return loader.load(parent.id)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Cache Class with ProductVariantIds Example in TypeScript\nDESCRIPTION: Example showing how to create and use a Cache instance to cache product variant IDs. The cache is configured with a key generator function and options including TTL and tags.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cache = cacheService.createCache({\n  getKey: id => `ProductVariantIds:${id}`,\n  options: {\n    ttl: 1000 * 60 * 60,\n    tags: ['products'],\n  },\n});\n\n// This will fetch the value from the cache if it exists, or\n// fetch it from the ProductService if not, and then cache\n// using the key 'ProductVariantIds.${id}'.\nconst variantIds = await cache.get(id, async () => {\n  const variants await ProductService.getVariantsByProductId(ctx, id) ;\n  // The cached value must be serializable, so we just return the ids\n  return variants.map(v => v.id);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Environment Variables Types for TypeScript\nDESCRIPTION: Example of extending the global ProcessEnv interface to include custom environment variables for type-safe usage in Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport {};\n\n// Here we declare the members of the process.env object, so that we\n// can use them in our application code in a type-safe manner.\ndeclare global {\n    namespace NodeJS {\n        interface ProcessEnv {\n            APP_ENV: string;\n            COOKIE_SECRET: string;\n            SUPERADMIN_USERNAME: string;\n            SUPERADMIN_PASSWORD: string;\n            // highlight-next-line\n            MY_API_KEY: string;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Components for Operation Args in TypeScript\nDESCRIPTION: Shows how to specify custom UI components for rendering operation arguments in the Admin UI, including select input configuration with options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    args: {\n        operator: {\n            type: 'string',\n            ui: {\n                component: 'select-form-input',\n                options: [\n                    { value: 'startsWith' },\n                    { value: 'endsWith' },\n                    { value: 'contains' },\n                    { value: 'doesNotContain' },\n                ],\n            },\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Host and Port in AdminUiPlugin for Vendure\nDESCRIPTION: This code snippet demonstrates how to configure the AdminUiPlugin to specify the API host and port when the Admin UI is deployed to a different host or port than the Vendure server. It sets up the AdminUiPlugin with custom port, route, and API configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploying-admin-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n\nconst config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            port: 3001,\n            route: 'admin',\n            adminUiConfig: {\n                apiHost: 'https://api.example.com',\n                apiPort: 443,\n            },\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Populating Test Data in Vendure\nDESCRIPTION: Script for populating a Vendure installation with test data including products, payment methods, countries, zones, and tax rates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/importing-data/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { populate } from '@vendure/core/cli';\nimport { bootstrap, VendureConfig } from '@vendure/core';\nimport { config } from './vendure-config';\n\npopulate(\n    () => bootstrap({\n        ...config,\n        importExportOptions: {\n            importAssetsDir: path.join(\n                require.resolve('@vendure/create/assets/products.csv'),\n                '../images'\n            ),\n        },\n        dbConnectionOptions: {...config.dbConnectionOptions, synchronize: true}\n    }),\n    require('@vendure/create/assets/initial-data.json'),\n    require.resolve('@vendure/create/assets/products.csv')\n)\n    .then(app => app.close())\n    .catch(err => {\n        console.log(err);\n        process.exit(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: GraphQL Union Type for Error Handling\nDESCRIPTION: Example of using GraphQL unions to represent operations that may return either a successful result or various error types. Shows the applyCouponCode mutation definition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  \"Applies the given coupon code to the active Order\"\n  applyCouponCode(couponCode: String!): ApplyCouponCodeResult!\n}\n\nunion ApplyCouponCodeResult = Order\n  | CouponCodeExpiredError\n  | CouponCodeInvalidError\n  | CouponCodeLimitError\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Custom Field UI Configuration in Vendure (TypeScript)\nDESCRIPTION: This snippet provides a detailed example of configuring various UI controls for custom fields in Vendure. It includes examples of rich text editors, JSON editors, numeric inputs with suffixes, currency inputs, select inputs with options, and text inputs with prefixes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, VendureConfig } from '@vendure/core';\n\nconst config: VendureConfig = {\n    // ...\n    customFields: {\n        Product: [\n            // Rich text editor\n            {name: 'additionalInfo', type: 'text', ui: {component: 'rich-text-form-input'}},\n            // JSON editor\n            {name: 'specs', type: 'text', ui: {component: 'json-editor-form-input'}},\n            // Numeric with suffix\n            {\n                name: 'weight',\n                type: 'int',\n                ui: {component: 'number-form-input', suffix: 'g'},\n            },\n            // Currency input\n            {\n                name: 'RRP',\n                type: 'int',\n                ui: {component: 'currency-form-input'},\n            },\n            // Select with options\n            {\n                name: 'pageType',\n                type: 'string',\n                ui: {\n                    component: 'select-form-input',\n                    options: [\n                        {value: 'static', label: [{languageCode: LanguageCode.en, value: 'Static'}]},\n                        {value: 'dynamic', label: [{languageCode: LanguageCode.en, value: 'Dynamic'}]},\n                    ],\n                },\n            },\n            // Text with prefix\n            {\n                name: 'link',\n                type: 'string',\n                ui: {\n                    component: 'text-form-input',\n                    prefix: 'https://',\n                },\n            },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Using populate() to seed Vendure server with initial data and products\nDESCRIPTION: This example shows how to use the populate function to initialize a Vendure server with initial data and product data from a CSV file. The function bootstraps the application, imports the data, and then closes the application upon completion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/populate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap } from '@vendure/core';\nimport { populate } from '@vendure/core/cli';\nimport { config } from './vendure-config.ts'\nimport { initialData } from './my-initial-data.ts';\n\nconst productsCsvFile = path.join(__dirname, 'path/to/products.csv')\n\npopulate(\n  () => bootstrap(config),\n  initialData,\n  productsCsvFile,\n)\n.then(app => app.close())\n.then(\n  () => process.exit(0),\n  err => {\n    console.log(err);\n    process.exit(1);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using a JobBuffer with JobQueueService in TypeScript\nDESCRIPTION: Example showing how to use a JobBuffer with the JobQueueService. The buffer is added to the service, work is performed that would trigger jobs, and then the buffer is flushed and removed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-buffer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst collectionBuffer = new CollectionJobBuffer();\n\nawait this.jobQueueService.addBuffer(collectionBuffer);\n\n// Here you can perform some work which would ordinarily\n// trigger the 'apply-collection-filters' job, such as updating\n// collection filters or changing ProductVariant prices.\n\nawait this.jobQueueService.flush(collectionBuffer);\n\nawait this.jobQueueService.removeBuffer(collectionBuffer);\n```\n\n----------------------------------------\n\nTITLE: Request Password Reset Mutation\nDESCRIPTION: GraphQL mutation to initiate the password reset process for a customer account.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation RequestPasswordReset($emailAddress: String!) {\n  requestPasswordReset(emailAddress: $emailAddress) {\n    ... on Success {\n      success\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Collection Filters Array\nDESCRIPTION: Example showing how default collection filters are defined in an array for use in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const defaultCollectionFilters = [\n    facetValueCollectionFilter,\n    variantNameCollectionFilter,\n    variantIdCollectionFilter,\n    productIdCollectionFilter,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining the Payment Entity Class - Vendure (TypeScript)\nDESCRIPTION: This snippet defines the Payment entity class for the Vendure e-commerce framework in TypeScript. The class extends VendureEntity and implements HasCustomFields, encapsulating properties such as method, amount, state, error messages, transaction IDs, metadata, and relationships to Order and Refund entities. The constructor accepts a DeepPartial<Payment> for flexible instantiation. Dependencies include TypeORM decorators like @Column, @Index, @ManyToOne, and domain types such as PaymentState, Order, Refund, PaymentMetadata, and CustomPaymentFields. Expected inputs include object literals representing payment data. The output is a fully-initialized Payment entity instance suitable for ORM operations. Required dependencies: TypeORM, Vendure entity/base classes, and type declarations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/payment.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Payment extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<Payment>)\n    @Column() method: string;\n    @Money() amount: number;\n    @Column('varchar') state: PaymentState;\n    @Column({ type: 'varchar', nullable: true })\n    errorMessage: string | undefined;\n    @Column({ nullable: true })\n    transactionId: string;\n    @Column('simple-json') metadata: PaymentMetadata;\n    @Index()\n    @ManyToOne(type => Order, order => order.payments)\n    order: Order;\n    @OneToMany(type => Refund, refund => refund.payment)\n    refunds: Refund[];\n    @Column(type => CustomPaymentFields)\n    customFields: CustomPaymentFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PaymentMethod Entity Class in TypeScript\nDESCRIPTION: This TypeScript code defines the `PaymentMethod` entity class within the Vendure framework. It extends `VendureEntity` and implements `Translatable`, `ChannelAware`, and `HasCustomFields`. The class includes properties decorated for database mapping (using TypeORM decorators like `@Column`, `@OneToMany`, `@ManyToMany`) such as `name`, `code`, `description`, `enabled`, `checker`, `handler`, `translations`, `channels`, and `customFields`. It represents a payment method available in the e-commerce system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/payment-method.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass PaymentMethod extends VendureEntity implements Translatable, ChannelAware, HasCustomFields {\n    constructor(input?: DeepPartial<PaymentMethod>)\n    name: LocaleString;\n    @Column({ default: '' }) code: string;\n    description: LocaleString;\n    @OneToMany(type => PaymentMethodTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<PaymentMethod>>;\n    @Column() enabled: boolean;\n    @Column('simple-json', { nullable: true }) checker: ConfigurableOperation | null;\n    @Column('simple-json') handler: ConfigurableOperation;\n    @ManyToMany(type => Channel, channel => channel.paymentMethods)\n    @JoinTable()\n    channels: Channel[];\n    @Column(type => CustomPaymentMethodFields)\n    customFields: CustomPaymentMethodFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Transcoding Job Queue Service in TypeScript\nDESCRIPTION: A service class that sets up a job queue for video transcoding tasks. It handles creating the queue, processing jobs for video transcoding, and associating results with products via custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { JobQueue, JobQueueService, ID, Product, TransactionalConnection } from '@vendure/core';\nimport { transcode } from 'third-party-video-sdk';\n\n@Injectable()\nclass ProductVideoService implements OnModuleInit {\n\n    private jobQueue: JobQueue<{ productId: ID; videoUrl: string; }>;\n\n    constructor(private jobQueueService: JobQueueService,\n                private connection: TransactionalConnection) {\n    }\n\n    async onModuleInit() {\n        this.jobQueue = await this.jobQueueService.createQueue({\n            name: 'transcode-video',\n            process: async job => {\n                const result = await transcode(job.data.videoUrl);\n                await this.connection.getRepository(Product).save({\n                    id: job.data.productId,\n                    customFields: {\n                        videoUrl: result.url,\n                    },\n                });\n                return result;\n            },\n        });\n    }\n\n    transcodeForProduct(productId: ID, videoUrl: string) {\n        return this.jobQueue.add({productId, videoUrl}, {retries: 2});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Elasticsearch Query with mapQuery in TypeScript\nDESCRIPTION: Provides a sample implementation for the `mapQuery` function within the `SearchConfig`. This example demonstrates modifying the generated Elasticsearch query to implement wildcard search (`*term*`) using `query_string` and combining it with a standard `multi_match` query, applying boost factors defined in `searchConfig` for specific fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nmapQuery: (query, input, searchConfig, channelId, enabledOnly, ctx) => {\n  // Assumes 'term' is derived from 'input'\n  const term = input.term;\n  if (query.bool.must) {\n    delete query.bool.must;\n  }\n  query.bool.should = [\n    {\n      query_string: {\n        query: \"*\" + term + \"*\",\n        fields: [\n          `productName^${searchConfig.boostFields.productName}`,\n          `productVariantName^${searchConfig.boostFields.productVariantName}`,\n        ]\n      }\n    },\n    {\n      multi_match: {\n        query: term,\n        type: searchConfig.multiMatchType,\n        fields: [\n          `description^${searchConfig.boostFields.description}`,\n          `sku^${searchConfig.boostFields.sku}`,\n        ],\n      },\n    },\n  ];\n\n  return query;\n}\n```\n\n----------------------------------------\n\nTITLE: OrderProcess Interface Definition in TypeScript\nDESCRIPTION: Defines the OrderProcess interface that controls order state transitions and execution of logic during state changes. It extends InjectableStrategy and includes properties for transitions and lifecycle hooks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderProcess<State extends keyof CustomOrderStates | string> extends InjectableStrategy {\n    transitions?: Transitions<State, State | OrderState> & Partial<Transitions<OrderState | State>>;\n    onTransitionStart?: OnTransitionStartFn<State | OrderState, OrderTransitionData>;\n    onTransitionEnd?: OnTransitionEndFn<State | OrderState, OrderTransitionData>;\n    onTransitionError?: OnTransitionErrorFn<State | OrderState>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tax Rates with TypeScript\nDESCRIPTION: This TypeScript code snippet defines the TaxRate class, which is responsible for applying tax rates based on the product variant's tax category, applicable zone, and customer group. It extends the VendureEntity and implements HasCustomFields, integrating with the Vendure architecture. The class includes properties for storing tax rate attributes and methods for calculating tax components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/tax-rate.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TaxRate extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<TaxRate>)\n    @Column() name: string;\n    @Column() enabled: boolean;\n    @Column({ type: 'decimal', precision: 5, scale: 2, transformer: new DecimalTransformer() }) value: number;\n    @Index()\n    @ManyToOne(type => TaxCategory, taxCategory => taxCategory.taxRates)\n    category: TaxCategory;\n    @EntityId({ nullable: true })\n    categoryId: ID;\n    @Index()\n    @ManyToOne(type => Zone, zone => zone.taxRates)\n    zone: Zone;\n    @EntityId({ nullable: true })\n    zoneId: ID;\n    @Index()\n    @ManyToOne(type => CustomerGroup, customerGroup => customerGroup.taxRates, { nullable: true })\n    customerGroup?: CustomerGroup;\n    @Column(type => CustomTaxRateFields)\n    customFields: CustomTaxRateFields;\n    taxComponentOf(grossPrice: number) => number;\n    netPriceOf(grossPrice: number) => number;\n    taxPayableOn(netPrice: number) => number;\n    grossPriceOf(netPrice: number) => number;\n    apply(price: number) => TaxLine;\n    test(zone: Zone | ID, taxCategory: TaxCategory | ID) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Stripe CLI for Local Webhook Testing\nDESCRIPTION: Example shell command using the Stripe CLI (`stripe listen`) to forward webhook events (like `payment_intent.succeeded`) from Stripe to a local development server running the Vendure application. Replace `localhost:3000` with the actual host and port of your local server.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstripe listen --forward-to localhost:3000/payments/stripe\n```\n\n----------------------------------------\n\nTITLE: Creating an SMS Notification Plugin in Vendure\nDESCRIPTION: Example of creating a custom plugin that sends SMS notifications when an order's state transitions to 'Shipped'. It uses the EventBus to listen for OrderStateTransitionEvents and triggers the SMS service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/email/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { OnModuleInit } from '@nestjs/common';\nimport { PluginCommonModule, VendurePlugin, EventBus } from '@vendure/core';\nimport { OrderStateTransitionEvent } from '@vendure/core';\n\n// A custom service which sends SMS messages\n// using a third-party SMS provider such as Twilio.\nimport { SmsService } from './sms.service';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    providers: [SmsService],\n})\nexport class SmsPlugin implements OnModuleInit {\n    constructor(\n        private eventBus: EventBus,\n        private smsService: SmsService,\n    ) {}\n\n    onModuleInit() {\n        this.eventBus\n            .ofType(OrderStateTransitionEvent)\n            .filter(event => event.toState === 'Shipped')\n            .subscribe(event => {\n                this.smsService.sendOrderShippedMessage(event.order);\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PaymentMethodHandler with Configurable Args in TypeScript\nDESCRIPTION: Demonstrates how to create a dummy payment method handler with configurable arguments. Shows configuration of argument types, labels, descriptions and default values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodHandler, LanguageCode } from '@vendure/core';\n\nexport const dummyPaymentHandler = new PaymentMethodHandler({\n    code: 'dummy-payment-handler',\n    description: [/* omitted for brevity */],\n    args: {\n        automaticSettle: {\n            type: 'boolean',\n            label: [\n                {\n                    languageCode: LanguageCode.en,\n                    value: 'Authorize and settle in 1 step',\n                },\n            ],\n            description: [\n                {\n                    languageCode: LanguageCode.en,\n                    value: 'If enabled, Payments will be created in the \"Settled\" state.',\n                },\n            ],\n            required: true,\n            defaultValue: false,\n        },\n    },\n    createPayment: async (ctx, order, amount, args, metadata, method) => {\n        // Inside this method, the `args` argument is type-safe and will be\n        // an object with the following shape:\n        // {\n        //   automaticSettle: boolean\n        // }\n\n        // ... implementation omitted\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cache Keys with Identifiers\nDESCRIPTION: Shows how to create unique cache keys that include identifiers to prevent conflicts. This example uses the method name and a productId to create a unique key.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetVariantIds(productId: ID): Promise<ID[]> {\n    const cacheKey = `ProductService.getVariantIds:${productId}`;\n    const cachedValue = await this.cacheService.get(cacheKey);\n    if (cachedValue) {\n        return cachedValue;\n    }\n    const newValue = await this.expensiveOperation(productId);\n    await this.cacheService.set(cacheKey, newValue, { ttl: 60 * 1000 });\n    return newValue;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vendure DevTools Plugin\nDESCRIPTION: Implementation of a Vendure plugin that integrates the DevTools module. The plugin checks NODE_ENV to ensure devtools are not enabled in production.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/nest-devtools/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendurePlugin } from '@vendure/core';\nimport { DevtoolsModule } from '@nestjs/devtools-integration';\n\n@VendurePlugin({\n    imports: [\n        DevtoolsModule.register({\n            // The reason we are checking the NODE_ENV environment \n            // variable here is that you should never use this module in production!\n            http: process.env.NODE_ENV !== 'production',\n        }),\n    ],\n})\nclass DevtoolsPlugin {}\n```\n\n----------------------------------------\n\nTITLE: ConfigurableOperationDef Class Definition in TypeScript\nDESCRIPTION: Core class definition showing the structure and methods of ConfigurableOperationDef, including constructor, initialization, and utility methods for handling configuration arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConfigurableOperationDef<T extends ConfigArgs = ConfigArgs> {\n    code: string\n    args: T\n    description: LocalizedStringArray\n    constructor(options: ConfigurableOperationDefOptions<T>)\n    init(injector: Injector) => ;\n    destroy() => ;\n    toGraphQlType(ctx: RequestContext) => ConfigurableOperationDefinition;\n    argsArrayToHash(args: ConfigArg[]) => ConfigArgValues<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Static Asset Structure in TypeScript\nDESCRIPTION: Declares the 'StaticAssetDefinition' type, allowing static assets to be referenced either by a string path or an object with 'path' and 'rename' fields. This enables flexible asset referencing and renaming during the build process. No external dependencies are required, and inputs are either a file path string or an object specifying both the asset's path and its desired name in the output.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype StaticAssetDefinition = string | { path: string; rename: string }\n```\n\n----------------------------------------\n\nTITLE: Defining Administrator Entity in TypeScript for Vendure\nDESCRIPTION: This code defines the Administrator class, which extends VendureEntity and implements SoftDeletable and HasCustomFields interfaces. It includes properties for personal information, user association, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/administrator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Administrator extends VendureEntity implements SoftDeletable, HasCustomFields {\n    constructor(input?: DeepPartial<Administrator>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    @Column() firstName: string;\n    @Column() lastName: string;\n    @Column({ unique: true })\n    emailAddress: string;\n    @OneToOne(type => User)\n    @JoinColumn()\n    user: User;\n    @Column(type => CustomAdministratorFields)\n    customFields: CustomAdministratorFields;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Product Resolver Implementation\nDESCRIPTION: Example of a GraphQL resolver function for querying product data with request context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Query, Resolver, Args } from '@nestjs/graphql';\nimport { Ctx, RequestContext, ProductService } from '@vendure/core';\n\n@Resolver()\nexport class ShopProductsResolver {\n\n     constructor(private productService: ProductService) {}\n\n     @Query()\n     product(@Ctx() ctx: RequestContext, @Args() args: { id: string }) {\n         return this.productService.findOne(ctx, args.id);\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Type Subscription in Vendure\nDESCRIPTION: Demonstrates how to subscribe to multiple event types using EventBus.filter() method. Shows handling both ProductEvent and ProductVariantEvent in a single subscription.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport {\n    EventBus,\n    PluginCommonModule,\n    VendurePlugin,\n    ProductEvent,\n    ProductVariantEvent,\n} from '@vendure/core';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n})\nexport class MyPluginPlugin implements OnModuleInit {\n    constructor(private eventBus: EventBus) {}\n\n    onModuleInit() {\n        this.eventBus\n            .filter(event => event instanceof ProductEvent || event instanceof ProductVariantEvent)\n            .subscribe(event => {\n                // the event will be a ProductEvent or ProductVariantEvent\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Password Mutation\nDESCRIPTION: GraphQL mutation to complete the password reset process using a reset token.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ResetPassword($token: String! $password: String!) {\n  resetPassword(token: $token password: $password) {\n    ...on CurrentUser {\n      id\n      identifier\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HardenPlugin in Vendure\nDESCRIPTION: Implementation of HardenPlugin configuration for production deployments, including query complexity limits and API mode settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/security/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { HardenPlugin } from '@vendure/harden-plugin';\n\nconst IS_DEV = process.env.APP_ENV === 'dev';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    HardenPlugin.init({\n      maxQueryComplexity: 500,\n      apiMode: IS_DEV ? 'dev' : 'prod',\n    }),\n    // ...\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: File Structure Setup for Custom Payment Plugin\nDESCRIPTION: Shows the directory structure for implementing a custom payment plugin in Vendure\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n├── plugins\n    └── my-payment-plugin\n        ├── payment-process.ts\n        ├── payment-method-handler.ts\n        ├── order-process.ts\n        └── order-placed-strategy.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductVariantService Class in TypeScript\nDESCRIPTION: Service class for managing ProductVariant entities in Vendure. Contains methods for CRUD operations, price management, stock levels, channel assignments and variant querying. Requires numerous service dependencies for handling various aspects of variant management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/product-variant-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductVariantService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, taxCategoryService: TaxCategoryService, facetValueService: FacetValueService, assetService: AssetService, translatableSaver: TranslatableSaver, eventBus: EventBus, listQueryBuilder: ListQueryBuilder, globalSettingsService: GlobalSettingsService, stockMovementService: StockMovementService, stockLevelService: StockLevelService, channelService: ChannelService, roleService: RoleService, customFieldRelationService: CustomFieldRelationService, requestCache: RequestContextCacheService, productPriceApplicator: ProductPriceApplicator, translator: TranslatorService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<ProductVariant>) => Promise<PaginatedList<Translated<ProductVariant>>>;\n    findOne(ctx: RequestContext, productVariantId: ID, relations?: RelationPaths<ProductVariant>) => Promise<Translated<ProductVariant> | undefined>;\n    findByIds(ctx: RequestContext, ids: ID[]) => Promise<Array<Translated<ProductVariant>>>;\n    getVariantsByProductId(ctx: RequestContext, productId: ID, options: ListQueryOptions<ProductVariant> = {}, relations?: RelationPaths<ProductVariant>) => Promise<PaginatedList<Translated<ProductVariant>>>;\n    getVariantsByCollectionId(ctx: RequestContext, collectionId: ID, options: ListQueryOptions<ProductVariant>, relations: RelationPaths<ProductVariant> = []) => Promise<PaginatedList<Translated<ProductVariant>>>;\n    getProductVariantChannels(ctx: RequestContext, productVariantId: ID) => Promise<Channel[]>;\n    getProductVariantPrices(ctx: RequestContext, productVariantId: ID) => Promise<ProductVariantPrice[]>;\n    getVariantByOrderLineId(ctx: RequestContext, orderLineId: ID) => Promise<Translated<ProductVariant>>;\n    getOptionsForVariant(ctx: RequestContext, variantId: ID) => Promise<Array<Translated<ProductOption>>>;\n    getFacetValuesForVariant(ctx: RequestContext, variantId: ID) => Promise<Array<Translated<FacetValue>>>;\n    getProductForVariant(ctx: RequestContext, variant: ProductVariant) => Promise<Translated<Product>>;\n    getSaleableStockLevel(ctx: RequestContext, variant: ProductVariant) => Promise<number>;\n    getDisplayStockLevel(ctx: RequestContext, variant: ProductVariant) => Promise<string>;\n    getFulfillableStockLevel(ctx: RequestContext, variant: ProductVariant) => Promise<number>;\n    create(ctx: RequestContext, input: CreateProductVariantInput[]) => Promise<Array<Translated<ProductVariant>>>;\n    update(ctx: RequestContext, input: UpdateProductVariantInput[]) => Promise<Array<Translated<ProductVariant>>>;\n    createOrUpdateProductVariantPrice(ctx: RequestContext, productVariantId: ID, price: number, channelId: ID, currencyCode?: CurrencyCode, customFields?: CustomFieldsObject) => Promise<ProductVariantPrice>;\n    deleteProductVariantPrice(ctx: RequestContext, variantId: ID, channelId: ID, currencyCode: CurrencyCode) => ;\n    softDelete(ctx: RequestContext, id: ID | ID[]) => Promise<DeletionResponse>;\n    hydratePriceFields(ctx: RequestContext, variant: ProductVariant, priceField: F) => Promise<ProductVariant[F]>;\n    applyChannelPriceAndTax(variant: ProductVariant, ctx: RequestContext, order?: Order, throwIfNoPriceFound:  = false) => Promise<ProductVariant>;\n    assignProductVariantsToChannel(ctx: RequestContext, input: AssignProductVariantsToChannelInput) => Promise<Array<Translated<ProductVariant>>>;\n    removeProductVariantsFromChannel(ctx: RequestContext, input: RemoveProductVariantsFromChannelInput) => Promise<Array<Translated<ProductVariant>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Promotion Actions in Vendure Configuration\nDESCRIPTION: This snippet demonstrates how to register custom promotion actions in the Vendure configuration. It imports default promotion actions and adds a custom action to make it available when setting up promotions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultPromotionActions, VendureConfig } from '@vendure/core';\nimport { orderPercentageDiscount } from './order-percentage-discount';\n\nexport const config: VendureConfig = {\n    // ...\n    promotionOptions: {\n        promotionActions: [\n            ...defaultPromotionActions,\n            orderPercentageDiscount,\n        ],\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: VendurePluginMetadata Interface Definition in TypeScript\nDESCRIPTION: The VendurePluginMetadata interface extends Nestjs ModuleMetadata to define the structure of a Vendure plugin, including configuration functions, API extensions, custom entities, and compatibility information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VendurePluginMetadata extends ModuleMetadata {\n    configuration?: PluginConfigurationFn;\n    shopApiExtensions?: APIExtensionDefinition;\n    adminApiExtensions?: APIExtensionDefinition;\n    entities?: Array<Type<any>> | (() => Array<Type<any>>);\n    dashboard?: DashboardExtension;\n    compatibility?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Token in GraphQL API Call with Apollo Client\nDESCRIPTION: Example of how to specify a channel when making a GraphQL API call by setting the 'vendure-token' header to match the token of the desired channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/channels/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { loading, error, data } = useQuery(GET_PRODUCT_LIST, {\n    context: {\n        // highlight-start\n        headers: {\n            'vendure-token': 'uk-channel',\n        },\n        // highlight-end\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Bootstrapping of Vendure Server in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the bootstrap function to start a Vendure server with a basic configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/bootstrap.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap } from '@vendure/core';\nimport { config } from './vendure-config';\n\nbootstrap(config).catch(err => {\n  console.log(err);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Authentication Strategy in Vendure\nDESCRIPTION: A TypeScript implementation of an AuthenticationStrategy for Google login. It uses the google-auth-library to verify tokens received from the frontend, retrieves user data, and creates or retrieves the corresponding Vendure user account.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    AuthenticationStrategy,\n    ExternalAuthenticationService,\n    Injector,\n    RequestContext,\n    User,\n} from '@vendure/core';\nimport { OAuth2Client } from 'google-auth-library';\nimport { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nexport type GoogleAuthData = {\n    token: string;\n};\n\nexport class GoogleAuthenticationStrategy implements AuthenticationStrategy<GoogleAuthData> {\n    readonly name = 'google';\n    private client: OAuth2Client;\n    private externalAuthenticationService: ExternalAuthenticationService;\n\n    constructor(private clientId: string) {\n        // The clientId is obtained by creating a new OAuth client ID as described\n        // in the Google guide linked above.\n        this.client = new OAuth2Client(clientId);\n    }\n\n    init(injector: Injector) {\n        // The ExternalAuthenticationService is a helper service which encapsulates much\n        // of the common functionality related to dealing with external authentication\n        // providers.\n        this.externalAuthenticationService = injector.get(ExternalAuthenticationService);\n    }\n\n    defineInputType(): DocumentNode {\n        // Here we define the expected input object expected by the `authenticate` mutation\n        // under the \"google\" key.\n        return gql`\n        input GoogleAuthInput {\n            token: String!\n        }\n    `;\n    }\n\n    async authenticate(ctx: RequestContext, data: GoogleAuthData): Promise<User | false> {\n        // Here is the logic that uses the token provided by the storefront and uses it\n        // to find the user data from Google.\n        const ticket = await this.client.verifyIdToken({\n            idToken: data.token,\n            audience: this.clientId,\n        });\n        const payload = ticket.getPayload();\n        if (!payload || !payload.email) {\n            return false;\n        }\n\n        // First we check to see if this user has already authenticated in our\n        // Vendure server using this Google account. If so, we return that\n        // User object, and they will be now authenticated in Vendure.\n        const user = await this.externalAuthenticationService.findCustomerUser(ctx, this.name, payload.sub);\n        if (user) {\n            return user;\n        }\n\n        // If no user was found, we need to create a new User and Customer based\n        // on the details provided by Google. The ExternalAuthenticationService\n        // provides a convenience method which encapsulates all of this into\n        // a single method call.\n        return this.externalAuthenticationService.createCustomerAndUser(ctx, {\n            strategy: this.name,\n            externalIdentifier: payload.sub,\n            verified: payload.email_verified || false,\n            emailAddress: payload.email,\n            firstName: payload.given_name,\n            lastName: payload.family_name,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Query Hook in Vendure React Component\nDESCRIPTION: Example demonstrating how to use the useQuery hook to fetch product data. Shows implementation with loading and error states, along with proper typing and query definition using GraphQL.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-query.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@vendure/admin-ui/react';\nimport { gql } from 'graphql-tag';\n\nconst GET_PRODUCT = gql`\n   query GetProduct($id: ID!) {\n     product(id: $id) {\n       id\n       name\n       description\n     }\n   }`;\n\nexport const MyComponent = () => {\n    const { data, loading, error } = useQuery(GET_PRODUCT, { id: '1' }, { refetchOnChannelChange: true });\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error! { error }</div>;\n    return (\n        <div>\n            <h1>{data.product.name}</h1>\n            <p>{data.product.description}</p>\n        </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Querying active customer in GraphQL\nDESCRIPTION: This query retrieves the active customer in the current session. It returns a Customer object, a key component that contains customer-related information in the Vendure platform. The query does not take any parameters and is intended for use in scenarios where customer context is needed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nThe active Customer\n\"\"\"\ntype Query {\n    activeCustomer: Customer\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keycloak Authentication Strategy (TypeScript)\nDESCRIPTION: This snippet implements a KeycloakAuthenticationStrategy class that handles the authentication process with Keycloak. It validates the token, retrieves user information, and creates or finds the corresponding Vendure user.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport fetch from 'node-fetch';\nimport {\n    AuthenticationStrategy,\n    ExternalAuthenticationService,\n    Injector,\n    Logger,\n    RequestContext,\n    RoleService,\n    User,\n} from '@vendure/core';\nimport { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\n\nexport type KeycloakAuthData = {\n    token: string;\n};\n\nexport class KeycloakAuthenticationStrategy implements AuthenticationStrategy<KeycloakAuthData> {\n    readonly name = 'keycloak';\n    private externalAuthenticationService: ExternalAuthenticationService;\n    private httpService: HttpService;\n    private roleService: RoleService;\n\n    init(injector: Injector) {\n        this.externalAuthenticationService = injector.get(ExternalAuthenticationService);\n        this.httpService = injector.get(HttpService);\n        this.roleService = injector.get(RoleService);\n    }\n\n    defineInputType(): DocumentNode {\n        return gql`\n      input KeycloakAuthInput {\n        token: String!\n      }\n    `;\n    }\n\n    async authenticate(ctx: RequestContext, data: KeycloakAuthData): Promise<User | false> {\n        const { data: userInfo } = await fetch(\n            'http://localhost:9000/auth/realms/myrealm/protocol/openid-connect/userinfo', {\n                headers: {\n                    Authorization: `Bearer ${data.token}`,\n                },\n            }).then(res => res.json());\n\n        if (!userInfo) {\n            return false;\n        }\n        const user = await this.externalAuthenticationService.findAdministratorUser(ctx, this.name, userInfo.sub);\n        if (user) {\n            return user;\n        }\n\n        // When creating an Administrator, we need to know what Role(s) to assign.\n        // In this example, we've created a \"merchant\" role and assign that to all\n        // new Administrators. In a real implementation, you can have more complex\n        // logic to map an external user to a given role.\n        const roles = await this.roleService.findAll();\n        const merchantRole = roles.items.find((r) => r.code === 'merchant');\n        if (!merchantRole) {\n            Logger.error(`Could not find \"merchant\" role`);\n            return false;\n        }\n\n        return this.externalAuthenticationService.createAdministratorAndUser(ctx, {\n            strategy: this.name,\n            externalIdentifier: userInfo.sub,\n            identifier: userInfo.preferred_username,\n            emailAddress: userInfo.email,\n            firstName: userInfo.given_name,\n            lastName: userInfo.family_name,\n            roles: [merchantRole],\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOption Entity with TypeORM in TypeScript\nDESCRIPTION: This snippet declares the ProductOption entity as part of the Vendure ecommerce data model, leveraging TypeORM for ORM mapping in TypeScript. The class extends VendureEntity and implements Translatable, HasCustomFields, and SoftDeletable for enhanced functionality. It includes annotated columns for database persistence, relations to other entities such as ProductOptionGroup and ProductVariant, and customizable fields for extensibility. Expected usage is within the Vendure backend, with dependencies on TypeORM decorators and Vendure types. Constructor accepts a DeepPartial input for flexible instantiation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/product-option.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductOption extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable {\n    constructor(input?: DeepPartial<ProductOption>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    name: LocaleString;\n    @Column() code: string;\n    @OneToMany(type => ProductOptionTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<ProductOption>>;\n    @Index()\n    @ManyToOne(type => ProductOptionGroup, group => group.options)\n    group: ProductOptionGroup;\n    @EntityId()\n    groupId: ID;\n    @ManyToMany(type => ProductVariant, variant => variant.options)\n    productVariants: ProductVariant[];\n    @Column(type => CustomProductOptionFields)\n    customFields: CustomProductOptionFields;\n}\n```\n\n----------------------------------------\n\nTITLE: FulfillmentHandlerConfig Interface Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the FulfillmentHandlerConfig interface. This interface defines the configuration object required by the FulfillmentHandler constructor. It extends `ConfigurableOperationDefOptions` and mandates a `createFulfillment` function, while optionally allowing an `onFulfillmentTransition` function for handling state changes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-handler.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ninterface FulfillmentHandlerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {\n    createFulfillment: CreateFulfillmentFn<T>;\n    onFulfillmentTransition?: OnTransitionStartFn<FulfillmentState, FulfillmentTransitionData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheStrategy Interface in TypeScript\nDESCRIPTION: The CacheStrategy interface defines methods for cache operations including get, set, delete and invalidating by tags. It extends the InjectableStrategy interface and is configured via systemOptions.cacheStrategy in VendureConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CacheStrategy extends InjectableStrategy {\n    get<T extends JsonCompatible<T>>(key: string): Promise<T | undefined>;\n    set<T extends JsonCompatible<T>>(key: string, value: T, options?: SetCacheKeyOptions): Promise<void>;\n    delete(key: string): Promise<void>;\n    invalidateTags(tags: string[]): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Eligible Shipping Methods in GraphQL\nDESCRIPTION: This GraphQL query retrieves eligible shipping methods for an order, including their id, name, price, and price with tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetEligibleShippingMethods {\n    eligibleShippingMethods {\n        id\n        name\n        price\n        priceWithTax\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure with Create Tool\nDESCRIPTION: Command to create a new Vendure project using the @vendure/create tool. The command requires specifying a project name that will be used as the directory name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/installation/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @vendure/create my-shop\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Shipping Eligibility Checker in TypeScript\nDESCRIPTION: This code defines a custom ShippingEligibilityChecker that checks if the total weight of an order is below a specified maximum. It includes configuration for UI components and multilingual descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode, ShippingEligibilityChecker } from '@vendure/core';\n\nexport const maxWeightChecker = new ShippingEligibilityChecker({\n    code: 'max-weight-checker',\n    description: [\n        {languageCode: LanguageCode.en, value: 'Max Weight Checker'}\n    ],\n    args: {\n        maxWeight: {\n            type: 'int',\n            ui: {component: 'number-form-input', suffix: 'grams'},\n            label: [{languageCode: LanguageCode.en, value: 'Maximum order weight'}],\n            description: [\n                {\n                    languageCode: LanguageCode.en,\n                    value: 'Order is eligible only if its total weight is less than the specified value',\n                },\n            ],\n        },\n    },\n\n    check: (ctx, order, args) => {\n        const totalWeight = order.lines\n            .map(l => l.productVariant.customFields.weight ?? 0 * l.quantity)\n            .reduce((total, lineWeight) => total + lineWeight, 0);\n\n        return totalWeight <= args.maxWeight;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OptionalAddressFields Interface in TypeScript\nDESCRIPTION: Defines optional email address fields including cc, bcc, and replyTo.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OptionalAddressFields {\n    cc?: string;\n    bcc?: string;\n    replyTo?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductSelectorFormInputComponent for Multiple ProductVariant Selection\nDESCRIPTION: Component that allows the selection of multiple ProductVariants via an autocomplete select input. It should be used with 'ID' type list fields which represent ProductVariant IDs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductSelectorFormInputComponent implements FormInputComponent, OnInit {\n    static readonly id: DefaultFormComponentId = 'product-selector-form-input';\n    readonly isListInput = true;\n    readonly: boolean;\n    formControl: FormControl<Array<string | { id: string }>>;\n    config: DefaultFormComponentUiConfig<'product-selector-form-input'>;\n    selection$: Observable<Array<GetProductVariantQuery['productVariant']>>;\n    constructor(dataService: DataService)\n    ngOnInit() => ;\n    addProductVariant(product: ProductSelectorSearchQuery['search']['items'][number]) => ;\n    removeProductVariant(id: string) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Update Customer Mutation\nDESCRIPTION: GraphQL mutation for updating an existing customer's information using UpdateCustomerInput data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateCustomer(input: UpdateCustomerInput!): Customer!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Adding Items to Order\nDESCRIPTION: GraphQL query demonstrating how to add items to an order with stock validation and error handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/stock-control/index.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery AddItemToOrder {\n    addItemToOrder(productVariantId: 123, quantity: 150) {\n        ...on Order {\n            id\n            code\n            totalQuantity\n        }\n        ...on ErrorResult {\n            errorCode\n            message\n        }\n        ...on InsufficientStockError {\n            errorCode\n            message\n            quantityAvailable\n            order {\n                id\n                totalQuantity\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseListComponent Class in TypeScript\nDESCRIPTION: This snippet defines the BaseListComponent class, which handles pagination, searching, and data fetching for list views in the Vendure admin UI. It includes properties for managing the list state and methods for interacting with the list data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/base-list-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseListComponent<ResultType, ItemType, VariableType extends Record<string, any> = any> implements OnInit, OnDestroy {\n    searchTermControl = new FormControl('');\n    selectionManager = new SelectionManager<any>({\n        multiSelect: true,\n        itemsAreEqual: (a, b) => a.id === b.id,\n        additiveMode: true,\n    });\n    result$: Observable<ResultType>;\n    items$: Observable<ItemType[]>;\n    totalItems$: Observable<number>;\n    itemsPerPage$: Observable<number>;\n    currentPage$: Observable<number>;\n    protected destroy$ = new Subject<void>();\n    protected refresh$ = new BehaviorSubject<undefined>(undefined);\n    protected visibleCustomFieldColumnChange$ = new Subject<\n        Array<DataTableCustomFieldColumnComponent<any>>\n    >();\n    constructor(router: Router, route: ActivatedRoute)\n    setQueryFn(listQueryFn: ListQueryFn<ResultType>, mappingFn: MappingFn<ItemType, ResultType>, onPageChangeFn?: OnPageChangeFn<VariableType>, defaults?: { take: number; skip: number }) => ;\n    refreshListOnChanges(streams: Array<Observable<any>>) => ;\n    setPageNumber(page: number) => ;\n    setItemsPerPage(perPage: number) => ;\n    setVisibleColumns(columns: Array<DataTable2ColumnComponent<any>>) => ;\n    refresh() => ;\n    setQueryParam(hash: { [key: string]: any }, options?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => ;\n    setQueryParam(key: string, value: any, options?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => ;\n    setQueryParam(keyOrHash: string | { [key: string]: any }, valueOrOptions?: any, maybeOptions?: { replaceUrl?: boolean; queryParamsHandling?: QueryParamsHandling }) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageCode Enum in TypeScript for Vendure\nDESCRIPTION: This enum defines language codes in ISO 639-1 format with optional region or script modifiers. It includes major spoken languages and widely-used variants based on the Unicode CLDR summary list. The enum is used in the Vendure e-commerce platform for language-related functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/language-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum LanguageCode {\n    af = 'af'\n    ak = 'ak'\n    am = 'am'\n    ar = 'ar'\n    as = 'as'\n    az = 'az'\n    be = 'be'\n    bg = 'bg'\n    bm = 'bm'\n    bn = 'bn'\n    bo = 'bo'\n    br = 'br'\n    bs = 'bs'\n    ca = 'ca'\n    ce = 'ce'\n    co = 'co'\n    cs = 'cs'\n    cu = 'cu'\n    cy = 'cy'\n    da = 'da'\n    de = 'de'\n    de_AT = 'de_AT'\n    de_CH = 'de_CH'\n    dz = 'dz'\n    ee = 'ee'\n    el = 'el'\n    en = 'en'\n    en_AU = 'en_AU'\n    en_CA = 'en_CA'\n    en_GB = 'en_GB'\n    en_US = 'en_US'\n    eo = 'eo'\n    es = 'es'\n    es_ES = 'es_ES'\n    es_MX = 'es_MX'\n    et = 'et'\n    eu = 'eu'\n    fa = 'fa'\n    fa_AF = 'fa_AF'\n    ff = 'ff'\n    fi = 'fi'\n    fo = 'fo'\n    fr = 'fr'\n    fr_CA = 'fr_CA'\n    fr_CH = 'fr_CH'\n    fy = 'fy'\n    ga = 'ga'\n    gd = 'gd'\n    gl = 'gl'\n    gu = 'gu'\n    gv = 'gv'\n    ha = 'ha'\n    he = 'he'\n    hi = 'hi'\n    hr = 'hr'\n    ht = 'ht'\n    hu = 'hu'\n    hy = 'hy'\n    ia = 'ia'\n    id = 'id'\n    ig = 'ig'\n    ii = 'ii'\n    is = 'is'\n    it = 'it'\n    ja = 'ja'\n    jv = 'jv'\n    ka = 'ka'\n    ki = 'ki'\n    kk = 'kk'\n    kl = 'kl'\n    km = 'km'\n    kn = 'kn'\n    ko = 'ko'\n    ks = 'ks'\n    ku = 'ku'\n    kw = 'kw'\n    ky = 'ky'\n    la = 'la'\n    lb = 'lb'\n    lg = 'lg'\n    ln = 'ln'\n    lo = 'lo'\n    lt = 'lt'\n    lu = 'lu'\n    lv = 'lv'\n    mg = 'mg'\n    mi = 'mi'\n    mk = 'mk'\n    ml = 'ml'\n    mn = 'mn'\n    mr = 'mr'\n    ms = 'ms'\n    mt = 'mt'\n    my = 'my'\n    nb = 'nb'\n    nd = 'nd'\n    ne = 'ne'\n    nl = 'nl'\n    nl_BE = 'nl_BE'\n    nn = 'nn'\n    ny = 'ny'\n    om = 'om'\n    or = 'or'\n    os = 'os'\n    pa = 'pa'\n    pl = 'pl'\n    ps = 'ps'\n    pt = 'pt'\n    pt_BR = 'pt_BR'\n    pt_PT = 'pt_PT'\n    qu = 'qu'\n    rm = 'rm'\n    rn = 'rn'\n    ro = 'ro'\n    ro_MD = 'ro_MD'\n    ru = 'ru'\n    rw = 'rw'\n    sa = 'sa'\n    sd = 'sd'\n    se = 'se'\n    sg = 'sg'\n    si = 'si'\n    sk = 'sk'\n    sl = 'sl'\n    sm = 'sm'\n    sn = 'sn'\n    so = 'so'\n    sq = 'sq'\n    sr = 'sr'\n    st = 'st'\n    su = 'su'\n    sv = 'sv'\n    sw = 'sw'\n    sw_CD = 'sw_CD'\n    ta = 'ta'\n    te = 'te'\n    tg = 'tg'\n    th = 'th'\n    ti = 'ti'\n    tk = 'tk'\n    to = 'to'\n    tr = 'tr'\n    tt = 'tt'\n    ug = 'ug'\n    uk = 'uk'\n    ur = 'ur'\n    uz = 'uz'\n    vi = 'vi'\n    vo = 'vo'\n    wo = 'wo'\n    xh = 'xh'\n    yi = 'yi'\n    yo = 'yo'\n    zh = 'zh'\n    zh_Hans = 'zh_Hans'\n    zh_Hant = 'zh_Hant'\n    zu = 'zu'\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Button State and Visibility\nDESCRIPTION: Demonstrates how to control button state and visibility using the buttonState property with reactive programming.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/add-actions-to-pages/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { map, switchMap } from 'rxjs/operators';\nimport { addActionBarItem } from '@vendure/admin-ui/core';\n\nexport default [\n    addActionBarItem({\n        id: 'print-invoice',\n        label: 'Print invoice',\n        locationId: 'order-detail',\n        buttonState: context => {\n            return context.entity$.pipe(\n                map(order => ({\n                    disabled: order?.state === 'AddingItems',\n                    visible: true,\n                })),\n            );\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining TestServerOptions Interface - TypeScript\nDESCRIPTION: This snippet defines the TestServerOptions interface in TypeScript, which is used to configure the initialization of a TestServer instance. It includes optional paths for importing product data, a required initial data object, and options to configure the number of customers and logging. Dependencies include the InitialData type required for populating the database with non-product data. Inputs include various configuration parameters, and outputs affect the setup of the testing environment. Notably, customerCount defaults to 10, and logging defaults to false.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/test-server-options.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TestServerOptions {\n    productsCsvPath?: string;\n    initialData: InitialData;\n    customerCount?: number;\n    logging?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Query with RequestContext\nDESCRIPTION: Demonstrates how to use RequestContext in a GraphQL query resolver using the @Ctx decorator to access request context data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/request-context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Query()\nmyQuery(@Ctx() ctx: RequestContext) {\n  return this.myService.getData(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Google Sign-In Authentication in the Storefront\nDESCRIPTION: This JavaScript function demonstrates how to handle Google authentication in a storefront application. It receives the Google user object and uses the ID token to authenticate with the Vendure API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction onSignIn(googleUser) {\n  graphQlQuery(\n    `mutation Authenticate($token: String!) {\n        authenticate(input: {\n          google: { token: $token }\n        }) {\n        ...on CurrentUser {\n            id\n            identifier\n        }\n      }\n    }`,\n    { token: googleUser.getAuthResponse().id_token }\n  ).then(() => {\n    // redirect to account page\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CachedSessionUser Type in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `CachedSessionUser`. This type represents a simplified structure containing essential user details (`id`, `identifier`, `verified`, `channelPermissions`) suitable for storage within a cached session.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/session-cache-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype CachedSessionUser = {\n    id: ID;\n    identifier: string;\n    verified: boolean;\n    channelPermissions: UserChannelPermissions[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base StockMovement Entity - TypeScript\nDESCRIPTION: This TypeScript snippet defines the base StockMovement entity for Vendure, incorporating relations to product variants and stock locations, with properties to track the movement type, quantity, and custom fields. It utilizes decorators for ORM mapping and inherits from VendureEntity while implementing HasCustomFields. Required dependencies include ProductVariant, StockLocation, CustomStockMovementFields and a configured database setup (TypeORM). Inputs are entity field values, and output is a persisted StockMovement record; constraints include non-nullable fields as indicated.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-movement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass StockMovement extends VendureEntity implements HasCustomFields {\n    @Column({ nullable: false, type: 'varchar' })\n    readonly type: StockMovementType;\n    @Index()\n    @ManyToOne(type => ProductVariant, variant => variant.stockMovements)\n    productVariant: ProductVariant;\n    @Index()\n    @ManyToOne(type => StockLocation, stockLocation => stockLocation.stockMovements, { onDelete: 'CASCADE' })\n    stockLocation: StockLocation;\n    @EntityId()\n    stockLocationId: ID;\n    @Column()\n    quantity: number;\n    @Column(type => CustomStockMovementFields)\n    customFields: CustomStockMovementFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Order Process in TypeScript\nDESCRIPTION: Shows how to customize the default order process by disabling specific constraints. This example disables the requirement for orders to have a shipping method assigned before payment can be arranged.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureDefaultOrderProcess, VendureConfig } from '@vendure/core';\n\nconst myCustomOrderProcess = configureDefaultOrderProcess({\n  // Disable the constraint that requires\n  // Orders to have a shipping method assigned\n  // before payment.\n  arrangingPaymentRequiresShipping: false,\n    \n  // Other constraints which can be disabled. See the\n  // DefaultOrderProcessOptions interface docs for full\n  // explanations.\n  //  \n  // checkModificationPayments: false,\n  // checkAdditionalPaymentsAmount: false,\n  // checkAllVariantsExist: false,\n  // arrangingPaymentRequiresContents: false,\n  // arrangingPaymentRequiresCustomer: false,\n  // arrangingPaymentRequiresStock: false,\n  // checkPaymentsCoverTotal: false,\n  // checkAllItemsBeforeCancel: false,\n  // checkFulfillmentStates: false,\n});\n\nexport const config: VendureConfig = {\n  orderOptions: {\n    process: [myCustomOrderProcess],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionModificationEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a Collection is modified, tracking ProductVariant IDs that were added or removed from the collection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass CollectionModificationEvent extends VendureEvent {\n    constructor(ctx: RequestContext, collection: Collection, productVariantIds: ID[])\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Payment to Order in GraphQL\nDESCRIPTION: This GraphQL mutation adds a payment to the current order using the specified payment method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n    addPaymentToOrder(\n        input: {\n            method: \"my-payment-method\"\n            metadata: { token: \"<some token from the payment provider>\" }\n        }\n    ) {\n        ... on Order {\n            id\n            code\n            state\n            # ... etc\n        }\n        ... on ErrorResult {\n            errorCode\n            message\n        }\n        ...on PaymentFailedError {\n            paymentErrorMessage\n        }\n        ...on PaymentDeclinedError {\n            paymentErrorMessage\n        }\n        ...on IneligiblePaymentMethodError {\n            eligibilityCheckerMessage\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing ProductService in Vendure E2E Test Environment (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set up a test environment for a Vendure plugin and access the ProductService. It uses the createTestEnvironment function from @vendure/testing and initializes the server with specific configuration. The ProductService is then accessed using the server.app.get() method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestEnvironment, testConfig } from '@vendure/testing';\nimport { describe, beforeAll } from 'vitest';\nimport { MyPlugin } from '../my-plugin.ts';\n\ndescribe('my plugin', () => {\n    \n    const { server, adminClient, shopClient } = createTestEnvironment({\n        ...testConfig,\n        plugins: [MyPlugin],\n    });\n    \n    let productService: ProductService;\n    \n    beforeAll(async () => {\n        await server.init({\n            productsCsvPath: path.join(__dirname, 'fixtures/e2e-products.csv'),\n            initialData: myInitialData,\n            customerCount: 2,\n        });\n        await adminClient.asSuperAdmin();\n        productService = server.app.get(ProductService);\n    }, 60000);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Native Authentication Input - GraphQL - GraphQL\nDESCRIPTION: Sets up the NativeAuthInput input type for authentication requests using native credentials. Both username and password are required string fields; used as input for mutation or query operations requiring user login. Must be used with authentication endpoints that expect these credentials.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ninput NativeAuthInput {\n  username: String!\n  password: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Type in GraphQL\nDESCRIPTION: The Payment type represents a payment made against an order, containing payment method, amount, transaction details, state information, and possible refund data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_124\n\nLANGUAGE: graphql\nCODE:\n```\ntype Payment {\n  nextStates: [String!]!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  method: String!\n  amount: Money!\n  state: String!\n  transactionId: String\n  errorMessage: String\n  refunds: [Refund!]!\n  metadata: JSON\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Email with Debug Logging in Vendure\nDESCRIPTION: Example configuration for setting up SMTP email transport with detailed logging enabled. Shows how to configure both the logger level and SMTP transport options for maximum debugging information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  logger: new DefaultLogger({ level: LogLevel.Debug })\n  // ...\n  plugins: [\n    EmailPlugin.init({\n      // ...\n      transport: {\n        type: 'smtp',\n        host: 'smtp.example.com',\n        port: 587,\n        auth: {\n          user: 'username',\n          pass: 'password',\n        },\n        logging: true,\n        debug: true,\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Custom Fields with GraphQL Type\nDESCRIPTION: Example showing how to configure a 'relation' custom field with a custom GraphQL type name that differs from the entity class name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CmsArticle } from './entities/cms-article.entity';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'blogPosts',\n                list: true,\n                type: 'relation',\n                entity: CmsArticle,\n                // highlight-next-line\n                graphQLType: 'BlogPost',\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TextareaFormInputComponent in TypeScript\nDESCRIPTION: Defines a component for textarea form inputs. This is the default input for 'text' type fields, using a textarea element for longer text inputs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass TextareaFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'textarea-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'textarea-form-input'>;\n    spellcheck: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Digital Order Process in TypeScript for Vendure\nDESCRIPTION: This code creates a custom OrderProcess that automatically fulfills digital products when an order transitions from ArrangingPayment to either PaymentAuthorized or PaymentSettled state. It filters for product variants with the isDigital custom field and creates fulfillments for them.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProcess, OrderService } from '@vendure/core';\n\nimport { digitalFulfillmentHandler } from './digital-fulfillment-handler';\n\nlet orderService: OrderService;\n\n/**\n * @description\n * This OrderProcess ensures that when an Order transitions from ArrangingPayment to\n * PaymentAuthorized or PaymentSettled, then any digital products are automatically\n * fulfilled.\n */\nexport const digitalOrderProcess: OrderProcess<string> = {\n    init(injector) {\n        orderService = injector.get(OrderService);\n    },\n    async onTransitionEnd(fromState, toState, data) {\n        if (\n            fromState === 'ArrangingPayment' &&\n            (toState === 'PaymentAuthorized' || toState === 'PaymentSettled')\n        ) {\n            const digitalOrderLines = data.order.lines.filter(l => l.productVariant.customFields.isDigital);\n            if (digitalOrderLines.length) {\n                await orderService.createFulfillment(data.ctx, {\n                    lines: digitalOrderLines.map(l => ({ orderLineId: l.id, quantity: l.quantity })),\n                    handler: { code: digitalFulfillmentHandler.code, arguments: [] },\n                });\n            }\n        }\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding ActionBar Button in Vendure Admin UI\nDESCRIPTION: Demonstrates how to add a custom button to the ActionBar using addActionBarItem function. The example creates a 'Print invoice' button for the order detail page.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/add-actions-to-pages/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addActionBarItem } from '@vendure/admin-ui/core';\n\nexport default [\n    addActionBarItem({\n        id: 'print-invoice',\n        locationId: 'order-detail',\n        label: 'Print invoice',\n        icon: 'printer',\n        routerLink: route => {\n            const id = route.snapshot.params.id;\n            return ['./extensions/order-invoices', id];\n        },\n        requiresPermission: 'ReadOrder',\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Address Type in GraphQL\nDESCRIPTION: The `Address` type in GraphQL defines the structure of an address within the Vendure platform. It includes fields such as `id`, `createdAt`, `updatedAt`, `fullName`, and `customFields`. Each field is strongly typed, leveraging Vendure’s predefined scalars and object types. This type is essential for user address management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Address {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  fullName: String\n  company: String\n  streetLine1: String!\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  country: Country!\n  phoneNumber: String\n  defaultShippingAddress: Boolean\n  defaultBillingAddress: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Blog Post Entity Event\nDESCRIPTION: Example of creating an entity-specific event class extending VendureEntityEvent for blog post operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ID, RequestContext, VendureEntityEvent } from '@vendure/core';\nimport { BlogPost } from '../entities/blog-post.entity';\nimport { CreateBlogPostInput, UpdateBlogPostInput } from '../types';\n\ntype BlogPostInputTypes = CreateBlogPostInput | UpdateBlogPostInput | ID | ID[];\n\n/**\n * This event is fired whenever a BlogPost is added, updated\n * or deleted.\n */\nexport class BlogPostEvent extends VendureEntityEvent<BlogPost, BlogPostInputTypes> {\n    constructor(\n        ctx: RequestContext,\n        entity: BlogPost,\n        type: 'created' | 'updated' | 'deleted',\n        input?: BlogPostInputTypes,\n    ) {\n        super(entity, type, ctx, input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Job to the Queue with Observable Updates\nDESCRIPTION: This example demonstrates how to add a job to the queue and subscribe to updates using RxJS Observables. It shows how to handle progress updates and job completion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.myQueue.add({ intervalMs, shouldFail }, { retries: 2 });\nreturn job.updates().pipe(\n  map(update => {\n    // The returned Observable will emit a value for every update to the job\n    // such as when the `progress` or `status` value changes.\n    Logger.info(`Job ${update.id}: progress: ${update.progress}`);\n    if (update.state === JobState.COMPLETED) {\n      Logger.info(`COMPLETED ${update.id}: ${update.result}`);\n    }\n    return update.result;\n  }),\n  catchError(err => of(err.message)),\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing BullMQJobQueuePlugin in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the BullMQJobQueuePlugin in a Vendure configuration file. It sets up a connection to Redis on the default port 6379.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BullMQJobQueuePlugin } from '@vendure/job-queue-plugin/package/bullmq';\n\nconst config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    // DefaultJobQueuePlugin should be removed from the plugins array\n    BullMQJobQueuePlugin.init({\n      connection: {\n        port: 6379\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Refunding Orders in GraphQL\nDESCRIPTION: Defines a mutation for refunding an order, taking RefundOrderInput as parameters and returning a RefundOrderResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_75\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  refundOrder(input: RefundOrderInput!): RefundOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRouteParams Hook in React Component\nDESCRIPTION: Example showing how to use the useRouteParams hook to access route parameters and query parameters within a React component in the Vendure Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-route-params.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouteParams } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function MyComponent() {\n    const { params, queryParams } = useRouteParams();\n    // ...\n    return <div>{ params.id }</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockLocation Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StockLocation, which represents a physical location where inventory is stored. It includes basic descriptive information and supports custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_188\n\nLANGUAGE: graphql\nCODE:\n```\ntype StockLocation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  description: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendure with Custom Plugin\nDESCRIPTION: Shows how to import and configure a custom plugin in the Vendure configuration file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AvatarPlugin } from './plugins/avatar-plugin/avatar.plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [AvatarPlugin],\n};\n```\n\n----------------------------------------\n\nTITLE: FacetValueService Class Definition in TypeScript\nDESCRIPTION: Core service class that provides methods for managing FacetValue entities in Vendure. Includes methods for finding, creating, updating, and deleting facet values, as well as checking their usage in products and variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/facet-value-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FacetValueService {\n    constructor(connection: TransactionalConnection, translatableSaver: TranslatableSaver, configService: ConfigService, customFieldRelationService: CustomFieldRelationService, channelService: ChannelService, eventBus: EventBus, translator: TranslatorService, listQueryBuilder: ListQueryBuilder)\n    findAll(lang: LanguageCode) => Promise<Array<Translated<FacetValue>>>;\n    findAll(ctx: RequestContext, lang: LanguageCode) => Promise<Array<Translated<FacetValue>>>;\n    findAll(ctxOrLang: RequestContext | LanguageCode, lang?: LanguageCode) => Promise<Array<Translated<FacetValue>>>;\n    findAllList(ctx: RequestContext, options?: ListQueryOptions<FacetValue>, relations?: RelationPaths<FacetValue>) => Promise<PaginatedList<Translated<FacetValue>>>;\n    findOne(ctx: RequestContext, id: ID) => Promise<Translated<FacetValue> | undefined>;\n    findByIds(ctx: RequestContext, ids: ID[]) => Promise<Array<Translated<FacetValue>>>;\n    findByFacetId(ctx: RequestContext, id: ID) => Promise<Array<Translated<FacetValue>>>;\n    findByFacetIdList(ctx: RequestContext, id: ID, options?: ListQueryOptions<FacetValue>, relations?: RelationPaths<FacetValue>) => Promise<PaginatedList<Translated<FacetValue>>>;\n    create(ctx: RequestContext, facet: Facet, input: CreateFacetValueInput | CreateFacetValueWithFacetInput) => Promise<Translated<FacetValue>>;\n    update(ctx: RequestContext, input: UpdateFacetValueInput) => Promise<Translated<FacetValue>>;\n    delete(ctx: RequestContext, id: ID, force: boolean = false) => Promise<DeletionResponse>;\n    checkFacetValueUsage(ctx: RequestContext, facetValueIds: ID[], channelId?: ID) => Promise<{ productCount: number; variantCount: number }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Buy One Get One Free Action in TypeScript\nDESCRIPTION: A PromotionItemAction implementation that applies a 'buy one get one free' discount. It demonstrates dependency on a condition and uses the condition's state to determine which items should be free.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const buy1Get1FreeAction = new PromotionItemAction({\n    code: 'buy_1_get_1_free',\n    description: [{\n        languageCode: LanguageCode.en,\n        value: 'Buy 1, get 1 free',\n    }],\n    args: {},\n    conditions: [buyXGetYFreeCondition],\n    execute(ctx, orderLine, args, state) {\n        const freeItemIds = state.buy_x_get_y_free.freeItemIds;\n        if (idsContainsItem(freeItemIds, orderLine)) {\n            const unitPrice = ctx.channel.pricesIncludeTax ? orderLine.unitPriceWithTax : orderLine.unitPrice;\n            return -unitPrice;\n        }\n        return 0;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Settling Refund in Vendure (TypeScript)\nDESCRIPTION: Settles a Refund by transitioning it to the 'Settled' state. It takes a RequestContext and SettleRefundInput as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nsettleRefund(ctx: RequestContext, input: SettleRefundInput): Promise<Refund>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom FulfillmentHandler in Vendure (TypeScript)\nDESCRIPTION: Example demonstrating how to define a custom FulfillmentHandler (`shipomaticFulfillmentHandler`). It includes defining a unique `code`, `description`, custom arguments (`args`), an initialization function (`init`), the core fulfillment creation logic (`createFulfillment`) interacting with a third-party service, and a state transition handler (`onFulfillmentTransition`). The `createFulfillment` function returns fulfillment details like method and tracking code, while handling potential errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nlet shipomatic;\n\nexport const shipomaticFulfillmentHandler = new FulfillmentHandler({\n  code: 'ship-o-matic',\n  description: [{\n    languageCode: LanguageCode.en,\n    value: 'Generate tracking codes via the Ship-o-matic API'\n  }],\n\n  args: {\n    preferredService: {\n      type: 'string',\n      ui: {\n        component: 'select-form-input',\n        options: [\n          { value: 'first_class' },\n          { value: 'priority'},\n          { value: 'standard' },\n        ],\n      },\n    }\n  },\n\n  init: () => {\n    // some imaginary shipping service\n    shipomatic = new ShipomaticClient(API_KEY);\n  },\n\n  createFulfillment: async (ctx, orders, lines, args) => {\n\n     const shipment = getShipmentFromOrders(orders, lines);\n\n     try {\n       const transaction = await shipomatic.transaction.create({\n         shipment,\n         service_level: args.preferredService,\n         label_file_type: 'png',\n       })\n\n       return {\n         method: `Ship-o-matic ${args.preferredService}`,\n         trackingCode: transaction.tracking_code,\n         customFields: {\n           shippingTransactionId: transaction.id,\n         }\n       };\n     } catch (e: any) {\n       // Errors thrown from within this function will\n       // result in a CreateFulfillmentError being returned\n       throw e;\n     }\n  },\n\n  onFulfillmentTransition: async (fromState, toState, { fulfillment }) => {\n    if (toState === 'Cancelled') {\n      await shipomatic.transaction.cancel({\n        transaction_id: fulfillment.customFields.shippingTransactionId,\n      });\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Digital Products Plugin in Vendure Config\nDESCRIPTION: This snippet shows how to add the DigitalProductsPlugin to the Vendure configuration. The plugin must be included in the plugins array of the VendureConfig object to enable digital product functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { DigitalProductsPlugin } from './plugins/digital-products/digital-products.plugin';\n\nconst config: VendureConfig = {\n    // ... other config omitted\n    plugins: [\n        // ... other plugins omitted\n        // highlight-next-line\n        DigitalProductsPlugin,\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Video Transcoding Plugin Implementation\nDESCRIPTION: Plugin implementation that extends GraphQL API, defines custom fields, and registers services and resolvers for video processing functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { ProductVideoService } from './services/product-video.service';\nimport { ProductVideoResolver } from './api/product-video.resolver';\nimport { adminApiExtensions } from './api/api-extensions';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    providers: [ProductVideoService],\n    adminApiExtensions: {\n        schema: adminApiExtensions,\n        resolvers: [ProductVideoResolver]\n    },\n    configuration: config => {\n        config.customFields.Product.push({\n            name: 'videoUrl',\n            type: 'string',\n        });\n        return config;\n    }\n})\nexport class ProductVideoPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Defining the AssetNamingStrategy Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `AssetNamingStrategy` which extends `InjectableStrategy`. It specifies two methods: `generateSourceFileName` for creating the main asset filename from the original upload, and `generatePreviewFileName` for creating the corresponding preview image filename based on the generated source filename. Both methods receive a `RequestContext` and the relevant filename, and must handle potential naming conflicts by generating unique names when a `conflictFileName` is provided as the third argument.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/assets/asset-naming-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface AssetNamingStrategy extends InjectableStrategy {\n    generateSourceFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string): string;\n    generatePreviewFileName(ctx: RequestContext, sourceFileName: string, conflictFileName?: string): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentState Type in TypeScript for Vendure\nDESCRIPTION: This code snippet defines the PaymentState type, which is a union of predefined payment states ('Created', 'Error', 'Cancelled') and custom states. It allows for extensibility by including keys from CustomPaymentStates and PaymentStates interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-state.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PaymentState = | 'Created'\n    | 'Error'\n    | 'Cancelled'\n    | keyof CustomPaymentStates\n    | keyof PaymentStates\n```\n\n----------------------------------------\n\nTITLE: Querying Collection Details in GraphQL\nDESCRIPTION: GraphQL query to fetch collection details including id, name, slug, description and featured asset using the collection's slug.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetCollection($slug: String!) {\n  collection(slug: $slug) {\n    id\n    name\n    slug\n    description\n    featuredAsset {\n      id\n      preview\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"electronics\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Product in GraphQL\nDESCRIPTION: GraphQL query for fetching a single product by either ID or slug. The query requires at least one of these parameters to be provided, otherwise an error will result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  product(id: ID, slug: String): Product\n}\n```\n\n----------------------------------------\n\nTITLE: Registering REST Plugin in Vendure\nDESCRIPTION: Configures a Vendure plugin to register the products controller. Imports PluginCommonModule for access to core providers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/rest-endpoint/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { ProductsController } from './api/products.controller';\n\n@VendurePlugin({\n  imports: [PluginCommonModule],\n  controllers: [ProductsController],\n})\nexport class RestPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Percentage Discount with PromotionItemAction\nDESCRIPTION: Example showing how to create a PromotionItemAction that applies a percentage discount to each OrderLine. The execute function calculates the discount amount based on the unit price and the discount percentage.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Applies a percentage discount to each OrderLine\nconst itemPercentageDiscount = new PromotionItemAction({\n    code: 'item_percentage_discount',\n    args: { discount: 'percentage' },\n    execute(ctx, orderLine, args) {\n        return -orderLine.unitPrice * (args.discount / 100);\n    },\n    description: 'Discount every item by { discount }%',\n});\n```\n\n----------------------------------------\n\nTITLE: Using useMutation Hook for GraphQL Mutations in React\nDESCRIPTION: This example demonstrates how to use the useMutation hook to execute a GraphQL mutation for updating a product. It shows the hook usage, handling loading and error states, and triggering the mutation on a button click.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-mutation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMutation } from '@vendure/admin-ui/react';\nimport { gql } from 'graphql-tag';\n\nconst UPDATE_PRODUCT = gql`\n  mutation UpdateProduct($input: UpdateProductInput!) {\n    updateProduct(input: $input) {\n    id\n    name\n  }\n}`;\n\nexport const MyComponent = () => {\n    const [updateProduct, { data, loading, error }] = useMutation(UPDATE_PRODUCT);\n\n    const handleClick = () => {\n        updateProduct({\n            input: {\n                id: '1',\n                name: 'New name',\n            },\n        }).then(result => {\n            // do something with the result\n        });\n    };\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error! { error }</div>;\n\n    return (\n    <div>\n        <button onClick={handleClick}>Update product</button>\n        {data && <div>Product updated!</div>}\n    </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring the CustomerGroup Entity - Vendure - TypeScript\nDESCRIPTION: This snippet defines a TypeScript class CustomerGroup, extending VendureEntity and implementing the HasCustomFields interface for the Vendure e-commerce framework. It leverages TypeORM decorators such as @Column, @ManyToMany, and @OneToMany to configure persistence and relationships to other entities. The constructor optionally accepts a DeepPartial to facilitate easy instantiation, and customFields enables extension with additional properties. Required dependencies include TypeORM decorators, VendureEntity, related types (Customer, TaxRate, CustomCustomerGroupFields), and proper TypeScript configuration. Inputs include initialization objects for the entity, while outputs are instances representing persistent customer groups. The class assumes a properly configured Vendure and TypeORM environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/customer-group.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CustomerGroup extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<CustomerGroup>)\n    @Column() name: string;\n    @ManyToMany(type => Customer, customer => customer.groups)\n    customers: Customer[];\n    @Column(type => CustomCustomerGroupFields)\n    customFields: CustomCustomerGroupFields;\n    @OneToMany(type => TaxRate, taxRate => taxRate.zone)\n    taxRates: TaxRate[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Payment Process in Vendure\nDESCRIPTION: Defines a custom payment process with a new 'Validating' state and configures transitions between payment states\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentProcess } from '@vendure/core';\n\n/**\n * Declare your custom state in special interface to make it type-safe\n */\ndeclare module '@vendure/core' {\n    interface PaymentStates {\n        Validating: never;\n    }\n}\n\n/**\n * Define a new \"Validating\" Payment state, and set up the\n * permitted transitions to/from it.\n */\nconst customPaymentProcess: PaymentProcess<'Validating'> = {\n    transitions: {\n        Created: {\n            to: ['Validating'],\n            mergeStrategy: 'replace',\n        },\n        Validating: {\n            to: ['Settled', 'Declined', 'Cancelled'],\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminUiPlugin with UI Extensions\nDESCRIPTION: Configuration for the AdminUiPlugin to compile and include UI extensions for custom routes\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAdminUiPlugin.init({\n    route: 'admin',\n    port: serverPort + 2,\n    adminUiConfig: {\n        apiPort: serverPort,\n    },\n    app: compileUiExtensions({\n        outputPath: path.join(__dirname, '../admin-ui'),\n        extensions: [\n            GreeterPlugin.ui,\n        ],\n        devMode: true,\n    }),\n})\n```\n\n----------------------------------------\n\nTITLE: SimpleGraphQLClient Class Definition in TypeScript\nDESCRIPTION: Class definition showing the available methods and constructor for the SimpleGraphQLClient, including authentication, query execution, and file upload capabilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/simple-graph-qlclient.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SimpleGraphQLClient {\n    constructor(vendureConfig: Required<VendureConfig>, apiUrl: string = '')\n    setAuthToken(token: string) => ;\n    setChannelToken(token: string | null) => ;\n    getAuthToken() => string;\n    query(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V, queryParams?: QueryParams) => Promise<T>;\n    fetch(url: string, options: RequestInit = {}) => Promise<Response>;\n    queryStatus(query: DocumentNode, variables?: V) => Promise<number>;\n    asUserWithCredentials(username: string, password: string) => ;\n    asSuperAdmin() => ;\n    asAnonymousUser() => ;\n    fileUploadMutation(options: {\n        mutation: DocumentNode;\n        filePaths: string[];\n        mapVariables: (filePaths: string[]) => any;\n    }) => Promise<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Client for Vendure GraphQL API in TypeScript\nDESCRIPTION: Configuring Apollo Client to work with Vendure's GraphQL API. Handles authentication tokens, language settings, and channel tokens while providing advanced features like caching.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    ApolloClient,\n    ApolloLink,\n    HttpLink,\n    InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst API_URL = `https://demo.vendure.io/shop-api`;\n\n// If using bearer-token based session management, we'll store the token\n// in localStorage using this key.\nconst AUTH_TOKEN_KEY = 'auth_token';\n\nlet channelToken: string | undefined;\nlet languageCode: string | undefined;\n\nconst httpLink = new HttpLink({\n    uri: () => {\n        if (languageCode) {\n            return `${API_URL}?languageCode=${languageCode}`;\n        } else {\n            return API_URL;\n        }\n    },\n    // This is required if using cookie-based session management,\n    // so that any cookies get sent with the request.\n    credentials: 'include',\n});\n\n// This part is used to check for and store the session token\n// if it is returned by the server.\nconst afterwareLink = new ApolloLink((operation, forward) => {\n    return forward(operation).map((response) => {\n        const context = operation.getContext();\n        const authHeader = context.response.headers.get('vendure-auth-token');\n        if (authHeader) {\n            // If the auth token has been returned by the Vendure\n            // server, we store it in localStorage\n            localStorage.setItem(AUTH_TOKEN_KEY, authHeader);\n        }\n        return response;\n    });\n});\n\n/**\n * Used to specify a channel token for projects that use\n * multiple Channels.\n */\nexport function setChannelToken(value: string | undefined) {\n    channelToken = value;\n}\n\n/**\n * Used to specify a language for any localized results.\n */\nexport function setLanguageCode(value: string | undefined) {\n    languageCode = value;\n}\n\nexport const client = new ApolloClient({\n    link: ApolloLink.from([\n        // If we have stored the authToken from a previous\n        // response, we attach it to all subsequent requests.\n        setContext((request, operation) => {\n            const authToken = localStorage.getItem(AUTH_TOKEN_KEY);\n            let headers: Record<string, any> = {};\n            if (authToken) {\n                headers.authorization = `Bearer ${authToken}`;\n            }\n            if (channelToken) {\n                headers['vendure-token'] = channelToken;\n            }\n            return { headers };\n        }),\n        afterwareLink,\n        httpLink,\n    ]),\n    cache: new InMemoryCache(),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Buy X Get Y Free Condition in TypeScript\nDESCRIPTION: A PromotionCondition implementation that determines eligibility for the buy X get Y free promotion. It returns a state object containing the IDs of items that should be free.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/promotions/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const buyXGetYFreeCondition = new PromotionCondition({\n    code: 'buy_x_get_y_free',\n    description: [{\n        languageCode: LanguageCode.en,\n        value: 'Buy { amountX } of { variantIdsX } products, get { amountY } of { variantIdsY } products free',\n    }],\n    args: {\n        // omitted for brevity\n    },\n    async check(ctx, order, args) {\n        // logic omitted for brevity\n        if (freeItemIds.length === 0) {\n            return false;\n        }\n        return {freeItemIds};\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom MoneyStrategy with Three Decimal Places\nDESCRIPTION: Example of creating a custom MoneyStrategy that supports three decimal places for currencies, enabling more precise pricing for bulk products in B2B scenarios.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultMoneyStrategy, VendureConfig } from '@vendure/core';\n\nexport class ThreeDecimalPlacesMoneyStrategy extends DefaultMoneyStrategy {\n    // highlight-next-line\n    readonly precision = 3;\n}\n\nexport const config: VendureConfig = {\n    // ...\n    entityOptions: {\n        moneyStrategy: new ThreeDecimalPlacesMoneyStrategy(),\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Field with UI Component Configuration\nDESCRIPTION: Configuration of a custom field using the custom slider form input component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncustomFields: {\n    Product: [\n        {\n            name: 'intensity', type: 'int', min: 0, max: 100, defaultValue: 0,\n            ui: {component: 'slider-form-input'}\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure Payments Plugin and Stripe Library\nDESCRIPTION: Shell commands to install the necessary Node.js packages (`@vendure/payments-plugin` and `stripe`) using either Yarn or NPM. These packages are required for the Vendure backend to interact with the Stripe API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vendure/payments-plugin stripe\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/payments-plugin stripe\n```\n\n----------------------------------------\n\nTITLE: Defining SellerFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type is used for filtering sellers based on various criteria such as id, createdAt, updatedAt, and name. It also supports logical AND and OR operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_143\n\nLANGUAGE: graphql\nCODE:\n```\ninput SellerFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  name: StringOperators\n  _and: [SellerFilterParameter!]\n  _or: [SellerFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Vendure\nDESCRIPTION: Database connection configuration using environment variables for connecting to a PostgreSQL database on Render.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-render/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    dbConnectionOptions: {\n        // ...\n        database: process.env.DB_NAME,\n        host: process.env.DB_HOST,\n        port: +process.env.DB_PORT,\n        username: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Dashboard Widget Component for Reviews\nDESCRIPTION: Implementation of an Angular component that displays pending product reviews in a dashboard widget. Uses DataService for querying review data and includes template definition with routing capabilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/dashboard-widgets/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { DataService, SharedModule } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n    selector: 'reviews-widget',\n    template: `\n        <ul>\n            <li *ngFor=\"let review of pendingReviews$ | async\">\n                <a [routerLink]=\"['/extensions', 'product-reviews', review.id]\">{{ review.summary }}</a>\n                <span class=\"rating\">{{ review.rating }} / 5</span>\n            </li>\n        </ul>\n    `,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class ReviewsWidgetComponent implements OnInit {\n    pendingReviews$: Observable<any[]>;\n\n    constructor(private dataService: DataService) {}\n\n    ngOnInit() {\n        this.pendingReviews$ = this.dataService.query(gql`\n            query GetAllReviews($options: ProductReviewListOptions) {\n                productReviews(options: $options) {\n                    items {\n                        id\n                        createdAt\n                        authorName\n                        summary\n                        rating\n                    }\n                }\n            }`, {\n                options: {\n                    filter: { state: { eq: 'new' } },\n                    take: 10,\n                },\n            })\n            .mapStream(data => data.productReviews.items);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to Customer Entity\nDESCRIPTION: Extends the Customer entity with a custom field for storing wishlist items using plugin configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { WishlistItem } from './entities/wishlist-item.entity';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    entities: [WishlistItem],\n    configuration: config => {\n        config.customFields.Customer.push({\n            name: 'wishlistItems',\n            type: 'relation',\n            list: true,\n            entity: WishlistItem,\n            internal: true,\n        });\n        return config;\n    },\n})\nexport class WishlistPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Widget Permissions\nDESCRIPTION: Example of overriding a default widget's configuration to modify its permission requirements, specifically limiting access to SuperAdmin role.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/dashboard-widgets/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerDashboardWidget } from '@vendure/admin-ui/core';\nimport { OrderSummaryWidgetComponent } from '@vendure/admin-ui/dashboard';\n\nexport default [\n    registerDashboardWidget('orderSummary', {\n        title: 'dashboard.orders-summary',\n        loadComponent: () => OrderSummaryWidgetComponent,\n        requiresPermissions: ['SuperAdmin'],\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Attaching Files to Vendure Emails using `setAttachments` in TypeScript\nDESCRIPTION: This snippet illustrates the usage of the `setAttachments` method to add file attachments to emails within a Vendure application. The method accepts an asynchronous function that receives the event (e.g., `ActivateVoucherEvent`) and should return an array of attachment objects. Each attachment object can specify a `filename` and either a `path` (URL or file path) or `content` (string, Buffer, Stream). The example dynamically retrieves voucher data based on the event and constructs an attachment object using an image URL.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nconst testAttachmentHandler = new EmailEventListener('activate-voucher')\n  .on(ActivateVoucherEvent)\n  // ... omitted some steps for brevity\n  .setAttachments(async (event) => {\n    const { imageUrl, voucherCode } = await getVoucherDataForUser(event.user.id);\n    return [\n      {\n        filename: `voucher-${voucherCode}.jpg`,\n        path: imageUrl,\n      },\n    ];\n  });\n```\n```\n\n----------------------------------------\n\nTITLE: GraphQL Complete Schema Definition\nDESCRIPTION: Demonstrates a complete minimal schema with query, mutation, and type definitions\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  customers: [Customer!]!\n}\n\ntype Mutation {\n  updateCustomerEmail(input: UpdateCustomerEmailInput!): Customer!\n}\n\ninput UpdateCustomerEmailInput {\n  customerId: ID!\n  email: String!\n}\n\ntype Customer {\n  id: ID!\n  name: String!\n  email: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderOptions Interface in TypeScript\nDESCRIPTION: Interface definition for OrderOptions that specifies various configuration options for the order processing system in Vendure, including limits, strategies for price calculation, stock allocation, order merging, and other order-related behaviors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderOptions {\n    orderItemsLimit?: number;\n    orderLineItemsLimit?: number;\n    orderItemPriceCalculationStrategy?: OrderItemPriceCalculationStrategy;\n    process?: Array<OrderProcess<any>>;\n    stockAllocationStrategy?: StockAllocationStrategy;\n    mergeStrategy?: OrderMergeStrategy;\n    checkoutMergeStrategy?: OrderMergeStrategy;\n    orderCodeStrategy?: OrderCodeStrategy;\n    orderByCodeAccessStrategy?: OrderByCodeAccessStrategy;\n    changedPriceHandlingStrategy?: ChangedPriceHandlingStrategy;\n    orderPlacedStrategy?: OrderPlacedStrategy;\n    activeOrderStrategy?: ActiveOrderStrategy<any> | Array<ActiveOrderStrategy<any>>;\n    orderSellerStrategy?: OrderSellerStrategy;\n    guestCheckoutStrategy?: GuestCheckoutStrategy;\n    orderInterceptors?: OrderInterceptor[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Product Reviews\nDESCRIPTION: GraphQL schema definition for product reviews including types for ProductReview, ProductReviewList, and query extension.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/paginated-list/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const adminApiExtensions = gql`\ntype ProductReview implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  product: Product!\n  productId: ID!\n  text: String!\n  rating: Float!\n}\n\ntype ProductReviewList implements PaginatedList {\n  items: [ProductReview!]!\n  totalItems: Int!\n}\n\n# Generated at run-time by Vendure\ninput ProductReviewListOptions\n\nextend type Query {\n   productReviews(options: ProductReviewListOptions): ProductReviewList!\n}\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating Detail View Template in HTML\nDESCRIPTION: Template implementation for the detail view component showing standard layout structure with action bar, form fields, and sidebar content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-detail-views/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left></vdr-ab-left>\n        <vdr-ab-right>\n            <button\n                class=\"button primary\"\n                *ngIf=\"isNew$ | async; else updateButton\"\n                (click)=\"create()\"\n                [disabled]=\"detailForm.pristine || detailForm.invalid\"\n            >\n                {{ 'common.create' | translate }}\n            </button>\n            <ng-template #updateButton>\n                <button\n                    class=\"btn btn-primary\"\n                    (click)=\"update()\"\n                    [disabled]=\"detailForm.pristine || detailForm.invalid\"\n                >\n                    {{ 'common.update' | translate }}\n                </button>\n            </ng-template>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field label=\"Title\" for=\"title\">\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\n                    </vdr-form-field>\n                    <vdr-form-field label=\"Rating\" for=\"rating\">\n                        <input id=\"rating\" type=\"number\" min=\"1\" max=\"5\" formControlName=\"rating\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL ActiveOrderResult Union\nDESCRIPTION: The ActiveOrderResult union type describes potential outcomes of an order-related query. It can result in either an Order or a NoActiveOrderError. This helps in handling various order states within the Vendure system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nunion ActiveOrderResult = Order | NoActiveOrderError\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Promotions with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for bulk deleting multiple promotions. Accepts an array of promotion IDs and returns an array of DeletionResponse objects with results for each deletion operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_57\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deletePromotions(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in Resolvers\nDESCRIPTION: Example of using generated GraphQL types in a Resolver class for type-safe operations\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Allow, Ctx, PaginatedList, RequestContext, Transaction } from '@vendure/core';\n\nimport { organizationPermission } from '../constants';\nimport { Organization } from '../entities/organization.entity';\nimport { OrganizationService } from '../services/organization.service';\nimport { QueryOrganizationArgs, MutationCreateOrganizationArgs } from '../gql/generated';\n\n@Resolver()\nexport class AdminResolver {\n    constructor(private organizationService: OrganizationService) {}\n\n    @Query()\n    @Allow(organizationPermission.Read)\n    organization(@Ctx() ctx: RequestContext, @Args() args: QueryOrganizationArgs): Promise<Organization> {\n        return this.organizationService.findOne(ctx, args.id);\n    }\n    \n    @Transaction()\n    @Mutation()\n    @Allow(organizationPermission.Create)\n    createOrganization(\n        @Ctx() ctx: RequestContext,\n        @Args() args: MutationCreateOrganizationArgs,\n    ): Promise<Organization> {\n        return this.organizationService.create(ctx, args.input);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Digital ShippingLineAssignmentStrategy in Vendure\nDESCRIPTION: Creates a strategy for assigning shipping lines to ensure digital products use digital shipping methods and physical products use standard shipping.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DigitalShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {\n    assignShippingLineToOrderLines(\n        ctx: RequestContext,\n        shippingLine: ShippingLine,\n        order: Order,\n    ): OrderLine[] | Promise<OrderLine[]> {\n        if (shippingLine.shippingMethod.customFields.isDigital) {\n            return order.lines.filter(l => l.productVariant.customFields.isDigital);\n        } else {\n            return order.lines.filter(l => !l.productVariant.customFields.isDigital);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocaleStringCustomFieldConfig GraphQL Type\nDESCRIPTION: Defines the `LocaleStringCustomFieldConfig` GraphQL type, representing the configuration for a custom field of type 'localeString'. It includes properties like name, type, list status, constraints (length, pattern), localization data (label, description), read-only status, internal flag, nullability, required permissions, and UI hints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_94\n\nLANGUAGE: graphql\nCODE:\n```\ntype LocaleStringCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  length: Int\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  pattern: String\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorService Class in TypeScript\nDESCRIPTION: Class definition for AdministratorService showing its constructor and available methods for managing administrator entities. The service provides functionality for finding, creating, updating, and deleting administrators, as well as assigning roles.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/administrator-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AdministratorService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, listQueryBuilder: ListQueryBuilder, passwordCipher: PasswordCipher, userService: UserService, roleService: RoleService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, requestContextService: RequestContextService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Administrator>, relations?: RelationPaths<Administrator>) => Promise<PaginatedList<Administrator>>;\n    findOne(ctx: RequestContext, administratorId: ID, relations?: RelationPaths<Administrator>) => Promise<Administrator | undefined>;\n    findOneByUserId(ctx: RequestContext, userId: ID, relations?: RelationPaths<Administrator>) => Promise<Administrator | undefined>;\n    create(ctx: RequestContext, input: CreateAdministratorInput) => Promise<Administrator>;\n    update(ctx: RequestContext, input: UpdateAdministratorInput) => Promise<Administrator>;\n    assignRole(ctx: RequestContext, administratorId: ID, roleId: ID) => Promise<Administrator>;\n    softDelete(ctx: RequestContext, id: ID) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Card Component in Vendure Admin UI\nDESCRIPTION: Example demonstrating how to import and use the Card component from Vendure's admin UI React components library to group related content with an optional title.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/card.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from '@vendure/admin-ui/react';\n\nexport function MyComponent() {\n  return (\n    <Card title='My Title'>\n      <p>Some content</p>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Facet Type Definition\nDESCRIPTION: Defines the core Facet type with properties for managing product facets including translations and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_64\n\nLANGUAGE: graphql\nCODE:\n```\ntype Facet {\n  isPrivate: Boolean!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  code: String!\n  values: [FacetValue!]!\n  valueList(options: FacetValueListOptions): FacetValueList!\n  translations: [FacetTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of enabledPaymentMethodsParams in MolliePluginOptions (TypeScript)\nDESCRIPTION: Example showing how to implement the `enabledPaymentMethodsParams` function within `MolliePlugin.init`. This specific implementation uses the `injector`, `ctx`, and `order` arguments to determine the appropriate `locale` and `billingCountry` based on the order's billing address and the request context's language code. These parameters are then passed to the Mollie API when fetching available payment methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/mollie-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { VendureConfig } from '@vendure/core';\nimport { MolliePlugin, getLocale } from '@vendure/payments-plugin/package/mollie';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    MolliePlugin.init({\n      enabledPaymentMethodsParams: (injector, ctx, order) => {\n        const locale = order?.billingAddress?.countryCode\n            ? getLocale(order.billingAddress.countryCode, ctx.languageCode)\n            : undefined;\n\n        return {\n          locale,\n          billingCountry: order?.billingAddress?.countryCode,\n        },\n      }\n    }),\n  ],\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Product Export Service with RequestContext Serialization\nDESCRIPTION: Example showing how to handle RequestContext serialization in job queues for product export functionality, demonstrating the use of ctx.serialize() and RequestContext.deserialize().\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { JobQueue, JobQueueService, Product, TransactionalConnection,\n    SerializedRequestContext, RequestContext } from '@vendure/core';\n\n@Injectable()\nclass ProductExportService implements OnModuleInit {\n\n    private jobQueue: JobQueue<{ ctx: SerializedRequestContext; }>;\n\n    constructor(private jobQueueService: JobQueueService,\n                private connection: TransactionalConnection) {\n    }\n\n    async onModuleInit() {\n        this.jobQueue = await this.jobQueueService.createQueue({\n            name: 'export-products',\n            process: async job => {\n                const ctx = RequestContext.deserialize(job.data.ctx);\n                const allProducts = await this.connection.getRepository(ctx, Product).find();\n            },\n        });\n    }\n\n    exportAllProducts(ctx: RequestContext) {\n        return this.jobQueue.add({ ctx: ctx.serialize() });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Refund Entity in Vendure - TypeScript\nDESCRIPTION: The Refund class represents a refund entity within the Vendure system. It extends VendureEntity and implements the HasCustomFields interface, adding specific refund-related fields such as items, shipping, and adjustment costs. Dependencies include Vendure core entities such as Payment and RefundLine. The class supports properties for various refund attributes including method, reason, state, transaction ID, lines, payment, and custom fields. The inputs are optionally a partial Refund object, and it returns an instance of the Refund class.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/refund.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Refund extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<Refund>)\n    @Money() items: number;\n    @Money() shipping: number;\n    @Money() adjustment: number;\n    @Money() total: number;\n    @Column() method: string;\n    @Column({ nullable: true }) reason: string;\n    @Column('varchar') state: RefundState;\n    @Column({ nullable: true }) transactionId: string;\n    @OneToMany(type => RefundLine, line => line.refund)\n    @JoinTable()\n    lines: RefundLine[];\n    @Index()\n    @ManyToOne(type => Payment, payment => payment.refunds)\n    @JoinColumn()\n    payment: Payment;\n    @EntityId()\n    paymentId: ID;\n    @Column('simple-json') metadata: PaymentMetadata;\n    @Column(type => CustomRefundFields)\n    customFields: CustomRefundFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining File Structure for Wishlist Plugin\nDESCRIPTION: Shows the directory structure for organizing the wishlist plugin files including the main plugin file and entities directory.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\n├── wishlist-plugin\n    ├── wishlist.plugin.ts\n    ├── entities\n        ├── wishlist-item.entity.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing ElasticsearchPlugin in Vendure Config\nDESCRIPTION: Example showing how to initialize and configure the ElasticsearchPlugin in the Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElasticsearchPlugin } from '@vendure/elasticsearch-plugin';\n\nconst config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    ElasticsearchPlugin.init({\n      host: 'http://localhost',\n      port: 9200,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fields in TypeScript List Component\nDESCRIPTION: This TypeScript code shows how to extend TypedBaseListComponent to support custom fields in a list view. It demonstrates initializing custom fields configuration, adding custom field filters, and setting up custom field sorting.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-list-views/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n    selector: 'review-list',\n    templateUrl: './review-list.component.html',\n    styleUrls: ['./review-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class ReviewListComponent extends TypedBaseListComponent<typeof getReviewListDocument, 'reviews'> {\n\n    // highlight-next-line\n    customFields = this.getCustomFieldConfig('ProductReview');\n\n    readonly filters = this.createFilterCollection()\n        .addIdFilter()\n        .addDateFilters()\n        .addFilter({\n            name: 'title',\n            type: {kind: 'text'},\n            label: 'Title',\n            filterField: 'title',\n        })\n        .addFilter({\n            name: 'rating',\n            type: {kind: 'number'},\n            label: 'Rating',\n            filterField: 'rating',\n        })\n        .addFilter({\n            name: 'authorName',\n            type: {kind: 'text'},\n            label: 'Author',\n            filterField: 'authorName',\n        })\n        // highlight-next-line\n        .addCustomFieldFilters(this.customFields)\n        .connectToRoute(this.route);\n\n    readonly sorts = this.createSortCollection()\n        .defaultSort('createdAt', 'DESC')\n        .addSort({name: 'createdAt'})\n        .addSort({name: 'updatedAt'})\n        .addSort({name: 'title'})\n        .addSort({name: 'rating'})\n        .addSort({name: 'authorName'})\n        // highlight-next-line\n        .addCustomFieldSorts(this.customFields)\n        .connectToRoute(this.route);\n    \n    // rest of class omitted for brevity\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Database Credentials\nDESCRIPTION: Example of using environment variables for sensitive database credentials in Vendure configuration to avoid hardcoding them in source control.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  dbConnectionOptions: {\n    type: 'postgres',\n    username: process.env.DB_USERNAME,\n    password: process.env.DB_PASSWORD,\n    database: 'vendure',\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Products and Variants CSV Format Example\nDESCRIPTION: Example CSV structure showing how to import products with multiple variants, including laptops and keyboards. Demonstrates fields for product details, variants, assets, facets, and inventory management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/importing-data/index.md#2025-04-22_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nname            , slug            , description               , assets                      , facets                              , optionGroups    , optionValues , sku         , price   , taxCategory , stockOnHand , trackInventory , variantAssets , variantFacets\nLaptop          , laptop          , \"Description of laptop\"   , laptop_01.jpg|laptop_02.jpg , category:electronics|brand:Apple    , screen size|RAM , 13 inch|8GB  , L2201308    , 1299.00 , standard    , 100         , false          ,               , \n                ,                 ,                           ,                             ,                                     ,                 , 15 inch|8GB  , L2201508    , 1399.00 , standard    , 100         , false          ,               , \n                ,                 ,                           ,                             ,                                     ,                 , 13 inch|16GB , L2201316    , 2199.00 , standard    , 100         , false          ,               , \n                ,                 ,                           ,                             ,                                     ,                 , 15 inch|16GB , L2201516    , 2299.00 , standard    , 100         , false          ,               , \nClacky Keyboard , clacky-keyboard , \"Description of keyboard\" , keyboard_01.jpg             , category:electronics|brand:Logitech ,                 ,              , A4TKLA45535 , 74.89   , standard    , 100         , false          ,               ,\n```\n\n----------------------------------------\n\nTITLE: Registering Angular Custom DataTable Component\nDESCRIPTION: Shows how to register the Angular custom component for the product list table's slug column using the registerDataTableComponent function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-data-table-components/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerDataTableComponent } from '@vendure/admin-ui/core';\nimport { SlugLinkComponent } from './components/slug-link/slug-link.component';\n\nexport default [\n    registerDataTableComponent({\n        component: SlugWithLinkComponent,\n        tableId: 'product-list',\n        columnId: 'slug',\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Resolver in TypeScript\nDESCRIPTION: Example of implementing a field resolver for a GraphQL type relationship using @ResolveField decorator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype WishlistItem {\n    id: ID!\n    product: Product!\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext } from '@vendure/core';\n\nimport { WishlistItem } from '../entities/wishlist-item.entity';\n\n@Resolver('WishlistItem')\nexport class WishlistItemResolver {\n\n    @ResolveField()\n    product(\n        @Ctx() ctx: RequestContext,\n        @Parent() wishlistItem: WishlistItem\n    ) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breadcrumbs in React Route Definition - TypeScript\nDESCRIPTION: This snippet mirrors route configuration in React, showing the use of registerReactRouteComponent to set both title and breadcrumb for the Test component. The breadcrumb appears in the UI navigation. Dependencies are @vendure/admin-ui/react and the Test component. The configuration is used at plugin initialization, directly affecting UI navigation paths shown to users.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { registerReactRouteComponent } from '@vendure/admin-ui/react';\\nimport { Test } from './components/Test';\\n\\nexport default [\\n    registerReactRouteComponent({\\n        component: Test,\\n        title: 'Test',\\n        // highlight-next-line\\n        breadcrumb: 'Test',\\n    }),\\n];\n```\n\n----------------------------------------\n\nTITLE: Declaring SellerService Class and Method Signatures in TypeScript\nDESCRIPTION: This snippet defines the TypeScript class SellerService responsible for managing Seller entities in the Vendure core. Dependencies such as TransactionalConnection, ListQueryBuilder, EventBus, and CustomFieldRelationService are injected via the constructor, facilitating database access, event handling, and custom field relations. The class provides methods for initializing sellers, retrieving lists or individual sellers, and performing create, update, or delete operations; method signatures detail expected context, options, and data types. Inputs include context objects, IDs, and input DTOs, and outputs cover promises returning paginated lists, entities, or deletion responses. This signature definition assumes a fully functional Vendure environment and does not contain method implementations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/seller-service.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SellerService {\n    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, customFieldRelationService: CustomFieldRelationService)\n    initSellers() => ;\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Seller>) => Promise<PaginatedList<Seller>>;\n    findOne(ctx: RequestContext, sellerId: ID) => Promise<Seller | undefined>;\n    create(ctx: RequestContext, input: CreateSellerInput) => ;\n    update(ctx: RequestContext, input: UpdateSellerInput) => ;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateFulfillmentError Type in GraphQL\nDESCRIPTION: Defines the `CreateFulfillmentError` GraphQL type for the Vendure Admin API. This error type is returned if a problem occurs within a custom `FulfillmentHandler`'s `createFulfillment` method during the fulfillment process. It includes a standard `errorCode` and `message`, along with a `fulfillmentHandlerError` field containing the specific error message from the handler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if an error is thrown in a FulfillmentHandler's createFulfillment method\n\"\"\"\ntype CreateFulfillmentError {\nerrorCode: ErrorCode!\n\nmessage: String!\n\nfulfillmentHandlerError: String!\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Customer Groups in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple CustomerGroups at once. Takes an array of CustomerGroup IDs and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_41\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCustomerGroups(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie Session Secret in Vendure Config\nDESCRIPTION: Configuration showing how to set up cookie authentication with a secret for signing cookies, typically loaded from an environment variable for security.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    authOptions: {\n        tokenMethod: ['bearer', 'cookie'],\n        // highlight-start\n        cookieOptions: {\n            secret: process.env.COOKIE_SESSION_SECRET\n        }\n        // highlight-end\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Entity in TypeScript\nDESCRIPTION: This TypeScript snippet defines a Collection entity extending VendureEntity. It is used to group products based on criteria and includes properties for hierarchy, translations, and associated assets. Dependencies include Entity interfaces like Translatable and Orderable.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/collection.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Collection extends VendureEntity implements Translatable, HasCustomFields, ChannelAware, Orderable {\n    constructor(input?: DeepPartial<Collection>)\n    @Column({ default: false })\n    isRoot: boolean;\n    @Column()\n    position: number;\n    @Column({ default: false })\n    isPrivate: boolean;\n    name: LocaleString;\n    description: LocaleString;\n    slug: LocaleString;\n    @OneToMany(type => CollectionTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<Collection>>;\n    @Index()\n    @ManyToOne(type => Asset, asset => asset.featuredInCollections, { onDelete: 'SET NULL' })\n    featuredAsset: Asset;\n    @OneToMany(type => CollectionAsset, collectionAsset => collectionAsset.collection)\n    assets: CollectionAsset[];\n    @Column('simple-json') filters: ConfigurableOperation[];\n    @Column({ default: true }) inheritFilters: boolean;\n    @ManyToMany(type => ProductVariant, productVariant => productVariant.collections)\n    @JoinTable()\n    productVariants: ProductVariant[];\n    @Column(type => CustomCollectionFields)\n    customFields: CustomCollectionFields;\n    @TreeChildren()\n    children: Collection[];\n    @TreeParent()\n    parent: Collection;\n    @EntityId({ nullable: true })\n    parentId: ID;\n    @ManyToMany(type => Channel, channel => channel.collections)\n    @JoinTable()\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Order State in Shop API with GraphQL\nDESCRIPTION: Shows how to query the current state of an active order using the Shop API. This snippet demonstrates retrieving the order ID and state, which indicates the current position in the order lifecycle.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery ActiveOrder {\n    activeOrder {\n        id\n        // highlight-next-line\n        state\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypedBaseListComponent Class in TypeScript\nDESCRIPTION: This snippet defines the TypedBaseListComponent class, which extends BaseListComponent and is designed to work with TypedDocumentNode for GraphQL queries. It includes properties for language handling, various injected services, and methods for configuration and data management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/typed-base-list-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TypedBaseListComponent<T extends TypedDocumentNode<any, Vars>, Field extends keyof ResultOf<T>, Vars extends { options: { filter: any; sort: any } } = VariablesOf<T>> extends BaseListComponent<ResultOf<T>, ItemOf<ResultOf<T>, Field>, VariablesOf<T>> implements OnInit {\n    availableLanguages$: Observable<LanguageCode[]>;\n    contentLanguage$: Observable<LanguageCode>;\n    protected dataService = inject(DataService);\n    protected router = inject(Router);\n    protected serverConfigService = inject(ServerConfigService);\n    protected permissionsService = inject(PermissionsService);\n    protected dataTableConfigService = inject(DataTableConfigService);\n    protected dataTableListId: string | undefined;\n    constructor()\n    configure(config: {\n        document: T;\n        getItems: (data: ResultOf<T>) => { items: Array<ItemOf<ResultOf<T>, Field>>; totalItems: number };\n        setVariables?: (skip: number, take: number) => VariablesOf<T>;\n        refreshListOnChanges?: Array<Observable<any>>;\n    }) => ;\n    ngOnInit() => ;\n    createFilterCollection() => DataTableFilterCollection<NonNullable<NonNullable<Vars['options']>['filter']>>;\n    createSortCollection() => DataTableSortCollection<NonNullable<NonNullable<Vars['options']>['sort']>>;\n    setLanguage(code: LanguageCode) => ;\n    getCustomFieldConfig(key: Exclude<keyof CustomFields, '__typename'> | string) => CustomFieldConfig[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Login Button Component in React\nDESCRIPTION: A React component that renders a Facebook login button using the Facebook SDK for JavaScript. When the user successfully logs in, it sends the access token to the Vendure server for authentication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/**\n * Renders a Facebook login button.\n */\nexport const FBLoginButton = () => {\n    const fnName = `onFbLoginButtonSuccess`;\n    const router = useRouter();\n    const [error, setError] = useState('');\n    const [socialLoginMutation] = useMutation(AuthenticateDocument);\n\n    useEffect(() => {\n        (window as any)[fnName] = function() {\n            FB.getLoginStatus(login);\n        };\n        return () => {\n            delete (window as any)[fnName];\n        };\n    }, []);\n\n    useEffect(() => {\n        window?.FB?.XFBML.parse();\n    }, []);\n\n    const login = async (response: any) => {\n        const {status, authResponse} = response;\n        if (status === 'connected') {\n            const result = await socialLoginMutation({variables: {token: authResponse.accessToken}});\n            if (result.data?.authenticate.__typename === 'CurrentUser') {\n                // The user has logged in, refresh the browser\n                trackLogin('facebook');\n                router.reload();\n                return;\n            }\n        }\n        setError('An error occurred!');\n    };\n\n    return (\n        <div className=\"text-center\" style={{ width: 188, height: 28 }}>\n            <FacebookSDK />\n            <div\n                className=\"fb-login-button\"\n                data-width=\"\"\n                data-size=\"medium\"\n                data-button-type=\"login_with\"\n                data-layout=\"default\"\n                data-auto-logout-link=\"false\"\n                data-use-continue-as=\"false\"\n                data-scope=\"public_profile,email\"\n                data-onlogin={`${fnName}();`}\n            />\n            {error && <div className=\"text-sm text-red-500\">{error}</div>}\n        </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Administrator Event in TypeScript\nDESCRIPTION: The `AdministratorEvent` class is designed to handle events related to administrators being added, updated, or deleted. It extends `VendureEntityEvent`, capturing context, entity, action type, and optional input types. Dependents include `RequestContext`, `Administrator`, and `AdministratorInputTypes`, facilitating the management of administrative changes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass AdministratorEvent extends VendureEntityEvent<Administrator, AdministratorInputTypes> {\n    constructor(ctx: RequestContext, entity: Administrator, type: 'created' | 'updated' | 'deleted', input?: AdministratorInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with DataService in TypeScript\nDESCRIPTION: Example of how to use the DataService.query method to execute a GraphQL query. It returns a QueryResult object which allows further control over the type of result returned.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/data-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result$ = this.dataService.query(gql`\n  query MyQuery($id: ID!) {\n    product(id: $id) {\n      id\n      name\n      slug\n    }\n  },\n  { id: 123 },\n).mapSingle(data => data.product);\n```\n\n----------------------------------------\n\nTITLE: Defining the Role Entity Class (TypeScript)\nDESCRIPTION: This TypeScript code defines the `Role` entity class within the Vendure framework using TypeORM decorators. It extends `VendureEntity` and implements `ChannelAware`. The class includes properties like `code` (string), `description` (string), `permissions` (an array of Permission enums), and a many-to-many relationship with the `Channel` entity via `@ManyToMany` and `@JoinTable`. The constructor allows optional initialization using `DeepPartial<Role>`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/role.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass Role extends VendureEntity implements ChannelAware {\n    constructor(input?: DeepPartial<Role>)\n    @Column() code: string;\n    @Column() description: string;\n    @Column('simple-array') permissions: Permission[];\n    @ManyToMany(type => Channel, channel => channel.roles)\n    @JoinTable()\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring UserService Class with Core User Methods in Vendure (TypeScript)\nDESCRIPTION: This TypeScript snippet provides the class signature and method declarations for UserService in Vendure, listing all major user operations such as retrieval, creation, updates, authentication management, verification, and password/identifier token workflows. It requires dependencies like TransactionalConnection, ConfigService, RoleService, PasswordCipher, VerificationTokenGenerator, and ModuleRef for instantiation, effectively leveraging dependency injection. The methods are asynchronous and accept RequestContext for context-aware transactionality; many provide error union returns or optional outputs for robust error handling. Special procedures exist for user verification, password reset, and identifier changes, with some administrative operations bypassing verification as noted in comments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/user-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, roleService: RoleService, passwordCipher: PasswordCipher, verificationTokenGenerator: VerificationTokenGenerator, moduleRef: ModuleRef)\n    getUserById(ctx: RequestContext, userId: ID) => Promise<User | undefined>;\n    getUserByEmailAddress(ctx: RequestContext, emailAddress: string, userType?: 'administrator' | 'customer') => Promise<User | undefined>;\n    createCustomerUser(ctx: RequestContext, identifier: string, password?: string) => Promise<User | PasswordValidationError>;\n    addNativeAuthenticationMethod(ctx: RequestContext, user: User, identifier: string, password?: string) => Promise<User | PasswordValidationError>;\n    createAdminUser(ctx: RequestContext, identifier: string, password: string) => Promise<User>;\n    softDelete(ctx: RequestContext, userId: ID) => ;\n    setVerificationToken(ctx: RequestContext, user: User) => Promise<User>;\n    verifyUserByToken(ctx: RequestContext, verificationToken: string, password?: string) => Promise<ErrorResultUnion<VerifyCustomerAccountResult, User>>;\n    setPasswordResetToken(ctx: RequestContext, emailAddress: string) => Promise<User | undefined>;\n    resetPasswordByToken(ctx: RequestContext, passwordResetToken: string, password: string) => Promise<\n        User | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError\n    >;\n    changeUserAndNativeIdentifier(ctx: RequestContext, userId: ID, newIdentifier: string) => ;\n    setIdentifierChangeToken(ctx: RequestContext, user: User) => Promise<User>;\n    changeIdentifierByToken(ctx: RequestContext, token: string) => Promise<\n        | { user: User; oldIdentifier: string }\n        | IdentifierChangeTokenInvalidError\n        | IdentifierChangeTokenExpiredError\n    >;\n    updatePassword(ctx: RequestContext, userId: ID, currentPassword: string, newPassword: string) => Promise<boolean | InvalidCredentialsError | PasswordValidationError>;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Asynchronous Data for Vendure Email Templates using `loadData` in TypeScript\nDESCRIPTION: This example shows how to use the `loadData` method on an `EmailEventListener` to asynchronously fetch data required for email templates. The provided function receives an object containing the `event` and an `injector`. The `injector` is used to get instances of services (like `OrderService`). The function's return value (e.g., order payments) is added to the event object under the `data` property, making it accessible in subsequent steps like `setTemplateVars` for populating the email template.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nnew EmailEventListener('order-confirmation')\n  .on(OrderStateTransitionEvent)\n  .filter(event => event.toState === 'PaymentSettled' && !!event.order.customer)\n  .loadData(({ event, injector }) => {\n    const orderService = injector.get(OrderService);\n    return orderService.getOrderPayments(event.order.id);\n  })\n  .setTemplateVars(event => ({\n    order: event.order,\n    payments: event.data,\n  }))\n  // ...\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TagService Class for Tag Entity Operations – Vendure – TypeScript\nDESCRIPTION: This TypeScript snippet defines the TagService class, which provides methods for performing CRUD operations and association management for Tag entities in the Vendure e-commerce framework. Dependencies include TransactionalConnection and ListQueryBuilder; method parameters typically require a RequestContext, IDs, or entity-specific input types. The service supports retrieving all tags with optional pagination, fetching by ID, creating, updating, deleting tags, converting value arrays to tags, and retrieving tags associated with a particular entity. Return values are promises resolving to lists, single Tag objects, or deletion responses, all as per Vendure's API conventions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/tag-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TagService {\n    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Tag>) => Promise<PaginatedList<Tag>>;\n    findOne(ctx: RequestContext, tagId: ID) => Promise<Tag | undefined>;\n    create(ctx: RequestContext, input: CreateTagInput) => ;\n    update(ctx: RequestContext, input: UpdateTagInput) => ;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    valuesToTags(ctx: RequestContext, values: string[]) => Promise<Tag[]>;\n    getTagsForEntity(ctx: RequestContext, entity: Type<VendureEntity & Taggable>, id: ID) => Promise<Tag[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Relation Review Input Component\nDESCRIPTION: Complex example of a custom field control for handling relation-type fields with data fetching.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { RelationCustomFieldConfig } from '@vendure/common/lib/generated-types';\nimport { FormInputComponent, DataService, SharedModule } from '@vendure/admin-ui/core';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { GET_REVIEWS_FOR_PRODUCT } from '../product-reviews-list/product-reviews-list.graphql';\n\n@Component({\n    selector: 'relation-review-input',\n    template: `\n        <div *ngIf=\"formControl.value as review\">\n            <vdr-chip>{{ review.rating }} / 5</vdr-chip>\n            {{ review.summary }}\n            <a [routerLink]=\"['/extensions', 'product-reviews', review.id]\">\n                <clr-icon shape=\"link\"></clr-icon>\n            </a>\n        </div>\n        <select [formControl]=\"formControl\" [compareWith]=\"compareFn\">\n            <option [ngValue]=\"null\">Select a review...</option>\n            <option *ngFor=\"let item of reviews$ | async\" [ngValue]=\"item\">\n                <b>{{ item.summary }}</b>\n                {{ item.rating }} / 5\n            </option>\n        </select>\n    `,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class RelationReviewInputComponent implements OnInit, FormInputComponent<RelationCustomFieldConfig> {\n    readonly: boolean;\n    formControl: FormControl;\n    config: RelationCustomFieldConfig;\n\n    reviews$: Observable<any[]>;\n\n    constructor(private dataService: DataService, private route: ActivatedRoute) {}\n\n    ngOnInit() {\n        this.reviews$ = this.route.data.pipe(\n            switchMap(data => data.entity),\n            switchMap((product: any) => {\n                return this.dataService\n                    .query(GET_REVIEWS_FOR_PRODUCT, { productId: product.id })\n                    .mapSingle(({ product }) => product?.reviews.items ?? []);\n            }),\n        );\n    }\n\n    compareFn(item1: { id: string } | null, item2: { id: string } | null) {\n        return item1 && item2 ? item1.id === item2.id : item1 === item2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fulfillment Processes in Vendure\nDESCRIPTION: This TypeScript code shows how to add a custom fulfillment process to the Vendure configuration, allowing for customization of the fulfillment workflow.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FulfillmentProcess, VendureConfig } from '@vendure/core';\nimport { myCustomFulfillmentProcess } from './my-custom-fulfillment-process';\n\nexport const config: VendureConfig = {\n  // ...\n  shippingOptions: {\n    process: [myCustomFulfillmentProcess],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerGroupChangeEvent Class in TypeScript\nDESCRIPTION: Event class that fires when customers are assigned to or removed from a CustomerGroup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerGroupChangeEvent extends VendureEvent {\n    constructor(ctx: RequestContext, customers: Customer[], customGroup: CustomerGroup, type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BullMQPluginOptions Interface in TypeScript\nDESCRIPTION: This interface defines the configuration options for the BullMQJobQueuePlugin. It includes properties for connection settings, queue and worker options, and custom functions for managing job retries, backoff, and job options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqplugin-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BullMQPluginOptions {\n    connection?: ConnectionOptions;\n    queueOptions?: Omit<QueueOptions, 'connection'>;\n    workerOptions?: Omit<WorkerOptions, 'connection'>;\n    setRetries?: (queueName: string, job: Job) => number;\n    setBackoff?: (queueName: string, job: Job) => BackoffOptions | undefined;\n    setJobOptions?: (queueName: string, job: Job) => BullJobsOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Templates Dynamically with FileBasedTemplateLoader in TypeScript\nDESCRIPTION: Shows configuring EmailPlugin to use a dynamically defined templateLoader, enabling different template paths for various cases. Assumes familiarity with plugin initialization and requires the 'FileBasedTemplateLoader' class from '@vendure/email-plugin'. The main parameter is the templateLoader, which accepts a path. Dynamic loading modifies which email templates are active without changing the static config.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  EmailPlugin.init({\n   ...,\n   templateLoader: new FileBasedTemplateLoader(my/order-confirmation/templates)\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing FSM Class in TypeScript\nDESCRIPTION: Class definition for a type-safe finite state machine that manages state transitions with type parameter T for state names and optional Data parameter. The class provides methods for state transitions, state validation, and state queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/fsm.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FSM<T extends string, Data = any> {\n    constructor(config: StateMachineConfig<T, Data>, initialState: T)\n    initialState: T\n    currentState: T\n    transitionTo(state: T, data: Data) => Promise<{ finalize: () => Promise<any> }>;\n    jumpTo(state: T) => ;\n    getNextStates() => readonly T[];\n    canTransitionTo(state: T) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Customer Account with Native Strategy in TypeScript\nDESCRIPTION: Registers a new customer account using the NativeAuthenticationStrategy. It initiates the email verification process by publishing an AccountRegistrationEvent, unless email verification is disabled in AuthOptions. This method is typically used in storefront customer creation flows.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nregisterCustomerAccount(ctx: RequestContext, input: RegisterCustomerInput) => Promise<RegisterCustomerAccountResult | EmailAddressConflictError | PasswordValidationError>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vendure Worker Process\nDESCRIPTION: Demonstrates how to bootstrap a Vendure worker process using the bootstrapWorker() function with configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker } from '@vendure/core';\nimport { config } from './vendure-config';\n\nbootstrapWorker(config)\n    .then(worker => worker.startJobQueue())\n    .catch(err => {\n        console.log(err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Superadmin Credentials in Vendure\nDESCRIPTION: Shows how to configure secure superadmin credentials using environment variables\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  authOptions: {\n    tokenMethod: ['bearer', 'cookie'],\n    superadminCredentials: {\n      identifier: process.env.SUPERADMIN_USERNAME,\n      password: process.env.SUPERADMIN_PASSWORD,\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Methods in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing PaymentMethod configuration. Accepts an UpdatePaymentMethodInput object and returns the updated PaymentMethod entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_120\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing PaymentMethod\n\"\"\"\ntype Mutation {\n  updatePaymentMethod(input: UpdatePaymentMethodInput!): PaymentMethod!\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFormControl Hook in React Component for Vendure Admin UI\nDESCRIPTION: This example demonstrates how to use the useFormControl hook to create a custom number input component in React for the Vendure admin UI. It provides access to the current form control value and a method to update it.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-form-control.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFormControl, ReactFormInputProps } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function ReactNumberInput({ readonly }: ReactFormInputProps) {\n    const { value, setFormValue } = useFormControl();\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setFormValue(val);\n    };\n    return (\n        <div>\n            <input readOnly={readonly} type=\"number\" onChange={handleChange} value={value} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Coupon Code from an Order - Vendure TypeScript\nDESCRIPTION: Removes a coupon code string from an Order, receiving context, orderId, and couponCode. Intended for use cases where customers or admins revoke a promotional code. The expected return type is not specified in this documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, couponCode: string) => \n```\n\n----------------------------------------\n\nTITLE: Configuring RedisCachePlugin in Vendure\nDESCRIPTION: Sets up the RedisCachePlugin which uses a Redis server to store cache data. This can have better performance characteristics than the DefaultCachePlugin for high-load applications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RedisCachePlugin, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        RedisCachePlugin.init({\n            redisOptions: {\n                host: 'localhost',\n                port: 6379,\n            },\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Settling Payment Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to settle a payment. Takes a payment ID parameter and returns a SettlePaymentResult object indicating the outcome.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_99\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  settlePayment(id: ID!): SettlePaymentResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Soft Deleting a Customer in TypeScript\nDESCRIPTION: Performs a soft delete operation on a Customer entity identified by its ID. This typically marks the customer as deleted without permanently removing them from the database. Requires the request context and the customer's ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsoftDelete(ctx: RequestContext, customerId: ID) => Promise<DeletionResponse>\n```\n\n----------------------------------------\n\nTITLE: Querying active order in GraphQL\nDESCRIPTION: This query fetches the currently active order. The returned Order object is only considered active if it has not reached a final state such as PaymentAuthorized or PaymentSettled. If no active order exists, the query returns null. This query does not require parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nThe active Order. Will be `null` until an Order is created via `addItemToOrder`. Once an Order reaches the state of PaymentAuthorized or `PaymentSettled`, then that Order is no longer considered \"active\" and this query will once again return `null`.\n\"\"\"\ntype Query {\n    activeOrder: Order\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Type for Authentication GraphQL\nDESCRIPTION: This code block demonstrates how to define a GraphQL input type for authentication, which determines the shape of the input object according to the strategy name and the generic Data type. The example shows the use of a token as an input parameter for the authentication process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/authentication-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefineInputType() {\\n  return gql`\\n     input MyAuthInput {\\n       token: String!\\n     }\\n  `;\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring database synchronization in Vendure TypeScript config\nDESCRIPTION: This snippet shows how to configure the database connection options in the Vendure configuration file, including the use of an environment variable to control schema synchronization. It demonstrates setting up a PostgreSQL connection with environment variables for sensitive data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/getting-data-into-production.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    dbConnectionOptions: {\n        type: 'postgres',\n        // highlight-next-line\n        synchronize: process.env.DB_SYNCHRONIZE,\n        host: process.env.DB_HOST,\n        port: process.env.DB_PORT,\n        username: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        database: process.env.DB_DATABASE,\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OrderSellerStrategy Interface in TypeScript\nDESCRIPTION: Defines the OrderSellerStrategy interface for splitting orders in multivendor Vendure applications. It extends InjectableStrategy and includes methods for setting order line seller channels, splitting orders, and handling post-split operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-seller-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderSellerStrategy extends InjectableStrategy {\n    setOrderLineSellerChannel?(ctx: RequestContext, orderLine: OrderLine): Channel | undefined | Promise<Channel | undefined>;\n    splitOrder?(ctx: RequestContext, order: Order): SplitOrderContents[] | Promise<SplitOrderContents[]>;\n    afterSellerOrdersCreated?(ctx: RequestContext, aggregateOrder: Order, sellerOrders: Order[]): void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Superadmin Credentials in Vendure\nDESCRIPTION: Configuration for setting secure superadmin credentials using environment variables instead of default values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/security/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  authOptions: {\n    tokenMethod: ['bearer', 'cookie'],\n    superadminCredentials: {\n      identifier: process.env.SUPERADMIN_USERNAME,\n      password: process.env.SUPERADMIN_PASSWORD,\n    },\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Custom DataTable Component in TypeScript\nDESCRIPTION: This snippet shows how to register the custom component for use in a specific DataTable column using the registerDataTableComponent function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-table-components/register-data-table-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { registerDataTableComponent } from '@vendure/admin-ui/core';\nimport { CustomTableComponent } from './components/custom-table.component';\n\nexport default [\n    registerDataTableComponent({\n        component: CustomTableComponent,\n        tableId: 'product-list',\n        columnId: 'slug',\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Role Management - Vendure TypeScript\nDESCRIPTION: This TypeScript class provides a comprehensive set of methods to manage roles in the Vendure platform. It allows for the initialization of roles, as well as creating, updating, and deleting them. Moreover, it facilitates checking user permissions on different channels and fetching specific roles such as SuperAdmin and Customer roles. Methods include network operations that return promises. Dependencies include core services such as TransactionalConnection, ChannelService, and EventBus.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/role-service.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass RoleService {\n    constructor(connection: TransactionalConnection, channelService: ChannelService, listQueryBuilder: ListQueryBuilder, configService: ConfigService, eventBus: EventBus, requestContextCache: RequestContextCacheService)\n    initRoles() => ;\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Role>, relations?: RelationPaths<Role>) => Promise<PaginatedList<Role>>;\n    findOne(ctx: RequestContext, roleId: ID, relations?: RelationPaths<Role>) => Promise<Role | undefined>;\n    getChannelsForRole(ctx: RequestContext, roleId: ID) => Promise<Channel[]>;\n    getSuperAdminRole(ctx?: RequestContext) => Promise<Role>;\n    getCustomerRole(ctx?: RequestContext) => Promise<Role>;\n    getAllPermissions() => string[];\n    userHasPermissionOnChannel(ctx: RequestContext, channelId: ID, permission: Permission) => Promise<boolean>;\n    userHasAnyPermissionsOnChannel(ctx: RequestContext, channelId: ID, permissions: Permission[]) => Promise<boolean>;\n    userHasAllPermissionsOnChannel(ctx: RequestContext, channelId: ID, permissions: Permission[]) => Promise<boolean>;\n    create(ctx: RequestContext, input: CreateRoleInput) => Promise<Role>;\n    update(ctx: RequestContext, input: UpdateRoleInput) => Promise<Role>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    assignRoleToChannel(ctx: RequestContext, roleId: ID, channelId: ID) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignAssetsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple assets to a specific channel in the Vendure admin API. It requires a list of asset IDs and the target channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignAssetsToChannelInput {\n  assetIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Asset Type\nDESCRIPTION: The Asset type provides a structure for managing digital assets, specifying properties like id, name, and mimeType. These fields allow for detailed asset representation within the Vendure ecosystem.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Asset {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  type: AssetType!\n  fileSize: Int!\n  mimeType: String!\n  width: Int!\n  height: Int!\n  source: String!\n  preview: String!\n  focalPoint: Coordinate\n  tags: [Tag!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Injectable TypeORM Subscriber with Dependency Injection\nDESCRIPTION: Implements an injectable TypeORM subscriber that can use Nest's dependency injection. This subscriber dynamically registers itself with TypeORM's connection and can utilize injected services in its event handlers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/db-subscribers/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  PluginCommonModule,\n  Product,\n  TransactionalConnection,\n  VendureConfig,\n  VendurePlugin,\n} from '@vendure/core';\nimport { Injectable } from '@nestjs/common';\nimport { EntitySubscriberInterface, EventSubscriber, UpdateEvent } from 'typeorm';\nimport { MyService } from './services/my.service';\n\n@Injectable()\n@EventSubscriber()\nexport class ProductSubscriber implements EntitySubscriberInterface<Product> {\n    constructor(private connection: TransactionalConnection,\n                private myService: MyService) {\n        // This is how we can dynamically register the subscriber\n        // with TypeORM\n        connection.rawConnection.subscribers.push(this);\n    }\n\n    listenTo() {\n        return Product;\n    }\n\n    async beforeUpdate(event: UpdateEvent<Product>) {\n        console.log(`BEFORE PRODUCT UPDATED: `, event.entity);\n        // Now we can make use of our injected provider\n        await this.myService.handleProductUpdate(event);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ShippingLineAssignmentStrategy in TypeScript\nDESCRIPTION: This TypeScript code defines a custom `ShippingLineAssignmentStrategy` named `DigitalShippingLineAssignmentStrategy`. It implements the `assignShippingLineToOrderLines` method to segregate order lines based on whether the associated product variant and shipping method have a custom field `isDigital` set to true. This allows assigning digital products to one shipping line and physical products to another. It depends on types like `Order`, `OrderLine`, `RequestContext`, and `ShippingLine` from `@vendure/core`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-line-assignment-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n    Order,\n    OrderLine,\n    RequestContext,\n    ShippingLine,\n    ShippingLineAssignmentStrategy,\n} from '@vendure/core';\n\nexport class DigitalShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {\n    assignShippingLineToOrderLines(\n        ctx: RequestContext,\n        shippingLine: ShippingLine,\n        order: Order,\n    ): OrderLine[] | Promise<OrderLine[]> {\n        if (shippingLine.shippingMethod.customFields.isDigital) {\n            return order.lines.filter(l => l.productVariant.customFields.isDigital);\n        } else {\n            return order.lines.filter(l => !l.productVariant.customFields.isDigital);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProductVariantInput in GraphQL\nDESCRIPTION: This input type is used for creating a new product variant. It includes fields for product ID, translations, SKU, price, stock levels, and various other product variant properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_56\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProductVariantInput {\n  productId: ID!\n  enabled: Boolean\n  translations: [ProductVariantTranslationInput!]!\n  facetValueIds: [ID!]\n  sku: String!\n  price: Money\n  prices: [CreateProductVariantPriceInput]\n  taxCategoryId: ID\n  optionIds: [ID!]\n  featuredAssetId: ID\n  assetIds: [ID!]\n  stockOnHand: Int\n  stockLevels: [StockLevelInput!]\n  outOfStockThreshold: Int\n  useGlobalOutOfStockThreshold: Boolean\n  trackInventory: GlobalFlag\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Get Wishlist Query in GraphQL for Vendure\nDESCRIPTION: This GraphQL query retrieves the active customer's wishlist items in a Vendure e-commerce system. It returns the id and details of the product variants in the wishlist.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetWishlist {\n    activeCustomerWishlist {\n        id\n        productVariant {\n            id\n            name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockAllocationStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for StockAllocationStrategy which is responsible for deciding at which stage in the order process stock will be allocated. It extends InjectableStrategy and includes a shouldAllocateStock method that determines when stock should be allocated based on order state transitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/stock-allocation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StockAllocationStrategy extends InjectableStrategy {\n    shouldAllocateStock(\n        ctx: RequestContext,\n        fromState: OrderState,\n        toState: OrderState,\n        order: Order,\n    ): boolean | Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Product Query\nDESCRIPTION: Example of a simple GraphQL query to fetch a product's id, name and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    product(id: \"1\") {\n        id\n        name\n        description\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Review Service with Entity Usage\nDESCRIPTION: Demonstrates how to use the ProductReview entity in a service class to create new reviews, including database operations using TransactionalConnection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/database-entity/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { RequestContext, Product, TransactionalConnection } from '@vendure/core';\n\nimport { ProductReview } from '../entities/product-review.entity';\n\n@Injectable()\nexport class ReviewService {\n    constructor(private connection: TransactionalConnection) {}\n\n    async createReview(ctx: RequestContext, productId: string, rating: number, text: string) {\n        const product = await this.connection.getEntityOrThrow(ctx, Product, productId);\n        const review = new ProductReview({\n            product,\n            rating,\n            text,\n        });\n        return this.connection.getRepository(ctx, ProductReview).save(review);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Braintree Drop-In UI in Storefront (Shell)\nDESCRIPTION: Shows the installation of the `braintree-web-drop-in` package for the storefront, which provides a ready-to-use payment UI to interact with Braintree. Use these commands to prepare your frontend project for integrating the Drop-in UI for payment processing. Ensure this step is complete before attempting to render or use Braintree's drop-in component in the frontend code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add braintree-web-drop-in\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install braintree-web-drop-in\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SKU Collection Filter in Vendure\nDESCRIPTION: This code demonstrates how to create a custom collection filter that filters product variants by SKU. It implements the CollectionFilter class with arguments for SKU matching and the apply method that contains the filtering logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/collections/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CollectionFilter, LanguageCode } from '@vendure/core';\n\nexport const skuCollectionFilter = new CollectionFilter({\n    args: {\n        // The `args` object defines the user-configurable arguments\n        // which will get passed to the filter's `apply()` function.\n        sku: {\n            type: 'string',\n            label: [{ languageCode: LanguageCode.en, value: 'SKU' }],\n            description: [\n                {\n                    languageCode: LanguageCode.en,\n                    value: 'Matches any product variants with an SKU containing this value',\n                },\n            ],\n        },\n    },\n    code: 'variant-sku-filter',\n    description: [{ languageCode: LanguageCode.en, value: 'Filter by matching SKU' }],\n\n    // This is the function that defines the logic of the filter.\n    apply: (qb, args) => {\n        // Sometimes syntax differs between database types, so we use\n        // the `type` property of the connection options to determine\n        // which syntax to use.\n        const LIKE = qb.connection.options.type === 'postgres' ? 'ILIKE' : 'LIKE';\n\n        return qb.andWhere(`productVariant.sku ${LIKE} :sku`, {\n            sku: `%${args.sku}%`\n        });\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling GraphQL Errors in Fetch-based Client\nDESCRIPTION: Implementation of a client-side query function that handles both network errors and GraphQL errors returned in the errors array of a successful response. Includes auth token handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function query(document: string, variables: Record<string, any> = {}) {\n    return fetch(endpoint, {\n        method: 'POST',\n        headers,\n        credentials: 'include',\n        body: JSON.stringify({\n            query: document,\n            variables,\n        }),\n    })\n        .then(async (res) => {\n            if (!res.ok) {\n                const body = await res.json();\n                throw new Error(body);\n            }\n            const newAuthToken = res.headers.get('vendure-auth-token');\n            if (newAuthToken) {\n                localStorage.setItem(AUTH_TOKEN_KEY, newAuthToken);\n            }\n            return res.json();\n        })\n        .catch((err) => {\n            // This catches non-200 responses, such as malformed queries or\n            // network errors. Handle this with your own error handling logic.\n            // For this demo we just show an alert.\n            window.alert(err.message);\n        })\n        .then((result) => {\n            // highlight-start\n            // We check for any GraphQL errors which would be in the\n            // `errors` array of the response body:\n            if (Array.isArray(result.errors)) {\n                // It looks like we have an unexpected error.\n                // At this point you could take actions like:\n                // - logging the error to a remote service\n                // - displaying an error popup to the user\n                // - inspecting the `error.extensions.code` to determine the\n                //   type of error and take appropriate action. E.g. a\n                //   in response to a FORBIDDEN_ERROR you can redirect the\n                //   user to a login page.\n\n                // In this example we just display an alert:\n                const errorMessage = result.errors.map((e) => e.message).join('\\n');\n                window.alert(`Unexpected error caught:\\n\\n${errorMessage}`);\n            }\n            // highlight-end\n            return result;\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ui Extension Build Command Type\nDESCRIPTION: This snippet defines a TypeScript type named UiExtensionBuildCommand which can be any one of 'npm', 'yarn', or 'pnpm'. This type is utilized to specify the package manager command when invoking the Angular CLI for building UI extensions. There are no external dependencies for this snippet.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-extension-build-command.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UiExtensionBuildCommand = 'npm' | 'yarn' | 'pnpm'\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Authentication Strategy in Vendure\nDESCRIPTION: A TypeScript implementation of an AuthenticationStrategy for Facebook login. It validates the access token with Facebook's Graph API, retrieves user data, and creates or retrieves the corresponding Vendure user account.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    AuthenticationStrategy,\n    ExternalAuthenticationService,\n    Injector,\n    Logger,\n    RequestContext,\n    User,\n    UserService,\n} from '@vendure/core';\n\nimport { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nimport fetch from 'node-fetch';\n\nexport type FacebookAuthData = {\n    token: string;\n};\n\nexport type FacebookAuthConfig = {\n    appId: string;\n    appSecret: string;\n    clientToken: string;\n};\n\nexport class FacebookAuthenticationStrategy implements AuthenticationStrategy<FacebookAuthData> {\n    readonly name = 'facebook';\n    private externalAuthenticationService: ExternalAuthenticationService;\n    private userService: UserService;\n\n    constructor(private config: FacebookAuthConfig) {\n    }\n\n    init(injector: Injector) {\n        // The ExternalAuthenticationService is a helper service which encapsulates much\n        // of the common functionality related to dealing with external authentication\n        // providers.\n        this.externalAuthenticationService = injector.get(ExternalAuthenticationService);\n        this.userService = injector.get(UserService);\n    }\n\n    defineInputType(): DocumentNode {\n        // Here we define the expected input object expected by the `authenticate` mutation\n        // under the \"google\" key.\n        return gql`\n      input FacebookAuthInput {\n        token: String!\n      }\n    `;\n    }\n\n    private async getAppAccessToken() {\n        const resp = await fetch(\n            `https://graph.facebook.com/oauth/access_token?client_id=${this.config.appId}&client_secret=${this.config.appSecret}&grant_type=client_credentials`,\n        );\n        return await resp.json();\n    }\n\n    async authenticate(ctx: RequestContext, data: FacebookAuthData): Promise<User | false> {\n        const {token} = data;\n        const {access_token} = await this.getAppAccessToken();\n        const resp = await fetch(\n            `https://graph.facebook.com/debug_token?input_token=${token}&access_token=${access_token}`,\n        );\n        const result = await resp.json();\n\n        if (!result.data) {\n            return false;\n        }\n\n        const uresp = await fetch(`https://graph.facebook.com/me?access_token=${token}&fields=email,first_name,last_name`);\n        const uresult = (await uresp.json()) as { id?: string; email: string; first_name: string; last_name: string };\n\n        if (!uresult.id) {\n            return false;\n        }\n\n        const existingUser = await this.externalAuthenticationService.findCustomerUser(ctx, this.name, uresult.id);\n\n        if (existingUser) {\n            // This will select all the auth methods\n            return (await this.userService.getUserById(ctx, existingUser.id))!;\n        }\n\n        Logger.info(`User Create: ${JSON.stringify(uresult)}`);\n        const user = await this.externalAuthenticationService.createCustomerAndUser(ctx, {\n            strategy: this.name,\n            externalIdentifier: uresult.id,\n            verified: true,\n            emailAddress: uresult.email,\n            firstName: uresult.first_name,\n            lastName: uresult.last_name,\n        });\n\n        user.verified = true;\n        return user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProductVariantPriceInput in GraphQL\nDESCRIPTION: This input type is used for creating a new product variant price. It includes fields for currency code, price, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_58\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProductVariantPriceInput {\n  currencyCode: CurrencyCode!\n  price: Money!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCollectionInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a collection in Vendure. It includes fields for visibility, assets, parent collection, filters, and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_43\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateCollectionInput {\n  isPrivate: Boolean\n  featuredAssetId: ID\n  assetIds: [ID!]\n  parentId: ID\n  inheritFilters: Boolean\n  filters: [ConfigurableOperationInput!]!\n  translations: [CreateCollectionTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Proxy Middleware for Vendure Plugin\nDESCRIPTION: Example usage of createProxyHandler in the configuration method of a VendurePlugin. It sets up a proxy to a service running on port 5678, accessible via the '/my-plugin/' route of the main Vendure server.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/plugin-utilities.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@VendurePlugin({\n  configuration: (config: Required<VendureConfig>) => {\n      config.apiOptions.middleware.push({\n          handler: createProxyHandler({\n              label: 'Admin UI',\n              route: 'my-plugin',\n              port: 5678,\n          }),\n          route: 'my-plugin',\n      });\n      return config;\n  }\n})\nexport class MyPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID ID Strategy\nDESCRIPTION: Configuration for using UUID as entity primary keys instead of sequential integers\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UuidIdStrategy, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    entityOptions: {\n        entityIdStrategy: new UuidIdStrategy(),\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ProductVariantPrice Entity Class (TypeScript)\nDESCRIPTION: This TypeScript code defines the `ProductVariantPrice` entity class. It represents a channel-specific price for a ProductVariant in Vendure. The class extends `VendureEntity`, implements `HasCustomFields`, and includes properties for the price amount (`price`), the associated `channelId`, `currencyCode`, a relation to the `ProductVariant` (`variant`), and custom fields. The `@Money()` decorator likely handles specific formatting or validation for price values, while `@EntityId`, `@Column`, `@Index`, and `@ManyToOne` are TypeORM decorators defining database schema and relations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/product-variant-price.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\nclass ProductVariantPrice extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<ProductVariantPrice>)\n    @Money() price: number;\n    @EntityId({ nullable: true }) channelId: ID;\n    @Column('varchar')\n    currencyCode: CurrencyCode;\n    @Index()\n    @ManyToOne(type => ProductVariant, variant => variant.productVariantPrices, { onDelete: 'CASCADE' })\n    variant: ProductVariant;\n    @Column(type => CustomProductVariantPriceFields)\n    customFields: CustomProductVariantPriceFields;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Requesting Email Address Update for User in TypeScript\nDESCRIPTION: Initiates the process for a user to update their email address. It publishes an IdentifierChangeRequestEvent containing a token, which must be used with the `updateEmailAddress` method to confirm the change.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrequestUpdateEmailAddress(ctx: RequestContext, userId: ID, newEmailAddress: string) => Promise<boolean | EmailAddressConflictError>\n```\n\n----------------------------------------\n\nTITLE: Defining Account Registration Event in TypeScript\nDESCRIPTION: The `AccountRegistrationEvent` class is triggered when a new user registers an account in the Vendure system. It extends the `VendureEvent` class, capturing the request context and user details as parameters. Dependencies include the `VendureEvent` base class and the `RequestContext` and `User` entities. This event assists in handling actions related to new account registration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountRegistrationEvent extends VendureEvent {\n    constructor(ctx: RequestContext, user: User)\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Address in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a Customer's address. Takes an Address ID and returns a Success object indicating whether the operation was successful.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCustomerAddress(id: ID!): Success!\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Custom Code with Sentry (TypeScript)\nDESCRIPTION: Provides an example for instrumenting a custom service with Sentry context inside a typical Node.js/Vendure environment. Developers can use this approach to add custom spans and context for richer error and performance monitoring. Ensure @sentry/node is imported and available for use. The setContext method allows passing custom objects to Sentry for the current transaction or error event.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/sentry-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport * as Sentry from \"@sentry/node\";\n\nexport class MyService {\n    async myMethod() {\n         Sentry.setContext('My Custom Context,{\n             key: 'value',\n         });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shipping Eligibility Checking - TypeScript Implementation\nDESCRIPTION: ShippingEligibilityChecker implementation to filter available ShippingMethods based on seller channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const multivendorShippingEligibilityChecker = new ShippingEligibilityChecker({\n  // other properties omitted for brevity   \n    \n  check: async (ctx, order, args, method) => {\n    await entityHydrator.hydrate(ctx, method, { relations: ['channels'] });\n    await entityHydrator.hydrate(ctx, order, { relations: ['lines.sellerChannel'] });\n    const sellerChannel = method.channels.find(c => c.code !== DEFAULT_CHANNEL_CODE);\n    if (!sellerChannel) {\n      return false;\n    }\n    for (const line of order.lines) {\n      if (idsAreEqual(line.sellerChannelId, sellerChannel.id)) {\n        return true;\n      }\n    }\n    return false;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the TestServer Class Signature in TypeScript\nDESCRIPTION: Provides the class signature for `TestServer` in TypeScript, used for setting up a Vendure server instance for e2e tests. It includes the constructor taking `VendureConfig`, an `app` property of type `INestApplication` representing the NestJS application instance, and methods `init` (for bootstrapping and populating data), `bootstrap` (for just starting the server), and `destroy` (for cleanup).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/test-server.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass TestServer {\n    public app: INestApplication;\n    constructor(vendureConfig: Required<VendureConfig>)\n    init(options: TestServerOptions) => Promise<void>;\n    bootstrap() => ;\n    destroy() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Items from an Order - Vendure TypeScript\nDESCRIPTION: Removes all OrderLines from a given Order by orderId and context. This bulk operation clears the cart efficiently and returns a Promise of ErrorResultUnion for RemoveOrderItemsResult or Order. Useful for emptying an order in one call.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentUser Type in GraphQL\nDESCRIPTION: Defines the `CurrentUser` GraphQL type for the Vendure Admin API. This type represents the user currently authenticated with the API, providing their unique `id`, `identifier` (like username or email), and a list of `channels` they have access to, including their specific permissions within each channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_44\n\nLANGUAGE: graphql\nCODE:\n```\ntype CurrentUser {\nid: ID!\n\nidentifier: String!\n\nchannels: [CurrentUserChannel!]!\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentProcess Interface in TypeScript\nDESCRIPTION: This code snippet defines the PaymentProcess interface, which extends InjectableStrategy. It includes properties for transitions, onTransitionStart, onTransitionEnd, and onTransitionError functions to manage payment state transitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaymentProcess<State extends keyof CustomPaymentStates | string> extends InjectableStrategy {\n    transitions?: Transitions<State, State | PaymentState> & Partial<Transitions<PaymentState | State>>;\n    onTransitionStart?: OnTransitionStartFn<State | PaymentState, PaymentTransitionData>;\n    onTransitionEnd?: OnTransitionEndFn<State | PaymentState, PaymentTransitionData>;\n    onTransitionError?: OnTransitionErrorFn<State | PaymentState>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger in Vendure (TypeScript)\nDESCRIPTION: Demonstrates how to use the Logger class to log messages in a Vendure application. The Logger is used as a static class and supports different log levels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from '@vendure/core';\n\nLogger.info(`Some log message`, 'My Vendure Plugin');\n```\n\n----------------------------------------\n\nTITLE: Querying Available Mollie Payment Methods via GraphQL\nDESCRIPTION: Example GraphQL query `molliePaymentMethods` to fetch the list of payment methods available through Mollie for a specific Vendure PaymentMethod code. This is useful for allowing users to select a specific Mollie method (e.g., iDEAL, credit card) directly in the storefront, whose code can then be passed to the `createMolliePaymentIntent` mutation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/mollie-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n```GraphQL\n{\n molliePaymentMethods(input: { paymentMethodCode: \"mollie-payment-method\" }) {\n   id\n   code\n   description\n   minimumAmount {\n     value\n     currency\n   }\n   maximumAmount {\n     value\n     currency\n   }\n   image {\n     size1x\n     size2x\n     svg\n   }\n }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Administrator Type in GraphQL\nDESCRIPTION: The `Administrator` type represents admin users in the Vendure system. The type contains fields for user details like `firstName`, `lastName`, `emailAddress`, and links to a `User` object. It is vital for managing administrative roles and access within the platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Administrator {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  firstName: String!\n  lastName: String!\n  emailAddress: String!\n  user: User!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MergeOrdersStrategy in TypeScript for Vendure\nDESCRIPTION: A strategy that merges both orders, where the guest order quantity replaces existing order quantity for the same items. This strategy implements the OrderMergeStrategy interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/merge-strategies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MergeOrdersStrategy implements OrderMergeStrategy {\n    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Stripe Elements in a React Component\nDESCRIPTION: TypeScript/React component (`StripePayments`) showing how to use the `Elements` provider from `@stripe/react-stripe-js` and `loadStripe` from `@stripe/stripe-js`. It initializes Stripe and wraps a `CheckoutForm` component, passing the `clientSecret` obtained from the backend Vendure server via the `createStripePaymentIntent` mutation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe, Stripe } from '@stripe/stripe-js';\nimport { CheckoutForm } from './CheckoutForm';\n\nconst stripePromise = getStripe('pk_test_....wr83u');\n\ntype StripePaymentsProps = {\n  clientSecret: string;\n  orderCode: string;\n}\n\nexport function StripePayments({ clientSecret, orderCode }: StripePaymentsProps) {\n  const options = {\n    // passing the client secret obtained from the server\n    clientSecret,\n  }\n  return (\n    <Elements stripe={stripePromise} options={options}>\n      <CheckoutForm orderCode={orderCode} />\n    </Elements>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Active Order\nDESCRIPTION: GraphQL query to retrieve the current active order details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery ActiveOrder {\n  activeOrder {\n    ... ActiveOrder\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up React with Apollo Client for Vendure\nDESCRIPTION: Entry point file that sets up a React application with Apollo Client for Vendure. It wraps the App component with ApolloProvider to make the GraphQL client available throughout the component tree.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { ApolloProvider } from '@apollo/client';\nimport App from './App';\nimport { client } from './client';\n\n// Supported in React 18+\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the createShippingMethod Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createShippingMethod` mutation for adding a new Shipping Method. It accepts a non-nullable `CreateShippingMethodInput` object detailing the shipping method and returns the newly created `ShippingMethod` object, guaranteed non-null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new ShippingMethod\n\"\"\"\ntype Mutation {\n  createShippingMethod(input: CreateShippingMethodInput!): ShippingMethod!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRefundFn Type in TypeScript for Vendure Refund Creation\nDESCRIPTION: This type definition describes the structure of a function for creating refunds in Vendure. It takes context, refund input, amount, order, payment, configuration arguments, and payment method as parameters, returning a refund result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreateRefundFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    input: RefundOrderInput,\n    amount: number,\n    order: Order,\n    payment: Payment,\n    args: ConfigArgValues<T>,\n    method: PaymentMethod,\n) => CreateRefundResult | Promise<CreateRefundResult>\n```\n\n----------------------------------------\n\nTITLE: Defining Promotion GraphQL Object Type\nDESCRIPTION: Defines the Promotion object type, which represents a promotional offer in the e-commerce system. It includes fields for start and end dates, coupon codes, usage limits, conditions, and actions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_144\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Promotion {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  startsAt: DateTime\n  endsAt: DateTime\n  couponCode: String\n  perCustomerUsageLimit: Int\n  usageLimit: Int\n  name: String!\n  description: String!\n  enabled: Boolean!\n  conditions: [ConfigurableOperation!]!\n  actions: [ConfigurableOperation!]!\n  translations: [PromotionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ProductOptionService Class Signature in TypeScript\nDESCRIPTION: Provides the TypeScript class signature for `ProductOptionService`. It shows the constructor dependencies (TransactionalConnection, TranslatableSaver, CustomFieldRelationService, EventBus, TranslatorService) and the methods available for managing ProductOption entities: `findAll`, `findOne`, `create`, `update`, and `delete`. The signatures specify parameters like RequestContext, ID, and input objects, along with their Promise-based return types, often involving Translated<ProductOption> or DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/product-option-service.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass ProductOptionService {\n    constructor(connection: TransactionalConnection, translatableSaver: TranslatableSaver, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translator: TranslatorService)\n    findAll(ctx: RequestContext) => Promise<Array<Translated<ProductOption>>>;\n    findOne(ctx: RequestContext, id: ID) => Promise<Translated<ProductOption> | undefined>;\n    create(ctx: RequestContext, group: ProductOptionGroup | ID, input: CreateGroupOptionInput | CreateProductOptionInput) => Promise<Translated<ProductOption>>;\n    update(ctx: RequestContext, input: UpdateProductOptionInput) => Promise<Translated<ProductOption>>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Upload Component with Apollo Client\nDESCRIPTION: React component demonstrating how to upload files using the createAssets mutation with apollo-upload-client\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/uploading-files/index.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst MUTATION = gql`\n  mutation CreateAssets($input: [CreateAssetInput!]!) {\n    createAssets(input: $input) {\n      ... on Asset {\n        id\n        name\n        fileSize\n      }\n      ... on ErrorResult {\n        message\n      }\n    }\n  }\n`;\n\nfunction UploadFile() {\n    const [mutate] = useMutation(MUTATION);\n\n    function onChange(event) {\n        const {target} = event;\n        if (target.validity.valid) {\n            mutate({\n                variables: {\n                    input: Array.from(target.files).map((file) => ({file}));\n                }\n            });\n        }\n    }\n\n    return <input type=\"file\" required onChange={onChange}/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StructCustomFieldConfig Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StructCustomFieldConfig, which represents configuration for structured custom fields. It defines a complex field composed of multiple sub-fields with its own validation and UI options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_196\n\nLANGUAGE: graphql\nCODE:\n```\ntype StructCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  fields: [StructFieldConfig!]!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: NestJS Scheduled Task Service Implementation\nDESCRIPTION: Implementation of a scheduled task using @nestjs/schedule with ProcessContext check to ensure the task runs only on worker instances.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/scheduled-tasks/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\n\n\n@Injectable()\nexport class SitemapService {\n    constructor(private processContext: ProcessContext) {}\n\n    @Cron('0 0 * * *')\n    async generateSitemap() {\n        if (this.processContext.isWorker) {\n            // Only run on the worker\n            await this.triggerGenerate();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging VendureConfig Objects Example - TypeScript\nDESCRIPTION: Example showing how to merge a default config with custom settings, specifically for modifying assetOptions and plugins array. Demonstrates proper handling of array properties that need explicit concatenation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/merge-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = mergeConfig(defaultConfig, {\n  assetOptions: {\n    uploadMaxFileSize: 5000,\n  },\n  plugins: [\n    ...defaultConfig.plugins,\n    MyPlugin,\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Query Logging in Vendure\nDESCRIPTION: Demonstrates how to enable database query logging by configuring both the logger level and database connection options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/logging/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultLogger, LogLevel, VendureConfig } from '@vendure/core';\n\nconst config: VendureConfig = {\n    // ...\n    logger: new DefaultLogger({ level: LogLevel.Debug }),\n    dbConnectionOptions: {\n        // ... etc\n        logging: true,\n        \n        // You can also specify which types of DB events to log:\n        // logging: ['error', 'warn', 'schema', 'query', 'info', 'log'],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentStates Interface in TypeScript\nDESCRIPTION: This code snippet defines the PaymentStates interface, which is used to extend the standard PaymentState in Vendure. It is an empty interface, allowing for custom extensions of payment states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-states.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaymentStates {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Codegen Dependencies\nDESCRIPTION: Command to install the required GraphQL code generation dependencies\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @graphql-codegen/cli @graphql-codegen/typescript\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurableOperationInput in GraphQL\nDESCRIPTION: The ConfigurableOperationInput input type allows specifying an operation with a 'code' and a required list of 'arguments' in the form of ConfigArgInput objects. This is integral for defining configurable operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_33\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ConfigurableOperationInput {\\n  code: String!\\n  arguments: [ConfigArgInput!]!\\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Custom Fields\nDESCRIPTION: GraphQL mutation example showing how to update a product with custom fields, including localized fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n    updateProduct(input: {\n        id: 1\n        // highlight-start\n        customFields: {\n            infoUrl: \"https://some-url.com\",\n            downloadable: true,\n        }\n        // highlight-end\n        translations: [\n            // highlight-next-line\n            { languageCode: en, customFields: { shortName: \"foo\" } }\n        ]\n    }) {\n        id\n        name\n        // highlight-start\n        customFields {\n            infoUrl\n            downloadable\n            shortName\n        }\n        // highlight-end\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Login URL for Vendure Admin UI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the Vendure Admin UI to use a custom login URL instead of the default username/password login form. It sets the loginUrl property in the AdminUiConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            port: 5001,\n            adminUiConfig: {\n                loginUrl: 'http://intranet/login',\n            },\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Dropdown Menu Item to ActionBar\nDESCRIPTION: Shows how to add a dropdown menu item to the ActionBar using addActionBarDropdownMenuItem function, with support for dividers and routing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/add-actions-to-pages/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addActionBarDropdownMenuItem } from '@vendure/admin-ui/core';\n\nexport default [\n    addActionBarDropdownMenuItem({\n        id: 'print-invoice',\n        locationId: 'order-detail',\n        label: 'Print invoice',\n        icon: 'printer',\n        routerLink: route => {\n            const id = route.snapshot.params.id;\n            return ['./extensions/order-invoices', id];\n        },\n        requiresPermission: 'ReadOrder',\n        hasDivider: true,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Vendure Services in TypeScript\nDESCRIPTION: Example showing how to access Vendure services using the app object returned by bootstrapWorker().\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/stand-alone-scripts/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker, CustomerService } from '@vendure/core';\nimport { config } from './vendure-config';\n\nasync function importCustomerData() {\n    const { app } = await bootstrapWorker(config);\n    \n    const customerService = app.get(CustomerService);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vendure Plugin with Core Services\nDESCRIPTION: Example showing how to create a Vendure plugin that uses core services. Demonstrates proper module imports and service injection patterns.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-service-layer/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { MyService } from './services/my.service';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    providers: [MyService],\n})\nexport class MyPlugin {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { ProductService } from '@vendure/core';\n\n@Injectable()\nexport class MyService {\n\n    constructor(private productService: ProductService) {}\n\n    // you can now use the productService methods\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the VerificationTokenStrategy Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the contract for custom verification token strategies in Vendure. It extends `InjectableStrategy` and requires implementing two methods: `generateVerificationToken` to create a token and `verifyVerificationToken` to validate a given token. Both methods receive a `RequestContext` and can return either a direct value or a Promise resolving to the required type (string for generation, boolean for verification).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/verification-token-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\ninterface VerificationTokenStrategy extends InjectableStrategy {\n    generateVerificationToken(ctx: RequestContext): Promise<string> | string;\n    verifyVerificationToken(ctx: RequestContext, token: string): Promise<boolean> | boolean;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Fields with StructFieldConfig in Vendure\nDESCRIPTION: This example demonstrates how to use StructFieldConfig to define a 'struct' custom field for a Product in Vendure. It shows the configuration of multiple field types within the struct.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/struct-field-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst customFields: CustomFields = {\n  Product: [\n    {\n      name: 'specifications',\n      type: 'struct',\n      fields: [\n        { name: 'processor', type: 'string' },\n        { name: 'ram', type: 'string' },\n        { name: 'screenSize', type: 'float' },\n      ],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: OrderInterceptor Interface Definition in TypeScript\nDESCRIPTION: This code snippet defines the OrderInterceptor interface, which extends InjectableStrategy. It includes optional methods for intercepting order-related operations such as adding items, adjusting order lines, and removing items from an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-interceptor.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderInterceptor extends InjectableStrategy {\n    willAddItemToOrder?(\n        ctx: RequestContext,\n        order: Order,\n        input: WillAddItemToOrderInput,\n    ): Promise<void | string> | void | string;\n    willAdjustOrderLine?(\n        ctx: RequestContext,\n        order: Order,\n        input: WillAdjustOrderLineInput,\n    ): Promise<void | string> | void | string;\n    willRemoveItemFromOrder?(\n        ctx: RequestContext,\n        order: Order,\n        orderLine: OrderLine,\n    ): Promise<void | string> | void | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HardenPlugin in Vendure Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add the HardenPlugin to the Vendure configuration. It sets the maximum query complexity and determines the API mode based on the environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardenPlugin } from '@vendure/harden-plugin';\n\nconst config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n     HardenPlugin.init({\n       maxQueryComplexity: 650,\n       apiMode: process.env.APP_ENV === 'dev' ? 'dev' : 'prod',\n     }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Secret for Multi-Instance Setup in Vendure\nDESCRIPTION: Code snippet showing how to configure the Vendure application with a shared cookie secret for authentication across multiple instances. This ensures session consistency when horizontally scaling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/horizontal-scaling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  authOptions: {\n    cookieOptions: {\n      secret: 'some-secret'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relations Decorator in a GraphQL Query Resolver\nDESCRIPTION: This snippet demonstrates how to use the Relations decorator in a GraphQL query resolver for Orders. It optimizes the database query by including only the necessary relations based on the GraphQL query structure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/relations-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Query()\n@Allow(Permission.ReadOrder)\norders(\n    @Ctx() ctx: RequestContext,\n    @Args() args: QueryOrdersArgs,\n    @Relations(Order) relations: RelationPaths<Order>,\n): Promise<PaginatedList<Order>> {\n    return this.orderService.findAll(ctx, args.options || undefined, relations);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Allow Decorator for Permission Control\nDESCRIPTION: Example of using @Allow decorator from @vendure/core to control access to mutations based on user permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { Allow, Permission } from '@vendure/core';\n\n@Resolver()\nexport class WishlistResolver {\n\n    @Mutation()\n    @Allow(Permission.UpdateCustomer)\n    updateCustomerWishlist() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FacetValue Event Class in TypeScript\nDESCRIPTION: Class that handles events when a FacetValue is added, updated or deleted. Extends VendureEntityEvent and requires RequestContext and FacetValue entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass FacetValueEvent extends VendureEntityEvent<FacetValue, FacetValueInputTypes> {\n    constructor(ctx: RequestContext, entity: FacetValue, type: 'created' | 'updated' | 'deleted', input?: FacetValueInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResponse Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for search responses, including search results, total items, facet values, and collections.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_168\n\nLANGUAGE: graphql\nCODE:\n```\ntype SearchResponse {\n  items: [SearchResult!]!\n  totalItems: Int!\n  facetValues: [FacetValueResult!]!\n  collections: [CollectionResult!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Password Reset for Customer in TypeScript\nDESCRIPTION: Initiates the password reset process for a customer identified by their email address. It publishes a PasswordResetEvent, which generates a unique token required for the `resetPassword` method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrequestPasswordReset(ctx: RequestContext, emailAddress: string) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining OrderItemPriceCalculationStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for OrderItemPriceCalculationStrategy that extends InjectableStrategy. It includes the calculateUnitPrice method which determines the price of a single unit in an order line based on various parameters including product variant, custom fields, order context and quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-item-price-calculation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderItemPriceCalculationStrategy extends InjectableStrategy {\n    calculateUnitPrice(\n        ctx: RequestContext,\n        productVariant: ProductVariant,\n        orderLineCustomFields: { [key: string]: any },\n        order: Order,\n        quantity: number,\n    ): PriceCalculationResult | Promise<PriceCalculationResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GuestCheckoutStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for GuestCheckoutStrategy that extends InjectableStrategy. Includes the setCustomerForOrder method for handling guest checkout scenarios and customer creation/validation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/guest-checkout-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GuestCheckoutStrategy extends InjectableStrategy {\n    setCustomerForOrder(\n        ctx: RequestContext,\n        order: Order,\n        input: CreateCustomerInput,\n    ):\n        | ErrorResultUnion<SetCustomerForOrderResult, Customer>\n        | Promise<ErrorResultUnion<SetCustomerForOrderResult, Customer>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Northflank Infrastructure for Vendure\nDESCRIPTION: Defines a complete deployment configuration including Postgres database, environment secrets, build pipeline, deployment service and persistent storage volume for a Vendure e-commerce instance. Sets up required infrastructure components with appropriate sizing and connectivity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-northflank/index.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"steps\": [\n  {\n    \"kind\": \"Project\",\n    \"ref\": \"project\", \n    \"spec\": {\n      \"name\": \"Vendure Lite\",\n      \"region\": \"europe-west\",\n      \"description\": \"Vendure is a modern, open-source composable commerce platform\",\n      \"color\": \"#17b9ff\"\n    }\n  },\n  {\n    \"kind\": \"Addon\",\n    \"spec\": {\n      \"name\": \"database\",\n      \"type\": \"postgres\",\n      \"version\": \"14-latest\",\n      \"billing\": {\n        \"deploymentPlan\": \"nf-compute-20\",\n        \"storageClass\": \"ssd\",\n        \"storage\": 4096,\n        \"replicas\": 1\n      },\n      \"tlsEnabled\": false,\n      \"externalAccessEnabled\": false,\n      \"ipPolicies\": [],\n      \"pitrEnabled\": false\n    }\n  },\n  {\n    \"kind\": \"SecretGroup\",\n    \"spec\": {\n      \"projectId\": \"${refs.project.id}\",\n      \"name\": \"secrets\",\n      \"secretType\": \"environment-arguments\",\n      \"priority\": 10,\n      \"secrets\": {\n        \"variables\": {\n          \"APP_ENV\": \"production\",\n          \"COOKIE_SECRET\": \"${fn.randomSecret(32)}\",\n          \"SUPERADMIN_USERNAME\": \"superadmin\",\n          \"SUPERADMIN_PASSWORD\": \"${fn.randomSecret(16)}\",\n          \"DB_SCHEMA\": \"public\",\n          \"ASSET_UPLOAD_DIR\": \"/data\",\n          \"RUN_JOB_QUEUE_FROM_SERVER\": \"true\"\n        }\n      },\n      \"addonDependencies\": [\n        {\n          \"addonId\": \"database\",\n          \"keys\": [\n            {\n              \"keyName\": \"HOST\",\n              \"aliases\": [\n                \"DB_HOST\"\n              ]\n            },\n            {\n              \"keyName\": \"PORT\",\n              \"aliases\": [\n                \"DB_PORT\"\n              ]\n            },\n            {\n              \"keyName\": \"DATABASE\",\n              \"aliases\": [\n                \"DB_NAME\"\n              ]\n            },\n            {\n              \"keyName\": \"USERNAME\",\n              \"aliases\": [\n                \"DB_USERNAME\"\n              ]\n            },\n            {\n              \"keyName\": \"PASSWORD\",\n              \"aliases\": [\n                \"DB_PASSWORD\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"restrictions\": {\n        \"restricted\": false,\n        \"nfObjects\": [],\n        \"tags\": []\n      }\n    }\n  },\n  {\n    \"kind\": \"BuildService\",\n    \"spec\": {\n      \"name\": \"builder\",\n      \"projectId\": \"${refs.project.id}\",\n      \"billing\": {\n        \"deploymentPlan\": \"nf-compute-10\"\n      },\n      \"vcsData\": {\n        \"projectUrl\": \"https://github.com/vendure-ecommerce/one-click-deploy\",\n        \"projectType\": \"github\"\n      },\n      \"buildSettings\": {\n        \"dockerfile\": {\n          \"buildEngine\": \"kaniko\",\n          \"dockerFilePath\": \"/Dockerfile\",\n          \"dockerWorkDir\": \"/\",\n          \"useCache\": false\n        }\n      },\n      \"disabledCI\": false,\n      \"buildArguments\": {}\n    }\n  },\n  {\n    \"kind\": \"Build\",\n    \"ref\": \"build\",\n    \"spec\": {\n      \"id\": \"${refs.builder.id}\",\n      \"projectId\": \"${refs.project.id}\",\n      \"type\": \"service\",\n      \"branch\": \"master\",\n      \"reuseExistingBuilds\": true\n    },\n    \"condition\": \"success\"\n  },\n  {\n    \"kind\": \"DeploymentService\",\n    \"ref\": \"server\",\n    \"spec\": {\n      \"name\": \"server\",\n      \"billing\": {\n        \"deploymentPlan\": \"nf-compute-20\"\n      },\n      \"deployment\": {\n        \"instances\": 1,\n        \"storage\": {\n          \"ephemeralStorage\": {\n            \"storageSize\": 1024\n          },\n          \"shmSize\": 64\n        },\n        \"docker\": {\n          \"configType\": \"customCommand\",\n          \"customCommand\": \"yarn start:server\"\n        },\n        \"internal\": {\n          \"id\": \"${refs.builder.id}\",\n          \"branch\": \"master\",\n          \"buildSHA\": \"latest\"\n        }\n      },\n      \"ports\": [\n        {\n          \"name\": \"app\",\n          \"internalPort\": 3000,\n          \"public\": true,\n          \"protocol\": \"HTTP\",\n          \"security\": {\n            \"credentials\": [],\n            \"policies\": []\n          },\n          \"domains\": []\n        }\n      ],\n      \"runtimeEnvironment\": {}\n    }\n  },\n  {\n    \"kind\": \"Volume\",\n    \"spec\": {\n      \"spec\": {\n        \"storageSize\": 5120,\n        \"accessMode\": \"ReadWriteOnce\",\n        \"storageClassName\": \"ssd\"\n      },\n      \"name\": \"storage\",\n      \"mounts\": [\n        {\n          \"containerMountPath\": \"/data\",\n          \"volumeMountPath\": \"\"\n        }\n      ],\n      \"attachedObjects\": [\n        {\n          \"id\": \"${refs.server.id}\",\n          \"type\": \"service\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Static Global Template Variables in EmailPlugin (TypeScript)\nDESCRIPTION: Demonstrates configuring EmailPlugin with static global template variables such as primary color and default sender. Prerequisites are the plugin's ability to accept 'globalTemplateVars'. Inputs are key/value pairs used in templates; no dynamic evaluation occurs. This is suitable for constants that don't change per request.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nEmailPlugin.init({\n   globalTemplateVars: {\n     primaryColor: '#FF0000',\n     fromAddress: 'no-reply@ourstore.com'\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining AssignProductsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple products to a specific channel in the Vendure admin API. It requires a list of product IDs, the target channel ID, and optionally a price factor for adjusting prices.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_18\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignProductsToChannelInput {\n  productIds: [ID!]!\n  channelId: ID!\n  priceFactor: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestShippingMethodQuote Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for shipping method quotes when testing shipping configurations, including pricing information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_207\n\nLANGUAGE: graphql\nCODE:\n```\ntype TestShippingMethodQuote {\nprice: Money!\npriceWithTax: Money!\nmetadata: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Order Mutation\nDESCRIPTION: GraphQL mutation for adding items to an order with product variant ID and quantity parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddItemToOrder($productVariantId: ID! $quantity: Int!){\n  addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PaymentMethodEligibilityChecker in TypeScript\nDESCRIPTION: Example of creating a PaymentMethodEligibilityChecker instance to check if an order's total is above a minimum value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-eligibility-checker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst ccPaymentEligibilityChecker = new PaymentMethodEligibilityChecker({\n    code: 'order-total-payment-eligibility-checker',\n    description: [{ languageCode: LanguageCode.en, value: 'Checks that the order total is above some minimum value' }],\n    args: {\n        orderMinimum: { type: 'int', ui: { component: 'currency-form-input' } },\n    },\n    check: (ctx, order, args) => {\n        return order.totalWithTax >= args.orderMinimum;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Vendure\nDESCRIPTION: Example of setting up authentication options in Vendure, including token method, verification requirements, cookie options, and superadmin credentials using environment variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  authOptions: {\n    tokenMethod: 'cookie',\n    requireVerification: true,\n    cookieOptions: {\n      secret: process.env.COOKIE_SESSION_SECRET,\n    },\n    superadminCredentials: {\n      identifier: process.env.SUPERADMIN_USERNAME,\n      password: process.env.SUPERADMIN_PASSWORD,\n    },\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PaymentMethodHandler in Vendure Config\nDESCRIPTION: This snippet shows how to add the custom PaymentMethodHandler to the Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { myPaymentHandler } from './plugins/payment-plugin/my-payment-handler';\n\nexport const config: VendureConfig = {\n    // ...\n    paymentOptions: {\n        paymentMethodHandlers: [myPaymentHandler],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Order Access Strategy in TypeScript\nDESCRIPTION: Example implementation of OrderByCodeAccessStrategy that restricts order access based on the day of the week, denying access on Mondays.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-by-code-access-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NotMondayOrderByCodeAccessStrategy implements OrderByCodeAccessStrategy {\n    canAccessOrder(ctx: RequestContext, order: Order): boolean {\n        const MONDAY = 1;\n        const today = (new Date()).getDay();\n\n        return today !== MONDAY;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResult GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL type definition for search results in the Vendure shop API. Contains product and variant details including ids, names, assets, pricing, and relevance information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_117\n\nLANGUAGE: graphql\nCODE:\n```\ntype SearchResult {\n  sku: String!\n  slug: String!\n  productId: ID!\n  productName: String!\n  productAsset: SearchResultAsset\n  productVariantId: ID!\n  productVariantName: String!\n  productVariantAsset: SearchResultAsset\n  price: SearchResultPrice!\n  priceWithTax: SearchResultPrice!\n  currencyCode: CurrencyCode!\n  description: String!\n  facetIds: [ID!]!\n  facetValueIds: [ID!]!\n  \"\"\"\n  An array of ids of the Collections in which this result appears\n  \"\"\"\n  collectionIds: [ID!]!\n  \"\"\"\n  A relevance score for the result. Differs between database implementations\n  \"\"\"\n  score: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Price Adjustments in Vendure (TypeScript)\nDESCRIPTION: Applies promotions, taxes and shipping to the Order. If updatedOrderLines are provided, it recalculates their prices using the configured OrderItemPriceCalculationStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\napplyPriceAdjustments(ctx: RequestContext, order: Order, updatedOrderLines?: OrderLine[], relations?: RelationPaths<Order>): Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Channel Event in TypeScript\nDESCRIPTION: The `AssetChannelEvent` class is triggered whenever an asset is assigned to or removed from a channel. Extending `VendureEvent`, it captures the context, asset details, channel ID, and action type. This event facilitates tracking and managing changes to channel assignments for assets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass AssetChannelEvent extends VendureEvent {\n    constructor(ctx: RequestContext, asset: Asset, channelId: ID, type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTML MJML Email Template with Handlebars Variables\nDESCRIPTION: Illustrates an MJML email template that leverages Handlebars syntax for rendering dynamic data such as customer names and order details. Dependencies include the MJML compiler and Handlebars renderer. Expected input is an order object with nested properties; output renders a personalized order confirmation email. Limitations: the template must be rendered within the Vendure email system supporting these helpers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Dear {{ order.customer.firstName }} {{ order.customer.lastName }},</p>\n\n<p>Thank you for your order!</p>\n\n<mj-table cellpadding=\"6px\">\n  {{#each order.lines }}\n    <tr class=\"order-row\">\n      <td>{{ quantity }} x {{ productVariant.name }}</td>\n      <td>{{ productVariant.quantity }}</td>\n      <td>{{ formatMoney totalPrice }}</td>\n    </tr>\n  {{/each}}\n</mj-table>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fields Support to Entity\nDESCRIPTION: Shows how to extend an entity to support custom fields by implementing HasCustomFields interface and creating a custom fields class.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/database-entity/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    DeepPartial,\n    HasCustomFields,\n    Product,\n    VendureEntity,\n} from '@vendure/core';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\nexport class CustomProductReviewFields {}\n\n@Entity()\nexport class ProductReview extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<ProductReview>) {\n        super(input);\n    }\n\n    @Column(type => CustomProductReviewFields)\n    customFields: CustomProductReviewFields;\n    \n    @ManyToOne(type => Product)\n    product: Product;\n\n    @EntityId()\n    productId: ID;\n\n    @Column()\n    text: string;\n\n    @Column()\n    rating: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ErrorResultGuard in TypeScript Tests for Vendure\nDESCRIPTION: This example demonstrates how to use ErrorResultGuard to test an operation that might return an error. It shows creating a guard, asserting an error condition, and accessing error-specific properties with proper type narrowing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/error-result-guard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst orderResultGuard: ErrorResultGuard<AddItemToOrderResult>\n  = createErrorResultGuard(order => !!order.lines);\n\nit('errors when quantity is negative', async () => {\n   const { addItemToOrder } = await shopClient.query<AddItemToOrder.Query, AddItemToOrder.Mutation>(ADD_ITEM_TO_ORDER, {\n     productVariantId: 42, quantity: -1,\n   });\n\n   // The test will fail\n   orderResultGuard.assertErrorResult(addItemToOrder);\n\n   // the type of `addItemToOrder` has now been\n   // narrowed to only include the ErrorResult types.\n   expect(addItemToOrder.errorCode).toBe(ErrorCode.NegativeQuantityError);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultShippingLineAssignmentStrategy Class Signature (TypeScript)\nDESCRIPTION: This TypeScript snippet presents the class signature for `DefaultShippingLineAssignmentStrategy`. It implements the `ShippingLineAssignmentStrategy` interface and outlines the `assignShippingLineToOrderLines` method. This method accepts `RequestContext`, `ShippingLine`, and `Order` objects and is designed to return an array (or a Promise resolving to an array) of `OrderLine`s associated with the provided shipping line. As the default strategy, it assigns all order lines within the order to the single specified shipping line.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/default-shipping-line-assignment-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\nclass DefaultShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {\n    assignShippingLineToOrderLines(ctx: RequestContext, shippingLine: ShippingLine, order: Order) => OrderLine[] | Promise<OrderLine[]>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DuplicateEntityInput Input Type in GraphQL\nDESCRIPTION: Specifies input for duplicating an entity. Requires the entity name, ID, and a duplicator input for configuring the duplication process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_81\n\nLANGUAGE: graphql\nCODE:\n```\ninput DuplicateEntityInput {\n  entityName: String!\n  entityId: ID!\n  duplicatorInput: ConfigurableOperationInput!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Enums in GraphQL for Vendure Ecommerce\nDESCRIPTION: This snippet defines permission enums for various operations (Create, Read, Update, Delete) on different entities in the Vendure ecommerce platform. It includes permissions for Order, PaymentMethod, Product, Promotion, ShippingMethod, Tag, TaxCategory, TaxRate, Seller, StockLocation, System, and Zone.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nReadOrder\n\"\"\"Grants permission to update Order\"\"\"\nUpdateOrder\n\"\"\"Grants permission to delete Order\"\"\"\nDeleteOrder\n\"\"\"Grants permission to create PaymentMethod\"\"\"\nCreatePaymentMethod\n\"\"\"Grants permission to read PaymentMethod\"\"\"\nReadPaymentMethod\n\"\"\"Grants permission to update PaymentMethod\"\"\"\nUpdatePaymentMethod\n\"\"\"Grants permission to delete PaymentMethod\"\"\"\nDeletePaymentMethod\n\"\"\"Grants permission to create Product\"\"\"\nCreateProduct\n\"\"\"Grants permission to read Product\"\"\"\nReadProduct\n\"\"\"Grants permission to update Product\"\"\"\nUpdateProduct\n\"\"\"Grants permission to delete Product\"\"\"\nDeleteProduct\n\"\"\"Grants permission to create Promotion\"\"\"\nCreatePromotion\n\"\"\"Grants permission to read Promotion\"\"\"\nReadPromotion\n\"\"\"Grants permission to update Promotion\"\"\"\nUpdatePromotion\n\"\"\"Grants permission to delete Promotion\"\"\"\nDeletePromotion\n\"\"\"Grants permission to create ShippingMethod\"\"\"\nCreateShippingMethod\n\"\"\"Grants permission to read ShippingMethod\"\"\"\nReadShippingMethod\n\"\"\"Grants permission to update ShippingMethod\"\"\"\nUpdateShippingMethod\n\"\"\"Grants permission to delete ShippingMethod\"\"\"\nDeleteShippingMethod\n\"\"\"Grants permission to create Tag\"\"\"\nCreateTag\n\"\"\"Grants permission to read Tag\"\"\"\nReadTag\n\"\"\"Grants permission to update Tag\"\"\"\nUpdateTag\n\"\"\"Grants permission to delete Tag\"\"\"\nDeleteTag\n\"\"\"Grants permission to create TaxCategory\"\"\"\nCreateTaxCategory\n\"\"\"Grants permission to read TaxCategory\"\"\"\nReadTaxCategory\n\"\"\"Grants permission to update TaxCategory\"\"\"\nUpdateTaxCategory\n\"\"\"Grants permission to delete TaxCategory\"\"\"\nDeleteTaxCategory\n\"\"\"Grants permission to create TaxRate\"\"\"\nCreateTaxRate\n\"\"\"Grants permission to read TaxRate\"\"\"\nReadTaxRate\n\"\"\"Grants permission to update TaxRate\"\"\"\nUpdateTaxRate\n\"\"\"Grants permission to delete TaxRate\"\"\"\nDeleteTaxRate\n\"\"\"Grants permission to create Seller\"\"\"\nCreateSeller\n\"\"\"Grants permission to read Seller\"\"\"\nReadSeller\n\"\"\"Grants permission to update Seller\"\"\"\nUpdateSeller\n\"\"\"Grants permission to delete Seller\"\"\"\nDeleteSeller\n\"\"\"Grants permission to create StockLocation\"\"\"\nCreateStockLocation\n\"\"\"Grants permission to read StockLocation\"\"\"\nReadStockLocation\n\"\"\"Grants permission to update StockLocation\"\"\"\nUpdateStockLocation\n\"\"\"Grants permission to delete StockLocation\"\"\"\nDeleteStockLocation\n\"\"\"Grants permission to create System\"\"\"\nCreateSystem\n\"\"\"Grants permission to read System\"\"\"\nReadSystem\n\"\"\"Grants permission to update System\"\"\"\nUpdateSystem\n\"\"\"Grants permission to delete System\"\"\"\nDeleteSystem\n\"\"\"Grants permission to create Zone\"\"\"\nCreateZone\n\"\"\"Grants permission to read Zone\"\"\"\nReadZone\n\"\"\"Grants permission to update Zone\"\"\"\nUpdateZone\n\"\"\"Grants permission to delete Zone\"\"\"\nDeleteZone\n```\n\n----------------------------------------\n\nTITLE: Search Query Variables\nDESCRIPTION: JSON variables for the search query, specifying the search term 'camera' with pagination parameters skip and take to control result pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"term\": \"camera\",\n  \"skip\": 0,\n  \"take\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Facet Class in Vendure TypeScript\nDESCRIPTION: The Facet class extends VendureEntity and implements the Translatable, HasCustomFields, and ChannelAware interfaces. It represents a category of properties for products and product variants, enhancing the faceted search feature by allowing products to be filtered by various dimensions. Key properties include name, isPrivate, and code; it also manages relationships with translations, values, custom fields, and channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/facet.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Facet extends VendureEntity implements Translatable, HasCustomFields, ChannelAware {\n    constructor(input?: DeepPartial<Facet>)\n    name: LocaleString;\n    @Column({ default: false })\n    isPrivate: boolean;\n    @Column({ unique: true })\n    code: string;\n    @OneToMany(type => FacetTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<Facet>>;\n    @OneToMany(type => FacetValue, value => value.facet)\n    values: FacetValue[];\n    @Column(type => CustomFacetFields)\n    customFields: CustomFacetFields;\n    @ManyToMany(type => Channel, channel => channel.facets)\n    @JoinTable()\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobList GraphQL Type\nDESCRIPTION: Defines the `JobList` GraphQL type, representing a paginated list of `Job` objects. It contains an array of `Job` items for the current page and the `totalItems` count across all pages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_91\n\nLANGUAGE: graphql\nCODE:\n```\ntype JobList {\n  items: [Job!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Hashing Strategy Interface - TypeScript\nDESCRIPTION: The PasswordHashingStrategy interface extends the InjectableStrategy and defines methods for hashing and checking user passwords. It includes two methods: 'hash', which takes a plaintext password and returns a hashed password as a Promise of a string, and 'check', which takes a plaintext password and a hashed password, returning a boolean Promise indicating if they match. This is implemented in the vendure core to manage password security.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/password-hashing-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PasswordHashingStrategy extends InjectableStrategy {\n    hash(plaintext: string): Promise<string>;\n    check(plaintext: string, hash: string): Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncQueue in Typescript for Concurrent Task Management\nDESCRIPTION: Class signature for AsyncQueue that limits concurrent async tasks. It includes a constructor that accepts a label and concurrency limit, as well as a push method that adds tasks to the queue for controlled execution.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/async-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AsyncQueue {\n    constructor(label: string = 'default', concurrency: number = 1)\n    push(task: Task<T>) => Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Braintree Client Token with Vaulting Override (GraphQL)\nDESCRIPTION: GraphQL query for generating a Braintree client token with the optional `includeCustomerId` parameter. When `includeCustomerId` is set to false, customer vaulting is bypassed for this payment. Requires a working GraphQL client and that the plugin exposes the `generateBraintreeClientToken` mutation. Typical for one-off or guest payments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nconst { generateBraintreeClientToken } = await graphQlClient.query(gql`\n  query GenerateBraintreeClientToken($includeCustomerId: Boolean) {\n    generateBraintreeClientToken(includeCustomerId: $includeCustomerId)\n  }\n`, { includeCustomerId: false });\n```\n\n----------------------------------------\n\nTITLE: Defining Attempted Login Event in TypeScript\nDESCRIPTION: The `AttemptedLoginEvent` class captures login attempts within the Vendure system, detailing the authentication strategy and, optionally, the identifier. It extends `VendureEvent`, providing a means to monitor authentication attempts via shop or admin APIs, essential for security and user management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass AttemptedLoginEvent extends VendureEvent {\n    constructor(ctx: RequestContext, strategy: string, identifier?: string)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InitialData Interface in TypeScript\nDESCRIPTION: Interface definition that specifies the structure of initial configuration data for a new Vendure installation. Includes essential settings like default language, zone, roles, countries, tax rates, shipping methods, payment methods, and collections.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/initial-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InitialData {\n    defaultLanguage: LanguageCode;\n    defaultZone: string;\n    roles?: RoleDefinition[];\n    countries: CountryDefinition[];\n    taxRates: Array<{ name: string; percentage: number }>;\n    shippingMethods: Array<{ name: string; price: number; taxRate?: number }>;\n    paymentMethods: Array<{ name: string; handler: ConfigurableOperationInput }>;\n    collections: CollectionDefinition[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCustomerInput for Customer Creation in GraphQL\nDESCRIPTION: This GraphQL input type defines the structure for creating a new customer in the Vendure e-commerce platform. It specifies required fields like firstName, lastName, and emailAddress, along with optional fields like title and phoneNumber.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateCustomerInput {\n  title: String\n  firstName: String!\n  lastName: String!\n  phoneNumber: String\n  emailAddress: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Active Customer Details with GraphQL\nDESCRIPTION: GraphQL query to fetch details of the currently logged-in customer including ID, name and email address.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetCustomerAddresses {\n  activeCustomer {\n    id\n    title\n    firstName\n    lastName\n    emailAddress\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation with Union Type Response Handling\nDESCRIPTION: This mutation operation shows how to handle responses for a union type, using inline fragments to specify fields for each possible return type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateCustomerEmail($input: UpdateCustomerEmailInput!) {\n  updateCustomerEmail(input: $input) {\n    __typename\n    ... on Customer {\n      id\n      name\n      email\n    }\n    ... on EmailAddressInUseError {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment\nDESCRIPTION: Example of creating a test environment with custom plugin configuration using createTestEnvironment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestEnvironment, testConfig } from '@vendure/testing';\nimport { describe } from 'vitest';\nimport { MyPlugin } from '../my-plugin.ts';\n\ndescribe('my plugin', () => {\n    const {server, adminClient, shopClient} = createTestEnvironment({\n        ...testConfig,\n        plugins: [MyPlugin],\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: ReactDataTableComponentConfig Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for configuring custom React components to be placed in specific data table locations within the Vendure Admin UI. The interface specifies the table location, column, component to render, and optional props to pass to the component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/react-data-table-component-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReactDataTableComponentConfig {\n    tableId: DataTableLocationId;\n    columnId: DataTableColumnId;\n    component: ElementType;\n    props?: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetPreviewStrategy Interface\nDESCRIPTION: The AssetPreviewStrategy interface is implemented to define the logic for creating preview images for assets in the Vendure e-commerce framework. It extends the InjectableStrategy interface and includes the 'generatePreviewImage' method. This method requires a RequestContext, a mimeType, and data as a Buffer and returns a Promise resolving to a Buffer of the generated preview image. This interface is essential for customizing asset handling in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/assets/asset-preview-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AssetPreviewStrategy extends InjectableStrategy {\n    generatePreviewImage(ctx: RequestContext, mimeType: string, data: Buffer): Promise<Buffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Global Template Variables with Async Function in TypeScript\nDESCRIPTION: Shows how globalTemplateVars can be assigned using an async function that fetches values at runtime. Requires access to the 'RequestContext' and 'Injector' for resolving dependencies. Inputs are the current request and dependency injector; outputs are template-scoped variables, allowing per-channel theming. Limitations: services used must be injectable.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nEmailPlugin.init({\n   globalTemplateVars: async (ctx, injector) => {\n     const myAsyncService = injector.get(MyAsyncService);\n     const asyncValue = await myAsyncService.get(ctx);\n     const channel = ctx.channel;\n     const { primaryColor } = channel.customFields.theme;\n     const theme = {\n        primaryColor,\n        asyncValue,\n     };\n     return theme;\n   }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining IntCustomFieldConfig Type in GraphQL\nDESCRIPTION: Defines the `IntCustomFieldConfig` type in GraphQL. This type holds the configuration details for a custom field of type integer. It includes properties like name, type ('int'), list status, localization strings (label, description), access control (readonly, internal, nullable, requiresPermission), validation constraints (min, max, step), and UI hints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_83\n\nLANGUAGE: graphql\nCODE:\n```\ntype IntCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  min: Int\n  max: Int\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: OrderStateTransitionError Implementation\nDESCRIPTION: Example of a specific ErrorResult type that adds additional fields related to order state transitions, providing more context about what went wrong.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"Returned if there is an error in transitioning the Order state\"\ntype OrderStateTransitionError implements ErrorResult {\n  errorCode: ErrorCode!\n  message: String!\n  transitionError: String!\n  fromState: String!\n  toState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the AssetOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the configuration options for asset management in Vendure. It includes optional properties for asset naming strategy (`AssetNamingStrategy`), storage strategy (`AssetStorageStrategy`), preview strategy (`AssetPreviewStrategy`), permitted file types (as MIME types or extensions like '.pdf', 'image/*'), and the maximum file upload size in bytes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/assets/asset-options.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface AssetOptions {\n    assetNamingStrategy?: AssetNamingStrategy;\n    assetStorageStrategy?: AssetStorageStrategy;\n    assetPreviewStrategy?: AssetPreviewStrategy;\n    permittedFileTypes?: string[];\n    uploadMaxFileSize?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting NotificationService Using useInjector Hook in React - TSX\nDESCRIPTION: This React snippet illustrates how to inject NotificationService using the useInjector() hook from @vendure/admin-ui/react. A Test component displays a button; clicking it triggers a success toast via notificationService.success(). Required dependencies include Vendure's NotificationService and useInjector from the React admin UI package, and React itself. The relevant parameter is the service class passed to useInjector. Input is a user click, and output is a toast notification.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport { NotificationService } from '@vendure/admin-ui/core';\\n// highlight-next-line\\nimport { useInjector } from '@vendure/admin-ui/react';\\nimport React from 'react';\\n\\nexport function Test() {\\n    // highlight-next-line\\n    const notificationService = useInjector(NotificationService);\\n    \\n    function showNotification() {\\n        // highlight-next-line\\n        notificationService.success('Hello!');\\n    }\\n    return (\\n        <div className=\\\"page-block\\\">\\n            <button className=\\\"button primary\\\" onClick={showNotification}>Click me</button>\\n        </div>\\n    );\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FulfillmentStateTransitionError Type in GraphQL\nDESCRIPTION: Describes the structure of an error that occurs during fulfillment state transition, including error code, message, and transition details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_72\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FulfillmentStateTransitionError {\n  errorCode: ErrorCode!\n  message: String!\n  transitionError: String!\n  fromState: String!\n  toState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanFormInputComponent in TypeScript\nDESCRIPTION: A checkbox input component for boolean fields in Vendure admin UI forms. It implements the FormInputComponent interface and includes properties for readonly state, form control, and configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BooleanFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'boolean-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'boolean-form-input'>;\n}\n```\n\n----------------------------------------\n\nTITLE: CollectionFilter Class Signature in TypeScript\nDESCRIPTION: Class definition for CollectionFilter showing its inheritance from ConfigurableOperationDef and its constructor and apply method signatures.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/collection-filter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CollectionFilter<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: CollectionFilterConfig<T>)\n    apply(qb: SelectQueryBuilder<ProductVariant>, args: ConfigArg[]) => SelectQueryBuilder<ProductVariant>;\n}\n```\n\n----------------------------------------\n\nTITLE: Order Seller Channel Assignment - TypeScript Implementation\nDESCRIPTION: Implementation of OrderSellerStrategy to assign OrderLines to correct Seller Channels based on ProductVariant channel assignments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MultivendorSellerStrategy implements OrderSellerStrategy {\n  // other properties omitted for brevity   \n    \n  async setOrderLineSellerChannel(ctx: RequestContext, orderLine: OrderLine) {\n    await this.entityHydrator.hydrate(ctx, orderLine.productVariant, { relations: ['channels'] });\n    const defaultChannel = await this.channelService.getDefaultChannel();\n  \n    // If a ProductVariant is assigned to exactly 2 Channels, then one is the default Channel\n    // and the other is the seller's Channel.\n    if (orderLine.productVariant.channels.length === 2) {\n      const sellerChannel = orderLine.productVariant.channels.find(\n        c => !idsAreEqual(c.id, defaultChannel.id),\n      );\n      if (sellerChannel) {\n        return sellerChannel;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Customer Based on Email in TypeScript\nDESCRIPTION: Creates a new customer or updates an existing one based on the provided email address. Primarily used for guest checkouts where a matching email address implies the same customer. Can optionally throw an error if a user with the email already exists.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateOrUpdate(ctx: RequestContext, input: Partial<CreateCustomerInput> & { emailAddress: string }, errorOnExistingUser: boolean = false) => Promise<Customer | EmailAddressConflictError>\n```\n\n----------------------------------------\n\nTITLE: Transition Order State Mutation\nDESCRIPTION: GraphQL mutation for transitioning an order to a new state. Valid states can be queried using nextOrderStates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  transitionOrderToState(state: String!): TransitionOrderToStateResult\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting with Custom Fields\nDESCRIPTION: GraphQL query demonstrating how to filter and sort using custom fields in a products query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    products(options: {\n        // highlight-start\n        filter: {\n            infoUrl: { contains: \"new\" },\n            downloadable: { eq: true }\n        },\n        sort: {\n            infoUrl: ASC\n        }\n        // highlight-end\n    }) {\n        items {\n            id\n            name\n            // highlight-start\n            customFields {\n                infoUrl\n                downloadable\n                shortName\n            }\n            // highlight-end\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic SMTP Transport Configuration for EmailPlugin (TypeScript)\nDESCRIPTION: Demonstrates providing a dynamic SMTP transport function to EmailPlugin, allowing per-channel/email customization of transport settings. Dependencies include an injectable custom transport service. Inputs: the dependency 'injector' and request 'ctx'; outputs: either a channel-specific transport config or static fallback. Limitation: proper error handling for missing context/services is required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultEmailHandlers, EmailPlugin, FileBasedTemplateLoader } from '@vendure/email-plugin';\nimport { MyTransportService } from './transport.services.ts';\nconst config: VendureConfig = {\n  plugins: [\n    EmailPlugin.init({\n      handler: defaultEmailHandlers,\n      templateLoader: new FileBasedTemplateLoader(path.join(__dirname, '../static/email/templates')),\n      transport: (injector, ctx) => {\n        if (ctx) {\n          return injector.get(MyTransportService).getSettings(ctx);\n        } else {\n          return {\n            type: 'smtp',\n            host: 'smtp.example.com',\n            // ... etc.\n          }\n        }\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Express Middleware Configuration\nDESCRIPTION: Implementation of custom Express middleware for logging Admin API requests in Vendure config.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { RequestHandler } from 'express';\n\nconst myMiddleware: RequestHandler = (req, res, next) => {\n    console.log('Request received!');\n    next();\n};\n\nexport const config: VendureConfig = {\n    // ...\n    apiOptions: {\n        middleware: [\n            {\n                route: 'admin-api',\n                handler: myMiddleware,\n            }\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Custom Field TypeScript Typings in Vendure\nDESCRIPTION: This snippet demonstrates how to extend the built-in CustomProductFields interface to add custom fields, ensuring type safety when accessing custom fields on Product entities in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n// types.ts\n\n// Note: we are using a deep import here, rather than importing from `@vendure/core` due to\n// a possible bug in TypeScript (https://github.com/microsoft/TypeScript/issues/46617) which\n// causes issues when multiple plugins extend the same custom fields interface.\nimport { CustomProductFields } from '@vendure/core/dist/entity/custom-entity-fields';\n\ndeclare module '@vendure/core/dist/entity/custom-entity-fields' {\n    interface CustomProductFields {\n        infoUrl: string;\n        downloadable: boolean;\n        shortName: string;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Option Group in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new ProductOptionGroup. It takes a CreateProductOptionGroupInput object as input and returns a ProductOptionGroup object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createProductOptionGroup(input: CreateProductOptionGroupInput!): ProductOptionGroup!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Decorator in GraphQL Resolver\nDESCRIPTION: Example showing how to use the @Transaction decorator in automatic mode to wrap a GraphQL mutation in a database transaction. The transaction automatically commits on success or rolls back on error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/transaction-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Transaction()\nasync myMutation(@Ctx() ctx: RequestContext) {\n  // as long as the `ctx` object is passed in to\n  // all database operations, the entire mutation\n  // will be run as an atomic transaction, and rolled\n  // back if an error is thrown.\n  const result = this.myService.createThing(ctx);\n  return this.myService.updateOtherThing(ctx, result.id);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File for Vendure\nDESCRIPTION: Example of a .env file used to define environment variables for Vendure configuration, including custom API keys for plugins.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nAPP_ENV=dev\nCOOKIE_SECRET=toh8soqdlj\nSUPERADMIN_USERNAME=superadmin\nSUPERADMIN_PASSWORD=superadmin\n// highlight-next-line\nMY_API_KEY=12345\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Entities by ID in a Channel - TypeORM Vendure Helper - TypeScript\nDESCRIPTION: This method, `findByIdsInChannel`, retrieves an array of entities by their IDs but restricts the result set to those belonging to a particular channel. It functions like TypeORM's `findByIds()`, but enforces a channel boundary for multi-tenant separation. Parameters include the request context, entity type, array of IDs, channel ID, and query options for fine-tuned searching. It requires Vendure's TypeORM and channel scoping infrastructure; the output is an array of matched entities within the designated channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/transactional-connection.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n(ctx: RequestContext, entity: Type<T>, ids: ID[], channelId: ID, options: FindManyOptions<T>) => \n```\n\n----------------------------------------\n\nTITLE: Defining CustomerListOptions for Pagination and Sorting in GraphQL\nDESCRIPTION: This GraphQL input type defines options for paginating, sorting, and filtering customer lists in Vendure. It includes parameters for skip and take (pagination), sort (ordering), and filter (filtering), with additional support for specifying the logical operator for multiple filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: CustomerSortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: CustomerFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionGroupEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a ProductOptionGroup is added or updated. It extends VendureEntityEvent and includes a constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductOptionGroupEvent extends VendureEntityEvent<\n    ProductOptionGroup,\n    ProductOptionGroupInputTypes\n> {\n    constructor(ctx: RequestContext, entity: ProductOptionGroup, type: 'created' | 'updated' | 'deleted', input?: ProductOptionGroupInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: OrderCalculator Class Definition in TypeScript\nDESCRIPTION: Class definition for OrderCalculator which handles order calculations including promotions, taxes, and shipping. It provides methods for applying price adjustments and calculating order totals.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/order-calculator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderCalculator {\n    constructor(configService: ConfigService, zoneService: ZoneService, taxRateService: TaxRateService, shippingMethodService: ShippingMethodService, shippingCalculator: ShippingCalculator, requestContextCache: RequestContextCacheService)\n    applyPriceAdjustments(ctx: RequestContext, order: Order, promotions: Promotion[], updatedOrderLines: OrderLine[] = [], options?: { recalculateShipping?: boolean }) => Promise<Order>;\n    calculateOrderTotals(order: Order) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Class Definition in TypeScript\nDESCRIPTION: The type definition of the Cache class showing its constructor and methods. Includes methods for retrieving, deleting cache entries, and invalidating cache tags.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cache {\n    constructor(config: CacheConfig, cacheService: CacheService)\n    get(id: string | number, getValueFn: () => T | Promise<T>) => Promise<T>;\n    delete(id: string | number | Array<string | number>) => Promise<void>;\n    invalidateTags(tags: string[]) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Multiple Shipping Methods Mutation - GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple shipping methods by their IDs. Returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_64\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteShippingMethods(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateGlobalSettingsResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when updating global settings, returning either GlobalSettings or a ChannelDefaultLanguageError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_216\n\nLANGUAGE: graphql\nCODE:\n```\nunion UpdateGlobalSettingsResult =\nGlobalSettings | ChannelDefaultLanguageError\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Collection. It requires a CreateCollectionInput object and returns a Collection object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createCollection(input: CreateCollectionInput!): Collection!\n}\n```\n\n----------------------------------------\n\nTITLE: Composing GraphQL Result Unions in TypeScript - Vendure - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to create a union type that includes both a success result (such as Order) and multiple possible error types for a Vendure GraphQL query or mutation, then shows how to use ErrorResultUnion to map to the appropriate TypeScript type. It assumes the presence of the types Order, OrderModificationError, OrderLimitError, NegativeQuantityError, VendureEntityOrder, and the generic ErrorResultUnion utility from Vendure. The input types to ErrorResultUnion are a union type representing possible results and an entity type, and the output is a new union type with the vendure entity replacing the original success type. This pattern helps maintain consistency between the GraphQL schema and TypeScript code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-result-union.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UpdateOrderItemsResult = Order | OrderModificationError | OrderLimitError | NegativeQuantityError;\ntype T1 = ErrorResultUnion<UpdateOrderItemsResult, VendureEntityOrder>;\n// T1 = VendureEntityOrder | OrderModificationError | OrderLimitError | NegativeQuantityError;\n```\n\n----------------------------------------\n\nTITLE: Defining the SearchConfig Interface in TypeScript\nDESCRIPTION: Presents the TypeScript interface definition for `SearchConfig`. This interface outlines the available options for customizing internal Elasticsearch queries, including limits (`facetValueMaxSize`, `collectionMaxSize`, `totalItemsMaxSize`), match types (`multiMatchType`), boosting (`boostFields`), pricing buckets (`priceRangeBucketInterval`), and mapping functions for queries (`mapQuery`) and sorting (`mapSort`).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SearchConfig {\n    facetValueMaxSize?: number;\n    collectionMaxSize?: number;\n    totalItemsMaxSize?: number | boolean;\n    multiMatchType?: 'best_fields' | 'most_fields' | 'cross_fields' | 'phrase' | 'phrase_prefix' | 'bool_prefix';\n    boostFields?: BoostFieldsConfig;\n    priceRangeBucketInterval?: number;\n    mapQuery?: (\n        query: any,\n        input: ElasticSearchInput,\n        searchConfig: DeepRequired<SearchConfig>,\n        channelId: ID,\n        enabledOnly: boolean,\n        ctx: RequestContext,\n    ) => any;\n    scriptFields?: { [fieldName: string]: CustomScriptMapping<[ElasticSearchInput]> };\n    mapSort?: (sort: ElasticSearchSortInput, input: ElasticSearchInput) => ElasticSearchSortInput;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of BaseDetailComponent in TypeScript\nDESCRIPTION: Example showing how to extend the BaseDetailComponent for a custom entity view. This demonstrates proper constructor setup, form initialization, and implementation of the required setFormValues method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/base-detail-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'app-my-entity',\n  templateUrl: './my-entity.component.html',\n  styleUrls: ['./my-entity.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GlobalSettingsComponent extends BaseDetailComponent<MyEntityFragment> implements OnInit {\n  detailForm: FormGroup;\n\n  constructor(\n    router: Router,\n    route: ActivatedRoute,\n    serverConfigService: ServerConfigService,\n    protected dataService: DataService,\n    private formBuilder: FormBuilder,\n  ) {\n    super(route, router, serverConfigService, dataService);\n    this.detailForm = this.formBuilder.group({\n      name: [''],\n    });\n  }\n\n  protected setFormValues(entity: MyEntityFragment, languageCode: LanguageCode): void {\n    this.detailForm.patchValue({\n      name: entity.name,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataTableComponent with Angular Templates for Paginated Data Display\nDESCRIPTION: This example demonstrates how to implement the DataTableComponent to display paginated data with custom column definitions and row templates. It shows how to handle pagination events, define column headers, and create interactive row elements with actions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/data-table-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-data-table\n  [items]=\"items$ | async\"\n  [itemsPerPage]=\"itemsPerPage$ | async\"\n  [totalItems]=\"totalItems$ | async\"\n  [currentPage]=\"currentPage$ | async\"\n  (pageChange)=\"setPageNumber($event)\"\n  (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n  <!-- The header columns are defined first -->\n  <vdr-dt-column>{{ 'common.name' | translate }}</vdr-dt-column>\n  <vdr-dt-column></vdr-dt-column>\n  <vdr-dt-column></vdr-dt-column>\n\n  <!-- Then we define how a row is rendered -->\n  <ng-template let-taxRate=\"item\">\n    <td class=\"left align-middle\">{{ taxRate.name }}</td>\n    <td class=\"left align-middle\">{{ taxRate.category.name }}</td>\n    <td class=\"left align-middle\">{{ taxRate.zone.name }}</td>\n    <td class=\"left align-middle\">{{ taxRate.value }}%</td>\n    <td class=\"right align-middle\">\n      <vdr-table-row-action\n        iconShape=\"edit\"\n        [label]=\"'common.edit' | translate\"\n        [linkTo]=\"['./', taxRate.id]\"\n      ></vdr-table-row-action>\n    </td>\n    <td class=\"right align-middle\">\n      <vdr-dropdown>\n        <button type=\"button\" class=\"btn btn-link btn-sm\" vdrDropdownTrigger>\n          {{ 'common.actions' | translate }}\n          <clr-icon shape=\"caret down\"></clr-icon>\n        </button>\n        <vdr-dropdown-menu vdrPosition=\"bottom-right\">\n          <button\n              type=\"button\"\n              class=\"delete-button\"\n              (click)=\"deleteTaxRate(taxRate)\"\n              [disabled]=\"!(['DeleteSettings', 'DeleteTaxRate'] | hasPermission)\"\n              vdrDropdownItem\n          >\n              <clr-icon shape=\"trash\" class=\"is-danger\"></clr-icon>\n              {{ 'common.delete' | translate }}\n          </button>\n        </vdr-dropdown-menu>\n      </vdr-dropdown>\n    </td>\n  </ng-template>\n</vdr-data-table>\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEntityEvent to handle payment method events. Triggered when a PaymentMethod is added, updated or deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nclass PaymentMethodEvent extends VendureEntityEvent<PaymentMethod, PaymentMethodInputTypes> {\n    constructor(ctx: RequestContext, entity: PaymentMethod, type: 'created' | 'updated' | 'deleted', input?: PaymentMethodInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateFacetInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a facet. It requires a code, visibility flag, and translations, with optional facet values that can be created alongside the facet.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_48\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateFacetInput {\n  code: String!\n  isPrivate: Boolean!\n  translations: [FacetTranslationInput!]!\n  values: [CreateFacetValueWithFacetInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Vendure on Google Cloud Run\nDESCRIPTION: Example environment configuration file for running Vendure locally and on Google Cloud Run. Contains placeholder variables that need to be filled with actual values for database connection, storage, and other services.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-google-cloud-run/index.md#2025-04-22_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n.env.example\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Entity Caching Rules in Stellate Dashboard Configuration\nDESCRIPTION: This TypeScript snippet demonstrates how to extend the Stellate dashboard configuration (`stellate.ts`) to include caching rules for a custom entity type, `Article`. A new rule is added to the `rules` array specifying the `Article` type, setting `maxAge` and `swr` values for caching duration, and providing a description. This ensures Stellate attempts to cache data related to the `Article` type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"stellate\";\n\nconst config: Config = {\n    config: {\n        // ...\n        rules: [\n            // ...\n            {\n                types: [\"Article\"],\n                maxAge: 900,\n                swr: 900,\n                description: \"Cache Articles\",\n            },\n        ],\n    },\n    // ...\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining Translatable Interface - TypeScript\nDESCRIPTION: Entities that require localization should implement the Translatable interface, which includes a 'translations' property holding an array of Translation objects. This allows entities to support multiple languages effectively.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/interfaces.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Translatable {\n    translations: Array<Translation<VendureEntity>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Order Notes with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting an order note in the Vendure admin API. Requires the ID of the note to be deleted and returns a DeletionResponse object with the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_48\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteOrderNote(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateChannelResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when updating a channel, returning either a Channel or a LanguageNotAvailableError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_214\n\nLANGUAGE: graphql\nCODE:\n```\nunion UpdateChannelResult =\nChannel | LanguageNotAvailableError\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Shell commands for building and running Vendure server and worker containers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t vendure .\n\n# Run the server\ndocker run -dp 3000:3000 --name vendure-server vendure npm run start:server\n\n# Run the worker\ndocker run -dp 3000:3000 --name vendure-worker vendure npm run start:worker\n```\n\n----------------------------------------\n\nTITLE: Querying Zones with GraphQL\nDESCRIPTION: This query retrieves a list of zones based on `ZoneListOptions`. The result is a `ZoneList`, depicting various zones within the system and associated details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_51\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\nzones(options: ZoneListOptions): ZoneList!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Bulk Action in Vendure Admin UI\nDESCRIPTION: Example of registering a bulk action for sending multiple products to a translation service. Demonstrates using the registerBulkAction function with modal confirmation dialog and service injection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/bulk-actions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModalService, registerBulkAction } from '@vendure/admin-ui/core';\nimport { ProductDataTranslationService } from './product-data-translation.service';\n\nexport default [\n    ProductDataTranslationService,\n    registerBulkAction({\n        location: 'product-list',\n        label: 'Send to translation service',\n        icon: 'language',\n        onClick: ({injector, selection}) => {\n            const modalService = injector.get(ModalService);\n            const translationService = injector.get(ProductDataTranslationService);\n            modalService\n                .dialog({\n                    title: `Send ${selection.length} products for translation?`,\n                    buttons: [\n                        {type: 'secondary', label: 'cancel'},\n                        {type: 'primary', label: 'send', returnValue: true},\n                    ],\n                })\n                .subscribe(response => {\n                    if (response) {\n                        translationService.sendForTranslation(selection.map(item => item.productId));\n                    }\n                });\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Fetching Collection Products with Search Query\nDESCRIPTION: GraphQL query to retrieve products within a collection using the search query with collectionSlug parameter. Includes pagination and product details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetCollectionProducts($slug: String!, $skip: Int, $take: Int) {\n  search(\n    input: {\n      collectionSlug: $slug,\n      groupByProduct: true,\n      skip: $skip,\n      take: $take }\n  ) {\n    totalItems\n    items {\n      productName\n      slug\n      productAsset {\n        id\n        preview\n      }\n      priceWithTax {\n        ... on SinglePrice {\n          value\n        }\n        ... on PriceRange {\n          min\n          max\n        }\n      }\n      currencyCode\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"electronics\",\n  \"skip\": 0,\n  \"take\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultJobQueuePlugin in Vendure\nDESCRIPTION: Example of how to add the DefaultJobQueuePlugin to the Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/default-job-queue-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultJobQueuePlugin, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    DefaultJobQueuePlugin,\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Nullable Custom Fields\nDESCRIPTION: Shows how to create a required custom field by setting nullable to false and providing a default value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'reviewRating',\n                type: 'float',\n                // highlight-start\n                nullable: false,\n                defaultValue: 0,\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Custom Detail Component\nDESCRIPTION: Demonstrates how to create a custom detail component in Angular that displays CMS information for products. The component uses DataService and implements the CustomDetailComponent interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-detail-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { Observable, switchMap } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DataService, CustomDetailComponent, SharedModule } from '@vendure/admin-ui/core';\nimport { CmsDataService } from '../../providers/cms-data.service';\n\n@Component({\n    template: `\n        <vdr-card title=\"CMS Info\">\n            <pre>{{ extraInfo$ | async | json }}</pre>\n        </vdr-card>`,\n    standalone: true,\n    providers: [CmsDataService],\n    imports: [SharedModule],\n})\nexport class ProductInfoComponent implements CustomDetailComponent, OnInit {\n    entity$: Observable<any>\n    detailForm: FormGroup;\n\n    extraInfo$: Observable<any>;\n\n    constructor(private cmsDataService: CmsDataService) {\n    }\n\n    ngOnInit() {\n        this.extraInfo$ = this.entity$.pipe(\n            switchMap(entity => this.cmsDataService.getDataFor(entity.id))\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for product collections in Vendure. This type defines properties of a product collection including metadata, hierarchical structure, filtering rules, translations, and associated product variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode\n  name: String!\n  slug: String!\n  breadcrumbs: [CollectionBreadcrumb!]!\n  position: Int!\n  description: String!\n  featuredAsset: Asset\n  assets: [Asset!]!\n  parent: Collection\n  parentId: ID!\n  children: [Collection!]\n  filters: [ConfigurableOperation!]!\n  translations: [CollectionTranslation!]!\n  productVariants(options: ProductVariantListOptions): ProductVariantList!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: StockLocationStrategy Interface Definition in TypeScript\nDESCRIPTION: Defines the StockLocationStrategy interface that extends InjectableStrategy, containing methods for managing stock across multiple locations including availability checking, allocation, release, sale, and cancellation handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/stock-location-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StockLocationStrategy extends InjectableStrategy {\n    getAvailableStock(\n        ctx: RequestContext,\n        productVariantId: ID,\n        stockLevels: StockLevel[],\n    ): AvailableStock | Promise<AvailableStock>;\n    forAllocation(\n        ctx: RequestContext,\n        stockLocations: StockLocation[],\n        orderLine: OrderLine,\n        quantity: number,\n    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;\n    forRelease(\n        ctx: RequestContext,\n        stockLocations: StockLocation[],\n        orderLine: OrderLine,\n        quantity: number,\n    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;\n    forSale(\n        ctx: RequestContext,\n        stockLocations: StockLocation[],\n        orderLine: OrderLine,\n        quantity: number,\n    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;\n    forCancellation(\n        ctx: RequestContext,\n        stockLocations: StockLocation[],\n        orderLine: OrderLine,\n        quantity: number,\n    ): LocationWithQuantity[] | Promise<LocationWithQuantity[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultProductVariantPriceSelectionStrategy in TypeScript\nDESCRIPTION: This code snippet defines the DefaultProductVariantPriceSelectionStrategy class, which implements the ProductVariantPriceSelectionStrategy interface. It provides a default implementation for selecting product variant prices based on the current channel and currency.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/product-variant-price-selection-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultProductVariantPriceSelectionStrategy implements ProductVariantPriceSelectionStrategy {\n    selectPrice(ctx: RequestContext, prices: ProductVariantPrice[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Note to Order in Vendure (TypeScript)\nDESCRIPTION: Creates a new \"ORDER_NOTE\" type OrderHistoryEntry in the Order's history timeline. It takes a RequestContext and AddNoteToOrderInput as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\naddNoteToOrder(ctx: RequestContext, input: AddNoteToOrderInput): Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Geo-Location Based Sort Mapping for Elasticsearch in Vendure\nDESCRIPTION: Advanced example of implementing distance-based sorting in Elasticsearch. This configuration extends search inputs and sorts to allow ordering products by their distance from user coordinates using geo-distance functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nextendSearchInputType: {\n  latitude: 'Float',\n  longitude: 'Float',\n},\nextendSearchSortType: [\"distance\"],\nindexMappingProperties: {\n  // The `product-location` field corresponds to the `location` customProductMapping\n  // defined below. Here we specify that it would be index as a `geo_point` type,\n  // which will allow us to perform geo-spacial calculations on it in our script field.\n  'product-location': {\n    type: 'geo_point',\n  },\n},\ncustomProductMappings: {\n  location: {\n    graphQlType: 'String',\n    valueFn: (product: Product) => {\n      // Assume that the Product entity has this customField defined\n      const custom = product.customFields.location;\n      return `${custom.latitude},${custom.longitude}`;\n    },\n  }\n},\nsearchConfig: {\n     mapSort: (sort, input) => {\n         // Assuming distance is never undefined\n         const { distance } = input.sort;\n         return [\n             ...sort,\n             {\n                 [\"_geo_distance\"]: {\n                     \"product-location\": [\n                         input.longitude,\n                         input.latitude\n                     ],\n                     order: distance === SortOrder.ASC ? 'asc' : 'desc',\n                     unit: \"km\"\n                 }\n             }\n         ];\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailEventListener Class in TypeScript\nDESCRIPTION: This code snippet defines the EmailEventListener class, which is used to create listeners for email events. It includes a constructor that takes a type parameter, and an 'on' method for defining the event to listen for.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-listener.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EmailEventListener<T extends string> {\n    public type: T;\n    constructor(type: T)\n    on(event: Type<Event>) => EmailEventHandler<T, Event>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DefaultSearchPlugin in Vendure Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize and configure the DefaultSearchPlugin in a Vendure application. It shows the usage of the plugin in the VendureConfig object, with options for indexing stock status and buffering updates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultSearchPlugin, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    DefaultSearchPlugin.init({\n      indexStockStatus: true,\n      bufferUpdates: true,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Asset - GraphQL Mutation - GraphQL\nDESCRIPTION: Enables asset modification via the updateAsset mutation. Accepts an UpdateAssetInput detailing changes and returns the updated Asset entity. This mutation is used for managing product images or files, and may be subject to validation on file types or references.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_108\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Asset\n\"\"\"\ntype Mutation {\nupdateAsset(input: UpdateAssetInput!): Asset!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Data Table Component in Vendure\nDESCRIPTION: Example of registering a custom React component for use in a product list data table. Shows configuration including tableId, columnId and custom props.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-data-table-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerReactDataTableComponent } from '@vendure/admin-ui/react';\nimport { SlugWithLink } from './components/SlugWithLink';\n\nexport default [\n    registerReactDataTableComponent({\n        component: SlugWithLink,\n        tableId: 'product-list',\n        columnId: 'slug',\n        props: {\n          foo: 'bar',\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Create Customer Address Mutation in GraphQL\nDESCRIPTION: This mutation allows for the creation of a new customer address using the 'CreateAddressInput' parameter and returns an 'Address' object representing the newly created address.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { createCustomerAddress(input: CreateAddressInput!): Address! }\n```\n\n----------------------------------------\n\nTITLE: StripePluginOptions Interface Signature\nDESCRIPTION: TypeScript interface defining the configuration options available for the `StripePlugin`. Options include `storeCustomersInStripe` (boolean), functions to customize `metadata`, `paymentIntentCreateParams`, `requestOptions`, and `customerCreateParams` based on context and order details, and `skipPaymentIntentsWithoutExpectedMetadata` (boolean).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StripePluginOptions {\n    storeCustomersInStripe?: boolean;\n    metadata?: (\n        injector: Injector,\n        ctx: RequestContext,\n        order: Order,\n    ) => Stripe.MetadataParam | Promise<Stripe.MetadataParam>;\n    paymentIntentCreateParams?: (\n        injector: Injector,\n        ctx: RequestContext,\n        order: Order,\n    ) => AdditionalPaymentIntentCreateParams | Promise<AdditionalPaymentIntentCreateParams>;\n    requestOptions?: (\n        injector: Injector,\n        ctx: RequestContext,\n        order: Order,\n    ) => AdditionalRequestOptions | Promise<AdditionalRequestOptions>;\n    customerCreateParams?: (\n        injector: Injector,\n        ctx: RequestContext,\n        order: Order,\n    ) => AdditionalCustomerCreateParams | Promise<AdditionalCustomerCreateParams>;\n    skipPaymentIntentsWithoutExpectedMetadata?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HandlebarsMjmlGenerator Class in TypeScript\nDESCRIPTION: Class implementation of EmailGenerator that uses Handlebars templating engine and MJML email framework to generate responsive HTML emails.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-generator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass HandlebarsMjmlGenerator implements EmailGenerator {\n    onInit(options: InitializedEmailPluginOptions) => ;\n    generate(from: string, subject: string, template: string, templateVars: any) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ProductPriceApplicator in a Custom Service (TypeScript)\nDESCRIPTION: This example demonstrates how to use the ProductPriceApplicator in a custom service to retrieve a ProductVariant and apply the correct price and tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/product-price-applicator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyCustomService {\n  constructor(private connection: TransactionalConnection,\n              private productPriceApplicator: ProductPriceApplicator) {}\n\n  getVariant(ctx: RequestContext, id: ID) {\n    const productVariant = await this.connection\n      .getRepository(ctx, ProductVariant)\n      .findOne(id, { relations: ['taxCategory'] });\n\n    await this.productPriceApplicator\n      .applyChannelPriceAndTax(productVariant, ctx);\n\n    return productVariant;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RequestContext Class Definition\nDESCRIPTION: Full class signature showing available methods and properties of the RequestContext class.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/request-context.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass RequestContext {\n    empty() => RequestContext;\n    deserialize(ctxObject: SerializedRequestContext) => RequestContext;\n    userHasPermissions(permissions: Permission[]) => boolean;\n    serialize() => SerializedRequestContext;\n    copy() => RequestContext;\n    req: Request | undefined\n    apiType: ApiType\n    channel: Channel\n    channelId: ID\n    languageCode: LanguageCode\n    currencyCode: CurrencyCode\n    session: CachedSession | undefined\n    activeUserId: ID | undefined\n    isAuthorized: boolean\n    authorizedAsOwnerOnly: boolean\n    translate(key: string, variables?: { [k: string]: any }) => string;\n    setReplicationMode(mode: ReplicationMode) => void;\n    replicationMode: ReplicationMode | undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntryConfig Interface in TypeScript\nDESCRIPTION: Interface definition for configuring custom history entry components in the Vendure admin UI. It specifies a type property that corresponds to a custom HistoryEntryType string, and a component property that defines the component to be rendered for this history entry type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/history-entry-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HistoryEntryConfig {\n    type: string;\n    component: Type<HistoryEntryComponent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Orders in Vendure (TypeScript)\nDESCRIPTION: Merges orders when a guest user with an anonymous Order signs in and has an existing Order associated with that Customer. The merging logic is specified in the OrderOptions mergeStrategy config setting.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nmergeOrders(ctx: RequestContext, user: User, guestOrder?: Order, existingOrder?: Order): Promise<Order | undefined>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Event in TypeScript\nDESCRIPTION: The `ChannelEvent` class addresses the creation, update, or deletion of channels. Extending `VendureEntityEvent`, it manages context, entity, action type, and optional input types for channels. Dependencies include `RequestContext`, `Channel`, and `ChannelInputTypes`, supporting channel lifecycle management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelEvent extends VendureEntityEvent<Channel, ChannelInputTypes> {\n    constructor(ctx: RequestContext, entity: Channel, type: 'created' | 'updated' | 'deleted', input?: ChannelInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchService Class in TypeScript\nDESCRIPTION: This code snippet defines the SearchService class with two methods: adopt() for overriding behavior and reindex() for reindexing search data. The adopt() method takes a partial SearchService object, while reindex() returns a Promise of a Job.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/search-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SearchService {\n    adopt(override: Pick<SearchService, 'reindex'>) => ;\n    reindex(ctx: RequestContext) => Promise<Job>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Extension HTML\nDESCRIPTION: HTML template showing how to include Admin UI theme stylesheet and UiDevkitClient in a non-build environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/using-other-frameworks/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/ui-extension/plain-js-app/index.html -->\n<head>\n  <link rel=\"stylesheet\" href=\"../../theme.min.css\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining ProductFilterParameter Input Type in GraphQL\nDESCRIPTION: Specifies filtering options for products, including various fields like facetValueId, sku, id, createdAt, updatedAt, and allows for logical AND/OR combinations of filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_118\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ProductFilterParameter {\n  facetValueId: IDOperators\n  sku: StringOperators\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  name: StringOperators\n  slug: StringOperators\n  description: StringOperators\n  enabled: BooleanOperators\n  _and: [ProductFilterParameter!]\n  _or: [ProductFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Custom Field Validation\nDESCRIPTION: Shows how to implement asynchronous validation for custom fields using dependency injection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'partCode',\n                type: 'string',\n                // highlight-start\n                validate: async (value, injector, ctx) => {\n                    const partCodeService = injector.get(PartCodeService);\n                    const isValid = await partCodeService.validateCode(value);\n                    if (!isValid) {\n                        return `Part code ${value} is not valid`;\n                    }\n                },\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Mollie Payment Intent via GraphQL Mutation\nDESCRIPTION: Example GraphQL mutation `createMolliePaymentIntent` used in the storefront to initiate a Mollie payment. It requires `redirectUrl` (where the customer returns after payment), `paymentMethodCode` (the code of the configured Mollie PaymentMethod in Vendure), and optionally `molliePaymentMethodCode` (e.g., 'ideal', 'creditcard') to bypass Mollie's method selection screen. The response includes the Mollie redirect URL or an error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/mollie-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n```GraphQL\nmutation CreateMolliePaymentIntent {\n  createMolliePaymentIntent(input: {\n    redirectUrl: \"https://storefront/order/1234XYZ\"\n    paymentMethodCode: \"mollie-payment-method\"\n    molliePaymentMethodCode: \"ideal\"\n  }) {\n         ... on MolliePaymentIntent {\n              url\n          }\n         ... on MolliePaymentIntentError {\n              errorCode\n              message\n         }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Publishing an Event using EventBus in TypeScript\nDESCRIPTION: This example demonstrates how to publish a custom event using the `publish` method of the `EventBus`. It creates an instance of `SomeEvent` (assuming it's a defined event class extending `VendureEvent`) and passes it to `eventBus.publish()`. The method returns a Promise that resolves when the event has been processed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-bus.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait eventBus.publish(new SomeEvent());\n```\n\n----------------------------------------\n\nTITLE: GraphQL Order Types Definition\nDESCRIPTION: Demonstrates related type definitions for Order and OrderLine entities\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Order {\n  id: ID!\n  orderPlacedAt: DateTime\n  isActive: Boolean!\n  customer: Customer!\n  lines: [OrderLine!]!\n}\n\ntype OrderLine {\n  id: ID!\n  productId: ID!\n  quantity: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Template Loader in TypeScript\nDESCRIPTION: Example showing how to implement a custom TemplateLoader for the Vendure EmailPlugin. The template loader allows customization of how email templates are loaded and rendered based on request context and template variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/content/typescript-api/core-plugins/email-plugin/custom-template-loader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EmailPlugin, TemplateLoader } from '@vendure/email-plugin';\n\nclass MyTemplateLoader implements TemplateLoader {\n     loadTemplate(injector, ctx, { type, templateName, templateVars }){\n         return myCustomTemplateFunction(ctx);\n     }\n}\n\n// In vendure-config.ts:\n...\nEmailPlugin.init({\n    templateLoader: new MyTemplateLoader()\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Using HasPermissionPipe in Angular Templates\nDESCRIPTION: Example of using the HasPermissionPipe in an HTML template to conditionally disable a button based on whether the current user has the 'UpdateCatalog' permission.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/has-permission-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<button [disabled]=\"!('UpdateCatalog' | hasPermission)\">Save Changes</button>\n```\n\n----------------------------------------\n\nTITLE: Adjusting an Existing Order Line - Vendure TypeScript\nDESCRIPTION: Adjusts the quantity and custom field values of an existing OrderLine. Requires context, orderId, orderLineId, quantity, optional customFields, and optional relations. Returns a Promise with an UpdateOrderItemsResult or Order, supporting error states. For batch changes use adjustOrderLines for performance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, orderLineId: ID, quantity: number, customFields?: { [key: string]: any }, relations?: RelationPaths<Order>) => Promise<ErrorResultUnion<UpdateOrderItemsResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: Defining the LanguageCode Enum in GraphQL\nDESCRIPTION: This GraphQL enum defines a list of supported language codes based on ISO 639-1, with optional region or script modifiers (e.g., en_US, zh_Hans). The selection is derived from the Unicode CLDR summary list and includes major world languages and variants for use within the Vendure GraphQL API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nLanguages in the form of a ISO 639-1 language code with optional\nregion or script modifier (e.g. de_AT). The selection available is based\non the [Unicode CLDR summary list](https://unicode-org.github.io/cldr-staging/charts/37/summary/root.html)\nand includes the major spoken languages of the world and any widely-used variants.\n\n\n\"\"\"\nenum LanguageCode {\n\"\"\"Afrikaans\"\"\"\naf\n\"\"\"Akan\"\"\"\nak\n\"\"\"Albanian\"\"\"\nsq\n\"\"\"Amharic\"\"\"\nam\n\"\"\"Arabic\"\"\"\nar\n\"\"\"Armenian\"\"\"\nhy\n\"\"\"Assamese\"\"\"\nas\n\"\"\"Azerbaijani\"\"\"\naz\n\"\"\"Bambara\"\"\"\nbm\n\"\"\"Bangla\"\"\"\nbn\n\"\"\"Basque\"\"\"\neu\n\"\"\"Belarusian\"\"\"\nbe\n\"\"\"Bosnian\"\"\"\nbs\n\"\"\"Breton\"\"\"\nbr\n\"\"\"Bulgarian\"\"\"\nbg\n\"\"\"Burmese\"\"\"\nmy\n\"\"\"Catalan\"\"\"\nca\n\"\"\"Chechen\"\"\"\nce\n\"\"\"Chinese\"\"\"\nzh\n\"\"\"Simplified Chinese\"\"\"\nzh_Hans\n\"\"\"Traditional Chinese\"\"\"\nzh_Hant\n\"\"\"Church Slavic\"\"\"\ncu\n\"\"\"Cornish\"\"\"\nkw\n\"\"\"Corsican\"\"\"\nco\n\"\"\"Croatian\"\"\"\nhr\n\"\"\"Czech\"\"\"\ncs\n\"\"\"Danish\"\"\"\nda\n\"\"\"Dutch\"\"\"\nnl\n\"\"\"Flemish\"\"\"\nnl_BE\n\"\"\"Dzongkha\"\"\"\ndz\n\"\"\"English\"\"\"\nen\n\"\"\"Australian English\"\"\"\nen_AU\n\"\"\"Canadian English\"\"\"\nen_CA\n\"\"\"British English\"\"\"\nen_GB\n\"\"\"American English\"\"\"\nen_US\n\"\"\"Esperanto\"\"\"\neo\n\"\"\"Estonian\"\"\"\net\n\"\"\"Ewe\"\"\"\nee\n\"\"\"Faroese\"\"\"\nfo\n\"\"\"Finnish\"\"\"\nfi\n\"\"\"French\"\"\"\nfr\n\"\"\"Canadian French\"\"\"\nfr_CA\n\"\"\"Swiss French\"\"\"\nfr_CH\n\"\"\"Fulah\"\"\"\nff\n\"\"\"Galician\"\"\"\ngl\n\"\"\"Ganda\"\"\"\nlg\n\"\"\"Georgian\"\"\"\nka\n\"\"\"German\"\"\"\nde\n\"\"\"Austrian German\"\"\"\nde_AT\n\"\"\"Swiss High German\"\"\"\nde_CH\n\"\"\"Greek\"\"\"\nel\n\"\"\"Gujarati\"\"\"\ngu\n\"\"\"Haitian Creole\"\"\"\nht\n\"\"\"Hausa\"\"\"\nha\n\"\"\"Hebrew\"\"\"\nhe\n\"\"\"Hindi\"\"\"\nhi\n\"\"\"Hungarian\"\"\"\nhu\n\"\"\"Icelandic\"\"\"\nis\n\"\"\"Igbo\"\"\"\nig\n\"\"\"Indonesian\"\"\"\nid\n\"\"\"Interlingua\"\"\"\nia\n\"\"\"Irish\"\"\"\nga\n\"\"\"Italian\"\"\"\nit\n\"\"\"Japanese\"\"\"\nja\n\"\"\"Javanese\"\"\"\njv\n\"\"\"Kalaallisut\"\"\"\nkl\n\"\"\"Kannada\"\"\"\nkn\n\"\"\"Kashmiri\"\"\"\nks\n\"\"\"Kazakh\"\"\"\nkk\n\"\"\"Khmer\"\"\"\nkm\n\"\"\"Kikuyu\"\"\"\nki\n\"\"\"Kinyarwanda\"\"\"\nrw\n\"\"\"Korean\"\"\"\nko\n\"\"\"Kurdish\"\"\"\nku\n\"\"\"Kyrgyz\"\"\"\nky\n\"\"\"Lao\"\"\"\nlo\n\"\"\"Latin\"\"\"\nla\n\"\"\"Latvian\"\"\"\nlv\n\"\"\"Lingala\"\"\"\nln\n\"\"\"Lithuanian\"\"\"\nlt\n\"\"\"Luba-Katanga\"\"\"\nlu\n\"\"\"Luxembourgish\"\"\"\nlb\n\"\"\"Macedonian\"\"\"\nmk\n\"\"\"Malagasy\"\"\"\nmg\n\"\"\"Malay\"\"\"\nms\n\"\"\"Malayalam\"\"\"\nml\n\"\"\"Maltese\"\"\"\nmt\n\"\"\"Manx\"\"\"\ngv\n\"\"\"Maori\"\"\"\nmi\n\"\"\"Marathi\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Performing GraphQL Mutations in TypeScript\nDESCRIPTION: Example showing how to execute a GraphQL mutation to update a product's enabled status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-devkit-client.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphQlMutation } from '@vendure/ui-devkit';\n\nconst disableProduct = (id: string) => {\n  return graphQlMutation(`\n    mutation DisableProduct($id: ID!) {\n      updateProduct(input: { id: $id, enabled: false }) {\n        id\n        enabled\n      }\n    }`, { id })\n    .then(data => data.updateProduct)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderListOptions Input Type in GraphQL\nDESCRIPTION: This input type provides options for querying a list of orders, including pagination, sorting, and filtering parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_111\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderListOptions {\n  \"\"\"Skips the first n results, for use in pagination\"\"\"\n  skip: Int\n\n  \"\"\"Takes n results, for use in pagination\"\"\"\n  take: Int\n\n  \"\"\"Specifies which properties to sort the results by\"\"\"\n  sort: OrderSortParameter\n\n  \"\"\"Allows the results to be filtered\"\"\"\n  filter: OrderFilterParameter\n\n  \"\"\"Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Using useDetailComponentData Hook in React Component\nDESCRIPTION: Demonstrates how to use the useDetailComponentData hook in a custom detail component. The hook provides access to the entity data and detail form, allowing dynamic updates to form fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-detail-component-data.md#2025-04-22_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Card, useDetailComponentData } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function CustomDetailComponent(props: any) {\n    const { entity, detailForm } = useDetailComponentData();\n    const updateName = () => {\n        detailForm.get('name')?.setValue('New name');\n        detailForm.markAsDirty();\n    };\n    return (\n        <Card title={'Custom Detail Component'}>\n            <button className=\"button\" onClick={updateName}>\n                Update name\n            </button>\n            <pre>{JSON.stringify(entity, null, 2)}</pre>\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products with SearchInput in GraphQL\nDESCRIPTION: GraphQL query that uses a consolidated SearchInput object to search for products. This approach provides more flexibility by allowing changes to search parameters without modifying the query structure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery SearchProducts($input: SearchInput!) {\n  // highlight-next-line\n  search(input: $input) {\n    totalItems\n    facetValues {\n      count\n      facetValue {\n        id\n        name\n        facet {\n          id\n          name\n        }\n      }\n    }\n    items {\n      productName\n      slug\n      productAsset {\n        id\n        preview\n      }\n      priceWithTax {\n        ... on SinglePrice {\n          value\n        }\n        ... on PriceRange {\n          min\n          max\n        }\n      }\n      currencyCode\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AuthenticationResult Union\nDESCRIPTION: The AuthenticationResult union handles different outcomes of an authentication attempt. It encompasses success with CurrentUser or errors like InvalidCredentialsError, enabling robust authentication mechanisms.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nunion AuthenticationResult = CurrentUser | InvalidCredentialsError | NotVerifiedError\n```\n\n----------------------------------------\n\nTITLE: Default Order Code Strategy Implementation\nDESCRIPTION: Implementation of the default strategy that generates a random 16-character string of uppercase letters and numbers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-code-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultOrderCodeStrategy implements OrderCodeStrategy {\n    generate(ctx: RequestContext) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Field with a Custom Input Component in TypeScript\nDESCRIPTION: Shows how to use a custom input component in a custom field configuration within the Vendure config file. This example sets up a custom 'rrp' field for ProductVariant entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/register-form-input-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nconst config: VendureConfig = {\n  // ...\n  customFields: {\n    ProductVariant: [\n      {\n        name: 'rrp',\n        type: 'int',\n        ui: { component: 'my-custom-input' },\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Angular Services in React Components with useInjector\nDESCRIPTION: Example of how to use the useInjector hook to access Angular services (like NotificationService) from within React components. The hook takes a service token and returns an instance of the requested service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-injector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInjector } from '@vendure/admin-ui/react';\nimport { NotificationService } from '@vendure/admin-ui/core';\n\nexport const MyComponent = () => {\n    const notificationService = useInjector(NotificationService);\n\n    const handleClick = () => {\n        notificationService.success('Hello world!');\n    };\n    // ...\n    return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin UI Plugin for Route Override in Vendure\nDESCRIPTION: This snippet demonstrates how to configure the AdminUiPlugin to override a built-in route in Vendure. It sets up a custom route for the product detail page.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\nimport * as path from 'path';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            port: 3002,\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [\n                    {\n                        id: 'my-plugin',\n                        extensionPath: path.join(__dirname, 'plugins/my-plugin/ui'),\n                        routes: [\n                            {\n                                // Setting the prefix to '' means that we won't add the\n                                // default `/extensions/` prefix to the route\n                                prefix: '',\n                                // This part matches the built-in route path for the \n                                // \"catalog\" module\n                                route: 'catalog',\n                                filePath: 'routes.ts',\n                            },\n                        ],\n                    },\n                ],\n            }),\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Role Object Type in GraphQL\nDESCRIPTION: GraphQL object type that represents a user role with associated permissions and channels. Includes fields for code, description, and assigned permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_164\n\nLANGUAGE: graphql\nCODE:\n```\ntype Role {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  code: String!\n  description: String!\n  permissions: [Permission!]!\n  channels: [Channel!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringCustomFieldConfig GraphQL Object Type\nDESCRIPTION: GraphQL type definition for StringCustomFieldConfig which configures string-type custom fields with various options like validation patterns, length constraints, and UI configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_130\n\nLANGUAGE: graphql\nCODE:\n```\ntype StringCustomFieldConfig {\nname: String!\ntype: String!\nlist: Boolean!\nlength: Int\nlabel: [LocalizedString!]\ndescription: [LocalizedString!]\nreadonly: Boolean\ninternal: Boolean\nnullable: Boolean\nrequiresPermission: [Permission!]\npattern: String\noptions: [StringFieldOption!]\nui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ChannelService Class in TypeScript\nDESCRIPTION: Defines the ChannelService class that provides methods for managing Channel entities including CRUD operations, channel assignments, and utility functions for channel-aware entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/channel-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, globalSettingsService: GlobalSettingsService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, listQueryBuilder: ListQueryBuilder)\n    assignToCurrentChannel(entity: T, ctx: RequestContext) => Promise<T>;\n    assignToChannels(ctx: RequestContext, entityType: Type<T>, entityId: ID, channelIds: ID[]) => Promise<T>;\n    removeFromChannels(ctx: RequestContext, entityType: Type<T>, entityId: ID, channelIds: ID[]) => Promise<T | undefined>;\n    getChannelFromToken(token: string) => Promise<Channel>;\n    getChannelFromToken(ctx: RequestContext, token: string) => Promise<Channel>;\n    getChannelFromToken(ctxOrToken: RequestContext | string, token?: string) => Promise<Channel>;\n    getDefaultChannel(ctx?: RequestContext) => Promise<Channel>;\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Channel>, relations?: RelationPaths<Channel>) => Promise<PaginatedList<Channel>>;\n    findOne(ctx: RequestContext, id: ID) => Promise<Channel | undefined>;\n    create(ctx: RequestContext, input: CreateChannelInput) => Promise<ErrorResultUnion<CreateChannelResult, Channel>>;\n    update(ctx: RequestContext, input: UpdateChannelInput) => Promise<ErrorResultUnion<UpdateChannelResult, Channel>>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    isChannelAware(entity: VendureEntity) => entity is VendureEntity & ChannelAware;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service with ListQueryBuilder in TypeScript\nDESCRIPTION: This snippet shows how to implement a service class that uses the ListQueryBuilder to construct and execute paginated list queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/list-query-builder.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class BlogPostService {\n  constructor(private listQueryBuilder: ListQueryBuilder) {}\n\n  findAll(ctx: RequestContext, options?: ListQueryOptions<BlogPost>) {\n    return this.listQueryBuilder\n      .build(BlogPost, options)\n      .getManyAndCount()\n      .then(async ([items, totalItems]) => {\n        return { items, totalItems };\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RichTextFormInputComponent in TypeScript\nDESCRIPTION: Defines a component for rich text input fields using the RichTextEditorComponent. It implements the FormInputComponent interface and is used for 'text' type fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass RichTextFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'rich-text-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'rich-text-form-input'>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobQueueOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the configuration options for Vendure's job queue system. Includes options for queue strategy, buffer storage, active queue selection, and queue name prefixing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-queue-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JobQueueOptions {\n    jobQueueStrategy?: JobQueueStrategy;\n    jobBufferStorageStrategy?: JobBufferStorageStrategy;\n    activeQueues?: string[];\n    prefix?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in Vendure - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to configure a TestServer and SimpleGraphQLClient using the Vendure test environment setup. It requires the '@vendure/testing' package and a configuration object of type 'Required<VendureConfig>'. The function initializes the server and clients, which are essential for running end-to-end tests. The expected output is a TestEnvironment object. Key parameters include the server options and client authentication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/create-test-environment.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTestEnvironment, testConfig } from '@vendure/testing';\\n\\ndescribe('some feature to test', () => {\\n\\n  const { server, adminClient, shopClient } = createTestEnvironment(testConfig);\\n\\n  beforeAll(async () => {\\n    await server.init({\\n        // ... server options\\n    });\\n    await adminClient.asSuperAdmin();\\n  });\\n\\n  afterAll(async () => {\\n      await server.destroy();\\n  });\\n\\n  // ... end-to-end tests here\\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createTestEnvironment(config: Required<VendureConfig>): TestEnvironment\n```\n\n----------------------------------------\n\nTITLE: Form Input Implementation in Angular Templates\nDESCRIPTION: Examples of form inputs using Angular form fields, including text inputs, selects, checkboxes, and rich text editor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"form-grid\">\n    <vdr-form-field label=\"Page title\">\n        <input type=\"text\" />\n    </vdr-form-field>\n    <vdr-form-field label=\"Select input\">\n        <select>\n            <option>Option 1</option>\n            <option>Option 2</option>\n        </select>\n    </vdr-form-field>\n    <vdr-form-field label=\"Checkbox input\">\n        <input type=\"checkbox\" />\n    </vdr-form-field>\n    <vdr-form-field label=\"Textarea input\">\n        <textarea></textarea>\n    </vdr-form-field>\n    <vdr-form-field label=\"With tooltip\" tooltip=\"This is a tooltip for the form input\">\n        <input type=\"text\" />\n    </vdr-form-field>\n    <vdr-form-field label=\"Invalid with error\">\n        <input type=\"text\" [formControl]=\"invalidFormControl\" />\n    </vdr-form-field>\n    <vdr-rich-text-editor\n        class=\"form-grid-span\"\n        label=\"Description\"\n    ></vdr-rich-text-editor>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Set Order Shipping Address Mutation\nDESCRIPTION: GraphQL mutation for setting the shipping address for an active order. Takes a CreateAddressInput and returns an ActiveOrderResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setOrderShippingAddress(input: CreateAddressInput!): ActiveOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: FulfillOrderInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type required for fulfilling orders in Vendure. Includes required fields for order lines and the fulfillment handler operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_91\n\nLANGUAGE: graphql\nCODE:\n```\ninput FulfillOrderInput {\nlines: [OrderLineInput!]!\nhandler: ConfigurableOperationInput!\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Product Variant IDs in TypeScript\nDESCRIPTION: Gets the product variant IDs associated with a Collection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetCollectionProductVariantIds(collection: Collection, ctx?: RequestContext): Promise<ID[]>\n```\n\n----------------------------------------\n\nTITLE: Defining Change Channel Event in TypeScript\nDESCRIPTION: The `ChangeChannelEvent` class is invoked when a ChannelAware entity is assigned or removed from a channel. Extending `VendureEvent`, this class records context, entity, channel IDs, and action type. Key dependencies include ChannelAware and VendureEntity interfaces, facilitating channel assignment management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChangeChannelEvent<T extends ChannelAware & VendureEntity> extends VendureEvent {\n    constructor(ctx: RequestContext, entity: T, channelIds: ID[], type: 'assigned' | 'removed', entityType?: Type<T>)\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Order Line Quantity Mutation\nDESCRIPTION: GraphQL mutation for updating the quantity of an existing order line.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AdjustOrderLine($orderLineId: ID! $quantity: Int!){\n  adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tabbed Custom Fields in Vendure (TypeScript)\nDESCRIPTION: This snippet shows how to create tabbed custom fields in Vendure. It demonstrates grouping fields under a 'Shipping' tab and includes examples of rich text and JSON editor inputs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            { name: 'additionalInfo', type: 'text', ui: {component: 'rich-text-form-input'} },\n            { name: 'specs', type: 'text', ui: {component: 'json-editor-form-input'} },\n            { name: 'width', type: 'int', ui: {tab: 'Shipping'} },\n            { name: 'height', type: 'int', ui: {tab: 'Shipping'} },\n            { name: 'depth', type: 'int', ui: {tab: 'Shipping'} },\n            { name: 'weight', type: 'int', ui: {tab: 'Shipping'} },\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Eligible Shipping Methods for Draft Order - GraphQL SDL - GraphQL\nDESCRIPTION: Provides the 'eligibleShippingMethodsForDraftOrder' query, returning possible ShippingMethodQuote objects for a draft order. Accepts a required orderId and returns a non-nullable array of quotes. Designed to suggest shipping options at checkout for draft orders. Requires a draft order ID and appropriate query permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturns a list of eligible shipping methods for the draft Order\n\"\"\"\ntype Query {\n  eligibleShippingMethodsForDraftOrder(orderId: ID!): [ShippingMethodQuote!]!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for running Vendure server, worker, and PostgreSQL database containers together.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  server:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - 3000:3000\n    command: [\"npm\", \"run\", \"start:server\"]\n    volumes:\n      - /usr/src/app\n    environment:\n      DB_HOST: database\n      DB_PORT: 5432\n      DB_NAME: vendure\n      DB_USERNAME: postgres\n      DB_PASSWORD: password\n  worker:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: [\"npm\", \"run\", \"start:worker\"]\n    volumes:\n      - /usr/src/app\n    environment:\n      DB_HOST: database\n      DB_PORT: 5432\n      DB_NAME: vendure\n      DB_USERNAME: postgres\n      DB_PASSWORD: password\n  database:\n    image: postgres\n    volumes:\n      - /var/lib/postgresql/data\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: vendure\n```\n\n----------------------------------------\n\nTITLE: ProductPriceApplicator Class Signature (TypeScript)\nDESCRIPTION: This code snippet shows the class signature of ProductPriceApplicator, including its constructor and the applyChannelPriceAndTax method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/product-price-applicator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductPriceApplicator {\n    constructor(configService: ConfigService, taxRateService: TaxRateService, zoneService: ZoneService, requestCache: RequestContextCacheService)\n    applyChannelPriceAndTax(variant: ProductVariant, ctx: RequestContext, order?: Order, throwIfNoPriceFound:  = false) => Promise<ProductVariant>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation with Variables in Vendure\nDESCRIPTION: This snippet demonstrates how to define a GraphQL mutation operation using variables for dynamic input. It updates a customer's email address using the 'updateCustomerEmail' mutation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateCustomerEmail($input: UpdateCustomerEmailInput!) {\n  updateCustomerEmail(input: $input) {\n    id\n    name\n    email\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ForbiddenError Class in TypeScript\nDESCRIPTION: Constructs a ForbiddenError which extends I18nError to manage access restriction errors. It accepts a log level, defaulting to 'Warn', to signal attempts to access privileged resources.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass ForbiddenError extends I18nError {\n    constructor(logLevel: LogLevel = LogLevel.Warn)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderTestingService Class in TypeScript\nDESCRIPTION: This code snippet defines the OrderTestingService class with its constructor and two methods for testing shipping methods. It is used to create temporary mock Orders for testing purposes in the Vendure e-commerce platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-testing-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderTestingService {\n    constructor(connection: TransactionalConnection, orderCalculator: OrderCalculator, shippingCalculator: ShippingCalculator, configArgService: ConfigArgService, configService: ConfigService, productPriceApplicator: ProductPriceApplicator, translator: TranslatorService)\n    testShippingMethod(ctx: RequestContext, input: TestShippingMethodInput) => Promise<TestShippingMethodResult>;\n    testEligibleShippingMethods(ctx: RequestContext, input: TestEligibleShippingMethodsInput) => Promise<ShippingMethodQuote[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying current authenticated user info in GraphQL\nDESCRIPTION: This query returns information about the currently authenticated user. The output is a CurrentUser object containing the user's details. This function does not take parameters and is used to customize user experiences.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns information about the current authenticated User\n\"\"\"\ntype Query {\n    me: CurrentUser\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the createProvince Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createProvince` mutation, used to create a new Province. It accepts a non-nullable `CreateProvinceInput` object containing the province details and returns the newly created `Province` object, ensuring it's not null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new Province\n\"\"\"\ntype Mutation {\n  createProvince(input: CreateProvinceInput!): Province!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Top-Level Collections with GraphQL\nDESCRIPTION: GraphQL query to fetch top-level collections including their ID, slug, name, and featured asset information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/navigation-menu/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetTopLevelCollections {\n  collections(options: { topLevelOnly: true }) {\n    items {\n      id\n      slug\n      name\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminUiPlugin Basic Branding\nDESCRIPTION: Basic configuration of AdminUiPlugin to set brand name and control visibility of Vendure branding and version information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/admin-ui-theming-branding/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            // ...\n            adminUiConfig:{\n                brand: 'My Store',\n                hideVendureBranding: false,\n                hideVersion: false,\n            }\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Active Order Fragment in GraphQL\nDESCRIPTION: GraphQL fragment defining common Order fields used across multiple operations including order details, lines, and product information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nfragment ActiveOrder on Order {\n  id\n  code\n  state\n  couponCodes\n  subTotalWithTax\n  shippingWithTax\n  totalWithTax\n  totalQuantity\n  lines {\n    id\n    productVariant {\n      id\n      name\n    }\n    featuredAsset {\n      id\n      preview\n    }\n    quantity\n    linePriceWithTax\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Method - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to set the selected shipping method for the order using the shipping method ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetShippingMethod($id: [ID!]!) {\n    setOrderShippingMethod(shippingMethodId: $id) {\n        ...ActiveOrder\n        ...on ErrorResult {\n            errorCode\n            message\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetListOptions Input Type in GraphQL\nDESCRIPTION: This input type specifies options for querying asset lists in the Vendure admin API. It supports filtering by tags, pagination controls (skip and take), sorting parameters, and filtering conditions with logical operators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssetListOptions {\n  tags: [String!]\n  tagsOperator: LogicalOperator\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: AssetSortParameter\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: AssetFilterParameter\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema Extensions\nDESCRIPTION: GraphQL schema definitions for wishlist functionality including types, queries, and mutations\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const shopApiExtensions = gql`\n    type WishlistItem implements Node {\n        id: ID!\n        createdAt: DateTime!\n        updatedAt: DateTime!\n        productVariant: ProductVariant!\n        productVariantId: ID!\n    }\n\n    extend type Query {\n        activeCustomerWishlist: [WishlistItem!]!\n    }\n\n    extend type Mutation {\n        addToWishlist(productVariantId: ID!): [WishlistItem!]!\n        removeFromWishlist(itemId: ID!): [WishlistItem!]!\n    }\n`;\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethod Type in GraphQL\nDESCRIPTION: Defines the `PaymentMethod` GraphQL object type. This represents a configured payment method in Vendure, including its unique `id`, timestamps (`createdAt`, `updatedAt`), display `name`, unique `code`, `description`, `enabled` status, eligibility `checker`, payment `handler`, associated `translations`, and any `customFields`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_84\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethod {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  code: String!\n  description: String!\n  enabled: Boolean!\n  checker: ConfigurableOperation\n  handler: ConfigurableOperation!\n  translations: [PaymentMethodTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details Using orderByCode GraphQL Query\nDESCRIPTION: This GraphQL query fetches order details using the orderByCode query with an order code parameter. It's used to display an order confirmation page after checkout completion when the activeOrder query would return null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetOrderByCode($code: String!) {\n  orderByCode(code: $code) {\n    ...Order\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerGroup GraphQL Type in Vendure Shop API\nDESCRIPTION: Defines the `CustomerGroup` type used for organizing customers. It includes the group's ID, name, timestamps, a paginated list of customers belonging to the group (accepting `CustomerListOptions`), and any custom fields associated with the group.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ntype CustomerGroup {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  customers(options: CustomerListOptions): CustomerList!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionOrderAction Class in TypeScript\nDESCRIPTION: The PromotionOrderAction class extends PromotionAction and is used for promotions that apply to the Order as a whole. It requires a config object that defines how the discount is calculated for the entire order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionOrderAction<T extends ConfigArgs = ConfigArgs, U extends PromotionCondition[] = []> extends PromotionAction<T, U> {\n    constructor(config: PromotionOrderActionConfig<T, U>)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Wishlist Plugin in Vendure\nDESCRIPTION: Plugin registration code that imports required modules and registers the WishlistService as a provider\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { WishlistService } from './services/wishlist.service';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    // highlight-next-line\n    providers: [WishlistService],\n    entities: [WishlistItem],\n    configuration: config => {\n        // ...\n    },\n})\nexport class WishlistPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Flat-Rate Shipping Calculator in TypeScript\nDESCRIPTION: Example of creating a flat-rate shipping calculator with configurable rate and tax settings. The calculator defines input arguments for rate and tax, and implements the calculation logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-calculator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst flatRateCalculator = new ShippingCalculator({\n  code: 'flat-rate-calculator',\n  description: [{ languageCode: LanguageCode.en, value: 'Default Flat-Rate Shipping Calculator' }],\n  args: {\n    rate: {\n      type: 'int',\n      ui: { component: 'currency-form-input' },\n    },\n    taxRate: {\n      type: 'int',\n      ui: { component: 'number-form-input', suffix: '%' },\n    },\n  },\n  calculate: (ctx, order, args) => {\n    return {\n      price: args.rate,\n      taxRate: args.taxRate,\n      priceIncludesTax: ctx.channel.pricesIncludeTax,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: AuthService Class Definition in TypeScript\nDESCRIPTION: Defines the AuthService class with methods for handling authentication, session management, and password verification. The service depends on TransactionalConnection, ConfigService, SessionService, and EventBus.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/auth-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AuthService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, sessionService: SessionService, eventBus: EventBus)\n    authenticate(ctx: RequestContext, apiType: ApiType, authenticationMethod: string, authenticationData: any) => Promise<AuthenticatedSession | InvalidCredentialsError | NotVerifiedError>;\n    createAuthenticatedSessionForUser(ctx: RequestContext, user: User, authenticationStrategyName: string) => Promise<AuthenticatedSession | NotVerifiedError>;\n    verifyUserPassword(ctx: RequestContext, userId: ID, password: string) => Promise<boolean | InvalidCredentialsError | ShopInvalidCredentialsError>;\n    destroyAuthenticatedSession(ctx: RequestContext, sessionToken: string) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Order Shipping Method Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to set the shipping method for a draft order. Takes order ID and shipping method ID parameters, returning a SetOrderShippingMethodResult object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_96\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setDraftOrderShippingMethod(orderId: ID!, shippingMethodId: ID!): SetOrderShippingMethodResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer - GraphQL Mutation - GraphQL\nDESCRIPTION: Defines updateCustomer mutation for modifying a customer's details, such as names or email address. Takes an UpdateCustomerInput object and returns an UpdateCustomerResult, reporting changes and possible validation errors. This operation often triggers side effects, such as notifications or audit logging.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_112\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Customer\n\"\"\"\ntype Mutation {\nupdateCustomer(input: UpdateCustomerInput!): UpdateCustomerResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Update Customer Password Mutation\nDESCRIPTION: GraphQL mutation for updating the password of the active customer. Requires both current and new password.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateCustomerPassword(currentPassword: String!, newPassword: String!): UpdateCustomerPasswordResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining React Route with Page Title and Breadcrumb - TypeScript\nDESCRIPTION: This React snippet demonstrates configuring a route for a Vendure UI plugin page using registerReactRouteComponent. It sets both the title and breadcrumb properties for the Test component. Required dependencies are @vendure/admin-ui/react for the routing function and the Test component itself. Configured parameters directly impact page display. Input: export of routing definition; output: registered UI route.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { registerReactRouteComponent } from '@vendure/admin-ui/react';\\nimport { Test } from './components/Test';\\n\\nexport default [\\n    registerReactRouteComponent({\\n        component: Test,\\n        // highlight-next-line\\n        title: 'Test',\\n        breadcrumb: 'Test',\\n    }),\\n];\n```\n\n----------------------------------------\n\nTITLE: Defining OrderFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type defines various filter parameters for querying orders in the Vendure admin API. It includes fields for filtering by customer details, order properties, and financial information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_109\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderFilterParameter {\n  customerLastName: StringOperators\n  transactionId: StringOperators\n  aggregateOrderId: IDOperators\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  type: StringOperators\n  orderPlacedAt: DateOperators\n  code: StringOperators\n  state: StringOperators\n  active: BooleanOperators\n  totalQuantity: NumberOperators\n  subTotal: NumberOperators\n  subTotalWithTax: NumberOperators\n  currencyCode: StringOperators\n  shipping: NumberOperators\n  shippingWithTax: NumberOperators\n  total: NumberOperators\n  totalWithTax: NumberOperators\n  _and: [OrderFilterParameter!]\n  _or: [OrderFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Using RequestContextCacheService for Request-Scoped Caching\nDESCRIPTION: Demonstrates using the RequestContextCacheService to cache data for the duration of a single request. This example caches the active tax zone to avoid redundant calculations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst activeTaxZone = await this.requestContextCache.get(\n    ctx,\n    'activeTaxZone',\n    () => taxZoneStrategy\n        .determineTaxZone(ctx, zones, ctx.channel, order),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Session Cache Strategy in TypeScript\nDESCRIPTION: This TypeScript snippet defines the DefaultSessionCacheStrategy class which implements the SessionCacheStrategy interface. It utilizes a CacheService to manage session data storage based on the configuration provided in an optional constructor parameter. Key methods provided include init (for initialization), set (for storing session data), get (for retrieving sessions), delete (for removing specific sessions), and clear (for clearing all session data). The dependencies include SessionCacheStrategy, CacheService, and Injector.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/default-session-cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultSessionCacheStrategy implements SessionCacheStrategy {\n    protected cacheService: CacheService;\n    constructor(options?: {\n            ttl?: number;\n            cachePrefix?: string;\n        })\n    init(injector: Injector) => ;\n    set(session: CachedSession) => Promise<void>;\n    get(sessionToken: string) => Promise<CachedSession | undefined>;\n    delete(sessionToken: string) => void | Promise<void>;\n    clear() => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Address for an Order - Vendure TypeScript\nDESCRIPTION: Assigns a billing address to the Order, requiring context, orderId, and a valid CreateAddressInput object. Returns a Promise with the updated Order. Validates billing data using system-provided types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, input: CreateAddressInput) => Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Notice\nDESCRIPTION: Markdown section highlighting breaking changes in the release\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_NEXT.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### BREAKING CHANGE\n\n* In the Admin UI, the \"stock locations\" list and detail views\nhave been moved from the \"catalog\" module to the \"settings\" module. Also, the\nmenu item & breadcrumb for \"inventory\" has been renamed to \"products\".\n```\n\n----------------------------------------\n\nTITLE: Initializing BraintreePlugin with Vaulting Enabled (TypeScript)\nDESCRIPTION: A concise example of initializing the BraintreePlugin with the `storeCustomersInBraintree` flag set to true, which enables secure storage of customer payment methods (vaulting) in Braintree. Requires valid Braintree environment configuration and prior installation of dependencies. Useful for quickly enabling repeat-customer payment flows.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nBraintreePlugin.init({\n  environment: Environment.Sandbox,\n  storeCustomersInBraintree: true,\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOption GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductOption, including its properties such as id, createdAt, updatedAt, languageCode, code, name, groupId, group, translations, and customFields. It represents an option that can be applied to a product variant.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_90\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductOption {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  name: String!\n  groupId: ID!\n  group: ProductOptionGroup!\n  translations: [ProductOptionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Address for an Order - Vendure TypeScript\nDESCRIPTION: Sets or updates the shipping address of an Order using CreateAddressInput, taking context and orderId as inputs. Returns a Promise with the updated Order entity. Prerequisites include properly structured address data matching CreateAddressInput type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, input: CreateAddressInput) => Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Querying with Extended SearchInput Fields in GraphQL\nDESCRIPTION: Provides an example of a GraphQL `search` query utilizing custom fields (`longitude`, `latitude`, `radius`) that were previously added to the `SearchInput` type via the `extendSearchInputType` configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  search(input: {\n    longitude: 101.7117,\n    latitude: 3.1584,\n    radius: 50.00\n  }) {\n    items {\n      productName\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking Event Handler\nDESCRIPTION: Demonstrates implementing a blocking event handler for critical operations that must complete before the publishing code continues.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { EventBus, PluginCommonModule, VendurePlugin, CustomerEvent } from '@vendure/core';\nimport { CustomerSyncService } from './services/customer-sync.service';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n})\nexport class MyPluginPlugin implements OnModuleInit {\n    constructor(\n        private eventBus: EventBus,\n        private customerSyncService: CustomerSyncService,\n    ) {}\n\n    onModuleInit() {\n        this.eventBus.registerBlockingEventHandler({\n            event: CustomerEvent,\n            id: 'sync-customer-details-handler',\n            handler: async event => {\n                await this.customerSyncService.triggerCustomerSyncJob(event);\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Coupon Code Mutation in GraphQL for Vendure\nDESCRIPTION: Removes the specified coupon code from the active Order. Requires the coupon code as a parameter and returns the updated Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeCouponCode(couponCode: String!): Order\n}\n```\n\n----------------------------------------\n\nTITLE: Registering React Route Component in Vendure Admin UI\nDESCRIPTION: This function registers a React component to be used as a route component in the Vendure admin UI. It takes options of type RegisterReactRouteComponentOptions and returns a Route object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-route-component.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction registerReactRouteComponent<Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field>(options: RegisterReactRouteComponentOptions<Entity, T, Field, R>): Route\n```\n\n----------------------------------------\n\nTITLE: Defining CurrencyCode Enum in GraphQL\nDESCRIPTION: This GraphQL snippet defines an enum called CurrencyCode, which represents various currencies using their ISO 4217 codes. Each currency code is an enum member, alongside its description as a comment. This setup is essential for applications needing standardized currency representations, such as financial applications, and requires a GraphQL server that supports enum types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nISO 4217 currency code\n\"\"\"\nenum CurrencyCode { \n  \"\"\"United Arab Emirates dirham\"\"\" \n  AED\n  \"\"\"Afghan afghani\"\"\" \n  AFN\n  \"\"\"Albanian lek\"\"\" \n  ALL\n  \"\"\"Armenian dram\"\"\" \n  AMD\n  \"\"\"Netherlands Antillean guilder\"\"\" \n  ANG\n  \"\"\"Angolan kwanza\"\"\" \n  AOA\n  \"\"\"Argentine peso\"\"\" \n  ARS\n  \"\"\"Australian dollar\"\"\" \n  AUD\n  \"\"\"Aruban florin\"\"\" \n  AWG\n  \"\"\"Azerbaijani manat\"\"\" \n  AZN\n  \"\"\"Bosnia and Herzegovina convertible mark\"\"\" \n  BAM\n  \"\"\"Barbados dollar\"\"\" \n  BBD\n  \"\"\"Bangladeshi taka\"\"\" \n  BDT\n  \"\"\"Bulgarian lev\"\"\" \n  BGN\n  \"\"\"Bahraini dinar\"\"\" \n  BHD\n  \"\"\"Burundian franc\"\"\" \n  BIF\n  \"\"\"Bermudian dollar\"\"\" \n  BMD\n  \"\"\"Brunei dollar\"\"\" \n  BND\n  \"\"\"Boliviano\"\"\" \n  BOB\n  \"\"\"Brazilian real\"\"\" \n  BRL\n  \"\"\"Bahamian dollar\"\"\" \n  BSD\n  \"\"\"Bhutanese ngultrum\"\"\" \n  BTN\n  \"\"\"Botswana pula\"\"\" \n  BWP\n  \"\"\"Belarusian ruble\"\"\" \n  BYN\n  \"\"\"Belize dollar\"\"\" \n  BZD\n  \"\"\"Canadian dollar\"\"\" \n  CAD\n  \"\"\"Congolese franc\"\"\" \n  CDF\n  \"\"\"Swiss franc\"\"\" \n  CHF\n  \"\"\"Chilean peso\"\"\" \n  CLP\n  \"\"\"Renminbi (Chinese) yuan\"\"\" \n  CNY\n  \"\"\"Colombian peso\"\"\" \n  COP\n  \"\"\"Costa Rican colon\"\"\" \n  CRC\n  \"\"\"Cuban convertible peso\"\"\" \n  CUC\n  \"\"\"Cuban peso\"\"\" \n  CUP\n  \"\"\"Cape Verde escudo\"\"\" \n  CVE\n  \"\"\"Czech koruna\"\"\" \n  CZK\n  \"\"\"Djiboutian franc\"\"\" \n  DJF\n  \"\"\"Danish krone\"\"\" \n  DKK\n  \"\"\"Dominican peso\"\"\" \n  DOP\n  \"\"\"Algerian dinar\"\"\" \n  DZD\n  \"\"\"Egyptian pound\"\"\" \n  EGP\n  \"\"\"Eritrean nakfa\"\"\" \n  ERN\n  \"\"\"Ethiopian birr\"\"\" \n  ETB\n  \"\"\"Euro\"\"\" \n  EUR\n  \"\"\"Fiji dollar\"\"\" \n  FJD\n  \"\"\"Falkland Islands pound\"\"\" \n  FKP\n  \"\"\"Pound sterling\"\"\" \n  GBP\n  \"\"\"Georgian lari\"\"\" \n  GEL\n  \"\"\"Ghanaian cedi\"\"\" \n  GHS\n  \"\"\"Gibraltar pound\"\"\" \n  GIP\n  \"\"\"Gambian dalasi\"\"\" \n  GMD\n  \"\"\"Guinean franc\"\"\" \n  GNF\n  \"\"\"Guatemalan quetzal\"\"\" \n  GTQ\n  \"\"\"Guyanese dollar\"\"\" \n  GYD\n  \"\"\"Hong Kong dollar\"\"\" \n  HKD\n  \"\"\"Honduran lempira\"\"\" \n  HNL\n  \"\"\"Croatian kuna\"\"\" \n  HRK\n  \"\"\"Haitian gourde\"\"\" \n  HTG\n  \"\"\"Hungarian forint\"\"\" \n  HUF\n  \"\"\"Indonesian rupiah\"\"\" \n  IDR\n  \"\"\"Israeli new shekel\"\"\" \n  ILS\n  \"\"\"Indian rupee\"\"\" \n  INR\n  \"\"\"Iraqi dinar\"\"\" \n  IQD\n  \"\"\"Iranian rial\"\"\" \n  IRR\n  \"\"\"Icelandic króna\"\"\" \n  ISK\n  \"\"\"Jamaican dollar\"\"\" \n  JMD\n  \"\"\"Jordanian dinar\"\"\" \n  JOD\n  \"\"\"Japanese yen\"\"\" \n  JPY\n  \"\"\"Kenyan shilling\"\"\" \n  KES\n  \"\"\"Kyrgyzstani som\"\"\" \n  KGS\n  \"\"\"Cambodian riel\"\"\" \n  KHR\n  \"\"\"Comoro franc\"\"\" \n  KMF\n  \"\"\"North Korean won\"\"\" \n  KPW\n  \"\"\"South Korean won\"\"\" \n  KRW\n  \"\"\"Kuwaiti dinar\"\"\" \n  KWD\n  \"\"\"Cayman Islands dollar\"\"\" \n  KYD\n  \"\"\"Kazakhstani tenge\"\"\" \n  KZT\n  \"\"\"Lao kip\"\"\" \n  LAK\n  \"\"\"Lebanese pound\"\"\" \n  LBP\n  \"\"\"Sri Lankan rupee\"\"\" \n  LKR\n  \"\"\"Liberian dollar\"\"\" \n  LRD\n  \"\"\"Lesotho loti\"\"\" \n  LSL\n  \"\"\"Libyan dinar\"\"\" \n  LYD\n  \"\"\"Moroccan dirham\"\"\" \n  MAD\n  \"\"\"Moldovan leu\"\"\" \n  MDL\n  \"\"\"Malagasy ariary\"\"\" \n  MGA\n  \"\"\"Macedonian denar\"\"\" \n  MKD\n  \"\"\"Myanmar kyat\"\"\" \n  \n```\n\n----------------------------------------\n\nTITLE: Configuring Vendure Bootstrap with DevTools\nDESCRIPTION: Server bootstrap configuration that adds the DevTools plugin and enables the required snapshot option. This setup is required for Vendure v2.2 or later.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/nest-devtools/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap } from '@vendure/core';\nimport { config } from './vendure-config';\n\nconst configWithDevtools = {\n    ...config,\n    plugins: [\n        ...config.plugins,\n        DevtoolsPlugin,\n    ],\n};\n\nbootstrap(configWithDevtools, {\n    nestApplicationOptions: { snapshot: true } \n})\n    .catch(err => {\n        console.log(err);\n        process.exit(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionShippingActionConfig Interface in TypeScript\nDESCRIPTION: Interface that extends PromotionActionConfig to define configuration for shipping-level promotion actions. Includes an execute function that calculates shipping discounts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionShippingActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {\n    execute: ExecutePromotionShippingActionFn<T, U>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetServerPlugin with PresetOnlyStrategy in TypeScript\nDESCRIPTION: Shows how to use the PresetOnlyStrategy to limit image transformations to a set of predefined presets, formats, and quality levels for security and performance reasons.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetServerPlugin, PresetOnlyStrategy } from '@vendure/core';\n\n// ...\n\nAssetServerPlugin.init({\n  //...\n  imageTransformStrategy: new PresetOnlyStrategy({\n    defaultPreset: 'thumbnail',\n    permittedQuality: [0, 50, 75, 85, 95],\n    permittedFormats: ['jpg', 'webp', 'avif'],\n    allowFocalPoint: false,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Shipping Methods for Mixed Digital and Physical Orders in GraphQL\nDESCRIPTION: This GraphQL mutation sets multiple shipping methods for an order containing both digital and physical products. It specifies both digital download and standard shipping method IDs and returns detailed order information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetShippingMethod {\n  setOrderShippingMethod(\n      // highlight-next-line\n      shippingMethodId: [\"3\", \"1\"]\n    ) {\n    ... on Order {\n      id\n      code\n      total\n      lines {\n        id\n        quantity\n        linePriceWithTax\n        productVariant {\n          name\n          sku\n          customFields {\n            isDigital\n          }\n        }\n      }\n      shippingLines {\n        id\n        shippingMethod {\n          name\n        }\n        priceWithTax\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cron Job Configuration for Scheduled Task\nDESCRIPTION: Cron job configuration to run the scheduled task script at midnight every day.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/scheduled-tasks/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n0 0 * * * node /path/to/scheduled-tasks.js\n```\n\n----------------------------------------\n\nTITLE: User GraphQL Type Definition\nDESCRIPTION: Defines the User type representing administrative users in the Vendure system. Includes properties for authentication, roles, and timestamps.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_220\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nidentifier: String!\nverified: Boolean!\nroles: [Role!]!\nlastLogin: DateTime\nauthenticationMethods: [AuthenticationMethod!]!\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobQueue Class in TypeScript\nDESCRIPTION: This snippet defines the JobQueue class with its properties and methods. It is used to process jobs added to the queue using a JobQueueStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass JobQueue<Data extends JobData<Data> = object> {\n    name: string\n    started: boolean\n    constructor(options: CreateQueueOptions<Data>, jobQueueStrategy: JobQueueStrategy, jobBufferService: JobBufferService)\n    add(data: Data, options?: JobOptions<Data>) => Promise<SubscribableJob<Data>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Entity with Money Field in Vendure\nDESCRIPTION: Example of defining a new database entity with a monetary value field using the @Money() decorator, which ensures proper storage according to the configured MoneyStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial } from '@vendure/common/lib/shared-types';\nimport { VendureEntity, Order, EntityId, Money, CurrencyCode, ID } from '@vendure/core';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nclass Quote extends VendureEntity {\n    constructor(input?: DeepPartial<Quote>) {\n        super(input);\n    }\n\n    @ManyToOne(type => Order)\n    order: Order;\n\n    @EntityId()\n    orderId: ID;\n\n    @Column()\n    text: string;\n\n    // highlight-start\n    @Money()\n    value: number;\n    // highlight-end\n\n    // Whenever you store a monetary value, it's a good idea to also\n    // explicitly store the currency code too. This makes it possible\n    // to support multiple currencies and correctly format the amount\n    // when displaying the value.\n    @Column('varchar')\n    currencyCode: CurrencyCode;\n\n    @Column()\n    approved: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationResult GraphQL Union Type in Vendure\nDESCRIPTION: Defines the AuthenticationResult GraphQL union type which represents the result of an authentication attempt. It can either be a successful CurrentUser or an InvalidCredentialsError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nunion AuthenticationResult =\n  CurrentUser | InvalidCredentialsError\n```\n\n----------------------------------------\n\nTITLE: Add Payment to Order Mutation in GraphQL\nDESCRIPTION: This mutation is used to add a payment to an order. It takes a 'PaymentInput' as input, which contains information pertinent to the payment to be added. The result of the mutation is 'AddPaymentToOrderResult', confirming the addition of the payment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { addPaymentToOrder(input: PaymentInput!): AddPaymentToOrderResult! }\n```\n\n----------------------------------------\n\nTITLE: Implementing PromotionLineAction Class in TypeScript\nDESCRIPTION: Class that implements line-level promotion actions. Includes an example of creating a percentage discount on order lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionLineAction<T extends ConfigArgs = ConfigArgs, U extends Array<PromotionCondition<any>> = []> extends PromotionAction<T, U> {\n    constructor(config: PromotionLineActionConfig<T, U>)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RoleChangeEvent Class in TypeScript\nDESCRIPTION: This code defines the RoleChangeEvent class, introduced in version 1.4, which is fired whenever a Role is assigned or removed from a user. It extends VendureEvent and includes a constructor with context, admin, roleIds, and type parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nclass RoleChangeEvent extends VendureEvent {\n    constructor(ctx: RequestContext, admin: Administrator, roleIds: ID[], type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProvinceService Signature in Vendure TypeScript API\nDESCRIPTION: This TypeScript class signature summarizes the ProvinceService API, including method signatures for listing, retrieving, creating, updating, and deleting Province entities. Dependencies include TransactionalConnection, ListQueryBuilder, TranslatableSaver, EventBus, and TranslatorService. Each method expects specific parameter types (such as RequestContext, input DTOs, IDs, and relation paths), and returns typed Promises, supporting strong type safety and asynchronous patterns for service-layer operations. The code is auto-generated and assumes existence of supporting Vendure modules and types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/province-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProvinceService {\n    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, translator: TranslatorService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Province>, relations: RelationPaths<Province> = []) => Promise<PaginatedList<Translated<Province>>>;\n    findOne(ctx: RequestContext, provinceId: ID, relations: RelationPaths<Province> = []) => Promise<Translated<Province> | undefined>;\n    create(ctx: RequestContext, input: CreateProvinceInput) => Promise<Translated<Province>>;\n    update(ctx: RequestContext, input: UpdateProvinceInput) => Promise<Translated<Province>>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UuidIdStrategy Class in TypeScript\nDESCRIPTION: Implementation of an ID strategy that uses string UUIDs as primary keys for all entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-id-strategy.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass UuidIdStrategy implements EntityIdStrategy<'uuid'> {\n    readonly primaryKeyType = 'uuid';\n    decodeId(id: string) => string;\n    encodeId(primaryKey: string) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from an Order - Vendure TypeScript\nDESCRIPTION: Removes a specific OrderLine from an Order by orderId and orderLineId, taking order context and returning a Promise of ErrorResultUnion for RemoveOrderItemsResult or the Order entity. Use removeItemsFromOrder for removing multiple lines at once.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, orderLineId: ID) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: Removing Coupon Codes from Draft Orders in GraphQL\nDESCRIPTION: Specifies a mutation to remove a given coupon code from a draft Order, taking orderId and couponCode as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_78\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeCouponCodeFromDraftOrder(orderId: ID!, couponCode: String!): Order\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Customer Email Verification Token in TypeScript\nDESCRIPTION: Refreshes an expired or stale email address verification token. It generates a new token and publishes an AccountRegistrationEvent to deliver it, allowing the user to complete the verification process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrefreshVerificationToken(ctx: RequestContext, emailAddress: string) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Fetching Eligible Shipping Methods - GraphQL Query\nDESCRIPTION: GraphQL query to retrieve available shipping methods with their prices and descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetShippingMethods {\n  eligibleShippingMethods {\n    id\n    price\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Avatar Plugin Configuration\nDESCRIPTION: Vendure plugin configuration that adds an avatar custom field to the Customer entity\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/uploading-files/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Asset, LanguageCode, PluginCommonModule, VendurePlugin } from '@vendure/core';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    configure: config => {\n        config.customFields.Customer.push({\n            name: 'avatar',\n            type: 'relation',\n            label: [{languageCode: LanguageCode.en, value: 'Customer avatar'}],\n            entity: Asset,\n            nullable: true,\n        });\n        return config;\n    },\n})\nexport class CustomerAvatarPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query Resolver in TypeScript\nDESCRIPTION: Example of using @Query decorator from @nestjs/graphql to create a GraphQL query resolver method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Query, Resolver } from '@nestjs/graphql';\n\n@Resolver()\nexport class WishlistResolver {\n\n    @Query()\n    wishlist() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling UI Extensions for Vendure Admin UI in TypeScript\nDESCRIPTION: This function compiles the Admin UI app with the specified extensions. It takes UiExtensionCompilerOptions as input and returns either AdminUiAppConfig or AdminUiAppDevModeConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/compile-ui-extensions.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction compileUiExtensions(options: UiExtensionCompilerOptions): AdminUiAppConfig | AdminUiAppDevModeConfig\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionList GraphQL Object Type\nDESCRIPTION: Defines the CollectionList object type which contains an array of Collection items and the total number of items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionList {\n  items: [Collection!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodTranslation GraphQL Type\nDESCRIPTION: Defines a GraphQL type for translations of shipping method information in different languages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_184\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethodTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Method Mutation\nDESCRIPTION: GraphQL mutation for setting the chosen shipping method for an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetShippingMethod($shippingMethodId: ID!){\n  setOrderShippingMethod(shippingMethodId: $shippingMethodId) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionList GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for paginated collection lists in Vendure. This type represents a paginated list of collections, including the collection items and total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionList {\n  items: [Collection!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Using useLazyQuery Hook in React for GraphQL Queries in Vendure Admin UI\nDESCRIPTION: This example demonstrates how to use the useLazyQuery hook to lazily execute a GraphQL query that fetches product data. It shows how to define the query, type the response, trigger the query on a button click, and handle loading and error states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-lazy-query.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useLazyQuery } from '@vendure/admin-ui/react';\nimport { gql } from 'graphql-tag';\n\nconst GET_PRODUCT = gql`\n   query GetProduct($id: ID!) {\n     product(id: $id) {\n       id\n       name\n       description\n     }\n   }`;\ntype ProductResponse = {\n    product: {\n        name: string\n        description: string\n    }\n}\n\nexport const MyComponent = () => {\n    const [getProduct, { data, loading, error }] = useLazyQuery<ProductResponse>(GET_PRODUCT, { refetchOnChannelChange: true });\n\n   const handleClick = () => {\n        getProduct({\n             id: '1',\n        }).then(result => {\n            // do something with the result\n        });\n    };\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error! { error }</div>;\n\n    return (\n    <div>\n        <button onClick={handleClick}>Get product</button>\n        {data && (\n             <div>\n                 <h1>{data.product.name}</h1>\n                 <p>{data.product.description}</p>\n             </div>)}\n    </div>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver for Paginated Lists in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a resolver function for a paginated list query using the BlogPostService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/list-query-builder.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver()\nexport class BlogPostResolver\n  constructor(private blogPostService: BlogPostService) {}\n\n  @Query()\n  async blogPosts(\n    @Ctx() ctx: RequestContext,\n    @Args() args: any,\n  ): Promise<PaginatedList<BlogPost>> {\n    return this.blogPostService.findAll(ctx, args.options || undefined);\n  }\n```\n\n----------------------------------------\n\nTITLE: DefaultOrderPlacedStrategy Class Implementation in TypeScript\nDESCRIPTION: The default OrderPlacedStrategy implementation that determines when an order should be set as 'placed'. It triggers this state when an order transitions from 'ArrangingPayment' to either 'PaymentAuthorized' or 'PaymentSettled'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-order-placed-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultOrderPlacedStrategy implements OrderPlacedStrategy {\n    shouldSetAsPlaced(ctx: RequestContext, fromState: OrderState, toState: OrderState, order: Order) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Collection - GraphQL Mutation - GraphQL\nDESCRIPTION: Exposes the updateCollection mutation for modifying properties of an existing product collection. Takes an UpdateCollectionInput object and returns the altered Collection entity. This is commonly used to adjust category structures, filters, or visibility in the storefront catalog.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_110\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Collection\n\"\"\"\ntype Mutation {\nupdateCollection(input: UpdateCollectionInput!): Collection!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Products with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for bulk deleting multiple products. Accepts an array of product IDs to delete and returns an array of DeletionResponse objects with results for each deletion operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_55\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple Products\n\"\"\"\ntype Mutation {\n  deleteProducts(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logger in e2e Tests with TypeScript\nDESCRIPTION: Demonstrates setting up and using the TestingLogger in an end-to-end test environment using the Vendure testing framework and Jest. The example configures a test environment, initializes the TestingLogger with a Jest mock function, and asserts that an error log method was called.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/testing-logger.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// e2e test example\nimport { createTestEnvironment, TestingLogger } from '@vendure/testing';\n\nconst testingLogger = new TestingLogger(() => jest.fn());\n\nconst { server, adminClient, shopClient } = createTestEnvironment({\n  ...testConfig,\n  logger: testingLogger,\n});\n\n// e2e testing setup omitted\n\nit('should log an error', async () => {\n  // The `errorSpy` property exposes the Jest mock function\n  testingLogger.errorSpy.mockClear();\n\n  await doSomethingThatErrors();\n\n  expect(testingLogger.errorSpy).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering React Custom Detail Component\nDESCRIPTION: Shows how to register a custom detail component in React using the registerReactCustomDetailComponent function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-detail-components/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerReactCustomDetailComponent } from '@vendure/admin-ui/react';\nimport { ProductInfo } from './components/ProductInfo';\n\nexport default [\n    registerReactCustomDetailComponent({\n        locationId: 'product-detail',\n        component: ProductInfo,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetServerPlugin Security\nDESCRIPTION: Configuration for hardening the AssetServerPlugin using PresetOnlyStrategy to prevent server overload from image transformation requests.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/security/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AssetServerPlugin, PresetOnlyStrategy } from '@vendure/asset-server-plugin';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    AssetServerPlugin.init({\n      // ...\n      imageTransformStrategy: new PresetOnlyStrategy({\n        defaultPreset: 'large',\n        permittedQuality: [0, 50, 75, 85, 95],\n        permittedFormats: ['jpg', 'webp', 'avif'],\n        allowFocalPoint: false,\n      }),\n    }),\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Banner Query Schema Extension\nDESCRIPTION: Shows how to define a new GraphQL query schema extension for retrieving banner information based on location ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const shopApiExtensions = gql`\n  extend type Query {\n    activeBanner(locationId: String!): String\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Methods with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a payment method. Accepts the ID of the payment method and an optional force parameter to override safety checks. Returns a DeletionResponse object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_49\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a PaymentMethod\n\"\"\"\ntype Mutation {\n  deletePaymentMethod(id: ID!, force: Boolean): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Using flush Method Example in TypeScript\nDESCRIPTION: This example shows how to use the flush method of the JobBufferStorageStrategy to clear jobs from storage and retrieve them. The method returns an object mapping buffer IDs to arrays of Job objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-buffer-storage-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await myJobBufferStrategy.flush(['buffer-1', 'buffer-2']);\n\n// result = {\n//   'buffer-1': [Job, Job, Job, ...],\n//   'buffer-2': [Job, Job, Job, ...],\n// };\n```\n\n----------------------------------------\n\nTITLE: Setting Pattern Validation for String Custom Fields\nDESCRIPTION: Shows how to add regex pattern validation to string-type custom fields for product variants. Example validates GTIN (Global Trade Item Number) format.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'gtin',\n                type: 'string',\n                pattern: '^\\d{8}(?:\\d{4,6})?$',\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Products in Vendure GraphQL API\nDESCRIPTION: Mutation for updating multiple Products in a single operation. Accepts an array of UpdateProductInput objects and returns an array of the updated Product entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_126\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate multiple existing Products\n\"\"\"\ntype Mutation {\n  updateProducts(input: [UpdateProductInput!]!): [Product!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateProductInput in GraphQL\nDESCRIPTION: Input type for updating a product in Vendure. Requires a product ID and allows updating product status, assets, facets, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_190\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateProductInput {\n  id: ID!\n  enabled: Boolean\n  featuredAssetId: ID\n  assetIds: [ID!]\n  facetValueIds: [ID!]\n  translations: [ProductTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the OrderLine Entity with Relations and Pricing Logic (TypeScript)\nDESCRIPTION: This TypeScript class defines the OrderLine entity for the Vendure e-commerce system. It establishes a comprehensive mapping to multiple related entities (such as ProductVariant, Channel, ShippingLine, etc.) and provides fields for price, taxes, adjustments, and custom extensions. Dependencies include TypeORM decorators and various Vendure core interfaces/types. Essential parameters include productVariant, quantity, pricing fields, and relationships, while methods like addAdjustment and clearAdjustments accommodate extensible pricing logic. Inputs/outputs follow TypeORM entity lifecycle; the entity must be managed by a compatible ORM context. Extends VendureEntity, implements HasCustomFields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-line.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderLine extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<OrderLine>)\n    @Index()\n    @ManyToOne(type => Channel, { nullable: true, onDelete: 'SET NULL' })\n    sellerChannel?: Channel;\n    @EntityId({ nullable: true })\n    sellerChannelId?: ID;\n    @Index()\n    @ManyToOne(type => ShippingLine, shippingLine => shippingLine.orderLines, {\n        nullable: true,\n        onDelete: 'SET NULL',\n    })\n    shippingLine?: ShippingLine;\n    @EntityId({ nullable: true })\n    shippingLineId?: ID;\n    @Index()\n    @ManyToOne(type => ProductVariant, productVariant => productVariant.lines, { onDelete: 'CASCADE' })\n    productVariant: ProductVariant;\n    @EntityId()\n    productVariantId: ID;\n    @Index()\n    @ManyToOne(type => TaxCategory)\n    taxCategory: TaxCategory;\n    @EntityId({ nullable: true })\n    taxCategoryId: ID;\n    @Index()\n    @ManyToOne(type => Asset, asset => asset.featuredInVariants, { onDelete: 'SET NULL' })\n    featuredAsset: Asset;\n    @Index()\n    @ManyToOne(type => Order, order => order.lines, { onDelete: 'CASCADE' })\n    order: Order;\n    @OneToMany(type => OrderLineReference, lineRef => lineRef.orderLine)\n    linesReferences: OrderLineReference[];\n    @OneToMany(type => Sale, sale => sale.orderLine)\n    sales: Sale[];\n    @Column()\n    quantity: number;\n    @Column({ default: 0 })\n    orderPlacedQuantity: number;\n    @Money({ nullable: true })\n    initialListPrice: number;\n    @Money()\n    listPrice: number;\n    @Column()\n    listPriceIncludesTax: boolean;\n    @Column('simple-json')\n    adjustments: Adjustment[];\n    @Column('simple-json')\n    taxLines: TaxLine[];\n    @OneToMany(type => Cancellation, cancellation => cancellation.orderLine)\n    cancellations: Cancellation[];\n    @OneToMany(type => Allocation, allocation => allocation.orderLine)\n    allocations: Allocation[];\n    @Column(type => CustomOrderLineFields)\n    customFields: CustomOrderLineFields;\n    unitPrice: number\n    unitPriceWithTax: number\n    unitPriceChangeSinceAdded: number\n    unitPriceWithTaxChangeSinceAdded: number\n    discountedUnitPrice: number\n    discountedUnitPriceWithTax: number\n    proratedUnitPrice: number\n    proratedUnitPriceWithTax: number\n    unitTax: number\n    proratedUnitTax: number\n    taxRate: number\n    linePrice: number\n    linePriceWithTax: number\n    discountedLinePrice: number\n    discountedLinePriceWithTax: number\n    discounts: Discount[]\n    lineTax: number\n    proratedLinePrice: number\n    proratedLinePriceWithTax: number\n    proratedLineTax: number\n    addAdjustment(adjustment: Adjustment) => ;\n    clearAdjustments(type?: AdjustmentType) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntry Type in GraphQL\nDESCRIPTION: Specifies the structure of a history entry, including properties like visibility, administrator, type, and associated data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_75\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype HistoryEntry {\n  isPublic: Boolean!\n  administrator: Administrator\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  type: HistoryEntryType!\n  data: JSON!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Surcharge from an Order - Vendure TypeScript\nDESCRIPTION: Removes a Surcharge from an Order by providing context, orderId, and surchargeId. Returns a Promise of the updated Order, with removal logic based on the surcharge primary key.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, surchargeId: ID) => Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Defining AdminUiExtension Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AdminUiExtension, which specifies configuration options for extending the Vendure Admin UI with custom Angular modules, routes, translations, and more.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdminUiExtension extends Partial<TranslationExtension>,\n        Partial<StaticAssetExtension>,\n        Partial<GlobalStylesExtension> {\n    id?: string;\n    extensionPath: string;\n    ngModules?: Array<AdminUiExtensionSharedModule | AdminUiExtensionLazyModule>;\n    providers?: string[];\n    routes?: UiExtensionRouteDefinition[];\n    pathAlias?: string;\n    exclude?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stellate Dashboard for Vendure Integration\nDESCRIPTION: This TypeScript snippet provides an example Stellate configuration (`stellate.ts`) suitable for a Vendure application. It defines the service name, origin URL, caching rules (`maxAge`, `swr`) for different GraphQL types (Product, Collection, Order, etc.), scopes for session-bound data, key fields for specific types like SearchResult, and disables caching for user-specific data. This configuration is managed within the Stellate dashboard.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"stellate\";\n\nconst config: Config = {\n  config: {\n    name: \"my-vendure-server\",\n    originUrl: \"https://my-vendure-server.com/shop-api\",\n    ignoreOriginCacheControl: true,\n    passThroughOnly: false,\n    scopes: {\n      SESSION_BOUND: \"header:authorization|cookie:session\",\n    },\n    headers: {\n      \"access-control-expose-headers\": \"vendure-auth-token\",\n    },\n    rootTypeNames: {\n      query: \"Query\",\n      mutation: \"Mutation\",\n    },\n    keyFields: {\n      types: {\n        SearchResult: [\"productId\"],\n        SearchResponseCacheIdentifier: [\"collectionSlug\"],\n      },\n    },\n    rules: [\n      {\n        types: [\n          \"Product\",\n          \"Collection\",\n          \"ProductVariant\",\n          \"SearchResponse\",\n        ],\n        maxAge: 900,\n        swr: 900,\n        description: \"Cache Products & Collections\",\n      },\n      {\n        types: [\"Channel\"],\n        maxAge: 9000,\n        swr: 9000,\n        description: \"Cache active channel\",\n      },\n      {\n        types: [\"Order\", \"Customer\", \"User\"],\n        maxAge: 0,\n        swr: 0,\n        description: \"Do not cache user data\",\n      },\n    ],\n  },\n};\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining the ShippingMethodService Class - Vendure - TypeScript\nDESCRIPTION: Declares the ShippingMethodService class in TypeScript, outlining its constructor dependencies and public methods for CRUD operations, channel-related assignments, and configurable operation retrievals. Requires Vendure framework dependencies such as TransactionalConnection, ConfigService, RoleService, and others. Inputs and outputs typically revolve around context objects, entity IDs, and input DTOs, returning Promises with PaginatedLists or entity arrays. The snippet only declares the API, not their implementations; callers should ensure the surrounding Vendure infrastructure is available.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/shipping-method-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShippingMethodService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, roleService: RoleService, listQueryBuilder: ListQueryBuilder, channelService: ChannelService, configArgService: ConfigArgService, translatableSaver: TranslatableSaver, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, translator: TranslatorService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<ShippingMethod>, relations: RelationPaths<ShippingMethod> = []) => Promise<PaginatedList<Translated<ShippingMethod>>>;\n    findOne(ctx: RequestContext, shippingMethodId: ID, includeDeleted:  = false, relations: RelationPaths<ShippingMethod> = []) => Promise<Translated<ShippingMethod> | undefined>;\n    create(ctx: RequestContext, input: CreateShippingMethodInput) => Promise<Translated<ShippingMethod>>;\n    update(ctx: RequestContext, input: UpdateShippingMethodInput) => Promise<Translated<ShippingMethod>>;\n    softDelete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    assignShippingMethodsToChannel(ctx: RequestContext, input: AssignShippingMethodsToChannelInput) => Promise<Array<Translated<ShippingMethod>>>;\n    removeShippingMethodsFromChannel(ctx: RequestContext, input: RemoveShippingMethodsFromChannelInput) => Promise<Array<Translated<ShippingMethod>>>;\n    getShippingEligibilityCheckers(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getShippingCalculators(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getFulfillmentHandlers(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getActiveShippingMethods(ctx: RequestContext) => Promise<ShippingMethod[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Coupon Code Mutation\nDESCRIPTION: GraphQL mutation for removing a previously applied coupon code from the active order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation RemoveCouponCode($couponCode: String!) {\n  removeCouponCode(couponCode: $couponCode) {\n    ...ActiveOrder\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionDefinition GraphQL Type\nDESCRIPTION: GraphQL schema definition for the PermissionDefinition type that describes a permission with its name, description, and whether it can be assigned.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_132\n\nLANGUAGE: graphql\nCODE:\n```\ntype PermissionDefinition {\n  name: String!\n  description: String!\n  assignable: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Password Mutation in GraphQL for Vendure\nDESCRIPTION: Resets a Customer's password using the provided token and new password. The token is typically received via email after requesting a password reset. Returns a ResetPasswordResult object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  resetPassword(token: String!, password: String!): ResetPasswordResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Order Shipping Address Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to set the shipping address for a draft Order. Takes an order ID and address input data, returning the updated Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_95\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setDraftOrderShippingAddress(orderId: ID!, input: CreateAddressInput!): Order!\n}\n```\n\n----------------------------------------\n\nTITLE: BraintreePluginOptions Interface Signature (TypeScript)\nDESCRIPTION: Definition of the `BraintreePluginOptions` interface used to configure the Braintree plugin. Major options include `environment` (for setting the Braintree environment), `storeCustomersInBraintree` (to enable/disable vaulting), and `extractMetadata` (for customizing payment metadata extraction from a transaction). These settings must be provided at plugin initialization and govern core integration behavior.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BraintreePluginOptions {\n    environment?: Environment;\n    storeCustomersInBraintree?: boolean;\n    extractMetadata?: (transaction: Transaction) => PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePaymentErrorResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the error object returned by the CreatePaymentFn when there has been an error. It includes properties for amount, error state, transaction ID, error message, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreatePaymentErrorResult {\n    amount: number;\n    state: 'Error';\n    transactionId?: string;\n    errorMessage: string;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fields Example in Vendure\nDESCRIPTION: Example showing how to configure custom fields for Product and User entities in the Vendure bootstrap configuration. Demonstrates adding string, boolean and localeString field types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrap({\n    // ...\n    customFields: {\n        Product: [\n            { name: 'infoUrl', type: 'string' },\n            { name: 'downloadable', type: 'boolean', defaultValue: false },\n            { name: 'shortName', type: 'localeString' },\n        ],\n        User: [\n            { name: 'socialLoginToken', type: 'string', public: false },\n        ],\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the PurgeRuleConfig Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the configuration object `PurgeRuleConfig` required by the `PurgeRule` class constructor. It specifies the `eventType` (a `VendureEvent`) to listen for, an optional `bufferTime` (in ms, defaulting to 5000) to batch events, and a `handler` function. The handler function receives the buffered events, the `StellateService` instance, and the `Injector`, and is responsible for implementing the Stellate API purge calls.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/purge-rule.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ninterface PurgeRuleConfig<Event extends VendureEvent> {\n    eventType: Type<Event>;\n    bufferTime?: number;\n    handler: (handlerArgs: {\n        events: Event[];\n        stellateService: StellateService;\n        injector: Injector;\n    }) => void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding or Throwing Entities by ID - TypeORM Vendure Helper - TypeScript\nDESCRIPTION: This TypeScript method, `getEntityOrThrow`, retrieves a single entity of a given type by its ID within a request context using Vendure's TypeORM integration. If the entity does not exist, it throws an `EntityNotFoundError` to signal the error explicitly. Dependencies include the TypeORM model layer, Vendure's RequestContext, and entity type definitions. The method signature allows for optional query options, takes a strongly typed entity class, accepts an ID, and is asynchronous, returning the entity or raising an exception if not found.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/transactional-connection.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n(ctx: RequestContext, entityType: Type<T>, id: ID, options: GetEntityOrThrowOptions<T> = {}) => Promise<T>\n```\n\n----------------------------------------\n\nTITLE: Creating a Product Option in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new ProductOption within a ProductOptionGroup. It requires a CreateProductOptionInput object and returns a ProductOption object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createProductOption(input: CreateProductOptionInput!): ProductOption!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Release Stock Movement Entity - TypeScript\nDESCRIPTION: This snippet shows the Release entity, which records stock released when allocated (but not fulfilled) order items are canceled. It inherits from StockMovement, sets type to RELEASE, and relates to OrderLine. Dependencies include StockMovement, OrderLine, and DeepPartial; instantiating with the constructor and partial Release input produces a stock release record for unfulfilled/cancelled orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-movement.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Release extends StockMovement {\n    readonly type = StockMovementType.RELEASE;\n    constructor(input: DeepPartial<Release>)\n    @ManyToOne(type => OrderLine)\n    orderLine: OrderLine;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Stripe Plugin Configuration\nDESCRIPTION: Migration changes for the Stripe plugin to support channel-aware configuration, removing API key and webhook signing secret from initialization.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nStripePlugin.init({\n-  apiKey: process.env.YOUR_STRIPE_SECRET_KEY,\n-  webhookSigningSecret: process.env.YOUR_STRIPE_WEBHOOK_SIGNING_SECRET,\n  storeCustomersInStripe: true,\n}),\n```\n\n----------------------------------------\n\nTITLE: Defining the ShippingOptions Interface in Vendure (TypeScript)\nDESCRIPTION: This TypeScript interface defines the structure for configuring shipping-related options in Vendure. It includes optional properties for specifying `ShippingEligibilityChecker`s, `ShippingCalculator`s, a `ShippingLineAssignmentStrategy`, custom `FulfillmentProcess`es (using either `customFulfillmentProcess` or the newer `process` property), and `FulfillmentHandler`s. These properties allow developers to customize various aspects of the shipping and fulfillment lifecycle within their Vendure application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-options.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface ShippingOptions {\n    shippingEligibilityCheckers?: Array<ShippingEligibilityChecker<any>>;\n    shippingCalculators?: Array<ShippingCalculator<any>>;\n    shippingLineAssignmentStrategy?: ShippingLineAssignmentStrategy;\n    customFulfillmentProcess?: Array<FulfillmentProcess<any>>;\n    process?: Array<FulfillmentProcess<any>>;\n    fulfillmentHandlers?: Array<FulfillmentHandler<any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RequestContextService Class in TypeScript\nDESCRIPTION: This snippet defines the RequestContextService class with two methods: create and fromRequest. The create method allows creating a RequestContext based on provided configuration, while fromRequest creates a RequestContext from an Express request object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/request-context-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RequestContextService {\n    create(config: {\n        req?: Request;\n        apiType: ApiType;\n        channelOrToken?: Channel | string;\n        languageCode?: LanguageCode;\n        currencyCode?: CurrencyCode;\n        user?: User;\n        activeOrderId?: ID;\n    }) => Promise<RequestContext>;\n    fromRequest(req: Request, info?: GraphQLResolveInfo, requiredPermissions?: Permission[], session?: CachedSession) => Promise<RequestContext>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Order States in TypeScript\nDESCRIPTION: Shows how to properly declare custom order states using TypeScript declaration merging and ambient modules for type safety.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CustomOrderStates } from '@vendure/core';\n\ndeclare module '@vendure/core' {\n  interface CustomOrderStates {\n    ValidatingCustomer: never;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Countries List - GraphQL SDL - GraphQL\nDESCRIPTION: Provides the 'countries' query, which accepts optional CountryListOptions and returns a CountryList. Allows fetching details of multiple country records with support for pagination and filtering. Useful for address or shipping management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  countries(options: CountryListOptions): CountryList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerAddressEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a customer Address is added, updated or deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerAddressEvent extends VendureEntityEvent<Address, CustomerAddressInputTypes> {\n    constructor(ctx: RequestContext, entity: Address, type: 'created' | 'updated' | 'deleted', input?: CustomerAddressInputTypes)\n    address: Address\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a VendureAsset Component for Optimized Image Display\nDESCRIPTION: React/TSX component for displaying Vendure product images with optimal formats using the picture element. Supports multiple formats (AVIF, WebP, JPEG) and different size presets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ninterface VendureAssetProps {\n    preview: string;\n    preset: 'tiny' | 'thumb' | 'small' | 'medium' | 'large';\n    alt: string;\n}\n\nexport function VendureAsset({ preview, preset, alt }: VendureAssetProps) {\n    return (\n        <picture>\n            <source type=\"image/avif\" srcSet={preview + `?preset=${preset}&format=avif`} />\n            <source type=\"image/webp\" srcSet={preview + `?preset=${preset}&format=webp`} />\n            <img src={preview + `?preset=${preset}&format=jpg`} alt={alt} />\n        </picture>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragment in a Mutation Operation\nDESCRIPTION: This mutation operation shows how to use the CustomerFields fragment when updating a customer's email address.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdateCustomerEmail($input: UpdateCustomerEmailInput!) {\n  updateCustomerEmail(input: $input) {\n    ...CustomerFields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOrderItemsResult Union in GraphQL\nDESCRIPTION: This union type represents possible outcomes when updating order items, including successful order update, modification errors, limit errors, quantity errors, stock errors, and interceptor errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_148\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion UpdateOrderItemsResult =\n    Order | OrderModificationError | OrderLimitError | NegativeQuantityError | InsufficientStockError | OrderInterceptorError\n```\n\n----------------------------------------\n\nTITLE: Using Entity Observable in ActionBarContext\nDESCRIPTION: Example showing how to use the entity$ observable to conditionally enable/disable a dropdown menu item based on an order's state.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddActionBarDropdownMenuItem({\n    id: 'print-invoice',\n    locationId: 'order-detail',\n    label: 'Print Invoice',\n    icon: 'printer',\n    buttonState: context => {\n        return context.entity$.pipe(\n            map((order) => {\n                return order?.state === 'PaymentSettled'\n                    ? { disabled: false, visible: true }\n                    : { disabled: true, visible: true };\n            }),\n        );\n    },\n    requiresPermission: ['UpdateOrder'],\n})\n```\n\n----------------------------------------\n\nTITLE: Resetting Customer Password Using Token in TypeScript\nDESCRIPTION: Resets a customer's password using a valid token obtained from the `requestPasswordReset` process. The method updates the customer's password to the new one provided, handling potential errors like invalid or expired tokens.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nresetPassword(ctx: RequestContext, passwordResetToken: string, password: string) => Promise<User | PasswordResetTokenExpiredError | PasswordResetTokenInvalidError | PasswordValidationError>\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteAssetsInput Input Type in GraphQL\nDESCRIPTION: Specifies input for deleting multiple assets. Similar to DeleteAssetInput but accepts an array of assetIds for bulk deletion operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_79\n\nLANGUAGE: graphql\nCODE:\n```\ninput DeleteAssetsInput {\n  assetIds: [ID!]!\n  force: Boolean\n  deleteFromAllChannels: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterReactRouteComponentOptions Type Definition in TypeScript\nDESCRIPTION: This type definition extends RegisterRouteComponentOptions to configure React-based route components, adding React-specific properties like props. It's designed for entities with an ID field and optional updatedAt field, and works with GraphQL document nodes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-route-component-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RegisterReactRouteComponentOptions<Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field> = RegisterRouteComponentOptions<ElementType, Entity, T, Field, R> & {\n    props?: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SystemOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the SystemOptions interface, which includes optional properties for configuring health checks, error handlers, and cache strategy in a Vendure e-commerce application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/system-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SystemOptions {\n    healthChecks?: HealthCheckStrategy[];\n    errorHandlers?: ErrorHandlerStrategy[];\n    cacheStrategy?: CacheStrategy;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number List Filtering Operators - GraphQL - GraphQL\nDESCRIPTION: Input type NumberListOperators provides filtering where number fields must match values in a given list. The inList parameter is a non-nullable Float; useful for queries operating on sets of numeric values. Used as part of filter input for list fields like IDs but for numerical data types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of Number fields\n\"\"\"\ninput NumberListOperators {\n  inList: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Active Administrator - GraphQL SDL - GraphQL\nDESCRIPTION: Defines the 'activeAdministrator' query on the root Query type, which returns the current Administrator object for the active session. This query requires an authenticated session with administrator privileges and returns an Administrator object or null. No parameters are required, and the response includes administrator details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  activeAdministrator: Administrator\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the VendureEvent Base Class in TypeScript\nDESCRIPTION: This snippet shows the TypeScript definition of the `VendureEvent` class. It serves as the base class for all custom events in the Vendure framework's EventBus system. The class includes a `createdAt` property automatically set to the event creation time upon instantiation via its constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/vendure-event.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass VendureEvent {\n    public readonly createdAt: Date;\n    constructor()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethod GraphQL Type\nDESCRIPTION: Defines a GraphQL type for shipping methods available in the system. Includes configuration for shipping calculations, eligibility checking, and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_181\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethod {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  name: String!\n  description: String!\n  fulfillmentHandlerCode: String!\n  checker: ConfigurableOperation!\n  calculator: ConfigurableOperation!\n  translations: [ShippingMethodTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntityNotFoundError Class in TypeScript\nDESCRIPTION: Extends I18nError to report the absence of an expected entity in the database. Initializes with an entity name and ID to signal the non-existence of the entity referenced, facilitating error handling in database operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass EntityNotFoundError extends I18nError {\n    constructor(entityName: keyof typeof coreEntitiesMap | string, id: ID)\n}\n```\n\n----------------------------------------\n\nTITLE: ActiveOrderStrategy Interface Definition\nDESCRIPTION: TypeScript interface definition for the ActiveOrderStrategy, including methods for defining input types, creating active orders, and determining the active order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/active-order-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ActiveOrderStrategy<InputType extends Record<string, any> | void = void> extends InjectableStrategy {\n    readonly name: string;\n    defineInputType?: () => DocumentNode;\n    createActiveOrder?: (ctx: RequestContext, input: InputType) => Promise<Order>;\n    determineActiveOrder(ctx: RequestContext, input: InputType): Promise<Order | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Page\nDESCRIPTION: Imports React components used to render the documentation page. These components are used to display member information, generation information, member descriptions, and a card list of documentation items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeCustomFieldConfig GraphQL Type in Vendure Shop API\nDESCRIPTION: Defines the `DateTimeCustomFieldConfig` type, specifying the configuration options for a custom field of type 'datetime'. It includes standard custom field properties (name, type, label, description, permissions, etc.) and specific attributes for date-time fields like `min`, `max`, and `step`, mirroring HTML's `<input type=\"datetime-local\">` attributes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nExpects the same validation formats as the `<input type=\"datetime-local\">` HTML element.\n\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Additional_attributes\n\"\"\"\ntype DateTimeCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  min: String\n  max: String\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keycloak Authentication in Login Page (JavaScript)\nDESCRIPTION: This snippet shows how to implement Keycloak authentication in a login page using the Keycloak JavaScript adapter. It sends a GraphQL mutation to authenticate the user with Vendure using the Keycloak token.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst vendureLoginButton = document.querySelector('#vendure-login-button');\n\nvendureLoginButton.addEventListener('click', () => {\n  return graphQlQuery(`\n    mutation Authenticate($token: String!) {\n      authenticate(input: {\n        keycloak: {\n          token: $token\n        }\n      }) {\n        ...on CurrentUser { id }\n      }\n    }`,\n    { token: keycloak.token },\n  )\n  .then((result) => {\n      if (result.data?.authenticate.user) {\n          // successfully authenticated - redirect to Vendure Admin UI\n          window.location.replace('http://localhost:3000/admin');\n      }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Administrator by ID - GraphQL SDL - GraphQL\nDESCRIPTION: Provides the 'administrator' query, which takes a required ID parameter and returns the Administrator with that ID. This is used to look up administrator accounts by their unique identifier. If no admin matches the ID, null is returned. Requires proper authentication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  administrator(id: ID!): Administrator\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining StockMovementItem Union Type in GraphQL\nDESCRIPTION: A GraphQL union type that represents different types of stock movements. It includes various stock operations like adjustments, allocations, sales, cancellations, returns, and releases.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_190\n\nLANGUAGE: graphql\nCODE:\n```\nunion StockMovementItem =\n  StockAdjustment | Allocation | Sale | Cancellation | Return | Release\n```\n\n----------------------------------------\n\nTITLE: Defining InspectableJobQueueStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for InspectableJobQueueStrategy that extends JobQueueStrategy. It provides methods for inspecting and managing jobs in a queue, including finding, listing, and canceling jobs as well as removing settled jobs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/inspectable-job-queue-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InspectableJobQueueStrategy extends JobQueueStrategy {\n    findOne(id: ID): Promise<Job | undefined>;\n    findMany(options?: JobListOptions): Promise<PaginatedList<Job>>;\n    findManyById(ids: ID[]): Promise<Job[]>;\n    removeSettledJobs(queueNames?: string[], olderThan?: Date): Promise<number>;\n    cancelJob(jobId: ID): Promise<Job | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: configureDefaultOrderProcess Function Signature\nDESCRIPTION: Function signature for configureDefaultOrderProcess which allows customizing the default OrderProcess by passing configuration options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction configureDefaultOrderProcess(options: DefaultOrderProcessOptions): void\n```\n\n----------------------------------------\n\nTITLE: Function Signature for populate() in Vendure CLI\nDESCRIPTION: The TypeScript function signature for the populate function, showing its parameter types and return value. It accepts a bootstrap function, initial data (as path or object), an optional CSV path, and an optional channel identifier.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/populate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction populate<T extends INestApplicationContext>(bootstrapFn: () => Promise<T | undefined>, initialDataPathOrObject: string | object, productsCsvPath?: string, channelOrToken?: string | import('@vendure/core').Channel): Promise<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Mutation Resolver in TypeScript\nDESCRIPTION: Example of using @Mutation decorator from @nestjs/graphql to create a GraphQL mutation resolver method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver } from '@nestjs/graphql';\n\n@Resolver()\nexport class WishlistResolver {\n\n    @Mutation()\n    addItemToWishlist() {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Methods - GraphQL Query\nDESCRIPTION: GraphQL query to fetch available payment methods with their eligibility status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPaymentMethods {\n  eligiblePaymentMethods {\n    id\n    name\n    code\n    isEligible\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Configuration in Vendure\nDESCRIPTION: TypeScript configuration for defining custom fields on the Customer entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nconst config: VendureConfig = {\n    // ...\n    customFields: {\n        Customer: [\n            { name: 'externalId', type: 'string' },\n            { name: 'avatar', type: 'relation', entity: Asset },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining VerifyCustomerAccountResult Union in GraphQL\nDESCRIPTION: This union type represents possible outcomes when verifying a customer account, including success, token errors, password-related errors, and authentication strategy errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_153\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion VerifyCustomerAccountResult =\n    CurrentUser | VerificationTokenInvalidError | VerificationTokenExpiredError | MissingPasswordError | PasswordValidationError | PasswordAlreadySetError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: This snippet imports custom React components used for rendering the Vendure documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Transitioning Payment State - GraphQL Mutation - GraphQL\nDESCRIPTION: Defines a mutation to alter the state of an existing payment entity. The transitionPaymentToState mutation requires an ID and the destination state as a string, returning a TransitionPaymentToStateResult to indicate success or error. Use is restricted to administrators with proper permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_103\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\ntransitionPaymentToState(id: ID!, state: String!): TransitionPaymentToStateResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products List - Basic Shop API Example\nDESCRIPTION: Basic GraphQL query to fetch a list of products with their IDs and names from the Shop API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  products {\n    totalItems\n    items {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailAddressConflictError Type in GraphQL\nDESCRIPTION: Error type returned when attempting to create a Customer with an email address that's already registered to an existing User.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\ntype EmailAddressConflictError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxZoneStrategy Interface in TypeScript\nDESCRIPTION: This code snippet defines the TaxZoneStrategy interface, which extends InjectableStrategy. It includes a method determineTaxZone for determining the applicable tax zone based on various parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/tax-zone-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TaxZoneStrategy extends InjectableStrategy {\n    determineTaxZone(\n        ctx: RequestContext,\n        zones: Zone[],\n        channel: Channel,\n        order?: Order,\n    ): Zone | Promise<Zone> | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendure Plugin with Extensions\nDESCRIPTION: Shows how to configure a Vendure plugin with schema extensions and resolvers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { ProductVariantEntityResolver } from './api/product-variant-entity.resolver';\nimport { shopApiExtensions } from './api/api-extensions';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    shopApiExtensions: {\n        schema: shopApiExtensions,\n        resolvers: [ProductVariantEntityResolver]\n    }\n})\nexport class DeliveryTimePlugin {}\n```\n\n----------------------------------------\n\nTITLE: Customer Logout Mutation\nDESCRIPTION: GraphQL mutation to end an authenticated customer session.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation LogOut {\n  logout {\n    success\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Event in TypeScript\nDESCRIPTION: The `AssetEvent` class handles events when assets are created, updated, or deleted. Extending `VendureEntityEvent`, it captures context, entity, action type, and optional input types for assets. Dependencies cover `RequestContext`, `Asset`, and `AssetInputTypes`, supporting the management of lifecycle states of assets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass AssetEvent extends VendureEntityEvent<Asset, AssetInputTypes> {\n    constructor(ctx: RequestContext, entity: Asset, type: 'created' | 'updated' | 'deleted', input?: AssetInputTypes)\n    asset: Asset\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Menu Section in Vendure Admin UI\nDESCRIPTION: Demonstrates how to add a new navigation menu section with a custom route using the addNavMenuSection function. The example adds a 'Greeter' section with a custom icon before the settings section.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/nav-menu/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addNavMenuSection } from '@vendure/admin-ui/core';\n\nexport default [\n    addNavMenuSection({\n        id: 'greeter',\n        label: 'My Extensions',\n        items: [{\n            id: 'greeter',\n            label: 'Greeter',\n            routerLink: ['/extensions/greet'],\n            // Icon can be any of https://core.clarity.design/foundation/icons/shapes/\n            icon: 'cursor-hand-open',\n        }],\n    },\n    // Add this section before the \"settings\" section\n    'settings'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining the Region Abstract Class in TypeScript\nDESCRIPTION: This abstract class `Region` serves as a base for geographical administrative units within Vendure, such as countries or provinces. It extends `VendureEntity` and implements `Translatable` and `HasCustomFields`. Key properties include `code`, `type` (RegionType enum), `name` (localized), an optional `parent` Region relationship, `enabled` status, `translations`, and `customFields`. TypeORM decorators define database mappings and relationships.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/region.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass Region extends VendureEntity implements Translatable, HasCustomFields {\n    @Column() code: string;\n    @Column({ nullable: false, type: 'varchar' })\n    readonly type: RegionType;\n    name: LocaleString;\n    @Index()\n    @ManyToOne(type => Region, { nullable: true, onDelete: 'SET NULL' })\n    parent?: Region;\n    @EntityId({ nullable: true })\n    parentId?: ID;\n    @Column() enabled: boolean;\n    @OneToMany(type => RegionTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<Region>>;\n    @Column(type => CustomRegionFields)\n    customFields: CustomRegionFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation with DataService in TypeScript\nDESCRIPTION: Example of how to use the DataService.mutate method to execute a GraphQL mutation. It returns an Observable of the mutation result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/data-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result$ = this.dataService.mutate(gql`\n  mutation MyMutation($Codegen.UpdateEntityInput!) {\n    updateEntity(input: $input) {\n      id\n      name\n    }\n  },\n  { Codegen.updateEntityInput },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy with Options in Vendure\nDESCRIPTION: Demonstrates how to pass configuration options to a custom strategy during initialization in the Vendure config.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { MyStockLocationStrategy } from '../config/my-stock-location-strategy';\n\nexport const config: VendureConfig = {\n    // ...\n    catalogOptions: {\n        stockLocationStrategy: new MyStockLocationStrategy({ maxDistance: 100 }),\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionalConnection Class in TypeScript\nDESCRIPTION: This code snippet defines the TransactionalConnection class with its constructor and various methods for managing database transactions and repositories.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/transactional-connection.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TransactionalConnection {\n    constructor(dataSource: DataSource, transactionWrapper: TransactionWrapper)\n    rawConnection: DataSource\n    getRepository(target: ObjectType<Entity> | EntitySchema<Entity> | string) => Repository<Entity>;\n    getRepository(ctx: RequestContext | undefined, target: ObjectType<Entity> | EntitySchema<Entity> | string, options?: {\n            replicationMode?: ReplicationMode;\n        }) => Repository<Entity>;\n    getRepository(ctxOrTarget: RequestContext | ObjectType<Entity> | EntitySchema<Entity> | string | undefined, maybeTarget?: ObjectType<Entity> | EntitySchema<Entity> | string, options?: {\n            replicationMode?: ReplicationMode;\n        }) => Repository<Entity>;\n    withTransaction(work: (ctx: RequestContext) => Promise<T>) => Promise<T>;\n    withTransaction(ctx: RequestContext, work: (ctx: RequestContext) => Promise<T>) => Promise<T>;\n    withTransaction(ctxOrWork: RequestContext | ((ctx: RequestContext) => Promise<T>), maybeWork?: (ctx: RequestContext) => Promise<T>) => Promise<T>;\n    startTransaction(ctx: RequestContext, isolationLevel?: TransactionIsolationLevel) => ;\n    commitOpenTransaction(ctx: RequestContext) => ;\n    rollBackTransaction(ctx: RequestContext) => ;\n    getEntityOrThrow(ctx: RequestContext, entityType: Type<T>, id: ID, options: GetEntityOrThrowOptions<T> = {}) => Promise<T>;\n    findOneInChannel(ctx: RequestContext, entity: Type<T>, id: ID, channelId: ID, options: FindOneOptions<T> = {}) => ;\n    findByIdsInChannel(ctx: RequestContext, entity: Type<T>, ids: ID[], channelId: ID, options: FindManyOptions<T>) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring HistoryEntry Entity with Decorators in TypeScript\nDESCRIPTION: This TypeScript snippet defines the HistoryEntry class for Vendure, extending VendureEntity and implementing HasCustomFields. It utilizes decorators such as @Index, @ManyToOne, and @Column to configure database schema details and relationships (e.g., a nullable administrator, typed fields, JSON data, and embedded custom fields). Requires TypeORM and Vendure core entities. Inputs are properties mapped directly to database columns. Outputs are instantiated HistoryEntry records persisted via ORM. The class is intended to be subclassed and not used directly, and all properties are central for order or customer history tracking.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/history-entry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HistoryEntry extends VendureEntity implements HasCustomFields {\\n    @Index()\\n    @ManyToOne(type => Administrator)\\n    administrator?: Administrator;\\n    @Column({ nullable: false, type: 'varchar' })\\n    readonly type: HistoryEntryType;\\n    @Column()\\n    isPublic: boolean;\\n    @Column('simple-json')\\n    data: any;\\n    @Column(type => CustomHistoryEntryFields)\\n    customFields: CustomHistoryEntryFields;\\n}\n```\n\n----------------------------------------\n\nTITLE: FastImporterService Class Definition in TypeScript\nDESCRIPTION: The FastImporterService class signature showing the available methods for importing product data efficiently. This service is approximately twice as fast as standard service methods for bulk imports by skipping defensive checks and event publishing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/fast-importer-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FastImporterService {\n    initialize(channel?: Channel) => ;\n    createProduct(input: CreateProductInput) => Promise<ID>;\n    createProductOptionGroup(input: CreateProductOptionGroupInput) => Promise<ID>;\n    createProductOption(input: CreateProductOptionInput) => Promise<ID>;\n    addOptionGroupToProduct(productId: ID, optionGroupId: ID) => ;\n    createProductVariant(input: CreateProductVariantInput) => Promise<ID>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer Type in GraphQL\nDESCRIPTION: Type definition for customer entities including personal information, relationships to other entities like orders and addresses, and custom fields support.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_48\n\nLANGUAGE: graphql\nCODE:\n```\ntype Customer {\n  groups: [CustomerGroup!]!\n  history(options: HistoryEntryListOptions): HistoryEntryList!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  title: String\n  firstName: String!\n  lastName: String!\n  phoneNumber: String\n  emailAddress: String!\n  addresses: [Address!]\n  orders(options: OrderListOptions): OrderList!\n  user: User\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Struct Custom Fields in Vendure\nDESCRIPTION: Example showing how to configure a 'struct' custom field for a Product entity with dimensions (length, width, height) as integer fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'dimensions',\n                type: 'struct',\n                // highlight-start\n                fields: [\n                    { name: 'length', type: 'int' },\n                    { name: 'width', type: 'int' },\n                    { name: 'height', type: 'int' },\n                ],\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Product Review Service Implementation\nDESCRIPTION: Service class implementation using ListQueryBuilder to handle pagination, filtering, and sorting of product reviews.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/paginated-list/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport { ListQueryBuilder, ListQueryOptions, PaginatedList, RequestContext } from '@vendure/core';\n\nimport { ProductReview } from '../entities/product-review.entity';\n\n@Injectable()\nexport class ProductReviewService {\n    constructor(\n        private listQueryBuilder: ListQueryBuilder,\n    ) {}\n\n    findAll(ctx: RequestContext, options?: ListQueryOptions<ProductReview>): Promise<PaginatedList<ProductReview>> {\n        return this.listQueryBuilder\n            .build(ProductReview, options, { relations: ['product'], ctx })\n            .getManyAndCount()\n            .then(([items, totalItems]) => ({ items, totalItems }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Job Priority in BullMQJobQueuePlugin\nDESCRIPTION: This example shows how to set job priorities using the setJobOptions function. It assigns different priorities based on the queue name, with lower numbers indicating higher priority.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  plugins: [\n    BullMQJobQueuePlugin.init({\n      setJobOptions: (queueName, job) => {\n        let priority = 10;\n        switch (queueName) {\n          case 'super-critical-task':\n            priority = 0;\n            break;\n          case 'send-email':\n            priority = 5;\n            break;\n          default:\n            priority = 10;\n        }\n        return { priority };\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Authentication Mutations - GraphQL\nDESCRIPTION: GraphQL mutations for user authentication including login with optional remember me functionality and logout.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_72\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  login(username: String!, password: String!, rememberMe: Boolean): NativeAuthenticationResult!\n  logout: Success!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fulfillment Type in GraphQL\nDESCRIPTION: Describes the structure of a fulfillment entity, including properties like ID, creation date, lines, state, and tracking information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_70\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Fulfillment {\n  nextStates: [String!]!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  lines: [FulfillmentLine!]!\n  summary: [FulfillmentLine!]!\n  state: String!\n  method: String!\n  trackingCode: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Review List Component in Angular\nDESCRIPTION: Angular component implementation extending TypedBaseListComponent with filter and sort configurations for the product reviews list\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-list-views/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { TypedBaseListComponent, SharedModule } from '@vendure/admin-ui/core';\n\nconst getReviewListDocument = graphql(`\n  query GetReviewList($options: ReviewListOptions) {\n    reviews(options: $options) {\n      items {\n        id\n        createdAt\n        updatedAt\n        title\n        rating\n        text\n        authorName\n        productId\n      }\n      totalItems\n    }\n  }\n`);\n\n@Component({\n    selector: 'review-list',\n    templateUrl: './review-list.component.html',\n    styleUrls: ['./review-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class ReviewListComponent extends TypedBaseListComponent<typeof getReviewListDocument, 'reviews'> {\n    readonly filters = this.createFilterCollection()\n        .addIdFilter()\n        .addDateFilters()\n        .addFilter({\n            name: 'title',\n            type: {kind: 'text'},\n            label: 'Title',\n            filterField: 'title',\n        })\n        .addFilter({\n            name: 'rating',\n            type: {kind: 'number'},\n            label: 'Rating',\n            filterField: 'rating',\n        })\n        .addFilter({\n            name: 'authorName',\n            type: {kind: 'text'},\n            label: 'Author',\n            filterField: 'authorName',\n        })\n        .connectToRoute(this.route);\n\n    readonly sorts = this.createSortCollection()\n        .defaultSort('createdAt', 'DESC')\n        .addSort({name: 'createdAt'})\n        .addSort({name: 'updatedAt'})\n        .addSort({name: 'title'})\n        .addSort({name: 'rating'})\n        .addSort({name: 'authorName'})\n        .connectToRoute(this.route);\n\n    constructor() {\n        super();\n        super.configure({\n            document: getReviewListDocument,\n            getItems: data => data.reviews,\n            setVariables: (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        title: {\n                            contains: this.searchTermControl.value,\n                        },\n                        ...this.filters.createFilterInput(),\n                    },\n                    sort: this.sorts.createSortInput(),\n                },\n            }),\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dashboard Widget Provider\nDESCRIPTION: Configuration for registering a custom dashboard widget with title, supported widths, and permission requirements. Implements lazy loading for optimal performance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/dashboard-widgets/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerDashboardWidget } from '@vendure/admin-ui/core';\n\nexport default [\n    registerDashboardWidget('reviews', {\n        title: 'Latest reviews',\n        supportedWidths: [4, 6, 8, 12],\n        requiresPermissions: ['ReadReview'],\n        loadComponent: () =>\n            import('./reviews-widget/reviews-widget.component').then(\n                m => m.ReviewsWidgetComponent,\n            ),\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining StaticAssetExtension Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for StaticAssetExtension, which specifies configuration for adding static assets to the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StaticAssetExtension {\n    staticAssets: StaticAssetDefinition[];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Order Placed Strategy Implementation\nDESCRIPTION: Implements an order placed strategy that determines when an order should be marked as placed based on state transitions\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/payment/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderPlacedStrategy, OrderState, RequestContext } from '@vendure/core';\n\n/**\n * This OrderPlacedStrategy tells Vendure to set the Order as \"placed\"\n * when it transitions to the custom \"ValidatingPayment\" state.\n */\nclass MyOrderPlacedStrategy implements OrderPlacedStrategy {\n    shouldSetAsPlaced(ctx: RequestContext, fromState: OrderState, toState: OrderState): boolean | Promise<boolean> {\n        return fromState === 'ArrangingPayment' && toState === ('ValidatingPayment' as any);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AlertConfig Interface in TypeScript for Vendure Admin UI\nDESCRIPTION: The TypeScript interface definition for the AlertConfig object which is used to configure alerts in the Vendure Admin UI. It specifies the structure and required properties for creating custom alerts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/alerts/alert-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AlertConfig<T = any> {\n    id: string;\n    check: (context: AlertContext) => T | Promise<T> | Observable<T>;\n    recheck?: (context: AlertContext) => Observable<any>;\n    isAlert: (data: T, context: AlertContext) => boolean;\n    action: (data: T, context: AlertContext) => void;\n    label: (\n        data: T,\n        context: AlertContext,\n    ) => { text: string; translationVars?: { [key: string]: string | number } };\n    requiredPermissions?: Permission[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Password Validation Strategy Interface with TypeScript\nDESCRIPTION: This code defines the PasswordValidationStrategy interface, extending the InjectableStrategy. It provides a validate method that checks whether a given password meets the required criteria, with the option to return a boolean or an error message string. This is configured within the VendureConfig using authOptions.passwordValidationStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/password-validation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PasswordValidationStrategy extends InjectableStrategy {\\n    validate(ctx: RequestContext, password: string): Promise<boolean | string> | boolean | string;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdminUiConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the AdminUiConfig interface, which includes properties for configuring various aspects of the Vendure Admin UI, such as API connection settings, authentication methods, language options, and UI customization.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/admin-ui/admin-ui-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdminUiConfig {\n    apiHost: string | 'auto';\n    apiPort: number | 'auto';\n    adminApiPath: string;\n    tokenMethod: 'cookie' | 'bearer';\n    authTokenHeaderKey: string;\n    channelTokenKey: string;\n    defaultLanguage: LanguageCode;\n    defaultLocale?: string;\n    availableLanguages: LanguageCode[];\n    availableLocales: string[];\n    loginUrl?: string;\n    brand?: string;\n    hideVendureBranding?: boolean;\n    hideVersion?: boolean;\n    loginImageUrl?: string;\n    cancellationReasons?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cancellation Stock Movement Entity - TypeScript\nDESCRIPTION: This snippet introduces the Cancellation entity, extending StockMovement, to handle cases where order items from fulfilled orders are canceled. The type property is set to CANCELLATION, and an association with OrderLine is established via ManyToOne. Dependencies are StockMovement, OrderLine, and DeepPartial; the constructor creates an instance from a partial Cancellation input, outputting a record that represents returned or canceled inventory from fulfilled orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-movement.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Cancellation extends StockMovement {\n    readonly type = StockMovementType.CANCELLATION;\n    constructor(input: DeepPartial<Cancellation>)\n    @ManyToOne(type => OrderLine, orderLine => orderLine.cancellations)\n    orderLine: OrderLine;\n}\n```\n\n----------------------------------------\n\nTITLE: BootstrapWorkerOptions Interface Signature - TypeScript\nDESCRIPTION: Defines the BootstrapWorkerOptions interface, used to configure additional aspects of the Vendure worker bootstrap process. Optionally allows specification of Nest application context options and exemption lists for compatibility checks. Intended for extension by advanced users customizing Vendure worker instantiation in TypeScript. Requires relevant type imports for full use.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/worker/bootstrap-worker.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BootstrapWorkerOptions {\n    nestApplicationContextOptions?: NestApplicationContextOptions;\n    ignoreCompatibilityErrorsForPlugins?: Array<DynamicModule | Type<any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Zone Entity Class (TypeScript)\nDESCRIPTION: Defines the `Zone` entity class in TypeScript using TypeORM decorators. It extends `VendureEntity`, implements `HasCustomFields`, and includes properties for the zone's name, member regions (`ManyToMany` with `Region`), custom fields, and relationships (`OneToMany`) with `Channel` (for default zones) and `TaxRate`. This entity is crucial for grouping regions to apply specific shipping and tax rules.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/zone.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass Zone extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<Zone>)\n    @Column() name: string;\n    @ManyToMany(type => Region)\n    @JoinTable()\n    members: Region[];\n    @Column(type => CustomZoneFields)\n    customFields: CustomZoneFields;\n    @OneToMany(type => Channel, country => country.defaultShippingZone)\n    defaultShippingZoneChannels: Channel[];\n    @OneToMany(type => Channel, country => country.defaultTaxZone)\n    defaultTaxZoneChannels: Channel[];\n    @OneToMany(type => TaxRate, taxRate => taxRate.zone)\n    taxRates: TaxRate[];\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PaginatedList Generic Type in TypeScript\nDESCRIPTION: A generic type definition that describes the structure of paginated list responses in Vendure. Used by list queries like products, collections, orders, and customers to return paginated results with items array and total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/paginated-list.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PaginatedList<T> = {\n    items: T[];\n    totalItems: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantPriceCalculationStrategy Interface in TypeScript\nDESCRIPTION: This code snippet defines the ProductVariantPriceCalculationStrategy interface, which extends InjectableStrategy and includes a calculate method for price calculation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/product-variant-price-calculation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProductVariantPriceCalculationStrategy extends InjectableStrategy {\n    calculate(args: ProductVariantPriceCalculationArgs): Promise<PriceCalculationResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Mollie Plugin in VendureConfig (TypeScript)\nDESCRIPTION: Demonstrates how to import and initialize the `MolliePlugin` within the `plugins` array of the `VendureConfig`. Requires setting the `vendureHost` option, which is the public URL of your Vendure instance used for Mollie webhook communication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/mollie-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { MolliePlugin } from '@vendure/payments-plugin/package/mollie';\n\n// ...\n\nplugins: [\n  MolliePlugin.init({ vendureHost: 'https://yourhost.io/' }),\n]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Facet in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Facet. It requires a CreateFacetInput object and returns a Facet object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createFacet(input: CreateFacetInput!): Facet!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Address - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to set the shipping address for the order with complete address details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetOrderShippingAddress($input: CreateAddressInput!) {\n  setOrderShippingAddress(input: $input) {\n    ...ActiveOrder\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"fullName\": \"John Doe\",\n    \"company\": \"ABC Inc.\",\n    \"streetLine1\": \"123 Main St\",\n    \"streetLine2\": \"Apt 4B\",\n    \"city\": \"New York\",\n    \"province\": \"NY\",\n    \"postalCode\": \"10001\",\n    \"countryCode\": \"US\",\n    \"phoneNumber\": \"123-456-7890\",\n    \"defaultShippingAddress\": true,\n    \"defaultBillingAddress\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SentryPlugin in Vendure (TypeScript)\nDESCRIPTION: Shows how to configure the SentryPlugin in a Vendure server by importing it and initializing it with required and optional options such as DSN, includeErrorTestMutation, and enableTracing. The snippet demonstrates adding the plugin to the VendureConfig plugins array, using environment variables for sensitive data. The main dependencies are @vendure/core and @vendure/sentry-plugin, and the DSN value must be provided for Sentry integration to work. Expected input is a configuration object; output is Vendure server startup with Sentry support enabled.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/sentry-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { SentryPlugin } from '@vendure/sentry-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        // ...\n        // highlight-start\n        SentryPlugin.init({\n            dsn: process.env.SENTRY_DSN,\n            // Optional configuration\n            includeErrorTestMutation: true,\n            enableTracing: true,\n            // you can also pass in any of the options from @sentry/node\n            // for instance:\n            tracesSampleRate: 1.0,\n        }),\n        // highlight-end\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Fragment for Customer Fields\nDESCRIPTION: This snippet defines a reusable GraphQL fragment named 'CustomerFields' that includes common fields for the Customer type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nfragment CustomerFields on Customer {\n  id\n  name\n  email\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SettlePaymentResult GraphQL Union Type\nDESCRIPTION: Defines a GraphQL union type that represents the possible results of a payment settlement operation, including successful Payment or various error types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_178\n\nLANGUAGE: graphql\nCODE:\n```\nunion SettlePaymentResult = Payment | SettlePaymentError | PaymentStateTransitionError | OrderStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Session Options Interface in TypeScript\nDESCRIPTION: This TypeScript snippet defines the CookieOptions interface, which specifies configurable options for handling session cookies in Vendure when the authentication token method is set to 'cookie'. It is intended to be passed to Express's cookie-session middleware via Vendure's configuration. The interface includes parameters such as name (string or object to differentiate admin/shop cookies), security settings (secure, httpOnly, signed), domain/path, and expiration times. Inputs are typically part of the Vendure config file; no outputs are directly produced, but these options govern authentication cookie behavior at runtime. Some options have defaults, others are optional, and certain fields are only necessary depending on security requirements and deployment environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/cookie-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CookieOptions {\n    name?: string | { shop: string; admin: string };\n    secret?: string;\n    path?: string;\n    domain?: string;\n    sameSite?: 'strict' | 'lax' | 'none' | boolean;\n    secure?: boolean;\n    secureProxy?: boolean;\n    httpOnly?: boolean;\n    signed?: boolean;\n    overwrite?: boolean;\n    maxAge?: number;\n    expires?: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetListOptions Input Type\nDESCRIPTION: Input type for paginating and filtering facet lists with options for skip, take, sort, filter and filterOperator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_83\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetListOptions {\n  skip: Int\n  take: Int\n  sort: FacetSortParameter\n  filter: FacetFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Vendure Worker with Configuration - TypeScript\nDESCRIPTION: Demonstrates the process for initializing a Vendure worker using a user-provided configuration object. Relies on the '@vendure/core' package and a config file. Uses the bootstrapWorker function, then starts both the job queue and the health check server, handling errors by logging them and terminating the process. Inputs are a config object and optional options; outputs are asynchronous worker startup routines. Intended for TypeScript environments leveraging Vendure and NestJs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/worker/bootstrap-worker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker } from '@vendure/core';\nimport { config } from './vendure-config';\n\nbootstrapWorker(config)\n  .then(worker => worker.startJobQueue())\n  .then(worker => worker.startHealthCheckServer({ port: 3020 }))\n  .catch(err => {\n    console.log(err);\n    process.exit(1);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining DateRange Input Type in GraphQL\nDESCRIPTION: Specifies a date range with start and end dates, both of which are required DateTime fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ninput DateRange {\n  start: DateTime!\n  end: DateTime!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the createTaxCategory Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createTaxCategory` mutation for creating a new Tax Category. It requires a non-nullable `CreateTaxCategoryInput` object as input and returns the newly created `TaxCategory` object, ensuring it is not null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new TaxCategory\n\"\"\"\ntype Mutation {\n  createTaxCategory(input: CreateTaxCategoryInput!): TaxCategory!\n}\n```\n\n----------------------------------------\n\nTITLE: TextStructFieldConfig GraphQL Type Definition\nDESCRIPTION: Defines the configuration schema for structured text fields in Vendure. Similar to TextCustomFieldConfig but with fewer options, focused on structure rather than validation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_210\n\nLANGUAGE: graphql\nCODE:\n```\ntype TextStructFieldConfig {\nname: String!\ntype: String!\nlist: Boolean!\nlabel: [LocalizedString!]\ndescription: [LocalizedString!]\nui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Blocking Event Handler in TypeScript\nDESCRIPTION: This snippet shows how to register a synchronous, blocking event handler using `registerBlockingEventHandler`. The handler listens for `OrderStateTransitionEvent`, is identified by 'my-order-state-transition-handler', and executes an async function when the event occurs. Execution of the code that published the event will pause until this handler completes. This is useful for critical tasks that must succeed before the original operation continues, but should be used cautiously due to potential performance impacts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-bus.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\neventBus.registerBlockingEventHandler({\n  event: OrderStateTransitionEvent,\n  id: 'my-order-state-transition-handler',\n  handler: async (event) => {\n    // perform some synchronous task\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Channel Token in API Requests\nDESCRIPTION: Example showing how to specify a channel when making requests to the Shop API by setting the 'vendure-token' header with the appropriate channel token.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function query(document: string, variables: Record<string, any> = {}) {\n    return fetch('https://localhost:3000/shop-api', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json',\n            // highlight-start\n            'vendure-token': 'uk-channel',\n            // highlight-end\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          query: document,\n          variables,\n        }),\n    })\n      .then((res) => res.json())\n      .catch((err) => console.log(err));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResultSortParameter Input Type in GraphQL\nDESCRIPTION: This input type specifies sorting options for search results, allowing sorting by name or price.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_142\n\nLANGUAGE: graphql\nCODE:\n```\ninput SearchResultSortParameter {\n  name: SortOrder\n  price: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Money Decorator Function Signature in TypeScript\nDESCRIPTION: This code defines the function signature of the Money decorator used to annotate entity fields that store monetary values. It accepts optional MoneyColumnOptions and allows the column type to be defined by the configured MoneyStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/money-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Money(options?: MoneyColumnOptions): void\n```\n\n----------------------------------------\n\nTITLE: Defining FormInputComponent Interface in TypeScript\nDESCRIPTION: This code snippet defines the FormInputComponent interface, which should be implemented by any component used as a custom input in the Vendure admin UI. It includes properties for handling list inputs, read-only states, form control, and configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/form-input-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FormInputComponent<C = InputComponentConfig> {\n    isListInput?: boolean;\n    readonly: boolean;\n    formControl: FormControl;\n    config: C;\n}\n```\n\n----------------------------------------\n\nTITLE: ExecutePromotionItemActionFn Type Definition\nDESCRIPTION: Type definition for the function used by a PromotionItemAction to calculate the discount on the OrderLine for each item. It receives context, orderLine, args, state, and promotion objects and returns a number representing the discount.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecutePromotionItemActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (\n    ctx: RequestContext,\n    orderLine: OrderLine,\n    args: ConfigArgValues<T>,\n    state: ConditionState<U>,\n    promotion: Promotion,\n) => number | Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Transitioning Order State - GraphQL Mutation - GraphQL\nDESCRIPTION: Provides the transitionOrderToState mutation to move an order through its possible workflow states. Takes an order ID and target state as mandatory parameters, and returns a TransitionOrderToStateResult. This mutation enforces rules around permissible order states and applies any needed business validation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_102\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\ntransitionOrderToState(id: ID!, state: String!): TransitionOrderToStateResult\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Refund Object Type in GraphQL\nDESCRIPTION: Defines the Refund GraphQL type representing order refunds with properties for amounts, state, and related refund lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_150\n\nLANGUAGE: graphql\nCODE:\n```\ntype Refund {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  items: Money!\n  shipping: Money!\n  adjustment: Money!\n  total: Money!\n  method: String\n  state: String!\n  transactionId: String\n  reason: String\n  lines: [RefundLine!]!\n  paymentId: ID!\n  metadata: JSON\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ActionBar Dropdown Menu Item with Vendure Admin UI Extension (TypeScript)\nDESCRIPTION: Demonstrates how to use the addActionBarDropdownMenuItem helper from @vendure/admin-ui/core to append a new dropdown menu item to the ActionBar in list or detail views of the Admin UI. Dependencies include the @vendure/admin-ui/core package, and it requires a configuration object specifying id, label, locationId, and routerLink. The input is an object conforming to ActionBarDropdownMenuItem, and it should be included in an exported provider array. This approach enables UI extension without modifying core components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/add-action-bar-dropdown-menu-item.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { addActionBarDropdownMenuItem } from '@vendure/admin-ui/core';\n\nexport default [\n    addActionBarDropdownMenuItem({\n        id: 'print-invoice',\n        label: 'Print Invoice',\n        locationId: 'order-detail',\n        routerLink: ['/extensions/invoicing'],\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: OrderListOptions Input Type for Paginated Order Queries\nDESCRIPTION: Defines the options used for querying order lists with pagination, sorting, and filtering capabilities. This input type allows clients to specify how many results to skip/take and how to sort and filter the returned orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderListOptions {\n\"\"\"\nSkips the first n results, for use in pagination\n\"\"\"\nskip: Int\n\n\"\"\"\nTakes n results, for use in pagination\n\"\"\"\ntake: Int\n\n\"\"\"\nSpecifies which properties to sort the results by\n\"\"\"\nsort: OrderSortParameter\n\n\"\"\"\nAllows the results to be filtered\n\"\"\"\nfilter: OrderFilterParameter\n\n\"\"\"\nSpecifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n\"\"\"\nfilterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StructFieldConfig Union Type in GraphQL\nDESCRIPTION: Defines a GraphQL union type for different field configurations that can be used in structured data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_197\n\nLANGUAGE: graphql\nCODE:\n```\nunion StructFieldConfig =\nStringStructFieldConfig | IntStructFieldConfig | FloatStructFieldConfig | BooleanStructFieldConfig | DateTimeStructFieldConfig | TextStructFieldConfig\n```\n\n----------------------------------------\n\nTITLE: ParsedProductWithVariants Interface Definition in TypeScript\nDESCRIPTION: The main data structure returned after parsing a product import CSV file, containing both product information and its variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedProductWithVariants {\n    product: ParsedProduct;\n    variants: ParsedProductVariant[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetTranslationInput Input Type\nDESCRIPTION: Input type for facet translations with language code, name and custom fields support.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_85\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Promotions for an Order - Vendure TypeScript\nDESCRIPTION: Fetches all Promotion entities that are associated with a particular Order by context and orderId. Returns a Promise resolving to an array of Promotion objects, enabling querying of applied discounts or offers within an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID) => Promise<Promotion[]>\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator\nDESCRIPTION: Configuration setup for GraphQL code generation including schema location, document patterns, and scalar type definitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/codegen/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n  overwrite: true,\n  schema: 'http://localhost:3000/shop-api',\n  documents: 'src/**/*.graphql.ts',\n  generates: {\n    'src/gql/': {\n      preset: 'client',\n      plugins: [],\n      config: {\n        scalars: {\n            Money: 'number',\n        },\n        namingConvention: {\n            enumValues: 'keep',\n        },\n      }\n    },\n  }\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining TagListOptions Input Type in GraphQL\nDESCRIPTION: Input type for configuring Tag listing queries. It includes pagination (skip, take), sorting, and filtering options, with the ability to specify the logical operator for multiple filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_161\n\nLANGUAGE: graphql\nCODE:\n```\ninput TagListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: TagSortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: TagFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Money Values in TypeScript - Vendure Core\nDESCRIPTION: Function signature for rounding monetary values using the configured MoneyStrategy. Takes a numeric value and optional quantity parameter to round according to the platform's money handling rules.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/round-money.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction roundMoney(value: number, quantity:  = 1): number\n```\n\n----------------------------------------\n\nTITLE: Setting Customer for Draft Order Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to assign a customer to a draft order. Takes order ID, customer ID, and optional customer input data, returning a SetCustomerForDraftOrderResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_92\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setCustomerForDraftOrder(orderId: ID!, customerId: ID, input: CreateCustomerInput): SetCustomerForDraftOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategoryFilterParameter Input Type in GraphQL\nDESCRIPTION: Input type for filtering TaxCategory entities. It provides filtering based on id, createdAt, updatedAt, name, and isDefault fields, with support for logical AND/OR operations between filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_163\n\nLANGUAGE: graphql\nCODE:\n```\ninput TaxCategoryFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  name: StringOperators\n  isDefault: BooleanOperators\n  _and: [TaxCategoryFilterParameter!]\n  _or: [TaxCategoryFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to and Filtering Events in a Vendure Plugin (TypeScript)\nDESCRIPTION: This snippet shows how to use the EventBus within a Vendure plugin (`MyPlugin`) that implements `OnApplicationBootstrap`. It injects the `EventBus` and subscribes to `OrderStateTransitionEvent` events during application bootstrap. It uses the RxJS `filter` operator to only act on events where the order state transitions to 'PaymentSettled'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-bus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OnApplicationBootstrap } from '@nestjs/common';\nimport { EventBus, PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { filter } from 'rxjs/operators';\n\n@VendurePlugin({\n    imports: [PluginCommonModule]\n})\nexport class MyPlugin implements OnApplicationBootstrap {\n\n  constructor(private eventBus: EventBus) {}\n\n  async onApplicationBootstrap() {\n\n    this.eventBus\n      .ofType(OrderStateTransitionEvent)\n      .pipe(\n        filter(event => event.toState === 'PaymentSettled'),\n      )\n      .subscribe((event) => {\n        // do some action when this event fires\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PromotionActionConfig Interface Definition\nDESCRIPTION: Interface that defines the configuration options for all types of PromotionAction. It extends ConfigurableOperationDefOptions and adds properties specific to promotions like priorityValue, conditions, and side-effect functions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionActionConfig<T extends ConfigArgs, U extends Array<PromotionCondition<any>> | undefined> extends ConfigurableOperationDefOptions<T> {\n    priorityValue?: number;\n    conditions?: U extends undefined ? undefined : ConditionTuple<Exclude<U, undefined>>;\n    onActivate?: PromotionActionSideEffectFn<T>;\n    onDeactivate?: PromotionActionSideEffectFn<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NativeAuthenticationMethod in TypeScript\nDESCRIPTION: Defines the NativeAuthenticationMethod class for built-in username/password authentication. It extends AuthenticationMethod and includes properties for identifier, passwordHash, and various tokens.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/authentication-method.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass NativeAuthenticationMethod extends AuthenticationMethod {\n    constructor(input?: DeepPartial<NativeAuthenticationMethod>)\n    @Column()\n    identifier: string;\n    @Column({ select: false }) passwordHash: string;\n    @Column({ type: 'varchar', nullable: true })\n    verificationToken: string | null;\n    @Column({ type: 'varchar', nullable: true })\n    passwordResetToken: string | null;\n    @Column({ type: 'varchar', nullable: true })\n    identifierChangeToken: string | null;\n    @Column({ type: 'varchar', nullable: true })\n    pendingIdentifier: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionService Class in TypeScript\nDESCRIPTION: This code snippet defines the CollectionService class, which implements OnModuleInit and provides methods for managing Collection entities. It includes constructor parameters and method signatures for various operations like finding, creating, updating, and deleting collections.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CollectionService implements OnModuleInit {\n    constructor(connection: TransactionalConnection, channelService: ChannelService, assetService: AssetService, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, jobQueueService: JobQueueService, configService: ConfigService, slugValidator: SlugValidator, configArgService: ConfigArgService, customFieldRelationService: CustomFieldRelationService, translator: TranslatorService, roleService: RoleService, requestContextService: RequestContextService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Collection> & { topLevelOnly?: boolean }, relations?: RelationPaths<Collection>) => Promise<PaginatedList<Translated<Collection>>>;\n    findOne(ctx: RequestContext, collectionId: ID, relations?: RelationPaths<Collection>) => Promise<Translated<Collection> | undefined>;\n    findByIds(ctx: RequestContext, ids: ID[], relations?: RelationPaths<Collection>) => Promise<Array<Translated<Collection>>>;\n    findOneBySlug(ctx: RequestContext, slug: string, relations?: RelationPaths<Collection>) => Promise<Translated<Collection> | undefined>;\n    getAvailableFilters(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getParent(ctx: RequestContext, collectionId: ID) => Promise<Collection | undefined>;\n    getChildren(ctx: RequestContext, collectionId: ID) => Promise<Collection[]>;\n    getBreadcrumbs(ctx: RequestContext, collection: Collection) => Promise<Array<{ name: string; id: ID; slug: string }>>;\n    getCollectionsByProductId(ctx: RequestContext, productId: ID, publicOnly: boolean) => Promise<Array<Translated<Collection>>>;\n    getDescendants(ctx: RequestContext, rootId: ID, maxDepth: number = Number.MAX_SAFE_INTEGER) => Promise<Array<Translated<Collection>>>;\n    getAncestors(collectionId: ID) => Promise<Collection[]>;\n    getAncestors(collectionId: ID, ctx: RequestContext) => Promise<Array<Translated<Collection>>>;\n    getAncestors(collectionId: ID, ctx?: RequestContext) => Promise<Array<Translated<Collection> | Collection>>;\n    previewCollectionVariants(ctx: RequestContext, input: PreviewCollectionVariantsInput, options?: ListQueryOptions<ProductVariant>, relations?: RelationPaths<Collection>) => Promise<PaginatedList<ProductVariant>>;\n    create(ctx: RequestContext, input: CreateCollectionInput) => Promise<Translated<Collection>>;\n    update(ctx: RequestContext, input: UpdateCollectionInput) => Promise<Translated<Collection>>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    move(ctx: RequestContext, input: MoveCollectionInput) => Promise<Translated<Collection>>;\n    setApplyAllFiltersOnProductUpdates(applyAllFiltersOnProductUpdates: boolean) => ;\n    triggerApplyFiltersJob(ctx: RequestContext, options?: { collectionIds?: ID[]; applyToChangedVariantsOnly?: boolean }) => ;\n    getCollectionProductVariantIds(collection: Collection, ctx?: RequestContext) => Promise<ID[]>;\n    assignCollectionsToChannel(ctx: RequestContext, input: AssignCollectionsToChannelInput) => Promise<Array<Translated<Collection>>>;\n    removeCollectionsFromChannel(ctx: RequestContext, input: RemoveCollectionsFromChannelInput) => Promise<Array<Translated<Collection>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Event in TypeScript\nDESCRIPTION: The `CollectionEvent` class manages events related to collections being added, updated, or deleted. Extending `VendureEntityEvent`, it oversees context, entity, action type, and optional input types for collections. Dependencies include `RequestContext`, `Collection`, and `CollectionInputTypes`, vital for handling collection lifecycle events.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass CollectionEvent extends VendureEntityEvent<Collection, CollectionInputTypes> {\n    constructor(ctx: RequestContext, entity: Collection, type: 'created' | 'updated' | 'deleted', input?: CollectionInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocaleTextCustomFieldConfig GraphQL Type\nDESCRIPTION: Defines the `LocaleTextCustomFieldConfig` GraphQL type, representing the configuration for a custom field of type 'localeText'. It includes properties like name, type, list status, localization data (label, description), read-only status, internal flag, nullability, required permissions, and UI hints. This type is suitable for longer localized text content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_95\n\nLANGUAGE: graphql\nCODE:\n```\ntype LocaleTextCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relation Custom Fields\nDESCRIPTION: Example of setting up a relation custom field that references another entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Customer: [\n            {\n                name: 'avatar',\n                // highlight-start\n                type: 'relation',\n                entity: Asset,\n                // highlight-end\n            },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining FulfillmentService Class in TypeScript\nDESCRIPTION: This code snippet defines the FulfillmentService class with its constructor and methods for managing Fulfillment entities. It includes methods for creating fulfillments, getting fulfillment lines, transitioning fulfillment states, and determining next valid states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/fulfillment-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass FulfillmentService {\n    constructor(connection: TransactionalConnection, fulfillmentStateMachine: FulfillmentStateMachine, eventBus: EventBus, configService: ConfigService, customFieldRelationService: CustomFieldRelationService)\n    create(ctx: RequestContext, orders: Order[], lines: OrderLineInput[], handler: ConfigurableOperationInput) => Promise<Fulfillment | InvalidFulfillmentHandlerError | CreateFulfillmentError>;\n    getFulfillmentLines(ctx: RequestContext, id: ID) => Promise<FulfillmentLine[]>;\n    getFulfillmentsLinesForOrderLine(ctx: RequestContext, orderLineId: ID, relations: RelationPaths<FulfillmentLine> = []) => Promise<FulfillmentLine[]>;\n    transitionToState(ctx: RequestContext, fulfillmentId: ID, state: FulfillmentState) => Promise<\n        | {\n              fulfillment: Fulfillment;\n              orders: Order[];\n              fromState: FulfillmentState;\n              toState: FulfillmentState;\n          }\n        | FulfillmentStateTransitionError\n    >;\n    getNextStates(fulfillment: Fulfillment) => readonly FulfillmentState[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Collection Filter to Vendure Config\nDESCRIPTION: This code shows how to integrate a custom collection filter into the Vendure configuration by adding it to the collectionFilters array within catalogOptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/collections/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultCollectionFilters, VendureConfig } from '@vendure/core';\nimport { skuCollectionFilter } from './config/sku-collection-filter';\n\nexport const config: VendureConfig = {\n    // ...\n    catalogOptions: {\n        collectionFilters: [\n            ...defaultCollectionFilters,\n            // highlight-next-line\n            skuCollectionFilter\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RelationCustomFieldConfig Object Type in GraphQL\nDESCRIPTION: GraphQL object type that specifies the configuration for relation-type custom fields. It includes properties for defining the entity relationship, field types, and UI configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_158\n\nLANGUAGE: graphql\nCODE:\n```\ntype RelationCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  entity: String!\n  scalarFields: [String!]!\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Completed Orders in GraphQL\nDESCRIPTION: Defines a mutation to modify an order after it has been completed by the customer. The order must be in the 'Modifying' state before this mutation can be applied.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_73\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  modifyOrder(input: ModifyOrderInput!): ModifyOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the GlobalSettings Entity Class in TypeScript\nDESCRIPTION: This TypeScript code defines the `GlobalSettings` entity class using TypeORM decorators. It stores global application settings like available languages (`availableLanguages`), default inventory tracking behavior (`trackInventory`), the out-of-stock threshold (`outOfStockThreshold`), and custom fields (`customFields`). The class extends `VendureEntity` and implements `HasCustomFields`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/global-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass GlobalSettings extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<GlobalSettings>)\n    @Column('simple-array')\n    availableLanguages: LanguageCode[];\n    @Column({ default: true })\n    trackInventory: boolean;\n    @Column({ default: 0 })\n    outOfStockThreshold: number;\n    @Column(type => CustomGlobalSettingsFields)\n    customFields: CustomGlobalSettingsFields;\n}\n```\n\n----------------------------------------\n\nTITLE: SentryPlugin Class Signature Reference (TypeScript)\nDESCRIPTION: Outlines the main API surface for the SentryPlugin, declaring properties and static methods including options, configure, and init. This signature helps understand available configuration hooks and extension points for advanced usage in a NestJS-based Vendure server. Key parameters are SentryPluginOptions and a MiddlewareConsumer for lifecycle and configuration. Output is a configured NestModule instance when integrated into a Vendure setup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/sentry-plugin/index.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nclass SentryPlugin implements NestModule {\n    static options: SentryPluginOptions = {} as any;\n    configure(consumer: MiddlewareConsumer) => any;\n    init(options: SentryPluginOptions) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZoneService Class in TypeScript\nDESCRIPTION: This code snippet defines the ZoneService class, which contains methods for managing Zone entities in Vendure. It includes constructor and methods for finding, creating, updating, and deleting zones, as well as managing zone members.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/zone-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ZoneService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, eventBus: EventBus, translator: TranslatorService, listQueryBuilder: ListQueryBuilder)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Zone>) => Promise<PaginatedList<Zone>>;\n    findOne(ctx: RequestContext, zoneId: ID) => Promise<Zone | undefined>;\n    getAllWithMembers(ctx: RequestContext) => Promise<Zone[]>;\n    create(ctx: RequestContext, input: CreateZoneInput) => Promise<Zone>;\n    update(ctx: RequestContext, input: UpdateZoneInput) => Promise<Zone>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    addMembersToZone(ctx: RequestContext, { memberIds, zoneId }: MutationAddMembersToZoneArgs) => Promise<Zone>;\n    removeMembersFromZone(ctx: RequestContext, { memberIds, zoneId }: MutationRemoveMembersFromZoneArgs) => Promise<Zone>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Allocation Stock Movement Entity - TypeScript\nDESCRIPTION: This snippet defines the Allocation entity as a subclass of StockMovement, tailored to represent stock locked (allocated) for an order line upon checkout. It enforces its type as ALLOCATION and introduces a relationship to the OrderLine entity. Required dependencies are StockMovement, OrderLine, and DeepPartial for instantiation. Instantiated with a partial Allocation input, it yields an entity linking to a specific order line; allocations help prevent overselling of products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-movement.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Allocation extends StockMovement {\n    readonly type = StockMovementType.ALLOCATION;\n    constructor(input: DeepPartial<Allocation>)\n    @Index()\n    @ManyToOne(type => OrderLine, orderLine => orderLine.allocations)\n    orderLine: OrderLine;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Quote Request Handler Implementation in TypeScript\nDESCRIPTION: Example of implementing a custom email handler for quote requests, including handler creation and plugin registration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst quoteRequestedHandler = new EmailEventListener('quote-requested')\n  .on(QuoteRequestedEvent)\n  .setRecipient(event => event.customer.emailAddress)\n  .setSubject(`Here's the quote you requested`)\n  .setFrom('{{ fromAddress }}')\n  .setTemplateVars(event => ({ details: event.details }));\n```\n\n----------------------------------------\n\nTITLE: Permission Enum Definition\nDESCRIPTION: Complete enum definition containing all available permissions in Vendure, including CRUD operations for various entities and special permissions like Owner, Public, and SuperAdmin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/permission.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum Permission {\n    Authenticated = 'Authenticated'\n    CreateAdministrator = 'CreateAdministrator'\n    CreateAsset = 'CreateAsset'\n    CreateCatalog = 'CreateCatalog'\n    CreateChannel = 'CreateChannel'\n    CreateCollection = 'CreateCollection'\n    CreateCountry = 'CreateCountry'\n    CreateCustomer = 'CreateCustomer'\n    CreateCustomerGroup = 'CreateCustomerGroup'\n    CreateFacet = 'CreateFacet'\n    CreateOrder = 'CreateOrder'\n    CreatePaymentMethod = 'CreatePaymentMethod'\n    CreateProduct = 'CreateProduct'\n    CreatePromotion = 'CreatePromotion'\n    CreateSeller = 'CreateSeller'\n    CreateSettings = 'CreateSettings'\n    CreateShippingMethod = 'CreateShippingMethod'\n    CreateStockLocation = 'CreateStockLocation'\n    CreateSystem = 'CreateSystem'\n    CreateTag = 'CreateTag'\n    CreateTaxCategory = 'CreateTaxCategory'\n    CreateTaxRate = 'CreateTaxRate'\n    CreateZone = 'CreateZone'\n    DeleteAdministrator = 'DeleteAdministrator'\n    DeleteAsset = 'DeleteAsset'\n    DeleteCatalog = 'DeleteCatalog'\n    DeleteChannel = 'DeleteChannel'\n    DeleteCollection = 'DeleteCollection'\n    DeleteCountry = 'DeleteCountry'\n    DeleteCustomer = 'DeleteCustomer'\n    DeleteCustomerGroup = 'DeleteCustomerGroup'\n    DeleteFacet = 'DeleteFacet'\n    DeleteOrder = 'DeleteOrder'\n    DeletePaymentMethod = 'DeletePaymentMethod'\n    DeleteProduct = 'DeleteProduct'\n    DeletePromotion = 'DeletePromotion'\n    DeleteSeller = 'DeleteSeller'\n    DeleteSettings = 'DeleteSettings'\n    DeleteShippingMethod = 'DeleteShippingMethod'\n    DeleteStockLocation = 'DeleteStockLocation'\n    DeleteSystem = 'DeleteSystem'\n    DeleteTag = 'DeleteTag'\n    DeleteTaxCategory = 'DeleteTaxCategory'\n    DeleteTaxRate = 'DeleteTaxRate'\n    DeleteZone = 'DeleteZone'\n    Owner = 'Owner'\n    Public = 'Public'\n    ReadAdministrator = 'ReadAdministrator'\n    ReadAsset = 'ReadAsset'\n    ReadCatalog = 'ReadCatalog'\n    ReadChannel = 'ReadChannel'\n    ReadCollection = 'ReadCollection'\n    ReadCountry = 'ReadCountry'\n    ReadCustomer = 'ReadCustomer'\n    ReadCustomerGroup = 'ReadCustomerGroup'\n    ReadFacet = 'ReadFacet'\n    ReadOrder = 'ReadOrder'\n    ReadPaymentMethod = 'ReadPaymentMethod'\n    ReadProduct = 'ReadProduct'\n    ReadPromotion = 'ReadPromotion'\n    ReadSeller = 'ReadSeller'\n    ReadSettings = 'ReadSettings'\n    ReadShippingMethod = 'ReadShippingMethod'\n    ReadStockLocation = 'ReadStockLocation'\n    ReadSystem = 'ReadSystem'\n    ReadTag = 'ReadTag'\n    ReadTaxCategory = 'ReadTaxCategory'\n    ReadTaxRate = 'ReadTaxRate'\n    ReadZone = 'ReadZone'\n    SuperAdmin = 'SuperAdmin'\n    UpdateAdministrator = 'UpdateAdministrator'\n    UpdateAsset = 'UpdateAsset'\n    UpdateCatalog = 'UpdateCatalog'\n    UpdateChannel = 'UpdateChannel'\n    UpdateCollection = 'UpdateCollection'\n    UpdateCountry = 'UpdateCountry'\n    UpdateCustomer = 'UpdateCustomer'\n    UpdateCustomerGroup = 'UpdateCustomerGroup'\n    UpdateFacet = 'UpdateFacet'\n    UpdateGlobalSettings = 'UpdateGlobalSettings'\n    UpdateOrder = 'UpdateOrder'\n    UpdatePaymentMethod = 'UpdatePaymentMethod'\n    UpdateProduct = 'UpdateProduct'\n    UpdatePromotion = 'UpdatePromotion'\n    UpdateSeller = 'UpdateSeller'\n    UpdateSettings = 'UpdateSettings'\n    UpdateShippingMethod = 'UpdateShippingMethod'\n    UpdateStockLocation = 'UpdateStockLocation'\n    UpdateSystem = 'UpdateSystem'\n    UpdateTag = 'UpdateTag'\n    UpdateTaxCategory = 'UpdateTaxCategory'\n    UpdateTaxRate = 'UpdateTaxRate'\n    UpdateZone = 'UpdateZone'\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature of useMutation Hook\nDESCRIPTION: This code snippet shows the TypeScript signature of the useMutation hook. It defines the function with generic types T and V, where T represents the mutation result type and V represents the variables type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-mutation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useMutation<T, V extends Record<string, any> = Record<string, any>>(mutation: DocumentNode | TypedDocumentNode<T, V>): void\n```\n\n----------------------------------------\n\nTITLE: Querying Tax-Related Prices in GraphQL\nDESCRIPTION: GraphQL query demonstrating how to fetch various price fields both with and without tax for an active order, including line items, subtotals, shipping, and total amounts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/taxes/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  activeOrder {\n    ...on Order {\n      lines {\n        linePrice\n        linePriceWithTax\n      }\n      subTotal\n      subTotalWithTax\n      shipping\n      shippingWithTax\n      total\n      totalWithTax\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Update Customer Email Address Mutation in GraphQL for Vendure\nDESCRIPTION: Requests to update the email address of the active Customer. If verification is required, a token will be generated and an IdentifierChangeRequestEvent is raised, which can trigger an email notification.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  requestUpdateCustomerEmailAddress(password: String!, newEmailAddress: String!): RequestUpdateCustomerEmailAddressResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderModificationLine Type in GraphQL\nDESCRIPTION: The OrderModificationLine type represents a line item that has been modified in an order, referencing both the order line and the modification details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_119\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderModificationLine {\n  orderLine: OrderLine!\n  orderLineId: ID!\n  quantity: Int!\n  modification: OrderModification!\n  modificationId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Using createCache Helper for Convenient Caching\nDESCRIPTION: Shows how to use the createCache helper function to create a Cache instance that wraps the CacheService APIs. This example includes event-based cache invalidation for products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { CacheService, ID, EventBus, ProductEvent,RequestContext } from '@vendure/core';\n\n@Injectable()\nexport class FacetValueChecker {\n    // Create a Cache instance with a 1-day TTL\n    private facetValueCache = this.cacheService.createCache({\n        getKey: (productId: ID) => `FacetValueChecker.${productId}`,\n        options: { ttl: 1000 * 60 * 60 * 24 },\n    });\n\n    constructor(private cacheService: CacheService, private eventBus: EventBus) {\n        this.eventBus.ofType(ProductEvent).subscribe(event => {\n            if (event.type !== 'created') {\n                // Invalidate the cache entry when a Product is updated or deleted\n                this.facetValueCache.delete(event.entity.id);\n            }\n        });\n    }\n\n    async getFacetValueIdsForProduct(ctx: RequestContext, productId: ID): Promise<ID[]> {\n        return this.facetValueCache.get(productId, () =>\n            // This function will only be called if the cache entry does not exist\n            // or has expired. It will set the result in the cache automatically.\n            this.calculateFacetValueIdsForProduct(ctx, productId));\n    }\n\n    async calculateFacetValueIdsForProduct(ctx: RequestContext, productId: ID): Promise<ID[]> {\n        // Do something expensive\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerGroup Type in GraphQL\nDESCRIPTION: Type definition for customer groups with basic metadata and relationship to customers. Includes support for custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_49\n\nLANGUAGE: graphql\nCODE:\n```\ntype CustomerGroup {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  customers(options: CustomerListOptions): CustomerList!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdminUiAppDevModeConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the AdminUiAppDevModeConfig interface, which contains properties for configuring the Admin UI app dev server in Vendure. It includes the source path, port, optional route, and a compilation function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/admin-ui/admin-ui-app-dev-mode-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdminUiAppDevModeConfig {\n    sourcePath: string;\n    port: number;\n    route?: string;\n    compile: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRate Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tax rates that can be applied to products based on categories, zones, and customer groups.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_205\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxRate {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nname: String!\nenabled: Boolean!\nvalue: Float!\ncategory: TaxCategory!\nzone: Zone!\ncustomerGroup: CustomerGroup\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariant Custom Fields in Vendure Config\nDESCRIPTION: Configuration for adding an 'engravable' boolean custom field to ProductVariant entity to indicate whether a product can be engraved.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/configurable-products/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'engravable',\n                type: 'boolean',\n                defaultValue: false,\n                label: [\n                    { languageCode: LanguageCode.en, value: 'Engravable' },\n                ],\n            },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: UI Extension Configuration\nDESCRIPTION: Configuration for compiling UI extensions and registering providers in Vendure config.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as path from 'path';\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            port: 3302,\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [{\n                    id: 'common',\n                    extensionPath: path.join(__dirname, 'plugins/common/ui'),\n                    providers: ['providers.ts'],\n                }],\n            }),\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: APIExtensionDefinition Interface Definition in TypeScript\nDESCRIPTION: The APIExtensionDefinition interface defines how plugins can extend the Vendure GraphQL API with custom schema definitions, resolvers, and scalar types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin-metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface APIExtensionDefinition {\n    schema?: DocumentNode | (() => DocumentNode | undefined);\n    resolvers?: Array<Type<any>> | (() => Array<Type<any>>);\n    scalars?: Record<string, GraphQLScalarType> | (() => Record<string, GraphQLScalarType>);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GuestCheckoutError Type in GraphQL\nDESCRIPTION: Describes the structure of an error that occurs when attempting to set a customer on a guest checkout against the configured strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_74\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype GuestCheckoutError {\n  errorCode: ErrorCode!\n  message: String!\n  errorDetail: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of loadComponent in DashboardWidgetConfig\nDESCRIPTION: This code snippet demonstrates how to use the loadComponent property in the DashboardWidgetConfig interface. It shows examples of both eager-loading and lazy-loading components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/dashboard-widgets/dashboard-widget-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// eager-loading\nloadComponent: () => MyWidgetComponent,\n\n// lazy-loading\nloadComponent: () => import('./path-to/widget.component').then(m => m.MyWidgetComponent),\n```\n\n----------------------------------------\n\nTITLE: Using RichTextEditor Component in React with Form Submission\nDESCRIPTION: Example showing how to implement the RichTextEditor component from Vendure Admin UI in a React form. The example demonstrates form submission handling and accessing the editor content from FormData after submission.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/rich-text-editor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RichTextEditor } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function MyComponent() {\n  const onSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const form = new FormData(e.target as HTMLFormElement);\n    const content = form.get(\"content\");\n    console.log(content);\n  };\n\n  return (\n    <form className=\"w-full\" onSubmit={onSubmit}>\n      <RichTextEditor\n        name=\"content\"\n        readOnly={false}\n        onMount={(e) => console.log(\"Mounted\", e)}\n      />\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Submit\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderModification Entity with TypeORM - TypeScript\nDESCRIPTION: This snippet defines the OrderModification entity class using TypeScript and TypeORM, representing a modification made to an existing order in Vendure by an administrator. It specifies properties such as note, associated order, modified lines, surcharges, payment, refund, address changes, and price changes, along with database relationships using decorators like @ManyToOne and @OneToMany. Dependencies include TypeORM, VendureEntity base class, and related entity classes (Order, OrderModificationLine, Surcharge, Payment, Refund, OrderAddress). Inputs are modifications to an order, and the class outputs an object mapping those changes for persistence; constraints include property types and relationship annotations as specified by TypeORM.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-modification.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderModification extends VendureEntity {\n    constructor(input?: DeepPartial<OrderModification>)\n    @Column()\n    note: string;\n    @Index()\n    @ManyToOne(type => Order, order => order.modifications, { onDelete: 'CASCADE' })\n    order: Order;\n    @OneToMany(type => OrderModificationLine, line => line.modification)\n    lines: OrderModificationLine[];\n    @OneToMany(type => Surcharge, surcharge => surcharge.orderModification)\n    surcharges: Surcharge[];\n    @Money()\n    priceChange: number;\n    @OneToOne(type => Payment)\n    @JoinColumn()\n    payment?: Payment;\n    @OneToOne(type => Refund)\n    @JoinColumn()\n    refund?: Refund;\n    @Column('simple-json', { nullable: true }) shippingAddressChange: OrderAddress;\n    @Column('simple-json', { nullable: true }) billingAddressChange: OrderAddress;\n    isSettled: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdminUiPluginOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the AdminUiPluginOptions interface, which includes properties for configuring the AdminUiPlugin. It specifies the route, port, hostname, app configuration, and admin UI configuration options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/admin-ui-plugin/admin-ui-plugin-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdminUiPluginOptions {\n    route: string;\n    port: number;\n    hostname?: string;\n    app?: AdminUiAppConfig | AdminUiAppDevModeConfig;\n    adminUiConfig?: Partial<AdminUiConfig>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Plugin with Event Subscription\nDESCRIPTION: Shows how to subscribe to entity events and filter for specific event types in a plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { EventBus, PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { filter } from 'rxjs/operators';\n\nimport { BlogPostEvent } from './events/blog-post-event';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    // ...\n})\nexport class BlogPlugin implements OnModuleInit {\n    constructor(private eventBus: EventBus) {}\n\n    onModuleInit() {\n        this.eventBus\n            .ofType(BlogPostEvent)\n            .pipe(filter(event => event.type === 'created'))\n            .subscribe(event => {\n                const blogPost = event.entity;\n                // do something with the newly created BlogPost\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Tax Rate by ID with GraphQL\nDESCRIPTION: This GraphQL query is designed to fetch a specific tax rate using an ID. The query requires an `ID` input and returns a `TaxRate` object, representing the relevant tax rate information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_46\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntaxRate(id: ID!): TaxRate\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateProductVariantInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a product variant with various optional fields including pricing, inventory tracking, and asset management. Required fields include the ID while all other fields are optional.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_193\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateProductVariantInput {\n  id: ID!\n  enabled: Boolean\n  translations: [ProductVariantTranslationInput!]\n  facetValueIds: [ID!]\n  optionIds: [ID!]\n  sku: String\n  taxCategoryId: ID\n  \"\"\"\n  Sets the price for the ProductVariant in the Channel's default currency\n  \"\"\"\n  price: Money\n  \"\"\"\n  Allows multiple prices to be set for the ProductVariant in different currencies.\n  \"\"\"\n  prices: [UpdateProductVariantPriceInput!]\n  featuredAssetId: ID\n  assetIds: [ID!]\n  stockOnHand: Int\n  stockLevels: [StockLevelInput!]\n  outOfStockThreshold: Int\n  useGlobalOutOfStockThreshold: Boolean\n  trackInventory: GlobalFlag\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Surcharge to an Order - Vendure TypeScript\nDESCRIPTION: Applies a Surcharge entity to an Order using partial surcharge input (excluding id, createdAt, updatedAt, order). Needs context, orderId, and surchargeInput. Returns a Promise of the updated Order for flexible fee or adjustment addition. Surcharge structure must align with system definition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, surchargeInput: Partial<Omit<Surcharge, 'id' | 'createdAt' | 'updatedAt' | 'order'>>) => Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Querying Channel-Aware Entities with ListQueryBuilder\nDESCRIPTION: Shows how to query channel-aware entities using ListQueryBuilder and TransactionalConnection, including filtering by channel ID and handling relations. Implements both findOne and findAll methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/channel-aware/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChannelService, ListQueryBuilder, TransactionalConnection } from '@vendure/core';\n\nexport class RequestService {\n\n    constructor(\n        private connection: TransactionalConnection,\n        private listQueryBuilder: ListQueryBuilder,\n        private channelService: ChannelService) {}\n\n    findOne(ctx: RequestContext,\n            requestId: ID,\n            relations?: RelationPaths<ProductRequest>) {\n        return this.connection.findOneInChannel(ctx, ProductRequest, requestId, ctx.channelId, {\n            relations: unique(effectiveRelations)\n        });\n    }\n\n    findAll(\n        ctx: RequestContext,\n        options?: ProductRequestListOptions,\n        relations?: RelationPaths<ProductRequest>,\n    ): Promise<PaginatedList<ProductRequest>> {\n        return this.listQueryBuilder\n            .build(ProductRequest, options, {\n                ctx,\n                relations,\n                channelId: ctx.channelId,\n            })\n            .getManyAndCount()\n            .then(([items, totalItems]) => {\n                return {\n                    items,\n                    totalItems,\n                };\n            });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Wishlist Plugin in TypeScript\nDESCRIPTION: Initial setup of a wishlist plugin showing the basic plugin structure with required imports.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n})\nexport class WishlistPlugin {}\n```\n\n----------------------------------------\n\nTITLE: AssetImporter Class Signature in TypeScript\nDESCRIPTION: Defines the AssetImporter class which creates Asset entities based on string paths provided in CSV import format. It resolves source files by joining the importExportOptions.importAssetsDir with the asset path.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/asset-importer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AssetImporter {\n    getAssets(assetPaths: string[], ctx?: RequestContext) => Promise<{ assets: Asset[]; errors: string[] }>;\n}\n```\n\n----------------------------------------\n\nTITLE: EmailPlugin Class Definition\nDESCRIPTION: Class signature for the EmailPlugin showing implemented interfaces and core methods. The plugin handles email functionality and implements NestJS lifecycle hooks for proper initialization and shutdown.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmailPlugin implements OnApplicationBootstrap, OnApplicationShutdown, NestModule {\n    init(options: EmailPluginOptions | EmailPluginDevModeOptions) => Type<EmailPlugin>;\n    onApplicationShutdown() => ;\n    configure(consumer: MiddlewareConsumer) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Shipping Calculators in Vendure\nDESCRIPTION: This TypeScript code demonstrates how to add custom shipping calculators to the Vendure configuration, making them available when setting up new ShippingMethods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultShippingCalculator, VendureConfig } from '@vendure/core';\nimport { externalShippingCalculator } from './external-shipping-calculator';\n\nexport const config: VendureConfig = {\n  // ...\n  shippingOptions: {\n    shippingCalculators: [\n      defaultShippingCalculator,\n      externalShippingCalculator,\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SentryPlugin Dependencies with npm (Shell)\nDESCRIPTION: Demonstrates how to install the Vendure SentryPlugin and its required dependency, @sentry/node, using npm. This is a prerequisite for enabling Sentry integration in a Vendure server. Run this command in your project's root directory to add the necessary packages before proceeding with configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/sentry-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @vendure/sentry-plugin @sentry/node\n```\n\n----------------------------------------\n\nTITLE: Adding a Note to a Customer in TypeScript\nDESCRIPTION: Adds a note or history entry associated with a specific customer. Requires the request context and an input object containing the customer ID and note details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\naddNoteToCustomer(ctx: RequestContext, input: AddNoteToCustomerInput) => Promise<Customer>\n```\n\n----------------------------------------\n\nTITLE: Simple Custom Sort Mapping for Elasticsearch in Vendure\nDESCRIPTION: Example of a basic custom sort implementation for Elasticsearch that extends sorting functionality to include product priority. The mapSort function extends the default sort parameters with a custom field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nmapSort: (sort, input) => {\n    // Assuming `extendSearchSortType: [\"priority\"]`\n    // Assuming priority is never undefined\n    const { priority } = input.sort;\n    return [\n         ...sort,\n         {\n             // The `product-priority` field corresponds to the `priority` customProductMapping\n             // Depending on the index type, this field might require a\n             // more detailed input (example: 'productName.keyword')\n             [\"product-priority\"]: {\n                 order: priority === SortOrder.ASC ? 'asc' : 'desc'\n             }\n         }\n     ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRateList Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for paginated lists of tax rates, including the total count of items and the items themselves.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_206\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxRateList {\nitems: [TaxRate!]!\ntotalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of useFormControl Hook in Vendure Admin UI\nDESCRIPTION: This code snippet shows the function signature of the useFormControl hook. It returns void, indicating that it doesn't directly return a value but likely modifies some internal state or context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-form-control.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useFormControl(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing FulfillmentState Transition Event in TypeScript\nDESCRIPTION: Event class that handles transitions between FulfillmentStates. Extends VendureEvent and requires the from/to states, context and fulfillment entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass FulfillmentStateTransitionEvent extends VendureEvent {\n    constructor(fromState: FulfillmentState, toState: FulfillmentState, ctx: RequestContext, fulfillment: Fulfillment)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InitializerService Class in TypeScript\nDESCRIPTION: This snippet defines the InitializerService class with its constructor and onModuleInit method. The constructor takes multiple service dependencies as parameters, indicating that this service coordinates the initialization of various parts of the Vendure system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/initializer-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InitializerService {\n    constructor(connection: TransactionalConnection, zoneService: ZoneService, channelService: ChannelService, roleService: RoleService, administratorService: AdministratorService, shippingMethodService: ShippingMethodService, globalSettingsService: GlobalSettingsService, taxRateService: TaxRateService, sellerService: SellerService, eventBus: EventBus, stockLocationService: StockLocationService)\n    onModuleInit() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type provides filter options for querying payment methods, including fields for filtering by ID, timestamps, name, code, description, and enabled status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_113\n\nLANGUAGE: graphql\nCODE:\n```\ninput PaymentMethodFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  name: StringOperators\n  code: StringOperators\n  description: StringOperators\n  enabled: BooleanOperators\n  _and: [PaymentMethodFilterParameter!]\n  _or: [PaymentMethodFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Percentage Discount with PromotionOrderAction\nDESCRIPTION: Example showing how to create a PromotionOrderAction that applies a percentage discount to the entire Order. The execute function calculates the discount amount based on the order subtotal and the discount percentage.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Applies a percentage discount to the entire Order\nconst orderPercentageDiscount = new PromotionOrderAction({\n    code: 'order_percentage_discount',\n    args: { discount: 'percentage' },\n    execute(ctx, order, args) {\n        return -order.subTotal * (args.discount / 100);\n    },\n    description: 'Discount order by { discount }%',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Order Customer Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to assign a different Customer to an existing Order. Added in v2.2.0. Takes a SetOrderCustomerInput object and returns the updated Order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_98\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setOrderCustomer(input: SetOrderCustomerInput!): Order\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAddressInput schema in GraphQL\nDESCRIPTION: An input type for updating an Address entity. Requires a valid country code that corresponds to a defined Country in the Vendure server, typically a 2-character ISO code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_173\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateAddressInput {\n  id: ID!\n  fullName: String\n  company: String\n  streetLine1: String\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  countryCode: String\n  phoneNumber: String\n  defaultShippingAddress: Boolean\n  defaultBillingAddress: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of UiExtensionCompilerOptions in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the UiExtensionCompilerOptions interface to configure the compilation of the Vendure Admin UI. It shows an example of setting the ngCompilerPath option to manually specify the path to the Angular CLI compiler script.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-extension-compiler-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncompileUiExtensions({\n    ngCompilerPath: path.join(__dirname, '../../node_modules/@angular/cli/bin/ng.js'),\n    outputPath: path.join(__dirname, '../admin-ui'),\n    extensions: [\n      // ...\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CancelPaymentFn Type in TypeScript for Vendure Payment Cancellation\nDESCRIPTION: This type definition outlines the structure of a function for cancelling payments in Vendure. It accepts context, order, payment, configuration arguments, and payment method as inputs, returning a result or error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype CancelPaymentFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    payment: Payment,\n    args: ConfigArgValues<T>,\n    method: PaymentMethod,\n) => CancelPaymentResult | CancelPaymentErrorResult | Promise<CancelPaymentResult | CancelPaymentErrorResult>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Fields in TypeScript Component\nDESCRIPTION: Shows how to set up a detail component to support custom fields, including form initialization and value handling. The code demonstrates importing required utilities, configuring form groups, and handling custom field values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-detail-views/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getCustomFieldsDefaults } from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'review-detail',\n    templateUrl: './review-detail.component.html',\n    styleUrls: ['./review-detail.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class ReviewDetailComponent extends TypedBaseDetailComponent<typeof getReviewDetailDocument, 'review'> implements OnInit, OnDestroy {\n\n    customFields = this.getCustomFieldConfig('ProductReview');\n\n    detailForm = this.formBuilder.group({\n        title: [''],\n        rating: [1],\n        authorName: [''],\n        customFields: this.formBuilder.group(getCustomFieldsDefaults(this.customFields)),\n    });\n\n    protected setFormValues(entity: NonNullable<ResultOf<typeof getReviewDetailDocument>['review']>, languageCode: LanguageCode): void {\n        this.detailForm.patchValue({\n            title: entity.name,\n            rating: entity.rating,\n            authorName: entity.authorName,\n            productId: entity.productId,\n        });\n        if (this.customFields.length) {\n            this.setCustomFieldFormValues(this.customFields, this.detailForm.get('customFields'), entity);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteAdministrators Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `deleteAdministrators` mutation for deleting multiple Administrators. It takes a non-nullable list of non-nullable `ID`s (`[ID!]!`) as input and returns a non-nullable list of non-nullable `DeletionResponse` objects (`[DeletionResponse!]!`), one for each attempted deletion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple Administrators\n\"\"\"\ntype Mutation {\n  deleteAdministrators(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relations in ProductService\nDESCRIPTION: Shows how to use the relations parameter in built-in service methods to eagerly load related entities. The example demonstrates loading a product's featured asset and assets relations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-service-layer/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst productWithAssets = await this.productService\n    .findOne(ctx, productId, ['featuredAsset', 'assets']);\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionOrderActionConfig Interface in TypeScript\nDESCRIPTION: Interface that extends PromotionActionConfig to define configuration for order-level promotion actions. Includes an execute function that calculates discounts for entire orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionOrderActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {\n    execute: ExecutePromotionOrderActionFn<T, U>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fulfillment Process Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the FulfillmentProcess used to manage how fulfillments transition between states. It extends the InjectableStrategy and includes properties such as transitions, onTransitionStart, onTransitionEnd, and onTransitionError. The definition allows one to add additional lifecycle hooks to cater to custom logic during state transitions. Prerequisites include familiarity with TypeScript interfaces, Vendure's injectable strategies, and state machine configurations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FulfillmentProcess<State extends keyof CustomFulfillmentStates | string> extends InjectableStrategy {\n    transitions?: Transitions<State, State | FulfillmentState> &\n        Partial<Transitions<FulfillmentState | State>>;\n    onTransitionStart?: OnTransitionStartFn<State | FulfillmentState, FulfillmentTransitionData>;\n    onTransitionEnd?: OnTransitionEndFn<State | FulfillmentState, FulfillmentTransitionData>;\n    onTransitionError?: OnTransitionErrorFn<State | FulfillmentState>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VendureEntityEvent Class in TypeScript\nDESCRIPTION: The VendureEntityEvent class serves as a base for entity-related events within the EventBus system. It requires an entity, the type of event ('created', 'updated', 'deleted'), a RequestContext, and optionally additional input data. The class extends the VendureEvent base, providing a structure for event handling in Vendure applications. This class assumes that 'RequestContext' and 'VendureEvent' are pre-defined elsewhere in the Vendure ecosystem.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/vendure-entity-event.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VendureEntityEvent<Entity, Input = any> extends VendureEvent {\n    public readonly entity: Entity;\n    public readonly type: 'created' | 'updated' | 'deleted';\n    public readonly ctx: RequestContext;\n    public readonly input?: Input;\n    constructor(entity: Entity, type: 'created' | 'updated' | 'deleted', ctx: RequestContext, input?: Input)\n}\n```\n\n----------------------------------------\n\nTITLE: useQuery Hook Function Signature\nDESCRIPTION: TypeScript function signature for the useQuery hook showing its type parameters, arguments, and return type. Accepts a GraphQL query, variables, and options for channel change refetching.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-query.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useQuery<T, V extends Record<string, any> = Record<string, any>>(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V, options: { refetchOnChannelChange: boolean } = { refetchOnChannelChange: false }): void\n```\n\n----------------------------------------\n\nTITLE: Defining JobEventListener in TypeScript for Vendure\nDESCRIPTION: This code defines the JobEventListener type, which represents the signature of the event handler expected by the Job.on() method in Vendure's job queue system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype JobEventListener<T extends JobData<T>> = (job: Job<T>) => void\n```\n\n----------------------------------------\n\nTITLE: ProductOption Type Definition in GraphQL\nDESCRIPTION: Defines product options that can be assigned to product variants, including relationships to option groups and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_136\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductOption {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  name: String!\n  groupId: ID!\n  group: ProductOptionGroup!\n  translations: [ProductOptionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Refund Order Input Type Definition\nDESCRIPTION: Input type for processing order refunds, including line items, shipping, adjustments, and payment details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_136\n\nLANGUAGE: graphql\nCODE:\n```\ninput RefundOrderInput {\n  lines: [OrderLineInput!]\n  shipping: Money\n  adjustment: Money\n  amount: Money\n  paymentId: ID!\n  reason: String\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Assignment Mutations in GraphQL\nDESCRIPTION: Set of mutations for assigning various entities (Facets, PaymentMethods, Products, ProductVariants, Promotions, ShippingMethods, StockLocations) to specific channels. Each mutation requires a specific input type and returns an array of the assigned entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  assignFacetsToChannel(input: AssignFacetsToChannelInput!): [Facet!]!\n  assignPaymentMethodsToChannel(input: AssignPaymentMethodsToChannelInput!): [PaymentMethod!]!\n  assignProductVariantsToChannel(input: AssignProductVariantsToChannelInput!): [ProductVariant!]!\n  assignProductsToChannel(input: AssignProductsToChannelInput!): [Product!]!\n  assignPromotionsToChannel(input: AssignPromotionsToChannelInput!): [Promotion!]!\n  assignShippingMethodsToChannel(input: AssignShippingMethodsToChannelInput!): [ShippingMethod!]!\n  assignStockLocationsToChannel(input: AssignStockLocationsToChannelInput!): [StockLocation!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelFilterParameter in GraphQL\nDESCRIPTION: This input type provides various filter parameters for channels, including ID, date, code, language, currency, and inventory-related filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\ninput ChannelFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  code: StringOperators\n  token: StringOperators\n  defaultLanguageCode: StringOperators\n  currencyCode: StringOperators\n  defaultCurrencyCode: StringOperators\n  trackInventory: BooleanOperators\n  outOfStockThreshold: NumberOperators\n  pricesIncludeTax: BooleanOperators\n  _and: [ChannelFilterParameter!]\n  _or: [ChannelFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GlobalSettings Event Class in TypeScript\nDESCRIPTION: Event class for GlobalSettings updates. Extends VendureEntityEvent and requires RequestContext and GlobalSettings entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nclass GlobalSettingsEvent extends VendureEntityEvent<GlobalSettings, UpdateGlobalSettingsInput> {\n    constructor(ctx: RequestContext, entity: GlobalSettings, input?: UpdateGlobalSettingsInput)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FloatStructFieldConfig GraphQL Type\nDESCRIPTION: Defines the FloatStructFieldConfig type with fields for configuring float fields in a struct.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_40\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FloatStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  min: Float\n  max: Float\n  step: Float\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Navigation Menu Items in Vendure Admin UI\nDESCRIPTION: Shows how to remove an existing navigation menu item by overriding it and setting an invalid permission requirement.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/nav-menu/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SharedModule, addNavMenuItem} from '@vendure/admin-ui/core';\n\nexport default [\n    addNavMenuItem({\n        id: 'collections',  // <-- we will override the \"collections\" menu item\n        label: 'Collections',\n        routerLink: ['/catalog', 'collections'],\n        // we use an invalid permission which ensures it is hidden from all users\n        requiresPermission: '__disable__'\n    },\n    'catalog'),\n];\n```\n\n----------------------------------------\n\nTITLE: ZoneSelectorComponent Class Definition in TypeScript\nDESCRIPTION: The ZoneSelectorComponent implements ControlValueAccessor to create a form control for selecting zones. It handles querying available zones, transforming values, and implements required methods for form integration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/zone-selector-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ZoneSelectorComponent implements ControlValueAccessor {\n    @Output() selectedValuesChange = new EventEmitter<Zone>();\n    @Input() readonly = false;\n    @Input() transformControlValueAccessorValue: (value: Zone | undefined) => any = value => value?.id;\n    selectedId$ = new Subject<string>();\n    onChangeFn: (val: any) => void;\n    onTouchFn: () => void;\n    disabled = false;\n    value: string | Zone;\n    zones$ = this.dataService\n        .query(GetZoneSelectorListDocument, { options: { take: 999 } })\n        .mapSingle(result => result.zones.items);\n    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef)\n    onChange(selected: Zone) => ;\n    registerOnChange(fn: any) => ;\n    registerOnTouched(fn: any) => ;\n    setDisabledState(isDisabled: boolean) => void;\n    focus() => ;\n    writeValue(obj: string | Zone | null) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field in Vendure\nDESCRIPTION: Configuration of a custom 'intensity' field on the Product entity with validation constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    customFields: {\n        Product: [\n            { name: 'intensity', type: 'int', min: 0, max: 100, defaultValue: 0 },\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategoryService Class in TypeScript\nDESCRIPTION: This code snippet defines the TaxCategoryService class, which contains methods for managing TaxCategory entities. It includes a constructor and methods for finding, creating, updating, and deleting tax categories.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/tax-category-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TaxCategoryService {\n    constructor(connection: TransactionalConnection, eventBus: EventBus, listQueryBuilder: ListQueryBuilder)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<TaxCategory>) => Promise<PaginatedList<TaxCategory>>;\n    findOne(ctx: RequestContext, taxCategoryId: ID) => Promise<TaxCategory | undefined>;\n    create(ctx: RequestContext, input: CreateTaxCategoryInput) => Promise<TaxCategory>;\n    update(ctx: RequestContext, input: UpdateTaxCategoryInput) => Promise<TaxCategory>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Custom Detail Component\nDESCRIPTION: Shows implementation of a custom detail component in React using hooks. The component fetches and displays CMS data for products using the useDetailComponentData hook.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-detail-components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { Card, useDetailComponentData, useInjector } from '@vendure/admin-ui/react';\nimport { CmsDataService } from '../providers/cms-data.service';\n\nexport function ProductInfo() {\n    const { entity, detailForm } = useDetailComponentData();\n    const cmsDataService = useInjector(CmsDataService);\n    const [extraInfo, setExtraInfo] = useState<any>();\n    \n    useEffect(() => {\n        if (!entity?.id) {\n            return;\n        }\n        const subscription = cmsDataService.getDataFor(entity?.id).subscribe(data => {\n            setExtraInfo(data);\n        });\n        return () => subscription.unsubscribe();\n    }, [entity?.id]);\n    \n    return (\n        <Card title=\"CMS Info\">\n            <pre>{JSON.stringify(extraInfo, null, 2)}</pre>\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionBreadcrumb GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for collection breadcrumb navigation in Vendure. This type provides the essential information needed to display breadcrumb navigation for collection hierarchies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionBreadcrumb {\n  id: ID!\n  name: String!\n  slug: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the OrderPlacedStrategy Interface in TypeScript\nDESCRIPTION: This code snippet defines the OrderPlacedStrategy interface which extends InjectableStrategy. It includes the shouldSetAsPlaced method signature that determines when an order should be set as placed during the order process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-placed-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderPlacedStrategy extends InjectableStrategy {\n    shouldSetAsPlaced(\n        ctx: RequestContext,\n        fromState: OrderState,\n        toState: OrderState,\n        order: Order,\n    ): boolean | Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetOrderShippingMethodResult Union GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL union type definition for the possible results of setting a shipping method for an order. Includes success case (Order) and error cases for various validation failures.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_122\n\nLANGUAGE: graphql\nCODE:\n```\nunion SetOrderShippingMethodResult =\n  Order | OrderModificationError | IneligibleShippingMethodError | NoActiveOrderError\n```\n\n----------------------------------------\n\nTITLE: BraintreePlugin Class Signature (TypeScript)\nDESCRIPTION: Declaration of the BraintreePlugin class with a static `options` property of type `BraintreePluginOptions` and a static `init` method that configures the plugin with custom options. This forms the backbone of the plugin integration in Vendure, and any configuration or extension should follow this signature. Requires the related `BraintreePluginOptions` interface to define option types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass BraintreePlugin {\n    static options: BraintreePluginOptions = {};\n    init(options: BraintreePluginOptions) => Type<BraintreePlugin>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Job Queue on Main Server Process\nDESCRIPTION: Shows how to run jobs on the main server process, typically used for testing and automated tasks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap, JobQueueService } from '@vendure/core';\nimport { config } from './vendure-config';\n\nbootstrap(config)\n    .then(app => app.get(JobQueueService).start())\n    .catch(err => {\n        console.log(err);\n        process.exit(1);\n    });\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Product Reviews Tab in Vendure Admin UI\nDESCRIPTION: Demonstrates how to add a new 'Reviews' tab to the product detail page using registerPageTab. The example configures a tab that displays product reviews with a star icon.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/page-tabs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPageTab } from '@vendure/admin-ui/core';\n\nimport { ReviewListComponent } from './components/review-list/review-list.component';\n\nexport default [\n    registerPageTab({\n        location: 'product-detail',\n        tab: 'Reviews',\n        route: 'reviews',\n        tabIcon: 'star',\n        component: ReviewListComponent,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing PollingJobQueueStrategy Class in TypeScript\nDESCRIPTION: Class definition for PollingJobQueueStrategy that extends InjectableJobQueueStrategy. It provides methods for managing job queues through polling, including job execution, cancellation, updates and retrieval.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/polling-job-queue-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PollingJobQueueStrategy extends InjectableJobQueueStrategy {\n    public concurrency: number;\n    public pollInterval: number | ((queueName: string) => number);\n    public setRetries: (queueName: string, job: Job) => number;\n    public backOffStrategy?: BackoffStrategy;\n    public gracefulShutdownTimeout: number;\n    protected activeQueues = new QueueNameProcessStorage<ActiveQueue<any>>();\n    constructor(config?: PollingJobQueueStrategyConfig)\n    constructor(concurrency?: number, pollInterval?: number)\n    constructor(concurrencyOrConfig?: number | PollingJobQueueStrategyConfig, maybePollInterval?: number)\n    start(queueName: string, process: (job: Job<Data>) => Promise<any>) => ;\n    stop(queueName: string, process: (job: Job<Data>) => Promise<any>) => ;\n    cancelJob(jobId: ID) => Promise<Job | undefined>;\n    next(queueName: string) => Promise<Job | undefined>;\n    update(job: Job) => Promise<void>;\n    findOne(id: ID) => Promise<Job | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRichTextEditor Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useRichTextEditor hook in a React component. It sets up a rich text editor with custom attributes, a text input handler, and a read-only state function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-rich-text-editor.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useRichTextEditor } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function Component() {\n    const { ref, editor } = useRichTextEditor({\n       attributes: { class: '' },\n       onTextInput: (text) => console.log(text),\n       isReadOnly: () => false,\n    });\n\n    return <div className=\"w-full\" ref={ref} />\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Stripe Payment Intent Creation in Vendure\nDESCRIPTION: This snippet demonstrates how to provide additional parameters to the Stripe payment intent creation process. It adds a description to the payment intent based on the order details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    StripePlugin.init({\n      paymentIntentCreateParams: (injector, ctx, order) => {\n        return {\n          description: `Order #${order.code} for ${order.customer?.emailAddress}`\n        },\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Extending SearchInput GraphQL Type in TypeScript\nDESCRIPTION: Shows how to define additional fields (like `longitude`, `latitude`, `radius`) for the `SearchInput` GraphQL type using the `extendSearchInputType` configuration. This allows passing custom data in search queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nextendSearchInputType: {\n  longitude: 'Float',\n  latitude: 'Float',\n  radius: 'Float',\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom PurgeRule for a Custom Entity in Vendure\nDESCRIPTION: This TypeScript snippet shows how to add a custom `PurgeRule` to the `StellatePlugin` configuration within `VendureConfig`. This rule listens for a custom `ArticleEvent` and defines a handler function. When an `ArticleEvent` occurs, the handler extracts relevant IDs (e.g., `article.id`) from the events and calls `stellateService.purge()` to specifically purge the `Article` type with those IDs from the Stellate cache.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StellatePlugin, defaultPurgeRules } from \"@vendure/stellate-plugin\";\nimport { VendureConfig } from \"@vendure/core\";\nimport { ArticleEvent } from \"./plugins/cms/events/article-event\";\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        StellatePlugin.init({\n            // ...\n            purgeRules: [\n                ...defaultPurgeRules,\n                new PurgeRule({\n                    eventType: ArticleEvent,\n                    handler: async ({ events, stellateService }) => {\n                        const articleIds = events.map((e) => e.article.id);\n                        stellateService.purge(\"Article\", articleIds);\n                    },\n                }),\n            ],\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Channel GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for sales channels in Vendure. This type defines properties of a sales channel including identification, language settings, currency configuration, inventory tracking options, and tax settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Channel {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  code: String!\n  token: String!\n  defaultTaxZone: Zone\n  defaultShippingZone: Zone\n  defaultLanguageCode: LanguageCode!\n  availableLanguageCodes: [LanguageCode!]\n  currencyCode: CurrencyCode!\n  defaultCurrencyCode: CurrencyCode!\n  availableCurrencyCodes: [CurrencyCode!]!\n  \"\"\"\n  Not yet used - will be implemented in a future release.\n  \"\"\"\n  trackInventory: Boolean\n  \"\"\"\n  Not yet used - will be implemented in a future release.\n  \"\"\"\n  outOfStockThreshold: Int\n  pricesIncludeTax: Boolean!\n  seller: Seller\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Calculated Column Queries with CalculatedColumnQueryInstruction in TypeScript\nDESCRIPTION: The `CalculatedColumnQueryInstruction` interface in TypeScript provides configuration options for calculated columns defined with the `@Calculated` decorator. It allows specifying dependent `relations` needed for the calculation, a custom `query` function using `SelectQueryBuilder` for complex logic, or a direct database `expression`. This metadata is used by `ListQueryBuilder` and the `@Relations` decorator to handle sorting, filtering, and relation loading involving calculated columns.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/calculated.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ninterface CalculatedColumnQueryInstruction {\n    relations?: string[];\n    query?: (qb: SelectQueryBuilder<any>) => void;\n    expression?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationFormInputComponent for Relation Type Custom Fields\nDESCRIPTION: Default input component for 'relation' type custom fields. It allows the selection of a ProductVariant, Product, Customer or Asset. For other entity types, a custom implementation is needed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass RelationFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'relation-form-input';\n    @Input() readonly: boolean;\n    formControl: UntypedFormControl;\n    config: RelationCustomFieldConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodQuote GraphQL Type\nDESCRIPTION: Defines a GraphQL type for shipping method quotes that include pricing information and metadata returned by shipping calculators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_183\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethodQuote {\n  id: ID!\n  price: Money!\n  priceWithTax: Money!\n  code: String!\n  name: String!\n  description: String!\n  \"\"\"\n  Any optional metadata returned by the ShippingCalculator in the ShippingCalculationResult\n  \"\"\"\n  metadata: JSON\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchInput Input Type in GraphQL\nDESCRIPTION: This input type is used for product search queries, including options for search terms, facet filters, collection filtering, and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_141\n\nLANGUAGE: graphql\nCODE:\n```\ninput SearchInput {\n  term: String\n  facetValueIds: [ID!]\n  facetValueOperator: LogicalOperator\n  facetValueFilters: [FacetValueFilterInput!]\n  collectionId: ID\n  collectionSlug: String\n  groupByProduct: Boolean\n  take: Int\n  skip: Int\n  sort: SearchResultSortParameter\n}\n```\n\n----------------------------------------\n\nTITLE: IfMultichannelDirective Class Definition in TypeScript\nDESCRIPTION: Class definition for the IfMultichannelDirective, extending IfDirectiveBase. It includes a constructor that takes ViewContainerRef, TemplateRef, and DataService as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/directives/if-multichannel-directive.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass IfMultichannelDirective extends IfDirectiveBase<[]> {\n    constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<any>, dataService: DataService)\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition for ShippingEligibilityChecker in TypeScript\nDESCRIPTION: Defines the ShippingEligibilityChecker class that extends ConfigurableOperationDef, featuring a constructor that accepts configuration parameters. It also incorporates methods for initialization with an Injector and JSON serialization functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-eligibility-checker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShippingEligibilityChecker<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: ShippingEligibilityCheckerConfig<T>)\n    init(injector: Injector) => ;\n    toJSON() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingEligibilityCheckerConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the ShippingEligibilityCheckerConfig interface, which extends ConfigurableOperationDefOptions. It includes two properties: 'check' of type CheckShippingEligibilityCheckerFn, and an optional 'shouldRunCheck' of type ShouldRunCheckFn.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-eligibility-checker-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShippingEligibilityCheckerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {\n    check: CheckShippingEligibilityCheckerFn<T>;\n    shouldRunCheck?: ShouldRunCheckFn<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Timeline Entry Component\nDESCRIPTION: Demonstrates how to register the custom TaxIdHistoryEntryComponent with Vendure's admin UI using the registerHistoryEntryComponent function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-timeline-components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerHistoryEntryComponent } from '@vendure/admin-ui/core';\nimport { TaxIdHistoryEntryComponent } from './components/tax-id-history-entry/tax-id-history-entry.component';\n\nexport default [\n    registerHistoryEntryComponent({\n        type: 'CUSTOMER_TAX_ID_VERIFICATION',\n        component: TaxIdHistoryEntryComponent,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: GraphQL FacetInUseError Type\nDESCRIPTION: Defines error type for when a facet cannot be modified due to existing usage.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_65\n\nLANGUAGE: graphql\nCODE:\n```\ntype FacetInUseError {\n  errorCode: ErrorCode!\n  message: String!\n  facetCode: String!\n  productCount: Int!\n  variantCount: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Channel Entity Class with TypeORM in TypeScript\nDESCRIPTION: This snippet defines the Channel class as a TypeORM entity, modeling a robust set of configuration defaults and relationships for a sales channel in Vendure. Dependencies include TypeORM, VendureEntity base class, and TypeScript types like LanguageCode, CurrencyCode, and relationships to other entities (e.g., Seller, Product, Zone). The snippet provides constructor parameters (via DeepPartial<Channel>), various configuration fields (currency, language, zones, inventory tracking), and many-to-many/many-to-one relations for connecting products, promotions, customers, and more. Inputs include optional partial constructor data; outputs are an instantiated Channel entity representing a configured and persisted sales channel instance. All properties are annotated for ORM mapping, and some are indexed or have unique constraints. Limitations include dependency on the broader Vendure and TypeORM context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/channel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Channel extends VendureEntity {\n    constructor(input?: DeepPartial<Channel>)\n    @Column({ unique: true })\n    code: string;\n    @Column({ unique: true })\n    token: string;\n    @Column({ default: '', nullable: true })\n    description: string;\n    @Index()\n    @ManyToOne(type => Seller, seller => seller.channels)\n    seller?: Seller;\n    @EntityId({ nullable: true })\n    sellerId?: ID;\n    @Column('varchar') defaultLanguageCode: LanguageCode;\n    @Column({ type: 'simple-array', nullable: true })\n    availableLanguageCodes: LanguageCode[];\n    @Index()\n    @ManyToOne(type => Zone, zone => zone.defaultTaxZoneChannels)\n    defaultTaxZone: Zone;\n    @Index()\n    @ManyToOne(type => Zone, zone => zone.defaultShippingZoneChannels)\n    defaultShippingZone: Zone;\n    @Column('varchar')\n    defaultCurrencyCode: CurrencyCode;\n    @Column({ type: 'simple-array', nullable: true })\n    availableCurrencyCodes: CurrencyCode[];\n    @Column({ default: true })\n    trackInventory: boolean;\n    @Column({ default: 0 })\n    outOfStockThreshold: number;\n    @Column(type => CustomChannelFields)\n    customFields: CustomChannelFields;\n    @Column() pricesIncludeTax: boolean;\n    @ManyToMany(type => Product, product => product.channels, { onDelete: 'CASCADE' })\n    products: Product[];\n    @ManyToMany(type => ProductVariant, productVariant => productVariant.channels, { onDelete: 'CASCADE' })\n    productVariants: ProductVariant[];\n    @ManyToMany(type => FacetValue, facetValue => facetValue.channels, { onDelete: 'CASCADE' })\n    facetValues: FacetValue[];\n    @ManyToMany(type => Facet, facet => facet.channels, { onDelete: 'CASCADE' })\n    facets: Facet[];\n    @ManyToMany(type => Collection, collection => collection.channels, { onDelete: 'CASCADE' })\n    collections: Collection[];\n    @ManyToMany(type => Promotion, promotion => promotion.channels, { onDelete: 'CASCADE' })\n    promotions: Promotion[];\n    @ManyToMany(type => PaymentMethod, paymentMethod => paymentMethod.channels, { onDelete: 'CASCADE' })\n    paymentMethods: PaymentMethod[];\n    @ManyToMany(type => ShippingMethod, shippingMethod => shippingMethod.channels, { onDelete: 'CASCADE' })\n    shippingMethods: ShippingMethod[];\n    @ManyToMany(type => Customer, customer => customer.channels, { onDelete: 'CASCADE' })\n    customers: Customer[];\n    @ManyToMany(type => Role, role => role.channels, { onDelete: 'CASCADE' })\n    roles: Role[];\n    @ManyToMany(type => StockLocation, stockLocation => stockLocation.channels, { onDelete: 'CASCADE' })\n    stockLocations: StockLocation[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultSearchPluginInitOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the DefaultSearchPluginInitOptions interface, which includes properties for configuring the DefaultSearchPlugin behavior in Vendure. It allows setting options for indexing stock status, buffering updates, and specifying a custom search strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/default-search-plugin-init-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DefaultSearchPluginInitOptions {\n    indexStockStatus?: boolean;\n    bufferUpdates?: boolean;\n    searchStrategy?: SearchStrategy;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job GraphQL Type\nDESCRIPTION: Defines the `Job` GraphQL type, representing a background job within the Vendure job queue system. It includes details such as ID, timestamps (creation, start, settlement), queue name, state, progress, input data, result, error information, settlement status, duration, and retry attempts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_89\n\nLANGUAGE: graphql\nCODE:\n```\ntype Job {\n  id: ID!\n  createdAt: DateTime!\n  startedAt: DateTime\n  settledAt: DateTime\n  queueName: String!\n  state: JobState!\n  progress: Float!\n  data: JSON\n  result: JSON\n  error: JSON\n  isSettled: Boolean!\n  duration: Int!\n  retries: Int!\n  attempts: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueFilterInput Input Type in GraphQL\nDESCRIPTION: Used to construct boolean expressions for filtering search results by FacetValue ID, allowing for AND and OR combinations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueFilterInput {\n  and: ID\n  or: [ID!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalAuthenticationService in TypeScript\nDESCRIPTION: This TypeScript class, ExternalAuthenticationService, is part of the Vendure platform and integrates users from external authentication providers. It includes methods to locate customers and administrators by their external identifiers and create new user records when necessary. Dependencies include TransactionalConnection, RoleService, HistoryService, CustomerService, AdministratorService, and ChannelService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/external-authentication-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExternalAuthenticationService {\n    constructor(connection: TransactionalConnection, roleService: RoleService, historyService: HistoryService, customerService: CustomerService, administratorService: AdministratorService, channelService: ChannelService)\n    findCustomerUser(ctx: RequestContext, strategy: string, externalIdentifier: string, checkCurrentChannelOnly:  = true) => Promise<User | undefined>;\n    findAdministratorUser(ctx: RequestContext, strategy: string, externalIdentifier: string) => Promise<User | undefined>;\n    createCustomerAndUser(ctx: RequestContext, config: {\n            strategy: string;\n            externalIdentifier: string;\n            emailAddress: string;\n            firstName: string;\n            lastName: string;\n            verified?: boolean;\n        }) => Promise<User>;\n    createAdministratorAndUser(ctx: RequestContext, config: {\n            strategy: string;\n            externalIdentifier: string;\n            identifier: string;\n            emailAddress?: string;\n            firstName?: string;\n            lastName?: string;\n            roles: Role[];\n        }) => ;\n    findUser(ctx: RequestContext, strategy: string, externalIdentifier: string) => Promise<User | undefined>;\n    createUser(ctx: RequestContext, config: {\n            strategy: string;\n            externalIdentifier: string;\n        }) => Promise<User>;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Property Filtering Implementation\nDESCRIPTION: Implementation of custom property filtering for product reviews, including schema extension and service configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/paginated-list/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const adminApiExtensions = gql`\ninput ProductReviewFilterParameter {\n  productName: StringOperators\n}\n`;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { InjectConnection } from '@nestjs/typeorm';\nimport { ListQueryBuilder, ListQueryOptions, PaginatedList, RequestContext } from '@vendure/core';\n\nimport { ProductReview } from '../entities/product-review.entity';\n\n@Injectable()\nexport class ProductReviewService {\n    constructor(\n        private listQueryBuilder: ListQueryBuilder,\n    ) {}\n\n    findAll(ctx: RequestContext, options?: ListQueryOptions<ProductReview>): Promise<PaginatedList<ProductReview>> {\n        return this.listQueryBuilder\n            .build(ProductReview, options, {\n                relations: ['product'],\n                ctx,\n                customPropertyMap: {\n                    productName: 'product.name',\n                }\n            })\n            .getManyAndCount()\n            .then(([items, totalItems]) => ({ items, totalItems }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Settling a Refund - GraphQL Mutation - GraphQL\nDESCRIPTION: Defines the settleRefund mutation for settling an existing refund in the system. Requires a SettleRefundInput object providing necessary details, and returns a SettleRefundResult indicating the outcome. This mutation is part of Vendure's administrative API and assumes sufficient permissions; it is typically called after a refund process and may fail if preconditions are unmet.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_100\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\nsettleRefund(input: SettleRefundInput!): SettleRefundResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobEventType in TypeScript for Vendure\nDESCRIPTION: This code defines the JobEventType, which represents the types of events that can be raised by a Job in Vendure's job queue system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype JobEventType = 'progress'\n```\n\n----------------------------------------\n\nTITLE: Defining the Promotion Entity in Vendure with TypeScript\nDESCRIPTION: This TypeScript snippet defines the Promotion class which extends AdjustmentSource and implements multiple interfaces (ChannelAware, SoftDeletable, HasCustomFields, Translatable). It provides structure for promotional campaigns in Vendure, including configurable conditions and actions, period constraints (startsAt, endsAt), and usage limitations (couponCode, usageLimit, perCustomerUsageLimit). The class methods enable the application, testing, activation, and deactivation of promotions. TypeORM decorators (@Column, @ManyToMany, etc.) manage database persistence, while the configuration pattern allows for flexible extension. Dependencies include Vendure's entity and promotion/action types, TypeORM entity decorators, and custom field types. Input types include configuration arrays and context objects, while outputs typically involve promotion adjustments and testing results. The promotion's priorityScore determines evaluation order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/promotion.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Promotion extends AdjustmentSource implements ChannelAware, SoftDeletable, HasCustomFields, Translatable {\n    type = AdjustmentType.PROMOTION;\n    constructor(input?: DeepPartial<Promotion> & {\n            promotionConditions?: Array<PromotionCondition<any>>;\n            promotionActions?: Array<PromotionAction<any>>;\n        })\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    @Column({ type: Date, nullable: true })\n    startsAt: Date | null;\n    @Column({ type: Date, nullable: true })\n    endsAt: Date | null;\n    @Column({ nullable: true })\n    couponCode: string;\n    @Column({ nullable: true })\n    perCustomerUsageLimit: number;\n    @Column({ nullable: true })\n    usageLimit: number;\n    name: LocaleString;\n    description: LocaleString;\n    @OneToMany(type => PromotionTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<Promotion>>;\n    @Column() enabled: boolean;\n    @ManyToMany(type => Channel, channel => channel.promotions)\n    @JoinTable()\n    channels: Channel[];\n    @ManyToMany(type => Order, order => order.promotions)\n    orders: Order[];\n    @Column(type => CustomPromotionFields)\n    customFields: CustomPromotionFields;\n    @Column('simple-json') conditions: ConfigurableOperation[];\n    @Column('simple-json') actions: ConfigurableOperation[];\n    @Column() priorityScore: number;\n    apply(ctx: RequestContext, args: ApplyOrderActionArgs | ApplyOrderItemActionArgs | ApplyShippingActionArgs, state?: PromotionState) => Promise<Adjustment | undefined>;\n    test(ctx: RequestContext, order: Order) => Promise<PromotionTestResult>;\n    activate(ctx: RequestContext, order: Order) => ;\n    deactivate(ctx: RequestContext, order: Order) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringFieldOption Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StringFieldOption, which represents available options for string-based selection fields. It includes the option value and localized labels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_194\n\nLANGUAGE: graphql\nCODE:\n```\ntype StringFieldOption {\n  value: String!\n  label: [LocalizedString!]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin with GraphQL Extensions\nDESCRIPTION: Final plugin configuration that includes the GraphQL schema extensions\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { shopApiExtensions } from './api/api-extensions';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    shopApiExtensions: {\n        schema: shopApiExtensions,\n        resolvers: [],\n    },\n})\nexport class WishlistPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultLogger in Vendure\nDESCRIPTION: Example of how to configure the DefaultLogger in a Vendure server configuration. This snippet shows how to set a custom log level and disable timestamps.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/default-logger.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultLogger, LogLevel, VendureConfig } from '@vendure/core';\n\nexport config: VendureConfig = {\n    // ...\n    logger: new DefaultLogger({ level: LogLevel.Debug, timestamp: false }),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategoryList Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for paginated lists of tax categories, including the total count of items and the items themselves.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_203\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxCategoryList {\nitems: [TaxCategory!]!\ntotalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a PromotionCondition Class in TypeScript\nDESCRIPTION: The PromotionCondition class extends ConfigurableOperationDef to provide functionality for checking if an order meets specific conditions for a promotion to be applied.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-condition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionCondition<T extends ConfigArgs = ConfigArgs, C extends string = string, R extends CheckPromotionConditionResult = any> extends ConfigurableOperationDef<T> {\n    readonly priorityValue: number;\n    code: C\n    constructor(config: PromotionConditionConfig<T, C, R>)\n    check(ctx: RequestContext, order: Order, args: ConfigArg[], promotion: Promotion) => Promise<R>;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Item from Order Mutation\nDESCRIPTION: GraphQL mutation for removing an order line from an existing order using the order line ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation RemoveItemFromOrder($orderLineId: ID!){\n  removeOrderLine(orderLineId: $orderLineId) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Initializer Event Class in TypeScript\nDESCRIPTION: Event class that fires when Vendure completes service initialization. Simple event with no parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nclass InitializerEvent extends VendureEvent {\n    constructor()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanOperators in GraphQL\nDESCRIPTION: This input type provides operators for filtering on a Boolean field. It includes 'eq' for equality and 'isNull' for null checks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ninput BooleanOperators {\n  eq: Boolean\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticate User Mutation in GraphQL\nDESCRIPTION: This mutation authenticates a user using a defined authentication strategy. It requires an 'AuthenticationInput' and optionally a 'rememberMe' boolean to manage session duration through cookies. The result is an 'AuthenticationResult'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { authenticate(input: AuthenticationInput!, rememberMe: Boolean): AuthenticationResult! }\n```\n\n----------------------------------------\n\nTITLE: Updating Product Options in Vendure GraphQL API\nDESCRIPTION: Mutation for updating a ProductOption within a ProductOptionGroup. Accepts an UpdateProductOptionInput and returns the updated ProductOption entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_122\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new ProductOption within a ProductOptionGroup\n\"\"\"\ntype Mutation {\n  updateProductOption(input: UpdateProductOptionInput!): ProductOption!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AlreadyRefundedError Type in GraphQL\nDESCRIPTION: The `AlreadyRefundedError` type indicates an error thrown when an attempt is made to refund an order item that has already been refunded. This type contains an `errorCode`, `message`, and `refundId`, helping developers handle such refund-related errors effectively.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype AlreadyRefundedError {\n  errorCode: ErrorCode!\n  message: String!\n  refundId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sentry Plugin Configuration - TypeScript\nDESCRIPTION: This TypeScript interface defines SentryPluginOptions used to configure the SentryPlugin in Vendure. It extends NodeOptions and includes parameters: 'dsn' (required string for Sentry Data Source Name), 'enableTracing' (optional boolean for enabling Sentry tracing), and 'includeErrorTestMutation' (optional boolean for including test error mutations. Implementers must provide a DSN, and can optionally adjust tracing and test mutation settings. The input is an object adhering to this interface, used directly by the Sentry plugin setup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/sentry-plugin/sentry-plugin-options.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SentryPluginOptions extends NodeOptions {\n    dsn: string;\n    enableTracing?: boolean;\n    includeErrorTestMutation?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegisterRouteComponentOptions Type in TypeScript\nDESCRIPTION: This code snippet defines the RegisterRouteComponentOptions type, which is a complex type used for configuring route components in the Vendure admin UI. It includes various options for customizing the component's behavior and appearance in the admin interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/routes/register-route-component-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RegisterRouteComponentOptions<Component extends any | BaseDetailComponent<Entity>, Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field> = {\n    component: Type<Component> | Component;\n    title?: string;\n    locationId?: string;\n    description?: string;\n    breadcrumb?: BreadcrumbValue;\n    path?: string;\n    query?: T;\n    getBreadcrumbs?: (entity: Exclude<ResultOf<T>[R], 'Query'>) => BreadcrumbValue;\n    entityKey?: Component extends BaseDetailComponent<any> ? R : string;\n    variables?: T extends TypedDocumentNode<any, infer V> ? Omit<V, 'id'> : never;\n    routeConfig?: Route;\n} & (Component extends BaseDetailComponent<any> ? { entityKey: R } : unknown)\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Money Scalar Type\nDESCRIPTION: This configuration update for graphql-code-generator defines the new Money scalar type to be interpreted as a number type for generated TypeScript interfaces, necessary for handling monetary values like Order.totalWithTax or ProductVariant.priceWithTax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/storefront-migration.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\ndocuments:\n  - \"app/**/*.{ts,tsx}\"\n  - \"!app/generated/*\"\n+config:\n+  scalars:\n+    Money: number\ngenerates:\n  # ... etc\n```\n\n----------------------------------------\n\nTITLE: Running Vendure Create with npx\nDESCRIPTION: Basic command to scaffold a new Vendure application using npx. This requires Node.js v18+ to be installed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/create/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @vendure/create my-app\n```\n\n----------------------------------------\n\nTITLE: Defining GuestCheckoutError GraphQL Type\nDESCRIPTION: Defines the GuestCheckoutError type for errors related to guest checkout operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_43\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned when attempting to set the Customer on a guest checkout when the configured GuestCheckoutStrategy does not allow it.\"\"\"\ntype GuestCheckoutError {\n  errorCode: ErrorCode!\n  message: String!\n  errorDetail: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddNoteToOrderInput in GraphQL\nDESCRIPTION: Defines the input structure for adding a note to a specific order. Requires the order's `id`, the `note` text, and a boolean `isPublic` flag to determine if the note is visible to the customer.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ninput AddNoteToOrderInput {\n  id: ID!\n  note: String!\n  isPublic: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying an order by code for guest users in GraphQL\nDESCRIPTION: This query retrieves an Order using the order code, specifically for guest users (non-authenticated). It only returns data if the order is queried within 2 hours of being placed, preventing unauthorized data access. The 'code' parameter is required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns an Order based on the order `code`. For guest Orders (i.e. Orders placed by non-authenticated Customers) this query will only return the Order within 2 hours of the Order being placed. This allows an Order confirmation screen to be shown immediately after completion of a guest checkout, yet prevents security risks of allowing general anonymous access to Order data.\n\"\"\"\ntype Query {\n    orderByCode(code: String!): Order\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID Field Comparison Operators - GraphQL - GraphQL\nDESCRIPTION: Declares the IDOperators input for filtering by single IDs using equality, list, and nullability checks. Supported operations: eq (equal), notEq (not equal), in, notIn, and isNull; all work on String values representing IDs. Commonly used in filter parameters for identifying entities by their identifiers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on an ID field\n\"\"\"\ninput IDOperators {\n  eq: String\n  notEq: String\n  in: [String!]\n  notIn: [String!]\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: EntityMetadataModifier Type Definition in TypeScript\nDESCRIPTION: EntityMetadataModifier is a type definition for functions that can manipulate TypeORM entity metadata before the database schema is generated during bootstrap.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype EntityMetadataModifier = (metadata: MetadataArgsStorage) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using ProcessContext in Services\nDESCRIPTION: Demonstrates how to use ProcessContext to determine whether code is running in server or worker process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ProcessContext } from '@vendure/core';\n\n@Injectable()\nexport class MyService implements OnApplicationBootstrap {\n    constructor(private processContext: ProcessContext) {}\n\n    onApplicationBootstrap() {\n        if (this.processContext.isServer) {\n            // code which will only execute when running in\n            // the server process\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Multiple Products in GraphQL\nDESCRIPTION: GraphQL query for retrieving a list of products. It accepts ProductListOptions as a parameter and returns a ProductList object that contains the matching products and pagination information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  products(options: ProductListOptions): ProductList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HydrateOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the HydrateOptions interface used to control entity hydration in Vendure. It specifies relations to hydrate and an option for applying ProductVariant prices.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/hydrate-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HydrateOptions<Entity extends VendureEntity> {\n    relations: Array<EntityRelationPaths<Entity>>;\n    applyProductVariantPrices?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Option Groups from Products in GraphQL\nDESCRIPTION: Defines a mutation to remove an OptionGroup from a Product, with safeguards against removing groups in use by ProductVariants. Includes a 'force' parameter to override safeguards.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_83\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeOptionGroupFromProduct(productId: ID!, optionGroupId: ID!, force: Boolean): RemoveOptionGroupFromProductResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Global Settings in Vendure GraphQL API\nDESCRIPTION: Mutation for updating the global settings of the Vendure instance. Accepts an UpdateGlobalSettingsInput object and returns an UpdateGlobalSettingsResult with the updated settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_118\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateGlobalSettings(input: UpdateGlobalSettingsInput!): UpdateGlobalSettingsResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Bulk Action in Vendure Admin UI\nDESCRIPTION: This example demonstrates how to register a custom bulk action for the product list view that sends selected products to a translation service. It shows integration with ModalService to confirm the action and uses a custom service to handle the translation functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/register-bulk-action.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModalService, registerBulkAction, SharedModule } from '@vendure/admin-ui/core';\nimport { ProductDataTranslationService } from './product-data-translation.service';\n\nexport default [\n    ProductDataTranslationService,\n    registerBulkAction({\n        location: 'product-list',\n        label: 'Send to translation service',\n        icon: 'language',\n        onClick: ({ injector, selection }) => {\n            const modalService = injector.get(ModalService);\n            const translationService = injector.get(ProductDataTranslationService);\n            modalService\n                .dialog({\n                    title: `Send ${selection.length} products for translation?`,\n                    buttons: [\n                        { type: 'secondary', label: 'cancel' },\n                        { type: 'primary', label: 'send', returnValue: true },\n                    ],\n                })\n                .subscribe(response => {\n                    if (response) {\n                        translationService.sendForTranslation(selection.map(item => item.productId));\n                    }\n                });\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodService Class in TypeScript\nDESCRIPTION: This code snippet defines the PaymentMethodService class with its constructor and various methods for managing payment methods in Vendure. It includes operations for CRUD, channel assignment, eligibility checks, and retrieving payment method handlers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/payment-method-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PaymentMethodService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, roleService: RoleService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, configArgService: ConfigArgService, channelService: ChannelService, customFieldRelationService: CustomFieldRelationService, translatableSaver: TranslatableSaver, translator: TranslatorService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<PaymentMethod>, relations: RelationPaths<PaymentMethod> = []) => Promise<PaginatedList<PaymentMethod>>;\n    findOne(ctx: RequestContext, paymentMethodId: ID, relations: RelationPaths<PaymentMethod> = []) => Promise<PaymentMethod | undefined>;\n    create(ctx: RequestContext, input: CreatePaymentMethodInput) => Promise<PaymentMethod>;\n    update(ctx: RequestContext, input: UpdatePaymentMethodInput) => Promise<PaymentMethod>;\n    delete(ctx: RequestContext, paymentMethodId: ID, force: boolean = false) => Promise<DeletionResponse>;\n    assignPaymentMethodsToChannel(ctx: RequestContext, input: AssignPaymentMethodsToChannelInput) => Promise<Array<Translated<PaymentMethod>>>;\n    removePaymentMethodsFromChannel(ctx: RequestContext, input: RemovePaymentMethodsFromChannelInput) => Promise<Array<Translated<PaymentMethod>>>;\n    getPaymentMethodEligibilityCheckers(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getPaymentMethodHandlers(ctx: RequestContext) => ConfigurableOperationDefinition[];\n    getEligiblePaymentMethods(ctx: RequestContext, order: Order) => Promise<PaymentMethodQuote[]>;\n    getMethodAndOperations(ctx: RequestContext, method: string) => Promise<{\n        paymentMethod: PaymentMethod;\n        handler: PaymentMethodHandler;\n        checker: PaymentMethodEligibilityChecker | null;\n    }>;\n    getActivePaymentMethods(ctx: RequestContext) => Promise<PaymentMethod[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Payment Input - GraphQL\nDESCRIPTION: Defines an input type for creating manual payments against an order. It includes the required order ID and method, and optional transactionId and metadata. Requires that IDs and method strings are provided and that the API accepts manual payments via this structured input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_100\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ManualPaymentInput {\n  orderId: ID!\n  method: String!\n  transactionId: String\n  metadata: JSON\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AdminUiPlugin in Vendure Configuration (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add the AdminUiPlugin to the Vendure configuration. It initializes the plugin with a specified port for serving the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/admin-ui-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n\nconst config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    AdminUiPlugin.init({ port: 3002 }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: React Provider Registration\nDESCRIPTION: Registration of the custom form input component in React providers configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerReactFormInputComponent } from '@vendure/admin-ui/react';\nimport { SliderControl } from './components/SliderFormInput';\n\nexport default [\n    registerReactFormInputComponent('slider-form-input', SliderFormInput),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining TranslationEntity Type in TypeScript\nDESCRIPTION: The TranslationEntity type extends VendureEntity and includes properties for id, languageCode, slug, and base. It represents a translated entity in the Vendure system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/slug-validator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TranslationEntity = VendureEntity & {\n    id: ID;\n    languageCode: LanguageCode;\n    slug: string;\n    base: any;\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultGuestCheckoutStrategy Class Definition\nDESCRIPTION: Class definition for DefaultGuestCheckoutStrategy, implementing the GuestCheckoutStrategy interface. It includes methods for initialization and setting a customer for an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-guest-checkout-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultGuestCheckoutStrategy implements GuestCheckoutStrategy {\n    init(injector: Injector) => ;\n    constructor(options?: DefaultGuestCheckoutStrategyOptions)\n    setCustomerForOrder(ctx: RequestContext, order: Order, input: CreateCustomerInput) => Promise<ErrorResultUnion<SetCustomerForOrderResult, Customer>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Optimized ShippingEligibilityChecker with shouldRunCheck - Vendure - TypeScript\nDESCRIPTION: This code snippet demonstrates how to instantiate a new ShippingEligibilityChecker and implement the optional shouldRunCheck method in Vendure. The shouldRunCheck function returns a JSON-compatible value based on the order's shipping address; the expensive eligibility check will only re-run when this value changes, thus improving performance for costly operations. Required dependencies include the ShippingEligibilityChecker class from Vendure; key parameters are the context, order, and optional config arguments as per the checker definition. The function must return a value serializable to JSON, and is primarily used to minimize unnecessary invocations of the main check function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/should-run-check-fn.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst optimizedChecker = new ShippingEligibilityChecker({\n  code: 'example',\n  description: [],\n  args: {},\n  check: async (ctx, order) => {\n    // some slow, expensive function here\n  },\n  shouldRunCheck: (ctx, order) => {\n    // Will only run the `check()` function any time\n    // the shippingAddress object has changed.\n    return order.shippingAddress;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating TaxRate in GraphQL\nDESCRIPTION: This mutation type is used to update an existing TaxRate. It requires a UpdateTaxRateInput object and returns the updated TaxRate object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_135\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateTaxRate(input: UpdateTaxRateInput!): TaxRate!\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Addresses - GraphQL Query\nDESCRIPTION: GraphQL query to fetch all addresses associated with the active customer, including shipping and billing addresses.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetCustomerAddresses {\n  activeCustomer {\n    id\n    addresses {\n      id\n      fullName\n      company\n      streetLine1\n      streetLine2\n      city\n      province\n      postalCode\n      country {\n        code\n        name\n      }\n      phoneNumber\n      defaultShippingAddress\n      defaultBillingAddress\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQL Schema for OrderLine in Vendure\nDESCRIPTION: Adds a new 'isSubscription' boolean field to the OrderLine type in the GraphQL schema using gql tag with schema extensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/dataloaders/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const shopApiExtensions = gql`\n    extend type OrderLine {\n        isSubscription: Boolean!\n    }\n`\n```\n\n----------------------------------------\n\nTITLE: Defining CouponCodeLimitError Type in GraphQL\nDESCRIPTION: Defines the `CouponCodeLimitError` GraphQL type, intended to be returned when a provided coupon code has reached its usage limit. It includes a standard `errorCode` and `message`, along with the specific `couponCode` that caused the error and the `limit` that was exceeded.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_38\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if the provided coupon code is invalid\n\"\"\"\ntype CouponCodeLimitError {\nerrorCode: ErrorCode!\n\nmessage: String!\n\ncoulonCode: String!\n\nlimit: Int!\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetImportStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for AssetImportStrategy that extends InjectableStrategy. It defines a method for getting a readable stream from an asset path, which can be used to import assets from local filesystem, remote URLs, or custom sources like S3 buckets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/asset-import-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AssetImportStrategy extends InjectableStrategy {\n    getStreamFromPath(assetPath: string): Readable | Promise<Readable>;\n}\n```\n\n----------------------------------------\n\nTITLE: Collections Query with Parent ID\nDESCRIPTION: GraphQL query that includes the parentId field for building hierarchical structures.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/navigation-menu/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetAllCollections {\n  collections(options: { topLevelOnly: true }) {\n    items {\n      id\n      slug\n      name\n      parentId\n      featuredAsset {\n        id\n        preview\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field Columns to HTML Template\nDESCRIPTION: This HTML snippet shows how to integrate custom field columns into a data table in the Vendure Admin UI. It uses the vdr-dt2-custom-field-column component to display custom fields in the list view.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-list-views/index.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<vdr-data-table-2\n    id=\"review-list\"\n    [items]=\"items$ | async\"\n    [itemsPerPage]=\"itemsPerPage$ | async\"\n    [totalItems]=\"totalItems$ | async\"\n    [currentPage]=\"currentPage$ | async\"\n    [filters]=\"filters\"\n    (pageChange)=\"setPageNumber($event)\"\n    (itemsPerPageChange)=\"setItemsPerPage($event)\"\n>\n    <!-- rest of data table omitted for brevity -->\n    // highlight-start\n    <vdr-dt2-custom-field-column\n            *ngFor=\"let customField of customFields\"\n            [customField]=\"customField\"\n            [sorts]=\"sorts\"\n    />\n    // highlight-end\n</vdr-data-table-2>\n```\n\n----------------------------------------\n\nTITLE: ModalService Class Definition in TypeScript\nDESCRIPTION: Main service class for creating and managing modal dialogs in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/modal-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ModalService {\n    constructor(overlayHostService: OverlayHostService)\n    fromComponent(component: Type<T> & Type<Dialog<R>>, options?: ModalOptions<T>) => Observable<R | undefined>;\n    dialog(config: DialogConfig<T>) => Observable<T | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Order Notes in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing order note. Requires an UpdateOrderNoteInput object and returns a HistoryEntry representing the updated note.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_119\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateOrderNote(input: UpdateOrderNoteInput!): HistoryEntry!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Promotion by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a Promotion by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_25\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  promotion(id: ID!): Promotion\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductList Type in GraphQL\nDESCRIPTION: Defines the `ProductList` GraphQL object type. This type represents a paginated list of `Product` objects, typically returned from searches or collection views. It contains the list of `items` (Products) for the current page and the `totalItems` count across all pages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_89\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductList {\n  items: [Product!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Shared Angular Module for Admin UI Extension (TypeScript)\nDESCRIPTION: Defines the 'AdminUiExtensionSharedModule' interface for configuring shared NgModules to be imported into the main AppModule of the Vendure Admin UI. Requires specifying the file name and module class name, and sets 'type' to 'shared'. Used for global UI extensions like custom forms or navigation enhancements. Inputs are explicit strings for module identification, with direct import semantics.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AdminUiExtensionSharedModule {\n    type: 'shared';\n    ngModuleFileName: string;\n    ngModuleName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: ShippingCalculationResult Interface Definition\nDESCRIPTION: Interface defining the structure of shipping calculation results, including price, tax information, and optional metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-calculator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ShippingCalculationResult {\n    price: number;\n    priceIncludesTax: boolean;\n    taxRate: number;\n    metadata?: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CombinationModeFormInputComponent in TypeScript\nDESCRIPTION: A special input component for displaying the \"Combination mode\" AND/OR toggle. It implements FormInputComponent and OnInit interfaces, and includes methods for setting combination modes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass CombinationModeFormInputComponent implements FormInputComponent, OnInit {\n    static readonly id: DefaultFormComponentId = 'combination-mode-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'combination-mode-form-input'>;\n    selectable$: Observable<boolean>;\n    constructor(configurableInputComponent: ConfigurableInputComponent)\n    ngOnInit() => ;\n    setCombinationModeAnd() => ;\n    setCombinationModeOr() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxLine Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tax lines which describe individual tax components applied to items or orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_204\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxLine {\ndescription: String!\ntaxRate: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCustomerInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a customer. It requires first name, last name, and email address, with optional fields for title and phone number.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_47\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateCustomerInput {\n  title: String\n  firstName: String!\n  lastName: String!\n  phoneNumber: String\n  emailAddress: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: GlobalSettingsService Class Definition in TypeScript\nDESCRIPTION: Defines the GlobalSettingsService class with its constructor and methods for managing global settings. The service provides functionality to get and update global settings with proper type definitions and dependencies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/global-settings-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GlobalSettingsService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, customFieldRelationService: CustomFieldRelationService, eventBus: EventBus, requestCache: RequestContextCacheService)\n    getSettings(ctx: RequestContext) => Promise<GlobalSettings>;\n    updateSettings(ctx: RequestContext, input: UpdateGlobalSettingsInput) => Promise<GlobalSettings>;\n}\n```\n\n----------------------------------------\n\nTITLE: PaymentOptions Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for PaymentOptions which configures payment-related functionality in Vendure, including payment method handlers, eligibility checkers, and process definitions for payments and refunds.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaymentOptions {\n    paymentMethodHandlers: PaymentMethodHandler[];\n    paymentMethodEligibilityCheckers?: PaymentMethodEligibilityChecker[];\n    customPaymentProcess?: Array<PaymentProcess<any>>;\n    process?: Array<PaymentProcess<any>>;\n    refundProcess?: Array<RefundProcess<any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TaxLineCalculationStrategy in TypeScript\nDESCRIPTION: The DefaultTaxLineCalculationStrategy class implements the TaxLineCalculationStrategy interface to provide the default tax calculation behavior. It calculates a single tax line for each order line based on the applicable tax rate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/default-tax-line-calculation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultTaxLineCalculationStrategy implements TaxLineCalculationStrategy {\n    calculate(args: CalculateTaxLinesArgs) => TaxLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MysqlSearchStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the MysqlSearchStrategy class, which implements the SearchStrategy interface. It provides methods for initializing the strategy, retrieving facet value IDs, collection IDs, search results, and total count based on search input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/mysql-search-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MysqlSearchStrategy implements SearchStrategy {\n    init(injector: Injector) => ;\n    getFacetValueIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<Map<ID, number>>;\n    getCollectionIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<Map<ID, number>>;\n    getSearchResults(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<SearchResult[]>;\n    getTotalCount(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stock Movements with GraphQL in Vendure Admin API\nDESCRIPTION: GraphQL query to fetch stock levels and movement history for a product variant. The query returns variant details, stock levels across locations, and a list of stock movements with their type, quantity, and creation timestamp.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/stock-control/index.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetStockMovements {\n    productVariant(id: 1) {\n        id\n        name\n        stockLevels {\n            stockLocation {\n                name\n            }\n            stockOnHand\n            stockAllocated\n        }\n        stockMovements {\n            items {\n                ...on StockMovement {\n                    createdAt\n                    type\n                    quantity\n                }\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"productVariant\": {\n      \"id\": \"1\",\n      \"name\": \"Laptop 13 inch 8GB\",\n      \"stockLevels\": [\n        {\n          \"stockLocation\": {\n            \"name\": \"Default Stock Location\"\n          },\n          \"stockOnHand\": 100,\n          \"stockAllocated\": 0\n        }\n      ],\n      \"stockMovements\": {\n        \"items\": [\n          {\n            \"createdAt\": \"2023-07-13T13:21:10.000Z\",\n            \"type\": \"ADJUSTMENT\",\n            \"quantity\": 100\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ActiveOrderService Class Definition in TypeScript\nDESCRIPTION: Definition of the ActiveOrderService class which handles active order management. Includes constructor and methods for getting orders from context and retrieving active orders based on strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/active-order-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ActiveOrderService {\n    constructor(sessionService: SessionService, orderService: OrderService, connection: TransactionalConnection, configService: ConfigService)\n    getOrderFromContext(ctx: RequestContext) => Promise<Order | undefined>;\n    getOrderFromContext(ctx: RequestContext, createIfNotExists: true) => Promise<Order>;\n    getOrderFromContext(ctx: RequestContext, createIfNotExists:  = false) => Promise<Order | undefined>;\n    getActiveOrder(ctx: RequestContext, input: { [strategyName: string]: any } | undefined) => Promise<Order | undefined>;\n    getActiveOrder(ctx: RequestContext, input: { [strategyName: string]: any } | undefined, createIfNotExists: true) => Promise<Order>;\n    getActiveOrder(ctx: RequestContext, input: { [strategyName: string]: Record<string, any> | undefined } | undefined, createIfNotExists:  = false) => Promise<Order | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultStockDisplayStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the DefaultStockDisplayStrategy class, which implements the StockDisplayStrategy interface. It provides a method to determine the stock level display based on the saleable stock level.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/default-stock-display-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultStockDisplayStrategy implements StockDisplayStrategy {\n    constructor(lowStockLevel: number = 2)\n    getStockLevel(ctx: RequestContext, productVariant: ProductVariant, saleableStockLevel: number) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: EmailEventHandlerWithAsyncData Class Definition in TypeScript\nDESCRIPTION: Class definition for handling email events with async data loading. It extends EmailEventHandler and adds functionality to load data asynchronously before processing email events. The class takes a data loading function, event listener, and event type as constructor parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler-with-async-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmailEventHandlerWithAsyncData<Data, T extends string = string, InputEvent extends EventWithContext = EventWithContext, Event extends EventWithAsyncData<InputEvent, Data> = EventWithAsyncData<InputEvent, Data>> extends EmailEventHandler<T, Event> {\n    constructor(_loadDataFn: LoadDataFn<InputEvent, Data>, listener: EmailEventListener<T>, event: Type<InputEvent>)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategory Entity with TypeORM in TypeScript\nDESCRIPTION: This snippet defines the TaxCategory entity class for the Vendure application using TypeScript and TypeORM. The class specifies properties for the category name, a boolean flag for default status, custom fields, and relationships to associated ProductVariant and TaxRate entities. Dependencies include TypeORM decorators (@Column, @OneToMany) and types such as VendureEntity, HasCustomFields, and related entity classes. Input parameters include an optional deep-partial object for flexible instantiation, and the class outputs an entity instance with appropriate fields and ORM mappings; limitations depend on the custom field definitions and database schema.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/tax-category.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TaxCategory extends VendureEntity implements HasCustomFields {\n    constructor(input?: DeepPartial<TaxCategory>)\n    @Column() name: string;\n    @Column({ default: false }) isDefault: boolean;\n    @Column(type => CustomTaxCategoryFields)\n    customFields: CustomTaxCategoryFields;\n    @OneToMany(type => ProductVariant, productVariant => productVariant.taxCategory)\n    productVariants: ProductVariant[];\n    @OneToMany(type => TaxRate, taxRate => taxRate.category)\n    taxRates: TaxRate[];\n}\n```\n\n----------------------------------------\n\nTITLE: Adjust Order Line Mutation in GraphQL\nDESCRIPTION: This mutation adjusts a specific order line within an existing order. It requires 'orderLineId' and 'quantity' to identify the order line and the desired quantity. The result is 'UpdateOrderItemsResult'. If custom fields are defined on the 'OrderLine', these can be adjusted with the 'customFields' argument.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_2\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { adjustOrderLine(orderLineId: ID!, quantity: Int!): UpdateOrderItemsResult! }\n```\n\n----------------------------------------\n\nTITLE: Using Api Decorator in Vendure Resolver Query\nDESCRIPTION: This snippet demonstrates how to use the Api decorator in a Vendure resolver query to determine the API type (admin or shop) and conditionally execute code based on that type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/api-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Query()\ngetAdministrators(@Api() apiType: ApiType) {\n  if (apiType === 'admin') {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Customer For Order Mutation in GraphQL for Vendure\nDESCRIPTION: Associates a Customer with the current Order. This mutation is required only if the Customer is not currently logged in. Takes customer details as input and returns a SetCustomerForOrderResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setCustomerForOrder(input: CreateCustomerInput!): SetCustomerForOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Channels in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple Channels at once. Takes an array of Channel IDs and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteChannels(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Surcharge Entity with Decorators - Vendure TypeScript\nDESCRIPTION: This TypeScript class snippet, extending VendureEntity, defines the Surcharge entity for Vendure. It includes properties for description, pricing, tax details, SKU, and references to Order and OrderModification entities. Decorators like @Column, @ManyToOne, @Index, and @Money establish fields, relationships, and database behaviors. Requires a Working Vendure TypeScript project with TypeORM and relevant TypeScript decorators enabled. Inputs can be optionally initialized using DeepPartial<Surcharge>. Output is a Surcharge entity instance with all mapped database fields and relations. This code assumes all referenced decorators and entities are imported and configured properly.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/surcharge.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Surcharge extends VendureEntity {\n    constructor(input?: DeepPartial<Surcharge>)\n    @Column()\n    description: string;\n    @Money()\n    listPrice: number;\n    @Column()\n    listPriceIncludesTax: boolean;\n    @Column()\n    sku: string;\n    @Column('simple-json')\n    taxLines: TaxLine[];\n    @Index()\n    @ManyToOne(type => Order, order => order.surcharges, { onDelete: 'CASCADE' })\n    order: Order;\n    @Index()\n    @ManyToOne(type => OrderModification, orderModification => orderModification.surcharges)\n    orderModification: OrderModification;\n    price: number\n    priceWithTax: number\n    taxRate: number\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Vendure Emails using `setMetadata` in TypeScript\nDESCRIPTION: This code demonstrates how to use the `setMetadata` method on an `EmailEventListener` instance in Vendure. The method takes a function that receives the triggering event (e.g., `OrderStateTransitionEvent`) and returns an object containing metadata. This metadata, such as the event type and related order ID, is attached to the email and included in the subsequent `EmailSendEvent`, allowing for tracking or conditional logic based on the email's context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nnew EmailEventListener(EventType.ORDER_CONFIRMATION)\n  .on(OrderStateTransitionEvent)\n  .setMetadata(event => ({\n    type: EventType.ORDER_CONFIRMATION,\n    orderId: event.order.id,\n  }));\n```\n```\n\n----------------------------------------\n\nTITLE: Defining JsonCompatible Type in TypeScript\nDESCRIPTION: A TypeScript utility type that recursively checks if a type T is JSON-compatible. It maps through object properties and validates each property's JSON compatibility. Based on the Microsoft TypeScript GitHub discussion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/json-compatible.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype JsonCompatible<T> = {\n    [P in keyof T]: T[P] extends Json\n        ? T[P]\n        : Pick<T, P> extends Required<Pick<T, P>>\n          ? never\n          : JsonCompatible<T[P]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Concurrency in BullMQJobQueuePlugin\nDESCRIPTION: This example shows how to set the concurrency option for the BullMQJobQueuePlugin. It increases the number of jobs that can be processed simultaneously to 10.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  plugins: [\n    BullMQJobQueuePlugin.init({\n      workerOptions: {\n        concurrency: 10,\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining OnTransitionEndFn Type in TypeScript\nDESCRIPTION: The OnTransitionEndFn type defines a function signature for handlers called after a transition has taken place. It can return void or a Promise/Observable of void.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/state-machine-config.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype OnTransitionEndFn<T extends string, Data> = (\n    fromState: T,\n    toState: T,\n    data: Data,\n) => void | Promise<void> | Observable<void>\n```\n\n----------------------------------------\n\nTITLE: Defining TagList Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for representing a paginated list of tags. Contains fields for the array of Tag items and the total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_138\n\nLANGUAGE: graphql\nCODE:\n```\ntype TagList {\n  items: [Tag!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Options in Vendure Config\nDESCRIPTION: Configuration for Vendure's authentication options, enabling both bearer token and cookie-based authentication methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    authOptions: {\n        // highlight-next-line\n        tokenMethod: ['bearer', 'cookie'],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultTaxZoneStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the DefaultTaxZoneStrategy class which implements the TaxZoneStrategy interface. It includes a method to determine the tax zone based on the channel's default tax zone.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/default-tax-zone-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultTaxZoneStrategy implements TaxZoneStrategy {\n    determineTaxZone(ctx: RequestContext, zones: Zone[], channel: Channel, order?: Order) => Zone;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentTransitionData Interface in TypeScript\nDESCRIPTION: This code snippet defines the PaymentTransitionData interface, which includes RequestContext, Payment, and Order properties. It is used to pass data to the onStateTransitionStart function when configuring a new PaymentMethodHandler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-transition-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaymentTransitionData {\n    ctx: RequestContext;\n    payment: Payment;\n    order: Order;\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Level Override Example\nDESCRIPTION: Shows how to override specific fields in existing types with custom resolver implementations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext, Product } from '@vendure/core';\n\n@Resolver('Product')\nexport class FieldOverrideExampleResolver {\n\n    @ResolveField()\n    description(@Ctx() ctx: RequestContext, @Parent() product: Product) {\n        return this.wrapInFormatting(ctx, product.id);\n    }\n\n    private wrapInFormatting(ctx: RequestContext, id: ID): string {\n        // implementation omitted, but wraps the description\n        // text in some special formatting required by the storefront\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting PermissionDefinition in Vendure with TypeScript\nDESCRIPTION: The code snippet demonstrates how to create a new PermissionDefinition instance called 'sync'. This definition allows controlling access to operations that sync inventory stock levels through the Admin API. It requires the Vendure framework as a prerequisite.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sync = new PermissionDefinition({\n  name: 'SyncInventory',\n  description: 'Allows syncing stock levels via Admin API'\n});\n```\n\n----------------------------------------\n\nTITLE: Link Component TypeScript Function Signature\nDESCRIPTION: The type signature for the Link component, which accepts props including href for the target route and any other standard HTML anchor properties. It uses PropsWithChildren to allow for child elements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/link.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Link(props: PropsWithChildren<{ href: string; [props: string]: any }>): void\n```\n\n----------------------------------------\n\nTITLE: Defining the FulfillmentTransitionData Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for `FulfillmentTransitionData`. It specifies the data passed to state transition handlers within Vendure's FulfillmentStateMachine. The interface includes the `RequestContext` (`ctx`), an array of `Order` objects (`orders`), and the specific `Fulfillment` object undergoing the state transition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-transition-data.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface FulfillmentTransitionData {\n    ctx: RequestContext;\n    orders: Order[];\n    fulfillment: Fulfillment;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnauthorizedError Class in TypeScript\nDESCRIPTION: This error class extends I18nError for handling authentication-related errors, specifically when user credentials are invalid. It initializes without parameters and serves to indicate unauthorized access attempts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass UnauthorizedError extends I18nError {\n    constructor()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ErrorResult Handling with TypeScript Switch Statement\nDESCRIPTION: Demonstrates how to handle different types of coupon code errors using a switch statement based on the __typename of the result. This approach ensures all possible error cases are handled explicitly.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await query(APPLY_COUPON_CODE, { code: 'INVALID-CODE' });\n\nswitch (result.applyCouponCode.__typename) {\n    case 'Order':\n        // handle success\n        break;\n    case 'CouponCodeExpiredError':\n        // handle expired code\n        break;\n    case 'CouponCodeInvalidError':\n        // handle invalid code\n        break;\n    case 'CouponCodeLimitError':\n        // handle limit error\n        break;\n    default:\n        // any other ErrorResult can be handled with a generic error message\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Identifier Change Event in TypeScript\nDESCRIPTION: Event class that fires when a user changes their identifier (email). Extends VendureEvent and captures old identifier information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass IdentifierChangeEvent extends VendureEvent {\n    constructor(ctx: RequestContext, user: User, oldIdentifier: string)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Injector Class in TypeScript\nDESCRIPTION: This snippet defines the Injector class with its constructor and two methods: get and resolve. It wraps the Nestjs ModuleRef to enable injection of providers into objects outside the Nestjs module system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/injector.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Injector {\n    constructor(moduleRef: ModuleRef)\n    get(typeOrToken: Type<T> | string | symbol) => R;\n    resolve(typeOrToken: Type<T> | string | symbol, contextId?: ContextId) => Promise<R>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodMissingError GraphQL Type\nDESCRIPTION: GraphQL schema definition for an error type that occurs when a call to modifyOrder fails to include a paymentMethod when the price has increased as a result of changes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_127\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when a call to modifyOrder fails to include a paymentMethod even\nthough the price has increased as a result of the changes.\n\"\"\"\ntype PaymentMethodMissingError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom GraphQL Scalars\nDESCRIPTION: Shows how to define and implement custom GraphQL scalar types in a Vendure plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLScalarType} from 'graphql';\nimport { GraphQLEmailAddress } from 'graphql-scalars';\n\nconst FooScalar = new GraphQLScalarType({\n  name: 'Foo',\n  description: 'A test scalar',\n  serialize(value) {\n    // ...\n  },\n  parseValue(value) {\n    // ...\n  },\n});\n\n@VendurePlugin({\n  imports: [PluginCommonModule],\n  shopApiExtensions: {\n    schema: gql`\n      scalar Foo\n      scalar EmailAddress\n    `,\n    scalars: { \n      Foo: FooScalar,\n      EmailAddress: GraphQLEmailAddress,\n    },\n  },\n})\nexport class CustomScalarsPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Splitting Plugins Configuration Across Files in Vendure\nDESCRIPTION: Example of separating plugin configurations into a dedicated file to manage a large configuration more effectively.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AssetServerPlugin, DefaultJobQueuePlugin, VendureConfig } from '@vendure/core';\nimport { ElasticsearchPlugin } from '@vendure/elasticsearch-plugin';\nimport { EmailPlugin } from '@vendure/email-plugin';\nimport { CustomPlugin } from './plugins/custom-plugin';\n\nexport const plugins: VendureConfig['plugins'] = [\n  CustomPlugin,\n  AssetServerPlugin.init({\n      route: 'assets',\n      assetUploadDir: path.join(__dirname, 'assets'),\n      port: 5002,\n  }),\n  DefaultJobQueuePlugin,\n  ElasticsearchPlugin.init({\n      host: 'localhost',\n      port: 9200,\n  }),\n  EmailPlugin.init({\n    // ...lots of lines of config\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Facets in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple Facets at once. Takes an array of Facet IDs and optional force parameter, and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_47\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteFacets(ids: [ID!]!, force: Boolean): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Stripe Customer Creation in Vendure\nDESCRIPTION: This snippet demonstrates how to provide additional parameters for Stripe customer creation. It includes the customer's billing address information when creating a new Stripe customer.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityHydrator, VendureConfig } from '@vendure/core';\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    StripePlugin.init({\n      storeCustomersInStripe: true,\n      customerCreateParams: async (injector, ctx, order) => {\n        const entityHydrator = injector.get(EntityHydrator);\n        const customer = order.customer;\n        await entityHydrator.hydrate(ctx, customer, { relations: ['addresses'] });\n        const defaultBillingAddress = customer.addresses.find(a => a.defaultBillingAddress) ?? customer.addresses[0];\n        return {\n          address: {\n              line1: defaultBillingAddress.streetLine1 || order.shippingAddress?.streetLine1,\n              postal_code: defaultBillingAddress.postalCode || order.shippingAddress?.postalCode,\n              city: defaultBillingAddress.city || order.shippingAddress?.city,\n              state: defaultBillingAddress.province || order.shippingAddress?.province,\n              country: defaultBillingAddress.country.code || order.shippingAddress?.countryCode,\n          },\n        },\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategoryListOptions Input Type in GraphQL\nDESCRIPTION: Input type for paginating, sorting, and filtering tax categories in the Vendure e-commerce platform. Includes options for pagination with skip and take parameters, sorting by various properties, and filtering with logical operators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_164\n\nLANGUAGE: graphql\nCODE:\n```\ninput TaxCategoryListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: TaxCategorySortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: TaxCategoryFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Group by ID - GraphQL SDL - GraphQL\nDESCRIPTION: The 'customerGroup' query retrieves a CustomerGroup entity by its unique ID. Intended for managing group-based customer distinctions in e-commerce. Input is an ID, and the result is the corresponding CustomerGroup or null if not found.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  customerGroup(id: ID!): CustomerGroup\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Image Transformation Parameters in TypeScript\nDESCRIPTION: The `ImageTransformParameters` interface specifies the parameters used when transforming images, including width, height, mode, quality, format, focal points (fpx/fpy), and a preset. Each parameter is optional, denoted by being a union type with 'undefined', supporting flexible image modifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/image-transform-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ImageTransformParameters {\\n    width: number | undefined;\\n    height: number | undefined;\\n    mode: ImageTransformMode | undefined;\\n    quality: number | undefined;\\n    format: ImageTransformFormat | undefined;\\n    fpx: number | undefined;\\n    fpy: number | undefined;\\n    preset: string | undefined;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomDetailComponent Interface in TypeScript for Vendure Admin UI\nDESCRIPTION: This interface allows arbitrary Angular components to be embedded in entity detail pages. It requires implementing an entity$ Observable and a detailForm FormGroup to interact with the entity being edited.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/custom-detail-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomDetailComponent {\n    entity$: Observable<any>;\n    detailForm: UntypedFormGroup;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vendure Package Versions in package.json\nDESCRIPTION: Example showing how to update Vendure package versions in package.json from version 1.1.5 to 1.2.0. This demonstrates the pattern for updating all @vendure/* packages which should always be updated to the same version.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/updating/index.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n{\n  // ...\n  \"dependencies\": {\n-    \"@vendure/common\": \"1.1.5\",\n+    \"@vendure/common\": \"1.2.0\",\n-    \"@vendure/core\": \"1.1.5\",\n+    \"@vendure/core\": \"1.2.0\",\n     // etc.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Struct Field Configuration with Options and Validation\nDESCRIPTION: Example showing struct fields with advanced configuration including dropdown options, validation function, and list property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode } from '@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        OrderLine: [\n            {\n                name: 'customizationOptions',\n                type: 'struct',\n                fields: [\n                    {\n                        name: 'color',\n                        type: 'string',\n                        // highlight-start\n                        options: [\n                            {value: 'red', label: [{languageCode: LanguageCode.en, value: 'Red'}]},\n                            {value: 'blue', label: [{languageCode: LanguageCode.en, value: 'Blue'}]},\n                        ],\n                        // highlight-end\n                    },\n                    {\n                        name: 'engraving',\n                        type: 'string',\n                        // highlight-start\n                        validate: (value: any) => {\n                            if (value.length > 20) {\n                                return 'Engraving text must be 20 characters or fewer';\n                            }\n                        },\n                    },\n                    {\n                        name: 'notifyEmailAddresses',\n                        type: 'string',\n                        // highlight-start\n                        list: true,\n                        // highlight-end\n                    }\n                ],\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Collection GraphQL Object Type\nDESCRIPTION: Defines the Collection object type with fields for id, dates, language, name, slug, breadcrumbs, position, description, assets, parent, children, filters, translations, product variants, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection {\n  isPrivate: Boolean!\n  inheritFilters: Boolean!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode\n  name: String!\n  slug: String!\n  breadcrumbs: [CollectionBreadcrumb!]!\n  position: Int!\n  description: String!\n  featuredAsset: Asset\n  assets: [Asset!]!\n  parent: Collection\n  parentId: ID!\n  children: [Collection!]\n  filters: [ConfigurableOperation!]!\n  translations: [CollectionTranslation!]!\n  productVariants(options: ProductVariantListOptions): ProductVariantList!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Database Initializer Registration\nDESCRIPTION: Code to register database initializers for different database types (SQLite, PostgreSQL, MySQL) used in testing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    MysqlInitializer,\n    PostgresInitializer,\n    SqljsInitializer,\n    registerInitializer,\n} from '@vendure/testing';\n\nconst sqliteDataDir = path.join(__dirname, '__data__');\n\nregisterInitializer('sqljs', new SqljsInitializer(sqliteDataDir));\nregisterInitializer('postgres', new PostgresInitializer());\nregisterInitializer('mysql', new MysqlInitializer());\n```\n\n----------------------------------------\n\nTITLE: Apply Coupon Code Mutation in GraphQL\nDESCRIPTION: This mutation applies a given coupon code to the current active order. It involves the 'couponCode' parameter to specify the code to be applied and returns an 'ApplyCouponCodeResult'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { applyCouponCode(couponCode: String!): ApplyCouponCodeResult! }\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Customers in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple Customers at once. Takes an array of Customer IDs and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_43\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCustomers(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateTaxRateInput GraphQL Input Type\nDESCRIPTION: GraphQL input type for updating a tax rate. Requires an ID and accepts optional fields for name, value, enabled status, category, zone, customer group, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_203\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateTaxRateInput {\n  id: ID!\n  name: String\n  value: Float\n  enabled: Boolean\n  categoryId: ID\n  zoneId: ID\n  customerGroupId: ID\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Database Access Using TypeORM Find API\nDESCRIPTION: Examples of using TypeORM's Find API for database operations, including finding by ID, name, with relations, and implementing pagination and sorting.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-service-layer/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { ID, RequestContext, TransactionalConnection } from '@vendure/core';\nimport { IsNull } from 'typeorm';\nimport { Item } from '../entities/item.entity';\n\n@Injectable()\nexport class ItemService {\n\n    constructor(private connection: TransactionalConnection) {}\n\n    findById(ctx: RequestContext, itemId: ID): Promise<Item | null> {\n        return this.connection.getRepository(ctx, Item).findOne({\n            where: { id: itemId },\n        });\n    }\n\n    findByName(ctx: RequestContext, name: string): Promise<Item | null> {\n        return this.connection.getRepository(ctx, Item).findOne({\n            where: {\n                name,\n                deletedAt: IsNull(),\n            },\n        });\n    }\n\n    findWithRelations() {\n        return this.connection.getRepository(ctx, Item).findOne({\n            where: { name },\n            relations: {\n                customer: true,\n                product: {\n                    featuredAsset: true,\n                },\n            },\n        });\n    }\n\n    findMany(ctx: RequestContext): Promise<Item[]> {\n        return this.connection.getRepository(ctx, Item).find({\n            skip: 0,\n            take: 10,\n            order: {\n                name: 'ASC',\n            },\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Review Service with Event Publishing\nDESCRIPTION: Shows how to publish custom events from a service class using EventBus.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { EventBus, ProductReviewService, RequestContext } from '@vendure/core';\n\nimport { ReviewSubmittedEvent } from '../events/review-submitted.event';\nimport { ProductReviewInput } from '../types';\n\n@Injectable()\nexport class ProductReviewService {\n    constructor(\n        private eventBus: EventBus,\n        private productReviewService: ProductReviewService,\n    ) {}\n\n    async submitReview(ctx: RequestContext, input: ProductReviewInput) {\n        this.eventBus.publish(new ReviewSubmittedEvent(ctx, input));\n        // handle creation of the new review\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Group - GraphQL Mutation - GraphQL\nDESCRIPTION: Allows updating properties of a customer group via the updateCustomerGroup mutation. Receives an UpdateCustomerGroupInput and returns the updated CustomerGroup entity. Typically used for segmenting customers for pricing, permissions, or marketing campaigns.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_114\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing CustomerGroup\n\"\"\"\ntype Mutation {\nupdateCustomerGroup(input: UpdateCustomerGroupInput!): CustomerGroup!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Country in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Country. It takes a CreateCountryInput object as input and returns a Country object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createCountry(input: CreateCountryInput!): Country!\n}\n```\n\n----------------------------------------\n\nTITLE: FacetValue Information for Filtering\nDESCRIPTION: JSON object showing a specific facet value (Nikkon brand) that can be used for filtering products. The object includes the facet value ID, name, parent facet details, and count of matching products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facetValue\": {\n    // highlight-next-line\n    \"id\": \"11\",\n    \"name\": \"Nikkon\",\n    \"facet\": {\n      \"id\": \"2\",\n      \"name\": \"brand\"\n    }\n  },\n  // highlight-next-line\n  \"count\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Add Item to Order Mutation in GraphQL\nDESCRIPTION: This mutation adds an item to an order in the Vendure platform. It requires the 'productVariantId' and 'quantity' parameters to specify which product variant and how many items to add. It returns an 'UpdateOrderItemsResult' object. Custom fields can be defined on the 'OrderLine' entity, and these can be accessed via a third argument 'customFields'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { addItemToOrder(productVariantId: ID!, quantity: Int!): UpdateOrderItemsResult! }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Collection Duplicator in TypeScript\nDESCRIPTION: This example demonstrates how to create a custom duplicator for Collection entities. It shows the complete implementation including initialization, permission requirements, and duplication logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-duplicator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Collection, LanguageCode, Permission\n  EntityDuplicator, TransactionalConnection, CollectionService } from '@vendure/core';\n\nlet collectionService: CollectionService;\nlet connection: TransactionalConnection;\n\n// This is just an example - we already ship with a built-in duplicator for Collections.\nconst customCollectionDuplicator = new EntityDuplicator({\n    code: 'custom-collection-duplicator',\n    description: [{ languageCode: LanguageCode.en, value: 'Custom collection duplicator' }],\n    args: {\n        throwError: {\n            type: 'boolean',\n            defaultValue: false,\n        },\n    },\n    forEntities: ['Collection'],\n    requiresPermission: [Permission.UpdateCollection],\n    init(injector) {\n        collectionService = injector.get(CollectionService);\n        connection = injector.get(TransactionalConnection);\n    },\n    duplicate: async input => {\n        const { ctx, id, args } = input;\n\n        const original = await connection.getEntityOrThrow(ctx, Collection, id, {\n            relations: {\n                assets: true,\n                featuredAsset: true,\n            },\n        });\n        const newCollection = await collectionService.create(ctx, {\n            isPrivate: original.isPrivate,\n            customFields: original.customFields,\n            assetIds: original.assets.map(a => a.id),\n            featuredAssetId: original.featuredAsset?.id,\n            parentId: original.parentId,\n            filters: original.filters.map(f => ({\n                code: f.code,\n                arguments: f.args,\n            })),\n            inheritFilters: original.inheritFilters,\n            translations: original.translations.map(t => ({\n                languageCode: t.languageCode,\n                name: `${t.name} (copy)`,\n                slug: `${t.slug}-copy`,\n                description: t.description,\n                customFields: t.customFields,\n            })),\n        });\n\n        if (args.throwError) {\n            // If an error is thrown at any point during the duplication process, the entire\n            // transaction will get automatically rolled back, and the mutation will return\n            // an ErrorResponse containing the error message.\n            throw new Error('Dummy error');\n        }\n\n        return newCollection;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Set Order Shipping Method Mutation\nDESCRIPTION: GraphQL mutation for setting one or more shipping methods for an order by their IDs. Supports multiple shipping methods with custom ShippingLineAssignmentStrategy configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setOrderShippingMethod(shippingMethodId: [ID!]!): SetOrderShippingMethodResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Promotion Conditions in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve all available Promotion Conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_27\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  promotionConditions: [ConfigurableOperationDefinition!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantTranslation GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductVariantTranslation, including its properties such as id, createdAt, updatedAt, languageCode, and name. It represents the translated data for a product variant.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_97\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariantTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderType Enum in GraphQL\nDESCRIPTION: Defines the `OrderType` enum in GraphQL, specifying different classifications for orders within the Vendure system: `Regular`, `Seller`, and `Aggregate`. This allows distinguishing between standard customer orders, orders specific to a seller (in multi-vendor scenarios), and potentially combined or summary order representations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nenum OrderType {\n  Regular\n  Seller\n  Aggregate\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HardenPlugin in Vendure\nDESCRIPTION: Implementation of HardenPlugin configuration for API security\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { HardenPlugin } from '@vendure/harden-plugin';\n\nconst IS_DEV = process.env.APP_ENV === 'dev';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    HardenPlugin.init({\n      maxQueryComplexity: 500,\n      apiMode: IS_DEV ? 'dev' : 'prod',\n    }),\n    // ...\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResultAsset GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL type definition for search result assets in the Vendure shop API. Contains essential information about product and variant images including id, preview URL, and focal point data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_118\n\nLANGUAGE: graphql\nCODE:\n```\ntype SearchResultAsset {\n  id: ID!\n  preview: String!\n  focalPoint: Coordinate\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stock Locations with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CreateStockLocationInput GraphQL input type used to create new stock locations in Vendure. It requires a name and optionally accepts description and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_64\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateStockLocationInput {\nname: String!\ndescription: String\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: RequestContextCacheService Class Definition in TypeScript\nDESCRIPTION: The RequestContextCacheService class signature showing available methods for request-scoped caching. It allows setting values and retrieving them with optional default value generators that execute when a value is not found in the cache.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/request-context-cache-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RequestContextCacheService {\n    set(ctx: RequestContext, key: any, val: T) => void;\n    get(ctx: RequestContext, key: any) => T | undefined;\n    get(ctx: RequestContext, key: any, getDefault?: () => T) => T;\n    get(ctx: RequestContext, key: any, getDefault?: () => T) => T | Promise<T> | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantPriceSelectionStrategy Interface in TypeScript\nDESCRIPTION: This code snippet defines the ProductVariantPriceSelectionStrategy interface, which extends InjectableStrategy. It includes a selectPrice method for choosing a price from an array of ProductVariantPrices based on the given RequestContext.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/product-variant-price-selection-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProductVariantPriceSelectionStrategy extends InjectableStrategy {\n    selectPrice(\n        ctx: RequestContext,\n        prices: ProductVariantPrice[],\n    ): ProductVariantPrice | undefined | Promise<ProductVariantPrice | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Page Tab in Vendure Admin UI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the registerPageTab function to add a new tab for 'Deleted Products' to the product list page in the Vendure admin UI. It specifies the location, tab name, route, and component to be used for the new tab.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/tabs/register-page-tab.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerPageTab } from '@vendure/admin-ui/core';\nimport { DeletedProductListComponent } from './components/deleted-product-list/deleted-product-list.component';\n\nexport default [\n    registerPageTab({\n        location: 'product-list',\n        tab: 'Deleted Products',\n        route: 'deleted',\n        component: DeletedProductListComponent,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer Group in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new CustomerGroup. It takes a CreateCustomerGroupInput object as input and returns a CustomerGroup object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createCustomerGroup(input: CreateCustomerGroupInput!): CustomerGroup!\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Members from Zones in GraphQL\nDESCRIPTION: Specifies a mutation to remove members from a Zone, taking zoneId and an array of memberIds as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_82\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeMembersFromZone(zoneId: ID!, memberIds: [ID!]!): Zone!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Min/Max Order Quantity OrderInterceptor in TypeScript\nDESCRIPTION: This example demonstrates how to create an OrderInterceptor that enforces minimum and maximum order quantities for ProductVariants. It includes custom fields for ProductVariant and an OrderInterceptor implementation that checks these limits when adding or adjusting order items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-interceptor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  EntityHydrator,\n  Injector,\n  LanguageCode,\n  Order,\n  OrderInterceptor,\n  ProductVariant,\n  RequestContext,\n  TranslatorService,\n  VendurePlugin,\n  WillAddItemToOrderInput,\n  WillAdjustOrderLineInput,\n} from '@vendure/core';\n\ndeclare module '@vendure/core/dist/entity/custom-entity-fields' {\n  interface CustomProductVariantFields {\n    minOrderQuantity?: number;\n    maxOrderQuantity?: number;\n  }\n}\n\n// This OrderInterceptor enforces minimum and maximum order quantities on ProductVariants.\nexport class MinMaxOrderInterceptor implements OrderInterceptor {\n private entityHydrator: EntityHydrator;\n private translatorService: TranslatorService;\n\n init(injector: Injector) {\n   this.entityHydrator = injector.get(EntityHydrator);\n   this.translatorService = injector.get(TranslatorService);\n }\n\n willAddItemToOrder(\n   ctx: RequestContext,\n   order: Order,\n   input: WillAddItemToOrderInput,\n ): Promise<void | string> | void | string {\n   const { productVariant, quantity } = input;\n   const min = productVariant.customFields?.minOrderQuantity;\n   const max = productVariant.customFields?.maxOrderQuantity;\n   if (min && quantity < min) {\n     return this.minErrorMessage(ctx, productVariant, min);\n   }\n   if (max && quantity > max) {\n     return this.maxErrorMessage(ctx, productVariant, max);\n   }\n }\n\n willAdjustOrderLine(\n   ctx: RequestContext,\n   order: Order,\n   input: WillAdjustOrderLineInput,\n ): Promise<void | string> | void | string {\n   const { orderLine, quantity } = input;\n   const min = orderLine.productVariant.customFields?.minOrderQuantity;\n   const max = orderLine.productVariant.customFields?.maxOrderQuantity;\n   if (min && quantity < min) {\n     return this.minErrorMessage(ctx, orderLine.productVariant, min);\n   }\n   if (max && quantity > max) {\n     return this.maxErrorMessage(ctx, orderLine.productVariant, max);\n   }\n }\n\n private async minErrorMessage(ctx: RequestContext, variant: ProductVariant, min: number) {\n   const variantName = await this.getTranslatedVariantName(ctx, variant);\n   return `Minimum order quantity for \"${variantName}\" is ${min}`;\n }\n\n private async maxErrorMessage(ctx: RequestContext, variant: ProductVariant, max: number) {\n   const variantName = await this.getTranslatedVariantName(ctx, variant);\n   return `Maximum order quantity for \"${variantName}\" is ${max}`;\n }\n\n private async getTranslatedVariantName(ctx: RequestContext, variant: ProductVariant) {\n   await this.entityHydrator.hydrate(ctx, variant, { relations: ['translations'] });\n   const translated = this.translatorService.translate(variant, ctx);\n   return translated.name;\n }\n}\n\n// This plugin enforces minimum and maximum order quantities on ProductVariants.\n// It adds two new custom fields to ProductVariant:\n// - minOrderQuantity\n// - maxOrderQuantity\n//\n// It also adds an OrderInterceptor which enforces these limits.\n@VendurePlugin({\n configuration: config => {\n // Here we add the custom fields to the ProductVariant entity\n   config.customFields.ProductVariant.push({\n     type: 'int',\n     min: 0,\n     name: 'minOrderQuantity',\n     label: [{ languageCode: LanguageCode.en, value: 'Minimum order quantity' }],\n     nullable: true,\n   });\n   config.customFields.ProductVariant.push({\n     type: 'int',\n     min: 0,\n     name: 'maxOrderQuantity',\n     label: [{ languageCode: LanguageCode.en, value: 'Maximum order quantity' }],\n     nullable: true,\n   });\n\n   // Here we add the MinMaxOrderInterceptor to the orderInterceptors array\n   config.orderOptions.orderInterceptors.push(new MinMaxOrderInterceptor());\n   return config;\n },\n})\nexport class OrderQuantityLimitsPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Channel in the Vendure system. It takes a CreateChannelInput object as input and returns a CreateChannelResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createChannel(input: CreateChannelInput!): CreateChannelResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Using FacetValueSelectorComponent in HTML\nDESCRIPTION: Example of how to use the FacetValueSelectorComponent in an HTML template. It demonstrates setting up the component and handling the selectedValuesChange event.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/facet-value-selector-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-facet-value-selector\n  (selectedValuesChange)=\"selectedValues = $event\"\n></vdr-facet-value-selector>\n```\n\n----------------------------------------\n\nTITLE: Defining the JobBufferStorageStrategy Interface in TypeScript\nDESCRIPTION: This code defines the JobBufferStorageStrategy interface, which extends InjectableStrategy. It includes methods for adding jobs to storage, getting buffer sizes, and flushing buffers to retrieve stored jobs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-buffer-storage-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JobBufferStorageStrategy extends InjectableStrategy {\n    add(bufferId: string, job: Job): Promise<Job>;\n    bufferSize(bufferIds?: string[]): Promise<{ [bufferId: string]: number }>;\n    flush(bufferIds?: string[]): Promise<{ [bufferId: string]: Job[] }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for GraphQL Union Types\nDESCRIPTION: Example of an error response when applying a coupon code. Shows how the __typename field indicates the specific error type and includes error-specific fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"applyCouponCode\": {\n      // highlight-next-line\n      \"__typename\": \"CouponCodeLimitError\",\n      \"errorCode\": \"COUPON_CODE_LIMIT_ERROR\",\n      \"message\": \"Coupon code cannot be used more than once per customer\",\n      // highlight-next-line\n      \"limit\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Calculated Entity Getters with @Calculated in TypeScript\nDESCRIPTION: This TypeScript decorator `@Calculated` is used to mark a method as a calculated getter on a Vendure entity. It adds metadata to the entity's prototype, which is later used by the `CalculatedPropertySubscriber` to correctly handle the getter. An optional `queryInstruction` parameter of type `CalculatedColumnQueryInstruction` can be provided to configure how this calculated column interacts with sorting, filtering, and relation loading in queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/calculated.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction Calculated(queryInstruction?: CalculatedColumnQueryInstruction): MethodDecorator\n```\n\n----------------------------------------\n\nTITLE: Implementing HtmlEditorFormInputComponent in TypeScript\nDESCRIPTION: An HTML editor input component with syntax highlighting for text fields. It extends BaseCodeEditorFormInputComponent and implements FormInputComponent, AfterViewInit, and OnInit interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass HtmlEditorFormInputComponent extends BaseCodeEditorFormInputComponent implements FormInputComponent, AfterViewInit, OnInit {\n    static readonly id: DefaultFormComponentId = 'html-editor-form-input';\n    constructor(changeDetector: ChangeDetectorRef)\n    ngOnInit() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering TypeORM Subscriber in Vendure Configuration\nDESCRIPTION: Demonstrates how to register a TypeORM subscriber in the Vendure configuration file. The subscriber is added to the dbConnectionOptions.subscribers array to make it active in the application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/db-subscribers/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { ProductSubscriber } from './plugins/my-plugin/product-subscriber';\n\n// ...\nexport const config: VendureConfig = {\n  dbConnectionOptions: {\n    // ...\n    subscribers: [ProductSubscriber],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Roles with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a user role. Requires the ID of the role to delete and returns a DeletionResponse object with information about the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_59\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete an existing Role\n\"\"\"\ntype Mutation {\n  deleteRole(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Customer Email Address with Token in TypeScript\nDESCRIPTION: Verifies a customer's email address using a valid verification token obtained from an AccountRegistrationEvent. On successful verification, the Customer entity's status is updated to 'verified'. An optional password can be provided.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nverifyCustomerEmailAddress(ctx: RequestContext, verificationToken: string, password?: string) => Promise<ErrorResultUnion<VerifyCustomerAccountResult, Customer>>\n```\n\n----------------------------------------\n\nTITLE: Optimized Product Export Service with Minimal Context\nDESCRIPTION: Improved implementation of product export service that minimizes RequestContext data by passing only essential information, reducing memory usage and improving performance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { JobQueue, JobQueueService,\n    RequestContext, ID, LanguageCode, RequestContextService } from '@vendure/core';\n\n@Injectable()\nclass ProductExportService implements OnModuleInit {\n\n    private jobQueue: JobQueue<{ channelToken: string; languageCode: LanguageCode; }>;\n\n    constructor(private jobQueueService: JobQueueService,\n                private requestContextService: RequestContextService) {\n    }\n\n    async onModuleInit() {\n        this.jobQueue = await this.jobQueueService.createQueue({\n            name: 'export-products',\n            process: async job => {\n                const ctx = await this.requestContextService.create({\n                    channelOrToken: job.data.channelToken,\n                    languageCode: job.data.languageCode,\n                })\n            },\n        });\n    }\n\n    exportAllProducts(ctx: RequestContext) {\n        return this.jobQueue.add({\n            channelId: ctx.channel.token,\n            languageCode: ctx.languageCode\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Button Implementation in React Components\nDESCRIPTION: React component implementation of various button styles using Vendure Admin UI React components. Shows usage of CdsIcon and Link components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { CdsIcon, Link } from '@vendure/admin-ui/react';\n\nexport function DemoComponent() {\n    return (\n        <>\n            <button className=\"button primary\">Primary</button>\n            <button className=\"button secondary\">Secondary</button>\n            <button className=\"button success\">Success</button>\n            <button className=\"button warning\">Warning</button>\n            <button className=\"button danger\">Danger</button>\n            \n            <button className=\"button-ghost\">Ghost</button>\n            <Link className=\"button-ghost\" href=\"/extensions/my-plugin/my-custom-route\">\n                <CdsIcon icon={arrowIcon} direction=\"right\" />\n                John Smith\n            </Link>\n            \n            <button className=\"button-small\">Small</button>\n            <button className=\"button-small\">\n                <CdsIcon icon={layersIcon} />\n                Assign to channel\n            </button>\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Load Test Script - Bash\nDESCRIPTION: This Bash command shows how to run a specific load test script (such as deep-query.js) using the npm run load-test:1k script. Requires k6 to be installed and accessible, and the load-testing scripts available in the specified directory. The test populates the database and executes a custom k6 test script.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run load-test:1k deep-query.js\n\n```\n\n----------------------------------------\n\nTITLE: CalculateShippingFn Type Definition\nDESCRIPTION: Type definition for the shipping calculation function that processes orders and returns shipping costs based on provided arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-calculator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CalculateShippingFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    method: ShippingMethod,\n) => CalculateShippingFnResult\n```\n\n----------------------------------------\n\nTITLE: Defining TransitionOrderToStateResult Union Type in GraphQL\nDESCRIPTION: Defines a GraphQL union type that represents the possible outcomes when transitioning an order to a new state. Can be either an Order or an OrderStateTransitionError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_145\n\nLANGUAGE: graphql\nCODE:\n```\nunion TransitionOrderToStateResult = Order | OrderStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Defining InternalServerError Class in TypeScript\nDESCRIPTION: This class extends I18nError to handle unexpected server errors. It requires a message and optionally accepts variables for detailed error information. The primary function is to wrap exceptional cases with a localized error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InternalServerError extends I18nError {\n    constructor(message: string, variables: { [key: string]: string | number } = {})\n}\n```\n\n----------------------------------------\n\nTITLE: BaseDetailComponent Class Signature in TypeScript\nDESCRIPTION: The complete class signature for BaseDetailComponent, showing its generic type parameter, implemented interfaces, properties, and methods. The component expects an entity with an id and optional updatedAt field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/base-detail-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseDetailComponent<Entity extends { id: string; updatedAt?: string }> implements DeactivateAware {\n    entity$: Observable<Entity>;\n    availableLanguages$: Observable<LanguageCode[]>;\n    languageCode$: Observable<LanguageCode>;\n    languageCode: LanguageCode;\n    isNew$: Observable<boolean>;\n    id: string;\n    abstract detailForm: UntypedFormGroup;\n    protected destroy$ = new Subject<void>();\n    constructor(route: ActivatedRoute, router: Router, serverConfigService: ServerConfigService, dataService: DataService, permissionsService: PermissionsService)\n    init() => ;\n    setUpStreams() => ;\n    destroy() => ;\n    setLanguage(code: LanguageCode) => ;\n    canDeactivate() => boolean;\n    setFormValues(entity: Entity, languageCode: LanguageCode) => void;\n    setCustomFieldFormValues(customFields: CustomFieldConfig[], formGroup: AbstractControl | null, entity: T, currentTranslation?: TranslationOf<T>) => ;\n    getCustomFieldConfig(key: Exclude<keyof CustomFields, '__typename'>) => CustomFieldConfig[];\n    setQueryParam(key: string, value: any) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring local Typesense scraper targets\nDESCRIPTION: JSON configuration for the Typesense Docsearch scraper targeting a locally-running documentation site. It defines the URLs to scrape, sitemap location, and allowed domains using host.docker.internal.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/scraper/readme.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"start_urls\": [\n    \"http://host.docker.internal:3000/\"\n  ],\n  \"sitemap_urls\": [\n    \"http://host.docker.internal:3000/sitemap.xml\"\n  ],\n  \"allowed_domains\": [\n    \"host.docker.internal\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sale Object Type in GraphQL\nDESCRIPTION: GraphQL object type representing a stock sale event for a product variant. Contains information about the sold product variant and quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_166\n\nLANGUAGE: graphql\nCODE:\n```\ntype Sale {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  type: StockMovementType!\n  quantity: Int!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodEligibilityCheckerConfig Interface in TypeScript\nDESCRIPTION: Interface definition for PaymentMethodEligibilityCheckerConfig, extending ConfigurableOperationDefOptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-eligibility-checker.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaymentMethodEligibilityCheckerConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {\n    check: CheckPaymentMethodEligibilityCheckerFn<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Collections from Channels in GraphQL\nDESCRIPTION: Defines a mutation to remove Collections from a specified Channel, returning an array of affected Collection objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_77\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeCollectionsFromChannel(input: RemoveCollectionsFromChannelInput!): [Collection!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetEntityOrThrowOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetEntityOrThrowOptions interface, which extends FindOneOptions and adds properties for channelId, retry logic, and handling of soft-deleted entities. It is used by the TransactionalConnection's getEntityOrThrow method in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/get-entity-or-throw-options.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetEntityOrThrowOptions<T = any> extends FindOneOptions<T> {\n    channelId?: ID;\n    retries?: number;\n    retryDelay?: number;\n    includeSoftDeleted?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Collection Filter Application in TypeScript\nDESCRIPTION: Methods to control the application of filters on product updates and trigger filter jobs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsetApplyAllFiltersOnProductUpdates(applyAllFiltersOnProductUpdates: boolean): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntriggerApplyFiltersJob(ctx: RequestContext, options?: { collectionIds?: ID[]; applyToChangedVariantsOnly?: boolean }): void\n```\n\n----------------------------------------\n\nTITLE: TranslatorService Class Definition\nDESCRIPTION: Class signature for TranslatorService showing constructor and translate method definitions. The translate method accepts a translatable entity, request context, and optional translatable relations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/translator-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass TranslatorService {\n    constructor(configService: ConfigService)\n    translate(translatable: T, ctx: RequestContext, translatableRelations: DeepTranslatableRelations<T> = []) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockLevel Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StockLevel, which represents inventory level information for a product at a specific location. It tracks stock on hand, allocated stock and the associated stock location.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_187\n\nLANGUAGE: graphql\nCODE:\n```\ntype StockLevel {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  stockLocationId: ID!\n  stockOnHand: Int!\n  stockAllocated: Int!\n  stockLocation: StockLocation!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HardenPlugin to Skip Complexity Checks\nDESCRIPTION: This example shows how to configure the HardenPlugin to skip complexity checks for certain requests based on a custom header. It uses the skip option to define a function that checks for a specific header value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/harden-plugin-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nHardenPlugin.init({\n  skip: (context) => context.request.http.headers['x-storefront-ssr-auth'] === 'some-secret-token'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultAssetNamingStrategy Class Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet shows the class signature for `DefaultAssetNamingStrategy`. It implements the `AssetNamingStrategy` interface and defines two methods: `generateSourceFileName` to create a filename based on the original upload, and `generatePreviewFileName` to create a filename for the asset preview. Both methods accept a RequestContext and handle potential filename conflicts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/assets/default-asset-naming-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass DefaultAssetNamingStrategy implements AssetNamingStrategy {\n    generateSourceFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string) => string;\n    generatePreviewFileName(ctx: RequestContext, sourceFileName: string, conflictFileName?: string) => string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: NPM Scripts for Migration Commands\nDESCRIPTION: This JSON snippet shows the NPM scripts defined in package.json for running migration commands in a Vendure project.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrations/index.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"migration:generate\": \"ts-node migration.ts generate\",\n    \"migration:run\": \"ts-node migration.ts run\",\n    \"migration:revert\": \"ts-node migration.ts revert\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Eligible Payment Methods\nDESCRIPTION: GraphQL query to get available payment methods for the current order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetPaymentMethods{\n  eligiblePaymentMethods {\n    id\n    name\n    code\n    description\n    isEligible\n    eligibilityMessage\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Vendure Dashboard\nDESCRIPTION: Commands for running tests on the Vendure Dashboard project. The first command runs tests once, while the second runs tests in watch mode using Vitest.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dashboard/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx vitest\n```\n\n----------------------------------------\n\nTITLE: Replacing OrderLine totalPrice Field in Vendure GraphQL API\nDESCRIPTION: Explains the replacement of the `OrderLine.totalPrice` field in Vendure's GraphQL API, deprecated and removed in v1.0.0. The field `OrderLine.linePriceWithTax` should be used instead to get the total price for the order line including tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n# Deprecated field on OrderLine\ntotalPrice\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Replacement field (v1.0.0+)\nlinePriceWithTax\n```\n\n----------------------------------------\n\nTITLE: Quick Start Configuration Prompt\nDESCRIPTION: Interactive CLI prompt showing the initial setup options for Vendure, with Quick Start highlighted as the recommended option for new users.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/installation/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n┌  Let's create a Vendure App ✨\n│\n◆  How should we proceed?\n│  ● Quick Start (Get up an running in a single step)\n│  ○ Manual Configuration\n└\n```\n\n----------------------------------------\n\nTITLE: Defining the StockLevelService Class Signature in TypeScript\nDESCRIPTION: This snippet defines the structure of the `StockLevelService` class in TypeScript. It shows the constructor, which takes `TransactionalConnection`, `StockLocationService`, and `ConfigService` as dependencies. It also lists the key methods available: `getStockLevel` (retrieves stock level for a specific variant and location), `getStockLevelsForVariant` (retrieves all stock levels for a variant), `getAvailableStock` (calculates available stock based on the configured strategy), `updateStockOnHandForLocation` (updates the on-hand stock), and `updateStockAllocatedForLocation` (updates the allocated stock). These methods are used to manage inventory levels within Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/stock-level-service.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass StockLevelService {\n    constructor(connection: TransactionalConnection, stockLocationService: StockLocationService, configService: ConfigService)\n    getStockLevel(ctx: RequestContext, productVariantId: ID, stockLocationId: ID) => Promise<StockLevel>;\n    getStockLevelsForVariant(ctx: RequestContext, productVariantId: ID) => Promise<StockLevel[]>;\n    getAvailableStock(ctx: RequestContext, productVariantId: ID) => Promise<AvailableStock>;\n    updateStockOnHandForLocation(ctx: RequestContext, productVariantId: ID, stockLocationId: ID, change: number) => ;\n    updateStockAllocatedForLocation(ctx: RequestContext, productVariantId: ID, stockLocationId: ID, change: number) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DashboardWidgetConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the DashboardWidgetConfig interface, which is used to configure dashboard widgets. It includes properties for loading components, setting titles, specifying supported widths, and defining required permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/dashboard-widgets/dashboard-widget-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DashboardWidgetConfig {\n    loadComponent: () => Promise<Type<any>> | Type<any>;\n    title?: string;\n    supportedWidths?: DashboardWidgetWidth[];\n    requiresPermissions?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: OrderLineEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle order line events. Triggered when an OrderLine is added, updated, deleted or cancelled.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderLineEvent extends VendureEvent {\n    constructor(ctx: RequestContext, order: Order, orderLine: OrderLine, type: 'created' | 'updated' | 'deleted' | 'cancelled')\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TokenActiveOrderStrategy\nDESCRIPTION: Example of implementing a custom ActiveOrderStrategy that uses an order token to determine the active order. This strategy defines an input type, initializes dependencies, and implements the determineActiveOrder method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/active-order-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ID } from '@vendure/common/lib/shared-types';\nimport {\n  ActiveOrderStrategy,\n  CustomerService,\n  idsAreEqual,\n  Injector,\n  Order,\n  OrderService,\n  RequestContext,\n  TransactionalConnection,\n} from '@vendure/core';\nimport gql from 'graphql-tag';\n\nclass TokenActiveOrderStrategy implements ActiveOrderStrategy<{ token: string }> {\n  readonly name = 'orderToken';\n\n  private connection: TransactionalConnection;\n  private orderService: OrderService;\n\n  init(injector: Injector) {\n    this.connection = injector.get(TransactionalConnection);\n    this.orderService = injector.get(OrderService);\n  }\n\n  defineInputType = () => gql`\n    input OrderTokenActiveOrderInput {\n      token: String\n    }\n  `;\n\n  async determineActiveOrder(ctx: RequestContext, input: { token: string }) {\n    const qb = this.connection\n      .getRepository(ctx, Order)\n      .createQueryBuilder('order')\n      .leftJoinAndSelect('order.customer', 'customer')\n      .leftJoinAndSelect('customer.user', 'user')\n      .where('order.customFields.orderToken = :orderToken', { orderToken: input.token });\n\n    const order = await qb.getOne();\n    if (!order) {\n      return;\n    }\n    // Ensure the active user is the owner of this Order\n    const orderUserId = order.customer && order.customer.user && order.customer.user.id;\n    if (order.customer && idsAreEqual(orderUserId, ctx.activeUserId)) {\n      return order;\n    }\n  }\n}\n\n// in vendure-config.ts\nexport const config = {\n  // ...\n  orderOptions: {\n    activeOrderStrategy: new TokenActiveOrderStrategy(),\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockLevel Entity using TypeORM - TypeScript\nDESCRIPTION: Defines the StockLevel class as a TypeORM entity extending VendureEntity and implementing HasCustomFields, allowing tracking of inventory (on hand and allocated) for a given ProductVariant at a specific StockLocation. Dependencies include ProductVariant, StockLocation, CustomStockLevelFields, and relevant TypeORM decorators. Key properties are productVariant, productVariantId, stockLocation, stockLocationId, stockOnHand, stockAllocated, and customFields. Expected input is a DeepPartial of StockLevel for the constructor, and all mapped via TypeORM relations. Constraints include database-level cascading on related ProductVariants and StockLocations. Custom fields enable extensibility of the entity definition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-level.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StockLevel extends VendureEntity implements HasCustomFields {\n    constructor(input: DeepPartial<StockLevel>)\n    @Index()\n    @ManyToOne(type => ProductVariant, productVariant => productVariant.stockLevels, { onDelete: 'CASCADE' })\n    productVariant: ProductVariant;\n    @EntityId()\n    productVariantId: ID;\n    @Index()\n    @ManyToOne(type => StockLocation, { onDelete: 'CASCADE' })\n    stockLocation: StockLocation;\n    @EntityId()\n    stockLocationId: ID;\n    @Column()\n    stockOnHand: number;\n    @Column()\n    stockAllocated: number;\n    @Column(type => CustomStockLevelFields)\n    customFields: CustomStockLevelFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for AdminUiAppConfig in TypeScript\nDESCRIPTION: Defines the interface for configuring a custom-build of the Admin UI app, including path to compiled files, custom route, and compilation function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/admin-ui/admin-ui-app-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdminUiAppConfig {\n    path: string;\n    route?: string;\n    compile?: () => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminUiPlugin with UiExtensionCompilerOptions in TypeScript\nDESCRIPTION: This code snippet shows how to use UiExtensionCompilerOptions in conjunction with the AdminUiPlugin. It demonstrates setting the baseHref option and other related configurations for the plugin and UI extension compilation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-extension-compiler-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nAdminUiPlugin.init({\n  route: 'my-route',\n  port: 5001,\n  app: compileUiExtensions({\n    baseHref: '/my-route/',\n    outputPath: path.join(__dirname, './custom-admin-ui'),\n    extensions: [],\n    devMode: true,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultActiveOrderStrategy in TypeScript\nDESCRIPTION: Class definition for DefaultActiveOrderStrategy that implements the ActiveOrderStrategy interface. It provides methods for initializing, creating and determining active orders based on the current session context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-active-order-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultActiveOrderStrategy implements ActiveOrderStrategy {\n    name: 'default-active-order-strategy';\n    init(injector: Injector) => ;\n    createActiveOrder(ctx: RequestContext) => ;\n    determineActiveOrder(ctx: RequestContext) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a Customer entity is added, updated or deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerEvent extends VendureEntityEvent<Customer, CustomerInputTypes> {\n    constructor(ctx: RequestContext, entity: Customer, type: 'created' | 'updated' | 'deleted', input?: CustomerInputTypes)\n    customer: Customer\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FulfillmentLine Type in GraphQL\nDESCRIPTION: Specifies the structure of a fulfillment line, including references to the order line and fulfillment, along with quantity information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_71\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FulfillmentLine {\n  orderLine: OrderLine!\n  orderLineId: ID!\n  quantity: Int!\n  fulfillment: Fulfillment!\n  fulfillmentId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of CrudPermissionDefinition in TypeScript\nDESCRIPTION: Details the class signature for creating a CrudPermissionDefinition, featuring construct logic for CRUD permissions. This class extends the PermissionDefinition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass CrudPermissionDefinition extends PermissionDefinition {\n    constructor(name: string, descriptionFn?: (operation: 'create' | 'read' | 'update' | 'delete') => string)\n    Create: Permission\n    Read: Permission\n    Update: Permission\n    Delete: Permission\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocalAssetStorageStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the LocalAssetStorageStrategy class, which implements the AssetStorageStrategy interface. It includes methods for file operations such as writing, reading, and deleting files from the local file system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/local-asset-storage-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LocalAssetStorageStrategy implements AssetStorageStrategy {\n    toAbsoluteUrl: ((reqest: Request, identifier: string) => string) | undefined;\n    constructor(uploadPath: string, toAbsoluteUrlFn?: (reqest: Request, identifier: string) => string)\n    writeFileFromStream(fileName: string, data: ReadStream) => Promise<string>;\n    writeFileFromBuffer(fileName: string, data: Buffer) => Promise<string>;\n    fileExists(fileName: string) => Promise<boolean>;\n    readFileToBuffer(identifier: string) => Promise<Buffer>;\n    readFileToStream(identifier: string) => Promise<Stream>;\n    deleteFile(identifier: string) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Registration Mutation\nDESCRIPTION: GraphQL mutation for registering a new customer account with basic details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Register($input: RegisterCustomerInput!) {\n  registerCustomerAccount(input: $input) {\n    ... on Success {\n      success\n    }\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundOrderStateError Object Type in GraphQL\nDESCRIPTION: Defines an error type returned when attempting to refund an order that is not in the expected state. Includes the current order state as a property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_154\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned if an attempting to refund an Order which is not in the expected state\"\"\"\ntype RefundOrderStateError {\n  errorCode: ErrorCode!\n  message: String!\n  orderState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Widget Layout in Vendure Admin UI (TypeScript)\nDESCRIPTION: Function signature for setDashboardWidgetLayout that allows setting the default widget layout for the Admin UI dashboard. It takes a WidgetLayoutDefinition parameter to define the layout configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/dashboard-widgets/set-dashboard-widget-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setDashboardWidgetLayout(layoutDef: WidgetLayoutDefinition): void\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultCachePlugin Class in TypeScript\nDESCRIPTION: The DefaultCachePlugin class provides a SQL-based cache strategy for storing cached items in the database. It's suitable for production use including multi-instance setups, with Redis being an alternative for increased performance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/default-cache-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultCachePlugin {\n    static options: DefaultCachePluginInitOptions = {\n        cacheSize: 10_000,\n    };\n    init(options: DefaultCachePluginInitOptions) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: DataTableComponent TypeScript Class Definition\nDESCRIPTION: The TypeScript class definition for the DataTableComponent, showing its inputs, outputs, and lifecycle methods. This component handles pagination, row selection, and content projection for table columns and row templates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/data-table-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DataTableComponent<T> implements AfterContentInit, OnChanges, OnInit, OnDestroy {\n    @Input() items: T[];\n    @Input() itemsPerPage: number;\n    @Input() currentPage: number;\n    @Input() totalItems: number;\n    @Input() emptyStateLabel: string;\n    @Input() selectionManager?: SelectionManager<T>;\n    @Output() pageChange = new EventEmitter<number>();\n    @Output() itemsPerPageChange = new EventEmitter<number>();\n    @Input() allSelected: boolean;\n    @Input() isRowSelectedFn: ((item: T) => boolean) | undefined;\n    @Output() allSelectChange = new EventEmitter<void>();\n    @Output() rowSelectChange = new EventEmitter<{ event: MouseEvent; item: T }>();\n    @ContentChildren(DataTableColumnComponent) columns: QueryList<DataTableColumnComponent>;\n    @ContentChildren(TemplateRef) templateRefs: QueryList<TemplateRef<any>>;\n    rowTemplate: TemplateRef<any>;\n    currentStart: number;\n    currentEnd: number;\n    disableSelect = false;\n    constructor(changeDetectorRef: ChangeDetectorRef)\n    ngOnInit() => ;\n    ngOnChanges(changes: SimpleChanges) => ;\n    ngOnDestroy() => ;\n    ngAfterContentInit() => void;\n    trackByFn(index: number, item: any) => ;\n    onToggleAllClick() => ;\n    onRowClick(item: T, event: MouseEvent) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Using TranslatableSaver in Service Class\nDESCRIPTION: Example showing how to use TranslatableSaver in a service class to create a translatable Facet entity. Demonstrates dependency injection and usage of the create method with configuration options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/translatable-saver.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyService {\n  constructor(private translatableSaver: TranslatableSaver) {}\n\n  async create(ctx: RequestContext, input: CreateFacetInput): Promise<Translated<Facet>> {\n    const facet = await this.translatableSaver.create({\n      ctx,\n      input,\n      entityType: Facet,\n      translationType: FacetTranslation,\n      beforeSave: async f => {\n          f.code = await this.ensureUniqueCode(ctx, f.code);\n      },\n    });\n    return facet;\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Order Line Mutation in GraphQL for Vendure\nDESCRIPTION: Removes a specific OrderLine from the Order based on the orderLineId parameter. Returns a RemoveOrderItemsResult with the updated order information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeOrderLine(orderLineId: ID!): RemoveOrderItemsResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SellerEvent Class in TypeScript\nDESCRIPTION: This code defines the SellerEvent class, introduced in version 2.0.1, which is fired whenever a Seller is added, updated, or deleted. It extends VendureEntityEvent and includes a constructor with context, entity, type, and optional input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nclass SellerEvent extends VendureEntityEvent<Seller, SellerInputTypes> {\n    constructor(ctx: RequestContext, entity: Seller, type: 'created' | 'updated' | 'deleted', input?: SellerInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type CollectionSortParameter\nDESCRIPTION: Defines the `CollectionSortParameter` input type used to specify sorting criteria for Collection lists. It allows sorting by various fields like `id`, `createdAt`, `updatedAt`, `name`, `slug`, `position`, `description`, and `parentId`, with the direction specified by the `SortOrder` enum (ASC or DESC).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ninput CollectionSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  slug: SortOrder\n  position: SortOrder\n  description: SortOrder\n  parentId: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderModification Type in GraphQL\nDESCRIPTION: The OrderModification type represents a modification made to an order, containing details about price changes, affected lines, and related payment or refund information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_117\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderModification {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  priceChange: Money!\n  note: String!\n  lines: [OrderModificationLine!]!\n  surcharges: [Surcharge!]\n  payment: Payment\n  refund: Refund\n  isSettled: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Order Fragment in Queries\nDESCRIPTION: Example of importing and using the ActiveOrder fragment in a GraphQL query to fetch the active order details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ACTIVE_ORDER_FRAGMENT } from './fragments';\n\nexport const GET_ACTIVE_ORDER = /*GraphQL*/`\n  query GetActiveOrder {\n    activeOrder {\n      ...ActiveOrder\n    }\n  }\n  ${ACTIVE_ORDER_FRAGMENT}\n`;\n```\n\n----------------------------------------\n\nTITLE: Configuring HealthCheckStrategy in Vendure Configuration\nDESCRIPTION: Example of configuring multiple health check strategies in the Vendure configuration, including the default TypeORMHealthCheckStrategy, HttpHealthCheckStrategy for external service monitoring, and a custom strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/health-check-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpHealthCheckStrategy, TypeORMHealthCheckStrategy } from '@vendure/core';\nimport { MyCustomHealthCheckStrategy } from './config/custom-health-check-strategy';\n\nexport const config = {\n  // ...\n  systemOptions: {\n    healthChecks: [\n      new TypeORMHealthCheckStrategy(),\n      new HttpHealthCheckStrategy({ key: 'my-service', url: 'https://my-service.com' }),\n      new MyCustomHealthCheckStrategy(),\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring TaxRateModificationEvent Class - TypeScript\nDESCRIPTION: Defines TaxRateModificationEvent, triggered when a TaxRate is modified. Extends VendureEvent; its constructor takes context and the affected TaxRate entity. There are no extra parameters beyond ctx (RequestContext) and taxRate. Produces an event instance for notification or logging of modifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TaxRateModificationEvent extends VendureEvent {\n    constructor(ctx: RequestContext, taxRate: TaxRate)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Draft Order in GraphQL for Vendure\nDESCRIPTION: This mutation creates a draft Order. It takes no input parameters and returns an Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createDraftOrder: Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Shipping Address for an Order - Vendure TypeScript\nDESCRIPTION: Removes the shipping address from an Order, requiring order context and identifier. Returns a Promise of the updated Order, supporting workflows where no shipping address is needed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID) => Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentService Class in TypeScript\nDESCRIPTION: This code snippet defines the PaymentService class with its constructor and methods for managing payments and refunds in the Vendure ecommerce framework.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/payment-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PaymentService {\n    constructor(connection: TransactionalConnection, paymentStateMachine: PaymentStateMachine, refundStateMachine: RefundStateMachine, paymentMethodService: PaymentMethodService, eventBus: EventBus)\n    create(ctx: RequestContext, input: DeepPartial<Payment>) => Promise<Payment>;\n    findOneOrThrow(ctx: RequestContext, id: ID, relations: string[] = ['order']) => Promise<Payment>;\n    transitionToState(ctx: RequestContext, paymentId: ID, state: PaymentState) => Promise<Payment | PaymentStateTransitionError>;\n    getNextStates(payment: Payment) => readonly PaymentState[];\n    createPayment(ctx: RequestContext, order: Order, amount: number, method: string, metadata: any) => Promise<Payment | IneligiblePaymentMethodError>;\n    settlePayment(ctx: RequestContext, paymentId: ID) => Promise<PaymentStateTransitionError | Payment>;\n    cancelPayment(ctx: RequestContext, paymentId: ID) => Promise<PaymentStateTransitionError | Payment>;\n    createManualPayment(ctx: RequestContext, order: Order, amount: number, input: ManualPaymentInput) => ;\n    createRefund(ctx: RequestContext, input: RefundOrderInput, order: Order, selectedPayment: Payment) => Promise<Refund | RefundStateTransitionError | RefundAmountError>;\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Mode Type Definition\nDESCRIPTION: Type definition for TransactionMode, specifying the available transaction modes ('auto' or 'manual').\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/transaction-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransactionMode = 'auto' | 'manual'\n```\n\n----------------------------------------\n\nTITLE: ConfigurableOperationDefOptions Interface Definition in TypeScript\nDESCRIPTION: Interface definition specifying the required properties for configurable operations, including code, args, and description. Extends InjectableStrategy to provide common configuration options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/configurable-operation-def-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConfigurableOperationDefOptions<T extends ConfigArgs> extends InjectableStrategy {\n    code: string;\n    args: T;\n    description: LocalizedStringArray;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Order Custom Fields Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to set custom fields for a draft order. Takes an order ID and UpdateOrderInput object, returning the updated Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_94\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setDraftOrderCustomFields(orderId: ID!, input: UpdateOrderInput!): Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StateMachineConfig Interface in TypeScript\nDESCRIPTION: The StateMachineConfig interface defines the structure for configuring a finite state machine. It includes properties for transitions, and optional handlers for transition start, end, and error events.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/state-machine-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StateMachineConfig<T extends string, Data = undefined> {\n    readonly transitions: Transitions<T>;\n    onTransitionStart?: OnTransitionStartFn<T, Data>;\n    onTransitionEnd?: OnTransitionEndFn<T, Data>;\n    onError?: OnTransitionErrorFn<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SettlePaymentError GraphQL Type\nDESCRIPTION: Defines a GraphQL type for errors that occur during payment settlement processes. Contains fields for error code, message, and specific payment error details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_177\n\nLANGUAGE: graphql\nCODE:\n```\ntype SettlePaymentError {\n  errorCode: ErrorCode!\n  message: String!\n  paymentErrorMessage: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Translatable Entities\nDESCRIPTION: Service implementation for updating existing translatable entities using the TranslatableSaver service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translateable/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RequestService {\n\n    constructor(private translatableSaver: TranslatableSaver) {}\n\n    async update(ctx: RequestContext, input: UpdateProductRequestInput): Promise<ProductRequest> {\n        const updatedEntity = await this.translatableSaver.update({\n            ctx,\n            input,\n            entityType: ProductRequest,\n            translationType: ProductRequestTranslation,\n            beforeSave: async f => {\n                // Assign relations here\n            },\n        });\n        return updatedEntity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tax Categories with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CreateTaxCategoryInput GraphQL input type used to create new tax categories in Vendure. It requires a name and optionally accepts an isDefault flag and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_66\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateTaxCategoryInput {\nname: String!\nisDefault: Boolean\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying eligible payment methods in GraphQL\nDESCRIPTION: This query returns a list of payment methods eligible based on the current active order context. It provides PaymentMethodQuote objects detailing payment options available. The query is typically used when preparing to make a payment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns a list of payment methods and their eligibility based on the current active Order\n\"\"\"\ntype Query {\n    eligiblePaymentMethods: [PaymentMethodQuote!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockDisplayStrategy Interface in TypeScript\nDESCRIPTION: This code snippet defines the StockDisplayStrategy interface, which extends InjectableStrategy. It includes a method getStockLevel for determining how stock levels should be displayed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/stock-display-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StockDisplayStrategy extends InjectableStrategy {\n    getStockLevel(\n        ctx: RequestContext,\n        productVariant: ProductVariant,\n        saleableStockLevel: number,\n    ): string | Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Addresses for New Customer from Order in TypeScript\nDESCRIPTION: Creates new Address entities for a customer based on the shipping and billing addresses present in a given Order. This method is specifically designed to populate addresses for a newly registered customer if they don't have any addresses associated yet.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAddressesForNewCustomer(ctx: RequestContext, order: Order) => \n```\n\n----------------------------------------\n\nTITLE: Defining StockLocationList Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StockLocationList, which represents a paginated list of StockLocation objects. It provides both the items in the current page and the total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_189\n\nLANGUAGE: graphql\nCODE:\n```\ntype StockLocationList {\n  items: [StockLocation!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Order in Vendure (TypeScript)\nDESCRIPTION: Cancels an Order by transitioning it to the 'Cancelled' state. If stock tracking is enabled, it creates new StockMovements to correct stock levels. It takes a RequestContext and CancelOrderInput as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ncancelOrder(ctx: RequestContext, input: CancelOrderInput): Promise<ErrorResultUnion<CancelOrderResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodHandler Class Definition in TypeScript\nDESCRIPTION: The class signature for the PaymentMethodHandler which extends ConfigurableOperationDef. It accepts a PaymentMethodConfigOptions object to configure the payment processing logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass PaymentMethodHandler<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: PaymentMethodConfigOptions<T>)\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Mutation Example in TypeScript\nDESCRIPTION: Example demonstrating how to use the fileUploadMutation method to upload files with a custom mutation, showing the proper structure for handling multiple file uploads.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/simple-graph-qlclient.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.fileUploadMutation({\n  mutation: gql`\n    mutation AddSellerImages($input: AddSellerImagesInput!) {\n      addSellerImages(input: $input) {\n        id\n        name\n      }\n    }\n  `,\n  filePaths: ['./images/profile-picture.jpg', './images/logo.png'],\n  mapVariables: () => ({\n    name: \"George's Pans\",\n    profilePicture: null,  // corresponds to filePaths[0]\n    branding: {\n      logo: null  // corresponds to filePaths[1]\n    }\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Order Line Asset URLs in TypeScript for Vendure\nDESCRIPTION: This function applies the configured AssetStorageStrategy.toAbsoluteUrl() function to each OrderLine's featuredAsset.preview properties. It ensures correct display of assets in email templates by manually performing URL transformation that usually happens in API middleware.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-utils.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction transformOrderLineAssetUrls(ctx: RequestContext, order: Order, injector: Injector): Order\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticatedSession Entity in TypeScript\nDESCRIPTION: This code snippet defines the AuthenticatedSession class, which extends the Session entity. It includes properties for the authenticated user and the authentication strategy used, along with their respective decorators for database mapping.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/authenticated-session.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AuthenticatedSession extends Session {\n    constructor(input: DeepPartial<AuthenticatedSession>)\n    @Index()\n    @ManyToOne(type => User, user => user.sessions)\n    user: User;\n    @Column()\n    authenticationStrategy: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionGroupService Class in TypeScript\nDESCRIPTION: This snippet defines the ProductOptionGroupService class with its constructor and methods for managing ProductOptionGroup entities. It includes functionality for finding, creating, updating, and deleting product option groups.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/product-option-group-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductOptionGroupService {\n    constructor(connection: TransactionalConnection, translatableSaver: TranslatableSaver, customFieldRelationService: CustomFieldRelationService, productOptionService: ProductOptionService, eventBus: EventBus, translator: TranslatorService)\n    findAll(ctx: RequestContext, filterTerm?: string, relations?: RelationPaths<ProductOptionGroup>) => Promise<Array<Translated<ProductOptionGroup>>>;\n    findOne(ctx: RequestContext, id: ID, relations?: RelationPaths<ProductOptionGroup>) => Promise<Translated<ProductOptionGroup> | undefined>;\n    getOptionGroupsByProductId(ctx: RequestContext, id: ID) => Promise<Array<Translated<ProductOptionGroup>>>;\n    create(ctx: RequestContext, input: Omit<CreateProductOptionGroupInput, 'options'>) => Promise<Translated<ProductOptionGroup>>;\n    update(ctx: RequestContext, input: UpdateProductOptionGroupInput) => Promise<Translated<ProductOptionGroup>>;\n    deleteGroupAndOptionsFromProduct(ctx: RequestContext, id: ID, productId: ID) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying GNU GPL v3 Copyright Notice Template\nDESCRIPTION: Provides a template for the copyright notice to be included at the start of source files when licensing a program under the GNU General Public License v3. It specifies placeholders for the program's name, a brief description, copyright year, author's name, and confirms the program is free software under GPLv3 or any later version. It includes a standard warranty disclaimer and points to the full license text.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/license/gpl-3.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Defining EntityIdStrategy Interface in TypeScript\nDESCRIPTION: Interface defining how entity IDs are generated and transformed between database and API layers. Supports both increment and UUID strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-id-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EntityIdStrategy<T extends 'increment' | 'uuid'> extends InjectableStrategy {\n    readonly primaryKeyType: T;\n    encodeId: (primaryKey: PrimaryKeyType<T>) => string;\n    decodeId: (id: string) => PrimaryKeyType<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PurgeRule Class Signature in TypeScript\nDESCRIPTION: This TypeScript class signature defines `PurgeRule`. Instances of this class listen for specific `VendureEvent` types and interact with the Stellate Purging API via the injected `StellateService`. Key properties include `eventType` to specify the trigger event, `bufferTimeMs` for debouncing, and the `handle` method containing the purge logic. The constructor takes a `PurgeRuleConfig` object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/purge-rule.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass PurgeRule<Event extends VendureEvent = VendureEvent> {\n    eventType: Type<Event>\n    bufferTimeMs: number | undefined\n    handle(handlerArgs: { events: Event[]; stellateService: StellateService; injector: Injector }) => ;\n    constructor(config: PurgeRuleConfig<Event>)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Storage for Vendure on Railway\nDESCRIPTION: Sets up the AssetServerPlugin to use a configurable upload directory via environment variables, which will be mapped to a Railway volume for persistence.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-railway/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AssetServerPlugin } from '@vendure/asset-server-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AssetServerPlugin.init({\n            route: 'assets',\n            // highlight-next-line\n            assetUploadDir: process.env.ASSET_UPLOAD_DIR || path.join(__dirname, '../static/assets'),\n        }),\n    ],\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing StripePlugin in VendureConfig\nDESCRIPTION: TypeScript code snippet demonstrating how to import and initialize the `StripePlugin` within the `plugins` array of a `VendureConfig` object. This example enables the `storeCustomersInStripe` option, which associates Stripe PaymentIntents with Stripe Customer objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\n// ...\n\nplugins: [\n  StripePlugin.init({\n    // This prevents different customers from using the same PaymentIntent\n    storeCustomersInStripe: true,\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Card List for Vendure Pipes\nDESCRIPTION: This code snippet renders a DocCardList component, which is likely used to display a list of document cards related to Vendure pipes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Custom Analyzer Configuration Example\nDESCRIPTION: Example showing how to configure a custom English stemmer analyzer in the indexSettings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nindexSettings: {\n  analysis: {\n    analyzer: {\n      custom_analyzer: {\n        tokenizer: 'standard',\n        filter: [\n          'lowercase',\n          'english_stemmer'\n        ]\n      }\n    },\n    filter : {\n      english_stemmer : {\n        type : 'stemmer',\n        name : 'english'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring StockLocationEvent Class - TypeScript\nDESCRIPTION: Defines a TypeScript event class triggered whenever a StockLocation entity is added, updated, or deleted within Vendure. It extends VendureEntityEvent and requires a RequestContext, the entity instance, the event type, and optional input data. Inputs are: ctx (context), entity (StockLocation), type (created/updated/deleted), and optionally input; output is a constructed event instance tailored for the entity's state change.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_52\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StockLocationEvent extends VendureEntityEvent<StockLocation, StockLocationInputTypes> {\n    constructor(ctx: RequestContext, entity: StockLocation, type: 'created' | 'updated' | 'deleted', input?: StockLocationInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cancellation GraphQL Object Type\nDESCRIPTION: Defines the Cancellation object type with fields for id, dates, product variant, type, quantity, order line, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\ntype Cancellation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  type: StockMovementType!\n  quantity: Int!\n  orderLine: OrderLine!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Using PageDetailLayout Component in React\nDESCRIPTION: This example demonstrates how to use the PageDetailLayout component to create a detail view with a main content area and an optional sidebar.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/page-detail-layout.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PageDetailLayout } from '@vendure/admin-ui/react';\n\nexport function MyComponent() {\n  return (\n    <PageDetailLayout sidebar={<div>Sidebar content</div>}>\n      <div>Main content</div>\n    </PageDetailLayout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateProvinceInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a province entity. Contains fields for code, translations, enabled status, and custom fields, with ID being the only required field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_196\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateProvinceInput {\n  id: ID!\n  code: String\n  translations: [ProvinceTranslationInput!]\n  enabled: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerSortParameter Input Type in GraphQL\nDESCRIPTION: Specifies sorting options for customer queries. It allows sorting by various customer fields such as id, createdAt, firstName, lastName, etc. Each field can be sorted in ascending or descending order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_74\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  title: SortOrder\n  firstName: SortOrder\n  lastName: SortOrder\n  phoneNumber: SortOrder\n  emailAddress: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Greeter Component\nDESCRIPTION: React version of the Greeter component for displaying a greeting message\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\n\nexport function Greeter() {\n    const greeting = 'Hello!';\n    return (\n        <div className=\"page-block\">\n            <h2>{greeting}</h2>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategory Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tax categories that are used to group products for taxation purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_202\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxCategory {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nname: String!\nisDefault: Boolean!\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteAssetInput Input Type in GraphQL\nDESCRIPTION: Specifies input for deleting an asset. Includes options for force deletion and deleting from all channels. Requires the assetId of the asset to be deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_78\n\nLANGUAGE: graphql\nCODE:\n```\ninput DeleteAssetInput {\n  assetId: ID!\n  force: Boolean\n  deleteFromAllChannels: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Roles in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing Role. Requires an UpdateRoleInput object and returns the updated Role entity with its permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_129\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Role\n\"\"\"\ntype Mutation {\n  updateRole(input: UpdateRoleInput!): Role!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderStateTransitionError Type in GraphQL\nDESCRIPTION: The OrderStateTransitionError type represents an error during the state transition of an order. It contains fields for errorCode, message, transitionError, fromState, and toState.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_75\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type OrderStateTransitionError {\\n  errorCode: ErrorCode!\\n  message: String!\\n  transitionError: String!\\n  fromState: String!\\n  toState: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Updating Order Item Unit Prices SQL Query\nDESCRIPTION: SQL query to update order_item unit prices by adjusting for tax rates when unitPriceIncludesTax is true. Required for migrating existing orders to new price handling system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE order_item SET unitPrice = ROUND(unitPrice / ((taxRate + 100) / 100)) WHERE unitPriceIncludesTax = 1\n```\n\n----------------------------------------\n\nTITLE: Resolver Class Declaration\nDESCRIPTION: Basic example of declaring a resolver class using the @Resolver decorator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver } from '@nestjs/graphql';\n\n@Resolver()\nexport class WishlistResolver {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Custom Fields with Entity Property\nDESCRIPTION: Example showing how to configure a 'relation' custom field that references the Product entity, creating a self-reference relationship.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Product } from '\\@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'relatedProducts',\n                list: true,\n                // highlight-next-line\n                type: 'relation',\n                // highlight-next-line\n                entity: Product,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: JobBuffer Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for JobBuffer, specifying the required properties and methods that must be implemented including id, collect, and reduce.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-buffer.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface JobBuffer<Data extends JobData<Data> = object> {\n    readonly id: string;\n    collect(job: Job<Data>): boolean | Promise<boolean>;\n    reduce(collectedJobs: Array<Job<Data>>): Array<Job<Data>> | Promise<Array<Job<Data>>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Products List in GraphQL\nDESCRIPTION: Defines a GraphQL query to list Products with options for filtering and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_24\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"List Products\"\"\"\ntype Query {\n  products(options: ProductListOptions): ProductList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchEvent Class in TypeScript\nDESCRIPTION: This code defines the SearchEvent class, introduced in version 1.6.0, which is fired whenever a search query is executed. It extends VendureEvent and includes a constructor with context and input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nclass SearchEvent extends VendureEvent {\n    constructor(ctx: RequestContext, input: ExtendedSearchInput)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveOptionGroupFromProductResult Union Type in GraphQL\nDESCRIPTION: GraphQL union type representing possible outcomes when removing an option group from a product. It can return either a Product or ProductOptionInUseError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_161\n\nLANGUAGE: graphql\nCODE:\n```\nunion RemoveOptionGroupFromProductResult = Product | ProductOptionInUseError\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Fields with EntityHydrator\nDESCRIPTION: Using EntityHydrator to access relation custom fields in TypeScript.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await this.customerService.findOne(ctx, 1);\nawait this.entityHydrator.hydrate(ctx, customer, { relations: ['customFields.avatar'] });\nconsole.log(customer.avatar);\n```\n\n----------------------------------------\n\nTITLE: JobQueue Generic Type Declaration\nDESCRIPTION: Example showing the generic type parameter declaration for a JobQueue, defining the structure of data that must be passed to jobQueue.add().\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nJobQueue<{ productId: ID; videoUrl: string; }>\n```\n\n----------------------------------------\n\nTITLE: Defining RedisCachePlugin Class Structure in TypeScript\nDESCRIPTION: Class definition for RedisCachePlugin which implements a Redis-based cache strategy. It includes default options for maximum item size, Redis configuration, and namespace settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/redis-cache-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RedisCachePlugin {\n    static options: RedisCachePluginInitOptions = {\n        maxItemSizeInBytes: 128_000,\n        redisOptions: {},\n        namespace: 'vendure-cache',\n    };\n    init(options: RedisCachePluginInitOptions) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendure Admin UI with Custom Translations\nDESCRIPTION: TypeScript configuration for registering new translation files and setting language preferences in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/adding-ui-translations/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            port: 3002,\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [{\n                    translations: {\n                        ms: path.join(__dirname, 'translations/ms.json'),\n                    }\n                }],\n            }),\n            adminUiConfig:{\n                defaultLanguage: LanguageCode.ms,\n                availableLanguages: [LanguageCode.ms, LanguageCode.en],\n            }\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Stock Location Strategy in TypeScript\nDESCRIPTION: Class definition for DefaultStockLocationStrategy that handles stock location management for single-location setups. It includes methods for initialization, checking available stock, and handling stock allocation. Note that this strategy is not suitable for multi-location or multi-channel scenarios.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/default-stock-location-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultStockLocationStrategy extends BaseStockLocationStrategy {\n    init(injector: Injector) => ;\n    getAvailableStock(ctx: RequestContext, productVariantId: ID, stockLevels: StockLevel[]) => AvailableStock;\n    forAllocation(ctx: RequestContext, stockLocations: StockLocation[], orderLine: OrderLine, quantity: number) => LocationWithQuantity[] | Promise<LocationWithQuantity[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantSortParameter Input Type in GraphQL\nDESCRIPTION: This input type defines sorting parameters for product variants. It includes fields for various properties like stock levels, creation date, SKU, name, price, and more. Each field uses the SortOrder enum to specify the sorting direction.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_126\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantSortParameter {\n  stockOnHand: SortOrder\n  stockAllocated: SortOrder\n  outOfStockThreshold: SortOrder\n  id: SortOrder\n  productId: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  sku: SortOrder\n  name: SortOrder\n  price: SortOrder\n  priceWithTax: SortOrder\n  stockLevel: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Promotions with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a promotion. Requires the ID of the promotion to delete and returns a DeletionResponse object with information about the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_56\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deletePromotion(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MyEntityResolver using BaseEntityResolver in TypeScript\nDESCRIPTION: This example demonstrates how to create a custom entity resolver by extending the BaseEntityResolver class. It sets up the resolver with an empty entity structure and a query function to fetch the entity data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/base-entity-resolver.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyEntityResolver extends BaseEntityResolver<MyEntityFragment> {\n  constructor(router: Router, dataService: DataService) {\n    super(\n      router,\n      {\n        __typename: 'MyEntity',\n        id: '',\n        createdAt: '',\n        updatedAt: '',\n        name: '',\n      },\n      id => dataService.query(GET_MY_ENTITY, { id }).mapStream(data => data.myEntity),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Removal in BullMQJobQueuePlugin\nDESCRIPTION: This snippet demonstrates how to configure the removal of completed and failed jobs. It sets a limit of 500 completed jobs and removes failed jobs after 7 days or when the count exceeds 1000.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  plugins: [\n    BullMQJobQueuePlugin.init({\n      workerOptions: {\n        removeOnComplete: {\n          count: 500,\n        },\n        removeOnFail: {\n          age: 60 * 60 * 24 * 7, // 7 days\n          count: 1000,\n        },\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Verify Customer Account Mutation\nDESCRIPTION: GraphQL mutation for verifying a customer's email address using a token. Password required if not set during registration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  verifyCustomerAccount(token: String!, password: String): VerifyCustomerAccountResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionItemAction Class in TypeScript\nDESCRIPTION: The PromotionItemAction class extends PromotionAction and is used for promotions that apply to individual OrderLines. It requires a config object that defines how the discount is calculated for each line item.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionItemAction<T extends ConfigArgs = ConfigArgs, U extends Array<PromotionCondition<any>> = []> extends PromotionAction<T, U> {\n    constructor(config: PromotionItemActionConfig<T, U>)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerFilterParameter for Customer Filtering in GraphQL\nDESCRIPTION: This GraphQL input type defines the filtering parameters for customer queries in Vendure. It allows filtering customers by various fields like id, name, and email, supporting complex logical operations with _and and _or operators for advanced filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  title: StringOperators\n  firstName: StringOperators\n  lastName: StringOperators\n  phoneNumber: StringOperators\n  emailAddress: StringOperators\n  _and: [CustomerFilterParameter!]\n  _or: [CustomerFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubscribableJob Class in TypeScript\nDESCRIPTION: Class definition for SubscribableJob that extends Job class, allowing subscription to job updates. Includes a constructor and an updates method that returns an Observable stream of job updates through polling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/subscribable-job.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SubscribableJob<T extends JobData<T> = any> extends Job<T> {\n    constructor(job: Job<T>, jobQueueStrategy: JobQueueStrategy)\n    updates(options?: JobUpdateOptions) => Observable<JobUpdate<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Price Calculation Strategy in Vendure Config\nDESCRIPTION: Configuration to add the custom engraving price calculation strategy to Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/configurable-products/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { EngravingPriceStrategy } from './engraving-price-calculation-strategy';\n\nexport const config: VendureConfig = {\n    // ...\n    orderOptions: {\n        orderItemPriceCalculationStrategy: new EngravingPriceStrategy(),\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Facet Values in Vendure GraphQL API\nDESCRIPTION: Mutation for updating one or more FacetValues simultaneously. Accepts an array of UpdateFacetValueInput objects and returns an array of the updated FacetValue entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_117\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate one or more FacetValues\n\"\"\"\ntype Mutation {\n  updateFacetValues(input: [UpdateFacetValueInput!]!): [FacetValue!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Remove All Order Lines Mutation in GraphQL for Vendure\nDESCRIPTION: Mutation that removes all OrderLines from the current Order. Returns a RemoveOrderItemsResult object with the updated order information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeAllOrderLines: RemoveOrderItemsResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GlobalTemplateVarsFn Type in TypeScript\nDESCRIPTION: This code snippet defines the GlobalTemplateVarsFn type, which is a function that dynamically loads global template variables. It allows access to Vendure services and can return asynchronous values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype GlobalTemplateVarsFn = (\n    ctx: RequestContext,\n    injector: Injector,\n) => Promise<{ [key: string]: any }>\n```\n\n----------------------------------------\n\nTITLE: Defining the EventBus Class Signature in TypeScript\nDESCRIPTION: This snippet presents the TypeScript class signature for `EventBus`. It shows the constructor dependency (`TransactionSubscriber`), key methods like `publish`, `ofType`, `filter`, and `registerBlockingEventHandler` with their parameters and return types. It also indicates that the class implements the `OnModuleDestroy` interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-bus.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass EventBus implements OnModuleDestroy {\n    constructor(transactionSubscriber: TransactionSubscriber)\n    publish(event: T) => Promise<void>;\n    ofType(type: Type<T>) => Observable<T>;\n    filter(predicate: (event: VendureEvent) => boolean) => Observable<T>;\n    registerBlockingEventHandler(handlerOptions: BlockingEventHandlerOptions<T>) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Wishlist Resolver in TypeScript for Vendure\nDESCRIPTION: This code defines a resolver for handling wishlist-related queries and mutations in a Vendure plugin. It includes methods for retrieving the active customer's wishlist, adding items to the wishlist, and removing items from the wishlist.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { Allow, Ctx, Permission, RequestContext, Transaction } from '@vendure/core';\n\nimport { WishlistService } from '../services/wishlist.service';\n\n@Resolver()\nexport class WishlistShopResolver {\n    constructor(private wishlistService: WishlistService) {}\n\n    @Query()\n    @Allow(Permission.Owner)\n    async activeCustomerWishlist(@Ctx() ctx: RequestContext) {\n        return this.wishlistService.getWishlistItems(ctx);\n    }\n\n    @Mutation()\n    @Transaction()\n    @Allow(Permission.Owner)\n    async addToWishlist(\n        @Ctx() ctx: RequestContext,\n        @Args() { productVariantId }: { productVariantId: string },\n    ) {\n        return this.wishlistService.addItem(ctx, productVariantId);\n    }\n\n    @Mutation()\n    @Transaction()\n    @Allow(Permission.Owner)\n    async removeFromWishlist(@Ctx() ctx: RequestContext, @Args() { itemId }: { itemId: string }) {\n        return this.wishlistService.removeItem(ctx, itemId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodConfigOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the PaymentMethodConfigOptions interface, which extends ConfigurableOperationDefOptions and includes methods for payment operations and state transitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-config-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PaymentMethodConfigOptions<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {\n    createPayment: CreatePaymentFn<T>;\n    settlePayment: SettlePaymentFn<T>;\n    cancelPayment?: CancelPaymentFn<T>;\n    createRefund?: CreateRefundFn<T>;\n    onStateTransitionStart?: OnTransitionStartFn<PaymentState, PaymentTransitionData>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route for Product Detail in Angular\nDESCRIPTION: This snippet shows how to define a custom route for the product detail page in Angular. It uses the registerRouteComponent function to set up the route with a custom component and reuses the core GraphQL query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetProductDetailDocument, registerRouteComponent } from '@vendure/admin-ui/core';\nimport { MyProductDetailComponent } from './components/product-detail/product-detail.component';\n\nexport default [\n    registerRouteComponent({\n        component: MyProductDetailComponent,\n        // The path must then match the remainder\n        // of the built-in route path\n        path: 'products/:id',\n        // We can re-use the GraphQL query from the core to get\n        // access to the same data in our component\n        query: GetProductDetailDocument,\n        entityKey: 'product',\n        getBreadcrumbs: entity => [\n            { label: 'breadcrumb.products', link: ['/catalog/products'] },\n            { label: entity?.name ?? 'catalog.create-new-product', link: ['.'] },\n        ],\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring StellatePlugin within VendureConfig\nDESCRIPTION: This TypeScript snippet demonstrates how to initialize and configure the `StellatePlugin` within the `plugins` array of your `VendureConfig`. It shows setting the required `serviceName` and `apiToken` (retrieved from environment variables), toggling `devMode` and `debugLogging` based on environment, and including the `defaultPurgeRules`. Custom purge rules can be added to the `purgeRules` array.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StellatePlugin, defaultPurgeRules } from '@vendure/stellate-plugin';\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n   // ...\n   plugins: [\n       StellatePlugin.init({\n           // The Stellate service name, i.e. `<serviceName>.stellate.sh`\n           serviceName: 'my-service',\n           // The API token for the Stellate Purging API. See the \"pre-requisites\" section above.\n           apiToken: process.env.STELLATE_PURGE_API_TOKEN,\n           devMode: !isProd || process.env.STELLATE_DEBUG_MODE ? true : false,\n           debugLogging: process.env.STELLATE_DEBUG_MODE ? true : false,\n           purgeRules: [\n               ...defaultPurgeRules,\n               // custom purge rules can be added here\n           ],\n       }),\n   ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Address Mutation\nDESCRIPTION: GraphQL mutation for setting the shipping address for an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetShippingAddress($input: CreateAddressInput!){\n  setOrderShippingAddress(input: $input) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DataTableComponentConfig Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of the DataTableComponentConfig interface which configures a CustomDetailComponent to be placed in a specific location in a data table. It includes properties for specifying the table location, column ID, component to render, and optional providers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-table-components/data-table-component-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DataTableComponentConfig {\n    tableId: DataTableLocationId;\n    columnId: DataTableColumnId;\n    component: Type<CustomColumnComponent>;\n    providers?: Provider[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Address Type\nDESCRIPTION: The Address type holds information about a user's address, including fields like id, fullName, streetLine1, and country. These define the required schema for address handling within Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Address {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  fullName: String\n  company: String\n  streetLine1: String!\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  country: Country!\n  phoneNumber: String\n  defaultShippingAddress: Boolean\n  defaultBillingAddress: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Storefront Search Query for Stellate Caching\nDESCRIPTION: This TypeScript snippet, defining a GraphQL query using `graphql-tag` or a similar library, shows how to modify a storefront's `search` query. It highlights the addition of the `cacheIdentifier { collectionSlug }` field to the `search` query's response. Including this identifier is crucial for the StellatePlugin to correctly purge the cache when related entities (like Products or Collections within a specific collection) are updated.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { graphql } from '../generated/gql';\n\nexport const searchProductsDocument = graphql(`\n    query SearchProducts($input: SearchInput!) {\n        search(input: $input) {\n            // highlight-start\n            cacheIdentifier {\n                collectionSlug\n            }\n            // highlight-end\n            items {\n               # ...\n            }\n        }\n    }\n}`);\n```\n\n----------------------------------------\n\nTITLE: Updating Channel - GraphQL Mutation - GraphQL\nDESCRIPTION: Provides a mutation for updating an existing channel entity, such as changing display name or default settings. The updateChannel mutation accepts an UpdateChannelInput and returns an UpdateChannelResult indicating success or validation errors. In multi-channel Vendure systems, channels must be managed carefully as they affect visibility and permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_109\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Channel\n\"\"\"\ntype Mutation {\nupdateChannel(input: UpdateChannelInput!): UpdateChannelResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing InMemoryJobQueueStrategy with Vendure Bootstrap\nDESCRIPTION: Example showing how to initialize the JobQueueService with the InMemoryJobQueueStrategy when bootstrapping a Vendure server. This approach only works when the job queue is started from the main server process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/in-memory-job-queue-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrap(config)\n  .then(app => app.get(JobQueueService).start());\n```\n\n----------------------------------------\n\nTITLE: Defining the createPromotion Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createPromotion` mutation within the `Mutation` type. It requires a non-nullable `CreatePromotionInput` object as input and returns a non-nullable `CreatePromotionResult` object, signifying the outcome of the promotion creation process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createPromotion(input: CreatePromotionInput!): CreatePromotionResult!\n}\n```\n\n----------------------------------------\n\nTITLE: OrderAddress Type Definition in GraphQL\nDESCRIPTION: Defines the structure for shipping and billing addresses associated with orders. Contains fields for contact information and location details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_68\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderAddress {\n  fullName: String\n  company: String\n  streetLine1: String\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  country: String\n  countryCode: String\n  phoneNumber: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataService Class in TypeScript\nDESCRIPTION: The DataService class provides methods for executing GraphQL queries and mutations. It uses Apollo Client internally for maintaining a normalized entity cache.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/data-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DataService {\n    query(query: DocumentNode | TypedDocumentNode<T, V>, variables?: V, fetchPolicy: WatchQueryFetchPolicy = 'cache-and-network', options: ExtendedQueryOptions = {}) => QueryResult<T, V>;\n    mutate(mutation: DocumentNode | TypedDocumentNode<T, V>, variables?: V, update?: MutationUpdaterFunction<T, V, any, any>, options: ExtendedQueryOptions = {}) => Observable<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Vendure Server with NestJS DevTools in TypeScript\nDESCRIPTION: This example shows how to pass additional options to the NestJS application when bootstrapping Vendure, specifically enabling the NestJS DevTools.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/bootstrap.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap } from '@vendure/core';\nimport { config } from './vendure-config';\n\nbootstrap(config, {\n  nestApplicationOptions: {\n    snapshot: true,\n  }\n}).catch(err => {\n  console.log(err);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteAdministrator Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `deleteAdministrator` mutation for deleting a single Administrator. It requires the non-nullable `ID` of the administrator to be deleted as input and returns a non-nullable `DeletionResponse` object indicating the outcome.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete an Administrator\n\"\"\"\ntype Mutation {\n  deleteAdministrator(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Angular Route with Page Title and Breadcrumb - TypeScript\nDESCRIPTION: This snippet registers a new Angular route component in Vendure admin UI. It uses registerRouteComponent to associate a component (TestComponent) with metadata including title and breadcrumb. The code demonstrates how to configure routes for plugin pages and set UI metadata at definition time. Dependencies: @vendure/admin-ui/core. The registered parameters 'title' and 'breadcrumb' are used for UI labeling. Input: routing config; output: visible page and breadcrumb.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\\nimport { TestComponent } from './components/test/test.component';\\n\\nexport default [\\n    registerRouteComponent({\\n        component: TestComponent,\\n        // highlight-next-line\\n        title: 'Test',\\n        breadcrumb: 'Test',\\n    }),\\n];\n```\n\n----------------------------------------\n\nTITLE: Defining EmailPluginOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the EmailPluginOptions interface, which contains configuration options for the EmailPlugin. It includes properties for template path, transport options, event handlers, and more.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmailPluginOptions {\n    templatePath?: string;\n    templateLoader?: TemplateLoader;\n    transport:\n        | EmailTransportOptions\n        | ((injector?: Injector, ctx?: RequestContext) => EmailTransportOptions | Promise<EmailTransportOptions>);\n    handlers: Array<EmailEventHandler<string, any>>;\n    globalTemplateVars?: { [key: string]: any } | GlobalTemplateVarsFn;\n    emailSender?: EmailSender;\n    emailGenerator?: EmailGenerator;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InjectableStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for InjectableStrategy that includes optional init and destroy methods for handling setup and teardown logic in Vendure strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/injectable-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InjectableStrategy {\n    init?: (injector: Injector) => void | Promise<void>;\n    destroy?: () => void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Event Class in TypeScript\nDESCRIPTION: Event class that handles successful user login events. Extends VendureEvent and requires RequestContext and User entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nclass LoginEvent extends VendureEvent {\n    constructor(ctx: RequestContext, user: User)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Order Process Configuration in TypeScript\nDESCRIPTION: Example of updating the custom order process configuration to include the default process. This change is necessary due to the extraction of hard-coded states and transition logic in v2.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+ import { defaultOrderProcess } from '@vendure/core';\n\norderOptions: {\n-  process: [myCustomOrderProcess],\n+  process: [defaultOrderProcess, myCustomOrderProcess],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SellerList Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for a list of sellers, including the items and total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_173\n\nLANGUAGE: graphql\nCODE:\n```\ntype SellerList {\n  items: [Seller!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UiExtensionCompilerOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the UiExtensionCompilerOptions interface, which contains properties for configuring the compilation of the Vendure Admin UI with extensions. It includes options for output path, extensions, Angular compiler path, development mode, base href, watch port, build command, and additional process arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-extension-compiler-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UiExtensionCompilerOptions {\n    outputPath: string;\n    extensions: Extension[];\n    ngCompilerPath?: string | undefined;\n    devMode?: boolean;\n    baseHref?: string;\n    watchPort?: number;\n    command?: UiExtensionBuildCommand;\n    additionalProcessArguments?: UiExtensionCompilerProcessArgument[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionResult GraphQL Object Type\nDESCRIPTION: Defines the CollectionResult type, which represents the collections present in the products returned by a search and their quantities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_27\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype CollectionResult {\n  collection: Collection!\n  count: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantPriceCalculationArgs Interface in TypeScript\nDESCRIPTION: This code snippet defines the ProductVariantPriceCalculationArgs interface, which specifies the arguments passed to the calculate method of the ProductVariantPriceCalculationStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/product-variant-price-calculation-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProductVariantPriceCalculationArgs {\n    inputPrice: number;\n    productVariant: ProductVariant;\n    taxCategory: TaxCategory;\n    activeTaxZone: Zone;\n    ctx: RequestContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteChannel Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `deleteChannel` mutation for deleting a Channel. It requires the non-nullable `ID` of the channel to delete as input and returns a non-nullable `DeletionResponse` object indicating the result of the deletion attempt.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_32\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a Channel\n\"\"\"\ntype Mutation {\n  deleteChannel(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Entity with Vendure in TypeScript\nDESCRIPTION: The provided TypeScript code defines a Session class for the Vendure e-commerce platform. It includes properties such as token, expires, invalidated, activeOrderId, activeOrder, activeChannelId, activeChannel, and customFields. The class is designed to handle both authenticated and anonymous user sessions, with dependencies on VendureEntity and HasCustomFields. Important relationships include many-to-one associations with Order and Channel entities. The primary purpose of this class is to manage user sessions, ensuring proper session tracking and association with orders and channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/session.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Session extends VendureEntity implements HasCustomFields {\n    @Index({ unique: true })\n    @Column()\n    token: string;\n    @Column() expires: Date;\n    @Column() invalidated: boolean;\n    @EntityId({ nullable: true })\n    activeOrderId?: ID;\n    @Index()\n    @ManyToOne(type => Order)\n    activeOrder: Order | null;\n    @EntityId({ nullable: true })\n    activeChannelId?: ID;\n    @Index()\n    @ManyToOne(type => Channel)\n    activeChannel: Channel | null;\n    @Column(type => CustomSessionFields)\n    customFields: CustomSessionFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Seller Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for seller information, including basic details and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_172\n\nLANGUAGE: graphql\nCODE:\n```\ntype Seller {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ShippingMethod in GraphQL\nDESCRIPTION: This mutation type is used to update an existing ShippingMethod. It requires a UpdateShippingMethodInput object and returns the updated ShippingMethod.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_131\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateShippingMethod(input: UpdateShippingMethodInput!): ShippingMethod!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoopSessionCacheStrategy Class Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the class signature for `NoopSessionCacheStrategy`. It implements the `SessionCacheStrategy` interface but provides no-operation (noop) implementations for its methods (`clear`, `delete`, `get`, `set`). This effectively disables session caching, meaning cache lookups will always miss, and sessions will consistently be fetched from the database. It depends on the `SessionCacheStrategy` interface and the `CachedSession` type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/noop-session-cache-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass NoopSessionCacheStrategy implements SessionCacheStrategy {\n    clear() => ;\n    delete(sessionToken: string) => ;\n    get(sessionToken: string) => ;\n    set(session: CachedSession) => ;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the Vendure Stellate Plugin via npm\nDESCRIPTION: This shell command installs the `@vendure/stellate-plugin` package using npm, making the StellatePlugin available for use within a Vendure project. This is the first step required before configuring the plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/stellate-plugin\n```\n\n----------------------------------------\n\nTITLE: UpdatePromotionInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a promotion in the Vendure platform. Includes fields for promotion validity period, usage limits, coupon codes, conditions, actions, and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_195\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdatePromotionInput {\n  id: ID!\n  enabled: Boolean\n  startsAt: DateTime\n  endsAt: DateTime\n  couponCode: String\n  perCustomerUsageLimit: Int\n  usageLimit: Int\n  conditions: [ConfigurableOperationInput!]\n  actions: [ConfigurableOperationInput!]\n  translations: [PromotionTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Customer History Entry Component in TypeScript\nDESCRIPTION: A complete example showing how to create and register a custom TaxIdHistoryEntryComponent for displaying tax ID verification entries in the customer history timeline. The component implements CustomerHistoryEntryComponent interface and demonstrates conditional rendering based on entry data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/register-history-entry-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport {\n    CustomerFragment,\n    CustomerHistoryEntryComponent,\n    registerHistoryEntryComponent,\n    SharedModule,\n    TimelineDisplayType,\n    TimelineHistoryEntry,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'tax-id-verification-component',\n    template: `\n        <div *ngIf=\"entry.data.valid\">\n          Tax ID <strong>{{ entry.data.taxId }}</strong> was verified\n          <vdr-history-entry-detail *ngIf=\"entry.data\">\n            <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\n          </vdr-history-entry-detail>\n        </div>\n        <div *ngIf=\"entry.data.valid\">Tax ID {{ entry.data.taxId }} could not be verified</div>\n    `,\n    standalone: true,\n    imports: [SharedModule],\n})\nclass TaxIdHistoryEntryComponent implements CustomerHistoryEntryComponent {\n    entry: TimelineHistoryEntry;\n    customer: CustomerFragment;\n\n    getDisplayType(entry: TimelineHistoryEntry): TimelineDisplayType {\n        return entry.data.valid ? 'success' : 'error';\n    }\n\n    getName(entry: TimelineHistoryEntry): string {\n        return 'Tax ID Verification Plugin';\n    }\n\n    isFeatured(entry: TimelineHistoryEntry): boolean {\n        return true;\n    }\n\n    getIconShape(entry: TimelineHistoryEntry) {\n        return entry.data.valid ? 'check-circle' : 'exclamation-circle';\n    }\n}\n\nexport default [\n    registerHistoryEntryComponent({\n        type: 'CUSTOMER_TAX_ID_VERIFICATION',\n        component: TaxIdHistoryEntryComponent,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantPriceEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a ProductVariantPrice is added, updated or deleted. It extends VendureEntityEvent and includes a constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductVariantPriceEvent extends VendureEntityEvent<\n    ProductVariantPrice[],\n    ProductVariantInputTypes\n> {\n    constructor(ctx: RequestContext, entity: ProductVariantPrice[], type: 'created' | 'updated' | 'deleted', input?: ProductVariantInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Order Lines from Draft Orders in GraphQL\nDESCRIPTION: Specifies a mutation to remove an OrderLine from a draft Order, taking orderId and orderLineId as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_80\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeDraftOrderLine(orderId: ID!, orderLineId: ID!): RemoveOrderItemsResult!\n}\n```\n\n----------------------------------------\n\nTITLE: AssetPickerDialogComponent Class Definition\nDESCRIPTION: The complete class definition of AssetPickerDialogComponent showing its properties and methods. It implements OnInit, AfterViewInit, OnDestroy, and Dialog<Asset[]> interfaces and handles asset selection, pagination, filtering, and asset creation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/asset-picker-dialog-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass AssetPickerDialogComponent implements OnInit, AfterViewInit, OnDestroy, Dialog<Asset[]> {\n    assets$: Observable<AssetLike[]>;\n    allTags$: Observable<TagFragment[]>;\n    paginationConfig: PaginationInstance = {\n        currentPage: 1,\n        itemsPerPage: 25,\n        totalItems: 1,\n    };\n    multiSelect = true;\n    initialTags: string[] = [];\n    resolveWith: (result?: Asset[]) => void;\n    selection: Asset[] = [];\n    searchTerm$ = new BehaviorSubject<string | undefined>(undefined);\n    filterByTags$ = new BehaviorSubject<TagFragment[] | undefined>(undefined);\n    uploading = false;\n    constructor(dataService: DataService, notificationService: NotificationService)\n    ngOnInit() => ;\n    ngAfterViewInit() => ;\n    ngOnDestroy() => void;\n    pageChange(page: number) => ;\n    itemsPerPageChange(itemsPerPage: number) => ;\n    cancel() => ;\n    select() => ;\n    createAssets(files: File[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Custom Job Options in BullMQPluginOptions\nDESCRIPTION: This code snippet illustrates how to use the setJobOptions function in BullMQPluginOptions to specify additional options for jobs when they are added to the queue, such as setting different priorities for different queues.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqplugin-options.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsetJobOptions: (queueName, job) => {\n  const priority = queueName === 'critical' ? 1 : 5;\n  return { priority };\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration with Custom Permission\nDESCRIPTION: Demonstrates how to configure a Vendure plugin with custom permission, including GraphQL schema extension and permission registration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-permissions/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\nimport { VendurePlugin } from '@vendure/core';\n\nimport { InventorySyncResolver } from './api/inventory-sync.resolver'\nimport { sync } from './constants';\n\n@VendurePlugin({\n    adminApiExtensions: {\n        schema: gql`\n            input InventoryDataInput {\n              # omitted for brevity\n            }\n        \n            extend type Mutation {\n              syncInventory(input: InventoryDataInput!): Boolean!\n            }\n        `,\n        resolvers: [InventorySyncResolver]\n    },\n    configuration: config => {\n        config.authOptions.customPermissions.push(sync);\n        return config;\n    },\n})\nexport class InventorySyncPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Creating Superadmin RequestContext - Vendure - TypeScript\nDESCRIPTION: Defines an asynchronous function 'getSuperadminContext' that constructs a RequestContext instance where the active user has superadmin rights in the default channel for the Vendure framework. Requires the 'INestApplicationContext' dependency as an input to access the running application context, and returns a Promise resolving to a configured RequestContext. This is typically used for seeding or testing, and assumes that the required Vendure application and user infrastructure are initialized.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/get-superadmin-context.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getSuperadminContext(app: INestApplicationContext): Promise<RequestContext>\n```\n\n----------------------------------------\n\nTITLE: Defining GlobalSettings Type in GraphQL\nDESCRIPTION: Specifies the structure of global settings for the eCommerce platform, including language, inventory tracking, and server configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_73\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype GlobalSettings {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  availableLanguages: [LanguageCode!]!\n  trackInventory: Boolean!\n  outOfStockThreshold: Int!\n  serverConfig: ServerConfig!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResultPrice Union Type in GraphQL\nDESCRIPTION: Defines a GraphQL union type for search result prices, which can be either a price range or a single price.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_171\n\nLANGUAGE: graphql\nCODE:\n```\nunion SearchResultPrice = PriceRange | SinglePrice\n```\n\n----------------------------------------\n\nTITLE: Configuring HardenPlugin with Logging (TypeScript)\nDESCRIPTION: This snippet shows how to configure the HardenPlugin with logging enabled. It sets up detailed logging of query complexity scores for debugging purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardenPlugin } from '@vendure/harden-plugin';\n\nconst config: VendureConfig = {\n  // A detailed summary is logged at the \"debug\" level\n  logger: new DefaultLogger({ level: LogLevel.Debug }),\n  plugins: [\n     HardenPlugin.init({\n       maxQueryComplexity: 650,\n       logComplexityScore: true,\n     }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Timeline Entry Component in Angular\nDESCRIPTION: Creates an Angular component to render tax ID verification entries in the Customer timeline. The component implements CustomerHistoryEntryComponent interface and defines display logic for different verification states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-timeline-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport {\n    CustomerFragment,\n    CustomerHistoryEntryComponent,\n    SharedModule,\n    TimelineDisplayType,\n    TimelineHistoryEntry,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    selector: 'tax-id-verification-entry',\n    template: `\n        <div *ngIf=\"entry.data.valid\">\n            Tax ID <strong>{{ entry.data.taxId }}</strong> was verified\n            <vdr-history-entry-detail *ngIf=\"entry.data\">\n                <vdr-object-tree [value]=\"entry.data\"></vdr-object-tree>\n            </vdr-history-entry-detail>\n        </div>\n        <div *ngIf=\"!entry.data.valid\">Tax ID {{ entry.data.taxId }} could not be verified</div>\n    `,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class TaxIdHistoryEntryComponent implements CustomerHistoryEntryComponent {\n    entry: TimelineHistoryEntry;\n    customer: CustomerFragment;\n\n    getDisplayType(entry: TimelineHistoryEntry): TimelineDisplayType {\n        return entry.data.valid ? 'success' : 'error';\n    }\n\n    getName(entry: TimelineHistoryEntry): string {\n        return 'Tax ID Verification Plugin';\n    }\n\n    isFeatured(entry: TimelineHistoryEntry): boolean {\n        return true;\n    }\n\n    getIconShape(entry: TimelineHistoryEntry) {\n        return entry.data.valid ? 'check-circle' : 'exclamation-circle';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing products, including pagination, sorting, and filtering parameters. It allows for customizing the query results based on various criteria.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_119\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ProductListOptions {\n  skip: Int\n  take: Int\n  sort: ProductSortParameter\n  filter: ProductFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Custom Retries in BullMQPluginOptions\nDESCRIPTION: This code snippet demonstrates how to use the setRetries function in BullMQPluginOptions to override the default number of retries for specific job queues.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqplugin-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetRetries: (queueName, job) => {\n  if (queueName === 'send-email') {\n    // Override the default number of retries\n    // for the 'send-email' job because we have\n    // a very unreliable email service.\n    return 10;\n  }\n  return job.retries;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodSortParameter Input Type in GraphQL\nDESCRIPTION: Specifies sorting options for payment methods, allowing sorting by various fields such as id, createdAt, updatedAt, name, code, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_115\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PaymentMethodSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  code: SortOrder\n  description: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Set Order Billing Address Mutation in GraphQL for Vendure\nDESCRIPTION: Sets the billing address for the active Order. Takes a CreateAddressInput object containing the address details and returns an ActiveOrderResult with the updated order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setOrderBillingAddress(input: CreateAddressInput!): ActiveOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductVariant Entity Resolver\nDESCRIPTION: Shows how to create an entity resolver for the ProductVariant type to handle the new delivery field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext, ProductVariant } from '@vendure/core';\nimport { DeliveryEstimateService } from '../services/delivery-estimate.service';\n\n@Resolver('ProductVariant')\nexport class ProductVariantEntityResolver {\n    constructor(private deliveryEstimateService: DeliveryEstimateService) { }\n\n    @ResolveField()\n    delivery(@Ctx() ctx: RequestContext, @Parent() variant: ProductVariant) {\n        return this.deliveryEstimateService.getEstimate(ctx, variant.id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User and Customer Email Address with Token in TypeScript\nDESCRIPTION: Updates the email address for both the User and associated Customer entities using a valid token from an IdentifierChangeRequestEvent. This method confirms the email address change requested via `requestUpdateEmailAddress`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nupdateEmailAddress(ctx: RequestContext, token: string) => Promise<boolean | IdentifierChangeTokenInvalidError | IdentifierChangeTokenExpiredError>\n```\n\n----------------------------------------\n\nTITLE: Delete Tax Categories Mutations - GraphQL\nDESCRIPTION: GraphQL mutations for deleting single or multiple tax categories by ID. Returns DeletionResponse(s).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_67\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteTaxCategories(ids: [ID!]!): [DeletionResponse!]!\n  deleteTaxCategory(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Customers with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CustomerFilterParameter GraphQL input type used to filter customer data in Vendure. It provides various filter operators for customer properties and supports logical AND/OR combinations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_69\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerFilterParameter {\npostalCode: StringOperators\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\ntitle: StringOperators\nfirstName: StringOperators\nlastName: StringOperators\nphoneNumber: StringOperators\nemailAddress: StringOperators\n_and: [CustomerFilterParameter!]\n_or: [CustomerFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: PaymentInput for Adding Payments to Orders\nDESCRIPTION: Input type used with the addPaymentToOrder mutation. It specifies the payment method code and contains metadata required by the payment provider to process the transaction.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nPassed as input to the `addPaymentToOrder` mutation.\n\"\"\"\ninput PaymentInput {\n\"\"\"\nThis field should correspond to the `code` property of a PaymentMethod.\n\"\"\"\nmethod: String!\n\n\"\"\"\nThis field should contain arbitrary data passed to the specified PaymentMethodHandler's `createPayment()` method\nas the \"metadata\" argument. For example, it could contain an ID for the payment and other\ndata generated by the payment provider.\n\"\"\"\nmetadata: JSON!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SoftDeletable Interface - TypeScript\nDESCRIPTION: The SoftDeletable interface is for entities that support soft deletion, featuring a 'deletedAt' property that records the deletion timestamp or null if not deleted. This interface ensures consistent handling of deletable entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/interfaces.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SoftDeletable {\n    deletedAt: Date | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IneligibleShippingMethodError in GraphQL\nDESCRIPTION: GraphQL type definition for an error returned when attempting to set a ShippingMethod for which the Order is not eligible.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_50\n\nLANGUAGE: graphql\nCODE:\n```\ntype IneligibleShippingMethodError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Shipping Methods with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a shipping method. Requires the ID of the shipping method to delete and returns a DeletionResponse object with information about the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_63\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a ShippingMethod\n\"\"\"\ntype Mutation {\n  deleteShippingMethod(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Sellers with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a seller. Requires the ID of the seller to delete and returns a DeletionResponse object with information about the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_61\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a Seller\n\"\"\"\ntype Mutation {\n  deleteSeller(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Review Resolver\nDESCRIPTION: NestJS resolver implementation for handling product review queries with pagination support.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/paginated-list/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Query, Resolver } from '@nestjs/graphql';\nimport { Ctx, PaginatedList, RequestContext } from '@vendure/core';\n\nimport { ProductReview } from '../entities/product-review.entity';\nimport { ProductReviewService } from '../services/product-review.service';\n\n@Resolver()\nexport class ProductReviewAdminResolver {\n    constructor(private productReviewService: ProductReviewService) {}\n\n    @Query()\n    async productReviews(\n        @Ctx() ctx: RequestContext,\n        @Args() args: any,\n    ): Promise<PaginatedList<ProductReview>> {\n        return this.productReviewService.findAll(ctx, args.options || undefined);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ParsedFacet Interface Definition in TypeScript\nDESCRIPTION: Defines the intermediate representation of a Facet after being parsed by the ImportParser, containing translations with facet and value information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedFacet {\n    translations: Array<{\n        languageCode: LanguageCode;\n        facet: string;\n        value: string;\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: DuplicateEntityFn Type Definition\nDESCRIPTION: TypeScript type definition for the function that performs entity duplication. It defines the input parameters and return type required for duplication functions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-duplicator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype DuplicateEntityFn<T extends ConfigArgs> = (input: {\n    ctx: RequestContext;\n    entityName: string;\n    id: ID;\n    args: ConfigArgValues<T>;\n}) => Promise<VendureEntity>\n```\n\n----------------------------------------\n\nTITLE: NodemailerEmailSender Class Definition\nDESCRIPTION: Implementation of the EmailSender interface using Nodemailer as the transport mechanism.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-sender.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass NodemailerEmailSender implements EmailSender {\n    send(email: EmailDetails, options: EmailTransportOptions) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultGuestCheckoutStrategy in Vendure\nDESCRIPTION: Example of how to configure the DefaultGuestCheckoutStrategy in a Vendure application. This snippet shows how to disable guest checkouts and guest checkouts for registered customers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-guest-checkout-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultGuestCheckoutStrategy, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  orderOptions: {\n    guestCheckoutStrategy: new DefaultGuestCheckoutStrategy({\n      allowGuestCheckouts: false,\n      allowGuestCheckoutForRegisteredCustomers: false,\n    }),\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure Core Package\nDESCRIPTION: Command to install the core Vendure package via npm. This is the main dependency required to start building with the Vendure ecommerce framework.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @vendure/core\n```\n\n----------------------------------------\n\nTITLE: Defining EmailPluginDevModeOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the EmailPluginDevModeOptions interface, which extends EmailPluginOptions and provides configuration for running the EmailPlugin in development mode.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmailPluginDevModeOptions extends Omit<EmailPluginOptions, 'transport'> {\n    devMode: true;\n    outputPath: string;\n    route: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Eligible Shipping Methods Query\nDESCRIPTION: This JSON response shows the structure of the data returned when querying eligible shipping methods, including multiple shipping options with their details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"eligibleShippingMethods\": [\n      {\n        \"id\": \"1\",\n        \"name\": \"Standard Shipping\",\n        \"price\": 500,\n        \"priceWithTax\": 500\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Express Shipping\",\n        \"price\": 1000,\n        \"priceWithTax\": 1000\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterRouteComponent Function Signature\nDESCRIPTION: TypeScript function signature for the registerRouteComponent function, showing its generic type parameters and options parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/routes/register-route-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerRouteComponent<Component extends any | BaseDetailComponent<Entity>, Entity extends { id: string; updatedAt?: string }, T extends DocumentNode | TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field>(options: RegisterRouteComponentOptions<Component, Entity, T, Field, R>): void\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Index to ProductVariant.sku with EntityMetadataModifier\nDESCRIPTION: Example showing how to use EntityMetadataModifier to add a unique index to the ProductVariant's sku column. This modifies the database schema before it's created.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Index } from 'typeorm';\nimport { EntityMetadataModifier, ProductVariant } from '@vendure/core';\n\n// Adds a unique index to the ProductVariant.sku column\nexport const addSkuUniqueIndex: EntityMetadataModifier = metadata => {\n  const instance = new ProductVariant();\n  Index({ unique: true })(instance, 'sku');\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Promotion Condition using FacetValueChecker in TypeScript\nDESCRIPTION: This example demonstrates how to create a custom promotion condition that checks if an order contains a minimum quantity of products with specific facet values. It utilizes the FacetValueChecker to determine if order lines match the specified facet criteria.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/facet-value-checker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FacetValueChecker, LanguageCode, PromotionCondition, TransactionalConnection } from '@vendure/core';\n\nlet facetValueChecker: FacetValueChecker;\n\nexport const hasFacetValues = new PromotionCondition({\n  code: 'at_least_n_with_facets',\n  description: [\n    { languageCode: LanguageCode.en, value: 'Buy at least { minimum } products with the given facets' },\n  ],\n  args: {\n    minimum: { type: 'int' },\n    facets: { type: 'ID', list: true, ui: { component: 'facet-value-form-input' } },\n  },\n  init(injector) {\n    facetValueChecker = injector.get(FacetValueChecker);\n  },\n  async check(ctx, order, args) {\n    let matches = 0;\n    for (const line of order.lines) {\n      if (await facetValueChecker.hasFacetValues(line, args.facets)) {\n          matches += line.quantity;\n      }\n    }\n    return args.minimum <= matches;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining RegisterCustomerInput Input Type in GraphQL\nDESCRIPTION: This input type is used for registering new customers. It includes fields for email address, title, first name, last name, phone number, and password.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\ninput RegisterCustomerInput {\n  emailAddress: String!\n  title: String\n  firstName: String\n  lastName: String\n  phoneNumber: String\n  password: String\n}\n```\n\n----------------------------------------\n\nTITLE: TransitionOrderToStateResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when transitioning an order to a different state, returning either an Order or an error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_212\n\nLANGUAGE: graphql\nCODE:\n```\nunion TransitionOrderToStateResult =\nOrder | OrderStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Creating Address for a Customer in TypeScript\nDESCRIPTION: Creates and saves a new Address entity associated with a specific customer ID. Requires the request context, the target customer's ID, and the address details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncreateAddress(ctx: RequestContext, customerId: ID, input: CreateAddressInput) => Promise<Address>\n```\n\n----------------------------------------\n\nTITLE: Defining CountryTranslationInput Input - GraphQL\nDESCRIPTION: This input type specifies the structure for providing translation data for a Country entity. It requires the unique identifier (id) and the language code (languageCode), which must be a defined enum value. Additional fields include the translated name and customFields to accommodate extensible metadata. Inputs are validated according to the GraphQL type system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_38\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CountryTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MoneyStrategy Interface in TypeScript\nDESCRIPTION: Defines a class that implements the MoneyStrategy interface for handling monetary values in Vendure. It stores values as integers in the database with 2 decimal precision and includes rounding functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/default-money-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultMoneyStrategy implements MoneyStrategy {\n    readonly moneyColumnOptions: ColumnOptions = {\n        type: 'int',\n    };\n    readonly precision: number = 2;\n    round(value: number, quantity:  = 1) => number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Production Vendure Template\nDESCRIPTION: Complete production-ready template configuration for Vendure deployment with separate server, worker, MinIO storage, and Postgres database. Includes configuration for all infrastructure components with estimated monthly cost of $20.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-northflank/index.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiVersion\": \"v1.2\",\n  \"spec\": {\n    \"kind\": \"Workflow\",\n    \"spec\": {\n      \"type\": \"sequential\",\n      \"steps\": [\n        {\n          \"kind\": \"Project\",\n          \"ref\": \"project\",\n          \"spec\": {\n            \"name\": \"Vendure\",\n            \"region\": \"europe-west\",\n            \"description\": \"Vendure is a modern, open-source composable commerce platform\",\n            \"color\": \"#17b9ff\"\n          }\n        },\n        {\n          \"kind\": \"Workflow\",\n          \"spec\": {\n            \"type\": \"parallel\",\n            \"context\": {\n              \"projectId\": \"${refs.project.id}\"\n            },\n            \"steps\": [\n              {\n                \"kind\": \"Addon\",\n                \"ref\": \"database\",\n                \"spec\": {\n                  \"name\": \"database\",\n                  \"type\": \"postgres\",\n                  \"version\": \"14-latest\",\n                  \"billing\": {\n                    \"deploymentPlan\": \"nf-compute-20\",\n                    \"storageClass\": \"ssd\",\n                    \"storage\": 4096,\n                    \"replicas\": 1\n                  },\n                  \"tlsEnabled\": false,\n                  \"externalAccessEnabled\": false,\n                  \"ipPolicies\": [],\n                  \"pitrEnabled\": false\n                }\n              },\n              {\n                \"kind\": \"Addon\",\n                \"ref\": \"storage\",\n                \"spec\": {\n                  \"name\": \"minio\",\n                  \"type\": \"minio\",\n                  \"version\": \"latest\",\n                  \"billing\": {\n                    \"deploymentPlan\": \"nf-compute-20\",\n                    \"storageClass\": \"ssd\",\n                    \"storage\": 4096,\n                    \"replicas\": 1\n                  },\n                  \"tlsEnabled\": true,\n                  \"externalAccessEnabled\": false,\n                  \"ipPolicies\": [],\n                  \"pitrEnabled\": false,\n                  \"typeSpecificSettings\": {},\n                  \"backupSchedules\": []\n                }\n              }\n            ]\n          }\n        },\n        {\n          \"kind\": \"SecretGroup\",\n          \"spec\": {\n            \"projectId\": \"${refs.project.id}\",\n            \"secretType\": \"environment-arguments\",\n            \"priority\": 10,\n            \"name\": \"secrets\",\n            \"secrets\": {\n              \"variables\": {\n                \"APP_ENV\": \"production\",\n                \"COOKIE_SECRET\": \"${fn.randomSecret(32)}\",\n                \"SUPERADMIN_USERNAME\": \"superadmin\",\n                \"SUPERADMIN_PASSWORD\": \"${fn.randomSecret(16)}\",\n                \"DB_SCHEMA\": \"public\"\n              },\n              \"files\": {}\n            },\n            \"addonDependencies\": [\n              {\n                \"addonId\": \"${refs.database.id}\",\n                \"keys\": [\n                  {\n                    \"keyName\": \"HOST\",\n                    \"aliases\": [\n                      \"DB_HOST\"\n                    ]\n                  },\n                  {\n                    \"keyName\": \"PORT\",\n                    \"aliases\": [\n                      \"DB_PORT\"\n                    ]\n                  },\n                  {\n                    \"keyName\": \"DATABASE\",\n                    \"aliases\": [\n                      \"DB_NAME\"\n                    ]\n                  },\n                  {\n                    \"keyName\": \"USERNAME\",\n                    \"aliases\": [\n                      \"DB_USERNAME\"\n                    ]\n                  },\n                  {\n                    \"keyName\": \"PASSWORD\",\n                    \"aliases\": [\n                      \"DB_PASSWORD\"\n                    ]\n                  }\n                ]\n              },\n              {\n                \"addonId\": \"${refs.storage.id}\",\n                \"keys\": [\n                  {\n                    \"keyName\": \"MINIO_ENDPOINT\",\n                    \"aliases\": [\n                      \"MINIO_ENDPOINT\"\n                    ]\n                  },\n                  {\n                    \"keyName\": \"ACCESS_KEY\",\n                    \"aliases\": [\n                      \"MINIO_ACCESS_KEY\"\n                    ]\n                  },\n                  {\n                    \"keyName\": \"SECRET_KEY\",\n                    \"aliases\": [\n                      \"MINIO_SECRET_KEY\"\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"restrictions\": {\n              \"restricted\": false,\n              \"nfObjects\": [],\n              \"tags\": []\n            }\n          }\n        },\n        {\n          \"kind\": \"BuildService\",\n          \"ref\": \"builder\",\n          \"spec\": {\n            \"name\": \"builder\",\n            \"projectId\": \"${refs.project.id}\",\n            \"billing\": {\n              \"deploymentPlan\": \"nf-compute-20\"\n            },\n            \"vcsData\": {\n              \"projectUrl\": \"https://github.com/vendure-ecommerce/one-click-deploy\",\n              \"projectType\": \"github\"\n            },\n            \"buildSettings\": {\n              \"dockerfile\": {\n                \"buildEngine\": \"kaniko\",\n                \"dockerFilePath\": \"/Dockerfile\",\n                \"dockerWorkDir\": \"/\",\n                \"useCache\": false\n              }\n            },\n            \"disabledCI\": false,\n            \"buildArguments\": {}\n          }\n        },\n        {\n          \"kind\": \"Build\",\n          \"spec\": {\n            \"id\": \"${refs.builder.id}\",\n            \"projectId\": \"${refs.project.id}\",\n            \"type\": \"service\",\n            \"branch\": \"master\",\n            \"buildOverrides\": {\n              \"buildArguments\": {}\n            },\n            \"reuseExistingBuilds\": true\n          },\n          \"condition\": \"success\",\n          \"ref\": \"build\"\n        },\n        {\n          \"kind\": \"Workflow\",\n          \"spec\": {\n            \"type\": \"parallel\",\n            \"context\": {\n              \"projectId\": \"${refs.project.id}\"\n            },\n            \"steps\": [\n              {\n                \"kind\": \"DeploymentService\",\n                \"spec\": {\n                  \"deployment\": {\n                    \"instances\": 1,\n                    \"storage\": {\n                      \"ephemeralStorage\": {\n                        \"storageSize\": 1024\n                      },\n                      \"shmSize\": 64\n                    },\n                    \"docker\": {\n                      \"configType\": \"customCommand\",\n                      \"customCommand\": \"node ./dist/index.js\"\n                    },\n                    \"internal\": {\n                      \"id\": \"${refs.builder.id}\",\n                      \"branch\": \"master\",\n                      \"buildSHA\": \"latest\"\n                    }\n                  },\n                  \"name\": \"server\",\n                  \"billing\": {\n                    \"deploymentPlan\": \"nf-compute-20\"\n                  },\n                  \"ports\": [\n                    {\n                      \"name\": \"app\",\n                      \"internalPort\": 3000,\n                      \"public\": true,\n                      \"protocol\": \"HTTP\",\n                      \"security\": {\n                        \"credentials\": [],\n                        \"policies\": []\n                      },\n                      \"domains\": [],\n                      \"disableNfDomain\": false\n                    }\n                  ],\n                  \"runtimeEnvironment\": {},\n                  \"runtimeFiles\": {}\n                },\n                \"ref\": \"server\"\n              },\n              {\n                \"kind\": \"DeploymentService\",\n                \"spec\": {\n                  \"deployment\": {\n                    \"instances\": 1,\n                    \"storage\": {\n                      \"ephemeralStorage\": {\n                        \"storageSize\": 1024\n                      },\n                      \"shmSize\": 64\n                    },\n                    \"docker\": {\n                      \"configType\": \"customCommand\",\n                      \"customCommand\": \"node ./dist/index-worker.js\"\n                    },\n                    \"internal\": {\n                      \"id\": \"${refs.builder.id}\",\n                      \"branch\": \"master\",\n                      \"buildSHA\": \"latest\"\n                    }\n                  },\n                  \"name\": \"worker\",\n                  \"billing\": {\n                    \"deploymentPlan\": \"nf-compute-10\"\n                  },\n                  \"ports\": [],\n                  \"runtimeEnvironment\": {},\n                  \"runtimeFiles\": {}\n                },\n                \"ref\": \"worker\"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TimeAgoPipe in HTML Templates\nDESCRIPTION: Example of how to use the TimeAgoPipe in Angular templates to format dates relative to the current time.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/time-ago-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ order.orderPlacedAt | timeAgo }}\n```\n\n----------------------------------------\n\nTITLE: Defining StockLocationFilterParameter Input Type in GraphQL\nDESCRIPTION: Defines an input type for filtering stock locations in queries. Provides operators for filtering by ID, dates, name, description, and supports logical combinations of filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_153\n\nLANGUAGE: graphql\nCODE:\n```\ninput StockLocationFilterParameter {\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\nname: StringOperators\ndescription: StringOperators\n_and: [StockLocationFilterParameter!]\n_or: [StockLocationFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendure Admin UI Extension\nDESCRIPTION: Vendure configuration setup including AdminUiPlugin initialization and UI extension compilation settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/using-other-frameworks/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport { VendureConfig } from '@vendure/core';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            route: 'admin',\n            port: 3002,\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [{\n                    extensionPath: path.join(__dirname, 'plugins/my-plugin/ui'),\n                    routes: [{ route: 'vue-ui', filePath: 'routes.ts' }],\n                    staticAssets: [\n                        {path: path.join(__dirname, 'plugins/my-plugin/ui/vue-app/dist'), rename: 'vue-app'},\n                    ],\n                }],\n                devMode: true,\n            }),\n        }),\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SplitOrderContents Interface in TypeScript\nDESCRIPTION: Defines the SplitOrderContents interface which represents the contents of an aggregate Order that make up a single seller Order. It includes properties for channel ID, order state, order lines, and shipping lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-seller-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SplitOrderContents {\n    channelId: ID;\n    state: OrderState;\n    lines: OrderLine[];\n    shippingLines: ShippingLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Database Initializer in TypeScript\nDESCRIPTION: This code snippet illustrates how to implement a custom database initializer by creating a class that implements the 'TestDbInitializer' interface and registering it with 'registerInitializer'. No additional dependencies are required beyond the '@vendure/testing' package. The key parameter is the connection options specific to the database being initialized. The initializer is responsible for setting up, populating, and destroying the database for testing purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/test-db-initializer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class CockroachDbInitializer implements TestDbInitializer<CockroachConnectionOptions> {\n    // database-specific implementation goes here\n}\n\nregisterInitializer('cockroachdb', new CockroachDbInitializer());\n```\n\n----------------------------------------\n\nTITLE: Updating Country - GraphQL Mutation - GraphQL\nDESCRIPTION: Adds the updateCountry mutation to change details for a Country entity, such as names or codes. Expects an UpdateCountryInput, returning a Country object with updated information. Used for localization or shop-specific country configuration; validation for uniqueness and format may apply.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_111\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Country\n\"\"\"\ntype Mutation {\nupdateCountry(input: UpdateCountryInput!): Country!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantTranslation GraphQL Object Type\nDESCRIPTION: Defines the ProductVariantTranslation object type, which represents translations of a product variant's name in different languages. It includes fields for language code and translated name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_143\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariantTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultStockAllocationStrategy Class Definition in TypeScript\nDESCRIPTION: Definition of the DefaultStockAllocationStrategy class that implements StockAllocationStrategy interface. It determines when stock should be allocated during order state transitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-stock-allocation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultStockAllocationStrategy implements StockAllocationStrategy {\n    shouldAllocateStock(ctx: RequestContext, fromState: OrderState, toState: OrderState, order: Order) => boolean | Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EntityWithAssets Interface in TypeScript\nDESCRIPTION: This code snippet defines the EntityWithAssets interface, which is used by entities like Product, ProductVariant, and Collection to model a featured asset and a list of assets with a defined order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/asset-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EntityWithAssets extends VendureEntity {\n    featuredAsset: Asset | null;\n    assets: OrderableAsset[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelPaymentError GraphQL Object Type in Vendure\nDESCRIPTION: Defines the CancelPaymentError GraphQL object type which represents an error returned when a payment cancellation fails.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if the Payment cancellation fails\n\"\"\"\ntype CancelPaymentError {\n  errorCode: ErrorCode!\n  message: String!\n  paymentErrorMessage: String!\n}\n```\n\n----------------------------------------\n\nTITLE: HardenPlugin Class Definition (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript class definition for the HardenPlugin. It includes static options and an init method for plugin initialization.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass HardenPlugin {\n    static options: HardenPluginOptions;\n    init(options: HardenPluginOptions) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relations Decorator with Omit Option\nDESCRIPTION: This snippet demonstrates how to use the Relations decorator with the omit option, which explicitly excludes certain relations from the calculated relations array.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/relations-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Relations({ entity: Collection, omit: ['productVariant'] }) relations: RelationPaths<Collection>,\n```\n\n----------------------------------------\n\nTITLE: Manipulating Form Data in React Component\nDESCRIPTION: Shows how to manipulate form data in a React custom detail component by updating the description field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-detail-components/index.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Card, useDetailComponentData } from '@vendure/admin-ui/react';\n\nexport function ProductInfo() {\n    const { detailForm } = useDetailComponentData();\n\n    const updateDescription = () => {\n        const descriptionControl = detailForm.get('description');\n        if (descriptionControl) {\n            descriptionControl.setValue('New description');\n            descriptionControl.markAsDirty();\n        }\n    };\n\n    return (\n        <button className=\"button secondary\" onClick={updateDescription}>Update description</button>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Country Class Signature in TypeScript\nDESCRIPTION: This snippet presents the TypeScript class definition for `Country`. It extends the `Region` class, signifying its role as a specific type of geographical region. The class includes a constructor that accepts an optional partial object for initialization and defines a read-only `type` property preset to 'country', distinguishing it from other region types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/country.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\nclass Country extends Region {\n    constructor(input?: DeepPartial<Country>)\n    readonly type: RegionType = 'country';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: UpdateSellerInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a seller entity in the multi-vendor setup. Contains fields for name and custom fields, with ID being the only required field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_198\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateSellerInput {\n  id: ID!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: LogoutEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle user logout events. Triggered when a user logs out via shop or admin API logout mutation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nclass LogoutEvent extends VendureEvent {\n    constructor(ctx: RequestContext)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCustomerResult Union in GraphQL\nDESCRIPTION: Defines the `CreateCustomerResult` GraphQL union type in the Vendure Admin API. This union indicates the possible results of a customer creation attempt, returning either the successfully created `Customer` object or an `EmailAddressConflictError` if the email address is already in use.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_41\n\nLANGUAGE: graphql\nCODE:\n```\nunion CreateCustomerResult =\nCustomer | EmailAddressConflictError\n```\n\n----------------------------------------\n\nTITLE: Adding Localized Descriptions to Custom Fields\nDESCRIPTION: Shows how to add multilingual descriptions to custom fields using LocalizedStringArray.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode } from '@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'infoUrl',\n                type: 'string',\n                // highlight-start\n                description: [\n                    {languageCode: LanguageCode.en, value: 'A URL to more information about the product'},\n                    {languageCode: LanguageCode.de, value: 'Eine URL zu weiteren Informationen über das Produkt'},\n                    {languageCode: LanguageCode.es, value: 'Una URL con más información sobre el producto'},\n                ],\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCollectionInput schema in GraphQL\nDESCRIPTION: An input type for updating a product Collection in Vendure. Allows for modifying metadata, parent-child relationships, featured assets, and collection filtering rules.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_177\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCollectionInput {\n  id: ID!\n  isPrivate: Boolean\n  featuredAssetId: ID\n  parentId: ID\n  assetIds: [ID!]\n  inheritFilters: Boolean\n  filters: [ConfigurableOperationInput!]\n  translations: [UpdateCollectionTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionEvent Class in TypeScript\nDESCRIPTION: This code defines the PromotionEvent class, which is fired whenever a Promotion is added, updated, or deleted. It extends VendureEntityEvent and includes a constructor with context, entity, type, and optional input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionEvent extends VendureEntityEvent<Promotion, PromotionInputTypes> {\n    constructor(ctx: RequestContext, entity: Promotion, type: 'created' | 'updated' | 'deleted', input?: PromotionInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StellateService Cache Purge Interface - TypeScript\nDESCRIPTION: This snippet defines the signature of the StellateService class, used for cache invalidation in Vendure's Stellate plugin. It includes a constructor that takes StellatePluginOptions and methods such as purgeProducts, purgeProductVariants, purgeSearchResults, purgeAllOfType, purgeCollections, purgeSearchResponseCacheIdentifiers, and purge. Each method targets cache entries for different Vendure entity types (e.g., Product, ProductVariant, Collection) or cached types, accepting relevant input arrays. This code assumes the presence of specific Vendure data types and constants, and the output is a service object for cache management, not meant for standalone execution.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/stellate-service.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StellateService {\n    constructor(options: StellatePluginOptions)\n    purgeProducts(products: Product[]) => ;\n    purgeProductVariants(productVariants: ProductVariant[]) => ;\n    purgeSearchResults(items: Array<ProductVariant | Product>) => ;\n    purgeAllOfType(type: CachedType) => ;\n    purgeCollections(collections: Collection[]) => ;\n    purgeSearchResponseCacheIdentifiers(collections: Collection[]) => ;\n    purge(type: CachedType, keys?: ID[], keyName:  = 'id') => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the RefundLine Entity in TypeScript\nDESCRIPTION: This TypeScript class defines the `RefundLine` entity. It represents a specific line item from an `Order` that has been included in a `Refund`. It extends `OrderLineReference` and establishes a many-to-one relationship with the `Refund` entity, storing the `refundId`. Requires TypeORM decorators (`@Index`, `@ManyToOne`, `@EntityId`) and depends on the `Refund` and `OrderLineReference` entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-line-reference.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass RefundLine extends OrderLineReference {\n    constructor(input?: DeepPartial<RefundLine>)\n    @Index()\n    @ManyToOne(type => Refund, refund => refund.lines)\n    refund: Refund;\n    @EntityId()\n    refundId: ID;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Alert Provider in TypeScript for Vendure Admin UI\nDESCRIPTION: Demonstrates how to create a custom alert provider that checks for orders requiring manual review. The implementation includes periodic checking, alert display logic, click handling, and dynamic label generation. Uses Angular's dependency injection and RxJS intervals for polling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/alerts/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerAlert } from '@vendure/admin-ui/core';\nimport { Router } from '@angular/router';\nimport { interval } from 'rxjs';\n\nimport { ManualOrderReviewService } from './providers/manual-order-review.service';\n\nexport default [\n    ManualOrderReviewService,\n    registerAlert({\n        id: 'orders-require-approval',\n        // This function is responsible for fetching the data needed to determine\n        // whether the alert should be displayed.\n        check: ({ injector }) => {\n            const manualOrderReviewService = injector.get(ManualOrderReviewService);\n            return manualOrderReviewService.getOrdersRequiringApproval()\n                .then(orders => orders.length);\n        },\n        // This function is responsible for determining whether and how often the\n        // `check` function should be called. In this case, we will check every 60 seconds.\n        recheck: () => interval(60_000),\n        // This function gets passed the data returned by the `check` function and\n        // should return `true` if the alert should be displayed.\n        isAlert: orderCount => orderCount > 0,\n        // This function is called when the alert is clicked. Here, we will navigate to\n        // a new route to display the orders requiring approval.\n        action: (orderCount, { injector }) => {\n            injector.get(Router).navigate(['/extensions/manual-order-review']);\n        },\n        // This function is called to determine the label of the alert.\n        label: (orderCount) => ({\n            text: `${orderCount} ${orderCount === 1 ? 'order' : 'orders'} require approval`,\n        }),\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing UseGuestIfExistingEmptyStrategy in TypeScript for Vendure\nDESCRIPTION: A strategy that uses the guest order if the existing order is empty, otherwise using the existing order. This strategy implements the OrderMergeStrategy interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/merge-strategies.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass UseGuestIfExistingEmptyStrategy implements OrderMergeStrategy {\n    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateChannelInput schema in GraphQL\nDESCRIPTION: An input type for updating a sales Channel in Vendure. Allows configuration of language, currency, tax, and inventory settings for a specific sales channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_176\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateChannelInput {\n  id: ID!\n  code: String\n  token: String\n  defaultLanguageCode: LanguageCode\n  availableLanguageCodes: [LanguageCode!]\n  pricesIncludeTax: Boolean\n  currencyCode: CurrencyCode\n  defaultCurrencyCode: CurrencyCode\n  availableCurrencyCodes: [CurrencyCode!]\n  trackInventory: Boolean\n  outOfStockThreshold: Int\n  defaultTaxZoneId: ID\n  defaultShippingZoneId: ID\n  sellerId: ID\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAssetResult Union in GraphQL\nDESCRIPTION: Defines the `CreateAssetResult` GraphQL union type. This union represents the possible outcomes of an asset creation operation in the Vendure Admin API, which can be either a successfully created `Asset` object or a `MimeTypeError` if the uploaded file type is disallowed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\nunion CreateAssetResult =\nAsset | MimeTypeError\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePaymentFn Type in TypeScript\nDESCRIPTION: This type defines the structure of the function for creating a payment. It takes various parameters including context, order, amount, and metadata, and returns either a CreatePaymentResult or CreatePaymentErrorResult.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype CreatePaymentFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    amount: number,\n    args: ConfigArgValues<T>,\n    metadata: PaymentMetadata,\n    method: PaymentMethod,\n) => CreatePaymentResult | CreatePaymentErrorResult | Promise<CreatePaymentResult | CreatePaymentErrorResult>\n```\n\n----------------------------------------\n\nTITLE: Update Customer Address Mutation\nDESCRIPTION: GraphQL mutation for updating an existing customer address using UpdateAddressInput data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateCustomerAddress(input: UpdateAddressInput!): Address!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePromotionResult Union in GraphQL\nDESCRIPTION: Defines the `CreatePromotionResult` GraphQL union type within the Vendure Admin API. It represents the outcome of creating a promotion, which can be either the successfully created `Promotion` object or a `MissingConditionsError` if the necessary conditions for the promotion were not provided.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_43\n\nLANGUAGE: graphql\nCODE:\n```\nunion CreatePromotionResult =\nPromotion | MissingConditionsError\n```\n\n----------------------------------------\n\nTITLE: Documenting Plugin Options Interface with JSDoc\nDESCRIPTION: Example of how to document a plugin options interface using JSDoc comments. It shows how to tag the interface and document default values for optional properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Configuration options for the LoyaltyPointsPlugin.\n *\n * @category Plugin\n */\nexport interface LoyaltyPointsPluginInitOptions {\n    /**\n     * Whether to allow partial redemption of points.\n     *\n     * @default true\n     */\n    enablePartialRedemption?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Translatable Entities with TranslatorService\nDESCRIPTION: Service implementation showing how to load and translate Facet entities using TranslatorService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translations/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class MyService {\n    constructor(private connection: TransactionalConnection, private translator: TranslatorService) {}\n\n    async getFacet(ctx: RequestContext, id: ID): Promise<Facet | undefined> {\n        const facet = await this.connection.getRepository(ctx, Facet).findOne(id);\n        if (facet) {\n            return this.translatorService.translate(facet, ctx);\n        }\n    }\n    \n    async getFacets(ctx: RequestContext): Promise<Facet[]> {\n        const facets = await this.connection.getRepository(ctx, Facet).find();\n        return Promise.all(facets.map(facet => this.translatorService.translate(facet, ctx)));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateActiveAdministratorInput Input Type in GraphQL\nDESCRIPTION: Input type for updating the currently active administrator's details. Provides fields for updating personal information, email address, password, and any custom fields defined in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_172\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateActiveAdministratorInput {\n  firstName: String\n\n  lastName: String\n\n  emailAddress: String\n\n  password: String\n\n  customFields: JSON\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asset - CreateAssetInput Input - GraphQL\nDESCRIPTION: This input type allows for the creation of media assets by providing a file upload, optional tags, and custom metadata. The 'file' parameter requires an Upload scalar type and is mandatory, while tags and customFields are optional and allow further categorization or extension of assets. Files must be provided in accordance with the GraphQL Upload specification.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_41\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateAssetInput {\n  file: Upload!\n  tags: [String!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metric Summary Input - GraphQL\nDESCRIPTION: Specifies a GraphQL input type for querying metric summaries, requiring a metric interval and a list of metric types, with an optional refresh boolean. Depends on MetricInterval and MetricType enums. Used for retrieving aggregated metrics over specified intervals and types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_101\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput MetricSummaryInput {\n  interval: MetricInterval!\n  types: [MetricType!]!\n  refresh: Boolean\n}\n\n```\n\n----------------------------------------\n\nTITLE: IDOperators GraphQL Input Type Definition\nDESCRIPTION: Defines operators for filtering on ID fields, supporting equality, inequality, inclusion, exclusion, and null checking operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_96\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on an ID field\n\"\"\"\ninput IDOperators {\neq: String\nnotEq: String\nin: [String!]\nnotIn: [String!]\nisNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Tag Mutation - GraphQL\nDESCRIPTION: GraphQL mutation for deleting an existing tag by its ID. Returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_66\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteTag(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Collections in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple Collections and all their descendants. Takes an array of Collection IDs and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_35\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCollections(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translatable Entities with TranslatableSaver\nDESCRIPTION: Service implementation showing how to create translatable entities using the TranslatableSaver service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translateable/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RequestService {\n\n    constructor(private translatableSaver: TranslatableSaver) {}\n\n    async create(ctx: RequestContext, input: CreateProductRequestInput): Promise<ProductRequest> {\n        const request = await this.translatableSaver.create({\n            ctx,\n            input,\n            entityType: ProductRequest,\n            translationType: ProductRequestTranslation,\n            beforeSave: async f => {\n                // Assign relations here\n            },\n        });\n        return request;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Provinces in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing Province. Accepts an UpdateProvinceInput object and returns the updated Province entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_128\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Province\n\"\"\"\ntype Mutation {\n  updateProvince(input: UpdateProvinceInput!): Province!\n}\n```\n\n----------------------------------------\n\nTITLE: Type Signature for ShouldRunCheckFn - Vendure - TypeScript\nDESCRIPTION: This TypeScript type alias defines the signature for the ShouldRunCheckFn used in shipping method configuration within Vendure. It specifies that the function takes a RequestContext, an Order, config argument values, and a ShippingMethod, and returns a JSON-compatible value or a Promise thereof. Intended for optimizing when to invoke expensive eligibility checks, this signature is essential for implementing performant custom logic in Vendure's shipping subsystem.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/should-run-check-fn.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ShouldRunCheckFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    method: ShippingMethod,\n) => Json | Promise<Json>\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe GraphQL Queries\nDESCRIPTION: Example of using the generated types with React Query and graphql-request, demonstrating type-safe GraphQL operations in a React component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/codegen/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@tanstack/react-query';\nimport request from 'graphql-request'\nimport { graphql } from './gql';\n\nconst GET_PRODUCTS = graphql(`\n    query GetProducts($options: ProductListOptions) {\n        products(options: $options) {\n            items {\n                id\n                name\n                slug\n                featuredAsset {\n                    preview\n                }\n            }\n        }\n    }\n`);\n\nexport default function App() {\n  const { isLoading, data } = useQuery({\n    queryKey: ['products'],\n    queryFn: async () =>\n      request(\n        'http://localhost:3000/shop-api',\n        GET_PRODUCTS,\n        {\n        options: { take: 3 },\n        }\n      ),\n  });\n\n  if (isLoading) return <p>Loading...</p>;\n\n  return data ? (\n    data.products.items.map(({ id, name, slug, featuredAsset }) => (\n      <div key={id}>\n        <h3>{name}</h3>\n        <img src={`${featuredAsset.preview}?preset=small`} alt={name} />\n      </div>\n    ))\n  ) : (\n    <>Loading...</>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TimeAgoPipe Class Definition in TypeScript\nDESCRIPTION: TypeScript class definition for the TimeAgoPipe, showing its implementation of PipeTransform, constructor that requires I18nService, and transform method signature.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/time-ago-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass TimeAgoPipe implements PipeTransform {\n    constructor(i18nService: I18nService)\n    transform(value: string | Date, nowVal?: string | Date) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Option Groups in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing ProductOptionGroup. Requires an UpdateProductOptionGroupInput object and returns the updated ProductOptionGroup entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_123\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing ProductOptionGroup\n\"\"\"\ntype Mutation {\n  updateProductOptionGroup(input: UpdateProductOptionGroupInput!): ProductOptionGroup!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fulfillment Event Class in TypeScript\nDESCRIPTION: Class that fires when a Fulfillment is added. Extends VendureEntityEvent and takes RequestContext and Fulfillment entity as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass FulfillmentEvent extends VendureEntityEvent<Fulfillment, CreateFulfillmentInput> {\n    constructor(ctx: RequestContext, entity: Fulfillment, input?: CreateFulfillmentInput)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldConfig Union in GraphQL\nDESCRIPTION: Defines the `CustomFieldConfig` GraphQL union type for the Vendure Admin API. This union represents the configuration details for various possible custom field types. It aggregates different specific configuration types like `StringCustomFieldConfig`, `LocaleStringCustomFieldConfig`, `IntCustomFieldConfig`, `FloatCustomFieldConfig`, `BooleanCustomFieldConfig`, `DateTimeCustomFieldConfig`, `RelationCustomFieldConfig`, `TextCustomFieldConfig`, `LocaleTextCustomFieldConfig`, and `StructCustomFieldConfig`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_46\n\nLANGUAGE: graphql\nCODE:\n```\nunion CustomFieldConfig =\nStringCustomFieldConfig | LocaleStringCustomFieldConfig | IntCustomFieldConfig | FloatCustomFieldConfig | BooleanCustomFieldConfig | DateTimeCustomFieldConfig | RelationCustomFieldConfig | TextCustomFieldConfig | LocaleTextCustomFieldConfig | StructCustomFieldConfig\n```\n\n----------------------------------------\n\nTITLE: Providing Variables for GraphQL Mutation in JSON\nDESCRIPTION: This JSON object represents the variables to be passed into the UpdateCustomerEmail mutation. It includes the customerId and new email address.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"customerId\": \"1\",\n    \"email\": \"john.smith@email.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in GraphQL\nDESCRIPTION: This type represents a user in the system, including fields for identification, verification status, roles, authentication methods, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_150\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype User {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  identifier: String!\n  verified: Boolean!\n  roles: [Role!]!\n  lastLogin: DateTime\n  authenticationMethods: [AuthenticationMethod!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: ActionBarContext Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for the context object available to action bar and menu items, including route information, services, and entity data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionBarContext {\n    route: ActivatedRoute;\n    injector: Injector;\n    dataService: DataService;\n    notificationService: NotificationService;\n    entity$: Observable<Record<string, any> | undefined>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Customer to Order in Vendure (TypeScript)\nDESCRIPTION: Associates a Customer with the Order. It takes a RequestContext, an order ID or Order object, and a Customer object as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\naddCustomerToOrder(ctx: RequestContext, orderIdOrOrder: ID | Order, customer: Customer): Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Defining Number Field Filtering Operators - GraphQL - GraphQL\nDESCRIPTION: Establishes the NumberOperators input type for advanced comparison of numeric fields (Int or Float). Supports eq, lt, lte, gt, gte, between (using a nested NumberRange), and isNull; all accept Float except between, which references NumberRange. Essential for flexible numeric filtering in queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a Int or Float field\n\"\"\"\ninput NumberOperators {\n  eq: Float\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  between: NumberRange\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignPromotionsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple promotions to a specific channel in the Vendure admin API. It requires a list of promotion IDs and the target channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_19\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignPromotionsToChannelInput {\n  promotionIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Braintree Dependencies with Yarn or NPM (Shell)\nDESCRIPTION: Installs the required Braintree packages (`@vendure/payments-plugin`, `braintree`, and `@types/braintree`) using either Yarn or NPM as per project prerequisites. The TypeScript typings are included for development support. These commands should be run in your project directory before importing or configuring the Braintree plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @vendure/payments-plugin braintree\nyarn add -D @types/braintree\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/payments-plugin braintree\nnpm install -D @types/braintree\n```\n\n----------------------------------------\n\nTITLE: Using ActionBar React Component in Vendure Admin UI\nDESCRIPTION: Example of how to import and use the ActionBar component in a custom React component. The ActionBar serves as a container for primary actions and can include optional left content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/action-bar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ActionBar } from '@vendure/admin-ui/react';\n\nexport function MyComponent() {\n  return (\n    <ActionBar leftContent={<div>Optional left content</div>}>\n      <button className='button primary'>Primary action</button>\n    </ActionBar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationStrategy Interface TypeScript\nDESCRIPTION: This snippet defines the AuthenticationStrategy interface, which outlines how users should be authenticated in the Vendure system. It involves extending the InjectableStrategy and implementing methods for defining input types and authenticating users. Key parameters include the context and data for the authentication logic, which can either resolve to a User object, a failure message, or an error flag.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/authentication-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AuthenticationStrategy<Data = unknown> extends InjectableStrategy {\\n    readonly name: string;\\n    defineInputType(): DocumentNode;\\n    authenticate(ctx: RequestContext, data: Data): Promise<User | false | string>;\\n    onLogOut?(ctx: RequestContext, user: User): Promise<void>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring TaxCategoryEvent Class - TypeScript\nDESCRIPTION: Defines TaxCategoryEvent, a TypeScript class for tracking creation, update, or deletion of a TaxCategory entity within Vendure. It extends VendureEntityEvent and provides a constructor accepting context, the tax category entity, type of event, and optional input data. Required parameters: ctx (context), entity (TaxCategory), type (created/updated/deleted), optional input. Outputs an event object representing the change.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TaxCategoryEvent extends VendureEntityEvent<TaxCategory, TaxCategoryInputTypes> {\n    constructor(ctx: RequestContext, entity: TaxCategory, type: 'created' | 'updated' | 'deleted', input?: TaxCategoryInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: DatetimePickerComponent Class Definition in TypeScript\nDESCRIPTION: The complete TypeScript class definition for the DatetimePickerComponent, showing its properties, input parameters, and methods for handling date selection and form control integration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/datetime-picker-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DatetimePickerComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {\n    @Input() yearRange;\n    @Input() weekStartDay: DayOfWeek = 'mon';\n    @Input() timeGranularityInterval = 5;\n    @Input() min: string | null = null;\n    @Input() max: string | null = null;\n    @Input() readonly = false;\n    @ViewChild('dropdownComponent', { static: true }) dropdownComponent: DropdownComponent;\n    @ViewChild('datetimeInput', { static: true }) datetimeInput: ElementRef<HTMLInputElement>;\n    @ViewChild('calendarTable') calendarTable: ElementRef<HTMLTableElement>;\n    disabled = false;\n    calendarView$: Observable<CalendarView>;\n    current$: Observable<CurrentView>;\n    selected$: Observable<Date | null>;\n    selectedHours$: Observable<number | null>;\n    selectedMinutes$: Observable<number | null>;\n    years: number[];\n    weekdays: string[] = [];\n    hours: number[];\n    minutes: number[];\n    constructor(changeDetectorRef: ChangeDetectorRef, datetimePickerService: DatetimePickerService)\n    ngOnInit() => ;\n    ngAfterViewInit() => void;\n    ngOnDestroy() => void;\n    registerOnChange(fn: any) => ;\n    registerOnTouched(fn: any) => ;\n    setDisabledState(isDisabled: boolean) => ;\n    writeValue(value: string | null) => ;\n    prevMonth() => ;\n    nextMonth() => ;\n    selectToday() => ;\n    setYear(event: Event) => ;\n    setMonth(event: Event) => ;\n    selectDay(day: DayCell) => ;\n    clearValue() => ;\n    handleCalendarKeydown(event: KeyboardEvent) => ;\n    setHour(event: Event) => ;\n    setMinute(event: Event) => ;\n    closeDatepicker() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SettlePaymentFn Type in TypeScript for Vendure Payment Handling\nDESCRIPTION: This type definition specifies the structure of a function for settling payments in Vendure. It takes context, order, payment, configuration arguments, and payment method as parameters, and returns a result or error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype SettlePaymentFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    payment: Payment,\n    args: ConfigArgValues<T>,\n    method: PaymentMethod,\n) => SettlePaymentResult | SettlePaymentErrorResult | Promise<SettlePaymentResult | SettlePaymentErrorResult>\n```\n\n----------------------------------------\n\nTITLE: Defining StringStructFieldConfig GraphQL Object Type\nDESCRIPTION: GraphQL type definition for StringStructFieldConfig which configures string fields within structured custom fields, providing options for validation, UI representation, and localization.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_132\n\nLANGUAGE: graphql\nCODE:\n```\ntype StringStructFieldConfig {\nname: String!\ntype: String!\nlist: Boolean!\nlabel: [LocalizedString!]\ndescription: [LocalizedString!]\nlength: Int\npattern: String\noptions: [StringFieldOption!]\nui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sale Stock Movement Entity - TypeScript\nDESCRIPTION: This snippet defines the Sale entity as a subclass of StockMovement, representing stock movements when order items are fulfilled. It specifies its type as SALE and links to the relevant OrderLine. Required dependencies are StockMovement, OrderLine, and DeepPartial; typical inputs are a partial Sale instance, and the entity is primarily used to record fulfilled item sales in the inventory system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-movement.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Sale extends StockMovement {\n    readonly type = StockMovementType.SALE;\n    constructor(input: DeepPartial<Sale>)\n    @ManyToOne(type => OrderLine, line => line.sales)\n    orderLine: OrderLine;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NothingToRefundError GraphQL Object Type\nDESCRIPTION: Defines the NothingToRefundError object type for cases where an attempt to refund an Order is made without specifying items or shipping refund.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_110\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned if an attempting to refund an Order but neither items nor shipping refund was specified\"\"\"\ntype NothingToRefundError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Customer Address Mutation in GraphQL\nDESCRIPTION: This mutation deletes an existing customer address. It uses the 'id' parameter to specify which address to delete and returns a 'Success' object upon successful deletion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { deleteCustomerAddress(id: ID!): Success! }\n```\n\n----------------------------------------\n\nTITLE: Defining ProvinceList Object Type in GraphQL\nDESCRIPTION: Defines the ProvinceList GraphQL type for paginated responses containing Province objects and total item count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_148\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProvinceList {\n  items: [Province!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundEvent Class in TypeScript\nDESCRIPTION: This code defines the RefundEvent class, which is fired whenever a Refund is created. It extends VendureEvent and includes a constructor with context, order, refund, and type parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nclass RefundEvent extends VendureEvent {\n    constructor(ctx: RequestContext, order: Order, refund: Refund, type: 'created')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JsonEditorFormInputComponent in TypeScript\nDESCRIPTION: A JSON editor input component with syntax highlighting and error detection for text fields. It extends BaseCodeEditorFormInputComponent and implements FormInputComponent, AfterViewInit, and OnInit interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass JsonEditorFormInputComponent extends BaseCodeEditorFormInputComponent implements FormInputComponent, AfterViewInit, OnInit {\n    static readonly id: DefaultFormComponentId = 'json-editor-form-input';\n    constructor(changeDetector: ChangeDetectorRef)\n    ngOnInit() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Email Template in Handlebars\nDESCRIPTION: Example of an email template using Handlebars and MJML for quote request responses.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n{{> header title=\"Here's the quote you requested\" }}\n\n<mj-section background-color=\"#fafafa\">\n    <mj-column>\n        <mj-text color=\"#525252\">\n            Thank you for your interest in our products! Here's the details\n            of the quote you recently requested:\n        </mj-text>\n\n        <--! your custom email layout goes here -->\n    </mj-column>\n</mj-section>\n\n\n{{> footer }}\n```\n\n----------------------------------------\n\nTITLE: Defining InsufficientStockError Type in GraphQL\nDESCRIPTION: Defines the `InsufficientStockError` type in GraphQL. This error is returned when attempting to add more items of a product variant to an Order than are currently available in stock. It includes the error code, message, the quantity actually available, and the affected order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_80\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when attempting to add more items to the Order than are available\n\"\"\"\ntype InsufficientStockError {\n  errorCode: ErrorCode!\n  message: String!\n  quantityAvailable: Int!\n  order: Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFields Type in GraphQL\nDESCRIPTION: Deprecated type definition for custom fields configuration. Lists available custom field configurations for various entities in the system. Replaced by EntityCustomFields type in v2.2.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_47\n\nLANGUAGE: graphql\nCODE:\n```\ntype CustomFields {\n  Address: [CustomFieldConfig!]!\n  Administrator: [CustomFieldConfig!]!\n  Asset: [CustomFieldConfig!]!\n  Channel: [CustomFieldConfig!]!\n  Collection: [CustomFieldConfig!]!\n  Customer: [CustomFieldConfig!]!\n  CustomerGroup: [CustomFieldConfig!]!\n  # ... additional entity fields\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shipping Eligibility Checker in TypeScript\nDESCRIPTION: This snippet demonstrates the instantiation of a ShippingEligibilityChecker with a specific configuration, which checks if an order's total amount surpasses a given minimum threshold. The code includes the checker setup with a description and arguments to be evaluated during the eligibility check.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-eligibility-checker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst minOrderTotalEligibilityChecker = new ShippingEligibilityChecker({\n    code: 'min-order-total-eligibility-checker',\n    description: [{ languageCode: LanguageCode.en, value: 'Checks that the order total is above some minimum value' }],\n    args: {\n        orderMinimum: { type: 'int', ui: { component: 'currency-form-input' } },\n    },\n    check: (ctx, order, args) => {\n        return order.totalWithTax >= args.orderMinimum;\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Angular Slider Form Input Component\nDESCRIPTION: Custom Angular component implementation for rendering a range slider input with value display.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IntCustomFieldConfig, SharedModule, FormInputComponent } from '@vendure/admin-ui/core';\n\n@Component({\n    template: `\n      <input\n          type=\"range\"\n          [min]=\"config.min || 0\"\n          [max]=\"config.max || 100\"\n          [formControl]=\"formControl\" />\n      {{ formControl.value }}\n  `,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class SliderControlComponent implements FormInputComponent<IntCustomFieldConfig> {\n    readonly: boolean;\n    config: IntCustomFieldConfig;\n    formControl: FormControl;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Order Custom Fields Mutation in GraphQL for Vendure\nDESCRIPTION: Allows any custom fields to be set for the active Order. Takes an UpdateOrderInput object containing the custom fields and returns an ActiveOrderResult with the updated order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setOrderCustomFields(input: UpdateOrderInput!): ActiveOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a ProductOption is added or updated. It extends VendureEntityEvent and includes a constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductOptionEvent extends VendureEntityEvent<ProductOption, ProductOptionInputTypes> {\n    constructor(ctx: RequestContext, entity: ProductOption, type: 'created' | 'updated' | 'deleted', input?: ProductOptionInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignProductVariantsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple product variants to a specific channel in the Vendure admin API. It requires a list of product variant IDs, the target channel ID, and optionally a price factor for adjusting prices.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_17\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignProductVariantsToChannelInput {\n  productVariantIds: [ID!]!\n  channelId: ID!\n  priceFactor: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Form Input Component in TypeScript\nDESCRIPTION: Demonstrates how to register a custom form input component using the registerFormInputComponent function. This component can be used for configurable operations or custom fields in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/register-form-input-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerFormInputComponent } from '@vendure/admin-ui/core';\n\nexport default [\n    registerFormInputComponent('my-custom-input', MyCustomFieldControl),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining AssetList GraphQL Object Type in Vendure\nDESCRIPTION: Defines the AssetList GraphQL object type which represents a paginated list of assets. It includes the asset items and the total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype AssetList {\n  items: [Asset!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerGroupService Class in TypeScript\nDESCRIPTION: This code snippet defines the CustomerGroupService class with its constructor and methods for managing CustomerGroup entities. It includes operations like finding all groups, finding a specific group, getting group customers, creating, updating, and deleting groups, as well as adding and removing customers from groups.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-group-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerGroupService {\n    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, historyService: HistoryService, eventBus: EventBus, customFieldRelationService: CustomFieldRelationService)\n    findAll(ctx: RequestContext, options?: CustomerGroupListOptions, relations: RelationPaths<CustomerGroup> = []) => Promise<PaginatedList<CustomerGroup>>;\n    findOne(ctx: RequestContext, customerGroupId: ID, relations: RelationPaths<CustomerGroup> = []) => Promise<CustomerGroup | undefined>;\n    getGroupCustomers(ctx: RequestContext, customerGroupId: ID, options?: CustomerListOptions) => Promise<PaginatedList<Customer>>;\n    create(ctx: RequestContext, input: CreateCustomerGroupInput) => Promise<CustomerGroup>;\n    update(ctx: RequestContext, input: UpdateCustomerGroupInput) => Promise<CustomerGroup>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    addCustomersToGroup(ctx: RequestContext, input: MutationAddCustomersToGroupArgs) => Promise<CustomerGroup>;\n    removeCustomersFromGroup(ctx: RequestContext, input: MutationRemoveCustomersFromGroupArgs) => Promise<CustomerGroup>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePromotionInput in GraphQL\nDESCRIPTION: This input type is used for creating a new promotion. It includes fields for enabled status, start and end dates, coupon code, usage limits, conditions, actions, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_59\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreatePromotionInput {\n  enabled: Boolean!\n  startsAt: DateTime\n  endsAt: DateTime\n  couponCode: String\n  perCustomerUsageLimit: Int\n  usageLimit: Int\n  conditions: [ConfigurableOperationInput!]!\n  actions: [ConfigurableOperationInput!]!\n  translations: [PromotionTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProductInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a product. It requires translations and optionally includes assets, facet values, and enabled status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_53\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProductInput {\n  featuredAssetId: ID\n  enabled: Boolean\n  assetIds: [ID!]\n  facetValueIds: [ID!]\n  translations: [ProductTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Taggable Interface - TypeScript\nDESCRIPTION: The Taggable interface enables entities to be categorized with Tags using a 'tags' property, which is an array of Tag objects. This aids in organizing and searching entities with similar characteristics.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/interfaces.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Taggable {\n    tags: Tag[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentUserChannel GraphQL Type in Vendure Shop API\nDESCRIPTION: Defines the `CurrentUserChannel` type, representing a channel accessible by the current user. It contains the channel's ID, a unique token identifying the channel, its code, and a list of permissions granted to the user within this specific channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ntype CurrentUserChannel {\n  id: ID!\n  token: String!\n  code: String!\n  permissions: [Permission!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockLevelInput Input Type in GraphQL\nDESCRIPTION: A simple input type used for updating stock levels at a specific location. Requires both the stock location ID and the new stock on hand quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_152\n\nLANGUAGE: graphql\nCODE:\n```\ninput StockLevelInput {\nstockLocationId: ID!\nstockOnHand: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Facet in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a Facet (product attribute category). Takes a Facet ID and optional force parameter, and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_45\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteFacet(id: ID!, force: Boolean): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Eligible Shipping Methods with GraphQL\nDESCRIPTION: This query evaluates and returns potential shipping methods applicable for a particular input scenario, defined by `TestEligibleShippingMethodsInput`. The output is a list of `ShippingMethodQuote` objects giving insights into each eligible shipping method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_48\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntestEligibleShippingMethods(input: TestEligibleShippingMethodsInput!): [ShippingMethodQuote!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Unset Order Billing Address Mutation\nDESCRIPTION: GraphQL mutation for removing the billing address from an active order. Available since Vendure version 3.1.0.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  unsetOrderBillingAddress: ActiveOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderList Type in Vendure GraphQL Schema (GraphQL, SDL)\nDESCRIPTION: Defines the OrderList GraphQL object type, used for returning paginated order results. Includes an array of Order objects in the items field and the totalItems integer for the overall count. Fields are non-nullable, and there are no external dependencies outside the schema. Suitable for responses to queries fetching many orders at once.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_72\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype OrderList {\nitems: [Order!]!\ntotalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegisterCustomerAccountResult Union Type in GraphQL\nDESCRIPTION: Union type definition for possible results when registering a customer account, including success or various error conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_107\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion RegisterCustomerAccountResult =\nSuccess | MissingPasswordError | PasswordValidationError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Writing E2E Test Example\nDESCRIPTION: Sample test case demonstrating how to write and execute a GraphQL query test using the test environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\nimport { it, expect, beforeAll, afterAll } from 'vitest';\nimport { myInitialData } from './fixtures/my-initial-data.ts';\n\nit('myNewQuery returns the expected result', async () => {\n    adminClient.asSuperAdmin();\n\n    const query = gql`\n    query MyNewQuery($id: ID!) {\n      myNewQuery(id: $id) {\n        field1\n        field2\n      }\n    }\n  `;\n    const result = await adminClient.query(query, {id: 123});\n\n    expect(result.myNewQuery).toEqual({ /* ... */})\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Administrator - CreateAdministratorInput Input - GraphQL\nDESCRIPTION: This input type is used to create a new Administrator user in the Vendure platform, requiring fields such as first name, last name, emailAddress, password, and an array of role IDs. Custom fields can be used to attach additional metadata. Required fields are enforced by GraphQL, and the operation may fail if mandatory values are missing or invalid.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_40\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateAdministratorInput {\n  firstName: String!\n  lastName: String!\n  emailAddress: String!\n  password: String!\n  roleIds: [ID!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantSortParameter Input Type in GraphQL\nDESCRIPTION: This input type specifies the sorting options for product variant queries. It allows sorting by various fields such as id, productId, createdAt, updatedAt, sku, name, price, and stockLevel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_41\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantSortParameter {\n  id: SortOrder\n  productId: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  sku: SortOrder\n  name: SortOrder\n  price: SortOrder\n  priceWithTax: SortOrder\n  stockLevel: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProvinceFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type is used for filtering provinces in queries. It includes various fields for filtering based on province attributes such as ID, creation date, code, and name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_132\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ProvinceFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  code: StringOperators\n  type: StringOperators\n  name: StringOperators\n  enabled: BooleanOperators\n  parentId: IDOperators\n  _and: [ProvinceFilterParameter!]\n  _or: [ProvinceFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CountryList GraphQL Object Type\nDESCRIPTION: Defines the CountryList type, which represents a paginated list of countries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_35\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype CountryList {\n  items: [Country!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagFilterParameter Input Type in GraphQL\nDESCRIPTION: Input type for filtering Tag entities. It provides filtering based on id, createdAt, updatedAt, and value fields, with support for logical AND/OR operations between filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_160\n\nLANGUAGE: graphql\nCODE:\n```\ninput TagFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  value: StringOperators\n  _and: [TagFilterParameter!]\n  _or: [TagFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stock Locations with GraphQL\nDESCRIPTION: This GraphQL query allows you to retrieve a list of stock locations by utilizing the `StockLocationListOptions` as input. The output is a `StockLocationList`, which provides detailed information about each stock location available in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_41\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\nstockLocations(options: StockLocationListOptions): StockLocationList!\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product Variants from Channels in GraphQL\nDESCRIPTION: Defines a mutation to remove ProductVariants from a specified Channel, returning an array of affected ProductVariant objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_85\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeProductVariantsFromChannel(input: RemoveProductVariantsFromChannelInput!): [ProductVariant!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Request Options in Vendure\nDESCRIPTION: This snippet shows how to provide additional options to the Stripe payment intent creation request. It adds a stripeAccount parameter based on the channel's connected account ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    StripePlugin.init({\n      requestOptions: (injector, ctx, order) => {\n        return {\n          stripeAccount: ctx.channel.seller?.customFields.connectedAccountId\n        },\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Customer by ID - GraphQL SDL - GraphQL\nDESCRIPTION: Defines the 'customer' query for fetching a Customer entity by ID. Used for accessing or managing individual customers. Expects a required ID and may return null if no match is found. Often used in admin customer management workflows.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  customer(id: ID!): Customer\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining PageTabConfig Interface TypeScript\nDESCRIPTION: Defines the `PageTabConfig` interface used to configure a new page tab in the Vendure Admin UI. Dependencies include the Angular framework. Key properties include location, tabIcon, route, and component, which specify the details of the tab's appearance and behavior. It optionally accepts route configuration for custom navigation and prioritization settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/tabs/page-tab-config.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PageTabConfig {\n    location: PageLocationId;\n    tabIcon?: string;\n    route: string;\n    tab: string;\n    priority?: number;\n    component: Type<any> | ReturnType<typeof detailComponentWithResolver>;\n    routeConfig?: Route;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethod GraphQL Type in Vendure\nDESCRIPTION: GraphQL schema definition for the PaymentMethod type that represents a payment method in the Vendure e-commerce platform. It includes fields for identification, configuration, and localization.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_125\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethod {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  code: String!\n  description: String!\n  enabled: Boolean!\n  checker: ConfigurableOperation\n  handler: ConfigurableOperation!\n  translations: [PaymentMethodTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntityHydrator in Shipping Calculator\nDESCRIPTION: Demonstrates how to use EntityHydrator to ensure specific relations are loaded before accessing them in a ShippingCalculator implementation. The example shows hydrating customer and customer groups relations for VIP customer detection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-service-layer/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityHydrator, ShippingCalculator } from '@vendure/core';\n\nlet entityHydrator: EntityHydrator;\n\nconst myShippingCalculator = new ShippingCalculator({\n    // ... rest of config omitted for brevity\n    init(injector) {\n        entityHydrator = injector.get(EntityHydrator);\n    },\n    calculate: (ctx, order, args) => {\n      // ensure that the customer and customer.groups relations are joined\n      await entityHydrator.hydrate(ctx, order, { relations: ['customer.groups' ]});\n\n      if (order.customer?.groups?.some(g => g.name === 'VIP')) {\n        // ... do something special for VIP customers\n      } else {\n        // ... do something else\n      }\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantPrice GraphQL Object Type\nDESCRIPTION: Defines the ProductVariantPrice object type, which represents the price of a product variant in a specific currency. It includes fields for currency code, price, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_142\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariantPrice {\n  currencyCode: CurrencyCode!\n  price: Money!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Groups List - GraphQL SDL - GraphQL\nDESCRIPTION: Defines 'customerGroups', a query returning a list of CustomerGroups according to CustomerGroupListOptions. Useful for enumerating and managing different customer segments. Always returns a non-nullable CustomerGroupList.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  customerGroups(options: CustomerGroupListOptions): CustomerGroupList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Role Type in GraphQL\nDESCRIPTION: Type definition for user roles within the system, specifying properties like permissions and channel access.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_113\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Role {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\ncode: String!\ndescription: String!\npermissions: [Permission!]!\nchannels: [Channel!]!\n}\n```\n\n----------------------------------------\n\nTITLE: OrderFilterParameter Input Type for Vendure GraphQL API\nDESCRIPTION: This GraphQL input type defines the parameters used for filtering orders in Vendure's shop API. It includes fields for filtering by order ID, dates, type, status, payment information, and allows for combining filters with logical operators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_32\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderFilterParameter {\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\ntype: StringOperators\norderPlacedAt: DateOperators\ncode: StringOperators\nstate: StringOperators\nactive: BooleanOperators\ntotalQuantity: NumberOperators\nsubTotal: NumberOperators\nsubTotalWithTax: NumberOperators\ncurrencyCode: StringOperators\nshipping: NumberOperators\nshippingWithTax: NumberOperators\ntotal: NumberOperators\ntotalWithTax: NumberOperators\n_and: [OrderFilterParameter!]\n_or: [OrderFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Connected Payment Method to an Order (GraphQL)\nDESCRIPTION: This GraphQL mutation, `addPaymentToOrder`, initiates the payment process for a multi-vendor order. It specifies the `method` as `\"connected-payment-method\"`, which is automatically created by the example plugin to simulate payment processing and splitting across sellers. The `metadata` field can be used for additional payment information if needed by the payment gateway.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/example-plugins/multivendor-plugin/README.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\nmutation {\n  addPaymentToOrder(input: { method: \"connected-payment-method\", metadata: {} }) {\n    ... on Order { id }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n    ... on PaymentFailedError {\n      paymentErrorMessage\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ZoneListOptions GraphQL Input Type\nDESCRIPTION: GraphQL input type for configuring zone list queries with pagination, sorting, and filtering options. Includes comments explaining each parameter's purpose.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_206\n\nLANGUAGE: graphql\nCODE:\n```\ninput ZoneListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: ZoneSortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: ZoneFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Using DummyPaymentHandler with GraphQL in Vendure\nDESCRIPTION: Example of adding a payment to an order using the dummy payment method. The metadata parameters control the behavior of the handler, allowing simulation of declined payments and errors both during initial authorization and during settlement.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/dummy-payment-handler.md#2025-04-22_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\naddPaymentToOrder(input: {\n  method: 'dummy-payment-method',\n  metadata: {\n    shouldDecline: false,\n    shouldError: false,\n    shouldErrorOnSettle: true,\n  }\n}) {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Form Input Implementation in React Components\nDESCRIPTION: React component implementation of form inputs using FormField and RichTextEditor components from Vendure Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { starIcon, userIcon } from '@cds/core/icon';\nimport { FormField, RichTextEditor } from '@vendure/admin-ui/react';\n\nexport function DemoComponent() {\n    return (\n        <div className=\"form-grid\">\n            <FormField label=\"Page title\">\n                <input type=\"text\" />\n            </FormField>\n            <FormField label=\"Select input\">\n                <select>\n                    <option>Option 1</option>\n                    <option>Option 2</option>\n                </select>\n            </FormField>\n            <FormField label=\"Checkbox input\">\n                <input type=\"checkbox\" />\n            </FormField>\n            <FormField label=\"Textarea input\">\n                <textarea />\n            </FormField>\n            <FormField label=\"With tooltip\" tooltip=\"This is a tooltip for the form input\">\n                <input type=\"text\" />\n            </FormField>\n            <FormField label=\"Invalid with error\" invalid>\n                <input type=\"text\" />\n            </FormField>\n            <RichTextEditor className=\"form-grid-span\" label=\"Description\" readOnly={false} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethod GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL type definition for shipping methods in the Vendure shop API. Contains method details including code, name, description, fulfillment handler, price calculator and eligibility checker configurations, and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_124\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethod {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  name: String!\n  description: String!\n  fulfillmentHandlerCode: String!\n  checker: ConfigurableOperation!\n  calculator: ConfigurableOperation!\n  translations: [ShippingMethodTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Transform Strategies in TypeScript\nDESCRIPTION: This interface, `ImageTransformStrategy`, extends `InjectableStrategy` and provides the `getImageTransformParameters` method to determine image transform parameters. It can handle custom logic and is used through the `imageTransformStrategy` option within AssetServerOptions. When executed, strategies process in sequence, and any errors result in logging and an HTTP 400 response. No external dependencies are listed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/image-transform-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ImageTransformStrategy extends InjectableStrategy {\\n    getImageTransformParameters(\\n        args: GetImageTransformParametersArgs,\\n    ): Promise<ImageTransformParameters> | ImageTransformParameters;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigArgDefinition GraphQL Object Type\nDESCRIPTION: Defines the ConfigArgDefinition type, which describes the structure and metadata of a configuration argument.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_30\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ConfigArgDefinition {\n  name: String!\n  type: String!\n  list: Boolean!\n  required: Boolean!\n  defaultValue: JSON\n  label: String\n  description: String\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for Translations\nDESCRIPTION: GraphQL schema definitions for ProductRequest and ProductRequestTranslation types, including input types for creation and updates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translateable/index.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductRequestTranslation {\n    id: ID!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    languageCode: LanguageCode!\n    text: String!\n}\n\ntype ProductRequest implements Node {\n    id: ID!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    text: String!\n    translations: [ProductRequestTranslation!]!\n}\n\ninput ProductRequestTranslationInput {\n    id: ID\n    languageCode: LanguageCode!\n    text: String!\n}\n\ninput CreateProductRequestInput {\n    text: String!\n    translations: [ProductRequestTranslationInput!]!\n}\n\ninput UpdateProductRequestInput {\n    text: String\n    translations: [ProductRequestTranslationInput!]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShippingCalculator with Dependency Injection in TypeScript\nDESCRIPTION: Demonstrates how to create a custom shipping calculator with dependency injection using the init() method and closure variables to store injected services.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injector, ShippingCalculator } from '@vendure/core';\nimport { ShippingRatesService } from './shipping-rates.service';\n\n// We keep reference to our injected service by keeping it\n// in the top-level scope of the file.\nlet shippingRatesService: ShippingRatesService;\n\nexport const customShippingCalculator = new ShippingCalculator({\n    code: 'custom-shipping-calculator',\n    description: [],\n    args: {},\n\n    init(injector: Injector) {\n        // The init function is called during bootstrap, and allows\n        // us to inject any providers we need.\n        shippingRatesService = injector.get(ShippingRatesService);\n    },\n\n    calculate: async (order, args) => {\n        // We can now use the injected provider in the business logic.\n        const { price, priceWithTax } = await shippingRatesService.getRate({\n            destination: order.shippingAddress,\n            contents: order.lines,\n        });\n\n        return {\n            price,\n            priceWithTax,\n        };\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining EventWithAsyncData Type in TypeScript\nDESCRIPTION: Defines a type that extends EventWithContext to include async data loaded from EmailEventHandler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype EventWithAsyncData<Event extends EventWithContext, R> = Event & { data: R }\n```\n\n----------------------------------------\n\nTITLE: Defining Country GraphQL Object Type\nDESCRIPTION: Defines the Country type, which represents a country in which the shop operates, including its code, name, and other related information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_34\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Country {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  type: String!\n  name: String!\n  enabled: Boolean!\n  parent: Region\n  parentId: ID\n  translations: [RegionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: EmailSender Interface Definition\nDESCRIPTION: TypeScript interface definition for the EmailSender, extending InjectableStrategy with a send method for handling email delivery.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-sender.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmailSender extends InjectableStrategy {\n    send: (email: EmailDetails, options: EmailTransportOptions) => void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Products in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing Product. Requires an UpdateProductInput object and returns the updated Product entity with all its properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_121\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Product\n\"\"\"\ntype Mutation {\n  updateProduct(input: UpdateProductInput!): Product!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Braintree Payment to an Order with Vaulting Disabled (TypeScript & GraphQL)\nDESCRIPTION: Performs the `addPaymentToOrder` mutation including explicit `includeCustomerId: false` in payment metadata, thereby disabling customer vaulting for that transaction. The code expects `paymentResult` to contain data from the Drop-in and is designed for situations where you want to avoid vaulting per payment, even if enabled globally.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { addPaymentToOrder } = await graphQlClient.query(gql`\n  mutation AddPayment($input: PaymentInput!) {\n    addPaymentToOrder(input: $input) {\n      ...Order\n      ...ErrorResult\n    }\n  }`, {\n    input: {\n      method: 'braintree',\n      metadata: {\n        ...paymentResult,\n        includeCustomerId: false,\n      },\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Adjust Order Line Quantity Mutation\nDESCRIPTION: GraphQL mutation for updating the quantity of items in an active order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AdjustOrderLine($orderLineId: ID!, $quantity: Int!) {\n  adjustOrderLine(orderLineId: $orderLineId, quantity: $quantity) {\n    ...ActiveOrder\n    ... on ErrorResult {\n        errorCode\n        message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionAction Class in TypeScript\nDESCRIPTION: The abstract base class that defines the structure for all promotion actions in Vendure. It extends ConfigurableOperationDef and provides a foundation for creating different types of promotional discounts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionAction<T extends ConfigArgs = ConfigArgs, U extends PromotionCondition[] | undefined = any> extends ConfigurableOperationDef<T> {\n    readonly priorityValue: number;\n    constructor(config: PromotionActionConfig<T, U>)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundStateTransitionEvent Class in TypeScript\nDESCRIPTION: This code defines the RefundStateTransitionEvent class, which is fired whenever a Refund transitions from one RefundState to another. It extends VendureEvent and includes a constructor with from/to states, context, refund, and order parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nclass RefundStateTransitionEvent extends VendureEvent {\n    constructor(fromState: RefundState, toState: RefundState, ctx: RequestContext, refund: Refund, order: Order)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryResult Class in TypeScript\nDESCRIPTION: The QueryResult class wraps the Apollo Angular QueryRef object and provides convenience methods for handling query results. It includes methods for refetching on channel changes and custom field changes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/data-service.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass QueryResult<T, V extends Record<string, any> = Record<string, any>> {\n    constructor(queryRef: QueryRef<T, V>, apollo: Apollo, customFieldMap: Map<string, CustomFieldConfig[]>)\n    refetchOnChannelChange() => QueryResult<T, V>;\n    refetchOnCustomFieldsChange(customFieldsToInclude$: Observable<string[]>) => QueryResult<T, V>;\n    single$: Observable<T>\n    stream$: Observable<T>\n    ref: QueryRef<T, V>\n    mapSingle(mapFn: (item: T) => R) => Observable<R>;\n    mapStream(mapFn: (item: T) => R) => Observable<R>;\n    destroy() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Coupon Code Mutation\nDESCRIPTION: GraphQL mutation for applying a coupon code to the active order with error handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation ApplyCouponCode($couponCode: String!) {\n  applyCouponCode(couponCode: $couponCode) {\n    ...ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateShippingMethodInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a shipping method. Includes fields for code, fulfillment handler, checker configuration, calculator configuration, and translations, with ID and translations being required fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_199\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateShippingMethodInput {\n  id: ID!\n  code: String\n  fulfillmentHandler: String\n  checker: ConfigurableOperationInput\n  calculator: ConfigurableOperationInput\n  translations: [ShippingMethodTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: ChipComponent TypeScript Class Definition\nDESCRIPTION: The TypeScript class definition for ChipComponent, showing its inputs and outputs. It includes properties for icon, invert, colorFrom, colorType, and an iconClick event emitter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/chip-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChipComponent {\n    @Input() icon: string;\n    @Input() invert = false;\n    @Input() colorFrom = '';\n    @Input() colorType: 'error' | 'success' | 'warning';\n    @Output() iconClick = new EventEmitter<MouseEvent>();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Routes\nDESCRIPTION: TypeScript configuration for defining extension routes and external frame hosting parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/using-other-frameworks/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hostExternalFrame } from '@vendure/admin-ui/core';\n\nexport default [\n    hostExternalFrame({\n        path: '',\n        breadcrumbLabel: 'Vue App',\n        extensionUrl: './assets/vue-app/index.html',\n        openInNewTab: false,\n    })\n];\n```\n\n----------------------------------------\n\nTITLE: Defining AssetServerOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the AssetServerOptions interface, which includes various configuration options for the AssetServerPlugin. It covers settings for asset routing, storage, naming, preview generation, and caching.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/asset-server-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AssetServerOptions {\n    route: string;\n    assetUploadDir: string;\n    assetUrlPrefix?: string | ((ctx: RequestContext, identifier: string) => string);\n    previewMaxWidth?: number;\n    previewMaxHeight?: number;\n    presets?: ImageTransformPreset[];\n    imageTransformStrategy?: ImageTransformStrategy | ImageTransformStrategy[];\n    namingStrategy?: AssetNamingStrategy;\n    previewStrategy?: AssetPreviewStrategy;\n    storageStrategyFactory?: (\n        options: AssetServerOptions,\n    ) => AssetStorageStrategy | Promise<AssetStorageStrategy>;\n    cacheHeader?: CacheConfig | string;\n}\n```\n\n----------------------------------------\n\nTITLE: ProductOptionGroup Type Definition in GraphQL\nDESCRIPTION: Defines groups of product options with translations and customization fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_137\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductOptionGroup {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  name: String!\n  options: [ProductOption!]!\n  translations: [ProductOptionGroupTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple OR Facet Filters Example\nDESCRIPTION: JSON example showing how to combine multiple facet value filters with OR logic. This example filters products that have either the 'Nikkon' OR 'Sony' brand facet values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facetValueFilters\": [\n    { \"or\": [\"11\", \"15\"] }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantTranslationInput Input Type in GraphQL\nDESCRIPTION: This input type is used for creating or updating product variant translations. It includes fields for id, languageCode, name, and customFields. The languageCode field is required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_127\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Bulk Action Display in Vendure Admin UI\nDESCRIPTION: Implementation of a conditional bulk action that only displays when multiple channels exist. Uses the isVisible property with DataService to check channel count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/bulk-actions/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerBulkAction, DataService } from '@vendure/admin-ui/core';\n\nexport default [\n    registerBulkAction({\n        location: 'product-list',\n        label: 'Assign to channel',\n        isVisible: ({ injector }) => injector.get(DataService).client\n            .userStatus()\n            .mapSingle(({ userStatus }) => 1 < userStatus.channels.length)\n            .toPromise(),\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodEvent Class in TypeScript\nDESCRIPTION: This code defines the ShippingMethodEvent class, which is fired whenever a ShippingMethod is added, updated, or deleted. It extends VendureEntityEvent and includes a constructor with context, entity, type, and optional input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShippingMethodEvent extends VendureEntityEvent<ShippingMethod, ShippingMethodInputTypes> {\n    constructor(ctx: RequestContext, entity: ShippingMethod, type: 'created' | 'updated' | 'deleted', input?: ShippingMethodInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Mode in GraphQL Resolver\nDESCRIPTION: Example demonstrating manual transaction control using @Transaction('manual') decorator where transaction start and commit must be explicitly handled.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/transaction-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Transaction('manual')\nasync myMutation(@Ctx() ctx: RequestContext) {\n  await this.connection.startTransaction(ctx);\n  const result = this.myService.createThing(ctx);\n  const thing = this.myService.updateOtherThing(ctx, result.id);\n  await this.connection.commitOpenTransaction(ctx);\n  return thing;\n}\n```\n\n----------------------------------------\n\nTITLE: ErrorHandlerStrategy Interface Definition in Vendure - TypeScript\nDESCRIPTION: The `ErrorHandlerStrategy` interface defines the contract for implementing custom error handling strategies within the Vendure framework. It extends the `InjectableStrategy` and requires implementing two methods: `handleServerError` and `handleWorkerError`. These methods provide a standardized way to react to exceptions on the server and during worker job executions, respectively.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-handler-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ErrorHandlerStrategy extends InjectableStrategy {\n    handleServerError(exception: Error, context: { host: ArgumentsHost }): void | Promise<void>;\n    handleWorkerError(exception: Error, context: { job: Job }): void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Codes Enum in GraphQL for Vendure\nDESCRIPTION: A GraphQL enum definition for currency codes used in international e-commerce transactions. Contains ISO 4217 currency codes with descriptive comments for each currency, from MMK (Mongolian tögrög) to ZWL (Zimbabwean dollar).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nMMK\n\"\"\"Mongolian tögrög\"\"\"\nMNT\n\"\"\"Macanese pataca\"\"\"\nMOP\n\"\"\"Mauritanian ouguiya\"\"\"\nMRU\n\"\"\"Mauritian rupee\"\"\"\nMUR\n\"\"\"Maldivian rufiyaa\"\"\"\nMVR\n\"\"\"Malawian kwacha\"\"\"\nMWK\n\"\"\"Mexican peso\"\"\"\nMXN\n\"\"\"Malaysian ringgit\"\"\"\nMYR\n\"\"\"Mozambican metical\"\"\"\nMZN\n\"\"\"Namibian dollar\"\"\"\nNAD\n\"\"\"Nigerian naira\"\"\"\nNGN\n\"\"\"Nicaraguan córdoba\"\"\"\nNIO\n\"\"\"Norwegian krone\"\"\"\nNOK\n\"\"\"Nepalese rupee\"\"\"\nNPR\n\"\"\"New Zealand dollar\"\"\"\nNZD\n\"\"\"Omani rial\"\"\"\nOMR\n\"\"\"Panamanian balboa\"\"\"\nPAB\n\"\"\"Peruvian sol\"\"\"\nPEN\n\"\"\"Papua New Guinean kina\"\"\"\nPGK\n\"\"\"Philippine peso\"\"\"\nPHP\n\"\"\"Pakistani rupee\"\"\"\nPKR\n\"\"\"Polish złoty\"\"\"\nPLN\n\"\"\"Paraguayan guaraní\"\"\"\nPYG\n\"\"\"Qatari riyal\"\"\"\nQAR\n\"\"\"Romanian leu\"\"\"\nRON\n\"\"\"Serbian dinar\"\"\"\nRSD\n\"\"\"Russian ruble\"\"\"\nRUB\n\"\"\"Rwandan franc\"\"\"\nRWF\n\"\"\"Saudi riyal\"\"\"\nSAR\n\"\"\"Solomon Islands dollar\"\"\"\nSBD\n\"\"\"Seychelles rupee\"\"\"\nSCR\n\"\"\"Sudanese pound\"\"\"\nSDG\n\"\"\"Swedish krona/kronor\"\"\"\nSEK\n\"\"\"Singapore dollar\"\"\"\nSGD\n\"\"\"Saint Helena pound\"\"\"\nSHP\n\"\"\"Sierra Leonean leone\"\"\"\nSLL\n\"\"\"Somali shilling\"\"\"\nSOS\n\"\"\"Surinamese dollar\"\"\"\nSRD\n\"\"\"South Sudanese pound\"\"\"\nSSP\n\"\"\"São Tomé and Príncipe dobra\"\"\"\nSTN\n\"\"\"Salvadoran colón\"\"\"\nSVC\n\"\"\"Syrian pound\"\"\"\nSYP\n\"\"\"Swazi lilangeni\"\"\"\nSZL\n\"\"\"Thai baht\"\"\"\nTHB\n\"\"\"Tajikistani somoni\"\"\"\nTJS\n\"\"\"Turkmenistan manat\"\"\"\nTMT\n\"\"\"Tunisian dinar\"\"\"\nTND\n\"\"\"Tongan paʻanga\"\"\"\nTOP\n\"\"\"Turkish lira\"\"\"\nTRY\n\"\"\"Trinidad and Tobago dollar\"\"\"\nTTD\n\"\"\"New Taiwan dollar\"\"\"\nTWD\n\"\"\"Tanzanian shilling\"\"\"\nTZS\n\"\"\"Ukrainian hryvnia\"\"\"\nUAH\n\"\"\"Ugandan shilling\"\"\"\nUGX\n\"\"\"United States dollar\"\"\"\nUSD\n\"\"\"Uruguayan peso\"\"\"\nUYU\n\"\"\"Uzbekistan som\"\"\"\nUZS\n\"\"\"Venezuelan bolívar soberano\"\"\"\nVES\n\"\"\"Vietnamese đồng\"\"\"\nVND\n\"\"\"Vanuatu vatu\"\"\"\nVUV\n\"\"\"Samoan tala\"\"\"\nWST\n\"\"\"CFA franc BEAC\"\"\"\nXAF\n\"\"\"East Caribbean dollar\"\"\"\nXCD\n\"\"\"CFA franc BCEAO\"\"\"\nXOF\n\"\"\"CFP franc (franc Pacifique)\"\"\"\nXPF\n\"\"\"Yemeni rial\"\"\"\nYER\n\"\"\"South African rand\"\"\"\nZAR\n\"\"\"Zambian kwacha\"\"\"\nZMW\n\"\"\"Zimbabwean dollar\"\"\"\nZWL\n```\n\n----------------------------------------\n\nTITLE: Using NotificationService in TypeScript\nDESCRIPTION: Example of how to use the NotificationService to display a success notification in a component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/notification-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyComponent {\n  constructor(private notificationService: NotificationService) {}\n\n  save() {\n    this.notificationService\n        .success(_('asset.notify-create-assets-success'), {\n          count: successCount,\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigArgType Union Type in TypeScript\nDESCRIPTION: A TypeScript type definition that enumerates the valid data types for configuration arguments in entities implementing ConfigurableOperationDef. These types influence how form fields are rendered in the admin UI and how values are coerced for business logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/config-arg-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ConfigArgType = 'string' | 'int' | 'float' | 'boolean' | 'datetime' | 'ID'\n```\n\n----------------------------------------\n\nTITLE: Moving Collections in GraphQL\nDESCRIPTION: Specifies a mutation to move a Collection to a different parent or index within the collection hierarchy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_74\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  moveCollection(input: MoveCollectionInput!): Collection!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Populator Class in TypeScript\nDESCRIPTION: Class definition for Populator that handles database population with InitialData. Contains methods for populating initial data and collections, with support for channel-aware entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/populator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Populator {\n    populateInitialData(data: InitialData, channel?: Channel) => ;\n    populateCollections(data: InitialData, channel?: Channel) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeCustomFieldConfig Type in GraphQL\nDESCRIPTION: Defines a configuration type for datetime custom fields that expects validation formats compatible with HTML datetime-local input elements. Includes properties for validation rules and UI configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_53\n\nLANGUAGE: graphql\nCODE:\n```\ntype DateTimeCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  min: String\n  max: String\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sellers List in GraphQL\nDESCRIPTION: Defines a GraphQL query to list Sellers with options for filtering and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_35\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  sellers(options: SellerListOptions): SellerList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Custom Order States in TypeScript\nDESCRIPTION: Shows how to define multiple custom order states by extending the generic type in an OrderProcess. This approach allows for more complex custom order workflows with multiple additional states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OrderProcess } from '@vendure/core';\n\nexport const customerValidationProcess: OrderProcess<'ValidatingCustomer'|'AnotherState'> = {...}\n```\n\n----------------------------------------\n\nTITLE: Defining CountrySortParameter Input - GraphQL\nDESCRIPTION: This input type defines sorting options for countries when querying the API. Each property represents a field of the Country object that can be sorted in ascending or descending order, requiring the SortOrder enum. It supports flexible sorting on attributes like id, createdAt, code, and name, without limitations on combinations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_37\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CountrySortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  code: SortOrder\n  type: SortOrder\n  name: SortOrder\n  parentId: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionSortParameter in GraphQL\nDESCRIPTION: The CollectionSortParameter input type allows the sorting of collection results based on fields like 'id', 'createdAt', 'updatedAt', 'name', 'slug', 'position', 'description', and 'parentId'. It uses a sorting order enumeration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_31\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CollectionSortParameter {\\n  id: SortOrder\\n  createdAt: SortOrder\\n  updatedAt: SortOrder\\n  name: SortOrder\\n  slug: SortOrder\\n  position: SortOrder\\n  description: SortOrder\\n  parentId: SortOrder\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Union Type for Error Handling\nDESCRIPTION: This snippet defines a union type 'UpdateCustomerEmailResult' that can return either a Customer or an EmailAddressInUseError, demonstrating Vendure's error handling approach.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateCustomerEmail(input: UpdateCustomerEmailInput!): UpdateCustomerEmailResult!\n}\n\nunion UpdateCustomerEmailResult = Customer | EmailAddressInUseError\n\ntype EmailAddressInUseError {\n  errorCode: String!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: UseRouteParams Function Signature\nDESCRIPTION: Function signature for the useRouteParams hook showing it takes no parameters and returns void.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-route-params.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useRouteParams(): void\n```\n\n----------------------------------------\n\nTITLE: Querying available countries in GraphQL\nDESCRIPTION: This query provides an array of supported countries. It returns a list of Country objects, detailing geographic locations available within the Vendure platform. There are no required parameters or specific constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nAn array of supported Countries\n\"\"\"\ntype Query {\n    availableCountries: [Country!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCountryInput schema in GraphQL\nDESCRIPTION: An input type for updating a Country entity in Vendure. Allows for modifying country code, enabling/disabling the country for shipping/billing, and updating translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_179\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCountryInput {\n  id: ID!\n  code: String\n  translations: [CountryTranslationInput!]\n  enabled: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Using ChipComponent in HTML Templates\nDESCRIPTION: Example of how to use the ChipComponent in HTML templates with binding for colorFrom, icon properties, and handling the iconClick event.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/chip-component.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<vdr-chip [colorFrom]=\"item.value\"\n          icon=\"close\"\n          (iconClick)=\"clear(item)\">\n{{ item.value }}</vdr-chip>\n```\n\n----------------------------------------\n\nTITLE: Basic Query Types in Vendure GraphQL API\nDESCRIPTION: Collection of GraphQL query type definitions for core e-commerce functionality including facets, jobs, orders, payments and products. Each query type specifies its return type and required parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  facet(id: ID!): Facet\n  facetValues(options: FacetValueListOptions): FacetValueList!\n  facets(options: FacetListOptions): FacetList!\n  fulfillmentHandlers: [ConfigurableOperationDefinition!]!\n  globalSettings: GlobalSettings!\n  job(jobId: ID!): Job\n  jobBufferSize(bufferIds: [String!]): [JobBufferSize!]!\n  jobQueues: [JobQueue!]!\n  jobs(options: JobListOptions): JobList!\n  jobsById(jobIds: [ID!]!): [Job!]!\n  me: CurrentUser\n  metricSummary(input: MetricSummaryInput): [MetricSummary!]!\n  order(id: ID!): Order\n  orders(options: OrderListOptions): OrderList!\n  paymentMethod(id: ID!): PaymentMethod\n  paymentMethodEligibilityCheckers: [ConfigurableOperationDefinition!]!\n  paymentMethodHandlers: [ConfigurableOperationDefinition!]!\n  paymentMethods(options: PaymentMethodListOptions): PaymentMethodList!\n  pendingSearchIndexUpdates: Int!\n  previewCollectionVariants(input: PreviewCollectionVariantsInput!, options: ProductVariantListOptions): ProductVariantList!\n  product(id: ID, slug: String): Product\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast Notifications in TypeScript\nDESCRIPTION: Example demonstrating how to show a toast notification using the notify function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-devkit-client.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { notify } from '@vendure/ui-devkit';\n\nnotify({\n  message: 'Updated Product',\n  type: 'success'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Vendure\nDESCRIPTION: Example of setting up database connection options for Vendure using TypeORM's DataSourceOptions, including PostgreSQL configuration with environment variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  dbConnectionOptions: {\n    type: 'postgres',\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    synchronize: false,\n    username: process.env.DB_USERNAME,\n    password: process.env.DB_PASSWORD,\n    database: 'vendure',\n    migrations: [path.join(__dirname, 'migrations/*.ts')],\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Stock Location Mutations - GraphQL\nDESCRIPTION: GraphQL mutations for deleting single or multiple stock locations using DeleteStockLocationInput. Returns DeletionResponse(s).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_65\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteStockLocation(input: DeleteStockLocationInput!): DeletionResponse!\n  deleteStockLocations(input: [DeleteStockLocationInput!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Using detailComponentWithResolver in an NgModule for Product Specs\nDESCRIPTION: Example showing how to use detailComponentWithResolver within an NgModule to register a page tab for product specifications, setting up a component with its required query and entity key.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/detail-component-with-resolver.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@NgModule({\n  imports: [ReviewsSharedModule],\n  declarations: [/* ... */],\n  providers: [\n    registerPageTab({\n      location: 'product-detail',\n      tab: 'Specs',\n      route: 'specs',\n      component: detailComponentWithResolver({\n        component: ProductSpecDetailComponent,\n        query: GetProductSpecsDocument,\n        entityKey: 'spec',\n      }),\n    }),\n  ],\n})\nexport class ProductSpecsUiExtensionModule {}\n```\n\n----------------------------------------\n\nTITLE: Querying Customers List - GraphQL SDL - GraphQL\nDESCRIPTION: Declares the 'customers' query, which retrieves multiple Customer records per optional CustomerListOptions for filtering or pagination. The result is always a CustomerList. Used in admin UIs to display and manage customers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  customers(options: CustomerListOptions): CustomerList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX/React\nDESCRIPTION: Imports various React components used to render documentation elements including MemberInfo, GenerationInfo, MemberDescription, and DocCardList.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Removing Facets from Channels in GraphQL\nDESCRIPTION: Defines a mutation to remove Facets from a specified Channel, returning an array of RemoveFacetFromChannelResult objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_81\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeFacetsFromChannel(input: RemoveFacetsFromChannelInput!): [RemoveFacetFromChannelResult!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Synchronization in Vendure\nDESCRIPTION: This snippet shows how to configure the database synchronization option in the Vendure configuration file. It demonstrates setting 'synchronize' to false for production use.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrations/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    dbConnectionOptions: {\n        // ...\n        synchronize: false,\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the createTag Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createTag` mutation, used for creating a new Tag. It accepts a non-nullable `CreateTagInput` object containing the tag details and returns the newly created `Tag` object, which is guaranteed to be non-null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new Tag\n\"\"\"\ntype Mutation {\n  createTag(input: CreateTagInput!): Tag!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavMenuItem Interface in TypeScript\nDESCRIPTION: The NavMenuItem interface defines the structure of items in the main (left-hand side) navigation bar of the Vendure Admin UI. It includes properties for identification, labeling, routing, event handling, icons, permission controls, and status badges.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/nav-menu-item.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavMenuItem {\n    id: string;\n    label: string;\n    routerLink: RouterLinkDefinition;\n    onClick?: (event: MouseEvent) => void;\n    icon?: string;\n    requiresPermission?: string | ((userPermissions: string[]) => boolean);\n    statusBadge?: Observable<NavMenuBadge>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderPaymentStateError Type in GraphQL\nDESCRIPTION: The OrderPaymentStateError type handles errors when trying to add a payment to an order that is not in the 'ArrangingPayment' state. It contains mandatory fields errorCode and message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_74\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type OrderPaymentStateError {\\n  errorCode: ErrorCode!\\n  message: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodQuote Type in GraphQL\nDESCRIPTION: Defines the `PaymentMethodQuote` GraphQL object type. This type represents the eligibility and details of a payment method for a specific order, including its `id`, `code`, `name`, `description`, eligibility status (`isEligible`), an optional `eligibilityMessage` if not eligible, and `customFields`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_85\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethodQuote {\n  id: ID!\n  code: String!\n  name: String!\n  description: String!\n  isEligible: Boolean!\n  eligibilityMessage: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Job Updates with Observables in Vendure\nDESCRIPTION: An example of how to subscribe to job updates using RxJS Observables to track progress and status changes. This approach allows for reactive handling of job state changes and real-time monitoring.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnModuleInit } from '@nestjs/common';\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ID, Product, TransactionalConnection } from '@vendure/core';\n\n@Injectable()\nclass ProductVideoService implements OnModuleInit {\n    // ... omitted (see above)\n\n    transcodeForProduct(productId: ID, videoUrl: string) {\n        const job = await this.jobQueue.add({productId, videoUrl}, {retries: 2});\n\n        return job.updates().pipe(\n            map(update => {\n                // The returned Observable will emit a value for every update to the job\n                // such as when the `progress` or `status` value changes.\n                Logger.info(`Job ${update.id}: progress: ${update.progress}`);\n                if (update.state === JobState.COMPLETED) {\n                    Logger.info(`COMPLETED ${update.id}: ${update.result}`);\n                }\n                return update.result;\n            }),\n            catchError(err => of(err.message)),\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyOrderResult GraphQL Union Type\nDESCRIPTION: Defines the ModifyOrderResult union type, which can be one of several possible types representing the result of modifying an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_102\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion ModifyOrderResult =\n  Order | NoChangesSpecifiedError | OrderModificationStateError | PaymentMethodMissingError | RefundPaymentIdMissingError | OrderLimitError | NegativeQuantityError | InsufficientStockError | CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError | IneligibleShippingMethodError\n```\n\n----------------------------------------\n\nTITLE: Adding Page Tabs to Custom Admin Pages in Vendure\nDESCRIPTION: Shows how to register a custom admin page component with a specific locationId that can be used as a target for additional page tabs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/page-tabs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\nimport { TestComponent } from './components/test/test.component';\n\nexport default [\n    registerRouteComponent({\n        component: TestComponent,\n        title: 'Test',\n        locationId: 'my-location-id'\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining IllegalOperationError Class in TypeScript\nDESCRIPTION: Extends I18nError to represent operation errors that are not permitted. It requires a message and optional variables, emphasizing constraint violations in operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass IllegalOperationError extends I18nError {\n    constructor(message: string, variables: { [key: string]: string | number } = {})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderModificationStateError Type in GraphQL\nDESCRIPTION: The OrderModificationStateError type is returned when attempting to modify an Order that is not in the 'Modifying' state, containing an error code and message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_120\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned when attempting to modify the contents of an Order that is not in the `Modifying` state.\"\"\"\ntype OrderModificationStateError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodEligibilityChecker Class in TypeScript\nDESCRIPTION: Class definition for PaymentMethodEligibilityChecker, extending ConfigurableOperationDef.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-eligibility-checker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass PaymentMethodEligibilityChecker<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: PaymentMethodEligibilityCheckerConfig<T>)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Order Custom Fields Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to set custom fields for an existing order. Takes an UpdateOrderInput object and returns the updated Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_97\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setOrderCustomFields(input: UpdateOrderInput!): Order\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Form Data in Angular Component\nDESCRIPTION: Demonstrates how to manipulate form data in an Angular custom detail component by updating the description field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-detail-components/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CustomDetailComponent } from '@vendure/admin-ui/core';\n\n@Component({\n    template: `<button class=\"button secondary\" (click)=\"updateDescription()\">Update description</button>`,\n    standalone: true,\n})\nexport class ProductInfoComponent implements CustomDetailComponent, OnInit {\n    entity$: Observable<any>\n    detailForm: FormGroup;\n    \n    updateDescription() {\n        const descriptionControl = this.detailForm.get('description');\n        if (descriptionControl) {\n            descriptionControl.setValue('New description');\n            descriptionControl.markAsDirty();\n        }        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResultSortParameter in GraphQL for Vendure Shop API\nDESCRIPTION: Defines a GraphQL input type for specifying sorting options for search results in the Vendure shop API. It allows sorting by product name or price.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_44\n\nLANGUAGE: graphql\nCODE:\n```\ninput SearchResultSortParameter {\nname: SortOrder\nprice: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocaleStringCustomFieldConfig Type in GraphQL\nDESCRIPTION: Defines the structure for locale-specific string custom field configuration. It includes properties for name, type, list, length, label, description, and various flags for field behavior.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_57\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype LocaleStringCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  length: Int\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  pattern: String\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: NotificationService Class Signature in TypeScript\nDESCRIPTION: The TypeScript signature of the NotificationService class, including its constructor and methods for displaying different types of notifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/notification-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass NotificationService {\n    constructor(i18nService: I18nService, resolver: ComponentFactoryResolver, overlayHostService: OverlayHostService)\n    success(message: string, translationVars?: { [key: string]: string | number }) => void;\n    info(message: string, translationVars?: { [key: string]: string | number }) => void;\n    warning(message: string, translationVars?: { [key: string]: string | number }) => void;\n    error(message: string, translationVars?: { [key: string]: string | number }) => void;\n    notify(config: ToastConfig) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Sorting Parameters - GraphQL\nDESCRIPTION: Provides a GraphQL input type for specifying the sorting options for jobs, with each field (e.g., id, createdAt, startedAt) accepting a SortOrder. Dependencies include the SortOrder enum and the context of a GraphQL API supporting jobs. All fields are optional, and it is used for ordering job query results.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_99\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput JobSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  startedAt: SortOrder\n  settledAt: SortOrder\n  queueName: SortOrder\n  progress: SortOrder\n  duration: SortOrder\n  retries: SortOrder\n  attempts: SortOrder\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldType in TypeScript for Vendure\nDESCRIPTION: This code snippet defines the CustomFieldType as a union of string literals representing various data types. These types determine how custom fields are stored in the database and represented in GraphQL queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/custom-field-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomFieldType = | 'string'\n    | 'localeString'\n    | 'int'\n    | 'float'\n    | 'boolean'\n    | 'datetime'\n    | 'relation'\n    | 'text'\n    | 'localeText'\n    | 'struct'\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelListOptions in GraphQL\nDESCRIPTION: This input type provides options for listing channels, including pagination, sorting, and filtering parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\ninput ChannelListOptions {\n  skip: Int\n  take: Int\n  sort: ChannelSortParameter\n  filter: ChannelFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: JobQueueService Class Signature in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature of the JobQueueService class, including its constructor and methods. It implements the OnModuleDestroy interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-queue-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass JobQueueService implements OnModuleDestroy {\n    constructor(configService: ConfigService, jobBufferService: JobBufferService)\n    createQueue(options: CreateQueueOptions<Data>) => Promise<JobQueue<Data>>;\n    start() => Promise<void>;\n    addBuffer(buffer: JobBuffer<any>) => ;\n    removeBuffer(buffer: JobBuffer<any>) => ;\n    bufferSize(forBuffers: Array<JobBuffer<any> | string>) => Promise<{ [bufferId: string]: number }>;\n    flush(forBuffers: Array<JobBuffer<any> | string>) => Promise<Job[]>;\n    getJobQueues() => GraphQlJobQueue[];\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateOrderItemsResult GraphQL Union Type\nDESCRIPTION: Defines a complex union type representing possible results when updating order items, with multiple possible error types for different failure scenarios.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_217\n\nLANGUAGE: graphql\nCODE:\n```\nunion UpdateOrderItemsResult =\nOrder | OrderModificationError | OrderLimitError | NegativeQuantityError | InsufficientStockError | OrderInterceptorError\n```\n\n----------------------------------------\n\nTITLE: Defining Release Object Type in GraphQL\nDESCRIPTION: GraphQL object type representing a stock release event for a product variant. Contains information about quantity and associated product variant.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_159\n\nLANGUAGE: graphql\nCODE:\n```\ntype Release {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  type: StockMovementType!\n  quantity: Int!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EntityDuplicators in Vendure Configuration\nDESCRIPTION: Example showing how to register custom entity duplicators in the Vendure configuration. It demonstrates combining default duplicators with custom ones in the entityOptions section.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-duplicator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig, defaultEntityDuplicators } from '@vendure/core';\nimport { customCollectionDuplicator } from './config/custom-collection-duplicator';\n\nexport const config: VendureConfig = {\n   // ...\n   entityOptions: {\n     entityDuplicators: [\n         ...defaultEntityDuplicators,\n         customCollectionDuplicator,\n     ],\n   },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Account Verified Event in TypeScript\nDESCRIPTION: The `AccountVerifiedEvent` class fires when a user's email is successfully verified post the `verifyCustomerAccount` mutation. Extending `VendureEvent`, it captures context information and the customer entity. Dependencies include the `RequestContext` and `Customer` entities, along with Vendure's mutation infrastructure, ensuring actions can respond to email verifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountVerifiedEvent extends VendureEvent {\n    constructor(ctx: RequestContext, customer: Customer)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check in Vendure Plugin\nDESCRIPTION: Example showing how to create a plugin that registers a custom health check using HealthCheckRegistryService and HttpHealthIndicator to monitor the Vendure docs website.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/health-check-registry-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HealthCheckRegistryService, PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { TerminusModule } from '@nestjs/terminus';\n\n@VendurePlugin({\n  imports: [PluginCommonModule, TerminusModule],\n})\nexport class MyPlugin {\n  constructor(\n    private registry: HealthCheckRegistryService\n    private httpIndicator: HttpHealthIndicator\n  ) {\n    registry.registerIndicatorFunction(\n      () => this.httpIndicator.pingCheck('vendure-docs', 'https://www.vendure.io/docs/'),\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring TaxRateEvent Class - TypeScript\nDESCRIPTION: Declares the TaxRateEvent class, which fires on creation, update, or deletion of TaxRate entities. Extends VendureEntityEvent and receives context, affected entity, change type, and optional input. Inputs: ctx (RequestContext), entity (TaxRate), type (created/updated/deleted), optional input (TaxRateInputTypes). Outputs a typed event instance for event listeners.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TaxRateEvent extends VendureEntityEvent<TaxRate, TaxRateInputTypes> {\n    constructor(ctx: RequestContext, entity: TaxRate, type: 'created' | 'updated' | 'deleted', input?: TaxRateInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Channel GraphQL Object Type\nDESCRIPTION: Defines the Channel object type with fields for id, dates, code, token, zones, language codes, currency codes, inventory settings, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ntype Channel {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  code: String!\n  token: String!\n  defaultTaxZone: Zone\n  defaultShippingZone: Zone\n  defaultLanguageCode: LanguageCode!\n  availableLanguageCodes: [LanguageCode!]\n  currencyCode: CurrencyCode!\n  defaultCurrencyCode: CurrencyCode!\n  availableCurrencyCodes: [CurrencyCode!]!\n  trackInventory: Boolean\n  outOfStockThreshold: Int\n  pricesIncludeTax: Boolean!\n  seller: Seller\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Detail View\nDESCRIPTION: Route configuration setup for the review list and detail views, including path definitions, component assignments, and breadcrumb configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-detail-views/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\n\nimport { ReviewDetailComponent, getReviewDetailDocument } from './components/review-detail/review-detail.component';\nimport { ReviewListComponent } from './components/review-list/review-list.component';\n\nexport default [\n    registerRouteComponent({\n        path: '',\n        component: ReviewListComponent,\n        breadcrumb: 'Product reviews',\n    }),\n    registerRouteComponent({\n        path: ':id',\n        component: ReviewDetailComponent,\n        query: getReviewDetailDocument,\n        entityKey: 'productReview',\n        getBreadcrumbs: entity => [\n            {\n                label: 'Product reviews',\n                link: ['/extensions', 'product-reviews'],\n            },\n            {\n                label: `#${entity?.id} (${entity?.product.name})`,\n                link: [],\n            },\n        ],\n    }),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining SMTPTransportOptions TypeScript Interface\nDESCRIPTION: Defines transport options for using SMTP with Nodemailer in the Vendure framework. It extends SMTPTransport.Options and includes optional logging support, aiding in detailed email delivery logs via VendureLogger.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SMTPTransportOptions extends SMTPTransport.Options {\n    type: 'smtp';\n    logging?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: CountryService Class Definition in TypeScript\nDESCRIPTION: Defines the CountryService class with methods for managing Country entities. Includes functionality for finding, creating, updating and deleting countries, as well as specialized methods for finding available countries and looking up countries by code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/country-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CountryService {\n    constructor(connection: TransactionalConnection, listQueryBuilder: ListQueryBuilder, translatableSaver: TranslatableSaver, eventBus: EventBus, translator: TranslatorService)\n    findAll(ctx: RequestContext, options?: ListQueryOptions<Country>, relations: RelationPaths<Country> = []) => Promise<PaginatedList<Translated<Country>>>;\n    findOne(ctx: RequestContext, countryId: ID, relations: RelationPaths<Country> = []) => Promise<Translated<Country> | undefined>;\n    findAllAvailable(ctx: RequestContext) => Promise<Array<Translated<Country>>>;\n    findOneByCode(ctx: RequestContext, countryCode: string) => Promise<Translated<Country>>;\n    create(ctx: RequestContext, input: CreateCountryInput) => Promise<Translated<Country>>;\n    update(ctx: RequestContext, input: UpdateCountryInput) => Promise<Translated<Country>>;\n    delete(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the createStockLocation Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createStockLocation` mutation. It takes a non-nullable `CreateStockLocationInput` object as input to specify the details of the new stock location and returns the created `StockLocation` object, ensuring it's not null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createStockLocation(input: CreateStockLocationInput!): StockLocation!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringCustomFieldConfig Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StringCustomFieldConfig, which represents configuration options for string-type custom fields. It includes validation rules, UI options, and permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_193\n\nLANGUAGE: graphql\nCODE:\n```\ntype StringCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  length: Int\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  pattern: String\n  options: [StringFieldOption!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Range Input - GraphQL - GraphQL\nDESCRIPTION: Defines the NumberRange input type for specifying a numeric range via start and end fields (both Float and non-null). Used primarily by operators like between in filtering input, enabling range-based queries for numeric fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\ninput NumberRange {\n  start: Float!\n  end: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundLine Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the RefundLine entity, representing a line item in a refund with references to the original order line and quantity refunded.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_105\n\nLANGUAGE: graphql\nCODE:\n```\ntype RefundLine {\n  orderLine: OrderLine!\n  orderLineId: ID!\n  quantity: Int!\n  refund: Refund!\n  refundId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockAdjustment Entity for Manual Stock Changes - TypeScript\nDESCRIPTION: This snippet specifies the StockAdjustment entity, extending StockMovement, to model manual adjustments of a product variant's stockOnHand value. The type property is set to ADJUSTMENT, and its primary input is a partial StockAdjustment, instantiated via the constructor. Dependencies include StockMovement and DeepPartial, and this entity is used mainly for administrative stock updates rather than order-driven events.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/stock-movement.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass StockAdjustment extends StockMovement {\n    readonly type = StockMovementType.ADJUSTMENT;\n    constructor(input: DeepPartial<StockAdjustment>)\n}\n```\n\n----------------------------------------\n\nTITLE: ParseResult Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of the result returned by the ImportParser's parseProducts method, containing the parsed results, any errors, and the count of processed items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseResult<T> {\n    results: T[];\n    errors: string[];\n    processed: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderList Type in GraphQL\nDESCRIPTION: The OrderList type represents a paginated list of Order objects, containing the actual Order items and a count of total items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_116\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderList {\n  items: [Order!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: ToastConfig Interface Definition in TypeScript\nDESCRIPTION: Interface definition for the configuration options of a toast notification in the NotificationService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/notification-service.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ToastConfig {\n    message: string;\n    translationVars?: { [key: string]: string | number };\n    type?: NotificationType;\n    duration?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentDeclinedError Type in GraphQL\nDESCRIPTION: Defines the `PaymentDeclinedError` GraphQL object type. This type is returned when a payment is declined by the payment provider. It includes an `errorCode`, a general `message`, and a specific `paymentErrorMessage` from the provider.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_82\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when a Payment is declined by the payment provider.\n\"\"\"\ntype PaymentDeclinedError {\n  errorCode: ErrorCode!\n  message: String!\n  paymentErrorMessage: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategorySortParameter Input Type in GraphQL\nDESCRIPTION: Input type that specifies sorting parameters for tax categories. Allows sorting by id, createdAt, updatedAt, and name fields using the SortOrder enum (typically ASC or DESC).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_165\n\nLANGUAGE: graphql\nCODE:\n```\ninput TaxCategorySortParameter {\n  id: SortOrder\n\n  createdAt: SortOrder\n\n  updatedAt: SortOrder\n\n  name: SortOrder\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Product Variants in Vendure GraphQL API\nDESCRIPTION: Mutation for updating multiple ProductVariants in a single operation. Accepts an array of UpdateProductVariantInput objects and returns an array of the updated ProductVariant entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_125\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate existing ProductVariants\n\"\"\"\ntype Mutation {\n  updateProductVariants(input: [UpdateProductVariantInput!]!): [ProductVariant]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SellerSortParameter Input Type in GraphQL\nDESCRIPTION: This input type specifies sorting options for seller queries, allowing sorting by id, createdAt, updatedAt, and name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_145\n\nLANGUAGE: graphql\nCODE:\n```\ninput SellerSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modify Order Options - GraphQL\nDESCRIPTION: Provides options for modifying an order, allowing freezing promotions or recalculating shipping. Used as a nested input in mutation operations, both fields are optional booleans. Used to augment the behavior of order modification operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_103\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ModifyOrderOptions {\n  freezePromotions: Boolean\n  recalculateShipping: Boolean\n}\n\n```\n\n----------------------------------------\n\nTITLE: Admin Login - Admin API Authentication\nDESCRIPTION: GraphQL mutation for authenticating with the Admin API using username and password.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  login(username: \"superadmin\", password: \"superadmin\") {\n    ...on CurrentUser {\n      id\n      identifier\n    }\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in React/JSX\nDESCRIPTION: Imports custom React components used for rendering API documentation, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Using FileSizePipe in Angular Templates\nDESCRIPTION: Example of using the FileSizePipe in an Angular template to format a file size value into a human-readable string.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/file-size-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{{ fileSizeInBytes | filesize }}\n```\n\n----------------------------------------\n\nTITLE: UpdateProductOptionInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a product option in Vendure e-commerce platform. Required fields include the ID while optional fields include code, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_192\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateProductOptionInput {\n  id: ID!\n  code: String\n  translations: [ProductOptionGroupTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SellerListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for querying and filtering sellers. It includes options for pagination, sorting, and filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_144\n\nLANGUAGE: graphql\nCODE:\n```\ninput SellerListOptions {\n  skip: Int\n  take: Int\n  sort: SellerSortParameter\n  filter: SellerFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Vendure Custom Detail\nDESCRIPTION: This snippet imports various custom React components used for rendering documentation pages in Vendure. These components are likely used to display member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Querying list of facets in GraphQL\nDESCRIPTION: This query provides a list of all facets available in the shop. Accepts optional FacetListOptions for customizing the output and returns a FacetList. It's used to handle categorization and filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nA list of Facets available to the shop\n\"\"\"\ntype Query {\n    facets(options: FacetListOptions): FacetList!\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Signature of useDetailComponentData Hook\nDESCRIPTION: Defines the TypeScript signature for the useDetailComponentData hook. It is a generic function that returns void and can be typed with a generic parameter T.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-detail-component-data.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction useDetailComponentData<T = any>(): void\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing FacetValues, including pagination (skip and take), sorting, filtering, and logical operators for combining filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueListOptions {\n  skip: Int\n  take: Int\n  sort: FacetValueSortParameter\n  filter: FacetValueFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Sellers with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for bulk deleting multiple sellers. Accepts an array of seller IDs and returns an array of DeletionResponse objects with results for each deletion operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_62\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple Sellers\n\"\"\"\ntype Mutation {\n  deleteSellers(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BigIntMoneyStrategy in TypeScript\nDESCRIPTION: This class implements the MoneyStrategy interface and provides a way to store monetary values as bigint in the database. It includes column configuration, data transformers, and a rounding method that operates after multiplication of unit price.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/big-int-money-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BigIntMoneyStrategy implements MoneyStrategy {\n    readonly moneyColumnOptions: ColumnOptions = {\n        type: 'bigint',\n        transformer: {\n            to: (entityValue: number) => {\n                return entityValue;\n            },\n            from: (databaseValue: string): number => {\n                if (databaseValue == null) {\n                    return databaseValue;\n                }\n                const intVal = Number.parseInt(databaseValue, 10);\n                if (!Number.isSafeInteger(intVal)) {\n                    Logger.warn(`Monetary value ${databaseValue} is not a safe integer!`);\n                }\n                if (Number.isNaN(intVal)) {\n                    Logger.warn(`Monetary value ${databaseValue} is not a number!`);\n                }\n                return intVal;\n            },\n        },\n    };\n    precision = 2;\n    round(value: number, quantity:  = 1) => number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing customers, including pagination, sorting, and filtering parameters. It allows for customization of query results when fetching customer data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_73\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerListOptions {\n  skip: Int\n  take: Int\n  sort: CustomerSortParameter\n  filter: CustomerFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IntStructFieldConfig Type in GraphQL\nDESCRIPTION: Defines the `IntStructFieldConfig` type in GraphQL, likely used within structured custom fields or similar configurations. It specifies the configuration for an integer field, including its name, type ('int'), list status, localization (label, description), validation (min, max, step), and UI hints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_84\n\nLANGUAGE: graphql\nCODE:\n```\ntype IntStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  min: Int\n  max: Int\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Job Updates to Promises in Vendure\nDESCRIPTION: A simple example showing how to convert job update Observables to Promises for developers who prefer Promise-based asynchronous patterns over RxJS Observables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.jobQueue.add({ productId, videoUrl }, { retries: 2 });\n\nreturn job.updates().toPromise()\n  .then(/* ... */)\n  .catch(/* ... */);\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: This code snippet imports custom React components used for rendering the Vendure documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining PriceRange GraphQL Type\nDESCRIPTION: GraphQL schema definition for the PriceRange type that represents a range of prices with minimum and maximum values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_133\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe price range where the result has more than one price\n\"\"\"\ntype PriceRange {\n  min: Money!\n  max: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining usePageMetadata Hook Signature\nDESCRIPTION: Specifies the TypeScript function signature for the usePageMetadata hook. The hook returns void and takes no parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-page-metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction usePageMetadata(): void\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentFailedError Type in GraphQL\nDESCRIPTION: Defines the `PaymentFailedError` GraphQL object type. This type is returned when a payment fails due to an error (not a decline). It contains an `errorCode`, a general `message`, and a specific `paymentErrorMessage` detailing the failure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_83\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when a Payment fails due to an error.\n\"\"\"\ntype PaymentFailedError {\n  errorCode: ErrorCode!\n  message: String!\n  paymentErrorMessage: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migrations in TypeScript with Vendure\nDESCRIPTION: Function signature for generating TypeORM migrations from schema changes like CustomFields modifications. Takes a partial VendureConfig and MigrationOptions as parameters and returns a Promise that resolves to either a string or undefined.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/migration/generate-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateMigration(userConfig: Partial<VendureConfig>, options: MigrationOptions): Promise<string | undefined>\n```\n\n----------------------------------------\n\nTITLE: Defining SettleRefundResult GraphQL Union Type\nDESCRIPTION: Defines a GraphQL union type that represents the possible results of a refund settlement operation, including successful Refund or refund state transition errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_179\n\nLANGUAGE: graphql\nCODE:\n```\nunion SettleRefundResult = Refund | RefundStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Defining SettlePaymentErrorResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the error object returned by the SettlePaymentFn when the payment could not be settled. It includes properties for success status, payment state, error message, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SettlePaymentErrorResult {\n    success: false;\n    state?: Exclude<PaymentState, 'Settled'>;\n    errorMessage?: string;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Permission.Owner Example Implementation\nDESCRIPTION: Demonstrates how Permission.Owner is implemented in a GraphQL resolver for the activeCustomer query. Shows the custom logic required to enforce ownership-based access control.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Query()\n@Allow(Permission.Owner)\nasync activeCustomer(@Ctx() ctx: RequestContext): Promise<Customer | undefined> {\n  const userId = ctx.activeUserId;\n  if (userId) {\n    return this.customerService.findOneByUserId(ctx, userId);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Entity Duplicator Definition Type\nDESCRIPTION: Defines the structure for entity duplication configuration including permissions and arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_63\n\nLANGUAGE: graphql\nCODE:\n```\ntype EntityDuplicatorDefinition {\n  code: String!\n  args: [ConfigArgDefinition!]!\n  description: String!\n  forEntities: [String!]!\n  requiresPermission: [Permission!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FloatCustomFieldConfig Type in GraphQL\nDESCRIPTION: Defines the structure of a float custom field configuration, including properties like name, type, list, label, description, and various constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_68\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FloatCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  min: Float\n  max: Float\n  step: Float\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteAssets Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `deleteAssets` mutation for deleting multiple Assets. It takes a non-nullable `DeleteAssetsInput` object, likely containing a list of asset IDs and options, and returns a single non-nullable `DeletionResponse` summarizing the bulk deletion outcome.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_31\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple Assets\n\"\"\"\ntype Mutation {\n  deleteAssets(input: DeleteAssetsInput!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Duplicate Entity Mutation - GraphQL\nDESCRIPTION: GraphQL mutation for duplicating an existing entity using a specific EntityDuplicator. Available since v2.2.0.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_70\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  duplicateEntity(input: DuplicateEntityInput!): DuplicateEntityResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Zones with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CreateZoneInput GraphQL input type used to create new zones in Vendure. It requires a name and optionally accepts member IDs and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_68\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateZoneInput {\nname: String!\nmemberIds: [ID!]\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Last Database Migration in Vendure\nDESCRIPTION: This function reverts the last applied database migration in a Vendure application. It accepts a partial VendureConfig object as its parameter and relies on TypeORM's underlying migration mechanism.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/migration/revert-last-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction revertLastMigration(userConfig: Partial<VendureConfig>): void\n```\n\n----------------------------------------\n\nTITLE: AddressBasedTaxZoneStrategy Class Definition\nDESCRIPTION: This snippet shows the class definition of AddressBasedTaxZoneStrategy. It implements the TaxZoneStrategy interface and includes a method determineTaxZone for determining the applicable tax zone.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/address-based-tax-zone-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass AddressBasedTaxZoneStrategy implements TaxZoneStrategy {\n    determineTaxZone(ctx: RequestContext, zones: Zone[], channel: Channel, order?: Order) => Zone;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProvinceEvent Class in TypeScript\nDESCRIPTION: This code defines the ProvinceEvent class, introduced in version 2.0, which is fired whenever a Province is added, updated, or deleted. It extends VendureEntityEvent and includes a constructor with context, entity, type, and optional input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProvinceEvent extends VendureEntityEvent<Province, ProvinceInputTypes> {\n    constructor(ctx: RequestContext, entity: Province, type: 'created' | 'updated' | 'deleted', input?: ProvinceInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValue Query Sorting - GraphQL - GraphQL\nDESCRIPTION: Defines the FacetValueSortParameter input for specifying sorting rules in FacetValue queries. Requires the SortOrder enum for direction (ASC/DESC) and can sort by id, createdAt, updatedAt, facetId, name, or code. Used in queries requiring custom sorting of facet values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  facetId: SortOrder\n  name: SortOrder\n  code: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Surcharge Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for representing surcharges in an e-commerce system. Contains fields for identification, timestamps, pricing information including tax details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_136\n\nLANGUAGE: graphql\nCODE:\n```\ntype Surcharge {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  description: String!\n  sku: String\n  taxLines: [TaxLine!]!\n  price: Money!\n  priceWithTax: Money!\n  taxRate: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Page Title in React Component Using usePageMetadata - TSX\nDESCRIPTION: This snippet updates the page title dynamically in a React component using the usePageMetadata hook from @vendure/admin-ui/react. When the Update title button is clicked, handleClick calls setTitle('New title') to update UI metadata. It relies on Card and usePageMetadata from the admin UI package and assumes integration in a Vendure UI extension. Input is the user button click; output updates page and browser title.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_13\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Card, usePageMetadata } from '@vendure/admin-ui/react';\\nimport React from 'react';\\n\\nexport function Test() {\\n    // highlight-next-line\\n    const { setTitle } = usePageMetadata();\\n\\n    function handleClick() {\\n        // highlight-next-line\\n        setTitle('New title');\\n    }\\n    return (\\n        <div className=\\\"page-block\\\">\\n            <Card>\\n                <button className=\\\"button primary\\\" onClick={handleClick}>\\n                    Update title\\n                </button>\\n            </Card>\\n        </div>\\n    );\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Roles List in GraphQL\nDESCRIPTION: Defines a GraphQL query to list Roles with options for filtering and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_32\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  roles(options: RoleListOptions): RoleList!\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Database Initializer Function Definition\nDESCRIPTION: Function signature for registering a TestDbInitializer for a specific database type. This must be called before creating a test environment and takes database type and initializer instance as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/register-initializer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerInitializer(type: DataSourceOptions['type'], initializer: TestDbInitializer<any>): void\n```\n\n----------------------------------------\n\nTITLE: Defining LoadTemplateInput Interface in TypeScript\nDESCRIPTION: Defines the input structure for template loading in the email plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LoadTemplateInput {\n    type: string;\n    templateName: string;\n    templateVars: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ItemsAlreadyFulfilledError GraphQL Type\nDESCRIPTION: Defines the `ItemsAlreadyFulfilledError` GraphQL type. This error is returned if an operation attempts to add items to a Fulfillment when those items are already part of an existing Fulfillment. It includes a standard `errorCode` and a descriptive `message`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_87\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if the specified items are already part of a Fulfillment\n\"\"\"\ntype ItemsAlreadyFulfilledError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Facet Values in GraphQL for Vendure\nDESCRIPTION: This mutation creates one or more FacetValues. It takes an array of CreateFacetValueInput objects and returns an array of FacetValue objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createFacetValues(input: [CreateFacetValueInput!]!): [FacetValue!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Order State Query Response in JSON\nDESCRIPTION: Shows the response from querying an order's state, which in this example is 'AddingItems'. This indicates the order is in the initial state where customers can modify their cart.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"activeOrder\": {\n      \"id\": \"4\",\n      // highlight-next-line\n      \"state\": \"AddingItems\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterBulkAction Function Signature in Vendure Admin UI\nDESCRIPTION: The signature of the registerBulkAction function, which takes a BulkAction object as its parameter. This function is used to register custom bulk actions in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/register-bulk-action.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerBulkAction(bulkAction: BulkAction): void\n```\n\n----------------------------------------\n\nTITLE: Declaring ZoneEvent Class - TypeScript\nDESCRIPTION: Defines ZoneEvent for tracking addition, update, or deletion of Zone entities. The class extends VendureEntityEvent, and its constructor requires context, the changed zone, the type of event, and optional input data. Key parameters: ctx (context), entity (Zone), type (created/updated/deleted), input (optional). Output is an event instance for subscribers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ZoneEvent extends VendureEntityEvent<Zone, ZoneInputTypes> {\n    constructor(ctx: RequestContext, entity: Zone, type: 'created' | 'updated' | 'deleted', input?: ZoneInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValue Entity in Vendure - TypeScript\nDESCRIPTION: The FacetValue class extends the VendureEntity and implements multiple interfaces to represent a specific value of a Facet within the Vendure system. Dependencies include Translatable, HasCustomFields, and ChannelAware interfaces. Key properties include 'name', 'code', 'translations', 'facet', and various relationships with Channels, Products, and ProductVariants. The class is part of the @vendure/core package and relies on TypeScript's advanced type system to define its behavior. Inputs can be a partial object conforming to the DeepPartial type and its output is an instance of FacetValue.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/facet-value.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FacetValue extends VendureEntity implements Translatable, HasCustomFields, ChannelAware {\n    constructor(input?: DeepPartial<FacetValue>)\n    name: LocaleString;\n    @Column() code: string;\n    @OneToMany(type => FacetValueTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<FacetValue>>;\n    @Index()\n    @ManyToOne(type => Facet, group => group.values, { onDelete: 'CASCADE' })\n    facet: Facet;\n    @EntityId()\n    facetId: ID;\n    @Column(type => CustomFacetValueFields)\n    customFields: CustomFacetValueFields;\n    @ManyToMany(type => Channel, channel => channel.facetValues)\n    @JoinTable()\n    channels: Channel[];\n    @ManyToMany(() => Product, product => product.facetValues, { onDelete: 'CASCADE' })\n    products: Product[];\n    @ManyToMany(type => ProductVariant, productVariant => productVariant.facetValues)\n    productVariants: ProductVariant[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantChannelEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a ProductVariant is assigned or removed from a Channel. It extends VendureEvent and includes a constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductVariantChannelEvent extends VendureEvent {\n    constructor(ctx: RequestContext, productVariant: ProductVariant, channelId: ID, type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdjustmentType Enum in GraphQL\nDESCRIPTION: Defines the `AdjustmentType` GraphQL enum. This enum specifies the possible types of adjustments that can be applied, such as `PROMOTION`, `DISTRIBUTED_ORDER_PROMOTION`, or `OTHER`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nenum AdjustmentType {\n  PROMOTION\n  DISTRIBUTED_ORDER_PROMOTION\n  OTHER\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Order Entity - TypeScript\nDESCRIPTION: The 'Order' class represents a purchase order in the Vendure e-commerce platform. It includes properties like 'type', 'code', 'customer', and methods to manage Order's lifecycle from creation through fulfillment. Dependencies include VendureEntity, ChannelAware, and HasCustomFields interfaces. The class heavily uses TypeORM decorators for database interactions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Order extends VendureEntity implements ChannelAware, HasCustomFields {\n    constructor(input?: DeepPartial<Order>)\n    @Column('varchar', { default: OrderType.Regular })\n    type: OrderType;\n    @OneToMany(type => Order, sellerOrder => sellerOrder.aggregateOrder)\n    sellerOrders: Order[];\n    @Index()\n    @ManyToOne(type => Order, aggregateOrder => aggregateOrder.sellerOrders)\n    aggregateOrder?: Order;\n    @EntityId({ nullable: true })\n    aggregateOrderId?: ID;\n    @Column()\n    @Index({ unique: true })\n    code: string;\n    @Column('varchar') state: OrderState;\n    @Column({ default: true })\n    active: boolean;\n    @Column({ nullable: true })\n    orderPlacedAt?: Date;\n    @Index()\n    @ManyToOne(type => Customer, customer => customer.orders)\n    customer?: Customer;\n    @EntityId({ nullable: true })\n    customerId?: ID;\n    @OneToMany(type => OrderLine, line => line.order)\n    lines: OrderLine[];\n    @OneToMany(type => Surcharge, surcharge => surcharge.order)\n    surcharges: Surcharge[];\n    @Column('simple-array')\n    couponCodes: string[];\n    @ManyToMany(type => Promotion, promotion => promotion.orders)\n    @JoinTable()\n    promotions: Promotion[];\n    @Column('simple-json') shippingAddress: OrderAddress;\n    @Column('simple-json') billingAddress: OrderAddress;\n    @OneToMany(type => Payment, payment => payment.order)\n    payments: Payment[];\n    @ManyToMany(type => Fulfillment, fulfillment => fulfillment.orders)\n    @JoinTable()\n    fulfillments: Fulfillment[];\n    @Column('varchar')\n    currencyCode: CurrencyCode;\n    @Column(type => CustomOrderFields)\n    customFields: CustomOrderFields;\n    @EntityId({ nullable: true })\n    taxZoneId?: ID;\n    @ManyToMany(type => Channel)\n    @JoinTable()\n    channels: Channel[];\n    @OneToMany(type => OrderModification, modification => modification.order)\n    modifications: OrderModification[];\n    @Money()\n    subTotal: number;\n    @Money()\n    subTotalWithTax: number;\n    @OneToMany(type => ShippingLine, shippingLine => shippingLine.order)\n    shippingLines: ShippingLine[];\n    @Money({ default: 0 })\n    shipping: number;\n    @Money({ default: 0 })\n    shippingWithTax: number;\n    discounts: Discount[]\n    total: number\n    totalWithTax: number\n    totalQuantity: number\n    taxSummary: OrderTaxSummary[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StructCustomFieldConfig Type in TypeScript\nDESCRIPTION: This code snippet defines the StructCustomFieldConfig type, which extends TypedCustomFieldConfig with specific properties for 'struct' custom fields. It includes a 'fields' property of type StructFieldConfig[].\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/struct-custom-field-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StructCustomFieldConfig = TypedCustomFieldConfig<\n    'struct',\n    Omit<GraphQLStructCustomFieldConfig, 'fields'>\n> & {\n    fields: StructFieldConfig[];\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Translatable Entities with TranslatorService\nDESCRIPTION: Service implementation demonstrating how to load and translate entities using the TranslatorService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translateable/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RequestService {\n\n    constructor(private translator: TranslatorService) {}\n\n    findAll(\n        ctx: RequestContext,\n        options?: ListQueryOptions<ProductRequest>,\n        relations?: RelationPaths<ProductRequest>,\n    ): Promise<PaginatedList<Translated<ProductRequest>>> {\n        return this.listQueryBuilder\n            .build(ProductRequest, options, {\n                relations,\n                ctx,\n            })\n            .getManyAndCount()\n            .then(([items, totalItems]) => {\n                return {\n                    items: items.map(item => this.translator.translate(item, ctx)),\n                    totalItems,\n                };\n            });\n    }\n    \n    findOne(\n        ctx: RequestContext,\n        id: ID,\n        relations?: RelationPaths<ProductRequest>,\n    ): Promise<Translated<ProductRequest> | null> {\n        return this.connection\n            .getRepository(ctx, ProductRequest)\n            .findOne({\n                where: { id },\n                relations,\n            })\n            .then(entity => entity && this.translator.translate(entity, ctx));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Sort Parameters using extendSearchSortType in TypeScript\nDESCRIPTION: Demonstrates how to add a custom sort parameter, such as \"distance\", using the `extendSearchSortType` configuration option. This makes the parameter available in the `SearchResultSortParameter` GraphQL input type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nextendSearchSortType: [\"distance\"]\n```\n\n----------------------------------------\n\nTITLE: Declaring AdjustmentType Enum in GraphQL\nDESCRIPTION: This snippet defines the 'AdjustmentType' enum in the GraphQL schema for Vendure. It restricts a field's values to PROMOTION, DISTRIBUTED_ORDER_PROMOTION, or OTHER, typically representing the type of order adjustment applied. It requires integration with a GraphQL server (such as Apollo Server) and is a part of the Vendure platform's commerce types. Inputs are implicit--enum values used in the schema--while outputs are those values provided or accepted in orders and promotions processing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nenum AdjustmentType {\nPROMOTION\nDISTRIBUTED_ORDER_PROMOTION\nOTHER\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockMovementType Enum in GraphQL for Vendure Ecommerce\nDESCRIPTION: This snippet defines the StockMovementType enum used in the Vendure ecommerce platform. It specifies different types of stock movements, including adjustment, allocation, release, sale, cancellation, and return.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\nenum StockMovementType {\n  ADJUSTMENT\n  ALLOCATION\n  RELEASE\n  SALE\n  CANCELLATION\n  RETURN\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderInput in GraphQL\nDESCRIPTION: This input type is used for canceling an order. It includes fields for the order ID, specific lines to cancel, shipping cancellation, and a reason.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ninput CancelOrderInput {\n  orderId: ID!\n  lines: [OrderLineInput!]\n  cancelShipping: Boolean\n  reason: String\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Creation Mutation in GraphQL\nDESCRIPTION: Mutation for creating new assets in the system. Accepts an array of asset inputs and returns results for each created asset.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createAssets(input: [CreateAssetInput!]!): [CreateAssetResult!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockLocationSortParameter Input Type in GraphQL\nDESCRIPTION: Input type for sorting StockLocation entities in queries. It allows sorting by id, createdAt, updatedAt, name, and description fields using the SortOrder enum values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_155\n\nLANGUAGE: graphql\nCODE:\n```\ninput StockLocationSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  description: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type is used for filtering promotions in queries. It includes various fields for filtering based on promotion attributes such as ID, creation date, coupon code, and usage limits.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_128\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PromotionFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  startsAt: DateOperators\n  endsAt: DateOperators\n  couponCode: StringOperators\n  perCustomerUsageLimit: NumberOperators\n  usageLimit: NumberOperators\n  name: StringOperators\n  description: StringOperators\n  enabled: BooleanOperators\n  _and: [PromotionFilterParameter!]\n  _or: [PromotionFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: SearchInput Variables with FacetValueFilters\nDESCRIPTION: JSON variables for a search query that includes facet value filtering. This example filters products by the Nikkon brand (facet value ID 11) using the 'and' operator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": {\n    \"term\": \"camera\",\n    \"skip\": 0,\n    \"take\": 10,\n    \"groupByProduct\": true,\n    // highlight-start\n    \"facetValueFilters\": [\n      { \"and\": \"11\" }\n    ]\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for addNavMenuItem in Vendure Admin UI (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript function signature for the addNavMenuItem function. It takes three parameters: config (of type NavMenuItem), sectionId (a string), and an optional before parameter (also a string).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/add-nav-menu-item.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addNavMenuItem(config: NavMenuItem, sectionId: string, before?: string): void\n```\n\n----------------------------------------\n\nTITLE: HistoryEntryFilterParameter GraphQL Input Type Definition\nDESCRIPTION: Specifies filter parameters for history entries, allowing filtering by various properties including ID, dates, type, and logical operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_92\n\nLANGUAGE: graphql\nCODE:\n```\ninput HistoryEntryFilterParameter {\nisPublic: BooleanOperators\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\ntype: StringOperators\n_and: [HistoryEntryFilterParameter!]\n_or: [HistoryEntryFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignPaymentMethodsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple payment methods to a specific channel in the Vendure admin API. It requires a list of payment method IDs and the target channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_16\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignPaymentMethodsToChannelInput {\n  paymentMethodIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Input Component in a ConfigurableOperationDef Argument\nDESCRIPTION: Illustrates how to specify a custom input component for an argument in a ConfigurableOperationDef. This can be used in various configurable operations like CollectionFilters or ShippingMethods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/register-form-input-component.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nargs: {\n  rrp: { type: 'int', ui: { component: 'my-custom-input' } },\n}\n```\n\n----------------------------------------\n\nTITLE: Querying active channel in GraphQL\nDESCRIPTION: This query retrieves the currently active channel. It is designed to return a Channel object, a core concept in the Vendure platform that represents the context within which operations are performed. This query does not require any parameters and has no constraints other than returning the active channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nThe active Channel\n\"\"\"\ntype Query {\n    activeChannel: Channel!\n}\n```\n\n----------------------------------------\n\nTITLE: ElasticsearchOptions Interface Definition\nDESCRIPTION: TypeScript interface defining all available configuration options for the ElasticsearchPlugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ElasticsearchOptions {\n    host?: string;\n    port?: number;\n    connectionAttempts?: number;\n    connectionAttemptInterval?: number;\n    clientOptions?: ClientOptions;\n    indexPrefix?: string;\n    indexSettings?: object;\n    indexMappingProperties?: {\n        [indexName: string]: object;\n    };\n    reindexProductsChunkSize?: number;\n    reindexBulkOperationSizeLimit?: number;\n    searchConfig?: SearchConfig;\n    customProductMappings?: {\n        [fieldName: string]: CustomMapping<\n            [Product, ProductVariant[], LanguageCode, Injector, RequestContext]\n        >;\n    };\n    customProductVariantMappings?: {\n        [fieldName: string]: CustomMapping<[ProductVariant, LanguageCode, Injector, RequestContext]>;\n    };\n    bufferUpdates?: boolean;\n    hydrateProductRelations?: Array<EntityRelationPaths<Product>>;\n    hydrateProductVariantRelations?: Array<EntityRelationPaths<ProductVariant>>;\n    extendSearchInputType?: {\n        [name: string]: PrimitiveTypeVariations<GraphQlPrimitive>;\n    };\n    extendSearchSortType?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Translatable Fields in Core\nDESCRIPTION: Ensures that translatable fields default to an empty string if the value is falsy in the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v2.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"**core** Translatable fields default to empty string if falsy ([e119154](https://github.com/vendure-ecommerce/vendure/commit/e119154))\"\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodList GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL type definition for a paginated list of shipping methods in the Vendure shop API. Contains the shipping method items and the total count for pagination purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_125\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethodList {\n  items: [ShippingMethod!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VendureLogger Interface in TypeScript\nDESCRIPTION: This code snippet defines the VendureLogger interface, which includes methods for error, warn, info, verbose, and debug logging, as well as an optional method to set a default context. Each logging method accepts a message and an optional context, with the error method also accepting an optional trace.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/vendure-logger.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface VendureLogger {\n    error(message: string, context?: string, trace?: string): void;\n    warn(message: string, context?: string): void;\n    info(message: string, context?: string): void;\n    verbose(message: string, context?: string): void;\n    debug(message: string, context?: string): void;\n    setDefaultContext?(defaultContext: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Ranges for Filters - GraphQL\nDESCRIPTION: Specifies a simple input type that defines a numeric range with required start and end float values. Used as the range for the 'between' operator in NumberOperators input and similar range-based queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_108\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput NumberRange {\n  start: Float!\n  end: Float!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Button Implementation in Angular Templates\nDESCRIPTION: Examples of primary, secondary, ghost and small button implementations using Angular template syntax. Includes examples of buttons with icons and router links.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"button primary\">Primary</button>\n<button class=\"button secondary\">Secondary</button>\n<button class=\"button success\">Success</button>\n<button class=\"button warning\">Warning</button>\n<button class=\"button danger\">Danger</button>\n\n<button class=\"button-ghost\">Ghost</button>\n<a class=\"button-ghost\" [routerLink]=\"['/extensions/my-plugin/my-custom-route']\">\n    <clr-icon shape=\"arrow\" dir=\"right\"></clr-icon>\n    John Smith\n</a>\n\n<button class=\"button-small\">Small</button>\n<button class=\"button-small\">\n    <clr-icon shape=\"layers\"></clr-icon>\n    Assign to channel\n</button>\n```\n\n----------------------------------------\n\nTITLE: Removing Settled Jobs Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to remove all settled jobs in the given queues older than the specified date. Takes queue names and a date parameter and returns the number of jobs deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_88\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeSettledJobs(queueNames: [String!], olderThan: DateTime): Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Vendure Elasticsearch Plugin using npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the `@vendure/elasticsearch-plugin` package. Execute this command in your project's root directory to add the plugin as a dependency. This is a prerequisite for configuring and using the Elasticsearch plugin within your Vendure application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/elasticsearch-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @vendure/elasticsearch-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Banner Mutation Schema\nDESCRIPTION: Shows how to define a GraphQL mutation schema for setting banner text in the admin API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const adminApiExtensions = gql`\n  extend type Mutation {\n    setBannerText(locationId: String!, text: String!): String!\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: Querying Collections List - GraphQL SDL - GraphQL\nDESCRIPTION: Defines the 'collections' query, accepting CollectionListOptions to return a non-nullable paginated CollectionList. Used to list and manage product collections with support for standard query options. Requires right permissions and optional filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  collections(options: CollectionListOptions): CollectionList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining RefundPaymentIdMissingError Object Type in GraphQL\nDESCRIPTION: Defines an error type returned when modifying an order that requires a refund but no refundPaymentId was provided in the request.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_155\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned when a call to modifyOrder fails to include a refundPaymentId even\nthough the price has decreased as a result of the changes.\"\"\"\ntype RefundPaymentIdMissingError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignShippingMethodsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple shipping methods to a specific channel in the Vendure admin API. It requires a list of shipping method IDs and the target channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_20\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignShippingMethodsToChannelInput {\n  shippingMethodIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Custom Fields\nDESCRIPTION: Example of configuring a default value for a custom field when new entities are created.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'reviewRating',\n                type: 'float',\n                // highlight-next-line\n                defaultValue: 0,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Money GraphQL Scalar Type\nDESCRIPTION: Defines the Money scalar type for representing monetary values with double-precision fractional values as specified by IEEE 754.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_103\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"The `Money` scalar type represents monetary values and supports signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).\"\"\"\nscalar Money\n```\n\n----------------------------------------\n\nTITLE: Using LocaleCurrencyPipe in HTML Template\nDESCRIPTION: Demonstrates how to use the LocaleCurrencyPipe to format a variant's price with tax in an HTML template.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-currency-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{ variant.priceWithTax | localeCurrency }}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductTranslation GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductTranslation, including its properties such as id, createdAt, updatedAt, languageCode, name, slug, and description. It represents the translated data for a product.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_94\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: DeletionResult Enum in GraphQL for Vendure\nDESCRIPTION: A GraphQL enum definition for deletion operation results in Vendure. Contains two possible states: DELETED for successful deletions and NOT_DELETED for unsuccessful operations with reasons provided in a message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nenum DeletionResult {\n\"\"\"The entity was successfully deleted\"\"\"\nDELETED\n\"\"\"Deletion did not take place, reason given in message\"\"\"\nNOT_DELETED\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Strategy in Vendure Config\nDESCRIPTION: Shows how to configure a custom strategy in the Vendure configuration file by passing an instance to the appropriate config option.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { MyOrderCodeStrategy } from '../config/my-order-code-strategy';\n\nexport const config: VendureConfig = {\n    // ...\n    orderOptions: {\n        orderCodeStrategy: new MyOrderCodeStrategy(),\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Zones Mutations - GraphQL\nDESCRIPTION: GraphQL mutations for deleting single or multiple zones by ID. Returns DeletionResponse(s).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_69\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteZone(id: ID!): DeletionResponse!\n  deleteZones(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Variant by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a ProductVariant by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_22\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Get a ProductVariant by id\"\"\"\ntype Query {\n  productVariant(id: ID!): ProductVariant\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodTranslation GraphQL Object Type\nDESCRIPTION: GraphQL type definition for ShippingMethodTranslation which contains localized name and description for shipping methods along with metadata like creation timestamp and language code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_127\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethodTranslation {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nlanguageCode: LanguageCode!\nname: String!\ndescription: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextCustomFieldConfig Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for configuring text-type custom fields. Contains fields for field definition, validation, UI presentation, and permission settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_143\n\nLANGUAGE: graphql\nCODE:\n```\ntype TextCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: SharpAssetPreviewConfig Interface Definition\nDESCRIPTION: Interface definition showing the configuration options available for SharpAssetPreviewStrategy, including maximum dimensions and format-specific options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/sharp-asset-preview-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SharpAssetPreviewConfig {\n    maxHeight?: number;\n    maxWidth?: number;\n    jpegOptions?: sharp.JpegOptions;\n    pngOptions?: sharp.PngOptions;\n    webpOptions?: sharp.WebpOptions;\n    gifOptions?: sharp.GifOptions;\n    avifOptions?: sharp.AvifOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MergedOrderLine Interface in TypeScript\nDESCRIPTION: Interface that defines the structure of a merged order line, containing the order line ID, quantity, and optional custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-merge-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MergedOrderLine {\n    orderLineId: ID;\n    quantity: number;\n    customFields?: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigArg and ConfigArgDefinition Types\nDESCRIPTION: GraphQL types for configuration arguments and their definitions, used for configurable operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ntype ConfigArg {\n  name: String!\n  value: String!\n}\n\ntype ConfigArgDefinition {\n  name: String!\n  type: String!\n  list: Boolean!\n  required: Boolean!\n  defaultValue: JSON\n  label: String\n  description: String\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Collection in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a Collection and all its descendants. Takes a Collection ID and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_34\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCollection(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderModificationError Type in GraphQL\nDESCRIPTION: The OrderModificationError type is returned when attempting to modify an Order that is not in the 'AddingItems' state, containing an error code and message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_118\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned when attempting to modify the contents of an Order that is not in the `AddingItems` state.\"\"\"\ntype OrderModificationError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Permissions in Vendure with TypeScript\nDESCRIPTION: This snippet shows how to modify the Vendure configuration by adding a custom permission, 'sync', for use in authentication options. Dependencies include the 'sync' PermissionDefinition, and the configuration impacts how authentication is handled in the application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  authOptions: {\n    customPermissions: [sync],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultProductVariantPriceCalculationStrategy in TypeScript\nDESCRIPTION: Class definition of DefaultProductVariantPriceCalculationStrategy which implements ProductVariantPriceCalculationStrategy interface. It contains two methods: init for initialization with the injector, and calculate for determining product variant prices.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/default-product-variant-price-calculation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultProductVariantPriceCalculationStrategy implements ProductVariantPriceCalculationStrategy {\n    init(injector: Injector) => ;\n    calculate(args: ProductVariantPriceCalculationArgs) => Promise<PriceCalculationResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Random Bytes Implementation\nDESCRIPTION: Security enhancement replacing insecure randomness with secure randomBytes implementation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncb556d8\n```\n\n----------------------------------------\n\nTITLE: Using Ctx Decorator in GraphQL Query - TypeScript\nDESCRIPTION: Demonstrates how to use the @Ctx decorator to extract the RequestContext from an incoming request in a GraphQL query resolver.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/ctx-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Query()\ngetAdministrators(@Ctx() ctx: RequestContext) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: ObjectTreeComponent Class Definition in TypeScript\nDESCRIPTION: TypeScript class definition for ObjectTreeComponent, including input properties, class properties, and methods. It implements the OnChanges interface for detecting changes to input properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/object-tree-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ObjectTreeComponent implements OnChanges {\n    @Input() value: { [key: string]: any } | string;\n    @Input() isArrayItem = false;\n    depth: number;\n    expanded: boolean;\n    valueIsArray: boolean;\n    entries: Array<{ key: string; value: any }>;\n    constructor(parent: ObjectTreeComponent)\n    ngOnChanges() => ;\n    isObject(value: any) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelPaymentResult GraphQL Union Type in Vendure\nDESCRIPTION: Defines the CancelPaymentResult GraphQL union type which represents the possible outcomes when canceling a payment. It can be either a successful Payment or one of several error types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nunion CancelPaymentResult =\n  Payment | CancelPaymentError | PaymentStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to Fields\nDESCRIPTION: Examples of implementing custom validation logic for fields with both synchronous and asynchronous validation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode } from '@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'infoUrl',\n                type: 'string',\n                // highlight-start\n                validate: (value: any) => {\n                    if (!value.startsWith('http')) {\n                        return [\n                            {languageCode: LanguageCode.en, value: 'The URL must start with \"http\"'},\n                            {languageCode: LanguageCode.de, value: 'Die URL muss mit \"http\" beginnen'},\n                            {languageCode: LanguageCode.es, value: 'La URL debe comenzar con \"http\"'},\n                        ];\n                    }\n                },\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TagSortParameter Input Type in GraphQL\nDESCRIPTION: Input type for sorting Tag entities in queries. It allows sorting by id, createdAt, updatedAt, and value fields using the SortOrder enum values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_162\n\nLANGUAGE: graphql\nCODE:\n```\ninput TagSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  value: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Account Verification Mutation\nDESCRIPTION: GraphQL mutation to verify a customer account using a verification token and setting password.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/customer-accounts/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation Verify($password: String!, $token: String!) {\n  verifyCustomerAccount(password: $password, token: $token) {\n    ...on CurrentUser {\n      id\n      identifier\n    }\n    ...on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SqlJobQueueStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the SqlJobQueueStrategy class, which extends PollingJobQueueStrategy and implements InspectableJobQueueStrategy. It includes method signatures for initializing, destroying, adding, updating, and finding jobs in the queue.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/sql-job-queue-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SqlJobQueueStrategy extends PollingJobQueueStrategy implements InspectableJobQueueStrategy {\n    init(injector: Injector) => ;\n    destroy() => ;\n    add(job: Job<Data>, jobOptions?: JobQueueStrategyJobOptions<Data>) => Promise<Job<Data>>;\n    next(queueName: string) => Promise<Job | undefined>;\n    update(job: Job<any>) => Promise<void>;\n    findMany(options?: JobListOptions) => Promise<PaginatedList<Job>>;\n    findOne(id: ID) => Promise<Job | undefined>;\n    findManyById(ids: ID[]) => Promise<Job[]>;\n    removeSettledJobs(queueNames: string[] = [], olderThan?: Date) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CustomerHistoryEntryData Interface for Custom Type\nDESCRIPTION: Example of using TypeScript declaration merging to extend the CustomerHistoryEntryData interface with a custom history entry type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/history-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// types.ts\nimport { CustomerHistoryEntryData } from '@vendure/core';\n\nexport const CUSTOMER_TAX_ID_VERIFICATION = 'CUSTOMER_TAX_ID_VERIFICATION';\n\ndeclare module '@vendure/core' {\n  interface CustomerHistoryEntryData {\n    [CUSTOMER_TAX_ID_VERIFICATION]: {\n      taxId: string;\n      valid: boolean;\n      name?: string;\n      address?: string;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RequestPasswordResetResult Union Type in GraphQL\nDESCRIPTION: Union type definition for possible results when requesting a password reset, including success or authentication strategy errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_110\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion RequestPasswordResetResult =\nSuccess | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: ZoneList GraphQL Type Definition\nDESCRIPTION: Defines a paginated list of Zone entities, used for retrieving multiple zones with pagination information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_222\n\nLANGUAGE: graphql\nCODE:\n```\ntype ZoneList {\nitems: [Zone!]!\ntotalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating StockLocation in GraphQL\nDESCRIPTION: This mutation type updates an existing StockLocation. It takes a UpdateStockLocationInput object as input and returns the updated StockLocation object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_132\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateStockLocation(input: UpdateStockLocationInput!): StockLocation!\n}\n```\n\n----------------------------------------\n\nTITLE: Product Detail Query Variables\nDESCRIPTION: JSON variables for the GetProductDetail query, specifying the product slug to fetch.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slug\": \"laptop\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORMHealthCheckStrategy in Vendure\nDESCRIPTION: Example of how to customize the database health check by explicitly adding it to the systemOptions.healthChecks array with custom key and timeout values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/type-ormhealth-check-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TypeORMHealthCheckStrategy } from '@vendure/core';\n\nexport const config = {\n  // ...\n  systemOptions: {\n    healthChecks:[\n        // The default key is \"database\" and the default timeout is 1000ms\n        // Sometimes this is too short and leads to false negatives in the\n        // /health endpoint.\n        new TypeORMHealthCheckStrategy({ key: 'postgres-db', timeout: 5000 }),\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zone Type in GraphQL\nDESCRIPTION: This type represents a zone in the system, including fields for identification, creation and update timestamps, name, member regions, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_154\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Zone {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  members: [Region!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckShippingEligibilityCheckerFn Type in TypeScript\nDESCRIPTION: This code snippet defines the CheckShippingEligibilityCheckerFn type, which is a function that takes RequestContext, Order, ConfigArgValues, and ShippingMethod as parameters and returns a boolean or a Promise of boolean. It is used to implement logic for determining shipping eligibility for an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/check-shipping-eligibility-checker-fn.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CheckShippingEligibilityCheckerFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    method: ShippingMethod,\n) => boolean | Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Querying Asset by ID - GraphQL SDL - GraphQL\nDESCRIPTION: This snippet provides the 'asset' query with a required ID parameter to retrieve a single Asset by its unique identifier. It includes a comment clarifying the purpose. The output is an Asset object or null if not found. Authentication and asset existence are required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nGet a single Asset by id\n\"\"\"\ntype Query {\n  asset(id: ID!): Asset\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Method in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new PaymentMethod. It requires a CreatePaymentMethodInput object and returns a PaymentMethod object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createPaymentMethod(input: CreatePaymentMethodInput!): PaymentMethod!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type AuthenticationInput\nDESCRIPTION: Defines the `AuthenticationInput` type used for authentication operations in the GraphQL Shop API. It currently contains a single field `native` which accepts a `NativeAuthInput` object for native authentication strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput AuthenticationInput {\n  native: NativeAuthInput\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingLine GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL type definition for shipping lines in the Vendure shop API. Contains details about shipping methods applied to orders, including prices with and without tax, discounts, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_123\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingLine {\n  id: ID!\n  shippingMethod: ShippingMethod!\n  price: Money!\n  priceWithTax: Money!\n  discountedPrice: Money!\n  discountedPriceWithTax: Money!\n  discounts: [Discount!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SelectFormInputComponent in TypeScript\nDESCRIPTION: Defines a component for select input fields, allowing selection of string values. It's used for 'string' type fields with options and implements FormInputComponent and OnInit interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass SelectFormInputComponent implements FormInputComponent, OnInit {\n    static readonly id: DefaultFormComponentId = 'select-form-input';\n    @Input() readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'select-form-input'> & CustomFieldConfigFragment;\n    uiLanguage$: Observable<LanguageCode>;\n    options: void\n    constructor(dataService: DataService)\n    ngOnInit() => ;\n    trackByFn(index: number, item: any) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: OrderInterceptorError Type Definition in GraphQL\nDESCRIPTION: Defines the error type returned when an order operation is rejected by an OrderInterceptor method. Includes error code, message, and interceptor-specific error details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_69\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderInterceptorError {\n  errorCode: ErrorCode!\n  message: String!\n  interceptorError: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Middleware in Vendure TypeScript\nDESCRIPTION: This snippet demonstrates how to increase the maximum request body size limit in Vendure by configuring the body-parser middleware. It sets the limit to 10mb for all routes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { json } from 'body-parser';\n\nexport const config: VendureConfig = {\n  // ...\n  apiOptions: {\n    middleware: [{\n      handler: json({ limit: '10mb' }),\n      route: '*',\n      beforeListen: true,\n    }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProductOptionInput in GraphQL\nDESCRIPTION: This input type is used for creating a new product option. It includes fields for product option group ID, code, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_55\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProductOptionInput {\n  productOptionGroupId: ID!\n  code: String!\n  translations: [ProductOptionGroupTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetSortParameter Input Type in GraphQL\nDESCRIPTION: Provides sorting options for Facets based on various fields such as id, createdAt, updatedAt, name, and code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  code: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BulkActionClickContext Interface in TypeScript\nDESCRIPTION: Extends BulkActionFunctionContext to include additional properties for handling click events in bulk actions, such as clearing selection and accessing the mouse event.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/bulk-action.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BulkActionClickContext<ItemType, ComponentType> extends BulkActionFunctionContext<ItemType, ComponentType> {\n    clearSelection: () => void;\n    event: MouseEvent;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRateFilterParameter Input Type in GraphQL\nDESCRIPTION: Input type that defines filtering criteria for tax rates. Includes filters for id, dates, name, enabled status, and value with various operators and supports logical AND/OR combinations of filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_166\n\nLANGUAGE: graphql\nCODE:\n```\ninput TaxRateFilterParameter {\n  id: IDOperators\n\n  createdAt: DateOperators\n\n  updatedAt: DateOperators\n\n  name: StringOperators\n\n  enabled: BooleanOperators\n\n  value: NumberOperators\n\n  _and: [TaxRateFilterParameter!]\n\n  _or: [TaxRateFilterParameter!]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateShippingMethodInput in GraphQL\nDESCRIPTION: This input type is used for creating a new shipping method. It includes fields for code, fulfillment handler, checker, calculator, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_63\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateShippingMethodInput {\n  code: String!\n  fulfillmentHandler: String!\n  checker: ConfigurableOperationInput!\n  calculator: ConfigurableOperationInput!\n  translations: [ShippingMethodTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Entity with ORM Decorators in TypeScript\nDESCRIPTION: This snippet defines the Product class as a TypeScript entity, extending VendureEntity and implementing interfaces for translation, custom fields, channel awareness, and soft deletion. It specifies ORM decorators for columns, indices, and relationships, outlining properties such as \"deletedAt\", \"name\", \"slug\", association with assets, variants, option groups, facet values, and channels, and includes custom fields. Dependencies include the Vendure core ORM setup and entity base classes/interfaces. Expected usage is database schema modeling; inputs are entity state or partials, outputs are typed Product instances; constraints are set by ORM setup (e.g., field types, nullability, and relationships).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/product.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Product extends VendureEntity implements Translatable, HasCustomFields, ChannelAware, SoftDeletable {\n    constructor(input?: DeepPartial<Product>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    name: LocaleString;\n    slug: LocaleString;\n    description: LocaleString;\n    @Column({ default: true })\n    enabled: boolean;\n    @Index()\n    @ManyToOne(type => Asset, asset => asset.featuredInProducts, { onDelete: 'SET NULL' })\n    featuredAsset: Asset;\n    @EntityId({ nullable: true })\n    featuredAssetId: ID;\n    @OneToMany(type => ProductAsset, productAsset => productAsset.product)\n    assets: ProductAsset[];\n    @OneToMany(type => ProductTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<Product>>;\n    @OneToMany(type => ProductVariant, variant => variant.product)\n    variants: ProductVariant[];\n    @OneToMany(type => ProductOptionGroup, optionGroup => optionGroup.product)\n    optionGroups: ProductOptionGroup[];\n    @ManyToMany(type => FacetValue, facetValue => facetValue.products)\n    @JoinTable()\n    facetValues: FacetValue[];\n    @ManyToMany(type => Channel, channel => channel.products)\n    @JoinTable()\n    channels: Channel[];\n    @Column(type => CustomProductFields)\n    customFields: CustomProductFields;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Refund Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the Refund entity, which contains detailed information about a refund including monetary values, reason, state, and associated refund lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_104\n\nLANGUAGE: graphql\nCODE:\n```\ntype Refund {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  items: Money!\n  shipping: Money!\n  adjustment: Money!\n  total: Money!\n  method: String\n  state: String!\n  transactionId: String\n  reason: String\n  lines: [RefundLine!]!\n  paymentId: ID!\n  metadata: JSON\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shipping Methods List in GraphQL\nDESCRIPTION: Defines a GraphQL query to list Shipping Methods with options for filtering and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_39\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  shippingMethods(options: ShippingMethodListOptions): ShippingMethodList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerInput in GraphQL\nDESCRIPTION: Input type for updating customer information in Vendure. Requires an ID to identify the customer and allows updating personal details like name, phone number, and email address.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_181\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCustomerInput {\n  id: ID!\n  title: String\n  firstName: String\n  lastName: String\n  phoneNumber: String\n  emailAddress: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying list of collections in GraphQL\nDESCRIPTION: This query retrieves a list of all available collections in the shop. It accepts an optional CollectionListOptions parameter, allowing for filtering and sorting, and returns a CollectionList.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nA list of Collections available to the shop\n\"\"\"\ntype Query {\n    collections(options: CollectionListOptions): CollectionList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON GraphQL Scalar\nDESCRIPTION: Defines the `JSON` GraphQL scalar type. This scalar represents JSON values as specified by the ECMA-404 standard, allowing for flexible, unstructured data within the GraphQL schema.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_88\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\"\"\"\nscalar JSON\n```\n\n----------------------------------------\n\nTITLE: Updating RuntimeVendureConfig Interface in TypeScript\nDESCRIPTION: Expose a new RuntimeVendureConfig interface in the Vendure core.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nExpose new RuntimeVendureConfig interface\n```\n\n----------------------------------------\n\nTITLE: Defining AddNoteToCustomerInput in GraphQL\nDESCRIPTION: Specifies the input for adding a note to a specific customer. Requires the customer's `id`, the `note` content (as a String), and a boolean `isPublic` flag indicating visibility.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ninput AddNoteToCustomerInput {\n  id: ID!\n  note: String!\n  isPublic: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Customer Verification Mutation in GraphQL\nDESCRIPTION: This mutation regenerates and sends a verification token for new customer registration. It is used only if 'authOptions.requireVerification' is true, taking an 'emailAddress' as input and returning a 'RefreshCustomerVerificationResult'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { refreshCustomerVerification(emailAddress: String!): RefreshCustomerVerificationResult! }\n```\n\n----------------------------------------\n\nTITLE: Deploying Vendure Website Using SSH\nDESCRIPTION: This command builds the website and deploys it using SSH.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true npm run deploy\n```\n\n----------------------------------------\n\nTITLE: AdminUiPlugin Class Definition (TypeScript)\nDESCRIPTION: This code snippet defines the AdminUiPlugin class, which implements the NestModule interface. It includes a constructor, an init method for setting plugin options, and a configure method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/admin-ui-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass AdminUiPlugin implements NestModule {\n    constructor(configService: ConfigService, processContext: ProcessContext)\n    init(options: AdminUiPluginOptions) => Type<AdminUiPlugin>;\n    configure(consumer: MiddlewareConsumer) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionResult GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for collection search results in Vendure. This type represents collections found in product search results, including the collection reference and count of matching products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nWhich Collections are present in the products returned\nby the search, and in what quantity.\n\"\"\"\ntype CollectionResult {\n  collection: Collection!\n  count: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetricSummary GraphQL Object Type\nDESCRIPTION: Defines the MetricSummary object type with fields for interval, type, title, and entries. It represents a summary of metrics in the Vendure system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_98\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype MetricSummary {\n  interval: MetricInterval!\n  type: MetricType!\n  title: String!\n  entries: [MetricSummaryEntry!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translatable Entity in TypeScript\nDESCRIPTION: Example showing how the Facet entity implements the Translatable interface with translations relation and locale string fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translations/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Facet extends VendureEntity implements Translatable {\n    name: LocaleString;\n\n    @Column({ unique: true })\n    code: string;\n\n    @OneToMany(type => FacetTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<Facet>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRate Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tax rates in the e-commerce system. Contains fields for identification, timestamps, configuration details, and associations to TaxCategory, Zone, and CustomerGroup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_141\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxRate {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  enabled: Boolean!\n  value: Float!\n  category: TaxCategory!\n  zone: Zone!\n  customerGroup: CustomerGroup\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring PluginCommonModule Class in TypeScript\nDESCRIPTION: Class declaration for PluginCommonModule which exports common functionality including EventBusModule, ServiceModule, ConfigModule, JobQueueModule and HealthCheckModule. This module serves as a foundation for Vendure plugins by providing essential services and capabilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/plugin-common-module.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PluginCommonModule {\n\n}\n```\n\n----------------------------------------\n\nTITLE: ProductList Type Definition in GraphQL\nDESCRIPTION: Defines a paginated list of products containing the items array and total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_135\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductList {\n  items: [Product!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Payment Methods from Channels in GraphQL\nDESCRIPTION: Specifies a mutation to remove PaymentMethods from a specified Channel, returning an array of affected PaymentMethod objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_84\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removePaymentMethodsFromChannel(input: RemovePaymentMethodsFromChannelInput!): [PaymentMethod!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderTaxSummary Type in GraphQL\nDESCRIPTION: The OrderTaxSummary type provides tax information for an order, grouped by tax rate, including the description, rate, base amount, and total tax amount.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_123\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"A summary of the taxes being applied to this order, grouped\nby taxRate.\"\"\"\ntype OrderTaxSummary {\n  \"\"\"A description of this tax\"\"\"\n  description: String!\n  \"\"\"The taxRate as a percentage\"\"\"\n  taxRate: Float!\n  \"\"\"The total net price of OrderLines to which this taxRate applies\"\"\"\n  taxBase: Money!\n  \"\"\"The total tax being applied to the Order at this taxRate\"\"\"\n  taxTotal: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: Unset Order Shipping Address Mutation\nDESCRIPTION: GraphQL mutation for removing the shipping address from an active order. Available since Vendure version 3.1.0.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  unsetOrderShippingAddress: ActiveOrderResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Promotions List in GraphQL\nDESCRIPTION: Defines a GraphQL query to list Promotions with options for filtering and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_28\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  promotions(options: PromotionListOptions): PromotionList!\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ZoneMembersEvent Class - TypeScript\nDESCRIPTION: Defines ZoneMembersEvent, which is fired when countries are assigned to or removed from a Zone's members. The class extends VendureEvent and its constructor requires context, the zone entity, an action type (assigned or removed), and an array of member IDs. Parameters: ctx (RequestContext), entity (Zone), type (assigned/removed), memberIds (ID[]). The output is an event representing the member change within the zone entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ZoneMembersEvent extends VendureEvent {\n    constructor(ctx: RequestContext, entity: Zone, type: 'assigned' | 'removed', memberIds: ID[])\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImportExportOptions Interface in TypeScript\nDESCRIPTION: Interface defining configuration options for import/export functionality in Vendure. It includes settings for asset import directory location and strategy for importing assets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-export-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImportExportOptions {\n    importAssetsDir?: string;\n    assetImportStrategy?: AssetImportStrategy;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegionTranslation Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the RegionTranslation entity, which contains the localized name for a geographic region in a specific language.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_106\n\nLANGUAGE: graphql\nCODE:\n```\ntype RegionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CountryFilterParameter in GraphQL\nDESCRIPTION: The CountryFilterParameter input type allows the filtering of country data using operators for 'id', 'createdAt', 'updatedAt', 'languageCode', 'code', 'type', 'name', 'enabled', and 'parentId'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_35\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CountryFilterParameter {\\n  id: IDOperators\\n  createdAt: DateOperators\\n  updatedAt: DateOperators\\n  languageCode: StringOperators\\n  code: StringOperators\\n  type: StringOperators\\n  name: StringOperators\\n  enabled: BooleanOperators\\n  parentId: IDOperators\\n  _and: [CountryFilterParameter!]\\n  _or: [CountryFilterParameter!]\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Sass Variable Overrides\nDESCRIPTION: Configuration to apply custom Sass variable overrides to the Admin UI using the UI devkit compiler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/admin-ui-theming-branding/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { VendureConfig } from '@vendure/core';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, 'admin-ui'),\n                extensions: [{\n                    sassVariableOverrides: path.join(__dirname, 'my-variables.scss')\n                }],\n            }),\n        }),\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ZoneFilterParameter GraphQL Input Type\nDESCRIPTION: GraphQL input type for filtering zones based on various criteria including ID, creation date, update date, and name. Supports logical operators for complex queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_205\n\nLANGUAGE: graphql\nCODE:\n```\ninput ZoneFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  name: StringOperators\n  _and: [ZoneFilterParameter!]\n  _or: [ZoneFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntryList GraphQL Type\nDESCRIPTION: Defines the HistoryEntryList type for paginated lists of history entries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_45\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype HistoryEntryList {\n  items: [HistoryEntry!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DuplicateEntityResult Union Type in GraphQL\nDESCRIPTION: Defines a union type that represents either a successful or failed result of a duplicate entity operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_58\n\nLANGUAGE: graphql\nCODE:\n```\nunion DuplicateEntityResult = DuplicateEntitySuccess | DuplicateEntityError\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration\nDESCRIPTION: Kubernetes deployment configuration for running Vendure server and worker containers in a pod.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: vendure-shop\nspec:\n  selector:\n    matchLabels:\n      app: vendure-shop\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: vendure-shop\n    spec:\n      containers:\n        - name: server\n          image: vendure-shop:latest\n          command:\n            - node\n          args:\n            - \"dist/index.js\"\n          env:\n          # your env config here\n          ports:\n            - containerPort: 3000\n\n        - name: worker\n          image: vendure-shop:latest\n          imagePullPolicy: Always\n          command:\n            - node\n          args:\n            - \"dist/index-worker.js\"\n          env:\n          # your env config here\n          ports:\n            - containerPort: 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fields in HTML Template\nDESCRIPTION: Demonstrates the HTML template structure for displaying custom fields in a detail view, including form layout and the custom fields card component integration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-detail-views/index.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"form\" [formGroup]=\"detailForm\">\n    <vdr-page-detail-layout>\n        <vdr-page-detail-sidebar>\n            <vdr-card *ngIf=\"entity$ | async as entity\">\n                <vdr-page-entity-info [entity]=\"entity\" />\n            </vdr-card>\n        </vdr-page-detail-sidebar>\n\n        <vdr-page-block>\n            <vdr-card>\n                <div class=\"form-grid\">\n                    <vdr-form-field label=\"Title\" for=\"title\">\n                        <input id=\"title\" type=\"text\" formControlName=\"title\" />\n                    </vdr-form-field>\n                    <vdr-form-field label=\"Rating\" for=\"rating\">\n                        <input id=\"rating\" type=\"number\" min=\"1\" max=\"5\" formControlName=\"rating\" />\n                    </vdr-form-field>\n                </div>\n            </vdr-card>\n            <vdr-card\n                    formGroupName=\"customFields\"\n                    *ngIf=\"customFields.length\"\n                    [title]=\"'common.custom-fields' | translate\"\n            >\n                <vdr-tabbed-custom-fields\n                        entityName=\"ProductReview\"\n                        [customFields]=\"customFields\"\n                        [customFieldsFormGroup]=\"detailForm.get('customFields')\"\n                ></vdr-tabbed-custom-fields>\n            </vdr-card>\n        </vdr-page-block>\n    </vdr-page-detail-layout>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Field Permissions in Vendure\nDESCRIPTION: Demonstrates how to set up permission-based access control for custom fields on Product entities. Shows using both single and multiple permission requirements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Permission } from '@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'internalNotes',\n                type: 'text',\n                requiresPermission: Permission.SuperAdmin,\n            },\n            {\n                name: 'shippingType',\n                type: 'string',\n                requiresPermission: [\n                    Permission.SuperAdmin, \n                    Permission.ReadShippingMethod,\n                ],\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: RichTextEditorComponent Class Definition in TypeScript\nDESCRIPTION: Signature of the RichTextEditorComponent class, which implements ControlValueAccessor, AfterViewInit, and OnDestroy interfaces. It shows the properties, methods, and constructor of the component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/rich-text-editor-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass RichTextEditorComponent implements ControlValueAccessor, AfterViewInit, OnDestroy {\n    @Input() label: string;\n    @HostBinding('class.readonly')\n    _readonly = false;\n    onChange: (val: any) => void;\n    onTouch: () => void;\n    constructor(changeDetector: ChangeDetectorRef, prosemirrorService: ProsemirrorService, viewContainerRef: ViewContainerRef, contextMenuService: ContextMenuService)\n    menuElement: HTMLDivElement | null\n    ngAfterViewInit() => ;\n    ngOnDestroy() => ;\n    registerOnChange(fn: any) => ;\n    registerOnTouched(fn: any) => ;\n    setDisabledState(isDisabled: boolean) => ;\n    writeValue(value: any) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionShippingAction Class in TypeScript\nDESCRIPTION: The PromotionShippingAction class extends PromotionAction and is used for promotions that apply to the shipping cost of an Order. It requires a config object that defines how the discount is calculated for shipping.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass PromotionShippingAction<T extends ConfigArgs = ConfigArgs, U extends PromotionCondition[] = []> extends PromotionAction<T, U> {\n    constructor(config: PromotionShippingActionConfig<T, U>)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationMethod Entity in TypeScript\nDESCRIPTION: Defines the base AuthenticationMethod class that represents how a User is authenticated. It extends VendureEntity and has a many-to-one relationship with User.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/authentication-method.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AuthenticationMethod extends VendureEntity {\n    @Index()\n    @ManyToOne(type => User, user => user.authenticationMethods)\n    user: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MoneyStrategy in VendureConfig\nDESCRIPTION: Example showing how to define a custom MoneyStrategy in the VendureConfig's entityOptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/money-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  entityOptions: {\n    moneyStrategy: new MyCustomMoneyStrategy(),\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: I18nService Class Definition in TypeScript\nDESCRIPTION: Defines the I18nService class which implements OnModuleInit and provides methods for adding translations either via files or direct resources.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/i18n-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass I18nService implements OnModuleInit {\n    addTranslationFile(langKey: string, filePath: string) => void;\n    addTranslation(langKey: string, resources: VendureTranslationResources | any) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CountryListOptions Input - GraphQL\nDESCRIPTION: This snippet defines the CountryListOptions input type, enabling clients to paginate, sort, and filter the list of countries via the Vendure Admin API. Dependencies include other input types such as CountrySortParameter, CountryFilterParameter, and the LogicalOperator enum. Key parameters (skip, take, sort, filter, filterOperator) are aligned with standard list querying patterns, accepting integer values and nested parameters to refine result sets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_36\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CountryListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: CountrySortParameter\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: CountryFilterParameter\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CacheConfig Type in TypeScript\nDESCRIPTION: This code snippet defines the CacheConfig type, which is used to configure caching behavior for asset responses. It includes a required maxAge property for setting the cache duration, and an optional restriction property to specify public or private caching.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/cache-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CacheConfig = {\n    maxAge: number;\n    restriction?: 'public' | 'private';\n}\n```\n\n----------------------------------------\n\nTITLE: ExecutePromotionShippingActionFn Type Definition\nDESCRIPTION: Type definition for the function used by a PromotionShippingAction to calculate the discount on shipping. It receives context, shippingLine, order, args, state, and promotion objects and returns a number representing the discount.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecutePromotionShippingActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (\n    ctx: RequestContext,\n    shippingLine: ShippingLine,\n    order: Order,\n    args: ConfigArgValues<T>,\n    state: ConditionState<U>,\n    promotion: Promotion,\n) => number | Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration File Location in Vendure\nDESCRIPTION: This snippet demonstrates how to configure the location of migration files in the Vendure configuration. It uses the 'dbConnectionOptions.migrations' setting to specify the directory for migration files.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrations/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport path from 'path';\n\nexport const config: VendureConfig = {\n    // ...\n    dbConnectionOptions: {\n        // ...\n        migrations: [path.join(__dirname, './migrations/*.+(js|ts)')],\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering React Custom Detail Component Function Signature\nDESCRIPTION: Function signature for registering a React component to be rendered in a detail page. The function takes a ReactCustomDetailComponentConfig parameter and returns void. Components can utilize the useDetailComponentData hook.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-custom-detail-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerReactCustomDetailComponent(config: ReactCustomDetailComponentConfig): void\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRateList Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for representing a paginated list of tax rates. Contains fields for the array of TaxRate items and the total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_142\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxRateList {\n  items: [TaxRate!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: S3AssetStorageStrategy Class Definition\nDESCRIPTION: TypeScript class implementing AssetStorageStrategy interface for S3 storage functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass S3AssetStorageStrategy implements AssetStorageStrategy {\n    constructor(s3Config: S3Config, toAbsoluteUrl: (request: Request, identifier: string) => string)\n    init() => ;\n    destroy?: (() => void | Promise<void>) | undefined;\n    writeFileFromBuffer(fileName: string, data: Buffer) => ;\n    writeFileFromStream(fileName: string, data: Readable) => ;\n    readFileToBuffer(identifier: string) => ;\n    readFileToStream(identifier: string) => ;\n    deleteFile(identifier: string) => ;\n    fileExists(fileName: string) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateListOperators for Date List Filtering in GraphQL\nDESCRIPTION: This GraphQL input type defines operators for filtering on a list of Date fields in Vendure. It currently supports only the inList operator which allows filtering items where the date field matches any date in the provided list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Operators for filtering on a list of Date fields\"\"\"\ninput DateListOperators {\n  inList: DateTime!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Province Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the Province entity, representing a geographic province or region with related metadata and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_101\n\nLANGUAGE: graphql\nCODE:\n```\ntype Province {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  type: String!\n  name: String!\n  enabled: Boolean!\n  parent: Region\n  parentId: ID\n  translations: [RegionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Using the LocaleCurrencyPipe in Vendure Admin UI Extensions\nDESCRIPTION: An example of using the built-in LocaleCurrencyPipe in an Admin UI extension template to format currency values according to the locale and currency code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    Variant price: {{ variant.price | localeCurrency : variant.currencyCode }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering React Custom DataTable Component\nDESCRIPTION: Demonstrates registering the React custom component for the product list table's slug column using the registerReactDataTableComponent function with optional props.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-data-table-components/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerReactDataTableComponent } from '@vendure/admin-ui/react';\nimport { SlugLink } from './components/SlugLink';\n\nexport default [\n    registerReactDataTableComponent({\n        component: SlugWithLink,\n        tableId: 'product-list',\n        columnId: 'slug',\n        props: {\n            foo: 'bar',\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for specifying options when querying a list of promotions. It includes fields for pagination, sorting, and filtering, as well as a field to specify the logical operator for combining multiple filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_129\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PromotionListOptions {\n  skip: Int\n  take: Int\n  sort: PromotionSortParameter\n  filter: PromotionFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerEmailAddressResult Union Type in GraphQL\nDESCRIPTION: Defines a GraphQL union type that represents the possible outcomes when updating a customer's email address. Can be Success or various error types related to token validation or authentication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_146\n\nLANGUAGE: graphql\nCODE:\n```\nunion UpdateCustomerEmailAddressResult = Success | IdentifierChangeTokenInvalidError | IdentifierChangeTokenExpiredError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeStructFieldConfig Type in GraphQL\nDESCRIPTION: Defines a configuration type for datetime struct fields that uses validation formats compatible with HTML datetime-local input elements. Contains properties for field definition and validation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_54\n\nLANGUAGE: graphql\nCODE:\n```\ntype DateTimeStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  min: String\n  max: String\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProductOptionGroupInput in GraphQL\nDESCRIPTION: This input type is used for creating a new product option group. It includes fields for code, translations, options, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_54\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProductOptionGroupInput {\n  code: String!\n  translations: [ProductOptionGroupTranslationInput!]!\n  options: [CreateGroupOptionInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAdministratorInput schema in GraphQL\nDESCRIPTION: An input type for updating an Administrator entity in the Vendure admin system. Allows for updating profile details, credentials, and role assignments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_174\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateAdministratorInput {\n  id: ID!\n  firstName: String\n  lastName: String\n  emailAddress: String\n  password: String\n  roleIds: [ID!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Build Script for Vendure\nDESCRIPTION: Shell script for building and deploying Docker containers for Vendure to Google Cloud Run. Contains commands for service account creation and repository secret configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-google-cloud-run/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuild-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tags that can be used for categorization and organization of various entities in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_200\n\nLANGUAGE: graphql\nCODE:\n```\ntype Tag {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nvalue: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChangedPriceHandlingStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for handling price changes in orders when ProductVariant prices have changed since the original order line was created. Includes the handlePriceChange method that processes price adjustments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/changed-price-handling-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChangedPriceHandlingStrategy extends InjectableStrategy {\n    handlePriceChange(\n        ctx: RequestContext,\n        current: PriceCalculationResult,\n        orderLine: OrderLine,\n        order: Order,\n    ): PriceCalculationResult | Promise<PriceCalculationResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOrderInput in GraphQL\nDESCRIPTION: Input type for updating an order in Vendure. Requires the order ID and allows updating custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_187\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateOrderInput {\n  id: ID!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the createSeller Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createSeller` mutation, designed to create a new Seller. It requires a non-nullable `CreateSellerInput` object providing the seller's information and returns the created `Seller` object, which cannot be null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new Seller\n\"\"\"\ntype Mutation {\n  createSeller(input: CreateSellerInput!): Seller!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AssetList Type\nDESCRIPTION: The AssetList type allows for encapsulating multiple Asset objects, integrating additional metadata like totalItems. This type is used to efficiently handle and paginate asset records.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype AssetList {\n  items: [Asset!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Dependencies\nDESCRIPTION: Command to install required AWS SDK packages for S3 asset storage functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/lib-storage\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerGroupInput in GraphQL\nDESCRIPTION: Input type for updating a customer group in Vendure. Requires an ID to identify the group being updated and allows changing the name and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_180\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCustomerGroupInput {\n  id: ID!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for paginating, sorting, and filtering product variant lists. It includes options for skip, take, sort, filter, and filterOperator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantListOptions {\n  skip: Int\n  take: Int\n  sort: ProductVariantSortParameter\n  filter: ProductVariantFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Note in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a Customer Note. Takes a Note ID and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_42\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCustomerNote(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderMergeStrategy Interface in TypeScript\nDESCRIPTION: Interface definition for OrderMergeStrategy that extends InjectableStrategy. Specifies how to merge orders when a customer with an existing order signs in with a guest order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-merge-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderMergeStrategy extends InjectableStrategy {\n    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order): MergedOrderLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveFacetFromChannelResult Union Type in GraphQL\nDESCRIPTION: GraphQL union type that represents possible outcomes when removing a facet from a channel. It can return either a Facet or FacetInUseError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_160\n\nLANGUAGE: graphql\nCODE:\n```\nunion RemoveFacetFromChannelResult = Facet | FacetInUseError\n```\n\n----------------------------------------\n\nTITLE: Defining EntityCustomFields Type in GraphQL\nDESCRIPTION: Defines a type representing custom fields for a specific entity, containing the entity name and an array of custom field configurations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_62\n\nLANGUAGE: graphql\nCODE:\n```\ntype EntityCustomFields {\n  entityName: String!\n  customFields: [CustomFieldConfig!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sentry Error Handling with GraphQL Mutation (GraphQL)\nDESCRIPTION: Shows how to trigger a test error in the Vendure Admin API using the createTestError mutation, which is made available if includeErrorTestMutation is enabled in the plugin config. By specifying an errorType argument, the mutation generates a test error that should be reported to Sentry. This allows developers to verify Sentry integration without causing real failures. The mutation input is the desired error type; output is a triggered error recorded in Sentry.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/sentry-plugin/index.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateTestError {\n    createTestError(errorType: DATABASE_ERROR)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Banner Mutation Resolver\nDESCRIPTION: Demonstrates implementation of a GraphQL mutation resolver with permission checks and transaction handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Mutation, Resolver } from '@nestjs/graphql';\nimport { Allow, Ctx, RequestContext, Permission, Transaction } from '@vendure/core';\nimport { BannerService } from '../services/banner.service.ts';\n\n@Resolver()\nclass BannerAdminResolver {\n    constructor(private bannerService: BannerService) {}\n\n    @Allow(Permission.UpdateSettings)\n    @Transaction()\n    @Mutation()\n    setBannerText(@Ctx() ctx: RequestContext, @Args() args: { locationId: string; text: string; }) {\n        return this.bannerService.setBannerText(ctx, args.locationId, args.text);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SharpAssetPreviewStrategy Class Definition\nDESCRIPTION: Class definition showing the constructor and generatePreviewImage method signatures for the SharpAssetPreviewStrategy class.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/sharp-asset-preview-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass SharpAssetPreviewStrategy implements AssetPreviewStrategy {\n    constructor(config?: SharpAssetPreviewConfig)\n    generatePreviewImage(ctx: RequestContext, mimeType: string, data: Buffer) => Promise<Buffer>;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Stock Locations from Channel Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to remove StockLocations from a specified Channel. Takes a RemoveStockLocationsFromChannelInput and returns an array of StockLocation objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_90\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeStockLocationsFromChannel(input: RemoveStockLocationsFromChannelInput!): [StockLocation!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddManualPaymentToOrderResult Union in GraphQL\nDESCRIPTION: The `AddManualPaymentToOrderResult` union type in GraphQL indicates the outcome of adding a manual payment to an order. It can either return an `Order` object or a `ManualPaymentStateError`. This definition helps in anticipating the result of a manual payment operation in the Vendure API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion AddManualPaymentToOrderResult = Order | ManualPaymentStateError\n```\n\n----------------------------------------\n\nTITLE: Defining CouponCodeExpiredError GraphQL Object Type\nDESCRIPTION: Defines the CouponCodeExpiredError type, which is returned when a provided coupon code has expired.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_36\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype CouponCodeExpiredError {\n  errorCode: ErrorCode!\n  message: String!\n  couponCode: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateTaxCategoryInput GraphQL Input Type\nDESCRIPTION: GraphQL input type for updating a tax category. Requires an ID and accepts optional fields for name, isDefault flag, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_202\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateTaxCategoryInput {\n  id: ID!\n  name: String\n  isDefault: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Address - CreateAddressInput Input - GraphQL\nDESCRIPTION: The CreateAddressInput input type enables clients to specify all required fields for creating an Address in Vendure. It includes parameters for personal and address details, as well as booleans to indicate whether the address is the default for shipping or billing. The countryCode must match a valid Country code defined on the server, or the operation will fail; customFields allow for extendable properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_39\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nInput used to create an Address.\n\nThe countryCode must correspond to a code property of a Country that has been defined in the\nVendure server. The code property is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc.\nIf an invalid code is passed, the mutation will fail.\n\"\"\"\ninput CreateAddressInput {\n  fullName: String\n  company: String\n  streetLine1: String!\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  countryCode: String!\n  phoneNumber: String\n  defaultShippingAddress: Boolean\n  defaultBillingAddress: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderState Type in TypeScript for Vendure\nDESCRIPTION: Defines the OrderState type which includes default states and allows for custom states. It can be extended using OrderOptions and defaultOrderProcess.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype OrderState = | 'Created'\n    | 'Draft'\n    | 'AddingItems'\n    | 'Cancelled'\n    | keyof CustomOrderStates\n    | keyof OrderStates\n```\n\n----------------------------------------\n\nTITLE: Defining CustomDetailComponentConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the CustomDetailComponentConfig interface, which is used to configure custom detail components in the Vendure admin UI. It specifies the location, component, and optional providers for the custom component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/custom-detail-component-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomDetailComponentConfig {\n    locationId: CustomDetailComponentLocationId;\n    component: Type<CustomDetailComponent>;\n    providers?: Provider[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BulkActionLocationId Type in TypeScript\nDESCRIPTION: Specifies valid locations for bulk actions in the admin UI, including various list views and a string type for custom locations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/bulk-action.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype BulkActionLocationId = | 'product-list'\n    | 'facet-list'\n    | 'collection-list'\n    | 'customer-list'\n    | 'customer-group-list'\n    | 'customer-group-members-list'\n    | 'customer-group-members-picker-list'\n    | 'promotion-list'\n    | 'seller-list'\n    | 'channel-list'\n    | 'administrator-list'\n    | 'role-list'\n    | 'shipping-method-list'\n    | 'stock-location-list'\n    | 'payment-method-list'\n    | 'tax-category-list'\n    | 'tax-rate-list'\n    | 'zone-list'\n    | 'zone-members-list'\n    | string\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure EmailPlugin via npm - Shell\nDESCRIPTION: This shell command installs the @vendure/email-plugin package using npm. This dependency must be added to your project to enable email functionality based on Vendure events. Ensure that npm is installed and you are in the correct directory for your project.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/email-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/email-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionTranslation GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductOptionTranslation, including its properties such as id, createdAt, updatedAt, languageCode, and name. It represents the translated data for a product option.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_93\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductOptionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Vendure Pipes Documentation\nDESCRIPTION: This code snippet defines metadata for the Vendure pipes documentation page, including the title, default index status, and generation flag.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n---\ntitle: \"Pipes\"\nisDefaultIndex: true\ngenerated: true\n---\n```\n\n----------------------------------------\n\nTITLE: Defining RoleEvent Class in TypeScript\nDESCRIPTION: This code defines the RoleEvent class, introduced in version 1.4, which is fired whenever a Role is added, updated, or deleted. It extends VendureEntityEvent and includes a constructor with context, entity, type, and optional input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nclass RoleEvent extends VendureEntityEvent<Role, RoleInputTypes> {\n    constructor(ctx: RequestContext, entity: Role, type: 'created' | 'updated' | 'deleted', input?: RoleInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Shipping Methods from Channel Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to remove ShippingMethods from a specified Channel. Takes a RemoveShippingMethodsFromChannelInput and returns an array of ShippingMethod objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_89\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeShippingMethodsFromChannel(input: RemoveShippingMethodsFromChannelInput!): [ShippingMethod!]!\n}\n```\n\n----------------------------------------\n\nTITLE: FacetValueSelectorComponent Class Definition\nDESCRIPTION: TypeScript class definition for FacetValueSelectorComponent. It shows the class structure, properties, and methods, including input/output decorators and lifecycle hooks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/facet-value-selector-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FacetValueSelectorComponent implements OnInit, OnDestroy, ControlValueAccessor {\n    @Output() selectedValuesChange = new EventEmitter<FacetValueFragment[]>();\n    @Input() readonly = false;\n    @Input() transformControlValueAccessorValue: (value: FacetValueFragment[]) => any[] = value => value;\n    searchInput$ = new Subject<string>();\n    searchLoading = false;\n    searchResults$: Observable<FacetValueFragment[]>;\n    selectedIds$ = new Subject<string[]>();\n    onChangeFn: (val: any) => void;\n    onTouchFn: () => void;\n    disabled = false;\n    value: Array<string | FacetValueFragment>;\n    constructor(dataService: DataService, changeDetectorRef: ChangeDetectorRef)\n    ngOnInit() => void;\n    ngOnDestroy() => ;\n    onChange(selected: FacetValueFragment[]) => ;\n    registerOnChange(fn: any) => ;\n    registerOnTouched(fn: any) => ;\n    setDisabledState(isDisabled: boolean) => void;\n    focus() => ;\n    writeValue(obj: string | FacetValueFragment[] | Array<string | number> | null) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateFacetValueInput in GraphQL\nDESCRIPTION: Input type for updating a facet value in Vendure. Requires an ID and allows changing the code, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_184\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateFacetValueInput {\n  id: ID!\n  code: String\n  translations: [FacetValueTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateRoleInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating a user role in the system. Includes fields for code, description, permissions, and channel assignments, with ID being the only required field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_197\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateRoleInput {\n  id: ID!\n  code: String\n  description: String\n  permissions: [Permission!]\n  channelIds: [ID!]\n}\n```\n\n----------------------------------------\n\nTITLE: ImportParser Class Definition in TypeScript\nDESCRIPTION: The ImportParser class signature showing the parseProducts method that validates and parses CSV files into a structured format for creating entities in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ImportParser {\n    parseProducts(input: string | Stream, mainLanguage: LanguageCode = this.configService.defaultLanguageCode) => Promise<ParseResult<ParsedProductWithVariants>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelPaymentResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the object returned by the CancelPaymentFn when the payment has been successfully cancelled. It includes properties for success status and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CancelPaymentResult {\n    success: true;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserInputError Class in TypeScript\nDESCRIPTION: This class is used to encapsulate errors related to user input, extending I18nError. It constructs with a message and optional variables, focusing on communicating input-related issues back to the user.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserInputError extends I18nError {\n    constructor(message: string, variables: { [key: string]: string | number } = {})\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Customer Groups with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CustomerGroupListOptions GraphQL input type used for paginating, sorting, and filtering customer group lists in Vendure. It supports pagination with skip and take parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_71\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerGroupListOptions {\n\"\"\"\nSkips the first n results, for use in pagination\n\"\"\"\nskip: Int\n\n\"\"\"\nTakes n results, for use in pagination\n\"\"\"\ntake: Int\n\n\"\"\"\nSpecifies which properties to sort the results by\n\"\"\"\nsort: CustomerGroupSortParameter\n\n\"\"\"\nAllows the results to be filtered\n\"\"\"\nfilter: CustomerGroupFilterParameter\n\n\"\"\"\nSpecifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n\"\"\"\nfilterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageLocationId Type in TypeScript for Vendure Admin UI\nDESCRIPTION: A TypeScript type definition that enumerates all valid location IDs where components can be registered in the Vendure admin UI. These locations represent different pages and sections of the admin interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/page-location-id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PageLocationId = | 'administrator-detail'\n    | 'administrator-list'\n    | 'asset-detail'\n    | 'asset-list'\n    | 'channel-detail'\n    | 'channel-list'\n    | 'collection-detail'\n    | 'collection-list'\n    | 'country-detail'\n    | 'country-list'\n    | 'customer-detail'\n    | 'customer-list'\n    | 'customer-group-list'\n    | 'customer-group-detail'\n    | 'draft-order-detail'\n    | 'facet-detail'\n    | 'facet-list'\n    | 'global-setting-detail'\n    | 'system-status'\n    | 'job-list'\n    | 'order-detail'\n    | 'order-list'\n    | 'modify-order'\n    | 'payment-method-detail'\n    | 'payment-method-list'\n    | 'product-detail'\n    | 'product-list'\n    | 'product-variant-detail'\n    | 'product-variant-list'\n    | 'profile'\n    | 'promotion-detail'\n    | 'promotion-list'\n    | 'role-detail'\n    | 'role-list'\n    | 'seller-detail'\n    | 'seller-list'\n    | 'shipping-method-detail'\n    | 'shipping-method-list'\n    | 'stock-location-detail'\n    | 'stock-location-list'\n    | 'tax-category-detail'\n    | 'tax-category-list'\n    | 'tax-rate-detail'\n    | 'tax-rate-list'\n    | 'zone-detail'\n    | 'zone-list'\n```\n\n----------------------------------------\n\nTITLE: Moving a Collection by ID and Position - GraphQL\nDESCRIPTION: Defines the input required to move a collection to a different position or parent in the catalog tree. Requires collectionId, new parentId, and target index, all mandatory fields. Used by mutations that reorganize hierarchical catalog data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_104\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput MoveCollectionInput {\n  collectionId: ID!\n  parentId: ID!\n  index: Int!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TemplateLoader in TypeScript\nDESCRIPTION: Example of creating a custom TemplateLoader implementation for the Vendure EmailPlugin. It demonstrates how to define a custom loader and configure it in the EmailPlugin initialization.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/template-loader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmailPlugin, TemplateLoader } from '@vendure/email-plugin';\n\nclass MyTemplateLoader implements TemplateLoader {\n     loadTemplate(injector, ctx, { type, templateName }){\n         return myCustomTemplateFunction(ctx);\n     }\n}\n\n// In vendure-config.ts:\n...\nEmailPlugin.init({\n    templateLoader: new MyTemplateLoader()\n    ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueFilterParameter Input Type\nDESCRIPTION: Input type for complex filtering of facet values with multiple operators and nested AND/OR conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_87\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  facetId: IDOperators\n  name: StringOperators\n  code: StringOperators\n  _and: [FacetValueFilterParameter!]\n  _or: [FacetValueFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CalculateTaxLinesArgs Interface in TypeScript\nDESCRIPTION: This snippet defines the CalculateTaxLinesArgs interface, which specifies the arguments passed to the calculate method of TaxLineCalculationStrategy. It includes context, order, order line, and applicable tax rate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/tax-line-calculation-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CalculateTaxLinesArgs {\n    ctx: RequestContext;\n    order: Order;\n    orderLine: OrderLine;\n    applicableTaxRate: TaxRate;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailDetails Interface in TypeScript\nDESCRIPTION: Defines the structure for final email content including recipient, subject, body and attachments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmailDetails<Type extends 'serialized' | 'unserialized' = 'unserialized'> {\n    from: string;\n    recipient: string;\n    subject: string;\n    body: string;\n    attachments: Array<Type extends 'serialized' ? SerializedAttachment : Attachment>;\n    cc?: string;\n    bcc?: string;\n    replyTo?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobUpdateOptions Interface in TypeScript\nDESCRIPTION: Interface for configuring job update behavior with options for poll interval, timeout duration, and error handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype JobUpdateOptions = {\n    pollInterval?: number;\n    timeoutMs?: number;\n    errorOnFail?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Notes in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing customer note in the system. Requires an UpdateCustomerNoteInput object and returns a HistoryEntry representing the updated note.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_115\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateCustomerNote(input: UpdateCustomerNoteInput!): HistoryEntry!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTimeStructFieldConfig Type in GraphQL\nDESCRIPTION: Defines a configuration type for datetime fields that follows HTML datetime-local input validation formats. Includes fields for name, type, list status, localized labels and descriptions, and validation constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_32\n\nLANGUAGE: graphql\nCODE:\n```\ntype DateTimeStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  min: String\n  max: String\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the VendureWorker Class Signature in TypeScript\nDESCRIPTION: This TypeScript snippet defines the class signature for `VendureWorker`. It shows the public `app` property holding the `INestApplicationContext`, the constructor taking this context, and methods `startJobQueue` and `startHealthCheckServer` which return Promises resolving to the `VendureWorker` instance. The class is central to managing worker processes in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/worker/vendure-worker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VendureWorker {\n    public app: INestApplicationContext;\n    constructor(app: INestApplicationContext)\n    startJobQueue() => Promise<VendureWorker>;\n    startHealthCheckServer(healthCheckConfig: WorkerHealthCheckConfig) => Promise<VendureWorker>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRefundResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the object returned by the CreateRefundFn. It includes properties for refund state, transaction ID, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateRefundResult {\n    state: RefundState;\n    transactionId?: string;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockMovementList Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StockMovementList, which represents a paginated list of stock movement items. It provides both the items in the current page and the total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_191\n\nLANGUAGE: graphql\nCODE:\n```\ntype StockMovementList {\n  items: [StockMovementItem!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoActiveOrderError GraphQL Object Type\nDESCRIPTION: Defines the NoActiveOrderError object type for cases where a mutation is invoked that depends on an active Order, but none exists in the current session.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_108\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned when invoking a mutation which depends on there being an active Order on the\ncurrent session.\"\"\"\ntype NoActiveOrderError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Shipping Line Assignment - TypeScript Implementation\nDESCRIPTION: Implementation of ShippingLineAssignmentStrategy to assign shipping lines to correct order lines based on seller channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MultivendorShippingLineAssignmentStrategy implements ShippingLineAssignmentStrategy {\n  // other properties omitted for brevity   \n    \n  async assignShippingLineToOrderLines(ctx: RequestContext, shippingLine: ShippingLine, order: Order) {\n    // First we need to ensure the required relations are available\n    // to work with.\n    const defaultChannel = await this.channelService.getDefaultChannel();\n    await this.entityHydrator.hydrate(ctx, shippingLine, { relations: ['shippingMethod.channels'] });\n    const { channels } = shippingLine.shippingMethod;\n  \n    // We assume that, if a ShippingMethod is assigned to exactly 2 Channels,\n    // then one is the default Channel and the other is the seller's Channel.\n    if (channels.length === 2) {\n      const sellerChannel = channels.find(c => !idsAreEqual(c.id, defaultChannel.id));\n      if (sellerChannel) {\n        // Once we have established the seller's Channel, we can filter the OrderLines\n        // that belong to that Channel. The `sellerChannelId` was previously established\n        // in the `OrderSellerStrategy.setOrderLineSellerChannel()` method.\n        return order.lines.filter(line => idsAreEqual(line.sellerChannelId, sellerChannel.id));\n      }\n    }\n    return order.lines;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomFieldConfig GraphQL Union in Vendure Shop API\nDESCRIPTION: Defines the `CustomFieldConfig` union type. This allows a field representing custom field configuration to resolve to one of several specific configuration types (e.g., `StringCustomFieldConfig`, `IntCustomFieldConfig`, `DateTimeCustomFieldConfig`, etc.), depending on the actual type of the custom field being configured.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\nunion CustomFieldConfig =\n  StringCustomFieldConfig | LocaleStringCustomFieldConfig | IntCustomFieldConfig | FloatCustomFieldConfig | BooleanCustomFieldConfig | DateTimeCustomFieldConfig | RelationCustomFieldConfig | TextCustomFieldConfig | LocaleTextCustomFieldConfig | StructCustomFieldConfig\n```\n\n----------------------------------------\n\nTITLE: Defining ProductListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for paginating, sorting, and filtering product lists. It includes options for skip, take, sort, filter, and filterOperator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductListOptions {\n  skip: Int\n  take: Int\n  sort: ProductSortParameter\n  filter: ProductFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateProductVariantPriceInput GraphQL Input Type Definition\nDESCRIPTION: Defines the input type for updating the price of a ProductVariant in a particular currency. Supports price deletion with the delete flag and includes custom fields support.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_194\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUsed to set up update the price of a ProductVariant in a particular Channel.\n\nIf the `delete` flag is `true`, the price will be deleted for the given Channel.\n\"\"\"\ninput UpdateProductVariantPriceInput {\n  currencyCode: CurrencyCode!\n  price: Money!\n  delete: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NativeAuthenticationResult GraphQL Union Type\nDESCRIPTION: Defines the NativeAuthenticationResult union type, which can be one of several possible types representing the result of native authentication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_106\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion NativeAuthenticationResult =\n  CurrentUser | InvalidCredentialsError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAddressInput for Address Creation in GraphQL\nDESCRIPTION: This GraphQL input type defines the structure for creating a new address in the Vendure e-commerce platform. It includes fields for address details, with required fields marked with an exclamation mark. The countryCode must correspond to a valid country code defined in the Vendure server.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateAddressInput {\n  fullName: String\n  company: String\n  streetLine1: String!\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  countryCode: String!\n  phoneNumber: String\n  defaultShippingAddress: Boolean\n  defaultBillingAddress: Boolean\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pending Search Index Updates Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to execute pending search index updates. Returns a Success object indicating operation status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_91\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  runPendingSearchIndexUpdates: Success!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOrderNoteInput in GraphQL\nDESCRIPTION: Input type for updating an order note in Vendure. Requires a noteId to identify the note and allows updating the note content and visibility.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_188\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateOrderNoteInput {\n  noteId: ID!\n  note: String\n  isPublic: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Address in TypeScript\nDESCRIPTION: Updates an existing Address entity based on the provided input data, which should include the address ID. Requires the request context and the update details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nupdateAddress(ctx: RequestContext, input: UpdateAddressInput) => Promise<Address>\n```\n\n----------------------------------------\n\nTITLE: Example Price Range Buckets in Search Results (GraphQL/JSON)\nDESCRIPTION: Shows an example snippet from a Vendure search query result (typically returned as JSON), illustrating how the `priceRange.buckets` are structured when `priceRangeBucketInterval` is configured (e.g., to 2000, meaning $20.00). Each bucket contains the upper bound (`to`) and the count of items within that price range.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"search\": {\n      \"totalItems\": 32,\n      \"priceRange\": {\n        \"buckets\": [\n          {\n            \"to\": 2000,\n            \"count\": 21\n          },\n          {\n            \"to\": 4000,\n            \"count\": 7\n          },\n          {\n            \"to\": 6000,\n            \"count\": 3\n          },\n          {\n            \"to\": 12000,\n            \"count\": 1\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Scalar Type in GraphQL\nDESCRIPTION: A GraphQL scalar type definition for String, which represents UTF-8 character sequences used for free-form human-readable text.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_192\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\n\"\"\"\nscalar String\n```\n\n----------------------------------------\n\nTITLE: Defining OnTransitionStartFn Type in TypeScript\nDESCRIPTION: The OnTransitionStartFn type defines a function signature for handlers called before a transition takes place. It can return a boolean, string, void, or a Promise/Observable of these types to control the transition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/state-machine-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype OnTransitionStartFn<T extends string, Data> = (\n    fromState: T,\n    toState: T,\n    data: Data,\n) => boolean | string | void | Promise<boolean | string | void> | Observable<boolean | string | void>\n```\n\n----------------------------------------\n\nTITLE: CreateFulfillmentFn Type Alias Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the CreateFulfillmentFn type alias. This defines the function signature for the `createFulfillment` method within FulfillmentHandlerConfig. It takes the RequestContext, Orders, OrderLine inputs, and configured arguments, returning (or promising) a CreateFulfillmentResult object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-handler.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype CreateFulfillmentFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    orders: Order[],\n    lines: OrderLineInput[],\n    args: ConfigArgValues<T>,\n) => CreateFulfillmentResult | Promise<CreateFulfillmentResult>\n```\n\n----------------------------------------\n\nTITLE: Creating React Data Table Component in TypeScript\nDESCRIPTION: Example of creating a React component that renders a linked slug in a data table. The component receives rowItem props containing the data for that table row.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-data-table-component.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactDataTableComponentProps } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function SlugWithLink({ rowItem }: ReactDataTableComponentProps<{ slug: string }>) {\n    return (\n        <a href={`https://example.com/products/${rowItem.slug}`} target=\"_blank\">\n            {rowItem.slug}\n        </a>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CustomColumnComponent Interface in TypeScript for Vendure Admin UI\nDESCRIPTION: Interface declaration for components that render custom cells in data tables. It requires implementing the rowItem property which contains the data object for the current row, such as a Product object in a product list table.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-table-components/custom-column-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomColumnComponent {\n    rowItem: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Sentry Plugin Using npm (Shell)\nDESCRIPTION: Executes an npm command to install the @vendure/sentry-plugin package as a dependency in your Vendure project directory. This is required before configuring or using the Sentry Plugin for Vendure. The command downloads and adds the package to your node_modules folder and records it in your package.json file under dependencies or devDependencies, depending on usage. Ensure npm is installed and run the command within your project root directory.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/sentry-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/sentry-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodQuote GraphQL Object Type\nDESCRIPTION: GraphQL type definition for ShippingMethodQuote which represents a shipping method quote with pricing information, identification, and metadata. This type is used in the shop API to provide shipping options to customers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_126\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethodQuote {\nid: ID!\nprice: Money!\npriceWithTax: Money!\ncode: String!\nname: String!\ndescription: String!\n\"\"\"\nAny optional metadata returned by the ShippingCalculator in the ShippingCalculationResult\n\"\"\"\nmetadata: JSON\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Form Component IDs in TypeScript\nDESCRIPTION: Type definition that enumerates all the built-in form input components available in the Vendure Admin UI. These components cover common input types like boolean, currency, date, number, text, and specialized inputs for products, facets, and customer groups.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/default-form-component-id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultFormComponentId = | 'boolean-form-input'\n    | 'currency-form-input'\n    | 'customer-group-form-input'\n    | 'date-form-input'\n    | 'facet-value-form-input'\n    | 'json-editor-form-input'\n    | 'html-editor-form-input'\n    | 'number-form-input'\n    | 'password-form-input'\n    | 'product-selector-form-input'\n    | 'relation-form-input'\n    | 'rich-text-form-input'\n    | 'select-form-input'\n    | 'text-form-input'\n    | 'textarea-form-input'\n    | 'product-multi-form-input'\n    | 'combination-mode-form-input'\n    | 'struct-form-input'\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionOptions Interface in TypeScript\nDESCRIPTION: Interface defining the configuration options for promotions in Vendure. It includes arrays for promotion conditions and actions that can be used to construct promotional rules.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionOptions {\n    promotionConditions?: Array<PromotionCondition<any>>;\n    promotionActions?: Array<PromotionAction<any>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Card Implementation in React Components\nDESCRIPTION: React component implementation of the card component using Vendure Admin UI Card component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Card } from '@vendure/admin-ui/react';\n\nexport function DemoComponent() {\n    return (\n        <Card title=\"Card\">\n            This is a card. On a detail page, content should usually be placed inside a card.\n        </Card>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProvinceList Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the ProvinceList entity, representing a paginated list of provinces with total item count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_102\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProvinceList {\n  items: [Province!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOrderAddressInput in GraphQL\nDESCRIPTION: Input type for updating an order address in Vendure. Includes fields for all address components like name, street, city, and contact information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_186\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateOrderAddressInput {\n  fullName: String\n  company: String\n  streetLine1: String\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  countryCode: String\n  phoneNumber: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddFulfillmentToOrderResult Union in GraphQL\nDESCRIPTION: The `AddFulfillmentToOrderResult` is a GraphQL union type used to represent the possible outcomes of adding a fulfillment to an order in Vendure. It may return a `Fulfillment` object or one of several error types, such as `EmptyOrderLineSelectionError` or `InsufficientStockOnHandError`. Understanding these potential results is crucial for handling API responses correctly.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion AddFulfillmentToOrderResult = Fulfillment | EmptyOrderLineSelectionError | ItemsAlreadyFulfilledError | InsufficientStockOnHandError | InvalidFulfillmentHandlerError | FulfillmentStateTransitionError | CreateFulfillmentError\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelList GraphQL Object Type\nDESCRIPTION: Defines the ChannelList object type which contains an array of Channel items and the total number of items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ntype ChannelList {\n  items: [Channel!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SharpAssetPreviewStrategy with Custom Options\nDESCRIPTION: Example showing how to initialize the AssetServerPlugin with custom Sharp preview settings for different image formats.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/sharp-asset-preview-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nAssetServerPlugin.init({\n  previewStrategy: new SharpAssetPreviewStrategy({\n    jpegOptions: { quality: 95 },\n    webpOptions: { quality: 95 },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Importer Class Signature in TypeScript\nDESCRIPTION: Core signature of the Importer class showing its main methods for parsing and importing products, processing facet values, and handling custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/importer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Importer {\n    parseAndImport(input: string | Stream, ctxOrLanguageCode: RequestContext | LanguageCode, reportProgress: boolean = false) => Observable<ImportProgress>;\n    importProducts(ctx: RequestContext, rows: ParsedProductWithVariants[], onProgress: OnProgressFn) => Promise<string[]>;\n    getFacetValueIds(ctx: RequestContext, facets: ParsedFacet[], languageCode: LanguageCode) => Promise<ID[]>;\n    processCustomFieldValues(customFields: { [field: string]: string }, config: CustomFieldConfig[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: OrderStateLabelComponent Class Definition\nDESCRIPTION: TypeScript class definition of the OrderStateLabelComponent. It includes an input property for the state value and a chipColorType property that determines the visual appearance of the state chip.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/order-state-label-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass OrderStateLabelComponent {\n    @Input() state: string;\n    chipColorType: void\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Tag in GraphQL\nDESCRIPTION: This mutation type is used to update an existing Tag. It requires a UpdateTagInput object and returns the updated Tag object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_133\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateTag(input: UpdateTagInput!): Tag!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerSortParameter for Customer Sorting in GraphQL\nDESCRIPTION: This GraphQL input type defines the sorting parameters for customer queries in Vendure. It allows sorting customers by various fields like id, names, creation date, and email address using the SortOrder enum to specify ascending or descending order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  title: SortOrder\n  firstName: SortOrder\n  lastName: SortOrder\n  phoneNumber: SortOrder\n  emailAddress: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BigIntMoneyStrategy in Vendure\nDESCRIPTION: Example of configuring Vendure to use the BigIntMoneyStrategy, which stores monetary values as bigint data type to allow for much larger monetary amounts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig, BigIntMoneyStrategy } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    entityOptions: {\n        moneyStrategy: new BigIntMoneyStrategy(),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Order Type Enum (GraphQL, GraphQL)\nDESCRIPTION: Defines an OrderType enum with values Regular, Seller, and Aggregate, indicating what type of order object is being dealt with in queries or mutations (such as for filtering or displaying order data). This enum aids in result filtering and display logic throughout the Vendure API. Used wherever context-specific order type distinctions are required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum OrderType {\nRegular\nSeller\nAggregate\n}\n```\n\n----------------------------------------\n\nTITLE: Updating setOrderShippingMethod Mutation in GraphQL\nDESCRIPTION: This change modifies the setOrderShippingMethod mutation to accept an array of shipping method IDs instead of a single ID, enabling support for multiple shipping methods per Order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/storefront-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-mutation setOrderShippingMethod($shippingMethodId: ID!) {\n+mutation setOrderShippingMethod($shippingMethodId: [ID!]!) {\n  setOrderShippingMethod(shippingMethodId: $shippingMethodId) {\n    # ... etc\n  }\n} \n```\n\n----------------------------------------\n\nTITLE: Defining TaxCategory Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tax categories in the e-commerce system. Contains fields for identification, timestamps, name, default status flag, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_139\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxCategory {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  isDefault: Boolean!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueTranslationInput Input Type\nDESCRIPTION: Input type for facet value translations with language code, name and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_90\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating Custom Field Relations\nDESCRIPTION: Example of using EntityHydrator to hydrate custom field relations on a Customer entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/entity-hydrator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await this.customerService\n  .findOne(ctx, id);\n\nawait this.entityHydrator\n  .hydrate(ctx, customer, { relations: ['customFields.avatar' ]});\n```\n\n----------------------------------------\n\nTITLE: Implementing FormField Component in React\nDESCRIPTION: This example demonstrates how to use the FormField component from the Vendure Admin UI in a React component. It wraps an input field with a label, tooltip, and potential error message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/form-field.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FormField } from '@vendure/admin-ui/react';\n\nexport function MyReactComponent() {\n    return (\n       <FormField label=\"My field\" tooltip=\"This is a tooltip\" invalid errorMessage=\"This field is invalid\">\n           <input type=\"text\" />\n       </FormField>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobUpdate Type in TypeScript\nDESCRIPTION: Type definition for job status updates, containing subset of Job properties including id, state, progress, result, error and data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype JobUpdate<T extends JobData<T>> = Pick<Job<T>, 'id' | 'state' | 'progress' | 'result' | 'error' | 'data'>\n```\n\n----------------------------------------\n\nTITLE: Implementing HistoryEntry Event Class in TypeScript\nDESCRIPTION: Event class for HistoryEntry operations. Extends VendureEntityEvent and includes history type information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclass HistoryEntryEvent extends VendureEntityEvent<HistoryEntry, HistoryInput> {\n    public readonly historyType: 'order' | 'customer' | string;\n    constructor(ctx: RequestContext, entity: HistoryEntry, type: 'created' | 'updated' | 'deleted', historyType: 'order' | 'customer' | string, input?: HistoryInput)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogicalOperator Enum in GraphQL\nDESCRIPTION: Defines the `LogicalOperator` enum in GraphQL with two possible values: `AND` and `OR`. This enum is typically used in filter arguments or conditional logic within GraphQL queries or mutations to specify how multiple conditions should be combined.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nenum LogicalOperator {\n  AND\n  OR\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the createZone Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createZone` mutation for creating a new Zone. It accepts a non-nullable `CreateZoneInput` object containing the zone information and returns the newly created `Zone` object, which cannot be null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new Zone\n\"\"\"\ntype Mutation {\n  createZone(input: CreateZoneInput!): Zone!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductSortParameter Input Type in GraphQL\nDESCRIPTION: This input type specifies the sorting options for product queries. It allows sorting by various fields such as id, createdAt, updatedAt, name, slug, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_38\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  slug: SortOrder\n  description: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Using isGraphQlErrorResult to Handle Order State Transitions in TypeScript\nDESCRIPTION: Demonstrates how to use the `isGraphQlErrorResult` type guard to check the result of `orderService.transitionToState`. If the result is a GraphQL error (`GraphQLErrorResult`), it's thrown; otherwise, the code proceeds with the successful `Order` result, leveraging TypeScript's type inference to narrow down the `ErrorResultUnion` type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/is-graph-ql-error-result.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { isGraphQlErrorResult } from '@vendure/core';\n\n// ...\n\nconst transitionResult = await this.orderService.transitionToState(ctx, order.id, newState);\nif (isGraphQlErrorResult(transitionResult)) {\n    // The transition failed with an ErrorResult\n    throw transitionResult;\n} else {\n    // TypeScript will correctly infer the type of `transitionResult` to be `Order`\n    return transitionResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateOperators Input Type in GraphQL\nDESCRIPTION: Specifies operators for filtering on a DateTime field. Supports equality, before, after, between, and null checks for date-based filtering in queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_76\n\nLANGUAGE: graphql\nCODE:\n```\ninput DateOperators {\n  eq: DateTime\n  before: DateTime\n  after: DateTime\n  between: DateRange\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using PageBlock Component in TypeScript React\nDESCRIPTION: This snippet demonstrates how to import the PageBlock component from the Vendure admin UI package and use it in a React component. The PageBlock serves as a wrapper for content, ensuring consistent layout.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/page-block.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PageBlock } from '@vendure/admin-ui/react';\n\nexport function MyComponent() {\n  return (\n    <PageBlock>\n      ...\n    </PageBlock>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HardenPlugin with Custom Complexity Factors\nDESCRIPTION: This example demonstrates how to initialize the HardenPlugin with custom complexity factors. It sets a maximum query complexity and increases the complexity weight of a specific field on the ProductVariant type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/harden-plugin-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nHardenPlugin.init({\n  maxQueryComplexity: 650,\n  customComplexityFactors: {\n    'ProductVariant.stockLocations': 10\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing Injector Connection Retrieval in Vendure TypeScript\nDESCRIPTION: Details the deprecation of `Injector.getConnection()` for retrieving database connections in Vendure's TypeScript API. The correct approach, effective from v1.0.0, is to use dependency injection via `Injector.get(TransactionalConnection)` to obtain the TransactionalConnection instance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nInjector.getConnection()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nInjector.get(TransactionalConnection)\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer Address in GraphQL for Vendure\nDESCRIPTION: This mutation creates a new Address and associates it with a specified Customer. It requires a customer ID and a CreateAddressInput object, returning an Address object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createCustomerAddress(customerId: ID!, input: CreateAddressInput!): Address!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RoleList Object Type in GraphQL\nDESCRIPTION: GraphQL object type that represents a paginated list of Roles. Contains an array of Role items and the total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_165\n\nLANGUAGE: graphql\nCODE:\n```\ntype RoleList {\n  items: [Role!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordResetTokenExpiredError Type in GraphQL\nDESCRIPTION: The PasswordResetTokenExpiredError type indicates an expired password reset token based on configuration settings. It holds errorCode and message fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_78\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type PasswordResetTokenExpiredError {\\n  errorCode: ErrorCode!\\n  message: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: VendureTranslationResources Interface Definition in TypeScript\nDESCRIPTION: Defines the structure for translation resources in Vendure with properties for different types of translatable content including errors, error results, and messages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/i18n-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface VendureTranslationResources {\n    error: any;\n    errorResult: any;\n    message: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Isolation Level Type Definition\nDESCRIPTION: Type definition for TransactionIsolationLevel, defining the available database transaction isolation levels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/transaction-decorator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype TransactionIsolationLevel = | 'READ UNCOMMITTED'\n    | 'READ COMMITTED'\n    | 'REPEATABLE READ'\n    | 'SERIALIZABLE'\n```\n\n----------------------------------------\n\nTITLE: Defining Success Response Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for simple success responses where no specific information needs to be returned beyond success status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_198\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nIndicates that an operation succeeded, where we do not want to return any more specific information.\n\"\"\"\ntype Success {\nsuccess: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLine Custom Fields in Vendure Config\nDESCRIPTION: Configuration for adding an 'engravingText' string custom field to OrderLine entity with validation for storing engraving text.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/configurable-products/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    customFields: {\n        OrderLine: [\n            {\n                name: 'engravingText',\n                type: 'string',\n                validate: value => {\n                    if (value.length > 100) {\n                        return 'Engraving text must be less than 100 characters';\n                    }\n                },\n                label: [\n                    { languageCode: LanguageCode.en, value: 'Engraving text' },\n                ],\n            },\n        ]\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SetOrderShippingMethodResult Union Type in GraphQL\nDESCRIPTION: Defines a GraphQL union type for the result of setting an order shipping method, which can be one of several possible outcomes or errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_176\n\nLANGUAGE: graphql\nCODE:\n```\nunion SetOrderShippingMethodResult = Order | OrderModificationError | IneligibleShippingMethodError | NoActiveOrderError\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigArg GraphQL Object Type\nDESCRIPTION: Defines the ConfigArg type, which represents a configuration argument with a name and value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_29\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ConfigArg {\n  name: String!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddItemToDraftOrderInput in GraphQL\nDESCRIPTION: Defines the input structure for adding an item to a draft order. It requires the `productVariantId` of the item and the `quantity` to be added.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninput AddItemToDraftOrderInput {\n  productVariantId: ID!\n  quantity: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Long-running Task Implementation with Job Queue\nDESCRIPTION: Modified version of the scheduled task script that uses a job queue for handling long-running tasks asynchronously.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/scheduled-tasks/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker, Logger, RequestContextService } from '@vendure/core';\nimport { SitemapService } from './plugins/sitemap';\n\nimport { config } from './vendure-config';\n\nif (require.main === module) {\n    generateSitemap()\n        .then(() => process.exit(0))\n        .catch(err => {\n            Logger.error(err);\n            process.exit(1);\n        });\n}\n\nasync function generateSitemap() {\n    const { app } = await bootstrapWorker(config);\n    const sitemapService = app.get(SitemapService);\n    const ctx = await app.get(RequestContextService).create({\n        apiType: 'admin',\n    });\n    \n    await sitemapService.triggerGenerate(ctx);\n\n    Logger.info(`Sitemap generation triggered`);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockMovementListOptions Input Type in GraphQL\nDESCRIPTION: Input type for configuring StockMovement queries. It allows specifying the movement type, and pagination parameters (skip and take) for listing stock movements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_156\n\nLANGUAGE: graphql\nCODE:\n```\ninput StockMovementListOptions {\n  type: StockMovementType\n  skip: Int\n  take: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Promotions in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing Promotion. Requires an UpdatePromotionInput object and returns an UpdatePromotionResult with the updated promotion details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_127\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updatePromotion(input: UpdatePromotionInput!): UpdatePromotionResult!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL FacetValue Type Definition\nDESCRIPTION: Defines properties of individual facet values including translations and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_66\n\nLANGUAGE: graphql\nCODE:\n```\ntype FacetValue {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  facet: Facet!\n  facetId: ID!\n  name: String!\n  code: String!\n  translations: [FacetValueTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorRefundInput in GraphQL\nDESCRIPTION: Specifies the input for an administrator initiating a refund. Requires the `paymentId` to refund against. Optionally accepts a `reason` string and an `amount` (Money type, preferred since v2.2.0). Older fields (`lines`, `shipping`, `adjustment`) are deprecated.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ninput AdministratorRefundInput {\n  paymentId: ID!\n  reason: String\n  \"\"\"\n  The amount to be refunded to this particular Payment. This was introduced in\n  v2.2.0 as the preferred way to specify the refund amount. The `lines`, `shipping` and `adjustment`\n  fields will be removed in a future version.\n  \"\"\"\n  amount: Money\n}\n```\n\n----------------------------------------\n\nTITLE: JobListOptions GraphQL Input Type Definition\nDESCRIPTION: Defines options for listing jobs, supporting pagination with skip and take parameters, sorting, filtering, and logical operations between filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_98\n\nLANGUAGE: graphql\nCODE:\n```\ninput JobListOptions {\n\"\"\"\nSkips the first n results, for use in pagination\n\"\"\"\nskip: Int\n\n\"\"\"\nTakes n results, for use in pagination\n\"\"\"\ntake: Int\n\n\"\"\"\nSpecifies which properties to sort the results by\n\"\"\"\nsort: JobSortParameter\n\n\"\"\"\nAllows the results to be filtered\n\"\"\"\nfilter: JobFilterParameter\n\n\"\"\"\nSpecifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n\"\"\"\nfilterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationTokenExpiredError Type in GraphQL\nDESCRIPTION: This type represents an error when a verification token for a customer's email address has expired. It includes an error code and a message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_151\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturned if the verification token (used to verify a Customer's email address) is valid, but has\nexpired according to the `verificationTokenDuration` setting in the AuthOptions.\n\"\"\"\ntype VerificationTokenExpiredError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the OrderModificationLine Entity in TypeScript\nDESCRIPTION: This TypeScript class defines the `OrderModificationLine` entity. It represents a specific line item from an `Order` that has been affected by an `OrderModification`. It extends `OrderLineReference` and establishes a many-to-one relationship with the `OrderModification` entity, storing the `modificationId`. Requires TypeORM decorators (`@Index`, `@ManyToOne`, `@EntityId`) and depends on the `OrderModification` and `OrderLineReference` entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-line-reference.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass OrderModificationLine extends OrderLineReference {\n    constructor(input?: DeepPartial<OrderModificationLine>)\n    @Index()\n    @ManyToOne(type => OrderModification, modification => modification.lines)\n    modification: OrderModification;\n    @EntityId()\n    modificationId: ID;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Function Signature for addNavMenuSection in Vendure Admin UI\nDESCRIPTION: The signature of the addNavMenuSection function shows it accepts a NavMenuSection config object and an optional 'before' string parameter to position the new section before an existing section.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/add-nav-menu-section.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addNavMenuSection(config: NavMenuSection, before?: string): void\n```\n\n----------------------------------------\n\nTITLE: Deleting a Draft Order in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a draft Order that hasn't been placed yet. Takes an Order ID and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_44\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteDraftOrder(orderId: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List\nDESCRIPTION: Imports and renders a DocCardList component that displays documentation cards.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/index.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for pagination, sorting, and filtering of product variant lists. It includes options for skip, take, sort, filter, and filterOperator. Comments provide additional context for each field's purpose.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_125\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: ProductVariantSortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: ProductVariantFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Province Object Type in GraphQL\nDESCRIPTION: Defines the Province GraphQL type representing geographical provinces/states with properties like code, name, and parent region relationships.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_147\n\nLANGUAGE: graphql\nCODE:\n```\ntype Province {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  type: String!\n  name: String!\n  enabled: Boolean!\n  parent: Region\n  parentId: ID\n  translations: [RegionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a single Customer. Takes a Customer ID and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_38\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCustomer(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Role Filter Parameter Definition\nDESCRIPTION: Input type for filtering roles based on various criteria including id, timestamps, code, and description with support for logical operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_138\n\nLANGUAGE: graphql\nCODE:\n```\ninput RoleFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  code: StringOperators\n  description: StringOperators\n  _and: [RoleFilterParameter!]\n  _or: [RoleFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Coupon Code to an Order - Vendure TypeScript\nDESCRIPTION: Applies a coupon code string to an Order, validating against currently active Promotion entities. Takes context, orderId, and couponCode as inputs, and returns a Promise of ErrorResultUnion for ApplyCouponCodeResult or Order. Used to trigger discounts as part of a promotional campaign.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, couponCode: string) => Promise<ErrorResultUnion<ApplyCouponCodeResult, Order>>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateStockLocationInput GraphQL Input Type\nDESCRIPTION: GraphQL input type for updating a stock location entity. Requires an ID and accepts optional fields for name, description, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_200\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateStockLocationInput {\n  id: ID!\n  name: String\n  description: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Using DropdownComponent in HTML Templates\nDESCRIPTION: Example of how to use the DropdownComponent in HTML templates, showing the dropdown structure with a trigger button and menu items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/dropdown-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-dropdown>\n  <button class=\"btn btn-outline\" vdrDropdownTrigger>\n      <clr-icon shape=\"plus\"></clr-icon>\n      Select type\n  </button>\n  <vdr-dropdown-menu vdrPosition=\"bottom-left\">\n    <button\n      *ngFor=\"let typeName of allTypes\"\n      type=\"button\"\n      vdrDropdownItem\n      (click)=\"selectType(typeName)\"\n    >\n      typeName\n    </button>\n  </vdr-dropdown-menu>\n</vdr-dropdown>\n```\n\n----------------------------------------\n\nTITLE: Defining JobBufferSize GraphQL Type\nDESCRIPTION: Defines the `JobBufferSize` GraphQL type. This type represents the current size of a specific job buffer, identified by its `bufferId`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_90\n\nLANGUAGE: graphql\nCODE:\n```\ntype JobBufferSize {\n  bufferId: String!\n  size: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueFilterParameter Input Type in GraphQL\nDESCRIPTION: Provides filtering options for FacetValues, including ID, date, language, facetId, name, and code operators. It also allows for logical AND and OR combinations of filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  facetId: IDOperators\n  name: StringOperators\n  code: StringOperators\n  _and: [FacetValueFilterParameter!]\n  _or: [FacetValueFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: CRUD Permissions Config in Vendure with TypeScript\nDESCRIPTION: This snippet demonstrates integration of a CrudPermissionDefinition, 'wishlist', within the Vendure configuration for managing user authentication. It handles all CRUD operations with designated permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  authOptions: {\n    customPermissions: [wishlist],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Definition Example in TypeScript\nDESCRIPTION: Example showing how to define and use permissions with the ActionBarDropdownMenuItem interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-dropdown-menu-item.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyPermission = new PermissionDefinition('ProductReview');\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelNotFoundError Class in TypeScript\nDESCRIPTION: An error class extending I18nError that is thrown when a specific channel cannot be found by its token. It requires a channel token and is used to indicate the absence of a matching channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelNotFoundError extends I18nError {\n    constructor(token: string)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Migration Documentation\nDESCRIPTION: Import statements for React components used to build the migration documentation page. These components handle member information, generation metadata, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/migration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Querying Collection Filters - GraphQL SDL - GraphQL\nDESCRIPTION: Declares the 'collectionFilters' query, which returns a non-nullable array of ConfigurableOperationDefinition objects. This provides definitions for all filters that collections can be configured with. No parameters are required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  collectionFilters: [ConfigurableOperationDefinition!]!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationMethod GraphQL Object Type in Vendure\nDESCRIPTION: Defines the AuthenticationMethod GraphQL object type which represents an authentication method used in the system. It includes the authentication strategy being used.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype AuthenticationMethod {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  strategy: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a PromotionCondition in TypeScript\nDESCRIPTION: Interface for configuring a PromotionCondition, extending ConfigurableOperationDefOptions with specific properties for promotion condition checking.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-condition.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionConditionConfig<T extends ConfigArgs, C extends string, R extends CheckPromotionConditionResult> extends ConfigurableOperationDefOptions<T> {\n    code: C;\n    check: CheckPromotionConditionFn<T, R>;\n    priorityValue?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AlertContext Interface in TypeScript\nDESCRIPTION: Interface definition for AlertContext which provides access to core services in the Vendure admin UI. It is passed to the check, isAlert, label and action functions of an AlertConfig object, allowing these functions to access the application's services.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/alerts/alert-context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AlertContext {\n    injector: Injector;\n    dataService: DataService;\n    notificationService: NotificationService;\n    modalService: ModalService;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelAware Interface - TypeScript\nDESCRIPTION: The ChannelAware interface must be implemented by entities that can be associated with multiple channels. It requires a property named 'channels' which is an array of Channel objects. No additional dependencies are necessary.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/interfaces.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChannelAware {\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Session Class in TypeScript\nDESCRIPTION: The class 'AnonymousSession' extends the 'Session' class to handle sessions for anonymous users. This extension allows unauthenticated users to interact with restricted operations, such as querying the 'activeOrder' in the Shop API, thereby maintaining session state without the need for a registered account. The main dependency is the existing 'Session' class from the Vendure framework.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/anonymous-session.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AnonymousSession extends Session {\n    constructor(input: DeepPartial<AnonymousSession>)\n}\n```\n\n----------------------------------------\n\nTITLE: EntityDuplicatorConfig Interface Definition\nDESCRIPTION: TypeScript interface defining the configuration options for creating a new EntityDuplicator. It extends ConfigurableOperationDefOptions and includes properties for permissions, target entities, and the duplication function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-duplicator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EntityDuplicatorConfig<T extends ConfigArgs> extends ConfigurableOperationDefOptions<T> {\n    requiresPermission: Array<Permission | string> | Permission | string;\n    forEntities: string[];\n    duplicate: DuplicateEntityFn<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset GraphQL Object Type in Vendure\nDESCRIPTION: Defines the Asset GraphQL object type which represents a media asset in the Vendure system. It includes metadata about the file such as dimensions, file size, MIME type, and focal point.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Asset {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  type: AssetType!\n  fileSize: Int!\n  mimeType: String!\n  width: Int!\n  height: Int!\n  source: String!\n  preview: String!\n  focalPoint: Coordinate\n  tags: [Tag!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Type in GraphQL\nDESCRIPTION: Defines a type representing a discount applied to an order or product. Contains information about the source, type, description, and monetary amounts with and without tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_56\n\nLANGUAGE: graphql\nCODE:\n```\ntype Discount {\n  adjustmentSource: String!\n  type: AdjustmentType!\n  description: String!\n  amount: Money!\n  amountWithTax: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: MolliePlugin Class Signature (TypeScript)\nDESCRIPTION: Defines the structure of the `MolliePlugin` class, including its static `options` property holding the plugin configuration (`MolliePluginOptions`) and the static `init` method used for initializing the plugin instance with these options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/mollie-plugin.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\nclass MolliePlugin {\n    static options: MolliePluginOptions;\n    init(options: MolliePluginOptions) => typeof MolliePlugin;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Entity in TypeScript\nDESCRIPTION: Definition of the ProductRequestTranslation entity that handles individual translations for the ProductRequest entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translateable/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial } from '@vendure/common/lib/shared-types';\nimport { HasCustomFields, Translation, VendureEntity, LanguageCode } from '@vendure/core';\nimport { Column, Entity, Index, ManyToOne } from 'typeorm';\n\nimport { ProductRequest } from './release-note.entity';\n\n@Entity()\nexport class ProductRequestTranslation\n    extends VendureEntity\n    implements Translation<ProductRequest>, HasCustomFields\n{\n    constructor(input?: DeepPartial<Translation<ProductRequestTranslation>>) {\n        super(input);\n    }\n\n    @Column('varchar')\n    languageCode: LanguageCode;\n\n    @Column('varchar')\n    text: string;\n\n    @Index()\n    @ManyToOne(() => ProductRequest, base => base.translations, { onDelete: 'CASCADE' })\n    base: ProductRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAddressInput in GraphQL for Vendure Shop API\nDESCRIPTION: Defines an input type for updating a customer address in the Vendure shop API. The countryCode must match a valid country code defined in the server, typically a 2-character ISO code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_47\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nInput used to update an Address.\n\nThe countryCode must correspond to a `code` property of a Country that has been defined in the\nVendure server. The `code` property is typically a 2-character ISO code such as \"GB\", \"US\", \"DE\" etc.\nIf an invalid code is passed, the mutation will fail.\n\"\"\"\ninput UpdateAddressInput {\nid: ID!\nfullName: String\ncompany: String\nstreetLine1: String\nstreetLine2: String\ncity: String\nprovince: String\npostalCode: String\ncountryCode: String\nphoneNumber: String\ndefaultShippingAddress: Boolean\ndefaultBillingAddress: Boolean\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UseExistingStrategy in TypeScript for Vendure\nDESCRIPTION: A strategy that discards the guest order and uses the existing order as the active order. This strategy implements the OrderMergeStrategy interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/merge-strategies.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass UseExistingStrategy implements OrderMergeStrategy {\n    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using HistoryService to Create Custom HistoryEntry\nDESCRIPTION: Example of using the HistoryService to create a custom HistoryEntry for a customer's tax ID verification.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/history-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// verification.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { RequestContext } from '@vendure/core';\nimport { CUSTOMER_TAX_ID_VERIFICATION } from './types';\n\n@Injectable()\nexport class VerificationService {\n  constructor(private historyService: HistoryService) {}\n\n  async verifyTaxId(ctx: RequestContext, customerId: ID, taxId: string) {\n    const result = await someTaxIdCheckingService(taxId);\n\n    await this.historyService.createHistoryEntryForCustomer({\n      customerId,\n      ctx,\n      type: CUSTOMER_TAX_ID_VERIFICATION,\n      data: {\n        taxId,\n        valid: result.isValid,\n        name: result.companyName,\n        address: result.registeredAddress,\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResultPrice Union GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL union type definition for representing the price of search results. Can be either a price range or a single price, allowing for flexible price representation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_119\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe price of a search result product, either as a range or as a single price\n\"\"\"\nunion SearchResultPrice =\n  PriceRange | SinglePrice\n```\n\n----------------------------------------\n\nTITLE: Updating Seller in GraphQL\nDESCRIPTION: This mutation type allows updating an existing Seller. It takes a UpdateSellerInput object as input and returns the updated Seller object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_130\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateSeller(input: UpdateSellerInput!): Seller!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ProductOptionGroup Entity Class in TypeScript\nDESCRIPTION: This TypeScript class defines the `ProductOptionGroup` entity using TypeORM decorators. It extends `VendureEntity` and implements `Translatable`, `HasCustomFields`, and `SoftDeletable`. Key properties include `deletedAt` for soft deletion, `name` (localized string), `code`, `translations` (one-to-many relation), `options` (one-to-many relation with `ProductOption`), `product` (many-to-one relation), and `customFields`. The class structure supports localized names, custom data fields, and soft deletion capabilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/product-option-group.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\nclass ProductOptionGroup extends VendureEntity implements Translatable, HasCustomFields, SoftDeletable {\n    constructor(input?: DeepPartial<ProductOptionGroup>)\n    @Column({ type: Date, nullable: true })\n    deletedAt: Date | null;\n    name: LocaleString;\n    @Column()\n    code: string;\n    @OneToMany(type => ProductOptionGroupTranslation, translation => translation.base, { eager: true })\n    translations: Array<Translation<ProductOptionGroup>>;\n    @OneToMany(type => ProductOption, option => option.group)\n    options: ProductOption[];\n    @Index()\n    @ManyToOne(type => Product, product => product.optionGroups)\n    product: Product;\n    @Column(type => CustomProductOptionGroupFields)\n    customFields: CustomProductOptionGroupFields;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FacetSortParameter Input Type\nDESCRIPTION: Input type for specifying sort order of facet fields including id, timestamps, name and code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_84\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  code: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeORM Query Relations in TypeScript\nDESCRIPTION: Examples of updating TypeORM queries to remove references to the now-defunct OrderItem entity. This affects queries that previously joined the OrderItem relation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nconst order = await this.connection\n  .getRepository(Order)\n  .createQueryBuilder('order')\n  .leftJoinAndSelect('order.lines', 'line')\n- .leftJoinAndSelect('line.items', 'items')\n```\n\nLANGUAGE: diff\nCODE:\n```\nconst order = await this.connection\n  .getRepository(Order)\n  .findOne(ctx, orderId, {\n-    relations: ['lines', 'lines.items'],\n+    relations: ['lines'],\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingLine GraphQL Type\nDESCRIPTION: Defines a GraphQL type for shipping line items in an order. Contains fields for pricing, applied discounts, and relationships to shipping methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_180\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingLine {\n  id: ID!\n  shippingMethod: ShippingMethod!\n  price: Money!\n  priceWithTax: Money!\n  discountedPrice: Money!\n  discountedPriceWithTax: Money!\n  discounts: [Discount!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionBreadcrumb GraphQL Object Type\nDESCRIPTION: Defines the CollectionBreadcrumb object type with fields for id, name, and slug.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionBreadcrumb {\n  id: ID!\n  name: String!\n  slug: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveOrderItemsResult Union Type in GraphQL\nDESCRIPTION: Union type definition for possible results when removing items from an order, including successful order update or error conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_109\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion RemoveOrderItemsResult =\nOrder | OrderModificationError | OrderInterceptorError\n```\n\n----------------------------------------\n\nTITLE: Example of Compatibility Configuration in TypeScript\nDESCRIPTION: This example shows how to specify the compatibility version string for a Vendure plugin to ensure it's compatible with the Vendure core version.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin-metadata.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncompatibility: '^3.0.0'\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation for Adding Item with Custom Fields\nDESCRIPTION: Example GraphQL mutation showing how to add an item to order with custom engraving text field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/configurable-products/index.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n    addItemToOrder(\n        productVariantId: \"42\"\n        quantity: 1\n        customFields: {\n            engravingText: \"Thanks for all the fish!\"\n        }\n    ) {\n        ...on Order {\n            id\n            lines {\n                id\n                quantity\n                customFields {\n                    engravingText\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigArgInput in GraphQL\nDESCRIPTION: The ConfigArgInput input type defines a configuration argument with a 'name' and JSON stringified 'value'. This structure is typically used to pass configuration-related data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_32\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ConfigArgInput {\\n  name: String!\\n  value: String!\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorList Type in GraphQL\nDESCRIPTION: The `AdministratorList` type in GraphQL represents a list structure that contains multiple `Administrator` objects and a `totalItems` count. This type is useful for querying paginated lists of administrators within the Vendure platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype AdministratorList {\n  items: [Administrator!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Localized Labels for Custom Fields\nDESCRIPTION: Demonstrates how to configure localized labels for custom fields in multiple languages using the LanguageCode enum.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode } from '@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'infoUrl',\n                type: 'string',\n                // highlight-start\n                label: [\n                    {languageCode: LanguageCode.en, value: 'Info URL'},\n                    {languageCode: LanguageCode.de, value: 'Info-URL'},\n                    {languageCode: LanguageCode.es, value: 'URL de información'},\n                ],\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PreviewCollectionVariantsInput Input Type in GraphQL\nDESCRIPTION: Specifies input for previewing collection variants, including parent ID, whether to inherit filters, and a list of configurable operation inputs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_117\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PreviewCollectionVariantsInput {\n  parentId: ID\n  inheritFilters: Boolean!\n  filters: [ConfigurableOperationInput!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DuplicateEntitySuccess Type in GraphQL\nDESCRIPTION: Defines a success response type for duplicate entity operations that includes the ID of the newly created entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_59\n\nLANGUAGE: graphql\nCODE:\n```\ntype DuplicateEntitySuccess {\n  newEntityId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Allocation Type in GraphQL\nDESCRIPTION: The `Allocation` type describes inventory allocations in the Vendure system. It includes details such as `productVariant`, `quantity`, and `orderLine`, and supports custom fields. This type is essential for tracking stock movements and allocations related to orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Allocation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  type: StockMovementType!\n  quantity: Int!\n  orderLine: OrderLine!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Angular Custom Detail Component\nDESCRIPTION: Shows how to register a custom detail component in Angular using the registerCustomDetailComponent function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-detail-components/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerCustomDetailComponent } from '@vendure/admin-ui/core';\nimport { ProductInfoComponent } from './components/product-info/product-info.component';\n\nexport default [\n    registerCustomDetailComponent({\n        locationId: 'product-detail',\n        component: ProductInfoComponent,\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionTranslationInput Input Type in GraphQL\nDESCRIPTION: This input type is used for providing translation data for promotions. It includes fields for the language code, translated name and description, as well as custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_131\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PromotionTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  description: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: MultiChannelStockLocationStrategy Class Definition in TypeScript\nDESCRIPTION: The signature of the MultiChannelStockLocationStrategy class which extends BaseStockLocationStrategy. It includes two primary methods: getAvailableStock for determining available stock levels and forAllocation for handling stock allocation across channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/multi-channel-stock-location-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MultiChannelStockLocationStrategy extends BaseStockLocationStrategy {\n    getAvailableStock(ctx: RequestContext, productVariantId: ID, stockLevels: StockLevel[]) => Promise<AvailableStock>;\n    forAllocation(ctx: RequestContext, stockLocations: StockLocation[], orderLine: OrderLine, quantity: number) => Promise<LocationWithQuantity[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidCredentialsError Type in GraphQL\nDESCRIPTION: Defines the `InvalidCredentialsError` type in GraphQL. This error is returned during authentication if the provided user credentials (e.g., username/password) are incorrect or invalid. It includes a standard error code, a general message, and a specific authentication error message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_85\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if the user authentication credentials are not valid\n\"\"\"\ntype InvalidCredentialsError {\n  errorCode: ErrorCode!\n  message: String!\n  authenticationError: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Including AdminUiPlugin for Metrics in Stand-alone Deployment\nDESCRIPTION: This snippet shows how to include the AdminUiPlugin without initialization to enable the metricSummary query for a stand-alone Admin UI deployment. This allows the order metrics to be displayed on the dashboard while hosting the Admin UI separately.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploying-admin-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n\nconst config: VendureConfig = {\n    plugins: [\n        AdminUiPlugin, // <== include the plugin, but don't call init()\n    ],\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TaxCategory in GraphQL\nDESCRIPTION: This mutation type allows updating an existing TaxCategory. It takes a UpdateTaxCategoryInput object as input and returns the updated TaxCategory object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_134\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateTaxCategory(input: UpdateTaxCategoryInput!): TaxCategory!\n}\n```\n\n----------------------------------------\n\nTITLE: PresetOnlyStrategy Class Signature in TypeScript\nDESCRIPTION: Defines the TypeScript class signature for `PresetOnlyStrategy`. It shows the constructor accepting `PresetOnlyStrategyOptions` and the `getImageTransformParameters` method signature. This class implements the `ImageTransformStrategy` interface, enforcing preset-based image transformations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/preset-only-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nclass PresetOnlyStrategy implements ImageTransformStrategy {\n    constructor(options: PresetOnlyStrategyOptions)\n    getImageTransformParameters({\n        input,\n        availablePresets,\n    }: GetImageTransformParametersArgs) => Promise<ImageTransformParameters> | ImageTransformParameters;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Lazy-Loaded Angular Module for Admin UI Extension (TypeScript)\nDESCRIPTION: Introduces the 'AdminUiExtensionLazyModule' interface for registering Angular modules to be lazy-loaded at specified routes within the Vendure Admin UI. Requires a 'route', along with the module's file and class name, and sets 'type' to 'lazy'. This approach is suitable for isolated admin UI extensions that are not always loaded and supports route-based modular design. All fields are mandatory for proper lazy loading configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AdminUiExtensionLazyModule {\n    type: 'lazy';\n    route: string;\n    ngModuleFileName: string;\n    ngModuleName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateFacetInput in GraphQL\nDESCRIPTION: Input type for updating a product facet in Vendure. Requires an ID and allows updating privacy status, code, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_183\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateFacetInput {\n  id: ID!\n  isPrivate: Boolean\n  code: String\n  translations: [FacetTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Order and Payment Management Mutations in GraphQL\nDESCRIPTION: Mutations for managing orders and payments, including cancellation operations. These mutations handle the business logic for canceling orders and payments in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  cancelJob(jobId: ID!): Job!\n  cancelOrder(input: CancelOrderInput!): CancelOrderResult!\n  cancelPayment(id: ID!): CancelPaymentResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying GNU GPL v3 Interactive Terminal Notice\nDESCRIPTION: Shows an example short notice recommended for programs with terminal interaction when starting in interactive mode, if licensed under the GNU GPL v3. This notice includes placeholders for the program name, copyright year, and author. It states there is no warranty and provides hypothetical commands (`show w`, `show c`) for users to view warranty and redistribution condition details from the GPL.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/license/gpl-3.0.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSellerInput in GraphQL\nDESCRIPTION: This input type is used for creating a new seller. It includes fields for name and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_62\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateSellerInput {\n  name: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Seller GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL type definition for sellers in the Vendure shop API. Contains basic seller information such as ID, creation date, update date, name, and custom fields for extensibility.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_120\n\nLANGUAGE: graphql\nCODE:\n```\ntype Seller {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  name: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Zone by ID with GraphQL\nDESCRIPTION: With this query, you can fetch details of a zone by providing its ID. It takes an `ID` as input and returns a `Zone` object containing zone-specific information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_50\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\nzone(id: ID!): Zone\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Success Type in GraphQL\nDESCRIPTION: Defines a GraphQL type that indicates an operation succeeded, without returning specific information. Contains a single boolean field 'success'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_135\n\nLANGUAGE: graphql\nCODE:\n```\ntype Success {\n  success: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueFilterInput Input Type\nDESCRIPTION: Input type for constructing boolean expressions to filter facet values using AND/OR operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_86\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueFilterInput {\n  and: ID\n  or: [ID!]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Image Transform Methods in TypeScript\nDESCRIPTION: This `GetImageTransformParametersArgs` interface represents the arguments supplied to the `getImageTransformParameters` method in an `ImageTransformStrategy`. It encompasses a request object, available presets for transformations, and the input parameters conforming to `ImageTransformParameters`. This setup allows strategies to work with dynamic and preset values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/image-transform-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetImageTransformParametersArgs {\\n    req: Request;\\n    availablePresets: ImageTransformPreset[];\\n    input: ImageTransformParameters;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRateSortParameter Input Type in GraphQL\nDESCRIPTION: Input type that specifies sorting parameters for tax rates. Extends the sorting capabilities of TaxCategorySortParameter by adding a value field to sort by tax rate values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_168\n\nLANGUAGE: graphql\nCODE:\n```\ninput TaxRateSortParameter {\n  id: SortOrder\n\n  createdAt: SortOrder\n\n  updatedAt: SortOrder\n\n  name: SortOrder\n\n  value: SortOrder\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coupon Error Types\nDESCRIPTION: GraphQL types for various coupon-related errors including expiration, invalidity, and limit errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ntype CouponCodeExpiredError {\n  errorCode: ErrorCode!\n  message: String!\n  couponCode: String!\n}\n\ntype CouponCodeInvalidError {\n  errorCode: ErrorCode!\n  message: String!\n  couponCode: String!\n}\n\ntype CouponCodeLimitError {\n  errorCode: ErrorCode!\n  message: String!\n  couponCode: String!\n  limit: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OnTransitionErrorFn Type in TypeScript\nDESCRIPTION: The OnTransitionErrorFn type defines a function signature for handlers called when a transition is prevented and an error message is returned. It can return void or a Promise/Observable of void.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/state-machine-config.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype OnTransitionErrorFn<T extends string> = (\n    fromState: T,\n    toState: T,\n    message?: string,\n) => void | Promise<void> | Observable<void>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a JobQueue in TypeScript\nDESCRIPTION: This example demonstrates how to create and use a JobQueue for video transcoding. It shows the creation of a queue in the onModuleInit method and adding jobs to the queue.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-queue-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// A service which transcodes video files\nclass VideoTranscoderService {\n\n  private jobQueue: JobQueue<{ videoId: string; }>;\n\n  async onModuleInit() {\n    // The JobQueue is created on initialization\n    this.jobQueue = await this.jobQueueService.createQueue({\n      name: 'transcode-video',\n      process: async job => {\n        return await this.transcodeVideo(job.data.videoId);\n      },\n    });\n  }\n\n  addToTranscodeQueue(videoId: string) {\n    this.jobQueue.add({ videoId, })\n  }\n\n  private async transcodeVideo(videoId: string) {\n    // e.g. call some external transcoding service\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: PageBlock Component Type Definition in TypeScript\nDESCRIPTION: This snippet shows the type definition of the PageBlock component. It is a function that takes PropsWithChildren as its parameter, indicating it can wrap child components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/page-block.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction PageBlock(props: PropsWithChildren): void\n```\n\n----------------------------------------\n\nTITLE: Defining Traffic Light Transitions in TypeScript\nDESCRIPTION: This example demonstrates how to use the Transitions type to define valid states and transitions for a traffic light state machine.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/transitions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LightColor = 'Green' | 'Amber' | 'Red';\n\nconst trafficLightTransitions: Transitions<LightColor> = {\n  Green: {\n    to: ['Amber'],\n  },\n  Amber: {\n    to: ['Red'],\n  },\n  Red: {\n    to: ['Green'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DateRange Input Type in GraphQL\nDESCRIPTION: Specifies a date range with start and end dates. Used in conjunction with the DateOperators for filtering queries based on date ranges.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_77\n\nLANGUAGE: graphql\nCODE:\n```\ninput DateRange {\n  start: DateTime!\n  end: DateTime!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: Imports custom React components used for rendering service documentation, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining TestShippingMethodOrderLineInput Input Type in GraphQL\nDESCRIPTION: Input type that represents an order line for testing shipping methods. Requires a product variant ID and quantity to simulate items in a shopping cart.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_171\n\nLANGUAGE: graphql\nCODE:\n```\ninput TestShippingMethodOrderLineInput {\n  productVariantId: ID!\n\n  quantity: Int!\n\n}\n```\n\n----------------------------------------\n\nTITLE: HttpHealthCheckStrategy Class Signature\nDESCRIPTION: The class signature for HttpHealthCheckStrategy showing its constructor and methods. It implements the HealthCheckStrategy interface and provides methods for initialization and getting health indicators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/http-health-check-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass HttpHealthCheckStrategy implements HealthCheckStrategy {\n    constructor(options: HttpHealthCheckOptions)\n    init(injector: Injector) => ;\n    getHealthIndicator() => HealthIndicatorFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodFilterParameter Input Type in GraphQL\nDESCRIPTION: Defines a GraphQL input type for filtering shipping methods in queries. It includes various operators for filtering by ID, dates, language code, and other shipping method properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_148\n\nLANGUAGE: graphql\nCODE:\n```\ninput ShippingMethodFilterParameter {\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\nlanguageCode: StringOperators\ncode: StringOperators\nname: StringOperators\ndescription: StringOperators\nfulfillmentHandlerCode: StringOperators\n_and: [ShippingMethodFilterParameter!]\n_or: [ShippingMethodFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Fields in TypeScript\nDESCRIPTION: Example of accessing a custom field on a Customer entity in TypeScript code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await this.connection.getRepository(ctx, Customer).findOne({\n    where: { id: 1 },\n});\nconsole.log(customer.externalId);\n```\n\n----------------------------------------\n\nTITLE: Defining ReactCustomDetailComponentConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the configuration structure for custom React components in Vendure admin UI detail pages. It specifies the location ID where the component should be placed, the React component to render, and optional props to pass to the component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/react-custom-detail-component-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReactCustomDetailComponentConfig {\n    locationId: CustomDetailComponentLocationId;\n    component: ElementType;\n    props?: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: TransitionFulfillmentToStateResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when transitioning a fulfillment to a different state, returning either a Fulfillment or an error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_211\n\nLANGUAGE: graphql\nCODE:\n```\nunion TransitionFulfillmentToStateResult =\nFulfillment | FulfillmentStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: CreateFulfillmentResult Type Alias Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the CreateFulfillmentResult type alias. This type defines the structure of the object that should be returned by the `createFulfillment` function. It allows returning partial data from the Fulfillment entity, specifically `trackingCode`, `method`, and `customFields`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-handler.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ntype CreateFulfillmentResult = Partial<Pick<Fulfillment, 'trackingCode' | 'method' | 'customFields'>>\n```\n\n----------------------------------------\n\nTITLE: useLazyQuery Function Signature in TypeScript\nDESCRIPTION: The function signature of the useLazyQuery hook, showing its generic type parameters and options. It accepts a GraphQL query document and options object, with a refetchOnChannelChange flag that defaults to false.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-lazy-query.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useLazyQuery<T, V extends Record<string, any> = Record<string, any>>(query: DocumentNode | TypedDocumentNode<T, V>, options: { refetchOnChannelChange: boolean } = { refetchOnChannelChange: false }): void\n```\n\n----------------------------------------\n\nTITLE: Exporting CrudPermissionDefinition in Vendure with TypeScript\nDESCRIPTION: The code defines a CrudPermissionDefinition instance, 'wishlist', which facilitates the creation of Create, Read, Update, and Delete permissions for the 'Wishlist' entity. It requires Vendure's permission framework to function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const wishlist = new CrudPermissionDefinition('Wishlist');\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanStructFieldConfig GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for boolean struct field configuration in Vendure. This type defines the structure for configuring boolean fields within structured data types, including properties for name, type, label, and UI configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype BooleanStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: ProcessContext Class Definition - TypeScript\nDESCRIPTION: Class definition showing the structure of the ProcessContext class with its boolean properties for determining process context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/process-context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProcessContext {\n    isServer: boolean\n    isWorker: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type is used for filtering product variants. It includes various operators for filtering by fields such as id, productId, createdAt, updatedAt, sku, name, price, and stockLevel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_39\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantFilterParameter {\n  id: IDOperators\n  productId: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  sku: StringOperators\n  name: StringOperators\n  price: NumberOperators\n  currencyCode: StringOperators\n  priceWithTax: NumberOperators\n  stockLevel: StringOperators\n  _and: [ProductVariantFilterParameter!]\n  _or: [ProductVariantFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Vendure Plugin Configuration\nDESCRIPTION: Example of adding a custom plugin to the Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { MyPlugin } from './plugins/my-plugin/my-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        MyPlugin,\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionFilterParameter in GraphQL\nDESCRIPTION: The CollectionFilterParameter input type allows for filtering collections with various operators like Boolean, Date, ID, and String. This is essential for implementing complex filtering logic in queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_29\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CollectionFilterParameter {\\n  isPrivate: BooleanOperators\\n  inheritFilters: BooleanOperators\\n  id: IDOperators\\n  createdAt: DateOperators\\n  updatedAt: DateOperators\\n  languageCode: StringOperators\\n  name: StringOperators\\n  slug: StringOperators\\n  position: NumberOperators\\n  description: StringOperators\\n  parentId: IDOperators\\n  _and: [CollectionFilterParameter!]\\n  _or: [CollectionFilterParameter!]\\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Duplicators - GraphQL SDL - GraphQL\nDESCRIPTION: Defines the 'entityDuplicators' query, which returns a non-nullable array of EntityDuplicatorDefinition objects. This is used to discover all configured duplicator mechanisms in the system. No input parameters are required. Includes an explanatory comment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturns all configured EntityDuplicators.\n\"\"\"\ntype Query {\n  entityDuplicators: [EntityDuplicatorDefinition!]!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining StructFieldConfig GraphQL Union Type\nDESCRIPTION: GraphQL union type definition for StructFieldConfig which represents various types of fields that can be used within a structured custom field, supporting different data types like string, integer, boolean, etc.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_134\n\nLANGUAGE: graphql\nCODE:\n```\nunion StructFieldConfig =\nStringStructFieldConfig | IntStructFieldConfig | FloatStructFieldConfig | BooleanStructFieldConfig | DateTimeStructFieldConfig | TextStructFieldConfig\n```\n\n----------------------------------------\n\nTITLE: Defining OrderProcessState Type in GraphQL\nDESCRIPTION: The OrderProcessState type defines a state in the order process workflow, indicating the name of the state and possible transitions to other states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_121\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderProcessState {\n  name: String!\n  to: [String!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelDefaultLanguageError GraphQL Object Type\nDESCRIPTION: Defines the ChannelDefaultLanguageError object type for errors related to a Channel's default language no longer being available in the GlobalSettings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ntype ChannelDefaultLanguageError {\n  errorCode: ErrorCode!\n  message: String!\n  language: String!\n  channelCode: String!\n}\n```\n\n----------------------------------------\n\nTITLE: CdsIcon Function Signature\nDESCRIPTION: This snippet shows the TypeScript function signature for the CdsIcon component. It accepts props including the icon and optional className, along with partial CdsIconProps.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/cds-icon.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction CdsIcon(props: { icon: IconShapeTuple; className?: string } & Partial<CdsIconProps>): void\n```\n\n----------------------------------------\n\nTITLE: Remove Item from Order Mutation\nDESCRIPTION: GraphQL mutation for removing items from an active order using the order line ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation RemoveItemFromOrder($orderLineId: ID!) {\n  removeOrderLine(orderLineId: $orderLineId) {\n    ...ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLine GraphQL Type\nDESCRIPTION: Comprehensive GraphQL type definition for OrderLine, which represents a line item in an order. Includes detailed pricing fields (with and without tax), quantity information, discounts, tax data, and relationships to other entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_115\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderLine {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  featuredAsset: Asset\n  \n  \"\"\"The price of a single unit, excluding tax and discounts\"\"\"\n  unitPrice: Money!\n  \n  \"\"\"The price of a single unit, including tax but excluding discounts\"\"\"\n  unitPriceWithTax: Money!\n  \n  \"\"\"Non-zero if the unitPrice has changed since it was initially added to Order\"\"\"\n  unitPriceChangeSinceAdded: Money!\n  \n  \"\"\"Non-zero if the unitPriceWithTax has changed since it was initially added to Order\"\"\"\n  unitPriceWithTaxChangeSinceAdded: Money!\n  \n  \"\"\"The price of a single unit including discounts, excluding tax.\n\n  If Order-level discounts have been applied, this will not be the\n  actual taxable unit price (see `proratedUnitPrice`), but is generally the\n  correct price to display to customers to avoid confusion\n  about the internal handling of distributed Order-level discounts.\"\"\"\n  discountedUnitPrice: Money!\n  \n  \"\"\"The price of a single unit including discounts and tax\"\"\"\n  discountedUnitPriceWithTax: Money!\n  \n  \"\"\"The actual unit price, taking into account both item discounts _and_ prorated (proportionally-distributed)\n  Order-level discounts. This value is the true economic value of the OrderItem, and is used in tax\n  and refund calculations.\"\"\"\n  proratedUnitPrice: Money!\n  \n  \"\"\"The proratedUnitPrice including tax\"\"\"\n  proratedUnitPriceWithTax: Money!\n  \n  \"\"\"The quantity of items purchased\"\"\"\n  quantity: Int!\n  \n  \"\"\"The quantity at the time the Order was placed\"\"\"\n  orderPlacedQuantity: Int!\n  \n  taxRate: Float!\n  \n  \"\"\"The total price of the line excluding tax and discounts.\"\"\"\n  linePrice: Money!\n  \n  \"\"\"The total price of the line including tax but excluding discounts.\"\"\"\n  linePriceWithTax: Money!\n  \n  \"\"\"The price of the line including discounts, excluding tax\"\"\"\n  discountedLinePrice: Money!\n  \n  \"\"\"The price of the line including discounts and tax\"\"\"\n  discountedLinePriceWithTax: Money!\n  \n  \"\"\"The actual line price, taking into account both item discounts _and_ prorated (proportionally-distributed)\n  Order-level discounts. This value is the true economic value of the OrderLine, and is used in tax\n  and refund calculations.\"\"\"\n  proratedLinePrice: Money!\n  \n  \"\"\"The proratedLinePrice including tax\"\"\"\n  proratedLinePriceWithTax: Money!\n  \n  \"\"\"The total tax on this line\"\"\"\n  lineTax: Money!\n  \n  discounts: [Discount!]!\n  taxLines: [TaxLine!]!\n  order: Order!\n  fulfillmentLines: [FulfillmentLine!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Custom Fields with Inverse Side\nDESCRIPTION: Example showing how to configure a 'relation' custom field with an inverse side relationship, allowing bidirectional navigation between entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Product } from '\\@vendure/core';\nimport { ProductReview } from './entities/product-review.entity';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'reviews',\n                list: true,\n                type: 'relation',\n                entity: ProductReview,\n                // highlight-start\n                inverseSide: (review: ProductReview) => review.product,\n                // highlight-end\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StringListOperators Input Type in GraphQL\nDESCRIPTION: Input type that provides operators for filtering on a list of String fields. It includes the inList operator to check if a value is in a specified list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_157\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of String fields\n\"\"\"\ninput StringListOperators {\n  inList: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MultipleOrderError GraphQL Object Type\nDESCRIPTION: Defines the MultipleOrderError object type for cases where an operation has specified OrderLines from multiple Orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_104\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned if an operation has specified OrderLines from multiple Orders\"\"\"\ntype MultipleOrderError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MissingConditionsError GraphQL Object Type\nDESCRIPTION: Defines the MissingConditionsError object type for cases where a PromotionCondition has neither a couponCode nor any conditions set.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_101\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned if a PromotionCondition has neither a couponCode nor any conditions set\"\"\"\ntype MissingConditionsError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SassVariableOverridesExtension Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SassVariableOverridesExtension, which specifies configuration for overriding Sass variables in the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SassVariableOverridesExtension {\n    sassVariableOverrides: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdjustDraftOrderLineInput in GraphQL\nDESCRIPTION: Specifies the input for adjusting the quantity of an existing line item within a draft order. Requires the `orderLineId` and the new `quantity`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninput AdjustDraftOrderLineInput {\n  orderLineId: ID!\n  quantity: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Test Environment Initialization for Vendure\nDESCRIPTION: This snippet demonstrates the changes required in the Vendure testing package for initializing test environments. The code shows the transition from the old method, using \"dataDir\", to the new method that registers an initializer for \"sqljs\" using the \"registerInitializer\" function. This change makes it possible to run e2e tests against any database supported by TypeORM. It requires importing \"registerInitializer\" and \"SqljsInitializer\" and setting the data path via the \"SqljsInitializer\" constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createTestEnvironment, testConfig } from '@vendure/testing';\n\ndescribe('my e2e test suite', () => {\n    const { server, adminClient } = createTestEnvironment(testConfig);\n\n    beforeAll(() => {\n        await server.init({\n            dataDir: path.join(__dirname, '__data__'),\n            initialData,\n            productsCsvPath: path.join(__dirname, 'fixtures/e2e-products-minimal.csv'),\n            customerCount: 1,\n        });\n    });\n\n    //...\n});\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createTestEnvironment, registerInitializer, SqljsInitializer, testConfig } from '@vendure/testing';\n\nregisterInitializer('sqljs', new SqljsInitializer(path.join(__dirname, '__data__')));\n\ndescribe('my e2e test suite', () => {\n    const { server, adminClient } = createTestEnvironment(testConfig);\n\n    beforeAll(() => {\n        await server.init({\n            initialData,\n            productsCsvPath: path.join(__dirname, 'fixtures/e2e-products-minimal.csv'),\n            customerCount: 1,\n        });\n    });\n\n    //...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining QuantityTooGreatError Object Type in GraphQL\nDESCRIPTION: Defines an error type returned when attempting to modify an order with a quantity greater than available. Contains error code and message properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_149\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned if the specified quantity of an OrderLine is greater than the number of items in that line\"\"\"\ntype QuantityTooGreatError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BulkAction Interface in TypeScript\nDESCRIPTION: Defines the structure of a bulk action configuration, including properties for location, label, icon, visibility, permissions, and click handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/bulk-action.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BulkAction<ItemType = any, ComponentType = any> {\n    location: BulkActionLocationId;\n    label: string;\n    getTranslationVars?: (\n        context: BulkActionFunctionContext<ItemType, ComponentType>,\n    ) => Record<string, string | number> | Promise<Record<string, string | number>>;\n    icon?: string;\n    iconClass?: string;\n    onClick: (context: BulkActionClickContext<ItemType, ComponentType>) => void;\n    isVisible?: (context: BulkActionFunctionContext<ItemType, ComponentType>) => boolean | Promise<boolean>;\n    requiresPermission?: string | ((userPermissions: string[]) => boolean);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCollectionTranslationInput schema in GraphQL\nDESCRIPTION: An input type for updating translations of a Collection entity in Vendure. Allows for localizing names, slugs, and descriptions for Collections in different languages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_178\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCollectionTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  slug: String\n  description: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Git Push Command for Release Tags\nDESCRIPTION: Command to push master branch with tags to origin, avoiding pre-push hook conflicts with npm OTP during publishing process. This step is performed after npm publish to prevent OTP timeout issues.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin master --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageNotAvailableError GraphQL Type\nDESCRIPTION: Defines the `LanguageNotAvailableError` GraphQL type. This error is returned when attempting to set a Channel's default language (`defaultLanguageCode`) to a language that is not enabled in the GlobalSettings. It includes the `errorCode`, `message`, and the specific `languageCode` that caused the issue.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_93\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if attempting to set a Channel's defaultLanguageCode to a language which is not enabled in GlobalSettings\n\"\"\"\ntype LanguageNotAvailableError {\n  errorCode: ErrorCode!\n  message: String!\n  languageCode: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UseGuestStrategy in TypeScript for Vendure\nDESCRIPTION: A strategy that discards any existing order and sets the guest order as the active order. This strategy implements the OrderMergeStrategy interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/merge-strategies.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass UseGuestStrategy implements OrderMergeStrategy {\n    merge(ctx: RequestContext, guestOrder: Order, existingOrder: Order) => MergedOrderLine[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeletionResponse Type in GraphQL\nDESCRIPTION: Defines a response type for deletion operations that includes the result of the deletion operation and an optional message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_55\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeletionResponse {\n  result: DeletionResult!\n  message: String\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting and Moving Collections in TypeScript\nDESCRIPTION: Methods for deleting a Collection and moving a Collection within the hierarchy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(ctx: RequestContext, id: ID): Promise<DeletionResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmove(ctx: RequestContext, input: MoveCollectionInput): Promise<Translated<Collection>>\n```\n\n----------------------------------------\n\nTITLE: JobFilterParameter GraphQL Input Type Definition\nDESCRIPTION: Specifies filter parameters for jobs, allowing filtering by properties like ID, dates, queue name, state, progress, and other job-related metrics.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_97\n\nLANGUAGE: graphql\nCODE:\n```\ninput JobFilterParameter {\nid: IDOperators\ncreatedAt: DateOperators\nstartedAt: DateOperators\nsettledAt: DateOperators\nqueueName: StringOperators\nstate: StringOperators\nprogress: NumberOperators\nisSettled: BooleanOperators\nduration: NumberOperators\nretries: NumberOperators\nattempts: NumberOperators\n_and: [JobFilterParameter!]\n_or: [JobFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Customer Groups with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CustomerGroupFilterParameter GraphQL input type used to filter customer group data in Vendure. It supports filtering by ID, creation time, update time, and name, with logical AND/OR combinations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_70\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerGroupFilterParameter {\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\nname: StringOperators\n_and: [CustomerGroupFilterParameter!]\n_or: [CustomerGroupFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Fulfillment State - GraphQL Mutation - GraphQL\nDESCRIPTION: Defines the transitionFulfillmentToState mutation used to change the state of a fulfillment entity. Accepts an ID identifying the fulfillment and a new state as a string, returning a TransitionFulfillmentToStateResult. The mutation is transactional and validates state transitions based on business logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_101\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\ntransitionFulfillmentToState(id: ID!, state: String!): TransitionFulfillmentToStateResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Administrator - GraphQL Mutation - GraphQL\nDESCRIPTION: Defines the updateAdministrator mutation to modify an existing administrator account. It accepts an UpdateAdministratorInput object with all necessary field changes, returning the modified Administrator object. This operation may require administrative privileges and proper input validation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_107\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Administrator\n\"\"\"\ntype Mutation {\nupdateAdministrator(input: UpdateAdministratorInput!): Administrator!\n}\n```\n\n----------------------------------------\n\nTITLE: FileBasedTemplateLoader Class Definition in TypeScript\nDESCRIPTION: Definition of the FileBasedTemplateLoader class, which implements the TemplateLoader interface to load email templates from the local file system. This is the default loader used by the EmailPlugin in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/template-loader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileBasedTemplateLoader implements TemplateLoader {\n    constructor(templatePath: string)\n    loadTemplate(_injector: Injector, _ctx: RequestContext, { type, templateName }: LoadTemplateInput) => Promise<string>;\n    loadPartials() => Promise<Partial[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RoleSortParameter Input Type in GraphQL\nDESCRIPTION: This input type specifies sorting options for role queries, allowing sorting by various fields such as id, createdAt, updatedAt, code, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_140\n\nLANGUAGE: graphql\nCODE:\n```\ninput RoleSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  code: SortOrder\n  description: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanListOperators in GraphQL\nDESCRIPTION: This input type provides operators for filtering on a list of Boolean fields. It contains a single field 'inList' of type Boolean.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ninput BooleanListOperators {\n  inList: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Order Note in Vendure (TypeScript)\nDESCRIPTION: Deletes an order note. It takes a RequestContext and the ID of the note to be deleted as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteOrderNote(ctx: RequestContext, id: ID): Promise<DeletionResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining JobState Enum in TypeScript for Vendure Job Queue\nDESCRIPTION: This enum defines the possible states of a Job in the Vendure JobQueue. It includes states such as CANCELLED, COMPLETED, FAILED, PENDING, RETRYING, and RUNNING. This enum is used to track and manage the lifecycle of jobs within the Vendure e-commerce framework.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/job-state.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum JobState {\n    CANCELLED = 'CANCELLED'\n    COMPLETED = 'COMPLETED'\n    FAILED = 'FAILED'\n    PENDING = 'PENDING'\n    RETRYING = 'RETRYING'\n    RUNNING = 'RUNNING'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vendure Plugin with Injectable Subscriber\nDESCRIPTION: Defines a Vendure plugin that registers the injectable subscriber. This pattern allows the subscriber to access other services through dependency injection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/db-subscribers/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    providers: [ProductSubscriber, MyService],\n})\nclass MyPlugin {\n}\n```\n\n----------------------------------------\n\nTITLE: registerHistoryEntryComponent Function Signature\nDESCRIPTION: The function signature for the registerHistoryEntryComponent function, which takes a HistoryEntryConfig parameter containing the type and component to be registered.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/register-history-entry-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerHistoryEntryComponent(config: HistoryEntryConfig): void\n```\n\n----------------------------------------\n\nTITLE: Implementing PasswordFormInputComponent for Secure Text Input\nDESCRIPTION: Component that displays a password text input. This component should be used with string type fields where secure input is required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass PasswordFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'password-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: InputComponentConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateGroupOptionInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a product option group. It requires a code and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_51\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateGroupOptionInput {\n  code: String!\n  translations: [ProductOptionGroupTranslationInput!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Email Template Variables in TypeScript\nDESCRIPTION: Update email templates to remove the 'user' object, changing variables like '{{ user.verificationToken }}' to '{{ verificationToken }}'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// Old\n{{ user.verificationToken }}\n\n// New\n{{ verificationToken }}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLineInput Input Type in GraphQL\nDESCRIPTION: This input type is used for modifying order lines, specifying the order line ID and the new quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_110\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderLineInput {\n  orderLineId: ID!\n  quantity: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Using IfPermissionsDirective with Single Permission in HTML\nDESCRIPTION: Demonstrates how to use the IfPermissionsDirective in HTML templates with a single permission check and an 'else' template for unauthorized users.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/directives/if-permissions-directive.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button *vdrIfPermissions=\"'DeleteCatalog'; else unauthorized\">Delete Product</button>\n<ng-template #unauthorized>Not allowed!</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Function Signature for registerCustomDetailComponent in Vendure Admin UI\nDESCRIPTION: The signature of the registerCustomDetailComponent function, which takes a CustomDetailComponentConfig object as its parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/register-custom-detail-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerCustomDetailComponent(config: CustomDetailComponentConfig): void\n```\n\n----------------------------------------\n\nTITLE: Product Translation Type Definitions in GraphQL\nDESCRIPTION: Defines translation types for products, options and option groups to support multiple languages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_138\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductOptionGroupTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n\ntype ProductOptionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n\ntype ProductTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type defines filtering parameters for product variants. It includes various fields for filtering based on properties like facetValueId, enabled status, inventory tracking, stock levels, and more. It also supports logical AND and OR operations for complex filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_124\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductVariantFilterParameter {\n  facetValueId: IDOperators\n  enabled: BooleanOperators\n  trackInventory: StringOperators\n  stockOnHand: NumberOperators\n  stockAllocated: NumberOperators\n  outOfStockThreshold: NumberOperators\n  useGlobalOutOfStockThreshold: BooleanOperators\n  id: IDOperators\n  productId: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  sku: StringOperators\n  name: StringOperators\n  price: NumberOperators\n  currencyCode: StringOperators\n  priceWithTax: NumberOperators\n  stockLevel: StringOperators\n  _and: [ProductVariantFilterParameter!]\n  _or: [ProductVariantFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderTransitionData Interface in TypeScript for Vendure\nDESCRIPTION: Specifies the structure of data passed to OrderProcess state transition hooks. It includes the RequestContext and the Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderTransitionData {\n    ctx: RequestContext;\n    order: Order;\n}\n```\n\n----------------------------------------\n\nTITLE: Zone GraphQL Type Definition\nDESCRIPTION: Defines the Zone type representing geographic zones used for shipping and tax calculations. Includes zone members which are regions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_221\n\nLANGUAGE: graphql\nCODE:\n```\ntype Zone {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\nname: String!\nmembers: [Region!]!\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: OrderSortParameter Input Type for Result Ordering\nDESCRIPTION: Defines sorting parameters for order queries in the Vendure shop API. It allows sorting orders by various properties like creation date, code, state, and financial data, using the SortOrder enum (ASC/DESC).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_34\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderSortParameter {\nid: SortOrder\ncreatedAt: SortOrder\nupdatedAt: SortOrder\norderPlacedAt: SortOrder\ncode: SortOrder\nstate: SortOrder\ntotalQuantity: SortOrder\nsubTotal: SortOrder\nsubTotalWithTax: SortOrder\nshipping: SortOrder\nshippingWithTax: SortOrder\ntotal: SortOrder\ntotalWithTax: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodSortParameter Input Type in GraphQL\nDESCRIPTION: Specifies sorting parameters for shipping method queries, allowing results to be ordered by various fields like ID, creation date, name, and other properties. Each field accepts a SortOrder enum value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_150\n\nLANGUAGE: graphql\nCODE:\n```\ninput ShippingMethodSortParameter {\nid: SortOrder\ncreatedAt: SortOrder\nupdatedAt: SortOrder\ncode: SortOrder\nname: SortOrder\ndescription: SortOrder\nfulfillmentHandlerCode: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: StripePlugin Class Signature\nDESCRIPTION: TypeScript signature for the `StripePlugin` class. It defines a static `options` property holding the plugin configuration and a static `init` method used to initialize and configure the plugin, returning the plugin type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass StripePlugin {\n    static options: StripePluginOptions;\n    init(options: StripePluginOptions) => Type<StripePlugin>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoopTransportOptions TypeScript Interface\nDESCRIPTION: Specifies a no-operation transport option. This is often used during testing or when a custom EmailSender is in place that does not require typical transport options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NoopTransportOptions {\n    type: 'none';\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Draft Order Shipping Address - GraphQL Mutation - GraphQL\nDESCRIPTION: Provides the unsetDraftOrderShippingAddress mutation to remove the shipping address from a draft order. Accepts an orderId and returns the Order object reflecting the removal. Only works when the order is still in draft status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_105\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUnsets the shipping address for a draft Order\n\"\"\"\ntype Mutation {\nunsetDraftOrderShippingAddress(orderId: ID!): Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logo Integration\nDESCRIPTION: Advanced configuration to replace default Vendure logos and favicon with custom brand assets using the UI devkit compiler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/admin-ui-theming-branding/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { VendureConfig } from '@vendure/core';\nimport { compileUiExtensions, setBranding } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [\n                    setBranding({\n                        // The small logo appears in the top left of the screen  \n                        smallLogoPath: path.join(__dirname, 'images/my-logo-sm.png'),\n                        // The large logo is used on the login page  \n                        largeLogoPath: path.join(__dirname, 'images/my-logo-lg.png'),\n                        faviconPath: path.join(__dirname, 'images/my-favicon.ico'),\n                    }),\n                ],\n            }),\n        }),\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Transitions Type Definition in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript definition of the Transitions type. It includes the mergeStrategy property for handling state merging when transitions are combined.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/transitions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Transitions<State extends string, Target extends string = State> = {\n    [S in State]: {\n        to: Readonly<Target[]>;\n        mergeStrategy?: 'merge' | 'replace';\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Connection for Railway in Vendure\nDESCRIPTION: Configures the database connection options in Vendure's configuration file to use environment variables that will be provided by Railway's database service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-railway/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    dbConnectionOptions: {\n        // ...\n        database: process.env.DB_NAME,\n        host: process.env.DB_HOST,\n        port: +process.env.DB_PORT,\n        username: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentOrderMismatchError GraphQL Type\nDESCRIPTION: GraphQL schema definition for an error type that occurs when attempting to refund a payment against order lines from a different order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_130\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if an attempting to refund a Payment against OrderLines from a different Order\n\"\"\"\ntype PaymentOrderMismatchError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: OrderByCodeAccessStrategy Interface Definition\nDESCRIPTION: TypeScript interface definition for the OrderByCodeAccessStrategy, extending InjectableStrategy and requiring implementation of canAccessOrder method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-by-code-access-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderByCodeAccessStrategy extends InjectableStrategy {\n    canAccessOrder(ctx: RequestContext, order: Order): boolean | Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discount Type in GraphQL\nDESCRIPTION: Represents a discount configuration with adjustment source, type, description, and monetary values both with and without tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_34\n\nLANGUAGE: graphql\nCODE:\n```\ntype Discount {\n  adjustmentSource: String!\n  type: AdjustmentType!\n  description: String!\n  amount: Money!\n  amountWithTax: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateCustomerResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when updating a customer, returning either a Customer or an EmailAddressConflictError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_215\n\nLANGUAGE: graphql\nCODE:\n```\nunion UpdateCustomerResult =\nCustomer | EmailAddressConflictError\n```\n\n----------------------------------------\n\nTITLE: Default Order Access Strategy Implementation\nDESCRIPTION: Default implementation of OrderByCodeAccessStrategy that provides time-limited access for anonymous users and permanent access for order owners.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-by-code-access-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultOrderByCodeAccessStrategy implements OrderByCodeAccessStrategy {\n    constructor(anonymousAccessDuration: string)\n    canAccessOrder(ctx: RequestContext, order: Order) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: AssetServerPlugin Class Definition in TypeScript\nDESCRIPTION: The class definition for AssetServerPlugin, showing its implementation of NestModule and lifecycle hooks, as well as its methods for initialization and configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass AssetServerPlugin implements NestModule, OnApplicationBootstrap, OnApplicationShutdown {\n    init(options: AssetServerOptions) => Type<AssetServerPlugin>;\n    constructor(options: AssetServerOptions, processContext: ProcessContext, moduleRef: ModuleRef, assetServer: AssetServer)\n    configure(consumer: MiddlewareConsumer) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Collections in TypeScript\nDESCRIPTION: Methods for creating and updating Collection entities in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(ctx: RequestContext, input: CreateCollectionInput): Promise<Translated<Collection>>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(ctx: RequestContext, input: UpdateCollectionInput): Promise<Translated<Collection>>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateOrderInput in GraphQL for Vendure Shop API\nDESCRIPTION: Defines an input type for updating order information in the Vendure shop API. Currently only supports customFields for extending the order with additional data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_49\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateOrderInput {\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelOrderResult GraphQL Union Type in Vendure\nDESCRIPTION: Defines the CancelOrderResult GraphQL union type which represents the possible outcomes when canceling an order. It can be either a successful Order or one of several error types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\nunion CancelOrderResult =\n  Order | EmptyOrderLineSelectionError | QuantityTooGreatError | MultipleOrderError | CancelActiveOrderError | OrderStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Shipping Eligibility Checkers in Vendure\nDESCRIPTION: This TypeScript code shows how to add custom shipping eligibility checkers to the Vendure configuration, making them available when setting up new ShippingMethods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/shipping/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultShippingEligibilityChecker, VendureConfig } from '@vendure/core';\nimport { maxWeightChecker } from './shipping-methods/max-weight-checker';\n\nexport const config: VendureConfig = {\n    // ...\n    shippingOptions: {\n        shippingEligibilityCheckers: [\n            defaultShippingEligibilityChecker,\n            maxWeightChecker,\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationInput in GraphQL\nDESCRIPTION: This input type is used for authentication purposes. It contains a single field for native authentication input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ninput AuthenticationInput {\n  native: NativeAuthInput\n}\n```\n\n----------------------------------------\n\nTITLE: Product Type Definition in GraphQL\nDESCRIPTION: Defines the Product type with fields for basic product information, variants, assets, options and translations. Includes relationships to other entities like Channel, Asset, ProductVariant etc.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_134\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product {\n  channels: [Channel!]!\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n  enabled: Boolean!\n  featuredAsset: Asset\n  assets: [Asset!]!\n  variants: [ProductVariant!]!\n  variantList(options: ProductVariantListOptions): ProductVariantList!\n  optionGroups: [ProductOptionGroup!]!\n  facetValues: [FacetValue!]!\n  translations: [ProductTranslation!]!\n  collections: [Collection!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL OrderAddress Type Definition for Vendure Admin API\nDESCRIPTION: Defines the OrderAddress type used for storing shipping and billing address information within orders in the Vendure e-commerce platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_112\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderAddress {\n  fullName: String\n  company: String\n  streetLine1: String\n  streetLine2: String\n  city: String\n  province: String\n  postalCode: String\n  country: String\n  countryCode: String\n  phoneNumber: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Variants with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a single product variant. Accepts the ID of the variant to delete and returns a DeletionResponse object with the result of the operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_53\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a ProductVariant\n\"\"\"\ntype Mutation {\n  deleteProductVariant(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON scalar in GraphQL\nDESCRIPTION: GraphQL scalar type definition for the JSON type, representing JSON values as specified by ECMA-404 standard, allowing for complex structured data to be passed through the API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_56\n\nLANGUAGE: graphql\nCODE:\n```\nscalar JSON\n```\n\n----------------------------------------\n\nTITLE: Defining SlugValidator Class in TypeScript\nDESCRIPTION: The SlugValidator class is used to validate slugs for URL-safe and unique values. It is designed to work with translatable entities like Product and Collection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/slug-validator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SlugValidator {\n    constructor(connection: TransactionalConnection)\n    validateSlugs(ctx: RequestContext, input: T, translationEntity: Type<E>) => Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Metric Type Enum (GraphQL, GraphQL)\nDESCRIPTION: Defines a MetricType enum with values OrderCount, OrderTotal, and AverageOrderValue, representing the available types of analytics reported by the Vendure API. These metrics are used to parameterize statistics queries and reports. No special dependencies; used as a type for metric-type parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_9\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum MetricType {\nOrderCount\nOrderTotal\nAverageOrderValue\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Surcharges in Vendure (TypeScript)\nDESCRIPTION: Returns an array of all Surcharges associated with a specific Order. It takes a RequestContext and an order ID as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetOrderSurcharges(ctx: RequestContext, orderId: ID): Promise<Surcharge[]>\n```\n\n----------------------------------------\n\nTITLE: Custom UI Extension Translation Example\nDESCRIPTION: JSON structure for creating namespaced translations for custom UI extensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/adding-ui-translations/index.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my-reviews-plugin\": {\n    \"all-reviews\": \"All reviews\",\n    \"approve review\": \"Approve review\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordValidationError Type in GraphQL\nDESCRIPTION: The PasswordValidationError type represents errors when a password does not meet expected validation criteria. It includes errorCode, message, and validationErrorMessage fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_80\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type PasswordValidationError {\\n  errorCode: ErrorCode!\\n  message: String!\\n  validationErrorMessage: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Data in Vendure TypeScript\nDESCRIPTION: Example of configuring initial data including payment methods, roles, countries, tax rates, shipping methods and collections using the InitialData interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/importing-data/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InitialData, LanguageCode } from '@vendure/core';\n\nexport const initialData: InitialData = {\n    paymentMethods: [\n        {\n            name: 'Standard Payment',\n            handler: {\n                code: 'dummy-payment-handler',\n                arguments: [{ name: 'automaticSettle', value: 'false' }],\n            },\n        },\n    ],\n    roles: [\n        {\n            code: 'administrator',\n            description: 'Administrator',\n            permissions: [\n                Permission.CreateCatalog,\n                Permission.ReadCatalog,\n                Permission.UpdateCatalog,\n                Permission.DeleteCatalog,\n                Permission.CreateSettings,\n                Permission.ReadSettings,\n                Permission.UpdateSettings,\n                Permission.DeleteSettings,\n                Permission.CreateCustomer,\n                Permission.ReadCustomer,\n                Permission.UpdateCustomer,\n                Permission.DeleteCustomer,\n                Permission.CreateCustomerGroup,\n                Permission.ReadCustomerGroup,\n                Permission.UpdateCustomerGroup,\n                Permission.DeleteCustomerGroup,\n                Permission.CreateOrder,\n                Permission.ReadOrder,\n                Permission.UpdateOrder,\n                Permission.DeleteOrder,\n                Permission.CreateSystem,\n                Permission.ReadSystem,\n                Permission.UpdateSystem,\n                Permission.DeleteSystem,\n            ],\n        },\n    ],\n    defaultLanguage: LanguageCode.en,\n    countries: [\n        { name: 'Austria', code: 'AT', zone: 'Europe' },\n        { name: 'Malaysia', code: 'MY', zone: 'Asia' },\n        { name: 'United Kingdom', code: 'GB', zone: 'Europe' },\n    ],\n    defaultZone: 'Europe',\n    taxRates: [\n        { name: 'Standard Tax', percentage: 20 },\n        { name: 'Reduced Tax', percentage: 10 },\n        { name: 'Zero Tax', percentage: 0 },\n    ],\n    shippingMethods: [{ name: 'Standard Shipping', price: 500 }, { name: 'Express Shipping', price: 1000 }],\n    collections: [\n        {\n            name: 'Electronics',\n            filters: [\n                {\n                    code: 'facet-value-filter',\n                    args: { facetValueNames: ['Electronics'], containsAny: false },\n                },\n            ],\n            assetPaths: ['jakob-owens-274337-unsplash.jpg'],\n        },\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Adjustment Type in GraphQL\nDESCRIPTION: The `Adjustment` type details modifications applied to orders or items in the Vendure platform. It includes fields for the source, type, description, amount, and data, each tied to respective data types. It is used to track changes and maintain a clear record of adjustments in transactions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_3\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Adjustment {\n  adjustmentSource: String!\n  type: AdjustmentType!\n  description: String!\n  amount: Money!\n  data: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerInput in GraphQL for Vendure Shop API\nDESCRIPTION: Defines an input type for updating customer information in the Vendure shop API. Includes basic profile information fields and support for custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_48\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCustomerInput {\ntitle: String\nfirstName: String\nlastName: String\nphoneNumber: String\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCountryInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a country. It requires a country code, translations, and enabled status.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_45\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateCountryInput {\n  code: String!\n  translations: [CountryTranslationInput!]!\n  enabled: Boolean!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Money Scalar Type in GraphQL\nDESCRIPTION: Scalar type representing monetary values, supporting signed double-precision fractional values as specified by IEEE 754.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_61\n\nLANGUAGE: GraphQL\nCODE:\n```\nscalar Money\n```\n\n----------------------------------------\n\nTITLE: Custom Field Permissions Configuration\nDESCRIPTION: Demonstrates how to configure custom permissions for custom fields, specifically for a product rating field that requires specific review permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-permissions/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendurePlugin } from '@vendure/core';\nimport { productReviewPermission } from './constants';\n\n@VendurePlugin({\n    configuration: config => {\n        config.authOptions.customPermissions.push(productReviewPermission);\n        \n        config.customFields.Product.push({\n            name: 'rating',\n            type: 'int',\n            requiresPermission: [\n                productReviewPermission.Read, \n                productReviewPermission.Update,\n            ],\n        });\n        return config;\n    },\n})\nexport class ProductReviewPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Querying Eligible Shipping Methods for Digital Products in GraphQL\nDESCRIPTION: This GraphQL query retrieves eligible shipping methods for an order, including custom fields that identify digital shipping options. It returns shipping methods with their prices and a boolean flag indicating if they're for digital products.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  eligibleShippingMethods {\n    id\n    name\n    price\n    priceWithTax\n    customFields {\n      isDigital\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntry List Query Options and Pagination - GraphQL - GraphQL\nDESCRIPTION: Defines the HistoryEntryListOptions input for controlling pagination, sorting, and filtering of HistoryEntry queries. Supports skip/take for pagination, sort and filter via subordinate input types, and a filterOperator to toggle logical operation between AND/OR. Key parameters: skip (Int), take (Int), sort, filter, and filterOperator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_24\n\nLANGUAGE: graphql\nCODE:\n```\ninput HistoryEntryListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: HistoryEntrySortParameter\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: HistoryEntryFilterParameter\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Review Event in TypeScript\nDESCRIPTION: Demonstrates creating a custom event class for handling product review submissions by extending VendureEvent.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ID, RequestContext, VendureEvent } from '@vendure/core';\nimport { ProductReviewInput } from '../types';\n\n/**\n * @description\n * This event is fired whenever a ProductReview is submitted.\n */\nexport class ReviewSubmittedEvent extends VendureEvent {\n    constructor(\n        public ctx: RequestContext,\n        public input: ProductReviewInput,\n    ) {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePaymentMethodInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a payment method. It requires a code, enabled status, handler configuration, and translations, with an optional checker configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_52\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreatePaymentMethodInput {\n  code: String!\n  enabled: Boolean!\n  checker: ConfigurableOperationInput\n  handler: ConfigurableOperationInput!\n  translations: [PaymentMethodTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Icon Implementation in React Components\nDESCRIPTION: React component implementation of Clarity icons with various sizes, badges, and status indicators using the CdsIcon component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { starIcon, userIcon } from '@cds/core/icon';\nimport { CdsIcon } from '@vendure/admin-ui/react';\n\nexport function DemoComponent() {\n    return (\n        <>\n            <CdsIcon icon={starIcon} size=\"xs\" />\n            <CdsIcon icon={starIcon} size=\"sm\" />\n            <CdsIcon icon={starIcon} size=\"md\" />\n            <CdsIcon icon={starIcon} size=\"lg\" />\n            <CdsIcon icon={starIcon} size=\"xl\" />\n            <CdsIcon icon={starIcon} size=\"xxl\" />\n            \n            <CdsIcon icon={userIcon} badge=\"success\" />\n            <CdsIcon icon={userIcon} badge=\"info\" />\n            <CdsIcon icon={userIcon} badge=\"warning\" />\n            <CdsIcon icon={userIcon} badge=\"danger\" />\n            \n            <CdsIcon icon={userIcon} status=\"success\" />\n            <CdsIcon icon={userIcon} status=\"info\" />\n            <CdsIcon icon={userIcon} status=\"warning\" />\n            <CdsIcon icon={userIcon} status=\"danger\" />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting New API Features with JSDoc in TypeScript\nDESCRIPTION: Example of how to properly document new API features in TypeScript using JSDoc with the @since tag to indicate the version in which the API was introduced.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @description\n * Sets the value of the new API thing.\n *\n * @since 1.2.0\n */\nmyNewApi: number;\n```\n\n----------------------------------------\n\nTITLE: Defining the createRole Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createRole` mutation for creating a new Role. It takes a non-nullable `CreateRoleInput` object as input, specifying the details of the role to be created, and returns the newly created `Role` object, guaranteed to be non-null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new Role\n\"\"\"\ntype Mutation {\n  createRole(input: CreateRoleInput!): Role!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntryComponent Interface in TypeScript\nDESCRIPTION: The TypeScript interface definition for HistoryEntryComponent which must be implemented by components that display history entries in the Order or Customer history timeline. It includes required properties for entry data, display type determination, featured status, and optional methods for names and icons.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/history-entry-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HistoryEntryComponent {\n    entry: TimelineHistoryEntry;\n    getDisplayType: (entry: TimelineHistoryEntry) => TimelineDisplayType;\n    isFeatured: (entry: TimelineHistoryEntry) => boolean;\n    getName?: (entry: TimelineHistoryEntry) => string | undefined;\n    getIconShape?: (entry: TimelineHistoryEntry) => string | string[] | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Role by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a Role by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_31\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  role(id: ID!): Role\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MariaDB with Docker Compose - Bash\nDESCRIPTION: This Bash command uses Docker Compose to start a MariaDB instance in detached mode for Vendure development. It requires Docker and Docker Compose to be installed. The command should be run from the project root. It does not create databases automatically—only starts the MariaDB service as defined in the Docker Compose file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d mariadb\n\n```\n\n----------------------------------------\n\nTITLE: Custom Theme CSS Variables\nDESCRIPTION: CSS stylesheet defining custom theme properties for link colors in the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/admin-ui-theming-branding/index.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n:root {\n  --clr-link-active-color: hsl(110, 65%, 57%);\n  --clr-link-color: hsl(110, 65%, 57%);\n  --clr-link-hover-color: hsl(110, 65%, 57%);\n  --clr-link-visited-color: hsl(110, 55%, 75%);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding REST Plugin to Vendure Configuration\nDESCRIPTION: Demonstrates how to include the REST plugin in the main Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/rest-endpoint/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { RestPlugin } from './plugins/rest-plugin/rest.plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        // ...\n        // highlight-next-line\n        RestPlugin,\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean GraphQL Scalar Type in Vendure\nDESCRIPTION: Defines the Boolean GraphQL scalar type which represents true or false values in the GraphQL schema.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `Boolean` scalar type represents `true` or `false`.\n\"\"\"\nscalar Boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular Route Definition\nDESCRIPTION: Route configuration for the Angular Greeter component using registerRouteComponent\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\nimport { GreeterComponent } from './components/greeter/greeter.component';\n\nexport default [\n    registerRouteComponent({\n        component: GreeterComponent,\n        path: '',\n        title: 'Greeter Page',\n        breadcrumb: 'Greeter',\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Roles with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for bulk deleting multiple roles. Accepts an array of role IDs and returns an array of DeletionResponse objects with results for each deletion operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_60\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple Roles\n\"\"\"\ntype Mutation {\n  deleteRoles(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Definition Example in TypeScript\nDESCRIPTION: Demonstrates how to define a PermissionDefinition object and use the resulting permission strings with the NavMenuSection interface's requiresPermission property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/nav-menu-section.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyPermission = new PermissionDefinition('ProductReview');\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanCustomFieldConfig GraphQL Object Type in Vendure\nDESCRIPTION: Defines the BooleanCustomFieldConfig GraphQL object type which represents the configuration for a custom field of boolean type. It includes properties like name, whether it's a list, labels, and permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype BooleanCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Abstract OrderLineReference Entity in TypeScript\nDESCRIPTION: This TypeScript class defines the abstract base entity `OrderLineReference`. It serves as a foundation for other entities that need to reference an `OrderLine`. It includes a `quantity` field and establishes a many-to-one relationship with the `OrderLine` entity, ensuring cascade deletion. It extends `VendureEntity` and requires TypeORM decorators (`@Column`, `@Index`, `@ManyToOne`, `@EntityId`).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-line-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass OrderLineReference extends VendureEntity {\n    @Column()\n    quantity: number;\n    @Index()\n    @ManyToOne(type => OrderLine, line => line.linesReferences, { onDelete: 'CASCADE' })\n    orderLine: OrderLine;\n    @EntityId()\n    orderLineId: ID;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodTranslation GraphQL Type\nDESCRIPTION: GraphQL schema definition for the PaymentMethodTranslation type that contains localized name and description for a payment method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_129\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethodTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: PasswordResetEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle password reset requests. Triggered when a Customer requests a password reset email.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nclass PasswordResetEvent extends VendureEvent {\n    constructor(ctx: RequestContext, user: User)\n}\n```\n\n----------------------------------------\n\nTITLE: LocaleDatePipe Class Definition in TypeScript\nDESCRIPTION: The class definition for LocaleDatePipe which extends LocaleBasePipe and implements PipeTransform. It provides functionality to format dates according to the selected UI language using the Intl API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-date-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LocaleDatePipe extends LocaleBasePipe implements PipeTransform {\n    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)\n    transform(value: unknown, args: unknown[]) => unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tax Rates with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CreateTaxRateInput GraphQL input type used to create new tax rates in Vendure. It requires name, enabled status, value, category ID, and zone ID, with optional customer group ID and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_67\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateTaxRateInput {\nname: String!\nenabled: Boolean!\nvalue: Float!\ncategoryId: ID!\nzoneId: ID!\ncustomerGroupId: ID\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionTranslation GraphQL Object Type\nDESCRIPTION: Defines the CollectionTranslation type, which contains translated information for a collection, including name, slug, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_28\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype CollectionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Custom Field in Vendure\nDESCRIPTION: Shows how to configure a custom field as an array type. The example sets up a list of strings for storing multiple info URLs on a Product.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'infoUrls',\n                type: 'string',\n                // highlight-next-line\n                list: true,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining TypedCustomSingleFieldConfig Type in TypeScript\nDESCRIPTION: This code snippet defines the TypedCustomSingleFieldConfig type, which is used to configure custom fields for entities in Vendure. It includes properties for setting default values and validation functions for single-value custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/typed-custom-single-field-config.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype TypedCustomSingleFieldConfig<T extends CustomFieldType, C extends CustomField> = BaseTypedCustomFieldConfig<T, C> & {\n    list?: false;\n    defaultValue?: DefaultValueType<T>;\n    validate?: (\n        value: DefaultValueType<T>,\n        injector: Injector,\n        ctx: RequestContext,\n    ) => string | LocalizedString[] | void | Promise<string | LocalizedString[] | void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCollectionTranslationInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating translations for a collection. It requires language code, name, slug, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_44\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateCollectionTranslationInput {\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateTagInput GraphQL Input Type\nDESCRIPTION: GraphQL input type for updating a tag entity. Requires an ID and allows modifying the tag value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_201\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateTagInput {\n  id: ID!\n  value: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorCode Enum in GraphQL for Vendure\nDESCRIPTION: This enum defines various error codes that can occur in the Vendure e-commerce platform. It includes codes for authentication errors, order-related errors, payment issues, and user management errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_5\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum ErrorCode {\n  UNKNOWN_ERROR\n  NATIVE_AUTH_STRATEGY_ERROR\n  INVALID_CREDENTIALS_ERROR\n  ORDER_STATE_TRANSITION_ERROR\n  EMAIL_ADDRESS_CONFLICT_ERROR\n  GUEST_CHECKOUT_ERROR\n  ORDER_LIMIT_ERROR\n  NEGATIVE_QUANTITY_ERROR\n  INSUFFICIENT_STOCK_ERROR\n  COUPON_CODE_INVALID_ERROR\n  COUPON_CODE_EXPIRED_ERROR\n  COUPON_CODE_LIMIT_ERROR\n  ORDER_MODIFICATION_ERROR\n  INELIGIBLE_SHIPPING_METHOD_ERROR\n  NO_ACTIVE_ORDER_ERROR\n  ORDER_INTERCEPTOR_ERROR\n  ORDER_PAYMENT_STATE_ERROR\n  INELIGIBLE_PAYMENT_METHOD_ERROR\n  PAYMENT_FAILED_ERROR\n  PAYMENT_DECLINED_ERROR\n  ALREADY_LOGGED_IN_ERROR\n  MISSING_PASSWORD_ERROR\n  PASSWORD_VALIDATION_ERROR\n  PASSWORD_ALREADY_SET_ERROR\n  VERIFICATION_TOKEN_INVALID_ERROR\n  VERIFICATION_TOKEN_EXPIRED_ERROR\n  IDENTIFIER_CHANGE_TOKEN_INVALID_ERROR\n  IDENTIFIER_CHANGE_TOKEN_EXPIRED_ERROR\n  PASSWORD_RESET_TOKEN_INVALID_ERROR\n  PASSWORD_RESET_TOKEN_EXPIRED_ERROR\n  NOT_VERIFIED_ERROR\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundAmountError Object Type in GraphQL\nDESCRIPTION: Defines an error type returned when attempting to refund more than the available amount. Includes the maximum refundable amount as a property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_151\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned if `amount` is greater than the maximum un-refunded amount of the Payment\"\"\"\ntype RefundAmountError {\n  errorCode: ErrorCode!\n  message: String!\n  maximumRefundable: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveOrderItemsResult Union Type in GraphQL\nDESCRIPTION: GraphQL union type representing possible outcomes when removing items from an order. It can return either an Order, OrderModificationError, or OrderInterceptorError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_162\n\nLANGUAGE: graphql\nCODE:\n```\nunion RemoveOrderItemsResult = Order | OrderModificationError | OrderInterceptorError\n```\n\n----------------------------------------\n\nTITLE: Using CacheService in a Custom Service\nDESCRIPTION: Demonstrates how to inject and use the CacheService in a custom service to cache the results of expensive operations. Includes checking for cached values and setting new values with a TTL.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { CacheService } from '@vendure/core';\n\n@Injectable()\nexport class MyService {\n    constructor(private cacheService: CacheService) {}\n\n    async myMethod() {\n        const cacheKey = 'MyService.myMethod';\n        const cachedValue = await this.cacheService.get(cacheKey);\n        if (cachedValue) {\n            return cachedValue;\n        }\n        const newValue = await this.expensiveOperation();\n        // Cache the result for 1 minute (60 * 1000 milliseconds)\n        await this.cacheService.set(cacheKey, newValue, { ttl: 60 * 1000 });\n        return newValue;\n    }\n\n    private async expensiveOperation() {\n        // Do something expensive\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundStates Interface in TypeScript\nDESCRIPTION: This code snippet defines the RefundStates interface, which is intended to extend the standard RefundState in Vendure. The interface is currently empty, allowing for custom implementation of refund states.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/refund-states.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RefundStates {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Entities with JSDoc\nDESCRIPTION: Example of documenting entity classes for a Vendure plugin using JSDoc comments. It demonstrates how to tag entities with '@category Entities' and document class properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Represents a transaction of loyalty points,\n * when points are added or deducted.\n *\n * @category Entities\n */\n@Entity()\nexport class LoyaltyPointsTransaction extends VendureEntity {\n\n    /**\n     * The number of points added or deducted.\n     * A negative value indicates points deducted.\n     */\n    @Column()\n    points: number;\n\n    /**\n     * The Customer to whom the points were added or deducted.\n     */\n    @ManyToOne(type => Customer)\n    customer: Customer;\n\n    /**\n     * The reason for the points transaction.\n     */\n    @Column()\n    reason: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime GraphQL Scalar in Vendure Shop API\nDESCRIPTION: Defines the `DateTime` custom scalar type. It represents a date-time string in UTC, formatted according to the RFC 3339 profile of ISO 8601 (e.g., '2007-12-03T10:15:30Z'). This scalar is used for timestamp fields throughout the schema.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nA date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.\n\"\"\"\nscalar DateTime\n```\n\n----------------------------------------\n\nTITLE: Adding Wishlist Plugin to VendureConfig in TypeScript\nDESCRIPTION: This code demonstrates how to add the Wishlist plugin to the VendureConfig object in the main configuration file of a Vendure project.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { WishlistPlugin } from './plugins/wishlist-plugin/wishlist.plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        // ...\n        WishlistPlugin,\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SortOrder Enum in GraphQL for Vendure Ecommerce\nDESCRIPTION: This snippet defines the SortOrder enum used in the Vendure ecommerce platform. It specifies the sorting order options for queries, including ascending (ASC) and descending (DESC) orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\nenum SortOrder {\n  ASC\n  DESC\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResultAsset Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for assets associated with search results, including id, preview URL, and focal point.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_170\n\nLANGUAGE: graphql\nCODE:\n```\ntype SearchResultAsset {\n  id: ID!\n  preview: String!\n  focalPoint: Coordinate\n}\n```\n\n----------------------------------------\n\nTITLE: TransitionPaymentToStateResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when transitioning a payment to a different state, returning either a Payment or an error.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_213\n\nLANGUAGE: graphql\nCODE:\n```\nunion TransitionPaymentToStateResult =\nPayment | PaymentStateTransitionError\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Email Template Variables in Vendure\nDESCRIPTION: Example of setting up global email template variables in the Vendure configuration. These variables are available to all email templates and handlers throughout the application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/email/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { EmailPlugin } from '@vendure/email-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        EmailPlugin.init({\n            // ...\n            // highlight-start\n            globalTemplateVars: {\n                fromAddress: '\"MyShop\" <noreply@myshop.com>',\n                verifyEmailAddressUrl: 'https://www.myshop.com/verify',\n                passwordResetUrl: 'https://www.myshop.com/password-reset',\n                changeEmailAddressUrl: 'https://www.myshop.com/verify-email-address-change'\n            },\n            // highlight-end\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: NotificationType Definition in TypeScript\nDESCRIPTION: Type definition for the available notification types in the NotificationService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/notification-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype NotificationType = 'info' | 'success' | 'error' | 'warning'\n```\n\n----------------------------------------\n\nTITLE: Defining IntStructFieldConfig in GraphQL\nDESCRIPTION: GraphQL type definition for integer struct field configuration in Vendure, containing properties for defining structured data fields with integer values, including validation and UI properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_54\n\nLANGUAGE: graphql\nCODE:\n```\ntype IntStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  min: Int\n  max: Int\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type BooleanOperators\nDESCRIPTION: Defines the `BooleanOperators` input type for filtering based on a Boolean field. It allows filtering by exact equality (`eq`) or checking if the field is null (`isNull`).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a Boolean field\n\"\"\"\ninput BooleanOperators {\n  eq: Boolean\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for Component Registration\nDESCRIPTION: TypeScript function signature showing the registerReactDataTableComponent function that accepts a ReactDataTableComponentConfig parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-data-table-component.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerReactDataTableComponent(config: ReactDataTableComponentConfig): void\n```\n\n----------------------------------------\n\nTITLE: Using AssetPreviewPipe in HTML Templates\nDESCRIPTION: Examples of how to use the AssetPreviewPipe in HTML templates to generate preview URLs for assets. The pipe can be used with preset sizes or custom numeric values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/asset-preview-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img [src]=\"asset | assetPreview:'tiny'\" />\n<img [src]=\"asset | assetPreview:150\" />\n```\n\n----------------------------------------\n\nTITLE: Using Custom Environment Variables in Plugin Configuration\nDESCRIPTION: Example of using a custom environment variable to configure a plugin in Vendure's configuration file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  plugins: [\n    MyPlugin.init({\n      apiKey: process.env.MY_API_KEY,\n    }),\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining I18nError Class TypeScript\nDESCRIPTION: The I18nError class extends GraphQLError to include features allowing error messages to be internationalized. The class constructor accepts a message string, a variables object containing key-value pairs for dynamic content in the message, an optional error code, and an optional log level with a default of LogLevel.Warn. This class is not intended for direct use, but should be extended by more specific error classes. Dependencies include the GraphQLError class, and any usage requires proper JSON format for the error messages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/i18n-error.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass I18nError extends GraphQLError {\n    constructor(message: string, variables: { [key: string]: string | number } = {}, code?: string, logLevel: LogLevel = LogLevel.Warn)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining addActionBarItem Function Signature - TypeScript\nDESCRIPTION: Displays the TypeScript function signature for addActionBarItem, which takes a config object of type ActionBarItem and returns void. This function is essential for developers extending the Vendure Admin UI, and it requires the definition of an ActionBarItem object as input. There are no direct outputs from the function, as it registers the action bar item for the UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/add-action-bar-item.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addActionBarItem(config: ActionBarItem): void\n```\n\n----------------------------------------\n\nTITLE: Defining FacetFilterParameter Input Type in GraphQL\nDESCRIPTION: Provides filtering options for Facets, including ID, date, language, name, and code operators. It also allows for logical AND and OR combinations of filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  name: StringOperators\n  code: StringOperators\n  _and: [FacetFilterParameter!]\n  _or: [FacetFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCustomerGroupInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a customer group. It requires a name and optionally includes customer IDs to immediately assign to the group.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_46\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateCustomerGroupInput {\n  name: String!\n  customerIds: [ID!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: PageDetailLayout Function Signature\nDESCRIPTION: This code snippet shows the TypeScript signature of the PageDetailLayout function, including its props type definition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/page-detail-layout.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction PageDetailLayout(props: PropsWithChildren<{ sidebar?: ReactNode }>): void\n```\n\n----------------------------------------\n\nTITLE: Deleting Order in Vendure (TypeScript)\nDESCRIPTION: Deletes an Order, ensuring that any Sessions referencing this Order are dereferenced before deletion. It takes a RequestContext and either an Order object or an order ID as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeleteOrder(ctx: RequestContext, orderOrId: ID | Order)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Type Example\nDESCRIPTION: Shows how to define a query type for fetching customers\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  customers: [Customer!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EmailPlugin with Static Handlers and Templates in TypeScript\nDESCRIPTION: Demonstrates initializing the Vendure EmailPlugin using default email handlers, file-based template loader, and static SMTP transport configuration. This setup requires dependencies such as '@vendure/email-plugin', file system access for templates, and SMTP credentials. Parameters like 'plugins', 'handler', and 'transport' are key; input expects appropriate SMTP and template paths, and outputs are sent transactional emails. Limitations include fixed handlers and static SMTP details unless customized.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defaultEmailHandlers, EmailPlugin, FileBasedTemplateLoader } from '@vendure/email-plugin';\n\nconst config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    EmailPlugin.init({\n      handler: defaultEmailHandlers,\n      templateLoader: new FileBasedTemplateLoader(path.join(__dirname, '../static/email/templates')),\n      transport: {\n        type: 'smtp',\n        host: 'smtp.example.com',\n        port: 587,\n        auth: {\n          user: 'username',\n          pass: 'password',\n        }\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RequestUpdateCustomerEmailAddressResult Union Type in GraphQL\nDESCRIPTION: Union type definition for possible results when requesting an email address update, handling success or various error conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_111\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion RequestUpdateCustomerEmailAddressResult =\nSuccess | InvalidCredentialsError | EmailAddressConflictError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Defining UiExtensionRouteDefinition Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for UiExtensionRouteDefinition, which specifies configuration for adding custom routes to the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UiExtensionRouteDefinition {\n    route: string;\n    filePath: string;\n    prefix?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running CLI Script with Node\nDESCRIPTION: Commands to execute the TypeScript CLI script using either npx or yarn with ts-node.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/stand-alone-scripts/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx ts-node src/get-product-count.ts\n\n# or\n\nyarn ts-node src/get-product-count.ts\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Fields with QueryBuilder\nDESCRIPTION: Using QueryBuilder to access relation custom fields in TypeScript.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await this.connection.getRepository(ctx, Customer).createQueryBuilder('customer')\n    .leftJoinAndSelect('customer.customFields.avatar', 'avatar')\n    .where('customer.id = :id', { id: 1 })\n    .getOne();\nconsole.log(customer.avatar);\n```\n\n----------------------------------------\n\nTITLE: Defining TestingLogger Class in TypeScript\nDESCRIPTION: The declaration of the TestingLogger class that implements the VendureLogger interface. It supports creating spies for various logging levels which can be used to capture and assert log calls during tests.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/testing-logger.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TestingLogger<Spy extends (...args: any[]) => any> implements VendureLogger {\n    constructor(createSpyFn: () => Spy)\n    debugSpy: Spy;\n    errorSpy: Spy;\n    infoSpy: Spy;\n    verboseSpy: Spy;\n    warnSpy: Spy;\n    debug(message: string, context?: string) => void;\n    error(message: string, context?: string, trace?: string) => void;\n    info(message: string, context?: string) => void;\n    verbose(message: string, context?: string) => void;\n    warn(message: string, context?: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Group in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a single CustomerGroup. Takes a CustomerGroup ID and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCustomerGroup(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in Custom Vendure Plugins\nDESCRIPTION: Shows how to implement logging within custom Vendure plugins using the Logger class with a custom context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/logging/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from '@vendure/core';\n\n// It is customary to define a logger context for your plugin\n// so that the log messages can be easily identified.\nconst loggerCtx = 'MyPlugin';\n\n// somewhere in your code\nLogger.info(`My plugin is doing something!`, loggerCtx);\n```\n\n----------------------------------------\n\nTITLE: Querying Order by Code\nDESCRIPTION: GraphQL query to retrieve order details using the order code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery OrderByCode($code: String!) {\n  orderByCode(code: $code) {\n    ...ActiveOrder\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing PriceCalculationStrategy in Vendure TypeScript\nDESCRIPTION: Notes the removal of the `PriceCalculationStrategy` interface in Vendure's TypeScript API as of v1.0.0. Developers should migrate to using the `OrderItemPriceCalculationStrategy` interface for custom order item price calculations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nPriceCalculationStrategy\n```\n\nLANGUAGE: typescript\nCODE:\n```\nOrderItemPriceCalculationStrategy\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Directory Structure\nDESCRIPTION: Example folder structure for organizing UI extension files including routes and framework-specific application code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/using-other-frameworks/index.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsrc\n└─plugins\n  └─ my-plugin\n    └─ ui\n      ├─ routes.ts\n      └─ vue-app\n        └─ (directory created by `vue create`, for example)\n```\n\n----------------------------------------\n\nTITLE: ProductFilterParameter Input Type for Product Filtering\nDESCRIPTION: Defines parameters for filtering products in the Vendure shop API. Allows filtering by product ID, creation/update dates, language, name, slug, description, and enabled status, with support for combining filters using logical operators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_36\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductFilterParameter {\nid: IDOperators\ncreatedAt: DateOperators\nupdatedAt: DateOperators\nlanguageCode: StringOperators\nname: StringOperators\nslug: StringOperators\ndescription: StringOperators\nenabled: BooleanOperators\n_and: [ProductFilterParameter!]\n_or: [ProductFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the FulfillmentLine Entity in TypeScript\nDESCRIPTION: This TypeScript class defines the `FulfillmentLine` entity. It represents a specific line item from an `Order` that has been included in a `Fulfillment`. It extends `OrderLineReference` and establishes a many-to-one relationship with the `Fulfillment` entity, storing the `fulfillmentId`. Requires TypeORM decorators (`@Index`, `@ManyToOne`, `@EntityId`) and depends on the `Fulfillment` and `OrderLineReference` entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-line-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"Signature\"\nclass FulfillmentLine extends OrderLineReference {\n    constructor(input?: DeepPartial<FulfillmentLine>)\n    @Index()\n    @ManyToOne(type => Fulfillment, fulfillment => fulfillment.lines)\n    fulfillment: Fulfillment;\n    @EntityId()\n    fulfillmentId: ID;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining OrderHistoryEntry Entity with TypeORM (TypeScript)\nDESCRIPTION: This snippet defines the OrderHistoryEntry class, which extends the HistoryEntry entity within the Vendure framework using TypeScript and TypeORM decorators. It includes a constructor accepting a DeepPartial for flexible initialization and establishes a many-to-one relationship to the Order entity with cascade delete behavior. Dependencies include Vendure core entity types, TypeORM, and relevant decorators. The primary parameter is 'input' (DeepPartial of the entity type), and the class exposes an 'order' property of type Order; it's mainly used to track event history for orders, requiring TypeORM and Vendure's data model.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/order-history-entry.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass OrderHistoryEntry extends HistoryEntry {\n    constructor(input: DeepPartial<OrderHistoryEntry>)\n    @Index()\n    @ManyToOne(type => Order, { onDelete: 'CASCADE' })\n    order: Order;\n}\n```\n\n----------------------------------------\n\nTITLE: EntityHydrator Class Definition\nDESCRIPTION: The class definition of EntityHydrator, showing its constructor and hydrate method signatures.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/entity-hydrator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass EntityHydrator {\n    constructor(connection: TransactionalConnection, productPriceApplicator: ProductPriceApplicator, translator: TranslatorService)\n    hydrate(ctx: RequestContext, target: Entity, options: HydrateOptions<Entity>) => Promise<Entity>;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple AND Facet Filters Example\nDESCRIPTION: JSON example showing how to combine multiple facet value filters with AND logic. This example filters products that have both the 'Camera' category AND 'Nikkon' brand facet values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"facetValueFilters\": [\n    { \"and\": \"9\" },\n    { \"and\": \"11\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResult Type in GraphQL\nDESCRIPTION: Defines a detailed GraphQL type for individual search results, including product and variant information, pricing, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_169\n\nLANGUAGE: graphql\nCODE:\n```\ntype SearchResult {\n  enabled: Boolean!\n  channelIds: [ID!]!\n  sku: String!\n  slug: String!\n  productId: ID!\n  productName: String!\n  productAsset: SearchResultAsset\n  productVariantId: ID!\n  productVariantName: String!\n  productVariantAsset: SearchResultAsset\n  price: SearchResultPrice!\n  priceWithTax: SearchResultPrice!\n  currencyCode: CurrencyCode!\n  description: String!\n  facetIds: [ID!]!\n  facetValueIds: [ID!]!\n  collectionIds: [ID!]!\n  score: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavMenuBadge Interface in TypeScript\nDESCRIPTION: This interface defines a color-coded notification badge that can be displayed next to a navigation menu item's icon in the Vendure admin UI. It includes configuration for the badge type and whether it should propagate to the parent section.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/navigation-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavMenuBadge {\n    type: NavMenuBadgeType;\n    propagateToSection?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorSortParameter in GraphQL\nDESCRIPTION: Defines the parameters for sorting a list of Administrators. Allows sorting by `id`, `createdAt`, `updatedAt`, `firstName`, `lastName`, and `emailAddress` using the `SortOrder` enum (ASC or DESC).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ninput AdministratorSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  firstName: SortOrder\n  lastName: SortOrder\n  emailAddress: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Option Group in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a ProductOptionGroup by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_20\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  productOptionGroup(id: ID!): ProductOptionGroup\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultGuestCheckoutStrategyOptions Interface\nDESCRIPTION: Interface definition for DefaultGuestCheckoutStrategyOptions, specifying configuration options for the DefaultGuestCheckoutStrategy. It includes options to allow or disallow guest checkouts and guest checkouts for registered customers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-guest-checkout-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DefaultGuestCheckoutStrategyOptions {\n    allowGuestCheckouts?: boolean;\n    allowGuestCheckoutForRegisteredCustomers?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Seller by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a Seller by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_34\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  seller(id: ID!): Seller\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrencyCode Enum in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `CurrencyCode` enum, which represents standard ISO 4217 currency codes. Each enum value (e.g., AED, AFN) corresponds to a specific currency and includes a comment with the currency's full name. This enum is used within the Vendure GraphQL schema to specify currency types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nISO 4217 currency code\n\n\n\"\"\"\nenum CurrencyCode {\n    \"\"\"United Arab Emirates dirham\"\"\"\n    AED\n    \"\"\"Afghan afghani\"\"\"\n    AFN\n    \"\"\"Albanian lek\"\"\"\n    ALL\n    \"\"\"Armenian dram\"\"\"\n    AMD\n    \"\"\"Netherlands Antillean guilder\"\"\"\n    ANG\n    \"\"\"Angolan kwanza\"\"\"\n    AOA\n    \"\"\"Argentine peso\"\"\"\n    ARS\n    \"\"\"Australian dollar\"\"\"\n    AUD\n    \"\"\"Aruban florin\"\"\"\n    AWG\n    \"\"\"Azerbaijani manat\"\"\"\n    AZN\n    \"\"\"Bosnia and Herzegovina convertible mark\"\"\"\n    BAM\n    \"\"\"Barbados dollar\"\"\"\n    BBD\n    \"\"\"Bangladeshi taka\"\"\"\n    BDT\n    \"\"\"Bulgarian lev\"\"\"\n    BGN\n    \"\"\"Bahraini dinar\"\"\"\n    BHD\n    \"\"\"Burundian franc\"\"\"\n    BIF\n    \"\"\"Bermudian dollar\"\"\"\n    BMD\n    \"\"\"Brunei dollar\"\"\"\n    BND\n    \"\"\"Boliviano\"\"\"\n    BOB\n    \"\"\"Brazilian real\"\"\"\n    BRL\n    \"\"\"Bahamian dollar\"\"\"\n    BSD\n    \"\"\"Bhutanese ngultrum\"\"\"\n    BTN\n    \"\"\"Botswana pula\"\"\"\n    BWP\n    \"\"\"Belarusian ruble\"\"\"\n    BYN\n    \"\"\"Belize dollar\"\"\"\n    BZD\n    \"\"\"Canadian dollar\"\"\"\n    CAD\n    \"\"\"Congolese franc\"\"\"\n    CDF\n    \"\"\"Swiss franc\"\"\"\n    CHF\n    \"\"\"Chilean peso\"\"\"\n    CLP\n    \"\"\"Renminbi (Chinese) yuan\"\"\"\n    CNY\n    \"\"\"Colombian peso\"\"\"\n    COP\n    \"\"\"Costa Rican colon\"\"\"\n    CRC\n    \"\"\"Cuban convertible peso\"\"\"\n    CUC\n    \"\"\"Cuban peso\"\"\"\n    CUP\n    \"\"\"Cape Verde escudo\"\"\"\n    CVE\n    \"\"\"Czech koruna\"\"\"\n    CZK\n    \"\"\"Djiboutian franc\"\"\"\n    DJF\n    \"\"\"Danish krone\"\"\"\n    DKK\n    \"\"\"Dominican peso\"\"\"\n    DOP\n    \"\"\"Algerian dinar\"\"\"\n    DZD\n    \"\"\"Egyptian pound\"\"\"\n    EGP\n    \"\"\"Eritrean nakfa\"\"\"\n    ERN\n    \"\"\"Ethiopian birr\"\"\"\n    ETB\n    \"\"\"Euro\"\"\"\n    EUR\n    \"\"\"Fiji dollar\"\"\"\n    FJD\n    \"\"\"Falkland Islands pound\"\"\"\n    FKP\n    \"\"\"Pound sterling\"\"\"\n    GBP\n    \"\"\"Georgian lari\"\"\"\n    GEL\n    \"\"\"Ghanaian cedi\"\"\"\n    GHS\n    \"\"\"Gibraltar pound\"\"\"\n    GIP\n    \"\"\"Gambian dalasi\"\"\"\n    GMD\n    \"\"\"Guinean franc\"\"\"\n    GNF\n    \"\"\"Guatemalan quetzal\"\"\"\n    GTQ\n    \"\"\"Guyanese dollar\"\"\"\n    GYD\n    \"\"\"Hong Kong dollar\"\"\"\n    HKD\n    \"\"\"Honduran lempira\"\"\"\n    HNL\n    \"\"\"Croatian kuna\"\"\"\n    HRK\n    \"\"\"Haitian gourde\"\"\"\n    HTG\n    \"\"\"Hungarian forint\"\"\"\n    HUF\n    \"\"\"Indonesian rupiah\"\"\"\n    IDR\n    \"\"\"Israeli new shekel\"\"\"\n    ILS\n    \"\"\"Indian rupee\"\"\"\n    INR\n    \"\"\"Iraqi dinar\"\"\"\n    IQD\n    \"\"\"Iranian rial\"\"\"\n    IRR\n    \"\"\"Icelandic króna\"\"\"\n    ISK\n    \"\"\"Jamaican dollar\"\"\"\n    JMD\n    \"\"\"Jordanian dinar\"\"\"\n    JOD\n    \"\"\"Japanese yen\"\"\"\n    JPY\n    \"\"\"Kenyan shilling\"\"\"\n    KES\n    \"\"\"Kyrgyzstani som\"\"\"\n    KGS\n    \"\"\"Cambodian riel\"\"\"\n    KHR\n    \"\"\"Comoro franc\"\"\"\n    KMF\n    \"\"\"North Korean won\"\"\"\n    KPW\n    \"\"\"South Korean won\"\"\"\n    KRW\n    \"\"\"Kuwaiti dinar\"\"\"\n    KWD\n    \"\"\"Cayman Islands dollar\"\"\"\n    KYD\n    \"\"\"Kazakhstani tenge\"\"\"\n    KZT\n    \"\"\"Lao kip\"\"\"\n    LAK\n    \"\"\"Lebanese pound\"\"\"\n    LBP\n    \"\"\"Sri Lankan rupee\"\"\"\n    LKR\n    \"\"\"Liberian dollar\"\"\"\n    LRD\n    \"\"\"Lesotho loti\"\"\"\n    LSL\n    \"\"\"Libyan dinar\"\"\"\n    LYD\n    \"\"\"Moroccan dirham\"\"\"\n    MAD\n    \"\"\"Moldovan leu\"\"\"\n    MDL\n    \"\"\"Malagasy ariary\"\"\"\n    MGA\n    \"\"\"Macedonian denar\"\"\"\n    MKD\n    \"\"\"Myanmar kyat\"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Products with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a product from the catalog. Accepts the ID of the product to delete and returns a DeletionResponse object indicating the result of the operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_51\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a Product\n\"\"\"\ntype Mutation {\n  deleteProduct(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetSubjectFn Type in TypeScript\nDESCRIPTION: Defines a function type for setting email subject lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetSubjectFn<Event> = (\n    event: Event,\n    ctx: RequestContext,\n    injector: Injector,\n) => string | Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerNoteInput in GraphQL\nDESCRIPTION: Input type for updating a customer note in Vendure. Requires both the noteId to identify the note and the new note content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_182\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateCustomerNoteInput {\n  noteId: ID!\n  note: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProvinceListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for specifying options when querying a list of provinces. It includes fields for pagination, sorting, and filtering, as well as a field to specify the logical operator for combining multiple filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_133\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ProvinceListOptions {\n  skip: Int\n  take: Int\n  sort: ProvinceSortParameter\n  filter: ProvinceFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLimitError GraphQL Type\nDESCRIPTION: GraphQL type definition for OrderLimitError, returned when the maximum order size limit has been reached. Includes error code, message, and the maximum number of items allowed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_114\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderLimitError {\n  errorCode: ErrorCode!\n  message: String!\n  maxItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionGroup GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductOptionGroup, including its properties such as id, createdAt, updatedAt, languageCode, code, name, options, translations, and customFields. It represents a group of related product options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_91\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductOptionGroup {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  name: String!\n  options: [ProductOption!]!\n  translations: [ProductOptionGroupTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydrated Product Relations for Custom Mappings in TypeScript\nDESCRIPTION: Demonstrates how to specify related entities (e.g., `assets.asset`) to be eagerly loaded using `hydrateProductRelations` when reindexing products. This allows accessing nested data, like `product.assets.map(a => a.asset.preview)`, within the `valueFn` of `customProductMappings` to populate custom search index fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  hydrateProductRelations: ['assets.asset'],\n  customProductMappings: {\n    assetPreviews: {\n      graphQlType: '[String!]',\n      // Here we can be sure that the `product.assets` array is populated\n      // with an Asset object\n      valueFn: (product) => product.assets.map(a => a.asset.preview),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OrderCodeStrategy Interface Definition\nDESCRIPTION: TypeScript interface definition for the OrderCodeStrategy, extending InjectableStrategy and requiring a generate method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-code-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderCodeStrategy extends InjectableStrategy {\n    generate(ctx: RequestContext): string | Promise<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing TaxCalculationStrategy in Vendure TypeScript\nDESCRIPTION: Explains the deprecation of the `TaxCalculationStrategy` interface in Vendure's TypeScript API with the v1.0.0 release. The `ProductVariantPriceCalculationStrategy` interface should be used instead for implementing custom tax calculation logic based on product variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nTaxCalculationStrategy\n```\n\nLANGUAGE: typescript\nCODE:\n```\nProductVariantPriceCalculationStrategy\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Card List in Vendure Documentation\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards related to the State Machine in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/state-machine/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueTranslation GraphQL Type\nDESCRIPTION: Defines the FacetValueTranslation type with fields for id, createdAt, updatedAt, languageCode, and name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_37\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FacetValueTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Navigation Section in Vendure Admin UI (TypeScript)\nDESCRIPTION: Example of how to add a custom 'Reports' section to the main navigation menu before the 'settings' section. This should be used in the NgModule providers array of a UI extension module.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/add-nav-menu-section.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addNavMenuSection } from '@vendure/admin-ui/core';\n\nexport default [\n    addNavMenuSection({\n        id: 'reports',\n        label: 'Reports',\n        items: [{\n            // ...\n        }],\n    },\n    'settings'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining TaxOptions Interface in TypeScript for Vendure\nDESCRIPTION: This code snippet defines the TaxOptions interface used in Vendure's configuration. It includes two optional properties: taxZoneStrategy for determining applicable tax zones, and taxLineCalculationStrategy for calculating tax lines on order items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/tax-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TaxOptions {\n    taxZoneStrategy?: TaxZoneStrategy;\n    taxLineCalculationStrategy?: TaxLineCalculationStrategy;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TagList Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for paginated lists of tags, including the total count of items and the items themselves.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_201\n\nLANGUAGE: graphql\nCODE:\n```\ntype TagList {\nitems: [Tag!]!\ntotalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoActiveOrderError Type in GraphQL\nDESCRIPTION: Represents an error returned when invoking a mutation which depends on there being an active Order on the current session.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_65\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype NoActiveOrderError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurableOperation Types\nDESCRIPTION: GraphQL types for configurable operations and their definitions, used to define customizable behaviors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\ntype ConfigurableOperation {\n  code: String!\n  args: [ConfigArg!]!\n}\n\ntype ConfigurableOperationDefinition {\n  code: String!\n  args: [ConfigArgDefinition!]!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: MergeConfig Function Signature - TypeScript\nDESCRIPTION: Function signature for mergeConfig showing its generic type parameter, parameters and return type. Takes a target config, source config, and optional depth parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/merge-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction mergeConfig<T extends VendureConfig>(target: T, source: PartialVendureConfig, depth:  = 0): T\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Digital Ocean\nDESCRIPTION: Required environment variables setup for database connection, authentication, and MinIO/S3 storage configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-digital-ocean-app-platform/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDB_NAME=${db.DATABASE}\nDB_USERNAME=${db.USERNAME}\nDB_PASSWORD=${db.PASSWORD}\nDB_HOST=${db.HOSTNAME}\nDB_PORT=${db.PORT}\nDB_CA_CERT=${db.CA_CERT}\nCOOKIE_SECRET=<add some random characters>\nSUPERADMIN_USERNAME=superadmin\nSUPERADMIN_PASSWORD=<create some strong password>\nMINIO_ACCESS_KEY=<use the key generated earlier>\nMINIO_SECRET_KEY=<use the secret generated earlier>\nMINIO_ENDPOINT=<use the endpoint of your spaces bucket>\n```\n\n----------------------------------------\n\nTITLE: Defining Country and CountryList Types\nDESCRIPTION: GraphQL types for countries and country lists, including metadata and localization information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_22\n\nLANGUAGE: graphql\nCODE:\n```\ntype Country {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  code: String!\n  type: String!\n  name: String!\n  enabled: Boolean!\n  parent: Region\n  parentId: ID\n  translations: [RegionTranslation!]!\n  customFields: JSON\n}\n\ntype CountryList {\n  items: [Country!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Products from Channel Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to remove all ProductVariants of a Product from a specified Channel. Takes a RemoveProductsFromChannelInput and returns an array of Product objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_86\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeProductsFromChannel(input: RemoveProductsFromChannelInput!): [Product!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Using IfMultichannelDirective in HTML Template\nDESCRIPTION: Example of how to use the IfMultichannelDirective in an HTML template to conditionally display a channel selector when multiple channels are configured.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/directives/if-multichannel-directive.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div *vdrIfMultichannel class=\"channel-selector\">\n  <!-- ... -->\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Updating Session Secret Configuration in Vendure TypeScript\nDESCRIPTION: Illustrates the change in configuring the session secret in Vendure's TypeScript API from v1.0.0 onwards. The deprecated `VendureConfig.authOptions.sessionSecret` property is replaced by `VendureConfig.authOptions.cookieOptions.secret`, relocating the setting within the cookie options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nVendureConfig.authOptions.sessionSecret\n```\n\nLANGUAGE: typescript\nCODE:\n```\nVendureConfig.authOptions.cookieOptions.secret\n```\n\n----------------------------------------\n\nTITLE: Configuring AssetServerPlugin with Presets in TypeScript\nDESCRIPTION: Demonstrates how to configure the AssetServerPlugin with custom presets for image transformations. This allows using predefined settings for width, height, and cropping mode.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nAssetServerPlugin.init({\n  // ...\n  presets: [\n    { name: 'my-preset', width: 85, height: 85, mode: 'crop' },\n  ],\n}),\n```\n\n----------------------------------------\n\nTITLE: Querying Tax Rates with GraphQL\nDESCRIPTION: Use this query to retrieve a list of tax rates through `TaxRateListOptions`. The response is a `TaxRateList`, which includes details of various tax rates set up in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_47\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntaxRates(options: TaxRateListOptions): TaxRateList!\n}\n```\n\n----------------------------------------\n\nTITLE: Upload GraphQL Scalar Type\nDESCRIPTION: Defines a scalar type representing file uploads in GraphQL. This special scalar handles file upload operations in the API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_219\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `Upload` scalar type represents a file upload.\n\"\"\"\nscalar Upload\n```\n\n----------------------------------------\n\nTITLE: Defining AssetFilterParameter Input Type in GraphQL\nDESCRIPTION: This input type defines the filtering parameters for assets in the Vendure admin API. It allows filtering assets by properties such as ID, creation date, name, file type, size, dimensions, and more. It also supports logical operators for complex filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_10\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssetFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  name: StringOperators\n  type: StringOperators\n  fileSize: NumberOperators\n  mimeType: StringOperators\n  width: NumberOperators\n  height: NumberOperators\n  source: StringOperators\n  preview: StringOperators\n  _and: [AssetFilterParameter!]\n  _or: [AssetFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IneligiblePaymentMethodError in GraphQL\nDESCRIPTION: GraphQL type definition for an error returned when attempting to add a Payment using a PaymentMethod for which the Order is not eligible. Includes an optional eligibilityCheckerMessage field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_49\n\nLANGUAGE: graphql\nCODE:\n```\ntype IneligiblePaymentMethodError {\n  errorCode: ErrorCode!\n  message: String!\n  eligibilityCheckerMessage: String\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SinglePrice GraphQL Type\nDESCRIPTION: Defines a GraphQL type for representing a single price value, used when the result contains just one price point.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_185\n\nLANGUAGE: graphql\nCODE:\n```\ntype SinglePrice {\n  value: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultLogger Class Signature\nDESCRIPTION: The TypeScript class signature for DefaultLogger, showing its constructor and methods. It implements the VendureLogger interface and provides methods for different log levels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/default-logger.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultLogger implements VendureLogger {\n    constructor(options?: { level?: LogLevel; timestamp?: boolean })\n    setDefaultContext(defaultContext: string) => ;\n    error(message: string, context?: string, trace?: string | undefined) => void;\n    warn(message: string, context?: string) => void;\n    info(message: string, context?: string) => void;\n    verbose(message: string, context?: string) => void;\n    debug(message: string, context?: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for Complexity Logging (GraphQL)\nDESCRIPTION: This snippet provides a sample GraphQL query used to demonstrate the complexity logging feature of the HardenPlugin. It queries for a list of products with some basic fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/index.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery ProductList {\n  products(options: { take: 5 }) {\n    items {\n      id\n      name\n      featuredAsset {\n        preview\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmptyOrderLineSelectionError Type in GraphQL\nDESCRIPTION: Defines an error type returned when no OrderLines have been specified for an operation that requires them.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_61\n\nLANGUAGE: graphql\nCODE:\n```\ntype EmptyOrderLineSelectionError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelationCustomFieldConfig Type in GraphQL\nDESCRIPTION: Type definition for configuring relation-based custom fields, specifying properties like name, type, and permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_108\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype RelationCustomFieldConfig {\nname: String!\ntype: String!\nlist: Boolean!\nlabel: [LocalizedString!]\ndescription: [LocalizedString!]\nreadonly: Boolean\ninternal: Boolean\nnullable: Boolean\nrequiresPermission: [Permission!]\nentity: String!\nscalarFields: [String!]!\nui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultPasswordValidationStrategy Class Signature (TypeScript)\nDESCRIPTION: This TypeScript code defines the structure of the `DefaultPasswordValidationStrategy` class. It implements the `PasswordValidationStrategy` interface and includes a constructor to accept options like `minLength` and `regexp`, and a `validate` method to check password validity against these rules.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/default-password-validation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass DefaultPasswordValidationStrategy implements PasswordValidationStrategy {\n    constructor(options: { minLength?: number; regexp?: RegExp })\n    validate(ctx: RequestContext, password: string) => boolean | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Promotions from Channel Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to remove Promotions from a specified Channel. Takes a RemovePromotionsFromChannelInput and returns an array of Promotion objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_87\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removePromotionsFromChannel(input: RemovePromotionsFromChannelInput!): [Promotion!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchInput in GraphQL for Vendure Shop API\nDESCRIPTION: Defines a GraphQL input type for search operations in the Vendure shop API. It includes parameters for search terms, facet filters, collection filtering, pagination, and sorting.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_43\n\nLANGUAGE: graphql\nCODE:\n```\ninput SearchInput {\nterm: String\nfacetValueIds: [ID!]\nfacetValueOperator: LogicalOperator\nfacetValueFilters: [FacetValueFilterInput!]\ncollectionId: ID\ncollectionSlug: String\ngroupByProduct: Boolean\ntake: Int\nskip: Int\nsort: SearchResultSortParameter\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RoleListOptions Input Type in GraphQL\nDESCRIPTION: This input type is used for querying and filtering roles. It includes options for pagination, sorting, and filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_139\n\nLANGUAGE: graphql\nCODE:\n```\ninput RoleListOptions {\n  skip: Int\n  take: Int\n  sort: RoleSortParameter\n  filter: RoleFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Provinces List in GraphQL\nDESCRIPTION: Defines a GraphQL query to list Provinces with options for filtering and pagination.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_30\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  provinces(options: ProvinceListOptions): ProvinceList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ServerConfig Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for server configuration, including order process, asset types, permissions, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_174\n\nLANGUAGE: graphql\nCODE:\n```\ntype ServerConfig {\n  orderProcess: [OrderProcessState!]!\n  permittedAssetTypes: [String!]!\n  permissions: [PermissionDefinition!]!\n  moneyStrategyPrecision: Int!\n  customFieldConfig: CustomFields!\n  entityCustomFields: [EntityCustomFields!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Sort Parameter Mapping in TypeScript\nDESCRIPTION: Adds custom sort parameter mapping to the Elasticsearch plugin for Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd custom sort parameter mapping (#1230) ([0d1f687])\n```\n\n----------------------------------------\n\nTITLE: Running Vite Development Server for Vendure Dashboard\nDESCRIPTION: Command to start Vite in development mode for local development of the Vendure Dashboard application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dashboard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx vite\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a ProductVariant is added, updated or deleted. It extends VendureEntityEvent and includes a constructor and a variants property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductVariantEvent extends VendureEntityEvent<ProductVariant[], ProductVariantInputTypes> {\n    constructor(ctx: RequestContext, entity: ProductVariant[], type: 'created' | 'updated' | 'deleted', input?: ProductVariantInputTypes)\n    variants: ProductVariant[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextFormInputComponent in TypeScript\nDESCRIPTION: Implements a component for text form inputs. This is the default input for 'string' and 'localeString' type fields, using a regular text form input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass TextFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'text-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'text-form-input'>;\n    prefix: void\n    suffix: void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Job Class in TypeScript for Vendure\nDESCRIPTION: This code defines the Job class, which represents a background task in Vendure. It includes properties for tracking job status and methods for managing job lifecycle.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Job<T extends JobData<T> = any> {\n    readonly id: number | string | null;\n    readonly queueName: string;\n    readonly retries: number;\n    readonly createdAt: Date;\n    name: string\n    data: T\n    state: JobState\n    progress: number\n    result: any\n    error: any\n    isSettled: boolean\n    startedAt: Date | undefined\n    settledAt: Date | undefined\n    duration: number\n    attempts: number\n    constructor(config: JobConfig<T>)\n    start() => ;\n    setProgress(percent: number) => ;\n    complete(result?: any) => ;\n    fail(err?: any) => ;\n    cancel() => ;\n    defer() => ;\n    on(eventType: JobEventType, listener: JobEventListener<T>) => ;\n    off(eventType: JobEventType, listener: JobEventListener<T>) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Return Object Type in GraphQL\nDESCRIPTION: GraphQL object type that represents a product return stock movement. It includes information about the returned product variant and quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_163\n\nLANGUAGE: graphql\nCODE:\n```\ntype Return {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  type: StockMovementType!\n  quantity: Int!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodTranslationInput Input Type in GraphQL\nDESCRIPTION: Used for translating shipping method fields into different languages. Requires a language code and accepts translatable fields like name and description, along with custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_151\n\nLANGUAGE: graphql\nCODE:\n```\ninput ShippingMethodTranslationInput {\nid: ID\nlanguageCode: LanguageCode!\nname: String\ndescription: String\ncustomFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Channel-Aware Entity in TypeScript\nDESCRIPTION: Creates a ProductRequest entity that implements the ChannelAware interface, including required channels property and relationships with Product entity. Uses TypeORM decorators for database mapping.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/channel-aware/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeepPartial } from '@vendure/common/lib/shared-types';\nimport { VendureEntity, Product, EntityId, ID, ChannelAware } from '@vendure/core';\nimport { Column, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nclass ProductRequest extends VendureEntity implements ChannelAware {\n    constructor(input?: DeepPartial<ProductRequest>) {\n        super(input);\n    }\n\n    @ManyToOne(type => Product)\n    product: Product;\n\n    @EntityId()\n    productId: ID;\n\n    @Column()\n    text: string;\n    \n    @ManyToMany(() => Channel)\n    @JoinTable()\n    channels: Channel[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SurchargeInput Input Type in GraphQL\nDESCRIPTION: Input type for creating surcharges. It requires description, price, and priceIncludesTax fields, with optional fields for sku, taxRate, and taxDescription.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_159\n\nLANGUAGE: graphql\nCODE:\n```\ninput SurchargeInput {\n  description: String!\n  sku: String\n  price: Money!\n  priceIncludesTax: Boolean!\n  taxRate: Float\n  taxDescription: String\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dockerfile Configuration for Vendure\nDESCRIPTION: Dockerfile configuration for building a Vendure application container. Sets up Node.js environment, installs dependencies, and builds the application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:22\n\nWORKDIR /usr/src/app\n\nCOPY package.json ./\nCOPY package-lock.json ./ \nRUN npm install --production\nCOPY . .\nRUN npm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Fulfillment GraphQL Type\nDESCRIPTION: Defines the Fulfillment type with fields for tracking order fulfillment details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_41\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Fulfillment {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  lines: [FulfillmentLine!]!\n  summary: [FulfillmentLine!]!\n  state: String!\n  method: String!\n  trackingCode: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response with Monetary Values in Vendure\nDESCRIPTION: An example JSON response from a query for a product's variant prices, showing how monetary values are represented as integers in the minor currency unit (cents for USD).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"id\": \"42\",\n      \"variants\": [\n        {\n          \"id\": \"74\",\n          \"name\": \"Bonsai Tree\",\n          \"currencyCode\": \"USD\",\n          // highlight-start\n          \"price\": 1999,\n          \"priceWithTax\": 2399,\n          // highlight-end\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Job Buffer Storage in TypeScript\nDESCRIPTION: A class that implements JobBufferStorageStrategy interface to provide in-memory storage for buffered jobs. It maintains jobs in a Map data structure but should not be used in production as data will be lost on server restart.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/in-memory-job-buffer-storage-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InMemoryJobBufferStorageStrategy implements JobBufferStorageStrategy {\n    protected bufferStorage = new Map<string, Set<Job>>();\n    add(bufferId: string, job: Job) => Promise<Job>;\n    bufferSize(bufferIds?: string[]) => Promise<{ [bufferId: string]: number }>;\n    flush(bufferIds?: string[]) => Promise<{ [bufferId: string]: Job[] }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignCollectionsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple collections to a specific channel in the Vendure admin API. It requires a list of collection IDs and the target channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_14\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignCollectionsToChannelInput {\n  collectionIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorListOptions in GraphQL\nDESCRIPTION: Specifies options for querying a list of Administrators, including pagination (`skip`, `take`), sorting (`sort` using `AdministratorSortParameter`), and filtering (`filter` using `AdministratorFilterParameter`). The `filterOperator` determines if multiple top-level filter fields use AND (default) or OR logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ninput AdministratorListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: AdministratorSortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: AdministratorFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderLimitError Type in Vendure GraphQL Schema (GraphQL, SDL)\nDESCRIPTION: Defines the OrderLimitError GraphQL object type, representing an error returned when a user attempts to create or modify an order exceeding the maximum allowed size. Includes fields for the error code (of enum type ErrorCode), a descriptive message, and the maxItems integer indicating the permitted threshold. No external dependencies except referenced types in the schema; intended for error reporting within shop operations. All fields are non-nullable.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_70\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturned when the maximum order size limit has been reached.\n\"\"\"\ntype OrderLimitError {\nerrorCode: ErrorCode!\nmessage: String!\nmaxItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrencyFormInputComponent in TypeScript\nDESCRIPTION: An input component for monetary values, intended for use with 'int' type fields. It implements the FormInputComponent interface and includes an observable for currency code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass CurrencyFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'currency-form-input';\n    @Input() readonly: boolean;\n    formControl: UntypedFormControl;\n    currencyCode$: Observable<CurrencyCode>;\n    config: DefaultFormComponentConfig<'currency-form-input'>;\n    constructor(dataService: DataService)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Currency Formatter with Three Decimal Places\nDESCRIPTION: Modified version of the formatCurrency function that divides by 1000 instead of 100 and displays three decimal places, for use with a custom MoneyStrategy with increased precision.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/money/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function formatCurrency(value: number, currencyCode: string, locale?: string) {\n    // highlight-next-line\n    const majorUnits = value / 1000;\n    try {\n        return new Intl.NumberFormat(locale, {\n            style: 'currency',\n            currency: currencyCode,\n            // highlight-start\n            minimumFractionDigits: 3,\n            maximumFractionDigits: 3,\n            // highlight-end\n        }).format(majorUnits);\n    } catch (e: any) {\n         // highlight-next-line\n        return majorUnits.toFixed(3);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RouterLinkDefinition Type in TypeScript\nDESCRIPTION: A TypeScript type definition for RouterLinkDefinition which can be either a static array or a function that returns an array based on the current route and context. This is used for navigation in ActionBarItems and NavMenuItems in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/router-link-definition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype RouterLinkDefinition = ((route: ActivatedRoute, context: ActionBarContext) => any[]) | any[]\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type CollectionFilterParameter\nDESCRIPTION: Defines the `CollectionFilterParameter` input type used for filtering lists of Collections. It supports filtering by various fields like `id`, `createdAt`, `updatedAt`, `languageCode`, `name`, `slug`, `position`, `description`, and `parentId` using corresponding operator types (IDOperators, DateOperators, etc.). It also allows combining filters using logical `_and` and `_or`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ninput CollectionFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  name: StringOperators\n  slug: StringOperators\n  position: NumberOperators\n  description: StringOperators\n  parentId: IDOperators\n  _and: [CollectionFilterParameter!]\n  _or: [CollectionFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LocalizedString Type in GraphQL\nDESCRIPTION: Represents a localized string with language code and value properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_59\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype LocalizedString {\n  languageCode: LanguageCode!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Branding with setBranding Helper\nDESCRIPTION: Example showing how to use the setBranding helper function to customize the Vendure admin UI branding elements including logos and favicon.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncompileUiExtensions({\n  outputPath: path.join(__dirname, '../admin-ui'),\n  extensions: [\n    setBranding({\n      // This is used as the branding in the top-left above the navigation\n      smallLogoPath: path.join(__dirname, 'images/my-logo-sm.png'),\n      // This is used on the login page\n      largeLogoPath: path.join(__dirname, 'images/my-logo-lg.png'),\n      faviconPath: path.join(__dirname, 'images/my-favicon.ico'),\n    }),\n  ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setBranding(options: BrandingOptions): StaticAssetExtension\n```\n\n----------------------------------------\n\nTITLE: Allow Decorator Usage in Vendure with TypeScript\nDESCRIPTION: The snippet illustrates the use of the Allow decorator, applied to a GraphQL resolver method to restrict access to users with 'sync' permissions. It highlights how Vendure's permission system integrates with resolver actions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver()\nexport class ExternalSyncResolver {\n\n  @Allow(sync.Permission)\n  @Mutation()\n  syncStockLevels() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ApplyCouponCodeResult Union in GraphQL\nDESCRIPTION: The `ApplyCouponCodeResult` union type defines possible outcomes when a coupon code is applied in the Vendure platform. It includes `Order` as a successful outcome, or various error types like `CouponCodeExpiredError` and `CouponCodeInvalidError`, which developers need to handle decisively.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion ApplyCouponCodeResult = Order | CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError\n```\n\n----------------------------------------\n\nTITLE: Defining PriceRange Type in GraphQL\nDESCRIPTION: Defines the `PriceRange` GraphQL object type. This type is used when a result (like a product with multiple variants) has more than one price, providing the minimum (`min`) and maximum (`max`) price as `Money` values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_87\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe price range where the result has more than one price\n\"\"\"\ntype PriceRange {\n  min: Money!\n  max: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: Query Active Order in GraphQL\nDESCRIPTION: GraphQL query to fetch the current active order using the defined ActiveOrder fragment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/active-order/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetActiveOrder {\n  activeOrder {\n    ...ActiveOrder\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PromotionActionSideEffectFn Type Definition\nDESCRIPTION: Type definition for a PromotionAction's side-effect functions onActivate and onDeactivate. These functions allow for additional operations when a promotion is activated or deactivated. Available since version 1.8.0 and marked as experimental.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype PromotionActionSideEffectFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    promotion: Promotion,\n) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types for Paginated Lists in TypeScript\nDESCRIPTION: This snippet shows how to define GraphQL types for a paginated list of blog posts, including the Node interface, PaginatedList interface, and the query definition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/list-query-builder.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype BlogPost implements Node {\n  id: ID!\n  published: DateTime!\n  title: String!\n  body: String!\n}\n\ntype BlogPostList implements PaginatedList {\n  items: [BlogPost!]!\n  totalItems: Int!\n}\n\n# Generated at run-time by Vendure\ninput BlogPostListOptions\n\nextend type Query {\n   blogPosts(options: BlogPostListOptions): BlogPostList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int scalar in GraphQL\nDESCRIPTION: GraphQL scalar type definition for the Int type, representing non-fractional signed whole numeric values between -(2^31) and 2^31 - 1.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_52\n\nLANGUAGE: graphql\nCODE:\n```\nscalar Int\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionListOptions in GraphQL\nDESCRIPTION: The CollectionListOptions input type specifies parameters for listing collections, including pagination, sorting, and filtering options. Key fields include 'skip', 'take', 'sort', 'filter', and 'filterOperator'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_30\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CollectionListOptions {\\n  topLevelOnly: Boolean\\n  skip: Int\\n  take: Int\\n  sort: CollectionSortParameter\\n  filter: CollectionFilterParameter\\n  filterOperator: LogicalOperator\\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating Shipping Lines in TypeScript for Vendure\nDESCRIPTION: This function ensures that ShippingLines are hydrated, allowing the use of shippingMethod.name property in email templates. It takes a RequestContext, Order, and Injector as parameters and returns a Promise of ShippingLine array.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-utils.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction hydrateShippingLines(ctx: RequestContext, order: Order, injector: Injector): Promise<ShippingLine[]>\n```\n\n----------------------------------------\n\nTITLE: Applying Allow Decorator to GraphQL Query in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @Allow decorator to restrict access to a GraphQL query to users with SuperAdmin permission. It's applied to a query resolver method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/allow-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Allow(Permission.SuperAdmin)\n@Query()\ngetAdministrators() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImportInfo Type in GraphQL\nDESCRIPTION: Defines the `ImportInfo` type in GraphQL. This type provides information about the results of an import operation, including a list of error messages, the total number of records processed, and the number of records successfully imported.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_78\n\nLANGUAGE: graphql\nCODE:\n```\ntype ImportInfo {\n  errors: [String!]\n  processed: Int!\n  imported: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Scalar Type in GraphQL\nDESCRIPTION: Defines a DateTime scalar type that represents an ISO 8601 compliant date-time string at UTC, such as 2007-12-03T10:15:30Z.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_52\n\nLANGUAGE: graphql\nCODE:\n```\nscalar DateTime\n```\n\n----------------------------------------\n\nTITLE: Querying a collection by identifier in GraphQL\nDESCRIPTION: This query returns a Collection by its ID or slug. At least one of these parameters must be supplied; otherwise, an error is generated. The output is a Collection object, representing a grouping of Products or other collections in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_4\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns a Collection either by its id or slug. If neither 'id' nor 'slug' is specified, an error will result.\n\"\"\"\ntype Query {\n    collection(id: ID, slug: String): Collection\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Collection by ID or Slug - GraphQL SDL - GraphQL\nDESCRIPTION: The 'collection' query fetches a Collection entity either by its ID or slug, at least one of which must be provided, otherwise an error is returned. Comments clarify that null parameters result in an error. The response is the requested Collection, used for product grouping. Requires appropriate input and permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nGet a Collection either by id or slug. If neither id nor slug is specified, an error will result.\n\"\"\"\ntype Query {\n  collection(id: ID, slug: String): Collection\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining StructCustomFieldConfig GraphQL Object Type\nDESCRIPTION: GraphQL type definition for StructCustomFieldConfig which defines complex structured custom fields composed of multiple sub-fields of various types, with configuration for permissions and UI representation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_133\n\nLANGUAGE: graphql\nCODE:\n```\ntype StructCustomFieldConfig {\nname: String!\ntype: String!\nlist: Boolean!\nfields: [StructFieldConfig!]!\nlabel: [LocalizedString!]\ndescription: [LocalizedString!]\nreadonly: Boolean\ninternal: Boolean\nnullable: Boolean\nrequiresPermission: [Permission!]\nui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerGroupList Type in GraphQL\nDESCRIPTION: Type definition for paginated list of customer groups with total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_50\n\nLANGUAGE: graphql\nCODE:\n```\ntype CustomerGroupList {\n  items: [CustomerGroup!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Modal Dialog Template Example\nDESCRIPTION: HTML template example showing the structure of a modal dialog with title, content, and action buttons.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/modal-service.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ng-template vdrDialogTitle>Title of the modal</ng-template>\n\n<p>\n  My Content\n</p>\n\n<ng-template vdrDialogButtons>\n  <button type=\"button\"\n          class=\"btn\"\n          (click)=\"cancel()\">Cancel</button>\n  <button type=\"button\"\n          class=\"btn btn-primary\"\n          (click)=\"okay()\">Okay</button>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Type in GraphQL\nDESCRIPTION: The Payment type outlines the structure for payment-related data, including fields for id, timestamps, method, amount, state, transactionId, error messages, refunds, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_81\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type Payment {\\n  id: ID!\\n  createdAt: DateTime!\\n  updatedAt: DateTime!\\n  method: String!\\n  amount: Money!\\n  state: String!\\n  transactionId: String\\n  errorMessage: String\\n  refunds: [Refund!]!\\n  metadata: JSON\\n  customFields: JSON\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Orderable Interface - TypeScript\nDESCRIPTION: Entities implementing the Orderable interface can be sorted in relation to others via a 'position' integer property. This facilitates organizing entities in a list efficiently.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/interfaces.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Orderable {\n    position: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CustomFieldControl Interface Implementation in TypeScript\nDESCRIPTION: Diff showing the changes required for components implementing the CustomFieldControl interface. The type of the customFieldConfig property has changed from CustomFieldConfig to CustomFieldConfigType.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n- CustomFieldConfig,\n+ CustomFieldConfigType,\n  CustomFieldControl,\n} from '@vendure/admin-ui/core';\n\n@Component({\n    // ...\n})\nexport class ReviewCountComponent implements CustomFieldControl  {\n-   customFieldConfig: CustomFieldConfig;\n+   customFieldConfig: CustomFieldConfigType;\n    formControl: FormControl;\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InsufficientStockError in GraphQL\nDESCRIPTION: GraphQL type definition for an error returned when attempting to add more items to an Order than are available in stock. Includes fields for available quantity and the order details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_51\n\nLANGUAGE: graphql\nCODE:\n```\ntype InsufficientStockError {\n  errorCode: ErrorCode!\n  message: String!\n  quantityAvailable: Int!\n  order: Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductSortParameter Input Type in GraphQL\nDESCRIPTION: This input type defines the sorting parameters for products, including fields like id, createdAt, updatedAt, name, slug, and description. Each field uses the SortOrder enum to specify the sorting direction.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_122\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  slug: SortOrder\n  description: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCustomerPasswordResult Union in GraphQL\nDESCRIPTION: This union type represents possible outcomes when updating a customer's password, including success, invalid credentials, password validation errors, and authentication strategy errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_147\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion UpdateCustomerPasswordResult =\n    Success | InvalidCredentialsError | PasswordValidationError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Installing HardenPlugin via NPM/Yarn\nDESCRIPTION: Command line instructions for installing the HardenPlugin package\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/harden-plugin\n\n# or\n\nyarn add @vendure/harden-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Preset Codegen\nDESCRIPTION: Extended configuration for client-side code generation including preset settings\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodegenConfig } from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n    overwrite: true,\n    schema: 'http://localhost:3000/admin-api',\n    config: {\n        scalars: { Money: 'number' },\n        namingConvention: { enumValues: 'keep' },\n    },\n    generates: {\n        'apps/marketplace/src/plugins/marketplace/ui/gql/': {\n            preset: 'client',\n            documents: 'apps/marketplace/src/plugins/marketplace/ui/**/*.ts',\n            presetConfig: {\n                fragmentMasking: false,\n            },\n        },\n        'apps/marketplace/src/plugins/marketplace/gql/generated.ts': {\n            plugins: ['typescript'],\n        },\n    },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Vendure Configuration\nDESCRIPTION: Examples of using environment variables for configuration values that may change between environments, such as hostname and port settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  apiOptions: {\n    hostname: process.env.HOSTNAME,\n    port: process.env.PORT,\n  }\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Countries in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting multiple Countries at once. Takes an array of Country IDs and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_36\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCountries(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxLine Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for individual tax components. Contains fields for description and tax rate percentage.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_140\n\nLANGUAGE: graphql\nCODE:\n```\ntype TaxLine {\n  description: String!\n  taxRate: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SearchStrategy in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement a custom SearchStrategy for the DefaultSearchPlugin. It includes methods for initializing the strategy, getting facet value IDs, collection IDs, search results, and total count. This example shows the structure and required methods for creating a custom search strategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/default-search-plugin-init-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MySearchStrategy implements SearchStrategy {\n    private readonly minTermLength = 2;\n    private connection: TransactionalConnection;\n    private options: DefaultSearchPluginInitOptions;\n\n    async init(injector: Injector) {\n        this.connection = injector.get(TransactionalConnection);\n        this.options = injector.get(PLUGIN_INIT_OPTIONS);\n    }\n\n    async getFacetValueIds(\n        ctx: RequestContext,\n        input: SearchInput,\n        enabledOnly: boolean,\n    ): Promise<Map<ID, number>> {\n        // ...\n        return createFacetIdCountMap(facetValuesResult);\n    }\n\n    async getCollectionIds(\n        ctx: RequestContext,\n        input: SearchInput,\n        enabledOnly: boolean,\n    ): Promise<Map<ID, number>> {\n        // ...\n        return createCollectionIdCountMap(collectionsResult);\n    }\n\n    async getSearchResults(\n        ctx: RequestContext,\n        input: SearchInput,\n        enabledOnly: boolean,\n    ): Promise<SearchResult[]> {\n        const take = input.take || 25;\n        const skip = input.skip || 0;\n        const sort = input.sort;\n        const qb = this.connection\n            .getRepository(SearchIndexItem)\n            .createQueryBuilder('si')\n            .select(this.createMysqlSelect(!!input.groupByProduct));\n        // ...\n\n        return qb\n            .take(take)\n            .skip(skip)\n            .getRawMany()\n            .then(res => res.map(r => mapToSearchResult(r, ctx.channel.currencyCode)));\n    }\n\n    async getTotalCount(ctx: RequestContext, input: SearchInput, enabledOnly: boolean): Promise<number> {\n        const innerQb = this.applyTermAndFilters(\n            ctx,\n            this.connection\n                .getRepository(SearchIndexItem)\n                .createQueryBuilder('si')\n                .select(this.createMysqlSelect(!!input.groupByProduct)),\n            input,\n        );\n        if (enabledOnly) {\n            innerQb.andWhere('si.enabled = :enabled', { enabled: true });\n        }\n\n        const totalItemsQb = this.connection.rawConnection\n            .createQueryBuilder()\n            .select('COUNT(*) as total')\n            .from(`(${innerQb.getQuery()})`, 'inner')\n            .setParameters(innerQb.getParameters());\n        return totalItemsQb.getRawOne().then(res => res.total);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GlobalStylesExtension Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GlobalStylesExtension, which specifies configuration for adding global styles to the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GlobalStylesExtension {\n    globalStyles: string[] | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerList Type in GraphQL\nDESCRIPTION: Type definition for paginated list of customers with total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_51\n\nLANGUAGE: graphql\nCODE:\n```\ntype CustomerList {\n  items: [Customer!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Collections in Channels in TypeScript\nDESCRIPTION: Methods for assigning Collections to Channels and removing them from Channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nassignCollectionsToChannel(ctx: RequestContext, input: AssignCollectionsToChannelInput): Promise<Array<Translated<Collection>>>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nremoveCollectionsFromChannel(ctx: RequestContext, input: RemoveCollectionsFromChannelInput): Promise<Array<Translated<Collection>>>\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Vendure Server Startup\nDESCRIPTION: This snippet demonstrates how to run migrations automatically when starting the Vendure server. It uses the 'runMigrations' function before bootstrapping the server.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrations/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap, runMigrations } from '@vendure/core';\nimport { config } from './vendure-config';\n\nrunMigrations(config)\n    .then(() => bootstrap(config))\n    .catch(err => {\n        console.log(err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Fetching Tax Category by ID with GraphQL\nDESCRIPTION: Retrieve a specific tax category by its ID using this query. An `ID` is required as input, and the result is a `TaxCategory` object, which contains details about the particular tax category.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_45\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntaxCategory(id: ID!): TaxCategory\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SendGrid Email Sender in Vendure\nDESCRIPTION: Example implementation of a custom EmailSender using SendGrid's API. Shows how to configure the EmailPlugin with a custom sender implementation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-sender.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sgMail = require('@sendgrid/mail');\n\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\n\nclass SendgridEmailSender implements EmailSender {\n  async send(email: EmailDetails) {\n    await sgMail.send({\n      to: email.recipient,\n      from: email.from,\n      subject: email.subject,\n      html: email.body,\n    });\n  }\n}\n\nconst config: VendureConfig = {\n  logger: new DefaultLogger({ level: LogLevel.Debug })\n  // ...\n  plugins: [\n    EmailPlugin.init({\n       // ... template, handler config omitted\n      transport: { type: 'none' },\n       emailSender: new SendgridEmailSender(),\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Custom Backoff in BullMQPluginOptions\nDESCRIPTION: This code snippet shows how to use the setBackoff function in BullMQPluginOptions to specify custom backoff settings for job retries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqplugin-options.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetBackoff: (queueName, job) => {\n  return {\n    type: 'exponential', // or 'fixed'\n    delay: 10000 // first retry after 10s, second retry after 20s, 40s,...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderSortParameter Input Type in GraphQL\nDESCRIPTION: This input type defines sorting options for order queries, allowing sorting by various order properties using the SortOrder enum.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_112\n\nLANGUAGE: graphql\nCODE:\n```\ninput OrderSortParameter {\n  customerLastName: SortOrder\n  transactionId: SortOrder\n  aggregateOrderId: SortOrder\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  orderPlacedAt: SortOrder\n  code: SortOrder\n  state: SortOrder\n  totalQuantity: SortOrder\n  subTotal: SortOrder\n  subTotalWithTax: SortOrder\n  shipping: SortOrder\n  shippingWithTax: SortOrder\n  total: SortOrder\n  totalWithTax: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Seller Shipping Methods on an Order (GraphQL)\nDESCRIPTION: This GraphQL mutation, `setOrderShippingMethod`, is used in the storefront checkout process. It updates an order by associating specific shipping methods with it, typically one for each seller whose items are included in the order. It accepts an array of `shippingMethodId`s as input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/example-plugins/multivendor-plugin/README.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\nmutation {\n  setOrderShippingMethod(shippingMethodId: [\"3\", \"4\"]) {\n    ... on Order {\n      id\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing NumberFormInputComponent for Integer and Float Fields\nDESCRIPTION: Component that displays a number input and serves as the default input for 'int' and 'float' type fields in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass NumberFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'number-form-input';\n    @Input() readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'number-form-input'>;\n    prefix: void\n    suffix: void\n    min: void\n    max: void\n    step: void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePaymentResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the object returned by the CreatePaymentFn. It includes properties for amount, payment state, transaction ID, error message, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreatePaymentResult {\n    amount: number;\n    state: Exclude<PaymentState, 'Error'>;\n    transactionId?: string;\n    errorMessage?: string;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for addActionBarDropdownMenuItem (TypeScript)\nDESCRIPTION: Specifies the TypeScript function signature for addActionBarDropdownMenuItem, which accepts a configuration object of type ActionBarDropdownMenuItem. This function is intended for use in registering UI extension points and performs no return value (void). It requires the definition of ActionBarDropdownMenuItem, typically sourced from @vendure/admin-ui. The function is used by passing an object with required properties matching the API's contract.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/add-action-bar-dropdown-menu-item.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction addActionBarDropdownMenuItem(config: ActionBarDropdownMenuItem): void\n```\n\n----------------------------------------\n\nTITLE: Querying Stock Location by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a Stock Location by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_40\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  stockLocation(id: ID!): StockLocation\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channels List - GraphQL SDL - GraphQL\nDESCRIPTION: This snippet defines the 'channels' query, which returns a list of Channel objects according to the provided ChannelListOptions. The output is a non-nullable ChannelList, and the query supports standard list operations such as pagination. Used for managing or displaying multiple channels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  channels(options: ChannelListOptions): ChannelList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Boolean Scalar\nDESCRIPTION: The Boolean scalar type denotes true or false values. It's crucial for representing binary states within the GraphQL schema.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe <code>Boolean</code> scalar type represents <code>true</code> or `false`.\n\"\"\"\nscalar Boolean\n```\n\n----------------------------------------\n\nTITLE: Registering a New Seller via Vendure Shop API (GraphQL)\nDESCRIPTION: This GraphQL mutation, `registerNewSeller`, is executed against the Vendure Shop API to create a new seller entity. It requires input containing the `shopName` and seller details (`firstName`, `lastName`, `emailAddress`, `password`). The mutation automatically handles creating associated resources like a Channel, Role, Administrator, ShippingMethod, and StockLocation for the seller.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/example-plugins/multivendor-plugin/README.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n```graphql\nmutation RegisterSeller {\n  registerNewSeller(input: {\n    shopName: \"Bob's Parts\",\n    seller: {\n      firstName: \"Bob\"\n      lastName: \"Dobalina\"\n      emailAddress: \"bob@bobs-parts.com\"\n      password: \"test\",\n    }\n  }) {\n    id\n    code\n    token\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the SessionCacheStrategy Interface in TypeScript\nDESCRIPTION: Defines the TypeScript interface `SessionCacheStrategy`, which extends `InjectableStrategy`. It outlines the required methods (`set`, `get`, `delete`, `clear`) that must be implemented by any custom session caching mechanism within Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/session-cache-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ninterface SessionCacheStrategy extends InjectableStrategy {\n    set(session: CachedSession): void | Promise<void>;\n    get(sessionToken: string): CachedSession | undefined | Promise<CachedSession | undefined>;\n    delete(sessionToken: string): void | Promise<void>;\n    clear(): void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AuthenticationMethod Type\nDESCRIPTION: AuthenticationMethod type defines the available strategies for user authentication, including fields like strategy. This type manages authentication processes and methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype AuthenticationMethod {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  strategy: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Type in GraphQL\nDESCRIPTION: Defines the `Product` GraphQL object type. This represents a product in Vendure, containing its `id`, timestamps, `languageCode` for translations, `name`, URL `slug`, `description`, `enabled` status, `featuredAsset`, list of all `assets`, related `variants` (also available as a paginated `variantList`), `optionGroups`, associated `facetValues`, `translations`, `collections` it belongs to, and `customFields`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_88\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n  enabled: Boolean!\n  featuredAsset: Asset\n  assets: [Asset!]!\n  \"\"\"\n  Returns all ProductVariants\n  \"\"\"\n  variants: [ProductVariant!]!\n  \"\"\"\n  Returns a paginated, sortable, filterable list of ProductVariants\n  \"\"\"\n  variantList(options: ProductVariantListOptions): ProductVariantList!\n  optionGroups: [ProductOptionGroup!]!\n  facetValues: [FacetValue!]!\n  translations: [ProductTranslation!]!\n  collections: [Collection!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Variants in GraphQL for Vendure\nDESCRIPTION: This mutation creates a set of ProductVariants based on the OptionGroups assigned to a given Product. It takes an array of CreateProductVariantInput objects and returns an array of ProductVariant objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  createProductVariants(input: [CreateProductVariantInput!]!): [ProductVariant]!\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Information in TypeScript\nDESCRIPTION: Example showing how to get information about the current route from within an iframe using the getActivatedRoute function.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-devkit-client.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getActivatedRoute } from '@vendure/ui-devkit';\n\nconst route = await getActivatedRoute();\nconst slug = route.params.slug;\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultCachePluginInitOptions Interface in TypeScript\nDESCRIPTION: Configuration options interface for the DefaultCachePlugin, allowing specification of cache size and custom TTL provider for controlling cache item lifetimes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/default-cache-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DefaultCachePluginInitOptions {\n    cacheSize?: number;\n    cacheTtlProvider?: CacheTtlProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidCredentialsError in GraphQL\nDESCRIPTION: GraphQL type definition for an error returned when user authentication credentials are not valid, including fields for error code, message, and authentication error details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_55\n\nLANGUAGE: graphql\nCODE:\n```\ntype InvalidCredentialsError {\n  errorCode: ErrorCode!\n  message: String!\n  authenticationError: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Page Title in Angular Component - TypeScript\nDESCRIPTION: This Angular snippet shows how to update the page title from within a component using the PageMetadataService. Upon button click, handleClick() calls setTitle('New title'), updating the browser's page title and UI heading accordingly. Dependencies include @vendure/admin-ui/core for the service and SharedModule, and Angular core. Key parameter is the new title string. It requires that the component is part of a properly configured Vendure UI plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PageMetadataService, SharedModule } from '@vendure/admin-ui/core';\\nimport { Component } from '@angular/core';\\n\\n@Component({\\n    selector: 'test',\\n    template: `\\n        <vdr-page-block>\\n            <vdr-card>\\n                // highlight-next-line\\n                <button class=\\\"button primary\\\" (click)=\\\"handleClick()\\\">Update title</button>\\n            </vdr-card>\\n        </vdr-page-block>`,\\n    standalone: true,\\n    imports: [SharedModule],\\n})\\nexport class TestComponent {\\n    // highlight-next-line\\n    constructor(private pageMetadataService: PageMetadataService) {}\\n\\n    handleClick() {\\n        // highlight-next-line\\n        pageMetadataService.setTitle('New title');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocaleLanguageNamePipe in HTML Templates\nDESCRIPTION: Example of how to use the LocaleLanguageNamePipe in HTML templates to convert ISO 639-1 language codes to human-readable names.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-language-name-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{ 'zh_Hant' | localeLanguageName }}\n```\n\n----------------------------------------\n\nTITLE: Defining InsufficientStockOnHandError Type in GraphQL\nDESCRIPTION: Defines the `InsufficientStockOnHandError` type in GraphQL. This error is returned when attempting to create a Fulfillment if the `stockOnHand` for a ProductVariant is less than the quantity specified in the fulfillment request. It provides details like the error code, message, product variant ID and name, and the actual stock on hand.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_81\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if attempting to create a Fulfillment when there is insufficient\n\nstockOnHand of a ProductVariant to satisfy the requested quantity.\n\"\"\"\ntype InsufficientStockOnHandError {\n  errorCode: ErrorCode!\n  message: String!\n  productVariantId: ID!\n  productVariantName: String!\n  stockOnHand: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Navigation Menu Item in Vendure Admin UI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the addNavMenuItem function to add a custom 'Product Reviews' menu item to the 'marketing' section of the Vendure admin UI navigation. It specifies the item's id, label, router link, and icon.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/add-nav-menu-item.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addNavMenuItem } from '@vendure/admin-ui/core';\n\nexport default [\n    addNavMenuItem({\n        id: 'reviews',\n        label: 'Product Reviews',\n        routerLink: ['/extensions/reviews'],\n        icon: 'star',\n    },\n    'marketing'),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Product Reviews\nDESCRIPTION: GraphQL type definitions for ProductReview entity and ProductReviewList implementing the PaginatedList interface\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-list-views/index.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductReview implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  title: String!\n  rating: Int!\n  text: String!\n  authorName: String!\n  product: Product!\n  productId: ID!  \n}\n\ntype ProductReviewList implements PaginatedList {\n  items: [ProductReview!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying next order states in GraphQL\nDESCRIPTION: This query provides the possible next states for a given active order. It returns an array of states, aiding in understanding the order's lifecycle. No parameters are required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_11\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns the possible next states that the activeOrder can transition to\n\"\"\"\ntype Query {\n    nextOrderStates: [String!]!\n}\n```\n\n----------------------------------------\n\nTITLE: NavMenuSection Interface Definition in TypeScript\nDESCRIPTION: Defines the NavMenuSection interface which represents a grouping of links in the main (left-hand side) navigation bar of the Vendure Admin UI. It includes properties for identifying and configuring the section's appearance and behavior.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/nav-menu-section.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavMenuSection {\n    id: string;\n    label: string;\n    items: NavMenuItem[];\n    icon?: string;\n    displayMode?: 'regular' | 'settings';\n    requiresPermission?: string | ((userPermissions: string[]) => boolean);\n    collapsible?: boolean;\n    collapsedByDefault?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestEligibleShippingMethodsInput Input Type in GraphQL\nDESCRIPTION: Input type used to test which shipping methods are eligible for a given order scenario. Requires shipping address and order lines information to simulate a checkout process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_169\n\nLANGUAGE: graphql\nCODE:\n```\ninput TestEligibleShippingMethodsInput {\n  shippingAddress: CreateAddressInput!\n\n  lines: [TestShippingMethodOrderLineInput!]!\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileTransportOptions TypeScript Interface\nDESCRIPTION: Configures options to output emails to an HTML file, aiding in development by simulating email sending and reviewing output without actual email dispatch. It includes support for output path and optional raw email format.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileTransportOptions {\n    type: 'file';\n    outputPath: string;\n    raw?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ApolloServerPlugin for Apollo Server & GraphQL in TypeScript\nDESCRIPTION: Example of updating an ApolloServerPlugin to use async methods as required by the new Apollo Server version. This change affects custom plugins, requiring them to return Promises.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nexport class TranslateErrorsPlugin implements ApolloServerPlugin {\n   constructor(private i18nService: I18nService) {}\n\n-  requestDidStart(): GraphQLRequestListener {\n+  async requestDidStart(): Promise<GraphQLRequestListener> {\n     return {\n-      willSendResponse: requestContext => {\n+      willSendResponse: async requestContext => {\n         const { errors, context } = requestContext;\n         if (errors) {\n           (requestContext.response as any).errors = errors.map(err => {\n             return this.i18nService.translateError(context.req, err as GraphQLError) as any;\n           });\n         }\n       },\n     };\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing PostgreSQL Query Performance with pg_stat_statements - SQL\nDESCRIPTION: This SQL snippet queries the pg_stat_statements extension in PostgreSQL to analyze slow or most frequent queries, showing the database ID, total time (in minutes), average execution time per call, call count, and actual SQL query. Replace <db_id> with the relevant database's ID. The secondary (commented) command resets the statistics. Requires pg_stat_statements to be installed and loaded.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \n  dbid,\n  (total_time / 1000 / 60) as total, \n  (total_time/calls) as avg, \n  calls,\n  query \nFROM pg_stat_statements \nWHERE dbid = <db_id>\nORDER BY total DESC \nLIMIT 100;\n\n-- SELECT pg_stat_statements_reset();\n\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanCustomFieldConfig GraphQL Type in Vendure\nDESCRIPTION: GraphQL type definition for boolean custom field configuration in Vendure. This type specifies the structure for configuring boolean custom fields including properties like name, type, list status, localized labels, and permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype BooleanCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel by ID - GraphQL SDL - GraphQL\nDESCRIPTION: Provides the 'channel' query that retrieves a Channel object by its ID. Suitable for fetching details of a specific sales channel, given its identifier. Returns null if the ID does not correspond to an existing channel. Requires user authentication and a valid ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  channel(id: ID!): Channel\n}\n\n```\n\n----------------------------------------\n\nTITLE: Request Password Reset Mutation in GraphQL for Vendure\nDESCRIPTION: Requests a password reset email to be sent to the specified email address. Returns a RequestPasswordResetResult indicating the success or failure of the request.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  requestPasswordReset(emailAddress: String!): RequestPasswordResetResult\n}\n```\n\n----------------------------------------\n\nTITLE: UpdatePromotionResult GraphQL Union Type\nDESCRIPTION: Defines a union type representing possible results when updating a promotion, returning either a Promotion or a MissingConditionsError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_218\n\nLANGUAGE: graphql\nCODE:\n```\nunion UpdatePromotionResult =\nPromotion | MissingConditionsError\n```\n\n----------------------------------------\n\nTITLE: Updating Product Variants in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing ProductVariant. Accepts an UpdateProductVariantInput object and returns the updated ProductVariant entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_124\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing ProductVariant\n\"\"\"\ntype Mutation {\n  updateProductVariant(input: UpdateProductVariantInput!): ProductVariant!\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing BullMQJobQueueStrategy Graceful Shutdown in Job Queue Plugin\nDESCRIPTION: Addresses an issue with graceful shutdown for the BullMQJobQueueStrategy in the job-queue-plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v2.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"**job-queue-plugin** Fix graceful shutdown for BullMQJobQueueStrategy ([7c51eab](https://github.com/vendure-ecommerce/vendure/commit/7c51eab)), closes [#2222](https://github.com/vendure-ecommerce/vendure/issues/2222)\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Order Adjustments Field in Vendure GraphQL API\nDESCRIPTION: Notes the deprecation of the `Order.adjustments` field in Vendure's GraphQL API, removed in v1.0.0. Developers should now use the `Order.discounts` field to query order-level discounts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n# Deprecated field on Order\nadjustments\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Replacement field (v1.0.0+)\ndiscounts\n```\n\n----------------------------------------\n\nTITLE: Defining CreateQueueOptions Interface in TypeScript\nDESCRIPTION: Interface for creating new job queues, requiring a name and process function that handles the job execution.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CreateQueueOptions<T extends JobData<T>> {\n    name: string;\n    process: (job: Job<T>) => Promise<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetOrderCustomerInput Input Type in GraphQL\nDESCRIPTION: This input type is used for setting a customer for an order, requiring orderId and customerId, with an optional note.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_146\n\nLANGUAGE: graphql\nCODE:\n```\ninput SetOrderCustomerInput {\n  orderId: ID!\n  customerId: ID!\n  note: String\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Country in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting a single Country. Takes a Country ID and returns a DeletionResponse.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_37\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteCountry(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeletionResponse Type in GraphQL\nDESCRIPTION: Represents the response structure for deletion operations, containing the result status and an optional message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_33\n\nLANGUAGE: graphql\nCODE:\n```\ntype DeletionResponse {\n  result: DeletionResult!\n  message: String\n}\n```\n\n----------------------------------------\n\nTITLE: DetailComponentWithResolver Function Signature\nDESCRIPTION: The TypeScript signature of the detailComponentWithResolver function, showing its type parameters and configuration object structure with component, query, entityKey, optional getBreadcrumbs function, and variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/detail-component-with-resolver.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction detailComponentWithResolver<T extends TypedDocumentNode<any, { id: string }>, Field extends keyof ResultOf<T>, R extends Field>(config: {\n    component: Type<TypedBaseDetailComponent<T, Field>>;\n    query: T;\n    entityKey: R;\n    getBreadcrumbs?: (entity: ResultOf<T>[R]) => BreadcrumbValue;\n    variables?: T extends TypedDocumentNode<any, infer V> ? Omit<V, 'id'> : never;\n}): void\n```\n\n----------------------------------------\n\nTITLE: Implementing DateFormInputComponent for DateTime Input in Vendure Admin UI\nDESCRIPTION: Class definition for a component that allows selection of datetime values and serves as the default input for 'datetime' type fields. It implements the FormInputComponent interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass DateFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'date-form-input';\n    @Input() readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'date-form-input'>;\n    min: void\n    max: void\n    yearRange: void\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssignStockLocationsToChannelInput in GraphQL\nDESCRIPTION: This input type is used for assigning stock locations to a channel. It requires an array of stock location IDs and a channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ninput AssignStockLocationsToChannelInput {\n  stockLocationIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetMetadataFn Type in TypeScript\nDESCRIPTION: Defines a function type for setting email metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetMetadataFn<Event> = (event: Event) => EmailMetadata | Promise<EmailMetadata>\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Import statements for various documentation components used to build the UI documentation page, including member info, generation info, descriptions and card lists.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Using RichTextEditorComponent in HTML Templates\nDESCRIPTION: Example of how to use the RichTextEditorComponent in an HTML template with two-way data binding for the description property and a label.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/rich-text-editor-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-rich-text-editor\n    [(ngModel)]=\"description\"\n    label=\"Description\"\n></vdr-rich-text-editor>\n```\n\n----------------------------------------\n\nTITLE: Implementing OrderItemPriceCalculationStrategy in TypeScript\nDESCRIPTION: Class signature for the DefaultOrderItemPriceCalculationStrategy which implements the OrderItemPriceCalculationStrategy interface. It defines the calculateUnitPrice method that returns the price of a ProductVariant without modifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/default-order-item-price-calculation-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultOrderItemPriceCalculationStrategy implements OrderItemPriceCalculationStrategy {\n    calculateUnitPrice(ctx: RequestContext, productVariant: ProductVariant) => PriceCalculationResult | Promise<PriceCalculationResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: FacetValueChecker Class Signature in TypeScript\nDESCRIPTION: The signature of the FacetValueChecker class, which implements OnModuleInit interface. It includes a constructor that accepts TransactionalConnection, CacheService, and an optional EventBus, as well as methods for initialization and checking facet values on order lines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/facet-value-checker.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass FacetValueChecker implements OnModuleInit {\n    constructor(connection: TransactionalConnection, cacheService: CacheService, eventBus?: EventBus)\n    onModuleInit() => any;\n    hasFacetValues(orderLine: OrderLine, facetValueIds: ID[], ctx?: RequestContext) => Promise<boolean>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetCustomerForDraftOrderResult Union Type in GraphQL\nDESCRIPTION: Defines a GraphQL union type for the result of setting a customer for a draft order, which can be either an Order or an EmailAddressConflictError.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_175\n\nLANGUAGE: graphql\nCODE:\n```\nunion SetCustomerForDraftOrderResult = Order | EmailAddressConflictError\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Product Variants in GraphQL\nDESCRIPTION: Defines a GraphQL query to list ProductVariants with options and an optional product ID filter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_23\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"List ProductVariants either all or for the specific product.\"\"\"\ntype Query {\n  productVariants(options: ProductVariantListOptions, productId: ID): ProductVariantList!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Language Codes Enum (GraphQL, GraphQL)\nDESCRIPTION: Defines a set of supported language codes, each paired with a human-readable name as a comment. This enum can be used to type-check or restrict queries and mutations that involve language options within the Vendure system. Each code (such as 'mr' for Marathi, 'mn' for Mongolian, etc.) is mapped to its respective language, with variants included for regional dialects or scripts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nmr\n\"\"\"Mongolian\"\"\"\nmn\n\"\"\"Nepali\"\"\"\nne\n\"\"\"North Ndebele\"\"\"\nnd\n\"\"\"Northern Sami\"\"\"\nse\n\"\"\"Norwegian Bokmål\"\"\"\nnb\n\"\"\"Norwegian Nynorsk\"\"\"\nnn\n\"\"\"Nyanja\"\"\"\nny\n\"\"\"Odia\"\"\"\nor\n\"\"\"Oromo\"\"\"\nom\n\"\"\"Ossetic\"\"\"\nos\n\"\"\"Pashto\"\"\"\nps\n\"\"\"Persian\"\"\"\nfa\n\"\"\"Dari\"\"\"\nfa_AF\n\"\"\"Polish\"\"\"\npl\n\"\"\"Portuguese\"\"\"\npt\n\"\"\"Brazilian Portuguese\"\"\"\npt_BR\n\"\"\"European Portuguese\"\"\"\npt_PT\n\"\"\"Punjabi\"\"\"\npa\n\"\"\"Quechua\"\"\"\nqu\n\"\"\"Romanian\"\"\"\nro\n\"\"\"Moldavian\"\"\"\nro_MD\n\"\"\"Romansh\"\"\"\nrm\n\"\"\"Rundi\"\"\"\nrn\n\"\"\"Russian\"\"\"\nru\n\"\"\"Samoan\"\"\"\nsm\n\"\"\"Sango\"\"\"\nsg\n\"\"\"Sanskrit\"\"\"\nsa\n\"\"\"Scottish Gaelic\"\"\"\ngd\n\"\"\"Serbian\"\"\"\nsr\n\"\"\"Shona\"\"\"\nsn\n\"\"\"Sichuan Yi\"\"\"\nii\n\"\"\"Sindhi\"\"\"\nsd\n\"\"\"Sinhala\"\"\"\nsi\n\"\"\"Slovak\"\"\"\nsk\n\"\"\"Slovenian\"\"\"\nsl\n\"\"\"Somali\"\"\"\nso\n\"\"\"Southern Sotho\"\"\"\nst\n\"\"\"Spanish\"\"\"\nes\n\"\"\"European Spanish\"\"\"\nes_ES\n\"\"\"Mexican Spanish\"\"\"\nes_MX\n\"\"\"Sundanese\"\"\"\nsu\n\"\"\"Swahili\"\"\"\nsw\n\"\"\"Congo Swahili\"\"\"\nsw_CD\n\"\"\"Swedish\"\"\"\nsv\n\"\"\"Tajik\"\"\"\ntg\n\"\"\"Tamil\"\"\"\nta\n\"\"\"Tatar\"\"\"\ntt\n\"\"\"Telugu\"\"\"\nte\n\"\"\"Thai\"\"\"\nth\n\"\"\"Tibetan\"\"\"\nbo\n\"\"\"Tigrinya\"\"\"\nti\n\"\"\"Tongan\"\"\"\nto\n\"\"\"Turkish\"\"\"\ntr\n\"\"\"Turkmen\"\"\"\ntk\n\"\"\"Ukrainian\"\"\"\nuk\n\"\"\"Urdu\"\"\"\nur\n\"\"\"Uyghur\"\"\"\nug\n\"\"\"Uzbek\"\"\"\nuz\n\"\"\"Vietnamese\"\"\"\nvi\n\"\"\"Volapük\"\"\"\nvo\n\"\"\"Welsh\"\"\"\ncy\n\"\"\"Western Frisian\"\"\"\nfy\n\"\"\"Wolof\"\"\"\nwo\n\"\"\"Xhosa\"\"\"\nxh\n\"\"\"Yiddish\"\"\"\nyi\n\"\"\"Yoruba\"\"\"\nyo\n\"\"\"Zulu\"\"\"\nzu\n```\n\n----------------------------------------\n\nTITLE: Modal Dialog Component Implementation Example\nDESCRIPTION: Example implementation of a component that implements the Dialog interface, showing how to handle resolution and cancellation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/modal-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyDialog implements Dialog {\n resolveWith: (result?: any) => void;\n\n okay() {\n   doSomeWork().subscribe(result => {\n     this.resolveWith(result);\n   })\n }\n\n cancel() {\n   this.resolveWith(false);\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ErrorResultUnion Type Signature - Vendure - TypeScript\nDESCRIPTION: This snippet provides the generic TypeScript type signature for ErrorResultUnion as used within Vendure. The utility type takes a union of error and success results, the Vendure entity type to substitute for the original 'success' object, and optionally a generic U. It produces a union type including all error results and the correct entity. This relies on types such as GraphQLErrorResult, JustErrorResults, and VendureEntity being available from Vendure's source code. The result type is particularly useful for aligning backend and frontend representations of possible query/mutation outcomes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/error-result-union.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ErrorResultUnion<T extends GraphQLErrorResult | U, E extends VendureEntity, U = any> = | JustErrorResults<T>\n    | E\n```\n\n----------------------------------------\n\nTITLE: Icon Implementation in Angular Templates\nDESCRIPTION: Examples of Clarity icons in Angular with different sizes, badges, and status indicators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<clr-icon shape=\"star\" size=\"8\"></clr-icon>\n<clr-icon shape=\"star\" size=\"16\"></clr-icon>\n<clr-icon shape=\"star\" size=\"24\"></clr-icon>\n<clr-icon shape=\"star\" size=\"36\"></clr-icon>\n<clr-icon shape=\"star\" size=\"48\"></clr-icon>\n<clr-icon shape=\"star\" size=\"56\"></clr-icon>\n\n<clr-icon shape=\"user\" class=\"has-badge--success\"></clr-icon>\n<clr-icon shape=\"user\" class=\"has-alert\"></clr-icon>\n<clr-icon shape=\"user\" class=\"has-badge--info\"></clr-icon>\n<clr-icon shape=\"user\" class=\"has-badge--error\"></clr-icon>\n\n<clr-icon shape=\"user\" class=\"is-success\"></clr-icon>\n<clr-icon shape=\"user\" class=\"is-info\"></clr-icon>\n<clr-icon shape=\"user\" class=\"is-warning\"></clr-icon>\n<clr-icon shape=\"user\" class=\"is-error\"></clr-icon>\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Logical Operators Enum (GraphQL, GraphQL)\nDESCRIPTION: Defines a GraphQL enum named LogicalOperator with values AND and OR, representing boolean conjunctions and disjunctions. Used to construct compound filter or search conditions in GraphQL query arguments. No special dependencies are required; only the enum must be imported where logical operators are needed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum LogicalOperator {\nAND\nOR\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Product Review Submission Mutation in GraphQL\nDESCRIPTION: This SDL snippet executes a mutation to submit a product review in the Vendure Shop API. Dependencies include a running Vendure server and access to the Shop API endpoint. Key parameters include productId, summary, body, rating, authorName, and authorLocation. The expected output returns the id and state of the review. The mutation requires precise productId to submit a review for the correct product.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/test-plugins/reviews/README.md#2025-04-22_snippet_0\n\nLANGUAGE: SDL\nCODE:\n```\nmutation {\n  submitProductReview(input: {\n    productId: 2\n    summary: \"Good tablet\"\n    body: \"The screen is clear, bright and sharp!\"\n    rating: 5\n    authorName: \"Joe Smith\"\n    authorLocation: \"London\"\n  }) {\n    id\n    state\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: EntityOptions Interface Definition in TypeScript\nDESCRIPTION: The EntityOptions interface defines configuration options related to internal entity handling in Vendure, including ID strategy, duplication, money handling, and caching TTLs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EntityOptions {\n    entityIdStrategy?: EntityIdStrategy<any>;\n    entityDuplicators?: Array<EntityDuplicator<any>>;\n    moneyStrategy?: MoneyStrategy;\n    channelCacheTtl?: number;\n    zoneCacheTtl?: number;\n    taxRateCacheTtl?: number;\n    metadataModifiers?: EntityMetadataModifier[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Customer GraphQL Type in Vendure Shop API\nDESCRIPTION: Defines the `Customer` type, representing a customer entity. It includes basic information (ID, name, contact details), timestamps, associated addresses, a paginated list of their orders (accepting `OrderListOptions`), a link to their optional user account, and any custom fields associated with the customer.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\ntype Customer {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  title: String\n  firstName: String!\n  lastName: String!\n  phoneNumber: String\n  emailAddress: String!\n  addresses: [Address!]\n  orders(options: OrderListOptions): OrderList!\n  user: User\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchResponse Type in GraphQL\nDESCRIPTION: Type definition for search results, including matching items, total count, and facet/collection filtering options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_116\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype SearchResponse {\nitems: [SearchResult!]!\ntotalItems: Int!\nfacetValues: [FacetValueResult!]!\ncollections: [CollectionResult!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Vendure\nDESCRIPTION: Function signature for running pending database migrations in Vendure. Takes a partial VendureConfig object as input and returns a Promise resolving to an array of strings representing the executed migrations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/migration/run-migrations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction runMigrations(userConfig: Partial<VendureConfig>): Promise<string[]>\n```\n\n----------------------------------------\n\nTITLE: Mutation with RequestContext Replication Mode\nDESCRIPTION: Shows how to set database replication mode to 'master' in a mutation resolver using RequestContext.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/request-context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Query()\nmyMutation(@Ctx() ctx: RequestContext) {\n  ctx.setReplicationMode('master');\n  return this.myService.getData(ctx);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IneligibleShippingMethodError Type in GraphQL\nDESCRIPTION: Defines the `IneligibleShippingMethodError` type in GraphQL. This error type is returned when an attempt is made to assign a ShippingMethod to an Order for which the order does not meet the eligibility criteria. It includes an error code and a descriptive message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_79\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when attempting to set a ShippingMethod for which the Order is not eligible\n\"\"\"\ntype IneligibleShippingMethodError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantList GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductVariantList, including its properties such as items and totalItems. It represents a paginated list of product variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_96\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariantList {\n  items: [ProductVariant!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StockAdjustment GraphQL Type\nDESCRIPTION: Defines a GraphQL type for stock adjustment entries that record changes to product variant inventory levels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_186\n\nLANGUAGE: graphql\nCODE:\n```\ntype StockAdjustment {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  productVariant: ProductVariant!\n  type: StockMovementType!\n  quantity: Int!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Add to Order Mutation Response Example\nDESCRIPTION: Example JSON response from the AddItemToOrder mutation showing the updated order with the newly added item, including order state and total values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"addItemToOrder\": {\n      \"__typename\": \"Order\",\n      \"id\": \"5\",\n      \"code\": \"KE5FJPVV3Y3LX134\",\n      \"state\": \"AddingItems\",\n      \"totalQuantity\": 1,\n      \"totalWithTax\": 275880,\n      \"lines\": [\n        {\n          \"id\": \"14\",\n          \"unitPriceWithTax\": 275880,\n          \"quantity\": 1,\n          \"linePriceWithTax\": 275880\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodTranslation Type in GraphQL\nDESCRIPTION: Defines the `PaymentMethodTranslation` GraphQL object type. This holds the localized `name` and `description` for a `PaymentMethod` in a specific language, identified by `languageCode`. It also includes standard `id` and timestamp fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_86\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethodTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringFieldOption GraphQL Object Type\nDESCRIPTION: GraphQL type definition for StringFieldOption which represents predefined options for string custom fields, containing a value and localized labels for display purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_131\n\nLANGUAGE: graphql\nCODE:\n```\ntype StringFieldOption {\nvalue: String!\nlabel: [LocalizedString!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerList GraphQL Type in Vendure Shop API\nDESCRIPTION: Defines the `CustomerList` type, commonly used as a return type for queries that list customers, often with pagination. It contains an array of `Customer` objects (`items`) and the total number of customers (`totalItems`) that match the query criteria.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_29\n\nLANGUAGE: graphql\nCODE:\n```\ntype CustomerList {\n  items: [Customer!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: LocaleLanguageNamePipe Class Definition in TypeScript\nDESCRIPTION: The TypeScript class definition for LocaleLanguageNamePipe which extends LocaleBasePipe and implements PipeTransform. It provides methods to transform language codes into readable names.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-language-name-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass LocaleLanguageNamePipe extends LocaleBasePipe implements PipeTransform {\n    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)\n    transform(value: any, locale?: unknown) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Customer Address by ID in TypeScript\nDESCRIPTION: Deletes an Address entity identified by its unique ID. Requires the request context and the ID of the address to be deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteAddress(ctx: RequestContext, id: ID) => Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: DurationPipe Class Definition in TypeScript\nDESCRIPTION: The class definition for DurationPipe, showing its constructor and transform method. It implements the PipeTransform interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/duration-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DurationPipe implements PipeTransform {\n    constructor(i18nService: I18nService)\n    transform(value: number) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntry Sorting Parameters - GraphQL - GraphQL\nDESCRIPTION: Provides input type HistoryEntrySortParameter for specifying sort properties and order in HistoryEntry queries. Depends on the SortOrder enum and allows sorting by id, createdAt, and updatedAt fields. Designed as a reusable component in entity list options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_25\n\nLANGUAGE: graphql\nCODE:\n```\ninput HistoryEntrySortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Draft Order Billing Address - GraphQL Mutation - GraphQL\nDESCRIPTION: Exposes the unsetDraftOrderBillingAddress mutation to remove the billing address from a draft order. It takes the orderId as input and returns the updated Order object. Only applicable when the order is in a draft state; will not affect confirmed or finalized orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_104\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUnsets the billing address for a draft Order\n\"\"\"\ntype Mutation {\nunsetDraftOrderBillingAddress(orderId: ID!): Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntry Filtering Capabilities - GraphQL - GraphQL\nDESCRIPTION: Establishes the HistoryEntryFilterParameter input for advanced filtering of HistoryEntry entities. Utilizes various operator types (IDOperators, DateOperators, StringOperators) and logical operations (_and, _or) for compound filters. Inputs can include ID, timestamps, type, and compound logical clauses; output is a filtered HistoryEntry query result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_23\n\nLANGUAGE: graphql\nCODE:\n```\ninput HistoryEntryFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  type: StringOperators\n  _and: [HistoryEntryFilterParameter!]\n  _or: [HistoryEntryFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DateOperators for Date Field Filtering in GraphQL\nDESCRIPTION: This GraphQL input type defines operators for filtering on DateTime fields in Vendure. It supports comparison operators like eq (equals), before, after, and between, as well as an isNull operator to check for null values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Operators for filtering on a DateTime field\"\"\"\ninput DateOperators {\n  eq: DateTime\n  before: DateTime\n  after: DateTime\n  between: DateRange\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Dependencies\nDESCRIPTION: Command to install required testing packages including @vendure/testing, Vitest, GraphQL-tag and SWC compiler dependencies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @vendure/testing vitest graphql-tag @swc/core unplugin-swc\n```\n\n----------------------------------------\n\nTITLE: TextCustomFieldConfig GraphQL Type Definition\nDESCRIPTION: Defines the configuration schema for text-based custom fields in Vendure. Includes properties for name, type, list status, localized labels, and permission requirements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_209\n\nLANGUAGE: graphql\nCODE:\n```\ntype TextCustomFieldConfig {\nname: String!\ntype: String!\nlist: Boolean!\nlabel: [LocalizedString!]\ndescription: [LocalizedString!]\nreadonly: Boolean\ninternal: Boolean\nnullable: Boolean\nrequiresPermission: [Permission!]\nui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation\nDESCRIPTION: This snippet imports various components essential for rendering and displaying member and generation information in the documentation. Dependencies include React components such as MemberInfo and GenerationInfo, with the primary output being an organized display of documentation cards.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/assets/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Number List Filtering Operators - GraphQL\nDESCRIPTION: Declares an input type for filtering against lists of numbers using 'inList', which requires a Float. Used for filtering queries based on list inclusion. Requires fields or APIs supporting numeric filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_106\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of Number fields\n\"\"\"\ninput NumberListOperators {\n  inList: Float!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reindexing in GraphQL\nDESCRIPTION: Specifies a mutation to trigger reindexing, which returns a Job object representing the reindexing process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_76\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  reindex: Job!\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Management Input Types\nDESCRIPTION: Collection of input types for managing channel relationships with various entities like collections, facets, payment methods, products, and promotions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_137\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemoveCollectionsFromChannelInput {\n  collectionIds: [ID!]!\n  channelId: ID!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemoveFacetsFromChannelInput {\n  facetIds: [ID!]!\n  channelId: ID!\n  force: Boolean\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemovePaymentMethodsFromChannelInput {\n  paymentMethodIds: [ID!]!\n  channelId: ID!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemoveProductVariantsFromChannelInput {\n  productVariantIds: [ID!]!\n  channelId: ID!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemoveProductsFromChannelInput {\n  productIds: [ID!]!\n  channelId: ID!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemovePromotionsFromChannelInput {\n  promotionIds: [ID!]!\n  channelId: ID!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemoveShippingMethodsFromChannelInput {\n  shippingMethodIds: [ID!]!\n  channelId: ID!\n}\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput RemoveStockLocationsFromChannelInput {\n  stockLocationIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NegativeQuantityError GraphQL Object Type\nDESCRIPTION: Defines the NegativeQuantityError object type for cases where there's an attempt to set a negative OrderLine quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_107\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned when attempting to set a negative OrderLine quantity.\"\"\"\ntype NegativeQuantityError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Entity Class Inheriting from VendureEntity (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the Tag class for the Vendure framework, inheriting from VendureEntity. It includes a constructor accepting an optional DeepPartial<Tag> input for partial initialization and a string property 'value' representing the tag label. This entity requires TypeORM (for @Column), class inheritance from VendureEntity, and appropriate type definitions. Inputs: optional object with Tag properties; Outputs: instantiated Tag entity. Intended for use in entity frameworks supporting labeling and filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/tag.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Tag extends VendureEntity {\n    constructor(input?: DeepPartial<Tag>)\n    @Column()\n    value: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanStructFieldConfig GraphQL Object Type in Vendure\nDESCRIPTION: Defines the BooleanStructFieldConfig GraphQL object type which represents the configuration for a structural field of boolean type in a custom field UI setting.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype BooleanStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NoChangesSpecifiedError GraphQL Object Type\nDESCRIPTION: Defines the NoChangesSpecifiedError object type for cases where a call to modifyOrder fails to specify any changes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_109\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned when a call to modifyOrder fails to specify any changes\"\"\"\ntype NoChangesSpecifiedError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Prefix in BullMQJobQueuePlugin\nDESCRIPTION: This snippet demonstrates how to set a custom Redis key prefix for BullMQ. It sets the prefix to 'my-prefix' for both worker and queue options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nBullMQJobQueuePlugin.init({\n  workerOptions: {\n    prefix: 'my-prefix'\n  },\n  queueOptions: {\n    prefix: 'my-prefix'\n  }\n}),\n```\n\n----------------------------------------\n\nTITLE: Collections Query Response Structure\nDESCRIPTION: Example JSON response showing the structure of collection data returned from the GraphQL query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/navigation-menu/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"collections\": {\n      \"items\": [\n        {\n          \"id\": \"2\",\n          \"slug\": \"electronics\",\n          \"name\": \"Electronics\",\n          \"featuredAsset\": {\n            \"id\": \"16\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/5b/jakob-owens-274337-unsplash__preview.jpg\"\n          }\n        },\n        {\n          \"id\": \"5\",\n          \"slug\": \"home-garden\",\n          \"name\": \"Home & Garden\",\n          \"featuredAsset\": {\n            \"id\": \"47\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/3e/paul-weaver-1120584-unsplash__preview.jpg\"\n          }\n        },\n        {\n          \"id\": \"8\",\n          \"slug\": \"sports-outdoor\",\n          \"name\": \"Sports & Outdoor\",\n          \"featuredAsset\": {\n            \"id\": \"24\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/96/michael-guite-571169-unsplash__preview.jpg\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing proxy port in admin-ui-plugin dev mode\nDESCRIPTION: This commit fixes an issue with the proxy port when running the admin-ui-plugin in development mode.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n* **admin-ui-plugin** Fix proxy port when in dev mode ([28b096c](https://github.com/vendure-ecommerce/vendure/commit/28b096c))\n```\n\n----------------------------------------\n\nTITLE: Using DatetimePickerComponent with ngModel in HTML Templates\nDESCRIPTION: Example showing how to use the datetime picker component with ngModel binding to capture the selected date value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/datetime-picker-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-datetime-picker [(ngModel)]=\"startDate\"></vdr-datetime-picker>\n```\n\n----------------------------------------\n\nTITLE: Registering React Components as FormInputComponents in Vendure Admin UI\nDESCRIPTION: This function registers a React component to be used as a FormInputComponent in the Vendure admin UI. It takes a string identifier and a React ElementType as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-extensions/register-react-form-input-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerReactFormInputComponent(id: string, component: ElementType): void\n```\n\n----------------------------------------\n\nTITLE: Defining the CachedSession Type in TypeScript\nDESCRIPTION: Defines the TypeScript type alias `CachedSession`. This type represents a simplified, cache-friendly structure for session data, including `id`, `token`, `expires`, `user` (of type `CachedSessionUser`), and other relevant session properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/session-cache-strategy.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ntype CachedSession = {\n    cacheExpiry: number;\n    id: ID;\n    token: string;\n    expires: Date;\n    activeOrderId?: ID;\n    authenticationStrategy?: string;\n    user?: CachedSessionUser;\n    activeChannelId?: ID;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Product Option Groups in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve multiple ProductOptionGroups with an optional filter term.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_21\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  productOptionGroups(filterTerm: String): [ProductOptionGroup!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tags List with GraphQL\nDESCRIPTION: This query is used to retrieve a list of tags based on the specified `TagListOptions`. It returns a `TagList` object, providing a comprehensive list of tags configured within the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_43\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntags(options: TagListOptions): TagList!\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Fields Type Definition in Vendure\nDESCRIPTION: TypeScript type definition for the CustomFields configuration object showing all available entities that can have custom fields. Includes system entities like Address, Administrator, Asset, etc.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomFields = {\n    Address?: CustomFieldConfig[];\n    Administrator?: CustomFieldConfig[];\n    Asset?: CustomFieldConfig[];\n    Channel?: CustomFieldConfig[];\n    Collection?: CustomFieldConfig[];\n    Customer?: CustomFieldConfig[];\n    CustomerGroup?: CustomFieldConfig[];\n    Facet?: CustomFieldConfig[];\n    FacetValue?: CustomFieldConfig[];\n    Fulfillment?: CustomFieldConfig[];\n    GlobalSettings?: CustomFieldConfig[];\n    HistoryEntry?: CustomFieldConfig[];\n    Order?: CustomFieldConfig[];\n    OrderLine?: CustomFieldConfig[];\n    Payment?: CustomFieldConfig[];\n    PaymentMethod?: CustomFieldConfig[];\n    Product?: CustomFieldConfig[];\n    ProductOption?: CustomFieldConfig[];\n    ProductOptionGroup?: CustomFieldConfig[];\n    ProductVariant?: CustomFieldConfig[];\n    ProductVariantPrice?: CustomFieldConfig[];\n    Promotion?: CustomFieldConfig[];\n    Refund?: CustomFieldConfig[];\n    Region?: CustomFieldConfig[];\n    Seller?: CustomFieldConfig[];\n    Session?: CustomFieldConfig[];\n    ShippingLine?: CustomFieldConfig[];\n    ShippingMethod?: CustomFieldConfig[];\n    StockLevel?: CustomFieldConfig[];\n    StockLocation?: CustomFieldConfig[];\n    StockMovement?: CustomFieldConfig[];\n    TaxCategory?: CustomFieldConfig[];\n    TaxRate?: CustomFieldConfig[];\n    User?: CustomFieldConfig[];\n    Zone?: CustomFieldConfig[];\n} & { [entity: string]: CustomFieldConfig[] }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Ancestors in TypeScript\nDESCRIPTION: Gets the ancestors of a given collection. Multiple method signatures are provided for different use cases.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetAncestors(collectionId: ID): Promise<Collection[]>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetAncestors(collectionId: ID, ctx: RequestContext): Promise<Array<Translated<Collection>>>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ngetAncestors(collectionId: ID, ctx?: RequestContext): Promise<Array<Translated<Collection> | Collection>>\n```\n\n----------------------------------------\n\nTITLE: Configuring React Route Definition\nDESCRIPTION: Route configuration for the React Greeter component using registerReactRouteComponent\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerReactRouteComponent } from '@vendure/admin-ui/react';\nimport { Greeter } from './components/Greeter';\n\nexport default [\n    registerReactRouteComponent({\n        component: Greeter,\n        path: '',\n        title: 'Greeter Page',\n        breadcrumb: 'Greeter',\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: CurrencyInputComponent Class Definition\nDESCRIPTION: TypeScript class definition for CurrencyInputComponent which implements ControlValueAccessor, OnInit, OnChanges, and OnDestroy interfaces. It handles converting between decimal display values and integer cent values internally.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/currency-input-component.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CurrencyInputComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {\n    @Input() disabled = false;\n    @Input() readonly = false;\n    @Input() value: number;\n    @Input() currencyCode = '';\n    @Output() valueChange = new EventEmitter();\n    prefix$: Observable<string>;\n    suffix$: Observable<string>;\n    hasFractionPart = true;\n    onChange: (val: any) => void;\n    onTouch: () => void;\n    _inputValue: string;\n    readonly precision: number;\n    readonly precisionFactor: number;\n    constructor(dataService: DataService, currencyService: CurrencyService)\n    ngOnInit() => ;\n    ngOnChanges(changes: SimpleChanges) => ;\n    ngOnDestroy() => ;\n    registerOnChange(fn: any) => ;\n    registerOnTouched(fn: any) => ;\n    setDisabledState(isDisabled: boolean) => ;\n    onInput(value: string) => ;\n    onFocus() => ;\n    writeValue(value: any) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Enums in GraphQL for Vendure E-commerce\nDESCRIPTION: Defines permission enums for various operations in Vendure. Each entity (Order, PaymentMethod, Product, etc.) has corresponding CRUD permissions that can be granted to users or roles in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_13\n\nLANGUAGE: GraphQL\nCODE:\n```\nReadOrder\n\"\"\"Grants permission to update Order\"\"\"\nUpdateOrder\n\"\"\"Grants permission to delete Order\"\"\"\nDeleteOrder\n\"\"\"Grants permission to create PaymentMethod\"\"\"\nCreatePaymentMethod\n\"\"\"Grants permission to read PaymentMethod\"\"\"\nReadPaymentMethod\n\"\"\"Grants permission to update PaymentMethod\"\"\"\nUpdatePaymentMethod\n\"\"\"Grants permission to delete PaymentMethod\"\"\"\nDeletePaymentMethod\n\"\"\"Grants permission to create Product\"\"\"\nCreateProduct\n\"\"\"Grants permission to read Product\"\"\"\nReadProduct\n\"\"\"Grants permission to update Product\"\"\"\nUpdateProduct\n\"\"\"Grants permission to delete Product\"\"\"\nDeleteProduct\n\"\"\"Grants permission to create Promotion\"\"\"\nCreatePromotion\n\"\"\"Grants permission to read Promotion\"\"\"\nReadPromotion\n\"\"\"Grants permission to update Promotion\"\"\"\nUpdatePromotion\n\"\"\"Grants permission to delete Promotion\"\"\"\nDeletePromotion\n\"\"\"Grants permission to create ShippingMethod\"\"\"\nCreateShippingMethod\n\"\"\"Grants permission to read ShippingMethod\"\"\"\nReadShippingMethod\n\"\"\"Grants permission to update ShippingMethod\"\"\"\nUpdateShippingMethod\n\"\"\"Grants permission to delete ShippingMethod\"\"\"\nDeleteShippingMethod\n\"\"\"Grants permission to create Tag\"\"\"\nCreateTag\n\"\"\"Grants permission to read Tag\"\"\"\nReadTag\n\"\"\"Grants permission to update Tag\"\"\"\nUpdateTag\n\"\"\"Grants permission to delete Tag\"\"\"\nDeleteTag\n\"\"\"Grants permission to create TaxCategory\"\"\"\nCreateTaxCategory\n\"\"\"Grants permission to read TaxCategory\"\"\"\nReadTaxCategory\n\"\"\"Grants permission to update TaxCategory\"\"\"\nUpdateTaxCategory\n\"\"\"Grants permission to delete TaxCategory\"\"\"\nDeleteTaxCategory\n\"\"\"Grants permission to create TaxRate\"\"\"\nCreateTaxRate\n\"\"\"Grants permission to read TaxRate\"\"\"\nReadTaxRate\n\"\"\"Grants permission to update TaxRate\"\"\"\nUpdateTaxRate\n\"\"\"Grants permission to delete TaxRate\"\"\"\nDeleteTaxRate\n\"\"\"Grants permission to create Seller\"\"\"\nCreateSeller\n\"\"\"Grants permission to read Seller\"\"\"\nReadSeller\n\"\"\"Grants permission to update Seller\"\"\"\nUpdateSeller\n\"\"\"Grants permission to delete Seller\"\"\"\nDeleteSeller\n\"\"\"Grants permission to create StockLocation\"\"\"\nCreateStockLocation\n\"\"\"Grants permission to read StockLocation\"\"\"\nReadStockLocation\n\"\"\"Grants permission to update StockLocation\"\"\"\nUpdateStockLocation\n\"\"\"Grants permission to delete StockLocation\"\"\"\nDeleteStockLocation\n\"\"\"Grants permission to create System\"\"\"\nCreateSystem\n\"\"\"Grants permission to read System\"\"\"\nReadSystem\n\"\"\"Grants permission to update System\"\"\"\nUpdateSystem\n\"\"\"Grants permission to delete System\"\"\"\nDeleteSystem\n\"\"\"Grants permission to create Zone\"\"\"\nCreateZone\n\"\"\"Grants permission to read Zone\"\"\"\nReadZone\n\"\"\"Grants permission to update Zone\"\"\"\nUpdateZone\n\"\"\"Grants permission to delete Zone\"\"\"\nDeleteZone\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components - React - JavaScript\nDESCRIPTION: This snippet imports several reusable documentation-related components (MemberInfo, GenerationInfo, MemberDescription) from specific documentation or theme paths, readying them for use in the documentation page. The dependencies are '@site/src/components/MemberInfo', '@site/src/components/GenerationInfo', and '@site/src/components/MemberDescription'. No parameters are required, and the imports simply make these modules available for later use in the file. Intended outputs depend on their subsequent use in component render trees.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining AssetService Class in TypeScript\nDESCRIPTION: This code snippet defines the AssetService class, which contains methods for managing Asset entities in Vendure. It includes constructor and various methods for asset operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/asset-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AssetService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, listQueryBuilder: ListQueryBuilder, eventBus: EventBus, tagService: TagService, channelService: ChannelService, roleService: RoleService, customFieldRelationService: CustomFieldRelationService)\n    findOne(ctx: RequestContext, id: ID, relations?: RelationPaths<Asset>) => Promise<Asset | undefined>;\n    findAll(ctx: RequestContext, options?: AssetListOptions, relations?: RelationPaths<Asset>) => Promise<PaginatedList<Asset>>;\n    getFeaturedAsset(ctx: RequestContext, entity: T) => Promise<Asset | undefined>;\n    getEntityAssets(ctx: RequestContext, entity: T) => Promise<Asset[] | undefined>;\n    updateFeaturedAsset(ctx: RequestContext, entity: T, input: EntityAssetInput) => Promise<T>;\n    updateEntityAssets(ctx: RequestContext, entity: T, input: EntityAssetInput) => Promise<T>;\n    create(ctx: RequestContext, input: CreateAssetInput) => Promise<CreateAssetResult>;\n    update(ctx: RequestContext, input: UpdateAssetInput) => Promise<Asset>;\n    delete(ctx: RequestContext, ids: ID[], force: boolean = false, deleteFromAllChannels: boolean = false) => Promise<DeletionResponse>;\n    assignToChannel(ctx: RequestContext, input: AssignAssetsToChannelInput) => Promise<Asset[]>;\n    createFromFileStream(stream: ReadStream, ctx?: RequestContext) => Promise<CreateAssetResult>;\n    createFromFileStream(stream: Readable, filePath: string, ctx?: RequestContext) => Promise<CreateAssetResult>;\n    createFromFileStream(stream: ReadStream | Readable, maybeFilePathOrCtx?: string | RequestContext, maybeCtx?: RequestContext) => Promise<CreateAssetResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IdentifierChangeTokenInvalidError in GraphQL\nDESCRIPTION: GraphQL type definition for an error returned when a token used to change a Customer's email address is invalid or does not match any expected tokens.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_48\n\nLANGUAGE: graphql\nCODE:\n```\ntype IdentifierChangeTokenInvalidError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Schema Extension in GraphQL\nDESCRIPTION: This example demonstrates how to extend the GraphQL schema for the SearchReindexResponse type by adding timeTaken and indexedItemCount fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin-metadata.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = gql`extend type SearchReindexResponse {\n    timeTaken: Int!\n    indexedItemCount: Int!\n}`;\n```\n\n----------------------------------------\n\nTITLE: Defining the createTaxRate Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `createTaxRate` mutation, used to create a new Tax Rate. It takes a non-nullable `CreateTaxRateInput` object specifying the tax rate details and returns the newly created `TaxRate` object, guaranteed non-null.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nCreate a new TaxRate\n\"\"\"\ntype Mutation {\n  createTaxRate(input: CreateTaxRateInput!): TaxRate!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BulkActionFunctionContext Interface in TypeScript\nDESCRIPTION: Describes the context passed to certain functions in the BulkAction definition, including selected items, host component, injector, and route information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/bulk-action.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BulkActionFunctionContext<ItemType, ComponentType> {\n    selection: ItemType[];\n    hostComponent: ComponentType;\n    injector: Injector;\n    route: ActivatedRoute;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Error Result Guard in TypeScript\nDESCRIPTION: Example showing how to create and use an ErrorResultGuard with proper type annotation for AddItemToOrderResult. The guard uses a predicate function to test if the input represents a success or error case.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/create-error-result-guard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst orderResultGuard: ErrorResultGuard<AddItemToOrderResult>\n  = createErrorResultGuard(order => !!order.lines);\n```\n\n----------------------------------------\n\nTITLE: Injecting NotificationService into Angular Component - TypeScript\nDESCRIPTION: This snippet demonstrates injecting Vendure's built-in NotificationService into an Angular standalone component using the constructor for dependency injection. It enables showing a success toast notification upon a button click. Dependencies include @vendure/admin-ui/core (providing NotificationService and SharedModule). The showNotification() method triggers the notification. Inputs involve user interaction with the button, outputting a visible notification. The code assumes Angular 14+ syntax and proper plugin context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SharedModule, NotificationService } from '@vendure/admin-ui/core';\\nimport { Component } from '@angular/core';\\n\\n@Component({\\n    selector: 'test',\\n    template: `\\n        <vdr-page-block>\\n            <button class=\\\"button primary\\\" (click)=\\\"showNotification()\\\">Click me</button>\\n        </vdr-page-block>`,\\n    standalone: true,\\n    imports: [SharedModule],\\n})\\nexport class TestComponent {\\n    // highlight-next-line\\n    constructor(private notificationService: NotificationService) {}\\n    \\n    showNotification() {\\n        // highlight-next-line\\n        this.notificationService.success('Hello!');\\n    }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FloatCustomFieldConfig GraphQL Type\nDESCRIPTION: Defines the FloatCustomFieldConfig type with various fields for configuring custom float fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_39\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FloatCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  min: Float\n  max: Float\n  step: Float\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Country by ID - GraphQL SDL - GraphQL\nDESCRIPTION: This snippet declares the 'country' query, which takes a required ID and returns the Country object matching it or null otherwise. Used in shipping, tax, or other location-based features. Parameter validation and authentication are required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  country(id: ID!): Country\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntryList Type in GraphQL\nDESCRIPTION: Defines the `HistoryEntryList` type in GraphQL for the Vendure Admin API. This type represents a paginated list of `HistoryEntry` objects, including the list of items and the total number of items available.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_76\n\nLANGUAGE: graphql\nCODE:\n```\ntype HistoryEntryList {\n  items: [HistoryEntry!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Possible Next Order States with GraphQL\nDESCRIPTION: Demonstrates how to query the next possible states for an order using the nextOrderStates query in the Shop API. This helps determine what transitions are available from the current state.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/orders/index.md#2025-04-22_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery NextStates {\n  nextOrderStates\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionTranslation GraphQL Type\nDESCRIPTION: GraphQL type definition for collection translations containing basic metadata and localized content fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  slug: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterDataTableComponent Function Signature in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signature for the registerDataTableComponent function, which takes a DataTableComponentConfig object as its parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-table-components/register-data-table-component.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction registerDataTableComponent(config: DataTableComponentConfig): void\n```\n\n----------------------------------------\n\nTITLE: Defining WorkerHealthCheckConfig Interface in TypeScript\nDESCRIPTION: Interface definition for WorkerHealthCheckConfig which specifies the configuration for the Worker's HTTP health check endpoint. It includes required port property and optional hostname and route properties with their default values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/worker/worker-health-check-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WorkerHealthCheckConfig {\n    port: number;\n    hostname?: string;\n    route?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionItemActionConfig Interface in TypeScript\nDESCRIPTION: Interface that extends PromotionActionConfig to define configuration for item-level promotion actions. Includes an execute function that calculates discounts for order items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PromotionItemActionConfig<T extends ConfigArgs, U extends PromotionCondition[]> extends PromotionActionConfig<T, U> {\n    execute: ExecutePromotionItemActionFn<T, U>;\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Setting Shipping Methods with Digital Products\nDESCRIPTION: This JSON response shows the result of setting shipping methods for an order with both digital and physical products. It includes details about the order lines, showing a digital MP3 download product and a physical basketball, each with their appropriate shipping method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"setOrderShippingMethod\": {\n      \"id\": \"11\",\n      \"code\": \"C6H3UZ6WQ62LAPS8\",\n      \"total\": 5262,\n      \"lines\": [\n        {\n          \"id\": \"16\",\n          \"quantity\": 1,\n          \"linePriceWithTax\": 1458,\n          \"productVariant\": {\n            \"name\": \"Jeff Buckley Grace mp3 download\",\n            \"sku\": \"1231241241231\",\n            \"customFields\": {\n              // highlight-next-line\n              \"isDigital\": true\n            }\n          }\n        },\n        {\n          \"id\": \"17\",\n          \"quantity\": 1,\n          \"linePriceWithTax\": 4328,\n          \"productVariant\": {\n            \"name\": \"Basketball\",\n            \"sku\": \"WTB1418XB06\",\n            \"customFields\": {\n              \"isDigital\": false\n            }\n          }\n        }\n      ],\n      \"shippingLines\": [\n        // highlight-start\n        {\n          \"id\": \"13\",\n          \"shippingMethod\": {\n            \"name\": \"Digital Download\"\n          },\n          \"priceWithTax\": 0\n        },\n        // highlight-end\n        {\n          \"id\": \"14\",\n          \"shippingMethod\": {\n            \"name\": \"Standard Shipping\"\n          },\n          \"priceWithTax\": 500\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MinIO S3-Compatible Configuration\nDESCRIPTION: Example configuration for using MinIO as an S3-compatible storage service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  AssetServerPlugin.init({\n    route: 'assets',\n    assetUploadDir: path.join(__dirname, 'assets'),\n    namingStrategy: new DefaultAssetNamingStrategy(),\n    storageStrategyFactory: configureS3AssetStorage({\n      bucket: 'my-minio-bucket',\n      credentials: {\n        accessKeyId: process.env.MINIO_ACCESS_KEY_ID,\n        secretAccessKey: process.env.MINIO_SECRET_ACCESS_KEY,\n      },\n      nativeS3Configuration: {\n        endpoint: process.env.MINIO_ENDPOINT ?? 'http://localhost:9000',\n        forcePathStyle: true,\n        signatureVersion: 'v4',\n        region: 'eu-west-1',\n      },\n    }),\n}),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type ConfigurableOperationInput\nDESCRIPTION: Defines the `ConfigurableOperationInput` type, used to represent a configurable operation. It requires a `code` (String) to identify the operation and a list of `arguments` (an array of `ConfigArgInput`) which provide the necessary configuration parameters for that operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ninput ConfigurableOperationInput {\n  code: String!\n  arguments: [ConfigArgInput!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Product Detail Query Response Example\nDESCRIPTION: Example JSON response from the GetProductDetail query showing a laptop product with multiple variants, including pricing in cents and asset information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"id\": \"1\",\n      \"name\": \"Laptop\",\n      \"description\": \"Now equipped with seventh-generation Intel Core processors, Laptop is snappier than ever. From daily tasks like launching apps and opening files to more advanced computing, you can power through your day thanks to faster SSDs and Turbo Boost processing up to 3.6GHz.\",\n      \"featuredAsset\": {\n        \"id\": \"1\",\n        \"preview\": \"https://demo.vendure.io/assets/preview/71/derick-david-409858-unsplash__preview.jpg\"\n      },\n      \"assets\": [\n        {\n          \"id\": \"1\",\n          \"preview\": \"https://demo.vendure.io/assets/preview/71/derick-david-409858-unsplash__preview.jpg\"\n        }\n      ],\n      \"variants\": [\n        {\n          \"id\": \"1\",\n          \"name\": \"Laptop 13 inch 8GB\",\n          \"sku\": \"L2201308\",\n          \"stockLevel\": \"IN_STOCK\",\n          \"currencyCode\": \"USD\",\n          \"price\": 129900,\n          \"priceWithTax\": 155880,\n          \"featuredAsset\": null,\n          \"assets\": []\n        },\n        {\n          \"id\": \"2\",\n          \"name\": \"Laptop 15 inch 8GB\",\n          \"sku\": \"L2201508\",\n          \"stockLevel\": \"IN_STOCK\",\n          \"currencyCode\": \"USD\",\n          \"price\": 139900,\n          \"priceWithTax\": 167880,\n          \"featuredAsset\": null,\n          \"assets\": []\n        },\n        {\n          \"id\": \"3\",\n          \"name\": \"Laptop 13 inch 16GB\",\n          \"sku\": \"L2201316\",\n          \"stockLevel\": \"IN_STOCK\",\n          \"currencyCode\": \"USD\",\n          \"price\": 219900,\n          \"priceWithTax\": 263880,\n          \"featuredAsset\": null,\n          \"assets\": []\n        },\n        {\n          \"id\": \"4\",\n          \"name\": \"Laptop 15 inch 16GB\",\n          \"sku\": \"L2201516\",\n          \"stockLevel\": \"IN_STOCK\",\n          \"currencyCode\": \"USD\",\n          \"price\": 229900,\n          \"priceWithTax\": 275880,\n          \"featuredAsset\": null,\n          \"assets\": []\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logger in Unit Tests with TypeScript\nDESCRIPTION: Illustrates how to integrate the TestingLogger into a unit test using the NestJS Testing module with Jest as the testing framework. It involves configuring the TestingLogger and asserting logger calls.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/testing-logger.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// unit test example\nimport { Test } from '@nestjs/testing';\nimport { Logger } from '@vendure/core';\nimport { TestingLogger } from '@vendure/testing';\n\nbeforeEach(async () => {\n  const moduleRef = await Test.createTestingModule({\n    // Nest testing setup omitted\n  }).compile();\n\n  Logger.useLogger(testingLogger);\n  moduleRef.useLogger(new Logger());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestShippingMethodResult Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for results when testing shipping methods, indicating eligibility and providing a quote if eligible.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_208\n\nLANGUAGE: graphql\nCODE:\n```\ntype TestShippingMethodResult {\neligible: Boolean!\nquote: TestShippingMethodQuote\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Customer Address - GraphQL Mutation - GraphQL\nDESCRIPTION: The updateCustomerAddress mutation lets administrators update an address for a customer. Requires an UpdateAddressInput specifying the address modifications and returns the modified Address entity. Address validation is enforced to ensure mailable and valid locations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_113\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Address\n\"\"\"\ntype Mutation {\nupdateCustomerAddress(input: UpdateAddressInput!): Address!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing payment methods, including pagination, sorting, and filtering parameters. It allows for customizing the query results based on various criteria.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_114\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PaymentMethodListOptions {\n  skip: Int\n  take: Int\n  sort: PaymentMethodSortParameter\n  filter: PaymentMethodFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductTranslationInput Input Type in GraphQL\nDESCRIPTION: This input type is used for creating or updating product translations. It includes fields for id, languageCode, name, slug, description, and customFields. The languageCode field is required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_123\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProductTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  slug: String\n  description: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tax Categories with GraphQL\nDESCRIPTION: This query fetches a list of tax categories using `TaxCategoryListOptions`. The result is a `TaxCategoryList`, representing different tax categories defined in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_44\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntaxCategories(options: TaxCategoryListOptions): TaxCategoryList!\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Relation Custom Fields in TypeScript\nDESCRIPTION: Example showing how to access a relation custom field by explicitly joining the relation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await this.connection.getRepository(ctx, Customer).findOne({\n    where: { id: 1 },\n    relations: {\n        customFields: {\n            avatar: true,\n        }\n    }\n});\nconsole.log(customer.avatar);\n```\n\n----------------------------------------\n\nTITLE: Defining LocalizedString GraphQL Type\nDESCRIPTION: Defines the `LocalizedString` GraphQL type, used for representing internationalized string values. It pairs a `languageCode` (enum `LanguageCode`) with the corresponding string `value`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_96\n\nLANGUAGE: graphql\nCODE:\n```\ntype LocalizedString {\n  languageCode: LanguageCode!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SortOrder Enum in GraphQL for Vendure\nDESCRIPTION: Defines the SortOrder enum used to specify sort direction in GraphQL queries. Contains two values: ASC for ascending order and DESC for descending order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_14\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum SortOrder {\nASC\nDESC\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaxRateListOptions Input Type in GraphQL\nDESCRIPTION: Input type for paginating, sorting, and filtering tax rates. Similar to TaxCategoryListOptions, it provides structure for controlling result sets with pagination, sorting, and filtering capabilities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_167\n\nLANGUAGE: graphql\nCODE:\n```\ninput TaxRateListOptions {\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: TaxRateSortParameter\n\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: TaxRateFilterParameter\n\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shipping Eligibility Checkers in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve all available Shipping Eligibility Checkers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_37\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  shippingEligibilityCheckers: [ConfigurableOperationDefinition!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a Product is added, updated or deleted. It extends VendureEntityEvent and includes a constructor and a product property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductEvent extends VendureEntityEvent<Product, ProductInputTypes> {\n    constructor(ctx: RequestContext, entity: Product, type: 'created' | 'updated' | 'deleted', input?: ProductInputTypes)\n    product: Product\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomerGroupFormInputComponent in TypeScript\nDESCRIPTION: A component for selecting a Customer via an autocomplete select input, intended for use with 'ID' type fields representing Customer IDs. It implements FormInputComponent and OnInit interfaces.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerGroupFormInputComponent implements FormInputComponent, OnInit {\n    static readonly id: DefaultFormComponentId = 'customer-group-form-input';\n    @Input() readonly: boolean;\n    formControl: FormControl<string | { id: string }>;\n    customerGroups$: Observable<GetCustomerGroupsQuery['customerGroups']['items']>;\n    config: DefaultFormComponentConfig<'customer-group-form-input'>;\n    constructor(dataService: DataService)\n    ngOnInit() => ;\n    selectGroup(group: ItemOf<GetCustomerGroupsQuery, 'customerGroups'>) => ;\n    compareWith(o1: T, o2: T) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailGenerator Interface in TypeScript\nDESCRIPTION: Interface definition for email generation in Vendure. Extends InjectableStrategy and provides methods for initializing the generator and generating email content with template variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-generator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EmailGenerator<T extends string = any, E extends VendureEvent = any> extends InjectableStrategy {\n    onInit?(options: EmailPluginOptions): void | Promise<void>;\n    generate(\n        from: string,\n        subject: string,\n        body: string,\n        templateVars: { [key: string]: any },\n    ): Pick<EmailDetails, 'from' | 'subject' | 'body'>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Promotion Actions in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve all available Promotion Actions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_26\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  promotionActions: [ConfigurableOperationDefinition!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a Facet is added, updated or deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass FacetEvent extends VendureEntityEvent<Facet, FacetInputTypes> {\n    constructor(ctx: RequestContext, entity: Facet, type: 'created' | 'updated' | 'deleted', input?: FacetInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ApiType in TypeScript for Vendure GraphQL APIs\nDESCRIPTION: This code snippet defines the ApiType type, which is used to specify the GraphQL API through which a request was made. It can be either 'admin', 'shop', or 'custom'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/api-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ApiType = 'admin' | 'shop' | 'custom'\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Code Generator Dependencies\nDESCRIPTION: Commands to install the required npm packages for GraphQL code generation including graphql, typescript and codegen CLI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/codegen/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i graphql\nnpm i -D typescript @graphql-codegen/cli\n\nnpx graphql-code-generator init\n\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Add to Wishlist Mutation in GraphQL for Vendure\nDESCRIPTION: This GraphQL mutation adds a product variant to the user's wishlist in a Vendure e-commerce system. It takes a productVariantId as input and returns the added wishlist item's details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddToWishlist {\n    addToWishlist(productVariantId: \"7\") {\n        id\n        productVariant {\n            id\n            name\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PermissionDefinitionConfig Interface in TypeScript\nDESCRIPTION: Defines the PermissionDefinitionConfig interface used in configuring permissions, which includes parameters such as name, description, assignability, and whether the permission is internal.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PermissionDefinitionConfig {\n    name: string;\n    description?: string;\n    assignable?: boolean;\n    internal?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input for ActiveOrderStrategy\nDESCRIPTION: Example of how to define a GraphQL input type for the ActiveOrderStrategy. This input will be used in Shop API operations to specify the active order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/active-order-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: GraphQL\nCODE:\n```\nmutation AddItemToOrder {\n  addItemToOrder(\n    productVariantId: 42,\n    quantity: 1,\n    activeOrderInput: { token: \"123456\" }\n  ) {\n    ...on Order {\n      id\n      # ...etc\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NativeAuthenticationResult Union Type in GraphQL\nDESCRIPTION: A union type representing possible results of native authentication, including successful authentication, invalid credentials, unverified user, and auth strategy errors.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_63\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion NativeAuthenticationResult = CurrentUser | InvalidCredentialsError | NotVerifiedError | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Bulk Actions Documentation in React/JSX\nDESCRIPTION: This code snippet imports various React components used for displaying documentation about bulk actions in Vendure. It includes components for member information, generation details, member descriptions, and a document card list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/bulk-actions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Implementing Identifier Change Request Event in TypeScript\nDESCRIPTION: Event class for handling identifier change requests. Extends VendureEvent and requires RequestContext and User entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass IdentifierChangeRequestEvent extends VendureEvent {\n    constructor(ctx: RequestContext, user: User)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Namespaced Cache Keys Using TypeScript\nDESCRIPTION: This example demonstrates an implementation of the getKey function, which generates a cache key by combining a namespace string with the provided id. This approach helps prevent key collisions and supports multiple strategies or entity types. The function accepts an id (string or number) and returns the fully-qualified cache key string; it can be used within the CacheConfig interface's getKey property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/cache-config.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetKey: id => `MyStrategy:getProductVariantIds:${id}`,\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Vendure\nDESCRIPTION: Configuration for connecting Vendure to a PostgreSQL database using environment variables for connection details and SSL certificate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-digital-ocean-app-platform/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    dbConnectionOptions: {\n        // ...\n        type: 'postgres',\n        database: process.env.DB_NAME,\n        host: process.env.DB_HOST,\n        port: +process.env.DB_PORT,\n        username: process.env.DB_USERNAME,\n        password: process.env.DB_PASSWORD,\n        ssl: process.env.DB_CA_CERT ? {\n            ca: process.env.DB_CA_CERT,\n        } : undefined,\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting Services with JSDoc\nDESCRIPTION: Example showing how to document services in a Vendure plugin. It demonstrates proper tagging with '@category Services' and shows how to document public methods while marking internal methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The LoyaltyPointsService provides methods for managing a\n * customer's loyalty points balance.\n *\n * @category Services\n */\n@Injectable()\nexport class LoyaltyPointsService {\n\n    /** @internal */\n    constructor(private connection: TransactionalConnection) {}\n\n    /**\n     * Adds the given number of points to the customer's balance.\n     */\n    addPoints(ctx: RequestContext, customerId: ID, points: number): Promise<LoyaltyPointsTransaction> {\n        // implementation...\n    }\n\n    /**\n     * Deducts the given number of points from the customer's balance.\n     */\n    deductPoints(customerId: ID, points: number): Promise<LoyaltyPointsTransaction> {\n        // implementation...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerHistoryEntryComponent Interface in TypeScript\nDESCRIPTION: This code defines the CustomerHistoryEntryComponent interface which extends HistoryEntryComponent. It includes a customer property of type CustomerFragment, providing access to the Customer object in custom history entry components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/customer-history-entry-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomerHistoryEntryComponent extends HistoryEntryComponent {\n    customer: CustomerFragment;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultCachePlugin in Vendure\nDESCRIPTION: Sets up the DefaultCachePlugin which uses the database to store cache data. This plugin is simple to set up and doesn't require additional infrastructure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/cache/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultCachePlugin, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        DefaultCachePlugin.init({\n            // optional maximum number of items to\n            // store in the cache. Defaults to 10,000\n            cacheSize: 20_000,\n        }),\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodQuote GraphQL Type\nDESCRIPTION: GraphQL schema definition for the PaymentMethodQuote type that represents a payment method with eligibility information for a specific context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_128\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethodQuote {\n  id: ID!\n  code: String!\n  name: String!\n  description: String!\n  isEligible: Boolean!\n  eligibilityMessage: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Worker Environment Variables for Vendure on Railway\nDESCRIPTION: Configures the environment variables needed for the Vendure worker process, focusing on database connection details to enable background processing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-railway/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nDB_NAME=${{Postgres.PGDATABASE}}\nDB_USERNAME=${{Postgres.PGUSER}}\nDB_PASSWORD=${{Postgres.PGPASSWORD}}\nDB_HOST=${{Postgres.PGHOST}}\nDB_PORT=${{Postgres.PGPORT}}\n```\n\n----------------------------------------\n\nTITLE: Defining ZoneSortParameter GraphQL Input Type\nDESCRIPTION: GraphQL input type for specifying sorting criteria for zone queries. Allows sorting by ID, creation date, update date, and name fields with customizable sort order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_207\n\nLANGUAGE: graphql\nCODE:\n```\ninput ZoneSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dashboard Widgets in Vendure Admin UI\nDESCRIPTION: The registerDashboardWidget function allows registering custom dashboard widgets that can be included in the admin UI layout. It requires a unique identifier and a configuration object that defines the widget's properties and behavior.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/dashboard-widgets/register-dashboard-widget.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerDashboardWidget(id: string, config: DashboardWidgetConfig): void\n```\n\n----------------------------------------\n\nTITLE: ExecutePromotionLineActionFn Type Definition\nDESCRIPTION: Type definition for the function used by a PromotionLineAction to calculate the discount on the OrderLine. It has a similar signature to ExecutePromotionItemActionFn but may be used in a different context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecutePromotionLineActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (\n    ctx: RequestContext,\n    orderLine: OrderLine,\n    args: ConfigArgValues<T>,\n    state: ConditionState<U>,\n    promotion: Promotion,\n) => number | Promise<number>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Response in JSON\nDESCRIPTION: This JSON object shows the response structure for a successful UpdateCustomerEmail mutation, including the updated customer details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updateCustomerEmail\": {\n      \"id\": \"1\",\n      \"name\": \"John Smith\",\n      \"email\": \"john.smith@email.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Extension for SearchResultSortParameter\nDESCRIPTION: Illustrates the GraphQL schema modification resulting from using `extendSearchSortType`. Specifically, it shows the `SearchResultSortParameter` input type being extended with the custom `distance` field of type `SortOrder`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nextend input SearchResultSortParameter {\n     distance: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in UI Components\nDESCRIPTION: Example of using generated GraphQL types in an Angular component with the graphql() function\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { SharedModule, TypedBaseListComponent } from '@vendure/admin-ui/core';\nimport { graphql } from '../../gql';\n\nconst getOrganizationListDocument = graphql(`\n    query GetOrganizationList($options: OrganizationListOptions) {\n        organizations(options: $options) {\n            items {\n                id\n                createdAt\n                updatedAt\n                name\n                invoiceEmailAddresses\n            }\n            totalItems\n        }\n    }\n`);\n\n@Component({\n    selector: 'organization-list',\n    templateUrl: './organization-list.component.html',\n    styleUrls: ['./organization-list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class OrganizationListComponent extends TypedBaseListComponent<\n    typeof getOrganizationListDocument,\n    'organizations'\n> {\n    constructor() {\n        super();\n        super.configure({\n            document: getOrganizationListDocument,\n            getItems: (data) => data.organizations,\n            setVariables: (skip, take) => ({\n                options: {\n                    skip,\n                    take,\n                    filter: {\n                        name: {\n                            contains: this.searchTermControl.value,\n                        },\n                        ...this.filters.createFilterInput(),\n                    },\n                    sort: this.sorts.createSortInput(),\n                },\n            }),\n            refreshListOnChanges: [this.filters.valueChanges, this.sorts.valueChanges],\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe JS Library for Storefront\nDESCRIPTION: Shell commands to install the `@stripe/stripe-js` library using Yarn or NPM. This library is required for the storefront application to interact with Stripe Elements for building the payment UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @stripe/stripe-js\n# or\nnpm install @stripe/stripe-js\n```\n\n----------------------------------------\n\nTITLE: Complex GraphQL Query Example (GraphQL)\nDESCRIPTION: This snippet shows an example of a malicious GraphQL query with high complexity. It demonstrates the kind of query that the HardenPlugin aims to prevent, with a complexity score of 2,443,203.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery EvilQuery {\n  products {\n    items {\n      collections {\n        productVariants {\n          items {\n            product {\n              collections {\n                productVariants {\n                  items {\n                    product {\n                      variants {\n                        name\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringStructFieldConfig Type in GraphQL\nDESCRIPTION: A GraphQL type definition for StringStructFieldConfig, which represents string field configuration within a structured custom field. It includes validation and UI options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_195\n\nLANGUAGE: graphql\nCODE:\n```\ntype StringStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  length: Int\n  pattern: String\n  options: [StringFieldOption!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting a Vendure Plugin Class with JSDoc\nDESCRIPTION: Example of a well-documented plugin class with JSDoc comments showing proper tagging for the plugin itself, init method, UI extensions, and internal methods. This demonstrates how to document the main plugin class to provide clear usage instructions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Advanced search and search analytics for Vendure.\n *\n * @category Plugin\n */\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    // ...\n})\nexport class LoyaltyPointsPlugin implements OnApplicationBootstrap {\n    /** @internal */\n    static options: LoyaltyPointsPluginInitOptions;\n\n    /**\n     * The static `init()` method is called with the options to\n     * configure the plugin.\n     *\n     * @example\n     * ```ts\n     * LoyaltyPointsPlugin.init({\n     *     enablePartialRedemption: true\n     * }),\n     * ```\n     */\n    static init(options: LoyaltyPointsPluginInitOptions) {\n        this.options = options;\n        return AdvancedSearchPlugin;\n    }\n\n    /**\n     * The static `uiExtensions` property is used to provide the\n     * necessary UI extensions to the Admin UI\n     * in order to display the loyalty points admin features.\n     * This property is used in the `AdminUiPlugin` initialization.\n     *\n     * @example\n     * ```ts\n     * import { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n     * import { AdvancedSearchPlugin } from '@acme/vendure-plugin-loyalty-points';\n     *\n     * // ...\n     * plugins: [\n     *   AdminUiPlugin.init({\n     *     route: 'admin',\n     *     port: 3002,\n     *     app: compileUiExtensions({\n     *       outputPath: path.join(__dirname, '../admin-ui'),\n     *       extensions: [LoyaltyPointsPlugin.uiExtensions],\n     *       devMode: false,\n     *     })\n     *   }),\n     * ],\n     * ```\n     */\n    static uiExtensions = advancedSearchPluginUi;\n\n    /** @internal */\n    constructor(/* ... */) {}\n\n    /** @internal */\n    async onApplicationBootstrap() {\n        // Logic to set up event subscribers etc.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Codegen NPM Script\nDESCRIPTION: Package.json script configuration for running GraphQL code generation\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"codegen\": \"graphql-codegen --config codegen.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelPaymentErrorResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the error object returned by the CancelPaymentFn when the payment could not be cancelled. It includes properties for success status, payment state, error message, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CancelPaymentErrorResult {\n    success: false;\n    state?: Exclude<PaymentState, 'Cancelled'>;\n    errorMessage?: string;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Product Review GraphQL Type Definition\nDESCRIPTION: Demonstrates how to define a GraphQL type that corresponds to a database entity, implementing the Node interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/extend-graphql-api/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const apiExtensions = gql`\n  type ProductReview implements Node {\n    id: ID!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n    product: Product!\n    productId: ID!\n    text: String!\n    rating: Float!\n  }\n`;\n```\n\n----------------------------------------\n\nTITLE: IDListOperators GraphQL Input Type Definition\nDESCRIPTION: Provides operators for filtering on a list of ID fields, currently supporting the inList operator to filter elements present in a specified list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_95\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of ID fields\n\"\"\"\ninput IDListOperators {\ninList: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: DropdownComponent Class Signature\nDESCRIPTION: TypeScript signature of the DropdownComponent class, showing its properties and methods for managing dropdown state and interactions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/dropdown-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DropdownComponent {\n    isOpen = false;\n    public trigger: ElementRef;\n    @Input() manualToggle = false;\n    onClick() => ;\n    toggleOpen() => ;\n    onOpenChange(callback: (isOpen: boolean) => void) => ;\n    setTriggerElement(elementRef: ElementRef) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Args Decorator for GraphQL Arguments\nDESCRIPTION: Example of using @Args decorator to handle GraphQL mutation arguments with corresponding schema definition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\nextend type Mutation {\n    addItemToWishlist(variantId: ID!): Wishlist\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver, Args } from '@nestjs/graphql';\nimport { Ctx, RequestContext, ID } from '@vendure/core';\n\n@Resolver()\nexport class WishlistResolver {\n\n    @Mutation()\n    addItemToWishlist(\n        @Ctx() ctx: RequestContext,\n        @Args() args: { variantId: ID }\n    ) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodList GraphQL Type\nDESCRIPTION: Defines a GraphQL type for paginated lists of shipping methods, containing the items and total count of items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_182\n\nLANGUAGE: graphql\nCODE:\n```\ntype ShippingMethodList {\n  items: [ShippingMethod!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JobQueue GraphQL Type\nDESCRIPTION: Defines the `JobQueue` GraphQL type, representing a specific queue within the Vendure job queue system. It includes the queue's `name` and a boolean indicating whether it is currently `running`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_92\n\nLANGUAGE: graphql\nCODE:\n```\ntype JobQueue {\n  name: String!\n  running: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Files Configuration\nDESCRIPTION: JSON configuration showing how to include the CHANGELOG.md file in the published npm package.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n \"files\": [\n    \"dist\",\n    \"README.md\",\n    \"CHANGELOG.md\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Customer for Order Mutation\nDESCRIPTION: GraphQL mutation for assigning a customer to an existing order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetCustomerForOrder($input: CreateCustomerInput!){\n  setCustomerForOrder(input: $input) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueSortParameter Input Type\nDESCRIPTION: Input type for specifying sort order of facet value fields including timestamps and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_89\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  facetId: SortOrder\n  name: SortOrder\n  code: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Surcharge Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for surcharges that can be applied to orders, including price information and tax data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_199\n\nLANGUAGE: graphql\nCODE:\n```\ntype Surcharge {\nid: ID!\ncreatedAt: DateTime!\nupdatedAt: DateTime!\ndescription: String!\nsku: String\ntaxLines: [TaxLine!]!\nprice: Money!\npriceWithTax: Money!\ntaxRate: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PriceCalculationResult Type in TypeScript\nDESCRIPTION: This code snippet defines the PriceCalculationResult type, which contains the calculated price and a boolean indicating whether the price includes tax. It is used as the result of price calculations in Vendure's product variant and order item pricing strategies.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/price-calculation-result.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PriceCalculationResult = {\n    price: number;\n    priceIncludesTax: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Array to Tree Conversion Utility in TypeScript\nDESCRIPTION: TypeScript utility function that converts a flat array of nodes with parent-child relationships into a tree structure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/navigation-menu/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport type HasParent = { id: string; parentId: string | null };\nexport type TreeNode<T extends HasParent> = T & {\n    children: Array<TreeNode<T>>;\n};\nexport type RootNode<T extends HasParent> = {\n    id?: string;\n    children: Array<TreeNode<T>>;\n};\n\n/**\n * Builds a tree from an array of nodes which have a parent.\n * Based on https://stackoverflow.com/a/31247960/772859, modified to preserve ordering.\n */\nexport function arrayToTree<T extends HasParent>(nodes: T[]): RootNode<T> {\n    const topLevelNodes: Array<TreeNode<T>> = [];\n    const mappedArr: { [id: string]: TreeNode<T> } = {};\n\n    // First map the nodes of the array to an object -> create a hash table.\n    for (const node of nodes) {\n        mappedArr[node.id] = { ...(node as any), children: [] };\n    }\n\n    for (const id of nodes.map((n) => n.id)) {\n        if (mappedArr.hasOwnProperty(id)) {\n            const mappedElem = mappedArr[id];\n            const parentId = mappedElem.parentId;\n            if (!parent) {\n                continue;\n            }\n            // If the element is not at the root level, add it to its parent array of children.\n            const parentIsRoot = !mappedArr[parentId];\n            if (!parentIsRoot) {\n                if (mappedArr[parentId]) {\n                    mappedArr[parentId].children.push(mappedElem);\n                } else {\n                    mappedArr[parentId] = { children: [mappedElem] } as any;\n                }\n            } else {\n                topLevelNodes.push(mappedElem);\n            }\n        }\n    }\n    const rootId = topLevelNodes.length ? topLevelNodes[0].parentId : undefined;\n    return { id: rootId, children: topLevelNodes };\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Timezone Check Query\nDESCRIPTION: SQL query to verify MySQL/MariaDB database timezone configuration\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT TIMEDIFF(NOW(), UTC_TIMESTAMP);\n```\n\n----------------------------------------\n\nTITLE: Defining the FulfillmentState Type Alias (TypeScript)\nDESCRIPTION: Defines the `FulfillmentState` type alias in TypeScript using a union type. This type represents the possible states of a fulfillment in Vendure's fulfillment process. It includes the default states 'Created', 'Pending', and 'Cancelled', and can be extended with custom states defined in `CustomFulfillmentStates` and other states from `FulfillmentStates`. This type is typically used within Vendure's fulfillment state machine.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-state.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype FulfillmentState = | 'Created'\n    | 'Pending'\n    | 'Cancelled'\n    | keyof CustomFulfillmentStates\n    | keyof FulfillmentStates\n```\n\n----------------------------------------\n\nTITLE: CRUD Operation with Allow Decorator in Vendure with TypeScript\nDESCRIPTION: Demonstrates using the Allow decorator on a GraphQL resolver method to manage access to CRUD operations, providing a robust permissions interface for the 'Wishlist' entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/permission-definition.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Resolver()\nexport class WishlistResolver {\n\n  @Allow(wishlist.Create)\n  @Mutation()\n  createWishlist() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections in TypeScript\nDESCRIPTION: Implements filtering functionality in the Collection list view of the admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nImplement filtering in Collection list view ([aa74129])\n```\n\n----------------------------------------\n\nTITLE: Province Translation Input Type Definition\nDESCRIPTION: Input type for province translations containing language code, name, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_135\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProvinceTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckPaymentMethodEligibilityCheckerFn Type in TypeScript\nDESCRIPTION: Type definition for CheckPaymentMethodEligibilityCheckerFn, a function to determine order eligibility for a payment method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-eligibility-checker.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckPaymentMethodEligibilityCheckerFn<T extends ConfigArgs> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    method: PaymentMethod,\n) => boolean | string | Promise<boolean | string>\n```\n\n----------------------------------------\n\nTITLE: Defining CustomOrderStates Interface in TypeScript\nDESCRIPTION: An empty interface that serves as an extension point for the standard OrderState functionality in Vendure. This interface can be implemented to define custom order states beyond the default ones provided by the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/custom-order-states.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomOrderStates {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Language Template to Email Handler in TypeScript\nDESCRIPTION: Example demonstrating how to add a language-specific template for German language support.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst extendedConfirmationHandler = confirmationHandler\n  .addTemplate({\n    channelCode: 'default',\n    languageCode: LanguageCode.de,\n    templateFile: 'body.de.hbs',\n    subject: 'Bestellbestätigung für #{{ order.code }}',\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionList Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the PromotionList entity, which represents a paginated list of promotions with total item count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_99\n\nLANGUAGE: graphql\nCODE:\n```\ntype PromotionList {\n  items: [Promotion!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Display in Vendure\nDESCRIPTION: Imports React components used for displaying documentation about Vendure components, including MemberInfo, GenerationInfo, and MemberDescription.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining RuntimeVendureConfig Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that extends VendureConfig and makes all configuration options required at runtime. This includes API, asset, authentication, catalog, custom fields, entity, import/export, job queue, order, promotion, shipping, tax and system options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/runtime-vendure-config.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RuntimeVendureConfig extends Required<VendureConfig> {\n    apiOptions: Required<ApiOptions>;\n    assetOptions: Required<AssetOptions>;\n    authOptions: Required<AuthOptions>;\n    catalogOptions: Required<CatalogOptions>;\n    customFields: Required<CustomFields>;\n    entityOptions: Required<Omit<EntityOptions, 'entityIdStrategy'>> & EntityOptions;\n    importExportOptions: Required<ImportExportOptions>;\n    jobQueueOptions: Required<JobQueueOptions>;\n    orderOptions: Required<OrderOptions>;\n    promotionOptions: Required<PromotionOptions>;\n    shippingOptions: Required<ShippingOptions>;\n    taxOptions: Required<TaxOptions>;\n    systemOptions: Required<SystemOptions>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the CacheService Class Signature in TypeScript\nDESCRIPTION: This TypeScript code defines the class signature for `CacheService`. It shows the class properties like `cacheStrategy` and methods such as `constructor`, `createCache`, `get`, `set`, `delete`, and `invalidateTags`. The service interacts with a `CacheStrategy` (provided via `ConfigService` in the constructor) to perform caching operations like retrieving, storing, deleting cache entries, and invalidating entries based on tags. The `set` method allows specifying options like time-to-live (ttl).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/cache-service.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass CacheService {\n    protected cacheStrategy: CacheStrategy;\n    constructor(configService: ConfigService)\n    createCache(config: CacheConfig) => Cache;\n    get(key: string) => Promise<T | undefined>;\n    set(key: string, value: T, options?: SetCacheKeyOptions) => Promise<void>;\n    delete(key: string) => Promise<void>;\n    invalidateTags(tags: string[]) => Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PromotionOrderAction with Custom UI Input in TypeScript\nDESCRIPTION: Demonstrates how to create a fixed discount promotion action with custom currency form input. The code configures the discount argument with a custom UI component and implements the execute function to apply the discount.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const orderFixedDiscount = new PromotionOrderAction({\n    code: 'order_fixed_discount',\n    args: {\n        discount: {\n            type: 'int',\n            ui: {\n                component: 'currency-form-input',\n            },\n        },\n    },\n    execute(ctx, order, args) {\n        return -args.discount;\n    },\n    description: [{languageCode: LanguageCode.en, value: 'Discount order by fixed amount'}],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Custom Fields\nDESCRIPTION: Shows how to create an internal custom field that is not exposed via GraphQL APIs but can be used in plugins.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        OrderLine: [\n            {\n                name: 'referralId',\n                type: 'string',\n                // highlight-next-line\n                internal: true,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Using OrderStateLabelComponent in HTML Templates\nDESCRIPTION: Example of how to use the OrderStateLabelComponent in a template to display an order's state with a colored chip. The state property is bound to the order.state value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/order-state-label-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-order-state-label [state]=\"order.state\"></vdr-order-state-label>\n```\n\n----------------------------------------\n\nTITLE: Sorting Customer Groups with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CustomerGroupSortParameter GraphQL input type used to sort customer group data in Vendure. It allows sorting by ID, creation time, update time, and name using SortOrder enum.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_72\n\nLANGUAGE: graphql\nCODE:\n```\ninput CustomerGroupSortParameter {\nid: SortOrder\ncreatedAt: SortOrder\nupdatedAt: SortOrder\nname: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FloatStructFieldConfig Type in GraphQL\nDESCRIPTION: Specifies the structure of a float struct field configuration, including properties like name, type, list, label, description, and numeric constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_69\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FloatStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  min: Float\n  max: Float\n  step: Float\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Number Operators for Filtering Numeric Fields - GraphQL\nDESCRIPTION: Defines an input type offering a variety of comparison operators (eq, lt, lte, gt, gte, between, isNull) for filtering numeric fields. Supports both Int and Float values. Useful for flexible querying and filtering based on numeric logic, with dependencies on NumberRange input type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_107\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nOperators for filtering on a Int or Float field\n\"\"\"\ninput NumberOperators {\n  eq: Float\n  lt: Float\n  lte: Float\n  gt: Float\n  gte: Float\n  between: NumberRange\n  isNull: Boolean\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AssetSortParameter Input Type in GraphQL\nDESCRIPTION: This input type defines the sorting parameters for asset queries in the Vendure admin API. It allows sorting assets by various properties including ID, creation date, name, file size, dimensions, and other metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssetSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  name: SortOrder\n  fileSize: SortOrder\n  mimeType: SortOrder\n  width: SortOrder\n  height: SortOrder\n  source: SortOrder\n  preview: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundState Type in TypeScript for Vendure\nDESCRIPTION: This code snippet defines the RefundState type, which represents the possible states of a refund in the Vendure ecommerce system. It includes default states ('Pending', 'Settled', 'Failed') and allows for custom states through union types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/refund-state.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype RefundState = 'Pending' | 'Settled' | 'Failed' | keyof CustomRefundStates | keyof RefundStates\n```\n\n----------------------------------------\n\nTITLE: Defining ShippingMethodListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing shipping methods, including pagination parameters (skip, take), sorting options, and filtering capabilities. It also allows specifying the logical operator for combining multiple filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_149\n\nLANGUAGE: graphql\nCODE:\n```\ninput ShippingMethodListOptions {\n\"\"\"\nSkips the first n results, for use in pagination\n\"\"\"\nskip: Int\n\n\"\"\"\nTakes n results, for use in pagination\n\"\"\"\ntake: Int\n\n\"\"\"\nSpecifies which properties to sort the results by\n\"\"\"\nsort: ShippingMethodSortParameter\n\n\"\"\"\nAllows the results to be filtered\n\"\"\"\nfilter: ShippingMethodFilterParameter\n\n\"\"\"\nSpecifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n\"\"\"\nfilterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Administrator and Authentication Mutations in GraphQL\nDESCRIPTION: Mutations for managing administrators and authentication, including assigning roles to administrators and authenticating users with support for remember me functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  assignRoleToAdministrator(administratorId: ID!, roleId: ID!): Administrator!\n  authenticate(input: AuthenticationInput!, rememberMe: Boolean): AuthenticationResult!\n  createAdministrator(input: CreateAdministratorInput!): Administrator!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring String Options with Localization\nDESCRIPTION: Demonstrates setting up predefined options for string custom fields with localized labels for the admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LanguageCode } from '@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'condition',\n                type: 'string',\n                options: [\n                    {value: 'new', label: [{languageCode: LanguageCode.en, value: 'New'}]},\n                    {value: 'used', label: [{languageCode: LanguageCode.en, value: 'Used'}]},\n                ],\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Active Administrator - GraphQL Mutation - GraphQL\nDESCRIPTION: The updateActiveAdministrator mutation allows an authenticated administrator to update their own details. Requires an input object specifying fields to change and returns the updated Administrator. Commonly used as part of user profile functionality for current admin sessions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_106\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate the active (currently logged-in) Administrator\n\"\"\"\ntype Mutation {\nupdateActiveAdministrator(input: UpdateActiveAdministratorInput!): Administrator!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SESTransportOptions TypeScript Interface\nDESCRIPTION: Defines transport options for using AWS SES with Nodemailer, allowing integration with AWS's SES for email delivery. Users need to configure SES client settings and can specify an optional email sending rate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SES, SendRawEmailCommand } from '@aws-sdk/client-ses'\n\n const ses = new SES({\n    apiVersion: '2010-12-01',\n    region: 'eu-central-1',\n    credentials: {\n        accessKeyId: process.env.SES_ACCESS_KEY || '',\n        secretAccessKey: process.env.SES_SECRET_KEY || '',\n    },\n })\n\n const config: VendureConfig = {\n  // Add an instance of the plugin to the plugins array\n  plugins: [\n    EmailPlugin.init({\n      handler: defaultEmailHandlers,\n      templateLoader: new FileBasedTemplateLoader(path.join(__dirname, '../static/email/templates')),\n      transport: {\n        type: 'ses',\n        SES: { ses, aws: { SendRawEmailCommand } },\n        sendingRate: 10, // optional messages per second sending rate\n      },\n    }),\n  ],\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SESTransportOptions extends SESTransport.Options {\n    type: 'ses';\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating Multiple Relations\nDESCRIPTION: Example of using the hydrate method to join multiple relations to a product entity, including applying product variant prices.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/entity-hydrator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.entityHydrator.hydrate(ctx, product, {\n  relations: [\n    'variants.stockMovements'\n    'optionGroups.options',\n    'featuredAsset',\n  ],\n  applyProductVariantPrices: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Route Configuration with Angular Router Features\nDESCRIPTION: This snippet showcases advanced route configuration using Angular Router features. It demonstrates how to use the routeConfig property to add custom route guards, resolvers, and other advanced routing options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\nimport { inject } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { TestComponent } from './components/test/test.component';\nimport { PermissionsService } from './services';\n\nexport default [\n    registerRouteComponent({\n        component: TestComponent,\n        path: ':id',\n        title: 'Test',\n        breadcrumb: 'Test',\n        routeConfig: {\n            pathMatch: 'full',\n            canActivate: [(route: ActivatedRouteSnapshot) => {\n                return inject(PermissionsService).canActivate(route.params.id);\n            }],\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining MimeTypeError GraphQL Object Type\nDESCRIPTION: Defines the MimeTypeError object type with fields for errorCode, message, fileName, and mimeType. It represents an error related to file mime types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_100\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype MimeTypeError {\n  errorCode: ErrorCode!\n  message: String!\n  fileName: String!\n  mimeType: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OrderPlacedEvent in TypeScript\nDESCRIPTION: Adds an OrderPlacedEvent to the core functionality of Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd OrderPlacedEvent ([c1465dc])\n```\n\n----------------------------------------\n\nTITLE: Defining a LocalizedStringArray in TypeScript\nDESCRIPTION: Example of creating a LocalizedStringArray to store a title in multiple languages (English, German, and Chinese). Each array element contains a languageCode and the corresponding localized value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/localized-string-array.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst title: LocalizedStringArray = [\n  { languageCode: LanguageCode.en, value: 'English Title' },\n  { languageCode: LanguageCode.de, value: 'German Title' },\n  { languageCode: LanguageCode.zh, value: 'Chinese Title' }\n]\n```\n\n----------------------------------------\n\nTITLE: Card Implementation in Angular Templates\nDESCRIPTION: Example of using the card component in Angular templates for grouping related content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<vdr-card title=\"Card\">\n    This is a card. On a detail page, content should usually be placed inside a card.\n</vdr-card>\n```\n\n----------------------------------------\n\nTITLE: Defining the deleteAsset Mutation in GraphQL\nDESCRIPTION: This GraphQL snippet defines the `deleteAsset` mutation used to delete an Asset. It accepts a non-nullable `DeleteAssetInput` object, likely containing the asset ID and potentially options like force deletion, and returns a non-nullable `DeletionResponse` indicating success or failure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_30\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete an Asset\n\"\"\"\ntype Mutation {\n  deleteAsset(input: DeleteAssetInput!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered Search Response\nDESCRIPTION: JSON response from the filtered search query showing only products matching the Nikkon brand facet value. The response includes filtered facet values and the matching product items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"search\": {\n      \"totalItems\": 2,\n      \"facetValues\": [\n        {\n          \"facetValue\": {\n            \"id\": \"1\",\n            \"name\": \"Electronics\",\n            \"facet\": {\n              \"id\": \"1\",\n              \"name\": \"category\"\n            }\n          },\n          \"count\": 2\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"9\",\n            \"name\": \"Photo\",\n            \"facet\": {\n              \"id\": \"1\",\n              \"name\": \"category\"\n            }\n          },\n          \"count\": 2\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"11\",\n            \"name\": \"Nikkon\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 2\n        }\n      ],\n      \"items\": [\n        {\n          \"productName\": \"Camera Lens\",\n          \"slug\": \"camera-lens\",\n          \"productAsset\": {\n            \"id\": \"13\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/9b/brandi-redd-104140-unsplash__preview.jpg\"\n          },\n          \"priceWithTax\": {\n            \"value\": 12480\n          },\n          \"currencyCode\": \"USD\"\n        },\n        {\n          \"productName\": \"Nikkormat SLR Camera\",\n          \"slug\": \"nikkormat-slr-camera\",\n          \"productAsset\": {\n            \"id\": \"18\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/95/chuttersnap-324234-unsplash__preview.jpg\"\n          },\n          \"priceWithTax\": {\n            \"value\": 73800\n          },\n          \"currencyCode\": \"USD\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringListOperators in GraphQL for Vendure Shop API\nDESCRIPTION: Defines operators for filtering on lists of String fields in the Vendure shop API. Currently only supports checking if a value is in a list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_45\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of String fields\n\"\"\"\ninput StringListOperators {\ninList: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StringOperators Input Type in GraphQL\nDESCRIPTION: Input type that provides operators for filtering on String fields. It includes operators like equality, contains, in list, regex matching, and null checking.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_158\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a String field\n\"\"\"\ninput StringOperators {\n  eq: String\n  notEq: String\n  contains: String\n  notContains: String\n  in: [String!]\n  notIn: [String!]\n  regex: String\n  isNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Order States in TypeScript\nDESCRIPTION: The VendureConfig.orderOptions.process property now accepts an array of objects implementing the CustomerOrderProcess interface, allowing for better composition and dependency injection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nVendureConfig.orderOptions.process = [\n  {\n    // Implement CustomerOrderProcess interface\n  },\n  {\n    // Another CustomerOrderProcess implementation\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Search in GraphQL\nDESCRIPTION: Defines a GraphQL query to perform a search operation with input parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_33\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  search(input: SearchInput!): SearchResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurableOperationDefinition GraphQL Object Type\nDESCRIPTION: Defines the ConfigurableOperationDefinition type, which describes the structure of a configurable operation, including its code, arguments, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_32\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ConfigurableOperationDefinition {\n  code: String!\n  args: [ConfigArgDefinition!]!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type CollectionListOptions\nDESCRIPTION: Defines the `CollectionListOptions` input type for controlling the retrieval of Collection lists. It includes options for pagination (`skip`, `take`), sorting (`sort` using `CollectionSortParameter`), filtering (`filter` using `CollectionFilterParameter`), specifying the logical operator for combining top-level filters (`filterOperator`), and fetching only top-level collections (`topLevelOnly`).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ninput CollectionListOptions {\n  topLevelOnly: Boolean\n  \"\"\"\n  Skips the first n results, for use in pagination\n  \"\"\"\n  skip: Int\n  \"\"\"\n  Takes n results, for use in pagination\n  \"\"\"\n  take: Int\n  \"\"\"\n  Specifies which properties to sort the results by\n  \"\"\"\n  sort: CollectionSortParameter\n  \"\"\"\n  Allows the results to be filtered\n  \"\"\"\n  filter: CollectionFilterParameter\n  \"\"\"\n  Specifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n  \"\"\"\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SqliteSearchStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the SqliteSearchStrategy class, which implements the SearchStrategy interface. It provides methods for initializing the strategy, retrieving facet value IDs, collection IDs, search results, and total count based on search input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/sqlite-search-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SqliteSearchStrategy implements SearchStrategy {\n    init(injector: Injector) => ;\n    getFacetValueIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<Map<ID, number>>;\n    getCollectionIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<Map<ID, number>>;\n    getSearchResults(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<SearchResult[]>;\n    getTotalCount(ctx: RequestContext, input: SearchInput, enabledOnly: boolean) => Promise<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Migration File for Adding a Custom Field\nDESCRIPTION: This code snippet illustrates a typical migration file generated by Vendure. It shows the structure of a migration class with 'up' and 'down' methods for adding and removing a custom field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrations/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MigrationInterface, QueryRunner} from \"typeorm\";\n\nexport class addKeywordsField1690558104092 implements MigrationInterface {\n\n   public async up(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`ALTER TABLE \"product\" ADD \"customFieldsKeywords\" character varying(255)`, undefined);\n   }\n\n   public async down(queryRunner: QueryRunner): Promise<any> {\n        await queryRunner.query(`ALTER TABLE \"product\" DROP COLUMN \"customFieldsKeywords\"`, undefined);\n   }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using AssetPickerDialogComponent with ModalService\nDESCRIPTION: Example showing how to use the AssetPickerDialogComponent in conjunction with ModalService to select assets. The dialog is opened with an extra large size and returns the selected assets in the subscription handler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/asset-picker-dialog-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nselectAssets() {\n  this.modalService\n    .fromComponent(AssetPickerDialogComponent, {\n        size: 'xl',\n    })\n    .subscribe(result => {\n        if (result && result.length) {\n            // ...\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderableAsset Class with Custom Entity Ordering in TypeORM (TypeScript)\nDESCRIPTION: This class snippet defines OrderableAsset, a TypeScript entity class extending VendureEntity and implementing the Orderable interface for use in Vendure projects. It includes properties for assetId (the linked asset's unique identifier), asset (the Asset entity, loaded eagerly and deleted by cascade), and position (for ordering). TypeORM decorators (@Column, @Index, @ManyToOne) specify mapping and relations. The constructor optionally takes a DeepPartial<OrderableAsset> input for initialization. This entity is intended for ordered one-to-many relations, with dependencies on TypeORM and Vendure's asset management infrastructure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/orderable-asset.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass OrderableAsset extends VendureEntity implements Orderable {\n    constructor(input?: DeepPartial<OrderableAsset>)\n    @Column()\n    assetId: ID;\n    @Index()\n    @ManyToOne(type => Asset, { eager: true, onDelete: 'CASCADE' })\n    asset: Asset;\n    @Column()\n    position: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImageTransformPreset Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for image transformation presets. It includes properties for the preset name, width, height, and transformation mode. This interface is used to configure how assets are transformed when accessed through preset URL parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/image-transform-preset.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ImageTransformPreset {\n    name: string;\n    width: number;\n    height: number;\n    mode: ImageTransformMode;\n}\n```\n\n----------------------------------------\n\nTITLE: End Session Mutation in GraphQL\nDESCRIPTION: This mutation ends the current authenticated session and returns a 'Success' object to confirm the action.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation { logout: Success! }\n```\n\n----------------------------------------\n\nTITLE: Expanding EventBus Functionality in TypeScript\nDESCRIPTION: Expands the range of events published by the EventBus in the core Vendure functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nExpand the range of events published by the EventBus (#1222) ([edc9d69])\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidFulfillmentHandlerError Type in GraphQL\nDESCRIPTION: Defines the `InvalidFulfillmentHandlerError` type in GraphQL. This error type indicates that the code provided for a FulfillmentHandler during configuration or fulfillment creation does not correspond to a valid, registered handler. It includes an error code and a descriptive message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_86\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if the specified FulfillmentHandler code is not valid\n\"\"\"\ntype InvalidFulfillmentHandlerError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Default Strategy Options Interface\nDESCRIPTION: Interface defining configuration options for the DefaultProductVariantPriceUpdateStrategy, including channel synchronization settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/product-variant-price-update-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DefaultProductVariantPriceUpdateStrategyOptions {\n    syncPricesAcrossChannels: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vendure Version in TypeScript\nDESCRIPTION: Demonstrates how to import and use the VENDURE_VERSION constant to check the current version of Vendure core that is running in the application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/vendure_version.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VENDURE_VERSION } from '@vendure/core';\n\nconsole.log('Vendure version:', VENDURE_VERSION);\n```\n\n----------------------------------------\n\nTITLE: Defining SetAttachmentsFn Type in TypeScript\nDESCRIPTION: Defines a function type for setting email attachments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetAttachmentsFn<Event> = (event: Event) => EmailAttachment[] | Promise<EmailAttachment[]>\n```\n\n----------------------------------------\n\nTITLE: Defining ResetPasswordResult Union Type in GraphQL\nDESCRIPTION: Union type definition for possible outcomes when resetting a password, including successful user details or various error conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_112\n\nLANGUAGE: GraphQL\nCODE:\n```\nunion ResetPasswordResult =\nCurrentUser | PasswordResetTokenInvalidError | PasswordResetTokenExpiredError | PasswordValidationError | NativeAuthStrategyError | NotVerifiedError\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: This snippet imports custom React components used for rendering Vendure documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: ProductChannelEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle product channel assignments. Triggered when a Product is assigned to or removed from a channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductChannelEvent extends VendureEvent {\n    constructor(ctx: RequestContext, product: Product, channelId: ID, type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Metric Interval Enum (GraphQL, GraphQL)\nDESCRIPTION: Defines a MetricInterval enum with a single value Daily. Used to specify the granularity of metric reporting or aggregation queries in Vendure statistics or analytics features. Dependents use this enum field to select the interval for metrics queries; currently limited to 'Daily' only.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum MetricInterval {\nDaily\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Shipping Method with GraphQL\nDESCRIPTION: This GraphQL query tests a specified shipping method using `TestShippingMethodInput`. The result is a `TestShippingMethodResult`, detailing the assessment for the given input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_49\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\ntestShippingMethod(input: TestShippingMethodInput!): TestShippingMethodResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Validation Rules\nDESCRIPTION: Examples of setting up min, max, and step validation rules for numeric custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'reviewRating',\n                type: 'int',\n                min: 0,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UpdatePaymentMethodInput in GraphQL\nDESCRIPTION: Input type for updating a payment method in Vendure. Requires an ID and allows updating the code, enabled status, configuration, and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_189\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdatePaymentMethodInput {\n  id: ID!\n  code: String\n  enabled: Boolean\n  checker: ConfigurableOperationInput\n  handler: ConfigurableOperationInput\n  translations: [PaymentMethodTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProvinceInput in GraphQL\nDESCRIPTION: This input type is used for creating a new province. It includes fields for code, translations, enabled status, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_60\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProvinceInput {\n  code: String!\n  translations: [ProvinceTranslationInput!]!\n  enabled: Boolean!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: ShippingCalculator Class Definition\nDESCRIPTION: Class signature for ShippingCalculator that extends ConfigurableOperationDef with generic type parameter for configuration arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-calculator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShippingCalculator<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: ShippingCalculatorConfig<T>)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stock Display Strategy in Vendure Config\nDESCRIPTION: Demonstrates how to configure a custom stock display strategy in the Vendure configuration file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/stock-control/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { ExactStockDisplayStrategy } from './exact-stock-display-strategy';\n\nexport const config: VendureConfig = {\n    // ...\n    catalogOptions: {\n        stockDisplayStrategy: new ExactStockDisplayStrategy(),\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Target Origin for PostMessage API in TypeScript\nDESCRIPTION: Function signature for setting the target origin used by the window.postMessage API for secure cross-frame communication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-devkit-client.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction setTargetOrigin(value: string): void\n```\n\n----------------------------------------\n\nTITLE: Search Response JSON Example\nDESCRIPTION: Example JSON response showing the structure of search results including price ranges and buckets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/index.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"data\": {\n   \"search\": {\n     \"totalItems\": 9,\n     \"prices\": {\n       \"range\": {\n         \"min\": 999,\n         \"max\": 6396,\n       },\n       \"buckets\": [\n         {\n           \"to\": 1000,\n           \"count\": 1\n         },\n         {\n           \"to\": 2000,\n           \"count\": 2\n         },\n         {\n           \"to\": 3000,\n           \"count\": 3\n         },\n         {\n           \"to\": 4000,\n           \"count\": 1\n         },\n         {\n           \"to\": 5000,\n           \"count\": 1\n         },\n         {\n           \"to\": 7000,\n           \"count\": 1\n         }\n       ]\n     },\n     \"items\": [\n       {\n         \"productName\": \"Loxley Yorkshire Table Easel\",\n         \"score\": 30.58831,\n         \"price\": {\n           \"min\": 4984,\n           \"max\": 4984\n         }\n       }\n     ]\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Tax Rates Mutations - GraphQL\nDESCRIPTION: GraphQL mutations for deleting single or multiple tax rates by ID. Returns DeletionResponse(s).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_68\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteTaxRate(id: ID!): DeletionResponse!\n  deleteTaxRates(ids: [ID!]!): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Registration Mutation in GraphQL for Vendure\nDESCRIPTION: Registers a Customer account with credentials. Supports three possible flows: with verification and password, with verification without password, and without verification with password. The behavior depends on the authOptions.requireVerification setting.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  registerCustomerAccount(input: RegisterCustomerInput!): RegisterCustomerAccountResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MultivendorPlugin in Vendure Configuration (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to import and initialize the `MultivendorPlugin` within the `plugins` array of a `VendureConfig`. It demonstrates setting configuration options like `platformFeePercent` (10%) and `platformFeeSKU` ('FEE') required for the plugin's operation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/example-plugins/multivendor-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { MultivendorPlugin } from './plugins/multivendor-plugin/multivendor.plugin';\n\n plugins: [\n   MultivendorPlugin.init({\n       platformFeePercent: 10,\n       platformFeeSKU: 'FEE',\n   }),\n   // ...\n ]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ImageTransformMode Type in TypeScript\nDESCRIPTION: This TypeScript code defines the `ImageTransformMode` type alias as a union of two string literals: 'crop' and 'resize'. This type is used within the Vendure Asset Server Plugin (@vendure/asset-server-plugin) to specify how an asset preview image should be transformed to fit given dimensions. 'crop' will crop the image to cover the dimensions, while 'resize' will resize it preserving the aspect ratio to fit within the dimensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/image-transform-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype ImageTransformMode = 'crop' | 'resize'\n```\n\n----------------------------------------\n\nTITLE: TemplateLoader Interface Definition in TypeScript\nDESCRIPTION: Definition of the TemplateLoader interface, which includes methods for loading email templates and optional partials. This interface is used to define custom template loading behavior in the Vendure email plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/template-loader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TemplateLoader {\n    loadTemplate(injector: Injector, ctx: RequestContext, input: LoadTemplateInput): Promise<string>;\n    loadPartials?(): Promise<Partial[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: TranslatableSaver Class Definition\nDESCRIPTION: Class signature showing the constructor and main methods of TranslatableSaver. Includes create and update methods for handling translatable entities.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/translatable-saver.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass TranslatableSaver {\n    constructor(connection: TransactionalConnection)\n    create(options: CreateTranslatableOptions<T>) => Promise<T>;\n    update(options: UpdateTranslatableOptions<T>) => Promise<T>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CancelActiveOrderError GraphQL Object Type in Vendure\nDESCRIPTION: Defines the CancelActiveOrderError GraphQL object type which represents an error returned when attempting to cancel lines from an order that is still active.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned if an attempting to cancel lines from an Order which is still active\n\"\"\"\ntype CancelActiveOrderError {\n  errorCode: ErrorCode!\n  message: String!\n  orderState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing foreign key error on merging orders\nDESCRIPTION: This commit resolves a foreign key error that occurred when merging orders in the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n* **core** Fix foreign key error on merging orders ([5e385df](https://github.com/vendure-ecommerce/vendure/commit/5e385df)), closes [#754](https://github.com/vendure-ecommerce/vendure/issues/754)\n```\n\n----------------------------------------\n\nTITLE: Defining DuplicateEntityError Type in GraphQL\nDESCRIPTION: Defines an error type that is returned when attempting to create an entity that already exists. Includes error code, message, and duplication error details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_57\n\nLANGUAGE: graphql\nCODE:\n```\ntype DuplicateEntityError {\n  errorCode: ErrorCode!\n  message: String!\n  duplicationError: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Translation Keys in Angular Templates\nDESCRIPTION: Example of how to use translation tokens in Angular HTML templates with variable interpolation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/adding-ui-translations/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label>{{ 'asset.assets-selected-count' | translate:{ count } }}</label>\n```\n\n----------------------------------------\n\nTITLE: Defining StringOperators in GraphQL for Vendure Shop API\nDESCRIPTION: Defines operators for filtering on String fields in the Vendure shop API. Includes operators for equality, containment, list membership, regex matching, and null checking.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_46\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a String field\n\"\"\"\ninput StringOperators {\neq: String\nnotEq: String\ncontains: String\nnotContains: String\nin: [String!]\nnotIn: [String!]\nregex: String\nisNull: Boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HistoryEntry Class in TypeScript\nDESCRIPTION: The 'CustomerHistoryEntry' class extends the 'HistoryEntry' class to model events in a customer's history. This class includes a constructor that takes a partial customer history entry, and a relationship property 'customer' annotated with a many-to-one relationship. This snippet showcases inheritance and entity relationship in TypeScript with TypeORM.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/customer-history-entry.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CustomerHistoryEntry extends HistoryEntry {\n    constructor(input: DeepPartial<CustomerHistoryEntry>)\n    @Index()\n    @ManyToOne(type => Customer, { onDelete: 'CASCADE' })\n    customer: Customer;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AdminUiPlugin for Metrics Query (TypeScript)\nDESCRIPTION: This example shows how to add the AdminUiPlugin to the Vendure configuration without initializing it, which allows the use of the metricSummary query for standalone Admin UI apps.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/admin-ui-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\n\nconst config: VendureConfig = {\n  plugins: [\n    AdminUiPlugin, // <-- no call to .init()\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodTranslationInput Input Type in GraphQL\nDESCRIPTION: Specifies input for translating payment method details, including language code, name, description, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_116\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PaymentMethodTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  description: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Facet and Related Types in GraphQL\nDESCRIPTION: Defines the structure for product facets and their values, including translations and custom fields. Used for product categorization and filtering.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_36\n\nLANGUAGE: graphql\nCODE:\n```\ntype Facet {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  code: String!\n  values: [FacetValue!]!\n  valueList(options: FacetValueListOptions): FacetValueList!\n  translations: [FacetTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing EventBus Subscription Method in Vendure TypeScript\nDESCRIPTION: Highlights the deprecation of `EventBus.sucscribe()` in Vendure's TypeScript API. Developers should now use `EventBus.ofType()` for subscribing to specific event types. This change was introduced as part of the v1.0.0 release.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nEventBus.sucscribe()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nEventBus.ofType()\n```\n\n----------------------------------------\n\nTITLE: Defining EmailMetadata Type in TypeScript\nDESCRIPTION: Defines a type for attaching metadata to emails.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailMetadata = Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Search Response with Facet Values\nDESCRIPTION: Sample JSON response from the search query showing the facet values returned. The response includes counts for each facet value, which indicates how many products match each value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/listing-products/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"search\": {\n      \"totalItems\": 8,\n      // highlight-start\n      \"facetValues\": [\n        {\n          \"facetValue\": {\n            \"id\": \"1\",\n            \"name\": \"Electronics\",\n            \"facet\": {\n              \"id\": \"1\",\n              \"name\": \"category\"\n            }\n          },\n          \"count\": 8\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"9\",\n            \"name\": \"Photo\",\n            \"facet\": {\n              \"id\": \"1\",\n              \"name\": \"category\"\n            }\n          },\n          \"count\": 8\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"10\",\n            \"name\": \"Polaroid\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 1\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"11\",\n            \"name\": \"Nikkon\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 2\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"12\",\n            \"name\": \"Agfa\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 1\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"14\",\n            \"name\": \"Kodak\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 1\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"15\",\n            \"name\": \"Sony\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 1\n        },\n        {\n          \"facetValue\": {\n            \"id\": \"16\",\n            \"name\": \"Rolleiflex\",\n            \"facet\": {\n              \"id\": \"2\",\n              \"name\": \"brand\"\n            }\n          },\n          \"count\": 1\n        }\n      ],\n      // highlight-end\n      \"items\": [\n        {\n          \"productName\": \"Instant Camera\",\n          \"slug\": \"instant-camera\",\n          \"productAsset\": {\n            \"id\": \"12\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/b5/eniko-kis-663725-unsplash__preview.jpg\"\n          },\n          \"priceWithTax\": {\n            \"min\": 20999,\n            \"max\": 20999\n          },\n          \"currencyCode\": \"USD\"\n        },\n        {\n          \"productName\": \"Camera Lens\",\n          \"slug\": \"camera-lens\",\n          \"productAsset\": {\n            \"id\": \"13\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/9b/brandi-redd-104140-unsplash__preview.jpg\"\n          },\n          \"priceWithTax\": {\n            \"min\": 12480,\n            \"max\": 12480\n          },\n          \"currencyCode\": \"USD\"\n        },\n        {\n          \"productName\": \"Vintage Folding Camera\",\n          \"slug\": \"vintage-folding-camera\",\n          \"productAsset\": {\n            \"id\": \"14\",\n            \"preview\": \"https://demo.vendure.io/assets/preview/3c/jonathan-talbert-697262-unsplash__preview.jpg\"\n          },\n          \"priceWithTax\": {\n            \"min\": 642000,\n            \"max\": 642000\n          },\n          \"currencyCode\": \"USD\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultFormConfigHash Type in TypeScript\nDESCRIPTION: TypeScript type definition that specifies the expected configuration options for various form input components in Vendure. Each property represents a different form input type with its corresponding configuration parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/default-form-config-hash.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DefaultFormConfigHash = {\n    'boolean-form-input': Record<string, never>;\n    'currency-form-input': Record<string, never>;\n    'customer-group-form-input': Record<string, never>;\n    'date-form-input': { min?: string; max?: string; yearRange?: number };\n    'facet-value-form-input': Record<string, never>;\n    'json-editor-form-input': { height?: string };\n    'html-editor-form-input': { height?: string };\n    'number-form-input': { min?: number; max?: number; step?: number; prefix?: string; suffix?: string };\n    'password-form-input': Record<string, never>;\n    'product-selector-form-input': Record<string, never>;\n    'relation-form-input': Record<string, never>;\n    'rich-text-form-input': Record<string, never>;\n    'select-form-input': {\n        options?: Array<{ value: string; label?: Array<Omit<LocalizedString, '__typename'>> }>;\n    };\n    'text-form-input': { prefix?: string; suffix?: string };\n    'textarea-form-input': {\n        spellcheck?: boolean;\n    };\n    'product-multi-form-input': {\n        selectionMode?: 'product' | 'variant';\n    };\n    'combination-mode-form-input': Record<string, never>;\n    'struct-form-input': Record<string, never>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefreshCustomerVerificationResult Union Type in GraphQL Schema\nDESCRIPTION: GraphQL union type definition for the RefreshCustomerVerificationResult, which can be either a Success object or a NativeAuthStrategyError object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_103\n\nLANGUAGE: graphql\nCODE:\n```\nunion RefreshCustomerVerificationResult = Success | NativeAuthStrategyError\n```\n\n----------------------------------------\n\nTITLE: Defining String GraphQL Scalar Type\nDESCRIPTION: GraphQL scalar type definition for String which represents UTF-8 character sequences. This is a fundamental type used throughout the schema for text-based fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_129\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.\n\"\"\"\nscalar String\n```\n\n----------------------------------------\n\nTITLE: Defining CountryEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a Country entity is created, updated or deleted. Extends VendureEntityEvent with Country-specific types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass CountryEvent extends VendureEntityEvent<Country, CountryInputTypes> {\n    constructor(ctx: RequestContext, entity: Country, type: 'created' | 'updated' | 'deleted', input?: CountryInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: InMemoryJobQueueStrategy Class Signature\nDESCRIPTION: The class signature for InMemoryJobQueueStrategy, extending PollingJobQueueStrategy and implementing InspectableJobQueueStrategy. Shows all available properties and methods for managing in-memory job queues.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/in-memory-job-queue-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass InMemoryJobQueueStrategy extends PollingJobQueueStrategy implements InspectableJobQueueStrategy {\n    protected jobs = new Map<ID, Job>();\n    protected unsettledJobs: { [queueName: string]: Array<{ job: Job; updatedAt: Date }> } = {};\n    init(injector: Injector) => ;\n    destroy() => ;\n    add(job: Job<Data>) => Promise<Job<Data>>;\n    findOne(id: ID) => Promise<Job | undefined>;\n    findMany(options?: JobListOptions) => Promise<PaginatedList<Job>>;\n    findManyById(ids: ID[]) => Promise<Job[]>;\n    next(queueName: string, waitingJobs: Job[] = []) => Promise<Job | undefined>;\n    update(job: Job) => Promise<void>;\n    removeSettledJobs(queueNames: string[] = [], olderThan?: Date) => Promise<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: LocaleCurrencyNamePipe Class Definition in TypeScript\nDESCRIPTION: The class definition of LocaleCurrencyNamePipe that extends LocaleBasePipe and implements PipeTransform. It includes a constructor that accepts DataService and ChangeDetectorRef, and a transform method for converting currency codes to human-readable format.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-currency-name-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass LocaleCurrencyNamePipe extends LocaleBasePipe implements PipeTransform {\n    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)\n    transform(value: any, display: 'full' | 'symbol' | 'name' = 'full', locale?: unknown) => any;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing getEntityOrThrow Helper in Vendure TypeScript\nDESCRIPTION: Documents the removal of the standalone `getEntityOrThrow()` helper function in Vendure's TypeScript API. The recommended replacement is the method `TransactionalConnection.getEntityOrThrow()`, available via the TransactionalConnection object. This change is part of the v1.0.0 update.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetEntityOrThrow()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nTransactionalConnection.getEntityOrThrow()\n```\n\n----------------------------------------\n\nTITLE: Defining CustomDetailComponentLocationId Type in TypeScript\nDESCRIPTION: A TypeScript type definition that enumerates all valid locations where custom detail components can be embedded in the Vendure admin UI. This type is used to ensure type safety when registering custom components for specific sections of the admin interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/custom-detail-component-location-id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CustomDetailComponentLocationId = | 'administrator-profile'\n    | 'administrator-detail'\n    | 'channel-detail'\n    | 'collection-detail'\n    | 'country-detail'\n    | 'customer-detail'\n    | 'customer-group-detail'\n    | 'draft-order-detail'\n    | 'facet-detail'\n    | 'global-settings-detail'\n    | 'order-detail'\n    | 'payment-method-detail'\n    | 'product-detail'\n    | 'product-variant-detail'\n    | 'promotion-detail'\n    | 'seller-detail'\n    | 'shipping-method-detail'\n    | 'stock-location-detail'\n    | 'tax-category-detail'\n    | 'tax-rate-detail'\n    | 'zone-detail'\n```\n\n----------------------------------------\n\nTITLE: Defining MigrationOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the MigrationOptions interface used for configuring migration script generation in Vendure. It specifies two properties: 'name' for setting the migration name, and 'outputDir' for specifying the output directory of generated scripts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/migration/migration-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MigrationOptions {\n    name: string;\n    outputDir?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for createProxyHandler\nDESCRIPTION: Signature of the createProxyHandler function, which takes ProxyOptions as an argument and returns a RequestHandler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/plugin-utilities.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createProxyHandler(options: ProxyOptions): RequestHandler\n```\n\n----------------------------------------\n\nTITLE: Documenting Events with JSDoc\nDESCRIPTION: Example showing how to document event classes for a Vendure plugin using JSDoc comments. It demonstrates how to tag events with '@category Events' and document their purpose.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This event is fired whenever a LoyaltyPointsTransaction is created.\n *\n * @category Events\n */\nexport class LoyaltyPointsTransactionEvent extends VendureEvent {\n    constructor(public ctx: RequestContext, public transaction: LoyaltyPointsTransaction) {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for tagging entities in the system. Contains fields for identification, timestamps, and the tag value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_137\n\nLANGUAGE: graphql\nCODE:\n```\ntype Tag {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: ExtendedListQueryOptions Interface Definition in TypeScript\nDESCRIPTION: This snippet defines the ExtendedListQueryOptions interface, which includes various options for customizing list queries, such as relations, channelId, and custom property mapping.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/list-query-builder.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExtendedListQueryOptions<T extends VendureEntity> = {\n    relations?: string[];\n    channelId?: ID;\n    where?: FindOptionsWhere<T>;\n    orderBy?: FindOneOptions<T>['order'];\n    entityAlias?: string;\n    ctx?: RequestContext;\n    customPropertyMap?: { [name: string]: string };\n    ignoreQueryLimits?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Successful GraphQL Mutation Response with Union Type\nDESCRIPTION: This JSON object represents a successful response for the UpdateCustomerEmail mutation, returning the Customer type from the union.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updateCustomerEmail\": {\n      \"__typename\": \"Customer\",\n      \"id\": \"1\",\n      \"name\": \"John Smith\",\n      \"email\": \"john.smith@email.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stellate Plugin Options Interface - TypeScript\nDESCRIPTION: This code snippet defines the StellatePluginOptions interface used for configuring the StellatePlugin in Vendure. It includes properties such as serviceName, apiToken, purgeRules, and optional properties like defaultBufferTimeMs, devMode, and debugLogging. It requires dependencies on the Stellate service and its API token. Inputs include configuration parameters, and it outputs configuration settings for the plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/stellate-plugin-options.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface StellatePluginOptions {\n    serviceName: string;\n    apiToken: string;\n    purgeRules: PurgeRule[];\n    defaultBufferTimeMs?: number;\n    devMode?: boolean;\n    debugLogging?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductVariantList GraphQL Object Type\nDESCRIPTION: Defines the ProductVariantList object type, which represents a paginated list of ProductVariant objects. It includes fields for the list of items and the total count of items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_141\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductVariantList {\n  items: [ProductVariant!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Timezone Check Query\nDESCRIPTION: SQL query to verify PostgreSQL database timezone configuration\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nshow timezone;\n```\n\n----------------------------------------\n\nTITLE: Adding Payment to Order Mutation\nDESCRIPTION: GraphQL mutation for adding a payment to an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/order-workflow/index.md#2025-04-22_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\nmutation AddPayment($input: PaymentInput!){\n  addPaymentToOrder(input: $input) {\n    ... ActiveOrder\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Products - Shop API with Search\nDESCRIPTION: GraphQL query showing how to filter products by name using a contains filter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/try-the-api/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  products(options: {\n    filter: { name: { contains: \"shoe\" } }\n  }) {\n    totalItems\n    items {\n      id\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of isGraphQlErrorResult Type Guard Function in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `isGraphQlErrorResult` function. It's a generic type guard (`input is JustErrorResults<T>`) that takes an input `T` (which extends `GraphQLErrorResult | U`, where `U` defaults to `any`) and returns `true` if the input is specifically a `GraphQLErrorResult` or a union type composed solely of types extending `GraphQLErrorResult`. This helps TypeScript narrow down the type of `input` in conditional blocks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/errors/is-graph-ql-error-result.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction isGraphQlErrorResult<T extends GraphQLErrorResult | U, U = any>(input: T): input is JustErrorResults<T>\n```\n\n----------------------------------------\n\nTITLE: Defining SetOptionalAddressFieldsFn Type in TypeScript\nDESCRIPTION: Defines a function type for setting optional email address fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetOptionalAddressFieldsFn<Event> = (\n    event: Event,\n) => OptionalAddressFields | Promise<OptionalAddressFields>\n```\n\n----------------------------------------\n\nTITLE: Querying Active Channel - GraphQL SDL - GraphQL\nDESCRIPTION: Defines the 'activeChannel' query, which fetches the Channel currently in context (the active channel for the request). It returns a non-nullable Channel object, with no required input parameters. Used to retrieve details for the channel associated with the current session or API call.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  activeChannel: Channel!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Customer Note in TypeScript\nDESCRIPTION: Deletes a specific note (HistoryEntry) identified by its ID. Requires the request context and the ID of the note to be deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteCustomerNote(ctx: RequestContext, id: ID) => Promise<DeletionResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateProductOptionGroupInput in GraphQL\nDESCRIPTION: Input type for updating a product option group in Vendure. Requires an ID and allows updating the code, translations, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_191\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateProductOptionGroupInput {\n  id: ID!\n  code: String\n  translations: [ProductOptionGroupTranslationInput!]\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vendure Layout Components in Angular\nDESCRIPTION: Example showing how to use Vendure layout components in Angular, including page-block, action-bar, and page-detail-layout with sidebar and card elements. The structure demonstrates proper organization of UI elements following Vendure's design patterns.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<vdr-page-block>\n    <vdr-action-bar>\n        <vdr-ab-left>Action bar left contents</vdr-ab-left>\n        <vdr-ab-right>\n            <button class=\"button primary\">Primary action</button>\n        </vdr-ab-right>\n    </vdr-action-bar>\n</vdr-page-block>\n<vdr-page-detail-layout>\n    <vdr-page-detail-sidebar>\n        <vdr-card>Sidebar content</vdr-card>\n    </vdr-page-detail-sidebar>\n    <vdr-page-block>\n        <vdr-card title=\"Card\">\n            This is a card. On a detail page, content should usually be placed inside a card.\n        </vdr-card>\n    </vdr-page-block>\n</vdr-page-detail-layout>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vendure on Railway\nDESCRIPTION: Defines the environment variables needed for the Vendure server, including database connection details, asset storage location, and authentication credentials.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-railway/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDB_NAME=${{Postgres.PGDATABASE}}\nDB_USERNAME=${{Postgres.PGUSER}}\nDB_PASSWORD=${{Postgres.PGPASSWORD}}\nDB_HOST=${{Postgres.PGHOST}}\nDB_PORT=${{Postgres.PGPORT}}\nASSET_UPLOAD_DIR=/vendure-assets\n// highlight-next-line\nCOOKIE_SECRET=<add some random characters>\nSUPERADMIN_USERNAME=superadmin\n// highlight-next-line\nSUPERADMIN_PASSWORD=<create some strong password>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Logger in Vendure (TypeScript)\nDESCRIPTION: Shows how to create a custom logger that writes logs to a file. This example implements the VendureLogger interface and demonstrates how to configure it in the VendureConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureLogger } from '@vendure/core';\nimport fs from 'fs';\n\n// A simple custom logger which writes all logs to a file.\nexport class SimpleFileLogger implements VendureLogger {\n    private logfile: fs.WriteStream;\n\n    constructor(logfileLocation: string) {\n        this.logfile = fs.createWriteStream(logfileLocation, { flags: 'w' });\n    }\n\n    error(message: string, context?: string) {\n        this.logfile.write(`ERROR: [${context}] ${message}\\n`);\n    }\n    warn(message: string, context?: string) {\n        this.logfile.write(`WARN: [${context}] ${message}\\n`);\n    }\n    info(message: string, context?: string) {\n        this.logfile.write(`INFO: [${context}] ${message}\\n`);\n    }\n    verbose(message: string, context?: string) {\n        this.logfile.write(`VERBOSE: [${context}] ${message}\\n`);\n    }\n    debug(message: string, context?: string) {\n        this.logfile.write(`DEBUG: [${context}] ${message}\\n`);\n    }\n}\n\n// in the VendureConfig\nexport const config = {\n    // ...\n    logger: new SimpleFileLogger('server.log'),\n}\n```\n\n----------------------------------------\n\nTITLE: PresetOnlyStrategyOptions Interface Signature in TypeScript\nDESCRIPTION: Defines the TypeScript interface `PresetOnlyStrategyOptions` for configuring the `PresetOnlyStrategy`. It details the available configuration properties: `defaultPreset` (string, required), `permittedQuality` (optional array of numbers), `permittedFormats` (optional array of `ImageTransformFormat`), and `allowFocalPoint` (optional boolean).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/preset-only-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ninterface PresetOnlyStrategyOptions {\n    defaultPreset: string;\n    permittedQuality?: number[];\n    permittedFormats?: ImageTransformFormat[];\n    allowFocalPoint?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Codegen\nDESCRIPTION: Configuration setup for GraphQL code generation, including schema location, scalar definitions, and output paths\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {CodegenConfig} from '@graphql-codegen/cli';\n\nconst config: CodegenConfig = {\n    overwrite: true,\n    schema: 'http://localhost:3000/admin-api',\n    config: {\n        scalars: { Money: 'number' },\n        namingConvention: { enumValues: 'keep' },\n    },\n    generates: {\n        'src/plugins/organization/gql/generated.ts': {\n            plugins: ['typescript'],\n        },\n    },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Defining EmailSendEvent Class in TypeScript\nDESCRIPTION: Class definition for EmailSendEvent that extends VendureEvent. This event is fired when an email sending attempt is made, tracking both successful and failed sending attempts with associated metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-send-event.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmailSendEvent extends VendureEvent {\n    constructor(ctx: RequestContext, details: EmailDetails, success: boolean, error?: Error, metadata?: EmailMetadata)\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated SearchResult Fields in Vendure GraphQL API\nDESCRIPTION: Highlights the removal of `productPreview` and `productVariantPreview` fields from the `SearchResult` type in Vendure's GraphQL API as of v1.0.0. The recommended replacements are `productAsset.preview` and `productVariantAsset.preview` respectively, accessed via the associated asset.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\n# Deprecated fields in SearchResult\nproductPreview\nproductVariantPreview\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Replacement fields (v1.0.0+)\nproductAsset {\n  preview\n}\nproductVariantAsset {\n  preview\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for E2E Tests\nDESCRIPTION: TSConfig settings specific to e2e testing, including decorator support and module interop settings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"types\": [\"node\"],\n    \"lib\": [\"es2015\"],\n    \"useDefineForClassFields\": false,\n    \"skipLibCheck\": true,\n    \"inlineSourceMap\": false,\n    \"sourceMap\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"esModuleInterop\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ID List Filtering Operators - GraphQL - GraphQL\nDESCRIPTION: Defines the IDListOperators input for filtering entities where an ID field is within a given list. The inList field takes an array of IDs; this operator is used where multiple IDs need to be matched. Requires the ID scalar type and is designed to work with filter parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_26\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of ID fields\n\"\"\"\ninput IDListOperators {\n  inList: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating RequestContext in TypeScript\nDESCRIPTION: Example demonstrating how to create a RequestContext object manually using the RequestContextService.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/stand-alone-scripts/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RequestContextService } from '@vendure/core';\n\nasync function getProductCount() {\n    const { app } = await bootstrapWorker(config);\n    const productService = app.get(ProductService);\n    \n    const ctx = await app.get(RequestContextService).create({\n        apiType: 'admin',\n    });\n    \n    const { totalItems } = await productService.findAll(ctx, {take: 0});\n}\n```\n\n----------------------------------------\n\nTITLE: VendurePlugin Decorator Function Signature\nDESCRIPTION: This code snippet shows the function signature of the VendurePlugin decorator. It takes a VendurePluginMetadata object as a parameter and returns a ClassDecorator.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction VendurePlugin(pluginMetadata: VendurePluginMetadata): ClassDecorator\n```\n\n----------------------------------------\n\nTITLE: Injecting ProcessContext Example - TypeScript\nDESCRIPTION: Demonstrates how to inject and use the ProcessContext class to determine the execution context in a service class. Shows checking if code is running in server process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/process-context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable, OnApplicationBootstrap } from '@nestjs/common';\nimport { ProcessContext } from '@vendure/core';\n\n@Injectable()\nexport class MyService implements OnApplicationBootstrap {\n  constructor(private processContext: ProcessContext) {}\n\n  onApplicationBootstrap() {\n    if (this.processContext.isServer) {\n      // code which will only execute when running in\n      // the server process\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Translation Tokens for Localization in Vendure Admin UI\nDESCRIPTION: Command to extract translation tokens from source files and add them to each translation file located in the i18n-messages directory. This process generates a report showing the percentage of translated tokens for each language.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/admin-ui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run extract-translations\n```\n\n----------------------------------------\n\nTITLE: Updating Facets in Vendure GraphQL API\nDESCRIPTION: Mutation for updating an existing Facet in the system. Requires an UpdateFacetInput object and returns the updated Facet entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_116\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nUpdate an existing Facet\n\"\"\"\ntype Mutation {\n  updateFacet(input: UpdateFacetInput!): Facet!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Documentation in React JSX\nDESCRIPTION: This snippet shows how to import various components required for generating documentation in a React-based application. It pulls in 'MemberInfo', 'GenerationInfo', and 'MemberDescription' components along with the 'DocCardList', which is subsequently used in the JSX layout. The imports suggest dependencies on '@site/src/components/' and '@theme/'. It demonstrates the use of DocCardList for rendering document cards within the JSX layout.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization - Field Resolver Caching\nDESCRIPTION: Implementation of field resolver caching to avoid duplicate database calls, referenced in commit 13697c3 to improve performance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Cache field resolvers to avoid duplicated DB calls\n@FieldResolver()\n@CacheControl({ maxAge: 3600 })\nasync function fieldResolver() {\n  // Cached resolver implementation\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Configuration with AWS\nDESCRIPTION: Example configuration for AWS S3 asset storage using environment credentials.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/s3asset-storage-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n  AssetServerPlugin.init({\n    route: 'assets',\n    assetUploadDir: path.join(__dirname, 'assets'),\n    namingStrategy: new DefaultAssetNamingStrategy(),\n    storageStrategyFactory: configureS3AssetStorage({\n      bucket: 'my-s3-bucket',\n      credentials: fromEnv(),\n      nativeS3Configuration: {\n        region: process.env.AWS_REGION,\n      },\n    }),\n}),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Wishlist Plugin in TypeScript for Vendure\nDESCRIPTION: This code snippet shows how to configure the Wishlist plugin in Vendure. It imports necessary modules, registers the resolver, and specifies the plugin's compatibility with Vendure core versions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { shopApiExtensions } from './api/api-extensions';\nimport { WishlistShopResolver } from './api/wishlist.resolver';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    shopApiExtensions: {\n        schema: shopApiExtensions,\n        resolvers: [WishlistShopResolver],\n    },\n    configuration: config => {\n        // ...\n    },\n    compatibility: '^2.0.0',\n})\nexport class WishlistPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordResetTokenInvalidError Type in GraphQL\nDESCRIPTION: The PasswordResetTokenInvalidError type is used for invalid or mismatched password reset tokens, with fields for errorCode and message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_79\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type PasswordResetTokenInvalidError {\\n  errorCode: ErrorCode!\\n  message: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Recheck Interval in AlertConfig Using RxJS\nDESCRIPTION: An example showing how to implement the recheck property of AlertConfig using RxJS interval to periodically re-run the check function every 60 seconds.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/alerts/alert-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interval } from 'rxjs';\n\n// ...\nrecheck: () => interval(60_000)\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelSortParameter in GraphQL\nDESCRIPTION: This input type provides sorting parameters for channels, allowing sorting by various fields such as ID, creation date, code, and token.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_28\n\nLANGUAGE: graphql\nCODE:\n```\ninput ChannelSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  code: SortOrder\n  token: SortOrder\n  outOfStockThreshold: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: ParsedProduct Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of a parsed Product with properties for assets, option groups, facets, and translations containing name, slug, description, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedProduct {\n    assetPaths: string[];\n    optionGroups: ParsedOptionGroup[];\n    facets: ParsedFacet[];\n    translations: Array<{\n        languageCode: LanguageCode;\n        name: string;\n        slug: string;\n        description: string;\n        customFields: {\n            [name: string]: string;\n        };\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: FulfillmentHandler Class Signature (TypeScript)\nDESCRIPTION: TypeScript signature for the FulfillmentHandler class. It shows that the class is generic, accepting a type parameter `T` which extends `ConfigArgs`, and it extends the `ConfigurableOperationDef` base class. The constructor requires a `FulfillmentHandlerConfig` object matching the generic type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-handler.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nclass FulfillmentHandler<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: FulfillmentHandlerConfig<T>)\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing indexing of long descriptions in postgres\nDESCRIPTION: This commit addresses an issue with indexing long descriptions in PostgreSQL databases within the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n* **core** Fix indexing of long descriptions in postgres ([9efd7db](https://github.com/vendure-ecommerce/vendure/commit/9efd7db)), closes [#745](https://github.com/vendure-ecommerce/vendure/issues/745)\n```\n\n----------------------------------------\n\nTITLE: OrderStates Interface Definition\nDESCRIPTION: An interface for extending the OrderState type, allowing for custom order states to be defined.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderStates {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Permission Definition Usage\nDESCRIPTION: Example showing how to define a permission object and how it generates permission strings that can be used with the requiresPermission property of ActionBarItem.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-item.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MyPermission = new PermissionDefinition('ProductReview');\n```\n\n----------------------------------------\n\nTITLE: Defining SendmailTransportOptions TypeScript Interface\nDESCRIPTION: Describes transport settings for using a local Sendmail program. This includes optional parameters for adjusting the path and newline behavior. It is useful for Unix-like systems with Sendmail installed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SendmailTransportOptions {\n    type: 'sendmail';\n    path?: string;\n    newline?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated Types in Services\nDESCRIPTION: Implementation example of using generated GraphQL types in a service class\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { RequestContext, TransactionalConnection } from '@vendure/core';\n\nimport { Organization } from '../entities/organization.entity';\nimport { CreateOrganizationInput, UpdateOrganizationInput } from \"../gql/generated\";\n\n@Injectable()\nexport class OrganizationService {\n    constructor(private connection: TransactionalConnection) {}\n\n    async create(ctx: RequestContext, input: CreateOrganizationInput): Promise<Organization> {\n        return this.connection.getRepository(ctx, Organization).save(new Organization(input));\n    }\n\n    async update(ctx: RequestContext, input: UpdateOrganizationInput): Promise<Organization> {\n        const example = await this.connection.getEntityOrThrow(ctx, Organization, input.id);\n        const updated = {...example, ...input};\n        return this.connection.getRepository(ctx, Organization).save(updated);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AssetType Enum in GraphQL\nDESCRIPTION: This snippet defines the 'AssetType' enum in the GraphQL schema as used by Vendure. It restricts an asset's possible types to IMAGE, VIDEO, or BINARY, typically representing the format of a stored asset in the ecommerce platform. The enum is consumed by Vendure services handling asset uploads and retrieval, and expects a compatible GraphQL server and schema infrastructure. Inputs and outputs relate to data serialization of asset type metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/enums.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nenum AssetType {\nIMAGE\nVIDEO\nBINARY\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AddressBasedTaxZoneStrategy in VendureConfig\nDESCRIPTION: This snippet demonstrates how to configure the AddressBasedTaxZoneStrategy in the VendureConfig object. It sets the taxZoneStrategy option in the taxOptions to use the AddressBasedTaxZoneStrategy.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/address-based-tax-zone-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig, AddressBasedTaxZoneStrategy } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  // other options...\n  taxOptions: {\n    // highlight-next-line\n    taxZoneStrategy: new AddressBasedTaxZoneStrategy(),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining IntCustomFieldConfig in GraphQL\nDESCRIPTION: GraphQL type definition for integer custom field configuration in Vendure, containing properties for name, type, validation constraints, UI configuration, and access control.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_53\n\nLANGUAGE: graphql\nCODE:\n```\ntype IntCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  min: Int\n  max: Int\n  step: Int\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CurrencyCode Enum in TypeScript for Vendure\nDESCRIPTION: This enum defines all the ISO 4217 currency codes supported by the Vendure e-commerce platform. It includes a comprehensive list of currency codes from various countries and regions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/currency-code.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum CurrencyCode {\n    AED = 'AED'\n    AFN = 'AFN'\n    ALL = 'ALL'\n    AMD = 'AMD'\n    ANG = 'ANG'\n    AOA = 'AOA'\n    ARS = 'ARS'\n    AUD = 'AUD'\n    AWG = 'AWG'\n    AZN = 'AZN'\n    BAM = 'BAM'\n    BBD = 'BBD'\n    BDT = 'BDT'\n    BGN = 'BGN'\n    BHD = 'BHD'\n    BIF = 'BIF'\n    BMD = 'BMD'\n    BND = 'BND'\n    BOB = 'BOB'\n    BRL = 'BRL'\n    BSD = 'BSD'\n    BTN = 'BTN'\n    BWP = 'BWP'\n    BYN = 'BYN'\n    BZD = 'BZD'\n    CAD = 'CAD'\n    CDF = 'CDF'\n    CHF = 'CHF'\n    CLP = 'CLP'\n    CNY = 'CNY'\n    COP = 'COP'\n    CRC = 'CRC'\n    CUC = 'CUC'\n    CUP = 'CUP'\n    CVE = 'CVE'\n    CZK = 'CZK'\n    DJF = 'DJF'\n    DKK = 'DKK'\n    DOP = 'DOP'\n    DZD = 'DZD'\n    EGP = 'EGP'\n    ERN = 'ERN'\n    ETB = 'ETB'\n    EUR = 'EUR'\n    FJD = 'FJD'\n    FKP = 'FKP'\n    GBP = 'GBP'\n    GEL = 'GEL'\n    GHS = 'GHS'\n    GIP = 'GIP'\n    GMD = 'GMD'\n    GNF = 'GNF'\n    GTQ = 'GTQ'\n    GYD = 'GYD'\n    HKD = 'HKD'\n    HNL = 'HNL'\n    HRK = 'HRK'\n    HTG = 'HTG'\n    HUF = 'HUF'\n    IDR = 'IDR'\n    ILS = 'ILS'\n    INR = 'INR'\n    IQD = 'IQD'\n    IRR = 'IRR'\n    ISK = 'ISK'\n    JMD = 'JMD'\n    JOD = 'JOD'\n    JPY = 'JPY'\n    KES = 'KES'\n    KGS = 'KGS'\n    KHR = 'KHR'\n    KMF = 'KMF'\n    KPW = 'KPW'\n    KRW = 'KRW'\n    KWD = 'KWD'\n    KYD = 'KYD'\n    KZT = 'KZT'\n    LAK = 'LAK'\n    LBP = 'LBP'\n    LKR = 'LKR'\n    LRD = 'LRD'\n    LSL = 'LSL'\n    LYD = 'LYD'\n    MAD = 'MAD'\n    MDL = 'MDL'\n    MGA = 'MGA'\n    MKD = 'MKD'\n    MMK = 'MMK'\n    MNT = 'MNT'\n    MOP = 'MOP'\n    MRU = 'MRU'\n    MUR = 'MUR'\n    MVR = 'MVR'\n    MWK = 'MWK'\n    MXN = 'MXN'\n    MYR = 'MYR'\n    MZN = 'MZN'\n    NAD = 'NAD'\n    NGN = 'NGN'\n    NIO = 'NIO'\n    NOK = 'NOK'\n    NPR = 'NPR'\n    NZD = 'NZD'\n    OMR = 'OMR'\n    PAB = 'PAB'\n    PEN = 'PEN'\n    PGK = 'PGK'\n    PHP = 'PHP'\n    PKR = 'PKR'\n    PLN = 'PLN'\n    PYG = 'PYG'\n    QAR = 'QAR'\n    RON = 'RON'\n    RSD = 'RSD'\n    RUB = 'RUB'\n    RWF = 'RWF'\n    SAR = 'SAR'\n    SBD = 'SBD'\n    SCR = 'SCR'\n    SDG = 'SDG'\n    SEK = 'SEK'\n    SGD = 'SGD'\n    SHP = 'SHP'\n    SLL = 'SLL'\n    SOS = 'SOS'\n    SRD = 'SRD'\n    SSP = 'SSP'\n    STN = 'STN'\n    SVC = 'SVC'\n    SYP = 'SYP'\n    SZL = 'SZL'\n    THB = 'THB'\n    TJS = 'TJS'\n    TMT = 'TMT'\n    TND = 'TND'\n    TOP = 'TOP'\n    TRY = 'TRY'\n    TTD = 'TTD'\n    TWD = 'TWD'\n    TZS = 'TZS'\n    UAH = 'UAH'\n    UGX = 'UGX'\n    USD = 'USD'\n    UYU = 'UYU'\n    UZS = 'UZS'\n    VES = 'VES'\n    VND = 'VND'\n    VUV = 'VUV'\n    WST = 'WST'\n    XAF = 'XAF'\n    XCD = 'XCD'\n    XOF = 'XOF'\n    XPF = 'XPF'\n    YER = 'YER'\n    ZAR = 'ZAR'\n    ZMW = 'ZMW'\n    ZWL = 'ZWL'\n}\n```\n\n----------------------------------------\n\nTITLE: StructFieldConfig Type Definition in Vendure\nDESCRIPTION: This code snippet defines the StructFieldConfig type as a union of various field type configurations. It includes options for string, text, int, float, boolean, and dateTime field types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/custom-fields/struct-field-config.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype StructFieldConfig = | StringStructFieldConfig\n    | TextStructFieldConfig\n    | IntStructFieldConfig\n    | FloatStructFieldConfig\n    | BooleanStructFieldConfig\n    | DateTimeStructFieldConfig\n```\n\n----------------------------------------\n\nTITLE: Defining ActionBarItem Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the structure of an ActionBarItem, which represents a button in the ActionBar area of the Vendure admin UI. It includes properties for identification, appearance, behavior, and permission requirements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-item.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionBarItem {\n    id: string;\n    label: string;\n    locationId: ActionBarLocationId;\n    disabled?: Observable<boolean>;\n    buttonState?: (context: ActionBarContext) => Observable<ActionBarButtonState>;\n    onClick?: (event: MouseEvent, context: ActionBarContext) => void;\n    routerLink?: RouterLinkDefinition;\n    buttonColor?: 'primary' | 'success' | 'warning';\n    buttonStyle?: 'solid' | 'outline' | 'link';\n    icon?: string;\n    requiresPermission?: string | string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ExternalAuthenticationMethod in TypeScript\nDESCRIPTION: Defines the ExternalAuthenticationMethod class for external authentication services. It extends AuthenticationMethod and includes properties for strategy, externalIdentifier, and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/authentication-method.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExternalAuthenticationMethod extends AuthenticationMethod {\n    constructor(input: DeepPartial<ExternalAuthenticationMethod>)\n    @Column()\n    strategy: string;\n    @Column()\n    externalIdentifier: string;\n    @Column('simple-json')\n    metadata: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InputWithSlug Type in TypeScript\nDESCRIPTION: The InputWithSlug type represents an input object with optional id and translations properties. The translations property contains an array of objects with language code and slug information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/slug-validator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype InputWithSlug = {\n    id?: ID | null;\n    translations?: Array<{\n        id?: ID | null;\n        languageCode: LanguageCode;\n        slug?: string | null;\n    }> | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NotVerifiedError Type in GraphQL\nDESCRIPTION: Represents an error returned if authOptions.requireVerification is set to true and an unverified user attempts to authenticate.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_66\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype NotVerifiedError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderHistoryEntryComponent Interface in TypeScript\nDESCRIPTION: This code snippet defines the OrderHistoryEntryComponent interface, which extends HistoryEntryComponent and adds an 'order' property of type OrderDetailFragment. It is used for implementing custom history entry components that need access to the Order object in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/order-history-entry-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OrderHistoryEntryComponent extends HistoryEntryComponent {\n    order: OrderDetailFragment;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestingTransportOptions TypeScript Interface\nDESCRIPTION: Defines options for forwarding raw email context to a callback function for testing purposes. This allows automated testing to verify email content without actual delivery.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TestingTransportOptions {\n    type: 'testing';\n    onSend: (details: EmailDetails) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom React Components for Vendure Documentation\nDESCRIPTION: This code snippet imports custom React components used for rendering documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining FacetFilterParameter Input Type in GraphQL\nDESCRIPTION: Specifies filter parameters for facet queries. Includes various operators for filtering facets based on properties like privacy, ID, creation date, name, code, etc.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_82\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetFilterParameter {\n  isPrivate: BooleanOperators\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  languageCode: StringOperators\n  name: StringOperators\n  code: StringOperators\n  _and: [FacetFilterParameter!]\n  _or: [FacetFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultAssetImportStrategy Class in TypeScript\nDESCRIPTION: This code snippet defines the DefaultAssetImportStrategy class, which implements the AssetImportStrategy interface. It includes a constructor with optional parameters for retry settings, and methods for initialization and getting a stream from a given asset path.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/default-asset-import-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultAssetImportStrategy implements AssetImportStrategy {\n    constructor(options?: {\n            retryDelayMs: number;\n            retryCount: number;\n        })\n    init(injector: Injector) => ;\n    getStreamFromPath(assetPath: string) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Logging in Vendure\nDESCRIPTION: Command to enable default logging behavior when running end-to-end tests in Vendure. The LOG environment variable enables verbose output for debugging test failures.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/test-config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLOG=true yarn e2e\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Scalar in GraphQL\nDESCRIPTION: This scalar type represents a file upload in GraphQL. It is used to handle file uploads in the API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_149\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nThe `Upload` scalar type represents a file upload.\n\"\"\"\nscalar Upload\n```\n\n----------------------------------------\n\nTITLE: Defining TranslationExtension Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for TranslationExtension, which specifies configuration for adding translations to the Admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/admin-ui-extension.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TranslationExtension {\n    translations: { [languageCode in LanguageCode]?: string };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate Type\nDESCRIPTION: GraphQL type definition for representing x,y coordinates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_21\n\nLANGUAGE: graphql\nCODE:\n```\ntype Coordinate {\n  x: Float!\n  y: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Adjustment Type\nDESCRIPTION: The Adjustment type details pricing adjustments applied to orders, specifying properties like adjustmentSource, type, and amount. This type is crucial for representing different pricing scenarios in orders.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Adjustment {\n  adjustmentSource: String!\n  type: AdjustmentType!\n  description: String!\n  amount: Money!\n  data: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: LocalizedStringArray Type Definition\nDESCRIPTION: The type definition for LocalizedStringArray showing it is an array of objects that are based on the LocalizedString type with the __typename property omitted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/localized-string-array.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype LocalizedStringArray = Array<Omit<LocalizedString, '__typename'>>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation in JSX\nDESCRIPTION: Imports several React components used for documentation purposes including MemberInfo, GenerationInfo, MemberDescription, and DocCardList. These components are used to create structured API documentation for Vendure's React hooks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Importing Split Configuration in Main VendureConfig\nDESCRIPTION: Example of importing plugin configurations from a separate file into the main VendureConfig object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/configuration/index.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { plugins } from './vendure-config-plugins';\n\nexport const config: VendureConfig = {\n  plugins,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Worker Health Check Implementation\nDESCRIPTION: TypeScript code for implementing health check server in the worker process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbootstrapWorker(config)\n    .then(worker => worker.startJobQueue())\n    .then(worker => worker.startHealthCheckServer({ port: 3020 }))\n    .catch(err => {\n        console.log(err);\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining ID Scalar in GraphQL\nDESCRIPTION: Defines the `ID` scalar type in GraphQL. It represents a unique identifier, typically used for refetching objects or as cache keys. Although returned as a String in JSON responses, it accepts both String and Integer values as input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_77\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as \\\"4\\\") or integer (such as `4`) input value will be accepted as an ID.\n\"\"\"\nscalar ID\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionSortParameter Input Type in GraphQL\nDESCRIPTION: This input type is used for specifying sorting options when querying promotions. It includes fields for various promotion attributes that can be used for sorting, such as creation date, start date, and coupon code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_130\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput PromotionSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  startsAt: SortOrder\n  endsAt: SortOrder\n  couponCode: SortOrder\n  perCustomerUsageLimit: SortOrder\n  usageLimit: SortOrder\n  name: SortOrder\n  description: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering DocCardList Component\nDESCRIPTION: This code snippet imports the DocCardList component from the theme and renders it. DocCardList is likely used to display a list of documentation cards or sections.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Querying Assets List - GraphQL SDL - GraphQL\nDESCRIPTION: Declares the 'assets' query, returning a paginated list of Asset objects. The query accepts optional AssetListOptions for filtering, sorting, and pagination. The response is always a non-nullable AssetList. Includes an inline comment describing its usage.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nGet a list of Assets\n\"\"\"\ntype Query {\n  assets(options: AssetListOptions): AssetList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining OrderTaxSummary Type in GraphQL\nDESCRIPTION: The OrderTaxSummary type provides a breakdown of the taxes applied to an order, grouped by tax rate. It includes fields for description, taxRate, taxBase, and taxTotal.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_76\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type OrderTaxSummary {\\n  description: String!\\n  taxRate: Float!\\n  taxBase: Money!\\n  taxTotal: Money!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation\nDESCRIPTION: This snippet imports React components essential for generating entity-related documentation pages. It includes components like MemberInfo, GenerationInfo, and MemberDescription, which are used for displaying detailed information and metadata about each entity. These components are necessary for constructing a system to automatically build documentation pages with updated information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Using ProductVariantSelectorComponent in HTML Templates\nDESCRIPTION: Example of how to implement the ProductVariantSelectorComponent in a HTML template with an event binding for when a product is selected.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/product-variant-selector-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-product-variant-selector\n  (productSelected)=\"selectResult($event)\"></vdr-product-variant-selector>\n```\n\n----------------------------------------\n\nTITLE: Setting DateTime Field Constraints\nDESCRIPTION: Demonstrates configuration of min and max date constraints for datetime custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'releaseDate',\n                type: 'datetime',\n                min: '2019-01-01T00:00:00.000Z',\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Querying an order by ID in GraphQL\nDESCRIPTION: This query fetches an Order by its ID, restricted to orders for the authenticated user. It returns an Order object, and the 'id' is mandatory. Primarily used in customer profile contexts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns an Order based on the id. Note that in the Shop API, only orders belonging to the currently-authenticated User may be queried.\n\"\"\"\ntype Query {\n    order(id: ID!): Order\n}\n```\n\n----------------------------------------\n\nTITLE: AssetPreviewPipe Class Definition in TypeScript\nDESCRIPTION: The TypeScript class definition for AssetPreviewPipe, which implements the PipeTransform interface. It includes a transform method that takes an AssetFragment and a preset size or number, returning a string URL.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/asset-preview-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AssetPreviewPipe implements PipeTransform {\n    transform(asset?: AssetFragment, preset: string | number = 'thumb') => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: Imports various React components used for displaying member information, generation details, and member descriptions in the Vendure documentation system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/alerts/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL ApplyCouponCodeResult Union\nDESCRIPTION: The ApplyCouponCodeResult union type specifies potential results from applying a coupon code, including success as an Order or failure with errors, like CouponCodeExpiredError. This structure aids in coupon validation flows.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nunion ApplyCouponCodeResult = Order | CouponCodeExpiredError | CouponCodeInvalidError | CouponCodeLimitError\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Descendants in TypeScript\nDESCRIPTION: Gets the descendants of a Collection as a flat array. The depth of traversal can be limited with the maxDepth argument.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetDescendants(ctx: RequestContext, rootId: ID, maxDepth: number = Number.MAX_SAFE_INTEGER): Promise<Array<Translated<Collection>>>\n```\n\n----------------------------------------\n\nTITLE: Defining ID GraphQL Scalar Type\nDESCRIPTION: Declares the ID scalar type representing unique identifiers in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_46\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.\"\"\"\nscalar ID\n```\n\n----------------------------------------\n\nTITLE: Documenting Fixes in Vendure E-commerce Project\nDESCRIPTION: This code snippet is a markdown-formatted changelog listing various fixes and improvements made to different components of the Vendure e-commerce platform. It includes fixes for the admin UI, core functionality, and the email plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_44\n\nLANGUAGE: markdown\nCODE:\n```\n#### Fixes\n\n* **admin-ui** Correctly display configurable money values ([3546071](https://github.com/vendure-ecommerce/vendure/commit/3546071))\n* **admin-ui** Correctly sort assets ([e57450b](https://github.com/vendure-ecommerce/vendure/commit/e57450b))\n* **admin-ui** Do not run CanDeactivateGuard when switching tabs ([d8e6258](https://github.com/vendure-ecommerce/vendure/commit/d8e6258))\n* **admin-ui** Fix boolean configurable input ([994264d](https://github.com/vendure-ecommerce/vendure/commit/994264d))\n* **admin-ui** Fix creation of zone from country list ([0aa0bc8](https://github.com/vendure-ecommerce/vendure/commit/0aa0bc8))\n* **admin-ui** Fix error with rich text editor (trix) ([b42ead6](https://github.com/vendure-ecommerce/vendure/commit/b42ead6))\n* **admin-ui** Replace all clr-dropdown with vdr-dropdown ([4de2a6a](https://github.com/vendure-ecommerce/vendure/commit/4de2a6a)), closes [#95](https://github.com/vendure-ecommerce/vendure/issues/95)\n* **admin-ui** Reset page when filters changed in product list ([c9325b6](https://github.com/vendure-ecommerce/vendure/commit/c9325b6))\n* **core** Add missing timestamp fields to Asset GraphQL type ([1c543db](https://github.com/vendure-ecommerce/vendure/commit/1c543db))\n* **core** Add property resolver for Collection.featuredAsset ([cd367a7](https://github.com/vendure-ecommerce/vendure/commit/cd367a7))\n* **core** Check existence of ProductVariant before updating ([fe5eedd](https://github.com/vendure-ecommerce/vendure/commit/fe5eedd))\n* **core** Correctly intercept top-level Assets ([d767a9d](https://github.com/vendure-ecommerce/vendure/commit/d767a9d))\n* **core** Correctly update country in customer address ([75f9492](https://github.com/vendure-ecommerce/vendure/commit/75f9492))\n* **core** Fix bad import paths ([e126d2e](https://github.com/vendure-ecommerce/vendure/commit/e126d2e))\n* **core** Fix bug which created new address for each order placed ([8703e25](https://github.com/vendure-ecommerce/vendure/commit/8703e25))\n* **core** Fix error when updating variant stock level ([57c5499](https://github.com/vendure-ecommerce/vendure/commit/57c5499))\n* **core** Fix reordering of collections ([75f8858](https://github.com/vendure-ecommerce/vendure/commit/75f8858)), closes [#75](https://github.com/vendure-ecommerce/vendure/issues/75)\n* **core** Fix search.facetValues resolver error ([ecfbf56](https://github.com/vendure-ecommerce/vendure/commit/ecfbf56))\n* **core** Fix type error (missing isPrivate property) ([4d1cd65](https://github.com/vendure-ecommerce/vendure/commit/4d1cd65))\n* **core** Implement property resolver for Collection.children ([e5f614e](https://github.com/vendure-ecommerce/vendure/commit/e5f614e))\n* **core** Prevent race conditions when updating search index ([8872a94](https://github.com/vendure-ecommerce/vendure/commit/8872a94))\n* **core** Relax engines check for Yarn ([9c4f8fb](https://github.com/vendure-ecommerce/vendure/commit/9c4f8fb))\n* **core** Typo in mock product data ([cf0f842](https://github.com/vendure-ecommerce/vendure/commit/cf0f842))\n* **email-plugin** Fix failing test ([cf2acbf](https://github.com/vendure-ecommerce/vendure/commit/cf2acbf))\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Order Process in TypeScript\nDESCRIPTION: Example showing how to configure a customized version of the default OrderProcess by using the configureDefaultOrderProcess function to disable specific constraints.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configureDefaultOrderProcess, VendureConfig } from '@vendure/core';\n\nconst myCustomOrderProcess = configureDefaultOrderProcess({\n  // Disable the constraint that requires\n  // Orders to have a shipping method assigned\n  // before payment.\n  arrangingPaymentRequiresShipping: false,\n});\n\nexport const config: VendureConfig = {\n  orderOptions: {\n    process: [myCustomOrderProcess],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Alerts in Vendure Admin UI with TypeScript\nDESCRIPTION: This function registers an alert to be displayed in the Admin UI alert dropdown in the top bar. It takes an AlertConfig object as its configuration parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/alerts/register-alert.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerAlert(config: AlertConfig): void\n```\n\n----------------------------------------\n\nTITLE: Defining UiExtensionCompilerProcessArgument Type in TypeScript\nDESCRIPTION: This code snippet defines the UiExtensionCompilerProcessArgument type as a union of string and tuple types. It's used to configure process arguments for watch or compile operations in the UI extension compiler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/ui-devkit/ui-extension-compiler-process-argument.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UiExtensionCompilerProcessArgument = string | [string, any]\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Entity in TypeScript\nDESCRIPTION: Example of FacetTranslation entity showing the translation implementation with language code and base entity relation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translations/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class FacetTranslation extends VendureEntity implements Translation<Facet> {\n    @Column('varchar') languageCode: LanguageCode;\n\n    @Column() name: string;\n\n    @Index()\n    @ManyToOne(type => Facet, base => base.translations, { onDelete: 'CASCADE' })\n    base: Facet;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GlobalFlag Enum in GraphQL for Vendure\nDESCRIPTION: This enum defines global flags used in the Vendure system. It includes options for TRUE, FALSE, and INHERIT, which can be used to set global settings or permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_6\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum GlobalFlag {\n  TRUE\n  FALSE\n  INHERIT\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Response Format\nDESCRIPTION: Example of how unexpected errors are returned in the standard errors array of a GraphQL response. This shows a forbidden access error with its location and path information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"You are not currently authorized to perform this action\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 2\n        }\n      ],\n      \"path\": [\n        \"me\"\n      ],\n      \"extensions\": {\n        \"code\": \"FORBIDDEN\"\n      }\n    }\n  ],\n  \"data\": {\n    \"me\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionTranslation GraphQL Object Type\nDESCRIPTION: Defines the PromotionTranslation object type, which represents translations of a promotion's name and description in different languages. It includes fields for language code, translated name, and description.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_146\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype PromotionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Search Query Example\nDESCRIPTION: Example GraphQL query demonstrating how to search products with price range filtering and retrieve price data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  search (input: {\n    term: \"table easel\"\n    groupByProduct: true\n    priceRange: {\n      min: 500\n      max: 7000\n    }\n  }) {\n    totalItems\n    prices {\n      range {\n        min\n        max\n      }\n      buckets {\n        to\n        count\n      }\n    }\n    items {\n      productName\n      score\n      price {\n        ...on PriceRange {\n          min\n          max\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Multiple Order Lines - Vendure TypeScript\nDESCRIPTION: Adjusts multiple OrderLines in one call, improving efficiency by minimizing order fetches and price recalculations. Accepts context, orderId, an array of update objects (orderLineId, quantity, optional customFields), and optional relations. Returns a Promise with the updated Order and array of potential error results, supporting mixed outcome batch operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(ctx: RequestContext, orderId: ID, lines: Array<{ orderLineId: ID; quantity: number; customFields?: { [key: string]: any } }>, relations?: RelationPaths<Order>) => Promise<{ order: Order; errorResults: Array<JustErrorResults<UpdateOrderItemsResult>> }>\n```\n\n----------------------------------------\n\nTITLE: Defining WidgetLayoutDefinition Type in TypeScript\nDESCRIPTION: Type definition for specifying the default dashboard widget layout. It consists of an array of objects, each defining a widget with an ID and width property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/dashboard-widgets/widget-layout-definition.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype WidgetLayoutDefinition = Array<{ id: string; width: DashboardWidgetWidth }>\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration with UI Extension\nDESCRIPTION: Configuration of the Greeter plugin with UI extension settings including routes and providers\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class GreeterPlugin {\n    static options: PluginInitOptions;\n\n    static init(options: PluginInitOptions): Type<GreeterPlugin> {\n        this.options = options;\n        return GreeterPlugin;\n    }\n\n    static ui: AdminUiExtension = {\n        id: 'greeter-ui',\n        extensionPath: path.join(__dirname, 'ui'),\n        routes: [{ route: 'greeter', filePath: 'routes.ts' }],\n        providers: ['providers.ts'],\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AssetType Enum in GraphQL\nDESCRIPTION: Defines the `AssetType` GraphQL enum. This enum categorizes assets into predefined types: `IMAGE`, `VIDEO`, or `BINARY`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nenum AssetType {\n  IMAGE\n  VIDEO\n  BINARY\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VerificationTokenInvalidError Type in GraphQL\nDESCRIPTION: This type represents an error when a verification token for a customer's email address is invalid or does not match expected tokens. It includes an error code and a message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_152\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturned if the verification token (used to verify a Customer's email address) is either\ninvalid or does not match any expected tokens.\n\"\"\"\ntype VerificationTokenInvalidError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: AvailableStock Interface Definition in TypeScript\nDESCRIPTION: Defines the AvailableStock interface that represents the overall available stock for a ProductVariant, containing properties for stockOnHand and stockAllocated.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/stock-location-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AvailableStock {\n    stockOnHand: number;\n    stockAllocated: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Shipping Method - GraphQL Mutation\nDESCRIPTION: GraphQL mutation for setting shipping methods for an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/multi-vendor-marketplaces/index.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nmutation SetShippingMethod($ids: [ID!]!) {\n  setOrderShippingMethod(shippingMethodId: $ids) {\n    ... on Order {\n      id\n      state\n      # ...etc\n    }\n    ... on ErrorResult {\n      errorCode\n      message\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components for Custom Table Components in JSX\nDESCRIPTION: Import statements for documentation components used in the Vendure custom table components documentation page. These components are used to render member information, generation details, member descriptions, and documentation card lists.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-table-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining OrderStateTransitionError Type in GraphQL\nDESCRIPTION: The OrderStateTransitionError type is returned when there is an error transitioning an Order from one state to another, containing detailed error information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_122\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"Returned if there is an error in transitioning the Order state\"\"\"\ntype OrderStateTransitionError {\n  errorCode: ErrorCode!\n  message: String!\n  transitionError: String!\n  fromState: String!\n  toState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultOrderProcessOptions Interface in TypeScript\nDESCRIPTION: Defines configuration options for the default OrderProcess implementation. Allows enabling/disabling various checks that control order state transitions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-process.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DefaultOrderProcessOptions {\n    checkModificationPayments?: boolean;\n    checkAdditionalPaymentsAmount?: boolean;\n    checkAllVariantsExist?: boolean;\n    arrangingPaymentRequiresContents?: boolean;\n    arrangingPaymentRequiresCustomer?: boolean;\n    arrangingPaymentRequiresShipping?: boolean;\n    arrangingPaymentRequiresStock?: boolean;\n    checkPaymentsCoverTotal?: boolean;\n    checkAllItemsBeforeCancel?: boolean;\n    checkFulfillmentStates?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Shipping Documentation\nDESCRIPTION: Imports necessary React components for rendering the shipping documentation page, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: ProductOptionInUseError Type Definition in GraphQL\nDESCRIPTION: Defines an error type for when a product option cannot be deleted because it is in use by variants.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_139\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductOptionInUseError {\n  errorCode: ErrorCode!\n  message: String!\n  optionGroupCode: String!\n  productVariantCount: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocaleRegionNamePipe in HTML Template\nDESCRIPTION: Demonstrates how to use the LocaleRegionNamePipe in an HTML template to display a human-readable name for a given region code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-region-name-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{ 'GB' | localeRegionName }}\n```\n\n----------------------------------------\n\nTITLE: ConfigArgs Type Definition\nDESCRIPTION: The TypeScript type definition for ConfigArgs, showing it as an object with string keys mapping to ConfigArgDef types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/config-args.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype ConfigArgs = {\n    [name: string]: ConfigArgDef<ConfigArgType>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering WishlistItem Entity in Plugin\nDESCRIPTION: Configures the Vendure plugin to include the WishlistItem entity in its entity registry.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { WishlistItem } from './entities/wishlist-item.entity';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    entities: [WishlistItem],\n})\nexport class WishlistPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vendure Pipes Documentation\nDESCRIPTION: This code snippet imports various React components used to display documentation for Vendure pipes. It includes components for member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining FulfillmentLine GraphQL Type\nDESCRIPTION: Defines the FulfillmentLine type representing a line item in a fulfillment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_42\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype FulfillmentLine {\n  orderLine: OrderLine!\n  orderLineId: ID!\n  quantity: Int!\n  fulfillment: Fulfillment!\n  fulfillmentId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Server Health Check Response\nDESCRIPTION: Example JSON response from the server health check endpoint at /health.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\",\n  \"info\": {\n    \"database\": {\n      \"status\": \"up\"\n    }\n  },\n  \"error\": {},\n  \"details\": {\n    \"database\": {\n      \"status\": \"up\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Region in TypeScript\nDESCRIPTION: Defines a 'Province' class that extends the 'Region' class. It is a part of the Vendure framework and represents an administrative subdivision of a country. The 'Province' class allows optional input of a partial 'Province' type and sets a default 'type' as 'province'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/province.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Province extends Region {\n    constructor(input?: DeepPartial<Province>)\n    readonly type: RegionType = 'province';\n}\n```\n\n----------------------------------------\n\nTITLE: ParsedOptionGroup Interface Definition in TypeScript\nDESCRIPTION: Defines the intermediate representation of an OptionGroup after being parsed by the ImportParser, containing translations with name and values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedOptionGroup {\n    translations: Array<{\n        languageCode: LanguageCode;\n        name: string;\n        values: string[];\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Typesense Docsearch scraper with Docker\nDESCRIPTION: Docker command to run the Typesense Docsearch scraper. It uses environment variables from the .env file and passes the config.json content as a CONFIG environment variable to the container.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/scraper/readme.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --env-file=.env -e \"CONFIG=$(cat config.json | jq -r tostring)\" typesense/docsearch-scraper:0.7.0\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionGroupChangeEvent Class in TypeScript\nDESCRIPTION: This class represents an event fired when a ProductOptionGroup is assigned or removed from a Product. It extends VendureEvent and includes a constructor.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductOptionGroupChangeEvent extends VendureEvent {\n    constructor(ctx: RequestContext, product: Product, optionGroupId: ID, type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List for Vendure Core Plugins\nDESCRIPTION: This code snippet imports and renders the DocCardList component, which is likely used to display a list of documentation cards for Vendure core plugins.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Registering Email Handler in Plugin Configuration\nDESCRIPTION: Example showing how to register a custom email handler in the Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-event-handler.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config: VendureConfig = {\n  plugins: [\n    EmailPlugin.init({\n      handler: [...defaultEmailHandlers, quoteRequestedHandler],\n      // ... etc\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: ProductVariantPriceUpdateStrategy Interface Definition\nDESCRIPTION: Interface defining the contract for handling product variant price updates, including methods for price creation, updates and deletions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/product-variant-price-update-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProductVariantPriceUpdateStrategy extends InjectableStrategy {\n    onPriceCreated(\n        ctx: RequestContext,\n        createdPrice: ProductVariantPrice,\n        prices: ProductVariantPrice[],\n    ): UpdatedProductVariantPrice[] | Promise<UpdatedProductVariantPrice[]>;\n    onPriceUpdated(\n        ctx: RequestContext,\n        updatedPrice: ProductVariantPrice,\n        prices: ProductVariantPrice[],\n    ): UpdatedProductVariantPrice[] | Promise<UpdatedProductVariantPrice[]>;\n    onPriceDeleted(\n        ctx: RequestContext,\n        deletedPrice: ProductVariantPrice,\n        prices: ProductVariantPrice[],\n    ): UpdatedProductVariantPrice[] | Promise<UpdatedProductVariantPrice[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using CurrencyInputComponent in HTML Templates\nDESCRIPTION: Example of using the CurrencyInputComponent in an Angular HTML template. The component binds to a model property and accepts a currency code input.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/currency-input-component.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<vdr-currency-input\n    [(ngModel)]=\"entityPrice\"\n    [currencyCode]=\"currencyCode\"\n></vdr-currency-input>\n```\n\n----------------------------------------\n\nTITLE: Throwing Internal Server Error in Vendure\nDESCRIPTION: Example of throwing an unexpected error when a customer cannot be found for a user. This is an internal server error that should be caught and handled appropriately.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst customer = await this.findOneByUserId(ctx, user.id);\n// in this case, the customer *should always* be found, and if\n// not then something unknown has gone wrong...\nif (!customer) {\n    throw new InternalServerError('error.cannot-locate-customer-for-user');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NativeAuthStrategyError GraphQL Object Type\nDESCRIPTION: Defines the NativeAuthStrategyError object type for cases where an operation relies on the NativeAuthStrategy, but it is not configured.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_105\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"Returned when attempting an operation that relies on the NativeAuthStrategy, if that strategy is not configured.\"\"\"\ntype NativeAuthStrategyError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AddPaymentToOrderResult Union\nDESCRIPTION: This union type represents possible results from attempting to add a payment to an order. Possible values include an Order or different error types such as OrderPaymentStateError and PaymentFailedError, providing detailed states of payment processing.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nunion AddPaymentToOrderResult = Order | OrderPaymentStateError | IneligiblePaymentMethodError | PaymentFailedError | PaymentDeclinedError | OrderStateTransitionError | NoActiveOrderError\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Translatable Error\nDESCRIPTION: Example of creating a custom translatable error and adding translations through a Vendure plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/translations/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomError extends ErrorResult {\n    readonly __typename = 'CustomError';\n    readonly errorCode = 'CUSTOM_ERROR';\n    readonly message = 'CUSTOM_ERROR';\n}\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    providers: [I18nService],\n})\nexport class TranslationTestPlugin implements OnApplicationBootstrap {\n    constructor(private i18nService: I18nService) {}\n\n    onApplicationBootstrap(): any {\n        this.i18nService.addTranslation('en', {\n            errorResult: {\n                CUSTOM_ERROR: 'A custom error message',\n            },\n            anything: {\n                foo: 'bar'\n            }\n        });\n\n        this.i18nService.addTranslation('de', {\n            errorResult: {\n                CUSTOM_ERROR: 'Eine eigene Fehlermeldung',\n            },\n            anything: {\n                foo: 'bar'\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EventWithContext Type in TypeScript\nDESCRIPTION: Defines a type that combines VendureEvent with RequestContext for email generation purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EventWithContext = VendureEvent & { ctx: RequestContext }\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: Imports custom React components used for rendering the Vendure documentation, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining RefundOrderResult Union Type in GraphQL\nDESCRIPTION: Defines a union type representing possible results when refunding an order, including success (Refund) and various possible error conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_153\n\nLANGUAGE: graphql\nCODE:\n```\nunion RefundOrderResult =\n  Refund | QuantityTooGreatError | NothingToRefundError | OrderStateTransitionError | MultipleOrderError | PaymentOrderMismatchError | RefundOrderStateError | AlreadyRefundedError | RefundStateTransitionError | RefundAmountError\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component for Vendure Routes\nDESCRIPTION: This code snippet renders the DocCardList component, which is likely used to display a list of documentation cards for Vendure routes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/routes/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Plugin Environment Variables in Vendure (Shell)\nDESCRIPTION: This shell code snippet demonstrates how to configure the environment variables required to run the Vendure Stripe payment plugin locally. Developers must supply their own Stripe test API key, webhook secret, and publishable key, and save them to the packages/payments-plugin/.env file. The configuration enables the plugin to connect to Stripe test environments for processing local transactions. Inputs are secret keys; there are no outputs except for plugin readiness. Caution: Never commit secrets to source control.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/payments-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nSTRIPE_APIKEY=sk_test_xxxx\\nSTRIPE_WEBHOOK_SECRET=webhook-secret\\nSTRIPE_PUBLISHABLE_KEY=pk_test_xxxx\n```\n\n----------------------------------------\n\nTITLE: Defining English Translations in JSON Format\nDESCRIPTION: Example of the translation file structure showing nested keys and MessageFormat pluralization syntax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/adding-ui-translations/index.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"admin\": {\n    \"create-new-administrator\": \"Create new administrator\"\n  },\n  \"asset\": {\n    \"add-asset\": \"Add asset\",\n    \"add-asset-with-count\": \"{count, plural, 0 {assets} one {1 asset} other {{count} assets}}\",\n    \"assets-selected-count\": \"{ count } assets selected\",\n    \"dimensions\": \"Dimensions\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transitioning Order State - GraphQL Mutation\nDESCRIPTION: GraphQL mutation to transition the order to the ArrangingPayment state before processing payment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nmutation TransitionToState($state: String!) {\n  transitionOrderToState(state: $state) {\n    ...ActiveOrder\n    ...on OrderStateTransitionError {\n      errorCode\n      message\n      transitionError\n      fromState\n      toState\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting String Length Constraints\nDESCRIPTION: Shows how to configure maximum length constraints for string-type custom fields in the database.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        ProductVariant: [\n            {\n                name: 'partCode',\n                type: 'string',\n                length: 20,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: OrderService Class Definition in TypeScript\nDESCRIPTION: Defines the OrderService class with methods for managing orders in Vendure. Includes functionality for order creation, modification, payment processing, fulfillment handling, and customer management. The service handles core e-commerce operations like adding items, applying discounts, and processing refunds.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderService {\n    constructor(connection: TransactionalConnection, configService: ConfigService, productVariantService: ProductVariantService, customerService: CustomerService, countryService: CountryService, orderCalculator: OrderCalculator, shippingCalculator: ShippingCalculator, orderStateMachine: OrderStateMachine, orderMerger: OrderMerger, paymentService: PaymentService, paymentMethodService: PaymentMethodService, fulfillmentService: FulfillmentService, listQueryBuilder: ListQueryBuilder, refundStateMachine: RefundStateMachine, historyService: HistoryService, promotionService: PromotionService, eventBus: EventBus, channelService: ChannelService, orderModifier: OrderModifier, customFieldRelationService: CustomFieldRelationService, requestCache: RequestContextCacheService, translator: TranslatorService, stockLevelService: StockLevelService)\n    getOrderProcessStates() => OrderProcessState[];\n    findAll(ctx: RequestContext, options?: OrderListOptions, relations?: RelationPaths<Order>) => Promise<PaginatedList<Order>>;\n    findOne(ctx: RequestContext, orderId: ID, relations?: RelationPaths<Order>) => Promise<Order | undefined>;\n    findOneByCode(ctx: RequestContext, orderCode: string, relations?: RelationPaths<Order>) => Promise<Order | undefined>;\n    findOneByOrderLineId(ctx: RequestContext, orderLineId: ID, relations?: RelationPaths<Order>) => Promise<Order | undefined>;\n    findByCustomerId(ctx: RequestContext, customerId: ID, options?: ListQueryOptions<Order>, relations?: RelationPaths<Order>) => Promise<PaginatedList<Order>>;\n    getOrderPayments(ctx: RequestContext, orderId: ID) => Promise<Payment[]>;\n    getOrderModifications(ctx: RequestContext, orderId: ID) => Promise<OrderModification[]>;\n    getPaymentRefunds(ctx: RequestContext, paymentId: ID) => Promise<Refund[]>;\n    getSellerOrders(ctx: RequestContext, order: Order) => Promise<Order[]>;\n    getAggregateOrder(ctx: RequestContext, order: Order) => Promise<Order | undefined>;\n    getOrderChannels(ctx: RequestContext, order: Order) => Promise<Channel[]>;\n    getActiveOrderForUser(ctx: RequestContext, userId: ID) => Promise<Order | undefined>;\n    create(ctx: RequestContext, userId?: ID) => Promise<Order>;\n    createDraft(ctx: RequestContext) => ;\n    updateCustomFields(ctx: RequestContext, orderId: ID, customFields: any) => ;\n    updateOrderCustomer(ctx: RequestContext, { customerId, orderId, note }: SetOrderCustomerInput) => ;\n    addItemToOrder(ctx: RequestContext, orderId: ID, productVariantId: ID, quantity: number, customFields?: { [key: string]: any }, relations?: RelationPaths<Order>) => Promise<ErrorResultUnion<UpdateOrderItemsResult, Order>>;\n    addItemsToOrder(ctx: RequestContext, orderId: ID, items: Array<{\n            productVariantId: ID;\n            quantity: number;\n            customFields?: { [key: string]: any };\n        }>, relations?: RelationPaths<Order>) => Promise<{ order: Order; errorResults: Array<JustErrorResults<UpdateOrderItemsResult>> }>;\n    adjustOrderLine(ctx: RequestContext, orderId: ID, orderLineId: ID, quantity: number, customFields?: { [key: string]: any }, relations?: RelationPaths<Order>) => Promise<ErrorResultUnion<UpdateOrderItemsResult, Order>>;\n    adjustOrderLines(ctx: RequestContext, orderId: ID, lines: Array<{ orderLineId: ID; quantity: number; customFields?: { [key: string]: any } }>, relations?: RelationPaths<Order>) => Promise<{ order: Order; errorResults: Array<JustErrorResults<UpdateOrderItemsResult>> }>;\n    removeItemFromOrder(ctx: RequestContext, orderId: ID, orderLineId: ID) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>;\n    removeItemsFromOrder(ctx: RequestContext, orderId: ID, orderLineIds: ID[]) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>;\n    removeAllItemsFromOrder(ctx: RequestContext, orderId: ID) => Promise<ErrorResultUnion<RemoveOrderItemsResult, Order>>;\n    addSurchargeToOrder(ctx: RequestContext, orderId: ID, surchargeInput: Partial<Omit<Surcharge, 'id' | 'createdAt' | 'updatedAt' | 'order'>>) => Promise<Order>;\n    removeSurchargeFromOrder(ctx: RequestContext, orderId: ID, surchargeId: ID) => Promise<Order>;\n    applyCouponCode(ctx: RequestContext, orderId: ID, couponCode: string) => Promise<ErrorResultUnion<ApplyCouponCodeResult, Order>>;\n    removeCouponCode(ctx: RequestContext, orderId: ID, couponCode: string) => ;\n    getOrderPromotions(ctx: RequestContext, orderId: ID) => Promise<Promotion[]>;\n    getNextOrderStates(order: Order) => readonly OrderState[];\n    setShippingAddress(ctx: RequestContext, orderId: ID, input: CreateAddressInput) => Promise<Order>;\n    setBillingAddress(ctx: RequestContext, orderId: ID, input: CreateAddressInput) => Promise<Order>;\n    unsetShippingAddress(ctx: RequestContext, orderId: ID) => Promise<Order>;\n    unsetBillingAddress(ctx: RequestContext, orderId: ID) => Promise<Order>;\n    getEligibleShippingMethods(ctx: RequestContext, orderId: ID) => Promise<ShippingMethodQuote[]>;\n    getEligiblePaymentMethods(ctx: RequestContext, orderId: ID) => Promise<PaymentMethodQuote[]>;\n    setShippingMethod(ctx: RequestContext, orderId: ID, shippingMethodIds: ID[]) => Promise<ErrorResultUnion<SetOrderShippingMethodResult, Order>>;\n    transitionToState(ctx: RequestContext, orderId: ID, state: OrderState) => Promise<Order | OrderStateTransitionError>;\n    transitionFulfillmentToState(ctx: RequestContext, fulfillmentId: ID, state: FulfillmentState) => Promise<Fulfillment | FulfillmentStateTransitionError>;\n    transitionRefundToState(ctx: RequestContext, refundId: ID, state: RefundState, transactionId?: string) => Promise<Refund | RefundStateTransitionError>;\n    modifyOrder(ctx: RequestContext, input: ModifyOrderInput) => Promise<ErrorResultUnion<ModifyOrderResult, Order>>;\n    transitionPaymentToState(ctx: RequestContext, paymentId: ID, state: PaymentState) => Promise<ErrorResultUnion<TransitionPaymentToStateResult, Payment>>;\n    addPaymentToOrder(ctx: RequestContext, orderId: ID, input: PaymentInput) => Promise<ErrorResultUnion<AddPaymentToOrderResult, Order>>;\n    addManualPaymentToOrder(ctx: RequestContext, input: ManualPaymentInput) => Promise<ErrorResultUnion<AddManualPaymentToOrderResult, Order>>;\n    settlePayment(ctx: RequestContext, paymentId: ID) => Promise<ErrorResultUnion<SettlePaymentResult, Payment>>;\n    cancelPayment(ctx: RequestContext, paymentId: ID) => Promise<ErrorResultUnion<CancelPaymentResult, Payment>>;\n    createFulfillment(ctx: RequestContext, input: FulfillOrderInput) => Promise<ErrorResultUnion<AddFulfillmentToOrderResult, Fulfillment>>;\n    getOrderFulfillments(ctx: RequestContext, order: Order) => Promise<Fulfillment[]>;\n    getOrderSurcharges(ctx: RequestContext, orderId: ID) => Promise<Surcharge[]>;\n    cancelOrder(ctx: RequestContext, input: CancelOrderInput) => Promise<ErrorResultUnion<CancelOrderResult, Order>>;\n    refundOrder(ctx: RequestContext, input: RefundOrderInput) => Promise<ErrorResultUnion<RefundOrderResult, Refund>>;\n    settleRefund(ctx: RequestContext, input: SettleRefundInput) => Promise<Refund>;\n    addCustomerToOrder(ctx: RequestContext, orderIdOrOrder: ID | Order, customer: Customer) => Promise<Order>;\n    addNoteToOrder(ctx: RequestContext, input: AddNoteToOrderInput) => Promise<Order>;\n    updateOrderNote(ctx: RequestContext, input: UpdateOrderNoteInput) => Promise<HistoryEntry>;\n    deleteOrderNote(ctx: RequestContext, id: ID) => Promise<DeletionResponse>;\n    deleteOrder(ctx: RequestContext, orderOrId: ID | Order) => ;\n    mergeOrders(ctx: RequestContext, user: User, guestOrder?: Order, existingOrder?: Order) => Promise<Order | undefined>;\n    applyPriceAdjustments(ctx: RequestContext, order: Order, updatedOrderLines?: OrderLine[], relations?: RelationPaths<Order>) => Promise<Order>;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Global Styles Configuration\nDESCRIPTION: Configuration to apply custom global styles to the Admin UI using the UI devkit compiler.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/admin-ui-theming-branding/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport { AdminUiPlugin } from '@vendure/admin-ui-plugin';\nimport { VendureConfig } from '@vendure/core';\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AdminUiPlugin.init({\n            app: compileUiExtensions({\n                outputPath: path.join(__dirname, '../admin-ui'),\n                extensions: [{\n                    globalStyles: path.join(__dirname, 'my-theme.scss')\n                }],\n            }),\n        }),\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Operation Example\nDESCRIPTION: Shows a complete query operation with its JSON response\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  customers {\n    id\n    name\n    email\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"customers\": [\n        {\n            \"id\": \"1\",\n            \"name\": \"John Smith\",\n            \"email\": \"j.smith@email.com\"\n        },\n        {\n            \"id\": \"2\",\n            \"name\": \"Jane Doe\",\n            \"email\": \"j.doe@email.com\"\n        }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Order Note in Vendure (TypeScript)\nDESCRIPTION: Updates an existing order note. It takes a RequestContext and UpdateOrderNoteInput as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/order-service.md#2025-04-22_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nupdateOrderNote(ctx: RequestContext, input: UpdateOrderNoteInput): Promise<HistoryEntry>\n```\n\n----------------------------------------\n\nTITLE: Defining NegativeQuantityError Type in GraphQL\nDESCRIPTION: Represents an error returned when attempting to set a negative OrderLine quantity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_64\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype NegativeQuantityError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackoffOptions Interface in TypeScript\nDESCRIPTION: This interface defines the configuration options for the backoff function when retrying failed jobs. It specifies the type of backoff (exponential or fixed) and the delay between retries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqplugin-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BackoffOptions {\n    type: 'exponential' | 'fixed';\n    delay: number;\n}\n```\n\n----------------------------------------\n\nTITLE: MoneyStrategy Interface Definition\nDESCRIPTION: TypeScript interface definition for the MoneyStrategy, showing required properties and methods that must be implemented.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/money-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MoneyStrategy extends InjectableStrategy {\n    readonly moneyColumnOptions: ColumnOptions;\n    readonly precision?: number;\n    round(value: number, quantity?: number): number;\n}\n```\n\n----------------------------------------\n\nTITLE: Card Component Function Signature\nDESCRIPTION: The function signature of the Card component, showing it accepts children and optional title and paddingX properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/card.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Card(props: PropsWithChildren<{ title?: string; paddingX?: boolean }>): void\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: This code snippet imports custom React components used for rendering the Vendure documentation. It includes components for displaying member information, generation details, member descriptions, and a document card list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/dashboard-widgets/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: PluginConfigurationFn Type Definition in TypeScript\nDESCRIPTION: The PluginConfigurationFn type defines a function that can modify the VendureConfig object before server bootstrap. It takes a RuntimeVendureConfig and returns a modified RuntimeVendureConfig or a Promise that resolves to one.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/vendure-plugin-metadata.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype PluginConfigurationFn = (\n    config: RuntimeVendureConfig,\n) => RuntimeVendureConfig | Promise<RuntimeVendureConfig>\n```\n\n----------------------------------------\n\nTITLE: NestJS Middleware Implementation\nDESCRIPTION: Example of implementing NestJS middleware with dependency injection in Vendure config.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig, ConfigService } from '@vendure/core';\nimport { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nclass MyNestMiddleware implements NestMiddleware {\n    constructor(private configService: ConfigService) {}\n\n    use(req: Request, res: Response, next: NextFunction) {\n        console.log(`NestJS middleware: current port is ${this.configService.apiOptions.port}`);\n        next();\n    }\n}\n\nexport const config: VendureConfig = {\n    // ...\n    apiOptions: {\n        middleware: [\n            {\n                route: 'admin-api',\n                handler: MyNestMiddleware,\n            }\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Dev Server with Database Selection - Bash\nDESCRIPTION: This Bash example changes the directory to the dev-server package and runs the development server, optionally specifying the database type through the DB environment variable (mysql, postgres, or sqlite). Requires Node.js, npm, and relevant Vendure dependencies. DB dictates which database settings are used; if unset, mysql is the default.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/dev-server\n\n[DB=mysql|postgres|sqlite] npm run dev\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EmailPlugin Dev Mode with File Output in TypeScript\nDESCRIPTION: Configures EmailPlugin's development mode so that emails are not sent but written as HTML files to disk and previewed via a local web mailbox. Requires DevMode to be 'true', outputPath for HTML storage, and route for mailbox. Inputs: output path and handler/loader setup; output: rendered HTML email files. Limitation: Only for development, not suitable for production email sending.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nEmailPlugin.init({\n  devMode: true,\n  route: 'mailbox',\n  handler: defaultEmailHandlers,\n  templateLoader: new FileBasedTemplateLoader(path.join(__dirname, '../static/email/templates')),\n  outputPath: path.join(__dirname, 'test-emails'),\n})\n```\n\n----------------------------------------\n\nTITLE: ConfigurableOperationDefOptions Args Example\nDESCRIPTION: Example showing how to specify provider-specific arguments in the args property, demonstrating configuration of an API key parameter.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/configurable-operation-def-options.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nargs: {\n  apiKey: { type: 'string' },\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Extension for Avatar Upload\nDESCRIPTION: GraphQL schema extension defining the setCustomerAvatar mutation\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/uploading-files/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\n\nexport const shopApiExtensions = gql`\nextend type Mutation {\n  setCustomerAvatar(file: Upload!): Asset\n}`\n```\n\n----------------------------------------\n\nTITLE: Defining OrderModificationError Type in GraphQL\nDESCRIPTION: The OrderModificationError type is used to represent an error condition where an attempt is made to modify an order that is not in the 'AddingItems' state. It includes an errorCode and a message field, both required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_73\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type OrderModificationError {\\n  errorCode: ErrorCode!\\n  message: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Components in JSX\nDESCRIPTION: This code snippet imports several React components from the Vendure documentation system and renders a DocCardList component. These components are used to display member information, generation metadata, member descriptions, and a card list of related documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionList GraphQL Object Type\nDESCRIPTION: Defines the PromotionList object type, which represents a paginated list of Promotion objects. It includes fields for the list of items and the total count of items.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_145\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype PromotionList {\n  items: [Promotion!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Order Code Query Variables for GraphQL\nDESCRIPTION: JSON variables that accompany the orderByCode GraphQL query, providing the order code to be looked up. This example shows the format of the code parameter needed to identify a specific order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/checkout-flow/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"PJGY46GCB1EDU9YH\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom ActionBar Item in Vendure Admin UI - TypeScript\nDESCRIPTION: Demonstrates how to use the addActionBarItem function to inject a custom button (e.g., 'Print Invoice') into the Vendure Admin UI ActionBar. Dependencies include the @vendure/admin-ui package and the item configuration object should specify id, label, locationId, and routerLink. Input is an ActionBarItem config object; output is an updated ActionBar in the specified UI location. Requires correct locationId, obtainable via 'ctrl + u' in dev mode.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/add-action-bar-item.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default [\n    addActionBarItem({\n        id: 'print-invoice',\n        label: 'Print Invoice',\n        locationId: 'order-detail',\n        routerLink: ['/extensions/invoicing'],\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing UiDevkitClient Integration\nDESCRIPTION: HTML example showing how to include and use the UiDevkitClient for GraphQL operations and notifications.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/using-other-frameworks/index.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- src/ui-extension/plain-js-app/index.html -->\n<head>\n  <script src=\"../devkit/ui-devkit.js\"></script>\n</head>\n<script>\n  const disableProduct = id => {\n    VendureUiClient.graphQlMutation(`\n      mutation DisableProduct($id: ID!) {\n        updateProduct(input: { id: $id, enabled: false }) {\n          id\n          enabled\n        }\n      }`, { id }).then(result => {\n       VendureUiClient.notify({\n         message: 'Updated Product',\n       });\n    })\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining CustomerGroupEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a CustomerGroup is added, updated or deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomerGroupEvent extends VendureEntityEvent<CustomerGroup, CustomerGroupInputTypes> {\n    constructor(ctx: RequestContext, entity: CustomerGroup, type: 'created' | 'updated' | 'deleted', input?: CustomerGroupInputTypes)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentStateTransitionError GraphQL Type\nDESCRIPTION: GraphQL schema definition for an error type that occurs when there is an error transitioning a payment from one state to another.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_131\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when there is an error in transitioning the Payment state\n\"\"\"\ntype PaymentStateTransitionError {\n  errorCode: ErrorCode!\n  message: String!\n  transitionError: String!\n  fromState: String!\n  toState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateChannelResult Union in GraphQL\nDESCRIPTION: Defines the `CreateChannelResult` GraphQL union type for the Vendure Admin API. It represents the result of creating a new channel, which can either be the newly created `Channel` object or a `LanguageNotAvailableError` if an invalid language code was specified.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_40\n\nLANGUAGE: graphql\nCODE:\n```\nunion CreateChannelResult =\nChannel | LanguageNotAvailableError\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server with configurable database selection.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/dev-server\n[DB=mysql|postgres|sqlite] npm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateZoneInput GraphQL Input Type\nDESCRIPTION: GraphQL input type for updating a zone entity. Requires an ID and accepts optional fields for name and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_204\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateZoneInput {\n  id: ID!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List - React - JavaScript\nDESCRIPTION: This snippet renders the DocCardList React component as a standalone element, which displays a listing of documentation cards. It assumes that DocCardList has been imported correctly, and there are no parameters or props specified in this instance. The primary output is a dynamically generated documentation navigation list based on the default Docusaurus component behavior.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining LocaleTextCustomFieldConfig Type in GraphQL\nDESCRIPTION: Specifies the structure for locale-specific text custom field configuration. Similar to LocaleStringCustomFieldConfig but without the length and pattern properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_58\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype LocaleTextCustomFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  readonly: Boolean\n  internal: Boolean\n  nullable: Boolean\n  requiresPermission: [Permission!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Draft Order Billing Address Mutation in GraphQL\nDESCRIPTION: Defines a GraphQL mutation to set the billing address for a draft Order. Takes an order ID and address input data, returning the updated Order object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_93\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  setDraftOrderBillingAddress(orderId: ID!, input: CreateAddressInput!): Order!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MigrationV2Plugin in VendureConfig\nDESCRIPTION: Configuration code showing how to add the MigrationV2Plugin to the Vendure plugins array. This plugin temporarily removes NOT NULL constraints from certain columns to facilitate the migration process.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/database-migration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MigrationV2Plugin } from '@vendure/migrate-v2';\n\n//...\nconst config: VendureConfig = {\n  //...\n  plugins: [\n    MigrationV2Plugin,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetTemplateVarsFn Type in TypeScript\nDESCRIPTION: Defines a function type for setting template variables in email templates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype SetTemplateVarsFn<Event> = (\n    event: Event,\n    globals: { [key: string]: any },\n) => { [key: string]: any }\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in React/JSX\nDESCRIPTION: Imports various React components used for rendering documentation, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList which displays a list of documentation cards.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/worker/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Querying eligible shipping methods in GraphQL\nDESCRIPTION: This query fetches eligible shipping methods based on the current active order. It returns a list of ShippingMethodQuote objects, detailing the shipping options available. Useful in selecting a shipping method during checkout.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns a list of eligible shipping methods based on the current active Order\n\"\"\"\ntype Query {\n    eligibleShippingMethods: [ShippingMethodQuote!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntityHydrator in a Service\nDESCRIPTION: Example of using EntityHydrator in a custom service to hydrate a Product entity with its facetValues and facets.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/entity-hydrator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { ID, RequestContext, EntityHydrator, ProductVariantService } from '@vendure/core';\n\n@Injectable()\nexport class MyService {\n\n  constructor(\n     private entityHydrator: EntityHydrator,\n     private productVariantService: ProductVariantService,\n  ) {}\n\n  myMethod(ctx: RequestContext, variantId: ID) {\n    const product = await this.productVariantService\n      .getProductForVariant(ctx, variantId);\n\n    await this.entityHydrator\n      .hydrate(ctx, product, { relations: ['facetValues.facet' ]});\n\n    // You can be sure now that the `facetValues` & `facetValues.facet` relations are populated\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure Stellate Plugin with npm - Bash\nDESCRIPTION: Demonstrates installation of the @vendure/stellate-plugin using npm. Required as a setup step before using the Stellate plugin with a Vendure project. The command should be executed in an environment where npm and Node.js are already installed. This snippet has no inputs or outputs and is meant to be run in a terminal or command prompt.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/stellate-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vendure/stellate-plugin\n```\n\n----------------------------------------\n\nTITLE: Deleting Provinces with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a province. Requires the ID of the province to delete and returns a DeletionResponse object with information about the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_58\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a Province\n\"\"\"\ntype Mutation {\n  deleteProvince(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BackoffStrategy Type in TypeScript\nDESCRIPTION: Defines a function type for determining retry delay timing for failed jobs. Takes queue name, number of attempts, and job object as parameters and returns delay in milliseconds.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype BackoffStrategy = (queueName: string, attemptsMade: number, job: Job) => number\n```\n\n----------------------------------------\n\nTITLE: Preventing max integer error in job duration\nDESCRIPTION: This commit prevents a maximum integer error that could occur when calculating job durations in the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n* **core** Prevent max integer error in job duration ([305727e](https://github.com/vendure-ecommerce/vendure/commit/305727e)), closes [#755](https://github.com/vendure-ecommerce/vendure/issues/755)\n```\n\n----------------------------------------\n\nTITLE: Changing Column Data Type with EntityMetadataModifier\nDESCRIPTION: Example demonstrating how to modify the data type of a column using EntityMetadataModifier, specifically changing the ProductTranslation description column to use 'mediumtext' instead of the default 'text'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-options.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column } from 'typeorm';\nimport { EntityMetadataModifier, ProductTranslation } from '@vendure/core';\n\n// Use the \"mediumtext\" datatype for the Product's description rather than\n// the default \"text\" type.\nexport const makeProductDescriptionMediumText: EntityMetadataModifier = metadata => {\n    const descriptionColumnIndex = metadata.columns.findIndex(\n        col => col.propertyName === 'description' && col.target === ProductTranslation,\n    );\n    if (-1 < descriptionColumnIndex) {\n        // First we need to remove the existing column definition\n        // from the metadata.\n        metadata.columns.splice(descriptionColumnIndex, 1);\n        // Then we add a new column definition with our custom\n        // data type \"mediumtext\"\n        // DANGER: this particular modification will generate a DB migration\n        // which will result in data loss of existing descriptions. Make sure\n        // to manually check & modify your migration scripts.\n        const instance = new ProductTranslation();\n        Column({ type: 'mediumtext' })(instance, 'description');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Updating FacetValueChecker Instantiation in TypeScript\nDESCRIPTION: This diff shows how to update the instantiation of FacetValueChecker to use dependency injection for improved performance due to new caching techniques.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- facetValueChecker = new FacetValueChecker(injector.get(TransactionalConnection));\n+ facetValueChecker = injector.get(FacetValueChecker);\n```\n\n----------------------------------------\n\nTITLE: Updating Lazy-Loaded Extension Modules with Route Property in TypeScript\nDESCRIPTION: Diff showing the required changes for lazy-loaded extension modules. A new 'route' property must be specified in the ngModules configuration to enable individual lazy-loading of extensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ReviewsPlugin {\n    static uiExtensions: AdminUiExtension = {\n        extensionPath: path.join(__dirname, 'ui'),\n        id: 'reviews-plugin',\n        ngModules: [{\n            type: 'lazy',\n+           route: 'product-reviews',\n            ngModuleFileName: 'reviews-ui-lazy.module.ts',\n            ngModuleName: 'ReviewsUiLazyModule',\n        }],\n    };\n}\n\n// in the route config of the lazy-loaded module\n{\n-   path: 'product-reviews',\n+   path: '',\n+   pathMatch: 'full',\n    component: AllProductReviewsListComponent,\n},\n```\n\n----------------------------------------\n\nTITLE: LocaleRegionNamePipe Class Definition in TypeScript\nDESCRIPTION: Defines the LocaleRegionNamePipe class, which extends LocaleBasePipe and implements PipeTransform. It includes a constructor and a transform method for converting region codes to human-readable names.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-region-name-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LocaleRegionNamePipe extends LocaleBasePipe implements PipeTransform {\n    constructor(dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)\n    transform(value: any, locale?: unknown) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Tax Documentation in Markdown\nDESCRIPTION: This snippet imports various custom React components used for rendering the tax documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/tax/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate GraphQL Object Type\nDESCRIPTION: Defines the Coordinate type, which represents a point in 2D space with x and y coordinates.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_33\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Coordinate {\n  x: Float!\n  y: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RedisCachePluginInitOptions Interface in TypeScript\nDESCRIPTION: Interface definition for the configuration options of RedisCachePlugin. It includes options for maximum item size, namespace for Redis keys, and Redis client configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/redis-cache-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RedisCachePluginInitOptions {\n    maxItemSizeInBytes?: number;\n    namespace?: string;\n    redisOptions?: import('ioredis').RedisOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: OrderEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle order-related events. Triggered when an Order is added, updated or deleted.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderEvent extends VendureEvent {\n    constructor(ctx: RequestContext, order: Order, type: 'created' | 'updated' | 'deleted')\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sass Variables Override\nDESCRIPTION: SCSS file demonstrating how to override Clarity UI framework variables for customizing the header height.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/admin-ui-theming-branding/index.md#2025-04-22_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n$clr-header-height: 4rem;\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in TypeScript/JSX\nDESCRIPTION: This code snippet imports various custom components used for rendering documentation, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/index.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Defining EntityRelationPaths Type in TypeScript\nDESCRIPTION: This code snippet defines the EntityRelationPaths type, which creates a string union of all relations of a given entity. It supports custom fields and up to two levels of nested relations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/entity-relation-paths.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EntityRelationPaths<T extends VendureEntity> = | `customFields.${string}`\n    | PathsToStringProps1<T>\n    | Join<PathsToStringProps2<T>, '.'>\n    | TripleDotPath\n```\n\n----------------------------------------\n\nTITLE: Registering Entity in Vendure Plugin\nDESCRIPTION: Shows how to register the ProductReview entity in a Vendure plugin by adding it to the entities array in the plugin metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/database-entity/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendurePlugin } from '@vendure/core';\nimport { ProductReview } from './entities/product-review.entity';\n\n@VendurePlugin({\n    entities: [ProductReview],\n})\nexport class ReviewsPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Installing HardenPlugin for Vendure\nDESCRIPTION: Command line instructions for installing the HardenPlugin security enhancement package.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/security/index.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/harden-plugin\n\n# or\n\nyarn add @vendure/harden-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure Harden Plugin via npm\nDESCRIPTION: This shell command uses the Node Package Manager (npm) to download and install the `@vendure/harden-plugin` package. This plugin is designed to be integrated into a Vendure e-commerce project to enhance the security of its GraphQL APIs. Executing this command requires Node.js and npm to be installed in the development environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/harden-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @vendure/harden-plugin\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Orders\nDESCRIPTION: This GraphQL query demonstrates a typical structure that the Relations decorator would analyze to determine the necessary relations to include in the database query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/relations-decorator.md#2025-04-22_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n{\n  orders(options: { take: 10 }) {\n    items {\n      id\n      customer {\n        id\n        firstName\n        lastName\n      }\n      totalQuantity\n      totalWithTax\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRoleInput in GraphQL\nDESCRIPTION: This input type is used for creating a new role. It includes fields for code, description, permissions, and channel IDs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_61\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateRoleInput {\n  code: String!\n  description: String!\n  permissions: [Permission!]!\n  channelIds: [ID!]\n}\n```\n\n----------------------------------------\n\nTITLE: Global NestJS Middleware Plugin\nDESCRIPTION: Configuration of global NestJS middleware components through a Vendure plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendurePlugin } from '@vendure/core';\nimport { APP_GUARD, APP_FILTER, APP_INTERCEPTOR  } from '@nestjs/core';\n\n@VendurePlugin({\n    // ...\n    providers: [\n        {\n            provide: APP_GUARD,\n            useClass: MyCustomGuard,\n        },\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: MyCustomInterceptor,\n        },\n        {\n            provide: APP_FILTER,\n            useClass: MyCustomExceptionFilter,\n        },\n    ],\n})\nexport class MyPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation\nDESCRIPTION: Imports various React components used to structure the documentation page for custom history entry components in Vendure, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-history-entry-components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining DateListOperators Input Type in GraphQL\nDESCRIPTION: Specifies operators for filtering on a list of Date fields. Currently only supports the 'inList' operator for matching dates within a specified list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_75\n\nLANGUAGE: graphql\nCODE:\n```\ninput DateListOperators {\n  inList: DateTime!\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component in Vendure Documentation\nDESCRIPTION: Imports and implements the DocCardList component which displays a list of documentation cards for available Vendure components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: StellatePlugin Class Signature\nDESCRIPTION: This TypeScript snippet shows the class signature for `StellatePlugin`. It indicates that the class implements the `OnApplicationBootstrap` interface from NestJS/Vendure, meaning it has an `onApplicationBootstrap` lifecycle hook. It also shows a static `options` property, the `init` static method for configuration, and the constructor signature with its dependencies (`StellatePluginOptions`, `EventBus`, `StellateService`, `ModuleRef`).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass StellatePlugin implements OnApplicationBootstrap {\n    static options: StellatePluginOptions;\n    init(options: StellatePluginOptions) => ;\n    constructor(options: StellatePluginOptions, eventBus: EventBus, stellateService: StellateService, moduleRef: ModuleRef)\n    onApplicationBootstrap() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Vendure Testing\nDESCRIPTION: Configuration file for Vitest that enables decorator support and sets up proper TypeScript compilation options for e2e tests.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/testing/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport swc from 'unplugin-swc';\nimport { defineConfig } from 'vitest/config';\n\nexport default defineConfig({\n    test: {\n        include: ['**/*.e2e-spec.ts'],\n        typecheck: {\n            tsconfig: path.join(__dirname, 'tsconfig.e2e.json'),\n        },\n    },\n    plugins: [\n        swc.vite({\n            jsc: {\n                transform: {\n                    useDefineForClassFields: false,\n                },\n            },\n        }),\n    ],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntry GraphQL Type\nDESCRIPTION: Defines the HistoryEntry type for tracking historical events in the system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_44\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype HistoryEntry {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  type: HistoryEntryType!\n  data: JSON!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Custom Fields with Eager Loading\nDESCRIPTION: Example showing how to configure a 'relation' custom field with eager loading enabled, which automatically loads the related entities when the parent entity is queried.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Product } from '\\@vendure/core';\n\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'relatedProducts',\n                list: true,\n                type: 'relation',\n                entity: Product,\n                // highlight-next-line\n                eager: true,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating StructFormInputComponent in TypeScript\nDESCRIPTION: Defines a component for structured form inputs. It implements FormInputComponent, OnInit, and OnDestroy interfaces, and is used for complex data structures.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass StructFormInputComponent implements FormInputComponent, OnInit, OnDestroy {\n    static readonly id: DefaultFormComponentId = 'struct-form-input';\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: DefaultFormComponentConfig<'struct-form-input'>;\n    uiLanguage$: Observable<LanguageCode>;\n    protected structFormGroup = new FormGroup({});\n    protected fields: Array<{\n        def: StructCustomFieldFragment['fields'][number];\n        formControl: FormControl;\n    }>;\n    constructor(dataService: DataService)\n    ngOnInit() => ;\n    ngOnDestroy() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Card List Component - React - JavaScript\nDESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme. It is a dependency required to render a list of documentation cards as a component within the documentation index. No parameters are provided, and the import allows for DocCardList to be used as a JSX element elsewhere in the file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Defining FulfillmentStates Interface in TypeScript\nDESCRIPTION: An empty interface that serves as an extension point for the standard FulfillmentState. This interface allows developers to customize and extend fulfillment states within the Vendure e-commerce framework.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/fulfillment-states.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FulfillmentStates {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel - CreateChannelInput Input - GraphQL\nDESCRIPTION: CreateChannelInput defines fields for constructing a new sales channel in Vendure. It includes parameters for language and currency codes, inventory tracking, and zone associations, plus general configuration such as code, token, and feature toggles. All required fields must follow their type constraints, and IDs for zones and sellers should correspond to entities already present in the database.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_42\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateChannelInput {\n  code: String!\n  token: String!\n  defaultLanguageCode: LanguageCode!\n  availableLanguageCodes: [LanguageCode!]\n  pricesIncludeTax: Boolean!\n  currencyCode: CurrencyCode\n  defaultCurrencyCode: CurrencyCode\n  availableCurrencyCodes: [CurrencyCode!]\n  trackInventory: Boolean\n  outOfStockThreshold: Int\n  defaultTaxZoneId: ID!\n  defaultShippingZoneId: ID!\n  sellerId: ID\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: MolliePluginOptions Interface Definition (TypeScript)\nDESCRIPTION: Defines the `MolliePluginOptions` interface used to configure the Mollie Plugin via the `init` method. It includes the required `vendureHost` string for webhooks and an optional `enabledPaymentMethodsParams` function (since v2.2.0) to customize parameters sent to the Mollie API when fetching enabled payment methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/mollie-plugin.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"Signature\"\ninterface MolliePluginOptions {\n    vendureHost: string;\n    enabledPaymentMethodsParams?: (\n        injector: Injector,\n        ctx: RequestContext,\n        order: Order | null,\n    ) => AdditionalEnabledPaymentMethodsParams | Promise<AdditionalEnabledPaymentMethodsParams>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Populating Test Data\nDESCRIPTION: Command to populate the development server with test data, supporting multiple database types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/dev-server\n[DB=mysql|postgres|sqlite] npm run populate\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Database Containers\nDESCRIPTION: Commands to start the required Docker containers for database services using docker-compose.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d mariadb\ndocker-compose up -d elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet renders the DocCardList component, which is likely used to display a list of documentation cards related to the Plugin interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/index.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining CreateFacetValueInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a facet value. It requires the parent facet ID, a code, and translations for the value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_49\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateFacetValueInput {\n  facetId: ID!\n  code: String!\n  translations: [FacetValueTranslationInput!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: CreateErrorResultGuard Function Signature\nDESCRIPTION: Type signature for the createErrorResultGuard function that takes a generic type T and returns an ErrorResultGuard<T>. The function accepts a test function that determines if the input represents a success or error case.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/create-error-result-guard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createErrorResultGuard<T>(testFn: (input: T) => boolean): ErrorResultGuard<T>\n```\n\n----------------------------------------\n\nTITLE: Installing UI Development Kit Dependencies\nDESCRIPTION: Commands to install the @vendure/ui-devkit package which contains the compiler and Angular dependencies needed for UI extensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/using-other-frameworks/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vendure/ui-devkit\n\n# or\n\nnpm install @vendure/ui-devkit\n```\n\n----------------------------------------\n\nTITLE: Worker Health Check Response\nDESCRIPTION: Example JSON response from the worker health check endpoint.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/using-docker.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ShippingCalculator Return Object in TypeScript\nDESCRIPTION: Demonstrates the changes to the return object of the ShippingCalculator class, replacing 'priceWithTax' with 'taxRate' and 'priceIncludesTax'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nreturn {\n  price: 500,\n  priceWithTax: 600,\n};\n\n// after\nreturn {\n  price: 500,\n  taxRate: 20,\n  priceIncludesTax: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing Locale Detection Regex in Admin UI\nDESCRIPTION: Fix for incorrect locale detection regular expression pattern in the admin UI component.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nf336d7f\n```\n\n----------------------------------------\n\nTITLE: Defining Superadmin Credentials Structure in Vendure TypeScript\nDESCRIPTION: Declares the SuperadminCredentials interface in TypeScript, which contains identifier and password properties, both strings, used to bootstrap the superadmin user in Vendure. Requires no external dependencies but expects integration with the Vendure core configuration system. Inputs are strings for each property, with both defaulting to 'superadmin', and outputs are used internally by Vendure to create the administrative account upon first startup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/superadmin-credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SuperadminCredentials {\n    identifier: string;\n    password: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: This code snippet imports custom React components used for rendering Vendure documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/routes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: EntityDuplicator Class Signature\nDESCRIPTION: TypeScript class definition for EntityDuplicator, showing the constructor and duplicate method signatures. It extends ConfigurableOperationDef and provides methods for entity duplication.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-duplicator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass EntityDuplicator<T extends ConfigArgs = ConfigArgs> extends ConfigurableOperationDef<T> {\n    constructor(config: EntityDuplicatorConfig<T>)\n    duplicate(input: {\n        ctx: RequestContext;\n        entityName: string;\n        id: ID;\n        args: ConfigArg[];\n    }) => Promise<VendureEntity>;\n}\n```\n\n----------------------------------------\n\nTITLE: Function Signature for registerPageTab in Vendure Admin UI (TypeScript)\nDESCRIPTION: This snippet shows the function signature for the registerPageTab function. It takes a single parameter of type PageTabConfig and returns void.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/tabs/register-page-tab.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction registerPageTab(config: PageTabConfig): void\n```\n\n----------------------------------------\n\nTITLE: Job and Product Import Mutations - GraphQL\nDESCRIPTION: GraphQL mutations for flushing buffered jobs and importing products via CSV file upload.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_71\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  flushBufferedJobs(bufferIds: [String!]): Success!\n  importProducts(csvFile: Upload!): ImportInfo\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORMHealthCheckStrategy Class Signature\nDESCRIPTION: The class signature of TypeORMHealthCheckStrategy showing that it implements HealthCheckStrategy interface and contains constructor, init, and getHealthIndicator methods.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/type-ormhealth-check-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass TypeORMHealthCheckStrategy implements HealthCheckStrategy {\n    constructor(options?: TypeORMHealthCheckOptions)\n    init(injector: Injector) => ;\n    getHealthIndicator() => HealthIndicatorFunction;\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Check in TypeScript\nDESCRIPTION: Demonstrates checking the application environment using environment variables\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/production-configuration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst IS_DEV = process.env.APP_ENV === 'dev';\n```\n\n----------------------------------------\n\nTITLE: Defining IdentifierChangeTokenExpiredError in GraphQL\nDESCRIPTION: GraphQL type definition for an error returned when a token used to change a Customer's email address is valid but has expired based on the verificationTokenDuration setting in AuthOptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_47\n\nLANGUAGE: graphql\nCODE:\n```\ntype IdentifierChangeTokenExpiredError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Card List in Vendure Documentation\nDESCRIPTION: This JSX snippet renders a DocCardList component, which is likely used to display a list of related documentation cards or links on the page.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-detail-components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Translation File Directory Structure\nDESCRIPTION: Example directory structure for organizing translation files in a Vendure project.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/adding-ui-translations/index.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/src\n├─ vendure-config.ts\n└─ translations/\n    └─ ms.json\n```\n\n----------------------------------------\n\nTITLE: Defining ManualPaymentStateError GraphQL Type\nDESCRIPTION: Defines the `ManualPaymentStateError` GraphQL type. This error is returned when a call to `addManualPaymentToOrder` is made, but the target Order is not in a state that permits adding a manual payment (e.g., it might already be paid or cancelled). It includes the standard `errorCode` and a descriptive `message`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_97\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when a call to addManualPaymentToOrder is made but the Order\n\nis not in the required state.\n\"\"\"\ntype ManualPaymentStateError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Signature of TestEnvironment Interface in TypeScript\nDESCRIPTION: Defines the TestEnvironment interface, which includes a server and clients for the Shop and Admin API, enabling interaction through GraphQL. It is part of the Vendure testing package '@vendure/testing'. Key properties include 'server' for the TestServer instance, 'adminClient' for the Admin API, and 'shopClient' for the Shop API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/test-environment.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TestEnvironment {\n    server: TestServer;\n    adminClient: SimpleGraphQLClient;\n    shopClient: SimpleGraphQLClient;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure E-commerce Website Dependencies\nDESCRIPTION: This command installs the necessary dependencies for the Vendure e-commerce website project.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MoneyStrategy with Three Decimal Places\nDESCRIPTION: Example showing how to extend DefaultMoneyStrategy to create a custom implementation with three decimal places of precision.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/money-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultMoneyStrategy, VendureConfig } from '@vendure/core';\n\nexport class ThreeDecimalPlacesMoneyStrategy extends DefaultMoneyStrategy {\n  readonly precision = 3;\n}\n\nexport const config: VendureConfig = {\n  // ...\n  entityOptions: {\n    moneyStrategy: new ThreeDecimalPlacesMoneyStrategy(),\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: React Entry Point Setup for Vendure GraphQL Client Application\nDESCRIPTION: The entry point file for a React application that renders the main App component. It sets up StrictMode for better development experience.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/connect-api/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n import * as React from 'react';\n import { StrictMode } from 'react';\n import { createRoot } from 'react-dom/client';\n\n import App from './App';\n\n const rootElement = document.getElementById('root');\n const root = createRoot(rootElement);\n\n root.render(\n     <StrictMode>\n         <App />\n     </StrictMode>\n );\n```\n\n----------------------------------------\n\nTITLE: Implementing DefaultOrderSellerStrategy in TypeScript\nDESCRIPTION: Implements the DefaultOrderSellerStrategy class which treats orders as single-vendor. This class implements the OrderSellerStrategy interface but doesn't provide any specific implementation details in the given snippet.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/orders/order-seller-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultOrderSellerStrategy implements OrderSellerStrategy {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Product priceIncludesTax Field in Vendure GraphQL API\nDESCRIPTION: Indicates the removal of the `Product.priceIncludesTax` field from Vendure's GraphQL API in the v1.0.0 release. Similar to OrderItem, this was removed as redundant because the `price` field on Product consistently represents the price without tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n# Removed field on Product (redundant)\npriceIncludesTax\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Clarification: price is always without tax\nprice\n```\n\n----------------------------------------\n\nTITLE: Defining MetricSummaryEntry GraphQL Object Type\nDESCRIPTION: Defines the MetricSummaryEntry object type with fields for label and value. It represents an individual entry in a metric summary.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_99\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype MetricSummaryEntry {\n  label: String!\n  value: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin UI Extensions After Refactoring in TypeScript\nDESCRIPTION: Example of the new way to configure Admin UI extensions after the refactoring. It uses the compileUiExtensions function from @vendure/ui-devkit/compiler to process extensions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// after\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\n\n// ...\n\nAdminUiPlugin.init({\n    port: 3002,\n    app: compileUiExtensions({\n        // The source files of the admin ui, extended with your extensions,\n        // will be output and compiled from this location\n        outputPath: path.join(__dirname, '../admin-ui'),\n        extensions: [\n            ReviewsPlugin.uiExtensions,\n            RewardsPlugin.uiExtensions,\n        ],\n        watch: true,\n    }),\n}),\n```\n\n----------------------------------------\n\nTITLE: Implementing FacetValueFormInputComponent for Selecting Multiple FacetValues\nDESCRIPTION: Component that allows selection of multiple FacetValues via an autocomplete select input. It's designed for use with 'ID' type list fields that represent FacetValue IDs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/custom-input-components/default-inputs.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass FacetValueFormInputComponent implements FormInputComponent {\n    static readonly id: DefaultFormComponentId = 'facet-value-form-input';\n    readonly isListInput = true;\n    readonly: boolean;\n    formControl: UntypedFormControl;\n    config: InputComponentConfig;\n    valueTransformFn = (values: FacetValueFragment[]) => {\n        const isUsedInConfigArg = this.config.__typename === 'ConfigArgDefinition';\n        if (isUsedInConfigArg) {\n            return JSON.stringify(values.map(s => s.id));\n        } else {\n            return values;\n        }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Using ObjectTreeComponent in HTML Template\nDESCRIPTION: Example of how to use the ObjectTreeComponent in an HTML template to display payment metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/object-tree-component.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<vdr-object-tree [value]=\"payment.metadata\"></vdr-object-tree>\n```\n\n----------------------------------------\n\nTITLE: Extracting Metadata from Braintree Transaction Response in TypeScript\nDESCRIPTION: Example showing the structure of payment metadata extracted from a Braintree transaction response. The metadata includes transaction status, currency, account details, verification checks, and payment method-specific data (either PayPal or credit card information).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/braintree-plugin.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst metadata = {\n  \"status\": \"settling\",\n  \"currencyIsoCode\": \"GBP\",\n  \"merchantAccountId\": \"my_account_id\",\n  \"cvvCheck\": \"Not Applicable\",\n  \"avsPostCodeCheck\": \"Not Applicable\",\n  \"avsStreetAddressCheck\": \"Not Applicable\",\n  \"processorAuthorizationCode\": null,\n  \"processorResponseText\": \"Approved\",\n  // for Paypal payments\n  \"paymentMethod\": \"paypal_account\",\n  \"paypalData\": {\n    \"payerEmail\": \"michael-buyer@paypalsandbox.com\",\n    \"paymentId\": \"PAYID-MLCXYNI74301746XK8807043\",\n    \"authorizationId\": \"3BU93594D85624939\",\n    \"payerStatus\": \"VERIFIED\",\n    \"sellerProtectionStatus\": \"ELIGIBLE\",\n    \"transactionFeeAmount\": \"0.54\"\n  },\n  // for credit card payments\n  \"paymentMethod\": \"credit_card\",\n  \"cardData\": {\n    \"cardType\": \"MasterCard\",\n    \"last4\": \"5454\",\n    \"expirationDate\": \"02/2023\"\n  }\n  // publicly-available metadata that will be\n  // readable from the Shop API\n  \"public\": {\n    \"cardData\": {\n      \"cardType\": \"MasterCard\",\n      \"last4\": \"5454\",\n      \"expirationDate\": \"02/2023\"\n    },\n    \"paypalData\": {\n      \"authorizationId\": \"3BU93594D85624939\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PasswordResetVerifiedEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle verified password resets. Triggered when a password reset is executed with a verified token.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nclass PasswordResetVerifiedEvent extends VendureEvent {\n    constructor(ctx: RequestContext, user: User)\n}\n```\n\n----------------------------------------\n\nTITLE: OrderStateTransitionEvent Class Definition in TypeScript\nDESCRIPTION: Class that extends VendureEvent to handle order state transitions. Triggered when an Order changes from one OrderState to another.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderStateTransitionEvent extends VendureEvent {\n    constructor(fromState: OrderState, toState: OrderState, ctx: RequestContext, order: Order)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Client Preset Plugin\nDESCRIPTION: Command to install the client preset plugin for Admin UI extensions\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/codegen/index.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @graphql-codegen/client-preset\n```\n\n----------------------------------------\n\nTITLE: Importing and Using DocCardList Component for Documentation Navigation\nDESCRIPTION: Imports the DocCardList component from the Docusaurus theme and uses it to render a list of documentation cards for navigation purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/alerts/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Rendering Directive Documentation Card List\nDESCRIPTION: Uses the DocCardList component to display a list of directive documentation cards in the Vendure documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/directives/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining EntityDuplicatorService Class in TypeScript\nDESCRIPTION: This code snippet defines the EntityDuplicatorService class with its constructor and two methods: getEntityDuplicators and duplicateEntity. It is used for duplicating entities in the Vendure e-commerce platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/entity-duplicator-service.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EntityDuplicatorService {\n    constructor(configService: ConfigService, configArgService: ConfigArgService, connection: TransactionalConnection)\n    getEntityDuplicators(ctx: RequestContext) => EntityDuplicatorDefinition[];\n    duplicateEntity(ctx: RequestContext, input: DuplicateEntityInput) => Promise<DuplicateEntityResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntityRelationPaths with Product Entity in TypeScript\nDESCRIPTION: This example demonstrates how to use the EntityRelationPaths type with the Product entity. It creates a type T1 that represents a string union of all relations of the Product entity, including nested relations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/entity-relation-paths.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype T1 = EntityRelationPaths<Product>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Lite Vendure Template\nDESCRIPTION: Simplified template configuration for Vendure deployment suitable for testing and free tier usage. Runs server and worker in a single process with local disk storage.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-northflank/index.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"apiVersion\": \"v1.2\",\n  \"spec\": {\n    \"kind\": \"Workflow\",\n    \"spec\": {\n      \"type\": \"sequential\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpHealthCheckStrategy in Vendure's SystemOptions\nDESCRIPTION: Example showing how to configure the HttpHealthCheckStrategy along with TypeORMHealthCheckStrategy in the systemOptions.healthChecks array of a Vendure configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/http-health-check-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpHealthCheckStrategy, TypeORMHealthCheckStrategy } from '@vendure/core';\n\nexport const config = {\n  // ...\n  systemOptions: {\n    healthChecks: [\n      new TypeORMHealthCheckStrategy(),\n      new HttpHealthCheckStrategy({ key: 'my-service', url: 'https://my-service.com' }),\n    ]\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurableOperation GraphQL Object Type\nDESCRIPTION: Defines the ConfigurableOperation type, which represents an operation with a code and a list of configuration arguments.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_31\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ConfigurableOperation {\n  code: String!\n  args: [ConfigArg!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Multiple PM2 Instances for Horizontal Scaling\nDESCRIPTION: Command to start multiple instances of a Vendure application using PM2 process manager in cluster mode. This creates 4 instances of the application to distribute load.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/horizontal-scaling.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npm2 start ./dist/index.js -i 4\n```\n\n----------------------------------------\n\nTITLE: Fixing Error Messages with Colon Character in Core\nDESCRIPTION: Addresses an issue where error messages containing a colon character were not handled correctly in the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v2.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"**core** Fix error messages containing colon char ([2cfc874](https://github.com/vendure-ecommerce/vendure/commit/2cfc874)), closes [#2153](https://github.com/vendure-ecommerce/vendure/issues/2153)\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Redis and Redis Commander\nDESCRIPTION: This YAML configuration sets up a local Redis instance and Redis Commander for development purposes. It exposes Redis on port 6379 and Redis Commander's web UI on port 8085.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/job-queue-plugin/bull-mqjob-queue-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\nservices:\n  redis:\n    image: bitnami/redis:6.2\n    hostname: redis\n    container_name: redis\n    environment:\n      - ALLOW_EMPTY_PASSWORD=yes\n    ports:\n      - \"6379:6379\"\n  redis-commander:\n    container_name: redis-commander\n    hostname: redis-commander\n    image: rediscommander/redis-commander:latest\n    environment:\n      - REDIS_HOSTS=local:redis:6379\n    ports:\n      - \"8085:8081\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: Imports React components used for displaying member information, generation details, and descriptions in the Vendure documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/directives/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Version Header in Markdown\nDESCRIPTION: Version number and date stamp for a release version of Vendure\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_NEXT.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.1.0-next.7 (2023-09-29)\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vendure Documentation\nDESCRIPTION: This snippet imports custom React components used for rendering the Vendure documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Setting String, Object, and Array Breadcrumbs in Angular Route Definition - TypeScript\nDESCRIPTION: This snippet shows three approaches to defining breadcrumbs in Angular Vendure admin routes: as a string, as a single object (label/link), and as an array of label/link pairs. This enables custom breadcrumb navigation structures for different routes. Dependencies: @vendure/admin-ui/core. Key parameters: path, title, breadcrumb (accepting different types). Inputs define the navigation hierarchy; outputs are tailored breadcrumb trails in the UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\\nimport { TestComponent } from './components/test/test.component';\\n\\nexport default [\\n    registerRouteComponent({\\n        component: TestComponent,\\n        path: 'test-1',\\n        title: 'Test 1',\\n        // highlight-start\\n        breadcrumb: { label: 'Test', link: '/extensions/test' },\\n        // highlight-end\\n    }),\\n    registerRouteComponent({\\n        component: TestComponent,\\n        path: 'test-2',\\n        title: 'Test 2',\\n        // highlight-start\\n        breadcrumb: [\\n            { label: 'Parent', link: '/extensions/test' },\\n            { label: 'Child', link: '/extensions/test/test-2' },\\n        ],\\n        // highlight-end\\n    }),\\n];\n```\n\n----------------------------------------\n\nTITLE: Defining RefundTransitionData Interface in TypeScript\nDESCRIPTION: Interface definition for RefundTransitionData that contains the context, order, and refund information needed for processing refund state transitions in the Vendure platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/refund-transition-data.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RefundTransitionData {\n    ctx: RequestContext;\n    order: Order;\n    refund: Refund;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shipping Method by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a Shipping Method by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_38\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  shippingMethod(id: ID!): ShippingMethod\n}\n```\n\n----------------------------------------\n\nTITLE: ElasticsearchPlugin Class Definition\nDESCRIPTION: TypeScript class definition showing the plugin structure and initialization method signature.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass ElasticsearchPlugin implements OnApplicationBootstrap {\n    init(options: ElasticsearchOptions) => Type<ElasticsearchPlugin>;\n}\n```\n\n----------------------------------------\n\nTITLE: ErrorResult Interface in GraphQL Schema\nDESCRIPTION: Definition of the ErrorResult interface in the GraphQL schema. All error results implement this interface with errorCode and message fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ninterface ErrorResult {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocaleCurrencyNamePipe in HTML Templates\nDESCRIPTION: Example showing how to use the LocaleCurrencyNamePipe in an HTML template to display a formatted currency name for an order's currency code.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-currency-name-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ order.currencyCode | localeCurrencyName }}\n```\n\n----------------------------------------\n\nTITLE: Testing Package Changes Locally\nDESCRIPTION: Commands for testing local package changes by watching for changes and running the dev server.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\ncd packages/payments-plugin\nnpm run watch\n\n# Terminal 2\ncd packages/dev-server\nDB=sqlite npm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordAlreadySetError Type in GraphQL\nDESCRIPTION: The PasswordAlreadySetError type is used when a password verification is attempted on an account that already has a password set. It contains errorCode and message fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_77\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"type PasswordAlreadySetError {\\n  errorCode: ErrorCode!\\n  message: String!\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateProductVariantOptionInput in GraphQL\nDESCRIPTION: This input type is used for creating a new product variant option. It includes fields for option group ID, code, and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_57\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateProductVariantOptionInput {\n  optionGroupId: ID!\n  code: String!\n  translations: [ProductOptionTranslationInput!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in Vendure Documentation\nDESCRIPTION: This snippet renders the DocCardList component, which is likely used to display a list of documentation cards or sections related to List Detail Views in the Vendure project.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorFilterParameter in GraphQL\nDESCRIPTION: Defines the parameters for filtering a list of Administrators. Allows filtering by `id`, `createdAt`, `updatedAt`, `firstName`, `lastName`, and `emailAddress` using corresponding operator types (e.g., `IDOperators`, `DateOperators`, `StringOperators`). Supports combining filters with logical `_and` and `_or` conditions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ninput AdministratorFilterParameter {\n  id: IDOperators\n  createdAt: DateOperators\n  updatedAt: DateOperators\n  firstName: StringOperators\n  lastName: StringOperators\n  emailAddress: StringOperators\n  _and: [AdministratorFilterParameter!]\n  _or: [AdministratorFilterParameter!]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sharp for macOS 10.13+ Support in Asset Server Plugin\nDESCRIPTION: Updates the Sharp library in the asset-server-plugin to fix support for macOS 10.13 and later versions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v2.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"**asset-server-plugin** Update Sharp to fix macOS 10.13+ support ([043c7ff](https://github.com/vendure-ecommerce/vendure/commit/043c7ff))\"\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.5.0\nDESCRIPTION: Documentation of bug fixes and feature updates in version 1.5.0 release, including core exports, promotion conditions, and payment plugin improvements.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.5.0 (2022-03-15)\n\n#### Fixes\n\n* **admin-ui** Fix circular dependency error ([ddc8941])\n* **core** Add OrderTestingService to core exports (#1469) ([a827055])\n* **core** Export all Promotion conditions & actions ([56b30fa])\n```\n\n----------------------------------------\n\nTITLE: Preventing Polynomial Regex Attack\nDESCRIPTION: Security fix to prevent potential polynomial regular expression attacks in the core system.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n9f4a814\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionTranslationInput Input Type in GraphQL\nDESCRIPTION: Specifies input for translating product option details, including language code, name, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_121\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ProductOptionTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: This snippet imports several React components used to build the Fulfillment documentation page, including components for displaying member information, generation details, and descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining RoleList Type in GraphQL\nDESCRIPTION: Type definition for paginated list of roles, including the role items and total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_114\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype RoleList {\nitems: [Role!]!\ntotalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: ParsedProductVariant Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of a parsed ProductVariant with properties like SKU, price, tax category, inventory settings, assets, facets, and translations including option values and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/import-export/import-parser.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParsedProductVariant {\n    sku: string;\n    price: number;\n    taxCategory: string;\n    stockOnHand: number;\n    trackInventory: GlobalFlag;\n    assetPaths: string[];\n    facets: ParsedFacet[];\n    translations: Array<{\n        languageCode: LanguageCode;\n        optionValues: string[];\n        customFields: {\n            [name: string]: string;\n        };\n    }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components - JavaScript\nDESCRIPTION: This snippet imports custom React components used to render member information, generation metadata, and member descriptions in the documentation. Dependencies include the React ecosystem and the referenced modules. These imports are required for assembling the documentation page, and the file expects these modules to be installed and accessible in the project context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining CurrentUserChannel Type in GraphQL\nDESCRIPTION: Defines the `CurrentUserChannel` GraphQL type in the Vendure Admin API, used within the `CurrentUser` type. It details a specific channel accessible by the current user, including the channel's `id`, access `token`, unique `code`, and a list of `permissions` granted to the user for this channel.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_45\n\nLANGUAGE: graphql\nCODE:\n```\ntype CurrentUserChannel {\nid: ID!\n\ntoken: String!\n\ncode: String!\n\npermissions: [Permission!]!\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Shows the main directory structure of the Vendure monorepo including documentation, e2e tests, license info, packages and scripts directories.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvendure/\n├── docs/           # Documentation source\n├── e2e-common/     # Shared config for package e2e tests\n├── license/        # License information & CLA signature log\n├── packages/       # Source for the Vendure server, admin-ui & core plugin packages\n├── scripts/\n    ├── changelog/  # Scripts used to generate the changelog based on the git history\n    ├── codegen/    # Scripts used to generate TypeScript code from the GraphQL APIs\n    ├── docs/       # Scripts used to generate documentation markdown from the source\n```\n\n----------------------------------------\n\nTITLE: Custom Field Name Configuration\nDESCRIPTION: Example showing the 'name' configuration property for custom fields in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                // highlight-next-line\n                name: 'infoUrl',\n                type: 'string'\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: FileSizePipe Class Definition\nDESCRIPTION: Class definition for FileSizePipe which implements PipeTransform and provides a transform method to convert numeric byte values into readable file size strings.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/file-size-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass FileSizePipe implements PipeTransform {\n    transform(value: number, useSiUnits:  = true) => any;\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response with Custom Fields\nDESCRIPTION: JSON response showing how custom fields appear in the GraphQL API response.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"product\": {\n      \"id\": \"1\",\n      \"name\": \"Laptop\",\n      \"customFields\": {\n          \"infoUrl\": \"https://some-url.com\",\n          \"downloadable\": true,\n          \"shortName\": \"foo\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for UI Extensions - JSON\nDESCRIPTION: This JSON snippet is an entry for the paths field in a temporary tsconfig.json file used when compiling Vendure Admin UI extensions within the monorepo. It enables TypeScript to resolve @vendure/admin-ui imports to local package sources. This must be included in 'paths' under 'compilerOptions'.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/README.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"paths\": {\n      \"@vendure/admin-ui/*\": [\"../../admin-ui/package/*\"]\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Populating Test Data for Selected Database - Bash\nDESCRIPTION: This Bash command demonstrates how to populate a Vendure development database with sample data, using the populate npm script. The DB environment variable can be set to specify which database to use (mysql, postgres, or sqlite). Requires prior database setup and Node.js environment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/dev-server/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[DB=mysql|postgres|sqlite] npm run populate\n\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in Vendure Documentation\nDESCRIPTION: This code snippet renders the DocCardList component, which is likely used to display a list of documentation cards or links related to data access in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Legacy Peer Deps\nDESCRIPTION: Command to install top-level dependencies with legacy peer dependencies flag due to React version compatibility issues.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --legacy-peer-deps\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports various documentation-related React components used to build the product stock documentation page.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: ActionBar Component Function Signature in TypeScript\nDESCRIPTION: The TypeScript function signature for the ActionBar component, showing it accepts PropsWithChildren with an optional leftContent property of type ReactNode.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/action-bar.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction ActionBar(props: PropsWithChildren<{ leftContent?: ReactNode }>): void\n```\n\n----------------------------------------\n\nTITLE: Defining EntityId Decorator Function Signature - TypeScript\nDESCRIPTION: Function signature for the EntityId decorator that accepts optional IdColumnOptions parameter. Used to annotate entity properties that reference other entities by their ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-id-decorator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction EntityId(options?: IdColumnOptions): void\n```\n\n----------------------------------------\n\nTITLE: Add to Order Mutation Variables\nDESCRIPTION: JSON variables for the AddItemToOrder mutation, specifying the product variant ID and quantity to add to the cart.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/storefront/product-detail/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variantId\": \"4\",\n  \"quantity\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing node-fetch for HTTP Requests (Bash)\nDESCRIPTION: This command installs the node-fetch library, which is used to make HTTP calls to the Keycloak server for token validation and user details retrieval.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/auth/index.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node-fetch\n```\n\n----------------------------------------\n\nTITLE: Verbose Installation Command\nDESCRIPTION: Command to run Vendure installation with verbose logging for troubleshooting purposes.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/installation/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @vendure/create my-shop --log-level verbose\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JavaScript\nDESCRIPTION: This snippet imports specific components such as MemberInfo, GenerationInfo, and MemberDescription from their respective paths within the documentation site source directory. These components are likely used to display related information in the Vendure eCommerce documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: HasPermissionPipe Class Definition in TypeScript\nDESCRIPTION: The TypeScript class definition for HasPermissionPipe which implements PipeTransform and OnDestroy interfaces. It includes the constructor and transform method used to check permissions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/has-permission-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass HasPermissionPipe implements PipeTransform, OnDestroy {\n    constructor(permissionsService: PermissionsService, changeDetectorRef: ChangeDetectorRef)\n    transform(input: string | string[]) => any;\n    ngOnDestroy() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response Format for GraphQL Union Types\nDESCRIPTION: Example of a successful response when applying a coupon code. The __typename field indicates the specific result type returned.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/error-handling/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"applyCouponCode\": {\n      // highlight-next-line\n      \"__typename\": \"Order\",\n      \"id\": \"123\",\n      \"couponCodes\": [\"VALID-CODE\"],\n      \"totalWithTax\": 12599,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Tabs Documentation\nDESCRIPTION: YAML frontmatter defining the page title, default index status, and generation flag for the documentation page.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/tabs/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Tabs\"\nisDefaultIndex: true\ngenerated: true\n---\n```\n\n----------------------------------------\n\nTITLE: Test Database Initializer Interface Signature in TypeScript\nDESCRIPTION: This code snippet defines the 'TestDbInitializer' interface which requires implementing three methods: 'init', 'populate', and 'destroy'. The 'init' method initializes a database for testing and modifies connection options. The 'populate' method populates the database using a provided function. The 'destroy' method cleans up resources. The interface is templated with connection options, ensuring flexibility and reusability for different database types.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/test-db-initializer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TestDbInitializer<T extends BaseConnectionOptions> {\n    init(testFileName: string, connectionOptions: T): Promise<T>;\n    populate(populateFn: () => Promise<void>): Promise<void>;\n    destroy(): void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RegionTranslation Object Type in GraphQL\nDESCRIPTION: GraphQL object type that represents translations for a Region entity. It includes fields for language code and translated name.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_157\n\nLANGUAGE: graphql\nCODE:\n```\ntype RegionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultJobQueuePlugin with Custom Options\nDESCRIPTION: Example of configuring the DefaultJobQueuePlugin with custom pollInterval, concurrency, and backoffStrategy options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/default-job-queue-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: VendureConfig = {\n  plugins: [\n    DefaultJobQueuePlugin.init({\n      pollInterval: queueName => {\n        if (queueName === 'cart-recovery-email') {\n          // This queue does not need to be polled so frequently,\n          // so we set a longer interval in order to reduce load\n          // on the database.\n          return 10000;\n        }\n        return 200;\n      },\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: useInjector Function Signature\nDESCRIPTION: The TypeScript function signature for the useInjector hook, showing that it accepts a ProviderToken of generic type T and returns an instance of that type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-injector.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useInjector<T = any>(token: ProviderToken<T>): T\n```\n\n----------------------------------------\n\nTITLE: Defining SearchReindexResponse Type in GraphQL\nDESCRIPTION: Type definition for the response when reindexing search data, indicating success or failure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_115\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype SearchReindexResponse {\nsuccess: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Query for Orders Channel Relation\nDESCRIPTION: SQL query to migrate existing orders to relate to the default channel as part of making orders channel-aware. Assumes default channel ID of 1.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `order_channels_channel` (orderId, channelId) SELECT id, 1 FROM `order`\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.5.2\nDESCRIPTION: Documentation of performance improvements and bug fixes in version 1.5.2 release, including optimizations to ListQueryBuilder and collection queries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### Perf\n\n* **core** Further optimizations to ListQueryBuilder ([d9577f8]), closes [#1506] [#1503]\n* **core** Optimize ListQueryBuilder performance ([8d87f05]), closes [#1503] [#1506] [1#L122]\n* **core** Optimize query to fetch all collection ids on changes ([a362fb4])\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Features\nDESCRIPTION: Markdown formatting showing a feature addition with commit hash and issue reference\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_NEXT.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* **admin-ui** Add Persian/Farsi i18n messages (#2418) ([1193863](https://github.com/vendure-ecommerce/vendure/commit/1193863)), closes [#2418](https://github.com/vendure-ecommerce/vendure/issues/2418)\n```\n\n----------------------------------------\n\nTITLE: Configuring Port in Vendure Config for Railway\nDESCRIPTION: Configures the API port in Vendure's configuration file to use the PORT environment variable provided by Railway, with a fallback to port 3000.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-railway/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    apiOptions: {\n        // highlight-next-line\n        port: +(process.env.PORT || 3000),\n        // ...\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Adding DeepRequired Type in TypeScript\nDESCRIPTION: Add a new DeepRequired type to the common utilities in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nAdd DeepRequired type\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vendure Promotions Documentation\nDESCRIPTION: This code snippet imports various React components used for rendering the Promotions documentation in Vendure. It includes components for displaying member information, generation details, member descriptions, and a document card list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Defining StockLocationListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing stock locations, including pagination parameters, sorting options, and filtering capabilities. Similar in structure to the ShippingMethodListOptions input type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_154\n\nLANGUAGE: graphql\nCODE:\n```\ninput StockLocationListOptions {\n\"\"\"\nSkips the first n results, for use in pagination\n\"\"\"\nskip: Int\n\n\"\"\"\nTakes n results, for use in pagination\n\"\"\"\ntake: Int\n\n\"\"\"\nSpecifies which properties to sort the results by\n\"\"\"\nsort: StockLocationSortParameter\n\n\"\"\"\nAllows the results to be filtered\n\"\"\"\nfilter: StockLocationFilterParameter\n\n\"\"\"\nSpecifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n\"\"\"\nfilterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in Vendure Documentation\nDESCRIPTION: This snippet renders the DocCardList component, which is likely used to display a list of documentation cards related to the Money class in the Vendure documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/money/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining RefundLine Object Type in GraphQL\nDESCRIPTION: Defines the RefundLine GraphQL type representing individual order line items in a refund, including quantity and references to the order line and parent refund.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_152\n\nLANGUAGE: graphql\nCODE:\n```\ntype RefundLine {\n  orderLine: OrderLine!\n  orderLineId: ID!\n  quantity: Int!\n  refund: Refund!\n  refundId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Vendure Website Without SSH\nDESCRIPTION: This command builds the website and deploys it to GitHub pages without using SSH. It requires the user's GitHub username.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Message Format Example for Breaking Changes\nDESCRIPTION: Example of a commit message following the Conventional Commits format that includes a breaking change notification, indicating a database migration requirement.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(core): Add new field to Customer\n\nRelates to #123. This commit adds the \"foo\" field to the Custom entity.\n\nBREAKING CHANGE: A DB migration will be required in order to add the new \"foo\" field to the customer table.\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Vendure Documentation\nDESCRIPTION: This code snippet imports custom React components used for rendering Vendure documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/data-access/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining CouponCodeEvent Class in TypeScript\nDESCRIPTION: Event class that fires when a coupon code is assigned to or removed from an Order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/events/event-types.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass CouponCodeEvent extends VendureEvent {\n    constructor(ctx: RequestContext, couponCode: string, orderId: ID, type: 'assigned' | 'removed')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DevMode and Debug Logging for StellatePlugin\nDESCRIPTION: This TypeScript snippet demonstrates configuring the `devMode` and `debugLogging` options within the `StellatePlugin.init` method in `VendureConfig`. Setting `devMode: true` prevents actual calls to the Stellate Purging API, useful during development. Setting `debugLogging: true` logs the purge calls that would have been made, aiding in debugging purge logic, even in dev mode. These settings are typically controlled via environment variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/stellate-plugin/index.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StellatePlugin, defaultPurgeRules } from '@vendure/stellate-plugin';\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n   // ...\n   plugins: [\n       StellatePlugin.init({\n           // ...\n           devMode: !process.env.PRODUCTION,\n           debugLogging: process.env.STELLATE_DEBUG_MODE ? true : false,\n           purgeRules: [\n               ...defaultPurgeRules,\n           ],\n       }),\n   ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing featuredAsset error when adding item to Order\nDESCRIPTION: This commit addresses an issue with the featuredAsset causing an error when adding an item to an Order in the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n* **core** Fix featuredAsset error when adding item to Order ([e635f25](https://github.com/vendure-ecommerce/vendure/commit/e635f25)), closes [#756](https://github.com/vendure-ecommerce/vendure/issues/756)\n```\n\n----------------------------------------\n\nTITLE: Defining AssignFacetsToChannelInput Input Type in GraphQL\nDESCRIPTION: This input type is used for assigning multiple facets to a specific channel in the Vendure admin API. It requires a list of facet IDs and the target channel ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_15\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput AssignFacetsToChannelInput {\n  facetIds: [ID!]!\n  channelId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PM2 in Dockerfile for Container-Based Scaling\nDESCRIPTION: Dockerfile configuration for using PM2 inside a Docker container to manage multiple instances of a Vendure application. Uses pm2-runtime to handle containerized process management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/horizontal-scaling.md#2025-04-22_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# ... your existing Dockerfile config\nRUN npm install pm2 -g\n\nCMD [\"pm2-runtime\", \"app.js\", \"-i\", \"max\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Codes in GraphQL Schema for Vendure\nDESCRIPTION: A GraphQL enum that defines ISO currency codes from around the world. Each code is accompanied by a descriptive comment indicating the currency name, providing a comprehensive reference for international transactions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nMMK\n\"\"\"Mongolian tögrög\"\"\"\nMNT\n\"\"\"Macanese pataca\"\"\"\nMOP\n\"\"\"Mauritanian ouguiya\"\"\"\nMRU\n\"\"\"Mauritian rupee\"\"\"\nMUR\n\"\"\"Maldivian rufiyaa\"\"\"\nMVR\n\"\"\"Malawian kwacha\"\"\"\nMWK\n\"\"\"Mexican peso\"\"\"\nMXN\n\"\"\"Malaysian ringgit\"\"\"\nMYR\n\"\"\"Mozambican metical\"\"\"\nMZN\n\"\"\"Namibian dollar\"\"\"\nNAD\n\"\"\"Nigerian naira\"\"\"\nNGN\n\"\"\"Nicaraguan córdoba\"\"\"\nNIO\n\"\"\"Norwegian krone\"\"\"\nNOK\n\"\"\"Nepalese rupee\"\"\"\nNPR\n\"\"\"New Zealand dollar\"\"\"\nNZD\n\"\"\"Omani rial\"\"\"\nOMR\n\"\"\"Panamanian balboa\"\"\"\nPAB\n\"\"\"Peruvian sol\"\"\"\nPEN\n\"\"\"Papua New Guinean kina\"\"\"\nPGK\n\"\"\"Philippine peso\"\"\"\nPHP\n\"\"\"Pakistani rupee\"\"\"\nPKR\n\"\"\"Polish złoty\"\"\"\nPLN\n\"\"\"Paraguayan guaraní\"\"\"\nPYG\n\"\"\"Qatari riyal\"\"\"\nQAR\n\"\"\"Romanian leu\"\"\"\nRON\n\"\"\"Serbian dinar\"\"\"\nRSD\n\"\"\"Russian ruble\"\"\"\nRUB\n\"\"\"Rwandan franc\"\"\"\nRWF\n\"\"\"Saudi riyal\"\"\"\nSAR\n\"\"\"Solomon Islands dollar\"\"\"\nSBD\n\"\"\"Seychelles rupee\"\"\"\nSCR\n\"\"\"Sudanese pound\"\"\"\nSDG\n\"\"\"Swedish krona/kronor\"\"\"\nSEK\n\"\"\"Singapore dollar\"\"\"\nSGD\n\"\"\"Saint Helena pound\"\"\"\nSHP\n\"\"\"Sierra Leonean leone\"\"\"\nSLL\n\"\"\"Somali shilling\"\"\"\nSOS\n\"\"\"Surinamese dollar\"\"\"\nSRD\n\"\"\"South Sudanese pound\"\"\"\nSSP\n\"\"\"São Tomé and Príncipe dobra\"\"\"\nSTN\n\"\"\"Salvadoran colón\"\"\"\nSVC\n\"\"\"Syrian pound\"\"\"\nSYP\n\"\"\"Swazi lilangeni\"\"\"\nSZL\n\"\"\"Thai baht\"\"\"\nTHB\n\"\"\"Tajikistani somoni\"\"\"\nTJS\n\"\"\"Turkmenistan manat\"\"\"\nTMT\n\"\"\"Tunisian dinar\"\"\"\nTND\n\"\"\"Tongan paʻanga\"\"\"\nTOP\n\"\"\"Turkish lira\"\"\"\nTRY\n\"\"\"Trinidad and Tobago dollar\"\"\"\nTTD\n\"\"\"New Taiwan dollar\"\"\"\nTWD\n\"\"\"Tanzanian shilling\"\"\"\nTZS\n\"\"\"Ukrainian hryvnia\"\"\"\nUAH\n\"\"\"Ugandan shilling\"\"\"\nUGX\n\"\"\"United States dollar\"\"\"\nUSD\n\"\"\"Uruguayan peso\"\"\"\nUYU\n\"\"\"Uzbekistan som\"\"\"\nUZS\n\"\"\"Venezuelan bolívar soberano\"\"\"\nVES\n\"\"\"Vietnamese đồng\"\"\"\nVND\n\"\"\"Vanuatu vatu\"\"\"\nVUV\n\"\"\"Samoan tala\"\"\"\nWST\n\"\"\"CFA franc BEAC\"\"\"\nXAF\n\"\"\"East Caribbean dollar\"\"\"\nXCD\n\"\"\"CFA franc BCEAO\"\"\"\nXOF\n\"\"\"CFP franc (franc Pacifique)\"\"\"\nXPF\n\"\"\"Yemeni rial\"\"\"\nYER\n\"\"\"South African rand\"\"\"\nZAR\n\"\"\"Zambian kwacha\"\"\"\nZMW\n\"\"\"Zimbabwean dollar\"\"\"\nZWL\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Asset Entity in TypeScript\nDESCRIPTION: Include width and height properties in the Asset entity of the Vendure core.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nInclude width and height in Asset entity\n```\n\n----------------------------------------\n\nTITLE: Using usePageMetadata Hook in React Component\nDESCRIPTION: Demonstrates how to use the usePageMetadata hook to set the page title and breadcrumb in a React component. The hook provides setTitle and setBreadcrumb functions that can be called within a useEffect hook.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-hooks/use-page-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePageMetadata } from '@vendure/admin-ui/react';\nimport { useEffect } from 'react';\n\nexport const MyComponent = () => {\n    const { setTitle, setBreadcrumb } = usePageMetadata();\n    useEffect(() => {\n        setTitle('My Page');\n        setBreadcrumb([\n            { link: ['./parent'], label: 'Parent Page' },\n            { link: ['./'], label: 'This Page' },\n        ]);\n    }, []);\n    // ...\n    return <div>...</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Wishlist Plugin\nDESCRIPTION: Directory structure showing the organization of the wishlist plugin files\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n├── wishlist-plugin\n    ├── wishlist.plugin.ts\n    ├── services\n        // highlight-next-line\n        ├── wishlist.service.ts\n```\n\n----------------------------------------\n\nTITLE: ErrorResultGuard Class Signature\nDESCRIPTION: The class signature for ErrorResultGuard showing its constructor and methods for type assertion and narrowing. It provides type-safe ways to determine if a result is a success or error case.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/testing/error-result-guard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ErrorResultGuard<T> {\n    constructor(testFn: (input: T) => boolean)\n    isSuccess(input: T | any) => input is T;\n    assertSuccess(input: T | R) => asserts input is T;\n    assertErrorResult(input: T | R) => asserts input is R;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Province Sort Parameters in GraphQL\nDESCRIPTION: Input type for sorting provinces by various fields including id, timestamps, code, type, name, and parentId.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_134\n\nLANGUAGE: graphql\nCODE:\n```\ninput ProvinceSortParameter {\n  id: SortOrder\n  createdAt: SortOrder\n  updatedAt: SortOrder\n  code: SortOrder\n  type: SortOrder\n  name: SortOrder\n  parentId: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 1.5.1\nDESCRIPTION: Documentation of bug fixes and improvements in version 1.5.1 release, covering various components including admin UI, core functionality, and payment plugins.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## <small>1.5.1 (2022-03-31)</small>\n\n#### Fixes\n\n* **admin-ui** Allow stockOnHand to match outOfStockThreshold ([f89bfbe])\n* **core** Add missing OrderLine.order field resolver (#1478) ([c6cf4d4])\n* **payments-plugin** Send 200 response from Stripe webhook (#1487) ([4d55949])\n```\n\n----------------------------------------\n\nTITLE: Using DurationPipe in TypeScript\nDESCRIPTION: Example of how to use the DurationPipe to format a time duration in milliseconds.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/duration-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{{ timeInMs | duration }}\n```\n\n----------------------------------------\n\nTITLE: HistoryEntryListOptions GraphQL Input Type Definition\nDESCRIPTION: Defines options for listing history entries, supporting pagination with skip and take parameters, sorting, filtering, and logical operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_93\n\nLANGUAGE: graphql\nCODE:\n```\ninput HistoryEntryListOptions {\n\"\"\"\nSkips the first n results, for use in pagination\n\"\"\"\nskip: Int\n\n\"\"\"\nTakes n results, for use in pagination\n\"\"\"\ntake: Int\n\n\"\"\"\nSpecifies which properties to sort the results by\n\"\"\"\nsort: HistoryEntrySortParameter\n\n\"\"\"\nAllows the results to be filtered\n\"\"\"\nfilter: HistoryEntryFilterParameter\n\n\"\"\"\nSpecifies whether multiple top-level \"filter\" fields should be combined with a logical AND or OR operation. Defaults to AND.\n\"\"\"\nfilterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FacetValueChecker Instantiation in TypeScript\nDESCRIPTION: Example showing the breaking change in how to instantiate the FacetValueChecker class. The new approach improves performance through caching by getting the instance via dependency injection rather than direct instantiation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_NEXT.md#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- facetValueChecker = new FacetValueChecker(injector.get(TransactionalConnection));\n+ facetValueChecker = injector.get(FacetValueChecker);\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component for Promotions Documentation\nDESCRIPTION: This JSX code renders the DocCardList component, which is likely used to display a list of documentation cards related to the Promotions module in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/index.md#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Update Customer Email Address Mutation\nDESCRIPTION: GraphQL mutation for confirming an email address update using a token generated by requestUpdateCustomerEmailAddress mutation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/mutations.md#2025-04-22_snippet_27\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  updateCustomerEmailAddress(token: String!): UpdateCustomerEmailAddressResult!\n}\n```\n\n----------------------------------------\n\nTITLE: Using CdsIcon Component in React\nDESCRIPTION: This example demonstrates how to import and use the CdsIcon component in a React component. It shows importing an icon, registering it, and rendering the CdsIcon with various props.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/cds-icon.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { userIcon } from '@cds/core/icon';\nimport { CdsIcon } from '@vendure/admin-ui/react';\n\nregisterCdsIcon(userIcon);\nexport function MyComponent() {\n   return <CdsIcon icon={userIcon} badge=\"warning\" solid size=\"lg\"></CdsIcon>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vendure Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the Vendure development server.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/installation/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-shop\n\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Video Resolver\nDESCRIPTION: Implements the resolver for handling video processing mutations with proper permissions and context handling.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Args, Mutation, Resolver } from '@nestjs/graphql';\nimport { Allow, Ctx, RequestContext, Permission, RequestContext } from '@vendure/core'\nimport { ProductVideoService } from '../services/product-video.service';\n\n@Resolver()\nexport class ProductVideoResolver {\n\n    constructor(private productVideoService: ProductVideoService) {}\n\n    @Mutation()\n    @Allow(Permission.UpdateProduct)\n    addVideoToProduct(@Ctx() ctx: RequestContext, @Args() args: { productId: ID; videoUrl: string; }) {\n        return this.productVideoService.transcodeForProduct(\n            args.productId,\n            args.videoUrl,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Documentation Components\nDESCRIPTION: Imports required React components for displaying member information, generation details and member descriptions in the documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageCode Enum Values (Partial) in GraphQL\nDESCRIPTION: This snippet shows a partial definition of the `LanguageCode` enum in GraphQL, listing various language names as comments followed by their corresponding ISO 639-1 or locale-specific codes (e.g., `mn` for Mongolian, `pt_BR` for Brazilian Portuguese). This enum is likely used to specify languages for localization or internationalization purposes within the Vendure application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmr\n\"\"\"Mongolian\"\"\"\nmn\n\"\"\"Nepali\"\"\"\nne\n\"\"\"North Ndebele\"\"\"\nnd\n\"\"\"Northern Sami\"\"\"\nse\n\"\"\"Norwegian Bokmål\"\"\"\nnb\n\"\"\"Norwegian Nynorsk\"\"\"\nnn\n\"\"\"Nyanja\"\"\"\nny\n\"\"\"Odia\"\"\"\nor\n\"\"\"Oromo\"\"\"\nom\n\"\"\"Ossetic\"\"\"\nos\n\"\"\"Pashto\"\"\"\nps\n\"\"\"Persian\"\"\"\nfa\n\"\"\"Dari\"\"\"\nfa_AF\n\"\"\"Polish\"\"\"\npl\n\"\"\"Portuguese\"\"\"\npt\n\"\"\"Brazilian Portuguese\"\"\"\npt_BR\n\"\"\"European Portuguese\"\"\"\npt_PT\n\"\"\"Punjabi\"\"\"\npa\n\"\"\"Quechua\"\"\"\nqu\n\"\"\"Romanian\"\"\"\nro\n\"\"\"Moldavian\"\"\"\nro_MD\n\"\"\"Romansh\"\"\"\nrm\n\"\"\"Rundi\"\"\"\nrn\n\"\"\"Russian\"\"\"\nru\n\"\"\"Samoan\"\"\"\nsm\n\"\"\"Sango\"\"\"\nsg\n\"\"\"Sanskrit\"\"\"\nsa\n\"\"\"Scottish Gaelic\"\"\"\ngd\n\"\"\"Serbian\"\"\"\nsr\n\"\"\"Shona\"\"\"\nsn\n\"\"\"Sichuan Yi\"\"\"\nii\n\"\"\"Sindhi\"\"\"\nsd\n\"\"\"Sinhala\"\"\"\nsi\n\"\"\"Slovak\"\"\"\nsk\n\"\"\"Slovenian\"\"\"\nsl\n\"\"\"Somali\"\"\"\nso\n\"\"\"Southern Sotho\"\"\"\nst\n\"\"\"Spanish\"\"\"\nes\n\"\"\"European Spanish\"\"\"\nes_ES\n\"\"\"Mexican Spanish\"\"\"\nes_MX\n\"\"\"Sundanese\"\"\"\nsu\n\"\"\"Swahili\"\"\"\nsw\n\"\"\"Congo Swahili\"\"\"\nsw_CD\n\"\"\"Swedish\"\"\"\nsv\n\"\"\"Tajik\"\"\"\ntg\n\"\"\"Tamil\"\"\"\nta\n\"\"\"Tatar\"\"\"\ntt\n\"\"\"Telugu\"\"\"\nte\n\"\"\"Thai\"\"\"\nth\n\"\"\"Tibetan\"\"\"\nbo\n\"\"\"Tigrinya\"\"\"\nti\n\"\"\"Tongan\"\"\"\nto\n\"\"\"Turkish\"\"\"\ntr\n\"\"\"Turkmen\"\"\"\ntk\n\"\"\"Ukrainian\"\"\"\nuk\n\"\"\"Urdu\"\"\"\nur\n\"\"\"Uyghur\"\"\"\nug\n\"\"\"Uzbek\"\"\"\nuz\n\"\"\"Vietnamese\"\"\"\nvi\n\"\"\"Volapük\"\"\"\nvo\n\"\"\"Welsh\"\"\"\ncy\n\"\"\"Western Frisian\"\"\"\nfy\n\"\"\"Wolof\"\"\"\nwo\n\"\"\"Xhosa\"\"\"\nxh\n\"\"\"Yiddish\"\"\"\nyi\n\"\"\"Yoruba\"\"\"\nyo\n\"\"\"Zulu\"\"\"\nzu\n}\n```\n\n----------------------------------------\n\nTITLE: Using Context Decorator for Request Context\nDESCRIPTION: Example of using @Ctx decorator to inject RequestContext into a resolver method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/the-api-layer/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Mutation, Resolver } from '@nestjs/graphql';\nimport { Ctx, RequestContext } from '@vendure/core';\n\n@Resolver()\nexport class WishlistResolver {\n\n    @Mutation()\n    addItemToWishlist(@Ctx() ctx: RequestContext) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type BooleanListOperators\nDESCRIPTION: Defines the `BooleanListOperators` input type for filtering based on a list of Boolean values. The `inList` field requires a Boolean and checks if the target field's value matches the provided boolean within a list context (though the definition here seems simplified, likely used internally in a specific way).\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nOperators for filtering on a list of Boolean fields\n\"\"\"\ninput BooleanListOperators {\n  inList: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SinglePrice GraphQL Object Type\nDESCRIPTION: GraphQL type definition for SinglePrice which represents a price where the result has a single value. Used for simple pricing representation where a range or multiple values aren't needed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_128\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe price value where the result has a single price\n\"\"\"\ntype SinglePrice {\nvalue: Money!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CoordinateInput in GraphQL\nDESCRIPTION: The CoordinateInput input type defines a coordinate with 'x' and 'y' attributes, both of type Float. This is used for specifying coordinates within the e-commerce context.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_34\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CoordinateInput {\\n  x: Float!\\n  y: Float!\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom SKU Collection Filter in TypeScript\nDESCRIPTION: Example implementation of a custom CollectionFilter that filters product variants by SKU. The filter uses TypeORM QueryBuilder to add WHERE clauses that match SKUs containing a specified value, with special handling for PostgreSQL vs other databases.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/collection-filter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CollectionFilter, LanguageCode } from '@vendure/core';\n\nexport const skuCollectionFilter = new CollectionFilter({\n  args: {\n    // The `args` object defines the user-configurable arguments\n    // which will get passed to the filter's `apply()` function.\n    sku: {\n      type: 'string',\n      label: [{ languageCode: LanguageCode.en, value: 'SKU' }],\n      description: [\n        {\n          languageCode: LanguageCode.en,\n          value: 'Matches any product variants with SKUs containing this value',\n        },\n      ],\n    },\n  },\n  code: 'variant-sku-filter',\n  description: [{ languageCode: LanguageCode.en, value: 'Filter by matching SKU' }],\n\n  // This is the function that defines the logic of the filter.\n  apply: (qb, args) => {\n    const LIKE = qb.connection.options.type === 'postgres' ? 'ILIKE' : 'LIKE';\n    return qb.andWhere(`productVariant.sku ${LIKE} :sku`, { sku: `%${args.sku}%` });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Code Generator for Money Scalar\nDESCRIPTION: Configuration for graphql-code-generator to handle the new Money scalar type as a number in GraphQL APIs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CodegenConfig } from '@graphql-codegen/cli'\n\nconst config: CodegenConfig = {\n  schema: 'http://localhost:3000/shop-api',\n  documents: ['src/**/*graphql.ts'],\n  config: {\n    scalars: {\n      Money: 'number',\n    },\n  },\n  generates: {\n    // .. \n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Form Grid Span Example\nDESCRIPTION: Example showing how to make a form field span the full width using the form-grid-span class.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/ui-library/index.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"form-grid\">\n    <vdr-form-field label=\"Page title\" class=\"form-grid-span\">\n        <input type=\"text\" />\n    </vdr-form-field>\n</div>\n```\n\n----------------------------------------\n\nTITLE: IfPermissionsDirective Class Definition in TypeScript\nDESCRIPTION: Shows the TypeScript class definition for the IfPermissionsDirective, which extends IfDirectiveBase and is constructed with dependencies for view management and permission checking.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/directives/if-permissions-directive.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass IfPermissionsDirective extends IfDirectiveBase<Array<Permission[] | null>> {\n    constructor(_viewContainer: ViewContainerRef, templateRef: TemplateRef<any>, changeDetectorRef: ChangeDetectorRef, permissionsService: PermissionsService)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for GraphQL Mutation with Union Type\nDESCRIPTION: This JSON object shows an error response for the UpdateCustomerEmail mutation, returning the EmailAddressInUseError type from the union.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updateCustomerEmail\": {\n      \"__typename\": \"EmailAddressInUseError\",\n      \"errorCode\": \"EMAIL_ADDRESS_IN_USE\",\n      \"message\": \"The email address is already in use\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation\nDESCRIPTION: Imports various React components used for rendering documentation, including member information, generation details, and member descriptions. Also imports a DocCardList component for displaying documentation cards.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure AdminUiPlugin with npm in Bash\nDESCRIPTION: This snippet shows the command required to install the @vendure/admin-ui-plugin package via npm. This is a prerequisite for enabling the Admin UI plugin in a Vendure project. Execute this command in the project's root directory to add the dependency to your node_modules and update package.json, ensuring the plugin is available for usage within the JavaScript or TypeScript Vendure application.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/admin-ui-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vendure/admin-ui-plugin\n```\n\n----------------------------------------\n\nTITLE: LocaleCurrencyPipe Class Definition in TypeScript\nDESCRIPTION: Defines the LocaleCurrencyPipe class, extending LocaleBasePipe and implementing PipeTransform. It includes a constructor and a transform method for formatting currency values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-currency-pipe.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LocaleCurrencyPipe extends LocaleBasePipe implements PipeTransform {\n    readonly precisionFactor: number;\n    constructor(currencyService: CurrencyService, dataService?: DataService, changeDetectorRef?: ChangeDetectorRef)\n    transform(value: unknown, args: unknown[]) => string | unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: OrderModifier Class Definition in TypeScript\nDESCRIPTION: Class definition for OrderModifier showing constructor and available methods for modifying orders. This class handles order modifications while managing stock levels, shipping methods, and order calculations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/order-modifier.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OrderModifier {\n    constructor(connection: TransactionalConnection, configService: ConfigService, orderCalculator: OrderCalculator, paymentService: PaymentService, countryService: CountryService, stockMovementService: StockMovementService, productVariantService: ProductVariantService, customFieldRelationService: CustomFieldRelationService, promotionService: PromotionService, eventBus: EventBus, shippingCalculator: ShippingCalculator, historyService: HistoryService, translator: TranslatorService)\n    constrainQuantityToSaleable(ctx: RequestContext, variant: ProductVariant, quantity: number, existingOrderLineQuantity:  = 0, quantityInOtherOrderLines:  = 0) => ;\n    getExistingOrderLine(ctx: RequestContext, order: Order, productVariantId: ID, customFields?: { [key: string]: any }) => Promise<OrderLine | undefined>;\n    getOrCreateOrderLine(ctx: RequestContext, order: Order, productVariantId: ID, customFields?: { [key: string]: any }) => ;\n    updateOrderLineQuantity(ctx: RequestContext, orderLine: OrderLine, quantity: number, order: Order) => Promise<OrderLine>;\n    cancelOrderByOrderLines(ctx: RequestContext, input: CancelOrderInput, lineInputs: OrderLineInput[]) => ;\n    modifyOrder(ctx: RequestContext, input: ModifyOrderInput, order: Order) => Promise<JustErrorResults<ModifyOrderResult> | { order: Order; modification: OrderModification }>;\n    setShippingMethods(ctx: RequestContext, order: Order, shippingMethodIds: ID[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing OrderItem unitPriceIncludesTax Field in Vendure GraphQL API\nDESCRIPTION: Documents the removal of the `OrderItem.unitPriceIncludesTax` field in Vendure's GraphQL API with the v1.0.0 release. This field was deemed redundant as the `unitPrice` field consistently represents the price without tax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\n# Removed field on OrderItem (redundant)\nunitPriceIncludesTax\n```\n\nLANGUAGE: graphql\nCODE:\n```\n# Clarification: unitPrice is always without tax\nunitPrice\n```\n\n----------------------------------------\n\nTITLE: GraphQL Float Scalar Definition\nDESCRIPTION: Defines the Float scalar type for IEEE 754 double-precision fractional values.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_67\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).\"\"\"\nscalar Float\n```\n\n----------------------------------------\n\nTITLE: Defining SetCacheKeyOptions Interface in TypeScript\nDESCRIPTION: The SetCacheKeyOptions interface defines configuration options when setting cache values, including time-to-live (ttl) and tags for grouping cache keys.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/cache/cache-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SetCacheKeyOptions {\n    ttl?: number;\n    tags?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation with Link Component in Vendure Admin UI React\nDESCRIPTION: Example showing how to use the Link component from @vendure/admin-ui/react to navigate to a specific route in the admin UI. The component renders an anchor tag and handles navigation when clicked.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/link.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@vendure/admin-ui/react';\n\nexport const MyReactComponent = () => {\n    return <Link href=\"/extensions/my-extension\">Go to my extension</Link>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Vendure Website\nDESCRIPTION: This command starts a local development server and opens a browser window. It allows for live updates without server restarts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Port in Vendure Config\nDESCRIPTION: Configuration for setting up the Vendure server port using environment variables. Uses Render's default port 10000 or falls back to 3000.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-render/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n    apiOptions: {\n        port: +(process.env.PORT || 3000),\n        // ...\n    },\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Payment Methods with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for bulk deleting multiple payment methods. Accepts an array of payment method IDs and an optional force parameter. Returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_50\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete multiple PaymentMethods\n\"\"\"\ntype Mutation {\n  deletePaymentMethods(ids: [ID!]!, force: Boolean): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteStockLocationInput Input Type in GraphQL\nDESCRIPTION: Specifies input for deleting a stock location. Includes an option to transfer stock to another location before deletion.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_80\n\nLANGUAGE: graphql\nCODE:\n```\ninput DeleteStockLocationInput {\n  id: ID!\n  transferToLocationId: ID\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailAttachment Type in TypeScript\nDESCRIPTION: Defines the structure for email attachments based on Nodemailer's attachment format.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailAttachment = Omit<Attachment, 'raw'> & { path?: string }\n```\n\n----------------------------------------\n\nTITLE: Setting Breadcrumbs in Angular Route Definition - TypeScript\nDESCRIPTION: This snippet extends Angular route configuration by including a locationId and breadcrumb property using registerRouteComponent. The breadcrumb parameter controls UI path navigation, and locationId is used for internal referencing. Dependencies: @vendure/admin-ui/core, and a registered TestComponent. Inputs are the route metadata; output is an administratively navigable page in the Vendure UI. The configuration supports hierarchical or custom labels.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\\nimport { TestComponent } from './components/test/test.component';\\n\\nexport default [\\n    registerRouteComponent({\\n        component: TestComponent,\\n        title: 'Test',\\n        locationId: 'my-location-id'\\n        // highlight-next-line\\n        breadcrumb: 'Test',\\n    }),\\n];\n```\n\n----------------------------------------\n\nTITLE: Updating Rounding Logic in TypeScript\nDESCRIPTION: This snippet shows a breaking change in the rounding logic for order total calculations. The new method rounds after multiplication, which is more mathematically correct.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// v3.0\nreturn Math.round(value) * quantity;\n\n// v3.1\nreturn Math.round(value * quantity);\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Admin UI Documentation\nDESCRIPTION: Imports necessary React components for displaying member information, generation details, member descriptions and documentation cards in the Vendure Admin UI documentation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/admin-ui/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining HardenPluginOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the HardenPluginOptions interface, which specifies the configuration options for the HardenPlugin. It includes properties for controlling query complexity, custom estimators, logging, field suggestions, API mode, and skipping complexity checks.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/harden-plugin-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HardenPluginOptions {\n    maxQueryComplexity?: number;\n    queryComplexityEstimators?: ComplexityEstimator[];\n    logComplexityScore?: boolean;\n    customComplexityFactors?: {\n        [path: string]: number;\n    };\n    hideFieldSuggestions?: boolean;\n    apiMode?: 'dev' | 'prod';\n    skip?: (context: GraphQLRequestContext<any>) => Promise<boolean> | boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Using bufferSize Method Example in TypeScript\nDESCRIPTION: This example demonstrates how to use the bufferSize method of the JobBufferStorageStrategy to get the number of buffered jobs for specific buffer IDs. The method returns an object mapping buffer IDs to counts.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/job-buffer-storage-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sizes = await myJobBufferStrategy.bufferSize(['buffer-1', 'buffer-2']);\n\n// sizes = { 'buffer-1': 12, 'buffer-2': 3 }\n```\n\n----------------------------------------\n\nTITLE: Creating React Custom Column Component for Product Slug\nDESCRIPTION: Implements a React component that renders a product slug as a clickable link. The component receives the product entity as a rowItem prop through ReactDataTableComponentProps interface.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-data-table-components/index.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactDataTableComponentProps } from '@vendure/admin-ui/react';\nimport React from 'react';\n\nexport function SlugLink({ rowItem }: ReactDataTableComponentProps<{ slug: string }>) {\n    const slug = rowItem.slug;\n    return (\n        <a href={`https://example.com/category/${slug}`} target=\"_blank\">\n            {slug}\n        </a>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vendure AssetServerPlugin via npm\nDESCRIPTION: Command to install the AssetServerPlugin package for Vendure e-commerce platform using npm package manager.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/asset-server-plugin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vendure/asset-server-plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collection Filter\nDESCRIPTION: Example of implementing a custom CollectionFilter with configurable arguments and UI components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/strategies-configurable-operations/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CollectionFilter, LanguageCode } from '@vendure/core';\n\nexport const variantNameCollectionFilter = new CollectionFilter({\n    args: {\n        operator: {\n            type: 'string',\n            ui: {\n                component: 'select-form-input',\n                options: [\n                    { value: 'startsWith' },\n                    { value: 'endsWith' },\n                    { value: 'contains' },\n                    { value: 'doesNotContain' },\n                ],\n            },\n        },\n        term: { type: 'string' },\n    },\n    code: 'variant-name-filter',\n    description: [{ languageCode: LanguageCode.en, value: 'Filter by product variant name' }],\n    apply: (qb, args) => {\n        // ... implementation omitted\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Authenticating Natively via Username and Password - GraphQL\nDESCRIPTION: Represents the input type for native username/password authentication. Requires both username and password strings. Used in login mutations to enable local authentication mechanisms.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_105\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput NativeAuthInput {\n  username: String!\n  password: String!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining LoadDataFn Type in TypeScript\nDESCRIPTION: Defines a function type for loading async data in email event handlers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/email-plugin-types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype LoadDataFn<Event extends EventWithContext, R> = (context: {\n    event: Event;\n    injector: Injector;\n}) => Promise<R>\n```\n\n----------------------------------------\n\nTITLE: Order Type Definition in GraphQL\nDESCRIPTION: Defines the Order type containing comprehensive order information including customer details, addresses, line items, payments, and calculations. Includes fields for tracking order status, financial calculations, and temporal data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_67\n\nLANGUAGE: graphql\nCODE:\n```\ntype Order {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  type: OrderType!\n  orderPlacedAt: DateTime\n  code: String!\n  state: String!\n  active: Boolean!\n  customer: Customer\n  shippingAddress: OrderAddress\n  billingAddress: OrderAddress\n  lines: [OrderLine!]!\n  surcharges: [Surcharge!]!\n  discounts: [Discount!]!\n  couponCodes: [String!]!\n  promotions: [Promotion!]!\n  payments: [Payment!]\n  fulfillments: [Fulfillment!]\n  totalQuantity: Int!\n  subTotal: Money!\n  subTotalWithTax: Money!\n  currencyCode: CurrencyCode!\n  shippingLines: [ShippingLine!]!\n  shipping: Money!\n  shippingWithTax: Money!\n  total: Money!\n  totalWithTax: Money!\n  taxSummary: [OrderTaxSummary!]!\n  history(options: HistoryEntryListOptions): HistoryEntryList!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AssetServerPlugin with PresetOnlyStrategy in TypeScript\nDESCRIPTION: Example demonstrating how to initialize the Vendure AssetServerPlugin using the `PresetOnlyStrategy`. It shows how to instantiate the strategy with specific options like a default preset ('thumbnail'), permitted quality levels, allowed formats ('jpg', 'webp', 'avif'), and enabling focal point specification.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/preset-only-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { AssetServerPlugin, PresetOnlyStrategy } from '@vendure/core';\n\n// ...\n\nAssetServerPlugin.init({\n  //...\n  imageTransformStrategy: new PresetOnlyStrategy({\n    defaultPreset: 'thumbnail',\n    permittedQuality: [0, 50, 75, 85, 95],\n    permittedFormats: ['jpg', 'webp', 'avif'],\n    allowFocalPoint: true,\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up environment for Typesense Docsearch\nDESCRIPTION: Instructions for copying the environment configuration file for the Typesense Docsearch scraper. The example indicates you need to copy the '.env.example' file and populate it with your Typesense instance details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/scraper/readme.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Metadata in VendureConfig\nDESCRIPTION: Example TypeScript code demonstrating how to use the `metadata` option within `StripePlugin.init`. It provides an asynchronous function that uses Vendure's `Injector` to get the `EntityHydrator`, hydrates the order with customer details, and returns custom metadata (an order description) to be attached to the Stripe Payment Intent.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/payments-plugin/stripe-plugin.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntityHydrator, VendureConfig } from '@vendure/core';\nimport { StripePlugin } from '@vendure/payments-plugin/package/stripe';\n\nexport const config: VendureConfig = {\n  // ...\n  plugins: [\n    StripePlugin.init({\n      metadata: async (injector, ctx, order) => {\n        const hydrator = injector.get(EntityHydrator);\n        await hydrator.hydrate(ctx, order, { relations: ['customer'] });\n        return {\n          description: `Order #${order.code} for ${order.customer!.emailAddress}`\n        },\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Response for Eligible Shipping Methods Query with Digital Options\nDESCRIPTION: This JSON response shows the result of querying eligible shipping methods, highlighting a Digital Download shipping method with zero cost and the isDigital flag set to true, alongside standard physical shipping options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"eligibleShippingMethods\": [\n      // highlight-start\n      {\n        \"id\": \"3\",\n        \"name\": \"Digital Download\",\n        \"price\": 0,\n        \"priceWithTax\": 0,\n        \"customFields\": {\n          \"isDigital\": true\n        }\n      },\n      // highlight-end\n      {\n        \"id\": \"1\",\n        \"name\": \"Standard Shipping\",\n        \"price\": 500,\n        \"priceWithTax\": 500,\n        \"customFields\": {\n          \"isDigital\": false\n        }\n      },\n      {\n        \"id\": \"2\",\n        \"name\": \"Express Shipping\",\n        \"price\": 1000,\n        \"priceWithTax\": 1000,\n        \"customFields\": {\n          \"isDigital\": false\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tags with GraphQL Input Type in Vendure\nDESCRIPTION: Definition of the CreateTagInput GraphQL input type used to create new tags in Vendure. It requires only a value field.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_65\n\nLANGUAGE: graphql\nCODE:\n```\ninput CreateTagInput {\nvalue: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateFacetValueWithFacetInput Type in GraphQL\nDESCRIPTION: Defines the input type for creating a facet value when also creating its parent facet. It requires a code and translations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_50\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput CreateFacetValueWithFacetInput {\n  code: String!\n  translations: [FacetValueTranslationInput!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SettleRefundInput Input Type in GraphQL\nDESCRIPTION: This input type is used for settling a refund, requiring the refund id and transaction id.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_147\n\nLANGUAGE: graphql\nCODE:\n```\ninput SettleRefundInput {\n  id: ID!\n  transactionId: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for ProxyOptions\nDESCRIPTION: Definition of the ProxyOptions interface used to configure proxy middleware. It includes properties for label, route, port, optional hostname, and optional basePath.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/plugin/plugin-utilities.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProxyOptions {\n    label: string;\n    route: string;\n    port: number;\n    hostname?: string;\n    basePath?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Insufficient Stock Error\nDESCRIPTION: Example JSON response showing an insufficient stock error when attempting to add items to an order.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/core-concepts/stock-control/index.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"addItemToOrder\": {\n      \"errorCode\": \"INSUFFICIENT_STOCK_ERROR\",\n      \"message\": \"Only 105 items were added to the order due to insufficient stock\",\n      \"quantityAvailable\": 105,\n      \"order\": {\n        \"id\": \"2\",\n        \"totalQuantity\": 106\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Vendure Documentation\nDESCRIPTION: Imports various React components used for rendering the services documentation, including MemberInfo, GenerationInfo, MemberDescription, and DocCardList components.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/services/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: HistoryEntrySortParameter GraphQL Input Type Definition\nDESCRIPTION: Defines sort parameters for history entries, allowing sorting by ID, creation date, and update date using the SortOrder enum.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_94\n\nLANGUAGE: graphql\nCODE:\n```\ninput HistoryEntrySortParameter {\nid: SortOrder\ncreatedAt: SortOrder\nupdatedAt: SortOrder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Type ConfigArgInput\nDESCRIPTION: Defines the `ConfigArgInput` type, representing a single name-value pair argument for a configurable operation. The `name` is the argument identifier (String), and the `value` is its corresponding value, provided as a JSON-stringified representation.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ninput ConfigArgInput {\n  name: String!\n  \"\"\"\n  A JSON stringified representation of the actual value\n  \"\"\"\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the ShippingLineAssignmentStrategy Interface Signature in TypeScript\nDESCRIPTION: This TypeScript code shows the interface signature for `ShippingLineAssignmentStrategy`. It extends `InjectableStrategy` and defines the required method `assignShippingLineToOrderLines`. This method takes the `RequestContext`, the `ShippingLine` to be assigned, and the `Order` as input, and must return an array (or a Promise resolving to an array) of the `OrderLine`s to which the given `ShippingLine` should be assigned.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/shipping/shipping-line-assignment-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ninterface ShippingLineAssignmentStrategy extends InjectableStrategy {\n    assignShippingLineToOrderLines(\n        ctx: RequestContext,\n        shippingLine: ShippingLine,\n        order: Order,\n    ): OrderLine[] | Promise<OrderLine[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Plugin Compatibility Errors in Vendure Bootstrap\nDESCRIPTION: This snippet demonstrates how to ignore compatibility errors for specific plugins when bootstrapping a Vendure server. This should be used with caution and only when certain the plugin will work with the current Vendure version.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/bootstrap.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrap } from '@vendure/core';\nimport { config } from './vendure-config';\nimport { MyPlugin } from './plugins/my-plugin';\n\nbootstrap(config, {\n  ignoreCompatibilityErrorsForPlugins: [MyPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining FacetListOptions Input Type in GraphQL\nDESCRIPTION: Specifies options for listing Facets, including pagination (skip and take), sorting, filtering, and logical operators for combining filters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/input-types.md#2025-04-22_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetListOptions {\n  skip: Int\n  take: Int\n  sort: FacetSortParameter\n  filter: FacetFilterParameter\n  filterOperator: LogicalOperator\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodList GraphQL Type for Pagination\nDESCRIPTION: GraphQL schema definition for the PaymentMethodList type that supports paginated lists of payment methods with a total count.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_126\n\nLANGUAGE: graphql\nCODE:\n```\ntype PaymentMethodList {\n  items: [PaymentMethod!]!\n  totalItems: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HashedAssetNamingStrategy Class in TypeScript\nDESCRIPTION: A class that extends DefaultAssetNamingStrategy to implement hashed directory file storage. It prefixes file names with type ('source' or 'preview') and adds a 2-character subdirectory based on MD5 hash of original filename. This approach limits files per directory to improve file system performance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/asset-server-plugin/hashed-asset-naming-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HashedAssetNamingStrategy extends DefaultAssetNamingStrategy {\n    generateSourceFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string) => string;\n    generatePreviewFileName(ctx: RequestContext, originalFileName: string, conflictFileName?: string) => string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Digital Product Custom Fields in Vendure Plugin\nDESCRIPTION: Sets up custom fields on ProductVariant to identify digital products, on ShippingMethod for digital fulfillment, and on Fulfillment for storing download URLs.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/digital-products/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@VendurePlugin({\n    imports: [PluginCommonModule],\n    configuration: config => {\n        config.customFields.ProductVariant.push({\n            type: 'boolean',\n            name: 'isDigital',\n            defaultValue: false,\n            label: [{ languageCode: LanguageCode.en, value: 'This product is digital' }],\n            public: true,\n        });\n        config.customFields.ShippingMethod.push({\n            type: 'boolean',\n            name: 'digitalFulfilmentOnly',\n            defaultValue: false,\n            label: [{ languageCode: LanguageCode.en, value: 'Digital fulfilment only' }],\n            public: true,\n        });\n        config.customFields.Fulfillment.push({\n            type: 'string',\n            name: 'downloadUrls',\n            nullable: true,\n            list: true,\n            label: [{ languageCode: LanguageCode.en, value: 'Urls of any digital purchases' }],\n            public: true,\n        });\n        return config;\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining SearchStrategy Interface in TypeScript\nDESCRIPTION: This code snippet defines the SearchStrategy interface, which extends InjectableStrategy and specifies methods for getting search results, total count, facet value IDs, and collection IDs. It is used to implement database-specific search functionality in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/default-search-plugin/search-strategy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SearchStrategy extends InjectableStrategy {\n    getSearchResults(ctx: RequestContext, input: SearchInput, enabledOnly: boolean): Promise<SearchResult[]>;\n    getTotalCount(ctx: RequestContext, input: SearchInput, enabledOnly: boolean): Promise<number>;\n    getFacetValueIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean): Promise<Map<ID, number>>;\n    getCollectionIds(ctx: RequestContext, input: SearchInput, enabledOnly: boolean): Promise<Map<ID, number>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdministratorPaymentInput in GraphQL\nDESCRIPTION: Defines the input structure for adding a payment by an administrator. It accepts an optional `paymentMethod` string and arbitrary `metadata` as a JSON object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ninput AdministratorPaymentInput {\n  paymentMethod: String\n  metadata: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CouponCodeInvalidError GraphQL Object Type\nDESCRIPTION: Defines the CouponCodeInvalidError type, which is returned when a provided coupon code is invalid.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_37\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype CouponCodeInvalidError {\n  errorCode: ErrorCode!\n  message: String!\n  couponCode: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogLevel Enum in TypeScript\nDESCRIPTION: Defines an enumeration of logging levels from Error (most severe) to Debug (most detailed). Each level indicates different severity and verbosity of logging output, used for system diagnostics and monitoring.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/log-level.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum LogLevel {\n    // Log Errors only. These are usually indicative of some potentially\nserious issue, so should be acted upon.\n    Error = 0\n    // Warnings indicate that some situation may require investigation\nand handling. But not as serious as an Error.\n    Warn = 1\n    // Logs general information such as startup messages.\n    Info = 2\n    // Logs additional information\n    Verbose = 3\n    // Logs detailed info useful in debug scenarios, including stack traces for\nall errors. In production this would probably generate too much noise.\n    Debug = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddItemInput in GraphQL\nDESCRIPTION: Specifies the input structure for adding an item to an order. Requires the `productVariantId` and the desired `quantity`.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninput AddItemInput {\n  productVariantId: ID!\n  quantity: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MissingPasswordError Type in GraphQL\nDESCRIPTION: Represents an error returned when attempting to register or verify a customer account without a required password.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_60\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype MissingPasswordError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeORM Queries in TypeScript\nDESCRIPTION: Examples of updating TypeORM queries to comply with v0.3.x changes. This includes using new helpers like IsNull() and In(), and modifying findOne() and where clause syntax.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n+ import { IsNull } from 'typeorm';\n\n- .find({ where: { deletedAt: null } })\n+ .find({ where: { deletedAt: IsNull() } })\n\n- .findOne(variantId)\n+ .findOne({ where: { id: variantId } })\n\n- .find({ where: { user } })\n+ .find({ where: { user: { id: user.id } } })\n\n+ import { In } from 'typeorm';\n\n- .findByIds(ids)\n+ .find({ where: { id: In(ids) } })\n```\n\n----------------------------------------\n\nTITLE: Using LocaleDatePipe in HTML Templates\nDESCRIPTION: Example of using the LocaleDatePipe in an HTML template to format an order's placement date according to the selected UI language.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/pipes/locale-date-pipe.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{{ order.orderPlacedAt | localeDate }}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Product Events in Vendure Plugin\nDESCRIPTION: Example of creating a Vendure plugin that subscribes to ProductEvents to trigger storefront rebuilds. Shows usage of EventBus.ofType() method and basic event subscription pattern.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/events/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OnModuleInit } from '@nestjs/common';\nimport { EventBus, ProductEvent, PluginCommonModule, VendurePlugin } from '@vendure/core';\n\nimport { StorefrontBuildService } from './services/storefront-build.service';\n\n@VendurePlugin({\n    imports: [PluginCommonModule],\n})\nexport class StorefrontBuildPlugin implements OnModuleInit {\n    constructor(\n        private eventBus: EventBus,\n        private storefrontBuildService: StorefrontBuildService,\n    ) {}\n\n    onModuleInit() {\n        this.eventBus.ofType(ProductEvent).subscribe(event => {\n            this.storefrontBuildService.triggerBuild();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Administrators List - GraphQL SDL - GraphQL\nDESCRIPTION: Defines 'administrators', a query that returns a paginated list of Administrator objects, with optional AdministratorListOptions input. It is intended for listing administrator accounts, supporting filtering, sorting, and pagination. The output is always a non-nullable AdministratorList object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  administrators(options: AdministratorListOptions): AdministratorList!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining PromotionTranslation Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the PromotionTranslation entity, which contains localized name and description fields for a promotion in a specific language.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_100\n\nLANGUAGE: graphql\nCODE:\n```\ntype PromotionTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HistoryEntryType Enum in GraphQL for Vendure\nDESCRIPTION: This enum defines various types of history entries in the Vendure system. It includes events related to customer actions, order processing, and system modifications, providing a comprehensive log of activities within the e-commerce platform.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_7\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum HistoryEntryType {\n  CUSTOMER_REGISTERED\n  CUSTOMER_VERIFIED\n  CUSTOMER_DETAIL_UPDATED\n  CUSTOMER_ADDED_TO_GROUP\n  CUSTOMER_REMOVED_FROM_GROUP\n  CUSTOMER_ADDRESS_CREATED\n  CUSTOMER_ADDRESS_UPDATED\n  CUSTOMER_ADDRESS_DELETED\n  CUSTOMER_PASSWORD_UPDATED\n  CUSTOMER_PASSWORD_RESET_REQUESTED\n  CUSTOMER_PASSWORD_RESET_VERIFIED\n  CUSTOMER_EMAIL_UPDATE_REQUESTED\n  CUSTOMER_EMAIL_UPDATE_VERIFIED\n  CUSTOMER_NOTE\n  ORDER_STATE_TRANSITION\n  ORDER_PAYMENT_TRANSITION\n  ORDER_FULFILLMENT\n  ORDER_CANCELLATION\n  ORDER_REFUND_TRANSITION\n  ORDER_FULFILLMENT_TRANSITION\n  ORDER_NOTE\n  ORDER_COUPON_APPLIED\n  ORDER_COUPON_REMOVED\n  ORDER_MODIFIED\n  ORDER_CUSTOMER_UPDATED\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Button Clicks with GraphQL Mutation\nDESCRIPTION: Example of implementing click handling using the onClick property to perform a GraphQL mutation when an ActionBar button is clicked.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/add-actions-to-pages/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport gql from 'graphql-tag';\nimport { firstValueFrom } from 'rxjs';\nimport { addActionBarItem } from '@vendure/admin-ui/core';\n\nconst mutation = gql`\n    mutation MyMutation($orderId: ID!) {\n        myMutation(orderId: $orderId)\n    }\n`;\n\nexport default [\n    addActionBarItem({\n        id: 'myButtonId',\n        label: 'My Button Label',\n        locationId: 'order-detail',\n        onClick: async (event, context) => {\n            try {\n                const orderId = context.route.snapshot.params.id;\n                await firstValueFrom(context.dataService.mutate(mutation, { orderId }));\n            } catch (error) {\n                context.notificationService.error('Error executing mutation: ' + error.message);\n            }\n        },\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Default Strategy Class Definition\nDESCRIPTION: Class implementation of the ProductVariantPriceUpdateStrategy interface providing default price update behavior.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/product-variant-price-update-strategy.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultProductVariantPriceUpdateStrategy implements ProductVariantPriceUpdateStrategy {\n    constructor(options: DefaultProductVariantPriceUpdateStrategyOptions)\n    onPriceCreated(ctx: RequestContext, price: ProductVariantPrice) => ;\n    onPriceUpdated(ctx: RequestContext, updatedPrice: ProductVariantPrice, prices: ProductVariantPrice[]) => ;\n    onPriceDeleted(ctx: RequestContext, deletedPrice: ProductVariantPrice, prices: ProductVariantPrice[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VendureConfig API Options in TypeScript\nDESCRIPTION: Demonstrates the breaking change in how API-related options are configured in the VendureConfig object. Options such as hostname, port, and middleware are now nested under a new apiOptions property.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nconst config: VendureConfig = {\n  port: 3000,\n  middleware: [/*...*/],\n  // ...\n}\n\n// after\nconst config: VendureConfig = {\n  apiOptions: {\n      port: 3000,\n      middleware: [/*...*/],\n  },\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Job to the Queue with Promise-based Result\nDESCRIPTION: This example shows how to add a job to the queue and convert the updates to a Promise, which resolves with the final result of the job. It's useful when intermediate progress updates are not needed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst job = await this.myQueue.add({ intervalMs, shouldFail }, { retries: 2 });\nreturn job.updates().toPromise()\n  .then(update => update.result),\n  .catch(err => err.message);\n```\n\n----------------------------------------\n\nTITLE: Updating S3 Asset Storage Configuration in Vendure TypeScript\nDESCRIPTION: Shows the configuration change for the S3AssetStorageStrategy in Vendure's AssetServerPlugin, effective from v1.0.0. The `region` option should now be placed inside the `nativeS3Configuration` object instead of being a direct property of the strategy options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Old configuration\nS3AssetStorageStrategy({ region: '...' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// New configuration (v1.0.0+)\nS3AssetStorageStrategy({\n  nativeS3Configuration: {\n    region: '...'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Named GraphQL Query Example\nDESCRIPTION: Shows how to define a named query operation\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetCustomers {\n  customers {\n    id\n    name\n    email\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Facet Values in Vendure GraphQL\nDESCRIPTION: GraphQL mutation for deleting one or more FacetValues (product attribute values). Takes an array of FacetValue IDs and optional force parameter, and returns an array of DeletionResponse objects.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_46\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  deleteFacetValues(ids: [ID!]!, force: Boolean): [DeletionResponse!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailTransportOptions TypeScript Interface\nDESCRIPTION: Defines a union type that includes all possible transport options (e.g., SMTP, Sendmail, File, SES, and others) for sending emails in the Vendure e-commerce framework using the Vendure Email Plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/email-plugin/transport-options.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype EmailTransportOptions = | SMTPTransportOptions\n    | SendmailTransportOptions\n    | FileTransportOptions\n    | NoopTransportOptions\n    | SESTransportOptions\n    | TestingTransportOptions\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionGroupTranslation GraphQL Type for Vendure E-commerce\nDESCRIPTION: This GraphQL type defines the structure of a ProductOptionGroupTranslation, including its properties such as id, createdAt, updatedAt, languageCode, and name. It represents the translated data for a product option group.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_92\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype ProductOptionGroupTranslation {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  languageCode: LanguageCode!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: TypedBaseDetailComponent Class Definition in TypeScript\nDESCRIPTION: Defines the TypedBaseDetailComponent class that extends BaseDetailComponent and works with TypedDocumentNode for type-safe GraphQL operations. It provides generic typing for GraphQL query results and entity fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/typed-base-detail-component.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TypedBaseDetailComponent<T extends TypedDocumentNode<any, any>, Field extends keyof ResultOf<T>> extends BaseDetailComponent<NonNullable<ResultOf<T>[Field]>> {\n    protected result$: Observable<ResultOf<T>>;\n    protected entity: ResultOf<T>[Field];\n    constructor()\n    init() => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProductOptionGroupTranslationInput Input Type in GraphQL\nDESCRIPTION: Specifies input for translating product option group details, including language code, name, and custom fields.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_120\n\nLANGUAGE: GraphQL\nCODE:\n```\ninput ProductOptionGroupTranslationInput {\n  id: ID\n  languageCode: LanguageCode!\n  name: String\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultJobQueuePlugin with Advanced Options\nDESCRIPTION: Example of configuring the DefaultJobQueuePlugin with advanced options including backoffStrategy and setRetries.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/default-job-queue-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config: VendureConfig = {\n  plugins: [\n    DefaultJobQueuePlugin.init({\n      pollInterval: 5000,\n      concurrency: 2\n      backoffStrategy: (queueName, attemptsMade, job) => {\n        if (queueName === 'transcode-video') {\n          // exponential backoff example\n          return (attemptsMade ** 2) * 1000;\n        }\n\n        // A default delay for all other queues\n        return 1000;\n      },\n      setRetries: (queueName, job) => {\n        if (queueName === 'send-email') {\n          // Override the default number of retries\n          // for the 'send-email' job because we have\n          // a very unreliable email service.\n          return 10;\n        }\n        return job.retries;\n      }\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL Customer Type Definition\nDESCRIPTION: Shows the structure of a basic GraphQL type definition for a Customer\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Customer {\n  id: ID!\n  name: String!\n  email: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Customers from Groups in GraphQL\nDESCRIPTION: Defines a mutation to remove Customers from a CustomerGroup, taking customerGroupId and an array of customerIds as parameters.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_79\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  removeCustomersFromGroup(customerGroupId: ID!, customerIds: [ID!]!): CustomerGroup!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Int Scalar in GraphQL\nDESCRIPTION: Defines the standard `Int` scalar type in GraphQL. It represents a non-fractional, signed, 32-bit whole numeric value, ranging from -(2^31) to 2^31 - 1.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_82\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nThe `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.\n\"\"\"\nscalar Int\n```\n\n----------------------------------------\n\nTITLE: ExecutePromotionOrderActionFn Type Definition\nDESCRIPTION: Type definition for the function used by a PromotionOrderAction to calculate the discount on the Order. It receives context, order, args, state, and promotion objects and returns a number representing the discount.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-action.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExecutePromotionOrderActionFn<T extends ConfigArgs, U extends Array<PromotionCondition<any>>> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    state: ConditionState<U>,\n    promotion: Promotion,\n) => number | Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List\nDESCRIPTION: This snippet uses the DocCardList component to render a list of documentation cards. It is part of the React component hierarchy used for building the documentation structure dynamically. The DocCardList component is a central piece in showcasing available documentation entries in an organized card format.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/entities/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: FormField Component Function Signature\nDESCRIPTION: This code snippet shows the TypeScript function signature for the FormField component. It defines the props that can be passed to the component, including label, tooltip, invalid state, and error message.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/react-components/form-field.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction FormField(props: PropsWithChildren<{\n        for?: string;\n        label?: string;\n        tooltip?: string;\n        invalid?: boolean;\n        errorMessage?: string;\n    }>): void\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL AlreadyLoggedInError Type\nDESCRIPTION: AlreadyLoggedInError represents an error condition when a customer attempts to access an order while already logged in. It helps manage client-side errors with defined error codes and messages.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nReturned when attempting to set the Customer for an Order when already logged in.\n\"\"\"\ntype AlreadyLoggedInError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: ActionBarDropdownMenuItem Interface Definition in TypeScript\nDESCRIPTION: Defines the structure of a dropdown menu item in the action bar, including properties for identification, display, behavior control, and permission management.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-dropdown-menu-item.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActionBarDropdownMenuItem {\n    id: string;\n    label: string;\n    locationId: ActionBarLocationId;\n    hasDivider?: boolean;\n    buttonState?: (context: ActionBarContext) => Observable<ActionBarButtonState | undefined>;\n    onClick?: (event: MouseEvent, context: ActionBarContext) => void;\n    routerLink?: RouterLinkDefinition;\n    icon?: string;\n    requiresPermission?: string | string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Permission in Vendure\nDESCRIPTION: Creates a new permission definition for inventory syncing functionality using the PermissionDefinition class. This defines a single permission that can be used to control access to inventory sync operations.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-permissions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PermissionDefinition } from '@vendure/core';\n\nexport const sync = new PermissionDefinition({\n    name: 'SyncInventory',\n    description: 'Allows syncing stock levels via Admin API'\n});\n```\n\n----------------------------------------\n\nTITLE: BaseEntityResolver Class Definition in TypeScript\nDESCRIPTION: This snippet shows the class definition of BaseEntityResolver. It is a generic class that takes a type parameter T representing the entity type. The constructor accepts a router, an empty entity object, and a function to stream entity data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/list-detail-views/base-entity-resolver.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass BaseEntityResolver<T> {\n    constructor(router: Router, emptyEntity: T, entityStream: (id: string) => Observable<T | null | undefined>)\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigArgs UI Component Configuration\nDESCRIPTION: Illustrates how to specify custom UI components for the Admin UI, including select and password input examples.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/config-args.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  operator: {\n    type: 'string',\n    ui: {\n      component: 'select-form-input',\n      options: [\n        { value: 'startsWith' },\n        { value: 'endsWith' },\n        { value: 'contains' },\n        { value: 'doesNotContain' },\n      ],\n    },\n  },\n  secretKey: {\n    type: 'string',\n    ui: { component: 'password-form-input' },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Documentation Card List Component\nDESCRIPTION: This HTML snippet includes the DocCardList component in the page layout. This component is part of the theme and is likely used to list documentation cards, providing an organized structure for displaying related documentation sections.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/index.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining NativeAuthStrategyError Type in GraphQL\nDESCRIPTION: Represents an error returned when attempting an operation that relies on the NativeAuthStrategy, if that strategy is not configured.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_62\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype NativeAuthStrategyError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the RefundProcess Interface in TypeScript\nDESCRIPTION: Interface definition for RefundProcess which extends InjectableStrategy. It provides a state machine framework for managing refund states and transitions with hooks for validation and execution logic.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/refund-process.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RefundProcess<State extends keyof CustomRefundStates | string> extends InjectableStrategy {\n    transitions?: Transitions<State, State | RefundState> & Partial<Transitions<RefundState | State>>;\n    onTransitionStart?: OnTransitionStartFn<State | RefundState, RefundTransitionData>;\n    onTransitionEnd?: OnTransitionEndFn<State | RefundState, RefundTransitionData>;\n    onTransitionError?: OnTransitionErrorFn<State | RefundState>;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Zone in GraphQL\nDESCRIPTION: This mutation type updates an existing Zone. It takes a UpdateZoneInput object as input and returns the updated Zone object.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_136\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Mutation {\n  updateZone(input: UpdateZoneInput!): Zone!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PaymentMethodHandler createPayment Method in TypeScript\nDESCRIPTION: Shows how to update custom PaymentMethodHandlers to use the new 'amount' argument instead of 'order.total' when creating a new payment.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// before\ncreatePayment: async (ctx, order, args, metadata) {\n  const transactionAmount = order.total;\n  // ...\n}\n\n// after\ncreatePayment: async (ctx, order, amount, args, metadata) {\n  const transactionAmount = amount;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: TemplateLoader Interface Definition\nDESCRIPTION: Interface definition for the TemplateLoader, specifying required methods for loading email templates and optional partials. Includes loadTemplate method for template rendering and optional loadPartials method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/content/typescript-api/core-plugins/email-plugin/custom-template-loader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface TemplateLoader {\n  loadTemplate(injector: Injector, ctx: RequestContext, input: LoadTemplateInput): Promise<string>;\n  loadPartials?(): Promise<Partial[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin UI Extensions in Vendure\nDESCRIPTION: Example of the new API for configuring Admin UI extensions in Vendure 0.5.0. This allows defining multiple Angular modules in a single extension.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// New API\nextensions: [\n    {\n        extensionPath: path.join(__dirname, 'ui-extensions/greeter'),\n        ngModules: [{\n            type: 'lazy',\n            ngModuleFileName: 'greeter-extension.module.ts',\n            ngModuleName: 'GreeterModule',\n        }],\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: ProductVariantSelectorComponent TypeScript Class Definition\nDESCRIPTION: The TypeScript class definition for ProductVariantSelectorComponent showing its properties and methods. It handles product variant search functionality and selection events.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/components/product-variant-selector-component.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ProductVariantSelectorComponent implements OnInit {\n    searchInput$ = new Subject<string>();\n    searchLoading = false;\n    searchResults$: Observable<ProductSelectorSearchQuery['search']['items']>;\n    @Output() productSelected = new EventEmitter<ProductSelectorSearchQuery['search']['items'][number]>();\n    constructor(dataService: DataService)\n    ngOnInit() => void;\n    selectResult(product?: ProductSelectorSearchQuery['search']['items'][number]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Strategy Implementation Example\nDESCRIPTION: Example configuration showing how to implement the DefaultProductVariantPriceUpdateStrategy with channel synchronization enabled.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/product-variant-price-update-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultProductVariantPriceUpdateStrategy, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  // ...\n  catalogOptions: {\n    // highlight-start\n    productVariantPriceUpdateStrategy: new DefaultProductVariantPriceUpdateStrategy({\n      syncPricesAcrossChannels: true,\n    }),\n    // highlight-end\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: GraphQL API Extension Structure\nDESCRIPTION: Directory structure showing the location of GraphQL API extensions\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: txt\nCODE:\n```\n├── wishlist-plugin\n    ├── wishlist.plugin.ts\n    ├── api\n        // highlight-next-line\n        ├── api-extensions.ts\n```\n\n----------------------------------------\n\nTITLE: Updating S3 Storage Strategy Configuration\nDESCRIPTION: Changes required for the s3 storage strategy configuration in AssetServerPlugin to support AWS SDK v3 with MinIO compatibility.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/migrating-from-v1/breaking-api-changes.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnativeS3Configuration: {\n  endpoint: 'http://localhost:9000',\n-  s3ForcePathStyle: true,\n+  forcePathStyle: true,\n  signatureVersion: 'v4',\n+  region: 'eu-west-1',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Plugin From Address in TypeScript\nDESCRIPTION: Example of setting the 'from' field in the email plugin configuration. This allows specifying the sender address for emails sent by the plugin.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nfromAddress: \"\\\"My Store\\\" <noreply@example.com>\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation in JSX\nDESCRIPTION: This code snippet imports custom React components used for rendering documentation. It includes components for displaying member information, generation details, and member descriptions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n```\n\n----------------------------------------\n\nTITLE: LocationWithQuantity Interface Definition in TypeScript\nDESCRIPTION: Defines the LocationWithQuantity interface used to indicate how much stock from each location should be used in inventory operations, containing a location reference and quantity value.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/products-stock/stock-location-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LocationWithQuantity {\n    location: StockLocation;\n    quantity: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Relations Decorator with Custom Depth\nDESCRIPTION: This example shows how to use the Relations decorator with a custom depth option, which determines how deep the decorator should analyze nested fields in the GraphQL query.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/request/relations-decorator.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n@Relations({ entity: Order, depth: 2 }) relations: RelationPaths<Order>,\n```\n\n----------------------------------------\n\nTITLE: Middleware Interface Definition in TypeScript\nDESCRIPTION: This code defines the Middleware interface used in Vendure. It specifies the structure for configuring middleware, including the handler, route, and beforeListen properties.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Middleware {\n    handler: MiddlewareHandler;\n    route: string;\n    beforeListen?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmailAddressConflictError Type in GraphQL\nDESCRIPTION: Defines an error type returned when attempting to create a Customer with an email address already registered to an existing User.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_60\n\nLANGUAGE: graphql\nCODE:\n```\ntype EmailAddressConflictError {\n  errorCode: ErrorCode!\n  message: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Greeter Component\nDESCRIPTION: Example of a simple Angular component that displays a greeting message in the Admin UI\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SharedModule } from '@vendure/admin-ui/core';\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'greeter',\n    template: `\n        <vdr-page-block>\n            <h2>{{ greeting }}</h2>\n        </vdr-page-block>`,\n    standalone: true,\n    imports: [SharedModule],\n})\nexport class GreeterComponent {\n    greeting = 'Hello!';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OrderInterceptorError GraphQL Type\nDESCRIPTION: GraphQL type definition for OrderInterceptorError, returned when an order operation is rejected by an OrderInterceptor method. Contains error code, message, and specific interceptor error details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_113\n\nLANGUAGE: graphql\nCODE:\n```\ntype OrderInterceptorError {\n  errorCode: ErrorCode!\n  message: String!\n  interceptorError: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer Note in TypeScript\nDESCRIPTION: Updates an existing note (HistoryEntry) associated with a customer. Requires the request context and an input object containing the note ID and the updated content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/customer-service.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nupdateCustomerNote(ctx: RequestContext, input: UpdateCustomerNoteInput) => Promise<HistoryEntry>\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List in JSX\nDESCRIPTION: This code snippet renders a DocCardList component, which is likely used to display a list of documentation cards for the service helpers.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/service-helpers/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Querying Province by ID in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve a Province by its ID.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_29\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  province(id: ID!): Province\n}\n```\n\n----------------------------------------\n\nTITLE: Angular Router Link Example\nDESCRIPTION: Example of creating a link to a custom route in Angular\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a class=\"button-ghost\" [routerLink]=\"['/extensions/my-plugin/my-custom-route']\">\n    John Smith\n</a>\n```\n\n----------------------------------------\n\nTITLE: Basic ConfigArgs Data Types Example\nDESCRIPTION: Demonstrates the basic structure of ConfigArgs with different data types including string, int, and boolean.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/config-args.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  apiKey: { type: 'string' },\n  maxRetries: { type: 'int' },\n  logErrors: { type: 'boolean' },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActionBarLocationId Type in TypeScript\nDESCRIPTION: Type definition that aliases ActionBarLocationId to PageLocationId, used for specifying valid locations for action bar items in the Vendure admin UI.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/action-bar/action-bar-location-id.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ActionBarLocationId = PageLocationId\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Currency Code in Core\nDESCRIPTION: Fixes an issue related to updating the currency code of a channel in the core functionality.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v2.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"**core** Fix updating channel currencyCode ([7e01ecf](https://github.com/vendure-ecommerce/vendure/commit/7e01ecf)), closes [#2114](https://github.com/vendure-ecommerce/vendure/issues/2114)\"\n```\n\n----------------------------------------\n\nTITLE: Search Products GraphQL Query Example\nDESCRIPTION: Example GraphQL query showing how to access custom mappings in search results.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery SearchProducts($input: SearchInput!) {\n    search(input: $input) {\n        totalItems\n        items {\n            productId\n            productName\n            customProductMappings {\n                variantCount\n                reviewRating\n            }\n            customMappings {\n                ...on CustomProductMappings {\n                    variantCount\n                    reviewRating\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Method Example in TypeScript\nDESCRIPTION: Example implementation of the init method showing how to use the injector to access services during setup.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/common/injectable-strategy.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync init(injector: Injector) {\n  const myService = injector.get(MyService);\n  await myService.doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Product Mappings Example\nDESCRIPTION: Example demonstrating how to define custom product mappings with GraphQL types and value functions.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/elasticsearch-plugin/elasticsearch-options.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncustomProductMappings: {\n   variantCount: {\n       graphQlType: 'Int!',\n       valueFn: (product, variants) => variants.length,\n   },\n   reviewRating: {\n       graphQlType: 'Float',\n       public: true,\n       valueFn: product => (product.customFields as any).reviewRating,\n   },\n   priority: {\n       graphQlType: 'Int!',\n       public: false,\n       valueFn: product => (product.customFields as any).priority,\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UuidIdStrategy Example in TypeScript\nDESCRIPTION: Example showing how to configure Vendure to use UUID-based entity IDs in the VendureConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configuration/entity-id-strategy.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UuidIdStrategy, VendureConfig } from '@vendure/core';\n\nexport const config: VendureConfig = {\n  entityOptions: {\n    entityIdStrategy: new UuidIdStrategy(),\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Fragment in a Query Operation\nDESCRIPTION: This query operation demonstrates how to use the previously defined CustomerFields fragment to retrieve customer data.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/getting-started/graphql-intro/index.mdx#2025-04-22_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\nquery GetCustomers{\n  customers {\n    ...CustomerFields\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Field Types\nDESCRIPTION: Declares TypeScript type definitions for the custom wishlist field on the Customer entity.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/plugins/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WishlistItem } from './entities/wishlist-item.entity';\n\ndeclare module '@vendure/core/dist/entity/custom-entity-fields' {\n  interface CustomCustomerFields {\n    wishlistItems: WishlistItem[];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DefaultLogger in Vendure\nDESCRIPTION: Shows how to configure the DefaultLogger with a specific log level in the Vendure configuration file.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/logging/index.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultLogger, VendureConfig } from '@vendure/core';\n\nconst config: VendureConfig = {\n    // ...\n    logger: new DefaultLogger({ level: LogLevel.Debug }),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for Review List Component\nDESCRIPTION: Route configuration for the review list component in the Vendure admin UI\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/creating-list-views/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerRouteComponent } from '@vendure/admin-ui/core';\n\nimport { ReviewListComponent } from './components/review-list/review-list.component';\n\nexport default [\n    registerRouteComponent({\n        path: '',\n        component: ReviewListComponent,\n        breadcrumb: 'Product reviews',\n    }),\n]\n```\n\n----------------------------------------\n\nTITLE: ConfigArgs List Type Configuration\nDESCRIPTION: Shows how to configure a list type argument that creates an array of the specified data type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/configurable-operation-def/config-args.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  aliases: {\n    type: 'string',\n    list: true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Float GraphQL Scalar Type\nDESCRIPTION: Declares the Float scalar type representing signed double-precision fractional values as specified by IEEE 754.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_38\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).\"\"\"\nscalar Float\n```\n\n----------------------------------------\n\nTITLE: React Link Component Example\nDESCRIPTION: Example of creating a link to a custom route in React\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/defining-routes/index.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Link } from '@vendure/admin-ui/react';\n\nexport function DemoComponent() {\n    return (\n        <Link className=\"button-ghost\" href=\"/extensions/my-plugin/my-custom-route\">\n            John Smith\n        </Link>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Previewing Collection Variants in TypeScript\nDESCRIPTION: Previews the product variants for a collection based on input criteria and options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/collection-service.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\npreviewCollectionVariants(ctx: RequestContext, input: PreviewCollectionVariantsInput, options?: ListQueryOptions<ProductVariant>, relations?: RelationPaths<Collection>): Promise<PaginatedList<ProductVariant>>\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageCode Enum in GraphQL for Vendure\nDESCRIPTION: This GraphQL enum defines language codes based on ISO 639-1 standards with optional region or script modifiers. It includes major spoken languages and widely-used variants, based on the Unicode CLDR summary list.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\nenum LanguageCode {\n  \"\"\"Afrikaans\"\"\"\n  af\n  \"\"\"Akan\"\"\"\n  ak\n  \"\"\"Albanian\"\"\"\n  sq\n  \"\"\"Amharic\"\"\"\n  am\n  \"\"\"Arabic\"\"\"\n  ar\n  \"\"\"Armenian\"\"\"\n  hy\n  \"\"\"Assamese\"\"\"\n  as\n  \"\"\"Azerbaijani\"\"\"\n  az\n  \"\"\"Bambara\"\"\"\n  bm\n  \"\"\"Bangla\"\"\"\n  bn\n  \"\"\"Basque\"\"\"\n  eu\n  \"\"\"Belarusian\"\"\"\n  be\n  \"\"\"Bosnian\"\"\"\n  bs\n  \"\"\"Breton\"\"\"\n  br\n  \"\"\"Bulgarian\"\"\"\n  bg\n  \"\"\"Burmese\"\"\"\n  my\n  \"\"\"Catalan\"\"\"\n  ca\n  \"\"\"Chechen\"\"\"\n  ce\n  \"\"\"Chinese\"\"\"\n  zh\n  \"\"\"Simplified Chinese\"\"\"\n  zh_Hans\n  \"\"\"Traditional Chinese\"\"\"\n  zh_Hant\n  \"\"\"Church Slavic\"\"\"\n  cu\n  \"\"\"Cornish\"\"\"\n  kw\n  \"\"\"Corsican\"\"\"\n  co\n  \"\"\"Croatian\"\"\"\n  hr\n  \"\"\"Czech\"\"\"\n  cs\n  \"\"\"Danish\"\"\"\n  da\n  \"\"\"Dutch\"\"\"\n  nl\n  \"\"\"Flemish\"\"\"\n  nl_BE\n  \"\"\"Dzongkha\"\"\"\n  dz\n  \"\"\"English\"\"\"\n  en\n  \"\"\"Australian English\"\"\"\n  en_AU\n  \"\"\"Canadian English\"\"\"\n  en_CA\n  \"\"\"British English\"\"\"\n  en_GB\n  \"\"\"American English\"\"\"\n  en_US\n  \"\"\"Esperanto\"\"\"\n  eo\n  \"\"\"Estonian\"\"\"\n  et\n  \"\"\"Ewe\"\"\"\n  ee\n  \"\"\"Faroese\"\"\"\n  fo\n  \"\"\"Finnish\"\"\"\n  fi\n  \"\"\"French\"\"\"\n  fr\n  \"\"\"Canadian French\"\"\"\n  fr_CA\n  \"\"\"Swiss French\"\"\"\n  fr_CH\n  \"\"\"Fulah\"\"\"\n  ff\n  \"\"\"Galician\"\"\"\n  gl\n  \"\"\"Ganda\"\"\"\n  lg\n  \"\"\"Georgian\"\"\"\n  ka\n  \"\"\"German\"\"\"\n  de\n  \"\"\"Austrian German\"\"\"\n  de_AT\n  \"\"\"Swiss High German\"\"\"\n  de_CH\n  \"\"\"Greek\"\"\"\n  el\n  \"\"\"Gujarati\"\"\"\n  gu\n  \"\"\"Haitian Creole\"\"\"\n  ht\n  \"\"\"Hausa\"\"\"\n  ha\n  \"\"\"Hebrew\"\"\"\n  he\n  \"\"\"Hindi\"\"\"\n  hi\n  \"\"\"Hungarian\"\"\"\n  hu\n  \"\"\"Icelandic\"\"\"\n  is\n  \"\"\"Igbo\"\"\"\n  ig\n  \"\"\"Indonesian\"\"\"\n  id\n  \"\"\"Interlingua\"\"\"\n  ia\n  \"\"\"Irish\"\"\"\n  ga\n  \"\"\"Italian\"\"\"\n  it\n  \"\"\"Japanese\"\"\"\n  ja\n  \"\"\"Javanese\"\"\"\n  jv\n  \"\"\"Kalaallisut\"\"\"\n  kl\n  \"\"\"Kannada\"\"\"\n  kn\n  \"\"\"Kashmiri\"\"\"\n  ks\n  \"\"\"Kazakh\"\"\"\n  kk\n  \"\"\"Khmer\"\"\"\n  km\n  \"\"\"Kikuyu\"\"\"\n  ki\n  \"\"\"Kinyarwanda\"\"\"\n  rw\n  \"\"\"Korean\"\"\"\n  ko\n  \"\"\"Kurdish\"\"\"\n  ku\n  \"\"\"Kyrgyz\"\"\"\n  ky\n  \"\"\"Lao\"\"\"\n  lo\n  \"\"\"Latin\"\"\"\n  la\n  \"\"\"Latvian\"\"\"\n  lv\n  \"\"\"Lingala\"\"\"\n  ln\n  \"\"\"Lithuanian\"\"\"\n  lt\n  \"\"\"Luba-Katanga\"\"\"\n  lu\n  \"\"\"Luxembourgish\"\"\"\n  lb\n  \"\"\"Macedonian\"\"\"\n  mk\n  \"\"\"Malagasy\"\"\"\n  mg\n  \"\"\"Malay\"\"\"\n  ms\n  \"\"\"Malayalam\"\"\"\n  ml\n  \"\"\"Maltese\"\"\"\n  mt\n  \"\"\"Manx\"\"\"\n  gv\n  \"\"\"Maori\"\"\"\n  mi\n  \"\"\"Marathi\"\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CRUD Permissions\nDESCRIPTION: Creates a set of CRUD permissions for a new ProductReview entity using CrudPermissionDefinition.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-permissions/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CrudPermissionDefinition } from '@vendure/core';\n\nexport const productReviewPermission = new CrudPermissionDefinition('ProductReview');\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Documentation Card List - JSX\nDESCRIPTION: This snippet imports the DocCardList component from a theme package and uses it in JSX to display a list of documentation cards. It relies on the theme-provided React component and expects the documentation site to support JSX syntax and React components for rendering. The main output is a rendered documentation card list within the generated documentation page.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/auth/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Angular Provider Registration\nDESCRIPTION: Registration of the custom form input component in Angular providers configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/extending-the-admin-ui/custom-form-inputs/index.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerFormInputComponent } from '@vendure/admin-ui/core';\nimport { SliderControlComponent } from './components/slider-form-input/slider-form-input.component';\n\nexport default [\n    registerFormInputComponent('slider-form-input', SliderControlComponent),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining JobData Type in TypeScript\nDESCRIPTION: Type definition for job payload data ensuring JSON compatibility.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/job-queue/types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype JobData<T> = JsonCompatible<T>\n```\n\n----------------------------------------\n\nTITLE: Logger Class Definition (TypeScript)\nDESCRIPTION: The structure of the Logger class, which implements the LoggerService interface. It includes methods for different log levels and a property for the VendureLogger instance.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/logger/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Logger implements LoggerService {\n    logger: VendureLogger\n    error(message: string, context?: string, trace?: string) => void;\n    warn(message: string, context?: string) => void;\n    info(message: string, context?: string) => void;\n    verbose(message: string, context?: string) => void;\n    debug(message: string, context?: string) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: HealthCheckRegistryService Class Signature\nDESCRIPTION: Class signature showing the structure of HealthCheckRegistryService with its registerIndicatorFunction method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/health-check/health-check-registry-service.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass HealthCheckRegistryService {\n    registerIndicatorFunction(fn: HealthIndicatorFunction | HealthIndicatorFunction[]) => ;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Storage in Vendure\nDESCRIPTION: Configuration for the AssetServerPlugin using local disk storage with a configurable upload directory via environment variables.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/deployment/deploy-to-render/index.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VendureConfig } from '@vendure/core';\nimport { AssetServerPlugin } from '@vendure/asset-server-plugin';\n\nexport const config: VendureConfig = {\n    // ...\n    plugins: [\n        AssetServerPlugin.init({\n            route: 'assets',\n            assetUploadDir: process.env.ASSET_UPLOAD_DIR || path.join(__dirname, '../static/assets'),\n        }),\n    ],\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Custom Fields\nDESCRIPTION: Example of creating a private custom field that is not exposed in the Shop API.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/custom-fields/index.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = {\n    // ...\n    customFields: {\n        Product: [\n            {\n                name: 'profitMargin',\n                type: 'int',\n                // highlight-next-line\n                public: false,\n            },\n        ]\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Devtools Package\nDESCRIPTION: Command to install the NestJS devtools integration package via npm.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/nest-devtools/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @nestjs/devtools-integration\n```\n\n----------------------------------------\n\nTITLE: Querying Shipping Calculators in GraphQL\nDESCRIPTION: Defines a GraphQL query to retrieve all available Shipping Calculators.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/queries.md#2025-04-22_snippet_36\n\nLANGUAGE: GraphQL\nCODE:\n```\ntype Query {\n  shippingCalculators: [ConfigurableOperationDefinition!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated Worker for Video Transcoding\nDESCRIPTION: Shows how to configure a specialized worker for handling specific job types using activeQueues configuration.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/worker-job-queue/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapWorker, mergeConfig } from '@vendure/core';\nimport { config } from './vendure-config';\n\nconst transcoderConfig = mergeConfig(config, {\n    jobQueueOptions: {\n      activeQueues: ['transcode-video'],\n    }\n});\n\nbootstrapWorker(transcoderConfig)\n  .then(worker => worker.startJobQueue())\n  .catch(err => {\n    console.log(err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom HistoryEntry Type in Vendure Plugin\nDESCRIPTION: Example of extending the GraphQL HistoryEntryType enum in a Vendure plugin to add a custom CUSTOMER_TAX_ID_VERIFICATION type.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/services/history-service.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PluginCommonModule, VendurePlugin } from '@vendure/core';\nimport { VerificationService } from './verification.service';\n\n@VendurePlugin({\n  imports: [PluginCommonModule],\n  adminApiExtensions: {\n    schema: gql`\n      extend enum HistoryEntryType {\n        CUSTOMER_TAX_ID_VERIFICATION\n      }\n    `,\n  },\n  providers: [VerificationService],\n})\nexport class TaxIDVerificationPlugin {}\n```\n\n----------------------------------------\n\nTITLE: Defining Promotion Type in GraphQL Schema\nDESCRIPTION: GraphQL type definition for the Promotion entity, which contains information about promotions including their conditions, actions, and usage limits.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_98\n\nLANGUAGE: graphql\nCODE:\n```\ntype Promotion {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  startsAt: DateTime\n  endsAt: DateTime\n  couponCode: String\n  perCustomerUsageLimit: Int\n  usageLimit: Int\n  name: String!\n  description: String!\n  enabled: Boolean!\n  conditions: [ConfigurableOperation!]!\n  actions: [ConfigurableOperation!]!\n  translations: [PromotionTranslation!]!\n  customFields: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Customer Avatar Upload Component\nDESCRIPTION: React component for uploading customer avatars using the custom mutation\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/developer-guide/uploading-files/index.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { gql, useMutation } from \"@apollo/client\";\n\nconst MUTATION = gql`\n  mutation SetCustomerAvatar($file: Upload!) {\n    setCustomerAvatar(file: $file) {\n      id\n      name\n      fileSize\n    }\n  }\n`;\n\nfunction UploadAvatar() {\n  const [mutate] = useMutation(MUTATION);\n\n  function onChange(event) {\n    const { target } = event;  \n    if (target.validity.valid && target.files.length === 1) {\n      mutate({ \n        variables: {\n          file: target.files[0],\n        }  \n      });\n    }\n  }\n\n  return <input type=\"file\" required onChange={onChange} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation in Vendure\nDESCRIPTION: Imports various React components used for rendering documentation. The components include MemberInfo, GenerationInfo, MemberDescription, and DocCardList which are used to display structured documentation content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/admin-ui-api/nav-menu/index.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport MemberInfo from '@site/src/components/MemberInfo';\nimport GenerationInfo from '@site/src/components/GenerationInfo';\nimport MemberDescription from '@site/src/components/MemberDescription';\n\n\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining a Check Function for PromotionCondition in TypeScript\nDESCRIPTION: Type definition for a function that checks whether an Order satisfies a PromotionCondition, returning either a boolean or an object containing state information.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/promotions/promotion-condition.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckPromotionConditionFn<T extends ConfigArgs, R extends CheckPromotionConditionResult> = (\n    ctx: RequestContext,\n    order: Order,\n    args: ConfigArgValues<T>,\n    promotion: Promotion,\n) => R | Promise<R>\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Vendure Website\nDESCRIPTION: This command generates static content into the 'build' directory, which can be served using any static content hosting service.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card List Component\nDESCRIPTION: This code snippet renders a DocCardList component which likely displays a list of documentation cards related to Fulfillment functionality in Vendure.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/fulfillment/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining DeletionResult Enum in GraphQL Schema for Vendure\nDESCRIPTION: A GraphQL enum that represents the possible outcomes of a deletion operation in the Vendure system. It has two values: DELETED for successful deletions and NOT_DELETED when deletion could not be performed for some reason.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/enums.md#2025-04-22_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nenum DeletionResult {\n\"\"\"The entity was successfully deleted\"\"\"\nDELETED\n\"\"\"Deletion did not take place, reason given in message\"\"\"\nNOT_DELETED\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin UI Extensions Before Refactoring in TypeScript\nDESCRIPTION: Example of how the Admin UI extensions were configured before the architectural changes. The extensions were passed directly to the AdminUiPlugin.init() method.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nAdminUiPlugin.init({\n    port: 3002,\n    extensions: [\n        ReviewsPlugin.uiExtensions,\n        RewardsPlugin.uiExtensions,\n    ],\n    watch: true,\n}),\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Format in Markdown\nDESCRIPTION: Shows the required format for the CHANGELOG.md file that must be included with Vendure plugins submitted to Vendure Hub.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## 1.6.1 (2024-06-07)\n\n- Fix a bug where the `foo` was not correctly bar (Fixes [#123](https://github.com/myorg/my-repo/issues/31))\n\n## 1.6.0 (2024-03-11)\n\n- Add a new feature to the `bar` service\n- Update the `baz` service to use the new `qux` method\n\n... etc\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Configuration Format in Vendure\nDESCRIPTION: Example showing the breaking change in plugin configuration format. The change requires using the static .init() method to pass options to plugins instead of instantiating them directly.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/CHANGELOG_v1.md#2025-04-22_snippet_43\n\nLANGUAGE: TypeScript\nCODE:\n```\n// before\nplugins: [ new AdminUiPlugin({ port: 3002 }) ],\n\n// after\nplugins: [ AdminUiPlugin.init({ port: 3002 }) ],\n```\n\n----------------------------------------\n\nTITLE: Defining SettlePaymentResult Interface in TypeScript\nDESCRIPTION: This interface defines the structure of the object returned by the SettlePaymentFn when the payment has been successfully settled. It includes properties for success status and metadata.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/typescript-api/payment/payment-method-types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SettlePaymentResult {\n    success: true;\n    metadata?: PaymentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Vendure Create with Log Level Option\nDESCRIPTION: Example showing how to control the verbosity of output during installation using the --log-level flag. Valid options are 'silent', 'info', and 'verbose', with 'info' being the default.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/packages/create/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @vendure/create my-app --log-level verbose\n```\n\n----------------------------------------\n\nTITLE: Displaying ASCII Art Emoticons\nDESCRIPTION: ASCII art emoticons used as a placeholder for unwritten content.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/TODO.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n( ° ᴗ°)~ð (/❛o❛\\)\n```\n\n----------------------------------------\n\nTITLE: Defining the Vendure Complexity Estimator Function in TypeScript\nDESCRIPTION: This TypeScript function definition describes the defaultVendureComplexityEstimator, which serves as a configurable mechanism for evaluating the computational cost of GraphQL queries in the Vendure e-commerce framework. It accepts a custom complexity factor mapping to tailor the estimation for specific field paths and an optional flag to log field-level complexity scores for debugging or monitoring. The function is intended to be used in conjunction with the @vendure/harden-plugin and requires the presence of Vendure's GraphQL schema context; the 'customComplexityFactors' is an object with string paths as keys and numbers as factors, and 'logFieldScores' is a boolean controlling the output of score logs. Input consists of these two parameters, and while the function signature returns void, it impacts operation by modifying query complexity assessment. If the 'take' argument is omitted in paginated types, a default complexity of 1000 is assumed.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/core-plugins/harden-plugin/default-vendure-complexity-estimator.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction defaultVendureComplexityEstimator(customComplexityFactors: { [path: string]: number }, logFieldScores: boolean): void\n```\n\n----------------------------------------\n\nTITLE: Defining SetCustomerForOrderResult Union GraphQL type for Vendure e-commerce\nDESCRIPTION: GraphQL union type definition for the possible results of setting a customer for an order. Includes success case (Order) and various error cases for handling different failure scenarios.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_121\n\nLANGUAGE: graphql\nCODE:\n```\nunion SetCustomerForOrderResult =\n  Order | AlreadyLoggedInError | EmailAddressConflictError | NoActiveOrderError | GuestCheckoutError\n```\n\n----------------------------------------\n\nTITLE: Querying a facet by ID in GraphQL\nDESCRIPTION: This query returns information about a Facet identified by its ID. The Facet object is a conceptual entity used to categorize or filter content in the Vendure platform. The 'id' parameter is required.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/queries.md#2025-04-22_snippet_8\n\nLANGUAGE: GraphQL\nCODE:\n```\n\"\"\"\nReturns a Facet by its id\n\"\"\"\ntype Query {\n    facet(id: ID!): Facet\n}\n```\n\n----------------------------------------\n\nTITLE: Example Plugin README.md Template\nDESCRIPTION: Template for creating a comprehensive README.md file for a Vendure plugin, including installation instructions and usage guidelines.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/guides/how-to/publish-plugin/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Acme Loyalty Points Plugin\n\nThis plugin adds a loyalty points system to your Vendure store.\n\n## Installation\n\n```bash\nnpm install @acme/vendure-plugin-loyalty-points\n```\n\nAdd the plugin to your Vendure config:\n\n```ts\n// vendure-config.ts\nimport { LoyaltyPointsPlugin } from '@acme/vendure-plugin-loyalty-points';\n\nexport const config = {\n    //...\n    plugins: [\n        LoyaltyPointsPlugin.init({\n            enablePartialRedemption: true,\n        }),\n    ],\n};\n```\n\n[If your plugin includes UI extensions]\nIf not already installed, install the `@vendure/ui-devkit` package:\n\n```bash\nnpm install @vendure/ui-devkit\n```\n\nThen set up the compilation of the UI extensions for the Admin UI:\n\n```ts\n// vendure-config.ts\nimport { compileUiExtensions } from '@vendure/ui-devkit/compiler';\nimport { LoyaltyPointsPlugin } from '@acme/vendure-plugin-loyalty-points';\n\n// ...\nplugins: [\n  AdminUiPlugin.init({\n    route: 'admin',\n    port: 3002,\n    app: compileUiExtensions({\n      outputPath: path.join(__dirname, '../admin-ui'),\n      extensions: [LoyaltyPointsPlugin.uiExtensions],\n      devMode: false,\n    })\n  }),\n],\n```\n[/If your plugin includes UI extensions]\n\n## Usage\n\nDescribe how to use your plugin here. Make sure to cover the key\nfunctionality and any configuration options. Include examples\nwhere possible.\n\nMake sure to document any extensions made to the GraphQL APIs,\nas well as how to integrate the plugin with a storefront app.\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Options with GraphQL Mutation\nDESCRIPTION: GraphQL mutation for deleting a product option. Requires the ID of the product option to delete and returns a DeletionResponse with information about the deletion result.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/mutations.md#2025-04-22_snippet_52\n\nLANGUAGE: graphql\nCODE:\n```\n\"\"\"\nDelete a ProductOption\n\"\"\"\ntype Mutation {\n  deleteProductOption(id: ID!): DeletionResponse!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RefundStateTransitionError Object Type in GraphQL\nDESCRIPTION: GraphQL object type that represents an error that occurs during refund state transitions. It includes fields for error codes, messages, and transition details.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_156\n\nLANGUAGE: graphql\nCODE:\n```\ntype RefundStateTransitionError {\n  errorCode: ErrorCode!\n  message: String!\n  transitionError: String!\n  fromState: String!\n  toState: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchReindexResponse Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for the response of a search reindex operation, containing a single boolean field indicating success.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/object-types.md#2025-04-22_snippet_167\n\nLANGUAGE: graphql\nCODE:\n```\ntype SearchReindexResponse {\n  success: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TextStructFieldConfig Type in GraphQL\nDESCRIPTION: Defines a GraphQL type for configuring structured text fields. Contains fields for field definition and UI presentation but with fewer options than TextCustomFieldConfig.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/shop/object-types.md#2025-04-22_snippet_144\n\nLANGUAGE: graphql\nCODE:\n```\ntype TextStructFieldConfig {\n  name: String!\n  type: String!\n  list: Boolean!\n  label: [LocalizedString!]\n  description: [LocalizedString!]\n  ui: JSON\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FacetValueListOptions Input Type\nDESCRIPTION: Input type for paginating and filtering facet value lists with sorting and filtering options.\nSOURCE: https://github.com/vendure-ecommerce/vendure/blob/master/docs/docs/reference/graphql-api/admin/input-types.md#2025-04-22_snippet_88\n\nLANGUAGE: graphql\nCODE:\n```\ninput FacetValueListOptions {\n  skip: Int\n  take: Int\n  sort: FacetValueSortParameter\n  filter: FacetValueFilterParameter\n  filterOperator: LogicalOperator\n}\n```"
  }
]