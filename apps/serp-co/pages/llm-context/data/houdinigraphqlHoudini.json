[
  {
    "owner": "houdinigraphql",
    "repo": "houdini",
    "content": "TITLE: Configuring houdini.config.js for Global Stores - JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the `houdini.config.js` file to include the `houdini-plugin-svelte-global-stores` plugin. It shows how to set the `prefix` and `generate` options to customize the global store names and which operation types to generate stores for.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/plugin-svelte-global-stores/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/// <references types=\"houdini-svelte\">\n/// <references types=\"houdini-plugin-svelte-global-stores\">\n\n/** @type {import('houdini').ConfigFile} */\nconst config = {\n\n  plugins: {\n    'houdini-plugin-svelte-global-stores': {\n      prefix: 'GQL_', // Customizable prefix for global stores\n      generate: ['mutation', 'subscription', 'fragment'] // Types to generate stores for\n    },\n    'houdini-svelte': {}\n  }\n\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Generating Loads For Stores - TypeScript\nDESCRIPTION: This snippet demonstrates how to export `houdini_load` to generate loads for stores, enabling data prefetching in SvelteKit pages. It showcases exporting a single store or an array of stores for multiple queries.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/plugin-svelte-global-stores/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/myProfile/+page.ts\n\nimport { GQL_MyQuery, GQL_Query1, GQL_Query2 } from '$houdini'\n\nexport const houdini_load = GQL_MyQuery\n// or\nexport const houdini_load = [GQL_Query1, GQL_Query2]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Global Query Store - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import a globally accessible query store generated by the `houdini-plugin-svelte-global-stores` plugin. It assumes a query named `MyAwesomeQuery` exists and its corresponding global store `GQL_MyAwesomeQuery` has been generated.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/plugin-svelte-global-stores/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/routes/myRoute/+page.js\nimport { GQL_MyAwesomeQuery } from '$houdini'\n```\n\n----------------------------------------\n\nTITLE: Accessing Fragment Data from a Global Store - Svelte\nDESCRIPTION: This Svelte snippet illustrates how to use a global fragment store within a component. It retrieves the data for the `UserAvatar` fragment based on the provided `user` prop using the `.get` method, which returns a store containing the fragment data.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/plugin-svelte-global-stores/README.md#_snippet_4\n\nLANGUAGE: Svelte\nCODE:\n```\n<script>\n\timport { GQL_UserAvatar } from '$houdini'\n\n\t// the reference will get passed as a prop\n\texport let user\n\n\t// load the the required UserAvatar for this component\n\t$: data = GQL_UserAvatar.get(user)\n</script>\n\n<img src={$data.profilePicture} />\n```\n\n----------------------------------------\n\nTITLE: Using Query Store in SvelteKit Endpoint - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use a global query store inside a SvelteKit endpoint (API route). It fetches data using the `GQL_MyQuery.fetch` method, passing the `event` object from the route function to handle request-specific context. The fetched data is then returned in the response body.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/plugin-svelte-global-stores/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GQL_MyQuery } from '$houdini'\n\nexport async function get(event) {\n\tconst { data } = await GQL_MyQuery.fetch({ event })\n\n\treturn {\n\t\tbody: {\n\t\t\tdata\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Definition - GraphQL\nDESCRIPTION: This GraphQL snippet defines a simple query named `MyAwesomeQuery` that fetches the `isAwesome` field from the `viewer` object.  This query will be used with the global store plugin.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/plugin-svelte-global-stores/README.md#_snippet_1\n\nLANGUAGE: GraphQL\nCODE:\n```\n# src/lib/queries/MyAwesomeQuery.gql\n\nquery MyAwesomeQuery {\n\tviewer {\n\t\tisAwesome\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Houdini project\nDESCRIPTION: This command uses npm to create a new Houdini project named 'hello-houdini'. It fetches the latest version of the create-houdini package and executes it to scaffold the project with the required configurations and dependencies.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/packages/create-houdini/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create houdini@latest hello-houdini\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with npm\nDESCRIPTION: This command starts the development server for the Houdini documentation website. It uses npm to run the `dev` script defined in the `package.json` file. Optionally, the `-- --open` flag can be used to automatically open the application in a new browser tab.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/site/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Building Production Version with npm\nDESCRIPTION: This command builds a production-ready version of the Houdini documentation website. It utilizes npm to execute the `build` script specified in the `package.json` file. This typically involves minifying the code and optimizing assets for deployment.\nSOURCE: https://github.com/houdinigraphql/houdini/blob/main/site/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```"
  }
]