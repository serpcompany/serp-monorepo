[
  {
    "owner": "invertase",
    "repo": "stripe-firebase-extensions",
    "content": "TITLE: Initializing Stripe Payments SDK with Firebase\nDESCRIPTION: Initialize the Stripe Payments SDK by configuring it with a Firebase app instance and collection names for products and customers.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getApp } from \"@firebase/app\";\nimport { getStripePayments } from \"@invertase/firestore-stripe-payments\";\n\nconst app = getApp();\nconst payments = getStripePayments(app, {\n  productsCollection: \"products\",\n  customersCollection: \"customers\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Stripe Products with Prices\nDESCRIPTION: Retrieve active products with their associated prices using filters and pagination options.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProducts } from \"@invertase/firestore-stripe-payments\";\n\nconst products = await getProducts(payments, {\n  includePrices: true,\n  activeOnly: true,\n});\nfor (const product of products) {\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getProducts } from \"@invertase/firestore-stripe-payments\";\n\nconst products = await getProducts(payments, {\n  includePrices: true,\n  activeOnly: true,\n  where: [\n    [\"metadata.type\", \"==\", \"books\"],\n    [\"metadata.rating\", \">=\", 4],\n  ],\n  limit: 10,\n});\nfor (const product of products) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Stripe Subscription Updates\nDESCRIPTION: Set up real-time listeners for subscription changes to handle updates, additions, and other subscription events.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onCurrentUserSubscriptionUpdate } from \"@invertase/firestore-stripe-payments\";\n\nonCurrentUserSubscriptionUpdate(\n  payments,\n  (snapshot) => {\n    for (const change of snapshot.changes) {\n      if (change.type === \"added\") {\n        console.log(`New subscription added with ID: ${change.subscription.id}`);\n      }\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Active Subscriptions in Firestore for Stripe Integration\nDESCRIPTION: This code snippet shows how to query the Firestore database for a user's active or trialing subscriptions. It uses a snapshot listener to get real-time updates on the subscription status.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"subscriptions\")\n  .where(\"status\", \"in\", [\"trialing\", \"active\"])\n  .onSnapshot(async (snapshot) => {\n    // In this implementation we only expect one active or trialing subscription to exist.\n    const doc = snapshot.docs[0];\n    console.log(doc.id, \" => \", doc.data());\n  });\n```\n\n----------------------------------------\n\nTITLE: Initiating Subscription with Stripe Checkout\nDESCRIPTION: Creates a subscription checkout session and handles the redirect to Stripe Checkout page. Includes error handling and URL redirect logic.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    window.location.assign(url);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Prices to Checkout Session in Firebase with Stripe\nDESCRIPTION: This snippet demonstrates how to create a checkout session with multiple line items, including both recurring and one-time prices. It uses Firestore to store the checkout session data and includes tax rates for each item.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\", // RECURRING_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n      {\n        price: \"price_1HEtgDHYgolSBA35LMkO3ExX\", // ONE_TIME_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Stripe Firebase Integration\nDESCRIPTION: Comprehensive TypeScript type definitions and interfaces for the @invertase/firestore-stripe-payments package. Includes interfaces for payments, subscriptions, products, prices, and session management along with utility types and error handling.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/etc/firestore-stripe-payments.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FirebaseApp } from '@firebase/app';\nimport { WhereFilterOp } from '@firebase/firestore';\n\nexport interface CommonLineItemParams {\n    description?: string;\n    quantity?: number;\n}\n\nexport interface CommonSessionCreateParams {\n    allow_promotion_codes?: boolean;\n    automatic_tax?: boolean;\n    cancel_url?: string;\n    client_reference_id?: string;\n    metadata?: {\n        [key: string]: any;\n    };\n    mode?: \"subscription\" | \"payment\";\n    payment_method_types?: PaymentMethodType[];\n    promotion_code?: string;\n    success_url?: string;\n    tax_id_collection?: boolean;\n    trial_from_plan?: boolean;\n}\n\nexport const CREATE_SESSION_TIMEOUT_MILLIS: number;\n\nexport function createCheckoutSession(payments: StripePayments, params: SessionCreateParams, options?: CreateCheckoutSessionOptions): Promise<Session>;\n\nexport interface CreateCheckoutSessionOptions {\n    timeoutMillis?: number;\n}\n\nexport function getCurrentUserPayment(payments: StripePayments, paymentId: string): Promise<Payment>;\n\nexport function getCurrentUserPayments(payments: StripePayments, options?: GetPaymentsOptions): Promise<Payment[]>;\n\nexport function getCurrentUserSubscription(payments: StripePayments, subscriptionId: string): Promise<Subscription>;\n\nexport function getCurrentUserSubscriptions(payments: StripePayments, options?: GetSubscriptionsOptions): Promise<Subscription[]>;\n\nexport interface GetPaymentsOptions {\n    status?: PaymentStatus | PaymentStatus[];\n}\n\nexport function getPrice(payments: StripePayments, productId: string, priceId: string): Promise<Price>;\n\nexport function getPrices(payments: StripePayments, productId: string): Promise<Price[]>;\n\nexport function getProduct(payments: StripePayments, productId: string, options?: GetProductOptions): Promise<Product>;\n\nexport interface GetProductOptions {\n    includePrices?: boolean;\n}\n\nexport function getProducts(payments: StripePayments, options?: GetProductsOptions): Promise<Product[]>;\n\nexport interface GetProductsOptions {\n    activeOnly?: boolean;\n    includePrices?: boolean;\n    limit?: number;\n    where?: WhereFilter[];\n}\n\nexport function getStripePayments(app: FirebaseApp, options: StripePaymentsOptions): StripePayments;\n\nexport interface GetSubscriptionsOptions {\n    status?: SubscriptionStatus | SubscriptionStatus[];\n}\n\nexport interface LineItem {\n    amount?: number;\n    currency?: string;\n    description?: string;\n    name?: string;\n    price?: string;\n    quantity?: number;\n}\n\nexport type LineItemParams = PriceIdLineItemParams;\n\nexport interface LineItemSessionCreateParams extends CommonSessionCreateParams {\n    line_items: LineItemParams[];\n}\n\nexport function onCurrentUserPaymentUpdate(payments: StripePayments, onUpdate: (snapshot: PaymentSnapshot) => void, onError?: (error: StripePaymentsError) => void): () => void;\n\nexport function onCurrentUserSubscriptionUpdate(payments: StripePayments, onUpdate: (snapshot: SubscriptionSnapshot) => void, onError?: (error: StripePaymentsError) => void): () => void;\n\nexport interface Payment {\n    readonly [propName: string]: any;\n    readonly amount: number;\n    readonly amount_capturable: number;\n    readonly amount_received: number;\n    readonly created: string;\n    readonly currency: string;\n    readonly customer: string | null;\n    readonly description: string | null;\n    readonly id: string;\n    readonly invoice: string | null;\n    readonly metadata: {\n        [name: string]: string;\n    };\n    readonly payment_method_types: string[];\n    readonly prices: Array<{\n        product: string;\n        price: string;\n    }>;\n    readonly status: PaymentStatus;\n    readonly uid: string;\n}\n\nexport type PaymentChangeType = \"added\" | \"modified\" | \"removed\";\n\nexport type PaymentMethodType = \"card\" | \"acss_debit\" | \"afterpay_clearpay\" | \"alipay\" | \"bacs_debit\" | \"bancontact\" | \"boleto\" | \"eps\" | \"fpx\" | \"giropay\" | \"grabpay\" | \"ideal\" | \"klarna\" | \"oxxo\" | \"p24\" | \"sepa_debit\" | \"sofort\" | \"wechat_pay\";\n\nexport interface PaymentSnapshot {\n    changes: Array<{\n        type: PaymentChangeType;\n        payment: Payment;\n    }>;\n    empty: boolean;\n    payments: Payment[];\n    size: number;\n}\n\nexport type PaymentStatus = \"requires_payment_method\" | \"requires_confirmation\" | \"requires_action\" | \"processing\" | \"requires_capture\" | \"cancelled\" | \"succeeded\";\n\nexport interface Price {\n    readonly [propName: string]: any;\n    readonly active: boolean;\n    readonly currency: string;\n    readonly description: string | null;\n    readonly id: string;\n    readonly interval: \"day\" | \"month\" | \"week\" | \"year\" | null;\n    readonly interval_count: number | null;\n    readonly product: string;\n    readonly trial_period_days: number | null;\n    readonly type: \"one_time\" | \"recurring\";\n    readonly unit_amount: number | null;\n}\n\nexport interface PriceIdLineItemParams extends CommonLineItemParams {\n    price: string;\n}\n\nexport interface PriceIdSessionCreateParams extends CommonSessionCreateParams {\n    price: string;\n    quantity?: number;\n}\n\nexport interface Product {\n    readonly [propName: string]: any;\n    readonly active: boolean;\n    readonly description: string | null;\n    readonly id: string;\n    readonly images: string[];\n    readonly metadata: {\n        [key: string]: string | number | null;\n    };\n    readonly name: string;\n    readonly prices: Price[];\n    readonly role: string | null;\n}\n\nexport interface Session {\n    readonly allow_promotion_codes?: boolean;\n    readonly automatic_tax?: boolean;\n    readonly cancel_url: string;\n    readonly client_reference_id?: string;\n    readonly created_at: string;\n    readonly id: string;\n    readonly line_items?: LineItem[];\n    readonly metadata?: {\n        [key: string]: any;\n    };\n    readonly mode: \"subscription\" | \"payment\";\n    readonly payment_method_types?: PaymentMethodType[];\n    readonly price?: string;\n    readonly promotion_code?: string;\n    readonly quantity?: number;\n    readonly success_url: string;\n    readonly tax_id_collection?: boolean;\n    readonly trial_from_plan?: boolean;\n    readonly url: string;\n}\n\nexport type SessionCreateParams = LineItemSessionCreateParams | PriceIdSessionCreateParams;\n\nexport class StripePayments {\n    readonly app: FirebaseApp;\n    get customersCollection(): string;\n    get productsCollection(): string;\n}\n\nexport class StripePaymentsError extends Error {\n    constructor(code: StripePaymentsErrorCode, message: string, cause?: any);\n    readonly cause?: any;\n    readonly code: StripePaymentsErrorCode;\n    readonly message: string;\n}\n\nexport type StripePaymentsErrorCode = \"deadline-exceeded\" | \"not-found\" | \"permission-denied\" | \"unauthenticated\" | \"internal\";\n\nexport interface StripePaymentsOptions {\n    customersCollection: string;\n    productsCollection: string;\n}\n\nexport interface Subscription {\n    readonly [propName: string]: any;\n    readonly cancel_at: string | null;\n    readonly cancel_at_period_end: boolean;\n    readonly canceled_at: string | null;\n    readonly created: string;\n    readonly current_period_end: string;\n    readonly current_period_start: string;\n    readonly ended_at: string | null;\n    readonly id: string;\n    readonly metadata: {\n        [name: string]: string;\n    };\n    readonly price: string;\n    readonly prices: Array<{\n        product: string;\n        price: string;\n    }>;\n    readonly product: string;\n    readonly quantity: number | null;\n    readonly role: string | null;\n    readonly status: SubscriptionStatus;\n    readonly stripe_link: string;\n    readonly trial_end: string | null;\n    readonly trial_start: string | null;\n    readonly uid: string;\n}\n\nexport type SubscriptionChangeType = \"added\" | \"modified\" | \"removed\";\n\nexport interface SubscriptionSnapshot {\n    changes: Array<{\n        type: SubscriptionChangeType;\n        subscription: Subscription;\n    }>;\n    empty: boolean;\n    size: number;\n    subscriptions: Subscription[];\n}\n\nexport type SubscriptionStatus = \"active\" | \"canceled\" | \"incomplete\" | \"incomplete_expired\" | \"past_due\" | \"trialing\" | \"unpaid\";\n\nexport type WhereFilter = [string, WhereFilterOp, any];\n\nexport { WhereFilterOp }\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Stripe Products with Firebase\nDESCRIPTION: Fetches active products and their prices from Firebase Cloud Firestore and renders them to the webpage. Includes price formatting and HTML template handling.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/codelab-steps/index.lab.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction startDataListeners() {\n  const products = document.querySelector(\".products\");\n  const template = document.querySelector(\"#product\");\n  db.collection(\"products\")\n    .where(\"active\", \"==\", true)\n    .get()\n    .then(function (querySnapshot) {\n      querySnapshot.forEach(async function (doc) {\n        const priceSnap = await doc.ref\n          .collection(\"prices\")\n          .orderBy(\"unit_amount\")\n          .get();\n        if (!\"content\" in document.createElement(\"template\")) {\n          console.error(\"Your browser doesn't support HTML template elements.\");\n          return;\n        }\n\n        const product = doc.data();\n        const container = template.content.cloneNode(true);\n\n        container.querySelector(\"h2\").innerText = product.name.toUpperCase();\n        container.querySelector(\".description\").innerText =\n          product.description.toUpperCase() || \"\";\n        priceSnap.docs.forEach((doc) => {\n          const priceId = doc.id;\n          const priceData = doc.data();\n          const content = document.createTextNode(\n            `${new Intl.NumberFormat(\"en-US\", {\n              style: \"currency\",\n              currency: priceData.currency,\n            }).format((priceData.unit_amount / 100).toFixed(2))} per ${\n              priceData.interval\n            }`\n          );\n          const option = document.createElement(\"option\");\n          option.value = priceId;\n          option.appendChild(content);\n          container.querySelector(\"#price\").appendChild(option);\n        });\n\n        if (product.images.length) {\n          const img = container.querySelector(\"img\");\n          img.src = product.images[0];\n          img.alt = product.name;\n        }\n\n        const form = container.querySelector(\"form\");\n        form.addEventListener(\"submit\", subscribe);\n\n        products.appendChild(container);\n      });\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Sessions\nDESCRIPTION: Create checkout sessions for single or multiple items with custom success and cancel URLs.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCheckoutSession } from \"@invertase/firestore-stripe-payments\";\n\nconst session = await createCheckoutSession(payments, {\n  price: myPriceId,\n});\nwindow.location.assign(session.url);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCheckoutSession } from \"@invertase/firestore-stripe-payments\";\n\nconst session = await createCheckoutSession(payments, {\n  price: myPriceId,\n  success_url: \"https://example.com/payments/success\",\n  cancel_url: \"https://example.com/payments/cancel\",\n});\nwindow.location.assign(session.url);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createCheckoutSession } from \"@invertase/firestore-stripe-payments\";\n\nconst session = await createCheckoutSession(payments, {\n  line_items: [\n    { price: myPriceId1 },\n    { price: myPriceId2 },\n  ],\n});\nwindow.location.assign(session.url);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Subscriptions with getCurrentUserSubscriptions in TypeScript\nDESCRIPTION: This function retrieves existing Stripe subscriptions for the currently signed-in user from the database. It takes a StripePayments object and optional GetSubscriptionsOptions as parameters, and returns a Promise that resolves with an array of Subscription objects.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getcurrentusersubscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getCurrentUserSubscriptions(payments: StripePayments, options?: GetSubscriptionsOptions): Promise<Subscription[]>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Payments SDK with Firebase in TypeScript\nDESCRIPTION: This function initializes the Stripe Payments client SDK and returns a StripePayments handle object. It requires a FirebaseApp instance and configuration options as parameters.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getstripepayments.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getStripePayments(app: FirebaseApp, options: StripePaymentsOptions): StripePayments;\n```\n\n----------------------------------------\n\nTITLE: Stripe Checkout Session Creation\nDESCRIPTION: Handles subscription creation by setting up a Stripe Checkout session through Firebase. Includes event listeners for sign out and checkout process.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/codelab-steps/index.lab.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument\n  .getElementById(\"signout\")\n  .addEventListener(\"click\", () => firebase.auth().signOut());\n\nasync function subscribe(event) {\n  event.preventDefault();\n  document.querySelectorAll(\"button\").forEach((b) => (b.disabled = true));\n  const formData = new FormData(event.target);\n\n  const docRef = await db\n    .collection(\"customers\")\n    .doc(currentUser)\n    .collection(\"checkout_sessions\")\n    .add({\n      price: formData.get(\"price\"),\n      allow_promotion_codes: true,\n      success_url: window.location.origin,\n      cancel_url: window.location.origin,\n    });\n\n  docRef.onSnapshot((snap) => {\n    const { sessionId } = snap.data();\n    if (sessionId) {\n      const stripe = Stripe(STRIPE_PUBLISHABLE_KEY);\n      stripe.redirectToCheckout({ sessionId });\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating One-Time Payment Checkout Session in JavaScript\nDESCRIPTION: Creates a Checkout Session for one-time payments by adding a document to the checkout_sessions collection with mode set to 'payment'. This requires setting up webhook handlers for payment_intent events in the Stripe dashboard.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Stripe Product from Database in TypeScript\nDESCRIPTION: Function signature for getProduct that retrieves a Stripe product from the database. It takes a StripePayments object, a product ID string, and optional GetProductOptions to customize behavior. Returns a Promise resolving to a Product object.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproduct.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getProduct(payments: StripePayments, productId: string, options?: GetProductOptions): Promise<Product>;\n```\n\n----------------------------------------\n\nTITLE: Setting Firestore Security Rules for Subscription-Based Content Access\nDESCRIPTION: Security rules for Firestore that implement role-based access control for subscription content. These rules secure customer data while allowing public access to product information, and implement custom claims to restrict access to premium content.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/codelab-steps/index.lab.md#2025-04-21_snippet_0\n\nLANGUAGE: rules\nCODE:\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n\n    match /customers/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /products/{id} {\n      allow read: if true;\n      allow write: if false;\n\n      match /prices/{id} {\n        allow read: if true;\n        allow write: if false;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Status Monitoring\nDESCRIPTION: Monitors and displays active subscription status by listening to Firestore subscription collection changes. Shows subscription details including price and interval.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/codelab-steps/index.lab.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(\"customers\")\n    .doc(currentUser)\n    .collection(\"subscriptions\")\n    .where(\"status\", \"in\", [\"trialing\", \"active\"])\n    .onSnapshot(async (snapshot) => {\n      if (snapshot.empty) {\n        document.querySelector(\"#subscribe\").style.display = \"block\";\n        return;\n      }\n      document.querySelector(\"#subscribe\").style.display = \"none\";\n      document.querySelector(\"#my-subscription\").style.display = \"block\";\n      const subscription = snapshot.docs[0].data();\n      const priceData = (await subscription.price.get()).data();\n      document.querySelector(\n        \"#my-subscription p\"\n      ).textContent = `You are paying ${new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n        currency: priceData.currency,\n      }).format((priceData.unit_amount / 100).toFixed(2))} per ${\n        priceData.interval\n      }`;\n```\n\n----------------------------------------\n\nTITLE: Adding Shipping Address Collection to Checkout in JavaScript\nDESCRIPTION: Configures a Checkout Session to collect a shipping address from customers by setting collect_shipping_address to true. This requires creating a shipping_countries document in your products collection with allowed_countries array.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    collect_shipping_address: true,\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stripe Prices by Product ID in TypeScript\nDESCRIPTION: This function retrieves all Stripe prices associated with a specified product. It requires a StripePayments object and a product ID, returning a Promise that resolves to an array of Price objects.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getprices.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getPrices(payments: StripePayments, productId: string): Promise<Price[]>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Firestore Security Rules for Stripe Extension\nDESCRIPTION: These Firestore security rules restrict access to customer data, checkout sessions, subscriptions, and payments. They also allow read access to products and prices.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: firestore\nCODE:\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /${param:CUSTOMERS_COLLECTION}/{uid} {\n      allow read: if request.auth.uid == uid;\n\n      match /checkout_sessions/{id} {\n        allow read, write: if request.auth.uid == uid;\n      }\n      match /subscriptions/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n      match /payments/{id} {\n        allow read: if request.auth.uid == uid;\n      }\n    }\n\n    match /${param:PRODUCTS_COLLECTION}/{id} {\n      allow read: if true;\n\n      match /prices/{id} {\n        allow read: if true;\n      }\n\n      match /tax_rates/{id} {\n        allow read: if true;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stripe Products and Prices in Firestore\nDESCRIPTION: This code snippet demonstrates how to query active products from Firestore and retrieve their associated prices.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(\"${param:PRODUCTS_COLLECTION}\")\n  .where(\"active\", \"==\", true)\n  .get()\n  .then(function (querySnapshot) {\n    querySnapshot.forEach(async function (doc) {\n      console.log(doc.id, \" => \", doc.data());\n      const priceSnap = await doc.ref.collection(\"prices\").get();\n      priceSnap.docs.forEach((doc) => {\n        console.log(doc.id, \" => \", doc.data());\n      });\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stripe Products Function Declaration\nDESCRIPTION: TypeScript function declaration for retrieving Stripe products from the database. Takes a StripePayments instance and optional GetProductsOptions parameter. Returns a Promise resolving to an array of Product objects.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproducts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getProducts(payments: StripePayments, options?: GetProductsOptions): Promise<Product[]>;\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Portal Link with Configuration Options\nDESCRIPTION: Example of creating a portal link for a Stripe customer with optional locale and configuration parameters. This code calls the createPortalLink function and redirects the user to the generated URL.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst functionRef = firebase\n  .app()\n  .functions(functionLocation)\n  .httpsCallable(\"ext-firestore-stripe-payments-createPortalLink\");\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n----------------------------------------\n\nTITLE: Registering Subscription Update Listener in TypeScript\nDESCRIPTION: Function signature for registering a listener to receive subscription updates for the current user. Takes a StripePayments instance, an update callback handler, and an optional error callback. Returns an unsubscribe function. Throws an unauthenticated error if user is not signed in.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.oncurrentusersubscriptionupdate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function onCurrentUserSubscriptionUpdate(payments: StripePayments, onUpdate: (snapshot: SubscriptionSnapshot) => void, onError?: (error: StripePaymentsError) => void): () => void;\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Stripe Checkout via URL\nDESCRIPTION: Example of redirecting a user to Stripe Checkout using a URL instead of Stripe.js. This code creates a checkout session document and listens for the URL to be added by the extension, then redirects the user.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension\ndocRef.onSnapshot((snap) => {\n  const { error, url } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (url) {\n    // We have a Stripe Checkout URL, let's redirect.\n    window.location.assign(url);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Claim Role in JavaScript\nDESCRIPTION: This function retrieves the custom claim role (stripeRole) for the current user, forcing a token refresh to ensure the latest claims are available.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function getCustomClaimRole() {\n  await firebase.auth().currentUser.getIdToken(true);\n  const decodedToken = await firebase.auth().currentUser.getIdTokenResult();\n  return decodedToken.claims.stripeRole;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Subscription in TypeScript\nDESCRIPTION: This function retrieves an existing Stripe subscription for the currently signed-in user from the database. It takes a StripePayments object and a subscription ID as parameters, and returns a Promise that resolves with a Subscription object if found.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getcurrentusersubscription.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getCurrentUserSubscription(payments: StripePayments, subscriptionId: string): Promise<Subscription>;\n```\n\n----------------------------------------\n\nTITLE: Creating One-time Payment Checkout Session\nDESCRIPTION: Creates a Stripe Checkout Session for processing a one-time payment using Firebase. The code creates a new document in the checkout_sessions collection with payment mode and price details.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    mode: \"payment\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\", // One-time price created in Stripe\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Customer Portal with Firebase Functions\nDESCRIPTION: Code to handle billing portal access through Firebase Functions. This snippet sets up a click event listener that calls a Firebase Function to create and redirect to a Stripe customer portal link. It requires the firestore-stripe-payments extension to be installed.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/codelab-steps/index.lab.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Billing portal handler\nconst functionLocation = \"TODO\"; // us-central1, for example\ndocument\n  .querySelector(\"#billing-portal-button\")\n  .addEventListener(\"click\", async (event) => {\n    document.querySelectorAll(\"button\").forEach((b) => (b.disabled = true));\n\n    // Call billing portal function\n    const functionRef = firebase\n      .app()\n      .functions(functionLocation)\n      .httpsCallable(\"ext-firestore-stripe-payments-createPortalLink\");\n    const { data } = await functionRef({ returnUrl: window.location.origin });\n    window.location.assign(data.url);\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Interface in TypeScript\nDESCRIPTION: This code snippet defines the Subscription interface, which represents the structure of a Stripe Subscription stored in the app database. It includes various properties related to subscription details, billing periods, and metadata.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Subscription \n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Customer Portal Link in Firebase Cloud Functions\nDESCRIPTION: This snippet demonstrates how to create a customer portal link using a Firebase Cloud Function. It allows for customization of the return URL, locale, and portal configuration.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst functionRef = firebase\n  .app()\n  .functions(\"${param:LOCATION}\")\n  .httpsCallable(\"${function:createPortalLink.name}\");\nconst { data } = await functionRef({\n  returnUrl: window.location.origin,\n  locale: \"auto\", // Optional, defaults to \"auto\"\n  configuration: \"bpc_1JSEAKHYgolSBA358VNoc2Hs\", // Optional ID of a portal configuration: https://stripe.com/docs/api/customer_portal/configuration\n});\nwindow.location.assign(data.url);\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Promotion Codes\nDESCRIPTION: Sets up a checkout session that allows for promotion code redemption, enabling customer discounts.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining createCheckoutSession Function Signature in TypeScript\nDESCRIPTION: This code snippet defines the function signature for createCheckoutSession. It takes a StripePayments object, session parameters, and optional settings as inputs, and returns a Promise resolving to a Session object.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.createcheckoutsession.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function createCheckoutSession(payments: StripePayments, params: SessionCreateParams, options?: CreateCheckoutSessionOptions): Promise<Session>;\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Automatic Tax and Tax ID Collection\nDESCRIPTION: Example of creating a checkout session document with automatic tax calculation enabled using Stripe Tax. This code adds a new document to a customer's checkout_sessions collection with tax settings.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    automatic_tax: true, // Automatically calculate tax based on the customer's address\n    tax_id_collection: true, // Collect the customer's tax ID (important for B2B transactions)\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Firestore Rules for Subscription Roles\nDESCRIPTION: These Firestore rules demonstrate how to use custom claim roles (basic and premium) to control access to different content collections.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: firestore\nCODE:\n```\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function hasBasicSubs() {\n      return request.auth.token.stripeRole == \"basic\";\n    }\n\n    function hasPremiumSubs() {\n      return request.auth.token.stripeRole == \"premium\";\n    }\n\n    match /content-basic/{doc} {\n      allow read: if hasBasicSubs() || hasPremiumSubs();\n    }\n    match /content-premium/{doc} {\n      allow read: if hasPremiumSubs();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommonSessionCreateParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the CommonSessionCreateParams interface, which includes various optional properties for configuring a Stripe checkout session. These properties control aspects such as promotion codes, automatic taxes, URLs, payment methods, and metadata.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommonSessionCreateParams {\n  allow_promotion_codes?: boolean;\n  automatic_tax?: boolean;\n  cancel_url?: string;\n  client_reference_id?: string;\n  metadata?: { [key: string]: any; };\n  mode?: \"subscription\" | \"payment\";\n  payment_method_types?: PaymentMethodType[];\n  promotion_code?: string;\n  success_url?: string;\n  tax_id_collection?: boolean;\n  trial_from_plan?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tax Rates from Firestore in JavaScript\nDESCRIPTION: Retrieves tax rates that have been synced from Stripe to Cloud Firestore. Tax rates are stored in a tax_rates sub-collection under a tax_rates document in the products collection.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst taxRates = await db\n  .collection(\"products\")\n  .doc(\"tax_rates\")\n  .collection(\"tax_rates\")\n  .get();\n```\n\n----------------------------------------\n\nTITLE: Defining Price Interface in TypeScript\nDESCRIPTION: This code snippet defines the Price interface, which represents the structure of a Stripe Price object stored in the application database. It includes various properties such as active status, currency, description, and pricing details.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Price \n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Dynamic Tax Rates\nDESCRIPTION: Implements a checkout session with dynamic tax rates, allowing for flexible tax calculation based on customer location or other factors.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\",\n        quantity: 1,\n        dynamic_tax_rates: [\"txr_1IJJtvHYgolSBA35ITTBOaew\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Stripe Invoice with Tax Rates in JavaScript\nDESCRIPTION: Example of an invoice that includes both default tax rates applied to all items and specific tax rates for individual items.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/POSTINSTALL.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  email: \"testr@test.de\",\n  default_tax_rates: [\"txr_1HCkCjHYgolSBA35vh6cyHB5\"],\n  items: [\n    {\n      amount: 1099,\n      currency: \"usd\",\n      description: \"item 1\",\n      tax_rates: [\"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n    },\n    {\n      amount: 1250,\n      currency: \"usd\",\n      description: \"item 2\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Checkout Session Errors in JavaScript\nDESCRIPTION: Creates a checkout session and handles potential errors by using an onSnapshot listener. If an error occurs during checkout session creation, it displays the error message to the user.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n// Wait for the CheckoutSession to get attached by the extension.\ndocRef.onSnapshot((snap) => {\n  const { error, sessionId } = snap.data();\n  if (error) {\n    // Show an error to your customer and\n    // inspect your Cloud Function logs in the Firebase console.\n    alert(`An error occured: ${error.message}`);\n  }\n  if (sessionId) {\n    // We have a session, let's redirect to Checkout.\n    const stripe = Stripe(\"pk_test_1234\");\n    stripe.redirectToCheckout({ sessionId });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Stripe Checkout Session Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for Stripe checkout session that defines all properties required for configuring and managing a checkout session, including payment methods, URLs, pricing, and tax settings.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Session \n```\n\n----------------------------------------\n\nTITLE: Defining GetSubscriptionsOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GetSubscriptionsOptions that specifies optional parameters for the getCurrentUserSubscriptions() function. Contains an optional status property that can filter subscriptions by their status.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getsubscriptionsoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetSubscriptionsOptions \n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Multiple Prices in Firebase/Stripe\nDESCRIPTION: Creates a checkout session with both recurring and one-time prices, useful for setup fees alongside subscription charges. Supports tax rates for each line item.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    line_items: [\n      {\n        price: \"price_1HCUD4HYgolSBA35icTHEXd5\", // RECURRING_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n      {\n        price: \"price_1HEtgDHYgolSBA35LMkO3ExX\", // ONE_TIME_PRICE_ID\n        quantity: 1,\n        tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n      },\n    ],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stripe Invoice with Items in JavaScript\nDESCRIPTION: Example JavaScript code demonstrating the structure of an invoice document with multiple items at different prices and quantities.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/POSTINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  email: \"customer@example.com\",\n  items: [{\n      amount: 1999,\n      currency: \"usd\",\n      quantity: 2, // Optional, defaults to 1.\n      description: \"my super cool item\"\n  },\n  {\n      amount: 540,\n      currency: \"usd\",\n      description: \"shipping cost\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stripe Price Data using TypeScript\nDESCRIPTION: Function signature for retrieving a Stripe price from the database. Takes a StripePayments object, product ID, and price ID as parameters and returns a Promise resolving to a Price object.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getprice.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare function getPrice(payments: StripePayments, productId: string, priceId: string): Promise<Price>;\n```\n\n----------------------------------------\n\nTITLE: Defining Product.prices Property in TypeScript\nDESCRIPTION: Declares a readonly property 'prices' on the Product class. It is an array of Price objects, representing the list of prices for a billing product. This property is only populated when explicitly requested during data retrieval.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.prices.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly prices: Price[];\n```\n\n----------------------------------------\n\nTITLE: Defining StripePayments Class in TypeScript\nDESCRIPTION: TypeScript class declaration for StripePayments that holds configuration and state information. This class is a fundamental component that must be instantiated through getStripePayments() function rather than direct constructor calls.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepayments.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class StripePayments \n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Tax Rates\nDESCRIPTION: Implements a checkout session with static tax rates, allowing for tax collection and reporting.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    tax_rates: [\"txr_1HCjzTHYgolSBA35m0e1tJN5\"],\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Invoices with Tax Rates in Firebase Firestore\nDESCRIPTION: This snippet demonstrates how to create an invoice document in Firestore with default tax rates and item-specific tax rates. It shows the structure for setting up invoice items with amounts, currencies, and descriptions.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait firestore\n  .collection(\"invoices\")\n  .doc()\n  .set({\n    email: \"testr@test.de\",\n    default_tax_rates: [\"txr_1HCkCjHYgolSBA35vh6cyHB5\"],\n    items: [\n      {\n        amount: 1099,\n        currency: \"usd\",\n        description: \"item 1\",\n        tax_rates: [\"txr_1HCshzHYgolSBA35WkPjzOOi\"],\n      },\n      {\n        amount: 1250,\n        currency: \"usd\",\n        description: \"item 2\",\n      },\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductsOptions.activeOnly Property in TypeScript\nDESCRIPTION: TypeScript property definition for controlling product filtering in Stripe-Firebase queries. When set to true, only retrieves active Stripe products, equivalent to applying a filter of [\"active\", \"==\", true]. When not set, returns all products regardless of status.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductsoptions.activeonly.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nactiveOnly?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsErrorCode Union Type in TypeScript\nDESCRIPTION: Defines a union type of possible error codes that can be returned during Stripe payment operations. Includes common error scenarios like authentication failures, permission issues, and internal errors.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentserrorcode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type StripePaymentsErrorCode = \"deadline-exceeded\" | \"not-found\" | \"permission-denied\" | \"unauthenticated\" | \"internal\";\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Session with Metadata\nDESCRIPTION: Creates a checkout session with custom metadata, useful for storing additional information about the customer's subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    metadata: {\n      item: \"item001\",\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating Firebase Function for Invoice Monitoring\nDESCRIPTION: Sets up a Firebase Function to listen to changes on invoice documents in the Firestore database. This allows custom handling of invoice events after they've been synced from Stripe.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst functions = require(\"firebase-functions\");\n\nexports.myFunction = functions.firestore\n  .document(\"customers/{uid}/subscriptions/{subsId}/invoices/{docId}\")\n  .onWrite((change, context) => {\n    /* ... */\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionStatus Type in TypeScript for Stripe Subscriptions\nDESCRIPTION: Defines a TypeScript type that represents all possible states a Stripe subscription can be in. The type is a union of string literals including active, canceled, incomplete, and other statuses that match Stripe's subscription lifecycle states.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscriptionstatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type SubscriptionStatus = \"active\" | \"canceled\" | \"incomplete\" | \"incomplete_expired\" | \"past_due\" | \"trialing\" | \"unpaid\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Subscription List in SubscriptionSnapshot Class in TypeScript\nDESCRIPTION: Defines the 'subscriptions' property on the SubscriptionSnapshot class, which provides access to all currently available subscriptions ordered by subscription ID. Returns an empty array if no subscriptions exist.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscriptionsnapshot.subscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsubscriptions: Subscription[];\n```\n\n----------------------------------------\n\nTITLE: Subscription Data Structure Definition\nDESCRIPTION: TypeScript interface defining the structure of subscription data synced from Stripe to Cloud Firestore, including period dates, trial information, and metadata.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Start of the current period that the subscription has been invoiced for.\n */\ncurrent_period_start: FirebaseFirestore.Timestamp;\n/**\n * End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n */\ncurrent_period_end: FirebaseFirestore.Timestamp;\n/**\n * A date in the future at which the subscription will automatically get canceled.\n */\ncancel_at: FirebaseFirestore.Timestamp | null;\n/**\n * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.\n */\ncanceled_at: FirebaseFirestore.Timestamp | null;\n/**\n * If the subscription has a trial, the beginning of that trial.\n */\ntrial_start: FirebaseFirestore.Timestamp | null;\n/**\n * If the subscription has a trial, the end of that trial.\n */\ntrial_end: FirebaseFirestore.Timestamp | null;\n/**\n * Set of key-value pairs that you can attach to an object.\n * This can be useful for storing additional information about the object in a structured format.\n */\nmetadata: {\n  [name: string]: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Trial Period for Subscription in JavaScript\nDESCRIPTION: Creates a checkout session with the trial from the plan disabled by setting trial_from_plan to false. This allows overriding the trial period that might be configured on the Stripe price/plan.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_from_plan: false,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice Document in Firestore for Stripe Integration\nDESCRIPTION: Example document structure to add to Firestore for creating a Stripe invoice. The document includes the customer's email and an array of items with amount, currency, quantity, and description fields.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nemail: \"customer@example.com\",\nitems: [{\n    amount: 2000,\n    currency: \"usd\",\n    quantity: 2, // Optional, defaults to 1.\n    description: \"Growth plan\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating Invoice Document Structure in Firestore for Stripe Integration\nDESCRIPTION: Example document structure for creating a new invoice in Firestore. The document contains customer email and line items with amount, currency, quantity, and description fields that will be used to generate a Stripe invoice.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nemail: \"customer@example.com\",\nitems: [{\n    amount: 2000,\n    currency: \"usd\",\n    quantity: 2, // Optional, defaults to 1.\n    description: \"Growth plan\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the StripePaymentsOptions interface, which contains configuration options for the Stripe payments extension. It includes two properties: customersCollection and productsCollection, both of type string.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentsoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StripePaymentsOptions \n{\n  customersCollection: string;\n  productsCollection: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Subscription Trial Period\nDESCRIPTION: Creates a checkout session with a trial period specified in days.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    trial_period_days: 7,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Stripe Invoice with Connected Account Transfers\nDESCRIPTION: Example of an invoice that includes transfer_data for sending funds to a Stripe Connect account upon successful payment.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/POSTINSTALL.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  transfer_data: {\n    destination: \"acct_1234\",\n    amount: 2114,\n  },\n  email: \"testr@test.de\",\n  items: [\n    {\n      amount: 1099,\n      currency: \"usd\",\n      description: \"item 1\",\n    },\n    {\n      amount: 1250,\n      currency: \"usd\",\n      description: \"item 2\",\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stripe Invoice with Firebase User ID\nDESCRIPTION: Example of creating an invoice using a Firebase Authentication user ID instead of an email address, with custom days until due parameter.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/POSTINSTALL.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  uid: \"APkKkSLsT6cjxsCqYMh3Gi0TZtl5\",\n  items: [{\n      amount: 1999,\n      currency: \"usd\",\n      description: \"my super cool item\"\n  }],\n  daysUntilDue: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Invoices with Item Quantities in Firebase Firestore\nDESCRIPTION: This snippet illustrates how to create an invoice document in Firestore with item quantities. It demonstrates setting up invoice items with amounts, currencies, descriptions, and optional quantities.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  email: \"customer@example.com\",\n  items: [{\n    amount: 1999,\n    currency: \"usd\",\n    quantity: 2,\n    description: \"my super cool item\"\n  },\n  {\n    amount: 540,\n    currency: \"usd\",\n    description: \"shipping cost\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Product Metadata Property in TypeScript\nDESCRIPTION: This code snippet defines the metadata property for the Product class. It is a readonly property that represents a collection of additional product metadata, stored as key-value pairs.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly metadata: {\n        [key: string]: string | number | null;\n    };\n```\n\n----------------------------------------\n\nTITLE: Enabling Promotion Codes in Checkout\nDESCRIPTION: Configures a checkout session to allow promotion code redemption during checkout.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    allow_promotion_codes: true,\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Firebase Web SDK\nDESCRIPTION: Instructions for installing and using the @stripe/firestore-stripe-payments package for web client integration with the Stripe Firebase extension.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/PREINSTALL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@stripe/firestore-stripe-payments\n```\n\n----------------------------------------\n\nTITLE: Defining line_items Property in LineItemSessionCreateParams Interface (TypeScript)\nDESCRIPTION: This code snippet defines the line_items property for the LineItemSessionCreateParams interface. It is an array of LineItemParams objects, representing the line items for a Stripe session creation.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitemsessioncreateparams.line_items.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nline_items: LineItemParams[];\n```\n\n----------------------------------------\n\nTITLE: Defining PriceIdLineItemParams Interface in TypeScript\nDESCRIPTION: TypeScript interface that extends CommonLineItemParams and defines the structure for creating line items with a Stripe price ID. Contains a required price property that accepts a Stripe price ID string.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.priceidlineitemparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PriceIdLineItemParams extends CommonLineItemParams \n```\n\n----------------------------------------\n\nTITLE: Applying Programmatic Promotion Codes\nDESCRIPTION: Applies a specific promotion code to the checkout session programmatically.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/POSTINSTALL.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"${param:CUSTOMERS_COLLECTION}\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining PriceIdSessionCreateParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the PriceIdSessionCreateParams interface, which extends CommonSessionCreateParams and includes properties for specifying a Stripe price ID and quantity.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.priceidsessioncreateparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PriceIdSessionCreateParams extends CommonSessionCreateParams \n{\n  price: string;\n  quantity?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining success_url Property in Session Class (TypeScript)\nDESCRIPTION: This code snippet defines the success_url property for the Session class. It is a readonly string that specifies the URL where Stripe should redirect customers after successful payment or setup completion.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.success_url.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly success_url: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Session Cancel URL Property in TypeScript\nDESCRIPTION: TypeScript property definition for the cancel_url in a Stripe Session object. This readonly string property specifies the URL where customers are redirected after canceling their payment process.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.cancel_url.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly cancel_url: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Session.url Property in TypeScript\nDESCRIPTION: Declares a readonly string property 'url' on the Session class. This URL is used to redirect the user to complete the payment in the Stripe Checkout Session.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.url.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly url: string;\n```\n\n----------------------------------------\n\nTITLE: Applying Promotion Codes to Checkout Session in JavaScript\nDESCRIPTION: Sets promotion codes programmatically for checkout sessions by adding the promotion_code parameter when creating a checkout session. Note that anyone with access to a promotion code ID would be able to apply it.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    promotion_code: \"promo_1HCrfVHYgolSBA35b1q98MNk\",\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining mode Property in CommonSessionCreateParams Interface (TypeScript)\nDESCRIPTION: TypeScript property signature defining the mode property which specifies the Checkout Session mode. It accepts either 'subscription' or 'payment' as values, with 'subscription' being the default if not specified.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.mode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: \"subscription\" | \"payment\";\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCheckoutSessionOptions Interface in TypeScript\nDESCRIPTION: Interface definition for optional settings when creating a Stripe checkout session. Contains an optional timeoutMillis property that specifies how long to wait for session creation and acknowledgment from Stripe.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.createcheckoutsessionoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateCheckoutSessionOptions \n```\n\n----------------------------------------\n\nTITLE: Defining Subscription.prices Property in TypeScript\nDESCRIPTION: TypeScript definition of the 'prices' property in the Subscription class. This property stores an array of product and price ID pairs that represent all recurring prices for a subscription. The first element corresponds to the main price and product fields on the subscription object.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.prices.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly prices: Array<{\n        product: string;\n        price: string;\n    }>;\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Checkout Sessions in JavaScript\nDESCRIPTION: Overrides the default locale for Stripe Checkout by specifying the locale parameter when creating a checkout session. This allows customizing the language displayed during checkout.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst docRef = await db\n  .collection(\"customers\")\n  .doc(currentUser.uid)\n  .collection(\"checkout_sessions\")\n  .add({\n    price: \"price_1GqIC8HYgolSBA35zoTTN2Zl\",\n    success_url: window.location.origin,\n    cancel_url: window.location.origin,\n    locale: \"de\",\n  });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products Collection Name - TypeScript\nDESCRIPTION: A getter property that returns the name of the products collection as configured in the Stripe Firebase extension. This allows accessing the collection name used to store Stripe product data in Firestore.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepayments.productscollection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget productsCollection(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Product.name Property in TypeScript\nDESCRIPTION: Declares a readonly string property 'name' for the Product class. This property represents the product's displayable name, which appears on invoice line items when the product is sold via subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly name: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Product.role Property in TypeScript\nDESCRIPTION: Declares the 'role' property for the Product class. It is a readonly property that can be either a string or null, representing the Firebase role to be assigned to users subscribed to this plan.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.role.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly role: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem Amount Property in TypeScript\nDESCRIPTION: Property definition for the amount field in the LineItem interface. The amount represents the value to be collected per unit of the line item in a Stripe payment transaction.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.amount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\namount?: number;\n```\n\n----------------------------------------\n\nTITLE: Querying Products with Metadata Ordering in JavaScript\nDESCRIPTION: Retrieves active products ordered by a metadata field that was synced from Stripe. Metadata from Stripe is flattened with the prefix 'stripe_metadata_' to enable ordering and filtering in Firestore queries.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ndb.collection(\"products\")\n  .where(\"active\", \"==\", true)\n  .orderBy(\"stripe_metadata_index\")\n  .get()\n  .then(function (querySnapshot) {\n    // [...]\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Status Property in TypeScript\nDESCRIPTION: Type definition for the readonly status property of the Subscription class that returns a SubscriptionStatus type. This property indicates the current state of a Stripe subscription object.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.status.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly status: SubscriptionStatus;\n```\n\n----------------------------------------\n\nTITLE: Defining CommonLineItemParams Interface in TypeScript\nDESCRIPTION: Interface declaration for CommonLineItemParams which specifies common parameters used across all line item types in Stripe checkout. It includes optional properties for item description and quantity.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonlineitemparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CommonLineItemParams \n```\n\n----------------------------------------\n\nTITLE: Defining success_url Property in CommonSessionCreateParams Interface (TypeScript)\nDESCRIPTION: Declares the success_url property as an optional string within the CommonSessionCreateParams interface. This property specifies the URL to which Stripe should redirect customers after a successful payment or setup process.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.success_url.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsuccess_url?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductsOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GetProductsOptions that specifies optional parameters for product retrieval including activeOnly, includePrices, limit, and where filters.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductsoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetProductsOptions \n```\n\n----------------------------------------\n\nTITLE: Defining includePrices Property in GetProductOptions Interface (TypeScript)\nDESCRIPTION: This code snippet defines the includePrices property in the GetProductOptions interface. When set to true, it instructs the API to retrieve prices along with a product. If not set or false, the product is returned without prices, resulting in an empty Product.prices field.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductoptions.includeprices.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nincludePrices?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItemParams Type in TypeScript for Stripe Firebase Extension\nDESCRIPTION: This code snippet defines the LineItemParams type as an alias for PriceIdLineItemParams. It is used to specify the parameters required when creating a new line item, likely in the context of Stripe payments integrated with Firebase.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitemparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type LineItemParams = PriceIdLineItemParams;\n```\n\n----------------------------------------\n\nTITLE: Defining the Product Property in Subscription Class (TypeScript)\nDESCRIPTION: TypeScript property definition for the product field in the Subscription class. This readonly property stores the Stripe product ID associated with a subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.product.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly product: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Session Mode Type in TypeScript\nDESCRIPTION: Type definition for the mode property of a Checkout Session that specifies whether the session is for a one-time payment or a subscription. The property is readonly and can only have two possible values: 'subscription' or 'payment'.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.mode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly mode: \"subscription\" | \"payment\";\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetProductOptions interface, which is used as optional parameters for the getProduct() function. It includes an optional boolean property 'includePrices' to determine whether to retrieve prices along with a product.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetProductOptions \n{\n  includePrices?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductsOptions.includePrices Property Type in TypeScript\nDESCRIPTION: Type definition for the includePrices optional boolean property that determines whether to include price data when retrieving Stripe products. When set to true, products will include their associated prices in the Product.prices field.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductsoptions.includeprices.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nincludePrices?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription.uid Property in TypeScript\nDESCRIPTION: TypeScript definition of the readonly uid property in the Subscription interface. This property stores the Firebase Auth UID of the user that created the subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.uid.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly uid: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Price Currency Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for a read-only currency field that stores the three-letter ISO currency code as a string value\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.currency.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly currency: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Product Interface for Stripe-Firebase Integration\nDESCRIPTION: TypeScript interface declaration that defines the structure of a Stripe Product object stored in Firebase. Includes properties for product details, pricing, and Firebase role management.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Product {\n  active: boolean;\n  description: string | null;\n  id: string;\n  images: string[];\n  metadata: { [key: string]: string | number | null; };\n  name: string;\n  prices: Price[];\n  role: string | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Price ID Parameter Type in TypeScript\nDESCRIPTION: TypeScript type definition for the price property that specifies the Stripe price ID to be used when creating a checkout session. This property is required and must be a valid Stripe price ID string.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.priceidsessioncreateparams.price.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprice: string;\n```\n\n----------------------------------------\n\nTITLE: Defining stripe_link Property in Subscription Class (TypeScript)\nDESCRIPTION: This code snippet defines the stripe_link property in the Subscription class. It is a readonly string property that represents a link to the subscription in the Stripe dashboard.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.stripe_link.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly stripe_link: string;\n```\n\n----------------------------------------\n\nTITLE: Defining 'created' Property in Subscription Class (TypeScript)\nDESCRIPTION: This code snippet defines the 'created' property for the Subscription class. It is a readonly string that represents the date when the subscription was created as a UTC timestamp.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.created.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly created: string;\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodType TypeScript Type for Stripe Payment Methods\nDESCRIPTION: A TypeScript type declaration that defines all supported payment method types for Stripe payments integration. Includes common payment methods like card, various direct debit systems, and regional payment services.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.paymentmethodtype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type PaymentMethodType = \"card\" | \"acss_debit\" | \"afterpay_clearpay\" | \"alipay\" | \"bacs_debit\" | \"bancontact\" | \"boleto\" | \"eps\" | \"fpx\" | \"giropay\" | \"grabpay\" | \"ideal\" | \"klarna\" | \"oxxo\" | \"p24\" | \"sepa_debit\" | \"sofort\" | \"wechat_pay\";\n```\n\n----------------------------------------\n\nTITLE: Defining Product ID Property in Price Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'product' property of the Price interface. It represents the ID of the Stripe product to which the price is related. The property is readonly and of type string.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.product.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly product: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Price Unit Amount Property in TypeScript\nDESCRIPTION: Type declaration for the unit_amount property that specifies the charging amount in cents. The property is readonly and can be either a number or null.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.unit_amount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly unit_amount: number | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Cancellation Timestamp Property in TypeScript\nDESCRIPTION: Defines a readonly property that stores the UTC timestamp of when a subscription was canceled. The property can either contain a string timestamp or null if the subscription has not been canceled. This timestamp reflects the initial cancellation request date, even for subscriptions set to cancel at period end.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.canceled_at.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly canceled_at: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining current_period_end Property in Typescript\nDESCRIPTION: Declares a readonly property named current_period_end of type string in the Subscription class. This property represents the end of the current billing period for a subscription as a UTC timestamp.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.current_period_end.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly current_period_end: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Price ID Property in TypeScript Interface\nDESCRIPTION: TypeScript interface property definition for storing a Stripe price ID. This property is used to identify a specific price configuration in Stripe when creating line items for payments or subscriptions.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.priceidlineitemparams.price.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprice: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Price ID Property - TypeScript\nDESCRIPTION: A readonly property declaration that represents a unique Stripe price identifier. This property is used to store and reference specific price objects within the Stripe payment system.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.id.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly id: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Quantity Property Type in TypeScript\nDESCRIPTION: Type definition for the optional quantity property that specifies the number of items to purchase in a Stripe payment session. The property defaults to 1 if not specified.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.priceidsessioncreateparams.quantity.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nquantity?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Session.quantity Property in TypeScript\nDESCRIPTION: Defines the quantity property for the Session class. It represents the quantity of items purchased and is an optional readonly number property with a default value of 1.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.quantity.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly quantity?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining payment_method_types Property in TypeScript\nDESCRIPTION: Declares a readonly property named payment_method_types of type PaymentMethodType[] on the Session class. This property represents the list of payment method types accepted by a Checkout Session, defaulting to [\"card\"].\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.payment_method_types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly payment_method_types?: PaymentMethodType[];\n```\n\n----------------------------------------\n\nTITLE: Defining trial_period_days Property in Price Object (TypeScript)\nDESCRIPTION: This code snippet defines the trial_period_days property for the Price object. It represents the default number of trial days when subscribing a customer to this price using the trial_from_plan feature in Stripe.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.trial_period_days.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly trial_period_days: number | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription.price Property in TypeScript\nDESCRIPTION: This code snippet defines the 'price' property for the Subscription class. It is a read-only string property that represents the Stripe price ID associated with the subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.price.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly price: string;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem.quantity Property in TypeScript\nDESCRIPTION: Declares the quantity property for the LineItem interface. This optional property represents the quantity of the line item being purchased in a Stripe transaction.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.quantity.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nquantity?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionSnapshot Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SubscriptionSnapshot which represents the current state of a set of subscriptions owned by a user.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscriptionsnapshot.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubscriptionSnapshot \n```\n\n----------------------------------------\n\nTITLE: Defining Session.automatic_tax Property in TypeScript\nDESCRIPTION: Type definition for the automatic_tax property that indicates whether automatic tax calculation is enabled for a Stripe session. The property is readonly and optional.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.automatic_tax.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly automatic_tax?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription.role Property in TypeScript\nDESCRIPTION: Declares a readonly property 'role' of type string or null on the Subscription class. This property represents the Firebase role that can be assigned to a user with this subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.role.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly role: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem Price Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for storing a Stripe price ID. The optional price property accepts a string value representing a Stripe price identifier.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.price.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprice?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Price Interval Count Property in TypeScript\nDESCRIPTION: TypeScript property definition for interval_count, which specifies the number of intervals between subscription billings. For example, when interval=month and interval_count=3, billing occurs every 3 months.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.interval_count.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly interval_count: number | null;\n```\n\n----------------------------------------\n\nTITLE: Declaring Subscription.id Property in TypeScript\nDESCRIPTION: Defines the 'id' property for the Subscription class. It is a read-only string that represents the unique Stripe subscription ID.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.id.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly id: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Product Active Property in TypeScript\nDESCRIPTION: TypeScript property definition indicating whether a Stripe product is currently available for purchase. The property is read-only and returns a boolean value.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.active.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly active: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Price Interval Property in TypeScript\nDESCRIPTION: Type definition for the interval property that specifies the frequency of subscription billing. The property is readonly and can be set to 'day', 'week', 'month', 'year', or null.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.interval.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly interval: \"day\" | \"month\" | \"week\" | \"year\" | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Price Description Property in TypeScript\nDESCRIPTION: Type definition for the description property of the Price class. The property is readonly and can contain either a string value or null.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly description: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining Promotion Code Property in Stripe Session Class - TypeScript\nDESCRIPTION: Type definition for the optional promotion_code property that can be applied to a Stripe payment session. This property allows specifying a promotional code string that will be applied to the payment transaction.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.promotion_code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly promotion_code?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem Currency Property in TypeScript\nDESCRIPTION: Type definition for the currency property that accepts three-letter ISO currency codes in lowercase. The currency must be supported by Stripe's payment system.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.currency.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncurrency?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Session Price Property in TypeScript\nDESCRIPTION: TypeScript property definition for storing a Stripe price object ID. The property is read-only and optional, guaranteed to be present when line_items is not available in the session.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.price.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly price?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Session.trial_from_plan Property in TypeScript\nDESCRIPTION: TypeScript property definition for trial_from_plan that determines whether a subscription plan's trial period should be applied. This optional boolean property defaults to true and is part of the Session class interface.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.trial_from_plan.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly trial_from_plan?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Trial Plan Property in TypeScript\nDESCRIPTION: TypeScript property definition for specifying whether a plan's trial period should be applied to a subscription. This optional boolean property defaults to true and is used when creating payment sessions.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.trial_from_plan.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntrial_from_plan?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductsOptions Where Property Type in TypeScript\nDESCRIPTION: Type definition for the where property in GetProductsOptions interface that specifies an array of optional filters for querying products from the application database.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductsoptions.where.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwhere?: WhereFilter[];\n```\n\n----------------------------------------\n\nTITLE: Defining client_reference_id Property Type in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the client_reference_id property in the CommonSessionCreateParams interface. It's an optional string property that can be used to provide a unique reference for Checkout Sessions.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.client_reference_id.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclient_reference_id?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Types in Stripe Checkout Session\nDESCRIPTION: Type definition for payment method types configuration in Stripe Checkout Sessions. The property allows specifying which payment methods (like 'card') are accepted in the checkout session, defaulting to ['card'] if not specified.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.payment_method_types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npayment_method_types?: PaymentMethodType[];\n```\n\n----------------------------------------\n\nTITLE: Defining Session Created Timestamp Property in TypeScript\nDESCRIPTION: Defines a readonly string property that stores the UTC timestamp when a Stripe session was created. The property is immutable and can only be read after initialization.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.created_at.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly created_at: string;\n```\n\n----------------------------------------\n\nTITLE: Defining cancel_at_period_end Property in Typescript\nDESCRIPTION: This code snippet defines the cancel_at_period_end property for the Subscription class. It is a readonly boolean property that indicates whether the subscription has been canceled by the user and will be deleted at the end of the billing period.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.cancel_at_period_end.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly cancel_at_period_end: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining SessionCreateParams Type in TypeScript for Stripe-Firebase Integration\nDESCRIPTION: This code snippet defines the SessionCreateParams type as a union of LineItemSessionCreateParams and PriceIdSessionCreateParams. It is used to specify parameters when creating a new Stripe session in a Firebase project.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.sessioncreateparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type SessionCreateParams = LineItemSessionCreateParams | PriceIdSessionCreateParams;\n```\n\n----------------------------------------\n\nTITLE: Defining Session.allow_promotion_codes Property in TypeScript\nDESCRIPTION: TypeScript property definition that specifies whether promotion codes can be redeemed in a Stripe session. The property is optional and accepts a boolean value to enable or disable promotion code functionality.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.allow_promotion_codes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly allow_promotion_codes?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Session Metadata Property in TypeScript\nDESCRIPTION: This code snippet defines the metadata property for the Session object. It is a readonly property that can hold key-value pairs of any type, useful for storing additional structured information about the object.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly metadata?: {\n        [key: string]: any;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining allow_promotion_codes Property in TypeScript Interface\nDESCRIPTION: Optional boolean property definition that enables user redeemable promotion codes in a Stripe session. This property is part of the CommonSessionCreateParams interface used for configuring Stripe payment sessions.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.allow_promotion_codes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nallow_promotion_codes?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining cancel_at Property in Subscription Class (TypeScript)\nDESCRIPTION: This code snippet defines the cancel_at property for the Subscription class. It represents a future date in UTC format when the subscription will be automatically canceled. The property is readonly and can be either a string or null.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.cancel_at.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly cancel_at: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining quantity Property in CommonLineItemParams Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'quantity' property for the CommonLineItemParams interface. It represents the quantity of the line item being purchased and is an optional number value.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonlineitemparams.quantity.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nquantity?: number;\n```\n\n----------------------------------------\n\nTITLE: Declaring Session ID Property in TypeScript\nDESCRIPTION: Type definition for the readonly id property of the Session class. This property stores a unique identifier string that is used when redirecting to Stripe's checkout using redirectToCheckout() in Stripe.js.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.id.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly id: string;\n```\n\n----------------------------------------\n\nTITLE: Defining timeoutMillis Property in TypeScript Interface\nDESCRIPTION: TypeScript property definition for an optional timeout value in milliseconds. If not specified, it defaults to CREATE_SESSION_TIMEOUT_MILLIS constant.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.createcheckoutsessionoptions.timeoutmillis.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntimeoutMillis?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Trial End Property in TypeScript Subscription Class\nDESCRIPTION: Type definition for the trial_end property that represents the UTC timestamp when a subscription trial period ends. The property is readonly and can be either a string timestamp or null if no trial exists.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.trial_end.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly trial_end: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining 'empty' Property in SubscriptionSnapshot Class (TypeScript)\nDESCRIPTION: This code snippet defines the 'empty' property for the SubscriptionSnapshot class. It is a boolean that indicates whether there are any subscriptions available. When true, it signifies that the 'subscriptions' array is empty and the 'size' is 0.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscriptionsnapshot.empty.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nempty: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem Interface for Stripe Checkout Sessions in TypeScript\nDESCRIPTION: TypeScript interface definition that represents a line item in a Stripe checkout session. It contains optional properties for managing individual items in a purchase, including pricing, quantity, and display information.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LineItem \n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsOptions customersCollection Property Type in TypeScript\nDESCRIPTION: Type declaration for the customersCollection property within the StripePaymentsOptions interface. This property specifies the Firestore collection path where customer documents will be stored.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentsoptions.customerscollection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomersCollection: string;\n```\n\n----------------------------------------\n\nTITLE: Accessing customersCollection Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for accessing the customersCollection property of the StripePayments class. The property returns a string representing the name of the customers collection as configured in the extension.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepayments.customerscollection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget customersCollection(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Tax ID Collection Parameter in TypeScript\nDESCRIPTION: Type definition for the tax_id_collection property that controls whether tax ID collection is enabled for a Stripe payment session. This optional boolean parameter determines if tax IDs should be collected during the payment flow.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.tax_id_collection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntax_id_collection?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItemSessionCreateParams Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for creating Stripe payment sessions that include line items. Extends CommonSessionCreateParams and specifies an array of LineItemParams for the line_items property.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitemsessioncreateparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LineItemSessionCreateParams extends CommonSessionCreateParams \n```\n\n----------------------------------------\n\nTITLE: Defining current_period_start Property in Subscription Class (TypeScript)\nDESCRIPTION: This code snippet defines the current_period_start property for the Subscription class. It is a readonly string property that represents the start of the current billing period for the subscription as a UTC timestamp.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.current_period_start.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly current_period_start: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the size Property in SubscriptionSnapshot Class in TypeScript\nDESCRIPTION: TypeScript property definition for the 'size' property which returns the number of currently available subscriptions in the snapshot. This is equivalent to the length of the 'subscriptions' array in the snapshot.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscriptionsnapshot.size.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsize: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata Property Type in TypeScript\nDESCRIPTION: TypeScript interface definition for the metadata property that allows attaching arbitrary key-value pairs to Stripe session objects. The property is optional and accepts any value type for maximum flexibility in storing additional information.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata?: {\n        [key: string]: any;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining Session Timeout Constant in TypeScript\nDESCRIPTION: Defines a constant that specifies the timeout duration in milliseconds for creating a Stripe payment session. This is used to set limits on how long a payment session creation request can take.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.create_session_timeout_millis.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCREATE_SESSION_TIMEOUT_MILLIS: number\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription.ended_at Property in TypeScript\nDESCRIPTION: Declares the ended_at property for the Subscription class. It represents the date when a subscription ended, stored as a UTC timestamp string or null if the subscription is still active.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.ended_at.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly ended_at: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining WhereFilter Type for Firestore Queries in TypeScript\nDESCRIPTION: This code defines the WhereFilter type as a tuple containing a string (field name in Firestore dotted notation), a WhereFilterOp (Firestore filter operator), and any value. It's used to create filter constraints for Firestore database queries in the Stripe-Firebase extension.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.wherefilter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type WhereFilter = [string, WhereFilterOp, any];\n```\n\n----------------------------------------\n\nTITLE: Defining Session Client Reference ID Property in TypeScript\nDESCRIPTION: TypeScript property definition for the client_reference_id field in the Session class. This optional string property allows storing a unique identifier to reference the Checkout Session, useful for reconciling with internal systems.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.client_reference_id.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly client_reference_id?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Status Property Type in GetSubscriptionsOptions Interface\nDESCRIPTION: TypeScript type definition for the status property that accepts either a single SubscriptionStatus value or an array of SubscriptionStatus values. This property is used to filter subscriptions based on their current status.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getsubscriptionsoptions.status.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatus?: SubscriptionStatus | SubscriptionStatus[];\n```\n\n----------------------------------------\n\nTITLE: Defining trial_start Property in Subscription Class with TypeScript\nDESCRIPTION: TypeScript declaration for the trial_start property of the Subscription class. This property contains the start date of a subscription trial as a UTC timestamp, or null if there is no trial.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.trial_start.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly trial_start: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem Description Property in TypeScript\nDESCRIPTION: Type definition for the optional description property on the LineItem interface. This property is used to display descriptive text for line items on the Stripe Checkout page.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining promotion_code Property in CommonSessionCreateParams Interface\nDESCRIPTION: TypeScript definition for the optional promotion_code property in the CommonSessionCreateParams interface. This property allows applying a promotion code to a Stripe Session when it is created.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.promotion_code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npromotion_code?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription Quantity Property in TypeScript\nDESCRIPTION: Declares a readonly property 'quantity' of type number or null on the Subscription class. This property represents the quantity of items purchased with a subscription.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.quantity.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly quantity: number | null;\n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsError Code Property in TypeScript\nDESCRIPTION: TypeScript type definition for the read-only code property of the StripePaymentsError class that returns a StripePaymentsErrorCode value.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentserror.code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly code: StripePaymentsErrorCode;\n```\n\n----------------------------------------\n\nTITLE: Defining cancel_url Property in CommonSessionCreateParams Interface (TypeScript)\nDESCRIPTION: This code snippet defines the cancel_url property in the CommonSessionCreateParams interface. It is an optional string property that specifies the URL where customers are redirected if they cancel the payment process.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.cancel_url.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncancel_url?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsError Class in TypeScript\nDESCRIPTION: This snippet defines the StripePaymentsError class, which extends the built-in Error class. It is used to represent errors specific to the Stripe Payments SDK.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentserror.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class StripePaymentsError extends Error \n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsError cause Property in TypeScript\nDESCRIPTION: TypeScript property definition for the optional cause property of the StripePaymentsError class. The property is readonly and can hold any type of value.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentserror.cause.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly cause?: any;\n```\n\n----------------------------------------\n\nTITLE: Defining Session.line_items Property in TypeScript\nDESCRIPTION: Type definition for the line_items property that stores an array of purchased items in a Stripe session. This property is optional and readonly, containing LineItem objects representing individual purchases.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.line_items.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly line_items?: LineItem[];\n```\n\n----------------------------------------\n\nTITLE: Defining SubscriptionChangeType in TypeScript for Stripe-Firebase Integration\nDESCRIPTION: This code snippet defines a TypeScript type called SubscriptionChangeType. It represents the different types of changes that may occur on a subscription object, including 'added', 'modified', and 'removed'. This type is likely used in event handling or state management related to subscription changes in a Stripe-Firebase integrated application.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscriptionchangetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type SubscriptionChangeType = \"added\" | \"modified\" | \"removed\";\n```\n\n----------------------------------------\n\nTITLE: Defining productsCollection Property in StripePaymentsOptions Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'productsCollection' property in the StripePaymentsOptions interface. It specifies the Firestore collection where product information is stored for Stripe integration.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentsoptions.productscollection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nproductsCollection: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Automatic Tax Property in TypeScript for Stripe Firebase Payments\nDESCRIPTION: TypeScript definition for the automatic_tax property in the CommonSessionCreateParams interface. When set to true, it enables automatic tax calculation in Stripe, with a default value of false if not specified.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonsessioncreateparams.automatic_tax.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nautomatic_tax?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Invoices with Transfer Data in Firebase Firestore\nDESCRIPTION: This code snippet shows how to create an invoice document in Firestore with transfer data for sending funds to a connected account. It includes setting up invoice items with amounts, currencies, and descriptions.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait firestore\n  .collection(\"invoices\")\n  .doc()\n  .set({\n    transfer_data: {\n      destination: \"acct_1234\",\n      amount: 2114,\n    },\n    email: \"testr@test.de\",\n    items: [\n      {\n        amount: 1099,\n        currency: \"usd\",\n        description: \"item 1\",\n      },\n      {\n        amount: 1250,\n        currency: \"usd\",\n        description: \"item 2\",\n      },\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining Product ID Property in TypeScript\nDESCRIPTION: Defines a readonly property that stores the unique Stripe product identifier as a string value. This property is immutable and ensures each product has a unique identifier in the Stripe system.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.id.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly id: string;\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Invoices with Firebase Admin SDK\nDESCRIPTION: Complete example showing how to use the Firebase Admin SDK to add an invoice document to Firestore, which will trigger the extension to create a Stripe invoice.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-invoices/POSTINSTALL.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst admin = require('firebase-admin');\nadmin.initializeApp();\nconst db = admin.firestore();\n\ndb.collection('${param:INVOICES_COLLECTION}')\n  .add({\n    email: 'customer@example.com',\n    items: [\n      {\n        amount: 1000, // $10.00\n        currency: 'usd',\n        quantity: 2, // Optional, defaults to 1.\n        description: 'Cool hat',\n      },\n    ],\n  })\n  .then((newInvoiceRef) =>\n    console.log(`added a new invoice at path ${newInvoiceRef.path}`)\n  );\n```\n\n----------------------------------------\n\nTITLE: Defining Product Images Array Type in TypeScript\nDESCRIPTION: Type definition for a readonly array of strings representing product image URLs. The property supports up to 8 image URLs that are meant to be displayed to customers.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.images.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly images: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining StripePaymentsError.message Property in TypeScript\nDESCRIPTION: This code snippet defines the 'message' property for the StripePaymentsError class. It is a readonly string property that likely contains the error message associated with the StripePaymentsError instance.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentserror.message.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly message: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Price.type Property in TypeScript\nDESCRIPTION: This code snippet defines the 'type' property of the Price interface. It is a readonly property that can have one of two string literal values: 'one_time' or 'recurring'. This property indicates whether the price is for a one-time purchase or a recurring (subscription) purchase.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: \"one_time\" | \"recurring\";\n```\n\n----------------------------------------\n\nTITLE: Initializing StripePaymentsError Constructor in TypeScript\nDESCRIPTION: Constructor signature for creating new StripePaymentsError instances. Takes a StripePaymentsErrorCode, an error message string, and an optional cause parameter of any type.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepaymentserror._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(code: StripePaymentsErrorCode, message: string, cause?: any);\n```\n\n----------------------------------------\n\nTITLE: Defining 'active' Property in Price Class (TypeScript)\nDESCRIPTION: This code snippet defines the 'active' property for the Price class. It is a readonly boolean that indicates whether the price can be used for new purchases.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.price.active.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly active: boolean;\n```\n\n----------------------------------------\n\nTITLE: Migration Link for Converting Stripe Extension to Invertase Version\nDESCRIPTION: This URL can be used to convert an existing Stripe extension installation to the Invertase maintained version. It requires replacing the STRIPE_EXTENSION_INSTANCE_ID with your actual extension instance ID.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://console.firebase.google.com/project/_/extensions/install?instanceId=STRIPE_EXTENSION_INSTANCE_ID&ref=invertase%2Ffirestore-stripe-payments@0.3.5\n```\n\n----------------------------------------\n\nTITLE: Defining StripePayments App Property in TypeScript\nDESCRIPTION: TypeScript interface definition showing the readonly app property of type FirebaseApp in the StripePayments class.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.stripepayments.app.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly app: FirebaseApp;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conventional Commits Format in Markdown\nDESCRIPTION: This snippet shows an example of using the Conventional Commits format for commit messages, specifically for updating documentation of an extension.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndocs(extension-name) updated installation documentation\n```\n\n----------------------------------------\n\nTITLE: Defining LineItem.name Property in TypeScript\nDESCRIPTION: This code snippet defines the 'name' property for the LineItem interface. It is an optional string property used to specify the name of an item that will be displayed on the Stripe Checkout page.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.lineitem.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Product Description Property in TypeScript\nDESCRIPTION: This code snippet defines the 'description' property for the Product class. It is a readonly string or null value, intended to store a displayable description of the product for customers.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.product.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly description: string | null;\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductsOptions.limit Property in TypeScript\nDESCRIPTION: Specifies the 'limit' property of the GetProductsOptions interface. It is an optional number that sets the maximum number of products to return in a query.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.getproductsoptions.limit.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlimit?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining tax_id_collection Property in TypeScript\nDESCRIPTION: This code snippet defines the tax_id_collection property for the Session class. It is a readonly boolean property that controls tax ID collection settings for the session.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.session.tax_id_collection.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly tax_id_collection?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining Subscription.metadata Property in TypeScript\nDESCRIPTION: This code snippet defines the metadata property for the Subscription class. It is a readonly property that stores extra key-value pairs attached to the subscription object as a dictionary of strings.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.subscription.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly metadata: {\n        [name: string]: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining the description property in CommonLineItemParams interface in TypeScript\nDESCRIPTION: TypeScript definition for the optional description property in the CommonLineItemParams interface. This property allows developers to set a text description for a line item that will be displayed on the Stripe Checkout page.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-web-sdk/markdown/firestore-stripe-payments.commonlineitemparams.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: Price Type Definition in Stripe/Firebase\nDESCRIPTION: Type definition for price documents in Cloud Firestore, specifying whether a price is one-time or recurring.\nSOURCE: https://github.com/invertase/stripe-firebase-extensions/blob/next/firestore-stripe-payments/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n */\ntype: \"one_time\" | \"recurring\";\n```"
  }
]