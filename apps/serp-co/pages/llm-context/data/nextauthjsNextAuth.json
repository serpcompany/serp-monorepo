[
  {
    "owner": "nextauthjs",
    "repo": "next-auth",
    "content": "TITLE: Visualizing OAuth Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the OAuth Authorization Code flow between Browser, App Server, and Auth Server (GitHub). The diagram shows the complete authentication process from user clicking 'Sign in' through credential validation to session creation.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/concepts/oauth.mdx#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Browser\n    participant App Server\n    participant Auth Server (GitHub)\n    Note left of Browser: User clicks on \"Sign in\"\n    Browser->>App Server: GET<br/>\"api/auth/signin\"\n    App Server->>App Server: Computes the available<br/>sign in providers<br/>from the \"providers\" option\n    App Server->>Browser: Redirects to Sign in page\n    Note left of Browser: Sign in options<br/>are shown the user<br/>(GitHub, Twitter, etc...)\n    Note left of Browser: User clicks on<br/>\"Sign in with GitHub\"\n    Browser->>App Server: POST<br/>\"api/auth/signin/github\"\n    App Server->>App Server: Computes sign in<br/>options for GitHub<br/>(scopes, callback URL, etc...)\n    App Server->>Auth Server (GitHub): GET<br/>\"github.com/login/oauth/authorize\"\n    Note left of Auth Server (GitHub): Sign in options<br> are supplied as<br/>query params<br/>(clientId, <br/>scope, etc...)\n    Auth Server (GitHub)->>Browser: Shows sign in page<br/>in GitHub.com<br/>to the user\n    Note left of Browser: User inserts their<br/>credentials in GitHub\n    Browser->>Auth Server (GitHub): GitHub validates the inserted credentials\n    Auth Server (GitHub)->>Auth Server (GitHub): Generates one time access code<br/>and calls callback<br>URL defined in<br/>App settings\n    Auth Server (GitHub)->>App Server: GET<br/>\"api/auth/github/callback?code=123\"\n    App Server->>App Server: Grabs code<br/>to exchange it for<br/>access token\n    App Server->>Auth Server (GitHub): POST<br/>\"github.com/login/oauth/access_token\"<br/>{code: 123}\n    Auth Server (GitHub)->>Auth Server (GitHub): Verifies code is<br/>valid and generates<br/>access token\n    Auth Server (GitHub)->>App Server: { access_token: 16C7x... }\n    App Server->>App Server: Generates session token<br/>and stores session\n    App Server->>Browser: You're now logged in!\n```\n\n----------------------------------------\n\nTITLE: Extending JWT Session with User ID in Auth.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to add the user's ID to the JWT token and session object using the jwt and session callbacks in Auth.js configuration. It allows access to the user's ID in subsequent API calls and through auth() or useSession() functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/extending-the-session.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncallbacks: {\n  jwt({ token, user }) {\n    if (user) { // User is available during sign-in\n      token.id = user.id\n    }\n    return token\n  },\n  session({ session, token }) {\n    session.user.id = token.id\n    return session\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Persisting Role with JWT in Auth.js\nDESCRIPTION: This code demonstrates how to persist the user role using JWT in Auth.js. It uses the jwt() and session() callbacks to store and expose the role in the session.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/role-based-access-control.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Google({\n      profile(profile) {\n        return { role: profile.role ?? \"user\", ... }\n      },\n    })\n  ],\n  callbacks: {\n    jwt({ token, user }) {\n      if(user) token.role = user.role\n      return token\n    },\n    session({ session, token }) {\n      session.user.role = token.role\n      return session\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Auth Middleware in Express Routes\nDESCRIPTION: This snippet demonstrates how to use the authentication middleware to protect specific routes in an Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { authenticatedUser } from \"./lib.ts\"\n\n// This route is protected\napp.get(\"/profile\", authenticatedUser, (req, res) => {\n  const { session } = res.locals\n  res.render(\"profile\", { user: session?.user })\n})\n\n// This route is not protected\napp.get(\"/\", (req, res) => {\n  res.render(\"index\")\n})\n\napp.use(\"/\", root)\n```\n\n----------------------------------------\n\nTITLE: Extending Session with Provider Functions in Auth.js (TypeScript)\nDESCRIPTION: This snippet illustrates how to extend the default session data using the authorize and profile functions in Auth.js providers. It demonstrates adding custom properties to the user object for both Google and Credentials providers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/extending-the-session.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Github from \"next-auth/providers/github\"\nimport Credentials from \"next-auth/providers/credentials\"\nimport type { Provider } from \"next-auth/providers\"\n\nconst providers: Provider[] = [\n  Google({\n    clientId: process.env.AUTH_GOOGLE_ID,\n    clientSecret: process.env.AUTH_GOOGLE_SECRET,\n    async profile(profile) {\n      return { ...profile }\n    },\n  }),\n  Credentials({\n    async authorize(credentials) {\n      return { ...credentials }\n    },\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Provider for Refresh Token in Next.js\nDESCRIPTION: Shows how to configure the Google provider to always request a refresh token in Next.js applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Google({\n      authorization: {\n        params: {\n          prompt: \"consent\",\n          access_type: \"offline\",\n          response_type: \"code\",\n        },\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js in Next.js\nDESCRIPTION: Sets up authentication in a Next.js application using GitHub as a provider. Includes configuration for auth handlers and middleware.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// auth.ts\nimport NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nexport const { auth, handlers } = NextAuth({ providers: [GitHub] })\n\n// middleware.ts\nexport { auth as middleware } from \"@/auth\"\n\n// app/api/auth/[...nextauth]/route.ts\nimport { handlers } from \"@/auth\"\nexport const { GET, POST } = handlers\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification Check for Google Provider\nDESCRIPTION: Demonstrates how to use the email_verified property from Google OAuth to restrict access to verified accounts from a specific domain.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  callbacks: {\n    async signIn({ account, profile }) {\n      if (account.provider === \"google\") {\n        return profile.email_verified && profile.email.endsWith(\"@example.com\")\n      }\n      return true // Do different verification for other providers that don't have `email_verified`\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Session in Next.js Server Component\nDESCRIPTION: Demonstrates how to fetch and use session data in a Next.js server component to display a user avatar.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from \"../auth\"\n\nexport default async function UserAvatar() {\n  const session = await auth()\n\n  if (!session?.user) return null\n\n  return (\n    <div>\n      <img src={session.user.image} alt=\"User Avatar\" />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Database Session with User ID in Auth.js (TypeScript)\nDESCRIPTION: This code snippet shows how to add the user's ID to the session object when using a database session strategy in Auth.js. It modifies the session callback to include the user's ID from the database user object.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/extending-the-session.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncallbacks: {\n  session({ session, user }) {\n    session.user.id = user.id\n    return session\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Schema Configuration with DrizzleAdapter\nDESCRIPTION: Example of using custom database tables with DrizzleAdapter, including optional session and verification token tables configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\"\nimport { db, accounts, sessions, users, verificationTokens } from \"./schema\"\n\nexport const { handlers, auth } = NextAuth({\n  adapter: DrizzleAdapter(db, {\n    usersTable: users,\n    accountsTable: accounts,\n    sessionsTable: sessions,\n    verificationTokensTable: verificationTokens,\n  }),\n  providers: [Google],\n})\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Token Refresh in Server Component\nDESCRIPTION: This server component demonstrates how to handle refresh token errors by forcing re-authentication when a token refresh fails. It uses the auth() function to check the session state and redirects to sign in if needed.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/refresh-token-rotation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth, signIn } from \"@/auth\"\n\nexport default async function Page() {\n  const session = await auth()\n  if (session?.error === \"RefreshTokenError\") {\n    await signIn(\"google\") // Force sign in to obtain a new set of access and refresh tokens\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Next.js Pages Router Page with getServerSideProps\nDESCRIPTION: This code shows how to protect a Next.js Pages Router page using getServerSideProps to check for an active session and pass it as props to the component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from \"../auth\"\n\nexport default function Dashboard({ session }) {\n  if (!session.user) return <div>Not authenticated</div>\n\n  return <div>{JSON.stringify(session, null, 2)}</div>\n}\n\nexport async function getServerSideProps(ctx) {\n  const session = await auth(ctx)\n\n  return {\n    props: {\n      session,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Qwik Auth.js Plugin Configuration\nDESCRIPTION: Sets up Auth.js in a Qwik application by creating a plugin file that exports the necessary authentication hooks and request handler.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [...],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring AUTH_SECRET Environment Variable\nDESCRIPTION: Shows how to set the mandatory AUTH_SECRET environment variable, which is used to encrypt tokens and email verification hashes. This is a critical security configuration for Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=\"This is an example\"\n```\n\n----------------------------------------\n\nTITLE: Extending Session Type in Next.js Auth Configuration\nDESCRIPTION: Shows how to extend the default Session interface in Next.js using TypeScript module augmentation to add custom properties like user address while preserving default session properties.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/typescript.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { type DefaultSession } from \"next-auth\"\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      /** The user's postal address. */\n      address: string\n    } & DefaultSession[\"user\"]\n  }\n}\n\nexport const { auth, handlers } = NextAuth({\n  callbacks: {\n    session({ session, token, user }) {\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          address: user.address,\n        },\n      }\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials Provider in Next.js\nDESCRIPTION: Configuration for setting up username/password authentication in Next.js using the Credentials provider. Includes basic setup with username and password fields and an authorize callback function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/credentials.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Credentials from \"next-auth/providers/credentials\"\n\nexport const { signIn, signOut, auth } = NextAuth({\n  providers: [\n    Credentials({\n      credentials: {\n        username: { label: \"Username\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize({ request }) {\n        const response = await fetch(request)\n        if (!response.ok) return null\n        return (await response.json()) ?? null\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Server Component Authentication in Next.js App Router\nDESCRIPTION: This snippet demonstrates how to update the authentication method in a Next.js server component using the App Router. It replaces the getServerSession function with the new auth() function from Auth.js v5.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { authOptions } from \"pages/api/auth/[...nextauth]\"\n- import { getServerSession } from \"next-auth/next\"\n+ import { auth } from \"@/auth\"\n\nexport default async function Page() {\n-  const session = await getServerSession(authOptions)\n+  const session = await auth()\n  return (<p>Welcome {session?.user.name}!</p>)\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Middleware for Auth.js Session Management\nDESCRIPTION: Configures the Next.js middleware to use Auth.js, which keeps the session alive by updating the session expiry on each request.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport { auth as middleware } from \"@/auth\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Domain Restriction in Auth.js Callbacks\nDESCRIPTION: Code snippet showing how to restrict user registration and login to specific email domains using the signIn callback. This implementation checks if the user's email ends with a specific domain (@yourdomain.com) and only allows access if it matches.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/restricting-user-access.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncallbacks: {\n  signIn({ profile }) {\n    return profile.email.endsWith(\"@yourdomain.com\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Role for Authorization in Next.js\nDESCRIPTION: This Next.js server component demonstrates how to use the user's role for authorization. It checks if the user has an 'admin' role before rendering protected content.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/role-based-access-control.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/auth\";\n\nexport default async function Page() {\n  const session = await auth();\n\n  if (session?.user?.role === \"admin\") {\n    return <p>You are an admin, welcome!</p>;\n  }\n\n  return <p>You are not authorized to view this page!</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Role to User Profile in Auth.js Configuration\nDESCRIPTION: This snippet shows how to add a role to the user profile in the Auth.js configuration for Next.js, Qwik, and SvelteKit. It uses the profile() callback to set a default role of 'user' if not provided.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/role-based-access-control.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Google({\n      profile(profile) {\n        return { role: profile.role ?? \"user\", ... }\n      },\n    })\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider in Next.js\nDESCRIPTION: Implementation of the Credentials provider in Next.js Auth.js configuration file with email/password authentication, including password hashing and user verification logic.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Credentials from \"next-auth/providers/credentials\"\n// Your own logic for dealing with plaintext password strings; be careful!\nimport { saltAndHashPassword } from \"@/utils/password\"\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [\n    Credentials({\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        email: {},\n        password: {},\n      },\n      authorize: async (credentials) => {\n        let user = null\n\n        // logic to salt and hash password\n        const pwHash = saltAndHashPassword(credentials.password)\n\n        // logic to verify if the user exists\n        user = await getUserFromDb(credentials.email, pwHash)\n\n        if (!user) {\n          // No user found, so this is their first attempt to login\n          // Optionally, this is also the place you could do a user registration\n          throw new Error(\"Invalid credentials.\")\n        }\n\n        // return user object with their profile data\n        return user\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Auth.js in Next.js Client Components\nDESCRIPTION: This code snippet shows how to use Auth.js v5 in a Next.js client component. It demonstrates the use of the 'use client' directive and the SessionProvider component for accessing the session in client-side code.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { useSession, SessionProvider } from 'next-auth/react';\n\nconst ClientComponent = () => {\n  const session = useSession();\n\n  return (\n    <SessionProvider>\n      <p>Welcome {session?.user?.name}</p>\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Resend (Next.js Server Component)\nDESCRIPTION: This code snippet demonstrates how to create a sign-in button component using Resend provider in a Next.js server component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from \"../../auth.ts\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async (formData) => {\n        \"use server\"\n        await signIn(\"resend\", formData)\n      }}\n    >\n      <input type=\"text\" name=\"email\" placeholder=\"Email\" />\n      <button type=\"submit\">Signin with Resend</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Next-Auth Adapter with TypeScript\nDESCRIPTION: This example shows how to implement a custom adapter for Next-Auth using TypeScript by importing the Adapter type from next-auth/adapters package. The function returns an object that should implement all required adapter methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-database-adapter.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Adapter } from \"next-auth/adapters\"\n\nfunction MyAdapter(): Adapter {\n  return {\n    // your adapter methods here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with a development-only Credentials provider\nDESCRIPTION: Auth.js configuration that includes a Credentials provider only in development environments. The provider accepts a hard-coded password for testing purposes, returning a mock user when the password matches.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/testing.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nimport Credentials from \"next-auth/providers/credentials\"\n\nconst providers = [GitHub]\n\nif (process.env.NODE_ENV === \"development\") {\n  providers.push(\n    Credentials({\n      id: \"password\",\n      name: \"Password\",\n      credentials: {\n        password: { label: \"Password\", type: \"password\" },\n      },\n      authorize: (credentials) => {\n        if (credentials.password === \"password\") {\n          return {\n            email: \"bob@alice.com\",\n            name: \"Bob Alice\",\n            image: \"https://avatars.githubusercontent.com/u/67470890?s=200&v=4\",\n          }\n        }\n      },\n    })\n  )\n}\n\nexport const { handlers, auth } = NextAuth({\n  providers,\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret\nDESCRIPTION: Command to generate a secure random value for the AUTH_SECRET environment variable using the Auth.js CLI. This adds the secret to your .env file automatically.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx auth secret\n```\n\n----------------------------------------\n\nTITLE: Next.js Route Handler for Auth.js\nDESCRIPTION: Sets up the API route handler for Auth.js in Next.js App Router. This file handles authentication requests at the /api/auth/[...nextauth] path.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handlers } from \"@/auth\" // Referring to the auth.ts we just created\nexport const { GET, POST } = handlers\n```\n\n----------------------------------------\n\nTITLE: Client-side Session Management in Next.js App Router\nDESCRIPTION: Shows how to implement client-side session handling in Next.js App Router with role-based access control.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { useSession } from \"next-auth/react\"\n\nexport default function Dashboard() {\n  const { data: session } = useSession()\n\n  if (session?.user?.role === \"admin\") {\n    return <p>You are an admin, welcome!</p>\n  }\n\n  return <p>You are not authorized to view this page!</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js v5 for Edge Compatibility in Next.js\nDESCRIPTION: This set of snippets demonstrates how to configure Auth.js v5 for edge compatibility in Next.js. It shows how to split the configuration into multiple files to ensure edge compatibility while still using database adapters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"next-auth/providers/github\"\nimport type { NextAuthConfig } from \"next-auth\"\n\nexport default { providers: [GitHub] } satisfies NextAuthConfig\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\nimport authConfig from \"./auth.config\"\n\nconst prisma = new PrismaClient()\n\nexport const { auth, handlers, signIn, signOut } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  session: { strategy: \"jwt\" },\n  ...authConfig,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport authConfig from \"./auth.config\"\nimport NextAuth from \"next-auth\"\n\n// Use only one of the two middleware options below\n// 1. Use middleware directly\n// export const { auth: middleware } = NextAuth(authConfig)\n\n// 2. Wrapped middleware option\nconst { auth } = NextAuth(authConfig)\nexport default auth(async function middleware(req: NextRequest) {\n  // Your custom middleware logic goes here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Sign-in Page in Next.js\nDESCRIPTION: This snippet shows how to create a custom sign-in page in Next.js using the providerMap from the auth configuration. It handles both credential-based login with a form and provider-based login with buttons, including error handling.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { redirect } from \"next/navigation\"\nimport { signIn, auth, providerMap } from \"@/auth.ts\"\nimport { AuthError } from \"next-auth\"\n\nexport default async function SignInPage(props: {\n  searchParams: { callbackUrl: string | undefined }\n}) {\n  return (\n    <div className=\"flex flex-col gap-2\">\n      <form\n        action={async (formData) => {\n          \"use server\"\n          try {\n            await signIn(\"credentials\", formData)\n          } catch (error) {\n            if (error instanceof AuthError) {\n              return redirect(`${SIGNIN_ERROR_URL}?error=${error.type}`)\n            }\n            throw error\n          }\n        }}\n      >\n        <label htmlFor=\"email\">\n          Email\n          <input name=\"email\" id=\"email\" />\n        </label>\n        <label htmlFor=\"password\">\n          Password\n          <input name=\"password\" id=\"password\" />\n        </label>\n        <input type=\"submit\" value=\"Sign In\" />\n      </form>\n      {Object.values(providerMap).map((provider) => (\n        <form\n          action={async () => {\n            \"use server\"\n            try {\n              await signIn(provider.id, {\n                redirectTo: props.searchParams?.callbackUrl ?? \"\",\n              })\n            } catch (error) {\n              // Signin can fail for a number of reasons, such as the user\n              // not existing, or the user not having the correct role.\n              // In some cases, you may want to redirect to a custom error\n              if (error instanceof AuthError) {\n                return redirect(`${SIGNIN_ERROR_URL}?error=${error.type}`)\n              }\n\n              // Otherwise if a redirects happens Next.js can handle it\n              // so you can just re-thrown the error and let Next.js handle it.\n              // Docs:\n              // https://nextjs.org/docs/app/api-reference/functions/redirect#server-component\n              throw error\n            }\n          }}\n        >\n          <button type=\"submit\">\n            <span>Sign in with {provider.name}</span>\n          </button>\n        </form>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Storing OAuth Token in NextAuth.js Session (TypeScript)\nDESCRIPTION: This snippet demonstrates how to store the OAuth access token in the NextAuth.js session. It first attaches the token to the JWT in the jwt callback, then makes it available in the session callback.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/integrating-third-party-backends.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\njwt({ token, trigger, session, account }) {\n  if (account?.provider === \"my-provider\") {\n    return { ...token, accessToken: account.access_token }\n  }\n  // ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync session({ session, token }) {\n  session.accessToken = token.accessToken\n  return session\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js v5 in Root Configuration File\nDESCRIPTION: Example of the new NextAuth.js v5 configuration pattern, which uses a root-level auth.ts file to export authentication methods. This replaces the previous pattern of exporting authOptions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { auth, handlers, signIn, signOut } = NextAuth({\n  providers: [GitHub, Google],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger in Next-Auth\nDESCRIPTION: Demonstrates how to implement a custom logger in Next-Auth to handle error, warning, and debug messages. This allows for integration with external logging services and custom log formatting.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/debugging.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport log from \"logging-service\"\nexport const { handlers, auth } = NextAuth({\n  logger: {\n    error(code, ...message) {\n      log.error(code, message)\n    },\n    warn(code, ...message) {\n      log.warn(code, message)\n    },\n    debug(code, ...message) {\n      log.debug(code, message)\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Role Column to User Model in Prisma\nDESCRIPTION: This Prisma schema snippet shows how to add a role column to the User model for storing user roles in the database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/role-based-access-control.mdx#2025-04-12_snippet_2\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime?\n  image         String?\n  role          String?  // New column\n  accounts      Account[]\n  sessions      Session[]\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Server Component Sign-in Implementation\nDESCRIPTION: Server-side signin implementation using Next.js server components with form action. Uses the Auth.js signIn function to handle authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from \"@/auth\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async () => {\n        \"use server\"\n        await signIn()\n      }}\n    >\n      <button type=\"submit\">Sign in</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Session Management Diagram\nDESCRIPTION: Mermaid diagram showing the relationship between User, Account, and Session models for database session management in Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-database-adapter.mdx#2025-04-12_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User ||--|{ Account : \"\"\n    User {\n      string id\n    }\n    User ||--|{ Session : \"\"\n    Session {\n      string id\n      timestamp expires\n      string sessionToken\n      string userId\n    }\n    Account {\n      string userId\n      string type\n      string provider\n      string providerAccountId\n    }\n```\n\n----------------------------------------\n\nTITLE: Auth.js Framework Integrations\nDESCRIPTION: Integration examples for Next.js, Qwik, SvelteKit, and Express frameworks using the Kysely adapter\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/kysely.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { KyselyAdapter } from \"@auth/kysely-adapter\"\nimport { db } from \"../../../db\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: KyselyAdapter(db),\n  providers: [],\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { KyselyAdapter } from \"@auth/kysely-adapter\"\nimport { db } from \"../../../db\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: KyselyAdapter(db),\n  })\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { KyselyAdapter } from \"@auth/kysely-adapter\"\nimport { db } from \"../../../db\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: KyselyAdapter(db),\n  providers: [],\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { KyselyAdapter } from \"@auth/kysely-adapter\"\nimport { db } from \"../../../db\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: KyselyAdapter(db),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Protecting Next.js App Router Page with Auth\nDESCRIPTION: This snippet demonstrates how to protect a Next.js App Router page using the auth function from Next-Auth. It checks for an active session and renders content accordingly.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from \"@/auth\"\n\nexport default async function Page() {\n  const session = await auth()\n  if (!session) return <div>Not authenticated</div>\n\n  return (\n    <div>\n      <pre>{JSON.stringify(session, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: SvelteKit GitHub OAuth Configuration\nDESCRIPTION: Implementation of GitHub OAuth authentication in SvelteKit using SvelteKitAuth. Configures the authentication provider and exports necessary handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/github.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport GitHub from \"@auth/sveltekit/providers/github\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [GitHub],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Refresh with JWT Strategy in Auth.js\nDESCRIPTION: This code demonstrates how to implement OAuth token refresh using the JWT session strategy. It saves the access token, expiry time, and refresh token in the JWT, then automatically refreshes the access token when it expires using Google's OAuth endpoints.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/refresh-token-rotation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { type User } from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Google({\n      // Google requires \"offline\" access_type to provide a `refresh_token`\n      authorization: { params: { access_type: \"offline\", prompt: \"consent\" } },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, account }) {\n      if (account) {\n        // First-time login, save the `access_token`, its expiry and the `refresh_token`\n        return {\n          ...token,\n          access_token: account.access_token,\n          expires_at: account.expires_at,\n          refresh_token: account.refresh_token,\n        }\n      } else if (Date.now() < token.expires_at * 1000) {\n        // Subsequent logins, but the `access_token` is still valid\n        return token\n      } else {\n        // Subsequent logins, but the `access_token` has expired, try to refresh it\n        if (!token.refresh_token) throw new TypeError(\"Missing refresh_token\")\n\n        try {\n          // The `token_endpoint` can be found in the provider's documentation. Or if they support OIDC,\n          // at their `/.well-known/openid-configuration` endpoint.\n          // i.e. https://accounts.google.com/.well-known/openid-configuration\n          const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n            method: \"POST\",\n            body: new URLSearchParams({\n              client_id: process.env.AUTH_GOOGLE_ID!,\n              client_secret: process.env.AUTH_GOOGLE_SECRET!,\n              grant_type: \"refresh_token\",\n              refresh_token: token.refresh_token!,\n            }),\n          })\n\n          const tokensOrError = await response.json()\n\n          if (!response.ok) throw tokensOrError\n\n          const newTokens = tokensOrError as {\n            access_token: string\n            expires_in: number\n            refresh_token?: string\n          }\n\n          return {\n            ...token,\n            access_token: newTokens.access_token,\n            expires_at: Math.floor(Date.now() / 1000 + newTokens.expires_in),\n            // Some providers only issue refresh tokens once, so preserve if we did not get a new one\n            refresh_token: newTokens.refresh_token\n              ? newTokens.refresh_token\n              : token.refresh_token,\n          }\n        } catch (error) {\n          console.error(\"Error refreshing access_token\", error)\n          // If we fail to refresh the token, return an error so we can handle it on the page\n          token.error = \"RefreshTokenError\"\n          return token\n        }\n      }\n    },\n    async session({ session, token }) {\n      session.error = token.error\n      return session\n    },\n  },\n})\n\ndeclare module \"next-auth\" {\n  interface Session {\n    error?: \"RefreshTokenError\"\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    access_token: string\n    expires_at: number\n    refresh_token?: string\n    error?: \"RefreshTokenError\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Auth.js Configuration with Passkey Provider\nDESCRIPTION: TypeScript configuration for setting up the Passkey provider with Prisma adapter in Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/webauthn.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Passkey from \"next-auth/providers/passkey\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default {\n  adapter: PrismaAdapter(prisma),\n  providers: [Passkey],\n  experimental: { enableWebAuthn: true },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js for Next.js\nDESCRIPTION: Command to install the Auth.js package for Next.js applications. Uses the beta version of next-auth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth@beta\n```\n\n----------------------------------------\n\nTITLE: Express Auth.js Integration\nDESCRIPTION: Sets up Auth.js in an Express application by adding the ExpressAuth middleware to handle authentication routes. Includes proxy configuration for proper header handling.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport express from \"express\"\n\nconst app = express()\n\n// If your app is served through a proxy\n// trust the proxy to allow us to read the `X-Forwarded-*` headers\napp.set(\"trust proxy\", true)\napp.use(\"/auth/*\", ExpressAuth({ providers: [] }))\n```\n\n----------------------------------------\n\nTITLE: Custom Profile Callback Implementation\nDESCRIPTION: Demonstrates how to customize the profile callback for an OAuth provider to return additional user information.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-oauth-providers.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport Auth0 from \"next-auth/providers/auth0\";\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Auth0({\n      // You can also make calls to external resources if necessary.\n      async profile(profile) {\n        return {};\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Configuration for Auth.js with Next.js\nDESCRIPTION: Dockerfile setup for deploying a Next.js application with Auth.js, including multi-stage build process and security configurations\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/deployment.mdx#2025-04-12_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node:20-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\n# Install dependencies\nCOPY package.json pnpm-lock.yaml* ./\nRUN corepack enable pnpm && pnpm i --frozen-lockfile\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# Next.js collects completely anonymous telemetry data about general usage.\n# Learn more here: https://nextjs.org/telemetry\n# Uncomment the following line in case you want to disable telemetry during the build.\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN corepack enable pnpm && pnpm build\n\n# Production image, copy all the files and run next\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n# Uncomment the following line in case you want to disable telemetry during runtime.\n# ENV NEXT_TELEMETRY_DISABLED 1\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\n\n# Set the correct permission for prerender cache\nRUN mkdir .next\nRUN chown nextjs:nodejs .next\n\n# Automatically leverage output traces to reduce image size\n# https://nextjs.org/docs/advanced-features/output-file-tracing\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\nENV HOSTNAME \"0.0.0.0\"\n\n# server.js is created by next build from the standalone output\n# https://nextjs.org/docs/pages/api-reference/next-config-js/output\nCMD [\"node\", \"server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Page with Next-Auth\nDESCRIPTION: Example of using the authenticated Next-Auth instance in a protected page component, showing session validation\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/edge-compatibility.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from \"@/auth\"\n\nexport default async function Page() {\n  const session = await auth()\n\n  if (!session) {\n    return <div>Not authenticated</div>\n  }\n\n  return (\n    <div className=\"container\">\n      <pre>{JSON.stringify(session, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NextAuth.js Configuration with authOptions\nDESCRIPTION: Demonstrates how to define the authOptions configuration object for NextAuth.js, which includes providers, callbacks, and other authentication settings. This configuration is exported for reuse across the application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/public/robots.txt#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextAuthOptions } from \"next-auth\"\nimport GitHubProvider from \"next-auth/providers/github\"\nimport CredentialsProvider from \"next-auth/providers/credentials\"\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    GitHubProvider({\n      clientId: process.env.GITHUB_ID as string,\n      clientSecret: process.env.GITHUB_SECRET as string,\n    }),\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        // Add logic here to look up the user from the credentials supplied\n        const user = { id: \"1\", name: \"J Smith\", email: \"jsmith@example.com\" }\n\n        if (user) {\n          // Any object returned will be saved in `user` property of the JWT\n          return user\n        } else {\n          // If you return null then an error will be displayed advising the user to check their details.\n          return null\n\n          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n        }\n      },\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Refresh with Database Strategy in Auth.js\nDESCRIPTION: This snippet shows how to implement OAuth token refresh using the database session strategy with Prisma adapter. It checks if the access token has expired and refreshes it by updating the tokens in the database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/refresh-token-rotation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    Google({\n      authorization: { params: { access_type: \"offline\", prompt: \"consent\" } },\n    }),\n  ],\n  callbacks: {\n    async session({ session, user }) {\n      const [googleAccount] = await prisma.account.findMany({\n        where: { userId: user.id, provider: \"google\" },\n      })\n      if (googleAccount.expires_at * 1000 < Date.now()) {\n        // If the access token has expired, try to refresh it\n        try {\n          // https://accounts.google.com/.well-known/openid-configuration\n          // We need the `token_endpoint`.\n          const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n            method: \"POST\",\n            body: new URLSearchParams({\n              client_id: process.env.AUTH_GOOGLE_ID!,\n              client_secret: process.env.AUTH_GOOGLE_SECRET!,\n              grant_type: \"refresh_token\",\n              refresh_token: googleAccount.refresh_token,\n            }),\n          })\n\n          const tokensOrError = await response.json()\n\n          if (!response.ok) throw tokensOrError\n\n          const newTokens = tokensOrError as {\n            access_token: string\n            expires_in: number\n            refresh_token?: string\n          }\n\n          await prisma.account.update({\n            data: {\n              access_token: newTokens.access_token,\n              expires_at: Math.floor(Date.now() / 1000 + newTokens.expires_in),\n              refresh_token:\n                newTokens.refresh_token ?? googleAccount.refresh_token,\n            },\n            where: {\n              provider_providerAccountId: {\n                provider: \"google\",\n                providerAccountId: googleAccount.providerAccountId,\n              },\n            },\n          })\n        } catch (error) {\n          console.error(\"Error refreshing access_token\", error)\n          // If we fail to refresh the token, return an error so we can handle it on the page\n          session.error = \"RefreshTokenError\"\n        }\n      }\n      return session\n    },\n  },\n})\n\ndeclare module \"next-auth\" {\n  interface Session {\n    error?: \"RefreshTokenError\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating getServerSideProps for Auth.js v5 in Next.js\nDESCRIPTION: This snippet shows how to update the getServerSideProps function in Next.js pages to use Auth.js v5. It replaces the getServerSession and getToken functions with the new auth function, simplifying server-side authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- import { getServerSession } from \"next-auth/next\"\n- import { getToken } from \"next-auth/jwt\"\n- import { authOptions } from \"pages/api/auth/[...nextauth]\"\n+ import { auth } from \"@/auth\"\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n-  const session = await getServerSession(context.req, context.res, authOptions)\n-  const token = await getToken({ req: context.req })\n+  const session = await auth(context)\n  if (session) {\n    // Do something with the session\n  }\n\n  return { props: { session } }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced sendVerificationRequest Function\nDESCRIPTION: This snippet presents a more advanced implementation of the sendVerificationRequest function. It uses the Resend API to send an HTML email with customized styling and branding for the authentication link.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-http-email.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest(params) {\n  const { identifier: to, provider, url, theme } = params\n  const { host } = new URL(url)\n  const res = await fetch(\"https://api.resend.com/emails\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${provider.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      from: provider.from,\n      to,\n      subject: `Sign in to ${host}`,\n      html: html({ url, host, theme }),\n      text: text({ url, host }),\n    }),\n  })\n\n  if (!res.ok)\n    throw new Error(\"Resend error: \" + JSON.stringify(await res.json()))\n}\n\nfunction html(params: { url: string; host: string; theme: Theme }) {\n  const { url, host, theme } = params\n\n  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\n\n  const brandColor = theme.brandColor || \"#346df1\"\n  const color = {\n    background: \"#f9f9f9\",\n    text: \"#444\",\n    mainBackground: \"#fff\",\n    buttonBackground: brandColor,\n    buttonBorder: brandColor,\n    buttonText: theme.buttonText || \"#fff\",\n  }\n\n  return `\n<body style=\"background: ${color.background};\">\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\n    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\n    <tr>\n      <td align=\"center\"\n        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n        Sign in to <strong>${escapedHost}</strong>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 20px 0;\">\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n          <tr>\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\n                target=\"_blank\"\n                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\n                in</a></td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"\n        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n        If you did not request this email you can safely ignore it.\n      </td>\n    </tr>\n  </table>\n</body>\n`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SessionProvider in Next.js _app.tsx\nDESCRIPTION: This snippet shows how to set up the SessionProvider in the Next.js _app.tsx file to enable client-side session access using useSession() hook.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from \"next/app\"\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function MyApp({\n  Component,\n  pageProps: { session, ...pageProps },\n}: AppProps) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />;\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Provider in Next.js\nDESCRIPTION: Sets up the LinkedIn provider for NextAuth in a Next.js application. This configuration imports the necessary modules and defines the authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/linkedin.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport LinkedIn from \"next-auth/providers/linkedin\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [LinkedIn],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling in Credentials Provider\nDESCRIPTION: Implementation of custom error messages for failed authentication attempts using a custom InvalidLoginError class that extends CredentialsSignin.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/credentials.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { CredentialsSignin } from \"next-auth\"\nimport Credentials from \"next-auth/providers/credentials\"\n\nclass InvalidLoginError extends CredentialsSignin {\n  code = \"Invalid identifier or password\"\n}\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Credentials({\n      credentials: {\n        username: { label: \"Username\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        throw new InvalidLoginError()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with Custom Sign-in Page in Next.js\nDESCRIPTION: This snippet shows how to set up NextAuth with custom providers and a provider map for a custom sign-in page in Next.js. It includes configuration for Credentials and GitHub providers, and exports a providerMap for use in the custom sign-in page.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nimport Credentials from \"next-auth/providers/credentials\"\nimport type { Provider } from \"next-auth/providers\"\n\nconst providers: Provider[] = [\n  Credentials({\n    credentials: { password: { label: \"Password\", type: \"password\" } },\n    authorize(c) {\n      if (c.password !== \"password\") return null\n      return {\n        id: \"test\",\n        name: \"Test User\",\n        email: \"test@example.com\",\n      }\n    },\n  }),\n  GitHub,\n]\n\nexport const providerMap = providers\n  .map((provider) => {\n    if (typeof provider === \"function\") {\n      const providerData = provider()\n      return { id: providerData.id, name: providerData.name }\n    } else {\n      return { id: provider.id, name: provider.name }\n    }\n  })\n  .filter((provider) => provider.id !== \"credentials\")\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers,\n  pages: {\n    signIn: \"/signin\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Auth.js Base Configuration\nDESCRIPTION: Initial setup of Auth.js in a SvelteKit application, which exports a handle function to be used in SvelteKit's hooks system.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\n\nexport const { handle } = SvelteKitAuth({\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Adapter in Next.js\nDESCRIPTION: Configuration code for setting up the DynamoDB adapter in a Next.js application, including AWS client initialization and Auth.js setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { DynamoDB, DynamoDBClientConfig } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocument } from \"@aws-sdk/lib-dynamodb\"\nimport { DynamoDBAdapter } from \"@auth/dynamodb-adapter\"\n\nconst config: DynamoDBClientConfig = {\n  credentials: {\n    accessKeyId: process.env.AUTH_DYNAMODB_ID,\n    secretAccessKey: process.env.AUTH_DYNAMODB_SECRET,\n  },\n  region: process.env.AUTH_DYNAMODB_REGION,\n}\n\nconst client = DynamoDBDocument.from(new DynamoDB(config), {\n  marshallOptions: {\n    convertEmptyValues: true,\n    removeUndefinedValues: true,\n    convertClassInstanceToMap: true,\n  },\n})\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: []\n  adapter: DynamoDBAdapter(client),\n})\n```\n\n----------------------------------------\n\nTITLE: Persisting Role with Database in Auth.js\nDESCRIPTION: This code shows how to persist the user role using a database adapter (Prisma) in Auth.js. It includes setting up the adapter and exposing the role in the session callback.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/role-based-access-control.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\nimport prisma from \"lib/prisma\"\n\nexport const { handlers, auth } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    Google({\n      profile(profile) {\n        return { role: profile.role ?? \"user\", ... }\n      }\n    })\n  ],\n  callbacks: {\n    session({ session, user }) {\n      session.user.role = user.role\n      return session\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering OAuthProviderSelect Component in Markdown\nDESCRIPTION: This snippet renders the OAuthProviderSelect component within the Markdown content, allowing users to interact with the OAuth provider selection interface.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/oauth.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<OAuthProviderSelect />\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Provider in Express\nDESCRIPTION: Demonstrates the configuration of Google OAuth provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Google from \"@auth/express/providers/google\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Google] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware for Auth\nDESCRIPTION: This code configures Next.js middleware to use the auth function for protecting routes and handling authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport { auth as middleware } from \"@/auth\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up NextAuth.js v5 API Route in App Router\nDESCRIPTION: Creates the API route handler for NextAuth.js v5 in the App Router. This simplified version imports handlers from the root auth configuration file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handlers } from \"@/auth\"\nexport const { GET, POST } = handlers\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with GitHub OAuth Credentials\nDESCRIPTION: Updates the .env.local file with the obtained GitHub Client ID and Client Secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=\"changeMe\"\n\nAUTH_GITHUB_ID={clientId}\nAUTH_GITHUB_SECRET={clientSecret}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for MySQL in Next-Auth\nDESCRIPTION: This schema defines the data models for User, Account, Session, VerificationToken, and Authenticator using MySQL as the database provider. It includes necessary fields and relations for Next-Auth functionality, with some fields using @db.Text for longer string storage.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_8\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id            String          @id @default(cuid())\n  name          String?\n  username      String?         @unique\n  email         String?         @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  // Optional for WebAuthn support\n  Authenticator Authenticator[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Account {\n  id                       String  @id @default(cuid())\n  userId                   String  @unique\n  type                     String\n  provider                 String\n  providerAccountId        String\n  refresh_token            String? @db.Text\n  access_token             String? @db.Text\n  expires_at               Int?\n  token_type               String?\n  scope                    String?\n  id_token                 String? @db.Text\n  session_state            String?\n  refresh_token_expires_in Int?\n  user                     User?   @relation(fields: [userId], references: [id])\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id])\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n  credentialID         String  @unique\n  userId               String\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([userId, credentialID])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-in Form in Next.js (Client Component)\nDESCRIPTION: Implementation of a sign-in form using Next.js client components that submits email and password credentials to the Auth.js Credentials provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { signIn } from \"next-auth/react\"\n\nexport function SignIn() {\n  const credentialsAction = (formData: FormData) => {\n    signIn(\"credentials\", formData)\n  }\n\n  return (\n    <form action={credentialsAction}>\n      <label htmlFor=\"credentials-email\">\n        Email\n        <input type=\"email\" id=\"credentials-email\" name=\"email\" />\n      </label>\n      <label htmlFor=\"credentials-password\">\n        Password\n        <input type=\"password\" id=\"credentials-password\" name=\"password\" />\n      </label>\n      <input type=\"submit\" value=\"Sign In\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with Resend Provider\nDESCRIPTION: Main Auth.js configuration file setup with Resend provider integration\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [Resend],\n})\n```\n\n----------------------------------------\n\nTITLE: Protecting Next.js API Route with Auth\nDESCRIPTION: This code shows how to protect a Next.js API route using the auth function to check for a valid session in the request.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { auth } from \"@/auth\"\nimport { NextResponse } from \"next/server\"\n\nexport const GET = auth(function GET(req) {\n  if (req.auth) return NextResponse.json(req.auth)\n  return NextResponse.json({ message: \"Not authenticated\" }, { status: 401 })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Express.js Backend with Keycloak Authentication (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure an Express.js backend to authorize requests using a Keycloak instance. It sets up JWT validation middleware and uses it to protect an API endpoint.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/integrating-third-party-backends.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = express()\nconst jwtCheck = jwt({\n  secret: jwks.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri:\n      \"https://keycloak.authjs.dev/realms/master/protocol/openid-connect/certs\",\n  }),\n  issuer: \"https://keycloak.authjs.dev/realms/master\",\n  algorithms: [\"RS256\"],\n})\napp.get(\"*\", jwtCheck, (req, res) => {\n  const name = req.auth?.name ?? \"unknown name\"\n  res.json({ greeting: `Hello, ${name}!` })\n})\n// ...\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js Middleware for Auth.js v5\nDESCRIPTION: This snippet shows how to update the Next.js middleware to use Auth.js v5. It demonstrates both a simple export and an advanced use case where auth is used as a wrapper for custom middleware logic.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- export { default } from \"next-auth/middleware\"\n+ export { auth as middleware } from \"@/auth\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { auth } from \"@/auth\"\n\nexport default auth((req) => {\n  // req.auth\n})\n\n// Optionally, don't invoke Middleware on some paths\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing E2E authentication tests with Playwright and Keycloak\nDESCRIPTION: Playwright test that validates the authentication flow with Keycloak. The test performs login with test credentials, verifies the session data, and then tests the logout functionality to ensure the session is cleared.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/testing.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect, type Page } from \"@playwright/test\"\n\ntest(\"Basic auth\", async ({ page, browser }) => {\n  if (\n    !process.env.TEST_KEYCLOAK_USERNAME ||\n    !process.env.TEST_KEYCLOAK_PASSWORD\n  )\n    throw new TypeError(\"Incorrect TEST_KEYCLOAK_{USERNAME,PASSWORD}\")\n\n  await test.step(\"should login\", async () => {\n    await page.goto(\"http://localhost:3000/auth/signin\")\n    await page.getByText(\"Keycloak\").click()\n    await page.getByText(\"Username or email\").waitFor()\n    await page\n      .getByLabel(\"Username or email\")\n      .fill(process.env.TEST_KEYCLOAK_USERNAME)\n    await page.locator(\"#password\").fill(process.env.TEST_KEYCLOAK_PASSWORD)\n    await page.getByRole(\"button\", { name: \"Sign In\" }).click()\n    await page.waitForURL(\"http://localhost:3000\")\n    const session = await page.locator(\"pre\").textContent()\n\n    expect(JSON.parse(session ?? \"{}\")).toEqual({\n      user: {\n        email: \"bob@alice.com\",\n        name: \"Bob Alice\",\n        image: \"https://avatars.githubusercontent.com/u/67470890?s=200&v=4\",\n      },\n      expires: expect.any(String),\n    })\n  })\n\n  await test.step(\"should logout\", async () => {\n    await page.getByText(\"Sign out\").click()\n    await page\n      .locator(\"header\")\n      .getByRole(\"button\", { name: \"Sign in\", exact: true })\n      .waitFor()\n    await page.goto(\"http://localhost:3000/auth/session\")\n\n    expect(await page.locator(\"html\").textContent()).toBe(\"null\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Microsoft Entra ID Authentication in Next.js\nDESCRIPTION: This code configures Microsoft Entra ID authentication in a Next.js application using NextAuth. It sets up the provider with the necessary environment variables for client ID, secret, and issuer.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/microsoft-entra-id.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport MicrosoftEntraID from \"next-auth/providers/microsoft-entra-id\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    MicrosoftEntraID({\n      clientId: process.env.AUTH_MICROSOFT_ENTRA_ID_ID,\n      clientSecret: process.env.AUTH_MICROSOFT_ENTRA_ID_SECRET,\n      issuer: process.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Authentication Component Implementation\nDESCRIPTION: SvelteKit implementation showing both server-side and client-side authentication methods using Auth.js components.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n</script>\n\n<header>\n  <nav>\n    <SignIn>\n      <span slot=\"submitButton\">Sign In with GitHub</span>\n    </SignIn>\n  </nav>\n</header>\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Schema for NextAuth.js using Drizzle ORM\nDESCRIPTION: This snippet defines the database schema for NextAuth.js using Drizzle ORM with PostgreSQL. It includes tables for users, accounts, sessions, verification tokens, and authenticators. The schema uses pgTable to define tables and their relationships.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  boolean,\n  timestamp,\n  pgTable,\n  text,\n  primaryKey,\n  integer,\n} from \"drizzle-orm/pg-core\"\nimport postgres from \"postgres\"\nimport { drizzle } from \"drizzle-orm/postgres-js\"\nimport type { AdapterAccountType } from \"next-auth/adapters\"\n\nconst connectionString = \"postgres://postgres:postgres@localhost:5432/drizzle\"\nconst pool = postgres(connectionString, { max: 1 })\n\nexport const db = drizzle(pool)\n\nexport const users = pgTable(\"user\", {\n  id: text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => crypto.randomUUID()),\n  name: text(\"name\"),\n  email: text(\"email\").unique(),\n  emailVerified: timestamp(\"emailVerified\", { mode: \"date\" }),\n  image: text(\"image\"),\n})\n\nexport const accounts = pgTable(\n  \"account\",\n  {\n    userId: text(\"userId\")\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n    type: text(\"type\").$type<AdapterAccountType>().notNull(),\n    provider: text(\"provider\").notNull(),\n    providerAccountId: text(\"providerAccountId\").notNull(),\n    refresh_token: text(\"refresh_token\"),\n    access_token: text(\"access_token\"),\n    expires_at: integer(\"expires_at\"),\n    token_type: text(\"token_type\"),\n    scope: text(\"scope\"),\n    id_token: text(\"id_token\"),\n    session_state: text(\"session_state\"),\n  },\n  (account) => [\n    {\n      compoundKey: primaryKey({\n        columns: [account.provider, account.providerAccountId],\n      }),\n    },\n  ]\n)\n\nexport const sessions = pgTable(\"session\", {\n  sessionToken: text(\"sessionToken\").primaryKey(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  expires: timestamp(\"expires\", { mode: \"date\" }).notNull(),\n})\n\nexport const verificationTokens = pgTable(\n  \"verificationToken\",\n  {\n    identifier: text(\"identifier\").notNull(),\n    token: text(\"token\").notNull(),\n    expires: timestamp(\"expires\", { mode: \"date\" }).notNull(),\n  },\n  (verificationToken) => [\n    {\n      compositePk: primaryKey({\n        columns: [verificationToken.identifier, verificationToken.token],\n      }),\n    },\n  ]\n)\n\nexport const authenticators = pgTable(\n  \"authenticator\",\n  {\n    credentialID: text(\"credentialID\").notNull().unique(),\n    userId: text(\"userId\")\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n    providerAccountId: text(\"providerAccountId\").notNull(),\n    credentialPublicKey: text(\"credentialPublicKey\").notNull(),\n    counter: integer(\"counter\").notNull(),\n    credentialDeviceType: text(\"credentialDeviceType\").notNull(),\n    credentialBackedUp: boolean(\"credentialBackedUp\").notNull(),\n    transports: text(\"transports\"),\n  },\n  (authenticator) => [\n    {\n      compositePK: primaryKey({\n        columns: [authenticator.userId, authenticator.credentialID],\n      }),\n    },\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Token Refresh in Client Component\nDESCRIPTION: This client component shows how to handle refresh token errors on the client side using the useSession hook from next-auth/react. It monitors for token refresh errors and triggers re-authentication when needed.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/refresh-token-rotation.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { useEffect } from \"react\"\nimport { signIn, useSession } from \"next-auth/react\"\n\nexport default function Page() {\n  const { data: session } = useSession() // For this to work, the Page should be wrapped inside the SessionProvider component in Layout\n  useEffect(() => {\n    if (session?.error !== \"RefreshTokenError\") return\n    signIn(\"google\") // Force sign in to obtain a new set of access and refresh tokens\n  }, [session?.error])\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Prisma Schema Migration for Next-Auth\nDESCRIPTION: This command creates an SQL migration file based on the defined Prisma schema and executes it. It requires the DATABASE_URL environment variable to be set with the database connection string.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Adapter in Qwik\nDESCRIPTION: Configuration code for setting up the DynamoDB adapter in a Qwik application, including AWS client initialization and Auth.js setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { DynamoDB, DynamoDBClientConfig } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocument } from \"@aws-sdk/lib-dynamodb\"\nimport { DynamoDBAdapter } from \"@auth/dynamodb-adapter\"\n\nconst config: DynamoDBClientConfig = {\n  credentials: {\n    accessKeyId: import.meta.env.AUTH_DYNAMODB_ID,\n    secretAccessKey: import.meta.env.AUTH_DYNAMODB_SECRET,\n  },\n  region: import.meta.env.AUTH_DYNAMODB_REGION,\n}\n\nconst client = DynamoDBDocument.from(new DynamoDB(config), {\n  marshallOptions: {\n    convertEmptyValues: true,\n    removeUndefinedValues: true,\n    convertClassInstanceToMap: true,\n  },\n})\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: DynamoDBAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic in Next.js Middleware\nDESCRIPTION: This code demonstrates how to implement custom logic in Next.js middleware using the auth function as a wrapper.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { auth } from \"@/auth\"\n\nexport default auth((req) => {\n  if (!req.auth && req.nextUrl.pathname !== \"/login\") {\n    const newUrl = new URL(\"/login\", req.nextUrl.origin)\n    return Response.redirect(newUrl)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Auth Configuration with Zod Validation\nDESCRIPTION: Implements credential validation in SvelteKit using Auth.js with Zod schema validation. Includes error handling and user verification logic.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport { ZodError } from \"zod\"\nimport Credentials from \"@auth/sveltekit/providers/credentials\"\nimport { signInSchema } from \"./lib/zod\"\n// Your own logic for dealing with plaintext password strings; be careful!\nimport { saltAndHashPassword } from \"@/utils/password\"\nimport { getUserFromDb } from \"@/utils/db\"\n\nexport const { handle } = SvelteKitAuth({\n  providers: [\n    Credentials({\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        email: {},\n        password: {},\n      },\n      authorize: async (credentials) => {\n        try {\n          let user = null\n\n          const { email, password } =\n            await createUserSchema.parseAsync(credentials)\n\n          // logic to salt and hash password\n          const pwHash = saltAndHashPassword(password)\n\n          // logic to verify if the user exists\n          user = await getUserFromDb(email, pwHash)\n\n          if (!user) {\n            throw new Error(\"Invalid credentials.\")\n          }\n\n          // return JSON object with the user data\n          return user\n        } catch (error) {\n          if (error instanceof ZodError) {\n            // Return `null` to indicate that the credentials are invalid\n            return null\n          }\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Auth.js Configuration for Next.js\nDESCRIPTION: Initial setup of Auth.js in a Next.js application. Creates a base configuration with an empty providers array and exports handler functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport const { handlers, signIn, signOut, auth } = NextAuth({\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with GitHub Provider\nDESCRIPTION: Creates the main Auth.js configuration file with GitHub as the OAuth provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [GitHub],\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Supabase Access Token and Querying Data in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to inject the Supabase access token into the client and use it to query data with row-level security enabled. It uses the createClient function from supabase-js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Use `useSession()` or `unstable_getServerSession()` to get the NextAuth session.\n\nconst { supabaseAccessToken } = session\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n  {\n    global: {\n      headers: {\n        Authorization: `Bearer ${supabaseAccessToken}`,\n      },\n    },\n  }\n)\n// Now you can query with RLS enabled.\nconst { data, error } = await supabase.from(\"users\").select(\"*\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Next-Auth Adapter with JavaScript and JSDoc\nDESCRIPTION: This example demonstrates how to implement a Next-Auth adapter in JavaScript while still leveraging type hints through JSDoc annotations. The @return comment provides editor hints and auto-completion for adapter methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-database-adapter.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/** @return { import(\"next-auth/adapters\").Adapter } */\nfunction MyAdapter() {\n  return {\n    // your adapter methods here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Auth Configuration with Zod Validation\nDESCRIPTION: Implements credential validation in Next.js using Auth.js with Zod schema validation. Includes error handling for invalid credentials and schema validation failures.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { ZodError } from \"zod\"\nimport Credentials from \"next-auth/providers/credentials\"\nimport { signInSchema } from \"./lib/zod\"\n// Your own logic for dealing with plaintext password strings; be careful!\nimport { saltAndHashPassword } from \"@/utils/password\"\nimport { getUserFromDb } from \"@/utils/db\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Credentials({\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        email: {},\n        password: {},\n      },\n      authorize: async (credentials) => {\n        try {\n          let user = null\n\n          const { email, password } = await signInSchema.parseAsync(credentials)\n\n          // logic to salt and hash password\n          const pwHash = saltAndHashPassword(password)\n\n          // logic to verify if the user exists\n          user = await getUserFromDb(email, pwHash)\n\n          if (!user) {\n            throw new Error(\"Invalid credentials.\")\n          }\n\n          // return JSON object with the user data\n          return user\n        } catch (error) {\n          if (error instanceof ZodError) {\n            // Return `null` to indicate that the credentials are invalid\n            return null\n          }\n        }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Connection String Environment Variables\nDESCRIPTION: Environment variables setup for SMTP server connection using a connection string format. This approach requires EMAIL_SERVER and EMAIL_FROM variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SERVER=smtp://username:password@smtp.example.com:587\nEMAIL_FROM=noreply@example.com\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Schema for NextAuth\nDESCRIPTION: SQL schema definition for creating the necessary tables used by the PostgreSQL adapter, including verification_token, accounts, sessions, and users tables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE verification_token\n(\n  identifier TEXT NOT NULL,\n  expires TIMESTAMPTZ NOT NULL,\n  token TEXT NOT NULL,\n\n  PRIMARY KEY (identifier, token)\n);\n\nCREATE TABLE accounts\n(\n  id SERIAL,\n  \"userId\" INTEGER NOT NULL,\n  type VARCHAR(255) NOT NULL,\n  provider VARCHAR(255) NOT NULL,\n  \"providerAccountId\" VARCHAR(255) NOT NULL,\n  refresh_token TEXT,\n  access_token TEXT,\n  expires_at BIGINT,\n  id_token TEXT,\n  scope TEXT,\n  session_state TEXT,\n  token_type TEXT,\n\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE sessions\n(\n  id SERIAL,\n  \"userId\" INTEGER NOT NULL,\n  expires TIMESTAMPTZ NOT NULL,\n  \"sessionToken\" VARCHAR(255) NOT NULL,\n\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE users\n(\n  id SERIAL,\n  name VARCHAR(255),\n  email VARCHAR(255),\n  \"emailVerified\" TIMESTAMPTZ,\n  image TEXT,\n\n  PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Making Authorized API Requests with NextAuth.js (TypeScript)\nDESCRIPTION: This code shows how to use the stored OAuth token to make authorized API requests. It demonstrates attaching the token as a Bearer token in the Authorization header of a fetch request within a Next.js Route Handler.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/integrating-third-party-backends.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function handler(request: NextRequest) {\n  const session = await auth()\n  return await fetch(/*<your-backend-url>/api/authenticated/greeting*/, {\n    headers: { \"Authorization\":  `Bearer ${session?.accessToken}` }\n  })\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: SessionProvider Setup in Next.js App Router\nDESCRIPTION: Demonstrates how to set up SessionProvider wrapper component in Next.js App Router.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SessionProvider } from \"next-auth/react\"\nimport { Dashboard } from \"./Dashboard\"\n\nexport default function Administrator() {\n  return (\n    <SessionProvider>\n      <Dashboard />\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for PostgreSQL in Next-Auth\nDESCRIPTION: This schema defines the data models for User, Account, Session, VerificationToken, and Authenticator using PostgreSQL as the database provider. It includes necessary fields and relations for Next-Auth functionality.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_7\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id            String          @id @default(cuid())\n  name          String?\n  email         String          @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  // Optional for WebAuthn support\n  Authenticator Authenticator[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Account {\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([provider, providerAccountId])\n}\n\nmodel Session {\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@id([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n  credentialID         String  @unique\n  userId               String\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([userId, credentialID])\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret via CLI\nDESCRIPTION: Command to generate a cryptographically secure random string for AUTH_SECRET environment variable\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/deployment.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec auth secret\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple OAuth Provider Environment Variables\nDESCRIPTION: Shows the standard naming pattern for OAuth provider credentials in .env files. This example configures Google, Twitter, and GitHub providers following Auth.js's environment variable inference convention.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Google\nAUTH_GOOGLE_ID=123\nAUTH_GOOGLE_SECRET=123\n\n# Twitter\nAUTH_TWITTER_ID=123\nAUTH_TWITTER_SECRET=123\n\n# GitHub\nAUTH_GITHUB_ID=123\nAUTH_GITHUB_SECRET=123\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema Migration for WebAuthn\nDESCRIPTION: SQL migration script to create the Authenticator table required for storing WebAuthn credentials, including foreign key relationships and indexes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/webauthn.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Authenticator\" (\n    \"credentialID\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"credentialPublicKey\" TEXT NOT NULL,\n    \"counter\" INTEGER NOT NULL,\n    \"credentialDeviceType\" TEXT NOT NULL,\n    \"credentialBackedUp\" BOOLEAN NOT NULL,\n    \"transports\" TEXT,\n    PRIMARY KEY (\"userId\", \"credentialID\"),\n    CONSTRAINT \"Authenticator_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n);\n\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Authenticator_credentialID_key\" ON \"Authenticator\"(\"credentialID\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Providers in SvelteKit\nDESCRIPTION: Example of how to set up multiple OAuth providers in SvelteKit using Auth.js. This demonstrates the standard pattern for integrating authentication providers in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Google from \"@auth/sveltekit/providers/google\"\nimport Twitter from \"@auth/sveltekit/providers/twitter\"\nimport GitHub from \"@auth/sveltekit/providers/github\"\n\nexport const { handle } = SvelteKitAuth({\n  providers: [Google, Twitter, GitHub],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Schema for NextAuth.js using Drizzle ORM\nDESCRIPTION: This snippet defines the database schema for NextAuth.js using Drizzle ORM with MySQL. It includes tables for users, accounts, sessions, verification tokens, and authenticators. The schema uses mysqlTable to define tables and their relationships.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  boolean,\n  int,\n  timestamp,\n  mysqlTable,\n  primaryKey,\n  varchar,\n} from \"drizzle-orm/mysql-core\"\nimport mysql from \"mysql2/promise\"\nimport { drizzle } from \"drizzle-orm/mysql2\"\nimport type { AdapterAccountType } from \"next-auth/adapters\"\n\nexport const connection = await mysql.createConnection({\n  host: \"host\",\n  user: \"user\",\n  password: \"password\",\n  database: \"database\",\n})\n\nexport const db = drizzle(connection)\n\nexport const users = mysqlTable(\"user\", {\n  id: varchar(\"id\", { length: 255 })\n    .primaryKey()\n    .$defaultFn(() => crypto.randomUUID()),\n  name: varchar(\"name\", { length: 255 }),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  emailVerified: timestamp(\"emailVerified\", {\n    mode: \"date\",\n    fsp: 3,\n  }),\n  image: varchar(\"image\", { length: 255 }),\n})\n\nexport const accounts = mysqlTable(\n  \"account\",\n  {\n    userId: varchar(\"userId\", { length: 255 })\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n    type: varchar(\"type\", { length: 255 })\n      .$type<AdapterAccountType>()\n      .notNull(),\n    provider: varchar(\"provider\", { length: 255 }).notNull(),\n    providerAccountId: varchar(\"providerAccountId\", { length: 255 }).notNull(),\n    refresh_token: varchar(\"refresh_token\", { length: 255 }),\n    access_token: varchar(\"access_token\", { length: 255 }),\n    expires_at: int(\"expires_at\"),\n    token_type: varchar(\"token_type\", { length: 255 }),\n    scope: varchar(\"scope\", { length: 255 }),\n    id_token: varchar(\"id_token\", { length: 2048 }),\n    session_state: varchar(\"session_state\", { length: 255 }),\n  },\n  (account) => ({\n    compoundKey: primaryKey({\n      columns: [account.provider, account.providerAccountId],\n    }),\n  })\n)\n\nexport const sessions = mysqlTable(\"session\", {\n  sessionToken: varchar(\"sessionToken\", { length: 255 }).primaryKey(),\n  userId: varchar(\"userId\", { length: 255 })\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  expires: timestamp(\"expires\", { mode: \"date\" }).notNull(),\n})\n\nexport const verificationTokens = mysqlTable(\n  \"verificationToken\",\n  {\n    identifier: varchar(\"identifier\", { length: 255 }).notNull(),\n    token: varchar(\"token\", { length: 255 }).notNull(),\n    expires: timestamp(\"expires\", { mode: \"date\" }).notNull(),\n  },\n  (verificationToken) => ({\n    compositePk: primaryKey({\n      columns: [verificationToken.identifier, verificationToken.token],\n    }),\n  })\n)\n\nexport const authenticators = mysqlTable(\n  \"authenticator\",\n  {\n    credentialID: varchar(\"credentialID\", { length: 255 }).notNull().unique(),\n    userId: varchar(\"userId\", { length: 255 })\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n    providerAccountId: varchar(\"providerAccountId\", { length: 255 }).notNull(),\n    credentialPublicKey: varchar(\"credentialPublicKey\", {\n      length: 255,\n    }).notNull(),\n    counter: int(\"counter\").notNull(),\n    credentialDeviceType: varchar(\"credentialDeviceType\", {\n      length: 255,\n    }).notNull(),\n    credentialBackedUp: boolean(\"credentialBackedUp\").notNull(),\n    transports: varchar(\"transports\", { length: 255 }),\n  },\n  (authenticator) => ({\n    compositePk: primaryKey({\n      columns: [authenticator.userId, authenticator.credentialID],\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-in Component in Qwik\nDESCRIPTION: This snippet demonstrates how to implement a sign-in component in Qwik using both server-side sign-in with Form action and client-side sign-in via submit method. It uses the useSignIn hook from the auth plugin.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { Form, Link } from \"@builder.io/qwik-city\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <>\n      {/* server-side login with Form action */}\n      <Form action={signInSig}>\n        <input type=\"hidden\" name=\"providerId\" value=\"<providerId>\" />\n        <input\n          type=\"hidden\"\n          name=\"options.redirectTo\"\n          value=\"/\"\n        />\n        <button>Sign In</button>\n      </Form>\n\n      {/* submit method */}\n      <Link\n        onClick$={() => signInSig.submit({ redirectTo: \"/\" })}\n      >\n        SignIn\n      </Link>\n    </>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Data in JSX\nDESCRIPTION: This code snippet imports necessary components and data for the database adapters documentation page in Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/database.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\"\nimport { Link } from \"@/components/Link\"\nimport manifest from \"@/data/manifest.json\"\n```\n\n----------------------------------------\n\nTITLE: Protecting SvelteKit API Route\nDESCRIPTION: This snippet demonstrates how to protect a SvelteKit API route by checking for an active session in the request handler.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport type { RequestHandler } from \"./$types\"\n\nexport const GET: RequestHandler = async (event) => {\n  const session = await event.locals.auth()\n\n  if (!session?.user?.userId) {\n    return new Response(null, { status: 401, statusText: \"Unauthorized\" })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EdgeDB Schema for Auth\nDESCRIPTION: EdgeDB schema definition (.esdl) file defining the data model for authentication, including User, Account, Session, and VerificationToken types with their properties and relationships.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule default {\n    type User {\n        property name -> str;\n        required property email -> str {\n            constraint exclusive;\n        }\n        property emailVerified -> datetime;\n        property image -> str;\n        multi link accounts := .<user[is Account];\n        multi link sessions := .<user[is Session];\n        property createdAt -> datetime {\n            default := datetime_current();\n        };\n    }\n\n    type Account {\n       required property userId := .user.id;\n       required property type -> str;\n       required property provider -> str;\n       required property providerAccountId -> str {\n        constraint exclusive;\n       };\n       property refresh_token -> str;\n       property access_token -> str;\n       property expires_at -> int64;\n       property token_type -> str;\n       property scope -> str;\n       property id_token -> str;\n       property session_state -> str;\n       required link user -> User {\n            on target delete delete source;\n       };\n       property createdAt -> datetime {\n            default := datetime_current();\n        };\n\n       constraint exclusive on ((.provider, .providerAccountId))\n    }\n\n    type Session {\n        required property sessionToken -> str {\n            constraint exclusive;\n        }\n        required property userId := .user.id;\n        required property expires -> datetime;\n        required link user -> User {\n            on target delete delete source;\n        };\n        property createdAt -> datetime {\n            default := datetime_current();\n        };\n    }\n\n    type VerificationToken {\n        required property identifier -> str;\n        required property token -> str {\n            constraint exclusive;\n        }\n        required property expires -> datetime;\n        property createdAt -> datetime {\n            default := datetime_current();\n        };\n\n        constraint exclusive on ((.identifier, .token))\n    }\n}\n\n# Disable the application of access policies within access policies\n# themselves. This behavior will become the default in EdgeDB 3.0.\n# See: https://www.edgedb.com/docs/reference/ddl/access_policies#nonrecursive\nusing future nonrecursive_access_policies;\n```\n\n----------------------------------------\n\nTITLE: Updating Next.js API Routes for Auth.js v5\nDESCRIPTION: This code snippet demonstrates how to update Next.js API routes to use Auth.js v5. It replaces the getServerSession and getToken functions with the new auth function, simplifying the authentication process in API handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- import { getServerSession } from \"next-auth/next\"\n- import { getToken } from \"next-auth/jwt\"\n- import { authOptions } from \"pages/api/auth/[...nextauth]\"\n+ import { auth } from \"@/auth\"\n+ import { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n-  const session = await getServerSession(req, res, authOptions)\n-  const token = await getToken({ req })\n+  const session = await auth(req, res)\n  if (session) return res.json(\"Success\")\n  return res.status(401).json(\"You must be logged in.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding OAuth Provider Scopes in Next.js\nDESCRIPTION: Example showing how to override default OAuth provider scopes in Next.js authentication configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-oauth-providers.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport Auth0 from \"next-auth/providers/auth0\";\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Auth0({ authorization: { params: { scope: \"openid custom_scope\" } } }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in Route in Express with Auth.js\nDESCRIPTION: This snippet demonstrates how to create a route for handling sign-in requests in an Express application. It uses the signIn function from Auth.js and redirects to the dashboard upon successful authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from \"express\"\nimport { signIn } from \"../auth\"\nconst router = express.Router()\n\nrouter.post(\"/auth/signin\", async (req: Request, res: Response) => {\n  try {\n    await signIn(req, res)\n    res.redirect(\"/dashboard\")\n  } catch (error) {\n    res.status(500).send(\"Sign in failed\")\n  }\n})\n\nexport { router }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Sign-in Page in SvelteKit\nDESCRIPTION: This snippet shows how to create a custom sign-in page component in SvelteKit using the SignIn component from @auth/sveltekit/components and the providerMap from the auth configuration. It renders sign-in buttons for each provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n  import { providerMap } from \"../../auth.ts\"\n</script>\n\n<div>\n  <div>\n    <h2>\n      <img src=\"/img/logo.png\" alt=\"Company Logo\" />\n      <span>Company</span>\n    </h2>\n    <div>\n      {#each providerMap as provider}\n        <SignIn provider={provider.id} signInPage=\"signin\" className=\"w-full\">\n          <div slot=\"submitButton\">\n            <span>\n              Signin with {provider.name}\n            </span>\n          </div>\n        </SignIn>\n      {/each}\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Provider in Express\nDESCRIPTION: This code snippet demonstrates how to set up Instagram as an authentication provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/instagram.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Instagram from \"@auth/express/providers/instagram\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Instagram] }))\n```\n\n----------------------------------------\n\nTITLE: Protecting SvelteKit Route with Auth Check\nDESCRIPTION: This snippet shows how to protect a SvelteKit route by checking for an active session in the load function of a +page.server.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { fail, redirect } from \"@sveltejs/kit\"\nimport type { PageServerLoad } from \"./$types\"\n\nexport const load: PageServerLoad = async (event) => {\n  const session = await event.locals.auth()\n\n  if (!session?.user?.userId) {\n    return fail(401, { type: \"error\", error: \"Unauthenticated\" })\n  }\n\n  return {\n    session,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with Prisma Adapter in SvelteKit\nDESCRIPTION: Implementation of the Prisma adapter with Auth.js in a SvelteKit application, showing how to set up authentication with the SvelteKitAuth function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/prisma\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables with API Key\nDESCRIPTION: Updated environment variables configuration including the Resend API key\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=\"changeMe\"\n\nAUTH_RESEND_KEY={apiKey}\n```\n\n----------------------------------------\n\nTITLE: Configuring DrizzleAdapter with NextAuth\nDESCRIPTION: Implementation of NextAuth authentication setup using DrizzleAdapter. Demonstrates basic configuration with database integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\"\nimport { db } from \"./schema.ts\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: DrizzleAdapter(db),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Adapter with SvelteKit\nDESCRIPTION: Implementation of the Neon adapter with Auth.js in a SvelteKit application. Creates a database connection pool inside the request handler to prevent connection issues.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport NeonAdapter from \"@auth/neon-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\n// *DO NOT* create a `Pool` here, outside the request handler.\n\nexport const { handle, signIn, signOut } = SvelteKitAuth(() => {\n  // Create a `Pool` inside the request handler.\n  const pool = new Pool({ connectionString: process.env.DATABASE_URL })\n  return {\n    adapter: NeonAdapter(pool),\n    providers: [],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using getServerSession in a Route Handler\nDESCRIPTION: Example of implementing getServerSession in a Next.js Route Handler to perform authentication checks before processing requests. This pattern is used for securing API routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/public/robots.txt#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getServerSession } from \"next-auth/next\"\nimport { authOptions } from \"../auth/[...nextauth]/route\"\n \nexport async function GET() {\n  const session = await getServerSession(authOptions)\n  return Response.json({\n    authenticated: !!session,\n    session,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with Prisma Adapter in Next.js\nDESCRIPTION: Implementation of the Prisma adapter with Auth.js in a Next.js application, importing the singleton Prisma instance and setting up the authentication handler.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/prisma\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Secure Schema for Dgraph with Auth Rules\nDESCRIPTION: Production-ready GraphQL schema definition for Dgraph with authentication rules using the @auth directive. This schema restricts access to Auth.js data types with JWT-based authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account\n  @auth(\n    delete: { rule: \"{$nextAuth: { eq: true } }\" }\n    add: { rule: \"{$nextAuth: { eq: true } }\" }\n    query: { rule: \"{$nextAuth: { eq: true } }\" }\n    update: { rule: \"{$nextAuth: { eq: true } }\" }\n  ) {\n  id: ID\n  type: String\n  provider: String @search(by: [hash])\n  providerAccountId: String @search(by: [hash])\n  refreshToken: String\n  expires_at: Int64\n  accessToken: String\n  token_type: String\n  refresh_token: String\n  access_token: String\n  scope: String\n  id_token: String\n  session_state: String\n  user: User @hasInverse(field: \"accounts\")\n}\ntype Session\n  @auth(\n    delete: { rule: \"{$nextAuth: { eq: true } }\" }\n    add: { rule: \"{$nextAuth: { eq: true } }\" }\n    query: { rule: \"{$nextAuth: { eq: true } }\" }\n    update: { rule: \"{$nextAuth: { eq: true } }\" }\n  ) {\n  id: ID\n  expires: DateTime\n  sessionToken: String @search(by: [hash])\n  user: User @hasInverse(field: \"sessions\")\n}\ntype User\n  @auth(\n    query: {\n      or: [\n        {\n          rule: \"\"\"\n          query ($userId: String!) {queryUser(filter: { id: { eq: $userId } } ) {id}}\n          \"\"\"\n        }\n        { rule: \"{$nextAuth: { eq: true } }\" }\n      ]\n    }\n    delete: { rule: \"{$nextAuth: { eq: true } }\" }\n    add: { rule: \"{$nextAuth: { eq: true } }\" }\n    update: {\n      or: [\n        {\n          rule: \"\"\"\n          query ($userId: String!) {queryUser(filter: { id: { eq: $userId } } ) {id}}\n          \"\"\"\n        }\n        { rule: \"{$nextAuth: { eq: true } }\" }\n      ]\n    }\n  ) {\n  id: ID\n  name: String\n  email: String @search(by: [hash])\n  emailVerified: DateTime\n  image: String\n  accounts: [Account] @hasInverse(field: \"user\")\n  sessions: [Session] @hasInverse(field: \"user\")\n}\n\ntype VerificationToken\n  @auth(\n    delete: { rule: \"{$nextAuth: { eq: true } }\" }\n    add: { rule: \"{$nextAuth: { eq: true } }\" }\n    query: { rule: \"{$nextAuth: { eq: true } }\" }\n    update: { rule: \"{$nextAuth: { eq: true } }\" }\n  ) {\n  id: ID\n  identifier: String @search(by: [hash])\n  token: String @search(by: [hash])\n  expires: DateTime\n}\n\n# Dgraph.Authorization {\"VerificationKey\":\"<YOUR JWT SECRET HERE>\",\"Header\":\"<YOUR AUTH HEADER HERE>\",\"Namespace\":\"<YOUR CUSTOM NAMESPACE HERE>\",\"Algo\":\"HS256\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials Provider in Express\nDESCRIPTION: Configuration for setting up username/password authentication in Express using the Credentials provider. Shows implementation with ExpressAuth middleware setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/credentials.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\";\nimport Credentials from \"@auth/express/providers/credentials\";\n\napp.use(\"/auth/*\", ExpressAuth({\n  providers: [\n    Credentials({\n      credentials: {\n        username: { label: \"Username\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize({ request }) {\n        const response = await fetch(request);\n        if (!response.ok) return null;\n        return (await response.json()) ?? null;\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing Database Schema with Mermaid\nDESCRIPTION: This code snippet uses Mermaid to create an Entity-Relationship Diagram (ERD) of the Auth.js database schema, showing the relationships between User, Account, Session, and VerificationToken entities.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/database.mdx#2025-04-12_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {'theme':'neutral'}}%%\nerDiagram\n    Account }o--|| User : \"\"\n    Account {\n        string userId\n        string type\n        string provider\n        string providerAccountId\n        string refresh_token\n        string access_token\n        int expires_at\n        string token_type\n        string scope\n        string id_token\n        string session_state\n    }\n    Session }o--|| User : \"\"\n    Session {\n        string userId\n        string sessionToken\n        timestamp expires\n    }\n    VerificationToken }o--|| User : \"\"\n    VerificationToken {\n        string identified\n        string token\n        timestamp expires\n    }\n    User {\n        string id\n        string name\n        string email\n        timestamp emailVerified\n        string image\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Provider in Next.js\nDESCRIPTION: Demonstrates how to configure the Google OAuth provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Google],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with D1 Adapter (Next.js)\nDESCRIPTION: Configuration for NextAuth using the D1 Adapter in a Next.js application. It sets up the authentication handlers and adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/d1.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { D1Adapter } from \"@auth/d1-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: D1Adapter(env.db),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in Next.js\nDESCRIPTION: Next.js implementation for Apple authentication using NextAuth. This code exports authentication handlers, auth function, and sign in/out methods with Apple configured as a provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/apple.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Apple from \"next-auth/providers/apple\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Apple],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing E2E authentication tests with Playwright and Credentials provider\nDESCRIPTION: Playwright test for the Credentials provider authentication flow. The test fills in the password field, verifies the session data after login, and then tests the logout functionality to ensure the session is properly cleared.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/testing.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect, type Page } from \"@playwright/test\"\n\ntest(\"Basic auth\", async ({ page, browser }) => {\n  if (!process.env.TEST_PASSWORD) throw new TypeError(\"Missing TEST_PASSWORD\")\n\n  await test.step(\"should login\", async () => {\n    await page.goto(\"http://localhost:3000/auth/signin\")\n    await page.getByLabel(\"Password\").fill(process.env.TEST_PASSWORD)\n    await page.getByRole(\"button\", { name: \"Sign In\" }).click()\n    await page.waitForURL(\"http://localhost:3000\")\n    const session = await page.locator(\"pre\").textContent()\n\n    expect(JSON.parse(session ?? \"{}\")).toEqual({\n      user: {\n        email: \"bob@alice.com\",\n        name: \"Bob Alice\",\n        image: \"https://avatars.githubusercontent.com/u/67470890?s=200&v=4\",\n      },\n      expires: expect.any(String),\n    })\n  })\n\n  await test.step(\"should logout\", async () => {\n    await page.getByText(\"Sign out\").click()\n    await page\n      .locator(\"header\")\n      .getByRole(\"button\", { name: \"Sign in\", exact: true })\n      .waitFor()\n    await page.goto(\"http://localhost:3000/auth/session\")\n\n    expect(await page.locator(\"html\").textContent()).toBe(\"null\")\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for MongoDB in Next-Auth\nDESCRIPTION: This schema defines the data models for User, Account, Session, VerificationToken, and Authenticator using MongoDB as the database provider. It includes necessary fields and relations for Next-Auth functionality, with MongoDB-specific field types and mappings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id            String          @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name          String?\n  email         String?         @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  // Optional for WebAuthn support\n  Authenticator Authenticator[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Account {\n  id                String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  userId            String  @db.ObjectId\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String? @db.String\n  access_token      String? @db.String\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String? @db.String\n  session_state     String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  sessionToken String   @unique\n  userId       String   @db.ObjectId\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel VerificationToken {\n  id         String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n  credentialID         String  @id @map(\"_id\")\n  userId               String  @db.ObjectId\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, credentialID])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Refresh Token Rotation with Azure DevOps\nDESCRIPTION: Example code showing how to implement refresh token rotation for Azure DevOps authentication, including JWT callback handling and a refresh token function that handles the specific requirements of Azure DevOps token refreshing.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { signIn, signOut, auth } = NextAuth({\n  callbacks: {\n    async jwt({ token, user, account }) {\n      // The token has an absolute expiration time\n      const accessTokenExpires = account.expires_at * 1000\n    },\n  },\n})\n\nasync function refreshAccessToken(token) {\n  const response = await fetch(\n    \"https://app.vssps.visualstudio.com/oauth2/token\",\n    {\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      method: \"POST\",\n      body: new URLSearchParams({\n        client_assertion_type:\n          \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\",\n        client_assertion: AZURE_DEVOPS_CLIENT_SECRET,\n        grant_type: \"refresh_token\",\n        assertion: token.refreshToken,\n        redirect_uri:\n          process.env.NEXTAUTH_URL + \"/api/auth/callback/azure-devops\",\n      }),\n    }\n  )\n\n  // The refreshed token comes with a relative expiration time\n  const accessTokenExpires = Date.now() + newToken.expires_in * 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Adapter and MongoDB for NextAuth.js\nDESCRIPTION: This snippet shows how to install the required packages for using MongoDB with NextAuth.js using npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/mongodb-adapter mongodb\n```\n\n----------------------------------------\n\nTITLE: Visualizing Auth.js Database Models Relationships with Mermaid\nDESCRIPTION: Entity-relationship diagram showing the structure and relationships between Auth.js database models. It displays User, Account, Session, and VerificationToken entities with their respective fields and relationships, serving as a visual representation of the database schema.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/concepts/database-models.mdx#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User ||--|{ Account : \"\"\n    User {\n      string id\n      string name\n      string email\n      timestamp emailVerified\n      string image\n    }\n    User ||--|{ Session : \"\"\n    Session {\n      string id\n      timestamp expires\n      string sessionToken\n      string userId\n    }\n    Account {\n      string id\n      string userId\n      string type\n      string provider\n      string providerAccountId\n      string refresh_token\n      string access_token\n      int expires_at\n      string token_type\n      string scope\n      string id_token\n      string session_state\n    }\n    User ||--|{ VerificationToken : \"\"\n    VerificationToken {\n      string identifier\n      string token\n      timestamp expires\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zitadel Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to configure the Zitadel provider in a Next.js application using NextAuth. It imports the necessary modules and sets up the authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zitadel.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Zitadel from \"next-auth/providers/zitadel\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Zitadel],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Adapter with Next.js\nDESCRIPTION: Implementation of the Neon adapter with NextAuth in a Next.js application. Creates a database connection pool inside the request handler to prevent connection issues.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport NeonAdapter from \"@auth/neon-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\n// *DO NOT* create a `Pool` here, outside the request handler.\n\nexport const { handlers, auth, signIn, signOut } = NextAuth(() => {\n  // Create a `Pool` inside the request handler.\n  const pool = new Pool({ connectionString: process.env.DATABASE_URL })\n  return {\n    adapter: NeonAdapter(pool),\n    providers: [],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft Entra ID Authentication in Qwik\nDESCRIPTION: This snippet demonstrates how to set up Microsoft Entra ID authentication in a Qwik application using the QwikAuth$ function. It configures the Entra provider with the required environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/microsoft-entra-id.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Entra from \"@auth/qwik/providers/microsoft-entra-id\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Entra({\n        clientId: import.meta.env.AUTH_MICROSOFT_ENTRA_ID_ID,\n        clientSecret: import.meta.env.AUTH_MICROSOFT_ENTRA_ID_SECRET,\n        issuer: import.meta.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Corporate Proxy with Undici in Auth.js\nDESCRIPTION: Configuration example showing how to use the Undici library to make OAuth requests through a proxy server. Uses ProxyAgent to create a custom dispatcher for handling proxy communications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/corporate-proxy.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport NextAuth, { customFetch } from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nimport { ProxyAgent, fetch as undici } from \"undici\"\n\nconst dispatcher = new ProxyAgent(\"my.proxy.server\")\nfunction proxy(...args: Parameters<typeof fetch>): ReturnType<typeof fetch> {\n  // @ts-expect-error `undici` has a `duplex` option\n  return undici(args[0], { ...args[1], dispatcher })\n}\n\nexport const { handlers, auth } = NextAuth({\n  providers: [GitHub({ [customFetch]: proxy })],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Adapter for Next.js\nDESCRIPTION: This code snippet shows how to configure the MongoDB adapter for Next.js using NextAuth. It imports necessary modules and sets up the adapter in the NextAuth configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { MongoDBAdapter } from \"@auth/mongodb-adapter\"\nimport client from \"./lib/db\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: MongoDBAdapter(client),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables setup for Auth.js and Resend integration\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=\"changeMe\"\n\nAUTH_RESEND_KEY=\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Adapter in Next.js\nDESCRIPTION: This code demonstrates how to set up the Supabase adapter in a Next.js application using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { SupabaseAdapter } from \"@auth/supabase-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: SupabaseAdapter({\n    url: process.env.SUPABASE_URL,\n    secret: process.env.SUPABASE_SERVICE_ROLE_KEY,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Xata Adapter with SvelteKit for Auth.js\nDESCRIPTION: TypeScript code snippet for configuring the Xata adapter with SvelteKit in Auth.js. It imports necessary modules and sets up the adapter with a Xata client.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { XataAdapter } from \"@auth/xata-adapter\"\nimport { XataClient } from \"../../../xata\" // Or wherever you've chosen for the generated client\n\nconst client = new XataClient()\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: XataAdapter(client),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Provider Configuration\nDESCRIPTION: Shows how to implement a custom OAuth/OIDC provider by specifying the necessary configuration parameters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-oauth-providers.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\n\nexport const { handlers, auth } = NextAuth({\n  providers: [{\n    id: \"my-provider\", // signIn(\"my-provider\") and will be part of the callback URL\n    name: \"My Provider\", // optional, used on the default login page as the button text.\n    type: \"oidc\", // or \"oauth\" for OAuth 2 providers\n    issuer: \"https://my.oidc-provider.com\", // to infer the .well-known/openid-configuration URL\n    clientId: process.env.AUTH_CLIENT_ID, // from the provider's dashboard\n    clientSecret: process.env.AUTH_CLIENT_SECRET, // from the provider's dashboard\n  }],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-in Form in Next.js (Server Component)\nDESCRIPTION: Implementation of a sign-in form using Next.js server components that submits email and password credentials to the Auth.js Credentials provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from \"@/auth\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async (formData) => {\n        \"use server\"\n        await signIn(\"credentials\", formData)\n      }}\n    >\n      <label>\n        Email\n        <input name=\"email\" type=\"email\" />\n      </label>\n      <label>\n        Password\n        <input name=\"password\" type=\"password\" />\n      </label>\n      <button>Sign In</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Core Types in TypeScript for Auth.js Frameworks\nDESCRIPTION: This code snippet demonstrates the new TypeScript exports from framework packages like 'next-auth' and '@auth/sveltekit'. It includes core types such as Account, DefaultSession, Profile, Session, and User.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport type {\n  Account,\n  DefaultSession,\n  Profile,\n  Session,\n  User,\n} from \"@auth/core/types\"\n```\n\n----------------------------------------\n\nTITLE: Custom Login Page with WebAuthn Implementation\nDESCRIPTION: React component implementing custom login page with WebAuthn authentication, including registration and sign-in functionality.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/webauthn.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\"\n\nimport { useSession } from \"next-auth/react\"\nimport { signIn } from \"next-auth/webauthn\"\n\nexport default function Login() {\n  const { data: session, update, status } = useSession()\n\n  return (\n    <div>\n      {status === \"authenticated\" ? (\n        <button onClick={() => signIn(\"passkey\", { action: \"register\" })}>\n          Register new Passkey\n        </button>\n      ) : status === \"unauthenticated\" ? (\n        <button onClick={() => signIn(\"passkey\")}>Sign in with Passkey</button>\n      ) : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta Provider in Next.js\nDESCRIPTION: Configuration for setting up Okta authentication in a Next.js application using NextAuth.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/okta.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Okta from \"next-auth/providers/okta\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Okta],\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Logto Provider in Next.js\nDESCRIPTION: Demonstrates how to set up Logto as an authentication provider in a Next.js application using NextAuth. This configuration enables Logto-based authentication in the app.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/logto.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Logto from \"next-auth/providers/logto\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Logto],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Out Component in Qwik\nDESCRIPTION: This Qwik component demonstrates two ways to handle sign out: a server-side approach using Form action and a client-side approach using the submit method. Both methods allow specifying a redirect URL after sign out.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signout.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { Form, Link } from \"@builder.io/qwik-city\"\nimport { useSignOut } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signOutSig = useSignOut()\n\n  return (\n    <>\n      {/* server-side with Form action */}\n      <Form action={signOutSig}>\n        <input type=\"hidden\" name=\"redirectTo\" value=\"/signedout\" />\n        <button>Sign Out</button>\n      </Form>\n\n      {/* submit method */}\n      <Link onClick$={() => signOutSig.submit({ redirectTo: \"/\" })}>\n        SignIn\n      </Link>\n    </>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta Provider in Express\nDESCRIPTION: Configuration for implementing Okta authentication in an Express.js application using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/okta.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Okta from \"@auth/express/providers/okta\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Okta] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials Provider in SvelteKit\nDESCRIPTION: Configuration for setting up username/password authentication in SvelteKit using the Credentials provider. Shows implementation with SvelteKitAuth and basic authentication setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/credentials.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Credentials from \"@auth/sveltekit/providers/credentials\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Credentials({\n      credentials: {\n        username: { label: \"Username\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize({ request }) {\n        const response = await fetch(request)\n        if (!response.ok) return null\n        return (await response.json()) ?? null\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Providers in Next.js\nDESCRIPTION: Example of how to set up multiple OAuth providers in Next.js using Auth.js. This simplified configuration relies on the environment variable inference to automatically pick up the right credentials.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\nimport Twitter from \"next-auth/providers/twitter\"\nimport GitHub from \"next-auth/providers/github\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [Google, Twitter, GitHub],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider in NextAuth.js\nDESCRIPTION: Sets up the Discord provider in NextAuth.js. This configuration imports the necessary modules and exports the authentication handlers and functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/discord.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Discord from \"next-auth/providers/discord\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Discord],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Verification Email Sending with Resend\nDESCRIPTION: Demonstrates a complete implementation of a custom sendVerificationRequest function for the Resend provider, including HTML email rendering and API call to Resend.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest(params) {\n  const { identifier: to, provider, url, theme } = params\n  const { host } = new URL(url)\n  const res = await fetch(\"https://api.resend.com/emails\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${provider.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      from: provider.from,\n      to,\n      subject: `Sign in to ${host}`,\n      html: html({ url, host, theme }),\n      text: text({ url, host }),\n    }),\n  })\n\n  if (!res.ok)\n    throw new Error(\"Resend error: \" + JSON.stringify(await res.json()))\n}\n\nfunction html(params: { url: string; host: string; theme: Theme }) {\n  const { url, host, theme } = params\n\n  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\n\n  const brandColor = theme.brandColor || \"#346df1\"\n  const color = {\n    background: \"#f9f9f9\",\n    text: \"#444\",\n    mainBackground: \"#fff\",\n    buttonBackground: brandColor,\n    buttonBorder: brandColor,\n    buttonText: theme.buttonText || \"#fff\",\n  }\n\n  return `\n<body style=\"background: ${color.background};\">\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\n    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\n    <tr>\n      <td align=\"center\"\n        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n        Sign in to <strong>${escapedHost}</strong>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 20px 0;\">\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n          <tr>\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\n                target=\"_blank\"\n                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\n                in</a></td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"\n        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n        If you did not request this email you can safely ignore it.\n      </td>\n    </tr>\n  </table>\n</body>\n`\n}\n\n// Email Text body (fallback for email clients that don't render HTML, e.g. feature phones)\nfunction text({ url, host }: { url: string; host: string }) {\n  return `Sign in to ${host}\\n${url}\\n\\n`\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Google OAuth in Next.js\nDESCRIPTION: Specifies the callback URL for Google OAuth integration in a Next.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/google\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Callback URLs\nDESCRIPTION: Examples of callback URLs for local and production environments in different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// Local\nhttp://localhost:3000/api/auth/callback/github\n\n// Prod\nhttps://app.company.com/api/auth/callback/github\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in SvelteKit\nDESCRIPTION: SvelteKit implementation for Apple authentication using SvelteKitAuth. This code exports the request handler and sign in/out methods with Apple configured as a provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/apple.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Apple from \"@auth/sveltekit/providers/apple\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Apple],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js in SvelteKit\nDESCRIPTION: Configures authentication in a SvelteKit application using GitHub as a provider. Sets up authentication handler and hooks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// src/auth.ts\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport GitHub from '@auth/sveltekit/providers/github'\n\nexport const { handle } = SvelteKitAuth({\n  providers: [GitHub],\n})\n\n// src/hooks.server.ts\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinterest Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Pinterest provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pinterest.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Pinterest from \"next-auth/providers/pinterest\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Pinterest],\n})\n```\n\n----------------------------------------\n\nTITLE: Server-side Session Handling in Next.js Pages Router\nDESCRIPTION: Shows how to implement server-side session handling using getServerSideProps in Next.js Pages Router.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth } from \"@/auth.ts\"\nimport { UserAvatar } from \"@/components/UserAvatar\"\n\nexport default function Dashboard({ session }) {\n  return (\n    <nav>\n      <UserAvatar session={session} />\n    </nav>\n  )\n}\n\nexport async function getServerSideProps(ctx) {\n  const session = await auth(ctx)\n\n  return {\n    props: {\n      session,\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with Sequelize Adapter (Next.js)\nDESCRIPTION: Configuration for NextAuth using the Sequelize adapter in a Next.js application. It initializes Sequelize with the database URL and sets up the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SequelizeAdapter from \"@auth/sequelize-adapter\"\nimport { Sequelize } from \"sequelize\"\n\nconst sequelize = new Sequelize(process.env.DATABASE_URL)\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: SequelizeAdapter(sequelize),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider with Custom Domain\nDESCRIPTION: Updated Auth.js configuration with custom domain email address for Resend provider\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Resend({\n      from: \"auth@app.company.com\",\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider in Express\nDESCRIPTION: Implementation of the Credentials provider in Express.js Auth.js integration with email/password authentication, including password hashing and user verification.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Credentials from \"@auth/express/providers/credentials\"\nimport express from \"express\"\n// Your own logic for dealing with plaintext password strings; be careful!\nimport { saltAndHashPassword } from \"@/utils/password\"\n\nconst app = express()\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      Credentials({\n        // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n        // e.g. domain, username, password, 2FA token, etc.\n        credentials: {\n          email: {},\n          password: {},\n        },\n        authorize: async (credentials) => {\n          let user = null\n\n          // logic to salt and hash password\n          const pwHash = saltAndHashPassword(credentials.password)\n\n          // logic to verify if the user exists\n          user = await getUserFromDb(credentials.email, pwHash)\n\n          if (!user) {\n            // No user found, so this is their first attempt to login\n            // Optionally, this is also the place you could do a user registration\n            throw new Error(\"Invalid credentials.\")\n          }\n\n          // return user object with the their profile data\n          return user\n        },\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with SurrealDB Adapter\nDESCRIPTION: Next.js configuration for NextAuth using the SurrealDB adapter. It imports necessary dependencies and sets up the authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { SurrealDBAdapter } from \"@auth/surrealdb-adapter\"\nimport clientPromise from \"./lib/surrealdb\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: SurrealDBAdapter(clientPromise),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with Prisma Adapter in Express\nDESCRIPTION: Implementation of the Prisma adapter with Auth.js in an Express application, showing how to set up authentication routes with the ExpressAuth function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/prisma\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: PrismaAdapter(prisma),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Row Level Security with Supabase and Auth.js\nDESCRIPTION: This code snippet demonstrates how to enable Row Level Security by generating a Supabase access token JWT in the session callback of Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { SupabaseAdapter } from \"@auth/supabase-adapter\"\nimport jwt from \"jsonwebtoken\"\n\n// For more information on each option (and a full list of options) go to\n// https://authjs.dev/reference/core/types#authconfig\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  // https://authjs.dev/getting-started/authentication/oauth\n  providers: [],\n  adapter: SupabaseAdapter({\n    url: process.env.NEXT_PUBLIC_SUPABASE_URL,\n    secret: process.env.SUPABASE_SERVICE_ROLE_KEY,\n  }),\n  callbacks: {\n    async session({ session, user }) {\n      const signingSecret = process.env.SUPABASE_JWT_SECRET\n      if (signingSecret) {\n        const payload = {\n          aud: \"authenticated\",\n          exp: Math.floor(new Date(session.expires).getTime() / 1000),\n          sub: user.id,\n          email: user.email,\n          role: \"authenticated\",\n        }\n        session.supabaseAccessToken = jwt.sign(payload, signingSecret)\n      }\n      return session\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Authorized Callback in Next-Auth Configuration\nDESCRIPTION: This snippet shows how to define the authorized callback in the Next-Auth configuration to handle authentication logic.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport const { auth, handlers } = NextAuth({\n  callbacks: {\n    authorized: async ({ auth }) => {\n      // Logged in users are authenticated, otherwise redirect to login page\n      return !!auth\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Auth.js Passkey Configuration\nDESCRIPTION: Configuration setup for enabling Passkey provider in Auth.js with Prisma adapter\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passkey.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Passkey from \"next-auth/providers/passkey\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { PrismaClient } from \"@prisma/client\"\n\nconst prisma = new PrismaClient()\n\nexport default {\n  adapter: PrismaAdapter(prisma),\n  providers: [Passkey],\n  experimental: { enableWebAuthn: true },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Next-Auth\nDESCRIPTION: Shows how to enable basic debugging in Next-Auth by setting the debug flag to true in the configuration. This will log authentication details to the console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/debugging.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport const { handlers, auth } = NextAuth({\n  debug: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Variables in SvelteKit Configuration\nDESCRIPTION: Demonstrates how to manually reference custom environment variable names in the SvelteKit Auth.js configuration when not following the standard naming convention. Includes both the auth configuration and the hooks file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Google from \"@auth/sveltekit/providers/google\"\nimport { env } from \"$env/dynamic/private\"\n\nexport const { handle } = SvelteKitAuth({\n  providers: [\n    Google({\n      clientId: env.AUTH_WEBAPP_GOOGLE_CLIENT_ID,\n      clientSecret: env.AUTH_WEBAPP_GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Express GitHub OAuth Configuration\nDESCRIPTION: Implementation of GitHub OAuth authentication in Express.js using ExpressAuth. Sets up authentication middleware for handling OAuth routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/github.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport GitHub from \"@auth/express/providers/github\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [GitHub] }))\n```\n\n----------------------------------------\n\nTITLE: Customizing Verification Token Generation for Resend Provider\nDESCRIPTION: Shows how to override the default verification token generation method for the Resend provider using a custom generateVerificationToken function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Resend({\n      async generateVerificationToken() {\n        return crypto.randomUUID()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Normalization with NextAuth and Mailgun Provider\nDESCRIPTION: Demonstrates how to customize email address normalization in NextAuth.js using the Mailgun provider. The code shows the default normalization behavior which converts emails to lowercase, trims whitespace, and handles comma-separated addresses by taking only the first email. It includes commented code showing how to implement custom validation.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailgun.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Mailgun from \"next-auth/providers/mailgun\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Mailgun({\n      normalizeIdentifier(identifier: string): string {\n        // Get the first two elements only,\n        // separated by `@` from user input.\n        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n        // The part before \"@\" can contain a \",\"\n        // but we remove it on the domain part\n        domain = domain.split(\",\")[0]\n        return `${local}@${domain}`\n\n        // You can also throw an error, which will redirect the user\n        // to the sign-in page with error=EmailSignin in the URL\n        // if (identifier.split(\"@\").length > 2) {\n        //   throw new Error(\"Only one email allowed\")\n        // }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Auth.js with QwikAuth\nDESCRIPTION: This snippet demonstrates how to configure Auth.js in a Qwik application using QwikAuth with a Credentials provider. It sets up authentication with a username and password form.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Credentials from \"@auth/qwik/providers/credentials\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Credentials({\n        credentials: {\n          username: { label: \"Username\" },\n          password: { label: \"Password\", type: \"password\" },\n        },\n        async authorize({ request }) {\n          if (c.password !== \"password\") return null\n          return {\n            id: \"test\",\n            name: \"Test User\",\n            email: \"test@example.com\",\n          }\n        },\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks including Next.js, Qwik, and Svelte. These URLs need to be configured in the GitHub OAuth App settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/github.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/github\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/github\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton Prisma Instance\nDESCRIPTION: Code for creating a singleton Prisma client instance to improve performance by avoiding recreation of PrismaClient instances throughout the application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\"\n\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient }\n\nexport const prisma = globalForPrisma.prisma || new PrismaClient()\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Adapter for SvelteKit\nDESCRIPTION: This code shows how to configure the MongoDB adapter for SvelteKit using SvelteKitAuth. It imports the required modules and sets up the adapter in the SvelteKitAuth configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { MongoDBAdapter } from \"@auth/mongodb-adapter\"\nimport client from \"./lib/db\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: MongoDBAdapter(client),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Duende Identity Server Provider in Next.js\nDESCRIPTION: Demonstrates how to set up Duende Identity Server 6 as an authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport DuendeIdentityServer6 from \"next-auth/providers/duende-identity-server6\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [DuendeIdentityServer6],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Adapter for Express\nDESCRIPTION: This snippet illustrates how to set up the MongoDB adapter for Express using ExpressAuth. It imports the necessary modules, creates an Express app, and configures the adapter in the ExpressAuth middleware.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { MongoDBAdapter } from \"@auth/mongodb-adapter\"\nimport client from \"./lib/db\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: MongoDBAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Database Migration Setup for Drizzle\nDESCRIPTION: Implementation of database migration script using Drizzle ORM, showing how to run migrations and properly close database connections.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"dotenv/config\"\nimport { migrate } from \"drizzle-orm/mysql2/migrator\"\nimport { db, connection } from \"./db\"\n\n// This will run migrations on the database, skipping the ones already applied\nawait migrate(db, { migrationsFolder: \"./drizzle\" })\n\n// Don't forget to close the connection, otherwise the script will hang\nawait connection.end()\n```\n\n----------------------------------------\n\nTITLE: Extending Session Type in Express Auth Configuration\nDESCRIPTION: Demonstrates how to extend the Session interface in Express.js using TypeScript module augmentation to add a custom id property to the user object.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/typescript.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuthConfig } from \"@auth/express\";\ndeclare module \"@auth/express\" {\n  interface Session {\n    user: {\n      id: string;\n    };\n  }\n}\n\nexport const authConfig: ExpressAuthConfig = {\n  callbacks: {\n    async session({ session, token }) {\n      if (token.sub) {\n        session.user.id = token.sub;\n      }\n      return session;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Dgraph Adapter with Next.js\nDESCRIPTION: Implementation of the Dgraph adapter in a Next.js authentication setup. Configures the adapter with endpoint, auth token, and optional security parameters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { DgraphAdapter } from \"@auth/dgraph-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: DgraphAdapter({\n    endpoint: process.env.AUTH_DGRAPH_GRAPHQL_ENDPOINT,\n    authToken: process.env.AUTH_DGRAPH_GRAPHQL_KEY,\n    // you can omit the following properties if you are running an unsecure schema\n    authHeader: process.env.AUTH_HEADER, // default: \"Authorization\",\n    jwtSecret: process.env.AUTH_SECRET,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure DevOps Provider in Express\nDESCRIPTION: Code example showing how to configure Azure DevOps authentication provider in an Express application using the @auth/express library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport AzureDevOps from \"@auth/express/providers/azure-devops\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      AzureDevOps({\n        clientId: AUTH_AZURE_DEVOPS_APP_ID,\n        clientSecret: AUTH_AZURE_DEVOPS_CLIENT_SECRET,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Protecting Next.js Pages Router API Route\nDESCRIPTION: This snippet demonstrates how to protect a Next.js Pages Router API route by checking for an active session.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\"\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const url = `${req.headers[\"x-forwarded-proto\"]}://${req.headers.host}/api/auth/session`\n\n  const sessionRes = await fetch(url)\n  const session = await sessionRes.json()\n\n  if (!session.user) {\n    return res.status(401).json({ message: \"Not authenticated\" })\n  }\n\n  return res.json({ data: \"Protected data\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next Auth with Loops Provider in TypeScript\nDESCRIPTION: Demonstrates how to set up Next Auth with the Loops provider in a Next.js application. It includes importing necessary modules and configuring the auth object with the Loops provider using environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/loops.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Loops from \"next-auth/providers/loops\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ..., // database adapter of your choosing\n  providers: [\n    Loops({\n      apiKey: process.env.AUTH_LOOPS_KEY,\n      transactionalId: process.env.AUTH_LOOPS_TRANSACTIONAL_ID,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Auth0 provider in a Next.js application using Next-Auth. This configuration exports authentication handlers and functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Auth0 from \"next-auth/providers/auth0\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Auth0],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Adapter in Express\nDESCRIPTION: Configuration code for setting up the DynamoDB adapter in an Express application, including AWS client initialization and Auth.js setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { DynamoDB, DynamoDBClientConfig } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocument } from \"@aws-sdk/lib-dynamodb\"\nimport { DynamoDBAdapter } from \"@auth/dynamodb-adapter\"\n\nconst app = express()\n\nconst config: DynamoDBClientConfig = {\n  credentials: {\n    accessKeyId: process.env.AUTH_DYNAMODB_ID,\n    secretAccessKey: process.env.AUTH_DYNAMODB_SECRET,\n  },\n  region: process.env.AUTH_DYNAMODB_REGION,\n}\n\nconst client = DynamoDBDocument.from(new DynamoDB(config), {\n  marshallOptions: {\n    convertEmptyValues: true,\n    removeUndefinedValues: true,\n    convertClassInstanceToMap: true,\n  },\n})\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: DynamoDBAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Sequelize Models for NextAuth\nDESCRIPTION: Advanced usage example showing how to customize Sequelize models for NextAuth, including adding a custom field to the User model.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SequelizeAdapter, { models } from \"@auth/sequelize-adapter\"\nimport Sequelize, { DataTypes } from \"sequelize\"\n\nconst sequelize = new Sequelize(\"sqlite::memory:\")\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  // https://authjs.dev/reference/providers/\n  providers: [],\n  adapter: SequelizeAdapter(sequelize, {\n    models: {\n      User: sequelize.define(\"user\", {\n        ...models.User,\n        phoneNumber: DataTypes.STRING,\n      }),\n    },\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Supabase Database Schema for Auth.js\nDESCRIPTION: This SQL script creates the necessary schema and tables in Supabase for Auth.js to function properly.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Name: next_auth; Type: SCHEMA;\n--\nCREATE SCHEMA next_auth;\n\nGRANT USAGE ON SCHEMA next_auth TO service_role;\nGRANT ALL ON SCHEMA next_auth TO postgres;\n\n--\n-- Create users table\n--\nCREATE TABLE IF NOT EXISTS next_auth.users\n(\n    id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    name text,\n    email text,\n    \"emailVerified\" timestamp with time zone,\n    image text,\n    CONSTRAINT users_pkey PRIMARY KEY (id),\n    CONSTRAINT email_unique UNIQUE (email)\n);\n\nGRANT ALL ON TABLE next_auth.users TO postgres;\nGRANT ALL ON TABLE next_auth.users TO service_role;\n\n--- uid() function to be used in RLS policies\nCREATE FUNCTION next_auth.uid() RETURNS uuid\n    LANGUAGE sql STABLE\n    AS $$\n  select\n  \tcoalesce(\n\t\tnullif(current_setting('request.jwt.claim.sub', true), ''),\n\t\t(nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')\n\t)::uuid\n$$;\n\n--\n-- Create sessions table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.sessions\n(\n    id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    expires timestamp with time zone NOT NULL,\n    \"sessionToken\" text NOT NULL,\n    \"userId\" uuid,\n    CONSTRAINT sessions_pkey PRIMARY KEY (id),\n    CONSTRAINT sessionToken_unique UNIQUE (\"sessionToken\"),\n    CONSTRAINT \"sessions_userId_fkey\" FOREIGN KEY (\"userId\")\n        REFERENCES  next_auth.users (id) MATCH SIMPLE\n        ON UPDATE NO ACTION\n        ON DELETE CASCADE\n);\n\nGRANT ALL ON TABLE next_auth.sessions TO postgres;\nGRANT ALL ON TABLE next_auth.sessions TO service_role;\n\n--\n-- Create accounts table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.accounts\n(\n    id uuid NOT NULL DEFAULT uuid_generate_v4(),\n    type text NOT NULL,\n    provider text NOT NULL,\n    \"providerAccountId\" text NOT NULL,\n    refresh_token text,\n    access_token text,\n    expires_at bigint,\n    token_type text,\n    scope text,\n    id_token text,\n    session_state text,\n    oauth_token_secret text,\n    oauth_token text,\n    \"userId\" uuid,\n    CONSTRAINT accounts_pkey PRIMARY KEY (id),\n    CONSTRAINT provider_unique UNIQUE (provider, \"providerAccountId\"),\n    CONSTRAINT \"accounts_userId_fkey\" FOREIGN KEY (\"userId\")\n        REFERENCES  next_auth.users (id) MATCH SIMPLE\n        ON UPDATE NO ACTION\n        ON DELETE CASCADE\n);\n\nGRANT ALL ON TABLE next_auth.accounts TO postgres;\nGRANT ALL ON TABLE next_auth.accounts TO service_role;\n\n--\n-- Create verification_tokens table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.verification_tokens\n(\n    identifier text,\n    token text,\n    expires timestamp with time zone NOT NULL,\n    CONSTRAINT verification_tokens_pkey PRIMARY KEY (token),\n    CONSTRAINT token_unique UNIQUE (token),\n    CONSTRAINT token_identifier_unique UNIQUE (token, identifier)\n);\n\nGRANT ALL ON TABLE next_auth.verification_tokens TO postgres;\nGRANT ALL ON TABLE next_auth.verification_tokens TO service_role;\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Schema for NextAuth.js using Drizzle ORM\nDESCRIPTION: This snippet defines the database schema for NextAuth.js using Drizzle ORM with SQLite. It includes tables for users, accounts, sessions, verification tokens, and authenticators. The schema uses sqliteTable to define tables and their relationships.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { integer, sqliteTable, text, primaryKey } from \"drizzle-orm/sqlite-core\"\nimport { createClient } from \"@libsql/client\"\nimport { drizzle } from \"drizzle-orm/libsql\"\nimport type { AdapterAccountType } from \"next-auth/adapters\"\n\nconst client = createClient({\n  url: \"DATABASE_URL\",\n  authToken: \"DATABASE_AUTH_TOKEN\",\n})\nexport const db = drizzle(client)\n\nexport const users = sqliteTable(\"user\", {\n  id: text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => crypto.randomUUID()),\n  name: text(\"name\"),\n  email: text(\"email\").unique(),\n  emailVerified: integer(\"emailVerified\", { mode: \"timestamp_ms\" }),\n  image: text(\"image\"),\n})\n\nexport const accounts = sqliteTable(\n  \"account\",\n  {\n    userId: text(\"userId\")\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n    type: text(\"type\").$type<AdapterAccountType>().notNull(),\n    provider: text(\"provider\").notNull(),\n    providerAccountId: text(\"providerAccountId\").notNull(),\n    refresh_token: text(\"refresh_token\"),\n    access_token: text(\"access_token\"),\n    expires_at: integer(\"expires_at\"),\n    token_type: text(\"token_type\"),\n    scope: text(\"scope\"),\n    id_token: text(\"id_token\"),\n    session_state: text(\"session_state\"),\n  },\n  (account) => ({\n    compoundKey: primaryKey({\n      columns: [account.provider, account.providerAccountId],\n    }),\n  })\n)\n\nexport const sessions = sqliteTable(\"session\", {\n  sessionToken: text(\"sessionToken\").primaryKey(),\n  userId: text(\"userId\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  expires: integer(\"expires\", { mode: \"timestamp_ms\" }).notNull(),\n})\n\nexport const verificationTokens = sqliteTable(\n  \"verificationToken\",\n  {\n    identifier: text(\"identifier\").notNull(),\n    token: text(\"token\").notNull(),\n    expires: integer(\"expires\", { mode: \"timestamp_ms\" }).notNull(),\n  },\n  (verificationToken) => ({\n    compositePk: primaryKey({\n      columns: [verificationToken.identifier, verificationToken.token],\n    }),\n  })\n)\n\nexport const authenticators = sqliteTable(\n  \"authenticator\",\n  {\n    credentialID: text(\"credentialID\").notNull().unique(),\n    userId: text(\"userId\")\n      .notNull()\n      .references(() => users.id, { onDelete: \"cascade\" }),\n    providerAccountId: text(\"providerAccountId\").notNull(),\n    credentialPublicKey: text(\"credentialPublicKey\").notNull(),\n    counter: integer(\"counter\").notNull(),\n    credentialDeviceType: text(\"credentialDeviceType\").notNull(),\n    credentialBackedUp: integer(\"credentialBackedUp\", {\n      mode: \"boolean\",\n    }).notNull(),\n    transports: text(\"transports\"),\n  },\n  (authenticator) => ({\n    compositePK: primaryKey({\n      columns: [authenticator.userId, authenticator.credentialID],\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sign-In Page in SvelteKit with Auth.js\nDESCRIPTION: This snippet shows how to set up a custom sign-in page in SvelteKit using Auth.js. It exports a provider map for later use, configures GitHub as a provider, and sets a custom sign-in page path.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/custom-pages.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport GitHub from \"@auth/sveltekit/providers/github\"\nimport type { Provider } from \"@auth/sveltekit/providers\"\n\nconst providers: Provider[] = [GitHub]\n\n// Export this map of provider details to use in the sign-in page later\nexport const providerMap = providers.map((provider) => {\n  return { id: provider.id, name: provider.name }\n})\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers,\n  pages: {\n    signIn: \"/signin\",\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Prisma Schema with Snake Case and Plural Table Names\nDESCRIPTION: Example of using Prisma's @map() feature to customize column and table names to snake_case and plural forms, respectively. This modification doesn't affect Auth.js functionality.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_14\n\nLANGUAGE: prisma\nCODE:\n```\nmodel Account {\n  id                 String  @id @default(cuid())\n  userId             String  @map(\"user_id\")\n  type               String\n  provider           String\n  providerAccountId  String  @map(\"provider_account_id\")\n  refresh_token      String? @db.Text\n  access_token       String? @db.Text\n  expires_at         Int?\n  token_type         String?\n  scope              String?\n  id_token           String? @db.Text\n  session_state      String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"accounts\")\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique @map(\"session_token\")\n  userId       String   @map(\"user_id\")\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"sessions\")\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String?   @unique\n  emailVerified DateTime? @map(\"email_verified\")\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n\n  @@map(\"users\")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@unique([identifier, token])\n  @@map(\"verification_tokens\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Verification with Zitadel Provider\nDESCRIPTION: This code snippet shows how to use the email_verified property returned by Zitadel to restrict access to users with verified accounts. It demonstrates a custom signIn callback implementation.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zitadel.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst options = {\n  ...\n  callbacks: {\n    async signIn({ account, profile }) {\n      if (account.provider === \"zitadel\") {\n        return profile.email_verified;\n      }\n      return true; // Do different verification for other providers that don't have `email_verified`\n    },\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage Adapter in Express\nDESCRIPTION: This snippet shows how to set up the Unstorage adapter in an Express application using ExpressAuth. It creates a storage instance and configures the adapter within the Express middleware.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { UnstorageAdapter } from \"@auth/unstorage-adapter\"\nimport { createStorage } from \"unstorage\"\n\nconst storage = createStorage()\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: UnstorageAdapter(storage),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Session Middleware in Express\nDESCRIPTION: Demonstrates how to implement session handling middleware in Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSession } from \"@auth/express\"\n\nexport function authSession(req: Request, res: Response, next: NextFunction) {\n  res.locals.session = await getSession(req)\n  next()\n}\n\napp.use(authSession)\n\n// Now in your route\napp.get(\"/\", (req, res) => {\n  const { session } = res.locals\n  res.render(\"index\", { user: session?.user })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider in Qwik\nDESCRIPTION: Shows the setup for Facebook authentication in a Qwik application using QwikAuth$. It imports the required modules and configures the authentication functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/facebook.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Facebook from \"@auth/qwik/providers/facebook\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Facebook],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Verification Token Diagram\nDESCRIPTION: Mermaid diagram illustrating the relationship between User, Account, and VerificationToken models for email/passwordless login in Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-database-adapter.mdx#2025-04-12_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User ||--|{ Account : \"\"\n    User {\n      string id\n      timestamp emailVerified\n    }\n    Account {\n      string userId\n      string type\n      string provider\n      string providerAccountId\n    }\n    User ||--|{ VerificationToken : \"\"\n    VerificationToken {\n      string identifier\n      string token\n      timestamp expires\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Adapter in SvelteKit\nDESCRIPTION: TypeScript code to configure the Hasura Adapter in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { HasuraAdapter } from \"@auth/hasura-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: HasuraAdapter({\n    endpoint: process.env.AUTH_HASURA_GRAPHQL,\n    adminSecret: process.env.AUTH_HASURA_SECRET,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Frontegg Provider in Express\nDESCRIPTION: This code example demonstrates how to set up Frontegg authentication in an Express application. It uses the ExpressAuth middleware to handle authentication routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/frontegg.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Frontegg from \"@auth/express/providers/frontegg\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Frontegg] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Adapter in SvelteKit\nDESCRIPTION: Configuration code for setting up the DynamoDB adapter in a SvelteKit application, including AWS client initialization and Auth.js setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { DynamoDB, DynamoDBClientConfig } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocument } from \"@aws-sdk/lib-dynamodb\"\nimport { DynamoDBAdapter } from \"@auth/dynamodb-adapter\"\n\nconst config: DynamoDBClientConfig = {\n  credentials: {\n    accessKeyId: process.env.AUTH_DYNAMODB_ID,\n    secretAccessKey: process.env.AUTH_DYNAMODB_SECRET,\n  },\n  region: process.env.AUTH_DYNAMODB_REGION,\n}\n\nconst client = DynamoDBDocument.from(new DynamoDB(config), {\n  marshallOptions: {\n    convertEmptyValues: true,\n    removeUndefinedValues: true,\n    convertClassInstanceToMap: true,\n  },\n})\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: []\n  adapter: DynamoDBAdapter(client),\n})\n```\n\n----------------------------------------\n\nTITLE: Sign-in Component Implementation for SvelteKit\nDESCRIPTION: Svelte component implementation for Loops authentication sign-in using pre-built components.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <SignIn provider=\"loops\"/>\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Verification Token Generation in Nodemailer Provider\nDESCRIPTION: Example of how to override the default verification token generation method in the Nodemailer provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nodemailer.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Nodemailer({\n      async generateVerificationToken() {\n        return crypto.randomUUID()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Adapter in Next.js\nDESCRIPTION: Implementation of PostgreSQL adapter in Next.js application, including standard PostgreSQL and Neon/Vercel Postgres configurations.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"pg\"\n\nconst pool = new Pool({\n  host: process.env.DATABASE_HOST,\n  user: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n})\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: PostgresAdapter(pool),\n  providers: [],\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\n// *DO NOT* create a `Pool` here, outside the request handler.\n// Neon's Postgres cannot keep a pool alive between requests.\n\nexport const { handlers, auth, signIn, signOut } = NextAuth(() => {\n  // Create a `Pool` inside the request handler.\n  const pool = new Pool({ connectionString: process.env.DATABASE_URL })\n  return {\n    adapter: PostgresAdapter(pool),\n    providers: [],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nodemailer with Configuration Object in Qwik\nDESCRIPTION: Configuration for using Nodemailer provider with a configuration object in Qwik. Sets up detailed SMTP configuration using import.meta.env to access environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Nodemailer from \"@auth/qwik/providers/nodemailer\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Nodemailer({\n        server: {\n          host: import.meta.env.EMAIL_SERVER_HOST,\n          port: import.meta.env.EMAIL_SERVER_PORT,\n          auth: {\n            user: import.meta.env.EMAIL_SERVER_USER,\n            pass: import.meta.env.EMAIL_SERVER_PASSWORD,\n          },\n        },\n        from: import.meta.env.EMAIL_FROM,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up Slack authentication in a Next.js application using NextAuth. It imports the necessary modules and configures the Slack provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/slack.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Slack from \"next-auth/providers/slack\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Slack],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Twitter Auth Configuration\nDESCRIPTION: Implementation of Twitter authentication provider in Next.js using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitter.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Twitter from \"next-auth/providers/twitter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Twitter],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in Next.js\nDESCRIPTION: Demonstrates how to set up Twitch as an authentication provider in a Next.js application using NextAuth. This configuration exports handlers, auth, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitch.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Twitch from \"next-auth/providers/twitch\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Twitch],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a utility function for Firestore initialization\nDESCRIPTION: Utility function to handle Firestore initialization in serverless environments, preventing duplicate app initialization issues.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { initFirestore } from \"@auth/firebase-adapter\"\nimport { cert } from \"firebase-admin/app\"\n\nexport const firestore = initFirestore({\n  credential: cert({\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n    privateKey: process.env.FIREBASE_PRIVATE_KEY,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Protecting Qwik Route with Session Check\nDESCRIPTION: This code shows how to protect a Qwik route by checking for an active session and redirecting if not authenticated.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport const onRequest: RequestHandler = (event) => {\n  const session = event.sharedMap.get(\"session\")\n  if (!session || new Date(session.expires) < new Date()) {\n    throw event.redirect(302, `/`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EVEOnline Provider in Next.js\nDESCRIPTION: Sets up the EVEOnline authentication provider in a Next.js application using NextAuth. This configuration exports handlers, auth, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/eveonline.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport EveOnline from \"next-auth/providers/eve-online\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [EveOnline],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure DevOps Provider in Next.js\nDESCRIPTION: Code example showing how to configure Azure DevOps authentication provider in a Next.js application using the NextAuth library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport AzureDevOps from \"next-auth/providers/azure-devops\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    AzureDevOps({\n      clientId: AUTH_AZURE_DEVOPS_APP_ID,\n      clientSecret: AUTH_AZURE_DEVOPS_CLIENT_SECRET,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Entity Models with TypeORM Adapter\nDESCRIPTION: Implementation example showing how to pass custom entity models to the TypeORM adapter configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\"\nimport * as entities from \"lib/entities\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: TypeORMAdapter(\"yourconnectionstring\", { entities }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Express with Upstash Redis Adapter\nDESCRIPTION: Implementation of ExpressAuth with Upstash Redis adapter in an Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { UpstashRedisAdapter } from \"@auth/upstash-redis-adapter\"\nimport { Redis } from \"@upstash/redis\"\n\nconst redis = new Redis({\n  url: process.env.UPSTASH_REDIS_URL!,\n  token: process.env.UPSTASH_REDIS_TOKEN!,\n})\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: UpstashRedisAdapter(redis),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Sign-In Page in Qwik with Auth.js\nDESCRIPTION: This code demonstrates how to configure a custom sign-in page in Qwik using Auth.js. It exports authentication functions and sets up GitHub as a provider with a custom sign-in page path.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/custom-pages.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport GitHub from \"@auth/qwik/providers/github\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [GitHub],\n    pages: {\n      signIn: \"/login\",\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Provider in Next.js API Route\nDESCRIPTION: Shows how to configure the Azure AD provider in the Next.js API route file, including environment variable usage.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport AzureADProvider from \"next-auth/providers/azure-ad\"\n\nproviders: [\n  AzureADProvider({\n    clientId: process.env.AZURE_AD_CLIENT_ID,\n    clientSecret: process.env.AZURE_AD_CLIENT_SECRET,\n    tenantId: process.env.AZURE_AD_TENANT_ID,\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Xata Database Schema for Auth.js\nDESCRIPTION: JSON schema definition for creating the necessary tables in Xata for use with Auth.js. It includes tables for users, accounts, verification tokens, sessions, and relationship tables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\n    {\n      \"name\": \"nextauth_users\",\n      \"columns\": [\n        {\n          \"name\": \"email\",\n          \"type\": \"email\"\n        },\n        {\n          \"name\": \"emailVerified\",\n          \"type\": \"datetime\"\n        },\n        {\n          \"name\": \"name\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"image\",\n          \"type\": \"string\"\n        }\n      ]\n    },\n    {\n      \"name\": \"nextauth_accounts\",\n      \"columns\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"link\",\n          \"link\": {\n            \"table\": \"nextauth_users\"\n          }\n        },\n        {\n          \"name\": \"type\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"provider\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"providerAccountId\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"refresh_token\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"access_token\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"expires_at\",\n          \"type\": \"int\"\n        },\n        {\n          \"name\": \"token_type\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"scope\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"id_token\",\n          \"type\": \"text\"\n        },\n        {\n          \"name\": \"session_state\",\n          \"type\": \"string\"\n        }\n      ]\n    },\n    {\n      \"name\": \"nextauth_verificationTokens\",\n      \"columns\": [\n        {\n          \"name\": \"identifier\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"token\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"expires\",\n          \"type\": \"datetime\"\n        }\n      ]\n    },\n    {\n      \"name\": \"nextauth_users_accounts\",\n      \"columns\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"link\",\n          \"link\": {\n            \"table\": \"nextauth_users\"\n          }\n        },\n        {\n          \"name\": \"account\",\n          \"type\": \"link\",\n          \"link\": {\n            \"table\": \"nextauth_accounts\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"nextauth_users_sessions\",\n      \"columns\": [\n        {\n          \"name\": \"user\",\n          \"type\": \"link\",\n          \"link\": {\n            \"table\": \"nextauth_users\"\n          }\n        },\n        {\n          \"name\": \"session\",\n          \"type\": \"link\",\n          \"link\": {\n            \"table\": \"nextauth_sessions\"\n          }\n        }\n      ]\n    },\n    {\n      \"name\": \"nextauth_sessions\",\n      \"columns\": [\n        {\n          \"name\": \"sessionToken\",\n          \"type\": \"string\"\n        },\n        {\n          \"name\": \"expires\",\n          \"type\": \"datetime\"\n        },\n        {\n          \"name\": \"user\",\n          \"type\": \"link\",\n          \"link\": {\n            \"table\": \"nextauth_users\"\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nodemailer with Configuration Object in Next.js\nDESCRIPTION: Configuration for using Nodemailer provider with a configuration object in Next.js. Sets up email authentication by explicitly configuring host, port, and auth details.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Nodemailer({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: process.env.EMAIL_SERVER_PORT,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Definition with CDK\nDESCRIPTION: JavaScript code for defining a DynamoDB table using AWS CDK with the required schema for Auth.js including partition key, sort key, and global secondary index.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew dynamodb.Table(this, `NextAuthTable`, {\n  tableName: \"next-auth\",\n  partitionKey: { name: \"pk\", type: dynamodb.AttributeType.STRING },\n  sortKey: { name: \"sk\", type: dynamodb.AttributeType.STRING },\n  timeToLiveAttribute: \"expires\",\n}).addGlobalSecondaryIndex({\n  indexName: \"GSI1\",\n  partitionKey: { name: \"GSI1PK\", type: dynamodb.AttributeType.STRING },\n  sortKey: { name: \"GSI1SK\", type: dynamodb.AttributeType.STRING },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Provider in Express\nDESCRIPTION: Implements the LinkedIn provider for authentication in an Express application. This setup uses the ExpressAuth middleware to configure the provider for the authentication route.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/linkedin.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport LinkedIn from \"@auth/express/providers/linkedin\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [LinkedIn] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipedrive Auth in Next.js\nDESCRIPTION: Configuration code for setting up Pipedrive authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pipedrive.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport PipeDrive from \"next-auth/providers/pipedrive\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [PipeDrive],\n})\n```\n\n----------------------------------------\n\nTITLE: Database Schema Migration\nDESCRIPTION: Migration script for creating the required Auth.js database tables and indexes\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/kysely.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Kysely, sql } from \"kysely\"\n\nexport async function up(db: Kysely<any>): Promise<void> {\n  await db.schema\n    .createTable(\"User\")\n    .addColumn(\"id\", \"uuid\", (col) =>\n      col.primaryKey().defaultTo(sql`gen_random_uuid()`)\n    )\n    .addColumn(\"name\", \"text\")\n    .addColumn(\"email\", \"text\", (col) => col.unique().notNull())\n    .addColumn(\"emailVerified\", \"timestamptz\")\n    .addColumn(\"image\", \"text\")\n    .execute()\n\n  await db.schema\n    .createTable(\"Account\")\n    .addColumn(\"id\", \"uuid\", (col) =>\n      col.primaryKey().defaultTo(sql`gen_random_uuid()`)\n    )\n    .addColumn(\"userId\", \"uuid\", (col) =>\n      col.references(\"User.id\").onDelete(\"cascade\").notNull()\n    )\n    .addColumn(\"type\", \"text\", (col) => col.notNull())\n    .addColumn(\"provider\", \"text\", (col) => col.notNull())\n    .addColumn(\"providerAccountId\", \"text\", (col) => col.notNull())\n    .addColumn(\"refresh_token\", \"text\")\n    .addColumn(\"access_token\", \"text\")\n    .addColumn(\"expires_at\", \"bigint\")\n    .addColumn(\"token_type\", \"text\")\n    .addColumn(\"scope\", \"text\")\n    .addColumn(\"id_token\", \"text\")\n    .addColumn(\"session_state\", \"text\")\n    .execute()\n\n  await db.schema\n    .createTable(\"Session\")\n    .addColumn(\"id\", \"uuid\", (col) =>\n      col.primaryKey().defaultTo(sql`gen_random_uuid()`)\n    )\n    .addColumn(\"userId\", \"uuid\", (col) =>\n      col.references(\"User.id\").onDelete(\"cascade\").notNull()\n    )\n    .addColumn(\"sessionToken\", \"text\", (col) => col.notNull().unique())\n    .addColumn(\"expires\", \"timestamptz\", (col) => col.notNull())\n    .execute()\n\n  await db.schema\n    .createTable(\"VerificationToken\")\n    .addColumn(\"identifier\", \"text\", (col) => col.notNull())\n    .addColumn(\"token\", \"text\", (col) => col.notNull().unique())\n    .addColumn(\"expires\", \"timestamptz\", (col) => col.notNull())\n    .execute()\n\n  await db.schema\n    .createIndex(\"Account_userId_index\")\n    .on(\"Account\")\n    .column(\"userId\")\n    .execute()\n\n  await db.schema\n    .createIndex(\"Session_userId_index\")\n    .on(\"Session\")\n    .column(\"userId\")\n    .execute()\n}\n\nexport async function down(db: Kysely<any>): Promise<void> {\n  await db.schema.dropTable(\"Account\").ifExists().execute()\n  await db.schema.dropTable(\"Session\").ifExists().execute()\n  await db.schema.dropTable(\"User\").ifExists().execute()\n  await db.schema.dropTable(\"VerificationToken\").ifExists().execute()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-out Route in Express with Auth.js\nDESCRIPTION: This snippet shows how to create a route for handling sign-out requests in an Express application. It uses the signOut function from Auth.js and redirects to the home page upon successful sign-out.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from \"express\"\nimport { signOut } from \"../auth\"\nconst router = express.Router()\n\nrouter.post(\"/auth/signout\", async (req: Request, res: Response) => {\n  try {\n    await signOut(req, res)\n    res.redirect(\"/\")\n  } catch (error) {\n    res.status(500).send(\"Sign out failed\")\n  }\n})\n\nexport { router }\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth with Fauna Adapter (Qwik)\nDESCRIPTION: TypeScript code for setting up authentication with Fauna adapter in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { Client } from \"fauna\"\nimport { FaunaAdapter } from \"@auth/fauna-adapter\"\n\nconst client = new Client({\n  secret: import.meta.env.AUTH_FAUNA_SECRET,\n  endpoint: new URL(import.meta.env.AUTH_FAUNA_CLIENT),\n})\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: FaunaAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ClickUp Provider in Express\nDESCRIPTION: Configuration code for integrating ClickUp authentication in an Express application using @auth/express.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/click-up.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport ClickUp from \"@auth/express/providers/click-up\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [ClickUp] }))\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Definition with Terraform\nDESCRIPTION: HCL Terraform configuration for creating a DynamoDB table with the required schema for Auth.js including attributes, key schema, global secondary index, and TTL specification.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_dynamodb_table\" \"authjs\" {\n  name         = \"auth-js\"\n  billing_mode = \"PAY_PER_REQUEST\" # Alternatively, ON_DEMAND, see https://aws.amazon.com/dynamodb/pricing/\n  hash_key     = \"pk\"\n  range_key    = \"sk\"\n\n  attribute {\n    name = \"pk\"\n    type = \"S\"\n  }\n\n  attribute {\n    name = \"sk\"\n    type = \"S\"\n  }\n\n  attribute {\n    name = \"GSI1PK\"\n    type = \"S\"\n  }\n\n  attribute {\n    name = \"GSI1SK\"\n    type = \"S\"\n  }\n\n  global_secondary_index {\n    hash_key        = \"GSI1PK\"\n    name            = \"GSI1\"\n    projection_type = \"ALL\"\n    range_key       = \"GSI1SK\"\n  }\n\n  ttl {\n    attribute_name = \"expires\"\n    enabled        = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Provider in SvelteKit\nDESCRIPTION: Code snippet for setting up the Coinbase provider in a SvelteKit application using SvelteKitAuth. This configuration goes in the auth.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/coinbase.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Coinbase from \"@auth/sveltekit/providers/coinbase\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Coinbase],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Configuration for Authentik Provider\nDESCRIPTION: This snippet demonstrates the setup of Authentik provider in a Qwik application using Auth.js. It configures QwikAuth with the Authentik provider using environment variables for authentication credentials.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/authentik.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Authentik from \"@auth/qwik/providers/authentik\";\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Authentik({\n        clientId: import.meta.env.AUTH_AUTHENTIK_CLIENT_ID\n        clientSecret: import.meta.env.AUTH_AUTHENTIK_CLIENT_SECRET\n        issuer: import.meta.env.AUTH_AUTHENTIK_ISSUER\n      })\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Provider in Express\nDESCRIPTION: This code snippet shows how to set up Slack authentication in an Express application using ExpressAuth. It imports the necessary modules and configures the Slack provider as middleware.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/slack.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Slack from \"@auth/express/providers/slack\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Slack] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Credentials Provider in Qwik\nDESCRIPTION: Configuration for setting up username/password authentication in Qwik using the Credentials provider. Shows implementation with QwikAuth$ and basic credential fields setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/credentials.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Credentials from \"@auth/qwik/providers/credentials\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Credentials({\n        credentials: {\n          username: { label: \"Username\" },\n          password: { label: \"Password\", type: \"password\" },\n        },\n        async authorize({ request }) {\n          const response = await fetch(request)\n          if (!response.ok) return null\n          return (await response.json()) ?? null\n        },\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Supabase Adapter for Auth.js\nDESCRIPTION: This snippet shows how to install the required dependencies for using the Supabase adapter with Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @supabase/supabase-js @auth/supabase-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Auth with Fauna Adapter\nDESCRIPTION: TypeScript code for setting up SvelteKit Auth with Fauna adapter in a Svelte application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { Client } from \"fauna\"\nimport { FaunaAdapter } from \"@auth/fauna-adapter\"\n\nconst client = new Client({\n  secret: process.env.AUTH_FAUNA_SECRET,\n  endpoint: new URL(process.env.AUTH_FAUNA_CLIENT)\n})\n\nexport { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: FaunaAdapter(client)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-out Button in Svelte with Auth.js\nDESCRIPTION: This snippet shows how to create a sign-out button in a Svelte component using the signOut function from @auth/sveltekit/client. The button is placed within a navigation bar.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { signOut } from \"@auth/sveltekit/client\"\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <button on:click={signOut}>Signout</button>\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressAuth with 42School Provider\nDESCRIPTION: Shows how to set up 42School authentication in an Express.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/42-school.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport 42School from \"@auth/express/providers/42-school\"\n\napp.use(\"/auth/*\",\n  ExpressAuth({ providers: [ 42School ] })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure DevOps Provider in SvelteKit\nDESCRIPTION: Code example showing how to configure Azure DevOps authentication provider in a SvelteKit application using the @auth/sveltekit library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport AzureDevOps from \"@auth/sveltekit/providers/azure-devops\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    AzureDevOps({\n      clientId: AUTH_AZURE_DEVOPS_APP_ID,\n      clientSecret: AUTH_AZURE_DEVOPS_CLIENT_SECRET,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js GitHub OAuth Configuration\nDESCRIPTION: Implementation of GitHub OAuth authentication in Next.js using NextAuth. Configures the authentication provider and exports necessary handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/github.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [GitHub],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter with SvelteKit\nDESCRIPTION: Implementation of the TypeORM adapter in a SvelteKit application using the connection string from environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: TypeORMAdapter(process.env.AUTH_TYPEORM_CONNECTION),\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Naver Provider Configuration\nDESCRIPTION: Implementation of Naver OAuth provider in Next.js using NextAuth library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/naver.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Naver from \"next-auth/providers/naver\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Naver],\n})\n```\n\n----------------------------------------\n\nTITLE: Data Formatting Utility for Auth.js Adapters\nDESCRIPTION: TypeScript utility functions for converting data between database and Auth.js formats, handling date conversions and maintaining data integrity.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-database-adapter.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst isoDateRE =\n  /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/\n\nconst isDate = (val: any): val is ConstructorParameters<typeof Date>[0] =>\n  !!(val && isoDateRE.test(val) && !isNaN(Date.parse(val)))\n\nexport const format = {\n  /** Takes an object that's coming from a database and converts it to plain JavaScript. */\n  from<T>(object: Record<string, any> = {}): T {\n    const newObject: Record<string, unknown> = {}\n    for (const [key, value] of Object.entries(object))\n      if (isDate(value)) newObject[key] = new Date(value)\n      else newObject[key] = value\n    return newObject as T\n  },\n  /** Takes an object that's coming from Auth.js and prepares it to be written to the database. */\n  to<T>(object: Record<string, any>): T {\n    const newObject: Record<string, unknown> = {}\n    for (const [key, value] of Object.entries(object))\n      if (value instanceof Date) newObject[key] = value.toISOString()\n      else newObject[key] = value\n    return newObject as T\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Provider in Next.js\nDESCRIPTION: Configuration for setting up Zoom OAuth provider in a Next.js application using next-auth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoom.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Zoom from \"next-auth/providers/zoom\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Zoom],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider in Qwik\nDESCRIPTION: Shows the setup for the Resend provider in a Qwik application using Auth.js, including environment variable usage and 'from' email address.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Resend from \"@auth/qwik/providers/resend\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Resend({\n        // If your environment variable is named differently than default\n        apiKey: import.meta.env.AUTH_RESEND_KEY,\n        from: \"no-reply@company.com\",\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Xata Adapter with Express for Auth.js\nDESCRIPTION: TypeScript code snippet for configuring the Xata adapter with Express in Auth.js. It imports necessary modules, sets up the adapter with a Xata client, and configures Express middleware.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { XataAdapter } from \"@auth/xata-adapter\"\nimport { XataClient } from \"../../../xata\" // Or wherever you've chosen for the generated client\n\nconst client = new XataClient()\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: XataAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: User and Account Relationship Diagram\nDESCRIPTION: Mermaid diagram illustrating the relationship between User and Account models in Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-database-adapter.mdx#2025-04-12_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    User ||--|{ Account : \"\"\n    User {\n      string id\n    }\n    Account {\n      string userId\n      string type\n      string provider\n      string providerAccountId\n    }\n```\n\n----------------------------------------\n\nTITLE: Qwik Auth Configuration with Zod Validation\nDESCRIPTION: Implements credential validation in Qwik using Auth.js with Zod schema validation. Shows integration with Qwik's authentication plugin.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Credentials from \"@auth/qwik/providers/credentials\"\nimport { signInSchema } from \"./lib/zod\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Credentials({\n        credentials: {\n          email: { label: \"Email\" },\n          password: { label: \"Password\", type: \"password\" },\n        },\n        async authorize(credentials) {\n          const { email, password } = await signInSchema.parseAsync(credentials)\n\n          // Your logic here\n        },\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-in Form in SvelteKit\nDESCRIPTION: Implementation of a sign-in form in SvelteKit that submits email and password credentials to the Auth.js Credentials provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  import { signIn } from \"../auth\"\n  import { page } from \"$app/stores\"\n\n  let email = \"\"\n  let password = \"\"\n</script>\n\n<div>\n  <form>\n    <label>\n      Email\n      <input name=\"email\" type=\"email\" bind:value={email} />\n    </label>\n    <label>\n      Password\n      <input name=\"password\" type=\"password\" bind:value={password} />\n    </label>\n    <button on:click={() => signIn(\"credentials\", { email, password })}>\n      Log in\n    </button>\n  </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitbucket Auth in SvelteKit\nDESCRIPTION: Configuration code for setting up Bitbucket authentication in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bitbucket.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Bitbucket from \"@auth/sveltekit/providers/bitbucket\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Bitbucket],\n})\n```\n\n----------------------------------------\n\nTITLE: Extending NextAuth Session Type in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to extend the NextAuth session interface to include the supabaseAccessToken and additional user properties. It's defined in a separate type declaration file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { type DefaultSession } from \"next-auth\"\n\ndeclare module \"next-auth\" {\n  // Returned by `useSession`, `getSession` and received as a prop on the `SessionProvider` React Context\n  interface Session {\n    // A JWT which can be used as Authorization header with supabase-js for RLS.\n    supabaseAccessToken?: string\n    user: {\n      // The user's postal address\n      address: string\n    } & DefaultSession[\"user\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for SolidStart with Vercel adapter\nDESCRIPTION: TypeScript configuration for Vite that sets up SolidStart with the Vercel adapter. This includes importing necessary dependencies and configuring the solid plugin with SSR enabled and the Vercel adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/solid-start/README.md#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport solid from \"solid-start/vite\"\nimport dotenv from \"dotenv\"\nimport { defineConfig } from \"vite\"\n// @ts-expect-error no typing\nimport vercel from \"solid-start-vercel\"\n\nexport default defineConfig(() => {\n  dotenv.config()\n  return {\n    plugins: [solid({ ssr: true, adapter: vercel({ edge: false }) })],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Dropbox Authentication Setup\nDESCRIPTION: Implementation of Dropbox authentication in Qwik framework using @auth/qwik package. Configures authentication routes and session management.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dropbox.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Dropbox from \"@auth/qwik/providers/dropbox\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Dropbox],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Nextcloud Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of Nextcloud as an authentication provider in a SvelteKit application using @auth/sveltekit. It imports environment variables and sets up the provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nextcloud.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Nextcloud from \"@auth/sveltekit/providers/nextcloud\"\nimport {\n  AUTH_NEXTCLOUD_ID,\n  AUTH_NEXTCLOUD_SECRET,\n  AUTH_NEXTCLOUD_ISSUER,\n} from \"$env/static/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Nextcloud({\n      clientId: AUTH_NEXTCLOUD_ID,\n      clientSecret: AUTH_NEXTCLOUD_SECRET,\n      issuer: AUTH_NEXTCLOUD_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Auth in Express\nDESCRIPTION: Configuration code for setting up Line authentication in an Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/line.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Line from \"@auth/express/providers/line\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Line] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Salesforce Auth in Qwik\nDESCRIPTION: Setup code for Salesforce authentication in Qwik framework using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/salesforce.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Salesforce from \"@auth/qwik/providers/salesforce\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Salesforce],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik GitHub OAuth Configuration\nDESCRIPTION: Implementation of GitHub OAuth authentication in Qwik framework using QwikAuth$. Sets up authentication provider and exports authentication utilities.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/github.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport GitHub from \"@auth/qwik/providers/github\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [GitHub],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Loops Provider in SvelteKit\nDESCRIPTION: Configuration for implementing Loops authentication provider in SvelteKit application with hook setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Loops from \"@auth/sveltekit/providers/loops\"\nimport {\n  AUTH_LOOPS_KEY,\n  AUTH_LOOPS_TRANSACTIONAL_ID,\n} from \"$env/static/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Loops({\n      apiKey: AUTH_LOOPS_KEY,\n      transactionalId: AUTH_LOOPS_TRANSACTIONAL_ID,\n    }),\n  ],\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Qwik Zoho Authentication Setup\nDESCRIPTION: Configuration for implementing Zoho authentication in a Qwik application using QwikAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoho.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Zoho from \"@auth/qwik/providers/zoho\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Zoho],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Adapter for Qwik\nDESCRIPTION: This snippet demonstrates how to set up the MongoDB adapter for Qwik using QwikAuth$. It imports the necessary modules and configures the adapter in the QwikAuth$ function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { MongoDBAdapter } from \"@auth/mongodb-adapter\"\nimport client from \"./lib/db\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: MongoDBAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Express Naver Provider Configuration\nDESCRIPTION: Implementation of Naver OAuth provider in Express using @auth/express library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/naver.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Naver from \"@auth/express/providers/naver\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Naver] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Upstash Redis Adapter\nDESCRIPTION: Implementation of NextAuth with Upstash Redis adapter in a Next.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { UpstashRedisAdapter } from \"@auth/upstash-redis-adapter\"\nimport { Redis } from \"@upstash/redis\"\n\nconst redis = new Redis({\n  url: process.env.UPSTASH_REDIS_URL!,\n  token: process.env.UPSTASH_REDIS_TOKEN!,\n})\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: UpstashRedisAdapter(redis),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Session Usage in SvelteKit Component\nDESCRIPTION: Shows how to use session data in a Svelte component to display user avatar.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { page } from \"$app/stores\"\n</script>\n\n<nav>\n  <img\n    src={$page.data.session?.user?.image ?? \"https://i.pravatar.cc/300\"}\n    alt=\"User Avatar\"\n  />\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider in Qwik\nDESCRIPTION: Shows the setup for the Auth0 provider in a Qwik application using @auth/qwik. This configuration exports authentication functions and hooks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Auth0 from \"@auth/qwik/providers/auth0\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Auth0],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDB Adapter with SvelteKit\nDESCRIPTION: SvelteKit implementation of the EdgeDB adapter for authentication, creating a client connection and initializing SvelteKitAuth with the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { EdgeDBAdapter } from \"@auth/edgedb-adapter\"\nimport { createClient } from \"edgedb\"\n\nconst client = createClient({ dsn: process.env.AUTH_EDGEDB_DSN })\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: EdgeDBAdapter(client),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider in Express\nDESCRIPTION: Demonstrates how to set up Facebook authentication in an Express application using ExpressAuth. It configures the authentication middleware for specific routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/facebook.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Facebook from \"@auth/express/providers/facebook\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Facebook] }))\n```\n\n----------------------------------------\n\nTITLE: Qwik Freshbooks Authentication Setup\nDESCRIPTION: Implementation of Freshbooks authentication in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/freshbooks.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport FreshBooks from \"@auth/qwik/providers/freshbooks\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [FreshBooks],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure AD Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Azure AD provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport AzureAd from \"next-auth/providers/azure-ad\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [AzureAd],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailchimp Provider in Express\nDESCRIPTION: This code example demonstrates how to set up the Mailchimp authentication provider in an Express application using the @auth/express library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailchimp.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport MailChimp from \"@auth/express/providers/mailchimp\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [MailChimp] }))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sign Out Page in Next.js\nDESCRIPTION: This code creates a simple sign out confirmation page in Next.js with a server action. When the user clicks the 'Sign out' button, the form triggers the server action that calls the signOut function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signout.mdx#2025-04-12_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signOut } from \"@/auth\"\n\nexport default function SignOutPage() {\n  return (\n    <div>\n      <h5>Are you sure you want to sign out?</h5>\n      <form\n        action={async (formData) => {\n          \"use server\"\n          await signOut()\n        }}\n      >\n        <button type=\"submit\">Sign out</button>\n      </form>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration for Authentik Provider\nDESCRIPTION: This code shows how to configure the Authentik provider in a Next.js application using Auth.js. It initializes NextAuth with the Authentik provider using client ID, client secret, and issuer parameters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/authentik.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport Authentik from \"next-auth/providers/authentik\";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Authentik({\n    clientId: AUTH_AUTHENTIK_CLIENT_ID\n    clientSecret: AUTH_AUTHENTIK_CLIENT_SECRET\n    issuer: AUTH_AUTHENTIK_ISSUER\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TikTok Provider in Express\nDESCRIPTION: TypeScript code for setting up the TikTok provider in an Express application using ExpressAuth. This configuration adds the authentication middleware to the '/auth/*' route.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/tiktok.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport TikTok from \"@auth/express/providers/tiktok\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [TikTok] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider in Auth.js (SvelteKit)\nDESCRIPTION: This snippet shows how to import and configure the Resend provider in the Auth.js configuration file for SvelteKit applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Resend from \"@auth/sveltekit/providers/resend\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Resend],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Server-Side Sign Out Action in SvelteKit\nDESCRIPTION: This SvelteKit server code defines an action to handle the sign out functionality. It exports the signOut function as the default action, which is triggered when the form in the SignOut component is submitted.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signout.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { signOut } from \"../../auth\"\nimport type { Actions } from \"./$types\"\n\nexport const actions = { default: signOut } satisfies Actions\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables for GitHub OAuth\nDESCRIPTION: Adds the necessary environment variables for GitHub OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SECRET=\"changeMe\"\n\nAUTH_GITHUB_ID=\nAUTH_GITHUB_SECRET=\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Error Page Implementation\nDESCRIPTION: Full implementation of a custom error page with error type handling, styling, and user feedback.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/error.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\n\nimport { useSearchParams } from \"next/navigation\"\n\nenum Error {\n  Configuration = \"Configuration\",\n}\n\nconst errorMap = {\n  [Error.Configuration]: (\n    <p>\n      There was a problem when trying to authenticate. Please contact us if this\n      error persists. Unique error code:{\" \"}\n      <code className=\"rounded-sm bg-slate-100 p-1 text-xs\">Configuration</code>\n    </p>\n  ),\n}\n\nexport default function AuthErrorPage() {\n  const search = useSearchParams()\n  const error = search.get(\"error\") as Error\n\n  return (\n    <div className=\"flex h-screen w-full flex-col items-center justify-center\">\n      <a\n        href=\"#\"\n        className=\"block max-w-sm rounded-lg border border-gray-200 bg-white p-6 text-center shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700\"\n      >\n        <h5 className=\"mb-2 flex flex-row items-center justify-center gap-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white\">\n          Something went wrong\n        </h5>\n        <div className=\"font-normal text-gray-700 dark:text-gray-400\">\n          {errorMap[error] || \"Please contact us if this error persists.\"}\n        </div>\n      </a>\n    </div>\n  )\n```\n\n----------------------------------------\n\nTITLE: Custom Email Verification Request Handler\nDESCRIPTION: Implementation of a custom verification request handler for Postmark email sending.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/postmark.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest(params) {\n  const { identifier: to, provider, url, theme } = params\n  const { host } = new URL(url)\n  const res = await fetch(\"https://api.postmark.com/emails\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${provider.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      from: provider.from,\n      to,\n      subject: `Sign in to ${host}`,\n      html: html({ url, host, theme }),\n      text: text({ url, host }),\n    }),\n  })\n\n  if (!res.ok)\n    throw new Error(\"Postmark error: \" + JSON.stringify(await res.json()))\n}\n```\n\n----------------------------------------\n\nTITLE: Qwik Strava Authentication Configuration\nDESCRIPTION: Implementation of Strava authentication provider in Qwik framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/strava.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Strava from \"@auth/qwik/providers/strava\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Strava],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Provider in Qwik\nDESCRIPTION: Code snippet for setting up the Coinbase provider in a Qwik application using QwikAuth$. This configuration goes in the plugin@auth.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/coinbase.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Coinbase from \"@auth/qwik/providers/coinbase\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Coinbase],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Extending Session Type in SvelteKit Auth Configuration\nDESCRIPTION: Shows how to extend the Session interface in SvelteKit using TypeScript module augmentation to add a userId property while preserving default session properties.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/typescript.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth, { type DefaultSession } from \"@auth/sveltekit\"\n\ndeclare module \"@auth/sveltekit\" {\n  interface Session {\n    user: {\n      userId: string\n    } & DefaultSession[\"user\"]\n  }\n}\n\nexport const { handle } = SvelteKitAuth({\n  callbacks: {\n    session: async ({ session, token }) => {\n      if (token) {\n        session.user.userId = token.sub\n      }\n      return session\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Provider in SvelteKit\nDESCRIPTION: Illustrates the setup of Google OAuth provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Google from \"@auth/sveltekit/providers/google\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Google],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing FusionAuth in SvelteKit\nDESCRIPTION: SvelteKit setup for FusionAuth authentication using @auth/sveltekit package with environment variable imports.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/fusionauth.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport FusionAuth from \"@auth/sveltekit/providers/fusionauth\"\nimport {\n  AUTH_FUSIONAUTH_ID,\n  AUTH_FUSIONAUTH_SECRET,\n  AUTH_FUSIONAUTH_TENANT_ID,\n  AUTH_FUSIONAUTH_ISSUER,\n} from \"$env/static/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    FusionAuth({\n      clientId: AUTH_FUSIONAUTH_ID,\n      clientSecret: AUTH_FUSIONAUTH_SECRET,\n      tenantId: AUTH_FUSIONAUTH_TENANT_ID,\n      issuer: AUTH_FUSIONAUTH_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Postmark Provider in Next.js\nDESCRIPTION: Configuration for using the Postmark provider in Next.js. Imports and adds Postmark to the providers array in the Auth.js configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Postmark from \"next-auth/providers/postmark\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Postmark],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipedrive Auth in SvelteKit\nDESCRIPTION: Configuration code for setting up Pipedrive authentication in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pipedrive.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport PipeDrive from \"@auth/sveltekit/providers/pipedrive\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [PipeDrive],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Foursquare Auth Configuration\nDESCRIPTION: Implementation of Foursquare authentication provider in Next.js using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/foursquare.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport FourSquare from \"next-auth/providers/foursquare\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [FourSquare],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Mastodon Provider in Express\nDESCRIPTION: Implementation of Mastodon authentication in an Express application using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mastodon.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Mastodon from \"@auth/express/providers/mastodon\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Mastodon] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j Adapter with Next.js\nDESCRIPTION: Implementation example for integrating Neo4j adapter with NextAuth in a Next.js application. Creates a Neo4j driver connection and configures the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport neo4j from \"neo4j-driver\"\nimport { Neo4jAdapter } from \"@auth/neo4j-adapter\"\n\nconst driver = neo4j.driver(\n  process.env.NEO4J_URI,\n  neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD)\n)\n\nconst neo4jSession = driver.session()\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: Neo4jAdapter(neo4jSession),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitLab Provider in Next.js\nDESCRIPTION: Configures GitLab as an authentication provider in a Next.js application using NextAuth. This setup exports handlers, auth, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/gitlab.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport GitLab from \"next-auth/providers/gitlab\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [GitLab],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing QwikAuth with DrizzleAdapter\nDESCRIPTION: Setup for Qwik authentication using DrizzleAdapter, showing configuration for session management and authentication functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\"\nimport { db } from \"./schema.ts\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: DrizzleAdapter(db),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Middleware in Express\nDESCRIPTION: This code creates an authentication middleware for Express that checks for an active session and redirects to the login page if not authenticated.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { getSession } from \"@auth/express\"\n\nexport async function authenticatedUser(\n  req: Request,\n  res: Response,\n  next: NextFunction\n) {\n  const session = res.locals.session ?? (await getSession(req, authConfig))\n  if (!session?.user) {\n    res.redirect(\"/login\")\n  } else {\n    next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Notion Auth Configuration\nDESCRIPTION: Implementation of Notion authentication provider in Next.js using NextAuth.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/notion.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Notion from \"next-auth/providers/notion\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Notion({\n      clientId: process.env.AUTH_NOTION_ID,\n      clientSecret: process.env.AUTH_NOTION_SECRET,\n      redirectUri: process.env.AUTH_NOTION_REDIRECT_URI,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing QwikAuth with MikroORM Adapter\nDESCRIPTION: This snippet shows how to configure QwikAuth with the MikroORM adapter in a Qwik application. It sets up the authentication plugin with database connection details.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { MikroOrmAdapter } from \"@auth/mikro-orm-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: MikroOrmAdapter({\n      // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver\n      dbName: import.meta.env.DATABASE_CONNECTION_STRING,\n      type: \"sqlite\",\n      debug: true,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Definition with CloudFormation\nDESCRIPTION: YAML CloudFormation template for creating a DynamoDB table with the required schema for Auth.js including attributes, key schema, global secondary index, and TTL specification.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nNextAuthTable:\n  Type: \"AWS::DynamoDB::Table\"\n  Properties:\n    TableName: next-auth\n    AttributeDefinitions:\n      - AttributeName: pk\n        AttributeType: S\n      - AttributeName: sk\n        AttributeType: S\n      - AttributeName: GSI1PK\n        AttributeType: S\n      - AttributeName: GSI1SK\n        AttributeType: S\n    KeySchema:\n      - AttributeName: pk\n        KeyType: HASH\n      - AttributeName: sk\n        KeyType: RANGE\n    GlobalSecondaryIndexes:\n      - IndexName: GSI1\n        Projection:\n          ProjectionType: ALL\n        KeySchema:\n          - AttributeName: GSI1PK\n            KeyType: HASH\n          - AttributeName: GSI1SK\n            KeyType: RANGE\n    TimeToLiveSpecification:\n      AttributeName: expires\n      Enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of the Auth0 provider in a SvelteKit application using @auth/sveltekit. This setup exports authentication handlers and functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Auth0 from \"@auth/sveltekit/providers/auth0\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Auth0],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing BankID Norway Authentication in SvelteKit\nDESCRIPTION: Configuration code for integrating BankID Norway authentication provider in a SvelteKit application using the @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bankid-no.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport BankIDNorway from \"@auth/sveltekit/providers/bankid-no\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [BankIDNorway],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Login Page with Passkey Support\nDESCRIPTION: React component implementing a custom login page with Passkey authentication and registration functionality\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passkey.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\"\n\nimport { useSession } from \"next-auth/react\"\nimport { signIn } from \"next-auth/webauthn\"\n\nexport default function Login() {\n  const { data: session, update, status } = useSession()\n\n  return (\n    <div>\n      {status === \"authenticated\" ? (\n        <button onClick={() => signIn(\"passkey\", { action: \"register\" })}>\n          Register new Passkey\n        </button>\n      ) : status === \"unauthenticated\" ? (\n        <button onClick={() => signIn(\"passkey\")}>Sign in with Passkey</button>\n      ) : null}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextcloud Provider in Next.js\nDESCRIPTION: Demonstrates how to set up Nextcloud as an authentication provider in a Next.js application using NextAuth. It includes the necessary environment variables and provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nextcloud.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nextcloud from \"next-auth/providers/nextcloud\"\n\nconst response = await NextAuth({\n  providers: [\n    Nextcloud({\n      clientId: process.env.AUTH_NEXTCLOUD_ID,\n      clientSecret: process.env.AUTH_NEXTCLOUD_SECRET,\n      issuer: process.env.AUTH_NEXTCLOUD_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipedrive Auth in Express\nDESCRIPTION: Configuration code for setting up Pipedrive authentication in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pipedrive.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport PipeDrive from \"@auth/express/providers/pipedrive\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [PipeDrive] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure AD Provider in Express\nDESCRIPTION: Demonstrates the setup for using the Azure AD provider in an Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport AzureAd from \"@auth/express/providers/azure-ad\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [AzureAd] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodemailer Provider with Connection String\nDESCRIPTION: Example of setting up the Nodemailer provider using a connection string in the environment variables and configuring it in the Auth.js setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nodemailer.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SERVER=smtp://username:password@smtp.example.com:587\nEMAIL_FROM=noreply@example.com\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    Nodemailer({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Mailgun Email Verification Implementation\nDESCRIPTION: Detailed implementation of email verification request handling including HTML email template generation and API communication with Mailgun.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailgun.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest(params) {\n  const { identifier: to, provider, url, theme } = params\n  const { host } = new URL(url)\n  const domain = provider.from.split(\"@\").at(1)\n\n  if (!domain) throw new Error(\"malformed Mailgun domain\")\n\n  const form = new FormData()\n  form.append(\"from\", `${provider.name} <${provider.from}>`)\n  form.append(\"to\", to)\n  form.append(\"subject\", `Sign in to ${host}`)\n  form.append(\"html\", html({ host, url, theme }))\n  form.append(\"text\", text({ host, url }))\n\n  const res = await fetch(`https://api.mailgun.net/v3/${domain}/messages`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${btoa(`api:${provider.apiKey}`)}`,\n    },\n    body: form,\n  })\n\n  if (!res.ok) throw new Error(\"Mailgun error: \" + (await res.text()))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Facebook provider in a Next.js application using NextAuth. It imports the necessary modules and configures the authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/facebook.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Facebook from \"next-auth/providers/facebook\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Facebook],\n})\n```\n\n----------------------------------------\n\nTITLE: Instantiating Next-Auth with Database Adapter\nDESCRIPTION: Creates the main Next-Auth instance with Prisma adapter and JWT session strategy, extending the base configuration\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/edge-compatibility.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport authConfig from \"./auth.config\"\n\nimport { PrismaClient } from \"@prisma/client\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\n\nconst prisma = new PrismaClient()\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: PrismaAdapter(prisma),\n  session: { strategy: \"jwt\" },\n  ...authConfig,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring EVEOnline Provider in Express\nDESCRIPTION: Implements EVEOnline authentication in an Express application using ExpressAuth. This setup adds an authentication route to the Express app.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/eveonline.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport EveOnline from \"@auth/express/providers/eve-online\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [EveOnline] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Configuration Object Environment Variables\nDESCRIPTION: Environment variables setup for SMTP server connection using a configuration object approach. This separates host, port, user and password into individual variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SERVER_USER=username\nEMAIL_SERVER_PASSWORD=password\nEMAIL_SERVER_HOST=smtp.example.com\nEMAIL_SERVER_PORT=587\nEMAIL_FROM=noreply@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Adapter with SvelteKit\nDESCRIPTION: Implementation of Firebase Adapter in a SvelteKit authentication setup using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { FirestoreAdapter } from \"@auth/firebase-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: FirestoreAdapter(),\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrations in Bash\nDESCRIPTION: Command to generate a migration file, apply it to the database, and regenerate the Prisma client with updated types and model methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec prisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitbucket Auth in Express\nDESCRIPTION: Configuration code for setting up Bitbucket authentication in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bitbucket.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Bitbucket from \"@auth/express/providers/bitbucket\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Bitbucket] }))\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Cognito Setup\nDESCRIPTION: Required environment variables for configuring Cognito authentication including ID, secret, and issuer URL\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/cognito.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_COGNITO_ID\nAUTH_COGNITO_SECRET\nAUTH_COGNITO_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Adapter in Qwik\nDESCRIPTION: TypeScript code to configure the Hasura Adapter in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { HasuraAdapter } from \"@auth/hasura-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: HasuraAdapter({\n      endpoint: import.meta.env.AUTH_HASURA_GRAPHQL,\n      adminSecret: import.meta.env.AUTH_HASURA_SECRET,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik Sign-in Component Implementation\nDESCRIPTION: Qwik implementation of signin functionality supporting both server-side Form actions and client-side submit methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { Form } from \"@builder.io/qwik-city\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <>\n      {/* server-side login with Form action */}\n      <Form action={signInSig}>\n        <input type=\"hidden\" name=\"providerId\" value=\"${providerId}\" />\n        <input\n          type=\"hidden\"\n          name=\"options.redirectTo\"\n          value=\"/\"\n        />\n        <button>Sign In</button>\n      </Form>\n\n      {/* submit method */}\n      <Link\n        onClick$={() => signInSig.submit({ redirectTo: \"/\" })}\n      >\n        SignIn\n      </Link>\n    </>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Resend (Next.js Client Component)\nDESCRIPTION: This code snippet shows how to create a sign-in button component using Resend provider in a Next.js client component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { signIn } from \"next-auth/react\"\n\nexport function SignIn() {\n  const resendAction = (formData: FormData) => {\n    signIn(\"resend\", formData)\n  }\n\n  return (\n    <form action={resendAction}>\n      <label htmlFor=\"email-resend\">\n        Email\n        <input type=\"email\" id=\"email-resend\" name=\"email\" />\n      </label>\n      <input type=\"submit\" value=\"Signin with Resend\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Schema for DynamoDB Adapter\nDESCRIPTION: JavaScript code showing how to customize the DynamoDB adapter schema by specifying custom table and key names.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst adapter = DynamoDBAdapter(client, {\n  tableName: \"custom-table-name\",\n  partitionKey: \"custom-pk\",\n  sortKey: \"custom-sk\",\n  indexName: \"custom-index-name\",\n  indexPartitionKey: \"custom-index-pk\",\n  indexSortKey: \"custom-index-sk\",\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for SendGrid (Qwik)\nDESCRIPTION: This code snippet shows how to create a sign-in button component using SendGrid provider in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <button\n      onClick$={() => signInSig.submit({ redirectTo: \"/\" })}\n    >\n      SignIn\n    </button>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Adapter in SvelteKit\nDESCRIPTION: Implementation of PostgreSQL adapter in SvelteKit application, including standard PostgreSQL and Neon/Vercel Postgres configurations.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"pg\"\n\nconst pool = new Pool({\n  host: process.env.DATABASE_HOST,\n  user: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n})\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: PostgresAdapter(pool),\n  providers: [],\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\n// *DO NOT* create a `Pool` here, outside the request handler.\n// Neon's Postgres cannot keep a pool alive between requests.\n\nexport const { handle, signIn, signOut } = SvelteKitAuth(() => {\n  // Create a `Pool` inside the request handler.\n  const pool = new Pool({ connectionString: process.env.DATABASE_URL })\n  return {\n    adapter: PostgresAdapter(pool),\n    providers: [],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage Adapter in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the Unstorage adapter in a Next.js application using NextAuth. It creates a storage instance and configures the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { UnstorageAdapter } from \"@auth/unstorage-adapter\"\nimport { createStorage } from \"unstorage\"\n\nconst storage = createStorage()\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: UnstorageAdapter(storage),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Provider in Express\nDESCRIPTION: Demonstrates how to set up the Auth0 provider in an Express application using @auth/express. This configuration adds the Auth0 provider to the Express app's authentication middleware.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Auth0 from \"@auth/express/providers/auth0\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Auth0] }))\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Cognito Integration\nDESCRIPTION: Implementation of Cognito authentication provider in a SvelteKit application using @auth/sveltekit\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/cognito.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Cognito from \"@auth/sveltekit/providers/cognito\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Cognito],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleLogin Provider in Next.js\nDESCRIPTION: Demonstrates how to set up SimpleLogin as an authentication provider in a Next.js application using NextAuth. It imports the necessary modules and configures the auth object.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/simplelogin.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SimpleLogin from \"next-auth/providers/simplelogin\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [SimpleLogin],\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Official Adapters Grid in JSX\nDESCRIPTION: This code snippet generates a grid of official database adapters using data from the manifest file. Each adapter is displayed as a link with an icon and label.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/database.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"mb-12 mt-8 grid w-full grid-cols-2 gap-x-4 gap-y-4 sm:grid-cols-3 lg:grid-cols-4\">\n  {Object.entries(manifest.adapters).map(([value, label]) => (\n    <Link\n      href={`/getting-started/adapters/${value}`}\n      key={value}\n      className=\"flex h-32 w-36 flex-col items-center justify-between rounded-lg border border-solid border-neutral-200 p-4 shadow-sm transition duration-300 hover:bg-neutral-50 dark:border-neutral-800 dark:hover:bg-neutral-950\"\n    >\n      <img src={`/img/adapters/${value}.svg`} className=\"mt-2 h-12\" />\n      <div className=\"text-center text-sm\">{label}</div>\n    </Link>\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing GitLab Authentication in Qwik\nDESCRIPTION: Sets up GitLab authentication for a Qwik application using QwikAuth$. This configuration exports onRequest, useSession, useSignIn, and useSignOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/gitlab.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport GitLab from \"@auth/qwik/providers/gitlab\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [GitLab],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Beyond Identity provider in Qwik\nDESCRIPTION: TypeScript code for integrating Beyond Identity as an authentication provider in a Qwik application using the Auth.js Qwik adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/beyondidentity.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport BeyondIdentity from \"@auth/qwik/providers/beyondidentity\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [BeyondIdentity],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple sendVerificationRequest Function\nDESCRIPTION: This snippet shows a basic implementation of the sendVerificationRequest function. It uses the SendGrid API to send a plain text email with an authentication link to the user.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-http-email.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest({ identifier: email, url }) {\n  // Call the cloud Email provider API for sending emails\n  const response = await fetch(\"https://api.sendgrid.com/v3/mail/send\", {\n    // The body format will vary depending on provider, please see their documentation\n    body: JSON.stringify({\n      personalizations: [{ to: [{ email }] }],\n      from: { email: \"noreply@company.com\" },\n      subject: \"Sign in to Your page\",\n      content: [\n        {\n          type: \"text/plain\",\n          value: `Please click here to authenticate - ${url}`,\n        },\n      ],\n    }),\n    headers: {\n      // Authentication will also vary from provider to provider, please see their docs.\n      Authorization: `Bearer ${process.env.SENDGRID_API}`,\n      \"Content-Type\": \"application/json\",\n    },\n    method: \"POST\",\n  })\n\n  if (!response.ok) {\n    const { errors } = await response.json()\n    throw new Error(JSON.stringify(errors))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider in Next.js\nDESCRIPTION: Code snippet for setting up Reddit as an authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/reddit.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Reddit from \"next-auth/providers/reddit\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Reddit],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Battle.net Authentication in SvelteKit\nDESCRIPTION: Configuration for setting up Battle.net authentication in a SvelteKit application using the @auth/sveltekit library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\";\nimport BattleNet from \"@auth/sveltekit/providers/battlenet\";\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [BattleNet({\n    clientId: AUTH_BATTLENET_CLIENT_ID\n    clientSecret: AUTH_BATTLENET_CLIENT_SECRET\n    issuer: AUTH_BATTLENET_ISSUER\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Asgardeo Provider in Express\nDESCRIPTION: This snippet illustrates how to set up Asgardeo authentication in an Express application. It uses the ExpressAuth middleware to handle authentication routes with the Asgardeo provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/asgardeo.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Asgardeo from \"@auth/express/providers/asgardeo\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Asgardeo] }))\n```\n\n----------------------------------------\n\nTITLE: Customizing Verification Email with Resend Provider\nDESCRIPTION: Shows how to customize the verification email sent by the Resend provider by implementing a custom sendVerificationRequest function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Resend({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n      sendVerificationRequest({\n        identifier: email,\n        url,\n        provider: { server, from },\n      }) {\n        // your function\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Resend provider in a Next.js application using Auth.js, including custom API key and 'from' email address.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    Resend({\n      // If your environment variable is named differently than default\n      apiKey: AUTH_RESEND_KEY,\n      from: \"no-reply@company.com\"\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Client Component Sign-in Implementation\nDESCRIPTION: Client-side signin implementation using Next.js client components. Uses next-auth/react signIn function for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { signIn } from \"next-auth/react\"\n\nexport function SignIn() {\n  return <button onClick={() => signIn()}>Sign In</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider in SvelteKit\nDESCRIPTION: Implementation of the Credentials provider in SvelteKit Auth.js configuration with email/password authentication, including password hashing and user verification.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Credentials from \"@auth/sveltekit/providers/credentials\"\n// Your own logic for dealing with plaintext password strings; be careful!\nimport { saltAndHashPassword } from \"@/utils/password\"\n\nexport const { signIn, signOut, handle } = SvelteKitAuth({\n  providers: [\n    Credentials({\n      // You can specify which fields should be submitted, by adding keys to the `credentials` object.\n      // e.g. domain, username, password, 2FA token, etc.\n      credentials: {\n        email: {},\n        password: {},\n      },\n      authorize: async (credentials) => {\n        let user = null\n\n        // logic to salt and hash password\n        const pwHash = saltAndHashPassword(credentials.password)\n\n        // logic to verify if user exists\n        user = await getUserFromDb(credentials.email, pwHash)\n\n        if (!user) {\n          // No user found, so this is their first attempt to login\n          // Optionally, this is also the place you could do a user registration\n          throw new Error(\"Invalid credentials.\")\n        }\n\n        // return JSON object with the user data\n        return user\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDB Adapter with Next.js\nDESCRIPTION: Next.js implementation of the EdgeDB adapter for authentication, creating a client connection and initializing NextAuth with the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { EdgeDBAdapter } from \"@auth/edgedb-adapter\"\nimport { createClient } from \"edgedb\"\n\nconst client = createClient({ dsn: process.env.AUTH_EDGEDB_DSN })\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: EdgeDBAdapter(client),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Provider in SvelteKit\nDESCRIPTION: Sets up the LinkedIn provider for authentication in a SvelteKit application. This configuration uses the SvelteKitAuth function to set up the provider and export authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/linkedin.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport LinkedIn from \"@auth/sveltekit/providers/linkedin\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [LinkedIn],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing BankID Norway Authentication in Express\nDESCRIPTION: Configuration code for integrating BankID Norway authentication provider in an Express application using the @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bankid-no.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport BankIDNorway from \"@auth/express/providers/bankid-no\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [BankIDNorway] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Vipps MobilePay Provider in SvelteKit\nDESCRIPTION: Sets up the Vipps MobilePay provider in a SvelteKit application using SvelteKitAuth. It exports handle, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vipps-mobilepay.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Vipps from \"@auth/sveltekit/providers/vipps\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Vipps],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Email Provider in Qwik\nDESCRIPTION: This snippet demonstrates the setup of a custom HTTP email provider in Qwik using QwikAuth$. It includes the configuration for the provider, specifying the id, name, type, and custom sendVerificationRequest function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-http-email.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { sendVerificationRequest } from \"../lib/authSendRequest\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      {\n        id: \"http-email\",\n        name: \"Email\",\n        type: \"email\",\n        maxAge: 60 * 60 * 24, // Email link will expire in 24 hours\n        sendVerificationRequest,\n      },\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider in Express\nDESCRIPTION: Sets up the Discord provider in Express.js. This configuration imports the necessary modules and adds the authentication middleware to the Express app.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/discord.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Discord from \"@auth/express/providers/discord\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Discord] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Dgraph Adapter with SvelteKit\nDESCRIPTION: Implementation of the Dgraph adapter in a SvelteKit authentication setup. Configures the adapter with endpoint, auth token, and optional security parameters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { DgraphAdapter } from \"@auth/dgraph-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: DgraphAdapter({\n    endpoint: process.env.DGRAPH_GRAPHQL_ENDPOINT,\n    authToken: process.env.DGRAPH_GRAPHQL_KEY,\n    // you can omit the following properties if you are running an unsecure schema\n    authHeader: process.env.AUTH_HEADER, // default: \"Authorization\",\n    jwtSecret: process.env.SECRET,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Example EdgeDB Query with TypeScript\nDESCRIPTION: Example of using the EdgeDB query builder in TypeScript to create a fully typed query that selects a user by email from the database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst query = e.select(e.User, () => ({\n  id: true,\n  email: true,\n  emailVerified: true,\n  name: true,\n  image: true,\n  filter_single: { email: \"johndoe@example.com\" },\n}))\n\nreturn await query.run(client)\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Auth with Fauna Adapter\nDESCRIPTION: TypeScript code for setting up Express Auth with Fauna adapter in an Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { Client } from \"fauna\"\nimport { FaunaAdapter } from \"@auth/fauna-adapter\"\n\nconst app = express()\n\nconst client = new Client({\n  secret: process.env.AUTH_FAUNA_SECRET,\n  endpoint: new URL(process.env.AUTH_FAUNA_CLIENT),\n})\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: FaunaAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Xata Adapter with Next.js for Auth.js\nDESCRIPTION: TypeScript code snippet for configuring the Xata adapter with Next.js in Auth.js. It imports necessary modules and sets up the adapter with a Xata client.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { XataAdapter } from \"@auth/xata-adapter\"\nimport { XataClient } from \"../../../xata\" // Or wherever you've chosen for the generated client\n\nconst client = new XataClient()\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: XataAdapter(client),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Adapter in Express\nDESCRIPTION: This snippet illustrates how to configure the Supabase adapter in an Express application using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { SupabaseAdapter } from \"@auth/supabase-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: SupabaseAdapter({\n      url: process.env.SUPABASE_URL,\n      secret: process.env.SUPABASE_SERVICE_ROLE_KEY,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Variables in Next.js Configuration\nDESCRIPTION: Demonstrates how to manually reference custom environment variable names in the Next.js Auth.js configuration when not following the standard naming convention.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Google from \"next-auth/providers/google\"\n\nexport const { handlers, auth } = NextAuth({\n  providers: [\n    Google({\n      clientId: process.env.AUTH_WEBAPP_GOOGLE_CLIENT_ID,\n      clientSecret: process.env.AUTH_WEBAPP_GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Provider in Express\nDESCRIPTION: Demonstrates the configuration of the WorkOS provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/workos.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport WorkOS from \"@auth/express/providers/workos\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({ providers: [WorkOS({ connection: \"conn_abc123\" })] })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressAuth with D1 Adapter (Express)\nDESCRIPTION: Configuration for ExpressAuth using the D1 Adapter in an Express application. It sets up the authentication middleware and adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/d1.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { D1Adapter } from \"@auth/d1-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: D1Adapter(env.db),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Zitadel Provider\nDESCRIPTION: These snippets show the callback URL format for Zitadel provider in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zitadel.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/zitadel\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/zitadel\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressAuth with Sequelize Adapter (Express)\nDESCRIPTION: Setup for ExpressAuth using the Sequelize adapter in an Express application. It initializes Sequelize and configures the adapter for the authentication route.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport SequelizeAdapter from \"@auth/sequelize-adapter\"\nimport { Sequelize } from \"sequelize\"\n\nconst sequelize = new Sequelize(process.env.DATABASE_URL)\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: SequelizeAdapter(sequelize),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TikTok Provider in Next.js\nDESCRIPTION: TypeScript code for configuring the TikTok provider in Next.js using NextAuth. This setup exports handlers, auth, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/tiktok.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport TikTok from \"next-auth/providers/tiktok\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [TikTok],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider in SvelteKit\nDESCRIPTION: Code snippet for setting up Reddit as an authentication provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/reddit.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Reddit from \"@auth/sveltekit/providers/reddit\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Reddit],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with Fauna Adapter (Next.js)\nDESCRIPTION: TypeScript code for setting up Next-Auth with Fauna adapter in a Next.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { Client } from \"fauna\"\nimport { FaunaAdapter } from \"@auth/fauna-adapter\"\n\nconst client = new Client({\n  secret: process.env.AUTH_FAUNA_SECRET,\n  endpoint: new URL(process.env.AUTH_FAUNA_CLIENT)\n})\n\nexport { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: FaunaAdapter(client)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with 42School Provider\nDESCRIPTION: Demonstrates how to set up NextAuth.js with the 42School authentication provider in a Next.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/42-school.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport 42School from \"next-auth/providers/42-school\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [42School],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoom OAuth Callback URLs\nDESCRIPTION: Framework-specific callback URL endpoints for Zoom OAuth authentication. These URLs need to be registered in your Zoom OAuth application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoom.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/zoom\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/zoom\n```\n\n----------------------------------------\n\nTITLE: Integrating SimpleLogin Provider in Qwik\nDESCRIPTION: Shows the configuration for using SimpleLogin as an authentication provider in a Qwik application. It uses the QwikAuth$ function to set up authentication hooks and routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/simplelogin.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport SimpleLogin from \"@auth/qwik/providers/simplelogin\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [SimpleLogin],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Email Provider in SvelteKit\nDESCRIPTION: This snippet shows the configuration of a custom HTTP email provider in SvelteKit using SvelteKitAuth. It includes the setup for the provider, specifying the id, name, type, and custom sendVerificationRequest function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-http-email.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport { sendVerificationRequest } from \"../lib/authSendRequest\"\n\nexport const { handle, auth } = SvelteKitAuth({\n  adapter,\n  providers: [\n    {\n      id: \"http-email\",\n      name: \"Email\",\n      type: \"email\",\n      maxAge: 60 * 60 * 24, // Email link will expire in 24 hours\n      sendVerificationRequest,\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Adapter with Next.js\nDESCRIPTION: Implementation of Firebase Adapter in a Next.js authentication setup using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { FirestoreAdapter } from \"@auth/firebase-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: FirestoreAdapter(),\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Asgardeo Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up Asgardeo authentication in a Next.js application using NextAuth. It imports the necessary modules and configures the auth object with the Asgardeo provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/asgardeo.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Asgardeo from \"next-auth/providers/asgardeo\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Asgardeo],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Credentials Provider in Qwik\nDESCRIPTION: Implementation of the Credentials provider in Qwik Auth.js plugin with email/password authentication and user verification.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Credentials from \"@auth/qwik/providers/credentials\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Credentials({\n        credentials: {\n          email: { label: \"Email\" },\n          password: { label: \"Password\", type: \"password\" },\n        },\n        async authorize(credentials) {\n          const response = await getUserFromDb(credentials)\n          if (!response.ok) return null\n          return (await response.json()) ?? null\n        },\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for OAuth Provider\nDESCRIPTION: Example of environment variables setup for Okta OAuth provider using Auth.js naming convention\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/deployment.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_OKTA_ID=abc\nAUTH_OKTA_SECRET=abc\nAUTH_OKTA_ISSUER=abc\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Email Provider in Express\nDESCRIPTION: This snippet demonstrates how to set up a custom HTTP email provider in Express using ExpressAuth. It includes the configuration for the provider, specifying the id, name, type, and custom sendVerificationRequest function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-http-email.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { sendVerificationRequest } from \"../lib/authSendRequest\"\nimport express from \"express\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    adapter,\n    providers: [\n      {\n        id: \"http-email\",\n        name: \"Email\",\n        type: \"email\",\n        maxAge: 60 * 60 * 24, // Email link will expire in 24 hours\n        sendVerificationRequest,\n      },\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: SvelteKit WordPress Authentication Setup\nDESCRIPTION: Configuration for integrating WordPress OAuth provider in SvelteKit framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wordpress.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport WordPress from \"@auth/sveltekit/providers/wordpress\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [WordPress],\n})\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Keycloak\nDESCRIPTION: Essential environment variables needed for Keycloak authentication setup including client ID, secret, and issuer URL.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/keycloak.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_KEYCLOAK_ID\nAUTH_KEYCLOAK_SECRET\nAUTH_KEYCLOAK_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Hasura Adapter\nDESCRIPTION: Environment variables required for configuring the Hasura Adapter, including the GraphQL endpoint and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_HASURA_GRAPHQL=http://localhost:8000/graphql\nAUTH_HASURA_SECRET=abc123\n```\n\n----------------------------------------\n\nTITLE: Prisma Schema Configuration for Passkey Support\nDESCRIPTION: Prisma schema definition including User, Account, Session, VerificationToken, and Authenticator models for Passkey functionality\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passkey.mdx#2025-04-12_snippet_1\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = \"file:./dev.db\"\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id            String    @id @default(cuid())\n  name          String?\n  email         String    @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  Authenticator Authenticator[]\n}\n\nmodel Account {\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([provider, providerAccountId])\n}\n\nmodel Session {\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@id([identifier, token])\n}\n\nmodel Authenticator {\n  id                   String  @id @default(cuid())\n  credentialID         String  @unique\n  userId               String\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for DynamoDB\nDESCRIPTION: Environment variables needed for connecting to the DynamoDB service with AWS access credentials and region.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_DYNAMODB_ID=accessKey\nAUTH_DYNAMODB_SECRET=secretKey\nAUTH_DYNAMODB_REGION=eu-west-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Coinbase Authentication\nDESCRIPTION: Required environment variables for Coinbase authentication. These should be set with the appropriate values from your Coinbase OAuth application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/coinbase.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_COINBASE_ID\nAUTH_COINBASE_SECRET\n```\n\n----------------------------------------\n\nTITLE: Accessing Session in Qwik Component\nDESCRIPTION: This code demonstrates how to use the useSession loader in a Qwik component to retrieve the current session information.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { component$ } from '@builder.io/qwik';\nimport { useSession } from '~/routes/plugin@auth';\n\nexport default component$(() => {\n  const session = useSession();\n  return <p>{session.value?.user?.email}</p>;\n});\n```\n\n----------------------------------------\n\nTITLE: Express Azure Tables Authentication Setup\nDESCRIPTION: Express.js implementation of Azure Table Storage adapter with Google authentication provider and proxy configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/azure-tables.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\"\nimport Google from \"@auth/express/providers/google\"\nimport ExpressAuth, { type AuthConfig } from \"@auth/express\"\nimport { TableStorageAdapter } from \"@auth/azure-tables-adapter\"\nimport { AzureNamedKeyCredential, TableClient } from \"@azure/data-tables\"\n\nconst app = express()\n\nconst credential = new AzureNamedKeyCredential(\n  process.env.AUTH_AZURE_ACCOUNT,\n  process.env.AUTH_AZURE_ACCESS_KEY\n)\nconst authClient = new TableClient(\n  process.env.AUTH_AZURE_TABLES_ENDPOINT,\n  \"auth\",\n  credential\n)\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [Google],\n    adapter: TableStorageAdapter(authClient),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth with MikroORM Adapter in Next.js\nDESCRIPTION: This code demonstrates how to set up NextAuth using the MikroORM adapter in a Next.js application. It includes configuration for the database connection and adapter options.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { MikroOrmAdapter } from \"@auth/mikro-orm-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: MikroOrmAdapter({\n    // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver\n    dbName: process.env.DATABASE_CONNECTION_STRING,\n    type: \"sqlite\",\n    debug: true,\n  }),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in Qwik\nDESCRIPTION: Qwik implementation for Apple authentication using QwikAuth$. This setup exports request handler, session hooks, and sign in/out methods with Apple configured as a provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/apple.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Apple from \"@auth/qwik/providers/apple\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Apple],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Adapter with Qwik\nDESCRIPTION: Implementation of Firebase Adapter in a Qwik authentication setup using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { FirestoreAdapter } from \"@auth/firebase-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: FirestoreAdapter(),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: MySQL/MariaDB Authenticator Table Migration\nDESCRIPTION: SQL migration script to create the Authenticator table for MySQL and MariaDB databases\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passkey.mdx#2025-04-12_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE Authenticator (\n    id varchar(255) NOT NULL PRIMARY KEY,\n    credentialID TEXT NOT NULL,\n    userId varchar(255) NOT NULL,\n    providerAccountId TEXT NOT NULL,\n    credentialPublicKey TEXT NOT NULL,\n    counter INTEGER NOT NULL,\n    credentialDeviceType TEXT NOT NULL,\n    credentialBackedUp BOOLEAN NOT NULL,\n    transports TEXT,\n    CONSTRAINT Authenticator_userId_fkey FOREIGN KEY (userId) REFERENCES User (id) ON DELETE CASCADE ON UPDATE CASCADE\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX Authenticator_credentialID_key ON Authenticator(credentialID);\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Azure Tables Authentication Integration\nDESCRIPTION: Configuration for implementing Azure Table Storage adapter with SvelteKit authentication system.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/azure-tables.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth, { type AuthConfig } from \"@auth/sveltekit\"\nimport { TableStorageAdapter } from \"@auth/azure-tables-adapter\"\nimport { AzureNamedKeyCredential, TableClient } from \"@azure/data-tables\"\n\nconst credential = new AzureNamedKeyCredential(\n  process.env.AUTH_AZURE_ACCOUNT,\n  process.env.AUTH_AZURE_ACCESS_KEY\n)\nconst authClient = new TableClient(\n  process.env.AUTH_AZURE_TABLES_ENDPOINT,\n  \"auth\",\n  credential\n)\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: TableStorageAdapter(authClient),\n} satisfies AuthConfig)\n```\n\n----------------------------------------\n\nTITLE: Next.js Threads Provider Configuration\nDESCRIPTION: Implementation of Threads authentication provider in Next.js application with NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/threads.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Threads from \"next-auth/providers/threads\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Threads],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Authentication in SvelteKit\nDESCRIPTION: Setup code for integrating Box authentication in a SvelteKit application using the @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/box.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Box from \"@auth/sveltekit/providers/box\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Box],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleLogin Provider in Express\nDESCRIPTION: Demonstrates how to set up SimpleLogin authentication in an Express application using the ExpressAuth middleware. It configures the auth routes with the SimpleLogin provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/simplelogin.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport SimpleLogin from \"@auth/express/providers/simplelogin\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [SimpleLogin] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Nodemailer Provider with Configuration Object\nDESCRIPTION: Example of setting up the Nodemailer provider using a configuration object with separate environment variables for each SMTP setting.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nodemailer.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nEMAIL_SERVER_USER=username\nEMAIL_SERVER_PASSWORD=password\nEMAIL_SERVER_HOST=smtp.example.com\nEMAIL_SERVER_PORT=587\nEMAIL_FROM=noreply@example.com\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    Nodemailer({\n      server: {\n        host: process.env.EMAIL_SERVER_HOST,\n        port: process.env.EMAIL_SERVER_PORT,\n        auth: {\n          user: process.env.EMAIL_SERVER_USER,\n          pass: process.env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Box Callback URL\nDESCRIPTION: Callback URLs to be configured in the Box developer settings for different frameworks. These endpoints handle the OAuth authentication response from Box.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/box.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/box\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/box\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/box\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter with Qwik\nDESCRIPTION: Implementation of the TypeORM adapter in a Qwik application using the connection string from environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: TypeORMAdapter(import.meta.env.AUTH_TYPEORM_CONNECTION),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Apple Authentication\nDESCRIPTION: Sample callback URL formats for Apple authentication across different frameworks. Each framework requires a specific endpoint pattern for handling authentication callbacks from Apple.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/apple.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/apple\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/apple\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/apple\n```\n\n----------------------------------------\n\nTITLE: Next.js Azure Tables Authentication Configuration\nDESCRIPTION: Configuration for integrating Azure Table Storage adapter with Next.js authentication, including credential setup and client initialization.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/azure-tables.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth, { type AuthConfig } from \"next-auth\"\nimport { TableStorageAdapter } from \"@auth/azure-tables-adapter\"\nimport { AzureNamedKeyCredential, TableClient } from \"@azure/data-tables\"\n\nconst credential = new AzureNamedKeyCredential(\n  process.env.AUTH_AZURE_ACCOUNT,\n  process.env.AUTH_AZURE_ACCESS_KEY\n)\nconst authClient = new TableClient(\n  process.env.AUTH_AZURE_TABLES_ENDPOINT,\n  \"auth\",\n  credential\n)\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: TableStorageAdapter(authClient),\n} satisfies AuthConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Client for NextAuth.js\nDESCRIPTION: This code defines a MongoDB client for use with NextAuth.js. It handles different environments (development and production), sets up connection options, and exports a module-scoped MongoClient for sharing across functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { MongoClient, ServerApiVersion } from \"mongodb\"\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"')\n}\n\nconst uri = process.env.MONGODB_URI\nconst options = {\n  serverApi: {\n    version: ServerApiVersion.v1,\n    strict: true,\n    deprecationErrors: true,\n  },\n}\n\nlet client: MongoClient\n\nif (process.env.NODE_ENV === \"development\") {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global as typeof globalThis & {\n    _mongoClient?: MongoClient\n  }\n\n  if (!globalWithMongo._mongoClient) {\n    globalWithMongo._mongoClient = new MongoClient(uri, options)\n  }\n  client = globalWithMongo._mongoClient\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options)\n}\n\n// Export a module-scoped MongoClient. By doing this in a\n// separate module, the client can be shared across functions.\nexport default client\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hubspot Environment Variables\nDESCRIPTION: Required environment variables for Hubspot OAuth configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/hubspot.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_HUBSPOT_ID\nAUTH_HUBSPOT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Beyond Identity provider in Next.js\nDESCRIPTION: TypeScript code for configuring Beyond Identity as an authentication provider in a Next.js application using the NextAuth library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/beyondidentity.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport BeyondIdentity from \"next-auth/providers/beyondidentity\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [BeyondIdentity],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Mattermost Auth in SvelteKit\nDESCRIPTION: Integration of Mattermost authentication in SvelteKit using @auth/sveltekit package. Provides authentication handling and session management.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mattermost.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Mattermost from \"@auth/sveltekit/providers/mattermost\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Mattermost],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Facebook Authentication\nDESCRIPTION: Defines the required environment variables for Facebook authentication. These variables store the Facebook App ID and App Secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/facebook.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_FACEBOOK_ID\nAUTH_FACEBOOK_SECRET\n```\n\n----------------------------------------\n\nTITLE: Express Authentication Routes Implementation\nDESCRIPTION: Server-side authentication route handlers for Express.js implementing both signin and signout functionality.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/login.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express, { Request, Response } from \"express\"\nimport { signIn } from \"../auth\"\nconst router = express.Router()\n\nrouter.post(\"/auth/signin\", async (req: Request, res: Response) => {\n  try {\n    await signIn(req, res)\n    res.redirect(\"/dashboard\")\n  } catch (error) {\n    res.status(500).send(\"Sign in failed\")\n  }\n})\n\nexport { router }\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure AD Authentication\nDESCRIPTION: Defines the necessary environment variables for Azure AD authentication, including the client ID, client secret, and tenant ID.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_AZURE_AD_ID\nAUTH_AZURE_AD_SECRET\nAUTH_AZURE_AD_TENANT_ID\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Trakt Authentication Setup\nDESCRIPTION: Configuration for Trakt authentication in SvelteKit using @auth/sveltekit package. Sets up authentication handler and sign in/out methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/trakt.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Trakt from \"@auth/sveltekit/providers/trakt\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Trakt],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Postmark Provider in Qwik\nDESCRIPTION: Configuration for using the Postmark provider in Qwik. Imports Postmark from the Auth.js Qwik package and adds it to the providers array.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Postmark from \"@auth/qwik/providers/postmark\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Postmark],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Microsoft Entra ID Authentication in Express\nDESCRIPTION: This snippet shows how to implement Microsoft Entra ID authentication in an Express application using the ExpressAuth middleware. It configures the Entra provider with the required environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/microsoft-entra-id.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Entra from \"@auth/express/providers/microsoft-entra-id\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      Entra({\n        clientId: process.env.AUTH_MICROSOFT_ENTRA_ID_ID,\n        clientSecret: process.env.AUTH_MICROSOFT_ENTRA_ID_SECRET,\n        issuer: process.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Providers in Qwik\nDESCRIPTION: Example of how to set up multiple OAuth providers in Qwik using Auth.js. This configuration shows the standard pattern for integrating authentication providers in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Google from \"@auth/qwik/providers/google\"\nimport Twitter from \"@auth/qwik/providers/twitter\"\nimport GitHub from \"@auth/qwik/providers/github\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Google, Twitter, GitHub],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Session Access in SvelteKit Server\nDESCRIPTION: Demonstrates how to access session data in SvelteKit server-side load function with redirect handling.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PageServerLoad } from \"./$types\"\n\nexport const load: PageServerLoad = async (events) => {\n  const session = await events.locals.auth()\n\n  if (!session?.user?.userId) {\n    redirect(303, `/login`)\n  }\n\n  return {\n    session,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Express Bungie Provider Configuration\nDESCRIPTION: Implementation of Bungie authentication provider in Express.js framework with middleware setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bungie.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\";\nimport Bungie from \"@auth/express/providers/boxyhq-saml\";\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      Bungie({\n        clientId: AUTH_BUNGIE_ID\n        clientSecret: AUTH_BUNGIE_SECRET\n        headers: { \"X-API-Key\": AUTH_BUNGIE_API_KEY }\n      }),\n    ],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Frontegg Provider in SvelteKit\nDESCRIPTION: This snippet shows how to configure Frontegg as an authentication provider in a SvelteKit application. It uses the SvelteKitAuth function to set up the necessary authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/frontegg.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Frontegg from \"@auth/sveltekit/providers/frontegg\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Frontegg],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Prisma Adapter Dependencies\nDESCRIPTION: Commands for installing the required packages for using Prisma with Auth.js, including the Prisma client, the Auth.js Prisma adapter, and the Prisma CLI as a development dependency.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @prisma/client @auth/prisma-adapter\nnpm install prisma --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Figma Authentication in Next.js\nDESCRIPTION: Next.js configuration for Figma authentication provider setup using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/figma.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Figma from \"next-auth/providers/figma\"\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Figma],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up SimpleLogin Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration for integrating SimpleLogin as an authentication provider in a SvelteKit application using the SvelteKitAuth function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/simplelogin.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport SimpleLogin from \"@auth/sveltekit/providers/simplelogin\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [SimpleLogin],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Server Provider in Qwik\nDESCRIPTION: Shows the setup for the Identity Server Provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/identity-server4.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport IdentityServer4 from \"@auth/qwik/providers/identity-server4\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [IdentityServer4],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Sign-In Page in Express with Auth.js\nDESCRIPTION: This code demonstrates how to configure a custom sign-in page in Express using Auth.js. It sets up the Express app, configures GitHub as a provider, and sets a custom sign-in page path.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/custom-pages.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\"\nimport { ExpressAuth } from \"@auth/express\"\nimport GitHub from \"@auth/express/providers/github\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [GitHub],\n    pages: {\n      signIn: \"/signin\",\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Required environment variables for Beyond Identity\nDESCRIPTION: The environment variables needed for connecting to the Beyond Identity authentication service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/beyondidentity.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_BEYOND_IDENTITY_ID\nAUTH_BEYOND_IDENTITY_SECRET\nAUTH_BEYOND_IDENTITY_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Dgraph Adapter with Qwik\nDESCRIPTION: Implementation of the Dgraph adapter in a Qwik authentication setup. Configures the adapter with endpoint, auth token, and optional security parameters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { DgraphAdapter } from \"@auth/dgraph-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: DgraphAdapter({\n      endpoint: import.meta.env.DGRAPH_GRAPHQL_ENDPOINT,\n      authToken: import.meta.env.DGRAPH_GRAPHQL_KEY,\n      // you can omit the following properties if you are running an unsecure schema\n      authHeader: import.meta.env.AUTH_HEADER, // default: \"Authorization\",\n      jwtSecret: import.meta.env.SECRET,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Naver OAuth Callback URLs\nDESCRIPTION: Configuration examples for Naver OAuth callback URLs across different frameworks. The callback URL pattern varies slightly depending on the framework being used.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/naver.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/naver\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/naver\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/naver\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider with Refresh Token\nDESCRIPTION: Code snippet demonstrating how to configure the Reddit provider to obtain a refresh token by setting the 'duration' parameter to 'permanent'.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/reddit.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport const { handlers, auth, signin, signout } = NextAuth({\n  providers: [\n    RedditProvider({\n      clientId: process.env.REDDIT_CLIENT_ID,\n      clientSecret: process.env.REDDIT_CLIENT_SECRET,\n      authorization: {\n        params: {\n          duration: \"permanent\",\n        },\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Prisma Schema for SQLite in Next-Auth\nDESCRIPTION: This schema defines the data models for User, Account, Session, VerificationToken, and Authenticator using SQLite as the database provider. It includes necessary fields and relations for Next-Auth functionality.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_9\n\nLANGUAGE: prisma\nCODE:\n```\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id            String          @id @default(cuid())\n  name          String?\n  email         String?         @unique\n  emailVerified DateTime?\n  image         String?\n  accounts      Account[]\n  sessions      Session[]\n  // Optional for WebAuthn support\n  Authenticator Authenticator[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       String\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String\n  expires    DateTime\n\n  @@unique([identifier, token])\n}\n\n// Optional for WebAuthn support\nmodel Authenticator {\n  credentialID         String  @unique\n  userId               String\n  providerAccountId    String\n  credentialPublicKey  String\n  counter              Int\n  credentialDeviceType String\n  credentialBackedUp   Boolean\n  transports           String?\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@id([userId, credentialID])\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Normalization in Auth.js with Nodemailer Provider\nDESCRIPTION: This code snippet shows how to configure Auth.js with a custom email normalization function using the Nodemailer provider. It demonstrates lowercasing the email, trimming whitespace, and handling potential comma-separated email lists.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nodemailer.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Nodemailer({\n      normalizeIdentifier(identifier: string): string {\n        // Get the first two elements only,\n        // separated by `@` from user input.\n        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n        // The part before \"@\" can contain a \",\"\n        // but we remove it on the domain part\n        domain = domain.split(\",\")[0]\n        return `${local}@${domain}`\n\n        // You can also throw an error, which will redirect the user\n        // to the sign-in page with error=EmailSignin in the URL\n        // if (identifier.split(\"@\").length > 2) {\n        //   throw new Error(\"Only one email allowed\")\n        // }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nextcloud Authentication in Qwik\nDESCRIPTION: Shows how to integrate Nextcloud authentication in a Qwik application using the @auth/qwik package. It sets up the provider with the required environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nextcloud.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Nextcloud from \"@auth/qwik/providers/nextcloud\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Nextcloud({\n        clientId: process.env.AUTH_NEXTCLOUD_ID,\n        clientSecret: process.env.AUTH_NEXTCLOUD_SECRET,\n        issuer: process.env.AUTH_NEXTCLOUD_ISSUER,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Redirect Proxy URL Environment Variable\nDESCRIPTION: Example of the environment variable needed to configure the stable deployment URL for authentication proxying.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/deployment.mdx#2025-04-12_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_REDIRECT_PROXY_URL=https://auth.yourdomain.com/api/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Kakao Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Kakao provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/kakao.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Kakao from \"next-auth/providers/kakao\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Kakao],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Authentication in Qwik\nDESCRIPTION: Configuration for using Box as an authentication provider in a Qwik application using the @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/box.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Box from \"@auth/qwik/providers/box\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Box],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Identity Server Provider in Next.js\nDESCRIPTION: Demonstrates how to configure the Identity Server Provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/identity-server4.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport IdentityServer4 from \"next-auth/providers/identity-server4\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [IdentityServer4],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Xata Adapter with Qwik for Auth.js\nDESCRIPTION: TypeScript code snippet for configuring the Xata adapter with Qwik in Auth.js. It imports necessary modules and sets up the adapter with a Xata client.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { XataAdapter } from \"@auth/xata-adapter\"\nimport { XataClient } from \"../../../xata\" // Or wherever you've chosen for the generated client\n\nconst client = new XataClient()\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: XataAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ClickUp Provider in Next.js\nDESCRIPTION: Configuration code for integrating ClickUp authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/click-up.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport ClickUp from \"next-auth/providers/click-up\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [ClickUp],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Azure AD Authentication\nDESCRIPTION: Specifies the callback URL to be used for Azure AD authentication in different frameworks. The URL structure varies slightly depending on the framework being used.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/azure-ad\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/azure-ad\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Zoho Authentication Setup\nDESCRIPTION: Configuration for implementing Zoho authentication in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoho.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Zoho from \"@auth/sveltekit/providers/zoho\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Zoho],\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Twitter Auth Configuration\nDESCRIPTION: Implementation of Twitter authentication provider in SvelteKit framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitter.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Twitter from \"@auth/sveltekit/providers/twitter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Twitter],\n})\n```\n\n----------------------------------------\n\nTITLE: Battle.net OAuth Issuer Types\nDESCRIPTION: Valid values for the Battle.net issuer environment variable, corresponding to different regional endpoints.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype BattleNetIssuer =\n| \"https://www.battlenet.com.cn/oauth\"\n| \"https://us.battle.net/oauth\"\n| \"https://eu.battle.net/oauth\"\n| \"https://kr.battle.net/oauth\"\n| \"https://tw.battle.net/oauth\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Salesforce Auth in Express\nDESCRIPTION: Configuration code for implementing Salesforce authentication in Express.js applications using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/salesforce.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Salesforce from \"@auth/express/providers/salesforce\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Salesforce] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Vipps MobilePay Provider in Express\nDESCRIPTION: Implements the Vipps MobilePay provider in an Express application using ExpressAuth. It sets up a route for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vipps-mobilepay.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Vipps from \"@auth/express/providers/vipps\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Vipps] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Mattermost Auth in Qwik\nDESCRIPTION: Configuration for Mattermost authentication in Qwik framework using @auth/qwik package. Exports session management and authentication functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mattermost.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Mattermost from \"@auth/qwik/providers/mattermost\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Mattermost],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with Prisma Adapter in Qwik\nDESCRIPTION: Implementation of the Prisma adapter with Auth.js in a Qwik application, showing how to set up authentication with the QwikAuth$ function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\nimport { prisma } from \"@/prisma\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: PrismaAdapter(prisma),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Auth.js Schema for Hasura\nDESCRIPTION: SQL commands to create the necessary tables and relationships for Auth.js in a Hasura database. This includes tables for accounts, sessions, users, verification tokens, and provider types.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE accounts (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    type text NOT NULL,\n    provider text NOT NULL,\n    \"providerAccountId\" text NOT NULL,\n    refresh_token text,\n    access_token text,\n    expires_at integer,\n    token_type text,\n    scope text,\n    id_token text,\n    session_state text,\n    \"userId\" uuid NOT NULL\n);\n\nCREATE TABLE sessions (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    \"sessionToken\" text NOT NULL,\n    \"userId\" uuid NOT NULL,\n    expires timestamptz NOT NULL\n);\n\nCREATE TABLE users (\n    id uuid DEFAULT gen_random_uuid() NOT NULL,\n    name text,\n    email text NOT NULL,\n    \"emailVerified\" timestamptz,\n    image text\n);\n\nCREATE TABLE verification_tokens (\n    token text NOT NULL,\n    identifier text NOT NULL,\n    expires timestamptz NOT NULL\n);\n\nCREATE TABLE provider_type (\n    value text NOT NULL\n);\n\nALTER TABLE ONLY accounts\n    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY sessions\n    ADD CONSTRAINT sessions_pkey PRIMARY KEY (\"sessionToken\");\n\nALTER TABLE ONLY users\n    ADD CONSTRAINT users_email_key UNIQUE (email);\n\nALTER TABLE ONLY users\n    ADD CONSTRAINT users_pkey PRIMARY KEY (id);\n\nALTER TABLE ONLY verification_tokens\n    ADD CONSTRAINT verification_tokens_pkey PRIMARY KEY (token);\n\nALTER TABLE ONLY provider_type\n    ADD CONSTRAINT provider_type_pkey PRIMARY KEY (value);\n\nALTER TABLE ONLY accounts\n    ADD CONSTRAINT \"accounts_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES public.users(id) ON UPDATE RESTRICT ON DELETE CASCADE;\n\nALTER TABLE ONLY sessions\n    ADD CONSTRAINT \"sessions_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES public.users(id) ON UPDATE RESTRICT ON DELETE CASCADE;\n\nINSERT INTO provider_type (value) VALUES ('credentials'), ('email'), ('oauth'), ('oidc');\n\nALTER TABLE ONLY accounts\n    ADD CONSTRAINT \"accounts_type_fkey\" FOREIGN KEY (\"type\") REFERENCES public.provider_type(value) ON UPDATE RESTRICT ON DELETE RESTRICT;\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Provider in Qwik\nDESCRIPTION: Shows the configuration of the Yandex provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Yandex from \"@auth/qwik/providers/yandex\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Yandex],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Next.js Strava Authentication Configuration\nDESCRIPTION: Implementation of Strava authentication provider in Next.js using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/strava.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Strava from \"next-auth/providers/strava\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Strava],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Descope Authentication\nDESCRIPTION: Example callback URL configurations for different frameworks to handle Descope authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/descope.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/descope\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/descope\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDB Adapter with Express\nDESCRIPTION: Express implementation of the EdgeDB adapter for authentication, creating a client connection and initializing ExpressAuth with the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { EdgeDBAdapter } from \"@auth/edgedb-adapter\"\nimport { createClient } from \"edgedb\"\n\nconst app = express()\n\nconst client = createClient({ dsn: process.env.AUTH_EDGEDB_DSN })\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: EdgeDBAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js in Qwik\nDESCRIPTION: Configures authentication in a Qwik application using GitHub as a provider. Sets up authentication routes and session hooks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/index.mdx#2025-04-12_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// src/routes/plugin@auth.ts\nimport { QwikAuth } from \"@auth/qwik\"\nimport GitHub from \"@auth/qwik/providers/github\"\nexport const { onRequest, useSession } = QwikAuth$(() => ({ providers: [GitHub] }))\n```\n\n----------------------------------------\n\nTITLE: Integrating Frontegg Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up Frontegg as an authentication provider in a Next.js application using NextAuth.js. It exports the necessary handlers and authentication functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/frontegg.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Frontegg from \"next-auth/providers/frontegg\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Frontegg],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating SignIn Button Component in Next.js (Server Component)\nDESCRIPTION: Implementation of a sign-in button as a server component in Next.js. Uses the 'use server' directive and the signIn function to initiate the authentication flow.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from \"../../auth.ts\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async () => {\n        \"use server\"\n        await signIn()\n      }}\n    >\n      <button type=\"submit\">Sign In</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Qwik Cognito Integration\nDESCRIPTION: Setup for implementing Cognito authentication in a Qwik application using @auth/qwik\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/cognito.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Cognito from \"@auth/qwik/providers/cognito\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Cognito],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Callback URLs\nDESCRIPTION: Callback URL configurations for different frameworks to handle Keycloak authentication responses. The URL pattern varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/keycloak.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/keycloak\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/keycloak\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Naver Provider Configuration\nDESCRIPTION: Implementation of Naver OAuth provider in SvelteKit using @auth/sveltekit library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/naver.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Naver from \"@auth/sveltekit/providers/naver\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Naver],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vipps MobilePay Provider in Qwik\nDESCRIPTION: Implements the Vipps MobilePay provider in a Qwik application using QwikAuth$. It exports onRequest, useSession, useSignIn, and useSignOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vipps-mobilepay.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Vipps from \"@auth/qwik/providers/vipps\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Vipps],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium Provider in Next.js\nDESCRIPTION: Code snippet for setting up Medium as an authentication provider in Next.js using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/medium.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Medium from \"next-auth/providers/medium\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Medium],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressAuth with DrizzleAdapter\nDESCRIPTION: Express.js authentication setup using DrizzleAdapter, including proxy trust configuration and route handling.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\"\nimport { db } from \"./schema.ts\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: DrizzleAdapter(db),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing BoxyHQ SAML in Next.js\nDESCRIPTION: Next.js configuration for BoxyHQ SAML provider with OAuth 2.0 flow setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/boxyhq-saml.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport BoxyHQ from \"next-auth/providers/boxyhq-saml\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    BoxyHQ({\n      authorization: { params: { scope: \"\" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid\n      clientId: AUTH_BOXYHQ_SAML_ID,\n      clientSecret: AUTH_BOXYHQ_SAML_SECRET,\n      issuer: AUTH_BOXYHQ_SAML_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Passage Provider Configuration\nDESCRIPTION: Configuration for integrating Passage authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passage.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Passage from \"next-auth/providers/passage\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Passage],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Adapter with Qwik\nDESCRIPTION: Implementation of the Neon adapter with Auth.js in a Qwik application. Creates a database connection pool inside the request handler to prevent connection issues.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport NeonAdapter from \"@auth/neon-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\n// *DO NOT* create a `Pool` here, outside the request handler.\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => {\n    // Create a `Pool` inside the request handler.\n    const pool = new Pool({ connectionString: process.env.DATABASE_URL })\n    return {\n      adapter: NeonAdapter(pool),\n      providers: [],\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Provider in Qwik\nDESCRIPTION: Implements the LinkedIn provider for authentication in a Qwik application. This setup uses the QwikAuth$ function to configure the provider and export authentication functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/linkedin.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport LinkedIn from \"@auth/qwik/providers/linkedin\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [LinkedIn],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Descope Provider Integration\nDESCRIPTION: Implementation of Descope authentication provider in SvelteKit using @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/descope.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Descope from \"@auth/sveltekit/providers/descope\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Descope],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Fauna\nDESCRIPTION: Environment variables required for Fauna client configuration, including client URL and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_FAUNA_CLIENT=http://localhost:8443\nAUTH_FAUNA_SECRET=abc123\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Provider in Next.js\nDESCRIPTION: Implementation of Azure AD B2C authentication provider in a Next.js application using NextAuth. Requires client ID, client secret, and issuer to be set as environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad-b2c.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport AzureADB2C from \"next-auth/providers/azure-ad-b2c\";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [AzureADB2C({\n    clientId: AUTH_AZURE_AD_B2C_CLIENT_ID\n    clientSecret: AUTH_AZURE_AD_B2C_CLIENT_SECRET\n    issuer: AUTH_AZURE_AD_B2C_ISSUER\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Osu Provider in Qwik\nDESCRIPTION: This code shows how to configure the Osu authentication provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osu.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Osu from \"@auth/qwik/providers/osu\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Osu],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up SvelteKitAuth with MikroORM Adapter\nDESCRIPTION: This code configures SvelteKitAuth to use the MikroORM adapter in a SvelteKit application. It includes the adapter setup with database connection options.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { MikroOrmAdapter } from \"@auth/mikro-orm-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: MikroOrmAdapter({\n    // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver\n    dbName: process.env.DATABASE_CONNECTION_STRING,\n    type: \"sqlite\",\n    debug: true,\n  }),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Todoist Provider in Express\nDESCRIPTION: Code snippet for setting up Todoist as an authentication provider in an Express application using ExpressAuth. This configuration goes in the app.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/todoist.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Todoist from \"@auth/express/providers/todoist\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Todoist] }))\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Configuration for Authentik Provider\nDESCRIPTION: This code example shows how to integrate the Authentik provider with SvelteKit using Auth.js. It sets up SvelteKitAuth with Authentik provider configuration including required credentials.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/authentik.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\";\nimport Authentik from \"@auth/sveltekit/providers/authentik\";\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Authentik({\n    clientId: AUTH_AUTHENTIK_CLIENT_ID\n    clientSecret: AUTH_AUTHENTIK_CLIENT_SECRET\n    issuer: AUTH_AUTHENTIK_ISSUER\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for United Effects Provider\nDESCRIPTION: Specifies the callback URL format for the United Effects provider in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/united-effects.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/united-effects\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/united-effects\n```\n\n----------------------------------------\n\nTITLE: Setting up SvelteKitAuth with DrizzleAdapter\nDESCRIPTION: Configuration for SvelteKit authentication using DrizzleAdapter, showing basic setup with handle, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { DrizzleAdapter } from \"@auth/drizzle-adapter\"\nimport { db } from \"./schema.ts\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: DrizzleAdapter(db),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Salesforce Authentication in Next.js\nDESCRIPTION: Configuration code for implementing Salesforce OAuth provider in Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/salesforce.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Salesforce from \"next-auth/providers/salesforce\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Salesforce],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter with Next.js\nDESCRIPTION: Implementation of the TypeORM adapter in a Next.js application using the connection string from environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: TypeORMAdapter(process.env.AUTH_TYPEORM_CONNECTION),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for 42School Authentication\nDESCRIPTION: These code snippets show the correct callback URL format for 42School OAuth integration across different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/42-school.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/42-school\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/42-school\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/42-school\n```\n\n----------------------------------------\n\nTITLE: Implementing Nodemailer with Connection String in Next.js\nDESCRIPTION: Configuration for using Nodemailer provider with a connection string in Next.js. Sets up email authentication by passing environment variables to the Nodemailer provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Nodemailer({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dgraph Adapter with Express\nDESCRIPTION: Implementation of the Dgraph adapter in an Express authentication setup. Configures the adapter with endpoint, auth token, and optional security parameters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { DgraphAdapter } from \"@auth/dgraph-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: DgraphAdapter({\n      endpoint: process.env.DGRAPH_GRAPHQL_ENDPOINT,\n      authToken: process.env.DGRAPH_GRAPHQL_KEY,\n      // you can omit the following properties if you are running an unsecure schema\n      authHeader: process.env.AUTH_HEADER, // default: \"Authorization\",\n      jwtSecret: process.env.SECRET,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Provider in Qwik\nDESCRIPTION: Shows the configuration of the WorkOS provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/workos.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport WorkOS from \"@auth/qwik/providers/workos\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [WorkOS({ connection: \"conn_abc123\" })],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Notion Callback URLs\nDESCRIPTION: Example callback URLs for different frameworks to handle Notion OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/notion.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/notion\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/notion\n```\n\n----------------------------------------\n\nTITLE: Configuring Trakt Callback URLs\nDESCRIPTION: Framework-specific callback URL configurations for Trakt authentication. Used to handle OAuth redirect after successful authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/trakt.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/trakt\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/trakt\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Threads Provider Configuration\nDESCRIPTION: Implementation of Threads authentication provider in SvelteKit using @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/threads.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Threads from \"@auth/sveltekit/providers/threads\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Threads],\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit VK Provider Setup\nDESCRIPTION: Configuration for implementing VK authentication in a SvelteKit application using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vk.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Vk from \"@auth/sveltekit/providers/vk\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Vk],\n})\n```\n\n----------------------------------------\n\nTITLE: Express Configuration for Authentik Provider\nDESCRIPTION: This snippet demonstrates the integration of Authentik provider with Express.js using Auth.js. It configures ExpressAuth with the Authentik provider and mounts it on the auth route.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/authentik.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\";\nimport Authentik from \"@auth/express/providers/authentik\";\n\napp.use(\"/auth/*\", ExpressAuth({\n  providers: [Authentik({\n    clientId: AUTH_AUTHENTIK_CLIENT_ID\n    clientSecret: AUTH_AUTHENTIK_CLIENT_SECRET\n    issuer: AUTH_AUTHENTIK_ISSUER\n  })]\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitter OAuth Callback URLs\nDESCRIPTION: Example callback URL patterns for different frameworks when setting up Twitter OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitter.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/twitter\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/twitter\n```\n\n----------------------------------------\n\nTITLE: Configuring EVEOnline Provider in SvelteKit\nDESCRIPTION: Sets up EVEOnline authentication in a SvelteKit application using SvelteKitAuth. This configuration exports handle, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/eveonline.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport EveOnline from \"@auth/sveltekit/providers/eve-online\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [EveOnline],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Cognito Integration\nDESCRIPTION: Configuration for integrating Cognito authentication provider in a Next.js application using NextAuth\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/cognito.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Cognito from \"next-auth/providers/cognito\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Cognito],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the WorkOS provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/workos.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport WorkOS from \"next-auth/providers/workos\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [WorkOS({ connection: \"conn_abc123\" })],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Yandex provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Yandex from \"next-auth/providers/yandex\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Yandex],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Foursquare Auth Configuration\nDESCRIPTION: Implementation of Foursquare authentication provider in Qwik framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/foursquare.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport FourSquare from \"@auth/qwik/providers/foursquare\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [FourSquare],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Adapter dependencies\nDESCRIPTION: Command to install the required npm packages for using Firebase Adapter with Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/firebase-adapter firebase-admin\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKitAuth with D1 Adapter (SvelteKit)\nDESCRIPTION: Configuration for SvelteKitAuth using the D1 Adapter in a SvelteKit application. It sets up authentication handlers and adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/d1.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { D1Adapter } from \"@auth/d1-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: D1Adapter(env.db),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in Qwik\nDESCRIPTION: This code snippet shows how to set up the OneLogin provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/onelogin.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport OneLogin from \"@auth/qwik/providers/onelogin\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [OneLogin],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Fauna Collections and Indexes for Auth\nDESCRIPTION: FQL script for creating the necessary collections and indexes in Fauna for the auth adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nCollection.create({\n  name: \"Account\",\n  indexes: {\n    byUserId: {\n      terms: [\n        { field: \"userId\" }\n      ]\n    },\n    byProviderAndProviderAccountId: {\n      terms [\n        { field: \"provider\" },\n        { field: \"providerAccountId\" }\n      ]\n    },\n  }\n})\nCollection.create({\n  name: \"Session\",\n  constraints: [\n    {\n      unique: [\"sessionToken\"],\n      status: \"active\",\n    }\n  ],\n  indexes: {\n    bySessionToken: {\n      terms: [\n        { field: \"sessionToken\" }\n      ]\n    },\n    byUserId: {\n      terms [\n        { field: \"userId\" }\n      ]\n    },\n  }\n})\nCollection.create({\n  name: \"User\",\n  constraints: [\n    {\n      unique: [\"email\"],\n      status: \"active\",\n    }\n  ],\n  indexes: {\n    byEmail: {\n      terms [\n        { field: \"email\" }\n      ]\n    },\n  }\n})\nCollection.create({\n  name: \"VerificationToken\",\n  indexes: {\n    byIdentifierAndToken: {\n      terms [\n        { field: \"identifier\" },\n        { field: \"token\" }\n      ]\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entity Models for TypeORM Adapter\nDESCRIPTION: Custom implementation of TypeORM entity classes with additional fields. This example adds a 'role' field to the UserEntity class and defines all necessary Auth.js entities.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  OneToMany,\n  ValueTransformer,\n} from \"typeorm\"\n\nconst transformer: Record<\"date\" | \"bigint\", ValueTransformer> = {\n  date: {\n    from: (date: string | null) => date && new Date(parseInt(date, 10)),\n    to: (date?: Date) => date?.valueOf().toString(),\n  },\n  bigint: {\n    from: (bigInt: string | null) => bigInt && parseInt(bigInt, 10),\n    to: (bigInt?: number) => bigInt?.toString(),\n  },\n}\n\n@Entity({ name: \"users\" })\nexport class UserEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string\n\n  @Column({ type: \"varchar\", nullable: true })\n  name!: string | null\n\n  @Column({ type: \"varchar\", nullable: true, unique: true })\n  email!: string | null\n\n  @Column({ type: \"varchar\", nullable: true, transformer: transformer.date })\n  emailVerified!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  image!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  role!: string | null\n\n  @OneToMany(() => SessionEntity, (session) => session.userId)\n  sessions!: SessionEntity[]\n\n  @OneToMany(() => AccountEntity, (account) => account.userId)\n  accounts!: AccountEntity[]\n}\n\n@Entity({ name: \"accounts\" })\nexport class AccountEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string\n\n  @Column({ type: \"uuid\" })\n  userId!: string\n\n  @Column()\n  type!: string\n\n  @Column()\n  provider!: string\n\n  @Column()\n  providerAccountId!: string\n\n  @Column({ type: \"varchar\", nullable: true })\n  refresh_token!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  access_token!: string | null\n\n  @Column({\n    nullable: true,\n    type: \"bigint\",\n    transformer: transformer.bigint,\n  })\n  expires_at!: number | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  token_type!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  scope!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  id_token!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  session_state!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  oauth_token_secret!: string | null\n\n  @Column({ type: \"varchar\", nullable: true })\n  oauth_token!: string | null\n\n  @ManyToOne(() => UserEntity, (user) => user.accounts, {\n    createForeignKeyConstraints: true,\n  })\n  user!: UserEntity\n}\n\n@Entity({ name: \"sessions\" })\nexport class SessionEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string\n\n  @Column({ unique: true })\n  sessionToken!: string\n\n  @Column({ type: \"uuid\" })\n  userId!: string\n\n  @Column({ transformer: transformer.date })\n  expires!: string\n\n  @ManyToOne(() => UserEntity, (user) => user.sessions)\n  user!: UserEntity\n}\n\n@Entity({ name: \"verification_tokens\" })\nexport class VerificationTokenEntity {\n  @PrimaryGeneratedColumn(\"uuid\")\n  id!: string\n\n  @Column()\n  token!: string\n\n  @Column()\n  identifier!: string\n\n  @Column({ transformer: transformer.date })\n  expires!: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pipedrive Callback URLs\nDESCRIPTION: Callback URL configurations for different frameworks when setting up Pipedrive OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pipedrive.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/pipedrive\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/pipedrive\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/pipedrive\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Sendgrid Provider\nDESCRIPTION: Implementation of Sendgrid provider in Next.js authentication setup with custom API key configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Sendgrid from \"next-auth/providers/sendgrid\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    Sendgrid({\n      // If your environment variable is named differently than default\n      apiKey: COMPANY_AUTH_SENDGRID_API_KEY,\n      from: \"no-reply@company.com\"\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Duende Identity Server in NextAuth\nDESCRIPTION: Specifies the callback URL structure for Duende Identity Server authentication in NextAuth.js for different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/duende-identity-service\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/duende-identity-service\n```\n\n----------------------------------------\n\nTITLE: Next.js Keycloak Integration\nDESCRIPTION: Configuration for integrating Keycloak authentication in a Next.js application using next-auth package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/keycloak.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Keycloak from \"next-auth/providers/keycloak\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Keycloak],\n})\n```\n\n----------------------------------------\n\nTITLE: SessionProvider Configuration in Next.js _app\nDESCRIPTION: Shows how to configure SessionProvider at the application level in Next.js Pages Router.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/get-session.mdx#2025-04-12_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from \"next/app\"\nimport { SessionProvider } from \"next-auth/react\"\n\nexport default function MyApp({\n  Component,\n  pageProps: { session, ...pageProps },\n}: AppProps) {\n  return (\n    <SessionProvider session={session}>\n      <Component {...pageProps} />;\n    </SessionProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth Middleware\nDESCRIPTION: Sets up middleware using the base configuration without database adapter for edge runtime compatibility\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/edge-compatibility.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport authConfig from \"./auth.config\"\n\nexport const { auth: middleware } = NextAuth(authConfig)\n```\n\n----------------------------------------\n\nTITLE: Creating SignIn Button in SvelteKit\nDESCRIPTION: Implementation of a sign-in button in a SvelteKit page component. Imports signIn from the Auth.js client library and adds a button that triggers the authentication process.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n  import { signIn } from '@auth/sveltekit/client'\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <button on:click={signIn}>Signin</button>\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Salesforce Auth in SvelteKit\nDESCRIPTION: Implementation code for Salesforce authentication in SvelteKit using @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/salesforce.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Salesforce from \"@auth/sveltekit/providers/salesforce\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Salesforce],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Sendgrid API Key Environment Variable\nDESCRIPTION: Configuration of the Sendgrid API key as an environment variable for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTH_SENDGRID_KEY=abc\n```\n\n----------------------------------------\n\nTITLE: Qwik Twitter Auth Configuration\nDESCRIPTION: Implementation of Twitter authentication provider in Qwik framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitter.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Twitter from \"@auth/qwik/providers/twitter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Twitter],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hubspot Auth in Express\nDESCRIPTION: Configuration code for setting up Hubspot authentication in an Express application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/hubspot.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Hubspot from \"@auth/express/providers/hubspot\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Hubspot] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring QwikAuth with SurrealDB Adapter\nDESCRIPTION: Qwik configuration for authentication using the SurrealDB adapter. It sets up authentication handlers and functions for Qwik applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { SurrealDBAdapter } from \"@auth/surrealdb-adapter\"\nimport clientPromise from \"./lib/surrealdb\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: SurrealDBAdapter(clientPromise),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for OneLogin Provider\nDESCRIPTION: These code snippets show the callback URL configuration for OneLogin provider in different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/onelogin.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/onelogin\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/onelogin\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Firebase service account values\nDESCRIPTION: How to authenticate with Firebase using service account key values stored in environment variables instead of a service account file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { FirestoreAdapter } from \"@auth/firebase-adapter\"\nimport { cert } from \"firebase-admin/app\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: FirestoreAdapter({\n    credential: cert({\n      projectId: process.env.AUTH_FIREBASE_PROJECT_ID,\n      clientEmail: process.env.AUTH_FIREBASE_CLIENT_EMAIL,\n      privateKey: process.env.AUTH_FIREBASE_PRIVATE_KEY,\n    }),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring EVEOnline Provider in Qwik\nDESCRIPTION: Implements EVEOnline authentication in a Qwik application using QwikAuth$. This setup exports onRequest, useSession, useSignIn, and useSignOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/eveonline.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport EveOnline from \"@auth/qwik/providers/eve-online\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [EveOnline],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter with Express\nDESCRIPTION: Implementation of the TypeORM adapter in an Express application using the connection string from environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: TypeORMAdapter(process.env.AUTH_TYPEORM_CONNECTION),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Next.js Trakt Authentication Setup\nDESCRIPTION: Configuration for implementing Trakt authentication in Next.js using NextAuth.js. Exports authentication handlers and methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/trakt.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Trakt from \"next-auth/providers/trakt\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Trakt],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab Authentication in SvelteKit\nDESCRIPTION: Integrates GitLab authentication in a SvelteKit application using SvelteKitAuth. This setup exports handle, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/gitlab.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport GitLab from \"@auth/sveltekit/providers/gitlab\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [GitLab],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up United Effects Provider in Express\nDESCRIPTION: Demonstrates how to integrate the United Effects provider in an Express application using ExpressAuth. It configures the auth route with the provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/united-effects.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport UnitedEffects from \"@auth/express/providers/united-effects\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [UnitedEffects] }))\n```\n\n----------------------------------------\n\nTITLE: Creating Postmark SignIn Form in Next.js (Server Component)\nDESCRIPTION: Implementation of a sign-in form for Postmark in Next.js as a server component. Includes an email input field and submits to the Postmark provider specifically.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_38\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from \"../../auth.ts\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async (formData) => {\n        \"use server\"\n        await signIn(\"postmark\", formData)\n      }}\n    >\n      <input type=\"text\" name=\"email\" placeholder=\"Email\" />\n      <button type=\"submit\">Signin with Postmark</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database Connection\nDESCRIPTION: This snippet shows how to set the database connection string as an environment variable.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_CONNECTION_STRING=./db.sqlite\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Provider in Qwik\nDESCRIPTION: Implementation of Azure AD B2C authentication provider in a Qwik application. Uses environment variables to configure the client ID, client secret, and issuer for the provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad-b2c.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport AzureADB2C from \"@auth/qwik/providers/azure-ad-b2c\";\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      AzureADB2C({\n        clientId: import.meta.env.AUTH_AZURE_AD_CLIENT_ID\n        clientSecret: import.meta.env.AUTH_AZURE_AD_CLIENT_SECRET\n        issuer: import.meta.env.AUTH_AZURE_AD_ISSUER\n      })\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKitAuth with SurrealDB Adapter\nDESCRIPTION: SvelteKit configuration for authentication using the SurrealDB adapter. It sets up authentication handlers for SvelteKit applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { SurrealDBAdapter } from \"@auth/surrealdb-adapter\"\nimport clientPromise from \"./lib/surrealdb\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: SurrealDBAdapter(clientPromise),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Adapter with Express\nDESCRIPTION: Implementation of Firebase Adapter in an Express authentication setup using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { FirestoreAdapter } from \"@auth/firebase-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: FirestoreAdapter(),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Corporate Proxy with HttpsProxyAgent in Auth.js\nDESCRIPTION: Alternative configuration for Edge Runtimes using HttpsProxyAgent to handle proxy communications. Provides a simpler approach when Undici is not available or proxy restrictions are in place.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/corporate-proxy.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport NextAuth, { customFetch } from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nconst { HttpsProxyAgent } = require('https-proxy-agent');\n\nconst proxyAgent = new HttpsProxyAgent(\"my.proxy.server\");\nasync function proxy(url: string, options: any): Promise<Response> {\n  const response = (await fetch(url, {\n    ...options,\n    agent: proxyAgent,\n  })) as unknown as Response;\n  return response;\n}\n\nexport const { handlers, auth } = NextAuth({\n  providers: [GitHub({ [customFetch]: proxy })],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Trakt Authentication Setup\nDESCRIPTION: Implementation of Trakt authentication in Qwik framework using @auth/qwik package. Configures authentication hooks and request handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/trakt.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Trakt from \"@auth/qwik/providers/trakt\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Trakt],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Provider in Express\nDESCRIPTION: This snippet shows how to set up the Spotify provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/spotify.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Spotify from \"@auth/express/providers/spotify\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Spotify] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Osu Authentication\nDESCRIPTION: These snippets show the callback URL format for Osu authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osu.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/osu\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/osu\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit with Upstash Redis Adapter\nDESCRIPTION: Implementation of SvelteKitAuth with Upstash Redis adapter in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { UpstashRedisAdapter } from \"@auth/upstash-redis-adapter\"\nimport { Redis } from \"@upstash/redis\"\n\nconst redis = new Redis({\n  url: process.env.UPSTASH_REDIS_URL!,\n  token: process.env.UPSTASH_REDIS_TOKEN!,\n})\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: UpstashRedisAdapter(redis),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Schema for User Data in SQL\nDESCRIPTION: This SQL snippet creates a users table with row-level security and policies. It also sets up a trigger to automatically create a user entry when a new user signs up via NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Note: This table contains user data. Users should only be able to view and update their own data.\ncreate table users (\n  -- UUID from next_auth.users\n  id uuid not null primary key,\n  name text,\n  email text,\n  image text,\n  constraint \"users_id_fkey\" foreign key (\"id\")\n        references  next_auth.users (id) match simple\n        on update no action\n        on delete cascade -- if a user is deleted in NextAuth they will also be deleted in our public table.\n);\nalter table users enable row level security;\ncreate policy \"Can view own user data.\" on users for select using (next_auth.uid() = id);\ncreate policy \"Can update own user data.\" on users for update using (next_auth.uid() = id);\n\n-- This trigger automatically creates a user entry when a new user signs up via NextAuth.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.users (id, name, email, image)\n  values (new.id, new.name, new.email, new.image);\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on next_auth.users\n  for each row execute procedure public.handle_new_user();\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Microsoft Entra ID Authentication\nDESCRIPTION: This snippet shows the required environment variables for setting up Microsoft Entra ID authentication. These variables include the client ID, client secret, and issuer URL.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/microsoft-entra-id.mdx#2025-04-12_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_MICROSOFT_ENTRA_ID_ID=<copy Application (client) ID here>\nAUTH_MICROSOFT_ENTRA_ID_SECRET=<copy generated client secret value here>\nAUTH_MICROSOFT_ENTRA_ID_ISSUER=https://login.microsoftonline.com/<copy the issuer here>/v2.0\n```\n\n----------------------------------------\n\nTITLE: Installing DynamoDB Adapter and Dependencies\nDESCRIPTION: Command to install the DynamoDB adapter and required AWS SDK packages for Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/dynamodb-adapter @aws-sdk/lib-dynamodb @aws-sdk/client-dynamodb\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitLab Authentication in Express\nDESCRIPTION: Configures GitLab authentication for an Express application using ExpressAuth. This setup adds an authentication middleware to the '/auth/*' route.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/gitlab.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport GitLab from \"@auth/express/providers/gitlab\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [GitLab] }))\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Bungie Provider Configuration\nDESCRIPTION: Implementation of Bungie authentication provider in SvelteKit framework with authentication handler setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bungie.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\";\nimport Bungie from \"@auth/sveltekit/providers/boxyhq-saml\";\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Bungie({\n      clientId: AUTH_BUNGIE_ID\n      clientSecret: AUTH_BUNGIE_SECRET\n      headers: { \"X-API-Key\": AUTH_BUNGIE_API_KEY }\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Figma Authentication in Express\nDESCRIPTION: Express.js configuration for Figma authentication provider setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/figma.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Figma from \"@auth/express/providers/figma\"\napp.use(\"/auth/*\", ExpressAuth({ providers: [Figma] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKitAuth with Sequelize Adapter (Svelte)\nDESCRIPTION: Configuration for SvelteKitAuth using the Sequelize adapter in a Svelte application. It sets up Sequelize and the adapter for authentication handling.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport SequelizeAdapter from \"@auth/sequelize-adapter\"\nimport { Sequelize } from \"sequelize\"\n\nconst sequelize = new Sequelize(process.env.DATABASE_URL)\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: SequelizeAdapter(sequelize),\n})\n```\n\n----------------------------------------\n\nTITLE: Database Configuration and Type Definitions\nDESCRIPTION: Configuration of Kysely database instance with type definitions for Auth.js tables\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/kysely.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PostgresDialect } from \"kysely\"\nimport { Pool } from \"pg\"\nimport { KyselyAuth } from \"@auth/kysely-adapter\"\nimport type { GeneratedAlways } from \"kysely\"\n\ninterface Database {\n  User: {\n    id: GeneratedAlways<string>\n    name: string | null\n    email: string\n    emailVerified: Date | null\n    image: string | null\n  }\n  Account: {\n    id: GeneratedAlways<string>\n    userId: string\n    type: string\n    provider: string\n    providerAccountId: string\n    refresh_token: string | null\n    access_token: string | null\n    expires_at: number | null\n    token_type: string | null\n    scope: string | null\n    id_token: string | null\n    session_state: string | null\n  }\n  Session: {\n    id: GeneratedAlways<string>\n    userId: string\n    sessionToken: string\n    expires: Date\n  }\n  VerificationToken: {\n    identifier: string\n    token: string\n    expires: Date\n  }\n}\n\nexport const db = new KyselyAuth<Database>({\n  dialect: new PostgresDialect({\n    pool: new Pool({\n      host: process.env.DATABASE_HOST,\n      database: process.env.DATABASE_NAME,\n      user: process.env.DATABASE_USER,\n      password: process.env.DATABASE_PASSWORD,\n    }),\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Hubspot Auth in SvelteKit\nDESCRIPTION: Configuration code for setting up Hubspot authentication in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/hubspot.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Hubspot from \"@auth/sveltekit/providers/hubspot\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Hubspot],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing SailPoint OAuth Provider in Next.js\nDESCRIPTION: Next.js configuration for SailPoint OAuth provider including authorization, token endpoints, and user profile mapping\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sailpoint.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    {\n      id: \"sailpoint\",\n      name: \"SailPoint\",\n      type: \"oauth\",\n      clientId: process.env.AUTH_SAILPOINT_ID!,\n      clientSecret: process.env.AUTH_SAILPOINT_SECRET!,\n      authorization: {\n        url: `${process.env.AUTH_SAILPOINT_BASE_URL!}/oauth/authorize`,\n        params: { scope: \"sp:scopes:all\" },\n      },\n      token: `${process.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/token`,\n      userinfo: `${process.env.AUTH_SAILPOINT_BASE_API_URL!}/oauth/userinfo`,\n      profile(profile) {\n        return {\n          id: profile.id,\n          email: profile.email,\n          name: profile.uid,\n          image: null,\n        }\n      },\n      style: { brandColor: \"#011E69\", logo: \"sailpoint.svg\" },\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up Instagram as an authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/instagram.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Instagram from \"next-auth/providers/instagram\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Instagram],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Zitadel Provider in SvelteKit\nDESCRIPTION: This code example illustrates how to integrate the Zitadel provider in a SvelteKit application using SvelteKitAuth. It sets up the authentication handlers and providers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zitadel.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Zitadel from \"@auth/sveltekit/providers/zitadel\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Zitadel],\n})\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Neon Authentication Tables\nDESCRIPTION: SQL schema for creating the required database tables for authentication with Neon. Includes tables for verification tokens, accounts, sessions, and users.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE verification_token\n(\n  identifier TEXT NOT NULL,\n  expires TIMESTAMPTZ NOT NULL,\n  token TEXT NOT NULL,\n\n  PRIMARY KEY (identifier, token)\n);\n\nCREATE TABLE accounts\n(\n  id SERIAL,\n  \"userId\" INTEGER NOT NULL,\n  type VARCHAR(255) NOT NULL,\n  provider VARCHAR(255) NOT NULL,\n  \"providerAccountId\" VARCHAR(255) NOT NULL,\n  refresh_token TEXT,\n  access_token TEXT,\n  expires_at BIGINT,\n  id_token TEXT,\n  scope TEXT,\n  session_state TEXT,\n  token_type TEXT,\n\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE sessions\n(\n  id SERIAL,\n  \"userId\" INTEGER NOT NULL,\n  expires TIMESTAMPTZ NOT NULL,\n  \"sessionToken\" VARCHAR(255) NOT NULL,\n\n  PRIMARY KEY (id)\n);\n\nCREATE TABLE users\n(\n  id SERIAL,\n  name VARCHAR(255),\n  email VARCHAR(255),\n  \"emailVerified\" TIMESTAMPTZ,\n  image TEXT,\n\n  PRIMARY KEY (id)\n);\n```\n\n----------------------------------------\n\nTITLE: Installing solid-start-vercel with pnpm\nDESCRIPTION: Command to install the solid-start-vercel adapter using pnpm package manager.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/solid-start/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D solid-start-vercel\n```\n\n----------------------------------------\n\nTITLE: Configuring Forward Email Provider in Next.js\nDESCRIPTION: Implementation of Forward Email provider configuration in Next.js using Auth.js\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/forwardemail.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport ForwardEmail from \"next-auth/providers/forwardemail\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    ForwardEmail({\n      // If your environment variable is named differently than default\n      apiKey: AUTH_FORWARDEMAIL_KEY,\n      from: \"no-reply@company.com\"\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Provider in SvelteKit\nDESCRIPTION: Implementation of Azure AD B2C authentication provider in a SvelteKit application. Configures the provider with client ID, client secret, and issuer credentials.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad-b2c.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\";\nimport AzureADB2C from \"@auth/sveltekit/providers/azure-ad-b2c\";\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [AzureADB2C({\n    clientId: AUTH_AZURE_AD_CLIENT_ID\n    clientSecret: AUTH_AZURE_AD_CLIENT_SECRET\n    issuer: AUTH_AZURE_AD_ISSUER\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Box Environment Variables\nDESCRIPTION: Required environment variables for Box authentication, including client ID and secret which must be obtained from the Box developer console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/box.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_BOX_CLIENT_ID\nAUTH_BOX_CLIENT_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Provider in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the Spotify provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/spotify.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Spotify from \"next-auth/providers/spotify\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Spotify],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Base Next-Auth Configuration\nDESCRIPTION: Defines the common Next-Auth configuration object without database adapter, setting up GitHub provider\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/edge-compatibility.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"next-auth/providers/github\"\nimport type { NextAuthConfig } from \"next-auth\"\n\n// Notice this is only an object, not a full Auth.js instance\nexport default {\n  providers: [GitHub],\n} satisfies NextAuthConfig\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Coinbase Authentication\nDESCRIPTION: Examples of callback URLs for Coinbase authentication in Next.js, Qwik, and Svelte frameworks. These URLs should be configured in the Coinbase OAuth settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/coinbase.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/coinbase\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/coinbase\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/coinbase\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Provider in Qwik\nDESCRIPTION: This snippet shows how to configure the Spotify provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/spotify.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Spotify from \"@auth/qwik/providers/spotify\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Spotify],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Logto Authentication\nDESCRIPTION: Lists the required environment variables for Logto authentication. These variables are crucial for establishing a secure connection with the Logto service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/logto.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_LOGTO_ID\nAUTH_LOGTO_SECRET\nAUTH_LOGTO_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider in SvelteKit\nDESCRIPTION: Sets up the Discord provider in SvelteKit. This configuration imports the necessary modules and exports the authentication handler and functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/discord.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Discord from \"@auth/sveltekit/providers/discord\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Discord],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressAuth with MikroORM Adapter\nDESCRIPTION: This snippet demonstrates how to set up ExpressAuth with the MikroORM adapter in an Express.js application. It configures the auth route with the adapter and database settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { MikroOrmAdapter } from \"@auth/mikro-orm-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: MikroOrmAdapter({\n      // MikroORM options object - https://mikro-orm.io/docs/next/configuration#driver\n      dbName: process.env.DATABASE_CONNECTION_STRING,\n      type: \"sqlite\",\n      debug: true,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Next.js WordPress Authentication Setup\nDESCRIPTION: Configuration for integrating WordPress OAuth provider in Next.js using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wordpress.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport WordPress from \"next-auth/providers/wordpress\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [WordPress],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Nodemailer with Connection String in Qwik\nDESCRIPTION: Configuration for using Nodemailer provider with a connection string in Qwik framework. Uses import.meta.env to access environment variables for email server configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Nodemailer from \"@auth/qwik/providers/nodemailer\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Nodemailer({\n        server: import.meta.env.EMAIL_SERVER,\n        from: import.meta.env.EMAIL_FROM,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating United Effects Provider in Qwik\nDESCRIPTION: Shows the setup for the United Effects provider in a Qwik application using QwikAuth$. It configures the provider and exports authentication-related functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/united-effects.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport UnitedEffects from \"@auth/qwik/providers/united-effects\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [UnitedEffects],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Required Environment Variables for BankID Norway Authentication\nDESCRIPTION: The environment variables needed for BankID Norway authentication, including client ID and secret that must be obtained from BankID Norway.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bankid-no.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_BANKID_NO_ID\nAUTH_BANKID_NO_SECRET\n```\n\n----------------------------------------\n\nTITLE: Express.js Dropbox Authentication Setup\nDESCRIPTION: Implementation of Dropbox authentication in Express.js using @auth/express package. Configures authentication middleware for Express routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dropbox.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Dropbox from \"@auth/express/providers/dropbox\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Dropbox] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitbucket Auth in Next.js\nDESCRIPTION: Configuration code for setting up Bitbucket authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bitbucket.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Bitbucket from \"next-auth/providers/bitbucket\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Bitbucket],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Provider in Next.js\nDESCRIPTION: Code snippet for setting up the Coinbase provider in a Next.js application using NextAuth. This configuration goes in the auth.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/coinbase.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Coinbase from \"next-auth/providers/coinbase\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Coinbase],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Faceit Auth Configuration\nDESCRIPTION: Configuration for implementing Faceit authentication in a Next.js application using NextAuth.js. Sets up authentication handlers and provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/faceit.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport FaceIt from \"next-auth/providers/faceit\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [FaceIt],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up United Effects Provider in Next.js\nDESCRIPTION: Demonstrates how to configure the United Effects provider in a Next.js application using NextAuth. It imports the necessary modules and sets up the provider in the auth configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/united-effects.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport UnitedEffects from \"next-auth/providers/united-effects\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [UnitedEffects],\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Framework Links in Auth.js Documentation\nDESCRIPTION: This JSX code renders a container with different framework integration links for Auth.js including Next.js, Qwik, SvelteKit, and Express. Each link includes a demo URL and repository link, plus an option to add new integrations.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/index.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"mb-12 mt-8 flex w-full flex-wrap items-start justify-around gap-2\">\n  <FrameworkLink\n    id=\"nextjs\"\n    name=\"Next.js\"\n    demo=\"https://next-auth-example.vercel.app/\"\n    repo=\"https://github.com/nextauthjs/next-auth-example\"\n    isExperimental={false}\n    isInvert={true}\n  />\n  <FrameworkLink\n    id=\"qwik\"\n    name=\"Qwik\"\n    demo=\"https://qwik-auth-example.vercel.app/\"\n    repo=\"https://github.com/nextauthjs/qwik-auth-example\"\n  />\n  <FrameworkLink\n    id=\"sveltekit\"\n    name=\"SvelteKit\"\n    demo=\"https://sveltekit-auth-example.vercel.app/\"\n    repo=\"https://github.com/nextauthjs/sveltekit-auth-example\"\n  />\n  <FrameworkLink\n    id=\"express\"\n    name=\"Express\"\n    demo=\"https://express-auth-example.vercel.app/\"\n    repo=\"https://github.com/nextauthjs/express-auth-example\"\n    isInvert={true}\n  />\n  <Link\n    href=\"/guides/creating-a-framework-integration\"\n    className=\"relative flex h-28 w-28 flex-col flex-wrap items-center justify-between rounded-lg border border-solid border-slate-200 bg-white p-4 !no-underline shadow-sm transition duration-300 hover:bg-neutral-100 dark:border-neutral-800 dark:bg-neutral-900 hover:dark:bg-neutral-950\"\n  >\n    <Plus className=\"size-9\" />\n    <div className=\"mt-3 text-sm\">Add New</div>\n  </Link>\n</div>\n```\n\n----------------------------------------\n\nTITLE: React JSX Component Structure for Auth.js Documentation Homepage\nDESCRIPTION: This JSX code forms the structure of the Auth.js documentation homepage. It imports various components and data, then renders the main content including framework links, authentication methods explanation, and supported providers and adapters.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\"\nimport { ListDisclosure } from \"@/components/ListDisclosure\"\nimport { Link } from \"@/components/Link\"\nimport { Screenshot } from \"@/components/Screenshot\"\nimport { Plus, ArrowSquareOut, GithubLogo, Flask } from \"@/icons\"\nimport manifest from \"@/data/manifest.json\"\nimport { FrameworkLink } from \"@/components/FrameworkLink\"\n```\n\n----------------------------------------\n\nTITLE: Qwik Keycloak Integration\nDESCRIPTION: Setup code for implementing Keycloak authentication in a Qwik application using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/keycloak.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Keycloak from \"@auth/qwik/providers/keycloak\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Keycloak],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Naver OAuth\nDESCRIPTION: Required environment variables for Naver OAuth authentication, including the client ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/naver.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_NAVER_ID\nAUTH_NAVER_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Adapter in Qwik\nDESCRIPTION: Implementation of PostgreSQL adapter in Qwik framework, including standard PostgreSQL and Neon/Vercel Postgres configurations.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"pg\"\n\nconst pool = new Pool({\n  host: import.meta.env.DATABASE_HOST,\n  user: import.meta.env.DATABASE_USER,\n  password: import.meta.env.DATABASE_PASSWORD,\n  database: import.meta.env.DATABASE_NAME,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n})\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: PostgresAdapter(pool),\n  })\n)\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\n// *DO NOT* create a `Pool` here, outside the request handler.\n// Neon's Postgres cannot keep a pool alive between requests.\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => {\n    // Create a `Pool` inside the request handler.\n    const pool = new Pool({ connectionString: import.meta.env.DATABASE_URL })\n    return {\n      providers: [],\n      adapter: PostgresAdapter(pool),\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Email Verification Request Handler\nDESCRIPTION: Implementation of a custom verification request handler for Forward Email provider\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/forwardemail.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest(params) {\n  const { identifier: to, provider, url, theme } = params\n  const { host } = new URL(url)\n  const res = await fetch(\"https://api.forwardemail.net/v1/emails\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Basic ${btoa(provider.apiKey + \":\")}`\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      from: provider.from,\n      to,\n      subject: `Sign in to ${host}`,\n      html: html({ url, host, theme }),\n      text: text({ url, host }),\n    }),\n  })\n\n  if (!res.ok)\n    throw new Error(\"Forward Email error: \" + JSON.stringify(await res.json()))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Auth in Next.js\nDESCRIPTION: Configuration code for setting up Line authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/line.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Line from \"next-auth/providers/line\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Line],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Sendgrid Provider\nDESCRIPTION: Implementation of Sendgrid provider in SvelteKit authentication setup with environment variable handling.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Sendgrid from \"@auth/sveltekit/providers/sendgrid\"\nimport { env } from \"$env/dynamic/prviate\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: ...,\n  providers: [\n    Sendgrid({\n      // If your environment variable is named differently than default\n      apiKey: env.COMPANY_AUTH_SENDGRID_API_KEY,\n      from: \"no-reply@company.com\",\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SailPoint OAuth\nDESCRIPTION: Required environment variables for SailPoint OAuth configuration including client ID, secret, and API endpoints\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sailpoint.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SAILPOINT_ID=\nAUTH_SAILPOINT_SECRET=\nAUTH_SAILPOINT_BASE_URL=https://{tenant}.identitynow.com\nAUTH_SAILPOINT_BASE_API_URL=https://{tenant}.api.identitynow.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Osso Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up the Osso provider in a Next.js application using the NextAuth library. It exports the necessary authentication handlers and functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osso.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Osso from \"next-auth/providers/osso\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Osso],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom User Entity for MikroORM Adapter\nDESCRIPTION: This code example shows how to create a custom User entity that extends the default entities provided by the MikroORM adapter. It includes relationships to Session and Account entities and adds a custom 'role' field.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport config from \"config/mikro-orm.ts\"\nimport {\n  Cascade,\n  Collection,\n  Entity,\n  OneToMany,\n  PrimaryKey,\n  Property,\n  Unique,\n} from \"@mikro-orm/core\"\nimport { defaultEntities } from \"@auth/mikro-orm-adapter\"\n\nconst type { Account, Session } = defaultEntities\n\n@Entity()\nexport class User implements defaultEntities.User {\n  @PrimaryKey()\n  id: string = randomUUID()\n\n  @Property({ nullable: true })\n  name?: string\n\n  @Property({ nullable: true })\n  @Unique()\n  email?: string\n\n  @Property({ type: \"Date\", nullable: true })\n  emailVerified: Date | null = null\n\n  @Property({ nullable: true })\n  image?: string\n\n  @OneToMany({\n    entity: () => Session,\n    mappedBy: (session) => session.user,\n    hidden: true,\n    orphanRemoval: true,\n    cascade: [Cascade.ALL],\n  })\n  sessions = new Collection<Session>(this)\n\n  @OneToMany({\n    entity: () => Account,\n    mappedBy: (account) => account.user,\n    hidden: true,\n    orphanRemoval: true,\n    cascade: [Cascade.ALL],\n  })\n  accounts = new Collection<Account>(this)\n\n  @Enum({ hidden: true })\n  role = \"ADMIN\"\n}\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: MikroOrmAdapter(config, { entities: { User } }),\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Webex Authentication Setup\nDESCRIPTION: Configuration for implementing Webex authentication in a Next.js application using NextAuth.js. Sets up authentication handlers and provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/webex.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Webex from \"next-auth/providers/webex\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Webex],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Web Crypto API polyfill in Express application\nDESCRIPTION: This code shows how to import the Web Crypto API polyfill in a top-level file of an Express application. This ensures the polyfill is loaded before any part of the application that might need the Web Crypto API.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/express/README.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nimport \"./polyfill.cjs\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Nodemailer with Connection String in SvelteKit\nDESCRIPTION: Configuration for using Nodemailer provider with a connection string in SvelteKit. Uses the $env/dynamic/private module to access environment variables and exports authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Nodemailer from \"@auth/sveltekit/providers/nodemailer\"\nimport { env } from \"$env/dynamic/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Nodemailer({\n      server: env.EMAIL_SERVER,\n      from: env.EMAIL_FROM,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Wikimedia Auth Configuration\nDESCRIPTION: Implementation of Wikimedia authentication in Next.js using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wikimedia.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Wikimedia from \"next-auth/providers/wikimedia\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Wikimedia],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Yandex OAuth\nDESCRIPTION: Defines the required environment variables for Yandex OAuth configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_YANDEX_ID\nAUTH_YANDEX_SECRET\n```\n\n----------------------------------------\n\nTITLE: Installing MikroORM and Auth Adapter Dependencies\nDESCRIPTION: This command installs the required packages for using MikroORM with the auth adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mikro-orm/core @auth/mikro-orm-adapter\n```\n\n----------------------------------------\n\nTITLE: Setting Firebase environment variables\nDESCRIPTION: Environment variables needed for Firebase authentication, including service account file path and key values.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n// Auth via Service Account File\nGOOGLE_APPLICATION_CREDENTIALS\n\n// Auth via key values\nAUTH_FIREBASE_PROJECT_ID\nAUTH_FIREBASE_CLIENT_EMAIL\nAUTH_FIREBASE_PRIVATE_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Dgraph Adapter with npm/yarn\nDESCRIPTION: Command to install the Dgraph adapter package for Auth.js integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/dgraph-adapter\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Strava Authentication Configuration\nDESCRIPTION: Implementation of Strava authentication provider in SvelteKit framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/strava.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Strava from \"@auth/sveltekit/providers/strava\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Strava],\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Keycloak Integration\nDESCRIPTION: Implementation code for adding Keycloak authentication to a SvelteKit application using @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/keycloak.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Keycloak from \"@auth/sveltekit/providers/keycloak\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Keycloak],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Faceit Auth Configuration\nDESCRIPTION: Implementation of Faceit authentication in a Qwik application using @auth/qwik package. Configures authentication hooks and provider settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/faceit.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport FaceIt from \"@auth/qwik/providers/faceit\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [FaceIt],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring QwikAuth with 42School Provider\nDESCRIPTION: Shows how to implement 42School authentication in a Qwik application using the Auth Qwik plugin.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/42-school.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport 42School from \"@auth/qwik/providers/42-school\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [42School],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Instagram Provider\nDESCRIPTION: These environment variables are required for Instagram authentication setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/instagram.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_INSTAGRAM_ID\nAUTH_INSTAGRAM_SECRET\n```\n\n----------------------------------------\n\nTITLE: Displaying Kysely Adapter Information in HTML\nDESCRIPTION: This HTML snippet creates a centered layout with logos, badges, and links for the Kysely Adapter. It includes links to the Auth.js website, npm package, and GitHub repository, along with various statistics and version information.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-kysely/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://kysely.io\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/kysely.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Kysely Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/kysely-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/kysely-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/kysely-adapter?color=green&label=@auth/kysely-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/kysely-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/kysely-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth.js Framework Integration Setup\nDESCRIPTION: Command to generate a new framework integration using the provided setup script. Creates required files from the official template and sets up proper naming conventions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/creating-a-framework-integration.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm setup-fw-integration <framework-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Loops Environment Variables in Shell\nDESCRIPTION: Sets the required environment variables for Loops integration, including the API key and transactional ID.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/loops.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTH_LOOPS_KEY=abc\nAUTH_LOOPS_TRANSACTIONAL_ID=def\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in Express\nDESCRIPTION: Demonstrates how to integrate Twitch authentication in an Express application using ExpressAuth. This configuration sets up an authentication route for Twitch.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitch.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Twitch from \"@auth/express/providers/twitch\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Twitch] }))\n```\n\n----------------------------------------\n\nTITLE: Defining Zod Validation Schema\nDESCRIPTION: Creates a validation schema for email and password credentials using Zod. The schema enforces email format and password length requirements.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \"zod\"\n\nexport const signInSchema = object({\n  email: string({ required_error: \"Email is required\" })\n    .min(1, \"Email is required\")\n    .email(\"Invalid email\"),\n  password: string({ required_error: \"Password is required\" })\n    .min(1, \"Password is required\")\n    .min(8, \"Password must be more than 8 characters\")\n    .max(32, \"Password must be less than 32 characters\"),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Patreon Provider in Next.js\nDESCRIPTION: Configuration code for setting up Patreon authentication in Next.js using NextAuth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/patreon.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Patreon from \"next-auth/providers/patreon\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Patreon],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwik Sendgrid Provider\nDESCRIPTION: Implementation of Sendgrid provider in Qwik authentication setup with environment variable configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Sendgrid from \"@auth/qwik/providers/sendgrid\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Sendgrid({\n        // If your environment variable is named differently than default\n        apiKey: import.meta.env.COMPANY_AUTH_SENDGRID_API_KEY,\n        from: \"no-reply@company.com\",\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Frontegg Provider\nDESCRIPTION: This snippet lists the required environment variables for Frontegg integration. These variables should be set in the .env.local file of the project.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/frontegg.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Environments > Your environment > Env settings\nAUTH_FRONTEGG_ID=\"<Client ID>\"\n# Environments > Your environment > Env settings\nAUTH_FRONTEGG_SECRET=\"<API KEY>\"\n# Environments > Your environment > Env settings > Domains > Domain name\nAUTH_FRONTEGG_ISSUER=\"<https://[YOUR_SUBDOMAIN].frontegg.com>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication in Express\nDESCRIPTION: Express implementation for Apple authentication using ExpressAuth. This code sets up an authentication route with Apple configured as a provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/apple.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Apple from \"@auth/express/providers/apple\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Apple] }))\n```\n\n----------------------------------------\n\nTITLE: Next.js Descope Provider Integration\nDESCRIPTION: Implementation of Descope authentication provider in Next.js using NextAuth.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/descope.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Descope from \"next-auth/providers/descope\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Descope],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PouchDB Adapter with Next.js Authentication\nDESCRIPTION: Setup for Next.js authentication using PouchDB adapter with LevelDB storage and required plugins\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pouchdb.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { PouchDBAdapter } from \"@auth/pouchdb-adapter\"\nimport PouchDB from \"pouchdb\"\n\n// Setup your PouchDB instance and database\nPouchDB.plugin(require(\"pouchdb-adapter-leveldb\")) // Or any other adapter\n  .plugin(require(\"pouchdb-find\")) // Don't forget the `pouchdb-find` plugin\n\nconst pouchdb = new PouchDB(\"auth_db\", { adapter: \"leveldb\" })\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [],\n  adapter: PouchDBAdapter(pouchdb),\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Bronze Sponsors in JSX\nDESCRIPTION: This code snippet renders a list of bronze-tier sponsors as linked images with names. It implements a responsive flex layout to display multiple sponsors in a grid-like pattern with proper spacing.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/sponsors.mdx#2025-04-12_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n    [\n      \"https://arcjet.com/?ref=auth.js\",\n      \"https://avatars.githubusercontent.com/u/24397786?s=200&v=4\",\n      \"Arcjet\",\n    ],\n    [\n      \"https://descope.com\",\n      \"https://avatars.githubusercontent.com/u/97479186?s=200&v=4\",\n      \"Descope\",\n    ],\n    [\n      \"https://lowdefy.com\",\n      \"https://avatars.githubusercontent.com/u/47087496?s=200&v=4\",\n      \"Lowdefy\",\n    ],\n    [\n      \"https://prisma.io\",\n      \"https://avatars.githubusercontent.com/u/17219288?s=200&v=4\",\n      \"Prisma\",\n    ],\n    [\n      \"https://vercel.com\",\n      \"https://avatars.githubusercontent.com/u/14985020?s=200&v=4\",\n      \"Vercel\",\n    ],\n    [\n      \"https://route4me.com\",\n      \"https://avatars.githubusercontent.com/u/7936820?v=4\",\n      \"Route4Me\",\n    ],\n    [\n      \"https://badass.dev\",\n      \"https://avatars.githubusercontent.com/u/136839242?v=4\",\n      \"Badass Courses\",\n    ],\n    [\n      \"https://github.com/encoredev/encore\",\n      \"https://avatars.githubusercontent.com/u/50438175?v=4\",\n      \"Encore\",\n    ],\n    [\n      \"https://github.com/neondatabase/neon\",\n      \"https://avatars.githubusercontent.com/u/77690634?v=4\",\n      \"Neon\",\n    ],\n    [\n      \"https://sent.dm\",\n      \"https://avatars.githubusercontent.com/u/153308555?v=4\",\n      \"Sent.dm\",\n    ],\n  ].map(([href, src, name]) => (\n    <a\n      key={name}\n      href={href}\n      target=\"_blank\"\n      className=\"flex flex-col items-center gap-3 text-center font-semibold text-sky-600\"\n    >\n      <img\n        className=\"w-20 rounded-md bg-slate-100 p-2\"\n        src={src}\n        alt={`${name} Logo`}\n      />\n      {name}\n    </a>\n  ))}\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Address Normalization for Resend Provider\nDESCRIPTION: Demonstrates how to implement a custom email address normalization function for the Resend provider, ensuring consistent handling of email addresses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Resend({\n      normalizeIdentifier(identifier: string): string {\n        // Get the first two elements only,\n        // separated by `@` from user input.\n        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n        // The part before \"@\" can contain a \",\"\n        // but we remove it on the domain part\n        domain = domain.split(\",\")[0]\n        return `${local}@${domain}`\n\n        // You can also throw an error, which will redirect the user\n        // to the sign-in page with error=EmailSignin in the URL\n        // if (identifier.split(\"@\").length > 2) {\n        //   throw new Error(\"Only one email allowed\")\n        // }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in Express\nDESCRIPTION: This code snippet shows how to set up the OneLogin provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/onelogin.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport OneLogin from \"@auth/express/providers/onelogin\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [OneLogin] }))\n```\n\n----------------------------------------\n\nTITLE: Upstash Redis Adapter Default Options Configuration\nDESCRIPTION: Default key prefix options for the Upstash Redis adapter when managing multiple applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions = {\n  baseKeyPrefix: \"\",\n  accountKeyPrefix: \"user:account:\",\n  accountByUserIdPrefix: \"user:account:by-user-id:\",\n  emailKeyPrefix: \"user:email:\",\n  sessionKeyPrefix: \"user:session:\",\n  sessionByUserIdKeyPrefix: \"user:session:by-user-id:\",\n  userKeyPrefix: \"user:\",\n  verificationTokenKeyPrefix: \"user:token:\",\n}\n```\n\n----------------------------------------\n\nTITLE: SailPoint Profile Type Definition\nDESCRIPTION: TypeScript interface defining the structure of user profile data returned by SailPoint's userprofile endpoint\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sailpoint.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype SailPointProfile = {\n  tenant: string\n  id: string\n  uid: string\n  email: string\n  phone: string\n  workPhone: string\n  firstname: string\n  lastname: string\n  capabilities: string\n  displayName: string\n  name: string\n}\n```\n\n----------------------------------------\n\nTITLE: Express Notion Auth Configuration\nDESCRIPTION: Implementation of Notion authentication provider in Express.js using Auth.js integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/notion.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Notion from \"@auth/express/providers/notion\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      Notion({\n        clientId: process.env.AUTH_NOTION_ID,\n        clientSecret: process.env.AUTH_NOTION_SECRET,\n        redirectUri: process.env.AUTH_NOTION_REDIRECT_URI,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Hubspot Auth in Next.js\nDESCRIPTION: Configuration code for setting up Hubspot authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/hubspot.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Hubspot from \"next-auth/providers/hubspot\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Hubspot],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Beyond Identity provider in Express\nDESCRIPTION: TypeScript code for implementing Beyond Identity authentication in an Express.js application using the Auth.js Express adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/beyondidentity.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport BeyondIdentity from \"@auth/express/providers/beyondidentity\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [BeyondIdentity],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Express Faceit Auth Configuration\nDESCRIPTION: Implementation of Faceit authentication in an Express application using @auth/express middleware. Sets up authentication routes and provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/faceit.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport FaceIt from \"@auth/express/providers/faceit\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [FaceIt] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing BankID Norway Authentication in Next.js\nDESCRIPTION: Configuration code for integrating BankID Norway authentication provider in a Next.js application using the NextAuth framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bankid-no.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport BankIDNorway from \"next-auth/providers/bankid-no\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [BankIDNorway],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OneLogin Provider\nDESCRIPTION: This snippet lists the required environment variables for OneLogin provider setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/onelogin.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_ONELOGIN_ID\nAUTH_ONELOGIN_SECRET\n```\n\n----------------------------------------\n\nTITLE: HTML Header with Project Links and Badges\nDESCRIPTION: HTML markup for the project header section containing logos, links and npm/GitHub status badges for the Neon adapter package\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-neon/README.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://neon.tech/\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://neon.tech/brand/neon-logo-dark-color.svg\" />\n  </a>\n  <h3 align=\"center\"><b>Neon Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/neon-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/neon-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/neon-adapter?color=green&label=@auth/neon-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/neon-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/neon-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Discord OAuth in Qwik and SvelteKit\nDESCRIPTION: Specifies the callback URL to be used for Discord OAuth authentication in Qwik and SvelteKit frameworks. This URL needs to be configured in the Discord OAuth app settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/discord.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/discord\n```\n\n----------------------------------------\n\nTITLE: Installing Sequelize Adapter and Dependencies\nDESCRIPTION: Command to install the Sequelize adapter and Sequelize ORM using npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/sequelize-adapter sequelize\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL/SQLite Authenticator Table Migration\nDESCRIPTION: SQL migration script to create the Authenticator table for PostgreSQL and SQLite databases\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passkey.mdx#2025-04-12_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n-- CreateTable\nCREATE TABLE \"Authenticator\" (\n    \"id\" TEXT NOT NULL PRIMARY KEY,\n    \"credentialID\" TEXT NOT NULL,\n    \"userId\" TEXT NOT NULL,\n    \"providerAccountId\" TEXT NOT NULL,\n    \"credentialPublicKey\" TEXT NOT NULL,\n    \"counter\" INTEGER NOT NULL,\n    \"credentialDeviceType\" TEXT NOT NULL,\n    \"credentialBackedUp\" BOOLEAN NOT NULL,\n    \"transports\" TEXT,\n    CONSTRAINT \"Authenticator_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\" (\"id\") ON DELETE CASCADE ON UPDATE CASCADE\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Authenticator_credentialID_key\" ON \"Authenticator\"(\"credentialID\");\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Constraints and Indexes for Auth.js\nDESCRIPTION: SQL commands to create essential constraints and indexes in Neo4j for optimizing Auth.js queries. These apply to both Community and Enterprise editions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE CONSTRAINT user_id_constraint IF NOT EXISTS\nON (u:User) ASSERT u.id IS UNIQUE;\n\nCREATE INDEX user_id_index IF NOT EXISTS\nFOR (u:User) ON (u.id);\n\nCREATE INDEX user_email_index IF NOT EXISTS\nFOR (u:User) ON (u.email);\n\nCREATE CONSTRAINT session_session_token_constraint IF NOT EXISTS\nON (s:Session) ASSERT s.sessionToken IS UNIQUE;\n\nCREATE INDEX session_session_token_index IF NOT EXISTS\nFOR (s:Session) ON (s.sessionToken);\n```\n\n----------------------------------------\n\nTITLE: Running D1 Migrations\nDESCRIPTION: Example of how to run D1 migrations to create necessary tables. It uses the 'up' function from the D1 adapter to create tables if they don't exist.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/d1.mdx#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { up } from \"@auth/d1-adapter\"\n\nlet migrated = false\nasync function migrationHandle({ event, resolve }) {\n  if (!migrated) {\n    try {\n      await up(event.platform.env.db)\n      migrated = true\n    } catch (e) {\n      console.log(e.cause.message, e.message)\n    }\n  }\n  return resolve(event)\n}\n```\n\n----------------------------------------\n\nTITLE: Client-side SAML Login Implementation\nDESCRIPTION: Example of implementing client-side SAML login with tenant and product configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/boxyhq-saml.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signIn } from \"next-auth/react\";\n\n// Map your users's email to a tenant and product\nconst tenant = email.split(\"@\")[1];\nconst product = 'my_awesome_product';\n\n<Button\n  onClick={async (event) => {\n    event.preventDefault();\n\n    signIn(\"boxyhq-saml\", {}, { tenant, product });\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Integrating Asgardeo Provider in SvelteKit\nDESCRIPTION: This code example demonstrates the setup of Asgardeo authentication in a SvelteKit application. It uses the SvelteKitAuth function to configure the auth handler with the Asgardeo provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/asgardeo.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Asgardeo from \"@auth/sveltekit/providers/asgardeo\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Asgardeo],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Secret with CLI\nDESCRIPTION: Demonstrates how to use the Auth.js CLI to generate a secure random token for the AUTH_SECRET variable.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec auth secret\n```\n\n----------------------------------------\n\nTITLE: Express.js Descope Provider Integration\nDESCRIPTION: Implementation of Descope authentication provider in Express.js using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/descope.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Descope from \"@auth/express/providers/descope\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Descope] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Dribbble Provider in Next.js\nDESCRIPTION: Demonstrates how to set up the Dribbble authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dribbble.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Dribbble from \"next-auth/providers/dribbble\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Dribbble],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail.ru Auth in Next.js\nDESCRIPTION: Configuration code for integrating Mail.ru authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailru.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport MailRu from \"next-auth/providers/mailru\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [MailRu],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Qwik Integrations Command\nDESCRIPTION: Command for adding additional integrations to a Qwik project using pnpm package manager.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm qwik add # or `pnpm qwik add`\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in Qwik\nDESCRIPTION: Shows the setup for Twitch authentication in a Qwik application using QwikAuth$. This configuration exports onRequest, useSession, useSignIn, and useSignOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitch.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Twitch from \"@auth/qwik/providers/twitch\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Twitch],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dribbble Provider in Qwik\nDESCRIPTION: Shows the setup for the Dribbble authentication provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dribbble.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Dribbble from \"@auth/qwik/providers/dribbble\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Dribbble],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for BankID Norway Authentication\nDESCRIPTION: Examples of callback URL formats for BankID Norway authentication provider across different frameworks. The callback URL is used in the OAuth flow to receive authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bankid-no.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/bankid-no\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/bankid-no\n```\n\n----------------------------------------\n\nTITLE: Setting OAuth Callback URL Example\nDESCRIPTION: Example showing how to configure the callback URL for OAuth providers to use a stable deployment URL for authentication proxying.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/deployment.mdx#2025-04-12_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://auth.yourdomain.com/api/auth/callback/github\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail.ru Auth in Express\nDESCRIPTION: Configuration code for integrating Mail.ru authentication provider in an Express application using @auth/express.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailru.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport MailRu from \"@auth/express/providers/mailru\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [MailRu] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Beyond Identity provider in SvelteKit\nDESCRIPTION: TypeScript code for setting up Beyond Identity as an authentication provider in a SvelteKit application using the Auth.js SvelteKit adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/beyondidentity.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport BeyondIdentity from \"@auth/sveltekit/providers/beyondidentity\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [BeyondIdentity],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring QwikAuth with Sequelize Adapter (Qwik)\nDESCRIPTION: Setup for QwikAuth using the Sequelize adapter in a Qwik application. It initializes Sequelize and configures the adapter for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport SequelizeAdapter from \"@auth/sequelize-adapter\"\nimport { Sequelize } from \"sequelize\"\n\nconst sequelize = new Sequelize(import.meta.env.DATABASE_URL)\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: SequelizeAdapter(sequelize),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Netlify OAuth in Next.js\nDESCRIPTION: Configuration code for setting up Netlify authentication provider in Next.js applications using next-auth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netlify.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Netlify from \"next-auth/providers/netlify\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Netlify],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Xata Adapter and CLI for Auth.js\nDESCRIPTION: Commands to install the Xata adapter for Auth.js, the Xata CLI globally, and authenticate with Xata.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/xata-adapter\n\n# Install the Xata CLI globally if you don't already have it\nnpm install --location=global @xata.io/cli\n\n# Login\nxata auth login\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons in JSX\nDESCRIPTION: This snippet imports necessary components from nextra and custom icons for use in the documentation page.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/security.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout, Steps } from \"nextra/components\"\nimport { ChatCircleText, GitBranch } from \"@/icons\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sentry Observability with Auth.js\nDESCRIPTION: Integration of Sentry user tracking within Auth.js session callback for observability\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/deployment.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from \"@sentry/browser\"\nimport NextAuth from \"next-auth\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  callbacks: {\n    session({ session, user }) {\n      const scope = Sentry.getCurrentScope()\n\n      scope.setUser({\n        id: user.id,\n        email: user.email,\n      })\n\n      return session\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Reddit Authentication\nDESCRIPTION: Examples of callback URLs for Reddit authentication in Next.js, Qwik, and Svelte applications. These URLs need to be configured in the Reddit app console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/reddit.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/reddit\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/reddit\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/reddit\n```\n\n----------------------------------------\n\nTITLE: Configuring EdgeDB Adapter with Qwik\nDESCRIPTION: Qwik implementation of the EdgeDB adapter for authentication, creating a client connection and initializing QwikAuth with the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { EdgeDBAdapter } from \"@auth/edgedb-adapter\"\nimport { createClient } from \"edgedb\"\n\nconst client = createClient({ dsn: import.meta.env.AUTH_EDGEDB_DSN })\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: EdgeDBAdapter(client),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Entra ID Authentication in SvelteKit\nDESCRIPTION: This code sets up Microsoft Entra ID authentication in a SvelteKit application using the SvelteKitAuth function. It configures the Entra provider with the necessary environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/microsoft-entra-id.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Entra from \"@auth/sveltekit/providers/microsoft-entra-id\"\nimport { env } from \"$env/dynamic/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Entra({\n      clientId: env.AUTH_MICROSOFT_ENTRA_ID_ID,\n      clientSecret: env.AUTH_MICROSOFT_ENTRA_ID_SECRET,\n      issuer: process.env.AUTH_MICROSOFT_ENTRA_ID_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Express Keycloak Integration\nDESCRIPTION: Configuration for setting up Keycloak authentication in an Express application using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/keycloak.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Keycloak from \"@auth/express/providers/keycloak\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Keycloak] }))\n```\n\n----------------------------------------\n\nTITLE: Integrating Asgardeo Provider in Qwik\nDESCRIPTION: This snippet shows how to implement Asgardeo authentication in a Qwik application. It uses the QwikAuth$ function to set up authentication with the Asgardeo provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/asgardeo.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Asgardeo from \"@auth/qwik/providers/asgardeo\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Asgardeo],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Battle.net Authentication in Next.js\nDESCRIPTION: Configuration for setting up Battle.net authentication in a Next.js application using the NextAuth library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport BattleNet from \"next-auth/providers/battlenet\";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [BattleNet({\n    clientId: AUTH_BATTLENET_CLIENT_ID\n    clientSecret: AUTH_BATTLENET_CLIENT_SECRET\n    issuer: AUTH_BATTLENET_ISSUER\n  })]\n});\n```\n\n----------------------------------------\n\nTITLE: Express Cognito Integration\nDESCRIPTION: Configuration for setting up Cognito authentication in an Express.js application using @auth/express\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/cognito.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Cognito from \"@auth/express/providers/cognito\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [Cognito],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Supabase Client in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a new Supabase client object with enhanced type safety using types generated by the Supabase CLI.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from \"@supabase/supabase-js\"\nimport { Database } from \"../database.types\"\n\nconst supabase = createClient<Database>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j Adapter with Qwik\nDESCRIPTION: Implementation example for integrating Neo4j adapter with Auth.js in a Qwik application. Sets up Neo4j driver and session for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport neo4j from \"neo4j-driver\"\nimport { Neo4jAdapter } from \"@auth/neo4j-adapter\"\n\nconst driver = neo4j.driver(\n  import.meta.env.NEO4J_URI,\n  neo4j.auth.basic(\n    import.meta.env.NEO4J_USERNAME,\n    import.meta.env.NEO4J_PASSWORD\n  )\n)\n\nconst neo4jSession = driver.session()\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: Neo4jAdapter(neo4jSession),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Linking to Firebase Adapter Documentation in Markdown\nDESCRIPTION: This Markdown snippet provides a link to the official documentation for the Firebase Adapter on the authjs.dev website.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-firebase/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nCheck out the documentation at [authjs.dev](https://authjs.dev/reference/adapter/firebase).\n```\n\n----------------------------------------\n\nTITLE: Express.js Webex Authentication Setup\nDESCRIPTION: Implementation of Webex authentication in an Express.js application using @auth/express. Configures middleware and provider settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/webex.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Webex from \"@auth/express/providers/webex\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Webex] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure DevOps Provider in Qwik\nDESCRIPTION: Code example showing how to configure Azure DevOps authentication provider in a Qwik application using the @auth/qwik library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport AzureDevOps from \"@auth/qwik/providers/azure-devops\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      AzureDevOps({\n        clientId: import.meta.env.AUTH_AZURE_DEVOPS_APP_ID,\n        clientSecret: import.meta.env.AUTH_AZURE_DEVOPS_CLIENT_SECRET,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Osso Provider\nDESCRIPTION: This snippet shows the callback URL format for the Osso provider in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osso.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/osso\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/osso\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/osso\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Osso Provider\nDESCRIPTION: This snippet lists the required environment variables for configuring the Osso provider. These variables include the Osso ID, secret, and issuer.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osso.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_OSSO_ID\nAUTH_OSSO_SECRET\nAUTH_OSSO_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Express Twitter Auth Configuration\nDESCRIPTION: Implementation of Twitter authentication provider in Express.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitter.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Twitter from \"@auth/express/providers/twitter\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Twitter] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j Adapter with Express\nDESCRIPTION: Implementation example for integrating Neo4j adapter with Auth.js in an Express application. Sets up authentication routes with Neo4j as the persistence layer.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport neo4j from \"neo4j-driver\"\nimport { Neo4jAdapter } from \"@auth/neo4j-adapter\"\n\nconst app = express()\n\nconst driver = neo4j.driver(\n  process.env.NEO4J_URI,\n  neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD)\n)\n\nconst neo4jSession = driver.session()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: Neo4jAdapter(neo4jSession),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Webex Authentication Setup\nDESCRIPTION: Configuration for implementing Webex authentication in a SvelteKit application using @auth/sveltekit. Sets up authentication handlers and Webex provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/webex.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Webex from \"@auth/sveltekit/providers/webex\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Webex],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Provider in SvelteKit\nDESCRIPTION: This code snippet illustrates how to set up Instagram as an authentication provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/instagram.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Instagram from \"@auth/sveltekit/providers/instagram\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Instagram],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Auth with Loops Provider in TypeScript\nDESCRIPTION: Shows how to set up SvelteKit Auth with the Loops provider. It includes importing necessary modules, environment variables, and configuring the auth object with the Loops provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/loops.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Loops from \"@auth/sveltekit/providers/loops\"\nimport { AUTH_LOOPS_KEY, AUTH_LOOPS_TRANSACTIONAL_ID } from \"@env/static/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: ..., // database adapter of your choosing\n  providers: [\n    Loops({\n      apiKey: AUTH_LOOPS_KEY,\n      transactionalId: AUTH_LOOPS_TRANSACTIONAL_ID,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Neo4j Adapter and Driver\nDESCRIPTION: Command for installing the Neo4j adapter package and Neo4j driver dependencies using npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/neo4j-adapter neo4j-driver\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Provider in Qwik\nDESCRIPTION: This code snippet shows how to set up Instagram as an authentication provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/instagram.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Instagram from \"@auth/qwik/providers/instagram\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Instagram],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Bungie OAuth\nDESCRIPTION: Example callback URL configurations for different frameworks to handle Bungie OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bungie.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/bungie\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/bungie\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-in Form in Express\nDESCRIPTION: Implementation of a simple HTML sign-in form that submits email and password credentials to the Express Auth.js Credentials provider endpoint.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Sign In</title>\n  </head>\n  <body>\n    <h1>Sign In</h1>\n    <form action=\"/auth/signin\" method=\"POST\">\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" name=\"email\" id=\"email\" required />\n      <br />\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" name=\"password\" id=\"password\" required />\n      <br />\n      <button type=\"submit\">Sign In</button>\n    </form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring TikTok Provider in SvelteKit\nDESCRIPTION: TypeScript code for integrating the TikTok provider in SvelteKit using SvelteKitAuth. This setup exports handle, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/tiktok.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport TikTok from \"@auth/sveltekit/providers/tiktok\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [TikTok],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM Adapter for Auth.js\nDESCRIPTION: Command to install the TypeORM adapter package and its dependency using npm, yarn, or other package managers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/typeorm-adapter typeorm\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Auth in Qwik\nDESCRIPTION: Configuration code for setting up Line authentication in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/line.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Line from \"@auth/qwik/providers/line\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Line],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailchimp Provider in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the Mailchimp authentication provider in a Next.js application using the NextAuth library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailchimp.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport MailChimp from \"next-auth/providers/mailchimp\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [MailChimp],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in SvelteKit\nDESCRIPTION: This code snippet demonstrates how to set up the OneLogin provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/onelogin.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport OneLogin from \"@auth/sveltekit/providers/onelogin\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [OneLogin],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Logto Provider in Express\nDESCRIPTION: Illustrates how to integrate Logto authentication in an Express application using @auth/express. This setup adds Logto-based authentication routes to the Express app.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/logto.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Logto from \"@auth/express/providers/logto\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Logto] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Qwik with Upstash Redis Adapter\nDESCRIPTION: Implementation of QwikAuth with Upstash Redis adapter in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { UpstashRedisAdapter } from \"@auth/upstash-redis-adapter\"\nimport { Redis } from \"@upstash/redis\"\n\nconst redis = new Redis({\n  url: import.meta.env.UPSTASH_REDIS_URL!,\n  token: import.meta.env.UPSTASH_REDIS_TOKEN!,\n})\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: UpstashRedisAdapter(redis),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing solid-start-vercel with yarn\nDESCRIPTION: Command to install the solid-start-vercel adapter using yarn package manager.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/solid-start/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D solid-start-vercel\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Provider in Auth.js (Qwik)\nDESCRIPTION: This snippet shows how to import and configure the SendGrid provider in the Auth.js configuration file for Qwik applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Sendgrid from \"@auth/qwik/providers/sendgrid\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Sendgrid],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik Naver Provider Configuration\nDESCRIPTION: Implementation of Naver OAuth provider in Qwik using @auth/qwik library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/naver.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Naver from \"@auth/qwik/providers/naver\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Naver],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Faceit Callback URLs\nDESCRIPTION: Example callback URL configurations for Faceit OAuth authentication across different frameworks. The callback URL pattern varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/faceit.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/faceit\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/faceit\n```\n\n----------------------------------------\n\nTITLE: Configuring Duende Identity Server Provider in Qwik\nDESCRIPTION: Shows the configuration for Duende Identity Server 6 as an authentication provider in a Qwik application using QwikAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport DuendeIdentityServer6 from \"@auth/qwik/providers/duende-identity-server6\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [DuendeIdentityServer6],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kakao Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of the Kakao provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/kakao.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Kakao from \"@auth/sveltekit/providers/kakao\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Kakao],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Duende Identity Server in NextAuth\nDESCRIPTION: Lists the required environment variables for Duende Identity Server authentication in NextAuth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_DUENDE_IDENTITY_SERVER6_ID\nAUTH_DUENDE_IDENTITY_SERVER6_SECRET\nAUTH_DUENDE_IDENTITY_SERVER6_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Provider - Next.js\nDESCRIPTION: Implementation of Postmark provider configuration in Next.js using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/postmark.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Postmark from \"next-auth/providers/postmark\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    Postmark({\n      // If your environment variable is named differently than default\n      apiKey: AUTH_POSTMARK_KEY,\n      from: \"no-reply@company.com\"\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Drizzle ORM and NextAuth Adapter\nDESCRIPTION: This snippet shows the npm commands to install the required packages for using Drizzle ORM with NextAuth.js. It includes the core Drizzle ORM package, the NextAuth Drizzle adapter, and the Drizzle Kit for development.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install drizzle-orm @auth/drizzle-adapter\nnpm install drizzle-kit --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Dribbble Authentication\nDESCRIPTION: Specifies the callback URL to be used for Dribbble authentication in Next.js, Qwik, and SvelteKit applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dribbble.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/dribbble\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/dribbble\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/dribbble\n```\n\n----------------------------------------\n\nTITLE: Implementing FusionAuth in Express\nDESCRIPTION: Express.js middleware configuration for FusionAuth authentication using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/fusionauth.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport FusionAuth from \"@auth/express/providers/fusionauth\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      FusionAuth({\n        clientId: process.env.AUTH_FUSIONAUTH_ID,\n        clientSecret: process.env.AUTH_FUSIONAUTH_SECRET,\n        tenantId: process.env.AUTH_FUSIONAUTH_TENANT_ID,\n        issuer: process.env.AUTH_FUSIONAUTH_ISSUER,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Preview Build\nDESCRIPTION: Command to create and preview a production build locally using the preview server.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/README.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm preview # or `pnpm preview`\n```\n\n----------------------------------------\n\nTITLE: Configuring Discord Provider in Qwik\nDESCRIPTION: Sets up the Discord provider in Qwik framework. This configuration imports the necessary modules and exports the authentication functions and hooks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/discord.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Discord from \"@auth/qwik/providers/discord\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Discord],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKitAuth with 42School Provider\nDESCRIPTION: Demonstrates how to implement 42School authentication in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/42-school.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport 42School from \"@auth/sveltekit/providers/42-school\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [42School],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing JWT Session Implementation for Dgraph\nDESCRIPTION: Configuration for Auth.js to use HS256 JWT algorithm required by Dgraph. Customizes the encode and decode functions to ensure compatibility with Dgraph's authentication system.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport * as jwt from \"jsonwebtoken\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  session: {\n    strategy: \"jwt\",\n  },\n  jwt: {\n    secret: process.env.SECRET,\n    encode: async ({ secret, token }) => {\n      return jwt.sign({ ...token, userId: token.id }, secret, {\n        algorithm: \"HS256\",\n        expiresIn: 30 * 24 * 60 * 60, // 30 days\n      })\n    },\n    decode: async ({ secret, token }) => {\n      return jwt.verify(token, secret, { algorithms: [\"HS256\"] })\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Adapter with Custom Naming Strategy\nDESCRIPTION: Example showing how to use TypeORM's naming strategies feature to convert camelCase field names to snake_case in the database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { TypeORMAdapter } from \"@auth/typeorm-adapter\"\nimport { SnakeNamingStrategy } from \"typeorm-naming-strategies\"\nimport { ConnectionOptions } from \"typeorm\"\n\nconst connection: ConnectionOptions = {\n  type: \"mysql\",\n  host: \"localhost\",\n  port: 3306,\n  username: \"test\",\n  password: \"test\",\n  database: \"test\",\n  namingStrategy: new SnakeNamingStrategy(),\n}\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: TypeORMAdapter(connection),\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Zoho Authentication Setup\nDESCRIPTION: Configuration for implementing Zoho authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoho.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Zoho from \"next-auth/providers/zoho\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Zoho],\n})\n```\n\n----------------------------------------\n\nTITLE: Express WordPress Authentication Setup\nDESCRIPTION: Configuration for integrating WordPress OAuth provider in Express.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wordpress.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport WordPress from \"@auth/express/providers/wordpress\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [WordPress] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Demo Duende Identity Server in NextAuth\nDESCRIPTION: Provides a configuration example for the Duende Identity Server demo at https://demo.duendesoftware.com/. It includes the client ID, secret, and issuer URL for testing purposes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport DuendeIDS6Provider from \"next-auth/providers/duende-identity-server6\"\nproviders: [\n  DuendeIDS6Provider({\n    clientId: \"interactive.confidential\",\n    clientSecret: \"secret\",\n    issuer: \"https://demo.duendesoftware.com\",\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up Mastodon Provider in SvelteKit\nDESCRIPTION: Configuration for implementing Mastodon authentication in a SvelteKit application using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mastodon.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Mastodon from \"@auth/sveltekit/providers/mastodon\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Mastodon],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Provider in SvelteKit\nDESCRIPTION: Illustrates the setup of the Yandex provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Yandex from \"@auth/sveltekit/providers/yandex\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Yandex],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Netlify OAuth in Express\nDESCRIPTION: Configuration code for setting up Netlify authentication provider in Express applications using @auth/express.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netlify.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Netlify from \"@auth/express/providers/netlify\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Netlify] }))\n```\n\n----------------------------------------\n\nTITLE: Installing Nodemailer Dependency\nDESCRIPTION: Command to install the nodemailer package, which is required for the Nodemailer provider but not included in Auth.js by default.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nodemailer.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install nodemailer\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Logto Authentication\nDESCRIPTION: Specifies the callback URL format for Logto authentication in Next.js and SvelteKit applications. This URL is essential for the OAuth flow.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/logto.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/logto\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/logto\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Normalization in Auth.js with ForwardEmail Provider\nDESCRIPTION: This code snippet shows how to implement custom email normalization in Auth.js using the ForwardEmail provider. It demonstrates the default behavior of converting the email to lowercase, trimming whitespace, and handling multiple email addresses by selecting only the first one.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/forwardemail.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport ForwardEmail from \"next-auth/providers/forwardemail\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    ForwardEmail({\n      normalizeIdentifier(identifier: string): string {\n        // Get the first two elements only,\n        // separated by `@` from user input.\n        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n        // The part before \"@\" can contain a \",\"\n        // but we remove it on the domain part\n        domain = domain.split(\",\")[0]\n        return `${local}@${domain}`\n\n        // You can also throw an error, which will redirect the user\n        // to the sign-in page with error=EmailSignin in the URL\n        // if (identifier.split(\"@\").length > 2) {\n        //   throw new Error(\"Only one email allowed\")\n        // }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Authentication in Next.js\nDESCRIPTION: Code for setting up Box authentication provider in a Next.js application. This configures NextAuth with the Box provider for user authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/box.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Box from \"next-auth/providers/box\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Box],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Kakao Provider in Qwik\nDESCRIPTION: Shows the setup for the Kakao provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/kakao.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Kakao from \"@auth/qwik/providers/kakao\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Kakao],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Duende Identity Server Provider in Express\nDESCRIPTION: Demonstrates the configuration for Duende Identity Server 6 as an authentication provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport DuendeIdentityServer6 from \"@auth/express/providers/duende-identity-server6\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [DuendeIdentityServer6] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of the Resend provider in a SvelteKit application using Auth.js, including environment variable import and 'from' email address.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Resend from \"@auth/sveltekit/providers/resend\"\nimport { env } from \"$env/dynamic/prviate\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: ...,\n  providers: [\n    Resend({\n      // If your environment variable is named differently than default\n      apiKey: env.AUTH_RESEND_KEY,\n      from: \"no-reply@company.com\",\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for TikTok Authentication\nDESCRIPTION: Examples of callback URLs for TikTok authentication in Next.js, Qwik, and Svelte frameworks. These URLs need to be configured in the TikTok app console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/tiktok.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/tiktok\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/tiktok\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/tiktok\n```\n\n----------------------------------------\n\nTITLE: Configuring Mattermost Callback URLs\nDESCRIPTION: Framework-specific callback URL patterns for Mattermost OAuth authentication. These URLs need to be registered in your Mattermost OAuth application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mattermost.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/mattermost\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/mattermost\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/mattermost\n```\n\n----------------------------------------\n\nTITLE: Configuring Spotify Provider in SvelteKit\nDESCRIPTION: This snippet demonstrates how to set up the Spotify provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/spotify.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Spotify from \"@auth/sveltekit/providers/spotify\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Spotify],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta Provider in SvelteKit\nDESCRIPTION: Configuration for setting up Okta authentication in a SvelteKit application using @auth/sveltekit package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/okta.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Okta from \"@auth/sveltekit/providers/okta\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Okta],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Fauna Adapter and Dependencies\nDESCRIPTION: Command to install the Fauna adapter and Fauna client library using npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/fauna-adapter fauna\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage Adapter in SvelteKit\nDESCRIPTION: This example demonstrates the setup of the Unstorage adapter in a SvelteKit application using SvelteKitAuth. It initializes the storage and configures the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { UnstorageAdapter } from \"@auth/unstorage-adapter\"\nimport { createStorage } from \"unstorage\"\n\nconst storage = createStorage()\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  adapter: UnstorageAdapter(storage),\n  providers: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Vipps MobilePay Provider in Next.js\nDESCRIPTION: Sets up the Vipps MobilePay provider in a Next.js application using NextAuth. It exports handlers, auth, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vipps-mobilepay.mdx#2025-04-12_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Vipps from \"next-auth/providers/vipps\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Vipps],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Provider in SvelteKit\nDESCRIPTION: Configuration for setting up Zoom OAuth provider in a SvelteKit application using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoom.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Zoom from \"@auth/sveltekit/providers/zoom\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Zoom],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Provider in Qwik\nDESCRIPTION: Shows the configuration of Google OAuth provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Google from \"@auth/qwik/providers/google\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Google],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Todoist Provider in Qwik\nDESCRIPTION: Code snippet for setting up Todoist as an authentication provider in a Qwik application using QwikAuth$. This configuration goes in the plugin@auth.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/todoist.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Todoist from \"@auth/qwik/providers/todoist\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Todoist],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Provider in Auth.js (SvelteKit)\nDESCRIPTION: This snippet demonstrates how to import and configure the SendGrid provider in the Auth.js configuration file for SvelteKit applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Sendgrid from \"@auth/sveltekit/providers/sendgrid\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Sendgrid],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Postmark Provider in SvelteKit\nDESCRIPTION: Configuration for using the Postmark provider in SvelteKit. Imports Postmark from the Auth.js SvelteKit package and sets it up in the providers array.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Postmark from \"@auth/sveltekit/providers/postmark\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Postmark],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Identity Server Provider\nDESCRIPTION: Specifies the callback URL format for the Identity Server Provider across different frameworks (Next.js, Qwik, and Svelte).\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/identity-server4.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/identity-server4\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/identity-server4\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/identity-server4\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Verification Request in Nodemailer Provider\nDESCRIPTION: Example of how to customize the email verification request by providing a custom sendVerificationRequest function to the Nodemailer provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nodemailer.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Nodemailer from \"next-auth/providers/nodemailer\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Nodemailer({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n      sendVerificationRequest({\n        identifier: email,\n        url,\n        provider: { server, from },\n      }) {\n        // your function\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinterest Provider in Express\nDESCRIPTION: Shows how to integrate the Pinterest provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pinterest.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Pinterest from \"@auth/express/providers/pinterest\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Pinterest] }))\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Freshbooks Authentication Setup\nDESCRIPTION: Configuration for implementing Freshbooks authentication in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/freshbooks.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport FreshBooks from \"@auth/sveltekit/providers/freshbooks\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [FreshBooks],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Provider in Express\nDESCRIPTION: Configuration for setting up Zoom OAuth provider in an Express application using @auth/express.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoom.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Zoom from \"@auth/express/providers/zoom\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Zoom] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Callback URLs\nDESCRIPTION: Framework-specific callback URL patterns for Okta OAuth authentication. These URLs need to be configured in your Okta application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/okta.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/okta\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/okta\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth and D1 Adapter\nDESCRIPTION: Command to install NextAuth and the Cloudflare D1 Adapter using npm.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/d1.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth @auth/d1-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring Osu Provider in Next.js\nDESCRIPTION: This snippet demonstrates how to set up the Osu authentication provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osu.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Osu from \"next-auth/providers/osu\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Osu],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Twitch Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of Twitch authentication in a SvelteKit application using SvelteKitAuth. This setup exports handle, signIn, and signOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitch.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Twitch from \"@auth/sveltekit/providers/twitch\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Twitch],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Nextcloud Authentication in Express\nDESCRIPTION: Demonstrates how to set up Nextcloud authentication in an Express application using @auth/express. It configures the provider with the necessary environment variables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nextcloud.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Nextcloud from \"@auth/express/providers/nextcloud\"\n\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [\n      Nextcloud({\n        clientId: AUTH_NEXTCLOUD_ID,\n        clientSecret: AUTH_NEXTCLOUD_SECRET,\n        issuer: AUTH_NEXTCLOUD_ISSUER,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Verification Request Implementation\nDESCRIPTION: Example of customizing the email verification request handling in Auth.js with Sendgrid.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function sendVerificationRequest(params) {\n  const { identifier: to, provider, url, theme } = params\n  const { host } = new URL(url)\n  const res = await fetch(\"https://api.sendgrid.com/v3/mail/send\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${provider.apiKey}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      personalizations: [{ to: [{ email: to }] }],\n      from: { email: provider.from },\n      subject: `Sign in to ${host}`,\n      content: [\n        { type: \"text/plain\", value: text({ url, host }) },\n        { type: \"text/html\", value: html({ url, host, theme }) },\n      ],\n    }),\n  })\n\n  if (!res.ok) throw new Error(\"Sendgrid error: \" + (await res.text()))\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js VK Provider Setup\nDESCRIPTION: Configuration for implementing VK authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vk.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Vk from \"next-auth/providers/vk\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Vk],\n})\n```\n\n----------------------------------------\n\nTITLE: Express Wikimedia Auth Configuration\nDESCRIPTION: Implementation of Wikimedia authentication in Express.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wikimedia.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Wikimedia from \"@auth/express/providers/wikimedia\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Wikimedia] }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure AD Provider in Qwik\nDESCRIPTION: Shows the configuration for using the Azure AD provider in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport AzureAd from \"@auth/qwik/providers/azure-ad\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [AzureAd],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail.ru Auth in Qwik\nDESCRIPTION: Configuration code for integrating Mail.ru authentication provider in a Qwik application using @auth/qwik.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailru.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport MailRu from \"@auth/qwik/providers/mailru\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [MailRu],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Todoist Provider in SvelteKit\nDESCRIPTION: Code snippet for setting up Todoist as an authentication provider in a SvelteKit application using SvelteKitAuth. This configuration goes in the auth.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/todoist.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Todoist from \"@auth/sveltekit/providers/todoist\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Todoist],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Loops Provider in Next.js\nDESCRIPTION: Configuration for implementing Loops authentication provider in Next.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Loops from \"next-auth/providers/loops\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Loops({\n      apiKey: process.env.AUTH_LOOPS_KEY,\n      transactionalId: process.env.AUTH_LOOPS_TRANSACTIONAL_ID,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Verification Token Generation\nDESCRIPTION: Example of implementing custom verification token generation for Mailgun provider using crypto.randomUUID().\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailgun.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Mailgun from \"next-auth/providers/mailgun\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Mailgun({\n      async generateVerificationToken() {\n        return crypto.randomUUID()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js Bungie Provider Configuration\nDESCRIPTION: Implementation of Bungie authentication provider in Next.js using NextAuth. Requires clientId, clientSecret, and API Key configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bungie.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\";\nimport Bungie from \"next-auth/providers/boxyhq-saml\";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Bungie({\n      clientId: AUTH_BUNGIE_ID\n      clientSecret: AUTH_BUNGIE_SECRET\n      headers: { \"X-API-Key\": AUTH_BUNGIE_API_KEY }\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Qwik Notion Auth Configuration\nDESCRIPTION: Implementation of Notion authentication provider in Qwik using Auth.js integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/notion.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Notion from \"@auth/qwik/providers/notion\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Notion({\n        clientId: import.meta.env.AUTH_NOTION_ID,\n        clientSecret: import.meta.env.AUTH_NOTION_SECRET,\n        redirectUri: import.meta.env.AUTH_NOTION_REDIRECT_URI,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing FusionAuth in Next.js\nDESCRIPTION: Next.js configuration for FusionAuth provider setup using next-auth package. Exports authentication handlers and utilities.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/fusionauth.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport FusionAuth from \"next-auth/providers/fusionauth\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    FusionAuth({\n      clientId: process.env.AUTH_FUSIONAUTH_ID,\n      clientSecret: process.env.AUTH_FUSIONAUTH_SECRET,\n      tenantId: process.env.AUTH_FUSIONAUTH_TENANT_ID,\n      issuer: process.env.AUTH_FUSIONAUTH_ISSUER,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring SendGrid Provider in Auth.js (Next.js)\nDESCRIPTION: This snippet demonstrates how to import and configure the SendGrid provider in the Auth.js configuration file for Next.js applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Sendgrid from \"next-auth/providers/sendgrid\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Sendgrid],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Patreon Callback URLs\nDESCRIPTION: Callback URL patterns for different frameworks to handle Patreon OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/patreon.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/patreon\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/patreon\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables for Keycloak authentication testing\nDESCRIPTION: Defines environment variables for Keycloak test credentials that will be used in E2E tests. These credentials should belong to a test user who can authenticate against a Keycloak instance.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/testing.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTEST_KEYCLOAK_USERNAME=abc\nTEST_KEYCLOAK_PASSWORD=123\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Normalization with NextAuth.js and Sendgrid Provider\nDESCRIPTION: Example showing how to implement email address normalization in NextAuth.js using the Sendgrid provider. The code demonstrates the default normalization behavior which converts emails to lowercase, trims whitespace, and handles comma-separated email lists by selecting only the first address.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Sendgrid from \"next-auth/providers/sendgrid\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Sendgrid({\n      normalizeIdentifier(identifier: string): string {\n        // Get the first two elements only,\n        // separated by `@` from user input.\n        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n        // The part before \"@\" can contain a \",\"\n        // but we remove it on the domain part\n        domain = domain.split(\",\")[0]\n        return `${local}@${domain}`\n\n        // You can also throw an error, which will redirect the user\n        // to the sign-in page with error=EmailSignin in the URL\n        // if (identifier.split(\"@\").length > 2) {\n        //   throw new Error(\"Only one email allowed\")\n        // }\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of Facebook authentication in a SvelteKit application using SvelteKitAuth. It sets up the necessary handlers and functions for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/facebook.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Facebook from \"@auth/sveltekit/providers/facebook\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Facebook],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Logto Provider in SvelteKit\nDESCRIPTION: Shows the setup for Logto authentication in a SvelteKit application using @auth/sveltekit. This configuration enables Logto-based authentication features in the SvelteKit app.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/logto.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Logto from \"@auth/sveltekit/providers/logto\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Logto],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Adapter in Express\nDESCRIPTION: Implementation of PostgreSQL adapter in Express.js application with proper connection pool configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport PostgresAdapter from \"@auth/pg-adapter\"\nimport { Pool } from \"pg\"\n\nconst pool = new Pool({\n  host: process.env.DATABASE_HOST,\n  user: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n})\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: PostgresAdapter(pool),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Forward Email Provider in Auth.js (Next.js)\nDESCRIPTION: Sets up the Forward Email provider in the Auth.js configuration for a Next.js application. This code imports the necessary modules and adds Forward Email to the list of providers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport ForwardEmail from \"next-auth/providers/forwardemail\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [ForwardEmail],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Pipedrive Auth in Qwik\nDESCRIPTION: Configuration code for setting up Pipedrive authentication in a Qwik application using QwikAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pipedrive.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport PipeDrive from \"@auth/qwik/providers/pipedrive\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [PipeDrive],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Express Threads Provider Configuration\nDESCRIPTION: Implementation of Threads authentication provider in Express.js using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/threads.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Threads from \"@auth/express/providers/threads\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Threads] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Duende Identity Server Provider in SvelteKit\nDESCRIPTION: Illustrates the setup for Duende Identity Server 6 as an authentication provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/duende-identity-server6.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport DuendeIdentityServer6 from \"@auth/sveltekit/providers/duende-identity-server6\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [DuendeIdentityServer6],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PouchDB Adapter with Qwik Authentication\nDESCRIPTION: Integration of PouchDB adapter with Qwik authentication framework using LevelDB storage\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pouchdb.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { PouchDBAdapter } from \"@auth/pouchdb-adapter\"\nimport PouchDB from \"pouchdb\"\n\n// Setup your PouchDB instance and database\nPouchDB.plugin(require(\"pouchdb-adapter-leveldb\")) // Or any other adapter\n  .plugin(require(\"pouchdb-find\")) // Don't forget the `pouchdb-find` plugin\n\nconst pouchdb = new PouchDB(\"auth_db\", { adapter: \"leveldb\" })\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: PouchDBAdapter(pouchdb),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Provider in Qwik\nDESCRIPTION: Configuration for setting up Zoom OAuth provider in a Qwik application using @auth/qwik.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoom.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Zoom from \"@auth/qwik/providers/zoom\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Zoom],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for SendGrid (Next.js Server Component)\nDESCRIPTION: This code snippet shows how to create a sign-in button component using SendGrid provider in a Next.js server component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { signIn } from \"../../auth.ts\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async (formData) => {\n        \"use server\"\n        await signIn(\"sendgrid\", formData)\n      }}\n    >\n      <input type=\"text\" name=\"email\" placeholder=\"Email\" />\n      <button type=\"submit\">Signin with Sendgrid</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Session Type in Qwik Auth Configuration\nDESCRIPTION: Demonstrates session interface extension for Qwik framework using TypeScript module augmentation to add custom user properties while maintaining default functionality.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/typescript.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultSession, QwikAuth$ } from \"@auth/qwik\"\n\ndeclare module \"@auth/qwik\" {\n  interface Session {\n    user: {\n      /** The user's postal address. */\n      address: string\n    } & DefaultSession[\"user\"]\n  }\n}\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    callbacks: {\n      session({ session, token, user }) {\n        return {\n          ...session,\n          user: {\n            ...session.user,\n            address: user.address,\n          },\n        }\n      },\n    },\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium Provider in Qwik\nDESCRIPTION: Code snippet for integrating Medium as an authentication provider in Qwik using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/medium.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Medium from \"@auth/qwik/providers/medium\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Medium],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Neo4j Adapter with SvelteKit\nDESCRIPTION: Implementation example for integrating Neo4j adapter with Auth.js in a SvelteKit application. Establishes Neo4j connection and configures the authentication handler.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport neo4j from \"neo4j-driver\"\nimport { Neo4jAdapter } from \"@auth/neo4j-adapter\"\n\nconst driver = neo4j.driver(\n  process.env.NEO4J_URI,\n  neo4j.auth.basic(process.env.NEO4J_USERNAME, process.env.NEO4J_PASSWORD)\n)\n\nconst neo4jSession = driver.session()\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: Neo4jAdapter(neo4jSession),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider in Auth.js (Qwik)\nDESCRIPTION: This snippet demonstrates how to import and configure the Resend provider in the Auth.js configuration file for Qwik applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Resend from \"@auth/qwik/providers/resend\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Resend],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js for Qwik\nDESCRIPTION: Command to add Auth.js to a Qwik project using the Qwik CLI.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run qwik add auth\n```\n\n----------------------------------------\n\nTITLE: Setting EdgeDB DSN Environment Variable\nDESCRIPTION: Environment variable setting for the EdgeDB Data Source Name (DSN) in a .env file, which provides the connection details for the EdgeDB instance.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_15\n\nLANGUAGE: env\nCODE:\n```\nAUTH_EDGEDB_DSN=edgedb://johndoe:supersecure@myhost.com:420\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Loops Authentication\nDESCRIPTION: Environment variable setup for Loops authentication provider, including API key and transactional ID configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_LOOPS_KEY=abc123\nAUTH_LOOPS_TRANSACTIONAL_ID=def456\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Collection Names for Fauna Adapter\nDESCRIPTION: JavaScript code showing how to use custom collection names when initializing the Fauna adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFaunaAdapter(client, {\n  collectionNames: {\n    user: \"CustomUser\",\n    account: \"CustomAccount\",\n    session: \"CustomSession\",\n    verificationToken: \"CustomVerificationToken\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Mail.ru Auth in SvelteKit\nDESCRIPTION: Configuration code for integrating Mail.ru authentication provider in a SvelteKit application using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailru.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport MailRu from \"@auth/sveltekit/providers/mailru\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [MailRu],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Yandex Provider in Express\nDESCRIPTION: Demonstrates how to set up the Yandex provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Yandex from \"@auth/express/providers/yandex\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Yandex] }))\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Medium OAuth\nDESCRIPTION: Examples of callback URLs for Medium OAuth integration in Next.js, Qwik, and SvelteKit frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/medium.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/medium\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/medium\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/medium\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitbucket Auth in Qwik\nDESCRIPTION: Configuration code for setting up Bitbucket authentication in a Qwik application using QwikAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bitbucket.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Bitbucket from \"@auth/qwik/providers/bitbucket\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Bitbucket],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Patreon Provider in Qwik\nDESCRIPTION: Configuration code for setting up Patreon authentication in Qwik using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/patreon.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Patreon from \"@auth/qwik/providers/patreon\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Patreon],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client using RPC\nDESCRIPTION: TypeScript code to initialize a SurrealDB client using RPC connection. It sets up the connection with provided environment variables and exports a promise-based client.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Surreal } from \"surrealdb.js\"\n\nconst connectionString = process.env.AUTH_SURREALDB_CONNECTION\nconst username = process.env.AUTH_SURREALDB_USERNAME\nconst password = process.env.AUTH_SURREALDB_PASSWORD\nconst namespace = process.env.AUTH_SURREALDB_NAMESPACE\nconst database = process.env.AUTH_SURREALDB_DATABASE\nif (!connectionString || !username || !password || !namespace || !database) {\n  throw new Error(\n    \"SurrealDB connection string, username, password, namespace, and database are required\"\n  )\n}\n\nconst clientPromise = new Promise<Surreal>(async (resolve, reject) => {\n  const db = new Surreal()\n  try {\n    await db.connect(`${connectionString}/rpc`, {\n      namespace,\n      database,\n      auth: {\n        username,\n        password,\n      },\n    })\n    resolve(db)\n  } catch (e) {\n    reject(e)\n  }\n})\n\n// Export a module-scoped Promise<Surreal>. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks to handle Line authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/line.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/line\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/line\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailchimp Provider in SvelteKit\nDESCRIPTION: This snippet illustrates the setup of the Mailchimp authentication provider in a SvelteKit application using the @auth/sveltekit library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailchimp.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport MailChimp from \"@auth/sveltekit/providers/mailchimp\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [MailChimp],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Resend (Qwik)\nDESCRIPTION: This code snippet demonstrates how to create a sign-in button component using Resend provider in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <button\n      onClick$={() => signInSig.submit({ redirectTo: \"/\" })}\n    >\n      SignIn\n    </button>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering OAuth Providers List in Auth.js Documentation\nDESCRIPTION: This JSX code dynamically renders a list of supported OAuth providers from the manifest data. Each provider is displayed as a link with an icon and name, using the ListDisclosure component to show a limited number initially.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/index.mdx#2025-04-12_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ListDisclosure limit={8}>\n  {Object.entries(manifest.providersOAuth).map(([id, name]) => (\n    <Link\n      href={`/getting-started/providers/${id}`}\n      key={name}\n      className=\"flex h-32 w-36 flex-col items-center justify-between rounded-lg border border-solid border-neutral-200 p-4 !no-underline shadow-sm transition-colors duration-300 hover:bg-neutral-50 dark:border-neutral-800 dark:hover:bg-neutral-950\"\n    >\n      <img src={`/img/providers/${id}.svg`} className=\"mt-2 w-11\" />\n      <div className=\"text-center text-sm\">{name}</div>\n    </Link>\n  ))}\n</ListDisclosure>\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Adapter in Qwik\nDESCRIPTION: This snippet shows how to configure the Supabase adapter in a Qwik application using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { SupabaseAdapter } from \"@auth/supabase-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: SupabaseAdapter({\n      url: import.meta.env.SUPABASE_URL,\n      secret: import.meta.env.SUPABASE_SERVICE_ROLE_KEY,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik VK Provider Setup\nDESCRIPTION: Configuration for implementing VK authentication in a Qwik application using @auth/qwik.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vk.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Vk from \"@auth/qwik/providers/vk\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Vk],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Single-Property Indexes for Community Edition\nDESCRIPTION: SQL commands to create single-property indexes specifically for Neo4j Community Edition to optimize Auth.js queries for accounts and verification tokens.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX account_provider_index IF NOT EXISTS\nFOR (a:Account) ON (a.provider);\n\nCREATE INDEX account_provider_account_id_index IF NOT EXISTS\nFOR (a:Account) ON (a.providerAccountId);\n\nCREATE INDEX verification_token_identifier_index IF NOT EXISTS\nFOR (v:VerificationToken) ON (v.identifier);\n\nCREATE INDEX verification_token_token_index IF NOT EXISTS\nFOR (v:VerificationToken) ON (v.token);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for SendGrid (Next.js Client Component)\nDESCRIPTION: This code snippet demonstrates how to create a sign-in button component using SendGrid provider in a Next.js client component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { signIn } from \"next-auth/react\"\n\nexport function SignIn() {\n  const sendgridAction = (formData: FormData) => {\n    signIn(\"sendgrid\", formData)\n  }\n\n  return (\n    <form action={sendgridAction}>\n      <label htmlFor=\"email-sendgrid\">\n        Email\n        <input type=\"email\" id=\"email-sendgrid\" name=\"email\" />\n      </label>\n      <input type=\"submit\" value=\"Signin with Sendgrid\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OAuthProviderSelect Component in Markdown\nDESCRIPTION: This snippet imports a React component called OAuthProviderSelect, which is likely used to display a selection interface for OAuth providers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/oauth.mdx#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport { OAuthProviderSelect } from \"@/components/OAuthProviderInstructions\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Slack Authentication\nDESCRIPTION: These code snippets show the callback URL format for Slack authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/slack.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/slack\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/slack\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/slack\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure AD Provider in SvelteKit\nDESCRIPTION: Illustrates how to set up the Azure AD provider in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport AzureAd from \"@auth/sveltekit/providers/azure-ad\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [AzureAd],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Dribbble Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of the Dribbble authentication provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dribbble.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Dribbble from \"@auth/sveltekit/providers/dribbble\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Dribbble],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinterest Provider in Qwik\nDESCRIPTION: Shows the configuration for the Pinterest provider in a Qwik application using QwikAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pinterest.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Pinterest from \"@auth/qwik/providers/pinterest\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Pinterest],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring QwikAuth with D1 Adapter (Qwik)\nDESCRIPTION: Configuration for QwikAuth using the D1 Adapter in a Qwik application. It sets up authentication functions and adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/d1.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { D1Adapter } from \"@auth/d1-adapter\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: D1Adapter(env.db),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider in Qwik\nDESCRIPTION: Code snippet for setting up Reddit as an authentication provider in a Qwik application using QwikAuth$.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/reddit.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Reddit from \"@auth/qwik/providers/reddit\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Reddit],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik Threads Provider Configuration\nDESCRIPTION: Implementation of Threads authentication provider in Qwik framework using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/threads.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Threads from \"@auth/qwik/providers/threads\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Threads],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure AD in .env.local\nDESCRIPTION: Specifies the environment variables to be set in the .env.local file for Azure AD authentication, including client ID, client secret, and tenant ID.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_AZURE_AD_CLIENT_ID=<copy Application (client) ID here>\nAUTH_AZURE_AD_CLIENT_SECRET=<copy generated client secret value here>\nAUTH_AZURE_AD_TENANT_ID=<copy the tenant id here>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom OAuth Provider Environment Variables\nDESCRIPTION: Shows how to use custom environment variable names for OAuth provider credentials instead of following the standard naming convention.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Google\nAUTH_WEBAPP_GOOGLE_CLIENT_ID=123\nAUTH_WEBAPP_GOOGLE_CLIENT_SECRET=123\n```\n\n----------------------------------------\n\nTITLE: Configuring Resend Provider in Auth.js (Next.js)\nDESCRIPTION: This snippet shows how to import and configure the Resend provider in the Auth.js configuration file for Next.js applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Resend from \"next-auth/providers/resend\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Resend],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Azure Tables Authentication Setup\nDESCRIPTION: Implementation of Azure Table Storage adapter in Qwik framework with authentication configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/azure-tables.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { TableStorageAdapter } from \"@auth/azure-tables-adapter\"\nimport { AzureNamedKeyCredential, TableClient } from \"@azure/data-tables\"\n\nconst credential = new AzureNamedKeyCredential(\n  import.meta.env.AUTH_AZURE_ACCOUNT,\n  import.meta.env.AUTH_AZURE_ACCESS_KEY\n)\nconst authClient = new TableClient(\n  import.meta.env.AUTH_AZURE_TABLES_ENDPOINT,\n  \"auth\",\n  credential\n)\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: TableStorageAdapter(authClient),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik WordPress Authentication Setup\nDESCRIPTION: Configuration for integrating WordPress OAuth provider in Qwik framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wordpress.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport WordPress from \"@auth/qwik/providers/wordpress\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [WordPress],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Identity Server Provider in Express\nDESCRIPTION: Demonstrates how to integrate the Identity Server Provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/identity-server4.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport IdentityServer4 from \"@auth/express/providers/identity-server4\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [IdentityServer4] }))\n```\n\n----------------------------------------\n\nTITLE: Mailgun Provider Configuration in Next.js\nDESCRIPTION: Implementation of Mailgun provider configuration in Next.js authentication setup with custom API key.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailgun.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Mailgun from \"next-auth/providers/mailgun\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: ...,\n  providers: [\n    Mailgun({\n      // If your environment variable is named differently than default\n      apiKey: import.meta.env.AUTH_MAILGUN_KEY,\n      from: \"no-reply@company.com\"\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Screenshot Component to Display Sign-in Page\nDESCRIPTION: JSX code that imports a screenshot image and renders it using the Screenshot component to visually demonstrate the Auth.js sign-in page.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/built-in-pages.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport SignInPage from \"../../../public/img/tutorials/sign-in-page.webp\"\n\n<Screenshot src={SignInPage} alt=\"Sign-in Page\" />\n```\n\n----------------------------------------\n\nTITLE: Sign-in Component Implementation for Next.js\nDESCRIPTION: React component implementation for Loops authentication sign-in form in Next.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signIn } from \"../../auth.ts\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async (formData) => {\n        \"use server\"\n        await signIn(\"loops\", formData)\n      }}\n    >\n      <input type=\"text\" name=\"email\" placeholder=\"Email\" />\n      <button type=\"submit\">Sign in with Loops</button>\n    </form>\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Callback URL for Qwik and Svelte\nDESCRIPTION: Sets up the callback URL for Auth0 authentication in Qwik and Svelte applications. This URL is where Auth0 will redirect after authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/auth0\n```\n\n----------------------------------------\n\nTITLE: Configuring Kakao Provider in Express\nDESCRIPTION: Demonstrates how to set up the Kakao provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/kakao.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Kakao from \"@auth/express/providers/kakao\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Kakao] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Mail.ru OAuth\nDESCRIPTION: Framework-specific callback URL patterns for Mail.ru OAuth authentication. These URLs need to be configured in the Mail.ru OAuth application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailru.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/mailru\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/mailru\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Google OAuth in Qwik and Svelte\nDESCRIPTION: Specifies the callback URL for Google OAuth integration in Qwik and Svelte applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/google.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/google\n```\n\n----------------------------------------\n\nTITLE: Configuring Osso Provider in Qwik\nDESCRIPTION: This snippet shows how to configure the Osso provider in a Qwik application using the QwikAuth$ function. It exports authentication-related functions and hooks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osso.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Osso from \"@auth/qwik/providers/osso\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Osso],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik Bungie Provider Configuration\nDESCRIPTION: Implementation of Bungie authentication provider in Qwik framework. Uses environment variables for secure configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bungie.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Bungie from \"@auth/qwik/providers/boxyhq-saml\";\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Bungie({\n        clientId: import.meta.env.AUTH_BUNGIE_ID\n        clientSecret: import.meta.env.AUTH_BUNGIE_SECRET\n        headers: { \"X-API-Key\": import.meta.env.AUTH_BUNGIE_API_KEY }\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Asgardeo Authentication\nDESCRIPTION: This snippet lists the required environment variables for Asgardeo authentication. These variables include the Asgardeo ID, secret, and issuer.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/asgardeo.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_ASGARDEO_ID\nAUTH_ASGARDEO_SECRET\nAUTH_ASGARDEO_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Microsoft Entra ID Authentication\nDESCRIPTION: These snippets show the callback URL format for Microsoft Entra ID authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/microsoft-entra-id.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/microsoft-entra-id\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/microsoft-entra-id\n```\n\n----------------------------------------\n\nTITLE: Setting Up Postmark Environment Variables\nDESCRIPTION: Environment variable configuration for the Postmark email provider. Requires API key for authentication with the Postmark service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_POSTMARK_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Using an existing Firestore instance with Auth.js\nDESCRIPTION: How to use an existing Firestore instance with the Firebase Adapter for Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/firebase.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { FirestoreAdapter } from \"@auth/firebase-adapter\"\nimport { firestore } from \"lib/firestore\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: FirestoreAdapter(firestore),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB URI Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the MongoDB URI as an environment variable, which is required for connecting to the MongoDB database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mongodb.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nMONGODB_URI=\n```\n\n----------------------------------------\n\nTITLE: Configuring OneLogin Provider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up the OneLogin provider in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/onelogin.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport OneLogin from \"next-auth/providers/onelogin\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [OneLogin],\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Zitadel Provider in Qwik\nDESCRIPTION: This snippet shows how to set up the Zitadel provider in a Qwik application using QwikAuth$. It configures the authentication plugin with the Zitadel provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zitadel.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Zitadel from \"@auth/qwik/providers/zitadel\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Zitadel],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify OAuth Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks. The URL pattern varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netlify.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/netlify\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/netlify\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Sign-In Page in Next.js with Auth.js\nDESCRIPTION: This snippet shows how to set up a custom sign-in page in Next.js using Auth.js. It defines a configuration object with providers and a custom sign-in page path, then exports authentication functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/custom-pages.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextAuth } from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\n\n// Define your configuration in a separate variable and pass it to NextAuth()\n// This way we can also 'export const config' for use later\nexport const config = {\n  providers: [GitHub],\n  pages: {\n    signIn: \"/login\",\n  },\n}\n\nexport const { signIn, signOut, handle } = NextAuth(config)\n```\n\n----------------------------------------\n\nTITLE: Cloning Auth.js Example Repository\nDESCRIPTION: Command to clone the Auth.js and Next.js example app repository.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nextauthjs/next-auth-example.git && cd next-auth-example\n```\n\n----------------------------------------\n\nTITLE: Creating Postmark SignIn Form in Next.js (Client Component)\nDESCRIPTION: Implementation of a sign-in form for Postmark in Next.js as a client component. Uses the client-side signIn function to handle form submission.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_39\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"\nimport { signIn } from \"next-auth/react\"\n\nexport function SignIn() {\n  const postmarkAction = (formData: FormData) => {\n    signIn(\"postmark\", formData)\n  }\n\n  return (\n    <form action={postmarkAction}>\n      <label htmlFor=\"email-postmark\">\n        Email\n        <input type=\"email\" id=\"email-postmark\" name=\"email\" />\n      </label>\n      <input type=\"submit\" value=\"Signin with Postmark\" />\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Sign Out Page in SvelteKit with Components\nDESCRIPTION: This SvelteKit code creates a styled sign out page using the built-in SignOut component from @auth/sveltekit/components. It includes custom styling and a slot for customizing the submit button appearance.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signout.mdx#2025-04-12_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n  import { SignOut } from \"@auth/sveltekit/components\"\n</script>\n\n<div class=\"relative flex h-full w-full overflow-hidden\">\n  <div\n    class=\"z-20 flex h-dvh w-full items-center justify-center md:ml-[15%] md:w-[22rem]\"\n  >\n    <div class=\"flex w-80 flex-col items-center justify-center text-xl\">\n      <h2\n        class=\"mb-4 flex items-center space-x-2 text-3xl font-light text-slate-600\"\n      >\n        <img src=\"/img/logo.png\" alt=\"Company Logo\" class=\"size-5\" />\n        <span class=\"text-4xl font-medium text-white\">Company</span>\n      </h2>\n      <div\n        class=\"m-8 flex w-full flex-col gap-2 rounded bg-white p-6 shadow-lg\"\n      >\n        <SignOut signOutPage=\"signout\" className=\"w-full\">\n          <div\n            slot=\"submitButton\"\n            class=\"mt-2 flex h-12 w-full items-center space-x-2 rounded px-4 text-base font-light transition focus:outline-none focus:ring-2 focus:ring-slate-800 focus:ring-offset-2\"\n          >\n            <span class=\"flex w-full justify-center\"> Signout </span>\n          </div>\n        </SignOut>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Qwik Wikimedia Auth Configuration\nDESCRIPTION: Implementation of Wikimedia authentication in Qwik framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wikimedia.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Wikimedia from \"@auth/qwik/providers/wikimedia\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Wikimedia],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Neo4j Connection\nDESCRIPTION: Essential environment variables required for connecting to a Neo4j database, including URI, username, and password.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nNEO4J_URI=bolt://localhost\nNEO4J_USERNAME=neo4j\nNEO4J_PASSWORD=abc\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailchimp Provider in Qwik\nDESCRIPTION: This code snippet shows how to configure the Mailchimp authentication provider in a Qwik application using the @auth/qwik library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailchimp.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport MailChimp from \"@auth/qwik/providers/mailchimp\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [MailChimp],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Using Postmark SignIn Component in SvelteKit\nDESCRIPTION: Implementation of a sign-in button specifically for Postmark in SvelteKit. Uses the pre-built SignIn component from @auth/sveltekit/components package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_40\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <SignIn provider=\"postmark\" />\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Spotify Provider\nDESCRIPTION: These environment variables are required for configuring the Spotify provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/spotify.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_SPOTIFY_ID\nAUTH_SPOTIFY_SECRET\n```\n\n----------------------------------------\n\nTITLE: Setting Upstash Environment Variables\nDESCRIPTION: Required environment variables for connecting to Upstash Redis service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUPSTASH_REDIS_URL,\nUPSTASH_REDIS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Forward Email (Next.js)\nDESCRIPTION: Creates a sign-in form component for Forward Email authentication in a Next.js application. This component includes an email input field and a submit button that triggers the sign-in process.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signIn } from \"../../auth.ts\"\n\nexport function SignIn() {\n  return (\n    <form\n      action={async (formData) => {\n        \"use server\"\n        await signIn(\"forwardemail\", formData)\n      }}\n    >\n      <input type=\"text\" name=\"email\" placeholder=\"Email\" />\n      <button type=\"submit\">Signin with Forward Email</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Email Address Normalization\nDESCRIPTION: Implementation of custom email address normalization for Postmark authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/postmark.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Postmark from \"next-auth/providers/postmark\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Postmark({\n      normalizeIdentifier(identifier: string): string {\n        let [local, domain] = identifier.toLowerCase().trim().split(\"@\")\n        domain = domain.split(\",\")[0]\n        return `${local}@${domain}`\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Including Default Entities in MikroORM Configuration\nDESCRIPTION: This snippet demonstrates how to include the default entities provided by the MikroORM adapter in the MikroORM configuration. This is useful for including them in migrations and other ORM operations.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/mikro-orm.mdx#2025-04-12_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Options } from \"@mikro-orm/core\"\nimport { defaultEntities } from \"@auth/mikro-orm-adapter\"\n\nconst config: Options = {\n  entities: [VeryImportantEntity, ...Object.values(defaultEntities)],\n}\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Implementing ClickUp Provider in Qwik\nDESCRIPTION: Configuration code for integrating ClickUp authentication in a Qwik application using @auth/qwik.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/click-up.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport ClickUp from \"@auth/qwik/providers/click-up\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [ClickUp],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Netlify OAuth in SvelteKit\nDESCRIPTION: Configuration code for setting up Netlify authentication provider in SvelteKit applications using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netlify.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Netlify from \"@auth/sveltekit/providers/netlify\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Netlify],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js with SvelteKitAuth\nDESCRIPTION: This snippet shows how to set up SvelteKitAuth with GitHub and Credentials providers and create a provider map for a custom sign-in page. It includes the configuration for the sign-in page path.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport GitHub from \"@auth/sveltekit/providers/github\"\nimport Credentials from \"@auth/sveltekit/providers/credentials\"\nimport type { Provider } from \"@auth/sveltekit/providers\"\n\nconst providers: Provider[] = [\n  GitHub,\n  Credentials({\n    credentials: { password: { label: \"Password\", type: \"password\" } },\n    authorize(c) {\n      if (c.password !== \"password\") return null\n      return {\n        id: \"test\",\n        name: \"Test User\",\n        email: \"test@example.com\",\n      }\n    },\n  }),\n]\n\nexport const providerMap = providers.map((provider) => {\n  if (typeof provider === \"function\") {\n    const providerData = provider()\n    return { id: providerData.id, name: providerData.name }\n  } else {\n    return { id: provider.id, name: provider.name }\n  }\n})\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers,\n  pages: {\n    signIn: \"/signin\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth Error Page Route\nDESCRIPTION: Configuration snippet showing how to override the default Next-Auth error page path in the auth config.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/error.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst authConfig: NextAuthConfig = {\n...  \n  pages: {\n    error: \"/error\",\n  }\n...  \n};\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Layout Load Function with Session\nDESCRIPTION: Example of accessing the authentication session in a SvelteKit layout load function. This makes the session available to all pages in the application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { LayoutServerLoad } from \"./$types\"\n\nexport const load: LayoutServerLoad = async (event) => {\n  const session = await event.locals.auth()\n\n  return {\n    session,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Provider in SvelteKit\nDESCRIPTION: This code snippet demonstrates how to set up Slack authentication in a SvelteKit application using SvelteKitAuth. It imports the necessary modules and configures the Slack provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/slack.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Slack from \"@auth/sveltekit/providers/slack\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Slack],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Box Authentication in Express\nDESCRIPTION: Code for setting up Box authentication in an Express.js application using the @auth/express package. This configures auth routes to handle Box OAuth flow.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/box.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Box from \"@auth/express/providers/box\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Box] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Adapter in Next.js\nDESCRIPTION: TypeScript code to configure the Hasura Adapter in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { HasuraAdapter } from \"@auth/hasura-adapter\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: HasuraAdapter({\n    endpoint: process.env.AUTH_HASURA_GRAPHQL,\n    adminSecret: process.env.AUTH_HASURA_SECRET,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Auth0 Environment Variables\nDESCRIPTION: Defines the required environment variables for Auth0 authentication. These variables are used to store the Auth0 client ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_AUTH0_ID\nAUTH_AUTH0_SECRET\n```\n\n----------------------------------------\n\nTITLE: Implementing Battle.net Authentication in Express\nDESCRIPTION: Configuration for setting up Battle.net authentication in an Express application using the @auth/express library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\";\nimport BattleNet from \"@auth/express/providers/battlenet\";\n\napp.use(\"/auth/*\", ExpressAuth({\n  providers: [BattleNet({\n    clientId: AUTH_BATTLENET_CLIENT_ID\n    clientSecret: AUTH_BATTLENET_CLIENT_SECRET\n    issuer: AUTH_BATTLENET_ISSUER\n  })]\n}));\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Line Auth\nDESCRIPTION: Required environment variables for Line authentication setup including client ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/line.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_LINE_ID\nAUTH_LINE_SECRET\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database Connection\nDESCRIPTION: Example of setting the DATABASE_URL environment variable for connecting to a PostgreSQL database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=postgres://postgres:adminadmin@0.0.0.0:5432/db\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Forward Email (Qwik)\nDESCRIPTION: Creates a sign-in button component for Forward Email authentication in a Qwik application. This component uses the useSignIn hook to trigger the sign-in process.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <button\n      onClick$={() => signInSig.submit({ redirectTo: \"/\" })}\n    >\n      SignIn\n    </button>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Verification Token Generation\nDESCRIPTION: Example of implementing custom verification token generation for Postmark provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/postmark.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Postmark from \"next-auth/providers/postmark\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Postmark({\n      async generateVerificationToken() {\n        return crypto.randomUUID()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing WebAuthn Dependencies with NPM/Yarn\nDESCRIPTION: Command to install the required peer dependencies for WebAuthn implementation, including server and browser components.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/webauthn.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @simplewebauthn/server@9.0.3 @simplewebauthn/browser@9.0.1\n```\n\n----------------------------------------\n\nTITLE: Setting up Mastodon Provider in Next.js\nDESCRIPTION: Configuration code for implementing Mastodon authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mastodon.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Mastodon from \"next-auth/providers/mastodon\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Mastodon],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Drizzle ORM\nDESCRIPTION: This code snippet demonstrates how to set the environment variable for the Drizzle ORM database connection URL. It uses a PostgreSQL connection string as an example.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/drizzle.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_DRIZZLE_URL=postgres://postgres:postgres@127.0.0.1:5432/db\n```\n\n----------------------------------------\n\nTITLE: Configuring PouchDB Adapter with Express Authentication\nDESCRIPTION: Setup for Express.js authentication using PouchDB adapter with LevelDB storage and necessary middleware configuration\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pouchdb.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { PouchDBAdapter } from \"@auth/pouchdb-adapter\"\nimport PouchDB from \"pouchdb\"\n\n// Setup your PouchDB instance and database\nPouchDB.plugin(require(\"pouchdb-adapter-leveldb\")) // Or any other adapter\n  .plugin(require(\"pouchdb-find\")) // Don't forget the `pouchdb-find` plugin\n\nconst pouchdb = new PouchDB(\"auth_db\", { adapter: \"leveldb\" })\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: PouchDBAdapter(pouchdb),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Forward Email (SvelteKit)\nDESCRIPTION: Creates a sign-in button component for Forward Email authentication in a SvelteKit application. This component uses the SignIn component from @auth/sveltekit/components.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <SignIn provider=\"forwardemail\" />\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Provider in Qwik\nDESCRIPTION: This code snippet shows how to set up Slack authentication in a Qwik application using QwikAuth. It imports the necessary modules and configures the Slack provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/slack.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Slack from \"@auth/qwik/providers/slack\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Slack],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TikTok Provider in Qwik\nDESCRIPTION: TypeScript code for setting up the TikTok provider in Qwik using QwikAuth$. This configuration exports onRequest, useSession, useSignIn, and useSignOut functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/tiktok.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport TikTok from \"@auth/qwik/providers/tiktok\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [TikTok],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ClickUp Provider in SvelteKit\nDESCRIPTION: Configuration code for integrating ClickUp authentication in a SvelteKit application using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/click-up.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport ClickUp from \"@auth/sveltekit/providers/click-up\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [ClickUp],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura Adapter in Express\nDESCRIPTION: TypeScript code to configure the Hasura Adapter in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { HasuraAdapter } from \"@auth/hasura-adapter\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: HasuraAdapter({\n      endpoint: process.env.AUTH_HASURA_GRAPHQL,\n      adminSecret: process.env.AUTH_HASURA_SECRET,\n    }),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Provider in Express\nDESCRIPTION: Implementation of Azure AD B2C authentication provider in an Express application. Mounts the authentication handler at the '/auth/*' path with the configured provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-ad-b2c.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\";\nimport AzureADB2C from \"@auth/express/providers/azure-ad-b2c\";\n\napp.use(\"/auth/*\", ExpressAuth({\n  providers: [AzureADB2C({\n    clientId: AUTH_AZURE_AD_CLIENT_ID\n    clientSecret: AUTH_AZURE_AD_CLIENT_SECRET\n    issuer: AUTH_AZURE_AD_ISSUER\n  })]\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Auth in SvelteKit\nDESCRIPTION: Configuration code for setting up Line authentication in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/line.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Line from \"@auth/sveltekit/providers/line\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Line],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PostgreSQL Connection\nDESCRIPTION: Environment variables needed to configure the PostgreSQL database connection for NextAuth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_HOST=\nDATABASE_NAME=\nDATABASE_USER=\nDATABASE_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Sequelize Sync\nDESCRIPTION: Example of using Sequelize's sync method to create the necessary tables for authentication in development. This approach is not recommended for production use.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/sequelize.mdx#2025-04-12_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport SequelizeAdapter from \"@auth/sequelize-adapter\"\nimport Sequelize from \"sequelize\"\n\nconst sequelize = new Sequelize(\"sqlite::memory:\")\nconst adapter = SequelizeAdapter(sequelize)\n\n// Calling sync() is not recommended in production\nsequelize.sync()\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Netlify OAuth Environment Variables\nDESCRIPTION: Required environment variables for Netlify OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netlify.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_NETLIFY_ID\nAUTH_NETLIFY_SECRET\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Bitbucket Auth\nDESCRIPTION: Required environment variables for Bitbucket OAuth authentication. These include the client ID and secret obtained from Bitbucket OAuth application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bitbucket.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_BITBUCKET_ID\nAUTH_BITBUCKET_SECRET\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB Adapter Dependencies with npm/yarn\nDESCRIPTION: Installation command for the EdgeDB adapter and related dependencies required to use EdgeDB with Next-Auth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install edgedb @auth/edgedb-adapter\nnpm install @edgedb/generate --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing WebAuthn Dependencies\nDESCRIPTION: Commands to install required peer dependencies for WebAuthn/Passkey functionality\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passkey.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @simplewebauthn/browser@9.0.1 @simplewebauthn/server@9.0.3\n```\n\n----------------------------------------\n\nTITLE: Creating a Sign-in Form in Qwik\nDESCRIPTION: Implementation of a sign-in form in Qwik that submits email and password credentials to the Auth.js Credentials provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { Form } from \"@builder.io/qwik-city\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <Form action={signInSig}>\n      <label>\n        Email\n        <input name=\"email\" type=\"email\" />\n      </label>\n      <label>\n        Password\n        <input name=\"password\" type=\"password\" />\n      </label>\n      <button>Sign In</button>\n    </Form>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Email Provider in Next.js\nDESCRIPTION: This snippet shows how to set up a custom HTTP email provider in Next.js using NextAuth. It includes the configuration for the provider, specifying the id, name, type, and custom sendVerificationRequest function.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-http-email.mdx#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { sendVerificationRequest } from \"./lib/authSendRequest\"\n\nexport const { handlers, auth } = NextAuth({\n  adapter,\n  providers: [\n    {\n      id: \"http-email\",\n      name: \"Email\",\n      type: \"email\",\n      maxAge: 60 * 60 * 24, // Email link will expire in 24 hours\n      sendVerificationRequest,\n    },\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Foursquare Auth Configuration\nDESCRIPTION: Implementation of Foursquare authentication provider in SvelteKit framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/foursquare.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport FourSquare from \"@auth/sveltekit/providers/foursquare\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [FourSquare],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zitadel Provider in Express\nDESCRIPTION: This snippet demonstrates how to configure the Zitadel provider in an Express application using ExpressAuth. It sets up the authentication middleware for the specified route.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zitadel.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Zitadel from \"@auth/express/providers/zitadel\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Zitadel] }))\n```\n\n----------------------------------------\n\nTITLE: Custom Email Verification Request Handler\nDESCRIPTION: Example of implementing a custom email verification request handler with Mailgun provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailgun.mdx#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Mailgun from \"next-auth/providers/mailgun\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Mailgun({\n      server: process.env.EMAIL_SERVER,\n      from: process.env.EMAIL_FROM,\n      sendVerificationRequest({\n        identifier: email,\n        url,\n        provider: { server, from },\n      }) {\n        // your function\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Apple Authentication\nDESCRIPTION: Required environment variables for Apple authentication with Next-Auth. These variables store the Apple ID and secret needed for the OAuth flow.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/apple.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_APPLE_ID\nAUTH_APPLE_SECRET\n```\n\n----------------------------------------\n\nTITLE: Express Zoho Authentication Setup\nDESCRIPTION: Configuration for implementing Zoho authentication in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoho.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Zoho from \"@auth/express/providers/zoho\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Zoho] }))\n```\n\n----------------------------------------\n\nTITLE: Next.js Dropbox Authentication Setup\nDESCRIPTION: Configuration for implementing Dropbox authentication in Next.js using NextAuth.js framework. Exports authentication handlers and methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dropbox.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Dropbox from \"next-auth/providers/dropbox\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Dropbox],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Forward Email in Auth.js\nDESCRIPTION: Configures the environment variable for the Forward Email provider in Auth.js. This variable is used to authenticate with the Forward Email service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_FORWARDEMAIL_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Implementing BoxyHQ SAML in Qwik\nDESCRIPTION: Qwik framework configuration for BoxyHQ SAML provider integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/boxyhq-saml.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport BoxyHQ from \"@auth/qwik/providers/boxyhq-saml\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      BoxyHQ({\n        authorization: { params: { scope: \"\" } }, // This is needed for OAuth 2.0 flow, otherwise default to openid\n        clientId: import.meta.env.AUTH_BOXYHQ_SAML_ID,\n        clientSecret: import.meta.env.AUTH_BOXYHQ_SAML_SECRET,\n        issuer: import.meta.env.AUTH_BOXYHQ_SAML_ISSUER,\n      }),  \n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Twitter OAuth\nDESCRIPTION: Required environment variables for Twitter authentication configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitter.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_TWITTER_ID\nAUTH_TWITTER_SECRET\n```\n\n----------------------------------------\n\nTITLE: Installing Kysely Adapter Dependencies\nDESCRIPTION: Commands to install the required Kysely adapter and database dependencies\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/kysely.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install kysely @auth/kysely-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring Mattermost Auth in Express\nDESCRIPTION: Express.js implementation of Mattermost authentication using @auth/express package. Sets up authentication routes and provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mattermost.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Mattermost from \"@auth/express/providers/mattermost\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Mattermost] }))\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Adapter and Dependencies\nDESCRIPTION: Command to install the SurrealDB adapter and required dependencies using npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/surrealdb-adapter surrealdb.js\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Pipedrive Auth\nDESCRIPTION: Required environment variables for Pipedrive OAuth configuration including client ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pipedrive.mdx#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAUTH_PIPEDRIVE_ID\nAUTH_PIPEDRIVE_SECRET\n```\n\n----------------------------------------\n\nTITLE: Installing NextAuth.js v5 Beta with npm/yarn\nDESCRIPTION: Command to install the beta version of NextAuth.js v5 using npm or yarn package managers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/migrating-to-v5.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-auth@beta\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Middleware Matcher\nDESCRIPTION: This snippet shows how to configure the matcher for Next.js middleware to protect specific routes while excluding others.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/session-management/protecting.mdx#2025-04-12_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nexport const config = {\n  matcher: [\"/((?!api|_next/static|_next/image|favicon.ico).*)\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for SimpleLogin Authentication\nDESCRIPTION: Specifies the callback URL format for SimpleLogin authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/simplelogin.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/simplelogin\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/simplelogin\n```\n\n----------------------------------------\n\nTITLE: Setting up Mastodon Provider in Qwik\nDESCRIPTION: Implementation of Mastodon authentication in a Qwik application using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mastodon.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Mastodon from \"@auth/qwik/providers/mastodon\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Mastodon],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB CLI on Windows\nDESCRIPTION: PowerShell command to install the EdgeDB Command Line Interface on Windows systems for managing EdgeDB instances and projects.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\niwr https://ps1.edgedb.com -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Spotify Provider\nDESCRIPTION: These snippets show how to set up the callback URL for the Spotify provider in different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/spotify.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/spotify\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/spotify\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/spotify\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Dropbox Authentication Setup\nDESCRIPTION: Configuration for implementing Dropbox authentication in SvelteKit using @auth/sveltekit package. Sets up authentication handler and sign-in/out methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dropbox.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Dropbox from \"@auth/sveltekit/providers/dropbox\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Dropbox],\n})\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Faceit Auth Configuration\nDESCRIPTION: Setup for Faceit authentication in a SvelteKit application using @auth/sveltekit. Exports authentication handlers and methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/faceit.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport FaceIt from \"@auth/sveltekit/providers/faceit\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [FaceIt],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Link in Markdown\nDESCRIPTION: This snippet uses Markdown to provide a link to the project's documentation. It includes a placeholder for the framework ID, which should be replaced with the actual framework identifier.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/frameworks-template/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n---\n\nCheck out the documentation at [<framework-id>.authjs.dev](https://<framework-id>.authjs.dev).\n```\n\n----------------------------------------\n\nTITLE: Implementing NetSuite Userinfo RESTLet\nDESCRIPTION: NetSuite RESTLet implementation to provide user information using the N/runtime module. Returns basic user details including ID, name, role, location, email, and contact information.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netsuite.mdx#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @NApiVersion 2.1\n * @NScriptType Restlet\n */\ndefine([\"N/runtime\"],\n (runtime) => {\n/**\n * Defines the function that is executed when a GET request is sent to a RESTlet.\n * @param {Object} requestParams - Parameters from HTTP request URL; parameters passed as an Object (for all supported\n *     content types)\n * @returns {string | Object} HTTP response body; returns a string when request Content-Type is 'text/plain'; returns an\n *     Object when request Content-Type is 'application/json' or 'application/xml'\n * @since 2015.2\n */\n  const get = (requestParams) => {\n    let userObject = runtime.getCurrentUser();\n\n    try {\n      log.debug({ title: \"Payload received:\", details: requestParams });\n\n      const { id, name, role, location, email, contact } = userObject;\n\n      log.audit({ title: \"Current User Ran\", details: name });\n\n      let user = {\n        id,\n        name,\n        role,\n        location,\n        email,\n        contact,\n      };\n\n      log.debug({ title: \"Returning user\", details: user });\n\n      return JSON.stringify(user);\n    } catch (e) {\n      log.error({ title: \"Error grabbing current user:\", details: e });\n    }\n  };\n\n  return {\n    get,\n  };\n);\n```\n\n----------------------------------------\n\nTITLE: Adding EdgeDB Prebuild Script to package.json\nDESCRIPTION: Modification to package.json to add a prebuild script that generates the EdgeDB query builder before the application build process starts.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\",\n  \"lint\": \"next lint\",\n+  \"prebuild\": \"npx @edgedb/generate edgeql-js\"\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Discord OAuth in NextAuth.js\nDESCRIPTION: Specifies the callback URL to be used for Discord OAuth authentication in NextAuth.js. This URL needs to be configured in the Discord OAuth app settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/discord.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/discord\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Todoist Authentication\nDESCRIPTION: Examples of callback URLs for Todoist authentication in Next.js, Qwik, and Svelte frameworks. These URLs need to be configured in the Todoist developer console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/todoist.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/todoist\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/todoist\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/todoist\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Resend in Auth.js\nDESCRIPTION: Configures the environment variable for the Resend email provider in Auth.js. This variable is used to authenticate with the Resend service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_RESEND_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Installing Neon Adapter and Dependencies\nDESCRIPTION: Command to install the Neon adapter and serverless database driver for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/neon-adapter @neondatabase/serverless\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Callback URL for Next.js\nDESCRIPTION: Sets up the callback URL for Auth0 authentication in a Next.js application. This URL is where Auth0 will redirect after authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/auth0.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/auth0\n```\n\n----------------------------------------\n\nTITLE: Implementing Hubspot Auth in Qwik\nDESCRIPTION: Configuration code for setting up Hubspot authentication in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/hubspot.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Hubspot from \"@auth/qwik/providers/hubspot\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Hubspot],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PouchDB Adapter with SvelteKit Authentication\nDESCRIPTION: Implementation of PouchDB adapter in SvelteKit authentication system with LevelDB storage\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pouchdb.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { PouchDBAdapter } from \"@auth/pouchdb-adapter\"\nimport PouchDB from \"pouchdb\"\n\n// Setup your PouchDB instance and database\nPouchDB.plugin(require(\"pouchdb-adapter-leveldb\")) // Or any other adapter\n  .plugin(require(\"pouchdb-find\")) // Don't forget the `pouchdb-find` plugin\n\nconst pouchdb = new PouchDB(\"auth_db\", { adapter: \"leveldb\" })\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: PouchDBAdapter(pouchdb),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Todoist Provider in Next.js\nDESCRIPTION: Code snippet for setting up Todoist as an authentication provider in a Next.js application using NextAuth. This configuration goes in the auth.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/todoist.mdx#2025-04-12_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Todoist from \"next-auth/providers/todoist\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Todoist],\n})\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Authentik Provider\nDESCRIPTION: This snippet lists the essential environment variables needed for Authentik provider integration with Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/authentik.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_AUTHENTIK_ID\nAUTH_AUTHENTIK_SECRET\nAUTH_AUTHENTIK_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity Server Provider in SvelteKit\nDESCRIPTION: Illustrates the configuration of the Identity Server Provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/identity-server4.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport IdentityServer4 from \"@auth/sveltekit/providers/identity-server4\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [IdentityServer4],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Webex Authentication Setup\nDESCRIPTION: Implementation of Webex authentication in a Qwik application using the @auth/qwik package. Configures authentication hooks and provider settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/webex.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Webex from \"@auth/qwik/providers/webex\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Webex],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Creating SignIn Button Component in Qwik\nDESCRIPTION: Implementation of a sign-in button component in Qwik. Uses the component$ function and useSignIn hook to create a button that triggers authentication with a redirect.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { component$ } from \"@builder.io/qwik\"\nimport { useSignIn } from \"./plugin@auth\"\n\nexport default component$(() => {\n  const signInSig = useSignIn()\n\n  return (\n    <button\n      onClick$={() => signInSig.submit({ redirectTo: \"/\" })}\n    >\n      SignIn\n    </button>\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Importing getServerSession in Next.js App Router\nDESCRIPTION: Shows how to import the getServerSession function from next-auth/next in a Next.js application using the App Router.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/public/robots.txt#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getServerSession } from \"next-auth/next\"\n```\n\n----------------------------------------\n\nTITLE: Strava Environment Variables\nDESCRIPTION: Required environment variables for Strava authentication setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/strava.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_STRAVA_ID\nAUTH_STRAVA_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring NetSuite Provider in Next.js\nDESCRIPTION: Implementation of NetSuite OAuth provider configuration in Next.js application with authentication setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netsuite.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport NetSuite from \"next-auth/providers/netsuite\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    NetSuite({\n      clientId: process.env.AUTH_NETSUITE_ID,\n      clientSecret: process.env.AUTH_NETSUITE_SECRET,\n      issuer: process.env.AUTH_NETSUITE_ACCOUNT_ID,\n      userinfo:\n        \"https://1234567.restlets.api.netsuite.com/app/site/hosting/restlet.nl?script=123&deploy=1\",\n      prompt: \"login\",\n      scope: \"restlets\",\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Express Trakt Authentication Setup\nDESCRIPTION: Implementation of Trakt authentication in Express.js using @auth/express package. Configures authentication middleware for Express routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/trakt.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Trakt from \"@auth/express/providers/trakt\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Trakt] }))\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Required environment variables for database connection\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/kysely.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_HOST=\nDATABASE_NAME=\nDATABASE_USER=\nDATABASE_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Tables Adapter Package\nDESCRIPTION: Command to install the Azure Tables adapter package using npm or yarn package managers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/azure-tables.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/azure-tables-adapter\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Crypto API polyfill for Node.js compatibility\nDESCRIPTION: This code creates a polyfill for the Web Crypto API when using Node.js versions below v20.0.0. It uses the Node.js crypto module's webcrypto as a fallback when the global crypto object is not available.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/express/README.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// polyfill.cjs\nglobalThis.crypto ??= require(\"crypto\").webcrypto\n```\n\n----------------------------------------\n\nTITLE: Setting Figma Authentication Environment Variables\nDESCRIPTION: Required environment variables for Figma OAuth authentication including client ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/figma.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_FIGMA_ID\nAUTH_FIGMA_SECRET\n```\n\n----------------------------------------\n\nTITLE: Implementing BankID Norway Authentication in Qwik\nDESCRIPTION: Configuration code for integrating BankID Norway authentication provider in a Qwik application using the @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bankid-no.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport BankIDNorway from \"@auth/qwik/providers/bankid-no\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [BankIDNorway],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Route Handler for Auth.js\nDESCRIPTION: Creates a dynamic route handler for Auth.js API routes in Next.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handlers } from \"@/auth\" // Referring to the auth.ts we just created\nexport const { GET, POST } = handlers\nexport const runtime = \"edge\" // optional\n```\n\n----------------------------------------\n\nTITLE: Configuring Pinterest Provider in SvelteKit\nDESCRIPTION: Illustrates the setup for the Pinterest provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pinterest.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Pinterest from \"@auth/sveltekit/providers/pinterest\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Pinterest],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Figma Authentication in SvelteKit\nDESCRIPTION: SvelteKit configuration for Figma authentication provider setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/figma.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Figma from \"@auth/sveltekit/providers/figma\"\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Figma],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Netlify OAuth in Qwik\nDESCRIPTION: Configuration code for setting up Netlify authentication provider in Qwik applications using @auth/qwik.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netlify.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Netlify from \"@auth/qwik/providers/netlify\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Netlify],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Azure DevOps Authentication\nDESCRIPTION: Examples of callback URLs for different frameworks when using Azure DevOps authentication provider. The URL format varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/azure-devops\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/azure-devops\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/azure-devops\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Foursquare Auth\nDESCRIPTION: Required environment variables for Foursquare OAuth authentication setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/foursquare.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_FOURSQUARE__ID\nAUTH_FOURSQUARE_SECRET\n```\n\n----------------------------------------\n\nTITLE: Setting up BoxyHQ SAML Environment Variables\nDESCRIPTION: Required environment variables for BoxyHQ SAML configuration including client ID, secret, and issuer.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/boxyhq-saml.mdx#2025-04-12_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAUTH_BOXYHQ_SAML_ID\nAUTH_BOXYHQ_SAML_SECRET\nAUTH_BOXYHQ_SAML_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Twitch Authentication\nDESCRIPTION: Specifies the callback URL format for Twitch authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitch.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/twitch\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/twitch\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Todoist Authentication\nDESCRIPTION: Required environment variables for Todoist authentication. These variables should be set with the Todoist client ID and secret obtained from the Todoist developer console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/todoist.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_TODOIST_ID\nAUTH_TODOIST_SECRET\n```\n\n----------------------------------------\n\nTITLE: Applying EdgeDB Migration\nDESCRIPTION: Command to apply pending migrations to the EdgeDB database, updating its schema to match the definitions in the migration files.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nedgedb migrate\n```\n\n----------------------------------------\n\nTITLE: Rendering Database Adapters List in Auth.js Documentation\nDESCRIPTION: This JSX code dynamically renders a list of supported database adapters from the manifest data. Each adapter is displayed as a link with an icon and label, using the ListDisclosure component to show a limited number initially.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/index.mdx#2025-04-12_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ListDisclosure limit={8}>\n  {Object.entries(manifest.adapters).map(([value, label]) => (\n    <Link\n      href={`/getting-started/adapters/${value}`}\n      key={value}\n      className=\"flex h-32 w-36 flex-col items-center justify-between rounded-lg border border-solid border-neutral-200 p-4 !no-underline shadow-sm transition-colors duration-300 hover:bg-neutral-50 dark:border-neutral-800 dark:hover:bg-neutral-950\"\n    >\n      <img src={`/img/adapters/${value}.svg`} className=\"mt-2 h-12\" />\n      <div className=\"text-center text-sm\">{label}</div>\n    </Link>\n  ))}\n</ListDisclosure>\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Hooks Configuration for Auth.js\nDESCRIPTION: Re-exports the Auth.js handle function in SvelteKit's hooks.server.ts file to integrate authentication with the SvelteKit request handling pipeline.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unsecure Schema for Dgraph\nDESCRIPTION: GraphQL schema definition for Dgraph without authentication rules. This creates the necessary types for Auth.js data storage but is not secure for production use.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Account {\n  id: ID\n  type: String\n  provider: String @search(by: [hash])\n  providerAccountId: String @search(by: [hash])\n  refreshToken: String\n  expires_at: Int64\n  accessToken: String\n  token_type: String\n  refresh_token: String\n  access_token: String\n  scope: String\n  id_token: String\n  session_state: String\n  user: User @hasInverse(field: \"accounts\")\n}\ntype Session {\n  id: ID\n  expires: DateTime\n  sessionToken: String @search(by: [hash])\n  user: User @hasInverse(field: \"sessions\")\n}\ntype User {\n  id: ID\n  name: String\n  email: String @search(by: [hash])\n  emailVerified: DateTime\n  image: String\n  accounts: [Account] @hasInverse(field: \"user\")\n  sessions: [Session] @hasInverse(field: \"user\")\n}\n\ntype VerificationToken {\n  id: ID\n  identifier: String @search(by: [hash])\n  token: String @search(by: [hash])\n  expires: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nodemailer with Configuration Object in SvelteKit\nDESCRIPTION: Configuration for using Nodemailer provider with a configuration object in SvelteKit. Uses the $env/dynamic/private module for accessing environment variables with detailed SMTP configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport Nodemailer from \"@auth/sveltekit/providers/nodemailer\"\nimport { env } from \"$env/dynamic/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Nodemailer({\n      server: {\n        host: env.EMAIL_SERVER_HOST,\n        port: env.EMAIL_SERVER_PORT,\n        auth: {\n          user: env.EMAIL_SERVER_USER,\n          pass: env.EMAIL_SERVER_PASSWORD,\n        },\n      },\n      from: env.EMAIL_FROM,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Azure DevOps Authentication\nDESCRIPTION: Required environment variables that need to be set in .env.local for Azure DevOps authentication to work, including the App ID and client secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/azure-devops.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_DEVOPS_APP_ID=<copy App ID value here>\nAZURE_DEVOPS_CLIENT_SECRET=<copy generated client secret value here>\n```\n\n----------------------------------------\n\nTITLE: Configuring WorkOS Provider in SvelteKit\nDESCRIPTION: Illustrates the setup of the WorkOS provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/workos.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport WorkOS from \"@auth/sveltekit/providers/workos\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [WorkOS({ connection: \"conn_abc123\" })],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Kakao Provider\nDESCRIPTION: Specifies the callback URL format for Kakao OAuth integration across different frameworks (Next.js, Qwik, and Svelte).\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/kakao.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/kakao\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/kakao\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/kakao\n```\n\n----------------------------------------\n\nTITLE: Initializing Patreon Provider in SvelteKit\nDESCRIPTION: Configuration code for setting up Patreon authentication in SvelteKit using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/patreon.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Patreon from \"@auth/sveltekit/providers/patreon\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Patreon],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for SendGrid (SvelteKit)\nDESCRIPTION: This code snippet demonstrates how to create a sign-in button component using SendGrid provider in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <SignIn provider=\"sendgrid\" />\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitbucket Callback URLs\nDESCRIPTION: Framework-specific callback URL configurations for Bitbucket OAuth authentication. These URLs need to be registered in your Bitbucket OAuth application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/bitbucket.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/bitbucket\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/bitbucket\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Forward Email API Key\nDESCRIPTION: Configuration of the Forward Email API key as an environment variable\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/forwardemail.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTH_FORWARDEMAIL_KEY=abc\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpressAuth with SurrealDB Adapter\nDESCRIPTION: Express.js configuration for authentication using the SurrealDB adapter. It sets up authentication middleware for Express applications.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport { SurrealDBAdapter } from \"@auth/surrealdb-adapter\"\nimport clientPromise from \"./lib/surrealdb\"\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: SurrealDBAdapter(clientPromise),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for WorkOS Provider\nDESCRIPTION: Defines the required environment variables for the WorkOS provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/workos.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_WORKOS_ID\nAUTH_WORKOS_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage Adapter with Custom Base Key Prefix\nDESCRIPTION: This example demonstrates how to configure the Unstorage adapter with a custom base key prefix. This is useful when using multiple Auth.js connected apps with the same storage.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport { UnstorageAdapter } from \"@auth/unstorage-adapter\"\nimport { createStorage } from \"unstorage\"\n\nconst storage = createStorage()\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: UnstorageAdapter(storage, { baseKeyPrefix: \"app2:\" }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring NetSuite Callback URLs\nDESCRIPTION: Callback URL configurations for different frameworks to handle NetSuite OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/netsuite.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/netsuite\n```\n\n----------------------------------------\n\nTITLE: Importing Code and Screenshot Components in React\nDESCRIPTION: Import statements for the Code and Screenshot React components, which are used to display code samples and images within documentation pages.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/built-in-pages.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Code } from \"@/components/Code\"\nimport { Screenshot } from \"@/components/Screenshot\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for 42School Authentication\nDESCRIPTION: Required environment variables that need to be set for 42School authentication to work properly.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/42-school.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_42_SCHOOL_ID\nAUTH_42_SCHOOL_SECRET\n```\n\n----------------------------------------\n\nTITLE: Implementing Figma Authentication in Qwik\nDESCRIPTION: Qwik framework configuration for Figma authentication provider setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/figma.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Figma from \"@auth/qwik/providers/figma\"\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Figma],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hubspot Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks to handle Hubspot OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/hubspot.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/hubspot\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/hubspot\n```\n\n----------------------------------------\n\nTITLE: Creating a Server Action for SvelteKit Sign-in\nDESCRIPTION: This snippet defines a server action in SvelteKit to handle the sign-in functionality at the /signin route. It exports the signIn function from the auth configuration as the default action.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/signin.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signIn } from \"../../auth\"\nimport type { Actions } from \"./$types\"\n\nexport const actions = { default: signIn } satisfies Actions\n```\n\n----------------------------------------\n\nTITLE: Common Auth.js Interface Augmentations\nDESCRIPTION: Shows common interface augmentations for User, Account, Session, and JWT types that can be customized across the Auth.js ecosystem.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/typescript.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"next-auth\" {\n  interface User {}\n  interface Account {}\n  interface Session {}\n}\n\nimport { JWT } from \"next-auth/jwt\"\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    /** OpenID ID Token */\n    idToken?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dribbble Provider in Express\nDESCRIPTION: Demonstrates how to set up the Dribbble authentication provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dribbble.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Dribbble from \"@auth/express/providers/dribbble\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Dribbble] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Authentik Provider\nDESCRIPTION: These snippets demonstrate the appropriate callback URL formats for different frameworks when using the Authentik provider with Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/authentik.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/authentik\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/authentik\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/authentik\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Adapter for NextAuth\nDESCRIPTION: Command to install the PostgreSQL adapter and pg driver package required for NextAuth.js integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pg.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/pg-adapter pg\n```\n\n----------------------------------------\n\nTITLE: FusionAuth Environment Variables\nDESCRIPTION: Required environment variables for FusionAuth authentication setup including client ID, secret, tenant ID, and issuer URL.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/fusionauth.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_FUSIONAUTH_ID\nAUTH_FUSIONAUTH_SECRET\nAUTH_FUSIONAUTH_TENANT_ID\nAUTH_FUSIONAUTH_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Passage Callback URLs\nDESCRIPTION: Examples of callback URL formats for different frameworks when setting up Passage authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/passage\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/passage\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client in Bash\nDESCRIPTION: Command to manually generate the Prisma client after making changes to the database schema.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec prisma generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Resend Provider\nDESCRIPTION: Sets up the AUTH_RESEND_KEY environment variable for the Resend API key.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/resend.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTH_RESEND_KEY=abc\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Item Storage in Unstorage Adapter\nDESCRIPTION: This snippet shows how to enable the use of getItemRaw/setItemRaw instead of getItem/setItem in the Unstorage adapter. This is an experimental feature for storages that support JSON.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: UnstorageAdapter(storage, { useItemRaw: true }),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Next.js\nDESCRIPTION: Specifies the callback URL for Yandex OAuth in a Next.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/yandex\n```\n\n----------------------------------------\n\nTITLE: Custom Verification Token Generation\nDESCRIPTION: Example of implementing custom verification token generation for Sendgrid provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sendgrid.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Sendgrid from \"next-auth/providers/sendgrid\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Sendgrid({\n      async generateVerificationToken() {\n        return crypto.randomUUID()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Qwik Descope Provider Integration\nDESCRIPTION: Implementation of Descope authentication provider in Qwik framework using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/descope.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Descope from \"@auth/qwik/providers/descope\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Descope],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Facebook Authentication\nDESCRIPTION: Specifies the callback URL format for Facebook authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/facebook.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/facebook\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/facebook\n```\n\n----------------------------------------\n\nTITLE: Exporting Auth Handler in SvelteKit Hooks\nDESCRIPTION: Exports the authentication handle function from the auth module in SvelteKit hooks.server.ts file, which is necessary for the auth middleware to work.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing NextAuth.js Example App\nDESCRIPTION: Commands to clone the NextAuth.js example repository and install its dependencies. This is the first step in setting up the example app locally.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs-pages/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nextauthjs/next-auth-example.git\ncd next-auth-example\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Reddit Provider in Express\nDESCRIPTION: Code snippet for setting up Reddit as an authentication provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/reddit.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Reddit from \"@auth/express/providers/reddit\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Reddit] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Freshbooks Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks to handle Freshbooks OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/freshbooks.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/freshbooks\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/freshbooks\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SurrealDB Connection\nDESCRIPTION: Environment variables required for connecting to SurrealDB, including connection string, credentials, namespace, and database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_SURREALDB_CONNECTION\nAUTH_SURREALDB_USERNAME\nAUTH_SURREALDB_PASSWORD\nAUTH_SURREALDB_NS\nAUTH_SURREALDB_DB\n```\n\n----------------------------------------\n\nTITLE: Configuring Forward Email Provider in Auth.js (SvelteKit)\nDESCRIPTION: Sets up the Forward Email provider in the Auth.js configuration for a SvelteKit application. This code imports the necessary modules and adds Forward Email to the list of providers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport SvelteKitAuth from \"@auth/sveltekit\"\nimport ForwardEmail from \"@auth/sveltekit/providers/forwardemail\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [ForwardEmail],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Vipps MobilePay Authentication\nDESCRIPTION: Specifies the callback URL for Vipps MobilePay authentication in different frameworks. The URL structure varies slightly depending on the framework used.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vipps-mobilepay.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/vipps\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/vipps\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/vipps\n```\n\n----------------------------------------\n\nTITLE: Initializing Xata Project with Auth.js Schema\nDESCRIPTION: Command to initialize a Xata project using the provided schema file for Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/xata.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nxata init --schema=./path/to/your/schema.json\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Passage Provider Configuration\nDESCRIPTION: Implementation of Passage authentication provider in a SvelteKit application using @auth/sveltekit.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passage.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Passage from \"@auth/sveltekit/providers/passage\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Passage],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Mailchimp Authentication\nDESCRIPTION: These environment variables are required for Mailchimp authentication. They store the Mailchimp client ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailchimp.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_MAILCHIMP_ID\nAUTH_MAILCHIMP_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Apps with Upstash Redis Instance\nDESCRIPTION: Example of configuring NextAuth with a custom base key prefix for multiple applications sharing a single Redis instance.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  adapter: UpstashRedisAdapter(redis, { baseKeyPrefix: \"app2:\" }),\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing EdgeDB Project\nDESCRIPTION: Command to initialize a new EdgeDB project in the current directory, which sets up a new EdgeDB instance and links it to the project.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nedgedb project init\n```\n\n----------------------------------------\n\nTITLE: HTML Markup for Supabase Adapter Header\nDESCRIPTION: HTML markup that creates a centered header section with logos, badges and links for the Supabase adapter documentation. Includes links to NPM package, download statistics, and GitHub repository.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-supabase/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://supabase.com\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/supabase.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Supabase Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/supabase-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/supabase-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/supabase-adapter?color=green&label=@auth/supabase-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/supabase-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/supabase-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for GitLab Authentication\nDESCRIPTION: Demonstrates the callback URL format for GitLab authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/gitlab.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/gitlab\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/gitlab\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Battle.net Authentication\nDESCRIPTION: Environment variables that must be set to connect to the Battle.net OAuth service.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_BATTLENET_ID\nAUTH_BATTLENET_SECRET\nAUTH_BATTLENET_ISSUER\n```\n\n----------------------------------------\n\nTITLE: Configuring Forward Email Provider in Auth.js (Qwik)\nDESCRIPTION: Sets up the Forward Email provider in the Auth.js configuration for a Qwik application. This code imports the necessary modules and adds Forward Email to the list of providers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport ForwardEmail from \"@auth/qwik/providers/forwardemail\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [ForwardEmail],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Qwik City Project Directory Structure\nDESCRIPTION: Shows the basic directory structure of a Qwik City project, highlighting the main folders public and src, along with their subfolders for components and routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/README.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── public/\n│   └── ...\n└── src/\n    ├── components/\n    │   └── ...\n    └── routes/\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring United Effects Provider in SvelteKit\nDESCRIPTION: Illustrates the integration of the United Effects provider in a SvelteKit application using SvelteKitAuth. It sets up the provider and exports authentication handlers.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/united-effects.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport UnitedEffects from \"@auth/sveltekit/providers/united-effects\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [UnitedEffects],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Frontegg Provider\nDESCRIPTION: These snippets show the callback URL format for Frontegg integration in Next.js and Svelte applications. The callback URL is essential for the OAuth flow.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/frontegg.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/frontegg\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/frontegg\n```\n\n----------------------------------------\n\nTITLE: Express VK Provider Setup\nDESCRIPTION: Configuration for implementing VK authentication in an Express application using @auth/express.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vk.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Vk from \"@auth/express/providers/vk\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Vk] }))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for ClickUp Auth\nDESCRIPTION: Required environment variables for ClickUp OAuth provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/click-up.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_CLICKUP_ID\nAUTH_CLICKUP_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for SailPoint OAuth\nDESCRIPTION: Framework-specific callback URL configurations for SailPoint OAuth integration\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/sailpoint.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/sailpoint\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Display and Documentation Links\nDESCRIPTION: HTML markup for displaying the project logo, Drizzle integration badge, version information, and various status badges including TypeScript support, npm version, download counts, and GitHub stars.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-drizzle/README.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://github.com/drizzle-team/drizzle-orm\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/drizzle.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Drizzle ORM Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/drizzle-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/drizzle-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/drizzle-adapter?color=green&label=@auth/drizzle-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/drizzle-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/drizzle-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Migrating Fauna Collections and Indexes for v2\nDESCRIPTION: FQL script for renaming collections and updating indexes when migrating to v2 of the Fauna adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/fauna.mdx#2025-04-12_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nCollection.byName(\"accounts\")!.update({\n  name: \"Account\"\n  indexes: {\n    byUserId: {\n        terms: [{ field: \"userId\" }]\n    },\n    byProviderAndProviderAccountId: {\n        terms: [{ field: \"provider\" }, { field: \"providerAccountId\" }]\n    },\n    account_by_provider_and_provider_account_id: null,\n    accounts_by_user_id: null\n  }\n})\nCollection.byName(\"sessions\")!.update({\n  name: \"Session\",\n  indexes: {\n    bySessionToken: {\n        terms: [{ field: \"sessionToken\" }]\n    },\n    byUserId: {\n        terms: [{ field: \"userId\" }]\n    },\n    session_by_session_token: null,\n    sessions_by_user_id: null\n  }\n})\nCollection.byName(\"users\")!.update({\n  name: \"User\",\n  indexes: {\n    byEmail: {\n        terms: [{ field: \"email\" }]\n    },\n    user_by_email: null\n  }\n})\nCollection.byName(\"verification_tokens\")!.update({\n  name: \"VerificationToken\",\n  indexes: {\n    byIdentifierAndToken: {\n        terms: [{ field: \"identifier\" }, { field: \"token\" }]\n    },\n    verification_token_by_identifier_and_token: null\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Twitch Authentication\nDESCRIPTION: Defines the required environment variables for Twitch authentication. These variables store the Twitch application ID and secret.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/twitch.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_TWITCH_ID\nAUTH_TWITCH_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Webex Callback URLs\nDESCRIPTION: Callback URL configurations for different frameworks when setting up Webex OAuth integration. These URLs must be registered in your Webex OAuth application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/webex.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/webex\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/webex\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations to Remote EdgeDB Instance\nDESCRIPTION: Command to apply migrations to a remote EdgeDB instance using a DSN connection string, useful during deployment to production environments.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nedgedb migrate --dsn <your-instance-dsn>\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Images for Next.js 404 Page\nDESCRIPTION: This snippet imports necessary components and images for creating a custom 404 page in Next.js. It uses the NotFoundPage component from nextra-theme-docs and the Image component from Next.js, along with a custom GIF image.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/404.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { NotFoundPage } from \"nextra-theme-docs\"\nimport Image from \"next/image\"\n\nimport ConfusedTravolta from \"../public/img/etc/confused-travolta.gif\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dgraph Adapter\nDESCRIPTION: Required environment variables for connecting to the Dgraph GraphQL endpoint with authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dgraph.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_DGRAPH_GRAPHQL_ENDPOINT=http://localhost:8080/graphql\nAUTH_DGRAPH_GRAPHQL_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Mail.ru Authentication\nDESCRIPTION: Required environment variables for Mail.ru OAuth provider configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailru.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_MAILRU_ID\nAUTH_MAILRU_SECRET\n```\n\n----------------------------------------\n\nTITLE: Qwik Passage Provider Configuration\nDESCRIPTION: Setup for implementing Passage authentication in a Qwik application using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Passage from \"@auth/qwik/providers/passage\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Passage],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Xata Adapter Information in HTML\nDESCRIPTION: This HTML snippet creates a centered layout with logos, badges, and links for the Xata Adapter for NextAuth.js / Auth.js. It includes images, links to the official websites, and various informational badges.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-xata/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://xata.io\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/xata.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Xata Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/xata-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/xata-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/xata-adapter?color=green&label=@auth/xata-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/xata-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/xata-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Neon Adapter with Express\nDESCRIPTION: Implementation of the Neon adapter with Auth.js in an Express application. Sets up authentication routes and connects to the Neon database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport NeonAdapter from \"@auth/neon-adapter\"\nimport { Pool } from \"@neondatabase/serverless\"\n\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL })\n\nconst app = express()\n\napp.set(\"trust proxy\", true)\napp.use(\n  \"/auth/*\",\n  ExpressAuth({\n    providers: [],\n    adapter: NeonAdapter(pool),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropbox Callback URLs\nDESCRIPTION: Framework-specific callback URL patterns for Dropbox OAuth authentication. These URLs need to be configured in the Dropbox developer console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/dropbox.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/dropbox\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/dropbox\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for EVEOnline Authentication\nDESCRIPTION: Defines the callback URL for EVEOnline authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/eveonline.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/eveonline\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/eveonline\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for LinkedIn Provider\nDESCRIPTION: Specifies the callback URL to be used for LinkedIn authentication in different frameworks. This URL needs to be configured in the LinkedIn app console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/linkedin.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/linkedin\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/linkedin\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Postmark Authentication\nDESCRIPTION: Example of setting the required Postmark API key as an environment variable.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/postmark.mdx#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_POSTMARK_KEY=abc\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in React\nDESCRIPTION: This code snippet imports the Accordion and Accordions components from a local file path. These components are likely used to create collapsible sections in the FAQ.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/concepts/index.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Accordion, Accordions } from \"@/components/Accordion\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Coinbase Provider in Express\nDESCRIPTION: Code snippet for setting up the Coinbase provider in an Express application using ExpressAuth. This configuration goes in the app.ts file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/coinbase.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Coinbase from \"@auth/express/providers/coinbase\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Coinbase] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for Wikimedia OAuth\nDESCRIPTION: Example callback URL configurations for different frameworks when setting up Wikimedia OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wikimedia.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/wikimedia\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/wikimedia\n```\n\n----------------------------------------\n\nTITLE: Configuring Foursquare Callback URLs\nDESCRIPTION: Callback URL patterns for different frameworks to handle Foursquare OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/foursquare.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/foursquare\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/foursquare\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js for Express\nDESCRIPTION: Command to install the Express-specific Auth.js package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/express\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Kakao Provider\nDESCRIPTION: Defines the required environment variables for Kakao OAuth integration: AUTH_KAKAO_ID and AUTH_KAKAO_SECRET.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/kakao.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_KAKAO_ID\nAUTH_KAKAO_SECRET\n```\n\n----------------------------------------\n\nTITLE: Building and Running NextAuth.js Example App in Production Mode\nDESCRIPTION: Commands to build and start the NextAuth.js example application in production mode using pnpm.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs/README.md#2025-04-12_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npnpm run build\npnpm run start\n```\n\n----------------------------------------\n\nTITLE: Initializing SurrealDB Client using HTTP\nDESCRIPTION: TypeScript code to initialize a SurrealDB client using HTTP connection, useful for serverless environments. It sets up the connection with provided environment variables and exports a promise-based client.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/surrealdb.mdx#2025-04-12_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExperimentalSurrealHTTP } from \"surrealdb.js\"\n\nconst connectionString = process.env.AUTH_SURREALDB_CONNECTION\nconst username = process.env.AUTH_SURREALDB_USERNAME\nconst password = process.env.AUTH_SURREALDB_PASSWORD\nconst namespace = process.env.AUTH_SURREALDB_NAMESPACE\nconst database = process.env.AUTH_SURREALDB_DATABASE\nif (!connectionString || !username || !password || !namespace || !database) {\n  throw new Error(\n    \"SurrealDB connection string, username, password, namespace, and database are required\"\n  )\n}\n\nconst clientPromise = new Promise<ExperimentalSurrealHTTP<typeof fetch>>(\n  async (resolve, reject) => {\n    try {\n      const db = new ExperimentalSurrealHTTP(connectionString, {\n        fetch,\n        namespace,\n        database,\n        auth: {\n          username,\n          password,\n        },\n      })\n      resolve(db)\n    } catch (e) {\n      reject(e)\n    }\n  }\n)\n\n// Export a module-scoped Promise<Surreal>. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for WorkOS Provider\nDESCRIPTION: Specifies the callback URL format for different frameworks when using the WorkOS provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/workos.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/workos\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/workos\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/workos\n```\n\n----------------------------------------\n\nTITLE: Express.js Freshbooks Authentication Setup\nDESCRIPTION: Implementation of Freshbooks authentication middleware in an Express.js application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/freshbooks.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport FreshBooks from \"@auth/express/providers/freshbooks\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [FreshBooks] }))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth.js API Route Handler\nDESCRIPTION: Dynamic route handler configuration for Auth.js API endpoints\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport { GET, POST } from \"@/auth\"\n```\n\n----------------------------------------\n\nTITLE: Creating EdgeDB Migration\nDESCRIPTION: Command to create a new migration file based on changes to the EdgeDB schema, which tracks database schema evolution.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nedgedb migration create\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Wikimedia Auth Configuration\nDESCRIPTION: Implementation of Wikimedia authentication in SvelteKit framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wikimedia.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Wikimedia from \"@auth/sveltekit/providers/wikimedia\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Wikimedia],\n})\n```\n\n----------------------------------------\n\nTITLE: Building Qwik for Production\nDESCRIPTION: Command to generate production-ready client and server modules with TypeScript type checking.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/dev/qwik/README.md#2025-04-12_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build # or `pnpm build`\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Mailchimp Authentication\nDESCRIPTION: These snippets show the callback URL format for Mailchimp authentication in different frameworks. The URL structure varies slightly depending on the framework used.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailchimp.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/mailchimp\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/mailchimp\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/mailchimp\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Osu Authentication\nDESCRIPTION: These environment variables are required for Osu authentication. They likely represent the client ID and secret obtained from the Osu OAuth application console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osu.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_OSU_ID\nAUTH_OSU_SECRET\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button for Resend (SvelteKit)\nDESCRIPTION: This code snippet shows how to create a sign-in button component using Resend provider in a SvelteKit application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/email.mdx#2025-04-12_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { SignIn } from \"@auth/sveltekit/components\"\n</script>\n\n<div>\n  <nav>\n    <img src=\"/img/logo.svg\" alt=\"Company Logo\" />\n    <SignIn provider=\"resend\" />\n  </nav>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Threads Callback URLs\nDESCRIPTION: Examples of callback URL formats for different frameworks when setting up Threads OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/threads.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/threads\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/threads\n```\n\n----------------------------------------\n\nTITLE: Express Strava Authentication Configuration\nDESCRIPTION: Implementation of Strava authentication provider in Express.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/strava.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Strava from \"@auth/express/providers/strava\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Strava] }))\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for DynamoDB Access\nDESCRIPTION: JSON policy document that defines the permissions needed for the Auth.js adapter to interact with DynamoDB tables.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/dynamodb.mdx#2025-04-12_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"DynamoDBAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:BatchGetItem\",\n        \"dynamodb:BatchWriteItem\",\n        \"dynamodb:Describe*\",\n        \"dynamodb:List*\",\n        \"dynamodb:PutItem\",\n        \"dynamodb:DeleteItem\",\n        \"dynamodb:GetItem\",\n        \"dynamodb:Scan\",\n        \"dynamodb:Query\",\n        \"dynamodb:UpdateItem\"\n      ],\n      \"Resource\": [\n        \"arn:aws:dynamodb:{region}:{account_id}:table/{table_name}\",\n        \"arn:aws:dynamodb:{region}:{account_id}:table/{table_name}/index/GSI1\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client Dependencies\nDESCRIPTION: Commands to install PostgreSQL client and its type definitions\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/kysely.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pg\nnpm install --save-dev @types/pg\n```\n\n----------------------------------------\n\nTITLE: Implementing Battle.net Authentication in Qwik\nDESCRIPTION: Configuration for setting up Battle.net authentication in a Qwik application using the @auth/qwik library.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport BattleNet from \"@auth/qwik/providers/battlenet\";\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [BattleNet({\n      clientId: import.meta.env.AUTH_BATTLENET_CLIENT_ID\n      clientSecret: import.meta.env.AUTH_BATTLENET_CLIENT_SECRET\n      issuer: import.meta.env.AUTH_BATTLENET_ISSUER\n    })]\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress OAuth Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks to handle WordPress OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wordpress.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/wordpress\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/wordpress\n```\n\n----------------------------------------\n\nTITLE: Setting Mailgun API Key Environment Variable\nDESCRIPTION: Configuration of the Mailgun API key as an environment variable for authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mailgun.mdx#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nAUTH_MAILGUN_KEY=abc\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing NextAuth.js Example App\nDESCRIPTION: Commands to clone the NextAuth.js example repository and install its dependencies using pnpm.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/nextauthjs/next-auth-example.git\ncd next-auth-example\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Rendering Sponsors Table in HTML/Markdown\nDESCRIPTION: HTML table structure displaying sponsor logos, links, and categories with markdown formatting. Includes company logos, links to sponsor websites, and indicators for financial (💵) vs infrastructure (☁️) sponsors.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\">\n        <a href=\"https://clerk.com?utm_source=sponsorship&utm_medium=github&utm_campaign=authjs&utm_content=sponsor\" target=\"_blank\">\n          <img height=\"96\" src=\"https://avatars.githubusercontent.com/u/49538330?s=200&v=4\" alt=\"Clerk Logo\" />\n        </a><br />\n        <div>Clerk</div>\n        <sub>💵</sub>\n      </td>\n      <!-- Additional sponsor entries -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Custom VK API Version Configuration\nDESCRIPTION: Example of configuring custom VK API version and endpoints for authentication flow.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vk.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiVersion = \"5.126\"\n\nexport const { handlers, auth, signin, signout } = NextAuth({\n  providers: [\n    Vk({\n      accessTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,\n      requestTokenUrl: `https://oauth.vk.com/access_token?v=${apiVersion}`,\n      authorizationUrl: `https://oauth.vk.com/authorize?response_type=code&v=${apiVersion}`,\n      profileUrl: `https://api.vk.com/method/users.get?fields=photo_100&v=${apiVersion}`,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Strava Authentication Callback URLs\nDESCRIPTION: Example callback URLs required for Strava OAuth configuration across different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/strava.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/strava\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/strava\n```\n\n----------------------------------------\n\nTITLE: Exporting handle in SvelteKit hooks\nDESCRIPTION: Re-exporting the handle function in SvelteKit hooks file to enable Auth.js integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport { handle } from \"./auth\"\n```\n\n----------------------------------------\n\nTITLE: Installing Upstash Redis Dependencies\nDESCRIPTION: Commands to install the required Upstash Redis adapter and client packages using npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/upstash-redis.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @upstash/redis @auth/upstash-redis-adapter\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file by copying the example file. This file is used to store sensitive information and configuration details.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs-pages/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Development Server\nDESCRIPTION: Command to start the Vite development server with server-side rendering (SSR) enabled.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start # or `pnpm start`\n```\n\n----------------------------------------\n\nTITLE: Basic Error Page Implementation\nDESCRIPTION: Simple implementation of a custom error page component in Next.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/pages/error.mdx#2025-04-12_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function AuthErrorPage() {\n  return <>Oops</>\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Wikimedia Auth\nDESCRIPTION: Required environment variables for Wikimedia OAuth configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/wikimedia.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_WIKIMEDIA_ID\nAUTH_WIKIMEDIA_SECRET\n```\n\n----------------------------------------\n\nTITLE: Installing solid-start-vercel with npm\nDESCRIPTION: Command to install the solid-start-vercel adapter using npm package manager.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/solid-start/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -D solid-start-vercel\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Auth.js Docs\nDESCRIPTION: Command to install project dependencies using pnpm package manager before running the documentation site.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Unstorage Adapter and Dependencies\nDESCRIPTION: This command installs the necessary packages for using the Unstorage adapter with Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install unstorage @auth/unstorage-adapter\n```\n\n----------------------------------------\n\nTITLE: Generating EdgeDB Query Builder\nDESCRIPTION: Command to generate TypeScript code for the EdgeDB query builder, which enables type-safe EdgeQL queries in a code-first approach.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx @edgedb/generate edgeql-js\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Auth.js Docs\nDESCRIPTION: Command to start the development server for Auth.js documentation, which will be accessible at localhost:3000.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Patreon Provider in Express\nDESCRIPTION: Configuration code for setting up Patreon authentication in Express using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/patreon.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Patreon from \"@auth/express/providers/patreon\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Patreon] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Asgardeo Provider\nDESCRIPTION: These snippets show the callback URL format for Asgardeo authentication in different frameworks. The URL structure varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/asgardeo.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/asgardeo\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/asgardeo\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/asgardeo\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Notion Auth\nDESCRIPTION: Required environment variables for Notion OAuth configuration including client ID, secret, and redirect URI.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/notion.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_NOTION_ID\nAUTH_NOTION_SECRET\nAUTH_NOTION_REDIRECT_URI\n```\n\n----------------------------------------\n\nTITLE: Configuring Figma Authentication Callback URLs\nDESCRIPTION: Callback URL configurations for different frameworks to handle Figma OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/figma.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/figma\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/figma\n```\n\n----------------------------------------\n\nTITLE: Creating Neo4j Composite Constraints for Enterprise Edition\nDESCRIPTION: SQL commands to create composite node key constraints and indexes specifically for Neo4j Enterprise Edition to optimize Auth.js queries with more advanced indexing capabilities.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neo4j.mdx#2025-04-12_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE CONSTRAINT account_provider_composite_constraint IF NOT EXISTS\nON (a:Account) ASSERT (a.provider, a.providerAccountId) IS NODE KEY;\n\nCREATE INDEX account_provider_composite_index IF NOT EXISTS\nFOR (a:Account) ON (a.provider, a.providerAccountId);\n\nCREATE CONSTRAINT verification_token_composite_constraint IF NOT EXISTS\nON (v:VerificationToken) ASSERT (v.identifier, v.token) IS NODE KEY;\n\nCREATE INDEX verification_token_composite_index IF NOT EXISTS\nFOR (v:VerificationToken) ON (v.identifier, v.token);\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium Provider in SvelteKit\nDESCRIPTION: Code snippet for setting up Medium as an authentication provider in SvelteKit using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/medium.mdx#2025-04-12_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Medium from \"@auth/sveltekit/providers/medium\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Medium],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Integrations with Qwik CLI\nDESCRIPTION: Command to add additional integrations to a Qwik project such as Cloudflare, Netlify, Express Server, or Static Site Generator.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/dev/qwik/README.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm qwik add # or `pnpm qwik add`\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Pinterest OAuth\nDESCRIPTION: Defines the necessary environment variables for Pinterest OAuth integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pinterest.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAUTH_PINTEREST_ID\nAUTH_PINTEREST_SECRET\n```\n\n----------------------------------------\n\nTITLE: Displaying Auth.js Information using HTML\nDESCRIPTION: This HTML snippet creates a centered layout to showcase the Auth.js core library. It includes the project logo, title, description, and various badges for TypeScript support, npm version, download count, and GitHub stars.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/core/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n   <br/>\n   <a href=\"https://authjs.dev\" target=\"_blank\"><img width=\"150px\" src=\"https://authjs.dev/img/logo-sm.png\" /></a>\n   <h3 align=\"center\">Auth.js core library</a></h3>\n   <h4 align=\"center\">Authentication for the Web.</h4>\n   <p align=\"center\" style=\"align: center;\">\n      <a href=\"https://npm.im/next-auth\">\n        <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n      </a>\n      <a href=\"https://npm.im/@auth/core\">\n        <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/core?color=green&label=@auth/core&style=flat-square\">\n      </a>\n      <a href=\"https://www.npmtrends.com/@auth/core\">\n        <img src=\"https://img.shields.io/npm/dm/@auth/core?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n      </a>\n      <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n        <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n      </a>\n   </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Cloning Next.js Example Repository\nDESCRIPTION: Command to clone the Next.js Auth.js example application repository\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-resend.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nextauthjs/next-auth-example.git && cd next-auth-example\n```\n\n----------------------------------------\n\nTITLE: Express Passage Provider Configuration\nDESCRIPTION: Setup for implementing Passage authentication in an Express application using @auth/express package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/passage.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Passage from \"@auth/express/providers/passage\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Passage] }))\n```\n\n----------------------------------------\n\nTITLE: Structuring README with HTML and Markdown\nDESCRIPTION: This snippet combines HTML and Markdown to create a centered layout for a project README. It includes an image, headings, and badges for various project statistics.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/frameworks-template/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n   <br/>\n   <a href=\"https://authjs.dev\" target=\"_blank\"><img width=\"150px\" src=\"https://authjs.dev/img/logo-sm.png\" /></a>\n   <h3 align=\"center\"><framework-name> Auth</a></h3>\n   <h4 align=\"center\">Authentication for <framework-name>.</h4>\n   <p align=\"center\" style=\"align: center;\">\n      <a href=\"https://npm.im/next-auth\">\n        <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n      </a>\n      <a href=\"https://npm.im/@auth/<framework-id>\">\n        <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/<framework-id>?color=green&label=@auth/<framework-id>&style=flat-square\">\n      </a>\n      <a href=\"https://www.npmtrends.com/@auth/<framework-id>\">\n        <img src=\"https://img.shields.io/npm/dm/@auth/<framework-id>?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n      </a>\n      <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n        <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n      </a>\n   </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Starting Qwik Development Server\nDESCRIPTION: Command to start the Vite development server with server-side rendering (SSR) for Qwik development.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/dev/qwik/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm start # or `pnpm start`\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Neon Database Connection\nDESCRIPTION: Required environment variable configuration for connecting to a Neon database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/neon.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=\n```\n\n----------------------------------------\n\nTITLE: Running NextAuth.js Example App in Development Mode\nDESCRIPTION: Command to start the NextAuth.js example application in development mode using pnpm.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs/README.md#2025-04-12_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Silver Sponsors in JSX\nDESCRIPTION: This code maps through an array of silver sponsors, rendering each as a linked image with a name. The code creates a responsive flex layout with appropriate spacing for displaying sponsor information.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/sponsors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n    [\n      \"https://fusionauth.io\",\n      \"https://avatars.githubusercontent.com/u/41974756?s=200&v=4\",\n      \"FusionAuth\",\n    ],\n    [\n      \"https://stytch.com\",\n      \"https://avatars.githubusercontent.com/u/69983493?s=200&v=4\",\n      \"Stytch\",\n    ],\n    [\n      \"https://www.beyondidentity.com\",\n      \"https://avatars.githubusercontent.com/u/69811361?s=200&v=4\",\n      \"Beyond Identity\",\n    ],\n  ].map(([href, src, name]) => (\n    <a\n      key={name}\n      href={href}\n      target=\"_blank\"\n      className=\"flex flex-col items-center gap-3 text-center font-semibold text-sky-600\"\n    >\n      <img\n        className=\"w-20 rounded-md bg-slate-100 p-2\"\n        src={src}\n        alt={`${name} Logo`}\n      />\n      {name}\n    </a>\n  ))}\n```\n\n----------------------------------------\n\nTITLE: Building Qwik for Production\nDESCRIPTION: Command to generate production-ready client and server modules with TypeScript type checking.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/README.md#2025-04-12_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm build # or `pnpm build`\n```\n\n----------------------------------------\n\nTITLE: Displaying Firebase Adapter Information in HTML\nDESCRIPTION: This HTML snippet creates a centered layout with logos, badges, and links for the Firebase Adapter for NextAuth.js / Auth.js. It includes links to the documentation, NPM package, and GitHub repository.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-firebase/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://firebase.google.com\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/firebase.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Firebase Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/firebase-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/firebase-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/firebase-adapter?color=green&label=@auth/firebase-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/firebase-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/firebase-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting EdgeDB Environment Variables\nDESCRIPTION: Environment variable configuration for connecting to an EdgeDB instance using a DSN (Data Source Name).\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_EDGEDB_DSN=\"edgedb://edgedb:p4ssw0rd@10.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing FusionAuth in Qwik\nDESCRIPTION: Qwik framework configuration for FusionAuth provider integration using @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/fusionauth.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport FusionAuth from \"@auth/qwik/providers/fusionauth\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      FusionAuth({\n        clientId: import.meta.env.AUTH_FUSIONAUTH_ID,\n        clientSecret: import.meta.env.AUTH_FUSIONAUTH_SECRET,\n        tenantId: import.meta.env.AUTH_FUSIONAUTH_TENANT_ID,\n        issuer: import.meta.env.AUTH_FUSIONAUTH_ISSUER,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Auth.js for SvelteKit\nDESCRIPTION: Command to install the SvelteKit-specific Auth.js package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/installation.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/sveltekit\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for testing the OAuth setup.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/configuring-github.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Medium Provider in Express\nDESCRIPTION: Code snippet for integrating Medium as an authentication provider in Express using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/medium.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Medium from \"@auth/express/providers/medium\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Medium] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Zoho Callback URLs\nDESCRIPTION: Example callback URLs required for Zoho OAuth setup across different frameworks. These URLs need to be configured in the Zoho API Console.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/zoho.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/zoho\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/zoho\n```\n\n----------------------------------------\n\nTITLE: HTML Header Structure with Badges\nDESCRIPTION: HTML markup for displaying the Auth.js and PouchDB logos, along with various status badges showing package information and statistics.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-pouchdb/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://pouchdb.com\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/pouchdb.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>PouchDB Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/pouchdb-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/pouchdb-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/pouchdb-adapter?color=green&label=@auth/pouchdb-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/pouchdb-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/pouchdb-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Supabase Adapter in SvelteKit\nDESCRIPTION: This code demonstrates how to set up the Supabase adapter in a SvelteKit application using Auth.js.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/supabase.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport { SupabaseAdapter } from \"@auth/supabase-adapter\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [],\n  adapter: SupabaseAdapter({\n    url: process.env.SUPABASE_URL,\n    secret: process.env.SUPABASE_SERVICE_ROLE_KEY,\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickUp Callback URLs\nDESCRIPTION: Callback URL patterns for different frameworks when implementing ClickUp OAuth authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/click-up.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/clickup\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/clickup\n```\n\n----------------------------------------\n\nTITLE: Configuring VK Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks to handle VK OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/vk.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/vk\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/vk\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Dependency\nDESCRIPTION: Command to install the Zod schema validation library via npm or yarn.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication/credentials.mdx#2025-04-12_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zod\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Nextcloud Authentication\nDESCRIPTION: Specifies the callback URL to be used for Nextcloud authentication in different frameworks. The URL structure varies slightly depending on the framework being used.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/nextcloud.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/nextcloud\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/nextcloud\n```\n\n----------------------------------------\n\nTITLE: Configuring Salesforce Callback URLs\nDESCRIPTION: Callback URL configurations for different frameworks to handle Salesforce OAuth authentication responses.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/salesforce.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/salesforce\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/salesforce\n```\n\n----------------------------------------\n\nTITLE: Configuring FusionAuth Callback URLs\nDESCRIPTION: Example callback URLs for different frameworks to handle FusionAuth authentication responses. The URL pattern varies slightly between Next.js and other frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/fusionauth.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/fusionauth\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/fusionauth\n```\n\n----------------------------------------\n\nTITLE: Installing Hasura Adapter for Auth.js\nDESCRIPTION: Command to install the Hasura Adapter package for Auth.js using npm.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/hasura.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @auth/hasura-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Pinterest OAuth\nDESCRIPTION: Specifies the callback URL format for Pinterest OAuth integration across different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/pinterest.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/pinterest\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/pinterest\n```\n\n----------------------------------------\n\nTITLE: Setting up Beyond Identity callback URL\nDESCRIPTION: Example callback URLs for different frameworks that need to be configured in the Beyond Identity developer dashboard.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/beyondidentity.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/beyondidentity\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/beyondidentity\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/beyondidentity\n```\n\n----------------------------------------\n\nTITLE: Configuring Battle.net OAuth Callback URLs\nDESCRIPTION: Examples of callback URL formats for different frameworks when using Battle.net authentication.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/battlenet.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/battlenet\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/battlenet\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/battlenet\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Auth.js Documentation in JSX\nDESCRIPTION: This code snippet imports custom React components used for structuring the authentication documentation page. It includes a Screenshot component and Accordion components for organizing FAQ sections.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/authentication.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Screenshot } from \"@/components/Screenshot\"\nimport { Accordion, Accordions } from \"@/components/Accordion\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Unstorage Adapter in Qwik\nDESCRIPTION: This code snippet shows how to configure the Unstorage adapter in a Qwik application using QwikAuth$. It sets up the storage and configures the adapter.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport { UnstorageAdapter } from \"@auth/unstorage-adapter\"\nimport { createStorage } from \"unstorage\"\n\nconst storage = createStorage()\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [],\n    adapter: UnstorageAdapter(storage),\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URL for Instagram Provider\nDESCRIPTION: This snippet shows the callback URL format for Instagram authentication in different frameworks.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/instagram.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/instagram\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/instagram\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Qwik\nDESCRIPTION: Specifies the callback URL for Yandex OAuth in a Qwik application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/yandex\n```\n\n----------------------------------------\n\nTITLE: Implementing Okta Provider in Qwik\nDESCRIPTION: Configuration for integrating Okta authentication in a Qwik application using the @auth/qwik package.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/okta.mdx#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Okta from \"@auth/qwik/providers/okta\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [Okta],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL for Svelte\nDESCRIPTION: Specifies the callback URL for Yandex OAuth in a Svelte application.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/yandex.mdx#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/yandex\n```\n\n----------------------------------------\n\nTITLE: Rendering Gold Sponsors in JSX\nDESCRIPTION: This code snippet maps through an array of gold sponsors, rendering each as a linked image with a name. The snippet uses JSX syntax to create a responsive layout of sponsor logos.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/sponsors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n{[\n    [\n      \"https://a0.to/signup/nextauthjs\",\n      \"https://avatars.githubusercontent.com/u/2824157?v=4\",\n      \"Auth0 by Okta\",\n    ],\n  ].map(([href, src, name]) => (\n    <a\n      key={name}\n      href={href}\n      target=\"_blank\"\n      className=\"mt-8 flex flex-col items-center gap-3 text-center font-semibold text-sky-600\"\n    >\n      <img\n        className=\"w-20 rounded-md bg-slate-100 p-2\"\n        src={src}\n        alt={`${name} Logo`}\n      />\n      {name}\n    </a>\n  ))}\n```\n\n----------------------------------------\n\nTITLE: OpenCollective Logo Display Component\nDESCRIPTION: JSX markup for displaying OpenCollective logos using flex container and image elements.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/contributors.mdx#2025-04-12_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"my-4 flex gap-2\">\n  <img src=\"/img/etc/opencollective-logomark.svg\" width=\"64\" />\n  <img src=\"/img/etc/opencollective-wordmark.svg\" width=\"250\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing EdgeDB CLI on Linux/macOS\nDESCRIPTION: Command to install the EdgeDB Command Line Interface on Linux or macOS systems for managing EdgeDB instances and projects.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/edgedb.mdx#2025-04-12_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.edgedb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Osso Provider in Express\nDESCRIPTION: This snippet illustrates how to set up the Osso provider in an Express application using the ExpressAuth middleware. It configures the authentication route with the Osso provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osso.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Osso from \"@auth/express/providers/osso\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Osso] }))\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Configuration for Neo4j Adapter Documentation\nDESCRIPTION: HTML markup for the documentation header showing the Neo4j adapter integration with NextAuth.js/Auth.js. Includes centered logo images, badges for TypeScript support, npm version tracking, download statistics, and GitHub stars.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-neo4j/README.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://neo4j.com\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/neo4j.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Neo4j Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/neo4j-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/neo4j-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/neo4j-adapter?color=green&label=@auth/neo4j-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/neo4j-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/neo4j-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Notion Auth Configuration\nDESCRIPTION: Implementation of Notion authentication provider in SvelteKit using Auth.js integration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/notion.mdx#2025-04-12_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Notion from \"@auth/sveltekit/providers/notion\"\nimport {\n  AUTH_NOTION_ID,\n  AUTH_NOTION_SECRET,\n  AUTH_NOTION_REDIRECT_URI,\n} from \"$env/static/private\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [\n    Notion({\n      clientId: AUTH_NOTION_ID,\n      clientSecret: AUTH_NOTION_SECRET,\n      redirectUri: AUTH_NOTION_REDIRECT_URI,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Layout for Postgres Adapter Documentation\nDESCRIPTION: HTML markup for displaying the adapter logo, badges, and links in a centered layout. Includes package information and GitHub metrics.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-pg/README.md#2025-04-12_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://www.postgresql.org/\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/pg.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Postgres Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/pg-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/pg-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/pg-adapter?color=green&label=@auth/pg-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/pg-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/pg-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting up Mattermost Provider in Next.js\nDESCRIPTION: Implementation of Mattermost authentication provider in Next.js using NextAuth. Exports authentication handlers and utility functions.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mattermost.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport Mattermost from \"next-auth/providers/mattermost\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [Mattermost],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Default Key Prefixes for Unstorage Adapter\nDESCRIPTION: This code snippet shows the default key prefix options for the Unstorage adapter. These prefixes can be customized for different storage scenarios.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/unstorage.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions = {\n  baseKeyPrefix: \"\",\n  accountKeyPrefix: \"user:account:\",\n  accountByUserIdPrefix: \"user:account:by-user-id:\",\n  emailKeyPrefix: \"user:email:\",\n  sessionKeyPrefix: \"user:session:\",\n  sessionByUserIdKeyPrefix: \"user:session:by-user-id:\",\n  userKeyPrefix: \"user:\",\n  verificationTokenKeyPrefix: \"user:token:\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Osso Provider in SvelteKit\nDESCRIPTION: This code snippet demonstrates the setup of the Osso provider in a SvelteKit application using the SvelteKitAuth function. It exports the handle function and sign-in/out methods.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osso.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Osso from \"@auth/sveltekit/providers/osso\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Osso],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Variables in Qwik Configuration\nDESCRIPTION: Shows how to manually reference custom environment variable names in the Qwik Auth.js configuration when not following the standard naming convention.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/guides/environment-variables.mdx#2025-04-12_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { QwikAuth$ } from \"@auth/qwik\"\nimport Google from \"@auth/qwik/providers/google\"\n\nexport const { onRequest, useSession, useSignIn, useSignOut } = QwikAuth$(\n  () => ({\n    providers: [\n      Google({\n        clientId: import.meta.env.AUTH_WEBAPP_GOOGLE_CLIENT_ID,\n        clientSecret: import.meta.env.AUTH_WEBAPP_GOOGLE_CLIENT_SECRET,\n      }),\n    ],\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Next.js Freshbooks Authentication Setup\nDESCRIPTION: Configuration code for implementing Freshbooks authentication in a Next.js application using NextAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/freshbooks.mdx#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport FreshBooks from \"next-auth/providers/freshbooks\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [FreshBooks],\n})\n```\n\n----------------------------------------\n\nTITLE: Using getServerSession in a Server Component\nDESCRIPTION: Example of using getServerSession in a React Server Component to access the user's session information. This allows server-side authentication checks before rendering the component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/public/robots.txt#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default async function Page() {\n  const session = await getServerSession(authOptions)\n  return <pre>{JSON.stringify(session, null, 2)}</pre>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logos and Information in HTML\nDESCRIPTION: This HTML snippet creates a centered layout with logos for Auth.js and Hasura, along with various badges for the Hasura Adapter. It provides links to the official documentation and displays project statistics.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/packages/adapter-hasura/README.md#2025-04-12_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\">\n  <br/>\n  <a href=\"https://authjs.dev\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/logo-sm.png\" />\n  </a>\n  <a href=\"https://hasura.io\" target=\"_blank\">\n    <img height=\"64px\" src=\"https://authjs.dev/img/adapters/hasura.svg\"/>\n  </a>\n  <h3 align=\"center\"><b>Hasura Adapter</b> - NextAuth.js / Auth.js</a></h3>\n  <p align=\"center\" style=\"align: center;\">\n    <a href=\"https://npm.im/@auth/hasura-adapter\">\n      <img src=\"https://img.shields.io/badge/TypeScript-blue?style=flat-square\" alt=\"TypeScript\" />\n    </a>\n    <a href=\"https://npm.im/@auth/hasura-adapter\">\n      <img alt=\"npm\" src=\"https://img.shields.io/npm/v/@auth/hasura-adapter?color=green&label=@auth/hasura-adapter&style=flat-square\">\n    </a>\n    <a href=\"https://www.npmtrends.com/@auth/hasura-adapter\">\n      <img src=\"https://img.shields.io/npm/dm/@auth/hasura-adapter?label=%20downloads&style=flat-square\" alt=\"Downloads\" />\n    </a>\n    <a href=\"https://github.com/nextauthjs/next-auth/stargazers\">\n      <img src=\"https://img.shields.io/github/stars/nextauthjs/next-auth?style=flat-square\" alt=\"GitHub Stars\" />\n    </a>\n  </p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Overview in Qwik City\nDESCRIPTION: Displays the typical directory structure of a Qwik City project, showing the organization of public assets and source code including components and routes.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/dev/qwik/README.md#2025-04-12_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── public/\n│   └── ...\n└── src/\n    ├── components/\n    │   └── ...\n    └── routes/\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Callback URLs for BoxyHQ SAML\nDESCRIPTION: Framework-specific callback URL configurations for BoxyHQ SAML authentication endpoints.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/boxyhq-saml.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/boxyhq-saml\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/boxhq-saml\n```\n\n----------------------------------------\n\nTITLE: Adding CharacterID to JWT and Session in EVEOnline Authentication\nDESCRIPTION: Demonstrates how to add the CharacterID from the EVEOnline profile to the JWT and session. This is useful when using JWT for session management.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/eveonline.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst AuthConfig = {\n  callbacks: {\n    jwt({ token, profile }) {\n      if (profile) {\n        token.characterId = profile.CharacterID\n      }\n      return token\n    },\n    session({ session, token }) {\n      session.user.characterId = token.characterId\n      return session\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra\nDESCRIPTION: Import statement for the Callout component from Nextra's component library, used for displaying important notices in the documentation.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/concepts/session-strategies.mdx#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"nextra/components\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running NextAuth.js Example App in Production Mode\nDESCRIPTION: Commands to build the NextAuth.js example application and run it in production mode. This is used when deploying the application to a production environment.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs-pages/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running Qwik Preview Server\nDESCRIPTION: Command to create a production build and run a local preview server for testing the production build locally.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/dev/qwik/README.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm preview # or `pnpm preview`\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth.js in Express\nDESCRIPTION: Sets up authentication middleware in an Express application using GitHub as a provider.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/index.mdx#2025-04-12_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// server.ts\nimport { express } from \"express\"\nimport { ExpressAuth } from \"@auth/express\"\nimport GitHub from \"@auth/express/providers/github\"\n\nconst app = express()\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [GitHub] }))\n```\n\n----------------------------------------\n\nTITLE: Importing authOptions Configuration for NextAuth.js\nDESCRIPTION: Demonstrates importing the authOptions configuration object from a separate file, which contains the NextAuth.js configuration settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/qwik/public/robots.txt#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { authOptions } from \"./api/auth/[...nextauth]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cognito Callback URLs\nDESCRIPTION: Example callback URL configurations for different frameworks to handle Cognito authentication responses\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/cognito.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/cognito\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/cognito\n```\n\n----------------------------------------\n\nTITLE: Running NextAuth.js Example App in Development Mode\nDESCRIPTION: Command to start the NextAuth.js example application in development mode. This allows for local testing and development.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs-pages/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Prisma Environment Variables\nDESCRIPTION: Example of the DATABASE_URL environment variable configuration required for Prisma to establish a connection with your database.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/prisma.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA\n```\n\n----------------------------------------\n\nTITLE: Custom Verification Token Generation\nDESCRIPTION: Example of implementing custom verification token generation for Forward Email provider\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/forwardemail.mdx#2025-04-12_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport NextAuth from \"next-auth\"\nimport ForwardEmail from \"next-auth/providers/forwardemail\"\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    ForwardEmail({\n      async generateVerificationToken() {\n        return crypto.randomUUID()\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Mastodon Callback URLs\nDESCRIPTION: Framework-specific callback URL configurations for Mastodon OAuth authentication. These URLs need to be registered in your Mastodon application settings.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/mastodon.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/api/auth/callback/mastodon\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttps://example.com/auth/callback/mastodon\n```\n\n----------------------------------------\n\nTITLE: Express Foursquare Auth Configuration\nDESCRIPTION: Implementation of Foursquare authentication provider in Express.js framework.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/foursquare.mdx#2025-04-12_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport FourSquare from \"@auth/express/providers/foursquare\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [FourSquare] }))\n```\n\n----------------------------------------\n\nTITLE: Installing PouchDB Adapter Dependencies\nDESCRIPTION: Command to install required PouchDB packages and the authentication adapter using npm or yarn\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/pouchdb.mdx#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pouchdb pouchdb-find @auth/pouchdb-adapter\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file by copying the example file.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/apps/examples/nextjs/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncp .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom 404 Page with Travolta GIF in Next.js\nDESCRIPTION: This JSX snippet renders the custom 404 page. It includes an Image component to display the Travolta GIF with specific styling and attributes, followed by the pre-built NotFoundPage component.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/404.mdx#2025-04-12_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<div className=\"\">\n  <Image\n    src={ConfusedTravolta}\n    alt=\"Confused Travolta\"\n    unoptimized\n    className=\"mx-auto my-32 rounded-md\"\n    width={768}\n  />\n</div>\n\n<NotFoundPage />\n```\n\n----------------------------------------\n\nTITLE: Configuring Osu Provider in Express\nDESCRIPTION: This code demonstrates how to set up the Osu authentication provider in an Express application using ExpressAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osu.mdx#2025-04-12_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { ExpressAuth } from \"@auth/express\"\nimport Osu from \"@auth/express/providers/osu\"\n\napp.use(\"/auth/*\", ExpressAuth({ providers: [Osu] }))\n```\n\n----------------------------------------\n\nTITLE: Configuring Osu Provider in SvelteKit\nDESCRIPTION: This snippet illustrates the setup of the Osu authentication provider in a SvelteKit application using SvelteKitAuth.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/osu.mdx#2025-04-12_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { SvelteKitAuth } from \"@auth/sveltekit\"\nimport Osu from \"@auth/sveltekit/providers/osu\"\n\nexport const { handle, signIn, signOut } = SvelteKitAuth({\n  providers: [Osu],\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for TypeORM Connection\nDESCRIPTION: Environment variable configuration for the TypeORM database connection string. This example uses a PostgreSQL connection.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/adapters/typeorm.mdx#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nAUTH_TYPEORM_CONNECTION=postgres://postgres:adminadmin@0.0.0.0:5432/db\n```\n\n----------------------------------------\n\nTITLE: Setting Up Patreon Environment Variables\nDESCRIPTION: Required environment variables for Patreon OAuth authentication configuration.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/getting-started/providers/patreon.mdx#2025-04-12_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAUTH_PATREON_ID\nAUTH_PATREON_SECRET\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component from Nextra\nDESCRIPTION: Import statement for the Steps component from the Nextra components library, used for displaying the project history timeline.\nSOURCE: https://github.com/nextauthjs/next-auth/blob/main/docs/pages/contributors.mdx#2025-04-12_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps } from \"nextra/components\"\n```"
  }
]