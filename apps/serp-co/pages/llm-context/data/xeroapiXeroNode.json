[
  {
    "owner": "xeroapi",
    "repo": "xero-node",
    "content": "TITLE: Using Xero Accounting API for Various Operations (JavaScript)\nDESCRIPTION: This comprehensive example demonstrates various operations using the Xero Accounting API, including initializing the client, refreshing tokens, updating tenants, and performing operations like getting accounts, creating invoices, and adding attachments.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { XeroClient, HistoryRecords, Invoice } from 'xero-node';\n\nconst xero = new XeroClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  redirectUris: [`http://localhost:${port}/callback`],\n  scopes: 'openid profile email accounting.transactions offline_access'.split(\" \")\n});\n\nawait xero.initialize();\n\nconst tokenSet = getTokenSetFromDatabase(userId); // example function name\n\nawait xero.setTokenSet(tokenSet);\n\nif(tokenSet.expired()){\n  const validTokenSet = await xero.refreshToken();\n  // save the new tokenset\n}\n\nawait xero.updateTenants();\n\nconst activeTenantId = xero.tenants[0].tenantId;\n\n// GET all Accounts\nconst getAccountsResponse = await xero.accountingApi.getAccounts(activeTenantId);\n\nconst accountId = getAccountsResponse.body.accounts[0].accountID\n\n// GET one Account by ID\nconst getAccountResponse = await xero.accountingApi.getAccount(activeTenantId, accountId);\n\n// CREATE an Invoice\nconst invoices = {\n  invoices: [\n    {\n      type: Invoice.TypeEnum.ACCREC,\n      contact: {\n        contactID: contactId\n      },\n      lineItems: [\n        {\n          description: \"Acme Tires\",\n          quantity: 2.0,\n          unitAmount: 20.0,\n          accountCode: \"500\",\n          taxType: \"NONE\",\n          lineAmount: 40.0\n        }\n      ],\n      date: \"2019-03-11\",\n      dueDate: \"2018-12-10\",\n      reference: \"Website Design\",\n      status: Invoice.StatusEnum.AUTHORISED\n    }\n  ]\n};\n\nconst createdInvoicesResponse = await xero.accountingApi.createInvoices(activeTenantId, invoices)\n\nconst invoiceId = createdInvoicesResponse.body.invoices[0].invoiceID;\n\n// CREATE a History Record\nconst historyRecords: HistoryRecords = {\n  historyRecords: [\n    {\n      details: \"This is a history record\"\n    }\n  ]\n};\n\nconst createdInvoiceHistoryResponse = await xero.accountingApi.createInvoiceHistory(activeTenantId, invoiceId, historyRecords);\n\n// CREATE Attachment\nconst filename = \"xero-dev.png\";\nconst pathToUpload = path.resolve(__dirname, \"../public/images/xero-dev.png\");\nconst readStream = fs.createReadStream(pathToUpload);\nconst contentType = mime.lookup(filename);\n\nconst accountAttachmentsResponse = await xero.accountingApi.createInvoiceAttachmentByFileName(activeTenantId, invoiceId, filename, readStream, {\n  headers: {\n    'Content-Type': contentType\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Xero Client\nDESCRIPTION: Initialize and configure the XeroClient with client credentials, redirect URIs, and required OAuth scopes.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { XeroClient } from 'xero-node';\n\nconst xero = new XeroClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  redirectUris: [`http://localhost:${port}/callback`],\n  scopes: 'openid profile email accounting.transactions offline_access'.split(\" \"),\n  state: 'returnPage=my-sweet-dashboard', // custom params (optional)\n  httpTimeout: 3000, // ms (optional)\n  clockTolerance: 10 // seconds (optional)\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Bank Transactions with Xero Node.js SDK\nDESCRIPTION: Example of querying bank transactions using the Xero accounting API with various filter parameters including modified date, status conditions, ordering, pagination and unit decimal places.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeTenantId = 'XERO_TENANT_ID';\nconst ifModifiedSince: Date = new Date(\"2020-02-06T12:17:43.202-08:00\");\nconst where = 'Status==\"AUTHORISED\" AND Type==\"SPEND\"';\nconst order = 'Reference ASC';\nconst page = 1;\nconst unitdp = 4;\n\nconst response = await xero.accountingApi.getBankTransactions(activeTenantId, ifModifiedSince, where, order, page, unitdp);\n```\n\n----------------------------------------\n\nTITLE: Initializing Xero Client and Accessing API Sets (JavaScript)\nDESCRIPTION: This code snippet shows how to initialize a Xero client with various configuration options and access different API sets. It demonstrates the setup process for interacting with Xero's APIs.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst xero = new XeroClient({\n  clientId: 'YOUR_CLIENT_ID', // required\n  clientSecret: 'YOUR_CLIENT_SECRET', // required\n  redirectUris: [`http://localhost:${port}/callback`], // not used for client_credentials auth flow\n  grantType: 'client_credentials', // only used for client_credentials auth flow\n  scopes: 'openid profile email accounting.transactions offline_access'.split(\" \"), // not used for client_credentials auth flow\n  state: 'returnPage=my-sweet-dashboard', // custom params (optional), not used for client_credentials auth flow\n  httpTimeout: 3000, // ms (optional)\n  clockTolerance: 10 // seconds (optional)\n});\n\nxero.accountingApi\nxero.assetApi\nxero.projectApi\nxero.filesApi\nxero.payrollAUApi\nxero.payrollNZApi\nxero.payrollUKApi\n```\n\n----------------------------------------\n\nTITLE: Building OAuth Consent URL\nDESCRIPTION: Generate the authorization URL for OAuth2.0 authentication flow.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet consentUrl = await xero.buildConsentUrl();\nres.redirect(consentUrl);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Xero Token Using Initialized Client (JavaScript)\nDESCRIPTION: This snippet illustrates how to refresh a Xero token using a fully initialized client. It demonstrates token management and refreshing process using the Xero Node.js SDK.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { XeroClient } from 'xero-node';\n\nconst xero = new XeroClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  redirectUris: [`http://localhost:${port}/callback`],\n  scopes: 'openid profile email accounting.transactions offline_access'.split(\" \")\n});\n\nawait xero.initialize();\n\nconst tokenSet = getTokenSetFromDatabase(userId); // example function name\n\nawait xero.setTokenSet(tokenSet);\n\nif(tokenSet.expired()){\n  const validTokenSet = await xero.refreshToken();\n  // save the new tokenset\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Xero App Store Client and Querying Subscription (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a Xero App Store client using client credentials, obtain a token, and query a subscription. It's used for handling App Store subscriptions and retrieving subscription details.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst xeroAppStoreClient = new XeroClient({\n  clientId: process.env.CLIENT_ID,\n  clientSecret: process.env.CLIENT_SECRET,\n  grantType: 'client_credentials',\n  scopes: ['marketplace.billing']\n});\n\ntry {\n  await xeroAppStoreClient.getClientCredentialsToken()\n} catch(e) {\n  console.log('ERROR: ', e)\n}\n\nconst subscriptionRequest = await xeroAppStoreClient.appStoreApi.getSubscription(subscripionId)\n\nconsole.log(subscriptionRequest.body)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Connections Client\nDESCRIPTION: Initialize XeroClient for Custom Connections using client credentials grant type for M2M integrations.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { XeroClient } from 'xero-node';\n\nconst xero = new XeroClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  grantType: 'client_credentials'\n});\n\nconst tokenSet = await xero.getClientCredentialsToken();\n// save the tokenSet\n\nconst invoices = await xero.accountingApi.getInvoices('');\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Purchase Orders API\nDESCRIPTION: Demonstrates the correct way to handle null vs undefined query parameters when fetching purchase orders, showing how using null can break queries while undefined properly omits optional parameters.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst purchaseOrders = xero.accountingApi.getPurchaseOrders(tenant.tenantId, null, null, '2021-01-01', '2021-04-25', null, 1);\n\n// http://api-oauth2.xero.com/api.xro/2.0/PurchaseOrders?Status=&DateFrom=2008-01-01&DateTo=2021-04-25&order=&page=1\n// \"Status=&\" is breaking the above query\n// purchaseOrders will be an empty array\n\nconst purchaseOrders = xero.accountingApi.getPurchaseOrders(tenant.tenantId, undefined, undefined, '2021-01-01', '2021-04-25', undefined, 1);\n\n// http://api-oauth2.xero.com/api.xro/2.0/PurchaseOrders?DateFrom=2008-01-01&DateTo=2021-04-25&order=&page=1\n// params are omitted\n// purchaseOrders array will have results now\n```\n\n----------------------------------------\n\nTITLE: Refreshing Xero Token Using Empty Client (JavaScript)\nDESCRIPTION: This code demonstrates an alternative method to refresh a Xero token using an empty client. It's useful when you have a valid refresh token and want to refresh it without fully initializing the client.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { XeroClient } from 'xero-node';\n\nconst tokenSet = getTokenSetFromDatabase(userId); // example function name\n\nif(tokenSet.expired()){\n  const xero = new XeroClient();\n  const validTokenSet = await xero.refreshWithRefreshToken(client_id, client_secret, tokenSet.refresh_token)\n  // save the new tokenset\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Xero Node SDK\nDESCRIPTION: Command to install the xero-node SDK via npm package manager.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xero-node\n```\n\n----------------------------------------\n\nTITLE: CSRF Error Example in Xero Authentication\nDESCRIPTION: Shows the error message format when state mismatch is detected during the OAuth2 authentication process, demonstrating CSRF protection in action.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nRPError: state mismatch, expected user=1234, got: user=666\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Xero Node.js SDK\nDESCRIPTION: Command to run the test suite for the Xero Node.js SDK during development and contribution.\nSOURCE: https://github.com/xeroapi/xero-node/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```"
  }
]