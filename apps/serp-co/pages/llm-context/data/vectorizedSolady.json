[
  {
    "owner": "vectorized",
    "repo": "solady",
    "content": "TITLE: Custom Error Definitions\nDESCRIPTION: Custom error definitions for common token operation failures like overflow, underflow, and insufficient balances.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror TotalSupplyOverflow()\nerror AllowanceOverflow()\nerror AllowanceUnderflow()\nerror InsufficientBalance()\nerror InsufficientAllowance()\nerror InvalidPermit()\nerror PermitExpired()\nerror Permit2AllowanceIsFixedAtInfinity()\n```\n\n----------------------------------------\n\nTITLE: Implementing nonReadReentrant Modifier in Solidity\nDESCRIPTION: Modifier that protects view functions from read-only reentrancy attacks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguardtransient.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier nonReadReentrant() virtual\n```\n\n----------------------------------------\n\nTITLE: Installing Solady with npm for Hardhat or Truffle\nDESCRIPTION: Command to install Solady using npm for Hardhat or Truffle projects. This snippet demonstrates how to add Solady as a dependency in Node.js-based Ethereum development environments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/overview.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install solady\n```\n\n----------------------------------------\n\nTITLE: Implementing fullMulDiv Function for Full Precision Multiplication and Division in Solidity\nDESCRIPTION: Implements the fullMulDiv function, which calculates floor(x * y / d) with full precision. It throws if the result overflows a uint256 or when d is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fullMulDiv(uint256 x, uint256 y, uint256 d)\n    internal\n    pure\n    returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multicall Function in Solidity\nDESCRIPTION: This function allows multiple method calls on the contract itself using delegatecall. It takes an array of calldata and returns an array of encoded results. If any delegatecall reverts, the entire transaction is reverted.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/multicallable.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction multicall(bytes[] calldata data)\n    public\n    payable\n    virtual\n    returns (bytes[] memory)\n```\n\n----------------------------------------\n\nTITLE: Implementing ECDSA Signature Recovery in Solidity\nDESCRIPTION: Recovers the signer's address from a message digest hash and signature. Supports both standard and EIP-2098 short-form signatures.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recover(bytes32 hash, bytes memory signature)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: String Storage Operations\nDESCRIPTION: Core functions for manipulating string storage including setting, clearing, and retrieving values.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(StringStorage storage $, string memory s) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clear(StringStorage storage $) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(StringStorage storage $)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Group Sum for Bytes32 Keys\nDESCRIPTION: Sorts and uniquifies bytes32 keys array while updating the corresponding values array with grouped sums by key.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction groupSum(bytes32[] memory keys, uint256[] memory values)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Core Internal Transfer Function in ERC6909\nDESCRIPTION: Handles the core logic for token transfers, including authorization checks. This function powers both direct transfers and delegated transfers, and handles special cases for allowance management.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transfer(\n    address by,\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967 Proxy with Immutable Arguments in Solidity\nDESCRIPTION: This function deploys an ERC1967 proxy with a specified implementation and immutable arguments. It allows for more complex proxy setups.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967(address implementation, bytes memory args)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Internal Token Operation Functions\nDESCRIPTION: Internal functions for minting, burning, and transferring tokens with hooks for customization.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _mint(address to, uint256 amount) internal virtual\nfunction _burn(address from, uint256 amount) internal virtual\nfunction _transfer(address from, address to, uint256 amount) internal virtual\nfunction _approve(address owner, address spender, uint256 amount) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Manipulation Functions in Solidity\nDESCRIPTION: Creates functions for array operations such as truncate, free, hash, slice, copy, contains, and indexOf.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction truncate(uint256[] memory a, uint256 n)\n    internal\n    pure\n    returns (uint256[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Batch Execution Function for ERC6551 Account\nDESCRIPTION: Executes a sequence of calls from the account using the Call struct array. This batch variant provides efficiency when multiple operations need to be executed in a single transaction.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction executeBatch(Call[] calldata calls, uint8 operation)\n    public\n    payable\n    virtual\n    onlyValidSigner\n    returns (bytes[] memory results)\n```\n\n----------------------------------------\n\nTITLE: Computing Contract Deployment Address with CREATE Opcode in Solidity\nDESCRIPTION: Function to predict the address where a contract will be deployed using the CREATE opcode based on the deployer's address and nonce. Implements RLP encoding according to Ethereum Yellow Paper specifications.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction computeAddress(address deployer, uint256 nonce)\n    internal\n    pure\n    returns (address deployed)\n```\n\n----------------------------------------\n\nTITLE: ERC721 Safe Transfer Implementation\nDESCRIPTION: Safely transfers a token between addresses with additional data parameter and validation checks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safeTransferFrom(\n    address from,\n    address to,\n    uint256 id,\n    bytes calldata data\n) public payable virtual\n```\n\n----------------------------------------\n\nTITLE: Execute Operation Function for ERC6551 Account\nDESCRIPTION: Executes a call from the account with support for multiple operation types (CALL, DELEGATECALL, CREATE, CREATE2). Only valid signers can execute operations, and errors are bubbled up if the operation fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction execute(\n    address target,\n    uint256 value,\n    bytes calldata data,\n    uint8 operation\n) public payable virtual onlyValidSigner returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Proxy with Value and Arguments\nDESCRIPTION: Deploys a deterministic ERC1967I proxy with implementation, arguments, and salt, while depositing ETH. Combines deterministic address creation, argument storage, and funding in a single operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967I(\n    uint256 value,\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic Clone with Immutable Arguments in Solidity\nDESCRIPTION: This function deploys a deterministic clone of an implementation contract with immutable arguments and a salt. It returns the address of the deployed instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cloneDeterministic(\n    uint256 value,\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Making Gas-Limited Contract Calls with Value in Solidity\nDESCRIPTION: Function that makes a call with specified gas limit and capped return data copying. Returns success status, whether the return data exceeded the copy limit, and the result data. Useful for preventing out-of-gas errors in the calling contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryCall(\n    address target,\n    uint256 value,\n    uint256 gasStipend,\n    uint16 maxCopy,\n    bytes memory data\n)\n    internal\n    returns (bool success, bool exceededMaxCopy, bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal Proxy Operations in Solidity\nDESCRIPTION: Defines a set of functions for deploying and managing minimal proxies. These functions include methods for creating clones, deterministic clones, and generating initialization code for proxies.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clone(address implementation)\n    internal\n    returns (address instance)\n\nfunction clone(uint256 value, address implementation)\n    internal\n    returns (address instance)\n\nfunction cloneDeterministic(address implementation, bytes32 salt)\n    internal\n    returns (address instance)\n\nfunction cloneDeterministic(\n    uint256 value,\n    address implementation,\n    bytes32 salt\n) internal returns (address instance)\n\nfunction initCode(address implementation)\n    internal\n    pure\n    returns (bytes memory c)\n\nfunction initCodeHash(address implementation)\n    internal\n    pure\n    returns (bytes32 hash)\n\nfunction predictDeterministicAddress(\n    address implementation,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Deploying Minimal ERC1967 Proxy in Solidity\nDESCRIPTION: This function deploys a minimal ERC1967 proxy with a specified implementation. It's designed for use with UUPS upgradeable contracts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967(address implementation)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: StringStorage Struct Definition\nDESCRIPTION: A gas-optimized string storage struct that packs length with first 31 bytes if <255 bytes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct StringStorage {\n    bytes32 _spacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Proxy with Arguments\nDESCRIPTION: Deploys a minimal ERC1967I proxy with the specified implementation and immutable arguments. The arguments are stored in the proxy and can be accessed by the implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967I(address implementation, bytes memory args)\n    internal\n    returns (address)\n```\n\n----------------------------------------\n\nTITLE: Implementing int256 Array Shuffling Function in Solidity\nDESCRIPTION: Shuffles an int256 array in-place using the Fisher-Yates algorithm.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, int256[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Implementing nonReadReentrant Modifier in Solidity\nDESCRIPTION: Defines a modifier that guards a view function from read-only reentrancy. This modifier can be applied to view functions to prevent read-only reentrancy attacks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguard.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier nonReadReentrant() virtual\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address for Contract Deployment in Solidity\nDESCRIPTION: Calculates the deterministic address of a contract deployment given the initialization code hash, salt, and deployer address. The returned address has dirty upper 96 bits that need cleaning if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_88\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(\n    bytes32 hash,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Type Conversion Functions in Solidity\nDESCRIPTION: Creates functions to cast between uint256 arrays and other data type arrays (address, bool, bytes32) without copying the underlying data.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction asAddressArray(uint256[] memory a)\n    internal\n    pure\n    returns (address[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Writing Counterfactual Data to Storage Contract in Solidity\nDESCRIPTION: Function to write data into a storage contract with a salt and return its CREATE2 deterministic address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction writeCounterfactual(bytes memory data, bytes32 salt)\n    internal\n    returns (address pointer)\n```\n\n----------------------------------------\n\nTITLE: WETH Withdrawal Function\nDESCRIPTION: Enables users to burn their WETH tokens and receive an equivalent amount of ETH. Takes an amount parameter specifying how much WETH to withdraw.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/weth.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction withdraw(uint256 amount) public virtual\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Authentication Verification Function\nDESCRIPTION: Main verification function for WebAuthn Authentication Assertions that checks authenticator data, client JSON type, challenge, and signature validity.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/webauthn.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verify(\n    bytes memory challenge,\n    bool requireUserVerification,\n    WebAuthnAuth memory auth,\n    bytes32 x,\n    bytes32 y\n) internal view returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON String in Solidity\nDESCRIPTION: Implements a function to parse a JSON string and return the root Item. It reverts if the input is not valid JSON according to RFC 8259.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parse(string memory s)\n    internal\n    pure\n    returns (Item memory result)\n```\n\n----------------------------------------\n\nTITLE: ERC721 Core Transfer Event Definition\nDESCRIPTION: Defines the Transfer event that is emitted when a token is transferred between addresses.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(\n    address indexed from, address indexed to, uint256 indexed id\n)\n```\n\n----------------------------------------\n\nTITLE: ETH Transfer Error Definition\nDESCRIPTION: Custom error for failed ETH transfers\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/safetransferlib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ETHTransferFailed()\n```\n\n----------------------------------------\n\nTITLE: Implementing Authority and Proxy Operations for EIP7702 in Solidity\nDESCRIPTION: Provides functions for querying and managing EIP7702 proxies, including delegation, implementation, and admin operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/libeip7702.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegationOf(address account)\n    internal\n    view\n    returns (address result)\n\nfunction delegationAndImplementationOf(address account)\n    internal\n    view\n    returns (address delegation, address implementation)\n\nfunction implementationOf(address target)\n    internal\n    view\n    returns (address result)\n\nfunction isEIP7702Proxy(address target)\n    internal\n    view\n    returns (bool result)\n\nfunction proxyInitCode(address initialImplementation, address initialAdmin)\n    internal\n    pure\n    returns (bytes memory)\n\nfunction deployProxy(address initialImplementation, address initialAdmin)\n    internal\n    returns (address instance)\n\nfunction deployProxyDeterministic(\n    address initialImplementation,\n    address initialAdmin,\n    bytes32 salt\n) internal returns (address instance)\n\nfunction proxyAdmin(address proxy) internal view returns (address result)\n\nfunction changeProxyAdmin(address proxy, address newAdmin) internal\n\nfunction upgradeProxy(address proxy, address newImplementation) internal\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Unpacking in Solidity\nDESCRIPTION: Unpacks a number packed using packSci back into its original value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unpackSci(uint256 packed)\n    internal\n    pure\n    returns (uint256 unpacked)\n```\n\n----------------------------------------\n\nTITLE: Upgrading ERC1967 Proxy via Bootstrap\nDESCRIPTION: Replaces the implementation at an ERC1967 proxy instance. This is used to upgrade a bootstrapped proxy to point to its actual implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_39\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bootstrapERC1967(address instance, address implementation)\n    internal\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Conversion in Solidity\nDESCRIPTION: Converts x to scientific notation format, returning the mantissa and exponent separately.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sci(uint256 x)\n    internal\n    pure\n    returns (uint256 mantissa, uint256 exponent)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Array Operations in Solidity\nDESCRIPTION: Creates functions for dynamic array operations such as length, wrap, clear, resize, expand, and append (p) for various data types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(DynamicArray memory a, uint256 data)\n    internal\n    pure\n    returns (DynamicArray memory result)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967 Beacon Proxy with Value in Solidity\nDESCRIPTION: Function that creates a deterministic minimal ERC1967 beacon proxy with a specified beacon address and salt, while depositing ETH during deployment. Returns a boolean indicating if the proxy was already deployed and the address of the proxy instance. Designed for ERC4337 factories.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_50\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967BeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1155 Batch Token Transfer\nDESCRIPTION: Internal function to safely transfer multiple token IDs and amounts between addresses. Includes validation for zero address, array lengths, balances, and smart contract receivers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeBatchTransfer(\n    address by,\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing upgrade Function in Solidity\nDESCRIPTION: Upgrades a proxy to point to a new implementation. The caller must be the admin of the proxy as recorded in the factory's storage. Accepts ETH value that can be forwarded to the implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction upgrade(address proxy, address implementation) public payable\n```\n\n----------------------------------------\n\nTITLE: Core ERC20 Functions\nDESCRIPTION: Implementation of core ERC20 token functions including totalSupply, balanceOf, allowance, approve, transfer, and transferFrom.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction totalSupply() public view virtual returns (uint256 result)\nfunction balanceOf(address owner) public view virtual returns (uint256 result)\nfunction allowance(address owner, address spender) public view virtual returns (uint256 result)\nfunction approve(address spender, uint256 amount) public virtual returns (bool)\nfunction transfer(address to, uint256 amount) public virtual returns (bool)\nfunction transferFrom(address from, address to, uint256 amount) public virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Check if uint256 Array is Sorted and Uniquified in Solidity\nDESCRIPTION: Checks if a uint256 array is strictly ascending (sorted and uniquified). This function is useful for validating the input for set operations that require sorted and uniquified arrays.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_8\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isSortedAndUniquified(uint256[] memory a)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Function that creates a deterministic ERC1967I beacon proxy with a specified beacon address and salt. Returns a boolean indicating if the proxy was already deployed and the address of the proxy instance. Designed for ERC4337 factories.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_70\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967IBeaconProxy(\n    address beacon,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Last IndexOf Function with Offset in Solidity\nDESCRIPTION: Finds the last occurrence of a needle string within a subject string starting from a specified position.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lastIndexOf(\n    string memory subject,\n    string memory needle,\n    uint256 from\n) internal pure returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Direct Token Transfer Function in ERC6909\nDESCRIPTION: Transfers a specified amount of a token ID from the caller to a recipient. Requires the caller to have sufficient balance and emits a Transfer event.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transfer(address to, uint256 id, uint256 amount)\n    public\n    payable\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Execution Function in Solidity\nDESCRIPTION: Defines the execute function that handles batch execution of calls. It supports different execution modes and can process single batches or batches of batches.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc7821.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction execute(bytes32 mode, bytes calldata executionData)\n    public\n    payable\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Ownership Cycle Detection for ERC6551 Account\nDESCRIPTION: Internal function that checks for circular ownership patterns which could lead to security vulnerabilities or logical issues in token-bound accounts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _hasOwnershipCycle() internal view virtual returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967 Proxy in Solidity\nDESCRIPTION: This function creates a deterministic ERC1967 proxy with a specified implementation and salt. It's designed for use in ERC4337 factories and handles existing deployments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967(address implementation, bytes32 salt)\n    internal\n    returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Internal Functions\nDESCRIPTION: Internal implementation of mint, burn, transfer and approval operations with security checks\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _mint(address to, uint256 id, uint256 amount, bytes memory data)\n    internal\n    virtual\n\nfunction _burn(address from, uint256 id, uint256 amount) internal virtual\n\nfunction _setApprovalForAll(address by, address operator, bool isApproved)\n    internal\n    virtual\n\nfunction _safeTransfer(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967Factory Bytecode Constant in Solidity\nDESCRIPTION: Declaration of the canonical ERC1967Factory bytecode constant for EVM chains. This bytecode is particularly useful for forge tests where it can be applied to the ADDRESS using vm.etch.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factoryconstants.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes internal constant BYTECODE =\n    hex\"6080604052600436106100b15760003560e01c8063545e7c611161006957806399a88ec41161004e57806399a88ec41461019d578063a97b90d5146101b0578063db4c545e146101c357600080fd5b8063545e7c61146101775780639623609d1461018a57600080fd5b80633729f9221161009a5780633729f922146101315780634314f120146101445780635414dff01461015757600080fd5b80631acfd02a146100b65780632abbef15146100d8575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610604565b6101e6565b005b3480156100e457600080fd5b506101076100f3366004610637565b30600c908152600091909152602090205490565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61010761013f366004610652565b610237565b6101076101523660046106d7565b61024e565b34801561016357600080fd5b50610107610172366004610738565b610267565b610107610185366004610604565b61029a565b6100d66101983660046106d7565b6102af565b6100d66101ab366004610604565b61035f565b6101076101be366004610751565b610370565b3480156101cf57600080fd5b506101d86103a9565b604051908152602001610128565b30600c52816000526020600c2033815414610209576382b429006000526004601cfd5b81905580827f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f600080a35050565b60006102468484843685610370565b949350505050565b600061025e8585838087876103c2565b95945050505050565b6000806102726103a9565b905060ff600053806035523060601b6001528260155260556000209150600060355250919050565b60006102a88383368461024e565b9392505050565b30600c5283600052336020600c2054146102d1576382b429006000526004601cfd5b6040518381527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc602082015281836040830137600080836040018334895af1610331573d610327576355299b496000526004601cfd5b3d6000803e3d6000fd5b5082847f5d611f318680d00598bb735d61bacf0c514c6b50e1e5ad30040a4df2b12791c7600080a350505050565b61036c82823660006102af565b5050565b60008360601c33148460601c151761039057632f6348366000526004601cfd5b61039f868686600187876103c2565b9695505050505050565b6000806103b461049c565b608960139091012092915050565b6000806103cd61049c565b90508480156103e757866089601384016000f592506103f3565b6089601383016000f092505b50816104075763301164256000526004601cfd5b8781527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc602082015282846040830137600080846040018334865af161045a573d6103275763301164256000526004601cfd5b30600c5281600052866020600c20558688837fc95935a66d15e0da5e412aca0ad27ae891d20b2fb91cf3994b6a3bf2b8178082600080a4509695505050505050565b6040513060701c801561054257666052573d6000fd607b8301527f3d356020355560408036111560525736038060403d373d3d355af43d6000803e60748301527f3735a920a3ca505d382bbc545af43d6000803e6052573d6000fd5b3d6000f35b60548301527f14605757363d3d37363d7f360894a13ba1a3210667c828492db98dca3e2076cc60348301523060148301526c607f3d8160093d39f33d3d337382525090565b66604c573d6000fd60758301527f3d3560203555604080361115604c5736038060403d373d3d355af43d6000803e606e8301527f3735a920a3ca505d382bbc545af43d6000803e604c573d6000fd5b3d6000f35b604e8301527f14605157363d3d37363d7f360894a13ba1a3210667c828492db98dca3e2076cc602e83015230600e8301526c60793d8160093d39f33d3d336d82525090565b803573ffffffffffffffffffffffffffffffffffffffff811681146105ff57600080fd5b919050565b6000806040838503121561061757600080fd5b610620836105db565b915061062e602084016105db565b90509250929050565b60006020828403121561064957600080fd5b6102a8826105db565b60008060006060848603121561066757600080fd5b610670846105db565b925061067e602085016105db565b9150604084013590509250925092565b60008083601f8401126106a057600080fd5b50813567ffffffffffffffff8111156106b857600080fd5b6020830191508360208285010111156106d057600080fd5b9250929050565b600080600080606085870312156106ed57600080fd5b6106f6856105db565b9350610704602086016105db565b9250604085013567ffffffffffffffff81111561072057600080fd5b61072c8782880161068e565b95989497509550505050565b60006020828403121561074a57600080fd5b5035919050565b60008060008060006080868803121561076957600080fd5b610772866105db565b9450610780602087016105db565b935060408601359250606086013567ffffffffffffffff8111156107a357600080fd5b6107af8882890161068e565b96999598509396509294939250505056fea26469706673582212200ac7c3ccbc2d311c48bf5465b021542e0e306fe3c462c060ba6a3d2f81ff6c5f64736f6c63430008130033\"\n```\n\n----------------------------------------\n\nTITLE: Access Control Modifiers\nDESCRIPTION: Function modifiers implementing role-based access control checks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyRoles(uint256 roles) virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyOwnerOrRoles(uint256 roles) virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyRolesOrOwner(uint256 roles) virtual\n```\n\n----------------------------------------\n\nTITLE: Uniquify Sorted uint256 Array in Solidity\nDESCRIPTION: Removes duplicate elements from an ascendingly sorted uint256 memory array. For performance, it does not revert if the array is not sorted, but simply removes consecutive duplicate elements.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction uniquifySorted(uint256[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967 Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Function that deploys a minimal ERC1967 beacon proxy with a specified beacon address and initialization arguments. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_54\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967BeaconProxy(address beacon, bytes memory args)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Function in Solidity\nDESCRIPTION: Concatenates two strings efficiently without de-aligning the free memory pointer.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction concat(string memory a, string memory b)\n    internal\n    pure\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: EIP-2612 Permit Functions\nDESCRIPTION: Implementation of EIP-2612 permit functionality including nonce tracking and domain separator.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual\nfunction DOMAIN_SEPARATOR() public view virtual returns (bytes32 result)\nfunction nonces(address owner) public view virtual returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: ERC721 Token Minting Implementation\nDESCRIPTION: Internal function to mint new tokens with extra data and unchecked validation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _mintAndSetExtraDataUnchecked(address to, uint256 id, uint96 value)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Subtracting Months from Timestamp in Solidity\nDESCRIPTION: Subtracts a specified number of months from a Unix timestamp. Adjusts the day if necessary when the target month has fewer days than the original day.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction subMonths(uint256 timestamp, uint256 numMonths)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967 Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Function that deploys a deterministic minimal ERC1967 beacon proxy with a specified beacon address, initialization arguments, and salt. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_56\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967BeaconProxy(\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Rescue Operation Functions\nDESCRIPTION: Functions for rescuing different types of tokens (ETH, ERC20, ERC721, ERC1155, ERC6909) from the contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/lifebuoy.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rescueETH(address to, uint256 amount) public payable virtual onlyRescuer(_LIFEBUOY_RESCUE_ETH_LOCK)\n\nfunction rescueERC20(address token, address to, uint256 amount) public payable virtual onlyRescuer(_LIFEBUOY_RESCUE_ERC20_LOCK)\n\nfunction rescueERC721(address token, address to, uint256 id) public payable virtual onlyRescuer(_LIFEBUOY_RESCUE_ERC721_LOCK)\n\nfunction rescueERC1155(address token, address to, uint256 id, uint256 amount, bytes calldata data) public payable virtual onlyRescuer(_LIFEBUOY_RESCUE_ERC1155_LOCK)\n\nfunction rescueERC6909(address token, address to, uint256 id, uint256 amount) public payable virtual onlyRescuer(_LIFEBUOY_RESCUE_ERC6909_LOCK)\n```\n\n----------------------------------------\n\nTITLE: Implementing divWad Function for Fixed-Point Division in Solidity\nDESCRIPTION: Implements the divWad function, which performs fixed-point division equivalent to (x * WAD) / y rounded down.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction divWad(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Implementing deployDeterministic Function in Solidity\nDESCRIPTION: Deploys a proxy with a deterministic address using CREATE2 and a salt value. The implementation and admin are specified, and ETH value is forwarded to the proxy during deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministic(\n    address implementation,\n    address admin,\n    bytes32 salt\n) public payable returns (address proxy)\n```\n\n----------------------------------------\n\nTITLE: WAD-Denominated Square Root in Solidity\nDESCRIPTION: Calculates the square root of x, denominated in WAD (10^18), rounded down to the nearest integer.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sqrtWad(uint256 x) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Epoch Day to Date in Solidity\nDESCRIPTION: Converts the number of days since 1970-01-01 back to a Gregorian calendar date. Returns the year, month, and day components. Inputs outside supported ranges result in undefined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction epochDayToDate(uint256 epochDay)\n    internal\n    pure\n    returns (uint256 year, uint256 month, uint256 day)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Safe Transfer Implementation\nDESCRIPTION: Function to safely transfer ERC20 tokens between addresses with specified amount\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/safetransferlib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safeTransferFrom(address token, address from, address to, uint256 amount) internal\n```\n\n----------------------------------------\n\nTITLE: Bytes Manipulation Functions\nDESCRIPTION: Collection of utility functions for manipulating byte sequences including replace, index searches, contains checks, and string operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbytes.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction replace(\n    bytes memory subject,\n    bytes memory needle,\n    bytes memory replacement\n) internal pure returns (bytes memory result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction indexOf(bytes memory subject, bytes memory needle, uint256 from)\n    internal\n    pure\n    returns (uint256 result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lastIndexOf(\n    bytes memory subject,\n    bytes memory needle,\n    uint256 from\n) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Verifying Multiple Merkle Proofs with Calldata in Solidity\nDESCRIPTION: This function verifies if multiple leaves exist in a Merkle tree with the given root, using the provided proof and flags. It uses calldata for gas optimization when the inputs are passed directly from the contract's external call.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyMultiProofCalldata(\n    bytes32[] calldata proof,\n    bytes32 root,\n    bytes32[] calldata leaves,\n    bool[] calldata flags\n) internal pure returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Implementing upgradeAndCall Function in Solidity\nDESCRIPTION: Upgrades a proxy to point to a new implementation and then calls the proxy with encoded data. The caller must be the admin of the proxy. Accepts ETH value that can be forwarded to the implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction upgradeAndCall(\n    address proxy,\n    address implementation,\n    bytes calldata data\n) public payable\n```\n\n----------------------------------------\n\nTITLE: Permit2 Integration\nDESCRIPTION: Implementation of Permit2 functionality for token approvals and transfers\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/safetransferlib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction permit2(address token, address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal\n```\n\n----------------------------------------\n\nTITLE: JSON Escape Function with Quotes Option in Solidity\nDESCRIPTION: Escapes a string for use in JSON with optional double quotes wrapping.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction escapeJSON(string memory s, bool addDoubleQuotes)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing mulWad Function for Fixed-Point Multiplication in Solidity\nDESCRIPTION: Implements the mulWad function, which performs fixed-point multiplication equivalent to (x * y) / WAD rounded down.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mulWad(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Validating Unix Timestamp in Solidity\nDESCRIPTION: Checks if a Unix timestamp is within the supported range. Ensures that timestamp calculations and conversions will produce valid results.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isSupportedTimestamp(uint256 timestamp)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Finding Last Set Bit in Solidity\nDESCRIPTION: Returns the index of the most significant bit of a uint256 value. Returns 256 if input is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fls(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Decoding Single Call Execution Data in ERC7579 (With Checks)\nDESCRIPTION: Decodes a single call execution data into target address, value, and calldata. Will revert if the execution data is not correctly encoded.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeSingle(bytes calldata executionData)\n    internal\n    pure\n    returns (address target, uint256 value, bytes calldata data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Ownership Functions in Solidity\nDESCRIPTION: Defines internal functions for initializing and setting the owner, checking ownership, and managing ownership handover validity.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _guardInitializeOwner()\n    internal\n    pure\n    virtual\n    returns (bool guard)\n\nfunction _initializeOwner(address newOwner) internal virtual\n\nfunction _setOwner(address newOwner) internal virtual\n\nfunction _checkOwner() internal view virtual\n\nfunction _ownershipHandoverValidFor()\n    internal\n    view\n    virtual\n    returns (uint64)\n```\n\n----------------------------------------\n\nTITLE: Making Gas-Limited Static Contract Calls in Solidity\nDESCRIPTION: Function that makes a static call with specified gas limit and capped return data copying. Returns success status, whether the return data exceeded the copy limit, and the result data. Cannot modify state.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryStaticCall(\n    address target,\n    uint256 gasStipend,\n    uint16 maxCopy,\n    bytes memory data\n)\n    internal\n    view\n    returns (bool success, bool exceededMaxCopy, bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing ECDSA Signature Recovery with EIP-2098 Format in Solidity\nDESCRIPTION: Recovers the signer's address from a message digest hash and EIP-2098 short-form signature components.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recover(bytes32 hash, bytes32 r, bytes32 vs)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: String Repeat Function in Solidity\nDESCRIPTION: Repeats a subject string a specified number of times.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction repeat(string memory subject, uint256 times)\n    internal\n    pure\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Implementing upgradeToAndCall Function for UUPS Proxy in Solidity\nDESCRIPTION: Implements the upgradeToAndCall function that allows upgrading the proxy's implementation to a new address and optionally calling a function on the new implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/uupsupgradeable.md#2025-04-16_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction upgradeToAndCall(address newImplementation, bytes calldata data)\n    public\n    payable\n    virtual\n    onlyProxy\n```\n\n----------------------------------------\n\nTITLE: String Slice Function with Start in Solidity\nDESCRIPTION: Extracts a substring from start byte offset to the end of the string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction slice(string memory subject, uint256 start)\n    internal\n    pure\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Implementing deployAndCall Function in Solidity\nDESCRIPTION: Deploys a new proxy for a given implementation with a specified admin, then calls the proxy with encoded data. Returns the deployed proxy address. ETH value is forwarded to the proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployAndCall(\n    address implementation,\n    address admin,\n    bytes calldata data\n) public payable returns (address proxy)\n```\n\n----------------------------------------\n\nTITLE: ERC1271 Signer Implementation for ERC6551\nDESCRIPTION: Override for the ERC1271 _erc1271Signer function that uses the account owner as the ERC1271 signer, enabling signature verification for token-bound accounts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271Signer()\n    internal\n    view\n    virtual\n    override(ERC1271)\n    returns (address)\n```\n\n----------------------------------------\n\nTITLE: Verifying P256 Signature Without Malleability Check in Solidity\nDESCRIPTION: Function to verify a P256 signature without performing a malleability check. It takes the hash, signature components (r, s), and public key components (x, y) as inputs.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifySignatureAllowMalleability(\n    bytes32 hash,\n    bytes32 r,\n    bytes32 s,\n    bytes32 x,\n    bytes32 y\n) internal view returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Generating ERC6551 Account Initialization Code in Solidity\nDESCRIPTION: Function to generate the initialization code for an ERC6551 account based on implementation, salt, chain ID, token contract, and token ID.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc6551.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCode(\n    address implementation_,\n    bytes32 salt_,\n    uint256 chainId_,\n    address tokenContract_,\n    uint256 tokenId_\n) internal pure returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Signed Message Hash in Solidity\nDESCRIPTION: This function generates an Ethereum Signed Message hash from a given hash, compatible with the eth_sign JSON-RPC method as part of EIP-191.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/signaturecheckerlib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing deploy Function in Solidity\nDESCRIPTION: Deploys a new proxy for a given implementation with a specified admin and returns its address. ETH value passed to this function is forwarded to the proxy during deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deploy(address implementation, address admin)\n    public\n    payable\n    returns (address proxy)\n```\n\n----------------------------------------\n\nTITLE: Making Contract Calls with Value in Solidity\nDESCRIPTION: Function that makes a call to a target contract with specified data and value. Returns the result of the call. Reverts if the target is not a contract or if the call fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction callContract(address target, uint256 value, bytes memory data)\n    internal\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1271 isValidSignature Interface in Solidity\nDESCRIPTION: Implements the standard ERC1271 isValidSignature function that validates a signature and returns the appropriate magic value. This function enables the contract to be used as a signer.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidSignature(bytes32 hash, bytes calldata signature)\n    public\n    view\n    virtual\n    returns (bytes4 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Core ERC5805 Functions for Vote Delegation\nDESCRIPTION: This snippet implements the core functions of ERC5805 for managing vote delegation, including getVotes, getPastVotes, delegates, delegate, and delegateBySig.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20votes.md#2025-04-16_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction getVotes(address account) public view virtual returns (uint256)\nfunction getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256)\nfunction delegates(address delegator) public view virtual returns (address result)\nfunction delegate(address delegatee) public virtual\nfunction delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public virtual\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Unix Timestamp in Solidity\nDESCRIPTION: Converts a Gregorian calendar date (year, month, day) to a Unix timestamp. Timestamps represent seconds since 1970-01-01T00:00:00Z. Inputs outside supported ranges result in undefined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction dateToTimestamp(uint256 year, uint256 month, uint256 day)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Insertion Sort for uint256 Arrays in Solidity\nDESCRIPTION: Sorts a uint256 array in-place using insertion sort. This method is faster for small arrays (32 or fewer elements) or almost sorted arrays.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction insertionSort(uint256[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Validating Date in Solidity\nDESCRIPTION: Checks if a given date (year, month, day) is valid within the supported range. Verifies that the year is between 1970 and the maximum supported year, the month is between 1 and 12, and the day is valid for the given month and year.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isSupportedDate(uint256 year, uint256 month, uint256 day)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Deterministic Deployment with Value Function\nDESCRIPTION: Internal function to deploy contracts deterministically with ETH value, using initialization code and salt. Returns the deployed contract address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/create3.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministic(\n    uint256 value,\n    bytes memory initCode,\n    bytes32 salt\n) internal returns (address deployed)\n```\n\n----------------------------------------\n\nTITLE: Implementing address Array Shuffling Function in Solidity\nDESCRIPTION: Shuffles an address array in-place using the Fisher-Yates algorithm.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, address[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Reading Generic String\nDESCRIPTION: View function to read a string from a target contract using custom calldata.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readString(address target, bytes memory data)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Decoding JSON Encoded String in Solidity\nDESCRIPTION: Implements a function to decode a JSON encoded string. The input must be double-quoted and JSON encoded. Reverts if the string is invalid.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeString(string memory s)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Verifying ERC6492 Signatures with Side Effects in Solidity\nDESCRIPTION: This function checks if an ERC6492 signature is valid, allowing side effects. It attempts to deploy or prepare the signer smart account before performing an ERC1271 check.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/signaturecheckerlib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidERC6492SignatureNowAllowSideEffects(\n    address signer,\n    bytes32 hash,\n    bytes memory signature\n) internal returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Recover ECDSA Signature Operation with Separate Components in Solidity\nDESCRIPTION: Attempts to recover the signer's address from a message digest hash and signature components (v, r, s), returning zero address on failure.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Multicall Logic in Solidity\nDESCRIPTION: This internal function contains the core logic for multicall. It's designed to be used in custom implementations of multicall where additional actions before or after the calls are needed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/multicallable.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _multicall(bytes[] calldata data)\n    internal\n    virtual\n    returns (bytes32 results)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments from ERC1967 Proxy\nDESCRIPTION: Returns a slice of immutable arguments stored on an ERC1967 proxy instance. The function allows specifying a range with start and end parameters, which are clamped to valid bounds. The instance must be deployed via ERC1967 with immutable args functions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967(address instance, uint256 start, uint256 end)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Binary Search in Sorted uint256 Array in Solidity\nDESCRIPTION: Performs a binary search on a sorted uint256 array, returning whether the needle is found and its index. The index precedence is: equal to > nearest before > nearest after.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction searchSorted(uint256[] memory a, uint256 needle)\n    internal\n    pure\n    returns (bool found, uint256 index)\n```\n\n----------------------------------------\n\nTITLE: Verifying Single Merkle Proof in Solidity\nDESCRIPTION: This function verifies if a leaf exists in a Merkle tree with the given root, using the provided proof. It operates on memory arrays for efficiency.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verify(bytes32[] memory proof, bytes32 root, bytes32 leaf)\n    internal\n    pure\n    returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Ownership Update Functions in Solidity\nDESCRIPTION: Defines public functions for transferring ownership, renouncing ownership, and managing the two-step ownership handover process.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction transferOwnership(address newOwner)\n    public\n    payable\n    virtual\n    onlyOwner\n\nfunction renounceOwnership() public payable virtual onlyOwner\n\nfunction requestOwnershipHandover() public payable virtual\n\nfunction cancelOwnershipHandover() public payable virtual\n\nfunction completeOwnershipHandover(address pendingOwner)\n    public\n    payable\n    virtual\n    onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic set Function for Packed Integer Maps in Solidity\nDESCRIPTION: Updates a value of specified bit width in a generic packed integer mapping.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(\n    mapping(uint256 => uint256) storage map,\n    uint256 index,\n    uint256 value,\n    uint256 bitWidth\n) internal\n```\n\n----------------------------------------\n\nTITLE: Internal Token Burning Function in ERC6909\nDESCRIPTION: Destroys tokens from a specified address. This internal function is used for burning operations and emits a Transfer event to the zero address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _burn(address from, uint256 id, uint256 amount) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Internal Token Minting Function in ERC6909\nDESCRIPTION: Creates new tokens and assigns them to a recipient address. This internal function is used for minting operations and emits a Transfer event from the zero address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _mint(address to, uint256 id, uint256 amount) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Operation Management Functions\nDESCRIPTION: Core functions for proposing, canceling, and managing timelock operations including delay settings.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/timelock.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction propose(bytes32 mode, bytes calldata executionData, uint256 delay)\n    public\n    virtual\n    onlyRole(PROPOSER_ROLE)\n    returns (bytes32 id)\n\nfunction cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE)\n\nfunction setMinDelay(uint256 newMinDelay) public virtual\n```\n\n----------------------------------------\n\nTITLE: ERC7579 Mode Encoding in Solidity\nDESCRIPTION: Encodes call type, execution type, selector, and payload into a bytes32 mode value for use in ERC7579 operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encodeMode(\n    bytes1 callType,\n    bytes1 execType,\n    bytes4 selector,\n    bytes22 payload\n) internal pure returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Direct Return of Multicall Results in Solidity\nDESCRIPTION: This function directly returns the multicall results and terminates the current call context. It's designed to be used with results from the _multicall function.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/multicallable.md#2025-04-16_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _multicallDirectReturn(bytes32 results) internal pure virtual\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967 Bootstrap\nDESCRIPTION: Deploys the ERC1967 bootstrap implementation if it has not been deployed already. The bootstrap is a minimal UUPS implementation that allows an ERC1967 proxy to be upgraded.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_37\n\nLANGUAGE: solidity\nCODE:\n```\nfunction erc1967Bootstrap() internal returns (address)\n```\n\n----------------------------------------\n\nTITLE: Generating ERC1967I Proxy Init Code\nDESCRIPTION: Returns the initialization code of an ERC1967I proxy with the given implementation. This is useful for determining what code will be used to deploy the proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967I(address implementation)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that creates a deterministic minimal ERC1967 beacon proxy with a specified beacon address and salt. Returns a boolean indicating if the proxy was already deployed and the address of the proxy instance. Designed for ERC4337 factories.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_49\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967BeaconProxy(address beacon, bytes32 salt)\n    internal\n    returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Internal Set Role Implementation\nDESCRIPTION: Internal function to set a role for a holder directly without authorization checks. Used by the public setRole function after authorization checks pass.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setRole(address holder, uint256 role, bool active)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Array Search Functions\nDESCRIPTION: Functions for searching elements and finding their indices in arrays.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction contains(DynamicArray memory a, uint256 needle) internal pure returns (bool)\nfunction contains(DynamicArray memory a, address needle) internal pure returns (bool)\nfunction contains(DynamicArray memory a, bytes32 needle) internal pure returns (bool)\nfunction indexOf(DynamicArray memory a, uint256 needle, uint256 from) internal pure returns (uint256)\nfunction indexOf(DynamicArray memory a, address needle, uint256 from) internal pure returns (uint256)\nfunction indexOf(DynamicArray memory a, bytes32 needle, uint256 from) internal pure returns (uint256)\nfunction lastIndexOf(DynamicArray memory a, uint256 needle, uint256 from) internal pure returns (uint256)\nfunction lastIndexOf(DynamicArray memory a, address needle, uint256 from) internal pure returns (uint256)\nfunction lastIndexOf(DynamicArray memory a, bytes32 needle, uint256 from) internal pure returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Only Roles Modifier\nDESCRIPTION: Modifier that restricts function access to accounts with any of the roles provided in the encoded roles array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyRoles(bytes memory encodedRoles) virtual\n```\n\n----------------------------------------\n\nTITLE: Decompressing FastLZ Compressed Bytes in Solidity\nDESCRIPTION: This function decompresses bytes that were compressed using the FastLZ algorithm. It's backwards compatible with the FastLZ implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libzip.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction flzDecompress(bytes memory data)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Clones With Immutable Args Operations in Solidity\nDESCRIPTION: Defines functions for deploying clones with immutable arguments (CWIA). These functions allow creating proxies with encoded immutable arguments, which can be useful for optimizing gas costs and contract interactions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clone(address implementation, bytes memory args)\n    internal\n    returns (address instance)\n\nfunction clone(uint256 value, address implementation, bytes memory args)\n    internal\n    returns (address instance)\n\nfunction cloneDeterministic(\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Encoding uint256 as RLP in Solidity\nDESCRIPTION: Returns the RLP encoding of a uint256 value as a bytes array. The encoding strips leading zero bytes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(uint256 x) internal pure returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Typed Data Hashing Function - Solidity\nDESCRIPTION: Internal view function that computes the hash of a fully encoded EIP-712 message using the domain separator and struct hash.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/eip712.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _hashTypedData(bytes32 structHash)\n    internal\n    view\n    virtual\n    returns (bytes32 digest)\n```\n\n----------------------------------------\n\nTITLE: Role Authorization Modifiers\nDESCRIPTION: Modifier functions to restrict function access based on roles and ownership.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/timedroles.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyTimedRole(uint256 timedRole) virtual\nmodifier onlyTimedRoles(bytes memory encodedTimedRoles) virtual\nmodifier onlyOwnerOrTimedRole(uint256 timedRole) virtual\nmodifier onlyOwnerOrTimedRoles(bytes memory encodedTimedRoles) virtual\n```\n\n----------------------------------------\n\nTITLE: Square Root Calculation in Solidity\nDESCRIPTION: Computes the square root of x, rounded down to the nearest integer.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction sqrt(uint256 x) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Compressing Calldata using Run Length Encoding in Solidity\nDESCRIPTION: This function compresses the input bytes using a custom run length encoding scheme optimized for calldata. It encodes sequences of 0x00 (up to 128) and 0xff (up to 32).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libzip.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cdCompress(bytes memory data)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Replace String Function in Solidity\nDESCRIPTION: Replaces all occurrences of a needle string with a replacement string within a subject string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction replace(\n    string memory subject,\n    string memory needle,\n    string memory replacement\n) internal pure returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Deploys an ERC1967I beacon proxy with specified beacon address and initialization arguments. This function allows for customization of the proxy during deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_75\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967IBeaconProxy(address beacon, bytes memory args)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Predict Deterministic Address with Deployer Function\nDESCRIPTION: Internal pure function to predict the deterministic contract address for a given salt and deployer address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/create3.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(bytes32 salt, address deployer)\n    internal\n    pure\n    returns (address deployed)\n```\n\n----------------------------------------\n\nTITLE: Installing Solady with Foundry\nDESCRIPTION: Command to install Solady library using Foundry package manager\nSOURCE: https://github.com/Vectorized/solady/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge install vectorized/solady\n```\n\n----------------------------------------\n\nTITLE: Token Information Retrieval in ERC6551\nDESCRIPTION: Function that returns the token-bound information associated with this account, including the chain ID, token contract address, and token ID.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction token()\n    public\n    view\n    virtual\n    returns (uint256 chainId, address tokenContract, uint256 tokenId)\n```\n\n----------------------------------------\n\nTITLE: Verifying Multiple Merkle Proofs in Solidity\nDESCRIPTION: This function verifies if multiple leaves exist in a Merkle tree with the given root, using the provided proof and flags. It supports efficient verification of multiple elements in a single operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyMultiProof(\n    bytes32[] memory proof,\n    bytes32 root,\n    bytes32[] memory leaves,\n    bool[] memory flags\n) internal pure returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967 Beacon Proxy with Arguments and Value in Solidity\nDESCRIPTION: Function that deploys a deterministic minimal ERC1967 beacon proxy with a specified beacon address, initialization arguments, and salt, while depositing ETH during deployment. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_57\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967BeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Initializer Modifier for First-time Initialization in Solidity\nDESCRIPTION: Modifier that guards a function to ensure it can only be called once during contract initialization. Can be called multiple times in a constructor context for testing purposes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier initializer() virtual\n```\n\n----------------------------------------\n\nTITLE: Subtracting Years from Timestamp in Solidity\nDESCRIPTION: Subtracts a specified number of years from a Unix timestamp. Maintains the same calendar month but adjusts the day if necessary (e.g., February 29 to February 28 in non-leap years).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction subYears(uint256 timestamp, uint256 numYears)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Proxy\nDESCRIPTION: Creates a deterministic ERC1967I proxy, returning a flag indicating if it was already deployed and the instance address. Designed for ERC4337 factories that shouldn't revert if the proxy already exists.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967I(address implementation, bytes32 salt)\n    internal\n    returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing ECDSA Signature Recovery with Calldata in Solidity\nDESCRIPTION: Recovers the signer's address from a message digest hash and signature, optimized for calldata input.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recoverCalldata(bytes32 hash, bytes calldata signature)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Domain Typehash Constants - Solidity\nDESCRIPTION: Defines the domain typehash constant for EIP-712 domain separator calculation including chainId. This is the keccak256 hash of the domain type string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/eip712.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant _DOMAIN_TYPEHASH =\n    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n```\n\n----------------------------------------\n\nTITLE: Decoding Multicall Results in Solidity\nDESCRIPTION: This function decodes the multicall results from a bytes32 format into an array of bytes. It's useful for accessing or re-encoding the results of multiple calls.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/multicallable.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _multicallResultsToBytesArray(bytes32 results)\n    internal\n    pure\n    virtual\n    returns (bytes[] memory decoded)\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard Normal Distribution Function in Solidity\nDESCRIPTION: Generates a sample from the standard normal distribution denominated in WAD (10^18).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction standardNormalWad(PRNG memory prng)\n    internal\n    pure\n    returns (int256 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested EIP-712 Signature Validation for ERC1271 in Solidity\nDESCRIPTION: Implements the nested EIP-712 approach for signature validation. This method prevents signature replays across multiple smart contract accounts owned by a single EOA while maintaining compatibility with wallet UIs.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271IsValidSignatureViaNestedEIP712(\n    bytes32 hash,\n    bytes calldata signature\n) internal view virtual returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Value Clamping for Unsigned Integers in Solidity\nDESCRIPTION: Clamps x between minValue and maxValue for unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_30\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clamp(uint256 x, uint256 minValue, uint256 maxValue)\n    internal\n    pure\n    returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Simple Base64 Encode in Solidity\nDESCRIPTION: Basic base64 encoding function that converts bytes to a base64 string using standard encoding without file-safe characters or padding options. Equivalent to calling encode(data, false, false).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/base64.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(bytes memory data)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic ERC1271 Signature Validation in Solidity\nDESCRIPTION: Internal function that determines whether a signature is valid for a given hash. This is a general-purpose signature validation function used by other specialized validation methods.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271IsValidSignature(bytes32 hash, bytes calldata signature)\n    internal\n    view\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Extended Token Transfer\nDESCRIPTION: Internal function to transfer a token with additional authorization parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transfer(address by, address from, address to, uint256 id)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Safe Transfer with Data\nDESCRIPTION: Internal function for safe token transfer with additional data parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(\n    address from,\n    address to,\n    uint256 id,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Number to String Conversion Functions\nDESCRIPTION: Functions for converting numeric values to string representations in decimal and hexadecimal formats.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toString(uint256 value)\n    internal\n    pure\n    returns (string memory result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toString(int256 value)\n    internal\n    pure\n    returns (string memory result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toHexString(uint256 value, uint256 byteCount)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Verifying Single Merkle Proof with Calldata in Solidity\nDESCRIPTION: This function verifies if a leaf exists in a Merkle tree with the given root, using the provided proof. It uses calldata for gas optimization when the proof is passed directly from the contract's external call.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifyCalldata(\n    bytes32[] calldata proof,\n    bytes32 root,\n    bytes32 leaf\n) internal pure returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Domain Separator Calculation Function - Solidity\nDESCRIPTION: Internal view function that returns the EIP-712 domain separator used in typed data signing.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/eip712.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _domainSeparator()\n    internal\n    view\n    virtual\n    returns (bytes32 separator)\n```\n\n----------------------------------------\n\nTITLE: Reinitializer Modifier for Version-specific Initialization in Solidity\nDESCRIPTION: Modifier that guards a function to ensure it can be called only once for a specific version, enabling controlled contract upgrades.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier reinitializer(uint64 version) virtual\n```\n\n----------------------------------------\n\nTITLE: Token Approval Function in ERC6909\nDESCRIPTION: Sets the allowance for a spender to use a specific amount of the caller's tokens with a given ID. Emits an Approval event.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction approve(address spender, uint256 id, uint256 amount)\n    public\n    payable\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Combined Push-Pop Operations\nDESCRIPTION: Functions that combine push and pop operations in a single call\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pushPop(Heap storage heap, uint256 value)\n    internal\n    returns (uint256 popped)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pushPop(MemHeap memory heap, uint256 value)\n    internal\n    pure\n    returns (uint256 popped)\n```\n\n----------------------------------------\n\nTITLE: Adding Days to Timestamp in Solidity\nDESCRIPTION: Adds a specified number of days to a Unix timestamp. Useful for calculating future dates based on a given interval of days.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addDays(uint256 timestamp, uint256 numDays)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Value Clamping for Signed Integers in Solidity\nDESCRIPTION: Clamps x between minValue and maxValue for signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clamp(int256 x, int256 minValue, int256 maxValue)\n    internal\n    pure\n    returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: String IndexOf Function with Offset in Solidity\nDESCRIPTION: Finds the first occurrence of a needle string within a subject string starting from a specified position.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction indexOf(string memory subject, string memory needle, uint256 from)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Reading Full Data from Storage Contract in Solidity\nDESCRIPTION: Function to read the entire data stored in a storage contract at the given pointer address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read(address pointer) internal view returns (bytes memory data)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Proxy with Value\nDESCRIPTION: Deploys an ERC1967I proxy with the specified implementation address and deposits ETH during deployment. This allows creating a proxy with an initial ETH balance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967I(uint256 value, address implementation)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Defining Ref struct for storage pointers in Solidity\nDESCRIPTION: Defines a Ref struct that acts as a pointer to a uint256 value in storage. This allows for indirect access to storage values.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Ref {\n    uint256 value;\n}\n```\n\n----------------------------------------\n\nTITLE: Tree Modification Functions\nDESCRIPTION: Functions for inserting and removing values from the tree.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/redblacktreelib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction insert(Tree storage tree, uint256 x) internal\n\nfunction tryInsert(Tree storage tree, uint256 x)\n    internal\n    returns (uint256 err)\n\nfunction remove(Tree storage tree, uint256 x) internal\n\nfunction tryRemove(Tree storage tree, uint256 x)\n    internal\n    returns (uint256 err)\n```\n\n----------------------------------------\n\nTITLE: Safe ETH Transfer Implementation\nDESCRIPTION: Function to safely transfer ETH to a specified address with amount parameter\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/safetransferlib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction safeTransferETH(address to, uint256 amount) internal\n```\n\n----------------------------------------\n\nTITLE: Compressing Bytes with FastLZ in Solidity\nDESCRIPTION: This function compresses the input bytes using a FastLZ implementation. It's equivalent to level 1 compression in the FastLZ library.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libzip.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction flzCompress(bytes memory data)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Storage Contract with Start Index in Solidity\nDESCRIPTION: Function to read data from a storage contract starting at a specified index.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read(address pointer, uint256 start)\n    internal\n    view\n    returns (bytes memory data)\n```\n\n----------------------------------------\n\nTITLE: Reading Data Slice from Storage Contract in Solidity\nDESCRIPTION: Function to read a slice of data from a storage contract between start and end indices, with bounds checking and specific behavior for SSTORE2-deployed contracts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction read(address pointer, uint256 start, uint256 end)\n    internal\n    view\n    returns (bytes memory data)\n```\n\n----------------------------------------\n\nTITLE: Intro-quicksort for uint256 Arrays in Solidity\nDESCRIPTION: Sorts a uint256 array in-place using intro-quicksort. This method is faster for larger arrays (more than 32 elements) and provides robust performance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction sort(uint256[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Recover ECDSA Signature Operation in Solidity\nDESCRIPTION: Attempts to recover the signer's address from a message digest hash and signature, returning zero address on failure.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryRecover(bytes32 hash, bytes memory signature)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Rounded-Up Base-256 Logarithm in Solidity\nDESCRIPTION: Calculates the log256 of x, rounded up to the nearest integer. Returns 0 if x is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction log256Up(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Tree Search and Navigation Functions\nDESCRIPTION: Functions for finding values and navigating through the tree structure.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/redblacktreelib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction find(Tree storage tree, uint256 x)\n    internal\n    view\n    returns (bytes32 result)\n\nfunction nearest(Tree storage tree, uint256 x)\n    internal\n    view\n    returns (bytes32 result)\n\nfunction nearestBefore(Tree storage tree, uint256 x)\n    internal\n    view\n    returns (bytes32 result)\n\nfunction nearestAfter(Tree storage tree, uint256 x)\n    internal\n    view\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Pre-Transfer Hook Implementation\nDESCRIPTION: Hook called before any token transfer operation including minting and burning. Handles both single and batch transfers with the same implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Proxy with Value\nDESCRIPTION: Deploys a deterministic ERC1967I proxy with implementation and salt, while depositing ETH during deployment. Combines deterministic address calculation with funding the proxy in a single operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967I(\n    uint256 value,\n    address implementation,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing nonReentrant Modifier in Solidity\nDESCRIPTION: Defines a modifier that guards a function from reentrancy attacks. This modifier can be applied to functions to prevent them from being called recursively during execution.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguard.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier nonReentrant() virtual\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Proxy\nDESCRIPTION: Deploys a deterministic ERC1967I proxy with specified implementation and salt. The address of the proxy is determined by the implementation, salt, and deployer, making it predictable and consistent across deployments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967I(address implementation, bytes32 salt)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Creating an ERC4337 Account with Owner Salt in Solidity\nDESCRIPTION: Function that deploys an ERC4337 account with a provided salt value. The owner address is encoded in the upper 160 bits of the salt. Forwards any ETH value to the account and returns the deterministic address of the deployed account.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc4337factory.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createAccount(bytes32 ownSalt)\n    public\n    payable\n    virtual\n    returns (address)\n```\n\n----------------------------------------\n\nTITLE: Disable Initializers Function in Solidity\nDESCRIPTION: Internal function that permanently locks any future initializations by setting the initialized version to the maximum value. Typically used in implementation contracts that are accessed through proxies.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _disableInitializers() internal virtual\n```\n\n----------------------------------------\n\nTITLE: MinHeap Memory Management\nDESCRIPTION: Function to pre-allocate memory for the heap to optimize gas usage\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reserve(MemHeap memory heap, uint256 minimum) internal pure\n```\n\n----------------------------------------\n\nTITLE: EIP7702 Authority Check Implementation\nDESCRIPTION: Function that checks if the current call context is on an EIP7702 authority (externally owned account).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _onEIP7702Authority()\n    internal\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic searchSorted Function for Packed Integer Maps in Solidity\nDESCRIPTION: Performs a binary search on a sorted range in a generic packed integer mapping to find a specific value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction searchSorted(\n    mapping(uint256 => uint256) storage map,\n    uint256 needle,\n    uint256 start,\n    uint256 end,\n    uint256 bitWidth\n) internal view returns (bool found, uint256 index)\n```\n\n----------------------------------------\n\nTITLE: Finding Common Nibble Prefix in Solidity\nDESCRIPTION: Returns the common prefix of two uint256 values at the nibble level.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction commonNibblePrefix(uint256 x, uint256 y)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Proxy with Arguments\nDESCRIPTION: Creates a deterministic ERC1967I proxy with implementation, arguments, and salt, returning deployment status and instance address. Designed for ERC4337 factories that shouldn't revert if the proxy already exists.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967I(\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC6372 Functions for Clock Mode in Solidity\nDESCRIPTION: This snippet implements the CLOCK_MODE() and clock() functions required by the ERC6372 standard for time-based voting mechanisms.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20votes.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction CLOCK_MODE() public view virtual returns (string memory)\nfunction clock() public view virtual returns (uint48 result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC6551 Account Properties in Solidity\nDESCRIPTION: Functions to retrieve various properties of an ERC6551 account, including implementation, context, salt, chain ID, token contract, and token ID.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc6551.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction implementation(address a) internal view returns (address result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction context(address a)\n    internal\n    view\n    returns (\n        bytes32 salt_,\n        uint256 chainId_,\n        address tokenContract_,\n        uint256 tokenId_\n    )\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction salt(address a) internal view returns (bytes32 result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction chainId(address a) internal view returns (uint256 result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenContract(address a) internal view returns (address result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenId(address a) internal view returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Making Delegate Contract Calls in Solidity\nDESCRIPTION: Function that makes a delegate call to a target contract with specified data. Delegate calls use the code at the target address but execute in the context of the calling contract. Returns the result of the call.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction delegateCallContract(address target, bytes memory data)\n    internal\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Verifying Signatures for EOAs and Smart Contract Wallets in Solidity\nDESCRIPTION: This function checks if a signature is valid for a given signer and hash. It supports both ECDSA signatures for EOAs and ERC1271 signatures for smart contract wallets.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/signaturecheckerlib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidSignatureNow(\n    address signer,\n    bytes32 hash,\n    bytes memory signature\n) internal view returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal _deploy Function in Solidity\nDESCRIPTION: Internal function handling the actual proxy deployment logic with options for deterministic deployment using a salt. It's used by all the public deployment functions in the contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _deploy(\n    address implementation,\n    address admin,\n    bytes32 salt,\n    bool useSalt,\n    bytes calldata data\n) internal returns (address proxy)\n```\n\n----------------------------------------\n\nTITLE: Authorize Role Setting\nDESCRIPTION: Internal function that checks if the caller is authorized to set a role. By default, only the owner can set roles, but this can be overridden.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _authorizeSetRole(address holder, uint256 role, bool active)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Creates a deterministic ERC1967I beacon proxy with specified beacon address, initialization arguments, and salt. This function is designed for ERC4337 factories and returns deployment status and instance address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_79\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967IBeaconProxy(\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Internal Signer Validation in ERC6551\nDESCRIPTION: Internal function that verifies if a signer is authorized, with support for additional context and extraData parameters for flexible authentication mechanisms.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isValidSigner(\n    address signer,\n    bytes32 extraData,\n    bytes calldata context\n) internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Union Operation for Bytes32 Arrays\nDESCRIPTION: Returns the sorted set union of two bytes32 arrays. Requires input arrays to be pre-sorted and uniquified for defined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction union(bytes32[] memory a, bytes32[] memory b)\n    internal\n    pure\n    returns (bytes32[] memory c)\n```\n\n----------------------------------------\n\nTITLE: Compute Set Union of Sorted uint256 Arrays in Solidity\nDESCRIPTION: Computes the sorted set union of two uint256 arrays. The function assumes that the input arrays are sorted and uniquified. The result is also sorted and uniquified.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_11\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction union(uint256[] memory a, uint256[] memory b)\n    internal\n    pure\n    returns (uint256[] memory c)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Proxy with Implementation\nDESCRIPTION: Deploys an ERC1967I proxy with the specified implementation address. This creates a proxy that delegates calls to the implementation contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967I(address implementation)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Converting Date and Time to Unix Timestamp in Solidity\nDESCRIPTION: Converts a complete Gregorian calendar date and time (year, month, day, hour, minute, second) to a Unix timestamp. Inputs outside supported ranges result in undefined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction dateTimeToTimestamp(\n    uint256 year,\n    uint256 month,\n    uint256 day,\n    uint256 hour,\n    uint256 minute,\n    uint256 second\n) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Timelock Initialization Function\nDESCRIPTION: Initializes the timelock contract with initial delay and role assignments for admin, proposers, executors, and cancellers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/timelock.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initialize(\n    uint256 initialMinDelay,\n    address initialAdmin,\n    address[] calldata proposers,\n    address[] calldata executors,\n    address[] calldata cancellers\n) public virtual\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Post-Transfer Hook Implementation\nDESCRIPTION: Hook called after any token transfer operation including minting and burning. Handles both single and batch transfers with the same implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterTokenTransfer(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Upgrade Authorization Override for ERC6551 Account\nDESCRIPTION: Implementation of the UUPSUpgradeable._authorizeUpgrade function that restricts upgrade capability to valid signers and requires the upgrade to be performed via an ERC6551Proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _authorizeUpgrade(address)\n    internal\n    virtual\n    override(UUPSUpgradeable)\n    onlyValidSigner\n    onlyViaERC6551Proxy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments from ERC1967I Beacon Proxy with Start Index in Solidity\nDESCRIPTION: Retrieves immutable arguments from an ERC1967I beacon proxy instance starting from a specified index. This function is equivalent to calling argsOnERC1967IBeaconProxy with the given start and end at the maximum possible value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_85\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967IBeaconProxy(address instance, uint256 start)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Implementing Last Set Bit Search\nDESCRIPTION: Function to find the index of the highest set bit up to a given position in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction findLastSet(Bitmap storage bitmap, uint256 upTo)\n    internal\n    view\n    returns (uint256 setBitIndex)\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Array Index in Solidity\nDESCRIPTION: Implements a function to return the index of an item in a JSON array. Returns 0 if the item's parent is not an array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction index(Item memory item) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Array Utility Functions\nDESCRIPTION: Utility functions for array operations like slicing, copying, and hashing.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction slice(DynamicArray memory a, uint256 start, uint256 end) internal pure returns (DynamicArray memory result)\nfunction slice(DynamicArray memory a, uint256 start) internal pure returns (DynamicArray memory result)\nfunction copy(DynamicArray memory a) internal pure returns (DynamicArray memory result)\nfunction hash(DynamicArray memory a) internal pure returns (bytes32 result)\nfunction directReturn(DynamicArray memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Role Verification Functions\nDESCRIPTION: Internal view functions for validating role permissions and ownership status.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkRoles(uint256 roles) internal view virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkOwnerOrRoles(uint256 roles) internal view virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkRolesOrOwner(uint256 roles) internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing UUPS Operations for EIP7702 in Solidity\nDESCRIPTION: Provides functions for upgrading and initializing EIP7702 proxy delegations using the UUPS pattern.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/libeip7702.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction upgradeProxyDelegation(address newImplementation) internal\n\nfunction requestProxyDelegationInitialization() internal\n```\n\n----------------------------------------\n\nTITLE: Only Owner or Roles Modifier\nDESCRIPTION: Modifier that restricts function access to the contract owner or accounts with any of the roles in the encoded roles array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyOwnerOrRoles(bytes memory encodedRoles) virtual\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Storage Contract in Solidity\nDESCRIPTION: Function to write data into the bytecode of a storage contract and return its address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction write(bytes memory data) internal returns (address pointer)\n```\n\n----------------------------------------\n\nTITLE: Greatest Common Divisor Calculation in Solidity\nDESCRIPTION: Computes the greatest common divisor of two unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_32\n\nLANGUAGE: solidity\nCODE:\n```\nfunction gcd(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Getting Deterministic Address of ERC4337 Account in Solidity\nDESCRIPTION: View function that calculates and returns the deterministic address of an ERC4337 account that would be created with the provided salt, without actually deploying it.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc4337factory.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getAddress(bytes32 ownSalt)\n    public\n    view\n    virtual\n    returns (address)\n```\n\n----------------------------------------\n\nTITLE: Reading Generic Uint with Gas\nDESCRIPTION: View function to read a uint value with custom calldata and gas stipend.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readUint(address target, bytes memory data, uint256 gasStipend)\n    internal\n    view\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Default Royalty Setting Implementation\nDESCRIPTION: Internal function to set default royalty receiver and fee numerator with validation checks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setDefaultRoyalty(address receiver, uint96 feeNumerator)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: String Contains Function in Solidity\nDESCRIPTION: Checks if a subject string contains a needle string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction contains(string memory subject, string memory needle)\n    internal\n    pure\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Calculating ERC1967I Proxy Init Code Hash\nDESCRIPTION: Returns the keccak256 hash of the initialization code for an ERC1967I proxy with the given implementation. Useful for CREATE2 address prediction and verification.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967I(address implementation)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Defining BytesStorage Struct in Solidity\nDESCRIPTION: Custom bytes storage structure that optimizes gas usage and bytecode size compared to Solidity's native bytes storage. Efficiently packs length with first 31 bytes for lengths under 255.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbytes.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct BytesStorage {\n    bytes32 _spacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967 Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Function that creates a deterministic minimal ERC1967 beacon proxy with a specified beacon address, initialization arguments, and salt. Returns a boolean indicating if the proxy was already deployed and the address of the proxy instance. Designed for ERC4337 factories.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_58\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967BeaconProxy(\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp to Date in Solidity\nDESCRIPTION: Converts a Unix timestamp to its Gregorian calendar date components (year, month, day). Inputs outside supported ranges result in undefined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction timestampToDate(uint256 timestamp)\n    internal\n    pure\n    returns (uint256 year, uint256 month, uint256 day)\n```\n\n----------------------------------------\n\nTITLE: Internal Execution of Batch Calls in Solidity\nDESCRIPTION: Defines an internal function to execute a batch of calls. It handles the actual execution of transactions and reverts if any call fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc7821.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _execute(\n    bytes32 mode,\n    bytes calldata executionData,\n    Call[] calldata calls,\n    bytes calldata opData\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Making Static Contract Calls in Solidity\nDESCRIPTION: Function that makes a static call to a target contract with specified data. Static calls cannot modify state. Returns the result of the call. Reverts if the target is not a contract or if the call fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction staticCallContract(address target, bytes memory data)\n    internal\n    view\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: String Lowercase Function in Solidity\nDESCRIPTION: Converts a string to lowercase. Only works with 7-bit ASCII.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lower(string memory subject)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: String Case Conversion Function in Solidity\nDESCRIPTION: Converts a string to uppercase or lowercase. Only works with 7-bit ASCII.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toCase(string memory subject, bool toUpper)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Array Element Modification Functions\nDESCRIPTION: Functions for setting elements at specific indices without bounds checking.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(DynamicArray memory a, uint256 i, uint256 data) internal pure returns (DynamicArray memory result)\nfunction set(DynamicArray memory a, uint256 i, address data) internal pure returns (DynamicArray memory result)\nfunction set(DynamicArray memory a, uint256 i, bool data) internal pure returns (DynamicArray memory result)\nfunction set(DynamicArray memory a, uint256 i, bytes32 data) internal pure returns (DynamicArray memory result)\n```\n\n----------------------------------------\n\nTITLE: Getting JSON Item Type in Solidity\nDESCRIPTION: Implements a function to return the type of a JSON Item as a uint8 value corresponding to the defined type constants.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getType(Item memory item) internal pure returns (uint8 result)\n```\n\n----------------------------------------\n\nTITLE: URI Component Encode Function in Solidity\nDESCRIPTION: Encodes a string for safe use in URIs, similar to JavaScript's encodeURIComponent.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encodeURIComponent(string memory s)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Check Caller is Owner or Has Role\nDESCRIPTION: Internal view function that reverts if the message sender is not the contract owner and does not have the specified role.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkOwnerOrRole(uint256 role) internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Extended Safe Transfer\nDESCRIPTION: Internal function for safe transfer with authorization parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(address by, address from, address to, uint256 id)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Calculating Hour Difference between Timestamps in Solidity\nDESCRIPTION: Internal pure function that calculates the difference in hours between two timestamps.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\nfunction diffHours(uint256 fromTimestamp, uint256 toTimestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic Clone with Error Handling in Solidity\nDESCRIPTION: This function creates a deterministic clone of an implementation contract with immutable arguments and a salt. It returns a boolean indicating if the clone was already deployed and the instance address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicClone(\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Set Operation\nDESCRIPTION: Function to set a specific bit to true at the given index in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(Bitmap storage bitmap, uint256 index) internal\n```\n\n----------------------------------------\n\nTITLE: Public Role Management Functions\nDESCRIPTION: External functions for role management accessible to contract owner and users.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction grantRoles(address user, uint256 roles)\n    public\n    payable\n    virtual\n    onlyOwner\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction revokeRoles(address user, uint256 roles)\n    public\n    payable\n    virtual\n    onlyOwner\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction renounceRoles(uint256 roles) public payable virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Uniform Distribution Function in Solidity\nDESCRIPTION: Generates a pseudorandom uint256 uniformly distributed between 0 (inclusive) and upper (exclusive). Recommended for uniform sampling to avoid modulo bias with large moduli.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction uniform(PRNG memory prng, uint256 upper)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Recover ECDSA Signature Operation with Calldata in Solidity\nDESCRIPTION: Attempts to recover the signer's address from a message digest hash and signature in calldata, returning zero address on failure.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryRecoverCalldata(bytes32 hash, bytes calldata signature)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Data Structures\nDESCRIPTION: Core heap data structure definitions for storage and memory implementations\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Heap {\n    uint256[] data;\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nstruct MemHeap {\n    uint256[] data;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Calldata Leaves Array in Solidity\nDESCRIPTION: This utility function returns an empty calldata bytes32 array, which can be used as a placeholder for leaves when none are required.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emptyLeaves() internal pure returns (bytes32[] calldata leaves)\n```\n\n----------------------------------------\n\nTITLE: Set Role Function for Access Control\nDESCRIPTION: Public function to set the status of a role for a holder. The function is payable and virtual, allowing for overrides in derived contracts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setRole(address holder, uint256 role, bool active)\n    public\n    payable\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Hash of ECDSA Signature from Calldata in Solidity\nDESCRIPTION: Computes the canonical hash of an ECDSA signature from calldata, normalizing the s-value and v-value for uniqueness.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction canonicalHashCalldata(bytes calldata signature)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Hash of ECDSA Signature in Solidity\nDESCRIPTION: Computes the canonical hash of an ECDSA signature, normalizing the s-value and v-value for uniqueness.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction canonicalHash(bytes memory signature)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Converting Date to Unix Epoch Day in Solidity\nDESCRIPTION: Converts a Gregorian calendar date (year, month, day) to the number of days since 1970-01-01. Uses Howard Hinnant's date algorithm. Inputs outside supported ranges result in undefined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction dateToEpochDay(uint256 year, uint256 month, uint256 day)\n    internal\n    pure\n    returns (uint256 epochDay)\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address for ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that predicts the deployment address of an ERC1967 beacon proxy based on the beacon, salt, and deployer address. Note that the returned result has dirty upper 96 bits that need to be cleaned if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_53\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967BeaconProxy(\n    address beacon,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Creating RLP List with Nested List Element in Solidity\nDESCRIPTION: Returns a new RLP list with another RLP list as the only element. Enables creation of nested RLP structures.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(List memory x) internal pure returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Checking JSON Item Types in Solidity\nDESCRIPTION: Implements functions to check if a JSON Item is of a specific type (undefined, array, object, number, string, boolean, or null).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isUndefined(Item memory item)\n    internal\n    pure\n    returns (bool result)\n\nfunction isArray(Item memory item) internal pure returns (bool result)\n\nfunction isObject(Item memory item) internal pure returns (bool result)\n\nfunction isNumber(Item memory item) internal pure returns (bool result)\n\nfunction isString(Item memory item) internal pure returns (bool result)\n\nfunction isBoolean(Item memory item) internal pure returns (bool result)\n\nfunction isNull(Item memory item) internal pure returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Unset Operation\nDESCRIPTION: Function to set a specific bit to false at the given index in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unset(Bitmap storage bitmap, uint256 index) internal\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Beacon Proxy with Value and Arguments in Solidity\nDESCRIPTION: Creates a deterministic ERC1967I beacon proxy with a specified ETH value, beacon address, initialization arguments, and salt. This function is for ERC4337 factories and allows sending ETH during creation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_80\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967IBeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing set Function for Dynamic Arrays in Solidity\nDESCRIPTION: Creates a function to set an element in a uint256 array at a specific index, without bounds checking. Supports uint256, address, bool, and bytes32 data types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(uint256[] memory a, uint256 i, uint256 data)\n    internal\n    pure\n    returns (uint256[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref from bytes32 storage slot in Solidity\nDESCRIPTION: Returns a Ref pointer to a uint256 in storage at the specified bytes32 storage slot location.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction ref(bytes32 sSlot) internal pure returns (Ref storage $)\n```\n\n----------------------------------------\n\nTITLE: Compute Set Intersection of Sorted uint256 Arrays in Solidity\nDESCRIPTION: Computes the sorted set intersection between two uint256 arrays. The function assumes that the input arrays are sorted and uniquified. The result is also sorted and uniquified.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_10\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction intersection(uint256[] memory a, uint256[] memory b)\n    internal\n    pure\n    returns (uint256[] memory c)\n```\n\n----------------------------------------\n\nTITLE: Creating ERC6551 Account via Registry in Solidity\nDESCRIPTION: Function to create an ERC6551 account using the registry. It takes implementation, salt, chain ID, token contract, and token ID as parameters.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc6551.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createAccount(\n    address implementation_,\n    bytes32 salt_,\n    uint256 chainId_,\n    address tokenContract_,\n    uint256 tokenId_\n) internal returns (address result)\n```\n\n----------------------------------------\n\nTITLE: ERC165 Interface Support for ERC6551 Account\nDESCRIPTION: Implements the ERC165 supportsInterface function to advertise supported interfaces. This function must use less than 30000 gas as per the EIP-165 specification.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Check Timed Role Status Function\nDESCRIPTION: View function that returns the active status and time range for a specific role and holder.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/timedroles.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction timedRoleActive(address holder, uint256 timedRole)\n    public\n    view\n    virtual\n    returns (bool isActive, uint40 start, uint40 expires)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Implementation Address of ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Returns the implementation address of an ERC1967I beacon proxy instance. If the implementation address cannot be determined, it returns the zero address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_87\n\nLANGUAGE: solidity\nCODE:\n```\nfunction implementationOf(address instance)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Hash of EIP-2098 ECDSA Signature in Solidity\nDESCRIPTION: Computes the canonical hash of an EIP-2098 short-form ECDSA signature, normalizing the s-value and v-value for uniqueness.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction canonicalHash(bytes32 r, bytes32 vs)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Batch Set Operation\nDESCRIPTION: Function to set multiple consecutive bits to true starting from a given index\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setBatch(Bitmap storage bitmap, uint256 start, uint256 amount)\n    internal\n```\n\n----------------------------------------\n\nTITLE: Implementing uint256 Array Shuffling Function in Solidity\nDESCRIPTION: Shuffles a uint256 array in-place using the Fisher-Yates algorithm.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, uint256[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Checking RIP-7212 Precompile Existence in Solidity\nDESCRIPTION: Function to check if the RIP-7212 precompile exists on the current chain.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasPrecompile() internal view returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967 Beacon Proxy with Value in Solidity\nDESCRIPTION: Function that deploys a deterministic minimal ERC1967 beacon proxy with a specified beacon address and salt, while depositing ETH during deployment. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_48\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967BeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Exponentiation Function in Solidity\nDESCRIPTION: Calculates x to the power of y, denominated in base b. Reverts if the computation overflows.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rpow(uint256 x, uint256 y, uint256 b)\n    internal\n    pure\n    returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Decompressing Run Length Encoded Calldata in Solidity\nDESCRIPTION: This function decompresses bytes that were compressed using the custom calldata run length encoding scheme.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libzip.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cdDecompress(bytes memory data)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Base-256 Logarithm Calculation in Solidity\nDESCRIPTION: Computes the log256 of x. Returns 0 if x is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction log256(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Creating a Ref from uint256 storage slot in Solidity\nDESCRIPTION: Returns a Ref pointer to a uint256 in storage at the specified uint256 storage slot location.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction ref(uint256 sSlot) internal pure returns (Ref storage $)\n```\n\n----------------------------------------\n\nTITLE: Get Initialized Version Function in Solidity\nDESCRIPTION: Internal view function that returns the highest version number that has been initialized for the contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _getInitializedVersion()\n    internal\n    view\n    virtual\n    returns (uint64 version)\n```\n\n----------------------------------------\n\nTITLE: Check if Address Has Any of Multiple Roles\nDESCRIPTION: Internal view function that checks if a holder has any of the roles provided in an encoded byte array of roles.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _hasAnyRoles(address holder, bytes memory encodedRoles)\n    internal\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler Initialization Function in Solidity\nDESCRIPTION: Initializes the state for lazy-shuffling the range [0..n). Reverts if n is 0 or >= 2^32-1, or if the shuffler was already initialized.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initialize(LazyShuffler storage $, uint256 n) internal\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Function that deploys an ERC1967I beacon proxy with a specified beacon address. Returns the address of the deployed proxy instance. This proxy has a special code path for calldatasize() == 1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_66\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967IBeaconProxy(address beacon)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode with Options in Solidity\nDESCRIPTION: Encodes bytes data to base64 string with options for file-safe encoding and padding control. File-safe option replaces '+' with '-' and '/' with '_'. The noPadding option allows removing trailing padding characters.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/base64.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(bytes memory data, bool fileSafe, bool noPadding)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Decoding Batch Execution Data in ERC7579 (With Checks)\nDESCRIPTION: Decodes a batch of executions into an array of pointers. Will revert if the batch data is not correctly encoded.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeBatch(bytes calldata executionData)\n    internal\n    pure\n    returns (bytes32[] calldata pointers)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Beacon Proxy with Value and Arguments in Solidity\nDESCRIPTION: Deploys an ERC1967I beacon proxy with a specified ETH value, beacon address, and initialization arguments. This function allows for sending ETH during proxy deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_76\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967IBeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes memory args\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Decoding Batch and OpData in ERC7579 (With Checks)\nDESCRIPTION: Decodes a batch of executions and optional operation data. Will revert if the data is not correctly encoded.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeBatchAndOpData(bytes calldata executionData)\n    internal\n    pure\n    returns (bytes32[] calldata pointers, bytes calldata opData)\n```\n\n----------------------------------------\n\nTITLE: Rounded-Up Base-10 Logarithm in Solidity\nDESCRIPTION: Calculates the log10 of x, rounded up to the nearest integer. Returns 0 if x is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction log10Up(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Arguments from ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that retrieves all immutable arguments from an ERC1967 beacon proxy instance. Equivalent to calling argsOnERC1967BeaconProxy with full range.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_63\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967BeaconProxy(address instance)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Set Operator Approval\nDESCRIPTION: Internal function to set or remove an operator's approval status for all tokens of an owner.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setApprovalForAll(address by, address operator, bool isApproved)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing First Unset Bit Search\nDESCRIPTION: Function to find the index of the first unset bit within a specified range in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction findFirstUnset(Bitmap storage bitmap, uint256 begin, uint256 upTo)\n    internal\n    view\n    returns (uint256 unsetBitIndex)\n```\n\n----------------------------------------\n\nTITLE: Union Operation for Int256 Arrays\nDESCRIPTION: Returns the sorted set union of two int256 arrays. Requires input arrays to be pre-sorted and uniquified for defined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction union(int256[] memory a, int256[] memory b)\n    internal\n    pure\n    returns (int256[] memory c)\n```\n\n----------------------------------------\n\nTITLE: Implementing ERC1271 Signature Unwrapping in Solidity\nDESCRIPTION: Internal function that processes and unwraps a signature for validation. This allows for different signature formats and embedding additional data within the signature.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271UnwrapSignature(bytes calldata signature)\n    internal\n    view\n    virtual\n    returns (bytes calldata result)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Proxy with Value and Arguments\nDESCRIPTION: Deploys a minimal ERC1967I proxy with implementation and arguments, while also depositing ETH during deployment. This combines proxy creation, argument storage, and funding in one operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967I(\n    uint256 value,\n    address implementation,\n    bytes memory args\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Creates a deterministic ERC1967I beacon proxy with a specified value, beacon address, and salt. This function is designed for use in ERC4337 factories and returns whether the proxy was already deployed and its instance address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_71\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967IBeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Public Signer Validation Interface for ERC6551\nDESCRIPTION: Public function implementing the IERC6551Account interface for signer validation, returning the standard magic value 0x523e3260 if the signer is valid.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidSigner(address signer, bytes calldata context)\n    public\n    view\n    virtual\n    returns (bytes4 result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Immutable Arguments from ERC1967 Proxy in Solidity\nDESCRIPTION: This function retrieves the immutable arguments from a deployed ERC1967 proxy instance. It's useful for accessing initialization data after deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967(address instance)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error for JSON Parsing in Solidity\nDESCRIPTION: Defines a custom error 'ParsingFailed()' to be used when JSON parsing fails due to invalid input.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ParsingFailed()\n```\n\n----------------------------------------\n\nTITLE: Calculating Minute Difference between Timestamps in Solidity\nDESCRIPTION: Internal pure function that calculates the difference in minutes between two timestamps.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_32\n\nLANGUAGE: solidity\nCODE:\n```\nfunction diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler Growth Function in Solidity\nDESCRIPTION: Increases the length of a lazy shuffler. Reverts if the shuffler has not been initialized.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction grow(LazyShuffler storage $, uint256 n) internal\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967Factory Initialization Code in Solidity\nDESCRIPTION: Declaration of the initialization code constant used to deploy the canonical ERC1967Factory. This combines the deployment header with the bytecode to create the complete initialization code.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factoryconstants.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nbytes internal constant INITCODE = abi.encodePacked(\n    hex\"608060405234801561001057600080fd5b506107f6806100206000396000f3fe\",\n    BYTECODE\n)\n```\n\n----------------------------------------\n\nTITLE: Decoding Delegate Call Execution Data in ERC7579 (Unchecked)\nDESCRIPTION: Decodes a delegate call execution data without bounds checks, assuming the data has been validated previously.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeDelegateUnchecked(bytes calldata executionData)\n    internal\n    pure\n    returns (address target, bytes calldata data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments from ERC1967I Proxy with Start Position\nDESCRIPTION: Returns immutable arguments from an ERC1967I proxy starting at the specified position to the end. Equivalent to calling argsOnERC1967I with maximum end value. The instance must be deployed with immutable args.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_35\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967I(address instance, uint256 start)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Internal Approval Function in ERC6909\nDESCRIPTION: Sets the allowance for a spender to use a specific amount of an owner's tokens. This internal function powers the public approval functions and emits an Approval event.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _approve(\n    address owner,\n    address spender,\n    uint256 id,\n    uint256 amount\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Making Contract Calls without Value in Solidity\nDESCRIPTION: Function that makes a call to a target contract with specified data but no value. Returns the result of the call. Reverts if the target is not a contract or if the call fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction callContract(address target, bytes memory data)\n    internal\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Binary Logarithm Calculation in Solidity\nDESCRIPTION: Computes the log2 of x. Equivalent to finding the index of the most significant bit (MSB) of x. Returns 0 if x is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction log2(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Copy uint256 Array in Solidity\nDESCRIPTION: Creates and returns a copy of the given uint256 array. This function is useful when you need to preserve the original array while performing operations on a copy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction copy(uint256[] memory a)\n    internal\n    pure\n    returns (uint256[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Re-encoding Batch with OpData in ERC7579\nDESCRIPTION: Re-encodes execution data with added operation data (opData), useful for forwarding execution data with extra context.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reencodeBatch(bytes calldata executionData, bytes memory opData)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Pack Two Strings Function in Solidity\nDESCRIPTION: Packs two strings with their lengths into a single word.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_34\n\nLANGUAGE: solidity\nCODE:\n```\nfunction packTwo(string memory a, string memory b)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Public Access Functions\nDESCRIPTION: Provides public functions for accessing implementation and owner addresses, and managing upgrades and ownership.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/upgradeablebeacon.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction implementation() public view returns (address result)\nfunction owner() public view returns (address result)\nfunction upgradeTo(address newImplementation) public virtual onlyOwner\nfunction transferOwnership(address newOwner) public virtual onlyOwner\nfunction renounceOwnership() public virtual onlyOwner\n```\n\n----------------------------------------\n\nTITLE: Simple Token Transfer\nDESCRIPTION: Internal function to transfer a token between addresses.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _transfer(address from, address to, uint256 id) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Array Type Conversion Functions\nDESCRIPTION: Functions for converting dynamic arrays to native Solidity array types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction asUint256Array(DynamicArray memory a) internal pure returns (uint256[] memory result)\nfunction asAddressArray(DynamicArray memory a) internal pure returns (address[] memory result)\nfunction asBoolArray(DynamicArray memory a) internal pure returns (bool[] memory result)\nfunction asBytes32Array(DynamicArray memory a) internal pure returns (bytes32[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Adding Years to Timestamp in Solidity\nDESCRIPTION: Adds a specified number of years to a Unix timestamp. Maintains the same calendar month but adjusts the day if necessary (e.g., February 29 to February 28 in non-leap years).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addYears(uint256 timestamp, uint256 numYears)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Get All Holders of a Role\nDESCRIPTION: Public view function that returns an array of all addresses that have a specific role active.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction roleHolders(uint256 role)\n    public\n    view\n    virtual\n    returns (address[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Role Conversion Utility Functions\nDESCRIPTION: Internal pure functions for converting between role ordinals and bitmaps.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _rolesFromOrdinals(uint8[] memory ordinals)\n    internal\n    pure\n    returns (uint256 roles)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _ordinalsFromRoles(uint256 roles)\n    internal\n    pure\n    returns (uint8[] memory ordinals)\n```\n\n----------------------------------------\n\nTITLE: ERC6551Proxy Guard Modifier\nDESCRIPTION: Modifier that ensures certain operations can only be performed via an ERC6551Proxy, providing an additional security layer for critical functions like contract upgrades.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyViaERC6551Proxy() virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing expWad Function for Exponential Calculation in Solidity\nDESCRIPTION: Implements the expWad function, which calculates exp(x) denominated in WAD. This is an approximation and is monotonically increasing.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction expWad(int256 x) internal pure returns (int256 r)\n```\n\n----------------------------------------\n\nTITLE: EIP7702 Authority Requirement Check\nDESCRIPTION: Function that enforces the call context to be from an EIP7702 authority.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkOnlyEIP7702Authority() internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Deploying Minimal ERC1967 Beacon Proxy with Value in Solidity\nDESCRIPTION: Function that deploys a minimal ERC1967 beacon proxy with a specified beacon address while depositing ETH during deployment. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_46\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967BeaconProxy(uint256 value, address beacon)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Owner Retrieval for ERC6551 Token-Bound Account\nDESCRIPTION: Function that returns the owner of the contract, which is typically the owner of the token this account is bound to.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction owner() public view virtual returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Counting Set Bits in Solidity\nDESCRIPTION: Returns the number of set bits (1s) in a uint256 value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction popCount(uint256 x) internal pure returns (uint256 c)\n```\n\n----------------------------------------\n\nTITLE: Implementing predictDeterministicAddress Function in Solidity\nDESCRIPTION: Calculates and returns the deterministic address that would be created when using the deployDeterministic function with a given salt value. Useful for address prediction before actual deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(bytes32 salt)\n    public\n    view\n    returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Unpack Single String Function in Solidity\nDESCRIPTION: Unpacks a string that was packed using packOne.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_33\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unpackOne(bytes32 packed)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing initCodeHash Function in Solidity\nDESCRIPTION: Returns the initialization code hash of the proxy, which can be used for mining vanity addresses with tools like create2crunch.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHash() public view returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967Factory Address Constant in Solidity\nDESCRIPTION: Declaration of the canonical ERC1967Factory address constant for EVM chains. This address is where the factory is deployed across compatible chains.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factoryconstants.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\naddress internal constant ADDRESS =\n    0x0000000000006396FF2a80c067f99B3d2Ab4Df24\n```\n\n----------------------------------------\n\nTITLE: Allowance Query Function in ERC6909\nDESCRIPTION: Returns the amount of a specific token ID that a spender is allowed to use on behalf of an owner. This enables delegated token transfers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction allowance(address owner, address spender, uint256 id)\n    public\n    view\n    virtual\n    returns (uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Selection for Unsigned Integers in Solidity\nDESCRIPTION: Returns the larger of two unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction max(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Generating Initialization Code for ERC1967 Proxy in Solidity\nDESCRIPTION: This function returns the initialization code for a minimal ERC1967 proxy with a specified implementation. It's used internally for proxy deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967(address implementation)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: Defining RLP List Structure in Solidity\nDESCRIPTION: Defines a struct that serves as a pointer to an RLP item list in memory. The internal _data field should not be modified directly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct List {\n    // Do NOT modify the `_data` directly.\n    uint256 _data;\n}\n```\n\n----------------------------------------\n\nTITLE: Compute Set Difference of Sorted uint256 Arrays in Solidity\nDESCRIPTION: Computes the sorted set difference between two uint256 arrays. The function assumes that the input arrays are sorted and uniquified. The result is also sorted and uniquified.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_9\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction difference(uint256[] memory a, uint256[] memory b)\n    internal\n    pure\n    returns (uint256[] memory c)\n```\n\n----------------------------------------\n\nTITLE: Union Operation for Address Arrays\nDESCRIPTION: Returns the sorted set union of two address arrays. Requires input arrays to be pre-sorted and uniquified for defined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction union(address[] memory a, address[] memory b)\n    internal\n    pure\n    returns (address[] memory c)\n```\n\n----------------------------------------\n\nTITLE: Validating Salt Prefix in Solidity\nDESCRIPTION: Checks if the given salt starts with either the zero address or the specified address. This function is used to enforce salt requirements in deterministic deployments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_89\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checkStartsWith(bytes32 salt, address by) internal pure\n```\n\n----------------------------------------\n\nTITLE: Implementing ECDSA Signature Recovery with Separate Components in Solidity\nDESCRIPTION: Recovers the signer's address from a message digest hash and signature components (v, r, s).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Tree Structure Definition\nDESCRIPTION: Basic structure definition for the red-black tree storage.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/redblacktreelib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Tree {\n    uint256 _spacer;\n}\n```\n\n----------------------------------------\n\nTITLE: Last IndexOf Function in Solidity\nDESCRIPTION: Finds the last occurrence of a needle string within a subject string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lastIndexOf(string memory subject, string memory needle)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Proxy with Value and Arguments\nDESCRIPTION: Creates a deterministic ERC1967I proxy with implementation, arguments, salt, and ETH value. Returns deployment status and instance address, intended for ERC4337 factories that shouldn't revert on existing deployments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_30\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967I(\n    uint256 value,\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Function that deploys a deterministic ERC1967I beacon proxy with a specified beacon address and salt. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_68\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967IBeaconProxy(\n    address beacon,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Distance Calculation for Unsigned Integers in Solidity\nDESCRIPTION: Computes the absolute distance between two unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction dist(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: ETH Deposit Function\nDESCRIPTION: Allows users to deposit ETH and receive an equivalent amount of WETH tokens. The function is payable to accept ETH transfers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/weth.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deposit() public payable virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Exponential Distribution Function in Solidity\nDESCRIPTION: Generates a sample from the unit exponential distribution denominated in WAD (10^18).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction exponentialWad(PRNG memory prng)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Defining Gas Stipend Constant\nDESCRIPTION: Sets a default gas stipend constant for contract reads that balances between functionality and grief prevention.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant GAS_STIPEND_NO_GRIEF = 100000\n```\n\n----------------------------------------\n\nTITLE: Upgrading ERC1967 Proxy via Bootstrap with Initialization Call\nDESCRIPTION: Replaces the implementation at an ERC1967 proxy instance and calls it with initialization data. This combines the upgrade and initialization steps for a bootstrapped proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_40\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bootstrapERC1967AndCall(\n    address instance,\n    address implementation,\n    bytes memory data\n) internal\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial uint256 Array Shuffling Function in Solidity\nDESCRIPTION: Partially shuffles a uint256 array in-place using the Fisher-Yates algorithm. Only the first k elements will be uniformly sampled without replacement.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, uint256[] memory a, uint256 k)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Implementing adminOf Function in Solidity\nDESCRIPTION: Returns the admin address of a given proxy contract by accessing the factory's storage mapping.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction adminOf(address proxy) public view returns (address admin)\n```\n\n----------------------------------------\n\nTITLE: String to Small String Conversion Function in Solidity\nDESCRIPTION: Converts a string to a normalized null-terminated bytes32.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toSmallString(string memory s)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Validating Date and Time in Solidity\nDESCRIPTION: Checks if a given date and time combination is valid. Verifies date components plus time constraints: hour < 24, minute < 60, and second < 60. Essential for input validation before processing datetime operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isSupportedDateTime(\n    uint256 year,\n    uint256 month,\n    uint256 day,\n    uint256 hour,\n    uint256 minute,\n    uint256 second\n) internal pure returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Raw Modulo for Unsigned Integers in Solidity\nDESCRIPTION: Performs modulo operation for unsigned integers, returning 0 if the divisor is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_44\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawMod(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Fallback Function Implementation for ERC6551\nDESCRIPTION: Fallback function that handles token callbacks and uses LibZip.cdFallback for generalized calldata decompression when no token callback is triggered.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfallback() external payable virtual override(Receiver) receiverFallback\n```\n\n----------------------------------------\n\nTITLE: Calculating Initcode Hash for Storage Contract in Solidity\nDESCRIPTION: Function to calculate the initialization code hash of the storage contract for given data, used for mining vanity addresses.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHash(bytes memory data)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Parsing Unsigned Integer from String in Solidity\nDESCRIPTION: Implements a function to parse an unsigned integer from a decimal string. Reverts if the input is invalid or too large for uint256.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseUint(string memory s)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Pop Operations\nDESCRIPTION: Functions to remove and return minimum value from storage and memory heaps\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pop(Heap storage heap) internal returns (uint256 popped)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pop(MemHeap memory heap) internal pure returns (uint256 popped)\n```\n\n----------------------------------------\n\nTITLE: Calculating Day Difference between Timestamps in Solidity\nDESCRIPTION: Internal pure function that calculates the difference in days between two timestamps.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_30\n\nLANGUAGE: solidity\nCODE:\n```\nfunction diffDays(uint256 fromTimestamp, uint256 toTimestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Unpack Two Strings Function in Solidity\nDESCRIPTION: Unpacks two strings that were packed using packTwo.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_35\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unpackTwo(bytes32 packed)\n    internal\n    pure\n    returns (string memory resultA, string memory resultB)\n```\n\n----------------------------------------\n\nTITLE: Tree Pointer Operations\nDESCRIPTION: Functions for working with tree pointers and traversing the tree structure.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/redblacktreelib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction value(bytes32 ptr) internal view returns (uint256 result)\n\nfunction first(Tree storage tree) internal view returns (bytes32 result)\n\nfunction last(Tree storage tree) internal view returns (bytes32 result)\n\nfunction next(bytes32 ptr) internal view returns (bytes32 result)\n\nfunction prev(bytes32 ptr) internal view returns (bytes32 result)\n\nfunction isEmpty(bytes32 ptr) internal pure returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967 Beacon Proxy with Arguments and Value in Solidity\nDESCRIPTION: Function that creates a deterministic minimal ERC1967 beacon proxy with a specified beacon address, initialization arguments, and salt, while depositing ETH during deployment. Returns a boolean indicating if the proxy was already deployed and the address of the proxy instance. Designed for ERC4337 factories.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_59\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967BeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: String Split Function in Solidity\nDESCRIPTION: Splits a string into an array of substrings based on a delimiter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction split(string memory subject, string memory delimiter)\n    internal\n    pure\n    returns (string[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Bubbling Up Reverts in Solidity\nDESCRIPTION: Utility function that re-throws a revert with the original error data. Used to propagate errors from low-level calls up the call stack.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bubbleUpRevert(bytes memory revertReturnData) internal pure\n```\n\n----------------------------------------\n\nTITLE: Cube Root Calculation in Solidity\nDESCRIPTION: Computes the cube root of x, rounded down to the nearest integer. Implementation credited to bout3fiddy and pcaversaccio under AGPLv3 license.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cbrt(uint256 x) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Deploys a deterministic ERC1967I beacon proxy with specified beacon address, initialization arguments, and salt. This function enables predictable proxy addresses.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_77\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967IBeaconProxy(\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments from Start Position on ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that retrieves immutable arguments from an ERC1967 beacon proxy instance, starting at the specified position. Equivalent to calling argsOnERC1967BeaconProxy with a specific start position and maximum end position.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_64\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967BeaconProxy(address instance, uint256 start)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Raw Addition for Unsigned Integers in Solidity\nDESCRIPTION: Performs addition without overflow checking for unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_36\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawAdd(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Name with Limit\nDESCRIPTION: View function to read the name() string with a custom length limit.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readName(address target, uint256 limit)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Validate Role Against Maximum\nDESCRIPTION: Internal view function that validates if a role is less than or equal to MAX_ROLE(). If MAX_ROLE() is not implemented, this function becomes a no-op.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _validateRole(uint256 role) internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Extended Token Approval\nDESCRIPTION: Internal function to set approval for token management with additional authorization parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _approve(address by, address account, uint256 id)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Extracting Call Type from ERC7579 Mode in Solidity\nDESCRIPTION: Extracts the call type (single, batch, staticcall, delegatecall) from a bytes32 mode value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getCallType(bytes32 mode) internal pure returns (bytes1)\n```\n\n----------------------------------------\n\nTITLE: Checking Power of 2 in Solidity\nDESCRIPTION: Determines if a uint256 value is a power of 2.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isPo2(uint256 x) internal pure returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Extended Safe Transfer with Data\nDESCRIPTION: Internal function for safe transfer with authorization and data parameters.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(\n    address by,\n    address from,\n    address to,\n    uint256 id,\n    bytes memory data\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Chain-Independent Typed Data Hashing - Solidity\nDESCRIPTION: Variant of _hashTypedData that excludes chainId from the domain separator calculation, optimized for cross-chain workflows.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/eip712.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _hashTypedDataSansChainId(bytes32 structHash)\n    internal\n    view\n    virtual\n    returns (bytes32 digest)\n```\n\n----------------------------------------\n\nTITLE: Initialized Event Definition in Solidity\nDESCRIPTION: Defines an event that is emitted when a contract has been initialized with a specific version number.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nevent Initialized(uint64 version)\n```\n\n----------------------------------------\n\nTITLE: Implementing searchSorted Function for Uint8Map in Solidity\nDESCRIPTION: Performs a binary search on a sorted range in the Uint8Map to find a specific value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction searchSorted(\n    Uint8Map storage map,\n    uint8 needle,\n    uint256 start,\n    uint256 end\n) internal view returns (bool found, uint256 index)\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Hash of ECDSA Signature Components in Solidity\nDESCRIPTION: Computes the canonical hash of ECDSA signature components (v, r, s), normalizing the s-value and v-value for uniqueness.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction canonicalHash(uint8 v, bytes32 r, bytes32 s)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Calculating Second Difference between Timestamps in Solidity\nDESCRIPTION: Internal pure function that calculates the difference in seconds between two timestamps.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_33\n\nLANGUAGE: solidity\nCODE:\n```\nfunction diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Smallest Elements Retrieval\nDESCRIPTION: Functions to get k smallest elements from storage and memory heaps\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction smallest(Heap storage heap, uint256 k)\n    internal\n    view\n    returns (uint256[] memory a)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction smallest(MemHeap memory heap, uint256 k)\n    internal\n    pure\n    returns (uint256[] memory a)\n```\n\n----------------------------------------\n\nTITLE: Base64 Encode with FileSafe Option in Solidity\nDESCRIPTION: Encodes bytes to base64 string with option for file-safe character replacements. Equivalent to calling encode(data, fileSafe, false).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/base64.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(bytes memory data, bool fileSafe)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Reverse uint256 Array in-place in Solidity\nDESCRIPTION: Reverses a uint256 array in-place, modifying the original array. This function is useful for converting between ascending and descending order.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction reverse(uint256[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Core Beacon Functions\nDESCRIPTION: Implements core functions for initialization, implementation updates, and ownership management.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/upgradeablebeacon.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _constructUpgradeableBeacon(address initialOwner, address initialImplementation) internal virtual\nfunction _initializeUpgradeableBeacon(address initialOwner, address initialImplementation) internal virtual\nfunction _setImplementation(address newImplementation) internal virtual\nfunction _setOwner(address newOwner) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Encoding RLP List in Solidity\nDESCRIPTION: Returns the complete RLP encoding of a list as a bytes array, which can be used for contract creation address computation or other RLP operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(List memory list)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Predict Deterministic Address Function\nDESCRIPTION: Internal view function to predict the deterministic contract address for a given salt.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/create3.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(bytes32 salt)\n    internal\n    view\n    returns (address deployed)\n```\n\n----------------------------------------\n\nTITLE: Decoding Delegate Call Execution Data in ERC7579 (With Checks)\nDESCRIPTION: Decodes a delegate call execution data into target address and calldata. Will revert if the execution data is not correctly encoded.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeDelegate(bytes calldata executionData)\n    internal\n    pure\n    returns (address target, bytes calldata data)\n```\n\n----------------------------------------\n\nTITLE: ERC721 Owner Query Implementation\nDESCRIPTION: Returns the owner of a specific token ID. Requires the token to exist.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction ownerOf(uint256 id) public view virtual returns (address result)\n```\n\n----------------------------------------\n\nTITLE: InvalidInitialization Error Definition in Solidity\nDESCRIPTION: Defines a custom error for when a contract is already initialized and initialization is attempted again.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror InvalidInitialization()\n```\n\n----------------------------------------\n\nTITLE: Defining ERC6551 State Storage Slot Constant\nDESCRIPTION: Defines a constant for the ERC6551 state storage slot, intentionally using a high value to avoid collision with other storage slots. This enables compatibility with both regular and upgradeable contracts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant _ERC6551_STATE_SLOT =\n    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffb919c7a5\n```\n\n----------------------------------------\n\nTITLE: Declaring Events for Ownership Changes in Solidity\nDESCRIPTION: Defines events for ownership transfer, handover request, and handover cancellation, compatible with EIP-173.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nevent OwnershipTransferred(\n    address indexed oldOwner, address indexed newOwner\n)\n\nevent OwnershipHandoverRequested(address indexed pendingOwner)\n\nevent OwnershipHandoverCanceled(address indexed pendingOwner)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967 Beacon Proxy with Arguments and Value in Solidity\nDESCRIPTION: Function that deploys a minimal ERC1967 beacon proxy with a specified beacon address and initialization arguments, while depositing ETH during deployment. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_55\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967BeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes memory args\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Simple Token Approval\nDESCRIPTION: Internal function to approve an account to manage a token.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _approve(address account, uint256 id) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Check if Value Exists in Sorted uint256 Array in Solidity\nDESCRIPTION: Checks if a given value exists in a sorted uint256 array. This function is an optimized version of searchSorted that only returns whether the value is found.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction inSorted(uint256[] memory a, uint256 needle)\n    internal\n    pure\n    returns (bool found)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Batch Unset Operation\nDESCRIPTION: Function to set multiple consecutive bits to false starting from a given index\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction unsetBatch(Bitmap storage bitmap, uint256 start, uint256 amount)\n    internal\n```\n\n----------------------------------------\n\nTITLE: EIP-5267 Domain Information Function - Solidity\nDESCRIPTION: Public view function implementing EIP-5267 standard to expose the contract's EIP-712 domain parameters.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/eip712.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction eip712Domain()\n    public\n    view\n    virtual\n    returns (\n        bytes1 fields,\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract,\n        bytes32 salt,\n        uint256[] memory extensions\n    )\n```\n\n----------------------------------------\n\nTITLE: Scientific Notation Packing in Solidity\nDESCRIPTION: Packs x into a smaller number using scientific notation. The mantissa occupies bits 7-255, and the exponent occupies bits 0-6.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction packSci(uint256 x) internal pure returns (uint256 packed)\n```\n\n----------------------------------------\n\nTITLE: Implementing get Function for Uint8Map in Solidity\nDESCRIPTION: Retrieves the uint8 value at a specific index from the Uint8Map.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(Uint8Map storage map, uint256 index)\n    internal\n    view\n    returns (uint8 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler next Function in Solidity\nDESCRIPTION: Performs a single Fisher-Yates shuffle step, increments the numShuffled counter, and returns the next value in the shuffled range. Reverts if there are no more values to shuffle.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nfunction next(LazyShuffler storage $, uint256 randomness)\n    internal\n    returns (uint256 chosen)\n```\n\n----------------------------------------\n\nTITLE: Reversing Bits in Solidity\nDESCRIPTION: Returns a uint256 value with all bits reversed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reverseBits(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Appending Bytes to RLP List in Solidity\nDESCRIPTION: Appends a bytes array to an existing RLP list and returns the list for function chaining.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(List memory list, bytes memory x)\n    internal\n    pure\n    returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Array Item by Index in Solidity\nDESCRIPTION: Implements a function to return the Item at a specific index in a JSON array. Returns an undefined Item if not found or if the parent is not an array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction at(Item memory item, uint256 i)\n    internal\n    pure\n    returns (Item memory result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Init Code Hash for ERC4337 Account in Solidity\nDESCRIPTION: View function that returns the initialization code hash of the ERC4337 account (a minimal ERC1967 proxy). This hash can be used for mining vanity addresses with tools like create2crunch.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc4337factory.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHash() public view virtual returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Vote-Related Public View Functions\nDESCRIPTION: This snippet implements additional public view functions for accessing checkpoint data and total voting supply information in the ERC20Votes contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20votes.md#2025-04-16_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction checkpointCount(address account) public view virtual returns (uint256 result)\nfunction checkpointAt(address account, uint256 i) public view virtual returns (uint48 checkpointClock, uint256 checkpointValue)\nfunction getVotesTotalSupply() public view virtual returns (uint256)\nfunction getPastVotesTotalSupply(uint256 timepoint) public view virtual returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Core Functions\nDESCRIPTION: Core external functions required by the ERC1155 standard including balanceOf, transfer and approval operations\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction uri(uint256 id) public view virtual returns (string memory);\n\nfunction balanceOf(address owner, uint256 id)\n    public\n    view\n    virtual\n    returns (uint256 result)\n\nfunction isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    returns (bool result)\n\nfunction setApprovalForAll(address operator, bool isApproved)\n    public\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Finding Most Recent Monday Timestamp in Solidity\nDESCRIPTION: Calculates the timestamp of the most recent Monday from a given timestamp. Useful for calculating the beginning of the current week.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction mondayTimestamp(uint256 timestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Appending Boolean to RLP List in Solidity\nDESCRIPTION: Appends a boolean value to an existing RLP list and returns the list for function chaining.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(List memory list, bool x)\n    internal\n    pure\n    returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Library Constants\nDESCRIPTION: Defines constants for string operations including character set lookups and search results.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant NOT_FOUND = type(uint256).max\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint128 internal constant ALPHANUMERIC_7_BIT_ASCII =\n    0x7fffffe07fffffe03ff000000000000\n```\n\nLANGUAGE: solidity\nCODE:\n```\nuint128 internal constant LETTERS_7_BIT_ASCII =\n    0x7fffffe07fffffe0000000000000000\n```\n\n----------------------------------------\n\nTITLE: State Update Internal Function for ERC6551\nDESCRIPTION: Internal function that updates the account's state. Must be called in every public/external function that modifies storage or emits events to maintain state consistency.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _updateState() internal virtual\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Pre-Transfer Hook Usage Check\nDESCRIPTION: Virtual function to indicate if _beforeTokenTransfer hook is being used, helping optimize bytecode by avoiding dead code.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _useBeforeTokenTransfer() internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Group Sum for Address Keys\nDESCRIPTION: Sorts and uniquifies address keys array while updating the corresponding values array with grouped sums by key.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction groupSum(address[] memory keys, uint256[] memory values)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Object Item by Key in Solidity\nDESCRIPTION: Implements a function to return the Item with a specific key in a JSON object. Returns an undefined Item if not found or if the parent is not an object.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction at(Item memory item, string memory k)\n    internal\n    pure\n    returns (Item memory result)\n```\n\n----------------------------------------\n\nTITLE: Royalty Info Query Implementation\nDESCRIPTION: Function to get royalty information for a specific token and sale price.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction royaltyInfo(uint256 tokenId, uint256 salePrice)\n    public\n    view\n    virtual\n    returns (address receiver, uint256 royaltyAmount)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC6551 Registry Constants in Solidity\nDESCRIPTION: Defines constant values for the ERC6551 registry address and bytecode, which are used across various functions in the library.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc6551.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\naddress internal constant REGISTRY =\n    0x000000006551c19487814612e58FE06813775758\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbytes internal constant REGISTRY_BYTECODE =\n    hex\"608060405234801561001057600080fd5b50600436106100365760003560e01c8063246a00211461003b5780638a54c52f1461006a575b600080fd5b61004e6100493660046101b7565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e6100783660046101b7565b6100e1565b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b60015284601552605560002060601b60601c60005260206000f35b600060806024608c376e5af43d82803e903d91602b57fd5bf3606c5285605d52733d60ad80600a3d3981f3363d3d373d3d3d363d7360495260ff60005360b76055206035523060601b600152846015526055600020803b61018b578560b760556000f580610157576320188a596000526004601cfd5b80606c52508284887f79f19b3655ee38b1ce526556b7731a20c8f218fbda4a3990b6cc4172fdf887226060606ca46020606cf35b8060601b60601c60005260206000f35b80356001600160a01b03811681146101b257600080fd5b919050565b600080600080600060a086880312156101cf57600080fd5b6101d88661019b565b945060208601359350604086013592506101f46060870161019b565b94979396509194608001359291505056fea2646970667358221220ea2fe53af507453c64dd7c1db05549fa47a298dfb825d6d11e1689856135f16764736f6c63430008110033\"\n```\n\n----------------------------------------\n\nTITLE: Role Update Event Definition in Solidity\nDESCRIPTION: Event emitted when a user's roles are updated, tracking both the user address and their new roles bitmap.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent RolesUpdated(address indexed user, uint256 indexed roles)\n```\n\n----------------------------------------\n\nTITLE: Internal Operator Setting Function in ERC6909\nDESCRIPTION: Enables or disables an address as an operator for an owner, granting or revoking permission to manage all tokens. This internal function powers the public operator setting functions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setOperator(address owner, address operator, bool approved)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic ERC1967I Proxy Address with Arguments\nDESCRIPTION: Predicts the address where an ERC1967I proxy with implementation, arguments, salt, and deployer will be deployed. The returned result has dirty upper 96 bits that should be cleaned if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_33\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967I(\n    address implementation,\n    bytes memory args,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Name with Limit and Gas\nDESCRIPTION: View function to read the name() string with custom length limit and gas stipend.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readName(address target, uint256 limit, uint256 gasStipend)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Plain WebAuthn Verification Function\nDESCRIPTION: Alternative verification function that accepts individual parameters instead of the WebAuthnAuth struct.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/webauthn.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verify(\n    bytes memory challenge,\n    bool requireUserVerification,\n    bytes memory authenticatorData,\n    string memory clientDataJSON,\n    uint256 challengeIndex,\n    uint256 typeIndex,\n    bytes32 r,\n    bytes32 s,\n    bytes32 x,\n    bytes32 y\n) internal view returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Adding Minutes to Timestamp in Solidity\nDESCRIPTION: Adds a specified number of minutes to a Unix timestamp. Useful for calculating future times based on minute intervals.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addMinutes(uint256 timestamp, uint256 numMinutes)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation for Signed Integers in Solidity\nDESCRIPTION: Performs linear interpolation between a and b based on t, clamped between begin and end for signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_34\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lerp(int256 a, int256 b, int256 t, int256 begin, int256 end)\n    internal\n    pure\n    returns (int256)\n```\n\n----------------------------------------\n\nTITLE: Handling Compressed Calldata in Solidity Fallback Function\nDESCRIPTION: This function is designed to be called in a contract's fallback function to handle compressed calldata. It directly returns the results and terminates the context for efficiency.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libzip.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cdFallback() internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfallback() external payable { LibZip.cdFallback(); }\nreceive() external payable {}\n```\n\n----------------------------------------\n\nTITLE: Subtracting Days from Timestamp in Solidity\nDESCRIPTION: Subtracts a specified number of days from a Unix timestamp. Useful for calculating past dates based on a given interval of days.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction subDays(uint256 timestamp, uint256 numDays)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing nonReentrant Modifier in Solidity\nDESCRIPTION: Modifier that protects functions from reentrancy attacks using transient storage.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguardtransient.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier nonReentrant() virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing bytes Shuffling Function in Solidity\nDESCRIPTION: Shuffles bytes in-place using the Fisher-Yates algorithm.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, bytes memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Implementing get Function for Dynamic Arrays in Solidity\nDESCRIPTION: Creates a function to retrieve an element from a uint256 array at a specific index, without bounds checking.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(uint256[] memory a, uint256 i)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Storage Slot Constants\nDESCRIPTION: Defines storage slot constants for implementation and owner addresses using keccak256 hashes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/upgradeablebeacon.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant _UPGRADEABLE_BEACON_IMPLEMENTATION_SLOT = 0x911c5a209f08d5ec5e\nuint256 internal constant _UPGRADEABLE_BEACON_OWNER_SLOT = 0x4343a0dc92ed22dbfc\n```\n\n----------------------------------------\n\nTITLE: ERC1967 Implementation Slot Definition\nDESCRIPTION: Defines the standard ERC-1967 storage slot constant for storing the implementation address in the proxy. The value is derived from keccak256(\"eip1967.proxy.implementation\") - 1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant _ERC1967_IMPLEMENTATION_SLOT =\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n```\n\n----------------------------------------\n\nTITLE: Pack Single String Function in Solidity\nDESCRIPTION: Packs a string with its length into a single word.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_32\n\nLANGUAGE: solidity\nCODE:\n```\nfunction packOne(string memory a) internal pure returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Generating ERC1967I Proxy Init Code with Arguments\nDESCRIPTION: Returns the initialization code of an ERC1967I proxy with the given implementation and arguments. This code includes the immutable arguments that will be stored in the proxy contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967I(address implementation, bytes memory args)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: onlyInitializing Modifier for Initialization Scope in Solidity\nDESCRIPTION: Modifier that restricts function execution to only be called within the scope of initializer or reinitializer modifiers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyInitializing() virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Functions for ERC20Votes\nDESCRIPTION: This snippet defines internal functions for managing voting units, token transfers, and delegation in the ERC20Votes implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20votes.md#2025-04-16_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction _getVotingUnits(address delegator) internal view virtual returns (uint256)\nfunction _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override\nfunction _transferVotingUnits(address from, address to, uint256 amount) internal virtual\nfunction _moveDelegateVotes(address from, address to, uint256 amount) internal virtual\nfunction _delegate(address account, address delegatee) internal virtual\n```\n\n----------------------------------------\n\nTITLE: String Equality Function in Solidity\nDESCRIPTION: Checks if two strings are equal.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nfunction eq(string memory a, string memory b)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Event Definitions for Upgrades and Ownership\nDESCRIPTION: Defines events for tracking implementation upgrades and ownership transfers, compatible with EIP-173.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/upgradeablebeacon.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent Upgraded(address indexed implementation)\nevent OwnershipTransferred(address indexed oldOwner, address indexed newOwner)\n```\n\n----------------------------------------\n\nTITLE: Adding Seconds to Timestamp in Solidity\nDESCRIPTION: Adds a specified number of seconds to a Unix timestamp. Since Unix timestamps are measured in seconds, this is a direct addition operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addSeconds(uint256 timestamp, uint256 numSeconds)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Converting Unix Timestamp to Date and Time in Solidity\nDESCRIPTION: Converts a Unix timestamp to its complete Gregorian calendar components (year, month, day, hour, minute, second). Inputs outside supported ranges result in undefined behavior.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction timestampToDateTime(uint256 timestamp)\n    internal\n    pure\n    returns (\n        uint256 year,\n        uint256 month,\n        uint256 day,\n        uint256 hour,\n        uint256 minute,\n        uint256 second\n    )\n```\n\n----------------------------------------\n\nTITLE: NotInitializing Error Definition in Solidity\nDESCRIPTION: Defines a custom error for when a function that should only be called during initialization is called outside of initialization.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror NotInitializing()\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Get Operation\nDESCRIPTION: Function to retrieve the boolean value of a specific bit at the given index in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(Bitmap storage bitmap, uint256 index)\n    internal\n    view\n    returns (bool isSet)\n```\n\n----------------------------------------\n\nTITLE: HTML Escape Function in Solidity\nDESCRIPTION: Escapes special characters in a string for use within HTML tags.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction escapeHTML(string memory s)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining Uint8Map Struct in Solidity\nDESCRIPTION: Defines a struct for storing uint8 values in a packed mapping.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Uint8Map {\n    mapping(uint256 => uint256) map;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Calldata Flags Array in Solidity\nDESCRIPTION: This utility function returns an empty calldata bool array, which can be used as a placeholder for flags when none are required in multi-proof verification.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emptyFlags() internal pure returns (bool[] calldata flags)\n```\n\n----------------------------------------\n\nTITLE: Creating Execute Function Calldata for ERC7579\nDESCRIPTION: Generates calldata for the execute function with mode, execution data, and operation data, ready to be used in a contract call.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reencodeBatchAsExecuteCalldata(\n    bytes32 mode,\n    bytes calldata executionData,\n    bytes memory opData\n) internal pure returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Check if uint256 Array is Sorted in Solidity\nDESCRIPTION: Checks if a uint256 array is sorted in ascending order. This function is useful for validating the order of an array before performing operations that require sorted input.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_7\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction isSorted(uint256[] memory a) internal pure returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Clone Address in Solidity\nDESCRIPTION: This function predicts the address of a deterministic clone based on the implementation, arguments, salt, and deployer. It's useful for calculating addresses before deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(\n    address implementation,\n    bytes memory data,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC-Based ERC1271 Signature Validation in Solidity\nDESCRIPTION: Performs signature validation without nested EIP-712 to allow for easy sign-ins. This function is designed to always return false or revert when called on-chain to prevent security issues.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271IsValidSignatureViaRPC(\n    bytes32 hash,\n    bytes calldata signature\n) internal view virtual returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Creating RLP List with Boolean Element in Solidity\nDESCRIPTION: Returns a new RLP list with a boolean as the only element. Equivalent to LibRLP.p().p(x).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(bool x) internal pure returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Item Structure in Solidity\nDESCRIPTION: Defines a struct 'Item' to represent a pointer to a parsed JSON node, containing a single uint256 data field.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Item {\n    // Do NOT modify the `_data` directly.\n    uint256 _data;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdminChanged Event in Solidity\nDESCRIPTION: Event emitted when the admin of a proxy contract has been changed. Indexes both the proxy address and the new admin address for efficient filtering.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent AdminChanged(address indexed proxy, address indexed admin)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Definitions\nDESCRIPTION: Defines custom errors for string operations including hex length validation, size limits, and ASCII validation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror HexLengthInsufficient()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nerror TooBigForSmallString()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nerror StringNot7BitASCII()\n```\n\n----------------------------------------\n\nTITLE: State Retrieval for ERC6551 Account\nDESCRIPTION: Function that returns the current value of the account's state, which is stored in a dedicated storage slot.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction state() public view virtual returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Interface Support Check in ERC6909\nDESCRIPTION: Implements ERC-165 interface detection, allowing other contracts to query if this contract supports specific interfaces based on interface IDs.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Defining Call Struct for Batch Execution in Solidity\nDESCRIPTION: Defines a Call struct used in the execute function for batch transactions. It includes fields for the recipient address, value to send, and calldata.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc7821.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Call {\n    address to; // Replaced as `address(this)` if `address(0)`. Renamed to `to` for Ithaca Porto.\n    uint256 value; // Amount of native currency (i.e. Ether) to send.\n    bytes data; // Calldata to send with the call.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining P256 Verifier Address Constant in Solidity\nDESCRIPTION: Defines the address constant for the Solidity P256 verifier contract. This verifier returns 0 on failure for easier existence checks and never reverts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\naddress internal constant VERIFIER =\n    0x000000000000D01eA45F9eFD5c54f037Fa57Ea1a\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Population Count\nDESCRIPTION: Function to count the number of set bits within a specified range in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction popCount(Bitmap storage bitmap, uint256 start, uint256 amount)\n    internal\n    view\n    returns (uint256 count)\n```\n\n----------------------------------------\n\nTITLE: Finding Nth Weekday in Month in Solidity\nDESCRIPTION: Calculates the timestamp for the nth occurrence of a specific weekday in a given month and year. Useful for determining dates like \"3rd Friday of February 2022\". The parameter n is 1-indexed for traditional consistency.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction nthWeekdayInMonthOfYearTimestamp(\n    uint256 year,\n    uint256 month,\n    uint256 n,\n    uint256 wd\n) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Defining DeploymentFailed Custom Error in Solidity\nDESCRIPTION: Defines a custom error to be thrown when the storage contract deployment fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror DeploymentFailed()\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Item Value in Solidity\nDESCRIPTION: Implements a function to return the string value of a JSON item, preserving its exact representation in the original JSON string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction value(Item memory item)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: String Comparison Function in Solidity\nDESCRIPTION: Compares two strings, returning -1, 0, or 1 based on their relationship.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_31\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cmp(string memory a, string memory b)\n    internal\n    pure\n    returns (int256)\n```\n\n----------------------------------------\n\nTITLE: Check Token Approval Status\nDESCRIPTION: Internal function to check if an account is the owner or approved manager of a specific token ID.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isApprovedOrOwner(address account, uint256 id)\n    internal\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Parsing Unsigned Integer from Hexadecimal String in Solidity\nDESCRIPTION: Implements a function to parse an unsigned integer from a hexadecimal string. Reverts if the input is invalid or too large for uint256.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseUintFromHex(string memory s)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Signed Message Hash from Bytes in Solidity\nDESCRIPTION: Generates an Ethereum Signed Message hash from a given bytes input, compatible with eth_sign JSON-RPC method. Supports input lengths up to 999999 bytes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toEthSignedMessageHash(bytes memory s)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap SetTo Operation\nDESCRIPTION: Function to set a specific bit to a given boolean value at the given index in the bitmap\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setTo(Bitmap storage bitmap, uint256 index, bool shouldSet)\n    internal\n```\n\n----------------------------------------\n\nTITLE: Internal Timed Role Management Functions\nDESCRIPTION: Collection of internal functions for role management and validation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/timedroles.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setTimedRole(\n    address holder,\n    uint256 timedRole,\n    uint40 start,\n    uint40 expires\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Decoding Batch Execution Data in ERC7579 (Unchecked)\nDESCRIPTION: Decodes a batch of executions without bounds checks, assuming the data has been validated previously.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeBatchUnchecked(bytes calldata executionData)\n    internal\n    pure\n    returns (bytes32[] calldata pointers)\n```\n\n----------------------------------------\n\nTITLE: Check Caller is Owner or Has Any Role\nDESCRIPTION: Internal view function that reverts if the message sender is not the contract owner and does not have any of the roles in the encoded roles array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkOwnerOrRoles(bytes memory encodedRoles)\n    internal\n    view\n    virtual\n```\n\n----------------------------------------\n\nTITLE: TimedRole Event Definition\nDESCRIPTION: Event emitted when a timed role's active time range is set for a holder.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/timedroles.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent TimedRoleSet(\n    address indexed holder,\n    uint256 indexed timedRole,\n    uint40 start,\n    uint40 expires\n)\n```\n\n----------------------------------------\n\nTITLE: Tree Size and Values Access Functions\nDESCRIPTION: Functions to get the size and retrieve all values from the tree.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/redblacktreelib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction size(Tree storage tree) internal view returns (uint256 result)\n\nfunction values(Tree storage tree)\n    internal\n    view\n    returns (uint256[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Raw Multiplication for Unsigned Integers in Solidity\nDESCRIPTION: Performs multiplication without overflow checking for unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_40\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawMul(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Encoding Bytes as RLP in Solidity\nDESCRIPTION: Returns the RLP encoding of a bytes array as a bytes array. Used for encoding arbitrary binary data in RLP format.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(bytes memory x)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Token URI Getter Method for ERC6909 Metadata\nDESCRIPTION: Returns the Uniform Resource Identifier (URI) for a specific token ID. This function is part of the ERC6909 metadata extension.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenURI(uint256 id) public view virtual returns (string memory);\n```\n\n----------------------------------------\n\nTITLE: Before Transfer Hook\nDESCRIPTION: Hook function called before any token transfer operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(address from, address to, uint256 id)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Storage and Immutable Definitions\nDESCRIPTION: Defines storage layout and immutable variables for the contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/lifebuoy.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal immutable _lifebuoyDeployerHash\nbytes32 internal constant _RESCUE_LOCKED_FLAGS_SLOT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffb8e2915b\n```\n\n----------------------------------------\n\nTITLE: Generating ERC1967 Bootstrap Init Code\nDESCRIPTION: Returns the initialization code of the ERC1967 bootstrap with the specified authorized upgrader. This code is used to deploy the bootstrap contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_43\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967Bootstrap(address authorizedUpgrader)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: Normalizing P256 Signature Component in Solidity\nDESCRIPTION: Function to normalize the 's' component of a P256 signature to the lower half of the curve.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction normalized(bytes32 s) internal pure returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Defining NOT_FOUND Constant in Solidity\nDESCRIPTION: Constant value returned when search operations fail to find a match in byte sequences.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbytes.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant NOT_FOUND = type(uint256).max\n```\n\n----------------------------------------\n\nTITLE: Boolean OR Operation in Solidity\nDESCRIPTION: Performs a boolean OR operation on any boolean inputs.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction or(bool x, bool y) internal pure returns (bool z)\n```\n\n----------------------------------------\n\nTITLE: Validating Unix Epoch Day in Solidity\nDESCRIPTION: Checks if a given epoch day (days since 1970-01-01) is within the supported range. Ensures that date calculations will produce valid results.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isSupportedEpochDay(uint256 epochDay)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Adding Months to Timestamp in Solidity\nDESCRIPTION: Adds a specified number of months to a Unix timestamp. Adjusts the day if necessary when the target month has fewer days than the original day (e.g., January 31 to February 28).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addMonths(uint256 timestamp, uint256 numMonths)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1271 Personal Sign Typehash Constant in Solidity\nDESCRIPTION: Defines the constant typehash for personal sign operations. This typehash is used for validating personal signatures according to the ERC1271 standard.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant _PERSONAL_SIGN_TYPEHASH =\n    0x983e65e5148e570cd828ead231ee759a8d7958721a768f93bc4483ba005c32de\n```\n\n----------------------------------------\n\nTITLE: Defining EIP7702 Delegation Initialization Request Slot in EIP7702Proxy\nDESCRIPTION: Defines the transient storage slot for requesting the proxy to initialize the implementation. The value is calculated as keccak256(\"eip7702.proxy.delegation.initialization.request\") - 1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/eip7702proxy.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant\n    _EIP7702_PROXY_DELEGATION_INITIALIZATION_REQUEST_SLOT =\n        0x94e11c6e41e7fb92cb8bb65e13fdfbd4eba8b831292a1a220f7915c78c7c078f\n```\n\n----------------------------------------\n\nTITLE: Appending Address to RLP List in Solidity\nDESCRIPTION: Appends an address to an existing RLP list and returns the list for function chaining.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(List memory list, address x)\n    internal\n    pure\n    returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Bytes32 to String Conversion Function in Solidity\nDESCRIPTION: Converts a null-terminated bytes32 to a string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction fromSmallString(bytes32 s)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: ERC7821 Execution Override\nDESCRIPTION: Implementation of the ERC7821 execution function with role verification and operation state management.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/timelock.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _execute(\n    bytes32 mode,\n    bytes calldata executionData,\n    Call[] calldata calls,\n    bytes calldata opData\n) internal virtual override(ERC7821)\n```\n\n----------------------------------------\n\nTITLE: Implementing PUSH0 Variant Minimal Proxy Operations in Solidity\nDESCRIPTION: Defines a set of functions for deploying and managing PUSH0 variant minimal proxies. These functions are optimized for use with the PUSH0 opcode introduced in the Shanghai upgrade.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clone_PUSH0(address implementation)\n    internal\n    returns (address instance)\n\nfunction clone_PUSH0(uint256 value, address implementation)\n    internal\n    returns (address instance)\n\nfunction cloneDeterministic_PUSH0(address implementation, bytes32 salt)\n    internal\n    returns (address instance)\n\nfunction cloneDeterministic_PUSH0(\n    uint256 value,\n    address implementation,\n    bytes32 salt\n) internal returns (address instance)\n\nfunction initCode_PUSH0(address implementation)\n    internal\n    pure\n    returns (bytes memory c)\n\nfunction initCodeHash_PUSH0(address implementation)\n    internal\n    pure\n    returns (bytes32 hash)\n\nfunction predictDeterministicAddress_PUSH0(\n    address implementation,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Installing Solady with Foundry\nDESCRIPTION: Command to install Solady using Foundry package manager. This snippet shows how to add Solady to a Foundry-based project.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/overview.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nforge install vectorized/solady\n```\n\n----------------------------------------\n\nTITLE: Raw Division for Unsigned Integers in Solidity\nDESCRIPTION: Performs division for unsigned integers, returning 0 if the divisor is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_42\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawDiv(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Calldata Proof Array in Solidity\nDESCRIPTION: This utility function returns an empty calldata bytes32 array, which can be used as a placeholder for proofs when none are required.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/merkleprooflib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emptyProof() internal pure returns (bytes32[] calldata proof)\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Events\nDESCRIPTION: Event definitions for tracking token transfers, batch transfers, approvals and URI updates\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent TransferSingle(\n    address indexed operator,\n    address indexed from,\n    address indexed to,\n    uint256 id,\n    uint256 amount\n)\n\nevent TransferBatch(\n    address indexed operator,\n    address indexed from,\n    address indexed to,\n    uint256[] ids,\n    uint256[] amounts\n)\n\nevent ApprovalForAll(\n    address indexed owner, address indexed operator, bool isApproved\n)\n\nevent URI(string value, uint256 indexed id)\n```\n\n----------------------------------------\n\nTITLE: Encoding Boolean as RLP in Solidity\nDESCRIPTION: Returns the RLP encoding of a boolean value as a bytes array. Booleans are converted to uint256 (1 for true, 0 for false) before encoding.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(bool x) internal pure returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Appending uint256 to RLP List in Solidity\nDESCRIPTION: Appends a uint256 value to an existing RLP list and returns the list for function chaining.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(List memory list, uint256 x)\n    internal\n    pure\n    returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Initialization Check Function in Solidity\nDESCRIPTION: Internal function that reverts if the contract is not in the initializing state, enforcing that certain functions can only be called during initialization.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkInitializing() internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Raw Signed Division in Solidity\nDESCRIPTION: Performs division for signed integers, returning 0 if the divisor is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_43\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawSDiv(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial address Array Shuffling Function in Solidity\nDESCRIPTION: Partially shuffles an address array in-place using the Fisher-Yates algorithm. Only the first k elements will be uniformly sampled without replacement.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, address[] memory a, uint256 k)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address for ERC1967I Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Calculates the deterministic address of an ERC1967I beacon proxy given the beacon address, initialization arguments, salt, and deployer. The returned address has dirty upper 96 bits that need cleaning if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_83\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967IBeaconProxy(\n    address beacon,\n    bytes memory args,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Getting Initialization Code for ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that returns the initialization code of the minimal ERC1967 beacon proxy with a specified beacon address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_51\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967BeaconProxy(address beacon)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: WAD-Denominated Cube Root in Solidity\nDESCRIPTION: Computes the cube root of x, denominated in WAD (10^18), rounded down to the nearest integer.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction cbrtWad(uint256 x) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Base-10 Logarithm Calculation in Solidity\nDESCRIPTION: Computes the log10 of x. Returns 0 if x is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction log10(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Proxy Call Modifier\nDESCRIPTION: Modifier that restricts function access to calls made through a proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyProxy() virtual\n```\n\n----------------------------------------\n\nTITLE: Delegated Token Transfer Function in ERC6909\nDESCRIPTION: Transfers tokens on behalf of another address. Requires sufficient allowance or operator status. Handles special cases for maximum allowance and maintains efficiency by deducting allowance in all cases.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction transferFrom(address from, address to, uint256 id, uint256 amount)\n    public\n    payable\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Pre-Fallback Hook\nDESCRIPTION: Virtual function called before executing the receiverFallback modifier body.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeReceiverFallbackBody() internal virtual\n```\n\n----------------------------------------\n\nTITLE: Base64 Decode in Solidity\nDESCRIPTION: Decodes a base64 encoded string back to bytes. Supports both standard and file-safe encodings. Note that this function assumes valid input and does not validate the input string format.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/base64.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decode(string memory data)\n    internal\n    pure\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Raw Addition with Modulo in Solidity\nDESCRIPTION: Performs addition followed by modulo operation for unsigned integers, returning 0 if the divisor is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_46\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawAddMod(uint256 x, uint256 y, uint256 d)\n    internal\n    pure\n    returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Ownership Read Functions in Solidity\nDESCRIPTION: Defines public view functions for getting the current owner and checking ownership handover expiration.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction owner() public view virtual returns (address result)\n\nfunction ownershipHandoverExpiresAt(address pendingOwner)\n    public\n    view\n    virtual\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Push Operations\nDESCRIPTION: Functions to add new values to storage and memory heaps\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction push(Heap storage heap, uint256 value) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction push(MemHeap memory heap, uint256 value) internal pure\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Post-Transfer Hook Usage Check\nDESCRIPTION: Virtual function to indicate if _afterTokenTransfer hook is being used, helping optimize bytecode by avoiding dead code.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _useAfterTokenTransfer() internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Timelock Constants Definition\nDESCRIPTION: Defines the core role constants and special addresses used in the timelock contract for access control.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/timelock.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 public constant ADMIN_ROLE = 0\nuint256 public constant PROPOSER_ROLE = 1\nuint256 public constant EXECUTOR_ROLE = 2\nuint256 public constant CANCELLER_ROLE = 3\nuint256 public constant MAX_ROLE = 3\naddress public constant OPEN_ROLE_HOLDER = 0x0303030303030303030303030303030303030303\n```\n\n----------------------------------------\n\nTITLE: Check Caller Has Role\nDESCRIPTION: Internal view function that reverts if the message sender does not have the specified role.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkRole(uint256 role) internal view virtual\n```\n\n----------------------------------------\n\nTITLE: String and Small String Equality Function in Solidity\nDESCRIPTION: Checks if a string equals a null-terminated bytes32 string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_30\n\nLANGUAGE: solidity\nCODE:\n```\nfunction eqs(string memory a, bytes32 b)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Error Definition\nDESCRIPTION: Custom error definition for empty heap condition\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror HeapIsEmpty()\n```\n\n----------------------------------------\n\nTITLE: Clean Address Array\nDESCRIPTION: Cleans the upper 96 bits of addresses in an array. Used when addresses are produced via assembly and might contain dirty upper bits.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clean(address[] memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Operator Status Check in ERC6909\nDESCRIPTION: Determines if a spender is approved as an operator for an owner, which grants permission to manage all of the owner's tokens.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isOperator(address owner, address spender)\n    public\n    view\n    virtual\n    returns (bool status)\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address for Storage Contract in Solidity\nDESCRIPTION: Function to predict the CREATE3 deterministic address for a given salt, deployed by the current contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(bytes32 salt)\n    internal\n    view\n    returns (address pointer)\n```\n\n----------------------------------------\n\nTITLE: Counting Leading Zeros in Solidity\nDESCRIPTION: Counts the number of zeros preceding the most significant one bit in a uint256. Returns 256 if input is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clz(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Invalidating a Bump storage slot in Solidity\nDESCRIPTION: Makes a Bump point to a completely new storage slot, effectively invalidating the previous one.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction invalidate(Bump storage b) internal\n```\n\n----------------------------------------\n\nTITLE: Calculating Days in Month in Solidity\nDESCRIPTION: Returns the number of days in a specific month of a given year. Accounts for leap years when calculating February's length. Essential for date validation and manipulation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction daysInMonth(uint256 year, uint256 month)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Checking RIP-7212 Precompile or Verifier Existence in Solidity\nDESCRIPTION: Function to check if either the RIP-7212 precompile or the verifier exists on the current chain. Useful for implementing manual reverts if P256 operations are not supported.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasPrecompileOrVerifier() internal view returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Extracting Execution Type from ERC7579 Mode in Solidity\nDESCRIPTION: Extracts the execution type (default or try) from a bytes32 mode value in ERC7579.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExecType(bytes32 mode) internal pure returns (bytes1)\n```\n\n----------------------------------------\n\nTITLE: Defining onlyOwner Modifier in Solidity\nDESCRIPTION: Implements a modifier to restrict function access to the contract owner.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\nmodifier onlyOwner() virtual\n```\n\n----------------------------------------\n\nTITLE: Defining LazyShufflerAlreadyInitialized Error in Solidity\nDESCRIPTION: Custom error triggered when attempting to initialize a lazy shuffler that has already been initialized.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nerror LazyShufflerAlreadyInitialized()\n```\n\n----------------------------------------\n\nTITLE: Calculating Year Difference between Timestamps in Solidity\nDESCRIPTION: Internal pure function that calculates the difference in Gregorian calendar years between two timestamps. May return non-zero even if actual time difference is less than a year if timestamps are in different calendar years.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction diffYears(uint256 fromTimestamp, uint256 toTimestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Generating Initialization Code for Clone in Solidity\nDESCRIPTION: This function returns the initialization code of a clone for a given implementation and immutable arguments. It is used internally for clone deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCode(address implementation, bytes memory args)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: Array Initialization Functions\nDESCRIPTION: Functions for creating and initializing dynamic arrays with different data types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p() internal pure returns (DynamicArray memory result)\nfunction p(uint256 data) internal pure returns (DynamicArray memory result)\nfunction p(address data) internal pure returns (DynamicArray memory result)\nfunction p(bool data) internal pure returns (DynamicArray memory result)\nfunction p(bytes32 data) internal pure returns (DynamicArray memory result)\n```\n\n----------------------------------------\n\nTITLE: Calculating Initialization Code Hash for ERC1967I Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Computes and returns the initialization code hash of the ERC1967I beacon proxy with specified beacon address and initialization arguments. This hash is used for deterministic address calculations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_82\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967IBeaconProxy(address beacon, bytes memory args)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Absolute Value Calculation in Solidity\nDESCRIPTION: Computes the absolute value of a signed integer.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction abs(int256 x) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Subtracting Minutes from Timestamp in Solidity\nDESCRIPTION: Subtracts a specified number of minutes from a Unix timestamp. Useful for calculating past times based on minute intervals.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction subMinutes(uint256 timestamp, uint256 numMinutes)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Declaring NOT_FOUND Constant in Solidity\nDESCRIPTION: Declares a constant to represent the value returned when an element is not found in the array, set to the maximum value of uint256.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant NOT_FOUND = type(uint256).max\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address with Custom Deployer in Solidity\nDESCRIPTION: Function to predict the CREATE3 deterministic address for a given salt and deployer address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddress(bytes32 salt, address deployer)\n    internal\n    pure\n    returns (address pointer)\n```\n\n----------------------------------------\n\nTITLE: Calculating ERC1967I Proxy Init Code Hash with Arguments\nDESCRIPTION: Returns the keccak256 hash of the initialization code for an ERC1967I proxy with the given implementation and arguments. Used for CREATE2 address prediction with immutable arguments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_32\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967I(address implementation, bytes memory args)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Decoding Single Call Execution Data in ERC7579 (Unchecked)\nDESCRIPTION: Decodes a single call execution data without bounds checks, assuming the data has been validated previously.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeSingleUnchecked(bytes calldata executionData)\n    internal\n    pure\n    returns (address target, uint256 value, bytes calldata data)\n```\n\n----------------------------------------\n\nTITLE: Approval Event Definition in ERC6909\nDESCRIPTION: Defines the Approval event emitted when an owner approves a spender to use a specific amount of a particular token ID.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nevent Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 indexed id,\n    uint256 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LazyShuffler Struct in Solidity\nDESCRIPTION: A storage-based struct for implementing a lazy Fisher-Yates shuffler for a range [0..n). Uses bit packing for efficient storage with defined bit layout.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nstruct LazyShuffler {\n    // Bits Layout:\n    // - [0..31]    `numShuffled`\n    // - [32..223]  `permutationSlot`\n    // - [224..255] `length`\n    uint256 _state;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Signed Integer from String in Solidity\nDESCRIPTION: Implements a function to parse a signed integer from a decimal string. Reverts if the input is invalid or outside the int256 range.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parseInt(string memory s) internal pure returns (int256 result)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Decimals\nDESCRIPTION: View function to read the decimals() uint8 value from a target contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readDecimals(address target) internal view returns (uint8)\n```\n\n----------------------------------------\n\nTITLE: Reading Generic Uint\nDESCRIPTION: View function to read a uint value from a target contract using custom calldata.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readUint(address target, bytes memory data)\n    internal\n    view\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that deploys a deterministic minimal ERC1967 beacon proxy with a specified beacon address and salt. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_47\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967BeaconProxy(address beacon, bytes32 salt)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Checking Execution Mode Support in Solidity\nDESCRIPTION: Implements a function to check if a specific execution mode is supported by the contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc7821.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsExecutionMode(bytes32 mode)\n    public\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Rounded-Up Binary Logarithm in Solidity\nDESCRIPTION: Calculates the log2 of x, rounded up to the nearest integer. Returns 0 if x is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction log2Up(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Extracting Payload from ERC7579 Mode in Solidity\nDESCRIPTION: Extracts the bytes22 payload from a bytes32 mode value in ERC7579.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getPayload(bytes32 mode) internal pure returns (bytes22)\n```\n\n----------------------------------------\n\nTITLE: EIP7702 Authority Modifier\nDESCRIPTION: Modifier that restricts function access to calls made through an EIP7702 authority.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyEIP7702Authority() virtual\n```\n\n----------------------------------------\n\nTITLE: Appending Nested List to RLP List in Solidity\nDESCRIPTION: Appends a nested RLP list to an existing RLP list and returns the list for function chaining, enabling complex nested RLP structures.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(List memory list, List memory x)\n    internal\n    pure\n    returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments Slice from ERC1967I Proxy\nDESCRIPTION: Returns a slice of immutable arguments on an ERC1967I proxy instance from start to end position. The bounds are clamped to valid range. The instance must be deployed via ERC1967 with immutable args functions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_36\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967I(address instance, uint256 start, uint256 end)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Group Sum for Uint256 Keys\nDESCRIPTION: Sorts and uniquifies uint256 keys array while updating the corresponding values array with grouped sums by key.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction groupSum(uint256[] memory keys, uint256[] memory values)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Linear Interpolation for Unsigned Integers in Solidity\nDESCRIPTION: Performs linear interpolation between a and b based on t, clamped between begin and end.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_33\n\nLANGUAGE: solidity\nCODE:\n```\nfunction lerp(uint256 a, uint256 b, uint256 t, uint256 begin, uint256 end)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Access Control Functions\nDESCRIPTION: Implements ownership verification and modifier for access control.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/upgradeablebeacon.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkOwner() internal view virtual\nmodifier onlyOwner() virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Next Random Number Function in Solidity\nDESCRIPTION: Generates the next pseudorandom uint256 value from the PRNG. All bits of the returned value pass the NIST Statistical Test Suite.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction next(PRNG memory prng) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Solady Project Structure\nDESCRIPTION: Tree structure showing the organization of smart contracts in the src directory, including accounts, auth, tokens, and utilities modules with their descriptions\nSOURCE: https://github.com/Vectorized/solady/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: ml\nCODE:\n```\naccounts\n├─ EIP7702Proxy — \"Relay proxy for EIP7702 delegations\"\n├─ ERC1271 — \"ERC1271 mixin with nested EIP-712 approach\"\n├─ ERC4337 — \"Simple ERC4337 account implementation\"\n├─ ERC4337Factory — \"Simple ERC4337 account factory implementation\"\n├─ ERC6551 — \"Simple ERC6551 account implementation\"\n├─ ERC6551Proxy — \"Relay proxy for upgradeable ERC6551 accounts\"\n├─ ERC7821 — \"Minimal batch executor mixin\"\n├─ LibEIP7702 — \"Library for EIP7702 operations\"\n├─ LibERC6551 — \"Library for interacting with ERC6551 accounts\"\n├─ LibERC7579 — \"Library for handling ERC7579 mode and execution data\"\n├─ Receiver — \"Receiver mixin for ETH and safe-transferred ERC721 and ERC1155 tokens\"\n├─ Timelock — \"Simple timelock\"\nauth\n├─ EnumerableRoles — \"Enumerable multiroles authorization mixin\"\n├─ Ownable — \"Simple single owner authorization mixin\"\n├─ OwnableRoles — \"Simple single owner and multiroles authorization mixin\"\n├─ TimedRoles — \"Timed multiroles authorization mixin\"\ntokens\n├─ ERC1155 — \"Simple ERC1155 implementation\"\n├─ ERC20 — \"Simple ERC20 + EIP-2612 implementation\"\n├─ ERC20Votes — \"ERC20 with votes based on ERC5805 and ERC6372\"\n├─ ERC2981 — \"Simple ERC2981 NFT Royalty Standard implementation\"\n├─ ERC4626 — \"Simple ERC4626 tokenized Vault implementation\"\n├─ ERC6909 — \"Simple EIP-6909 minimal multi-token implementation\"\n├─ ERC721 — \"Simple ERC721 implementation with storage hitchhiking\"\n├─ WETH — \"Simple Wrapped Ether implementation\"\nutils\n├─ Base64 — \"Library for Base64 encoding and decoding\"\n├─ CallContextChecker — \"Call context checker mixin\"\n├─ CREATE3 — \"Deterministic deployments agnostic to the initialization code\"\n├─ DateTimeLib — \"Library for date time operations\"\n├─ DeploylessPredeployQueryer — \"Deployless queryer for predeploys\"\n├─ DynamicArrayLib — \"Library for memory arrays with automatic capacity resizing\"\n├─ DynamicBufferLib — \"Library for buffers with automatic capacity resizing\"\n├─ ECDSA — \"Library for verification of ECDSA signatures\"\n├─ EIP712 — \"Contract for EIP-712 typed structured data hashing and signing\"\n├─ ERC1967Factory — \"Factory for deploying and managing ERC1967 proxy contracts\"\n├─ ERC1967FactoryConstants — \"The address and bytecode of the canonical ERC1967Factory\"\n├─ EfficientHashLib — \"Library for efficiently performing keccak256 hashes\"\n├─ EnumerableMapLib — \"Library for managing enumerable maps in storage\"\n├─ EnumerableSetLib — \"Library for managing enumerable sets in storage\"\n├─ FixedPointMathLib — \"Arithmetic library with operations for fixed-point numbers\"\n├─ GasBurnerLib — \"Library for burning gas without reverting\"\n├─ Initializable — \"Initializable mixin for the upgradeable contracts\"\n├─ JSONParserLib — \"Library for parsing JSONs\"\n├─ LibBit — \"Library for bit twiddling and boolean operations\"\n├─ LibBitmap — \"Library for storage of packed booleans\"\n├─ LibClone — \"Minimal proxy library\"\n├─ LibMap — \"Library for storage of packed unsigned integers\"\n├─ LibPRNG — \"Library for generating pseudorandom numbers\"\n├─ LibRLP — \"Library for RLP encoding and CREATE address computation\"\n├─ LibSort — \"Library for efficient sorting of memory arrays\"\n├─ LibStorage — \"Library for basic storage operations\"\n├─ LibString — \"Library for converting numbers into strings and other string operations\"\n├─ LibTransient — \"Library for transient storage operations\"\n├─ LibZip — \"Library for compressing and decompressing bytes\"\n├─ Lifebuoy — \"Class that allows for rescue of ETH, ERC20, ERC721 tokens\"\n├─ MerkleProofLib — \"Library for verification of Merkle proofs\"\n├─ MetadataReaderLib — \"Library for reading contract metadata robustly\"\n├─ MinHeapLib — \"Library for managing a min-heap in storage or memory\"\n├─ Multicallable — \"Contract that enables a single call to call multiple methods on itself\"\n├─ P256 — \"Gas optimized P256 wrapper\"\n├─ RedBlackTreeLib — \"Library for managing a red-black-tree in storage\"\n├─ ReentrancyGuard — \"Reentrancy guard mixin\"\n├─ SSTORE2 — \"Library for cheaper reads and writes to persistent storage\"\n├─ SafeCastLib — \"Library for integer casting that reverts on overflow\"\n├─ SafeTransferLib — \"Safe ERC20/ETH transfer lib that handles missing return values\"\n├─ SignatureCheckerLib — \"Library for verification of ECDSA and ERC1271 signatures\"\n├─ UUPSUpgradeable — \"UUPS proxy mixin\"\n├─ UpgradeableBeacon — \"Upgradeable beacon for ERC1967 beacon proxies\"\n├─ WebAuthn — \"WebAuthn helper\"\n├─ legacy — \"Legacy support\"\n└─ ext — \"Utilities for external protocols\"\n```\n\n----------------------------------------\n\nTITLE: Defining WAD Constant for Fixed-Point Arithmetic in Solidity\nDESCRIPTION: Defines the WAD constant, which represents the scalar used for fixed-point arithmetic in Ethereum and most ERC20 tokens.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant WAD = 1e18\n```\n\n----------------------------------------\n\nTITLE: Getting Initialization Code Hash for ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that returns the initialization code hash of the minimal ERC1967 beacon proxy with a specified beacon address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_52\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967BeaconProxy(address beacon)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Decimals with Gas\nDESCRIPTION: View function to read the decimals() uint8 value with custom gas stipend.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readDecimals(address target, uint256 gasStipend)\n    internal\n    view\n    returns (uint8)\n```\n\n----------------------------------------\n\nTITLE: Token Specific Royalty Setting Implementation\nDESCRIPTION: Internal function to set royalty parameters for a specific token with validation checks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setTokenRoyalty(\n    uint256 tokenId,\n    address receiver,\n    uint96 feeNumerator\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Creating RLP List with Bytes Element in Solidity\nDESCRIPTION: Returns a new RLP list with a bytes array as the only element. Equivalent to LibRLP.p().p(x).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(bytes memory x) internal pure returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments Slice from ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Retrieves a slice of immutable arguments from an ERC1967I beacon proxy instance between specified start and end indices. This function clamps the indices to the valid range and requires the instance to be deployed via the ERC1967I beacon proxy functions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_86\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967IBeaconProxy(\n    address instance,\n    uint256 start,\n    uint256 end\n) internal view returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Creating Empty RLP List in Solidity\nDESCRIPTION: Returns a new empty RLP list for building RLP encoded data.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p() internal pure returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Item Children in Solidity\nDESCRIPTION: Implements a function to return an array of child Items for a JSON array or object. Returns an empty array for other types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction children(Item memory item)\n    internal\n    pure\n    returns (Item[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Group Sum for Int256 Keys\nDESCRIPTION: Sorts and uniquifies int256 keys array while updating the corresponding values array with grouped sums by key.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libsort.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction groupSum(int256[] memory keys, uint256[] memory values)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Finding Common Bit Prefix in Solidity\nDESCRIPTION: Returns the common prefix of two uint256 values at the bit level.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction commonBitPrefix(uint256 x, uint256 y)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Defining Events for Delegation Changes in ERC20Votes\nDESCRIPTION: This snippet defines events for tracking changes in delegation and voting power in the ERC20Votes implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20votes.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nevent DelegateChanged(address indexed delegator, address indexed from, address indexed to)\nevent DelegateVotesChanged(address indexed delegate, uint256 oldValue, uint256 newValue)\n```\n\n----------------------------------------\n\nTITLE: Self Implementation Accessor\nDESCRIPTION: Internal function that returns the implementation address of the current contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _selfImplementation() internal view virtual returns (address)\n```\n\n----------------------------------------\n\nTITLE: Writing Deterministic Data to Storage Contract in Solidity\nDESCRIPTION: Function to write data into a storage contract using CREATE3 workflow, returning an address dependent only on the salt.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction writeDeterministic(bytes memory data, bytes32 salt)\n    internal\n    returns (address pointer)\n```\n\n----------------------------------------\n\nTITLE: Role Management Core Functions\nDESCRIPTION: Core internal functions for managing role assignments and permissions, including direct role setting and updating.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _setRoles(address user, uint256 roles) internal virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _updateRoles(address user, uint256 roles, bool on)\n    internal\n    virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _grantRoles(address user, uint256 roles) internal virtual\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _removeRoles(address user, uint256 roles) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments Range from ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that retrieves a slice of immutable arguments from an ERC1967 beacon proxy instance within a specified range. The instance must be deployed via ERC1967 beacon proxy with immutable args functions, otherwise behavior is undefined.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_65\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967BeaconProxy(\n    address instance,\n    uint256 start,\n    uint256 end\n) internal view returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address for ERC1967 Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Function that predicts the deployment address of an ERC1967 beacon proxy based on the beacon, initialization arguments, salt, and deployer address. Note that the returned result has dirty upper 96 bits that need to be cleaned if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_62\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967BeaconProxy(\n    address beacon,\n    bytes memory args,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: ETH Receive Function\nDESCRIPTION: Fallback function that handles direct ETH transfers to the contract. Functions equivalently to the deposit() function.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/weth.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nreceive() external payable virtual\n```\n\n----------------------------------------\n\nTITLE: Count Role Holders\nDESCRIPTION: Public view function that returns the total number of addresses that have a specific role active.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction roleHolderCount(uint256 role)\n    public\n    view\n    virtual\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Defining Bitmap Structure in Solidity\nDESCRIPTION: Defines the core Bitmap structure using a mapping of uint256 to uint256 for storing packed boolean values\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Bitmap {\n    mapping(uint256 => uint256) map;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PRNG Seeding Function in Solidity\nDESCRIPTION: Seeds the pseudorandom number generator with an initial state value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction seed(PRNG memory prng, uint256 state) internal pure\n```\n\n----------------------------------------\n\nTITLE: Token Royalty Reset Implementation\nDESCRIPTION: Internal function to remove royalty settings for a specific token.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _resetTokenRoyalty(uint256 tokenId) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Getting JSON Item Size in Solidity\nDESCRIPTION: Implements a function to return the number of children for a JSON array or object. Returns zero for other types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction size(Item memory item) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Symbol\nDESCRIPTION: View function to read the symbol() string from a target contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readSymbol(address target) internal view returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Reversing Bytes in Solidity\nDESCRIPTION: Returns a uint256 value with all bytes reversed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction reverseBytes(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Code Hashes for Various Proxy Types in Solidity\nDESCRIPTION: Declares constant bytes32 values representing the keccak256 hashes of deployed code for different types of proxies. These constants are used for verification and comparison purposes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant CLONE_CODE_HASH =\n    0x48db2cfdb2853fce0b464f1f93a1996469459df3ab6c812106074c4106a1eb1f\n\nbytes32 internal constant PUSH0_CLONE_CODE_HASH =\n    0x67bc6bde1b84d66e267c718ba44cf3928a615d29885537955cb43d44b3e789dc\n\nbytes32 internal constant CWIA_CODE_HASH =\n    0x3cf92464268225a4513da40a34d967354684c32cd0edd67b5f668dfe3550e940\n\nbytes32 internal constant ERC1967_CODE_HASH =\n    0xaaa52c8cc8a0e3fd27ce756cc6b4e70c51423e9b597b11f32d3e49f8b1fc890d\n\nbytes32 internal constant ERC1967I_CODE_HASH =\n    0xce700223c0d4cea4583409accfc45adac4a093b3519998a9cbbe1504dadba6f7\n\nbytes32 internal constant ERC1967_BEACON_PROXY_CODE_HASH =\n    0x14044459af17bc4f0f5aa2f658cb692add77d1302c29fe2aebab005eea9d1162\n\nbytes32 internal constant ERC1967I_BEACON_PROXY_CODE_HASH =\n    0xf8c46d2793d5aa984eb827aeaba4b63aedcab80119212fce827309788735519a\n```\n\n----------------------------------------\n\nTITLE: Creating Deterministic ERC1967I Proxy with Value\nDESCRIPTION: Creates a deterministic ERC1967I proxy with ETH value, returning deployment status and instance address. Intended for ERC4337 factories that shouldn't revert if the proxy is already deployed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction createDeterministicERC1967I(\n    uint256 value,\n    address implementation,\n    bytes32 salt\n) internal returns (bool alreadyDeployed, address instance)\n```\n\n----------------------------------------\n\nTITLE: Post-Fallback Hook\nDESCRIPTION: Virtual function called after executing the receiverFallback modifier body.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterReceiverFallbackBody() internal virtual\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Auth Encoding and Decoding Functions\nDESCRIPTION: Collection of helper functions for encoding and decoding WebAuthnAuth data in both regular and compact formats, including calldata variants.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/webauthn.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encodeAuth(WebAuthnAuth memory auth)\n    internal\n    pure\n    returns (bytes memory)\n\nfunction tryDecodeAuth(bytes memory encodedAuth)\n    internal\n    pure\n    returns (WebAuthnAuth memory decoded)\n\nfunction tryEncodeAuthCompact(WebAuthnAuth memory auth)\n    internal\n    pure\n    returns (bytes memory result)\n\nfunction tryDecodeAuthCompact(bytes memory encodedAuth)\n    internal\n    pure\n    returns (WebAuthnAuth memory decoded)\n\nfunction tryDecodeAuthCompactCalldata(bytes calldata encodedAuth)\n    internal\n    pure\n    returns (WebAuthnAuth memory decoded)\n```\n\n----------------------------------------\n\nTITLE: Raw Addition for Signed Integers in Solidity\nDESCRIPTION: Performs addition without overflow checking for signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_37\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawAdd(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic Address for ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Calculates the deterministic address of an ERC1967I beacon proxy given the beacon address, salt, and deployer. The returned address has dirty upper 96 bits that need to be cleaned if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_74\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967IBeaconProxy(\n    address beacon,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967 Implementation Storage Slot Constant in Solidity\nDESCRIPTION: Defines the storage slot used for the implementation address in ERC1967 proxies. This is a standardized constant value determined by subtracting 1 from the keccak256 hash of a specific string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant _IMPLEMENTATION_SLOT =\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n```\n\n----------------------------------------\n\nTITLE: Predicting Counterfactual Address for Storage Contract in Solidity\nDESCRIPTION: Function to predict the CREATE2 address of a storage contract for given data and salt, deployed by the current contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictCounterfactualAddress(bytes memory data, bytes32 salt)\n    internal\n    view\n    returns (address pointer)\n```\n\n----------------------------------------\n\nTITLE: Defining Reentrancy Error in Solidity\nDESCRIPTION: Defines a custom error for unauthorized reentrant calls in Solidity. This error can be thrown when a reentrancy attempt is detected.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguard.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nerror Reentrancy()\n```\n\n----------------------------------------\n\nTITLE: Implementing Mainnet Check for Transient Storage in Solidity\nDESCRIPTION: Internal view function that determines whether to use transient storage reentrancy guard only on mainnet for L2 compatibility.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguardtransient.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _useTransientReentrancyGuardOnlyOnMainnet()\n    internal\n    view\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Balance Overflow in ERC6909\nDESCRIPTION: Defines a custom error that's thrown when a token operation would cause a balance to overflow.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nerror BalanceOverflow()\n```\n\n----------------------------------------\n\nTITLE: Factorial Calculation in Solidity\nDESCRIPTION: Computes the factorial of x.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction factorial(uint256 x) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: String Slice Function with Start and End in Solidity\nDESCRIPTION: Extracts a substring from start to end (exclusive) byte offsets.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction slice(string memory subject, uint256 start, uint256 end)\n    internal\n    pure\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Decoding P256 Point from Calldata in Solidity\nDESCRIPTION: Helper function to decode a P256 point (x, y) from a calldata bytes array. Returns (0, 0) if input length is less than 64 bytes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryDecodePointCalldata(bytes calldata encoded)\n    internal\n    pure\n    returns (bytes32 x, bytes32 y)\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967I Beacon Proxy with Value in Solidity\nDESCRIPTION: Function that deploys an ERC1967I beacon proxy with a specified beacon address while depositing ETH during deployment. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_67\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967IBeaconProxy(uint256 value, address beacon)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Checking for Leap Year in Solidity\nDESCRIPTION: Determines if a given year is a leap year in the Gregorian calendar. Leap years have an extra day (February 29) and occur in years divisible by 4, except for century years not divisible by 400.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isLeapYear(uint256 year) internal pure returns (bool leap)\n```\n\n----------------------------------------\n\nTITLE: Defining Call Struct for Batch Execution in ERC6551\nDESCRIPTION: Defines a Call struct used by the executeBatch function to handle multiple calls in a single transaction. Each Call contains a target address, value amount, and data to be executed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Call {\n    address target;\n    uint256 value;\n    bytes data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing changeAdmin Function in Solidity\nDESCRIPTION: Sets a new admin for a proxy contract. The caller must be the current admin of the proxy as recorded in the factory's storage.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction changeAdmin(address proxy, address admin) public\n```\n\n----------------------------------------\n\nTITLE: Calculating Month Difference between Timestamps in Solidity\nDESCRIPTION: Internal pure function that calculates the difference in Gregorian calendar months between two timestamps. May return non-zero even if actual time difference is less than a month if timestamps are in different calendar months.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nfunction diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Arguments from ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Retrieves all immutable arguments from an ERC1967I beacon proxy instance. This function is equivalent to calling argsOnERC1967IBeaconProxy with start at 0 and end at the maximum possible value.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_84\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967IBeaconProxy(address instance)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Execution from Batch in ERC7579\nDESCRIPTION: Gets the i-th execution from a batch of pointers, returning target address, value, and calldata without bounds checks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getExecution(bytes32[] calldata pointers, uint256 i)\n    internal\n    pure\n    returns (address target, uint256 value, bytes calldata data)\n```\n\n----------------------------------------\n\nTITLE: Normalize Small String Function in Solidity\nDESCRIPTION: Normalizes a bytes32 string by zeroing bytes after the first null byte.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction normalizeSmallString(bytes32 s)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Creating RLP List with uint256 Element in Solidity\nDESCRIPTION: Returns a new RLP list with a uint256 as the only element. Equivalent to LibRLP.p().p(x).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(uint256 x) internal pure returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Raw Boolean AND Operation in Solidity\nDESCRIPTION: Performs a boolean AND operation on clean boolean inputs. Inputs must be properly cleaned (0 or 1).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawAnd(bool x, bool y) internal pure returns (bool z)\n```\n\n----------------------------------------\n\nTITLE: Even Number Check in Solidity\nDESCRIPTION: Determines if x is an even number.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_35\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isEven(uint256 x) internal pure returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Initializable Storage Slot Function in Solidity\nDESCRIPTION: Virtual function that returns the storage slot used for initialization state. Can be overridden to use a custom storage slot.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initializableSlot() internal pure virtual returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: Valid Signer Access Control Modifier for ERC6551\nDESCRIPTION: Modifier that restricts function access to valid signers, typically the owner of the token this account is bound to.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyValidSigner() virtual\n```\n\n----------------------------------------\n\nTITLE: Decoding P256 Point from Memory in Solidity\nDESCRIPTION: Helper function to decode a P256 point (x, y) from a memory bytes array. Returns (0, 0) if input length is less than 64 bytes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryDecodePoint(bytes memory encoded)\n    internal\n    pure\n    returns (bytes32 x, bytes32 y)\n```\n\n----------------------------------------\n\nTITLE: Creating RLP List with Address Element in Solidity\nDESCRIPTION: Returns a new RLP list with an address as the only element. Equivalent to LibRLP.p().p(x).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction p(address x) internal pure returns (List memory result)\n```\n\n----------------------------------------\n\nTITLE: Checking for OpData in ERC7579 Execution Data\nDESCRIPTION: Determines whether the provided execution data contains optional operation data (opData).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasOpData(bytes calldata executionData)\n    internal\n    pure\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Validating ERC6551 Account in Solidity\nDESCRIPTION: Function to check if a given address is an ERC6551 account with an expected implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc6551.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isERC6551Account(address a, address expectedImplementation)\n    internal\n    view\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial int256 Array Shuffling Function in Solidity\nDESCRIPTION: Partially shuffles an int256 array in-place using the Fisher-Yates algorithm. Only the first k elements will be uniformly sampled without replacement.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nfunction shuffle(PRNG memory prng, int256[] memory a, uint256 k)\n    internal\n    pure\n```\n\n----------------------------------------\n\nTITLE: Accessing JSON Item Parent in Solidity\nDESCRIPTION: Implements a function to return the parent Item of a JSON Item. Returns an undefined Item if there is no parent.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction parent(Item memory item)\n    internal\n    pure\n    returns (Item memory result)\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler length Function in Solidity\nDESCRIPTION: Returns the length of the lazy shuffler. Returns zero if not initialized, otherwise a value less than 2^32-1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction length(LazyShuffler storage $)\n    internal\n    view\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Predicting Deterministic ERC1967I Proxy Address\nDESCRIPTION: Predicts the address where an ERC1967I proxy will be deployed given the implementation, salt, and deployer address. The returned result has dirty upper 96 bits that should be cleaned if used in assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967I(\n    address implementation,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Adding Hours to Timestamp in Solidity\nDESCRIPTION: Adds a specified number of hours to a Unix timestamp. Useful for calculating future times based on hourly intervals.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction addHours(uint256 timestamp, uint256 numHours)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Memory Management Utility\nDESCRIPTION: Helper function for memory management safety in heap operations\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bumpFreeMemoryPointer() internal pure\n```\n\n----------------------------------------\n\nTITLE: DeploymentFailed Error Definition\nDESCRIPTION: Custom error definition for failed contract deployments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/create3.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror DeploymentFailed()\n```\n\n----------------------------------------\n\nTITLE: Array Element Access Functions\nDESCRIPTION: Functions for accessing elements at specific indices without bounds checking.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(DynamicArray memory a, uint256 i) internal pure returns (uint256 result)\nfunction getUint256(DynamicArray memory a, uint256 i) internal pure returns (uint256 result)\nfunction getAddress(DynamicArray memory a, uint256 i) internal pure returns (address result)\nfunction getBool(DynamicArray memory a, uint256 i) internal pure returns (bool result)\nfunction getBytes32(DynamicArray memory a, uint256 i) internal pure returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Getting Empty Calldata Bytes in ERC7579 Helper\nDESCRIPTION: Helper function that returns empty calldata bytes, useful for default or placeholder values in ERC7579 operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emptyCalldataBytes()\n    internal\n    pure\n    returns (bytes calldata result)\n```\n\n----------------------------------------\n\nTITLE: String EndsWith Function in Solidity\nDESCRIPTION: Checks if a subject string ends with a needle string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction endsWith(string memory subject, string memory needle)\n    internal\n    pure\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Errors for Ownable Contract in Solidity\nDESCRIPTION: Defines custom errors for unauthorized access, invalid new owner, no handover request, and double initialization scenarios.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nerror Unauthorized()\nerror NewOwnerIsZeroAddress()\nerror NoHandoverRequest()\nerror AlreadyInitialized()\n```\n\n----------------------------------------\n\nTITLE: Receiver Fallback Modifier Override for ERC6551\nDESCRIPTION: Overrides the Receiver.receiverFallback modifier to provide token callback handling specific to ERC6551, including ownership cycle checks for safe-transferred ERC721 tokens.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier receiverFallback() override(Receiver)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Beacon Proxy with Value and Arguments in Solidity\nDESCRIPTION: Deploys a deterministic ERC1967I beacon proxy with a specified ETH value, beacon address, initialization arguments, and salt. This function allows for sending ETH during deterministic proxy deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_78\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967IBeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Reading Generic String with Limit\nDESCRIPTION: View function to read a string with custom calldata and length limit.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readString(address target, bytes memory data, uint256 limit)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Distance Calculation for Signed Integers in Solidity\nDESCRIPTION: Calculates the absolute distance between two signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction dist(int256 x, int256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Name Function\nDESCRIPTION: View function to read the name() string from a target contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readName(address target) internal view returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967 Implementation Storage Slot in EIP7702Proxy\nDESCRIPTION: Defines the ERC-1967 storage slot constant for the implementation address in the proxy. The value is calculated as keccak256(\"eip1967.proxy.implementation\") - 1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/eip7702proxy.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant _ERC1967_IMPLEMENTATION_SLOT =\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n```\n\n----------------------------------------\n\nTITLE: Operator Setting Function in ERC6909\nDESCRIPTION: Enables or disables an address as an operator for the caller, granting or revoking permission to manage all of the caller's tokens. Emits an OperatorSet event.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_13\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setOperator(address operator, bool approved)\n    public\n    payable\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Average Calculation for Signed Integers in Solidity\nDESCRIPTION: Calculates the average of two signed integers, rounding towards negative infinity.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_22\n\nLANGUAGE: solidity\nCODE:\n```\nfunction avg(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Declaring JSON Type Constants in Solidity\nDESCRIPTION: Defines constants for different JSON data types, including undefined, array, object, number, string, boolean, and null.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint8 internal constant TYPE_UNDEFINED = 0\nuint8 internal constant TYPE_ARRAY = 1\nuint8 internal constant TYPE_OBJECT = 2\nuint8 internal constant TYPE_NUMBER = 3\nuint8 internal constant TYPE_STRING = 4\nuint8 internal constant TYPE_BOOLEAN = 5\nuint8 internal constant TYPE_NULL = 6\n```\n\n----------------------------------------\n\nTITLE: Retrieving Immutable Arguments from Clone in Solidity\nDESCRIPTION: This function retrieves a slice of the immutable arguments from a deployed clone instance. It allows accessing specific portions of the arguments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnClone(address instance, uint256 start, uint256 end)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Raw Subtraction for Unsigned Integers in Solidity\nDESCRIPTION: Performs subtraction without underflow checking for unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_38\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawSub(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: String IndicesOf Function in Solidity\nDESCRIPTION: Returns all byte indices where a needle string occurs in a subject string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction indicesOf(string memory subject, string memory needle)\n    internal\n    pure\n    returns (uint256[] memory)\n```\n\n----------------------------------------\n\nTITLE: Fee Denominator Implementation\nDESCRIPTION: Internal function that returns the denominator for royalty calculations, defaulting to 10000 for basis points.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _feeDenominator() internal pure virtual returns (uint96)\n```\n\n----------------------------------------\n\nTITLE: Default Deployer Function\nDESCRIPTION: Virtual function that returns the default deployer address, defaulting to tx.origin.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/lifebuoy.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _lifebuoyDefaultDeployer() internal view virtual returns (address)\n```\n\n----------------------------------------\n\nTITLE: Decoding Batch and OpData in ERC7579 (Unchecked)\nDESCRIPTION: Decodes a batch of executions and optional operation data without bounds checks, assuming the data has been validated previously.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction decodeBatchAndOpDataUnchecked(bytes calldata executionData)\n    internal\n    pure\n    returns (bytes32[] calldata pointers, bytes calldata opData)\n```\n\n----------------------------------------\n\nTITLE: Pre-Transfer Hook in ERC6909\nDESCRIPTION: Hook function that's called before any token transfer, including minting and burning. This empty virtual function can be overridden to add custom logic before transfers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Symbol with Limit and Gas\nDESCRIPTION: View function to read the symbol() string with custom length limit and gas stipend.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readSymbol(address target, uint256 limit, uint256 gasStipend)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Declaring Self Reference Immutable in EIP7702Proxy\nDESCRIPTION: Defines an immutable variable that stores the address of the contract itself, used to differentiate between calls on the EOA and calls on the proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/eip7702proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal immutable __self = uint256(uint160(address(this)))\n```\n\n----------------------------------------\n\nTITLE: Maximum Value Selection for Signed Integers in Solidity\nDESCRIPTION: Returns the larger of two signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_29\n\nLANGUAGE: solidity\nCODE:\n```\nfunction max(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Defining Upgraded Event in Solidity\nDESCRIPTION: Event emitted when a proxy contract's implementation has been upgraded. Indexes both the proxy address and the new implementation address for efficient filtering.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nevent Upgraded(address indexed proxy, address indexed implementation)\n```\n\n----------------------------------------\n\nTITLE: Implementation Context Check\nDESCRIPTION: Function that verifies if the current call context is on the implementation contract itself.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _onImplementation() internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Checking for Weekend in Solidity\nDESCRIPTION: Determines if a given timestamp falls on a weekend (Saturday or Sunday). Returns true for weekends and false for weekdays. The negation can be used to check for weekdays.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isWeekEnd(uint256 timestamp) internal pure returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Raw Subtraction for Signed Integers in Solidity\nDESCRIPTION: Performs subtraction without underflow checking for signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_39\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawSub(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: JSON Escape Function in Solidity\nDESCRIPTION: Escapes a string for use in JSON.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nfunction escapeJSON(string memory s)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining CREATE3 Proxy Initcode Hash Constant in Solidity\nDESCRIPTION: Defines a constant hash value for the CREATE3 proxy initcode. This hash is used in deterministic address calculations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant CREATE3_PROXY_INITCODE_HASH =\n    0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f\n```\n\n----------------------------------------\n\nTITLE: Deploying Minimal ERC1967 Beacon Proxy in Solidity\nDESCRIPTION: Function that deploys a minimal ERC1967 beacon proxy with a specified beacon address. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_45\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployERC1967BeaconProxy(address beacon)\n    internal\n    returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Implementing Try-Recover ECDSA Signature Operation with EIP-2098 Format in Solidity\nDESCRIPTION: Attempts to recover the signer's address from a message digest hash and EIP-2098 short-form signature components, returning zero address on failure.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tryRecover(bytes32 hash, bytes32 r, bytes32 vs)\n    internal\n    view\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Declarations in Red-Black Tree\nDESCRIPTION: Custom error definitions for handling various error cases in the tree operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/redblacktreelib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ValueIsEmpty()\nerror ValueAlreadyExists()\nerror ValueDoesNotExist()\nerror PointerOutOfBounds()\nerror TreeIsFull()\n```\n\n----------------------------------------\n\nTITLE: Generating Initialization Code for ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Returns the initialization code of the ERC1967I beacon proxy given a beacon address. This pure function generates the bytecode needed for proxy deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_72\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967IBeaconProxy(address beacon)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: MinHeap Replace Operations\nDESCRIPTION: Functions to replace root element with new value in single operation\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction replace(Heap storage heap, uint256 value)\n    internal\n    returns (uint256 popped)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction replace(MemHeap memory heap, uint256 value)\n    internal\n    pure\n    returns (uint256 popped)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Arguments from ERC1967I Proxy\nDESCRIPTION: Returns all immutable arguments stored on an ERC1967I proxy instance. Equivalent to calling argsOnERC1967I with the full range. The instance must be deployed via ERC1967 with immutable args functions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_34\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argsOnERC1967I(address instance)\n    internal\n    view\n    returns (bytes memory args)\n```\n\n----------------------------------------\n\nTITLE: Get Role Holder at Index\nDESCRIPTION: Public view function that returns the address of a role holder at a specific index for a given role.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction roleHolderAt(uint256 role, uint256 i)\n    public\n    view\n    virtual\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Loading Argument from Byte Array in Solidity\nDESCRIPTION: Retrieves a 32-byte value from a specified offset in a byte array without performing bounds checks. This function is useful for efficiently loading arguments from immutable storage.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_90\n\nLANGUAGE: solidity\nCODE:\n```\nfunction argLoad(bytes memory args, uint256 offset)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Creating a Bump from uint256 storage slot in Solidity\nDESCRIPTION: Returns a Bump struct at the specified storage slot location, using a uint256 parameter to specify the slot.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bump(uint256 sSlot) internal pure returns (Bump storage $)\n```\n\n----------------------------------------\n\nTITLE: Extracting Selector from ERC7579 Mode in Solidity\nDESCRIPTION: Extracts the function selector (bytes4) from a bytes32 mode value in ERC7579.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction getSelector(bytes32 mode) internal pure returns (bytes4)\n```\n\n----------------------------------------\n\nTITLE: Raw Signed Modulo in Solidity\nDESCRIPTION: Performs modulo operation for signed integers, returning 0 if the divisor is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_45\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawSMod(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Raw Boolean to Integer Conversion in Solidity\nDESCRIPTION: Converts a clean boolean to uint256 (1 for true, 0 for false). Input must be properly cleaned (0 or 1).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_14\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawToUint(bool b) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Defining Reentrancy Error in Solidity\nDESCRIPTION: Custom error definition for unauthorized reentrant calls.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/reentrancyguardtransient.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror Reentrancy()\n```\n\n----------------------------------------\n\nTITLE: Defining Font Face and Character Codes in CSS\nDESCRIPTION: Basic CSS file containing @font-face declaration and character code definitions for the generated web font.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/assets/fontello/README.txt#2025-04-16_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n<your_font_name>.css\n```\n\n----------------------------------------\n\nTITLE: Reading Generic String with Limit and Gas\nDESCRIPTION: View function to read a string with custom calldata, length limit, and gas stipend.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readString(\n    address target,\n    bytes memory data,\n    uint256 limit,\n    uint256 gasStipend\n) internal view returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Finding First Set Bit in Solidity\nDESCRIPTION: Returns the index of the least significant bit of a uint256 value. Equivalent to counting trailing zeros. Returns 256 if input is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction ffs(uint256 x) internal pure returns (uint256 r)\n```\n\n----------------------------------------\n\nTITLE: BytesStorage Operations Implementation\nDESCRIPTION: Core storage operations for the BytesStorage struct including setting values, checking emptiness, and retrieving length and contents.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbytes.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(BytesStorage storage $, bytes memory s) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setCalldata(BytesStorage storage $, bytes calldata s) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction clear(BytesStorage storage $) internal\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isEmpty(BytesStorage storage $) internal view returns (bool)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction length(BytesStorage storage $)\n    internal\n    view\n    returns (uint256 result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(BytesStorage storage $)\n    internal\n    view\n    returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Domain Typehash Without ChainId - Solidity\nDESCRIPTION: Defines an alternative domain typehash constant for EIP-712 domain separator calculation excluding chainId. Used specifically in cross-chain scenarios.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/eip712.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant _DOMAIN_TYPEHASH_SANS_CHAIN_ID =\n    0x91ab3d17e3a50a9d89e63fd30b92be7f5336b03b287bb946787a83a9d62a2766\n```\n\n----------------------------------------\n\nTITLE: Interface Support Check Implementation\nDESCRIPTION: Implementation of EIP-165 interface support verification with gas constraints.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Defining RIP-7212 P256 Verifier Precompile Address Constant in Solidity\nDESCRIPTION: Defines the address constant for the RIP-7212 P256 verifier precompile. Note that EIP-7212's precompile at 0x0b is not supported as it hasn't been finalized.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddress internal constant RIP_PRECOMPILE =\n    0x0000000000000000000000000000000000000100\n```\n\n----------------------------------------\n\nTITLE: Defining LazyShufflerGetOutOfBounds Error in Solidity\nDESCRIPTION: Custom error triggered when querying an index that is out of bounds in a lazy shuffler.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nerror LazyShufflerGetOutOfBounds()\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967 Implementation Storage Slot in Solidity\nDESCRIPTION: Defines a constant storage slot for the ERC-1967 implementation address in the proxy contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/uupsupgradeable.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nbytes32 internal constant _ERC1967_IMPLEMENTATION_SLOT =\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n```\n\n----------------------------------------\n\nTITLE: String StartsWith Function in Solidity\nDESCRIPTION: Checks if a subject string starts with a needle string.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction startsWith(string memory subject, string memory needle)\n    internal\n    pure\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Boolean to Integer Conversion in Solidity\nDESCRIPTION: Converts any boolean to uint256 (1 for true, 0 for false).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toUint(bool b) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: WebAuthn Authentication Data Structure Definition\nDESCRIPTION: Defines the WebAuthnAuth struct containing authenticator data, client data JSON, challenge and type indices, and signature components for WebAuthn verification.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/webauthn.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct WebAuthnAuth {\n    bytes authenticatorData;\n    string clientDataJSON;\n    uint256 challengeIndex;\n    uint256 typeIndex;\n    bytes32 r;\n    bytes32 s;\n}\n```\n\n----------------------------------------\n\nTITLE: WETH Token Symbol Getter\nDESCRIPTION: Function that returns the symbol of the WETH token. Overrides the virtual function from ERC20 base contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/weth.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction symbol() public view virtual override returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Predicting ERC1967 Bootstrap Address with Parameters\nDESCRIPTION: Returns the implementation address of the ERC1967 bootstrap given the authorized upgrader and deployer address. This allows predicting the bootstrap address from any context.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_42\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967Bootstrap(\n    address authorizedUpgrader,\n    address deployer\n) internal pure returns (address)\n```\n\n----------------------------------------\n\nTITLE: Verifying ERC1271 Signatures for Smart Contract Wallets in Solidity\nDESCRIPTION: This function checks if an ERC1271 signature is valid for a given signer contract and hash. It does not have an ECDSA fallback.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/signaturecheckerlib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction isValidERC1271SignatureNow(\n    address signer,\n    bytes32 hash,\n    bytes memory signature\n) internal view returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal _initCode Function in Solidity\nDESCRIPTION: Internal helper function that returns a pointer to the initialization code of a proxy created via this factory.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _initCode() internal view returns (bytes32 m)\n```\n\n----------------------------------------\n\nTITLE: Only Role Modifier\nDESCRIPTION: Modifier that restricts function access to accounts with a specific role. Calls _checkRole internally.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_18\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyRole(uint256 role) virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal ERC1271 Signature Validation in Solidity\nDESCRIPTION: Internal function that determines whether a hash and signature are valid. This is designed to be overridden to implement custom signature validation logic beyond standard ECDSA.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271IsValidSignatureNowCalldata(\n    bytes32 hash,\n    bytes calldata signature\n) internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Reading Contract Symbol with Limit\nDESCRIPTION: View function to read the symbol() string with a custom length limit.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction readSymbol(address target, uint256 limit)\n    internal\n    view\n    returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Subtracting Hours from Timestamp in Solidity\nDESCRIPTION: Subtracts a specified number of hours from a Unix timestamp. Useful for calculating past times based on hourly intervals.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_25\n\nLANGUAGE: solidity\nCODE:\n```\nfunction subHours(uint256 timestamp, uint256 numHours)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Defining WAD Constant in Solidity\nDESCRIPTION: Constant representing the scalar value of ETH and most ERC20 tokens (10^18 or 1e18).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant WAD = 1e18\n```\n\n----------------------------------------\n\nTITLE: ERC1155 Custom Errors\nDESCRIPTION: Custom error definitions for common failure cases in ERC1155 operations\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc1155.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ArrayLengthsMismatch()\nerror TransferToZeroAddress()\nerror AccountBalanceOverflow()\nerror InsufficientBalance()\nerror NotOwnerNorApproved()\nerror TransferToNonERC1155ReceiverImplementer()\n```\n\n----------------------------------------\n\nTITLE: Burning Gas in Pure Context in Solidity\nDESCRIPTION: Function that burns approximately the specified amount of gas in a pure context, meaning it doesn't read or modify state.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/gasburnerlib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burnPure(uint256 x) internal pure\n```\n\n----------------------------------------\n\nTITLE: Raw Multiplication for Signed Integers in Solidity\nDESCRIPTION: Performs multiplication without overflow checking for signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_41\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawMul(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Finding Common Byte Prefix in Solidity\nDESCRIPTION: Returns the common prefix of two uint256 values at the byte level.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction commonBytePrefix(uint256 x, uint256 y)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Calculating Initialization Code Hash for ERC1967I Beacon Proxy in Solidity\nDESCRIPTION: Computes and returns the initialization code hash of the ERC1967I beacon proxy for a given beacon address. This hash can be used for deterministic address calculation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_73\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967IBeaconProxy(address beacon)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Selection for Unsigned Integers in Solidity\nDESCRIPTION: Returns the smaller of two unsigned integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction min(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Only Owner or Role Modifier\nDESCRIPTION: Modifier that restricts function access to the contract owner or accounts with a specific role.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier onlyOwnerOrRole(uint256 role) virtual\n```\n\n----------------------------------------\n\nTITLE: Array Element Removal Functions\nDESCRIPTION: Functions for removing and returning the last element of dynamic arrays of different types.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction pop(DynamicArray memory a) internal pure returns (uint256 result)\nfunction popUint256(DynamicArray memory a) internal pure returns (uint256 result)\nfunction popAddress(DynamicArray memory a) internal pure returns (address result)\nfunction popBool(DynamicArray memory a) internal pure returns (bool result)\nfunction popBytes32(DynamicArray memory a) internal pure returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Post-Transfer Hook in ERC6909\nDESCRIPTION: Hook function that's called after any token transfer, including minting and burning. This empty virtual function can be overridden to add custom logic after transfers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 id,\n    uint256 amount\n) internal virtual\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967 Admin Storage Slot in EIP7702Proxy\nDESCRIPTION: Defines the ERC-1967 storage slot constant for the admin address in the proxy. The value is calculated as keccak256(\"eip1967.proxy.admin\") - 1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/eip7702proxy.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant _ERC1967_ADMIN_SLOT =\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\n```\n\n----------------------------------------\n\nTITLE: Defining Call Type Constants for ERC7579 in Solidity\nDESCRIPTION: Constants representing different call types in ERC7579: single execution, batch execution, staticcall, and delegatecall.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes1 internal constant CALLTYPE_SINGLE = 0x00\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbytes1 internal constant CALLTYPE_BATCH = 0x01\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbytes1 internal constant CALLTYPE_STATICCALL = 0xfe\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbytes1 internal constant CALLTYPE_DELEGATECALL = 0xff\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error for Invalid Salt in Solidity\nDESCRIPTION: Custom error that is thrown when a provided salt value does not start with the caller's address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nerror SaltDoesNotStartWithCaller()\n```\n\n----------------------------------------\n\nTITLE: Boolean AND Operation in Solidity\nDESCRIPTION: Performs a boolean AND operation on any boolean inputs.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_11\n\nLANGUAGE: solidity\nCODE:\n```\nfunction and(bool x, bool y) internal pure returns (bool z)\n```\n\n----------------------------------------\n\nTITLE: Direct String Return Function in Solidity\nDESCRIPTION: Returns a string directly without copying it.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_36\n\nLANGUAGE: solidity\nCODE:\n```\nfunction directReturn(string memory a) internal pure\n```\n\n----------------------------------------\n\nTITLE: Verifying P256 Signature With Malleability Check in Solidity\nDESCRIPTION: Function to verify a P256 signature including a malleability check. It takes the hash, signature components (r, s), and public key components (x, y) as inputs.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction verifySignature(\n    bytes32 hash,\n    bytes32 r,\n    bytes32 s,\n    bytes32 x,\n    bytes32 y\n) internal view returns (bool isValid)\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Zero Address Role Holder\nDESCRIPTION: Error thrown when attempting to set a role for the zero address, which is not allowed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nerror RoleHolderIsZeroAddress()\n```\n\n----------------------------------------\n\nTITLE: MinHeap Priority Queue Operations\nDESCRIPTION: Functions implementing bounded priority queue behavior for heaps\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction enqueue(Heap storage heap, uint256 value, uint256 maxLength)\n    internal\n    returns (bool success, bool hasPopped, uint256 popped)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction enqueue(MemHeap memory heap, uint256 value, uint256 maxLength)\n    internal\n    pure\n    returns (bool success, bool hasPopped, uint256 popped)\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Object Key in Solidity\nDESCRIPTION: Implements a function to return the key of an item in a JSON object. Returns an empty string if the item's parent is not an object.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/jsonparserlib.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction key(Item memory item)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Role Set Event in EnumerableRoles\nDESCRIPTION: Event emitted when a role status is changed for a holder. The event includes the holder address, role, and whether the role is active or not.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent RoleSet(\n    address indexed holder, uint256 indexed role, bool indexed active\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Caller ERC1271 Signature Validation in Solidity\nDESCRIPTION: Validates signatures from safe callers without using nested EIP-712. A safe caller must include the address of the account in the hash to prevent signature replay attacks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc1271.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _erc1271IsValidSignatureViaSafeCaller(\n    bytes32 hash,\n    bytes calldata signature\n) internal view virtual returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Implementing malloc Function for Dynamic Arrays in Solidity\nDESCRIPTION: Creates a function to allocate memory for a uint256 array with n elements, without initializing the elements to zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction malloc(uint256 n)\n    internal\n    pure\n    returns (uint256[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining DecodingError for ERC7579 Execution Data in Solidity\nDESCRIPTION: Custom error that gets thrown when execution data cannot be properly decoded in ERC7579 operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror DecodingError()\n```\n\n----------------------------------------\n\nTITLE: Direct Call Requirement Check\nDESCRIPTION: Function that enforces the call context to not be through a proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkNotDelegated() internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Defining Deployed Event in Solidity\nDESCRIPTION: Event emitted when a new proxy has been deployed. Indexes the proxy address, implementation address, and admin address for efficient filtering.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nevent Deployed(\n    address indexed proxy,\n    address indexed implementation,\n    address indexed admin\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Default Implementation Immutable in EIP7702Proxy\nDESCRIPTION: Defines an immutable variable to store the default implementation address. This is set when initialAdmin is address(0) and initialImplementation is not address(0), provided for optimization.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/eip7702proxy.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal immutable _defaultImplementation\n```\n\n----------------------------------------\n\nTITLE: Defining secp256r1 Curve Order Constant in Solidity\nDESCRIPTION: Defines the constant for the order of the secp256r1 elliptic curve used in P256 operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant N =\n    0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\n```\n\n----------------------------------------\n\nTITLE: Generating Initialization Code for ERC1967I Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Returns the initialization code of the ERC1967I beacon proxy with specified beacon address and initialization arguments. This function generates customized bytecode for proxy deployment.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_81\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967IBeaconProxy(address beacon, bytes memory args)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Insufficient Data Length in Solidity\nDESCRIPTION: Defines a custom error that is thrown when the provided data is too short to contain a function selector.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror DataTooShort()\n```\n\n----------------------------------------\n\nTITLE: Check if Address Has Role\nDESCRIPTION: Public view function that returns a boolean indicating whether a holder has a specific role active.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasRole(address holder, uint256 role)\n    public\n    view\n    virtual\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Public Role Query Functions\nDESCRIPTION: View functions for querying role assignments and checking role status.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownableroles.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rolesOf(address user)\n    public\n    view\n    virtual\n    returns (uint256 roles)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasAnyRole(address user, uint256 roles)\n    public\n    view\n    virtual\n    returns (bool)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction hasAllRoles(address user, uint256 roles)\n    public\n    view\n    virtual\n    returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Get Token Approval\nDESCRIPTION: Internal function to get the approved account for a specific token ID. Returns zero address if token doesn't exist.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _getApproved(uint256 id)\n    internal\n    view\n    virtual\n    returns (address result)\n```\n\n----------------------------------------\n\nTITLE: Getting Initialization Code Hash for ERC1967 Bootstrap in Solidity\nDESCRIPTION: Function that returns the initialization code hash of an ERC1967 bootstrap, taking an authorized upgrader address as a parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_44\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967Bootstrap(address authorizedUpgrader)\n    internal\n    pure\n    returns (bytes32)\n```\n\n----------------------------------------\n\nTITLE: Minimum Value Selection for Signed Integers in Solidity\nDESCRIPTION: Returns the smaller of two signed integers.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nfunction min(int256 x, int256 y) internal pure returns (int256 z)\n```\n\n----------------------------------------\n\nTITLE: Balance Query Function in ERC6909\nDESCRIPTION: Returns the amount of a specific token ID owned by an address. This is a core function of the ERC6909 standard.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction balanceOf(address owner, uint256 id)\n    public\n    view\n    virtual\n    returns (uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Generating Empty Signature Calldata in Solidity\nDESCRIPTION: This function returns an empty calldata bytes, useful for signature verification operations that require a signature parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/signaturecheckerlib.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emptySignature()\n    internal\n    pure\n    returns (bytes calldata signature)\n```\n\n----------------------------------------\n\nTITLE: Defining LazyShufflerNotInitialized Error in Solidity\nDESCRIPTION: Custom error triggered when attempting operations on an uninitialized lazy shuffler.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nerror LazyShufflerNotInitialized()\n```\n\n----------------------------------------\n\nTITLE: Raw Boolean OR Operation in Solidity\nDESCRIPTION: Performs a boolean OR operation on clean boolean inputs. Inputs must be properly cleaned (0 or 1).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbit.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawOr(bool x, bool y) internal pure returns (bool z)\n```\n\n----------------------------------------\n\nTITLE: Direct Call Modifier\nDESCRIPTION: Modifier that restricts function access to direct calls not made through a proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier notDelegated() virtual\n```\n\n----------------------------------------\n\nTITLE: Predicting Counterfactual Address with Custom Deployer in Solidity\nDESCRIPTION: Function to predict the CREATE2 address of a storage contract for given data, salt, and deployer address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/sstore2.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictCounterfactualAddress(\n    bytes memory data,\n    bytes32 salt,\n    address deployer\n) internal pure returns (address predicted)\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicArray Struct in Solidity\nDESCRIPTION: Defines a struct to represent a dynamic array in memory, with a uint256[] data field for storing the array elements.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct DynamicArray {\n    uint256[] data;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler get Function in Solidity\nDESCRIPTION: Returns the current value stored at a specific index, accounting for all historical shuffling. Reverts if the index is out of bounds.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_28\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(LazyShuffler storage $, uint256 index)\n    internal\n    view\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Receiver Fallback Modifier\nDESCRIPTION: Modifier for handling token callbacks in the fallback function.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nmodifier receiverFallback() virtual\n```\n\n----------------------------------------\n\nTITLE: Retrieving storage slot from Bump in Solidity\nDESCRIPTION: Returns the current storage slot pointed to by a Bump. The resulting bytes32 can be cast to a custom data type storage pointer using inline assembly.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction slot(Bump storage b) internal view returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Proxy Call Requirement Check\nDESCRIPTION: Function that enforces the call context to be through a proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkOnlyProxy() internal view virtual\n```\n\n----------------------------------------\n\nTITLE: ETH Transfer Failed Error Definition\nDESCRIPTION: Custom error definition for failed ETH transfer operations\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/weth.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ETHTransferFailed()\n```\n\n----------------------------------------\n\nTITLE: Average Calculation for Unsigned Integers in Solidity\nDESCRIPTION: Computes the average of two unsigned integers, rounding towards zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_21\n\nLANGUAGE: solidity\nCODE:\n```\nfunction avg(uint256 x, uint256 y) internal pure returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Subtracting Seconds from Timestamp in Solidity\nDESCRIPTION: Internal pure function that subtracts a specified number of seconds from a Unix timestamp and returns the result.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nfunction subSeconds(uint256 timestamp, uint256 numSeconds)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Lock Flag Constants Definition\nDESCRIPTION: Defines internal constants for various lock flags used to control access to rescue functions.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/lifebuoy.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant _LIFEBUOY_DEPLOYER_ACCESS_LOCK = 1 << 0\nuint256 internal constant _LIFEBUOY_OWNER_ACCESS_LOCK = 1 << 1\nuint256 internal constant _LIFEBUOY_LOCK_RESCUE_LOCK = 1 << 2\nuint256 internal constant _LIFEBUOY_RESCUE_ETH_LOCK = 1 << 3\nuint256 internal constant _LIFEBUOY_RESCUE_ERC20_LOCK = 1 << 4\nuint256 internal constant _LIFEBUOY_RESCUE_ERC721_LOCK = 1 << 5\nuint256 internal constant _LIFEBUOY_RESCUE_ERC1155_LOCK = 1 << 6\nuint256 internal constant _LIFEBUOY_RESCUE_ERC6909_LOCK = 1 << 7\n```\n\n----------------------------------------\n\nTITLE: Declaring ERC4337 Implementation Address Immutable in Solidity\nDESCRIPTION: Defines an immutable public variable that stores the address of the ERC4337 implementation contract, which all deployed proxy accounts will delegate to.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc4337factory.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\naddress public immutable implementation\n```\n\n----------------------------------------\n\nTITLE: Getting Initialization Code for ERC1967 Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Function that returns the initialization code of the minimal ERC1967 beacon proxy with a specified beacon address and initialization arguments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_60\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeERC1967BeaconProxy(address beacon, bytes memory args)\n    internal\n    pure\n    returns (bytes memory c)\n```\n\n----------------------------------------\n\nTITLE: Deterministic Deployment Function\nDESCRIPTION: Internal function to deploy contracts deterministically using initialization code and salt. Returns the deployed contract address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/create3.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministic(bytes memory initCode, bytes32 salt)\n    internal\n    returns (address deployed)\n```\n\n----------------------------------------\n\nTITLE: Encoding Address as RLP in Solidity\nDESCRIPTION: Returns the RLP encoding of an address as a bytes array. Addresses are treated as byte strings of length 20.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/librlp.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction encode(address x) internal pure returns (bytes memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error for Failed Deployment in Solidity\nDESCRIPTION: Custom error that is thrown when a proxy deployment operation fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror DeploymentFailed()\n```\n\n----------------------------------------\n\nTITLE: Defining Execution Type Constants for ERC7579 in Solidity\nDESCRIPTION: Constants representing execution types in ERC7579: default (reverts on failure) and try (doesn't revert on failure).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/liberc7579.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nbytes1 internal constant EXECTYPE_DEFAULT = 0x00\n```\n\nLANGUAGE: solidity\nCODE:\n```\nbytes1 internal constant EXECTYPE_TRY = 0x01\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler Restart Function in Solidity\nDESCRIPTION: Restarts the lazy shuffler by resetting the numShuffled counter to zero. Does not clear the internal permutation or change the length.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_23\n\nLANGUAGE: solidity\nCODE:\n```\nfunction restart(LazyShuffler storage $) internal\n```\n\n----------------------------------------\n\nTITLE: Returning Empty Calldata Signature in Solidity\nDESCRIPTION: Returns an empty calldata bytes, useful for default or placeholder signatures in ECDSA operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_16\n\nLANGUAGE: solidity\nCODE:\n```\nfunction emptySignature()\n    internal\n    pure\n    returns (bytes calldata signature)\n```\n\n----------------------------------------\n\nTITLE: Raw Multiplication with Modulo in Solidity\nDESCRIPTION: Performs multiplication followed by modulo operation for unsigned integers, returning 0 if the divisor is zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_47\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rawMulMod(uint256 x, uint256 y, uint256 d)\n    internal\n    pure\n    returns (uint256 z)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Web Font Content in HTML\nDESCRIPTION: HTML file showcasing the content and usage of the generated web font.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/assets/fontello/README.txt#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\ndemo.html\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error for Failed Upgrade in Solidity\nDESCRIPTION: Custom error that is thrown when a proxy upgrade operation fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nerror UpgradeFailed()\n```\n\n----------------------------------------\n\nTITLE: MinHeap Root Access Functions\nDESCRIPTION: Functions to access the minimum value in storage and memory heaps\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/minheaplib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction root(Heap storage heap) internal view returns (uint256 result)\n```\n\nLANGUAGE: solidity\nCODE:\n```\nfunction root(MemHeap memory heap) internal pure returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitmap Toggle Operation\nDESCRIPTION: Function to flip the bit value at the given index in the bitmap and return the new value\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toggle(Bitmap storage bitmap, uint256 index)\n    internal\n    returns (bool newIsSet)\n```\n\n----------------------------------------\n\nTITLE: Replacing Function Selectors in Call Data in Solidity\nDESCRIPTION: Utility function that replaces the function selector (first 4 bytes) of encoded contract call data in-place. Useful for modifying prepared call data without recreating it.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setSelector(bytes4 newSelector, bytes memory data) internal pure\n```\n\n----------------------------------------\n\nTITLE: Set Timed Role Function Implementation\nDESCRIPTION: Public function to set the active time range for a specific role and holder.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/timedroles.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction setTimedRole(\n    address holder,\n    uint256 timedRole,\n    uint40 start,\n    uint40 expires\n) public payable virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing zeroize Function for Dynamic Arrays in Solidity\nDESCRIPTION: Creates a function to set all elements of a uint256 array to zero.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/dynamicarraylib.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nfunction zeroize(uint256[] memory a)\n    internal\n    pure\n    returns (uint256[] memory result)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error for Unauthorized Access in Solidity\nDESCRIPTION: Custom error that is thrown when a caller is not authorized to call a function.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror Unauthorized()\n```\n\n----------------------------------------\n\nTITLE: ETH Receive Function\nDESCRIPTION: Virtual function for receiving ETH payments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nreceive() external payable virtual\n```\n\n----------------------------------------\n\nTITLE: Defining String Length Limit\nDESCRIPTION: Sets a default maximum length for returned strings to prevent excessive gas consumption.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/metadatareaderlib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant STRING_LIMIT_DEFAULT = 1000\n```\n\n----------------------------------------\n\nTITLE: WETH Token Name Getter\nDESCRIPTION: Function that returns the name of the WETH token. Overrides the virtual function from ERC20 base contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/weth.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction name() public view virtual override returns (string memory)\n```\n\n----------------------------------------\n\nTITLE: Predicting ERC1967 Bootstrap Address\nDESCRIPTION: Returns the implementation address of the ERC1967 bootstrap for the current contract. This predicts where the bootstrap contract will be deployed from the current context.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_41\n\nLANGUAGE: solidity\nCODE:\n```\nfunction predictDeterministicAddressERC1967Bootstrap()\n    internal\n    view\n    returns (address)\n```\n\n----------------------------------------\n\nTITLE: Default Implementation Storage Declaration\nDESCRIPTION: Declares an immutable storage variable to hold the default implementation address for the proxy contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551proxy.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal immutable _defaultImplementation\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Errors for EIP7702 Operations in Solidity\nDESCRIPTION: Defines custom errors for various failure scenarios in EIP7702 operations, including deployment, querying, admin changes, and upgrades.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/libeip7702.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror DeploymentFailed()\nerror ProxyQueryFailed()\nerror ChangeProxyAdminFailed()\nerror UpgradeProxyFailed()\n```\n\n----------------------------------------\n\nTITLE: Burning Gas in Regular Context in Solidity\nDESCRIPTION: Function that burns approximately the specified amount of gas in a regular context, meaning it can both read and modify state.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/gasburnerlib.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burn(uint256 x) internal\n```\n\n----------------------------------------\n\nTITLE: Determining Weekday from Timestamp in Solidity\nDESCRIPTION: Calculates the day of the week from a Unix timestamp. Returns a value from 1 (Monday) to 7 (Sunday), following the ISO-8601 convention for weekday numbering.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/datetimelib.md#2025-04-16_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction weekday(uint256 timestamp)\n    internal\n    pure\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Check Caller Has Any Role\nDESCRIPTION: Internal view function that reverts if the message sender does not have any of the roles in the encoded roles array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _checkRoles(bytes memory encodedRoles) internal view virtual\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal _emptyData Helper Function in Solidity\nDESCRIPTION: A helper function that returns an empty bytes calldata, used to avoid duplicating empty bytes literals throughout the contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_20\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _emptyData() internal pure returns (bytes calldata data)\n```\n\n----------------------------------------\n\nTITLE: Receiver Fallback Body Control\nDESCRIPTION: Internal function to determine if the receiverFallback modifier body should be used.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _useReceiverFallbackBody() internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Custom Error Definitions in Solidity\nDESCRIPTION: Defines custom errors for invalid implementation, unauthorized access, and zero address checks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/upgradeablebeacon.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror NewImplementationHasNoCode()\nerror Unauthorized()\nerror NewOwnerIsZeroAddress()\n```\n\n----------------------------------------\n\nTITLE: Solady Directory Structure\nDESCRIPTION: Overview of the main project directories and their purposes\nSOURCE: https://github.com/Vectorized/solady/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: ml\nCODE:\n```\nsrc — \"Solidity smart contracts\"\ntest — \"Foundry Forge tests\"\njs — \"Accompanying JavaScript helper library\"\next — \"Extra tests\"\nprep — \"Preprocessing scripts\"\naudits — \"Audit reports\"\n```\n\n----------------------------------------\n\nTITLE: Transfer Event Definition in ERC6909\nDESCRIPTION: Defines the Transfer event emitted when tokens are transferred, including information about the initiator, sender, receiver, token ID, and amount.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(\n    address by,\n    address indexed from,\n    address indexed to,\n    uint256 indexed id,\n    uint256 amount\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ERC1967Factory Deployment Salt in Solidity\nDESCRIPTION: Declaration of the salt constant used for deterministic deployment of the ERC1967Factory via 0age's ImmutableCreate2Factory. This ensures the same address across all EVM chains.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factoryconstants.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant SALT =\n    0x0000000000000000000000000000000000000000e75e4f228818c80007508f33\n```\n\n----------------------------------------\n\nTITLE: String Uppercase Function in Solidity\nDESCRIPTION: Converts a string to uppercase. Only works with 7-bit ASCII.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction upper(string memory subject)\n    internal\n    pure\n    returns (string memory result)\n```\n\n----------------------------------------\n\nTITLE: Simple Safe Transfer\nDESCRIPTION: Internal function for safe token transfer with receiver contract validation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_12\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _safeTransfer(address from, address to, uint256 id)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Role Holders Index Out of Bounds\nDESCRIPTION: Error thrown when attempting to access a role holder at an index that exceeds the bounds of the role holders array.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror RoleHoldersIndexOutOfBounds()\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic get Function for Packed Integer Maps in Solidity\nDESCRIPTION: Retrieves a value of specified bit width from a generic packed integer mapping.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction get(\n    mapping(uint256 => uint256) storage map,\n    uint256 index,\n    uint256 bitWidth\n) internal view returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: ERC20 Event Definitions\nDESCRIPTION: Standard ERC20 events for tracking token transfers and approvals.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nevent Transfer(address indexed from, address indexed to, uint256 amount)\nevent Approval(address indexed owner, address indexed spender, uint256 amount)\n```\n\n----------------------------------------\n\nTITLE: Defining ECDSA Curve Order Constant in Solidity\nDESCRIPTION: Defines the order of the secp256k1 elliptic curve as a constant for use in ECDSA operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant N =\n    0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error for Failed Upgrade in Solidity\nDESCRIPTION: Defines a custom error 'UpgradeFailed()' that is thrown when an upgrade operation fails.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/uupsupgradeable.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nerror UpgradeFailed()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Errors for FixedPointMathLib in Solidity\nDESCRIPTION: Defines custom errors for various arithmetic operations to provide more specific error handling in the library.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/fixedpointmathlib.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ExpOverflow()\nerror FactorialOverflow()\nerror RPowOverflow()\nerror MantissaOverflow()\nerror MulWadFailed()\nerror SMulWadFailed()\nerror DivWadFailed()\nerror SDivWadFailed()\nerror MulDivFailed()\nerror DivFailed()\nerror FullMulDivFailed()\nerror LnWadUndefined()\nerror OutOfDomain()\n```\n\n----------------------------------------\n\nTITLE: Custom Error Definitions in Solidity\nDESCRIPTION: Defines custom errors for unauthorized access and failed transfers in rescue operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/lifebuoy.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror RescueUnauthorizedOrLocked()\nerror RescueTransferFailed()\n```\n\n----------------------------------------\n\nTITLE: Implementing deployDeterministicAndCall Function in Solidity\nDESCRIPTION: Deploys a proxy with a deterministic address using CREATE2 and a salt value, then calls the proxy with encoded data. Returns the deployed proxy address. ETH value is forwarded to the proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/erc1967factory.md#2025-04-16_snippet_15\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicAndCall(\n    address implementation,\n    address admin,\n    bytes32 salt,\n    bytes calldata data\n) public payable returns (address proxy)\n```\n\n----------------------------------------\n\nTITLE: Burning Gas in View Context in Solidity\nDESCRIPTION: Function that burns approximately the specified amount of gas in a view context, meaning it can read but not modify state.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/gasburnerlib.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nfunction burnView(uint256 x) internal view\n```\n\n----------------------------------------\n\nTITLE: Operation State Enumeration\nDESCRIPTION: Defines the possible states of a timelock operation including Unset, Waiting, Ready, and Done.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/timelock.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nenum OperationState {\n    Unset, // 0.\n    Waiting, // 1.\n    Ready, // 2.\n    Done // 3.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Owner Storage Slot in Solidity\nDESCRIPTION: Declares a constant for the owner storage slot, chosen to avoid collision with lower slots.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/ownable.md#2025-04-16_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nbytes32 internal constant _OWNER_SLOT =\n    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Signed Message Hash from Bytes32 in Solidity\nDESCRIPTION: Generates an Ethereum Signed Message hash from a given bytes32 input, compatible with eth_sign JSON-RPC method.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction toEthSignedMessageHash(bytes32 hash)\n    internal\n    pure\n    returns (bytes32 result)\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler numShuffled Function in Solidity\nDESCRIPTION: Returns the number of elements that have been shuffled in the lazy shuffler.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_24\n\nLANGUAGE: solidity\nCODE:\n```\nfunction numShuffled(LazyShuffler storage $)\n    internal\n    view\n    returns (uint256 result)\n```\n\n----------------------------------------\n\nTITLE: Defining Bump struct for invalidatable storage slots in Solidity\nDESCRIPTION: Defines a Bump struct that provides a storage slot that can be invalidated. It contains a single _current field to track the current state.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nstruct Bump {\n    uint256 _current;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Upgraded Event for Implementation Change in Solidity\nDESCRIPTION: Declares an event 'Upgraded' that is emitted when the proxy's implementation is upgraded, with the new implementation address as an indexed parameter.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/uupsupgradeable.md#2025-04-16_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\nevent Upgraded(address indexed implementation)\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Insufficient Balance in ERC6909\nDESCRIPTION: Defines a custom error that's thrown when a transfer or burn operation exceeds the available token balance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror InsufficientBalance()\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Unauthorized Access\nDESCRIPTION: Error thrown when an account attempts to perform an action that it is not authorized to do.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nerror EnumerableRolesUnauthorized()\n```\n\n----------------------------------------\n\nTITLE: Getting Initialization Code Hash for ERC1967 Beacon Proxy with Arguments in Solidity\nDESCRIPTION: Function that returns the initialization code hash of the minimal ERC1967 beacon proxy with a specified beacon address and initialization arguments.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_61\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initCodeHashERC1967BeaconProxy(address beacon, bytes memory args)\n    internal\n    pure\n    returns (bytes32 hash)\n```\n\n----------------------------------------\n\nTITLE: Fallback Function Implementation\nDESCRIPTION: Fallback function with receiverFallback modifier for handling token callbacks.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfallback() external payable virtual receiverFallback\n```\n\n----------------------------------------\n\nTITLE: Check Initializing State Function in Solidity\nDESCRIPTION: Internal view function that returns a boolean indicating whether the contract is currently in the initializing state.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/initializable.md#2025-04-16_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _isInitializing() internal view virtual returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Proxy with Arguments\nDESCRIPTION: Deploys a deterministic ERC1967I proxy with implementation, arguments, and salt. This creates a proxy at a predictable address with immutable arguments accessible to the implementation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967I(\n    address implementation,\n    bytes memory args,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidInitialLazyShufflerLength Error in Solidity\nDESCRIPTION: Custom error for invalid initial length in lazy shuffler. The initial length must be greater than zero and less than 2^32 - 1.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror InvalidInitialLazyShufflerLength()\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler initialized Function in Solidity\nDESCRIPTION: Checks if the lazy shuffler has been initialized.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_26\n\nLANGUAGE: solidity\nCODE:\n```\nfunction initialized(LazyShuffler storage $)\n    internal\n    view\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: ERC721 Max Balance Constant Definition\nDESCRIPTION: Defines the maximum number of tokens an account can hold (4294967295 tokens).\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff\n```\n\n----------------------------------------\n\nTITLE: Defining PRNG Struct in Solidity\nDESCRIPTION: A memory-based struct for storing the state of a pseudorandom number generator.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nstruct PRNG {\n    uint256 state;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Insufficient Permission in ERC6909\nDESCRIPTION: Defines a custom error that's thrown when an operation is attempted without proper authorization or approval.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror InsufficientPermission()\n```\n\n----------------------------------------\n\nTITLE: Empty Context Utility Function for ERC6551\nDESCRIPTION: Internal utility function that returns empty calldata bytes, used for default context parameters.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _emptyContext() internal pure returns (bytes calldata context)\n```\n\n----------------------------------------\n\nTITLE: Deploying Deterministic ERC1967I Beacon Proxy with Value in Solidity\nDESCRIPTION: Function that deploys a deterministic ERC1967I beacon proxy with a specified beacon address and salt, while depositing ETH during deployment. Returns the address of the deployed proxy instance.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_69\n\nLANGUAGE: solidity\nCODE:\n```\nfunction deployDeterministicERC1967IBeaconProxy(\n    uint256 value,\n    address beacon,\n    bytes32 salt\n) internal returns (address instance)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Errors for Proxy Deployment in Solidity\nDESCRIPTION: Declares custom error types for handling specific failure scenarios during proxy deployment and operation. These errors provide more detailed information about deployment failures, salt validation, and ETH transfer issues.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror DeploymentFailed()\n\nerror SaltDoesNotStartWith()\n\nerror ETHTransferFailed()\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Invalid Role\nDESCRIPTION: Error thrown when a role exceeds the maximum allowed role value as defined by MAX_ROLE().\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/auth/enumerableroles.md#2025-04-16_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\nerror InvalidRole()\n```\n\n----------------------------------------\n\nTITLE: Implementing set Function for Uint8Map in Solidity\nDESCRIPTION: Updates the uint8 value at a specific index in the Uint8Map.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libmap.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nfunction set(Uint8Map storage map, uint256 index, uint8 value) internal\n```\n\n----------------------------------------\n\nTITLE: RoyaltyOverflow Error Definition\nDESCRIPTION: Custom error for when royalty fee numerator exceeds the fee denominator.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror RoyaltyOverflow()\n```\n\n----------------------------------------\n\nTITLE: After Transfer Hook\nDESCRIPTION: Hook function called after any token transfer operation.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc721.md#2025-04-16_snippet_17\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _afterTokenTransfer(address from, address to, uint256 id)\n    internal\n    virtual\n```\n\n----------------------------------------\n\nTITLE: LibZip Fallback Configuration for ERC6551\nDESCRIPTION: Internal function that determines whether to use LibZip.cdFallback for calldata decompression. Can be overridden to disable this functionality if not needed.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_19\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _useLibZipCdFallback() internal view virtual returns (bool)\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Call Context Error Definition\nDESCRIPTION: Defines a custom error for unauthorized call contexts.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/callcontextchecker.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror UnauthorizedCallContext()\n```\n\n----------------------------------------\n\nTITLE: Embedded WOFF Font CSS for Cross-Origin Support\nDESCRIPTION: CSS file with embedded WOFF font to avoid CORS issues in Firefox and IE9+ when fonts are hosted on a separate domain.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/assets/fontello/README.txt#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n*-embedded.css\n```\n\n----------------------------------------\n\nTITLE: Custom Error Definitions for ERC6551 Token-Bound Account\nDESCRIPTION: Defines three custom errors used throughout the contract: Unauthorized for access control failures, OperationNotSupported for unsupported operations, and SelfOwnDetected for circular ownership detection.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/erc6551.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror Unauthorized()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nerror OperationNotSupported()\n```\n\nLANGUAGE: solidity\nCODE:\n```\nerror SelfOwnDetected()\n```\n\n----------------------------------------\n\nTITLE: Access Control Functions\nDESCRIPTION: Functions for managing rescue authorization and lock status.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/lifebuoy.md#2025-04-16_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nfunction rescueLocked() public view virtual returns (uint256 locks)\n\nfunction lockRescue(uint256 locksToSet) public payable virtual onlyRescuer(_LIFEBUOY_LOCK_RESCUE_LOCK)\n\nfunction _lockRescue(uint256 locksToSet) internal virtual\n\nfunction _checkRescuer(uint256 modeLock) internal view virtual\n\nmodifier onlyRescuer(uint256 modeLock) virtual\n```\n\n----------------------------------------\n\nTITLE: Installing Solady with NPM\nDESCRIPTION: Command to install Solady library using NPM for Hardhat projects\nSOURCE: https://github.com/Vectorized/solady/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install solady\n```\n\n----------------------------------------\n\nTITLE: Default Royalty Deletion Implementation\nDESCRIPTION: Internal function to remove default royalty settings.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nfunction _deleteDefaultRoyalty() internal virtual\n```\n\n----------------------------------------\n\nTITLE: Creating a Bump from bytes32 storage slot in Solidity\nDESCRIPTION: Returns a Bump struct at the specified storage slot location, using a bytes32 parameter to specify the slot.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstorage.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nfunction bump(bytes32 sSlot) internal pure returns (Bump storage $)\n```\n\n----------------------------------------\n\nTITLE: Permit2 Contract Address Constant\nDESCRIPTION: Definition of canonical Permit2 contract address constant for signature-based allowance granting.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20.md#2025-04-16_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\naddress internal constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidNewLazyShufflerLength Error in Solidity\nDESCRIPTION: Custom error for invalid new length in lazy shuffler. The new length must not be less than the current length.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror InvalidNewLazyShufflerLength()\n```\n\n----------------------------------------\n\nTITLE: Defining LazyShuffleFinished Error in Solidity\nDESCRIPTION: Custom error triggered when attempting operations on a lazy shuffler that has finished shuffling all elements.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nerror LazyShuffleFinished()\n```\n\n----------------------------------------\n\nTITLE: Custom Error for Non-Contract Targets in Solidity\nDESCRIPTION: Defines a custom error that is thrown when attempting to call a target that is not a contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libcall.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror TargetIsNotContract()\n```\n\n----------------------------------------\n\nTITLE: OperatorSet Event Definition in ERC6909\nDESCRIPTION: Defines the OperatorSet event emitted when an owner enables or disables an operator to manage all of their tokens.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc6909.md#2025-04-16_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nevent OperatorSet(\n    address indexed owner, address indexed operator, bool approved\n)\n```\n\n----------------------------------------\n\nTITLE: String IndexOf Function in Solidity\nDESCRIPTION: Finds the first occurrence of a needle string within a subject string from the beginning.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libstring.md#2025-04-16_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction indexOf(string memory subject, string memory needle)\n    internal\n    pure\n    returns (uint256)\n```\n\n----------------------------------------\n\nTITLE: Declaring InvalidSignature Custom Error in Solidity\nDESCRIPTION: Defines a custom error for invalid signatures in ECDSA operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/ecdsa.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror InvalidSignature()\n```\n\n----------------------------------------\n\nTITLE: Defining ReturnedAddressMismatch Custom Error in Solidity\nDESCRIPTION: Defines a custom error 'ReturnedAddressMismatch' that is thrown when the returned address by the factory does not match the provided address. This error is part of the DeploylessPredeployQueryer contract.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/deploylesspredeployqueryer.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror ReturnedAddressMismatch()\n```\n\n----------------------------------------\n\nTITLE: RoyaltyReceiverIsZeroAddress Error Definition\nDESCRIPTION: Custom error for when royalty receiver is set to zero address.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc2981.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nerror RoyaltyReceiverIsZeroAddress()\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants for EIP7702 Storage Slots and Proxy Code in Solidity\nDESCRIPTION: Defines constants for ERC1967 implementation slot, EIP7702 initialization request slot, proxy creation code, and related values used in EIP7702 operations.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/libeip7702.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant ERC1967_IMPLEMENTATION_SLOT =\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n\nbytes32 internal constant\n    EIP7702_PROXY_DELEGATION_INITIALIZATION_REQUEST_SLOT =\n        0x94e11c6e41e7fb92cb8bb65e13fdfbd4eba8b831292a1a220f7915c78c7c078f\n\nbytes internal constant EIP7702_PROXY_CREATION_CODE =\n    hex\"60c06040819052306080526102d63881900390819083398101604081905261002691610096565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8290557fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103819055811515110260a0526100c7565b80516001600160a01b0381168114610091575f5ffd5b919050565b5f5f604083850312156100a7575f5ffd5b6100b08361007b565b91506100be6020840161007b565b90509250929050565b60805160a0516101f06100e65f395f602701525f600601526101f05ff3fe60016040527f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc361960601c30841861010a576001361161008657815481165f5260205ff35b5f3560e01c80635c60da1b036100a157825482165f5260205ff35b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61038163f851a440036100d65780545f5260205ff35b80543303610106578382630900f01014028183638f2839701402178015610104576004358416815560206040f35b505b5f5ffd5b815481163660010361013b5780610133575082806101335760205f5f5f885afa15610106573d5ff35b805f5260205ff35b365f5f37806101a7575082806101a7576020365f5f885afa5f5f365f36515af416610168573d5f5f3e3d5ffd5b7f94e11c6e41e7fb92cb8bb65e13fdfbd4eba8b831292a1a220f7915c78c7c078f805c1561019e57365184548419161784555f815d5b503d5f5f3e3d5ff35b5f5f365f845af461019e573d5f5f3e3d5ffdfea2646970667358221220e8b1a2a38594baf32c154aa7dd7743c9cd741d4f386b5ab588a5dcd613c3a00e64736f6c634300081c0033\"\n\nbytes32 internal constant EIP7702_PROXY_MINIMAL_CODE_HASH =\n    0xf8710866f390ac7c12640457f9cb9663657ac8168b7d4ce6418a982932b3043e\n\nuint256 internal constant EIP7702_PROXY_MINIMAL_CODE_LENGTH = 0x1ba\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyShuffler finished Function in Solidity\nDESCRIPTION: Checks if there are any more elements left to shuffle. Reverts if the lazy shuffler is not initialized.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libprng.md#2025-04-16_snippet_27\n\nLANGUAGE: solidity\nCODE:\n```\nfunction finished(LazyShuffler storage $)\n    internal\n    view\n    returns (bool result)\n```\n\n----------------------------------------\n\nTITLE: Custom Font Face Rules with Generated CSS\nDESCRIPTION: CSS files allowing use of custom @font-face rules while benefiting from generated CSS for character codes.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/assets/fontello/README.txt#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n*-codes.css\n```\n\nLANGUAGE: css\nCODE:\n```\n*-ie7-codes.css\n```\n\n----------------------------------------\n\nTITLE: IE7 Support CSS for Web Font\nDESCRIPTION: CSS file providing IE7 support for the web font without directly putting character codes in HTML.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/assets/fontello/README.txt#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n*-ie7.css\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Errors for ERC20Votes in Solidity\nDESCRIPTION: This snippet defines custom errors for various scenarios in the ERC20Votes implementation, such as future lookup attempts, expired or invalid signatures, and checkpoint-related issues.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/tokens/erc20votes.md#2025-04-16_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nerror ERC5805FutureLookup()\nerror ERC5805DelegateSignatureExpired()\nerror ERC5805DelegateInvalidSignature()\nerror ERC5805CheckpointIndexOutOfBounds()\nerror ERC5805CheckpointValueOverflow()\nerror ERC5805CheckpointValueUnderflow()\n```\n\n----------------------------------------\n\nTITLE: Deploying ERC1967 Bootstrap with Authorized Upgrader\nDESCRIPTION: Deploys the ERC1967 bootstrap with a specified authorized upgrader if not already deployed. The bootstrap is a minimal UUPS implementation allowing upgrades of an ERC1967 proxy.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libclone.md#2025-04-16_snippet_38\n\nLANGUAGE: solidity\nCODE:\n```\nfunction erc1967Bootstrap(address authorizedUpgrader)\n    internal\n    returns (address bootstrap)\n```\n\n----------------------------------------\n\nTITLE: Proxy Initcode Hash Constant\nDESCRIPTION: Constant definition for the hash of proxy initialization code, derived from keccak256 of specific bytecode.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/create3.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 internal constant PROXY_INITCODE_HASH =\n    0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f\n```\n\n----------------------------------------\n\nTITLE: Defining P256 Canary Contract Address Constant in Solidity\nDESCRIPTION: Defines the address constant for a canary contract that indicates the existence of the RIP-7212 precompile when it has non-empty bytecode.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/p256.md#2025-04-16_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\naddress internal constant CANARY =\n    0x0000000000001Ab2e8006Fd8B71907bf06a5BDEE\n```\n\n----------------------------------------\n\nTITLE: Defining NOT_FOUND Constant in Solidity\nDESCRIPTION: Defines a constant that represents when a bitmap scan operation doesn't find a result, set to the maximum value of uint256\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/utils/libbitmap.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nuint256 internal constant NOT_FOUND = type(uint256).max\n```\n\n----------------------------------------\n\nTITLE: Custom Error Definition\nDESCRIPTION: Defines a custom error for unrecognized function selectors.\nSOURCE: https://github.com/Vectorized/solady/blob/main/docs/accounts/receiver.md#2025-04-16_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nerror FnSelectorNotRecognized()\n```"
  }
]