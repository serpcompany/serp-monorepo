[
  {
    "owner": "chakra-ui",
    "repo": "ark",
    "content": "TITLE: Implementing Router-Controlled Tabs with Remix Router in React\nDESCRIPTION: This example demonstrates how to create tabs controlled by URL routes using Remix Router. It shows how to set the active tab based on the current URL path and update the URL when a tab is selected, creating a seamless navigation experience that's synchronized with the browser's routing.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tabs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from '@ark-ui/react/tabs'\nimport { useLocation, useNavigate, Link } from '@remix-run/react'\n\nexport default function App() {\n  const { pathname } = useLocation()\n  const navigate = useNavigate()\n  const lastPathFragment = pathname.substring(pathname.lastIndexOf('/') + 1)\n  const activeTab = lastPathFragment.length > 0 ? lastPathFragment : 'homepage'\n\n  return (\n    <Tabs.Root\n      value={activeTab}\n      onValueChange={({ value }) => {\n        navigate(`/${value === 'home' ? '' : value}`)\n      }}\n    >\n      <Tabs.List>\n        <Tabs.Trigger asChild value=\"home\">\n          <Link to=\"\">Home</Link>\n        </Tabs.Trigger>\n        <Tabs.Trigger asChild value=\"page-1\">\n          <Link to=\"page-1\">Page 1</Link>\n        </Tabs.Trigger>\n        <Tabs.Trigger asChild value=\"page-2\">\n          <Link to=\"page-2\">Page 2</Link>\n        </Tabs.Trigger>\n      </Tabs.List>\n    </Tabs.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controlled Dialog in React\nDESCRIPTION: Shows how to create a controlled Dialog component by managing its state with 'open' and 'onOpenChange' props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/dialog.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"controlled\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slider Component with Ark UI in React\nDESCRIPTION: Example of how to use the Slider component from @ark-ui/react in a React application. It demonstrates importing, state management, and component structure.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/react/README.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from '@ark-ui/react'\nimport { useState } from 'react'\n\nexport const MySlider = () => {\n  const [value, setValue] = useState([30])\n\n  return (\n    <Slider.Root min={-50} max={50} value={value} onValueChange={(e) => setValue(e.value)}>\n      <Slider.Label>Label</Slider.Label>\n      <Slider.ValueText>{value}</Slider.ValueText>\n      <Slider.Control>\n        <Slider.Track>\n          <Slider.Range />\n        </Slider.Track>\n        <Slider.Thumb index={0} />\n      </Slider.Control>\n    </Slider.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Component States with Panda CSS\nDESCRIPTION: Example of using built-in conditions in Panda CSS to style a component based on its state.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { accordionAnatomy } from '@ark-ui/anatomy'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const accordionStyles = defineSlotRecipe({\n  className: 'accordion',\n  slots: accordionAnatomy.keys(),\n  base: {\n    item: {\n      borderBottom: '1px solid {colors.gray.300}',\n      _open: {\n        // [!code highlight]\n        backgroundColor: 'gray.100',\n      },\n    },\n  },\n  defaultVariants: {},\n  variants: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Usage in React\nDESCRIPTION: Demonstrates the most basic implementation of the Tooltip component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Component Parts with Panda CSS\nDESCRIPTION: Example of using defineSlotRecipe from Panda CSS to style an accordion component with its different parts.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { accordionAnatomy } from '@ark-ui/anatomy'\nimport { defineSlotRecipe } from '@pandacss/dev'\n\nexport const accordionStyles = defineSlotRecipe({\n  className: 'accordion',\n  slots: accordionAnatomy.keys(),\n  base: {\n    item: {\n      borderBottom: '1px solid #e5e5e5',\n    },\n  },\n  defaultVariants: {},\n  variants: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Using asChild Prop with Popover in Ark UI\nDESCRIPTION: Demonstrates how to use the asChild prop to integrate a custom Button component within a Popover component. This allows the Button to inherit behaviors from Popover.Trigger while maintaining custom styling.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/composition.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"as-child\" component=\"popover\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Tags Input Usage in JSX\nDESCRIPTION: Demonstrates the most basic example of using the TagsInput component in a project.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Component Parts with CSS\nDESCRIPTION: Example of targeting a specific component part using data-scope and data-part attributes in CSS.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[data-scope='accordion'][data-part='item'] {\n  border-bottom: 1px solid #e5e5e5;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Root Provider with Segment Group in React\nDESCRIPTION: Demonstrates the use of the RootProvider component to provide context for the radio-group, allowing access to component state and methods from outside the radio-group.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/segment-group.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js Image with Avatar Component in Ark UI\nDESCRIPTION: This example demonstrates how to integrate the Next.js Image component with Ark UI's Avatar component. It creates a custom AvatarNextImage component that combines properties from both Ark's Avatar context and Next.js Image, with special handling for visibility states.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/avatar.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Avatar, useAvatarContext } from '@ark-ui/react/avatar'\nimport { getImageProps, type ImageProps } from 'next/image'\n\nconst AvatarNextImage = (props: ImageProps) => {\n  const avatar = useAvatarContext()\n\n  const { hidden, ...arkImageProps } = avatar.getImageProps()\n  const nextImage = getImageProps(props)\n\n  return (\n    <img\n      {...arkImageProps}\n      {...nextImage.props}\n      style={{\n        ...props.style,\n        // use visibility instead\n        visibility: hidden ? 'hidden' : 'visible',\n      }}\n    />\n  )\n}\n\nconst Demo = () => {\n  return (\n    <Avatar.Root>\n      <Avatar.Fallback>JD</Avatar.Fallback>\n      <AvatarNextImage src=\"...\" alt=\"\" width={80} height={80} />\n    </Avatar.Root>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Component States with CSS\nDESCRIPTION: Example of styling a component based on its state using the data-state attribute in CSS.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n[data-scope='accordion'][data-part='item'][data-state='open'] {\n  background-color: #f5f5f5;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Timer Usage in Chakra UI Ark (JSX)\nDESCRIPTION: Demonstrates the most basic implementation of the Timer component in a React project using Chakra UI Ark.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/timer.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Tour Steps in TypeScript/React\nDESCRIPTION: Example showing how to configure different types of tour steps including tooltip, dialog, floating and wait steps. Each step can be customized with different properties like placement, title, and description.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'tooltip',\n    placement: 'top-start',\n    target: () => document.querySelector('#target-1'),\n    title: 'Tooltip Step',\n    description: 'This is a tooltip step',\n  },\n  {\n    id: 'step-2',\n    type: 'dialog',\n    title: 'Dialog Step',\n    description: 'This is a dialog step',\n  },\n  {\n    id: 'step-3',\n    type: 'floating',\n    placement: 'top-start',\n    title: 'Floating Step',\n    description: 'This is a floating step',\n  },\n  {\n    id: 'step-4',\n    type: 'wait',\n    title: 'Wait Step',\n    description: 'This is a wait step',\n    effect({ next }) {\n      // do something and go next\n      // you can also return a cleanup\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Mounting for Dialog in React\nDESCRIPTION: Demonstrates how to use the 'lazyMount' and 'unmountOnExit' props for performance optimization in Dialog rendering.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/dialog.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"lazy-mount\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a List Collection in TypeScript\nDESCRIPTION: Creates a basic list collection from an array of items with label and value properties.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { createListCollection } from '@ark-ui/react/collection'\n\nconst collection = createListCollection({\n  items: [\n    { label: 'Apple', value: 'apple' },\n    { label: 'Banana', value: 'banana' },\n  ],\n})\n\nconsole.log(collection.items) // [{ label: 'Apple', value: 'apple' }, { label: 'Banana', value: 'banana' }]\n```\n\n----------------------------------------\n\nTITLE: Handling Slider Value Changes in JSX\nDESCRIPTION: Demonstrates how to use onValueChange and onValueChangeEnd callbacks to handle slider value changes.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"on-event\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Elements with Ark Factory in Ark UI\nDESCRIPTION: Shows how to use the ark factory to create custom elements that behave like Ark UI components. This approach allows for more granular control over element creation and styling.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/composition.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"factory\" component=\"popover\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Animation with CSS Keyframes\nDESCRIPTION: CSS animation code that adds slide down and slide up transitions for accordion content using CSS variables for height. The animations are triggered based on the accordion item's open/closed state.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/accordion.mdx#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes slideDown {\n  from {\n    opacity: 0.01;\n    height: 0;\n  }\n  to {\n    opacity: 1;\n    height: var(--height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 1;\n    height: var(--height);\n  }\n  to {\n    opacity: 0.01;\n    height: 0;\n  }\n}\n\n[data-scope='accordion'][data-part='item-content'][data-state='open'] {\n  animation: slideDown 250ms ease-in-out;\n}\n\n[data-scope='accordion'][data-part='item-content'][data-state='closed'] {\n  animation: slideUp 200ms ease-in-out;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Positioning for Tooltip in React\nDESCRIPTION: Illustrates how to customize the position of the Tooltip relative to the trigger using the positioning prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"positioning\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation Keyframes in CSS\nDESCRIPTION: Defines CSS keyframe animations for fade-in and fade-out effects. Creates smooth opacity transitions that can be applied to any element.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/animation.mdx#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Tags with Max and Overflow in JSX\nDESCRIPTION: Demonstrates how to limit the number of tags and allow overflow in the TagsInput component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"max-with-overflow\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing a Toast Engine with createToaster in TypeScript\nDESCRIPTION: Creates a toast management engine with specific placement, overlap, and gap settings. This setup is required before using toast notifications in your application.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/toast.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst toaster = createToaster({\n  placement: 'bottom-end',\n  overlap: true,\n  gap: 24,\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Arrow to Tooltip in React\nDESCRIPTION: Demonstrates how to add an arrow to the Tooltip using the Tooltip.Arrow and Tooltip.ArrowTip components.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"arrow\" />\n```\n\n----------------------------------------\n\nTITLE: Controlled Tooltip Implementation in React\nDESCRIPTION: Shows how to create a controlled Tooltip component by managing the open state with the 'open' prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"controlled\" />\n```\n\n----------------------------------------\n\nTITLE: Using Render Function with Dialog in React\nDESCRIPTION: Illustrates the use of a render function as a child of the Dialog component for more control over dialog states.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/dialog.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"render-fn\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Fieldset Usage\nDESCRIPTION: Shows the basic implementation of the Fieldset component within a React application. The example demonstrates the most fundamental way to use the component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/fieldset.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Segment Group in React\nDESCRIPTION: Demonstrates how to create a controlled SegmentGroup component by managing the current selected segment with the value prop and updating it with the onValueChange event handler.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/segment-group.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"controlled\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Paste Behavior in JSX\nDESCRIPTION: Shows how to add tags when a value is pasted into the TagsInput component using the addOnPaste prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"paste-behavior\" />\n```\n\n----------------------------------------\n\nTITLE: Validating Tags in JSX\nDESCRIPTION: Shows how to use the validate function to determine whether to accept or reject a tag in the TagsInput component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"validated\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tour Step Actions\nDESCRIPTION: Example demonstrating how to add action buttons to tour steps using the actions property.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'dialog',\n    title: 'Dialog Step',\n    description: 'This is a dialog step',\n    actions: [{ label: 'Show me a tour!', action: 'next' }],\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing RootProvider for Dialog in React\nDESCRIPTION: Shows how to use the RootProvider component to access dialog state and methods from outside the dialog.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/dialog.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of TreeView Component in React\nDESCRIPTION: Demonstrates the most basic implementation of the TreeView component. This example shows how to set up and use the TreeView in a React application.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tree-view.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Handling TagsInput Events in JSX\nDESCRIPTION: Shows how to handle various events emitted by the TagsInput component, such as onValueChange, onHighlightChange, and onValueInvalid.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"on-event\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up EnvironmentProvider with React for iframes\nDESCRIPTION: Demonstrates how to manually set the Document context when working with iframes in React using the EnvironmentProvider component with react-frame-component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/environment.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Frame, { FrameContextConsumer } from 'react-frame-component'\nimport { EnvironmentProvider } from '@ark-ui/react'\n\nexport const App = () => (\n  <Frame title=\"IFrame Context\">\n    <FrameContextConsumer>\n      {({ document }) => <EnvironmentProvider value={document}>{/* Your App */}</EnvironmentProvider>}\n    </FrameContextConsumer>\n  </Frame>\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Dialog in React\nDESCRIPTION: Demonstrates the most basic usage of the Dialog component in a React application.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/dialog.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing RootProvider for TreeView in React\nDESCRIPTION: Shows how to use the RootProvider component to provide context for the TreeView. This allows access to the component's state and methods from outside the TreeView.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tree-view.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Fieldset with Form Elements\nDESCRIPTION: Shows how to integrate Fieldset with other Ark UI form elements like Checkbox, demonstrating component interoperability.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/fieldset.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"with-checkbox\" />\n```\n\n----------------------------------------\n\nTITLE: RootProvider Implementation for Timer in Chakra UI Ark (JSX)\nDESCRIPTION: Demonstrates how to use the RootProvider component to provide context for the timer and access component state and methods from outside the timer.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/timer.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Fieldset with Field Component Integration\nDESCRIPTION: Demonstrates how to use the Field component within a Fieldset to create standard input fields. This shows the component composition pattern.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/fieldset.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"with-field\" />\n```\n\n----------------------------------------\n\nTITLE: Using Field Component with TagsInput in JSX\nDESCRIPTION: Demonstrates how to use the Field component to manage form-related state and accessibility attributes of a TagsInput component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"with-field\" />\n```\n\n----------------------------------------\n\nTITLE: Auto-resizing Editable Component in TSX\nDESCRIPTION: This snippet demonstrates how to set up an auto-resizing Editable component. The autoResize prop is set to true to enable this functionality.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/editable.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Editable.Root placeholder=\"Placeholder\" autoResize>\n  {/*...*/}\n</Editable.Root>\n```\n\n----------------------------------------\n\nTITLE: Setting Anchor Position for Floating Panel in React\nDESCRIPTION: Demonstrates the use of the `getAnchorPosition` function to compute the initial position of the floating panel based on trigger and boundary rectangles.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"anchor-position\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tooltip Delay Timings in React\nDESCRIPTION: Shows how to configure the delay timings for the Tooltip using the closeDelay and openDelay props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"timings\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Floating Panel in React\nDESCRIPTION: Demonstrates the most basic implementation of the FloatingPanel component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Fade Animations to Tooltip Components\nDESCRIPTION: CSS implementation for applying fade animations to Tooltip components based on their state. Uses data attributes to target specific component states and applies corresponding animations with timing and easing.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/animation.mdx#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[data-scope='tooltip'][data-part='content'][data-state='open'] {\n  animation: fadeIn 300ms ease-out;\n}\n\n[data-scope='tooltip'][data-part='content'][data-state='closed'] {\n  animation: fadeOut 300ms ease-in;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Floating Panel Size in React\nDESCRIPTION: Shows how to programmatically control the size of the floating panel using the `size` and `onResize` props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"controlled-size\" />\n```\n\n----------------------------------------\n\nTITLE: Using Ark UI Slider Component in Vue\nDESCRIPTION: Example of how to import and use the Slider component from Ark UI in a Vue application. Demonstrates setting up the component with various subcomponents and binding to a reactive value.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/vue/README.md#2025-04-18_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Slider } from '@ark-ui/vue'\nimport { ref } from 'vue'\n\nconst value = ref([30])\n</script>\n\n<template>\n  <Slider.Root :min=\"-50\" :max=\"50\" v-model=\"value\">\n    <Slider.Label>Label</Slider.Label>\n    <Slider.ValueText>{{ value }}</Slider.ValueText>\n    <Slider.Control>\n      <Slider.Track>\n        <Slider.Range />\n      </Slider.Track>\n      <Slider.Thumb :index=\"0\" />\n    </Slider.Control>\n  </Slider.Root>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Slider Component in Solid.js\nDESCRIPTION: Example showing how to implement and use the Slider component from Ark UI in a Solid.js application. Demonstrates component structure, state management, and event handling.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/solid/README.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Slider } from '@ark-ui/solid'\nimport { createSignal } from 'solid-js'\n\nexport const MySlider = () => {\n  const [value, setValue] = createSignal([30])\n\n  return (\n    <Slider.Root min={-50} max={50} value={value()} onValueChange={(e) => setValue(e.value)}>\n      <Slider.Label>Label</Slider.Label>\n      <Slider.ValueText>{value}</Slider.ValueText>\n      <Slider.Control>\n        <Slider.Track>\n          <Slider.Range />\n        </Slider.Track>\n        <Slider.Thumb index={0} />\n      </Slider.Control>\n    </Slider.Root>\n  )\n```\n\n----------------------------------------\n\nTITLE: Vertical Slider Orientation in JSX\nDESCRIPTION: Shows how to change the slider orientation to vertical and adjust its styles accordingly.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"vertical\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Usage in JSX\nDESCRIPTION: Demonstrates the most basic implementation of the Slider component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Render Function Usage for Tooltip in React\nDESCRIPTION: Illustrates how to use a function as a child to gain more control over the Tooltip's functionality and access its API.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"render-fn\" />\n```\n\n----------------------------------------\n\nTITLE: Timer Events Usage in Chakra UI Ark (JSX)\nDESCRIPTION: Illustrates how to use timer events such as onComplete and onTick with the Timer component to handle various timer-related actions.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/timer.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"events\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Slider Step Granularity in JSX\nDESCRIPTION: Illustrates how to control the granularity of the slider value using the step prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"step\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Segment Group in React\nDESCRIPTION: Demonstrates the most basic usage of the SegmentGroup component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/segment-group.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"basic\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Highlight Component Usage in TSX\nDESCRIPTION: Demonstrates how to use the Highlight component to emphasize specific words in text. The component takes a text prop for the full content and a query prop for the text to be highlighted.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/highlight.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Highlight text=\"The quick brown fox jumps over the lazy fox.\" query=\"fox\" className=\"highlighted-text\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Min and Max Slider Values in JSX\nDESCRIPTION: Shows how to set custom minimum and maximum values for the slider using min and max props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"min-max\" />\n```\n\n----------------------------------------\n\nTITLE: Countdown Timer Implementation in Chakra UI Ark (JSX)\nDESCRIPTION: Shows how to create a countdown timer by setting the targetMs prop to a future timestamp using the Timer component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/timer.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"countdown\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Double-click Activation for Editable Component in TSX\nDESCRIPTION: This snippet demonstrates how to configure the Editable component to activate on double-click instead of single-click or focus. The activationMode prop is set to \"dblclick\" to enable this behavior.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/editable.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Editable.Root placeholder=\"Placeholder\" activationMode=\"dblclick\">\n  {/*...*/}\n</Editable.Root>\n```\n\n----------------------------------------\n\nTITLE: Changing Slider Origin in JSX\nDESCRIPTION: Illustrates how to change the slider's origin to the center of the track using the origin prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"center-origin\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider Components with Accordion\nDESCRIPTION: Demonstration of using Provider components to coordinate state and behavior between multiple components, specifically shown with an Accordion component example.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/component-state.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root>\n  <Accordion.Item>\n    <Accordion.Trigger />\n    <Accordion.Content />\n  </Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Creating List Collection with Disabled Items\nDESCRIPTION: Shows how to mark certain items as disabled using the isItemDisabled option when creating a collection.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { createListCollection } from '@ark-ui/react/collection'\n\nconst collection = createListCollection({\n  items: [\n    { id: 1, name: 'apple' },\n    { id: 2, name: 'banana' },\n    { id: 3, name: 'cherry' },\n  ],\n  isItemDisabled: (item) => item.id === 2,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Slider RootProvider in JSX\nDESCRIPTION: Demonstrates the usage of the RootProvider component to access slider state and methods from outside the component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Marks to Slider in JSX\nDESCRIPTION: Illustrates how to add marks to the slider track using Slider.MarkerGroup and Slider.Marker components.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"with-marks\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Floating Panel Context in React\nDESCRIPTION: Shows how to access the context of the floating panel using either the `useFloatingPanelContext` hook or the `FloatingPanel.Context` component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"render-fn\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Tags with defaultValue in JSX\nDESCRIPTION: Shows how to set initial tag values using the defaultValue prop in the TagsInput component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"initial-value\" />\n```\n\n----------------------------------------\n\nTITLE: Animating Collapsible Component with CSS\nDESCRIPTION: This CSS snippet demonstrates how to create smooth transitions for opening and closing the Collapsible content using CSS animations. It utilizes the data-state attribute and --height CSS variable to animate open and closed states.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/collapsible.mdx#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--height);\n  }\n  to {\n    height: 0;\n  }\n}\n\n[data-scope='collapsible'][data-part='content'][data-state='open'] {\n  animation: slideDown 250ms;\n}\n\n[data-scope='collapsible'][data-part='content'][data-state='closed'] {\n  animation: slideUp 200ms;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tour Step Effects\nDESCRIPTION: Example demonstrating how to use step effects for custom logic including data fetching and updates.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'tooltip',\n    effect({ next, show, update }) {\n      fetchData().then((res) => {\n        // update the step details\n        update({ title: res.title })\n        // then show show the step\n        show()\n      })\n\n      return () => {\n        // cleanup fetch data\n      }\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using RootProvider with TagsInput in JSX\nDESCRIPTION: Shows how to use the RootProvider component to provide context for the TagsInput and access component state and methods from outside.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Blur Behavior in JSX\nDESCRIPTION: Demonstrates how to configure the action taken when the TagsInput component is blurred using the blurBehavior prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"blur-behavior\" />\n```\n\n----------------------------------------\n\nTITLE: Setting up EnvironmentProvider with Shadow DOM in Solid.js\nDESCRIPTION: Shows how to configure the EnvironmentProvider to work with Shadow DOM when using Solid.js Portal component with shadowRoot reference.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/environment.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EnvironmentProvider } from '@ark-ui/react'\nimport { Index, Portal } from 'solid-js/web'\n\nexport const App = () => {\n  let portalNode\n  return (\n    <Portal ref={portalNode} useShadow={true}>\n      <EnvironmentProvider value={() => portalNode?.shadowRoot ?? document}>{/* Your App */}</EnvironmentProvider>\n    </Portal>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tag Editing in JSX\nDESCRIPTION: Demonstrates how to disable tag editing in the TagsInput component by setting the editable prop to false.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tags-input.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"disabled-editing\" />\n```\n\n----------------------------------------\n\nTITLE: Controlling Open State of Floating Panel in React\nDESCRIPTION: Shows how to programmatically control the open state of the floating panel using the `open` and `onOpenChange` props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"controlled-open\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Slider Value in JSX\nDESCRIPTION: Demonstrates setting the initial value of the slider using the defaultValue prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"initial-value\" />\n```\n\n----------------------------------------\n\nTITLE: Using RootProvider for Tooltip in React\nDESCRIPTION: Demonstrates the use of the RootProvider component to provide context for the tooltip and access its state and methods from outside.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tooltip.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Using Context Components with Avatar Fallback\nDESCRIPTION: Example showing how to use Context components to handle state management, specifically demonstrating the Avatar.Fallback component's behavior based on loaded state. Note that this requires 'use client' directive when using React Server Components.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/component-state.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n'use client'\n\n<Avatar>\n  <Avatar.Image />\n  <Avatar.Fallback />\n</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Finding Items by Value in List Collection\nDESCRIPTION: Demonstrates how to convert values to items using the find and findMany methods of a list collection.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst item = collection.find('banana')\n\nconsole.log(item) // { label: \"Banana\", value: \"banana\" }\n\nconst items = collection.findMany(['apple', 'banana'])\n\nconsole.log(items) // [{ label: \"Apple\", value: \"apple\" }, { label: \"Banana\", value: \"banana\" }]\n```\n\n----------------------------------------\n\nTITLE: Downloading QR Code in React TSX\nDESCRIPTION: Demonstrates how to use the QrCode.DownloadTrigger component to enable downloading of a generated QR code. The component requires specifying the fileName and mimeType for the downloaded image.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/qr-code.mdx#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<QrCode.DownloadTrigger fileName=\"qr-code.png\" mimeType=\"image/png\">\n  Download\n</QrCode.DownloadTrigger>\n```\n\n----------------------------------------\n\nTITLE: Importing Frame Component in React\nDESCRIPTION: Shows how to import the Frame component from the @ark-ui/react package.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/frame.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Frame } from '@ark-ui/react'\n```\n\n----------------------------------------\n\nTITLE: Disabling Segment in Segment Group in React\nDESCRIPTION: Shows how to disable a specific segment by passing the disabled prop to the SegmentGroup.Item component.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/segment-group.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"disabled\" />\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Props with useAccordion Hook in Solid.js\nDESCRIPTION: Example showing how to implement reactive props with the useAccordion hook in Solid.js. The accordion props are created using createMemo to ensure they update reactively based on state changes.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/solid/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst accordionProps = createMemo<UseAccordionProps>(() => ({\n  multiple: true,\n  value: value(),\n  onValueChange: (e) => setValue(e.value),\n}))\n\nconst accordion = useAccordion(accordionProps)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Width for Editable Component in TSX\nDESCRIPTION: This example shows how to set a maximum width for the Editable component as it auto-grows. The maxWidth prop is used to specify the desired maximum width.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/editable.mdx#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Editable.Root placeholder=\"Placeholder\" autoResize maxWidth=\"320px\">\n  {/*...*/}\n</Editable.Root>\n```\n\n----------------------------------------\n\nTITLE: Fieldset Root Provider Implementation\nDESCRIPTION: Demonstrates the usage of RootProvider component which provides context for the fieldset and allows access to component state and methods externally.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/fieldset.mdx#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"root-provider\" />\n```\n\n----------------------------------------\n\nTITLE: Traversing Values in List Collection\nDESCRIPTION: Shows how to get the next or previous item in a collection using getNextValue and getPreviousValue methods.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst nextValue = collection.getNextValue('apple')\n\nconsole.log(nextValue) // banana\n\nconst previousItem = collection.getPreviousValue('banana')\n\nconsole.log(previousItem) // apple\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Value Formatting with ColorPicker in React\nDESCRIPTION: Example showing how to use the ColorPicker.ValueText component with format specification to display color values in hexadecimal format.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/react/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.ValueText format=\"hex\" /> // #ff0000\n```\n\n----------------------------------------\n\nTITLE: Using the Avatar Component in JSX\nDESCRIPTION: Example of how to implement the Avatar component by passing name and src props. The component displays a user avatar with the provided image URL and name reference.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/closed-components.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Avatar name=\"Christian\" src=\"https://avatars.githubusercontent.com/u/1846056?v=4\" />\n```\n\n----------------------------------------\n\nTITLE: Creating List Collection with Custom Objects\nDESCRIPTION: Demonstrates creating a collection with custom objects by specifying itemToString and itemToValue converter functions.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { createListCollection } from '@ark-ui/react/collection'\n\nconst collection = createListCollection({\n  items: [\n    { id: 1, name: 'apple' },\n    { id: 2, name: 'banana' },\n    { id: 3, name: 'cherry' },\n  ],\n  itemToString: (item) => item.name,\n  itemToValue: (item) => item.id,\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Floating Panel Position in React\nDESCRIPTION: Illustrates how to programmatically control the position of the floating panel using the `position` and `onPositionChange` props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"controlled-position\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Highlight Appearance with CSS\nDESCRIPTION: Shows how to style the mark tags generated by the Highlight component using CSS. This example applies a yellow background color to highlighted text.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/highlight.mdx#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.highlighted-text {\n  background-color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Reordering Items in List Collection\nDESCRIPTION: Demonstrates how to reorder items in a collection by specifying the source and destination indexes using the reorder method.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst fromIndex = 1 // Banana\nconst toIndex = 0 // Apple\ncollection.reorder(fromIndex, toIndex)\n\nconsole.log(collection.items) // [{ label: \"Banana\", value: \"banana\" }, { label: \"Apple\", value: \"apple\" }]\n```\n\n----------------------------------------\n\nTITLE: Range Slider Implementation in JSX\nDESCRIPTION: Shows how to create a range slider with multiple thumbs using multiple Slider.Thumb components.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/slider.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"range\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing First and Last Values in List Collection\nDESCRIPTION: Demonstrates how to get the first and last values in a collection using the firstValue and lastValue computed properties.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(collection.firstValue) // apple\n\nconsole.log(collection.lastValue) // banana\n```\n\n----------------------------------------\n\nTITLE: Implementing Wait Steps in Tour\nDESCRIPTION: Example showing how to implement wait steps that proceed based on specific conditions or events.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'wait',\n    effect({ next }) {\n      const button = document.querySelector('#button')\n      const listener = () => next()\n      button.addEventListener('click', listener)\n      return () => button.removeEventListener('click', listener)\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Props with useAccordion in Vue\nDESCRIPTION: This code snippet illustrates how to implement support for reactive props in Vue components, specifically with the useAccordion function.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/vue/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst value = ref(['React'])\n\nconst accordionProps = computed<UseAccordionProps>(() => ({\n  multiple: true,\n  value: value.value,\n  onValueChange: (e) => (value.value = e.value),\n}))\n\nconst accordion = useAccordion(accordionProps)\n```\n\n----------------------------------------\n\nTITLE: Lazy Mounting of Floating Panel in React\nDESCRIPTION: Demonstrates how to implement lazy mounting for the floating panel using the `lazyMount` prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/floating-panel.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"lazy-mount\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Tour Step Backdrop\nDESCRIPTION: Example showing how to hide the backdrop for tour steps.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'dialog',\n    backdrop: false,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing DownloadTrigger Component in Solid.js\nDESCRIPTION: Example demonstrating how to use the DownloadTrigger component to asynchronously fetch and download an image file. The component handles blob retrieval and file download with specified filename and MIME type.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/solid/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DownloadTrigger } from '@ark-ui/solid/download-trigger'\n\nexport const DownloadImage = () => {\n  async function fetchImage() {\n    const response = await fetch('https://picsum.photos/200/300')\n    return response.blob()\n  }\n\n  return (\n    <DownloadTrigger data={fetchImage} fileName=\"avatar.jpeg\" mimeType=\"image/jpeg\">\n      Download Image\n    </DownloadTrigger>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Tour Step Arrow\nDESCRIPTION: Example showing how to hide the arrow in tooltip-type tour steps.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'tooltip',\n    arrow: false,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Tour Step Placement\nDESCRIPTION: Example showing how to configure tooltip placement for tour steps.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst steps: TourStepDetails[] = [\n  {\n    id: 'step-1',\n    type: 'tooltip',\n    placement: 'top-start',\n    // ...\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing DownloadTrigger Component in React\nDESCRIPTION: This snippet demonstrates how to use the new DownloadTrigger component to asynchronously fetch and download an image file.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/vue/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DownloadTrigger } from '@ark-ui/react/download-trigger'\n\nexport const DownloadImage = () => {\n  async function fetchImage() {\n    const response = await fetch('https://picsum.photos/200/300')\n    return response.blob()\n  }\n\n  return (\n    <DownloadTrigger data={fetchImage} fileName=\"avatar.jpeg\" mimeType=\"image/jpeg\">\n      Download Image\n    </DownloadTrigger>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML from Ark Factory Usage\nDESCRIPTION: Displays the HTML output produced when using the ark factory to create a custom element. This example shows how classes and styles are applied to the resulting span element.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/composition.mdx#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span id=\"child\" class=\"parent child\" style=\"background: red; color: blue;\">Ark UI</span>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value for Segment Group in React\nDESCRIPTION: Shows how to set a default segment on initial render using the defaultValue prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/segment-group.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Example id=\"initial-value\" />\n```\n\n----------------------------------------\n\nTITLE: Starting a SolidStart development server\nDESCRIPTION: Commands to start a development server after installing dependencies. Includes an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/solid-start/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Tour Component CSS Box Sizing\nDESCRIPTION: CSS configuration for proper box sizing measurement of tour targets.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n* {\n  box-sizing: border-box;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Download Trigger Component in React\nDESCRIPTION: Example demonstrating how to use the DownloadTrigger component to asynchronously fetch and download an image from a URL. It shows the import statement, async data fetching function, and component implementation with required props.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/react/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DownloadTrigger } from '@ark-ui/react/download-trigger'\n\nexport const DownloadImage = () => {\n  async function fetchImage() {\n    const response = await fetch('https://picsum.photos/200/300')\n    return response.blob()\n  }\n\n  return (\n    <DownloadTrigger data={fetchImage} fileName=\"avatar.jpeg\" mimeType=\"image/jpeg\">\n      Download Image\n    </DownloadTrigger>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers (npm, yarn, pnpm, or bun). After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/next-js/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Adjusting Tests for Ark UI v5 Performance Updates\nDESCRIPTION: This snippet shows how to update component tests to accommodate the performance improvements in Ark UI v5, specifically for asynchronous rendering.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/vue/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Before\nit('should open by default', () => {\n  render(ComponentUnderTest, {\n    props: {\n      defaultOpen: true,\n    },\n  })\n  expect(screen.getByRole('dialog')).toBeInTheDocument()\n})\n\n// After\nit('should open by default', async () => {\n  render(ComponentUnderTest, {\n    props: {\n      defaultOpen: true,\n    },\n  })\n  expect(await screen.findByRole('dialog')).toBeInTheDocument()\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Component Parts with Tailwind CSS\nDESCRIPTION: Example of applying Tailwind CSS classes directly to Accordion component parts using className prop.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root>\n  <Accordion.Item className=\"border-b border-gray-300\">{/* … */}</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code Lines in JSX Documentation for Accordion Component\nDESCRIPTION: Example showing how to highlight specific lines of code in documentation using the [!code highlight:x] syntax. The example displays an Accordion component with multiple items, highlighting the line that sets the 'multiple' property on the Accordion.Root.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/README.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// [!code highlight:2]\n<Accordion.Root multiple>\n  <Accordion.Item value=\"item-1\">\n    …\n  </Accordion.Item>\n  <Accordion.Item value=\"item-2\">\n    …\n  </Accordion.Item>\n</AccordionRoot>\n```\n\n----------------------------------------\n\nTITLE: Importing Format Component from Ark UI\nDESCRIPTION: Shows how to import the Format component from the @ark-ui/react package. This component is used for formatting numbers with various options.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/format-number.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Format } from '@ark-ui/react'\n```\n\n----------------------------------------\n\nTITLE: Styling Component States with Tailwind CSS\nDESCRIPTION: Example of using Tailwind CSS's variant selector to style a component based on its data-state attribute.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordion.Root>\n  <Accordion.Item className=\"border-b border-gray-300 data-[state=open]:bg-gray-100\">{/* … */}</Accordion.Item>\n</Accordion.Root>\n```\n\n----------------------------------------\n\nTITLE: Markdown Code of Conduct Document\nDESCRIPTION: Complete Code of Conduct document formatted in Markdown, defining community standards, enforcement procedures, and expectations for the Ark UI project\nSOURCE: https://github.com/chakra-ui/ark/blob/main/CODE_OF_CONDUCT.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Code of Conduct - Ark UI\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make\nparticipation in our project and our community a harassment-free experience for everyone, regardless of age, body size,\ndisability, ethnicity, sex characteristics, gender identity and expression, level of experience, education,\nsocio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or advances\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying and enforcing our standards of acceptable behavior and will take\nappropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits,\nissues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing\nthe community in public spaces. Examples of representing our community include using an official e-mail address, posting\nvia an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible\nfor enforcement at <dev@grizzly.codes>. All complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](https://contributor-covenant.org/), version\n[1.4](https://www.contributor-covenant.org/version/1/4/code-of-conduct/code_of_conduct.md) and\n[2.0](https://www.contributor-covenant.org/version/2/0/code_of_conduct/code_of_conduct.md).\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt.js for Production\nDESCRIPTION: Commands to build the Nuxt.js application for production deployment using different package managers.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/nuxt/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Targeting Accordion Item with HTML Data Attributes\nDESCRIPTION: Example of HTML structure for an open accordion item showing how Ark UI components use data-scope and data-part attributes for styling.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/styling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-scope=\"accordion\" data-part=\"item\" data-state=\"open\"></div>\n```\n\n----------------------------------------\n\nTITLE: Tour Component Body Positioning\nDESCRIPTION: CSS configuration for proper body positioning in tour implementation.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/tour.mdx#2025-04-18_snippet_8\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  position: relative;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt.js Development Server\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/nuxt/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI for React using npm\nDESCRIPTION: Command to install the @ark-ui/react package using npm package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/react/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ark-ui/react\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPicker ValueText Formatting in Solid.js\nDESCRIPTION: Example showing how to use the ColorPicker.ValueText component with format option to display color values in hexadecimal format.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/solid/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ColorPicker.ValueText format=\"hex\" /> // #ff0000\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt.js Production Build\nDESCRIPTION: Commands to locally preview the production build using different package managers.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/nuxt/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI with yarn\nDESCRIPTION: Command to install the Ark UI library for Solid.js using yarn package manager\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/solid/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ark-ui/solid\n```\n\n----------------------------------------\n\nTITLE: Checking Value Existence in List Collection\nDESCRIPTION: Shows how to check if a value exists in the collection using the has method.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/guides/collection.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst hasValue = collection.has('apple')\n\nconsole.log(hasValue) // true\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI for React using Yarn\nDESCRIPTION: Command to install the @ark-ui/react package using Yarn package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/react/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ark-ui/react\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI with npm\nDESCRIPTION: Command to install the Ark UI library for Solid.js using npm package manager\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/solid/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ark-ui/solid\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI using pnpm\nDESCRIPTION: Command to install Ark UI packages for React, Vue, and Solid using pnpm package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @ark-ui/{react,vue,solid}\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI for Vue using Yarn\nDESCRIPTION: Command to install the Ark UI library for Vue using Yarn package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/vue/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ark-ui/vue\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI for Vue using npm\nDESCRIPTION: Command to install the Ark UI library for Vue using npm package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/packages/vue/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ark-ui/vue\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI using npm\nDESCRIPTION: Command to install Ark UI packages for React, Vue, and Solid using npm package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ark-ui/{react,vue,solid}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Nuxt.js Project\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/nuxt/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Installing Ark UI using yarn\nDESCRIPTION: Command to install Ark UI packages for React, Vue, and Solid using yarn package manager.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @ark-ui/{react,vue,solid}\n```\n\n----------------------------------------\n\nTITLE: Importing Format Component - React/JSX\nDESCRIPTION: Shows how to import the Format component from the @ark-ui/react package for byte formatting functionality.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/format-byte.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Format } from '@ark-ui/react'\n```\n\n----------------------------------------\n\nTITLE: Creating a new SolidStart project using npm\nDESCRIPTION: Commands to create a new Solid project either in the current directory or in a specified folder. Uses the solid-start initialization package.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/templates/solid-start/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Importing Steps Component from Ark UI\nDESCRIPTION: Demonstrates how to import the Steps component from the Ark UI React package. This is the basic import statement needed to use the Steps component in a React application.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/components/steps.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Steps } from '@ark-ui/react/steps'\n```\n\n----------------------------------------\n\nTITLE: Focus Trap Basic Usage Documentation\nDESCRIPTION: Basic documentation structure for the Focus Trap component, including motivation, examples, and API reference sections.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/utilities/focus-trap.mdx#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nid: focus-trap\ntitle: Focus Trap\ndescription: Trap focus within a specified container.\n---\n\n## Motivation\n\nFocus trapping is essential for modal interfaces and other interactive elements that require user attention.\n\nThe `FocusTrap` component helps maintain accessibility by ensuring keyboard focus remains within a designated container\nuntil explicitly released.\n\n## Examples\n\n<Example id=\"basic\" />\n\n### Autofocus\n\nThe focus trap respects elements with the `autofocus` attribute.\n\n<Example id=\"autofocus\" />\n\n### Initial Focus\n\nUse the `initialFocus` prop to set the element that should receive initial focus when the trap is activated.\n\n<Example id=\"initial-focus\" />\n\n## API Reference\n\n<ComponentTypes id=\"focus-trap\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Ark UI Slider Component with CSS\nDESCRIPTION: This CSS snippet demonstrates how to style the root element of an Ark UI Slider component using data attributes. It sets the display to flex and the flex-direction to column.\nSOURCE: https://github.com/chakra-ui/ark/blob/main/website/src/content/pages/overview/getting-started.mdx#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Targets the <Slider.Root /> */\n[data-scope='slider'][data-part='root'] {\n  display: flex;\n  flex-direction: column;\n}\n```"
  }
]