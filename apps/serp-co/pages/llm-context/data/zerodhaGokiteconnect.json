[
  {
    "owner": "zerodha",
    "repo": "gokiteconnect",
    "content": "TITLE: Basic Kite Connect API Usage in Go\nDESCRIPTION: Demonstrates how to initialize the Kite Connect client, generate a login URL, obtain a session token, and make API calls to fetch user margins. This example shows the authentication flow and basic API interaction.\nSOURCE: https://github.com/zerodha/gokiteconnect/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\tkiteconnect \"github.com/zerodha/gokiteconnect/v4\"\n)\n\nconst (\n\tapiKey    string = \"my_api_key\"\n\tapiSecret string = \"my_api_secret\"\n)\n\nfunc main() {\n\t// Create a new Kite connect instance\n\tkc := kiteconnect.New(apiKey)\n\n\t// Login URL from which request token can be obtained\n\tfmt.Println(kc.GetLoginURL())\n\n\t// Obtained request token after Kite Connect login flow\n\trequestToken := \"request_token_obtained\"\n\n\t// Get user details and access token\n\tdata, err := kc.GenerateSession(requestToken, apiSecret)\n\tif err != nil {\n\t\tfmt.Printf(\"Error: %v\", err)\n\t\treturn\n\t}\n\n\t// Set access token\n\tkc.SetAccessToken(data.AccessToken)\n\n\t// Get margins\n\tmargins, err := kc.GetUserMargins()\n\tif err != nil {\n\t\tfmt.Printf(\"Error getting margins: %v\", err)\n\t}\n\tfmt.Println(\"margins: \", margins)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kite Ticker in Go\nDESCRIPTION: Shows how to use the Kite Ticker for streaming real-time market data. This example includes setting up callbacks for various events like tick updates, connection events, and error handling, as well as subscribing to instrument tokens and configuring the subscription mode.\nSOURCE: https://github.com/zerodha/gokiteconnect/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\tkiteconnect \"github.com/zerodha/gokiteconnect/v4\"\n\tkitemodels \"github.com/zerodha/gokiteconnect/v4/models\"\n\tkiteticker \"github.com/zerodha/gokiteconnect/v4/ticker\"\n)\n\nvar (\n\tticker *kiteticker.Ticker\n)\n\nvar (\n\tinstToken = []uint32{408065, 112129}\n)\n\n// Triggered when any error is raised\nfunc onError(err error) {\n\tfmt.Println(\"Error: \", err)\n}\n\n// Triggered when websocket connection is closed\nfunc onClose(code int, reason string) {\n\tfmt.Println(\"Close: \", code, reason)\n}\n\n// Triggered when connection is established and ready to send and accept data\nfunc onConnect() {\n\tfmt.Println(\"Connected\")\n\terr := ticker.Subscribe(instToken)\n\tif err != nil {\n\t\tfmt.Println(\"err: \", err)\n\t}\n\t// Set subscription mode for the subscribed token\n\t// Default mode is Quote\n\terr = ticker.SetMode(kiteticker.ModeFull, instToken)\n\tif err != nil {\n\t\tfmt.Println(\"err: \", err)\n\t}\n\n}\n\n// Triggered when tick is recevived\nfunc onTick(tick kitemodels.Tick) {\n\tfmt.Println(\"Tick: \", tick)\n}\n\n// Triggered when reconnection is attempted which is enabled by default\nfunc onReconnect(attempt int, delay time.Duration) {\n\tfmt.Printf(\"Reconnect attempt %d in %fs\\n\", attempt, delay.Seconds())\n}\n\n// Triggered when maximum number of reconnect attempt is made and the program is terminated\nfunc onNoReconnect(attempt int) {\n\tfmt.Printf(\"Maximum no of reconnect attempt reached: %d\", attempt)\n}\n\n// Triggered when order update is received\nfunc onOrderUpdate(order kiteconnect.Order) {\n\tfmt.Printf(\"Order: \", order.OrderID)\n}\n\nfunc main() {\n\tapiKey := \"my_api_key\"\n\taccessToken := \"my_access_token\"\n\n\t// Create new Kite ticker instance\n\tticker = kiteticker.New(apiKey, accessToken)\n\n\t// Assign callbacks\n\tticker.OnError(onError)\n\tticker.OnClose(onClose)\n\tticker.OnConnect(onConnect)\n\tticker.OnReconnect(onReconnect)\n\tticker.OnNoReconnect(onNoReconnect)\n\tticker.OnTick(onTick)\n\tticker.OnOrderUpdate(onOrderUpdate)\n\n\t// Start the connection\n\tticker.Serve()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Kite Connect Go Client\nDESCRIPTION: Command to install the Kite Connect Go client library using go get. This imports the latest version (v4) of the library.\nSOURCE: https://github.com/zerodha/gokiteconnect/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/zerodha/gokiteconnect/v4\n```\n\n----------------------------------------\n\nTITLE: Running Example from Command Line\nDESCRIPTION: Command to run the basic connection example provided in the examples folder. This requires updating the API keys in the example files before execution.\nSOURCE: https://github.com/zerodha/gokiteconnect/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo run examples/connect/basic/connect.go\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run the unit tests for the project. The -v flag provides verbose output showing detailed test results.\nSOURCE: https://github.com/zerodha/gokiteconnect/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngo test -v\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Submodules for Development\nDESCRIPTION: Command to initialize and update Git submodules for fetching mock responses used in testcases. This needs to be run initially when setting up for development.\nSOURCE: https://github.com/zerodha/gokiteconnect/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```"
  }
]