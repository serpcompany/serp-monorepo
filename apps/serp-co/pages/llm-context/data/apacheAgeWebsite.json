[
  {
    "owner": "apache",
    "repo": "age-website",
    "content": "TITLE: Using Cypher in a JOIN expression with PostgreSQL\nDESCRIPTION: This example shows how to use a Cypher query in a JOIN clause to match graph data with relational data. The query compares name and age values between a SQL table and graph data.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT id, \n    graph_query.name = t.name as names_match,\n    graph_query.age = t.age as ages_match\nFROM schema_name.sql_person AS t\nJOIN cypher('graph_name', $$\n        MATCH (n:Person)\n        RETURN n.name, n.age, id(n)\n$$) as graph_query(name agtype, age agtype, id agtype)\nON t.person_id = graph_query.id\n```\n\n----------------------------------------\n\nTITLE: Matching Vertices with Labels and Properties in PostgreSQL using Cypher\nDESCRIPTION: This query demonstrates how to match vertices with specific labels and properties, finding movies connected to a person with a given name.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (:Person {name: 'Oliver Stone'})-[]-(movie:Movie)\nRETURN movie.title\n$$) as (title agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertex with Labels and Properties in Apache AGE\nDESCRIPTION: Query that creates a labeled vertex with multiple properties. This demonstrates how to create a Person vertex with name and title properties in a single operation.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (:Person {name: 'Andres', title: 'Developer'})\n$$) as (n agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating and Returning a Node in Apache AGE\nDESCRIPTION: Query that creates a vertex with properties and returns it in the same operation. By using RETURN, the newly created node is returned as part of the query results.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (a {name: 'Andres'})\n    RETURN a\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating Prepared Statement with Cypher Query in PostgreSQL\nDESCRIPTION: Demonstrates how to prepare a statement that matches Person vertices based on a name parameter. The query uses a Cypher parameter within the query and a PostgreSQL parameter in the cypher function call.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/prepared_statements.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nPREPARE cypher_stored_procedure(agtype) AS\nSELECT *\nFROM cypher('expr', $$\n    MATCH (v:Person) \n    WHERE v.name = $name //Cypher parameter\n    RETURN v\n$$, $1) //An SQL Parameter must be placed in the cypher function call\nAS (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Vertices with Specific Label in PostgreSQL using Cypher\nDESCRIPTION: This query demonstrates how to retrieve all vertices with a specific label (in this case, 'Movie') using the MATCH clause.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (movie:Movie)\nRETURN movie.title\n$$) as (title agtype);\n```\n\n----------------------------------------\n\nTITLE: Graph Creation and AGE Setup - PostgreSQL\nDESCRIPTION: Initial setup commands to load AGE extension and create a new graph.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nLOAD 'age';\n\nSET search_path TO ag_catalog;\nSELECT create_graph('agload_test_graph');\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Path in Apache AGE\nDESCRIPTION: Query that creates multiple nodes and relationships in a single pattern. This creates a complete path with two WORKS_AT relationships connecting three nodes, and returns the entire path.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE p = (andres {name:'Andres'})-[:WORKS_AT]->(neo)<-[:WORKS_AT]-(michael {name:'Michael'})\n    RETURN p\n$$) as (p agtype);\n```\n\n----------------------------------------\n\nTITLE: Merging a Node with Both Label and Properties\nDESCRIPTION: Demonstrates merging a node with both a label constraint and property constraints. If a node matches all constraints, it will be returned; otherwise a new node will be created.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/merge.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMERGE (michael:Person {name: 'Michael Douglas'})\nRETURN michael.name, michael.bornIn\n$$) as (Name agtype, BornIn agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating an Edge Between Two Nodes in Apache AGE\nDESCRIPTION: Query that matches two existing Person vertices and creates a relationship between them. This demonstrates how to create edges after finding the nodes to connect.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:Person), (b:Person)\n    WHERE a.name = 'Node A' AND b.name = 'Node B'\n    CREATE (a)-[e:RELTYPE]->(b)\n    RETURN e\n$$) as (e agtype);\n```\n\n----------------------------------------\n\nTITLE: Calling a SQL User Defined Function within a Cypher Query\nDESCRIPTION: This example shows how to execute a Cypher query that calls the previously defined SQL function. It matches event nodes and filters them based on comparing the node's year property with a year retrieved by the function.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/sql_in_cypher.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (e:event)\n\tWHERE e.year < public.get_event_year(e.name)\n\tRETURN e.name\n$$) as (n agtype);\n```\n\n----------------------------------------\n\nTITLE: Ordering Nodes by Multiple Properties in Cypher with PostgreSQL\nDESCRIPTION: This query demonstrates sorting nodes by multiple properties. It first sorts by age and then by name, creating a hierarchical sorting where nodes with the same age are ordered by name.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/order_by.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n)\n    WITH n.name as name, n.age as age\n    ORDER BY n.age, n.name\n    RETURN name, age\n$$) as (name agtype, age agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL-based User Defined Function in PostgreSQL for AGE\nDESCRIPTION: This snippet demonstrates how to create a PostgreSQL function that executes SQL which can be called from Cypher. The function retrieves the year value from a history table based on an event name and returns it as an agtype.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/sql_in_cypher.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE OR REPLACE FUNCTION public.get_event_year(name agtype) RETURNS agtype AS $$\n\tSELECT year::agtype\n\tFROM history AS h\n\tWHERE h.event_name = name::text\n\tLIMIT 1;\n$$ LANGUAGE sql;\n```\n\n----------------------------------------\n\nTITLE: Executing a Cypher Query with PostgreSQL\nDESCRIPTION: Demonstrates how to execute a Cypher query using the cypher() function within a PostgreSQL SELECT statement. The example shows the proper syntax including the required record definition for the returned results.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/cypher.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$ \n/* Cypher Query Here */ \n$$) AS (result1 agtype, result2 agtype);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Vertices in PostgreSQL using Cypher\nDESCRIPTION: This query uses the MATCH clause to retrieve all vertices in the graph database without any labels or filters.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (v)\nRETURN v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating PL/pgSQL Function to Retrieve Actor Names\nDESCRIPTION: This function demonstrates how to implement a PL/pgSQL function that executes a Cypher query to return all actor names from the graph. It loads the AGE extension, sets the search path, and uses a Cypher query to match actor vertices and return their names.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/plpgsql.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE OR REPLACE FUNCTION get_all_actor_names()\nRETURNS TABLE(actor agtype)\nLANGUAGE plpgsql\nAS $BODY$\nBEGIN\n    LOAD 'age';\n    SET search_path TO ag_catalog;\n\n    RETURN QUERY \n    SELECT * \n    FROM ag_catalog.cypher('imdb', $$\n        MATCH (v:actor)\n        RETURN v.name\n    $$) AS (a agtype);\nEND\n$BODY$;\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL 15 on Ubuntu\nDESCRIPTION: Command to install PostgreSQL 15 and development files on Ubuntu using apt package manager. Replace '15' with the desired PostgreSQL version if different.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install postgresql-15 postgresql-server-dev-all\n```\n\n----------------------------------------\n\nTITLE: Loading Vertices from CSV File - PostgreSQL\nDESCRIPTION: Function to load vertices from CSV files into an AGE graph. Accepts graph name, label name, and file path parameters. Optional fourth parameter to handle files without ID fields.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nload_labels_from_file('<graph name>', \n                      '<label name>',\n                      '<file path>')\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nload_labels_from_file('<graph name>', \n                      '<label name>',\n                      '<file path>', \n                      false)\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Vertex in Apache AGE\nDESCRIPTION: Query that creates a vertex with a specific label (Person). Labels are used to categorize vertices and can be used in MATCH patterns.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (:Person)\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Nodes with Existing Paths in Apache AGE (PostgreSQL)\nDESCRIPTION: This query uses the EXISTS(path) function to find nodes that have a relationship with a specific node (Willem Defoe). It returns the full names of nodes that have such a connection.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/predicate_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n     MATCH (n)\n     WHERE exists((n)-[]-({name: 'Willem Defoe'}))\n     RETURN n.full_name\n$$) as (full_name agtype);\n```\n\n----------------------------------------\n\nTITLE: Basic Cypher Function Return Type\nDESCRIPTION: Shows the return type of the cypher() function, which is a SETOF records in PostgreSQL.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/cypher.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA SETOF records\n```\n\n----------------------------------------\n\nTITLE: Creating PL/pgSQL Function with Dynamic Cypher Query\nDESCRIPTION: This function demonstrates how to implement a parameterized Cypher query using dynamic SQL within a PL/pgSQL function. It accepts a role parameter and finds actors who played that specific role along with the movies they appeared in.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/plpgsql.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE OR REPLACE FUNCTION get_actors_who_played_role(role agtype)\nRETURNS TABLE(actor agtype, movie agtype)\nLANGUAGE plpgsql\nAS $function$\nDECLARE sql VARCHAR;\nBEGIN\n        load 'age';\n        SET search_path TO ag_catalog;\n\n        sql := format('\n\t\tSELECT *\n\t\tFROM cypher(''imdb'', $$\n\t\t\tMATCH (actor)-[:acted_in {role: %s}]->(movie:movie)\n\t\t\tRETURN actor.name, movie.title\n\t\t$$) AS (actor agtype, movie agtype);\n\t', role);\n\n        RETURN QUERY EXECUTE sql;\n\nEND\n$function$;\n```\n\n----------------------------------------\n\nTITLE: Deleting and Returning Vertex Data in Apache AGE\nDESCRIPTION: Shows how to delete a vertex and return its data in the same query. This allows inspection of the deleted vertex's properties before removal.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/delete.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (n {name: 'A'})\n\tDELETE n\n\tRETURN n\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Deleting Vertices with Connected Edges in Apache AGE\nDESCRIPTION: Shows how to delete vertices and their associated edges using DETACH DELETE. This operation first removes all connected edges before deleting the vertices.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/delete.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n\tMATCH (v:Useless)\n\tDETACH DELETE v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating an Edge with Properties in Apache AGE\nDESCRIPTION: Query that creates a relationship with properties between two matched nodes. This example shows how to set edge properties using expressions based on the connected nodes' properties.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (a:Person), (b:Person)\n    WHERE a.name = 'Node A' AND b.name = 'Node B'\n    CREATE (a)-[e:RELTYPE {name:a.name + '<->' + b.name}]->(b)\n    RETURN e\n$$) as (e agtype);\n```\n\n----------------------------------------\n\nTITLE: Using relationships() Function to Extract Edges from a Path\nDESCRIPTION: Demonstrates the relationships() function which returns a list of all edges in a path. This query finds a path from 'Alice' to 'Eskil' and returns all relationships in that path.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH p = (a)-[]->(b)-[]->(c)\n\tWHERE a.name = 'Alice' AND c.name = 'Eskil'\n\tRETURN relationships(p)\n$$) as (edges agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Edges in Apache AGE Cypher Queries\nDESCRIPTION: This query matches edges with the label 'KNOWS' originating from a node with name 'A' and returns the relationship objects. The result includes the relationship's ID, start and end node IDs, label, and properties.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n)-[r:KNOWS]->()\n    WHERE n.name = 'A'\n    RETURN r\n$$) as (r agtype);\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Properties in Apache AGE\nDESCRIPTION: Shows how to set multiple properties in a single SET clause by separating them with commas. This example sets both position and surname properties in one query.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/set.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\nMATCH (v {name: 'Andres'})\nSET v.position = 'Developer', v.surname = 'Taylor'\nRETURN v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Pulling Apache AGE Docker Image\nDESCRIPTION: Command to pull the Apache AGE Docker image from the Docker Hub repository.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull apache/age\n```\n\n----------------------------------------\n\nTITLE: Using Cypher with the IN clause in PostgreSQL\nDESCRIPTION: This example demonstrates using a Cypher query with PostgreSQL's IN operator. This approach is useful when the Cypher query returns one column with multiple rows for comparison.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/advanced.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT t.name, t.age FROM schema_name.sql_person as t \nwhere t.name in (\n    SELECT *\n    FROM cypher('graph_name', $$\n        MATCH (v:Person)\n        RETURN v.name \n    $$) as (a agtype));\n```\n\n----------------------------------------\n\nTITLE: Merging a Node with a Label\nDESCRIPTION: Demonstrates merging a node with just a label. If a node with the 'Critic' label exists, it will be returned. Otherwise, a new node with that label will be created.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/merge.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMERGE (v:Critic)\nRETURN v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Edge Properties with Labels in PostgreSQL using Cypher\nDESCRIPTION: This query demonstrates how to retrieve properties of edges with specific labels using a variable in the edge pattern.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH ({title: 'Wall Street'})<-[r:ACTED_IN]-(actor)\nRETURN r.role\n$$) as (role agtype);\n```\n\n----------------------------------------\n\nTITLE: Loading Edges from CSV File - PostgreSQL\nDESCRIPTION: Function to load edges from CSV files into an AGE graph. Requires graph name, label name, and file path parameters.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nload_edges_from_file('<graph name>',\n                    '<label name>',\n                    '<file path>');\n```\n\n----------------------------------------\n\nTITLE: Using Cypher in a CTE (Common Table Expression) in PostgreSQL\nDESCRIPTION: This snippet demonstrates how to use a Cypher query within a PostgreSQL Common Table Expression (CTE). The Cypher query retrieves names and ages from a graph, which are then selected from the CTE.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nWITH graph_query as (\n    SELECT *\n        FROM cypher('graph_name', $$\n        MATCH (n)\n        RETURN n.name, n.age\n    $$) as (name agtype, age agtype)\n)\nSELECT * FROM graph_query;\n```\n\n----------------------------------------\n\nTITLE: Basic Aggregation Query with Auto Grouping\nDESCRIPTION: Demonstrates basic aggregation using count function with automatic grouping by name property.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tRETURN v.name, count(*)\n$$) as (grouping_key agtype, count agtype);\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple Edges in PostgreSQL using Cypher\nDESCRIPTION: This query shows how to match a pattern involving multiple edges to find relationships between actors, movies, and directors.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n    MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director)\n    RETURN movie.title, director.name\n$$) as (title agtype, name agtype);\n```\n\n----------------------------------------\n\nTITLE: Executing Prepared Statement with Parameters in PostgreSQL\nDESCRIPTION: Shows how to execute a prepared statement by passing an agtype map containing parameter values. The parameter name is specified without the '$' prefix.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/prepared_statements.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nEXECUTE cypher_prepared_statement('{\"name\": \"Tobias\"}');\n```\n\n----------------------------------------\n\nTITLE: Matching Specific Edge Labels in PostgreSQL using Cypher\nDESCRIPTION: This query shows how to match edges with a specific label (in this case, 'ACTED_IN') to find actors of a particular movie.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (:Movie {title: 'Wall Street'})<-[:ACTED_IN]-(actor)\nRETURN actor.name\n$$) as (actors_name agtype);\n```\n\n----------------------------------------\n\nTITLE: Sum of Ages Calculation\nDESCRIPTION: Calculates the sum of all age values from Person nodes in the graph.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\nMATCH (n:Person)\nRETURN sum(n.age)\n$$) as (total_age agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Vertices in Apache AGE\nDESCRIPTION: Query that creates multiple vertices in a single CREATE statement by separating them with commas. This creates two unlabeled vertices in the graph.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (n), (m)\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning All Elements with Wildcard in Apache AGE Cypher Queries\nDESCRIPTION: This query matches a pattern where node 'A' has relationships to node 'B' and returns all elements (nodes and relationships) using the wildcard symbol. The result includes both the matched nodes and the relationships between them.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (a {name: 'A'})-[r]->(b)\n\tRETURN *\n$$) as (a agtype, b agtype, r agtype);\n```\n\n----------------------------------------\n\nTITLE: Ordering Nodes by a Single Property in Cypher with PostgreSQL\nDESCRIPTION: This query demonstrates how to sort nodes by their name property in ascending order. It first matches all nodes, projects the name and age properties, then orders the results by name before returning them.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/order_by.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n)\n    WITH n.name as name, n.age as age\n    ORDER BY n.name\n    RETURN name, age\n$$) as (name agtype, age agtype);\n```\n\n----------------------------------------\n\nTITLE: Counting Non-null Age Values\nDESCRIPTION: Returns the count of Person nodes that have a non-null age property value.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n:Person)\n    RETURN count(n.age)\n$$) as (count agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Nodes in Apache AGE Cypher Queries\nDESCRIPTION: This query matches a node with the name 'B' and returns the entire node object. The result includes the node's ID, label, and properties in AGE's vertex format.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n {name: 'B'})\n    RETURN n\n$$) as (n agtype);\n```\n\n----------------------------------------\n\nTITLE: Running Apache AGE Docker Container\nDESCRIPTION: Command to run Apache AGE Docker container with customized settings for name, port, user, password, and database.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    --name myPostgresDb  \\\n    -p 5455:5432 \\\n    -e POSTGRES_USER=postgresUser \\\n    -e POSTGRES_PASSWORD=postgresPW \\\n    -e POSTGRES_DB=postgresDB \\\n    -d \\\n    apache/age\n```\n\n----------------------------------------\n\nTITLE: Query with Multiple Grouping Keys\nDESCRIPTION: Shows how to use multiple properties as separate grouping keys in a query.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (x:L)\n\tRETURN x.a + count(*) + x.b + count(*) + x.c, x.a, x.b, x.c\n$$) as (count agtype, a agtype, b agtype, c agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Nodes with Existing Properties in Apache AGE (PostgreSQL)\nDESCRIPTION: This query demonstrates the use of the exists() function to filter nodes based on the presence of a specific property (surname). It returns the first name and last name of nodes where the surname property exists.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/predicate_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n     MATCH (n)\n     WHERE exists(n.surname)\n     RETURN n.first_name, n.last_name\n$$) as (first_name agtype, last_name agtype);\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Edges in Apache AGE\nDESCRIPTION: Demonstrates how to delete specific edges (relationships) between nodes. This example deletes KNOWS relationships from nodes with name 'Andres'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/delete.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n\tMATCH (n {name: 'Andres'})-[r:KNOWS]->()\n\tDELETE r\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Deleting Isolated Vertices in Apache AGE\nDESCRIPTION: Demonstrates how to delete vertices with the 'Useless' label that have no connected edges. Uses a MATCH clause to find target vertices and DELETE to remove them.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/delete.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n\tMATCH (v:Useless)\n\tDELETE v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edge Types in PostgreSQL using Cypher\nDESCRIPTION: This query demonstrates how to retrieve the types of edges connected to a specific vertex using a variable in the edge pattern.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (:Person {name: 'Oliver Stone'})-[r]->(movie)\nRETURN type(r)\n$$) as (title agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings with toString() Function in PostgreSQL\nDESCRIPTION: This snippet shows how to use the toString() function in Apache AGE to convert different data types (float, string, boolean) to strings. It demonstrates the function's behavior with various input types.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_11\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN toString(11.5),toString('a string'), toString(true)\n$$) as (float_to_str agtype, str_to_str agtype, bool_to_string);\n```\n\n----------------------------------------\n\nTITLE: Removing Property from Vertex using Apache AGE Cypher\nDESCRIPTION: Demonstrates how to remove the 'age' property from a vertex with name 'Andres' using a Cypher query within PostgreSQL. The query matches a vertex with the specified name property and removes its age property, then returns the modified vertex.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/remove.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (andres {name: 'Andres'})\n    REMOVE andres.age\n    RETURN andres\n$$) as (andres agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Graphs with Cypher in PostgreSQL\nDESCRIPTION: This example demonstrates how to query multiple graphs simultaneously using Cypher. The query joins data from two different graphs based on matching name properties, combining person details with doctor license information.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/advanced.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT graph_1.name, graph_1.age, graph_2.license_number\nFROM cypher('graph_1', $$\n    MATCH (v:Person)\n    RETURN v.name, v.age\n$$) as graph_1(col_1 agtype, col_2 agtype, col_3 agtype)\nJOIN cypher('graph_2', $$\n    MATCH (v:Doctor)\n    RETURN v.name, v.license_number\n$$) as graph_2(name agtype, license_number agtype)\nON graph_1.name = graph_2.name\n```\n\n----------------------------------------\n\nTITLE: Using CONTAINS Operator for Substring Searching in AGE\nDESCRIPTION: This query demonstrates the CONTAINS operator which performs case-sensitive inclusion searching in strings, finding all Person nodes with names that contain the letter 'o'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name CONTAINS \"o\"\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting to Boolean in Apache AGE Cypher (PostgreSQL)\nDESCRIPTION: This query shows the usage of the toBoolean() function in Apache AGE Cypher. It converts string values to boolean, returning null for invalid inputs.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_12\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN toBoolean('TRUE'), toBoolean('not a boolean')\n$$) as (a_bool agtype, not_a_bool agtype);\n```\n\n----------------------------------------\n\nTITLE: Vertex Data Format Example\nDESCRIPTION: Example showing the data format for a vertex entity in Apache AGE with id, label and properties.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{id:1; label: 'label_name'; properties: {prop1: value1, prop2: value2}}::vertex\n```\n\n----------------------------------------\n\nTITLE: Loading Edge Relationships - PostgreSQL\nDESCRIPTION: Creates has_city edge label and loads edge relationships from CSV file.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT create_elabel('agload_test_graph','has_city');\nSELECT load_edges_from_file('agload_test_graph', 'has_city',\n     'age/regress/age_load/data/edges.csv');\n```\n\n----------------------------------------\n\nTITLE: Ordering Nodes in Descending Order in Cypher with PostgreSQL\nDESCRIPTION: This query shows how to sort nodes in descending order using the DESC keyword. It matches all nodes, projects their name and age properties, then sorts them by name in reverse alphabetical order.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/order_by.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n)\n    WITH n.name AS name, n.age AS age\n    ORDER BY n.name DESC\n    RETURN name, age\n$$) as (name agtype, age agtype);\n```\n\n----------------------------------------\n\nTITLE: Using round() Function in Apache AGE Cypher Query\nDESCRIPTION: Demonstrates how to use the round() function to round a decimal number to the nearest integer in a Cypher query.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN round(3.141592)\n$$) as (rounded_value agtype);\n```\n\n----------------------------------------\n\nTITLE: Initializing Graph Data in Apache AGE\nDESCRIPTION: Sets up initial graph data with Person nodes and KNOWS relationships for demonstration of aggregation functions.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nLOAD 'age';\nSET search_path TO ag_catalog;\n\nSELECT create_graph('graph_name');\n\nSELECT * FROM cypher('graph_name', $$\n\tCREATE (a:Person {name: 'A', age: 13}),\n\t(b:Person {name: 'B', age: 33, eyes: \"blue\"}),\n\t(c:Person {name: 'C', age: 44, eyes: \"blue\"}),\n\t(d1:Person {name: 'D', eyes: \"brown\"}),\n\t(d2:Person {name: 'D'}),\n\t(a)-[:KNOWS]->(b),\n\t(a)-[:KNOWS]->(c),\n\t(a)-[:KNOWS]->(d1),\n\t(b)-[:KNOWS]->(d2),\n\t(c)-[:KNOWS]->(d2)\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Graph Validation Queries - PostgreSQL\nDESCRIPTION: SQL queries to verify graph data loading by checking table information and counting vertices and edges.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT table_catalog, table_schema, table_name, table_type\nFROM information_schema.tables\nWHERE table_schema = 'agload_test_graph';\n\nSELECT COUNT(*) FROM agload_test_graph.\"Country\";\nSELECT COUNT(*) FROM agload_test_graph.\"City\";\nSELECT COUNT(*) FROM agload_test_graph.\"has_city\";\n\nSELECT COUNT(*) FROM cypher('agload_test_graph', $$MATCH(n) RETURN n$$) as (n agtype);\nSELECT COUNT(*) FROM cypher('agload_test_graph', $$MATCH (a)-[e]->(b) RETURN e$$) as (n agtype);\n```\n\n----------------------------------------\n\nTITLE: Terminal CREATE Clause in PostgreSQL with Apache AGE\nDESCRIPTION: Example of a terminal CREATE clause in Apache AGE. Since the CREATE clause is not followed by another clause, no results will be returned, but a column must still be defined in the result set definition.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE /* Create clause here, no following clause */\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Loading City Vertices - PostgreSQL\nDESCRIPTION: Creates City label and loads vertices from CSV file with ID field.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT create_vlabel('agload_test_graph','City');\nSELECT load_labels_from_file('agload_test_graph',\n                             'City', \n                             'age/regress/age_load/data/cities.csv');\n```\n\n----------------------------------------\n\nTITLE: Aliasing Return Fields in Apache AGE Cypher Queries\nDESCRIPTION: This query demonstrates how to alias the returned field in the column definition. It matches a node with the name 'A', returns its name property, but renames the output column to 'objects_name'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n {name: 'A'})\n    RETURN n.name\n$$) as (objects_name agtype);\n```\n\n----------------------------------------\n\nTITLE: Loading Country Vertices - PostgreSQL\nDESCRIPTION: Creates Country label and loads vertices from CSV file with ID field.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT create_vlabel('agload_test_graph','Country');\nSELECT load_labels_from_file('agload_test_graph',\n                             'Country',\n                             'age/regress/age_load/data/countries.csv');\n```\n\n----------------------------------------\n\nTITLE: Returning Various Expressions in Apache AGE Cypher Queries\nDESCRIPTION: This query demonstrates returning different types of expressions: a boolean predicate (age > 30), a string literal, and a function call (id). It shows how any valid expression can be used in the RETURN clause.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (a)\n    RETURN a.age > 30, 'I\\'m a literal', id(a)\n$$) as (older_than_30 agtype, literal agtype, id agtype);\n```\n\n----------------------------------------\n\nTITLE: Distinct Aggregation Example\nDESCRIPTION: Demonstrates the usage of DISTINCT operator with aggregation to count unique values.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tRETURN count(DISTINCT v.eyes), count(v.eyes)\n$$) as (distinct_eyes agtype, eyes agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting Edge Type Query\nDESCRIPTION: Shows how to use type() function to get the string representation of an edge type.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH ()-[e]->()\n    RETURN type(e)\n$$) as (type agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting Properties Query\nDESCRIPTION: Demonstrates using properties() function to get all properties of a vertex or edge as a map.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    CREATE (p:Person {name: 'Stefan', city: 'Berlin'})\n    RETURN properties(p)\n$$) as (type agtype);\n```\n\n----------------------------------------\n\nTITLE: Finding Related Vertices in PostgreSQL using Cypher\nDESCRIPTION: This query shows how to find vertices related to a specific vertex (in this case, movies related to 'Oliver Stone') using an unspecified edge.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (director {name: 'Oliver Stone'})-[]-(movie)\nRETURN movie.title\n$$) as (title agtype);\n```\n\n----------------------------------------\n\nTITLE: Removing Property Using SET NULL in Apache AGE\nDESCRIPTION: Demonstrates removing a property by setting it to NULL using the SET clause. This is an alternative to using REMOVE and is useful when the property comes from a parameter.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/set.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (v {name: 'Andres'})\n    SET v.name = NULL\n    RETURN v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting String to Uppercase using Apache AGE\nDESCRIPTION: This query shows how to use the toUpper() function in Apache AGE to convert a string to uppercase.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN toUpper('hello')\n$$) as (upper_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expression for Basic String Matching in AGE\nDESCRIPTION: This query demonstrates using the =~ operator for basic string matching with regular expressions, behaving like the equality operator when no special characters are used.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name =~ 'John'\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Ordered Results in Cypher with PostgreSQL\nDESCRIPTION: This query demonstrates how null values are handled in sorted results. When using ORDER BY with ascending order, null values appear at the end of the result set. The query returns nodes sorted by their height property.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/order_by.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n)\n    WITH n.name AS name, n.age AS age, n.height\n    ORDER BY n.height\n    RETURN name, age, height\n$$) as (name agtype, age agtype, height agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting to Integer in Apache AGE Cypher (PostgreSQL)\nDESCRIPTION: This query shows the usage of the toInteger() function in Apache AGE Cypher. It converts string or float values to integers, returning null for invalid inputs.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_14\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n     RETURN toInteger('42'), toInteger('not a number')\n$$) as (an_integer agtype, not_an_integer agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase using Apache AGE\nDESCRIPTION: This query demonstrates the use of the toLower() function in Apache AGE to convert a string to lowercase.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN toLower('HELLO')\n$$) as (lower_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Replacing Characters in a String using Apache AGE\nDESCRIPTION: This query demonstrates the use of the replace() function in Apache AGE to replace all occurrences of 'l' with 'w' in the string 'hello'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tRETURN replace('hello', 'l', 'w')\n$$) as (str_array agtype);\n```\n\n----------------------------------------\n\nTITLE: Average Age Calculation\nDESCRIPTION: Calculates the average age of all Person nodes in the graph.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\nMATCH (n:Person)\nRETURN avg(n.age)\n$$) as (avg_age agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting to Float in Apache AGE Cypher (PostgreSQL)\nDESCRIPTION: This query demonstrates the toFloat() function in Apache AGE Cypher. It converts string or integer values to floating point numbers, returning null for invalid inputs.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_13\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN toFloat('11.5'), toFloat('not a number')\n$$) as (a_float agtype, not_a_float agtype);\n```\n\n----------------------------------------\n\nTITLE: Trimming Left Whitespace using Apache AGE\nDESCRIPTION: This query demonstrates the use of the lTrim() function in Apache AGE to remove leading whitespace from a string.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN lTrim(' hello ')\n$$) as (left_trimmed_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Splitting a String into an Array using Apache AGE\nDESCRIPTION: This query shows how to use the split() function in Apache AGE to split a string 'one,two' into an array using ',' as the delimiter.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN split('one,two', ',')\n$$) as (split_list agtype);\n```\n\n----------------------------------------\n\nTITLE: Loading Vertices Without ID Field - PostgreSQL\nDESCRIPTION: Example of loading vertices when CSV files don't contain ID fields, demonstrating automatic ID generation.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT create_vlabel('agload_test_graph','Country2');\nSELECT load_labels_from_file('agload_test_graph',\n                             'Country2',\n                             'age/regress/age_load/data/countries.csv', \n                             false);\n\nSELECT create_vlabel('agload_test_graph','City2');\nSELECT load_labels_from_file('agload_test_graph',\n                             'City2',\n                             'age/regress/age_load/data/cities.csv', \n                             false);\n```\n\n----------------------------------------\n\nTITLE: Counting With and Without Duplicates\nDESCRIPTION: Demonstrates counting friends of friends using both DISTINCT and regular count to show duplicate handling.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (me:Person)-[]->(friend:Person)-[]->(friend_of_friend:Person)\n\tWHERE me.name = 'A'\n\tRETURN count(DISTINCT friend_of_friend), count(friend_of_friend)\n$$) as (friend_of_friends_distinct agtype, friend_of_friends agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning a Subset of Rows with LIMIT in Apache AGE Cypher Query\nDESCRIPTION: This query demonstrates how to use LIMIT to return a subset of the result, starting from the top. It matches nodes, returns their name property, orders them, and limits the output to 3 rows.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/limit.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n\tMATCH (n) RETURN n.name\n\tORDER BY n.name\n\tLIMIT 3\n$$) as (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Extracting Right Substring using Apache AGE\nDESCRIPTION: This query shows how to use the right() function in Apache AGE to extract the rightmost 3 characters from the string 'hello'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN right('hello', 3)\n$$) as (new_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Computing Natural Logarithm in Apache AGE\nDESCRIPTION: Calculates the natural logarithm (base e) of a given number. Returns null for null input or zero.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/logarithmic_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN log(27)\n$$) as (natural_logarithm agtype);\n```\n\n----------------------------------------\n\nTITLE: Using STARTS WITH Operator for Prefix Searching in AGE\nDESCRIPTION: This query demonstrates the STARTS WITH operator which performs case-sensitive prefix searching on strings, finding all Person nodes with names that start with 'J'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name STARTS WITH \"J\"\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Map Operations in Lists\nDESCRIPTION: Demonstrates working with maps within lists, including creation and property access of nested map structures.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n   WITH [0, {key: 'key_value'}, 2, 3, 4, 5, 6, 7, 8, 9, 10] as lst\n    RETURN lst\n$$) AS (map_value agtype);\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n   WITH [0, {key: 'key_value'}, 2, 3, 4, 5, 6, 7, 8, 9, 10] as lst\n    RETURN lst[1].key\n$$) AS (map_value agtype);\n```\n\n----------------------------------------\n\nTITLE: Extracting Left Substring using Apache AGE\nDESCRIPTION: This query demonstrates the use of the left() function in Apache AGE to extract the leftmost 3 characters from the string 'Hello'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tRETURN left('Hello', 3)\n$$) as (new_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Computing Common Logarithm in Apache AGE\nDESCRIPTION: Calculates the common logarithm (base 10) of a given number. Returns null for null input or zero.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/logarithmic_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN log10(27)\n$$) as (common_logarithm agtype);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sample Data with CREATE\nDESCRIPTION: Creates a dataset of Person nodes with name and birthplace properties for demonstration purposes.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/merge.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * from cypher('graph_name', $$\nCREATE (A:Person {name: \"Charlie Sheen\", bornIn: \"New York\"}),\n    (B:Person {name: \"Michael Douglas\", bornIn: \"New Jersey\"}),\n    (C:Person {name: \"Rob Reiner\", bornIn: \"New York\"}),\n    (D:Person {name: \"Oliver Stone\", bornIn: \"New York\"}),\n    (E:Person {name: \"Martin Sheen\", bornIn: \"Ohio\"})\n$$) as (result agtype);\n```\n\n----------------------------------------\n\nTITLE: Graph Comparison and Cleanup - PostgreSQL\nDESCRIPTION: Queries to compare automatically generated IDs with file-specified IDs and final graph cleanup.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/agload.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT COUNT(*) FROM agload_test_graph.\"Country2\";\nSELECT COUNT(*) FROM agload_test_graph.\"City2\";\n\nSELECT id FROM agload_test_graph.\"Country\" LIMIT 10;\nSELECT id FROM agload_test_graph.\"Country2\" LIMIT 10;\n\nSELECT * FROM cypher('agload_test_graph', $$MATCH(n:Country {iso2 : 'BE'})\n    RETURN id(n), n.name, n.iso2 $$) as (\"id(n)\" agtype, \"n.name\" agtype, \"n.iso2\" agtype);\nSELECT * FROM cypher('agload_test_graph', $$MATCH(n:Country2 {iso2 : 'BE'})\n    RETURN id(n), n.name, n.iso2 $$) as (\"id(n)\" agtype, \"n.name\" agtype, \"n.iso2\" agtype);\n\nSELECT * FROM cypher('agload_test_graph', $$MATCH(n:Country {iso2 : 'AT'})\n    RETURN id(n), n.name, n.iso2 $$) as (\"id(n)\" agtype, \"n.name\" agtype, \"n.iso2\" agtype);\nSELECT * FROM cypher('agload_test_graph', $$MATCH(n:Country2 {iso2 : 'AT'})\n    RETURN id(n), n.name, n.iso2 $$) as (\"id(n)\" agtype, \"n.name\" agtype, \"n.iso2\" agtype);\n\nSELECT drop_graph('agload_test_graph', true);\n```\n\n----------------------------------------\n\nTITLE: Using sign() Function in Apache AGE Cypher Query\nDESCRIPTION: Demonstrates how to use the sign() function to determine the sign of different numeric values in a Cypher query.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_11\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN sign(-17), sign(0.1), sign(0)\n$$) as (negative_sign agtype, positive_sign agtype, zero_sign agtype);\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Function from Custom Namespace in AGE Cypher Query\nDESCRIPTION: Example showing how to call a PostgreSQL built-in function (sqrt) from the pg_catalog namespace within an AGE Cypher query. The query demonstrates the namespace.function_name syntax and returns the square root of 25.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/user_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\nRETURN pg_catalog.sqrt(25)\n$$) as (result agtype);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Apache AGE on CentOS\nDESCRIPTION: Command to install essential libraries for building Apache AGE from source on CentOS using yum package manager.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install gcc glibc glib-common readline readline-devel zlib zlib-devel flex bison\n```\n\n----------------------------------------\n\nTITLE: Using abs() Function in Apache AGE Cypher Query\nDESCRIPTION: Demonstrates how to use the abs() function to calculate the absolute difference between two age values from different nodes in a graph.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (a), (e) WHERE a.name = 'Alice' AND e.name = 'Eskil'\n    RETURN a.age, e.age, abs(a.age - e.age)\n$$) as (alice_age agtype, eskil_age agtype, difference agtype);\n```\n\n----------------------------------------\n\nTITLE: Return Types for sign() Function in Apache AGE\nDESCRIPTION: Describes the return type of the sign() function, which returns 0 if the input is 0, -1 for negative numbers, and 1 for positive numbers.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nAn integer.\n```\n\n----------------------------------------\n\nTITLE: Getting Start Node Query\nDESCRIPTION: Shows how to use startNode() function to get the starting vertex of an edge.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (x:Developer)-[r]-()\n    RETURN startNode(r)\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings using Apache AGE\nDESCRIPTION: This query demonstrates the use of the substring() function in Apache AGE to extract substrings from 'hello' with different start positions and lengths.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN substring('hello', 1, 3), substring('hello', 2)\n$$) as (sub_str1 agtype, sub_str2 agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Case-Insensitive Regular Expression in AGE\nDESCRIPTION: This query demonstrates case-insensitive string matching with regular expressions by adding the (?i) modifier at the beginning of the pattern.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name =~ '(?i)JoHn'\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Coalesce Function in Apache AGE Cypher (PostgreSQL)\nDESCRIPTION: This query demonstrates the coalesce() function in Apache AGE Cypher. It returns the first non-null value from a list of expressions, useful for handling null values in property access.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_15\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\nMATCH (a)\nWHERE a.name = 'Alice'\nRETURN coalesce(a.hairColor, a.eyes), a.hair_color, a.eyes\n$$) as (color agtype, hair_color agtype, eyes agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting End Node Query\nDESCRIPTION: Demonstrates using endNode() function to get the ending vertex of an edge.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_10\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (x:Developer)-[r]-()\n    RETURN endNode(r)\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Unique Results with DISTINCT in Apache AGE Cypher Queries\nDESCRIPTION: This query uses the DISTINCT keyword to ensure only unique nodes are returned. It matches all nodes that node 'A' points to and returns only unique target nodes, removing any duplicates that might occur from multiple relationships.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\nMATCH (a {name: 'A'})-[]->(b)\nRETURN DISTINCT b\n$$) as (b agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Vertex Statistics using vertex_stats()\nDESCRIPTION: Demonstrates how to use the vertex_stats() function to retrieve statistical information about a specific vertex in the graph, including its ID, label, and edge counts.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/map_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM cypher('vertex_stats_graph', $$\nMATCH (v:Poem {title: 'Holy Sonnet XIV'})\nRETURN vertex_stats(v)\n$$) AS (vertex_stats agtype);\n```\n\n----------------------------------------\n\nTITLE: Using an Expression with LIMIT in Apache AGE Cypher Query\nDESCRIPTION: This query shows how to use an expression with LIMIT to return a dynamic subset of rows. It uses a random number generator to determine the limit, returning between one to three top items.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/limit.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (n)\n\tRETURN n.name\n\tORDER BY n.name\n\tLIMIT toInteger(3 * rand()) + 1\n$$) as (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting List Last Element Query\nDESCRIPTION: Demonstrates using last() function to get the last element of a list.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\nMATCH (a)\nWHERE a.name = 'Eskil'\nRETURN a.array, last(a.array)\n$$) as (lst agtype, lst_tail agtype);\n```\n\n----------------------------------------\n\nTITLE: Using toBooleanList() Function to Convert Values to Boolean List\nDESCRIPTION: Demonstrates the toBooleanList() function which converts a list of values to a list of boolean values. This query converts string representations of boolean values to actual boolean values.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('expr', $$\n    RETURN toBooleanList([\"true\", \"false\", \"true\"])\n$$) AS (toBooleanList agtype);\n```\n\n----------------------------------------\n\nTITLE: Using labels() Function to Retrieve Vertex Labels\nDESCRIPTION: Demonstrates the labels() function which returns a list of all labels for a vertex. This query finds a vertex named 'Alice' and returns its labels as a list.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (a)\n\tWHERE a.name = 'Alice'\n\tRETURN labels(a)\n$$) as (edges agtype);\n```\n\n----------------------------------------\n\nTITLE: Loading Apache AGE Extension in PostgreSQL\nDESCRIPTION: SQL command to load the Apache AGE extension in a PostgreSQL session.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nLOAD 'age';\n```\n\n----------------------------------------\n\nTITLE: Getting List Head Element Query\nDESCRIPTION: Shows how to use head() function to get the first element of a list.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n   MATCH (a)\n   WHERE a.name = 'Eskil'\n   RETURN a.array, head(a.array)\n$$) as (lst agtype, lst_head agtype);\n```\n\n----------------------------------------\n\nTITLE: Valid Grouping Query with Explicit Keys\nDESCRIPTION: Demonstrates how to properly structure a query with explicit grouping keys.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (x:L)\n\tRETURN (x.a + x.b + x.c) + count(*) + count(*), x.a + x.b + x.c\n$$) as (count agtype, key agtype);\n```\n\n----------------------------------------\n\nTITLE: Reversing a String with reverse() Function in PostgreSQL\nDESCRIPTION: This snippet demonstrates the usage of the reverse() function in Apache AGE to reverse the characters in a string. It takes a string as input and returns the reversed string.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_10\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN reverse(\"hello\")\n$$) as (reverse_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Granting USAGE Privileges for Apache AGE\nDESCRIPTION: SQL command to grant USAGE privileges on the ag_catalog schema to a specific user, allowing non-superusers to use Apache AGE.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nGRANT USAGE ON SCHEMA ag_catalog TO db_user;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vertex/Edge ID Query\nDESCRIPTION: Demonstrates using the id() function to return the IDs of vertices in a graph.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (a)\n    RETURN id(a)\n$$) as (id agtype);\n```\n\n----------------------------------------\n\nTITLE: Vertex-Based Grouping Query\nDESCRIPTION: Demonstrates grouping by vertex objects while accessing their properties in calculations.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (x:L)\n\tRETURN count(*) + count(*) + x.a + x.b + x.c, x\n$$) as (count agtype, key agtype);\n```\n\n----------------------------------------\n\nTITLE: Trimming Both Sides Whitespace using Apache AGE\nDESCRIPTION: This query shows how to use the trim() function in Apache AGE to remove both leading and trailing whitespace from a string.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN trim(' hello ')\n$$) as (trimmed_str agtype);\n```\n\n----------------------------------------\n\nTITLE: List Creation and Access\nDESCRIPTION: Shows creation and manipulation of lists in Apache AGE, including basic list creation, element access, and handling null values.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    WITH [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as lst\n    RETURN lst\n$$) AS (lst agtype);\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    WITH [null] as lst\n    RETURN lst\n$$) AS (lst agtype);\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    WITH [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as lst\n    RETURN lst[3]\n$$) AS (element agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying with Aggregation Functions\nDESCRIPTION: Examples of using various aggregation functions including min(), max(), stDev(), stDevP(), percentileCont(), and percentileDisc().\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (v:Person)\n    RETURN min(v.age)\n$$) as (min_age agtype);\n\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n:Person)\n    RETURN max(n.age)\n$$) as (max_age agtype);\n\nSELECT *\nFROM cypher('graph_name', $$\n   MATCH (n:Person)\n   RETURN stDev(n.age)\n$$) as (stdev_age agtype);\n\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n:Person)\n    RETURN stDevP(n.age)\n$$) as (stdevp_age agtype);\n\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n:Person)\n    RETURN percentileCont(n.age, 0.4)\n$$) as (percentile_cont_age agtype);\n\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n:Person)\n    RETURN percentileDisc(n.age, 0.5)\n$$) as (percentile_disc_age agtype);\n```\n\n----------------------------------------\n\nTITLE: Hidden Grouping Keys Query\nDESCRIPTION: Shows how to hide grouping keys using WITH clause while maintaining the aggregation logic.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (x:L)\n\tWITH count(*) + count(*) + x.a + x.b + x.c as column, x\n\tRETURN column\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting List Size Query\nDESCRIPTION: Demonstrates using size() function to get the length of a list.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN size(['Alice', 'Bob'])\n$$) as (size_of_list agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Timestamp in Apache AGE Cypher (PostgreSQL)\nDESCRIPTION: This query demonstrates the use of the timestamp() function in Apache AGE Cypher. It returns the current timestamp as milliseconds since the Unix epoch.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_11\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN timestamp()\n$$) as (t agtype);\n```\n\n----------------------------------------\n\nTITLE: Sorting Results Based on Aggregation\nDESCRIPTION: Shows how to sort results based on aggregated values using ORDER BY clause.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (me:Person)-[]->(friend:Person)\n\tRETURN count(friend), me\n\tORDER BY count(friend)\n$$) as (friends agtype, me agtype);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating min() Function with Lists\nDESCRIPTION: Creates test data and demonstrates the min() function's behavior with different data types including lists and strings.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$ \n    CREATE (:min_test {val:'d'})\n$$) as (result agtype);\n\nSELECT * FROM cypher('graph_name', $$\n    CREATE (:min_test {val:['a', 'b', 23]})\n$$) as (result agtype);\n\nSELECT * FROM cypher('graph_name', $$ \n    CREATE (:min_test {val:[1, 'b', 23]})\n$$) as (result agtype);\n```\n\n----------------------------------------\n\nTITLE: Basic Count Query with Node Properties\nDESCRIPTION: Demonstrates using count(*) to return the age property and number of connected nodes for a specific node named 'A'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n {name: 'A'})-[]->(x)\n    RETURN n.age, count(*)\n$$) as (age agtype, number_of_people agtype);\n```\n\n----------------------------------------\n\nTITLE: Setting Property with Return in Apache AGE\nDESCRIPTION: Sets a surname property on a vertex and returns the modified vertex. This query demonstrates property setting with result return, showing the complete vertex structure after modification.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/set.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    MATCH (v {name: 'Andres'})\n    SET v.surname = 'Taylor'\n    RETURN v\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Graph Data Structure in PostgreSQL\nDESCRIPTION: Sets up a sample graph with Person nodes and KNOWS relationships, including various properties like name, age, and eye color.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tCREATE (a:Person {name: 'A', age: 13}),\n\t(b:Person {name: 'B', age: 33, eyes: \"blue\"}),\n\t(c:Person {name: 'C', age: 44, eyes: \"blue\"}),\n\t(d1:Person {name: 'D', eyes: \"brown\"}),\n\t(d2:Person {name: 'D'}),\n\t(a)-[:KNOWS]->(b),\n\t(a)-[:KNOWS]->(c),\n\t(a)-[:KNOWS]->(d1),\n\t(b)-[:KNOWS]->(d2),\n\t(c)-[:KNOWS]->(d2)\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Variable Length Paths in PostgreSQL using Cypher\nDESCRIPTION: This query demonstrates how to use variable length edge patterns to find paths of a specific length between actors.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n    MATCH p = (actor {name: 'Willam Dafoe'})-[:ACTED_IN*2]-(co_actor)\n    RETURN relationships(p)\n$$) as (r agtype);\n```\n\n----------------------------------------\n\nTITLE: Developer Note on Function Implementation\nDESCRIPTION: This note provides a best practice recommendation for users to include the LOAD command and set the search_path within function declarations to ensure consistent behavior when creating functions.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/plpgsql.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDeveloper's Note:\n\nIt's recommended that users use the LOAD 'age' command and set the search_path in the function declaration, to ensure the CREATE FUNCTION command works consistently.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Apache AGE on Fedora\nDESCRIPTION: Command to install essential libraries for building Apache AGE from source on Fedora using dnf package manager.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndnf install gcc glibc bison flex readline readline-devel zlib zlib-devel\n```\n\n----------------------------------------\n\nTITLE: Edge Data Format Example\nDESCRIPTION: Example showing the data format for an edge entity in Apache AGE with id, startid, endid, label and properties.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{id: 3; startid: 1; endid: 2; label: 'edge_label' properties{prop1: value1, prop2: value2}}::edge\n```\n\n----------------------------------------\n\nTITLE: Using Cypher with the EXISTS clause in PostgreSQL\nDESCRIPTION: This snippet shows how to use a Cypher query with PostgreSQL's EXISTS operator. This is appropriate when the Cypher query may return multiple columns and rows that need to be compared with SQL data.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/advanced.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT t.name, t.age\nFROM schema_name.sql_person as t\nWHERE EXISTS (\n    SELECT *\n    FROM cypher('graph_name', $$\n\t  MATCH (v:Person)\n        RETURN v.name, v.age\n    $$) as (name agtype, age agtype)\n    WHERE name = t.name AND age = t.age\n);\n```\n\n----------------------------------------\n\nTITLE: Edge Type Casting Query\nDESCRIPTION: PostgreSQL query demonstrating how to type cast a map to an edge using the cypher function.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_12\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tWITH {id: 2, start_id: 0, end_id: 1, label: \"label_name\", properties: {i: 0}}::edge as e\n\tRETURN e\n$$) AS (e agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Non-Superuser Access to Apache AGE\nDESCRIPTION: Bash command to create a symlink allowing non-superusers to load the Apache AGE library. Replace the path with the appropriate PostgreSQL library directory.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /usr/lib/postgresql/15/lib/age.so /usr/lib/postgresql/15/lib/plugins/age.so\n```\n\n----------------------------------------\n\nTITLE: Getting Path Length Query\nDESCRIPTION: Shows how to use length() function to get the length of a path.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n   MATCH p = (a)-[]->(b)-[]->(c)\n   WHERE a.name = 'Alice'\n   RETURN length(p)\n$$) as (length_of_path agtype);\n```\n\n----------------------------------------\n\nTITLE: Merging a Node with Properties\nDESCRIPTION: Shows how to merge a node with specified properties. If a node with all specified properties exists, it will be returned. Otherwise, a new node with those properties will be created.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/merge.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMERGE (charlie {name: 'Charlie Sheen', age: 10})\nRETURN charlie\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Converting Radians to Degrees Query\nDESCRIPTION: Example of using degrees() function to convert radians to degrees. Takes an agtype number expression representing angle in radians and returns the angle in degrees as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN degrees(3.14159)\n$$) as (deg agtype);\n```\n\n----------------------------------------\n\nTITLE: Trimming Right Whitespace using Apache AGE\nDESCRIPTION: This query shows how to use the rTrim() function in Apache AGE to remove trailing whitespace from a string.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/string_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN rTrim(' hello ')\n$$) as (right_trimmed_str agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Combined Wildcards in Regular Expressions in AGE\nDESCRIPTION: This query demonstrates using the .* pattern in regular expressions, which matches any sequence of characters, finding all Person nodes with names starting with 'J'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name =~ 'J.*'\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Vertex in Apache AGE\nDESCRIPTION: Query that creates a single unlabeled vertex in the graph. The query doesn't return any data as it's a terminal CREATE operation.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/create.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n    CREATE (n)\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Tangent Query\nDESCRIPTION: Example of using tan() function to calculate tangent of a number. Takes an agtype number expression in radians and returns the tangent value as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN tan(0.5)\n$$) as (t agtype);\n```\n\n----------------------------------------\n\nTITLE: Count Expression for Connected Nodes\nDESCRIPTION: Uses count(expression) to return the number of nodes connected to a specific start node.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n {name: 'A'})-[]->(x)\n    RETURN count(x)\n$$) as (count agtype);\n```\n\n----------------------------------------\n\nTITLE: Setting Search Path for Apache AGE\nDESCRIPTION: SQL command to add ag_catalog to the search_path to simplify queries in Apache AGE.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSET search_path = ag_catalog, \"$user\", public;\n```\n\n----------------------------------------\n\nTITLE: Using nodes() Function to Extract Vertices from a Path\nDESCRIPTION: Demonstrates the nodes() function which returns a list of all vertices in a path. This query finds a path from 'Alice' to 'Eskil' and returns all vertices in the path.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH p = (a)-[]->(b)-[]->(c)\n\tWHERE a.name = 'Alice' AND c.name = 'Eskil'\n\tRETURN nodes(a)\n$$) as (vertices agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent Query\nDESCRIPTION: Example of using atan() function to calculate arctangent of a number. Takes an agtype number expression and returns the arctangent value in radians as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_9\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN atan(0.5)\n$$) as (arc_t agtype);\n```\n\n----------------------------------------\n\nTITLE: Counting Relationship Types\nDESCRIPTION: Shows how to group and count relationship types using count(*) for relationships from a specific node.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/aggregate_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n {name: 'A'})-[r]->()\n    RETURN type(r), count(*)\n$$) as (label agtype, count agtype);\n```\n\n----------------------------------------\n\nTITLE: Using range() Function to Generate Number Sequences\nDESCRIPTION: Demonstrates the range() function which generates lists of sequential integers. The query shows both a simple range (0 to 10) and a range with a step parameter (2 to 18 with step 3).\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tRETURN range(0, 10), range(2, 18, 3)\n$$) as (no_step agtype, step agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting Edge End ID Query\nDESCRIPTION: Demonstrates using end_id() function to get the ID of the ending vertex of an edge.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH ()-[e]->()\n    RETURN end_id(e)\n$$) as (end_id agtype);\n```\n\n----------------------------------------\n\nTITLE: Using keys() Function to Retrieve Property Names\nDESCRIPTION: Demonstrates the keys() function which returns a list of all property names for a vertex. This query finds a vertex named 'Alice' and returns all its property names as a list.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * from cypher('graph_name', $$\n\tMATCH (a)\n\tWHERE a.name = 'Alice'\n\tRETURN keys(a)\n$$) as (result agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Arctangent2 Query\nDESCRIPTION: Example of using atan2() function to calculate arctangent2 of coordinates. Takes two agtype number expressions (y,x) and returns the arctangent2 value in radians as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_10\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN atan2(0.5, 0.6)\n$$) as (arc_t2 agtype);\n```\n\n----------------------------------------\n\nTITLE: Map Creation and Access\nDESCRIPTION: Shows how to create and access map structures with various data types including nested maps and lists.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    WITH {int_key: 1, float_key: 1.0, numeric_key: 1::numeric, bool_key: true, string_key: 'Value'} as m\n    RETURN m\n$$) AS (m agtype);\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    WITH {listKey: [{inner: 'Map1'}, {inner: 'Map2'}], mapKey: {i: 0}} as m\n    RETURN m\n$$) AS (m agtype);\n```\n\n----------------------------------------\n\nTITLE: Getting Edge Start ID Query\nDESCRIPTION: Shows how to use start_id() function to get the ID of the starting vertex of an edge.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/scalar_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH ()-[e]->()\n    RETURN start_id(e)\n$$) as (start_id agtype);\n```\n\n----------------------------------------\n\nTITLE: Setting up Graph Data with Cypher in PostgreSQL\nDESCRIPTION: Creates a sample graph with Person vertices and KNOWS relationships. The graph includes five people with various properties and relationships between them for testing list functions.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/list_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * from cypher('graph_name', $$\nCREATE (A:Person {name: 'Alice', age: 38, eyes: 'brown'}),\n\t(B:Person {name: 'Bob', age: 25, eyes: 'blue'}),\n\t(C:Person {name: 'Charlie', age: 53, eyes: 'green'}),\n\t(D:Person {name: 'Daniel', age: 54, eyes: 'brown'}),\n\t(E:Person {name: 'Eskil', age: 41, eyes: 'blue', array: ['one', 'two', 'three']}),\n\t(A)-[:KNOWS]->(B),\n\t(A)-[:KNOWS]->(C),\n\t(B)-[:KNOWS]->(D),\n\t(C)-[:KNOWS]->(D),\n\t(B)-[:KNOWS]->(E)\n$$) as (result agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Float Value Using Cypher in PostgreSQL\nDESCRIPTION: Query illustrating how to return a floating-point value (1.0) using Cypher in PostgreSQL. The result will display the floating-point value in the output.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN 1.0\n$$) AS (float_result agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Integer Value Using Cypher in PostgreSQL\nDESCRIPTION: Query showing how to return an integer value (1) using Cypher in PostgreSQL. The result will show the integer value in the output.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN 1\n$$) AS (int_result agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Cypher with equality comparison in PostgreSQL\nDESCRIPTION: This snippet shows how to use a Cypher query in a subquery with an equality comparison. It's suitable when the Cypher query returns a single row and column for comparison with SQL data.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/advanced.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT t.name FROM schema_name.sql_person AS t\nwhere t.name = (\n    SELECT a\n    FROM cypher('graph_name', $$\n    \t  MATCH (v)\n        RETURN v.name\n    $$) as (name varchar(50))\n    ORDER BY name\n    LIMIT 1);\n```\n\n----------------------------------------\n\nTITLE: Setting up Graph and Vertices for vertex_stats() Demo\nDESCRIPTION: Creates a new graph named 'vertex_stats_graph' and initializes it with a simple relationship between a Person and a Poem using Cypher query language.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/map_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Creating the graph.\nSELECT create_graph('vertex_stats_graph');\n\n-- Creating vertices and edges.\nSELECT * FROM cypher('vertex_stats_graph', $$\nCREATE (:Person {name: 'John Donne'})-[:WROTE]->(:Poem {title: 'Holy Sonnet XIV'})\n$$) AS (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Numeric Value Using Cypher in PostgreSQL\nDESCRIPTION: Query demonstrating how to return a numeric value (1.0) with explicit type casting using Cypher in PostgreSQL. The result will show the value with the ::numeric annotation.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN 1.0::numeric\n$$) AS (numeric_result agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Dot Wildcard in Regular Expressions in AGE\nDESCRIPTION: This query demonstrates using the . wildcard in regular expressions, which matches any single character in that position.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name =~ 'Jo.n'\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Asterisk Wildcard in Regular Expressions in AGE\nDESCRIPTION: This query demonstrates using the * wildcard in regular expressions, which matches zero or more occurrences of the preceding character.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name =~ 'Johz*n'\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Database Graph with Cypher in Apache AGE\nDESCRIPTION: This snippet sets up an initial graph database in the 'imdb' graph, creating actors, movies, and relationships between them. It establishes a movie graph with actors like Toby Maguire and Tom Holland, connected to movies via 'acted_in' relationships with role properties.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/plpgsql.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('imdb', $$\n\tCREATE (toby:actor {name: 'Toby Maguire'}),\n\t\t(tom:actor {name: 'Tom Holland'}),\n\t\t(willam:actor {name: 'Willam Dafoe'}),\n\t\t(robert:actor {name: 'Robert Downey Jr'}),\n\t\t(spiderman:movie {title: 'Spiderman'}),\n\t\t(no_way_home:movie {title: 'Spiderman: No Way Home'}),\n\t\t(homecoming:movie {title: 'Spiderman: Homecoming'}),\n\t\t(ironman:movie {title: 'Ironman'}),\n\t\t(tropic_thunder:movie {title: 'Tropic Thunder'}),\n\t\t(toby)-[:acted_in {role: 'Peter Parker', alter_ego: 'Spiderman'}]->(spiderman),\n\t\t(willam)-[:acted_in {role: 'Norman Osborn', alter_ego: 'Green Goblin'}]->(spiderman),\n\t\t(toby)-[:acted_in {role: 'Toby Maguire'}]->(tropic_thunder),\n\t\t(robert)-[:acted_in {role: 'Kirk Lazarus'}]->(tropic_thunder),\n\t\t(robert)-[:acted_in {role: 'Tony Stark', alter_ego: 'Ironman'}]->(homecoming),\n\t\t(tom)-[:acted_in {role: 'Peter Parker', alter_ego: 'Spiderman'}]->(homecoming),\n\t\t(tom)-[:acted_in {role: 'Peter Parker', alter_ego: 'Spiderman'}]->(no_way_home),\n\t\t(toby)-[:acted_in {role: 'Peter Parker', alter_ego: 'Spiderman'}]->(no_way_home),\n\t\t(willam)-[:acted_in {role: 'Norman Osborn', alter_ego: 'Green Goblin'}]->(no_way_home)\n$$) AS (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Skipping First Three Rows in Cypher Query (PostgreSQL)\nDESCRIPTION: This snippet demonstrates how to use the SKIP clause to omit the first three rows from the query results. It matches all nodes, returns their names ordered alphabetically, and skips the first 3 entries.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/skip.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (n)\n\tRETURN n.name\n\tORDER BY n.name\n\tSKIP 3\n$$) as (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Plus Operator in Regular Expressions in AGE\nDESCRIPTION: This query demonstrates using the + operator in regular expressions, which matches one or more occurrences of the preceding character.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name =~ 'Bil+'\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Vertex Type Casting Query\nDESCRIPTION: PostgreSQL query demonstrating how to type cast a map to a vertex using the cypher function.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_10\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tWITH {id: 0, label: \"label_name\", properties: {i: 0}}::vertex as v\n\tRETURN v\n$$) AS (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Actors by Role with Dynamic Cypher Function\nDESCRIPTION: This SQL statement executes the get_actors_who_played_role function with the parameter 'Peter Parker' to find all actors who played this role and the movies they appeared in.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/plpgsql.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM get_actors_who_played_role('\"Peter Parker\"');\n```\n\n----------------------------------------\n\nTITLE: Using ENDS WITH Operator for Suffix Searching in AGE\nDESCRIPTION: This query demonstrates the ENDS WITH operator which performs case-sensitive suffix searching on strings, finding all Person nodes with names that end with the letter 'n'.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (v:Person)\n\tWHERE v.name ENDS WITH \"n\"\n\tRETURN v.name\n$$) AS (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Using floor() Function in Apache AGE Cypher Query\nDESCRIPTION: Demonstrates how to use the floor() function to round down a decimal number to the nearest integer in a Cypher query.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN floor(0.1)\n$$) as (flr agtype);\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Properties in Apache AGE Cypher Queries\nDESCRIPTION: This query demonstrates how Apache AGE handles properties that may not exist on all nodes. It matches all nodes and returns the 'age' property, which will be NULL for nodes that don't have this property defined.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n)\n    RETURN n.age\n$$) as (age agtype);\n```\n\n----------------------------------------\n\nTITLE: Querying Actor Names with PL/pgSQL Function\nDESCRIPTION: This SQL statement executes the previously defined get_all_actor_names function to retrieve all actor names from the graph database.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/advanced/plpgsql.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM get_all_actor_names();\n```\n\n----------------------------------------\n\nTITLE: Invalid Cypher Query in SELECT Clause\nDESCRIPTION: Demonstrates an invalid usage of the cypher() function as an independent column in a SELECT clause, which is not allowed in Apache AGE.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/cypher.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT \n    cypher('graph_name', $$\n         MATCH (v:Person)\n         RETURN v.name\n     $$);\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data for String Operators in AGE\nDESCRIPTION: This snippet creates four Person nodes with different name properties to demonstrate string operators in the following examples.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/operators.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nCREATE (:Person {name: 'John'}),\n       (:Person {name: 'Jeff'}),\n       (:Person {name: 'Joan'}),\n       (:Person {name: 'Bill'})\n$$) AS (result agtype);\n```\n\n----------------------------------------\n\nTITLE: Path Comparison Example in Cypher\nDESCRIPTION: Example demonstrating path comparison logic between two paths p1 and p2, showing how paths are compared by evaluating their constituent nodes and relationships in sequence.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/comparability.md#2025-04-21_snippet_0\n\nLANGUAGE: cypher\nCODE:\n```\np1 < p2\n<=> [n1, r1, n3] < [n1, r2, n2]\n<=> n1 < n1 || (n1 = n1 && [r1, n3] < [r2, n2])\n<=> false || (true && [r1, n3] < [r2, n2])<=> [r1, n3] < [r2, n2]\n<=> r1 < r2 || (r1 = r2 && n3 < n2)\n<=> true || (false && false)\n<=> true\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Apache AGE from Source\nDESCRIPTION: Command to build and install Apache AGE extension from source code. Use the PG_CONFIG argument if the PostgreSQL installation path is not in the PATH variable.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake PG_CONFIG=/path/to/postgres/bin/pg_config install\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with Toctree Directives\nDESCRIPTION: RST markup that defines the documentation navigation structure using Sphinx toctree directives. Organizes documentation into logical sections with maxdepth=1 for flat hierarchies and custom captions for each section.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :caption: Introduction\n   :maxdepth: 1\n\n   intro/overview\n   intro/setup\n   intro/graphs\n   intro/cypher\n   intro/types\n   intro/comparability\n   intro/operators\n   intro/aggregation\n   intro/agload\n\n.. toctree::\n   :caption: Clauses\n   :maxdepth: 1\n\n   clauses/match\n   clauses/with\n   clauses/return\n   clauses/order_by\n   clauses/skip\n   clauses/limit\n   clauses/create\n   clauses/delete\n   clauses/set\n   clauses/remove\n   clauses/merge\n\n.. toctree::\n   :caption: Functions\n   :maxdepth: 1\n\n   functions/predicate_functions\n   functions/scalar_functions\n   functions/list_functions\n   functions/numeric_functions\n   functions/logarithmic_functions\n   functions/trigonometric_functions\n   functions/string_functions\n   functions/aggregate_functions\n   functions/user_functions\n\n.. toctree::\n   :caption: AGE Beyond Cypher\n   :maxdepth: 1\n\n   advanced/advanced_overview\n   advanced/advanced\n   advanced/prepared_statements\n   advanced/plpgsql\n   advanced/sql_in_cypher\n\n.. toctree::\n   :caption: Contributing\n   :maxdepth: 1\n\n   contributing/run_tests\n```\n\n----------------------------------------\n\nTITLE: Returning Boolean Value Using Cypher in PostgreSQL\nDESCRIPTION: Query showing how to return a boolean TRUE value using Cypher in PostgreSQL. Unlike standard PostgreSQL which outputs 't', AGE displays the full word 'true' in the result.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN TRUE\n$$) AS (boolean_result agtype);\n```\n\n----------------------------------------\n\nTITLE: Computing Square Root in Apache AGE\nDESCRIPTION: Calculates the square root of a given number, returning the result as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/logarithmic_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN sqrt(144)\n$$) as (results agtype);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MacOS\nDESCRIPTION: Commands to install required dependencies on MacOS using Homebrew. This includes Python3, virtualenv, and texlive for LaTeX support.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install python3 virtualenv texlive\n```\n\n----------------------------------------\n\nTITLE: Returning Node Properties in Apache AGE Cypher Queries\nDESCRIPTION: This query matches a node with the name 'A' and returns just the name property using dot notation. The result contains only the property value rather than the entire node object.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (n {name: 'A'})\n    RETURN n.name\n$$) as (name agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Cosine Query\nDESCRIPTION: Example of using cos() function to calculate cosine of a number. Takes an agtype expression in radians and returns the cosine value as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN cos(0.5)\n$$) as (c agtype);\n```\n\n----------------------------------------\n\nTITLE: Computing Natural Exponential in Apache AGE\nDESCRIPTION: Calculates e raised to the power of the given number, returning the result as an agtype float. Returns null for null input.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/logarithmic_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN exp(2)\n$$) as (e agtype);\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment\nDESCRIPTION: Command to activate the Python virtual environment for the current shell session.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Querying Outgoing Edges in PostgreSQL using Cypher\nDESCRIPTION: This query shows how to find vertices connected by outgoing edges from a specific vertex using the '->' syntax.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/match.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nMATCH (:Person {name: 'Oliver Stone'})-[]->(movie)\nRETURN movie.title\n$$) as (title agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Arccosine Query\nDESCRIPTION: Example of using acos() function to calculate arccosine of a number. Takes an agtype number expression and returns the arccosine value in radians as an agtype float. Only works for input values between -1 and 1.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_8\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN acos(0.5)\n$$) as (arc_c agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Cotangent Query\nDESCRIPTION: Example of using cot() function to calculate cotangent of a number. Takes an agtype number expression in radians and returns the cotangent value as a float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN cot(0.5)\n$$) as (t agtype);\n```\n\n----------------------------------------\n\nTITLE: Calculating Arcsine Query\nDESCRIPTION: Example of using asin() function to calculate arcsine of a number. Takes an agtype number expression and returns the arcsine value in radians as an agtype float. Only works for input values between -1 and 1.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_7\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN asin(0.5)\n$$) as (arc_s agtype);\n```\n\n----------------------------------------\n\nTITLE: Setting Single Property in Apache AGE\nDESCRIPTION: Example of setting a single surname property on a vertex matching name 'Andres'. This query demonstrates basic property setting but returns no results due to being a terminal SET clause.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/set.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * \nFROM cypher('graph_name', $$\n   MATCH (v {name: 'Andres'})\n   SET v.surname = 'Taylor'\n$$) as (v agtype);\n```\n\n----------------------------------------\n\nTITLE: Path Type Casting Query\nDESCRIPTION: PostgreSQL query showing how to type cast a list of vertices and edges to create a path.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_13\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tWITH [{id: 0, label: \"label_name_1\", properties: {i: 0}}::vertex,\n            {id: 2, start_id: 0, end_id: 1, label: \"edge_label\", properties: {i: 0}}::edge,\n           {id: 1, label: \"label_name_2\", properties: {}}::vertex\n           ]::path as p\n\tRETURN p\n$$) AS (p agtype);\n```\n\n----------------------------------------\n\nTITLE: String Handling in Apache AGE\nDESCRIPTION: Demonstrates basic string handling in Apache AGE Cypher queries, showing how single quotes are used for input and double quotes for output.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN 'This is a string'\n$$) AS (string_result agtype);\n```\n\n----------------------------------------\n\nTITLE: Return Types for ceil() Function in Apache AGE\nDESCRIPTION: Describes the return type of the ceil() function, which returns the smallest floating point number greater than or equal to the input and equal to a mathematical integer.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nA float.\n```\n\n----------------------------------------\n\nTITLE: Calculating Sine Query\nDESCRIPTION: Example of using sin() function to calculate sine of a number. Takes an agtype number expression in radians and returns the sine value as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_3\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN sin(0.5)\n$$) as (s agtype);\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: A comprehensive list of Python packages and their exact versions needed for the Apache AGE website project. Includes documentation generators, parsers, and utility packages. Each package is pinned to a specific version for reproducibility.\nSOURCE: https://github.com/apache/age-website/blob/master/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nalabaster==0.7.12\nBabel==2.10.3\ncertifi==2023.7.22\ncharset-normalizer==2.1.1\nclick==8.1.3\ncolorama==0.4.5\ncommonmark==0.9.1\ndocutils==0.17.1\nidna==3.7\nimagesize==1.4.1\nJinja2==3.1.3\nmarkdown-it-py==2.2.0\nMarkupSafe==2.1.1\nmdit-py-plugins==0.3.1\nmdurl==0.1.2\nmyst-parser==0.18.1\npackaging==21.3\npydantic==1.10.13\nPygments==2.15.0\npyparsing==3.0.9\npytz==2022.4\nPyYAML==6.0\nrequests==2.32.0\nrich==12.6.0\nrstcheck==6.1.0\nrstcheck-core==1.0.2\nshellingham==1.5.0\nsnowballstemmer==2.2.0\nSphinx==5.2.3\nsphinx-multiversion==0.2.4\nsphinx-rtd-theme==1.0.0\nsphinxcontrib-applehelp==1.0.2\nsphinxcontrib-devhelp==1.0.2\nsphinxcontrib-htmlhelp==2.0.0\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-qthelp==1.0.3\nsphinxcontrib-serializinghtml==1.1.5\ntyper==0.6.1\ntypes-docutils==0.18.3\ntyping_extensions==4.3.0\nurllib3==1.26.18\n```\n\n----------------------------------------\n\nTITLE: Returning NULL Value Using Cypher in PostgreSQL\nDESCRIPTION: Query demonstrating how to return a NULL value using Cypher in PostgreSQL. The result will appear as an empty space in the output.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/types.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN NULL\n$$) AS (null_result agtype);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Apache AGE on Ubuntu\nDESCRIPTION: Command to install essential libraries for building Apache AGE from source on Ubuntu using apt package manager.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/setup.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential libreadline-dev zlib1g-dev flex bison\n```\n\n----------------------------------------\n\nTITLE: Getting Pi Constant Query\nDESCRIPTION: Example of using pi() function to get the mathematical constant pi. Returns pi as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN pi()\n$$) as (p agtype);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ubuntu\nDESCRIPTION: Commands to install required dependencies on Ubuntu using apt. This includes Python3, virtualenv, and various LaTeX packages for documentation generation.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install python3 virtualenv texlive-latex-base texlive-latex-extra texlive-extra-utils\n```\n\n----------------------------------------\n\nTITLE: Return Types for abs() Function in Apache AGE\nDESCRIPTION: Describes the return type of the abs() function, which returns the absolute value of a given number. The return type matches the input type.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nThe type of the value returned will be that of expression.\n```\n\n----------------------------------------\n\nTITLE: Return Types for rand() Function in Apache AGE\nDESCRIPTION: Describes the return type of the rand() function, which generates a random floating point number between 0 (inclusive) and 1 (exclusive).\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA float.\n```\n\n----------------------------------------\n\nTITLE: Converting Degrees to Radians Query\nDESCRIPTION: Example of using radians() function to convert degrees to radians. Takes an agtype number expression representing angle in degrees and returns the angle in radians as an agtype float.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/trigonometric_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN radians(180)\n$$) as (rad agtype);\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements\nDESCRIPTION: Command to install Python package dependencies listed in the requirements.txt file.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Return Types for round() Function in Apache AGE\nDESCRIPTION: Describes the return type of the round() function, which returns the value of a number rounded to the nearest integer.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nA float.\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Current Branch\nDESCRIPTION: Command to build documentation for the current local branch using sphinx-build. The output will be in the build/html/current folder.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsphinx-build docs build/html/current\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Remote Branches\nDESCRIPTION: Command to build documentation for all remote branches using sphinx-multiversion. The output will be in the build/html folder with subfolders for each version.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsphinx-multiversion docs build/html\n```\n\n----------------------------------------\n\nTITLE: Setup Data for Ambiguous Grouping Examples\nDESCRIPTION: Creates test data to demonstrate ambiguous grouping scenarios with labeled nodes having multiple properties.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\nCREATE (:L {a: 1, b: 2, c: 3}),\n       (:L {a: 2, b: 3, c: 1}),\n       (:L {a: 3, b: 1, c: 2})\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Invalid Ambiguous Grouping Query\nDESCRIPTION: Shows an example of an invalid query that combines aggregate functions with ungrouped variables.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/aggregation.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT * FROM cypher('graph_name', $$\n\tMATCH (x:L)\n\tRETURN x.a + count(*) + x.b + count(*) + x.c\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Returning Middle Two Rows in Cypher Query (PostgreSQL)\nDESCRIPTION: This example shows how to use SKIP in combination with LIMIT to return a subset of rows from the middle of the result set. It skips the first row and then limits the output to 2 rows.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/skip.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (n)\n\tRETURN n.name\n\tORDER BY n.name\n\tSKIP 1\n\tLIMIT 2\n$$) as (names agtype);\n```\n\n----------------------------------------\n\nTITLE: Error Message for Invalid Cypher Expression\nDESCRIPTION: Shows the error message returned when attempting to use cypher() as part of an expression, with a hint suggesting to use a subquery instead.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/intro/cypher.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nERROR:  cypher(...) in expressions is not supported\nLINE 3: \tcypher('graph_name', $$\n        \t^\nHINT:  Use subquery instead if possible.\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment\nDESCRIPTION: Command to create a Python virtual environment for isolated dependency management.\nSOURCE: https://github.com/apache/age-website/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvirtualenv -p python3 venv\n```\n\n----------------------------------------\n\nTITLE: Invalid Locale Error Message\nDESCRIPTION: Error message displayed when locale settings are incorrect during database initialization.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/contributing/run_tests.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ninitdb: invalid locale settings; check LANG and LC_* environment variables\n```\n\n----------------------------------------\n\nTITLE: Invalid Permissions Error Message\nDESCRIPTION: Error message shown when the data directory has incorrect permissions, requiring 0700 or 0750 permissions.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/contributing/run_tests.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nFATAL:  data directory \"/clone_path/./regress/instance/data\" has invalid permissions\nDETAIL:  Permissions should be u=rwx (0700) or u=rwx,g=rx (0750).\n```\n\n----------------------------------------\n\nTITLE: Using Variables with Special Characters in Apache AGE Cypher Queries\nDESCRIPTION: This query demonstrates how to use backticks to define variables with spaces or special characters. It matches a node with name 'A' and returns its 'happy' property using a non-standard variable name.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/return.md#2025-04-21_snippet_4\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    MATCH (`This isn\\'t a common variable`)\n    WHERE `This isn\\'t a common variable`.name = 'A'\n    RETURN `This isn\\'t a common variable`.happy\n$$) as (happy agtype);\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Apache AGE Website\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Apache AGE website project. It includes myst-parser for Markdown support, rstcheck for reStructuredText validation, Sphinx for documentation generation, sphinx-multiversion for versioning, and sphinx-rtd-theme for the Read the Docs theme.\nSOURCE: https://github.com/apache/age-website/blob/master/requirements_min.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmyst-parser==0.18.1\nrstcheck==6.1.0\nSphinx==5.2.3\nsphinx-multiversion==0.2.4\nsphinx-rtd-theme==1.0.0\n```\n\n----------------------------------------\n\nTITLE: Return Types for floor() Function in Apache AGE\nDESCRIPTION: Describes the return type of the floor() function, which returns the greatest floating point number less than or equal to the input and equal to a mathematical integer.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nA float.\n```\n\n----------------------------------------\n\nTITLE: Using ceil() Function in Apache AGE Cypher Query\nDESCRIPTION: Demonstrates how to use the ceil() function to round up a decimal number to the nearest integer in a Cypher query.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_5\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN ceil(0.1)\n$$) as (ceil_value agtype);\n```\n\n----------------------------------------\n\nTITLE: Using rand() Function in Apache AGE Cypher Query\nDESCRIPTION: Demonstrates how to use the rand() function in an Apache AGE Cypher query to generate a random floating point number.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/numeric_functions.md#2025-04-21_snippet_1\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN rand()\n$$) as (random_number agtype);\n```\n\n----------------------------------------\n\nTITLE: Using Expression with SKIP in Cypher Query (PostgreSQL)\nDESCRIPTION: This snippet demonstrates using an expression with SKIP to dynamically determine the number of rows to skip. It uses a combination of multiplication and the random function to skip a variable number of rows.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/clauses/skip.md#2025-04-21_snippet_2\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n\tMATCH (n)\n\tRETURN n.name\n\tORDER BY n.name\n\tSKIP (3 * rand())+ 1\n$$) as (a agtype);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Natural Base e in Apache AGE\nDESCRIPTION: Returns the mathematical constant e (base of natural logarithm) as an agtype float value.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/functions/logarithmic_functions.md#2025-04-21_snippet_0\n\nLANGUAGE: postgresql\nCODE:\n```\nSELECT *\nFROM cypher('graph_name', $$\n    RETURN e()\n$$) as (e agtype);\n```\n\n----------------------------------------\n\nTITLE: Running Apache AGE Test Suite Commands\nDESCRIPTION: Basic commands to compile, install and run tests for Apache AGE using make commands. Uses parallel processing with nproc for compilation.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/contributing/run_tests.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmake -j$(nproc)\nsudo make install\nmake installcheck\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Environment Variables\nDESCRIPTION: Commands to set locale environment variables to en_US.UTF-8 and reconfigure system locales on Debian-based systems.\nSOURCE: https://github.com/apache/age-website/blob/master/docs/contributing/run_tests.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport LANGUAGE=en_US.UTF-8\nexport LANG=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nlocale-gen en_US.UTF-8\ndpkg-reconfigure locales\n```"
  }
]