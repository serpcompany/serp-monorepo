[
  {
    "owner": "lodash",
    "repo": "lodash",
    "content": "TITLE: Deep Cloning in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.cloneDeep to create a deep copy of an object or array. All nested objects and arrays are also cloned, creating a completely independent copy.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using reduce Method in Lodash for Collection Aggregation in JavaScript\nDESCRIPTION: Demonstrates the reduce method that accumulates values by running each element in a collection through an iteratee function. Examples include calculating a sum and grouping object values by keys.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\n_.reduce([1, 2], function(sum, n) {\n  return sum + n;\n}, 0);\n// => 3\n\n_.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n  return result;\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Object Property Values with Lodash get Method in JavaScript\nDESCRIPTION: The _.get method gets the value at a specified path of an object. If the resolved value is undefined, it returns the default value provided.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_210\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.get(object, 'a[0].b.c');\n// => 3\n\n_.get(object, ['a', '0', 'b', 'c']);\n// => 3\n\n_.get(object, 'a.b.c', 'default');\n// => 'default'\n```\n\n----------------------------------------\n\nTITLE: Debouncing Function Calls with Lodash debounce\nDESCRIPTION: Shows how to use _.debounce() to create a function that delays invoking a callback until after a specified wait time has elapsed since the last call. Useful for rate-limiting expensive operations like API calls or DOM updates.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n// Avoid costly calculations while the window size is in flux.\njQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\n// Invoke `sendMail` when clicked, debouncing subsequent calls.\njQuery(element).on('click', _.debounce(sendMail, 300, {\n  'leading': true,\n  'trailing': false\n}));\n\n// Ensure `batchLog` is invoked once after 1 second of debounced calls.\nvar debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\nvar source = new EventSource('/stream');\njQuery(source).on('message', debounced);\n\n// Cancel the trailing debounced invocation.\njQuery(window).on('popstate', debounced.cancel);\n```\n\n----------------------------------------\n\nTITLE: Finding Array Differences with _.difference() in Lodash\nDESCRIPTION: Demonstrates using Lodash's difference method to create an array of values from the first array that are not included in subsequent arrays. Uses SameValueZero for equality comparisons.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n_.difference([2, 1], [2, 3]);\n// => [1]\n```\n\n----------------------------------------\n\nTITLE: Transforming Object Values with _.mapValues in JavaScript\nDESCRIPTION: Demonstrates how to create a new object with the same keys as the original but with transformed values using the Lodash mapValues method. The example shows both custom function and property shorthand approaches.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_220\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = {\n  'fred':    { 'user': 'fred',    'age': 40 },\n  'pebbles': { 'user': 'pebbles', 'age': 1 }\n};\n\n_.mapValues(users, function(o) { return o.age; });\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n\n// The `_.property` iteratee shorthand.\n_.mapValues(users, 'age');\n// => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n```\n\n----------------------------------------\n\nTITLE: Using _.compact() to Remove Falsey Values in JavaScript Arrays with Lodash\nDESCRIPTION: Demonstrates how to use Lodash's compact method to create an array with all falsey values removed. Falsey values include false, null, 0, \"\", undefined, and NaN.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Throttling Function Calls in JavaScript with Lodash\nDESCRIPTION: Demonstrates using _.throttle to limit how often a function can be called. Useful for scenarios like scroll events or API calls that shouldn't be triggered too frequently.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_114\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Avoid excessively updating the position while scrolling.\nJQuery(window).on('scroll', _.throttle(updatePosition, 100));\n\n// Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\nvar throttled = _.throttle(renewToken, 300000, { 'trailing': false });\njQuery(element).on('click', throttled);\n\n// Cancel the trailing throttled invocation.\njQuery(window).on('popstate', throttled.cancel);\n```\n\n----------------------------------------\n\nTITLE: Using isPlainObject() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isPlainObject() function to check if a value is a plain object created by the Object constructor or one with a [[Prototype]] of null.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n}\n\n_.isPlainObject(new Foo);\n// => false\n\n_.isPlainObject([1, 2, 3]);\n// => false\n\n_.isPlainObject({ 'x': 0, 'y': 0 });\n// => true\n\n_.isPlainObject(Object.create(null));\n// => true\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Find Method Examples\nDESCRIPTION: Demonstrates various ways to use _.find() to search arrays using different predicate shorthands.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': true },\n  { 'user': 'fred',    'age': 40, 'active': false },\n  { 'user': 'pebbles', 'age': 1,  'active': true }\n];\n\n_.find(users, function(o) { return o.age < 40; });\n// => object for 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.find(users, { 'age': 1, 'active': true });\n// => object for 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.find(users, ['active', false]);\n// => object for 'fred'\n\n// The `_.property` iteratee shorthand.\n_.find(users, 'active');\n// => object for 'barney'\n```\n\n----------------------------------------\n\nTITLE: Using map Method in Lodash for Collection Transformation in JavaScript\nDESCRIPTION: Illustrates the map method that creates an array of values by running each element in a collection through an iteratee function. Examples include using a custom function, object mapping, and property shorthand syntax.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square(n) {\n  return n * n;\n}\n\n_.map([4, 8], square);\n// => [16, 64]\n\n_.map({ 'a': 4, 'b': 8 }, square);\n// => [16, 64] (iteration order is not guaranteed)\n\nvar users = [\n  { 'user': 'barney' },\n  { 'user': 'fred' }\n];\n\n// The `_.property` iteratee shorthand.\n_.map(users, 'user');\n// => ['barney', 'fred']\n```\n\n----------------------------------------\n\nTITLE: Memoizing Function Results with Lodash in JavaScript\nDESCRIPTION: Demonstrates using _.memoize to cache function results. Shows caching of _.values calls and how to modify the cache or replace the cache implementation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1, 'b': 2 };\nvar other = { 'c': 3, 'd': 4 };\n\nvar values = _.memoize(_.values);\nvalues(object);\n// => [1, 2]\n\nvalues(other);\n// => [3, 4]\n\nobject.a = 2;\nvalues(object);\n// => [1, 2]\n\n// Modify the result cache.\nvalues.cache.set(object, ['a', 'b']);\nvalues(object);\n// => ['a', 'b']\n\n// Replace `_.memoize.Cache`.\n_.memoize.Cache = WeakMap;\n```\n\n----------------------------------------\n\nTITLE: Checking for Boolean Values with Lodash's isBoolean Method in JavaScript\nDESCRIPTION: The _.isBoolean method determines if a value is classified as a boolean primitive or object. It returns true for both boolean literals and Boolean objects, making it useful for type validation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_132\n\nLANGUAGE: javascript\nCODE:\n```\n_.isBoolean(false);\n// => true\n\n_.isBoolean(null);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Object Values with _.set()\nDESCRIPTION: Demonstrates using _.set() to set values at specific paths in an object, creating nested structures as needed.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_228\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.set(object, 'a[0].b.c', 4);\nconsole.log(object.a[0].b.c);\n// => 4\n\n_.set(object, ['x', '0', 'y', 'z'], 5);\nconsole.log(object.x[0].y.z);\n// => 5\n```\n\n----------------------------------------\n\nTITLE: Using the chunk Method in Lodash\nDESCRIPTION: Example demonstrating how to use the _.chunk method to split an array into groups of specified size. If the array can't be split evenly, the final chunk contains the remaining elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n_.chunk(['a', 'b', 'c', 'd'], 2);\n// => [['a', 'b'], ['c', 'd']]\n\n_.chunk(['a', 'b', 'c', 'd'], 3);\n// => [['a', 'b', 'c'], ['d']]\n```\n\n----------------------------------------\n\nTITLE: Performing Deep Equality Comparison with Lodash's isEqual Method in JavaScript\nDESCRIPTION: The _.isEqual method performs a deep comparison between two values to determine if they are equivalent. It supports comparing arrays, objects, dates, regexes, and other complex data types based on value equality rather than reference equality.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.isEqual(object, other);\n// => true\n\nobject === other;\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using _.chain to Sort and Map User Data with Explicit Chaining\nDESCRIPTION: This example demonstrates how to use explicit method chaining with _.chain() to process an array of user objects. It sorts users by age, maps them to formatted strings, and returns the first result, showing how to properly end the chain with value().\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_237\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'age': 36 },\n  { 'user': 'fred',    'age': 40 },\n  { 'user': 'pebbles', 'age': 1 }\n];\n\nvar youngest = _\n  .chain(users)\n  .sortBy('age')\n  .map(function(o) {\n    return o.user + ' is ' + o.age;\n  })\n  .head()\n  .value();\n// => 'pebbles is 1'\n```\n\n----------------------------------------\n\nTITLE: Throttling Function Calls with Lodash in JavaScript\nDESCRIPTION: Shows how to use _.throttle to create a function that limits the number of times the original function can be called. Includes options for controlling leading/trailing calls and methods for canceling or flushing delayed invocations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\n// Example code not provided in the original content\n```\n\n----------------------------------------\n\nTITLE: Using reject Method in Lodash for Collection Filtering in JavaScript\nDESCRIPTION: Illustrates the reject method, the opposite of filter, which returns elements that don't pass a predicate test. Examples include using custom functions, matches shorthand, matchesProperty shorthand, and property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': true }\n];\n\n_.reject(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.reject(users, { 'age': 40, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.reject(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.reject(users, 'active');\n// => objects for ['barney']\n```\n\n----------------------------------------\n\nTITLE: Selecting Object Properties with _.pick in JavaScript\nDESCRIPTION: Shows how to create a new object with only the specified properties from the source object using the Lodash pick method. The example demonstrates picking multiple properties using an array of keys.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_225\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pick(object, ['a', 'c']);\n// => { 'a': 1, 'c': 3 }\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array Elements in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.shuffle method to create a new array with shuffled values from the input collection. It implements the Fisher-Yates shuffle algorithm.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.shuffle([1, 2, 3, 4]);\n// => [4, 1, 3, 2]\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Arrays with _.toArray() in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's toArray() method to convert different value types to arrays. It converts objects to arrays of values, strings to arrays of characters, and returns empty arrays for numeric and null values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_166\n\nLANGUAGE: javascript\nCODE:\n```\n_.toArray({ 'a': 1, 'b': 2 });\n// => [1, 2]\n\n_.toArray('abc');\n// => ['a', 'b', 'c']\n\n_.toArray(1);\n// => []\n\n_.toArray(null);\n// => []\n```\n\n----------------------------------------\n\nTITLE: Using Lodash GroupBy Method Examples\nDESCRIPTION: Shows how to use _.groupBy() to create an object composed of keys generated from the collection elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n_.groupBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': [4.2], '6': [6.1, 6.3] }\n\n// The `_.property` iteratee shorthand.\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }\n```\n\n----------------------------------------\n\nTITLE: Finding Array Differences with Custom Comparator using _.differenceWith() in Lodash\nDESCRIPTION: Demonstrates using Lodash's differenceWith method to create an array of differences using a custom comparator function. Useful for comparing complex objects or applying custom comparison logic.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n\n_.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);\n// => [{ 'x': 2, 'y': 1 }]\n```\n\n----------------------------------------\n\nTITLE: Using isSymbol() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isSymbol() function to check if a value is classified as a Symbol primitive or object. It can identify built-in JavaScript symbols like Symbol.iterator.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_159\n\nLANGUAGE: javascript\nCODE:\n```\n_.isSymbol(Symbol.iterator);\n// => true\n\n_.isSymbol('abc');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Getting Collection Size in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.size method to get the size of a collection. It returns the length for array-like values or the number of own enumerable string keyed properties for objects.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.size([1, 2, 3]);\n// => 3\n\n_.size({ 'a': 1, 'b': 2 });\n// => 2\n\n_.size('pebbles');\n// => 7\n```\n\n----------------------------------------\n\nTITLE: Using Lodash ForEach Method Examples\nDESCRIPTION: Shows how to iterate over arrays and objects using _.forEach() to execute a function for each element.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n_.forEach([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `1` then `2`.\n\n_.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n```\n\n----------------------------------------\n\nTITLE: Shallow Cloning in JavaScript with Lodash\nDESCRIPTION: Demonstrates using _.clone to create a shallow copy of an object or array. The new object has the same structure but references to nested objects are shared.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar objects = [{ 'a': 1 }, { 'b': 2 }];\n\nvar shallow = _.clone(objects);\nconsole.log(shallow[0] === objects[0]);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Using _.assign to Copy Properties from Source Objects in JavaScript\nDESCRIPTION: This example demonstrates the _.assign method which copies own enumerable string keyed properties of source objects to the destination object. It shows how properties from constructor functions override destination values, but prototype properties are not copied.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_194\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assign({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'c': 3 }\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index in Sorted JavaScript Array using Lodash\nDESCRIPTION: Shows how to use _.sortedLastIndexOf() to perform a binary search on a sorted array and find the last index of a specific value.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sortedLastIndexOf([4, 5, 5, 5, 6], 5);\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Using _.defaults for Assigning Default Properties in JavaScript\nDESCRIPTION: This example demonstrates the _.defaults method which assigns properties to an object only if they don't already exist. Properties are assigned from left to right, and once a property is set, additional values for the same property are ignored.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_200\n\nLANGUAGE: javascript\nCODE:\n```\n_.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n```\n\n----------------------------------------\n\nTITLE: Importing Lodash in Node.js\nDESCRIPTION: Examples of different ways to import Lodash in a Node.js environment. This includes loading the full build, core build, FP build, method categories, and individual methods.\nSOURCE: https://github.com/lodash/lodash/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Load the full build.\nvar _ = require('lodash');\n// Load the core build.\nvar _ = require('lodash/core');\n// Load the FP build for immutable auto-curried iteratee-first data-last methods.\nvar fp = require('lodash/fp');\n\n// Load method categories.\nvar array = require('lodash/array');\nvar object = require('lodash/fp/object');\n\n// Cherry-pick methods for smaller browserify/rollup/webpack bundles.\nvar at = require('lodash/at');\nvar curryN = require('lodash/fp/curryN');\n```\n\n----------------------------------------\n\nTITLE: Collection Counting in JavaScript\nDESCRIPTION: Example showing _.countBy() which creates an object composed of keys generated from running collection elements through an iteratee.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\n_.countBy([6.1, 4.2, 6.3], Math.floor);\n// => { '4': 1, '6': 2 }\n\n// The `_.property` iteratee shorthand.\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }\n```\n\n----------------------------------------\n\nTITLE: Using _.uniq Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the uniq method which creates a duplicate-free version of an array using SameValueZero for equality comparisons, keeping only the first occurrence of each element. Order is determined by their appearance in the array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\n_.uniq([2, 1, 2]);\n// => [2, 1]\n```\n\n----------------------------------------\n\nTITLE: Creating Curried Functions with Lodash curry Method\nDESCRIPTION: Shows how to use _.curry() to create a function that can be called with arguments one at a time. When the minimum number of arguments is provided, the function is executed with all accumulated arguments.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nvar abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curry(abc);\n\ncurried(1)(2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2)(3);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(1)(_, 3)(2);\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Reversing Function Arguments with Lodash flip\nDESCRIPTION: Demonstrates _.flip() which creates a function that invokes the original function with its arguments in reverse order. Useful for adapting functions to interfaces that expect arguments in a different order.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nvar flipped = _.flip(function() {\n  return _.toArray(arguments);\n});\n\nflipped('a', 'b', 'c', 'd');\n// => ['d', 'c', 'b', 'a']\n```\n\n----------------------------------------\n\nTITLE: Wrapping Functions in JavaScript with Lodash\nDESCRIPTION: Demonstrates using _.wrap to create a new function that wraps the original function with additional functionality. In this case, wrapping the escape function to add HTML paragraph tags.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar p = _.wrap(_.escape, function(func, text) {\n  return '<p>' + func(text) + '</p>';\n});\n\np('fred, barney, & pebbles');\n// => '<p>fred, barney, &amp; pebbles</p>'\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with _.findIndex() in Lodash\nDESCRIPTION: Demonstrates using Lodash's findIndex method to find the index of the first element in an array that satisfies a predicate function. Returns -1 if no element matches the predicate.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Composing Functions in Reverse with Lodash flowRight() in JavaScript\nDESCRIPTION: Uses Lodash's flowRight() function to create a new function that returns the result of invoking the given functions in reverse order, where each function's return value is passed to the previous.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_278\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flowRight([square, _.add]);\naddSquare(1, 2);\n// => 9\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Elements with Predicate in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.some method to check if the predicate returns truthy for any element of the collection. It stops iteration once the predicate returns truthy.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.some([null, 0, 'yes', false], Boolean);\n// => true\n\nvar users = [\n  { 'user': 'barney', 'active': true },\n  { 'user': 'fred',   'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.some(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.some(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.some(users, 'active');\n// => true\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Template Function in JavaScript\nDESCRIPTION: Demonstrates various ways to use the _.template() function for string interpolation, HTML escaping, JavaScript evaluation, and custom delimiters.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_260\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the \"interpolate\" delimiter to create a compiled template.\nvar compiled = _.template('hello <%= user %>!');\ncompiled({ 'user': 'fred' });\n// => 'hello fred!'\n\n// Use the HTML \"escape\" delimiter to escape data property values.\nvar compiled = _.template('<b><%- value %></b>');\ncompiled({ 'value': '<script>' });\n// => '<b>&lt;script&gt;</b>'\n\n// Use the \"evaluate\" delimiter to execute JavaScript and generate HTML.\nvar compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the internal `print` function in \"evaluate\" delimiters.\nvar compiled = _.template('<% print(\"hello \" + user); %>!');\ncompiled({ 'user': 'barney' });\n// => 'hello barney!'\n\n// Use the ES template literal delimiter as an \"interpolate\" delimiter.\n// Disable support by replacing the \"interpolate\" delimiter.\nvar compiled = _.template('hello ${ user }!');\ncompiled({ 'user': 'pebbles' });\n// => 'hello pebbles!'\n\n// Use backslashes to treat delimiters as plain text.\nvar compiled = _.template('<%= \"\\\\<%- value %\\\\>\" %>');\ncompiled({ 'value': 'ignored' });\n// => '<%- value %>'\n\n// Use the `imports` option to import `jQuery` as `jq`.\nvar text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';\nvar compiled = _.template(text, { 'imports': { 'jq': jQuery } });\ncompiled({ 'users': ['fred', 'barney'] });\n// => '<li>fred</li><li>barney</li>'\n\n// Use the `sourceURL` option to specify a custom sourceURL for the template.\nvar compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\ncompiled(data);\n// => Find the source of \"greeting.jst\" under the Sources tab or Resources panel of the web inspector.\n\n// Use the `variable` option to ensure a with-statement isn't used in the compiled template.\nvar compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n//   var __t, __p = '';\n//   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';\n//   return __p;\n// }\n\n// Use custom template delimiters.\n_.templateSettings.interpolate = /{{([\\s\\S]+?)}}/g;\nvar compiled = _.template('hello {{ user }}!');\ncompiled({ 'user': 'mustache' });\n// => 'hello mustache!'\n\n// Use the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and stack traces.\nfs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');\n```\n\n----------------------------------------\n\nTITLE: Safely Invoking Functions with Lodash attempt() in JavaScript\nDESCRIPTION: Uses Lodash's attempt() function to safely invoke a function and return either the result or the caught error object. Useful for avoiding thrown errors from invalid operations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_271\n\nLANGUAGE: javascript\nCODE:\n```\n// Avoid throwing errors for invalid selectors.\nvar elements = _.attempt(function(selector) {\n  return document.querySelectorAll(selector);\n}, '>_>');\n\nif (_.isError(elements)) {\n  elements = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Includes Method Examples\nDESCRIPTION: Demonstrates various ways to use _.includes() to check if a value exists in a collection.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n_.includes([1, 2, 3], 1);\n// => true\n\n_.includes([1, 2, 3], 1, 2);\n// => false\n\n_.includes({ 'a': 1, 'b': 2 }, 1);\n// => true\n\n_.includes('abcd', 'bc');\n// => true\n```\n\n----------------------------------------\n\nTITLE: Using orderBy Method in Lodash for Custom Sorting in JavaScript\nDESCRIPTION: Demonstrates the orderBy method that sorts a collection by specified iteratees and orders. The example shows sorting an array of objects by user name in ascending order and age in descending order.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 34 },\n  { 'user': 'fred',   'age': 40 },\n  { 'user': 'barney', 'age': 36 }\n];\n\n// Sort by `user` in ascending order and by `age` in descending order.\n_.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n```\n\n----------------------------------------\n\nTITLE: Deep Array Flattening with flattenDeep\nDESCRIPTION: Demonstrates _.flattenDeep which recursively flattens an array to a single level. All nested arrays are flattened completely.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n_.flattenDeep([1, [2, [3, [4]], 5]]);\n// => [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Finding Common Elements with intersection\nDESCRIPTION: Demonstrates _.intersection which creates an array of unique values present in all given arrays. Uses SameValueZero for equality comparisons.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n_.intersection([2, 1], [2, 3]);\n// => [2]\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Iteratee Shorthand Examples in JavaScript\nDESCRIPTION: This snippet demonstrates various ways to use the _.iteratee function in Lodash, showing the different shorthand notations including _.matches, _.matchesProperty, and _.property. It also shows how to create custom iteratee shorthands by wrapping the iteratee function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_280\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));\n// => [{ 'user': 'barney', 'age': 36, 'active': true }]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, _.iteratee(['user', 'fred']));\n// => [{ 'user': 'fred', 'age': 40 }]\n\n// The `_.property` iteratee shorthand.\n_.map(users, _.iteratee('user'));\n// => ['barney', 'fred']\n\n// Create custom iteratee shorthands.\n_.iteratee = _.wrap(_.iteratee, function(iteratee, func) {\n  return !_.isRegExp(func) ? iteratee(func) : function(string) {\n    return func.test(string);\n  };\n});\n\n_.filter(['abc', 'def'], /ef/);\n// => ['def']\n```\n\n----------------------------------------\n\nTITLE: Lodash Chain Operation Examples\nDESCRIPTION: Demonstrates both implicit and explicit chaining operations using Lodash's chain method\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_242\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 40 }\n];\n\n// A sequence without explicit chaining.\n_(users).head();\n// => { 'user': 'barney', 'age': 36 }\n\n// A sequence with explicit chaining.\n_(users)\n  .chain()\n  .head()\n  .pick('user')\n  .value();\n// => { 'user': 'barney' }\n```\n\n----------------------------------------\n\nTITLE: Checking Value Equality in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.eq for performing SameValueZero comparison between two values. This method handles edge cases like NaN comparison correctly.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = { 'a': 1 };\nvar other = { 'a': 1 };\n\n_.eq(object, object);\n// => true\n\n_.eq(object, other);\n// => false\n\n_.eq('a', 'a');\n// => true\n\n_.eq('a', Object('a'));\n// => false\n\n_.eq(NaN, NaN);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Array Zipping with Custom Function in JavaScript\nDESCRIPTION: Example demonstrating _.zipWith() which creates an array of grouped elements with a custom function to combine values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n_.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {\n  return a + b + c;\n});\n// => [111, 222]\n```\n\n----------------------------------------\n\nTITLE: Getting Last Array Element with Lodash\nDESCRIPTION: Retrieves the last element of an array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n_.last([1, 2, 3]);\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Using isObjectLike() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isObjectLike() function to check if a value is object-like. A value is considered object-like if it's not null and has a typeof result of \"object\".\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\n_.isObjectLike({});\n// => true\n\n_.isObjectLike([1, 2, 3]);\n// => true\n\n_.isObjectLike(_.noop);\n// => false\n\n_.isObjectLike(null);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Partially Applying Functions with Lodash in JavaScript\nDESCRIPTION: Demonstrates using _.partial to create a function with some arguments pre-filled. Shows both simple partial application and using placeholders for dynamic arguments.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar sayHelloTo = _.partial(greet, 'hello');\nsayHelloTo('fred');\n// => 'hello fred'\n\n// Partially applied with placeholders.\nvar greetFred = _.partial(greet, _, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n```\n\n----------------------------------------\n\nTITLE: Collection Filtering in JavaScript\nDESCRIPTION: Example showing _.filter() which returns an array of all elements where predicate returns truthy.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': true },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n_.filter(users, function(o) { return !o.active; });\n// => objects for ['fred']\n\n// The `_.matches` iteratee shorthand.\n_.filter(users, { 'age': 36, 'active': true });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.filter(users, ['active', false]);\n// => objects for ['fred']\n\n// The `_.property` iteratee shorthand.\n_.filter(users, 'active');\n// => objects for ['barney']\n\n// Combining several predicates using `_.overEvery` or `_.overSome`.\n_.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n// => objects for ['fred', 'barney']\n```\n\n----------------------------------------\n\nTITLE: Using _.defaultsDeep for Deep Default Property Assignment in JavaScript\nDESCRIPTION: This example shows the _.defaultsDeep method which recursively assigns default properties to an object. It merges nested objects so that default values are applied at any depth when properties don't already exist.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_201\n\nLANGUAGE: javascript\nCODE:\n```\n_.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });\n// => { 'a': { 'b': 2, 'c': 3 } }\n```\n\n----------------------------------------\n\nTITLE: Deep Merging Objects with _.merge in JavaScript\nDESCRIPTION: Shows how to recursively merge the properties of source objects into a destination object using the Lodash merge method. Unlike Object.assign, this performs a deep merge of objects and arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_221\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n  'a': [{ 'b': 2 }, { 'd': 4 }]\n};\n\nvar other = {\n  'a': [{ 'c': 3 }, { 'e': 5 }]\n};\n\n_.merge(object, other);\n// => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n```\n\n----------------------------------------\n\nTITLE: Using _.union Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the union method which creates an array of unique values from all given arrays using SameValueZero for equality comparisons. The order of result values is determined by their appearance in the arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n_.union([2], [1, 2]);\n// => [2, 1]\n```\n\n----------------------------------------\n\nTITLE: Finding Array Index with Lodash findIndex Method\nDESCRIPTION: Demonstrates the _.findIndex method which returns the index of the first element that matches the given predicate. Shows various shorthand forms including _.matches, _.matchesProperty and _.property iteratee shorthands.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.findIndex(users, function(o) { return o.user == 'barney'; });\n// => 0\n\n// The `_.matches` iteratee shorthand.\n_.findIndex(users, { 'user': 'fred', 'active': false });\n// => 1\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findIndex(users, ['active', false]);\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.findIndex(users, 'active');\n// => 2\n```\n\n----------------------------------------\n\nTITLE: Using Lodash FlatMap Method Example\nDESCRIPTION: Demonstrates how to use _.flatMap() to map and flatten an array in a single operation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nfunction duplicate(n) {\n  return [n, n];\n}\n\n_.flatMap([1, 2], duplicate);\n// => [1, 1, 2, 2]\n```\n\n----------------------------------------\n\nTITLE: Converting Objects to Key-Value Pairs with _.toPairs()\nDESCRIPTION: Illustrates using _.toPairs() to convert an object's own enumerable string-keyed properties into an array of key-value pairs.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_230\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.toPairs(new Foo);\n// => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Wrapper to Create Method Chains with Square Function\nDESCRIPTION: This example shows how to use the Lodash wrapper (_) to create both wrapped and unwrapped operations. It defines a square function and demonstrates how to use methods like reduce and map, showing the difference between chained and unwrapped operations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_236\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2, 3]);\n\n// Returns an unwrapped value.\nwrapped.reduce(_.add);\n// => 6\n\n// Returns a wrapped value.\nvar squares = wrapped.map(square);\n\n_.isArray(squares);\n// => false\n\n_.isArray(squares.value());\n// => true\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Matches Function for Object Comparison in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _.matches function to create a function that performs partial deep comparison between objects. It shows how to filter collections based on matching property values and how to use _.overSome to check for multiple possible values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_281\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.filter(objects, _.matches({ 'a': 4, 'c': 6 }));\n// => [{ 'a': 4, 'b': 5, 'c': 6 }]\n\n// Checking for several possible values\n_.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));\n// => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n```\n\n----------------------------------------\n\nTITLE: Using _.uniqBy Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the uniqBy method which works like uniq except it accepts an iteratee that is invoked for each element to generate the criterion for uniqueness. Order is determined by their appearance in the array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n_.uniqBy([2.1, 1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Using _.at to Retrieve Values at Specified Paths in JavaScript\nDESCRIPTION: This example demonstrates the _.at method which creates an array of values corresponding to specified property paths of an object. It allows extracting deeply nested properties using path notation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_198\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_.at(object, ['a[0].b.c', 'a[1]']);\n// => [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Using keyBy Method in Lodash for Collection Indexing in JavaScript\nDESCRIPTION: Shows how to use the keyBy method to create an object composed of keys generated from the results of running each element of a collection through an iteratee function. It includes examples with both function iteratees and property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [\n  { 'dir': 'left', 'code': 97 },\n  { 'dir': 'right', 'code': 100 }\n];\n\n_.keyBy(array, function(o) {\n  return String.fromCharCode(o.code);\n});\n// => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n\n_.keyBy(array, 'dir');\n// => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Over Function to Invoke Multiple Functions in JavaScript\nDESCRIPTION: This snippet demonstrates the _.over function which creates a function that invokes multiple iteratees with the same arguments and returns an array of their results. It's useful for applying multiple functions to the same input.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_289\n\nLANGUAGE: javascript\nCODE:\n```\nvar func = _.over([Math.max, Math.min]);\n\nfunc(1, 2, 3, 4);\n// => [4, 1]\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.truncate() function to truncate a string if it's longer than the given maximum length. The function allows customization of truncation length, omission string, and separator pattern.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_266\n\nLANGUAGE: javascript\nCODE:\n```\n_.truncate('hi-diddly-ho there, neighborino');\n// => 'hi-diddly-ho there, neighbo...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': ' '\n});\n// => 'hi-diddly-ho there,...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'length': 24,\n  'separator': /,? +/\n});\n// => 'hi-diddly-ho there...'\n\n_.truncate('hi-diddly-ho there, neighborino', {\n  'omission': ' [...]'\n});\n// => 'hi-diddly-ho there, neig [...]'\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Values with Lodash's isEmpty Method in JavaScript\nDESCRIPTION: The _.isEmpty method determines if a value is empty (has no enumerable properties, zero length, or zero size). It works with objects, arrays, strings, maps, sets, and other collections, providing a unified way to check emptiness.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\n_.isEmpty(null);\n// => true\n\n_.isEmpty(true);\n// => true\n\n_.isEmpty(1);\n// => true\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({ 'a': 1 });\n// => false\n```\n\n----------------------------------------\n\nTITLE: Composing Functions with Lodash flow() in JavaScript\nDESCRIPTION: Uses Lodash's flow() function to create a new function that returns the result of invoking the given functions in order, where each function's return value is passed to the next.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_277\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square(n) {\n  return n * n;\n}\n\nvar addSquare = _.flow([_.add, square]);\naddSquare(1, 2);\n// => 9\n```\n\n----------------------------------------\n\nTITLE: Using partition Method in Lodash for Collection Grouping in JavaScript\nDESCRIPTION: Shows how to use the partition method to create an array of elements split into two groups based on a predicate function. Examples include using a custom function, matches shorthand, matchesProperty shorthand, and property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'age': 36, 'active': false },\n  { 'user': 'fred',    'age': 40, 'active': true },\n  { 'user': 'pebbles', 'age': 1,  'active': false }\n];\n\n_.partition(users, function(o) { return o.active; });\n// => objects for [['fred'], ['barney', 'pebbles']]\n\n// The `_.matches` iteratee shorthand.\n_.partition(users, { 'age': 1, 'active': false });\n// => objects for [['pebbles'], ['barney', 'fred']]\n\n// The `_.matchesProperty` iteratee shorthand.\n_.partition(users, ['active', false]);\n// => objects for [['barney', 'pebbles'], ['fred']]\n\n// The `_.property` iteratee shorthand.\n_.partition(users, 'active');\n// => objects for [['fred'], ['barney', 'pebbles']]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Object Properties with Lodash forIn Method in JavaScript\nDESCRIPTION: The _.forIn method iterates over own and inherited enumerable string keyed properties of an object and invokes an iteratee function for each property. It returns the original object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_204\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forIn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n```\n\n----------------------------------------\n\nTITLE: Controlled Depth Array Flattening\nDESCRIPTION: Shows usage of _.flattenDepth which allows flattening arrays to a specified depth level. Takes an array and optional depth parameter.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1, [2, [3, [4]], 5]];\n\n_.flattenDepth(array, 1);\n// => [1, 2, [3, [4]], 5]\n\n_.flattenDepth(array, 2);\n// => [1, 2, 3, [4], 5]\n```\n\n----------------------------------------\n\nTITLE: Sorting Collection by Iteratees in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.sortBy method to create an array of elements sorted in ascending order by the results of running each element through the iteratees. It performs a stable sort, preserving the original order of equal elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar users = [\n  { 'user': 'fred',   'age': 48 },\n  { 'user': 'barney', 'age': 36 },\n  { 'user': 'fred',   'age': 30 },\n  { 'user': 'barney', 'age': 34 }\n];\n\n_.sortBy(users, [function(o) { return o.user; }]);\n// => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n\n_.sortBy(users, ['user', 'age']);\n// => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n```\n\n----------------------------------------\n\nTITLE: Using clamp() method in Lodash\nDESCRIPTION: Clamps a number within the inclusive lower and upper bounds using Lodash's clamp method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_190\n\nLANGUAGE: javascript\nCODE:\n```\n_.clamp(-10, -5, 5);\n// => -5\n\n_.clamp(10, -5, 5);\n// => 5\n```\n\n----------------------------------------\n\nTITLE: Checking for Array-Like Objects with Lodash's isArrayLikeObject Method in JavaScript\nDESCRIPTION: The _.isArrayLikeObject method checks if a value is both array-like and an object. It returns true for arrays and array-like objects but false for strings and functions, making it more specific than isArrayLike.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\n_.isArrayLikeObject([1, 2, 3]);\n// => true\n\n_.isArrayLikeObject(document.body.children);\n// => true\n\n_.isArrayLikeObject('abc');\n// => false\n\n_.isArrayLikeObject(_.noop);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Filling Arrays with Values using _.fill() in Lodash\nDESCRIPTION: Shows how to use Lodash's fill method to replace elements in an array with a specified value from a start index to an end index. This method mutates the original array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1, 2, 3];\n\n_.fill(array, 'a');\nconsole.log(array);\n// => ['a', 'a', 'a']\n\n_.fill(Array(3), 2);\n// => [2, 2, 2]\n\n_.fill([4, 6, 8, 10], '*', 1, 3);\n// => [4, '*', '*', 10]\n```\n\n----------------------------------------\n\nTITLE: Customized Deep Merging with _.mergeWith in JavaScript\nDESCRIPTION: Demonstrates using the Lodash mergeWith method to perform a deep merge with custom handling for specific property types. The example shows how to concatenate arrays instead of merging them recursively.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_222\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customizer(objValue, srcValue) {\n  if (_.isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n}\n\nvar object = { 'a': [1], 'b': [2] };\nvar other = { 'a': [3], 'b': [4] };\n\n_.mergeWith(object, other, customizer);\n// => { 'a': [1, 3], 'b': [2, 4] }\n```\n\n----------------------------------------\n\nTITLE: Collection Testing in JavaScript\nDESCRIPTION: Example demonstrating _.every() which checks if predicate returns truthy for all elements of collection.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\n_.every([true, 1, null, 'yes'], Boolean);\n// => false\n\nvar users = [\n  { 'user': 'barney', 'age': 36, 'active': false },\n  { 'user': 'fred',   'age': 40, 'active': false }\n];\n\n// The `_.matches` iteratee shorthand.\n_.every(users, { 'user': 'barney', 'active': false });\n// => false\n\n// The `_.matchesProperty` iteratee shorthand.\n_.every(users, ['active', false]);\n// => true\n\n// The `_.property` iteratee shorthand.\n_.every(users, 'active');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Concatenating Arrays with _.concat() in Lodash\nDESCRIPTION: Shows how to use Lodash's concat method to create a new array by concatenating an array with additional arrays and/or values. This method doesn't modify the original array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1];\nvar other = _.concat(array, 2, [3], [[4]]);\n\nconsole.log(other);\n// => [1, 2, 3, [4]]\n\nconsole.log(array);\n// => [1]\n```\n\n----------------------------------------\n\nTITLE: Using _.xor Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the xor method which creates an array of unique values that is the symmetric difference of the given arrays. The order of result values is determined by their appearance in the arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n_.xor([2, 1], [2, 3]);\n// => [1, 3]\n```\n\n----------------------------------------\n\nTITLE: Excluding Object Properties with _.omit in JavaScript\nDESCRIPTION: Shows how to create a new object without specific properties using the Lodash omit method. This examples demonstrates omitting multiple properties from an object by specifying their keys in an array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_223\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omit(object, ['a', 'c']);\n// => { 'b': '2' }\n```\n\n----------------------------------------\n\nTITLE: Custom Deep Cloning in JavaScript with Lodash\nDESCRIPTION: Demonstrates using _.cloneDeepWith to perform a deep clone with custom handling of specific types. In this example, it shows how to clone DOM elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_120\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(true);\n  }\n}\n\nvar el = _.cloneDeepWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 20\n```\n\n----------------------------------------\n\nTITLE: Using _.invoke to Access Nested Properties with Methods in JavaScript\nDESCRIPTION: Demonstrates how to use the Lodash invoke method to execute a function at a given property path of an object. This example shows invoking the slice method on a nested array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_216\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };\n\n_.invoke(object, 'a[0].b.c.slice', 1, 3);\n// => [2, 3]\n```\n\n----------------------------------------\n\nTITLE: Converting to Plain Objects with _.toPlainObject() in JavaScript\nDESCRIPTION: Demonstrates Lodash's toPlainObject() method which converts values to plain objects, flattening inherited enumerable string properties. This is particularly useful when working with objects created using constructors.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_171\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.assign({ 'a': 1 }, new Foo);\n// => { 'a': 1, 'b': 2 }\n\n_.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n// => { 'a': 1, 'b': 2, 'c': 3 }\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from Beginning of JavaScript Array using Lodash\nDESCRIPTION: Shows how to use _.take() to create a new array with a specified number of elements taken from the beginning of the input array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.take([1, 2, 3]);\n// => [1]\n\n_.take([1, 2, 3], 2);\n// => [1, 2]\n\n_.take([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.take([1, 2, 3], 0);\n// => []\n```\n\n----------------------------------------\n\nTITLE: Finding Array Differences with Custom Iteratee using _.differenceBy() in Lodash\nDESCRIPTION: Shows how to use Lodash's differenceBy method to create an array of differences after transforming values with an iteratee function. Supports shorthand notations for common iteratee patterns.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2]\n\n// The `_.property` iteratee shorthand.\n_.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Removing Elements with Predicate Function\nDESCRIPTION: Removes all elements that satisfy the predicate function and returns array of removed elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1, 2, 3, 4];\nvar evens = _.remove(array, function(n) {\n  return n % 2 == 0;\n});\n\nconsole.log(array);\n// => [1, 3]\n\nconsole.log(evens);\n// => [2, 4]\n```\n\n----------------------------------------\n\nTITLE: Using _.findKey to Find Object Keys by Predicate in JavaScript\nDESCRIPTION: This example demonstrates the _.findKey method which returns the key of the first element that satisfies a predicate function. It shows various predicate shortcuts including function predicates, object matching, property matching, and property existence.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_202\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findKey(users, function(o) { return o.age < 40; });\n// => 'barney' (iteration order is not guaranteed)\n\n// The `_.matches` iteratee shorthand.\n_.findKey(users, { 'age': 1, 'active': true });\n// => 'pebbles'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findKey(users, 'active');\n// => 'barney'\n```\n\n----------------------------------------\n\nTITLE: Customizing Object Path Creation with _.setWith()\nDESCRIPTION: Shows how to use _.setWith() to customize the creation of nested object structures when setting values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_229\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {};\n\n_.setWith(object, '[0][1]', 'a', Object);\n// => { '0': { '1': 'a' } }\n```\n\n----------------------------------------\n\nTITLE: Checking for Array Type with Lodash's isArray Method in JavaScript\nDESCRIPTION: The _.isArray method checks if a value is classified as an Array object. It returns true if the value is an array and false otherwise, providing a reliable way to validate array types.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\n_.isArray([1, 2, 3]);\n// => true\n\n_.isArray(document.body.children);\n// => false\n\n_.isArray('abc');\n// => false\n\n_.isArray(_.noop);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Function Type Checking in JavaScript with Lodash\nDESCRIPTION: Demonstrates _.isFunction() for checking if a value is classified as a Function object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_141\n\nLANGUAGE: javascript\nCODE:\n```\n_.isFunction(_);\n// => true\n\n_.isFunction(/abc/);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using reduceRight Method in Lodash for Right-to-Left Reduction in JavaScript\nDESCRIPTION: Shows the reduceRight method that works like reduce but iterates over elements from right to left. The example demonstrates flattening a nested array in reverse order.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [[0, 1], [2, 3], [4, 5]];\n\n_.reduceRight(array, function(flattened, other) {\n  return flattened.concat(other);\n}, []);\n// => [4, 5, 2, 3, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Start Case with Lodash in JavaScript\nDESCRIPTION: Shows how to use Lodash's startCase function to convert strings to start case format, where each word begins with an uppercase letter and words are separated by spaces.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_258\n\nLANGUAGE: javascript\nCODE:\n```\n_.startCase('--foo-bar--');\n// => 'Foo Bar'\n\n_.startCase('fooBar');\n// => 'Foo Bar'\n\n_.startCase('__FOO_BAR__');\n// => 'FOO BAR'\n```\n\n----------------------------------------\n\nTITLE: Using invokeMap Method in Lodash for Collection Manipulation in JavaScript\nDESCRIPTION: Demonstrates how to use the invokeMap method to call a method on each element in a collection. The first example calls 'sort' on each array in a collection, and the second uses String.prototype.split on numeric values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\n_.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invokeMap([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]\n```\n\n----------------------------------------\n\nTITLE: Using _.takeWhile Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the takeWhile method which creates a slice of an array with elements taken from the beginning until predicate returns falsey. Examples show various iteratee shorthand formats including function predicates, matches objects, property matching, and property checking.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.takeWhile(users, function(o) { return !o.active; });\n// => objects for ['barney', 'fred']\n\n// The `_.matches` iteratee shorthand.\n_.takeWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['barney']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeWhile(users, ['active', false]);\n// => objects for ['barney', 'fred']\n\n// The `_.property` iteratee shorthand.\n_.takeWhile(users, 'active');\n// => []\n```\n\n----------------------------------------\n\nTITLE: Using isString() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isString() function to check if a value is classified as a String primitive or object. It returns true for string literals and String objects but false for other types.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_158\n\nLANGUAGE: javascript\nCODE:\n```\n_.isString('abc');\n// => true\n\n_.isString(1);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Invoking Object Method at Specified Path with Lodash invoke Method in JavaScript\nDESCRIPTION: The _.invoke method invokes the method at a specified path of an object. Additional arguments can be passed to the invoked method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_215\n\n\n\n----------------------------------------\n\nTITLE: Right-Partially Applying Functions with Lodash in JavaScript\nDESCRIPTION: Shows how to use _.partialRight to create a function with some arguments pre-filled from the right. Demonstrates both simple partial application and using placeholders.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greet(greeting, name) {\n  return greeting + ' ' + name;\n}\n\nvar greetFred = _.partialRight(greet, 'fred');\ngreetFred('hi');\n// => 'hi fred'\n\n// Partially applied with placeholders.\nvar sayHelloTo = _.partialRight(greet, 'hello', _);\nsayHelloTo('fred');\n// => 'hello fred'\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Snake Case with Lodash in JavaScript\nDESCRIPTION: Shows how to use Lodash's snakeCase function to convert various string formats to snake_case, where words are lowercase and separated by underscores. Handles camelCase, spaces, and special characters.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_256\n\nLANGUAGE: javascript\nCODE:\n```\n_.snakeCase('Foo Bar');\n// => 'foo_bar'\n\n_.snakeCase('fooBar');\n// => 'foo_bar'\n\n_.snakeCase('--FOO-BAR--');\n// => 'foo_bar'\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Functions with Lodash cond() in JavaScript\nDESCRIPTION: Uses Lodash's cond() function to create a function that iterates over pairs of predicates and corresponding functions, invoking the function of the first matching predicate.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_273\n\nLANGUAGE: javascript\nCODE:\n```\nvar func = _.cond([\n  [_.matches({ 'a': 1 }),           _.constant('matches A')],\n  [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],\n  [_.stubTrue,                      _.constant('no match')]\n]);\n\nfunc({ 'a': 1, 'b': 2 });\n// => 'matches A'\n\nfunc({ 'a': 0, 'b': 1 });\n// => 'matches B'\n\nfunc({ 'a': '1', 'b': '2' });\n// => 'no match'\n```\n\n----------------------------------------\n\nTITLE: Using _.without Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the without method which creates a new array excluding all given values using SameValueZero for equality comparisons. Unlike _.pull, this method returns a new array instead of modifying the original.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n_.without([2, 1, 2, 3], 1, 2);\n// => [3]\n```\n\n----------------------------------------\n\nTITLE: Finding Element Index with indexOf\nDESCRIPTION: Demonstrates _.indexOf which finds the index of the first occurrence of a value in an array. Supports an optional fromIndex parameter.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n_.indexOf([1, 2, 1, 2], 2);\n// => 1\n\n// Search from the `fromIndex`.\n_.indexOf([1, 2, 1, 2], 2, 2);\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Array Zipping Operation in JavaScript\nDESCRIPTION: Example showing how to use _.zip() to create an array of grouped elements from multiple arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n_.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n```\n\n----------------------------------------\n\nTITLE: Transforming Objects with _.transform()\nDESCRIPTION: Demonstrates using _.transform() as an alternative to _.reduce for transforming an object into a new accumulator object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_231\n\nLANGUAGE: javascript\nCODE:\n```\n_.transform([2, 3, 4], function(result, n) {\n  result.push(n *= n);\n  return n % 2 == 0;\n}, []);\n// => [4, 9]\n\n_.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n  (result[value] || (result[value] = [])).push(key);\n}, {});\n// => { '1': ['a', 'c'], '2': ['b'] }\n```\n\n----------------------------------------\n\nTITLE: Casting Values to Arrays in JavaScript with Lodash\nDESCRIPTION: Shows how _.castArray can be used to ensure a value is an array. It wraps non-array values in an array and returns arrays unchanged.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.castArray(1);\n// => [1]\n\n_.castArray({ 'a': 1 });\n// => [{ 'a': 1 }]\n\n_.castArray('abc');\n// => ['abc']\n\n_.castArray(null);\n// => [null]\n\n_.castArray(undefined);\n// => [undefined]\n\n_.castArray();\n// => []\n\nvar array = [1, 2, 3];\nconsole.log(_.castArray(array) === array);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Properties with _.property\nDESCRIPTION: Demonstrates creating property accessor functions using _.property.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_292\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [\n  { 'a': { 'b': 2 } },\n  { 'a': { 'b': 1 } }\n];\n\n_.map(objects, _.property('a.b'));\n// => [2, 1]\n\n_.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements from Array Beginning with _.drop() in Lodash\nDESCRIPTION: Shows how to use Lodash's drop method to create a slice of an array with n elements dropped from the beginning. The number of elements to drop can be specified, with 1 as the default.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n_.drop([1, 2, 3]);\n// => [2, 3]\n\n_.drop([1, 2, 3], 2);\n// => [3]\n\n_.drop([1, 2, 3], 5);\n// => []\n\n_.drop([1, 2, 3], 0);\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Own Object Properties with Lodash forOwn Method in JavaScript\nDESCRIPTION: The _.forOwn method iterates over own enumerable string keyed properties of an object and invokes an iteratee function for each property. It returns the original object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_206\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwn(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'a' then 'b' (iteration order is not guaranteed).\n```\n\n----------------------------------------\n\nTITLE: Using at Method to Extract Values from Specific Paths in an Object\nDESCRIPTION: This example demonstrates how to use the wrapper version of the at method to extract values from specific paths within a nested object. It shows how to use array notation within path strings to access array elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_241\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\n\n_(object).at(['a[0].b.c', 'a[1]']).value();\n// => [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Using random() method in Lodash\nDESCRIPTION: Generates random numbers within specified bounds using Lodash's random method. Supports integers and floating-point numbers.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_192\n\nLANGUAGE: javascript\nCODE:\n```\n_.random(0, 5);\n// => an integer between 0 and 5\n\n_.random(5);\n// => also an integer between 0 and 5\n\n_.random(5, true);\n// => a floating-point number between 0 and 5\n\n_.random(1.2, 5.2);\n// => a floating-point number between 1.2 and 5.2\n```\n\n----------------------------------------\n\nTITLE: Removing Object Properties with _.unset()\nDESCRIPTION: Shows how to use _.unset() to remove properties from an object at a specified path.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_232\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': 7 } }] };\n_.unset(object, 'a[0].b.c');\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n\n_.unset(object, ['a', '0', 'b', 'c']);\n// => true\n\nconsole.log(object);\n// => { 'a': [{ 'b': {} }] };\n```\n\n----------------------------------------\n\nTITLE: Checking for Object Property Existence with Lodash has Method in JavaScript\nDESCRIPTION: The _.has method checks if a specified path is a direct property of an object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_211\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = { 'a': { 'b': 2 } };\nvar other = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.has(object, 'a');\n// => true\n\n_.has(object, 'a.b');\n// => true\n\n_.has(object, ['a', 'b']);\n// => true\n\n_.has(other, 'a');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dropping Elements from Array Beginning with _.dropWhile() in Lodash\nDESCRIPTION: Demonstrates using Lodash's dropWhile method to create a slice of an array excluding elements from the beginning that satisfy a predicate function. Supports various shorthand notations for predicates.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'active': false },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': true }\n];\n\n_.dropWhile(users, function(o) { return !o.active; });\n// => objects for ['pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.dropWhile(users, { 'user': 'barney', 'active': false });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropWhile(users, ['active', false]);\n// => objects for ['pebbles']\n\n// The `_.property` iteratee shorthand.\n_.dropWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n```\n\n----------------------------------------\n\nTITLE: Deep Object Creation from Arrays in JavaScript\nDESCRIPTION: Example showing _.zipObjectDeep() which creates an object supporting property paths from arrays of identifiers and values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n_.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);\n// => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n```\n\n----------------------------------------\n\nTITLE: Using meanBy() method in Lodash with iteratee function\nDESCRIPTION: Calculates the mean of values in an array after transforming each element using an iteratee function. Supports both custom functions and property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_182\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.meanBy(objects, function(o) { return o.n; });\n// => 5\n\n// The `_.property` iteratee shorthand.\n_.meanBy(objects, 'n');\n// => 5\n```\n\n----------------------------------------\n\nTITLE: Creating Unary Functions in JavaScript with Lodash\nDESCRIPTION: Uses _.unary to create a function that accepts only one argument. This is demonstrated with the parseInt function to parse an array of string numbers.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.map(['6', '8', '10'], _.unary(parseInt));\n// => [6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Updating Nested Object Values with _.update()\nDESCRIPTION: Demonstrates using _.update() to modify values in an object using an updater function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_233\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c': 3 } }] };\n\n_.update(object, 'a[0].b.c', function(n) { return n * n; });\nconsole.log(object.a[0].b.c);\n// => 9\n\n_.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });\nconsole.log(object.x[0].y.z);\n// => 0\n```\n\n----------------------------------------\n\nTITLE: Map Type Checking in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.isMap() to check if a value is classified as a Map object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_144\n\nLANGUAGE: javascript\nCODE:\n```\n_.isMap(new Map);\n// => true\n\n_.isMap(new WeakMap);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values with _.max() in JavaScript\nDESCRIPTION: Demonstrates Lodash's max() method which computes the maximum value in an array. It returns undefined for empty or falsey arrays, making it safer than standard Math.max.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_178\n\nLANGUAGE: javascript\nCODE:\n```\n_.max([4, 2, 8, 6]);\n// => 8\n\n_.max([]);\n// => undefined\n```\n\n----------------------------------------\n\nTITLE: Installing Lodash using npm\nDESCRIPTION: Commands to install Lodash using npm. This includes updating npm globally and then installing Lodash as a project dependency.\nSOURCE: https://github.com/lodash/lodash/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ npm i -g npm\n$ npm i --save lodash\n```\n\n----------------------------------------\n\nTITLE: Using sumBy() method in Lodash with iteratee function\nDESCRIPTION: Calculates the sum of values in an array after transforming each element using an iteratee function. Supports both custom functions and property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_189\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];\n\n_.sumBy(objects, function(o) { return o.n; });\n// => 20\n\n// The `_.property` iteratee shorthand.\n_.sumBy(objects, 'n');\n// => 20\n```\n\n----------------------------------------\n\nTITLE: Getting Current Timestamp in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.now method to get the timestamp of the number of milliseconds that have elapsed since the Unix epoch (1 January 1970 00:00:00 UTC).\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_91\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.defer(function(stamp) {\n  console.log(_.now() - stamp);\n}, _.now());\n// => Logs the number of milliseconds it took for the deferred invocation.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nested Object Values with _.result()\nDESCRIPTION: Uses _.result() to safely retrieve nested object values, with support for default values and computed properties.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_227\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };\n\n_.result(object, 'a[0].b.c1');\n// => 3\n\n_.result(object, 'a[0].b.c2');\n// => 4\n\n_.result(object, 'a[0].b.c3', 'default');\n// => 'default'\n\n_.result(object, 'a[0].b.c3', _.constant('default'));\n// => 'default'\n```\n\n----------------------------------------\n\nTITLE: Selecting Object Properties by Value with _.pickBy in JavaScript\nDESCRIPTION: Demonstrates creating a new object by including only properties that satisfy a predicate function using the Lodash pickBy method. The example shows keeping only numeric properties from an object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_226\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.pickBy(object, _.isNumber);\n// => { 'a': 1, 'c': 3 }\n```\n\n----------------------------------------\n\nTITLE: Getting First Array Element with head\nDESCRIPTION: Shows usage of _.head (alias: _.first) which returns the first element of an array. Returns undefined for empty arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n_.head([1, 2, 3]);\n// => 1\n\n_.head([]);\n// => undefined\n```\n\n----------------------------------------\n\nTITLE: Sampling Multiple Random Elements from Collection in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.sampleSize method to randomly select and return multiple unique elements from a collection. It takes a collection and the number of elements to sample as arguments, returning an array of random elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sampleSize([1, 2, 3], 2);\n// => [3, 1]\n\n_.sampleSize([1, 2, 3], 4);\n// => [2, 3, 1]\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Finite Numbers with _.toFinite() in JavaScript\nDESCRIPTION: Shows the usage of Lodash's toFinite() method which converts various values to finite numbers. It handles regular numbers, minimum values, infinity, and string representations of numbers.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_167\n\nLANGUAGE: javascript\nCODE:\n```\n_.toFinite(3.2);\n// => 3.2\n\n_.toFinite(Number.MIN_VALUE);\n// => 5e-324\n\n_.toFinite(Infinity);\n// => 1.7976931348623157e+308\n\n_.toFinite('3.2');\n// => 3.2\n```\n\n----------------------------------------\n\nTITLE: Finding Last Index in Array with Lodash\nDESCRIPTION: Searches array from right to left to find the last index of a value. Accepts optional fromIndex parameter to limit search range.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n_.lastIndexOf([1, 2, 1, 2], 2);\n// => 3\n\n// Search from the `fromIndex`.\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\n// => 1\n```\n\n----------------------------------------\n\nTITLE: Lodash String Case Conversion Examples\nDESCRIPTION: Collection of string case conversion methods including camelCase, capitalize, and kebabCase\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_248\n\nLANGUAGE: javascript\nCODE:\n```\n_.camelCase('Foo Bar');\n// => 'fooBar'\n\n_.camelCase('--foo-bar--');\n// => 'fooBar'\n\n_.camelCase('__FOO_BAR__');\n// => 'fooBar'\n\n_.capitalize('FRED');\n// => 'Fred'\n\n_.kebabCase('Foo Bar');\n// => 'foo-bar'\n\n_.kebabCase('fooBar');\n// => 'foo-bar'\n\n_.kebabCase('__FOO_BAR__');\n// => 'foo-bar'\n```\n\n----------------------------------------\n\nTITLE: Using Lodash FlatMapDeep Method Example\nDESCRIPTION: Shows how to use _.flatMapDeep() to recursively flatten mapped array results.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nfunction duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDeep([1, 2], duplicate);\n// => [1, 1, 2, 2]\n```\n\n----------------------------------------\n\nTITLE: Inverting Object Key-Value Pairs with Custom Processing using Lodash invertBy Method in JavaScript\nDESCRIPTION: The _.invertBy method creates a new object by inverting the keys and values of the input object, with the ability to customize the inversion process using an iteratee function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_214\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invertBy(object);\n// => { '1': ['a', 'c'], '2': ['b'] }\n\n_.invertBy(object, function(value) {\n  return 'group' + value;\n});\n// => { 'group1': ['a', 'c'], 'group2': ['b'] }\n```\n\n----------------------------------------\n\nTITLE: Customized Deep Equality Comparison with Lodash's isEqualWith Method in JavaScript\nDESCRIPTION: The _.isEqualWith method extends _.isEqual by accepting a customizer function to handle specialized comparison logic. The customizer receives values from both objects and can return a custom equality result or undefined to use the default comparison.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, othValue) {\n  if (isGreeting(objValue) && isGreeting(othValue)) {\n    return true;\n  }\n}\n\nvar array = ['hello', 'goodbye'];\nvar other = ['hi', 'goodbye'];\n\n_.isEqualWith(array, other, customizer);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Using _.assignInWith with Custom Value Assignment in JavaScript\nDESCRIPTION: This example demonstrates _.assignInWith which works like _.assignIn but accepts a customizer function to determine how values are assigned. The customizer allows selective assignment based on conditions, as shown creating a defaults-like function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_196\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignInWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Numbers with _.toNumber() in JavaScript\nDESCRIPTION: Illustrates the use of Lodash's toNumber() method which converts various values to their number representations. It handles standard numbers, minimum values, infinity, and string representations of numbers.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_170\n\nLANGUAGE: javascript\nCODE:\n```\n_.toNumber(3.2);\n// => 3.2\n\n_.toNumber(Number.MIN_VALUE);\n// => 5e-324\n\n_.toNumber(Infinity);\n// => Infinity\n\n_.toNumber('3.2');\n// => 3.2\n```\n\n----------------------------------------\n\nTITLE: Using isSafeInteger() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isSafeInteger() function to check if a value is a safe integer. A safe integer is an IEEE-754 double precision number that isn't the result of a rounded unsafe integer.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_156\n\nLANGUAGE: javascript\nCODE:\n```\n_.isSafeInteger(3);\n// => true\n\n_.isSafeInteger(Number.MIN_VALUE);\n// => false\n\n_.isSafeInteger(Infinity);\n// => false\n\n_.isSafeInteger('3');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Functions with Lodash conforms() in JavaScript\nDESCRIPTION: Uses Lodash's conforms() function to create a function that checks if an object conforms to the given source object's predicate properties.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_274\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [\n  { 'a': 2, 'b': 1 },\n  { 'a': 1, 'b': 2 }\n];\n\n_.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));\n// => [{ 'a': 1, 'b': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.toUpper() function to convert strings to uppercase. This function converts the entire string to uppercase, similar to String#toUpperCase.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_262\n\nLANGUAGE: javascript\nCODE:\n```\n_.toUpper('--foo-bar--');\n// => '--FOO-BAR--'\n\n_.toUpper('fooBar');\n// => 'FOOBAR'\n\n_.toUpper('__foo_bar__');\n// => '__FOO_BAR__'\n```\n\n----------------------------------------\n\nTITLE: Using _.assignIn to Copy All Properties in JavaScript\nDESCRIPTION: This example shows the _.assignIn method which copies both own and inherited properties from source objects to the destination object. Unlike _.assign, it also copies prototype properties to the destination object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_195\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n}\n\nfunction Bar() {\n  this.c = 3;\n}\n\nFoo.prototype.b = 2;\nBar.prototype.d = 4;\n\n_.assignIn({ 'a': 0 }, new Foo, new Bar);\n// => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n```\n\n----------------------------------------\n\nTITLE: Array Flattening with Lodash flatten Method\nDESCRIPTION: Example of _.flatten which flattens an array a single level deep. Takes a nested array and returns a new flattened array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n_.flatten([1, [2, [3, [4]], 5]]);\n// => [1, 2, [3, [4]], 5]\n```\n\n----------------------------------------\n\nTITLE: Object Matching in JavaScript with Lodash\nDESCRIPTION: Demonstrates _.isMatch() for performing partial deep comparisons between objects.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1, 'b': 2 };\n\n_.isMatch(object, { 'b': 2 });\n// => true\n\n_.isMatch(object, { 'b': 1 });\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using isSet() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isSet() function to check if a value is classified as a Set object. This distinguishes between Set objects and other collection types like WeakSet.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_157\n\nLANGUAGE: javascript\nCODE:\n```\n_.isSet(new Set);\n// => true\n\n_.isSet(new WeakSet);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Values by Criteria with _.maxBy() in JavaScript\nDESCRIPTION: Shows Lodash's maxBy() method which finds the maximum value in an array based on the results of an iteratee function. It supports both custom functions and property shorthand for accessing object properties.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_179\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.maxBy(objects, function(o) { return o.n; });\n// => { 'n': 2 }\n\n// The `_.property` iteratee shorthand.\n_.maxBy(objects, 'n');\n// => { 'n': 2 }\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace from Strings with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.trim() function to remove leading and trailing whitespace or specified characters from a string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_263\n\nLANGUAGE: javascript\nCODE:\n```\n_.trim('  abc  ');\n// => 'abc'\n\n_.trim('-_-abc-_-', '_-');\n// => 'abc'\n\n_.map(['  foo  ', '  bar  '], _.trim);\n// => ['foo', 'bar']\n```\n\n----------------------------------------\n\nTITLE: Filtering Object Properties by Value with _.omitBy in JavaScript\nDESCRIPTION: Demonstrates creating a new object by omitting properties that satisfy a predicate function using the Lodash omitBy method. The example shows removing all numeric properties from an object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_224\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1, 'b': '2', 'c': 3 };\n\n_.omitBy(object, _.isNumber);\n// => { 'b': '2' }\n```\n\n----------------------------------------\n\nTITLE: Checking for Array-Like Objects with Lodash's isArrayLike Method in JavaScript\nDESCRIPTION: The _.isArrayLike method checks if a value is array-like (has a length property that is a non-negative integer less than or equal to MAX_SAFE_INTEGER and is not a function). This is useful for identifying objects that can be iterated like arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\n_.isArrayLike([1, 2, 3]);\n// => true\n\n_.isArrayLike(document.body.children);\n// => true\n\n_.isArrayLike('abc');\n// => true\n\n_.isArrayLike(_.noop);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Custom Object Matching in JavaScript with Lodash\nDESCRIPTION: Shows usage of _.isMatchWith() which allows custom comparison functions for object matching.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_146\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isGreeting(value) {\n  return /^h(?:i|ello)$/.test(value);\n}\n\nfunction customizer(objValue, srcValue) {\n  if (isGreeting(objValue) && isGreeting(srcValue)) {\n    return true;\n  }\n}\n\nvar object = { 'greeting': 'hello' };\nvar source = { 'greeting': 'hi' };\n\n_.isMatchWith(object, source, customizer);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Checking for ArrayBuffer Type with Lodash's isArrayBuffer Method in JavaScript\nDESCRIPTION: The _.isArrayBuffer method determines if a value is an ArrayBuffer object. This is useful when working with binary data and TypedArrays to ensure the correct type of buffer object is being used.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\n_.isArrayBuffer(new ArrayBuffer(2));\n// => true\n\n_.isArrayBuffer(new Array(2));\n// => false\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefix with Lodash in JavaScript\nDESCRIPTION: Demonstrates Lodash's startsWith function which tests if a string begins with a specific target substring. Supports checking from a specific position in the string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_259\n\nLANGUAGE: javascript\nCODE:\n```\n_.startsWith('abc', 'a');\n// => true\n\n_.startsWith('abc', 'b');\n// => false\n\n_.startsWith('abc', 'b', 1);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Trimming Trailing Characters from Strings with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.trimEnd() function to remove trailing whitespace or specified characters from a string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_264\n\nLANGUAGE: javascript\nCODE:\n```\n_.trimEnd('  abc  ');\n// => '  abc'\n\n_.trimEnd('-_-abc-_-', '_-');\n// => '-_-abc'\n```\n\n----------------------------------------\n\nTITLE: Using _.findLastKey to Find Last Matching Key in JavaScript\nDESCRIPTION: This example shows the _.findLastKey method which works like _.findKey but iterates over object properties in reverse order. It finds the last key that satisfies the predicate, demonstrating various predicate shorthand notations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_203\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = {\n  'barney':  { 'age': 36, 'active': true },\n  'fred':    { 'age': 40, 'active': false },\n  'pebbles': { 'age': 1,  'active': true }\n};\n\n_.findLastKey(users, function(o) { return o.age < 40; });\n// => returns 'pebbles' assuming `_.findKey` returns 'barney'\n\n// The `_.matches` iteratee shorthand.\n_.findLastKey(users, { 'age': 36, 'active': true });\n// => 'barney'\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastKey(users, ['active', false]);\n// => 'fred'\n\n// The `_.property` iteratee shorthand.\n_.findLastKey(users, 'active');\n// => 'pebbles'\n```\n\n----------------------------------------\n\nTITLE: Using Lodash ForEachRight Method Example\nDESCRIPTION: Demonstrates _.forEachRight() to iterate over elements from right to left.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n_.forEachRight([1, 2], function(value) {\n  console.log(value);\n});\n// => Logs `2` then `1`.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Own Property Names with _.keys in JavaScript\nDESCRIPTION: Shows how to use the Lodash keys method to get an array of the own enumerable property names of an object. The example demonstrates usage with both a custom object and a string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_217\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keys(new Foo);\n// => ['a', 'b'] (iteration order is not guaranteed)\n\n_.keys('hi');\n// => ['0', '1']\n```\n\n----------------------------------------\n\nTITLE: Right-Currying Functions with Lodash curryRight Method\nDESCRIPTION: Demonstrates _.curryRight() which creates a curry function that applies arguments from right-to-left. This is similar to _.curry but follows the pattern of _.partialRight instead of _.partial.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nvar abc = function(a, b, c) {\n  return [a, b, c];\n};\n\nvar curried = _.curryRight(abc);\n\ncurried(3)(2)(1);\n// => [1, 2, 3]\n\ncurried(2, 3)(1);\n// => [1, 2, 3]\n\ncurried(1, 2, 3);\n// => [1, 2, 3]\n\n// Curried with placeholders.\ncurried(3)(1, _)(2);\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from Sorted JavaScript Array using Lodash\nDESCRIPTION: Demonstrates the use of _.sortedUniq() to create a new array with unique values from a sorted array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sortedUniq([1, 1, 2]);\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Removing Values from Array with Lodash Pull\nDESCRIPTION: Mutates array by removing all occurrences of specified values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pull(array, 'a', 'c');\nconsole.log(array);\n// => ['b', 'b']\n```\n\n----------------------------------------\n\nTITLE: Using inRange() method in Lodash\nDESCRIPTION: Checks if a number is within a specified range using Lodash's inRange method. Supports positive and negative ranges.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_191\n\nLANGUAGE: javascript\nCODE:\n```\n_.inRange(3, 2, 4);\n// => true\n\n_.inRange(4, 8);\n// => true\n\n_.inRange(4, 2);\n// => false\n\n_.inRange(2, 2);\n// => false\n\n_.inRange(1.2, 2);\n// => true\n\n_.inRange(5.2, 4);\n// => false\n\n_.inRange(-3, -2, -6);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Binding Function to Context with Partial Application in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.bind method to create a function that invokes the provided function with a specified this binding and partially applied arguments. It supports placeholders for partial application.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction greet(greeting, punctuation) {\n  return greeting + ' ' + this.user + punctuation;\n}\n\nvar object = { 'user': 'fred' };\n\nvar bound = _.bind(greet, object, 'hi');\nbound('!');\n// => 'hi fred!'\n\n// Bound with placeholders.\nvar bound = _.bind(greet, object, _, '!');\nbound('hi');\n// => 'hi fred!'\n```\n\n----------------------------------------\n\nTITLE: Using _.unionBy Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the unionBy method which works like union except it accepts an iteratee that is invoked for each element to generate the criterion for uniqueness. Results are chosen from the first array in which the value occurs.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n_.unionBy([2.1], [1.2, 2.3], Math.floor);\n// => [2.1, 1.2]\n\n// The `_.property` iteratee shorthand.\n_.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }, { 'x': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Extracting Object Values with _.values()\nDESCRIPTION: Shows how to use _.values() to create an array of an object's own enumerable string-keyed property values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_234\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.values(new Foo);\n// => [1, 2] (iteration order is not guaranteed)\n\n_.values('hi');\n// => ['h', 'i']\n```\n\n----------------------------------------\n\nTITLE: Using _.uniqWith Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the uniqWith method which works like uniq except it accepts a comparator that is invoked to compare elements of the array. Order is determined by their appearance in the array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.uniqWith(objects, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n```\n\n----------------------------------------\n\nTITLE: Generating Number Ranges with _.range\nDESCRIPTION: Shows various ways to generate arrays of numbers using _.range with different start, end, and step values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_294\n\nLANGUAGE: javascript\nCODE:\n```\n_.range(4);\n// => [0, 1, 2, 3]\n\n_.range(-4);\n// => [0, -1, -2, -3]\n\n_.range(1, 5);\n// => [1, 2, 3, 4]\n\n_.range(0, 20, 5);\n// => [0, 5, 10, 15]\n\n_.range(0, -4, -1);\n// => [0, -1, -2, -3]\n\n_.range(1, 4, 0);\n// => [1, 1, 1]\n\n_.range(0);\n// => []\n```\n\n----------------------------------------\n\nTITLE: Checking Greater Than in JavaScript with Lodash\nDESCRIPTION: Demonstrates using _.gt to check if one value is greater than another. This function can be used with numbers and other comparable values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_124\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.gt(3, 1);\n// => true\n\n_.gt(3, 3);\n// => false\n\n_.gt(1, 3);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Method Function for Method Invocation in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _.method function to create a function that invokes a method at a specified path of an object. It shows how to map over objects and access methods at specific paths using both string and array notation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_283\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [\n  { 'a': { 'b': _.constant(2) } },\n  { 'a': { 'b': _.constant(1) } }\n];\n\n_.map(objects, _.method('a.b'));\n// => [2, 1]\n\n_.map(objects, _.method(['a', 'b']));\n// => [2, 1]\n```\n\n----------------------------------------\n\nTITLE: Dropping Elements from Array End with _.dropRight() in Lodash\nDESCRIPTION: Demonstrates using Lodash's dropRight method to create a slice of an array with n elements dropped from the end. The number of elements to drop can be specified, with 1 as the default.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n_.dropRight([1, 2, 3]);\n// => [1, 2]\n\n_.dropRight([1, 2, 3], 2);\n// => [1]\n\n_.dropRight([1, 2, 3], 5);\n// => []\n\n_.dropRight([1, 2, 3], 0);\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using valuesIn Method in Lodash to Extract Object Values Including Prototype Chain\nDESCRIPTION: This example demonstrates how to use the valuesIn method to retrieve all values from an object, including those in its prototype chain. It creates a Foo constructor with two own properties and one property on its prototype, then uses valuesIn to extract all values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_235\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.valuesIn(new Foo);\n// => [1, 2, 3] (iteration order is not guaranteed)\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from Beginning of JavaScript Array with Predicate using Lodash\nDESCRIPTION: Demonstrates the usage of _.takeWhile() to create a new array with elements taken from the beginning of the input array until the predicate returns falsey.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_47\n\n\n\n----------------------------------------\n\nTITLE: Iterating N Times with _.times\nDESCRIPTION: Shows how to execute a function N times using _.times.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_302\n\nLANGUAGE: javascript\nCODE:\n```\n_.times(3, String);\n// => ['0', '1', '2']\n\n _.times(4, _.constant(0));\n// => [0, 0, 0, 0]\n```\n\n----------------------------------------\n\nTITLE: Using lt() for Value Comparison in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's lt() function to check if a value is less than another value. This is a utility for more readable value comparisons in JavaScript.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_164\n\nLANGUAGE: javascript\nCODE:\n```\n_.lt(1, 3);\n// => true\n\n_.lt(3, 3);\n// => false\n\n_.lt(3, 1);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Rounding Up Numbers with _.ceil() in JavaScript\nDESCRIPTION: Shows Lodash's ceil() method which computes a number rounded up to a specified precision. It can round to whole numbers or to decimal places, including negative precision for rounding larger place values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_175\n\nLANGUAGE: javascript\nCODE:\n```\n_.ceil(4.006);\n// => 5\n\n_.ceil(6.004, 2);\n// => 6.01\n\n_.ceil(6040, -2);\n// => 6100\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Use Functions with Lodash in JavaScript\nDESCRIPTION: Demonstrates using _.once to create a function that can only be invoked once. Subsequent calls return the result of the first invocation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nvar initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// => `createApplication` is invoked once\n```\n\n----------------------------------------\n\nTITLE: Converting Pairs to Object with fromPairs\nDESCRIPTION: Demonstrates _.fromPairs which converts an array of key-value pairs into an object. Inverse of _.toPairs method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n_.fromPairs([['a', 1], ['b', 2]]);\n// => { 'a': 1, 'b': 2 }\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dropping Elements from Array End with _.dropRightWhile() in Lodash\nDESCRIPTION: Shows how to use Lodash's dropRightWhile method to create a slice of an array excluding elements from the end that satisfy a predicate function. Supports various shorthand notations for predicates.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.dropRightWhile(users, function(o) { return !o.active; });\n// => objects for ['barney']\n\n// The `_.matches` iteratee shorthand.\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['barney', 'fred']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.dropRightWhile(users, ['active', false]);\n// => objects for ['barney']\n\n// The `_.property` iteratee shorthand.\n_.dropRightWhile(users, 'active');\n// => objects for ['barney', 'fred', 'pebbles']\n```\n\n----------------------------------------\n\nTITLE: Repeating Strings with Lodash in JavaScript\nDESCRIPTION: Shows how to use Lodash's repeat function to create a new string that consists of the original string repeated a specified number of times. Returns an empty string if the count is 0.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_254\n\nLANGUAGE: javascript\nCODE:\n```\n_.repeat('*', 3);\n// => '***'\n\n_.repeat('abc', 2);\n// => 'abcabc'\n\n_.repeat('abc', 0);\n// => ''\n```\n\n----------------------------------------\n\nTITLE: Integer Checking in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.isInteger() to check if a value is an integer, based on Number.isInteger().\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_142\n\nLANGUAGE: javascript\nCODE:\n```\n_.isInteger(3);\n// => true\n\n_.isInteger(Number.MIN_VALUE);\n// => false\n\n_.isInteger(Infinity);\n// => false\n\n_.isInteger('3');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using _.overSome for Predicate Checking\nDESCRIPTION: Shows how to use _.overSome to create a function that checks if any predicate returns truthy.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_291\n\nLANGUAGE: javascript\nCODE:\n```\nvar func = _.overSome([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => true\n\nfunc(NaN);\n// => false\n\nvar matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\nvar matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from End of JavaScript Array using Lodash\nDESCRIPTION: Demonstrates the use of _.takeRight() to create a new array with a specified number of elements taken from the end of the input array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.takeRight([1, 2, 3]);\n// => [3]\n\n_.takeRight([1, 2, 3], 2);\n// => [2, 3]\n\n_.takeRight([1, 2, 3], 5);\n// => [1, 2, 3]\n\n_.takeRight([1, 2, 3], 0);\n// => []\n```\n\n----------------------------------------\n\nTITLE: Using _.create for Prototype Inheritance in JavaScript\nDESCRIPTION: This example shows how to use _.create to create an object that inherits from a prototype object. It demonstrates creating a Circle class that inherits from Shape while assigning specific properties to the new prototype object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_199\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\nfunction Circle() {\n  Shape.call(this);\n}\n\nCircle.prototype = _.create(Shape.prototype, {\n  'constructor': Circle\n});\n\nvar circle = new Circle;\ncircle instanceof Circle;\n// => true\n\ncircle instanceof Shape;\n// => true\n```\n\n----------------------------------------\n\nTITLE: Transforming Object Keys with _.mapKeys in JavaScript\nDESCRIPTION: Shows how to transform the keys of an object while maintaining the original values using the Lodash mapKeys method. The example demonstrates creating new keys by combining the original key with its value.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_219\n\nLANGUAGE: javascript\nCODE:\n```\n_.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {\n  return key + value;\n});\n// => { 'a1': 1, 'b2': 2 }\n```\n\n----------------------------------------\n\nTITLE: Using min() method in Lodash\nDESCRIPTION: Computes the minimum value in an array using Lodash's min method. Returns undefined for empty arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_183\n\nLANGUAGE: javascript\nCODE:\n```\n_.min([4, 2, 8, 6]);\n// => 2\n\n_.min([]);\n// => undefined\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Arrays with Lodash in JavaScript\nDESCRIPTION: Demonstrates Lodash's split function which divides a string into an array of substrings based on a separator pattern. Optionally limits the number of results returned.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_257\n\nLANGUAGE: javascript\nCODE:\n```\n_.split('a-b-c', '-', 2);\n// => ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Calculating Averages with _.mean() in JavaScript\nDESCRIPTION: Demonstrates Lodash's mean() method which computes the arithmetic mean (average) of values in an array. This utility provides a simple way to calculate averages in a functional style.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_180\n\nLANGUAGE: javascript\nCODE:\n```\n// No example code provided in the original documentation\n```\n\n----------------------------------------\n\nTITLE: Nil Value Checking in JavaScript with Lodash\nDESCRIPTION: Demonstrates _.isNil() for checking if a value is null or undefined.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_149\n\nLANGUAGE: javascript\nCODE:\n```\n_.isNil(null);\n// => true\n\n_.isNil(void 0);\n// => true\n\n_.isNil(NaN);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Array XOR Operation with Iteratee in JavaScript\nDESCRIPTION: Example showing how to use _.xorBy() to perform an exclusive OR operation on arrays while applying an iteratee function to each element for comparison.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n_.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [1.2, 3.4]\n\n// The `_.property` iteratee shorthand.\n_.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Delaying Function Execution with Lodash delay\nDESCRIPTION: Shows how to use _.delay() to postpone function execution for a specified number of milliseconds. Similar to setTimeout but with a more convenient syntax for passing arguments.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n_.delay(function(text) {\n  console.log(text);\n}, 1000, 'later');\n// => Logs 'later' after one second.\n```\n\n----------------------------------------\n\nTITLE: Rounding Down Numbers with _.floor() in JavaScript\nDESCRIPTION: Shows Lodash's floor() method which computes a number rounded down to a specified precision. It can round to whole numbers or to decimal places, including negative precision for rounding larger place values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\n_.floor(4.006);\n// => 4\n\n_.floor(0.046, 2);\n// => 0.04\n\n_.floor(4060, -2);\n// => 4000\n```\n\n----------------------------------------\n\nTITLE: Creating Rest Parameter Functions with Lodash in JavaScript\nDESCRIPTION: Shows how to use _.rest to create a function that collects its remaining arguments into an array, similar to the rest parameter syntax.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nvar say = _.rest(function(what, names) {\n  return what + ' ' + _.initial(names).join(', ') +\n    (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n});\n\nsay('hello', 'fred', 'barney', 'pebbles');\n// => 'hello fred, barney, & pebbles'\n```\n\n----------------------------------------\n\nTITLE: Using _.overEvery to Check Multiple Predicates\nDESCRIPTION: Demonstrates using _.overEvery to create a function that checks if all predicates return truthy values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_290\n\nLANGUAGE: javascript\nCODE:\n```\nvar func = _.overEvery([Boolean, isFinite]);\n\nfunc('1');\n// => true\n\nfunc(null);\n// => false\n\nfunc(NaN);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Sampling Random Element from Collection in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.sample method to randomly select and return an element from an array. The method takes an array as input and returns a random element from it.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sample([1, 2, 3, 4]);\n// => 2\n```\n\n----------------------------------------\n\nTITLE: Checking Object Conformity in JavaScript with Lodash\nDESCRIPTION: Demonstrates using _.conformsTo to check if an object's properties satisfy the predicates of another object. Useful for validating object structures.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_122\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = { 'a': 1, 'b': 2 };\n\n_.conformsTo(object, { 'b': function(n) { return n > 1; } });\n// => true\n\n_.conformsTo(object, { 'b': function(n) { return n > 2; } });\n// => false\n```\n\n----------------------------------------\n\nTITLE: Transforming Function Arguments with Lodash in JavaScript\nDESCRIPTION: Shows how to use _.overArgs to create a function that transforms its arguments before invoking the original function. Demonstrates applying square and double functions to arguments.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doubled(n) {\n  return n * 2;\n}\n\nfunction square(n) {\n  return n * n;\n}\n\nvar func = _.overArgs(function(x, y) {\n  return [x, y];\n}, [square, doubled]);\n\nfunc(9, 3);\n// => [81, 6]\n\nfunc(10, 5);\n// => [100, 10]\n```\n\n----------------------------------------\n\nTITLE: Dividing Numbers with _.divide() in JavaScript\nDESCRIPTION: Demonstrates Lodash's divide() math utility which divides two numbers. This utility function provides a functional approach to division operations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_176\n\nLANGUAGE: javascript\nCODE:\n```\n_.divide(6, 4);\n// => 1.5\n```\n\n----------------------------------------\n\nTITLE: Using tap Method to Modify Intermediate Results in a Lodash Chain\nDESCRIPTION: This example shows how to use the tap method to intercept and modify an array within a method chain without breaking the chain. It mutates the array by popping the last element, then continues the chain with reverse operation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_238\n\nLANGUAGE: javascript\nCODE:\n```\n_([1, 2, 3])\n .tap(function(array) {\n   // Mutate input array.\n   array.pop();\n })\n .reverse()\n .value();\n// => [2, 1]\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values with Lodash defaultTo() in JavaScript\nDESCRIPTION: Uses Lodash's defaultTo() function to check a value and return a default value if the checked value is NaN, null, or undefined.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_276\n\nLANGUAGE: javascript\nCODE:\n```\n_.defaultTo(1, 10);\n// => 1\n\n_.defaultTo(undefined, 10);\n// => 10\n```\n\n----------------------------------------\n\nTITLE: Using Lodash FlatMapDepth Method Example\nDESCRIPTION: Demonstrates _.flatMapDepth() to flatten mapped results to a specified depth.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nfunction duplicate(n) {\n  return [[[n, n]]];\n}\n\n_.flatMapDepth([1, 2], duplicate, 2);\n// => [[1, 1], [2, 2]]\n```\n\n----------------------------------------\n\nTITLE: Spreading Array Arguments with Lodash in JavaScript\nDESCRIPTION: Demonstrates using _.spread to create a function that spreads an array into arguments for another function, similar to the spread operator.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nvar say = _.spread(function(who, what) {\n  return who + ' says ' + what;\n});\n\nsay(['fred', 'hello']);\n// => 'fred says hello'\n\nvar numbers = Promise.all([\n  Promise.resolve(40),\n  Promise.resolve(36)\n]);\n\nnumbers.then(_.spread(function(x, y) {\n  return x + y;\n}));\n// => a Promise of 76\n```\n\n----------------------------------------\n\nTITLE: Getting Function Property Names from an Object with Lodash functions Method in JavaScript\nDESCRIPTION: The _.functions method creates an array of function property names from own enumerable properties of an object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_208\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functions(new Foo);\n// => ['a', 'b']\n```\n\n----------------------------------------\n\nTITLE: Custom Shallow Cloning in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.cloneWith for shallow cloning with custom handling. This example demonstrates cloning a DOM element without its children.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction customizer(value) {\n  if (_.isElement(value)) {\n    return value.cloneNode(false);\n  }\n}\n\nvar el = _.cloneWith(document.body, customizer);\n\nconsole.log(el === document.body);\n// => false\nconsole.log(el.nodeName);\n// => 'BODY'\nconsole.log(el.childNodes.length);\n// => 0\n```\n\n----------------------------------------\n\nTITLE: Replacing String Patterns with Lodash in JavaScript\nDESCRIPTION: Demonstrates Lodash's replace function for substituting pattern matches in a string with replacement text. Similar to JavaScript's native String.replace method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_255\n\nLANGUAGE: javascript\nCODE:\n```\n_.replace('Hi Fred', 'Fred', 'Barney');\n// => 'Hi Barney'\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Integers with Lodash in JavaScript\nDESCRIPTION: Demonstrates Lodash's parseInt function which converts strings to integers with specified radix. It aligns with the ES5 implementation and handles hex values appropriately.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_253\n\nLANGUAGE: javascript\nCODE:\n```\n_.parseInt('08');\n// => 8\n\n_.map(['6', '08', '10'], _.parseInt);\n// => [6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Creating Identity Functions with Lodash identity() in JavaScript\nDESCRIPTION: Uses Lodash's identity() function to create a function that returns the first argument it receives. Useful as a default iteratee.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_279\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = { 'a': 1 };\n\nconsole.log(_.identity(object) === object);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Inverting Object Key-Value Pairs with Lodash invert Method in JavaScript\nDESCRIPTION: The _.invert method creates a new object by inverting the keys and values of the input object. If there are duplicate values, subsequent values overwrite previous ones.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_213\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = { 'a': 1, 'b': 2, 'c': 1 };\n\n_.invert(object);\n// => { '1': 'c', '2': 'b' }\n```\n\n----------------------------------------\n\nTITLE: Finding Index in Sorted JavaScript Array using Lodash\nDESCRIPTION: Demonstrates the use of _.sortedIndexOf() to perform a binary search on a sorted array and find the index of a specific value.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sortedIndexOf([4, 5, 5, 5, 6], 5);\n// => 1\n```\n\n----------------------------------------\n\nTITLE: Checking for Buffer Objects with Lodash's isBuffer Method in JavaScript\nDESCRIPTION: The _.isBuffer method checks if a value is a Buffer object. This is useful when working with Node.js Buffer instances to ensure proper handling of binary data.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\n_.isBuffer(new Buffer(2));\n// => true\n\n_.isBuffer(new Uint8Array(2));\n// => false\n```\n\n----------------------------------------\n\nTITLE: Padding Strings on Both Sides with Lodash in JavaScript\nDESCRIPTION: Shows how to use Lodash's pad function to add padding characters to both sides of a string to reach a specified length. The padding is evenly distributed between left and right sides.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_250\n\nLANGUAGE: javascript\nCODE:\n```\n_.pad('abc', 8);\n// => '  abc   '\n\n_.pad('abc', 8, '_-');\n// => '_-abc_-_'\n\n_.pad('abc', 3);\n// => 'abc'\n```\n\n----------------------------------------\n\nTITLE: Using isObject() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isObject() function to check if a value is the language type of Object. This includes arrays, functions, objects, regexes, and wrapper objects, but excludes null.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_152\n\nLANGUAGE: javascript\nCODE:\n```\n_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(_.noop);\n// => true\n\n_.isObject(null);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Reversing Array with Lodash\nDESCRIPTION: Reverses elements of array in place, mutating the original array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1, 2, 3];\n\n_.reverse(array);\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Using assign() method in Lodash\nDESCRIPTION: Assigns own enumerable string keyed properties of source objects to the destination object using Lodash's assign method. This method mutates the original object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_193\n\n\n\n----------------------------------------\n\nTITLE: Using Lodash FindLast Method Example\nDESCRIPTION: Shows how to use _.findLast() to find the last element in a collection that matches a predicate.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n_.findLast([1, 2, 3, 4], function(n) {\n  return n % 2 == 1;\n});\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Using Lodash NthArg Function to Get Arguments by Index in JavaScript\nDESCRIPTION: This snippet demonstrates the _.nthArg function which creates a function that gets an argument at a specified index. It supports both positive indices (from the beginning) and negative indices (from the end) of the arguments list.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_288\n\nLANGUAGE: javascript\nCODE:\n```\nvar func = _.nthArg(1);\nfunc('a', 'b', 'c', 'd');\n// => 'b'\n\nvar func = _.nthArg(-2);\nfunc('a', 'b', 'c', 'd');\n// => 'c'\n```\n\n----------------------------------------\n\nTITLE: Unescaping HTML Entities with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.unescape() function to convert HTML entities back to their corresponding characters. This function is the inverse of _.escape().\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_267\n\nLANGUAGE: javascript\nCODE:\n```\n_.unescape('fred, barney, &amp; pebbles');\n// => 'fred, barney, & pebbles'\n```\n\n----------------------------------------\n\nTITLE: Padding Strings on the Left Side with Lodash in JavaScript\nDESCRIPTION: Shows how to use Lodash's padStart function to add padding characters to the beginning of a string until it reaches the specified length. Useful for creating fixed-width string representations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_252\n\nLANGUAGE: javascript\nCODE:\n```\n_.padStart('abc', 6);\n// => '   abc'\n\n_.padStart('abc', 6, '_-');\n// => '_-_abc'\n\n_.padStart('abc', 3);\n// => 'abc'\n```\n\n----------------------------------------\n\nTITLE: Array XOR Operation with Custom Comparator in JavaScript\nDESCRIPTION: Example demonstrating _.xorWith() which performs an exclusive OR operation on arrays using a custom comparator function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.xorWith(objects, others, _.isEqual);\n// => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n----------------------------------------\n\nTITLE: Intersection with Custom Comparator\nDESCRIPTION: Demonstrates _.intersectionWith which uses a custom comparator function for determining intersections between arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.intersectionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Getting Own and Inherited Property Names with _.keysIn in JavaScript\nDESCRIPTION: Demonstrates how to use the Lodash keysIn method to create an array of both own and inherited enumerable property names of an object. Unlike _.keys, this includes properties from the prototype chain.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_218\n\nLANGUAGE: javascript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.keysIn(new Foo);\n// => ['a', 'b', 'c'] (iteration order is not guaranteed)\n```\n\n----------------------------------------\n\nTITLE: Creating Function Invoked After N Calls in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.after method to create a function that invokes the provided function once it's called N or more times. It's the opposite of _.before.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar saves = ['profile', 'settings'];\n\nvar done = _.after(saves.length, function() {\n  console.log('done saving!');\n});\n\n_.forEach(saves, function(type) {\n  asyncSave({ 'type': type, 'complete': done });\n});\n// => Logs 'done saving!' after the two async saves have completed.\n```\n\n----------------------------------------\n\nTITLE: Using Lodash MatchesProperty Function for Path-Value Comparison in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _.matchesProperty function to create a function that performs partial deep comparison between values at a specific path. It shows how to find or filter objects based on matching property values at a specified path.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_282\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [\n  { 'a': 1, 'b': 2, 'c': 3 },\n  { 'a': 4, 'b': 5, 'c': 6 }\n];\n\n_.find(objects, _.matchesProperty('a', 4));\n// => { 'a': 4, 'b': 5, 'c': 6 }\n\n// Checking for several possible values\n_.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));\n// => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Uppercase Words with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.upperCase() function to convert a string to uppercase words separated by spaces.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_268\n\nLANGUAGE: javascript\nCODE:\n```\n_.upperCase('--foo-bar');\n// => 'FOO BAR'\n\n_.upperCase('fooBar');\n// => 'FOO BAR'\n\n_.upperCase('__foo_bar__');\n// => 'FOO BAR'\n```\n\n----------------------------------------\n\nTITLE: Binding Object Method with Partial Application in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.bindKey method to create a function that invokes the method at object[key] with partially applied arguments. It allows referencing methods that may be redefined or don't yet exist.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_96\n\n\n\n----------------------------------------\n\nTITLE: Creating Object from Arrays in JavaScript\nDESCRIPTION: Example demonstrating _.zipObject() which creates an object from arrays of property identifiers and values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n_.zipObject(['a', 'b'], [1, 2]);\n// => { 'a': 1, 'b': 2 }\n```\n\n----------------------------------------\n\nTITLE: Using Lodash's uniqueId Function in JavaScript\nDESCRIPTION: Demonstrates the usage of Lodash's uniqueId function to generate unique identifiers. The function can take an optional prefix and returns a string containing a unique numeric identifier.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_304\n\nLANGUAGE: javascript\nCODE:\n```\n_.uniqueId('contact_');\n// => 'contact_104'\n\n_.uniqueId();\n// => '105'\n```\n\n----------------------------------------\n\nTITLE: Intersection with Iteratee\nDESCRIPTION: Shows _.intersectionBy which allows custom iteratee for value comparison during intersection. Iteratee is invoked for each element.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n_.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n// => [2.1]\n\n// The `_.property` iteratee shorthand.\n_.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n// => [{ 'x': 1 }]\n```\n\n----------------------------------------\n\nTITLE: Using Lodash MethodOf Function for Object Method Invocation in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _.methodOf function which is the opposite of _.method. It creates a function that invokes a method at a given path of an object provided as the first argument, allowing for dynamic method invocation based on path specifications.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_284\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = _.times(3, _.constant),\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.methodOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.methodOf(object));\n// => [2, 0]\n```\n\n----------------------------------------\n\nTITLE: Using PullAll in Lodash\nDESCRIPTION: Mutates array by removing all elements present in values array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\n\n_.pullAll(array, ['a', 'c']);\nconsole.log(array);\n// => ['b', 'b']\n```\n\n----------------------------------------\n\nTITLE: Rearranging Function Arguments with Lodash in JavaScript\nDESCRIPTION: Demonstrates using _.rearg to create a function that invokes another function with its arguments rearranged according to the specified indexes.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nvar rearged = _.rearg(function(a, b, c) {\n  return [a, b, c];\n}, [2, 0, 1]);\n\nrearged('b', 'c', 'a')\n// => ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Using isRegExp() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isRegExp() function to check if a value is classified as a RegExp object. It returns true for actual RegExp objects but false for string representations of them.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_155\n\nLANGUAGE: javascript\nCODE:\n```\n_.isRegExp(/abc/);\n// => true\n\n_.isRegExp('/abc/');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using _.assignWith with Custom Value Assignment in JavaScript\nDESCRIPTION: This example shows _.assignWith which works like _.assign but accepts a customizer function to determine how values are assigned. The customizer is used to create a defaults-like function that only assigns values to undefined properties.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_197\n\nLANGUAGE: javascript\nCODE:\n```\nfunction customizer(objValue, srcValue) {\n  return _.isUndefined(objValue) ? srcValue : objValue;\n}\n\nvar defaults = _.partialRight(_.assignWith, customizer);\n\ndefaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n// => { 'a': 1, 'b': 2 }\n```\n\n----------------------------------------\n\nTITLE: Getting All but First Element of JavaScript Array using Lodash\nDESCRIPTION: Demonstrates the usage of _.tail() to create a new array containing all elements except the first one from the input array.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.tail([1, 2, 3]);\n// => [2, 3]\n```\n\n----------------------------------------\n\nTITLE: Using lte() for Value Comparison in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's lte() function to check if a value is less than or equal to another value. This enables more readable value comparisons in JavaScript.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_165\n\nLANGUAGE: javascript\nCODE:\n```\n_.lte(1, 3);\n// => true\n\n_.lte(3, 3);\n// => true\n\n_.lte(3, 1);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using _.unzipWith Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the unzipWith method which works like unzip except it accepts an iteratee to specify how regrouped values should be combined. The iteratee is invoked with the elements of each group.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar zipped = _.zip([1, 2], [10, 20], [100, 200]);\n// => [[1, 10, 100], [2, 20, 200]]\n\n_.unzipWith(zipped, _.add);\n// => [3, 30, 300]\n```\n\n----------------------------------------\n\nTITLE: Getting All But Last Element with initial\nDESCRIPTION: Shows _.initial which returns all elements of an array except the last one. Returns a new array slice.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n_.initial([1, 2, 3]);\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Using isWeakMap() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isWeakMap() function to check if a value is classified as a WeakMap object. This function distinguishes between WeakMap and other map-like objects such as Map.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\n_.isWeakMap(new WeakMap);\n// => true\n\n_.isWeakMap(new Map);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using PullAllBy with Custom Iteratee\nDESCRIPTION: Removes array elements based on matches in values array using custom iteratee for comparisons.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\n\n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\nconsole.log(array);\n// => [{ 'x': 2 }]\n```\n\n----------------------------------------\n\nTITLE: Using _.unionWith Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the unionWith method which is like union except it accepts a comparator that is invoked to compare elements of arrays. Result values are chosen from the first array in which the value occurs.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\nvar others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n\n_.unionWith(objects, others, _.isEqual);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n```\n\n----------------------------------------\n\nTITLE: Converting String to Lowercase First Character with Lodash in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's lowerFirst function to convert only the first character of a string to lowercase while preserving the case of other characters.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_249\n\nLANGUAGE: javascript\nCODE:\n```\n_.lowerFirst('Fred');\n// => 'fred'\n\n_.lowerFirst('FRED');\n// => 'fRED'\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Array-Like Length with _.toLength() in JavaScript\nDESCRIPTION: Shows how to use Lodash's toLength() method to convert values to integers suitable for array-like object lengths. Based on ECMAScript's ToLength operation, it caps values at the maximum array length.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\n_.toLength(3.2);\n// => 3\n\n_.toLength(Number.MIN_VALUE);\n// => 0\n\n_.toLength(Infinity);\n// => 4294967295\n\n_.toLength('3.2');\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Mixin Function to Extend Functionality in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _.mixin function to add custom methods to Lodash. It shows how to create a vowels function and add it to both the Lodash object and its prototype, demonstrating both chained and non-chained usage.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_285\n\nLANGUAGE: javascript\nCODE:\n```\nfunction vowels(string) {\n  return _.filter(string, function(v) {\n    return /[aeiou]/i.test(v);\n  });\n}\n\n_.mixin({ 'vowels': vowels });\n_.vowels('fred');\n// => ['e']\n\n_('fred').vowels().value();\n// => ['e']\n\n_.mixin({ 'vowels': vowels }, { 'chain': false });\n_('fred').vowels();\n// => ['e']\n```\n\n----------------------------------------\n\nTITLE: Using isWeakSet() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isWeakSet() function to check if a value is classified as a WeakSet object. This function distinguishes between WeakSet and other set-like objects such as Set.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\n_.isWeakSet(new WeakSet);\n// => true\n\n_.isWeakSet(new Set);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Deferring Function Execution with Lodash defer\nDESCRIPTION: Demonstrates how to use _.defer() to delay function execution until the current call stack has cleared. This is similar to setTimeout with a delay of 0ms but provides a cleaner syntax.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n_.defer(function(text) {\n  console.log(text);\n}, 'deferred');\n// => Logs 'deferred' after one millisecond.\n```\n\n----------------------------------------\n\nTITLE: Using Lodash bindKey for Method Binding in JavaScript\nDESCRIPTION: Demonstrates how to use _.bindKey() to create a bound function that invokes a method on an object. The function maintains the binding even if the original method is changed after binding.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nvar object = {\n  'user': 'fred',\n  'greet': function(greeting, punctuation) {\n    return greeting + ' ' + this.user + punctuation;\n  }\n};\n\nvar bound = _.bindKey(object, 'greet', 'hi');\nbound('!');\n// => 'hi fred!'\n\nobject.greet = function(greeting, punctuation) {\n  return greeting + 'ya ' + this.user + punctuation;\n};\n\nbound('!');\n// => 'hiya fred!'\n\n// Bound with placeholders.\nvar bound = _.bindKey(object, 'greet', _, '!');\nbound('hi');\n// => 'hiya fred!'\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.toLower() function to convert strings to lowercase. This function converts the entire string to lowercase, similar to String#toLowerCase.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_261\n\nLANGUAGE: javascript\nCODE:\n```\n_.toLower('--Foo-Bar--');\n// => '--foo-bar--'\n\n_.toLower('fooBar');\n// => 'foobar'\n\n_.toLower('__FOO_BAR__');\n// => '__foo_bar__'\n```\n\n----------------------------------------\n\nTITLE: Length Validation in JavaScript with Lodash\nDESCRIPTION: Example of using _.isLength() to check if a value is a valid array-like length, based on ToLength specification.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_143\n\nLANGUAGE: javascript\nCODE:\n```\n_.isLength(3);\n// => true\n\n_.isLength(Number.MIN_VALUE);\n// => false\n\n_.isLength(Infinity);\n// => false\n\n_.isLength('3');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Finding Last Sorted Index in JavaScript Array using Lodash\nDESCRIPTION: Shows how to use _.sortedLastIndex() to find the highest index at which a value should be inserted into a sorted array to maintain its order.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sortedLastIndex([4, 5, 5, 5, 6], 5);\n// => 4\n```\n\n----------------------------------------\n\nTITLE: Converting to Safe Integers with _.toSafeInteger() in JavaScript\nDESCRIPTION: Shows how to use Lodash's toSafeInteger() method to convert values to safe integers that can be compared and represented correctly. It handles various input types and caps values at the maximum safe integer.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_172\n\nLANGUAGE: javascript\nCODE:\n```\n_.toSafeInteger(3.2);\n// => 3\n\n_.toSafeInteger(Number.MIN_VALUE);\n// => 0\n\n_.toSafeInteger(Infinity);\n// => 9007199254740991\n\n_.toSafeInteger('3.2');\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Binding Object Methods with Lodash bindAll() in JavaScript\nDESCRIPTION: Uses Lodash's bindAll() function to bind methods of an object to the object itself, overwriting existing methods. Useful for preserving 'this' context in callbacks.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_272\n\nLANGUAGE: javascript\nCODE:\n```\nvar view = {\n  'label': 'docs',\n  'click': function() {\n    console.log('clicked ' + this.label);\n  }\n};\n\n_.bindAll(view, ['click']);\njQuery(element).on('click', view.click);\n// => Logs 'clicked docs' when clicked.\n```\n\n----------------------------------------\n\nTITLE: Finding Sorted Index in JavaScript Array using Lodash\nDESCRIPTION: Demonstrates the usage of _.sortedIndex() to find the index at which a value should be inserted into a sorted array to maintain its order.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sortedIndex([30, 50], 40);\n// => 1\n```\n\n----------------------------------------\n\nTITLE: Trimming Leading Characters from Strings with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.trimStart() function to remove leading whitespace or specified characters from a string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_265\n\nLANGUAGE: javascript\nCODE:\n```\n_.trimStart('  abc  ');\n// => 'abc  '\n\n_.trimStart('-_-abc-_-', '_-');\n// => 'abc-_-'\n```\n\n----------------------------------------\n\nTITLE: Using thru Method to Replace Intermediate Results in a Lodash Chain\nDESCRIPTION: This example demonstrates how to use the thru method to replace an intermediate result in a method chain. It processes a string by trimming whitespace and then replacing the result with a new array containing the trimmed string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_239\n\nLANGUAGE: javascript\nCODE:\n```\n_('  abc  ')\n .chain()\n .trim()\n .thru(function(value) {\n   return [value];\n })\n .value();\n// => ['abc']\n```\n\n----------------------------------------\n\nTITLE: Finding Last Sorted Index with Custom Iteratee in JavaScript using Lodash\nDESCRIPTION: Demonstrates the usage of _.sortedLastIndexBy() to find the highest insertion index in a sorted array of objects using a custom iteratee function or property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 1\n\n// The `_.property` iteratee shorthand.\n_.sortedLastIndexBy(objects, { 'x': 4 }, 'x');\n// => 1\n```\n\n----------------------------------------\n\nTITLE: Using multiply() method in Lodash\nDESCRIPTION: Multiplies two numbers using Lodash's multiply method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_185\n\nLANGUAGE: javascript\nCODE:\n```\n_.multiply(6, 4);\n// => 24\n```\n\n----------------------------------------\n\nTITLE: Checking for Object Property Existence Including Inherited Properties with Lodash hasIn Method in JavaScript\nDESCRIPTION: The _.hasIn method checks if a specified path is a direct or inherited property of an object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_212\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar object = _.create({ 'a': _.create({ 'b': 2 }) });\n\n_.hasIn(object, 'a');\n// => true\n\n_.hasIn(object, 'a.b');\n// => true\n\n_.hasIn(object, ['a', 'b']);\n// => true\n\n_.hasIn(object, 'b');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Negating Predicate Functions with Lodash in JavaScript\nDESCRIPTION: Shows how to use _.negate to create a function that negates the result of a predicate function. Demonstrates negating an isEven function for filtering odd numbers.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isEven(n) {\n  return n % 2 == 0;\n}\n\n_.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n// => [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Padding Strings on the Right Side with Lodash in JavaScript\nDESCRIPTION: Demonstrates using Lodash's padEnd function to add padding characters to the end of a string until it reaches the desired length. Useful for alignment in monospaced contexts.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_251\n\nLANGUAGE: javascript\nCODE:\n```\n_.padEnd('abc', 6);\n// => 'abc   '\n\n_.padEnd('abc', 6, '_-');\n// => 'abc_-_'\n\n_.padEnd('abc', 3);\n// => 'abc'\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Strings with _.toString() in JavaScript\nDESCRIPTION: Illustrates Lodash's toString() method which converts various value types to strings. It returns empty strings for null and undefined, preserves the sign of negative zero, and joins array elements.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_173\n\nLANGUAGE: javascript\nCODE:\n```\n_.toString(null);\n// => ''\n\n_.toString(-0);\n// => '-0'\n\n_.toString([1, 2, 3]);\n// => '1,2,3'\n```\n\n----------------------------------------\n\nTITLE: Creating Constant Functions with Lodash constant() in JavaScript\nDESCRIPTION: Uses Lodash's constant() function to create a function that always returns the same value, regardless of arguments passed to it.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_275\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = _.times(2, _.constant({ 'a': 1 }));\n\nconsole.log(objects);\n// => [{ 'a': 1 }, { 'a': 1 }]\n\nconsole.log(objects[0] === objects[1]);\n// => true\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from Sorted JavaScript Array with Custom Iteratee using Lodash\nDESCRIPTION: Shows how to use _.sortedUniqBy() to create a new array with unique values from a sorted array, using a custom iteratee function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);\n// => [1.1, 2.3]\n```\n\n----------------------------------------\n\nTITLE: Using round() method in Lodash with precision\nDESCRIPTION: Rounds a number to a specified precision using Lodash's round method. Supports different precision levels including negative precision.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_186\n\nLANGUAGE: javascript\nCODE:\n```\n_.round(4.006);\n// => 4\n\n_.round(4.006, 2);\n// => 4.01\n\n_.round(4060, -2);\n// => 4100\n```\n\n----------------------------------------\n\nTITLE: Creating Function with Capped Arguments in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.ary method to create a function that invokes the provided function with up to N arguments, ignoring any additional arguments.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_93\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.map(['6', '8', '10'], _.ary(parseInt, 1));\n// => [6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Finding Sorted Index with Custom Iteratee in JavaScript using Lodash\nDESCRIPTION: Shows how to use _.sortedIndexBy() to find the insertion index in a sorted array of objects using a custom iteratee function or property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar objects = [{ 'x': 4 }, { 'x': 5 }];\n\n_.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\n// => 0\n\n// The `_.property` iteratee shorthand.\n_.sortedIndexBy(objects, { 'x': 4 }, 'x');\n// => 0\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integers with _.toInteger() in JavaScript\nDESCRIPTION: Demonstrates Lodash's toInteger() method which converts various values to integers. Based on ECMAScript's ToInteger operation, it handles decimal numbers, minimum values, infinity, and string representations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_168\n\nLANGUAGE: javascript\nCODE:\n```\n_.toInteger(3.2);\n// => 3\n\n_.toInteger(Number.MIN_VALUE);\n// => 0\n\n_.toInteger(Infinity);\n// => 1.7976931348623157e+308\n\n_.toInteger('3.2');\n// => 3\n```\n\n----------------------------------------\n\nTITLE: Creating Object Property Accessors with _.propertyOf\nDESCRIPTION: Shows how to create property accessor functions for a specific object using _.propertyOf.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_293\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [0, 1, 2],\n    object = { 'a': array, 'b': array, 'c': array };\n\n_.map(['a[2]', 'c[0]'], _.propertyOf(object));\n// => [2, 0]\n\n_.map([['a', '2'], ['c', '0']], _.propertyOf(object));\n// => [2, 0]\n```\n\n----------------------------------------\n\nTITLE: Using mean() method in Lodash\nDESCRIPTION: Computes the mean of the values in an array using Lodash's mean method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_181\n\nLANGUAGE: javascript\nCODE:\n```\n_.mean([4, 2, 8, 6]);\n// => 5\n```\n\n----------------------------------------\n\nTITLE: Using subtract() method in Lodash\nDESCRIPTION: Subtracts the second number from the first using Lodash's subtract method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_187\n\nLANGUAGE: javascript\nCODE:\n```\n_.subtract(6, 4);\n// => 2\n```\n\n----------------------------------------\n\nTITLE: Converting to Property Paths with _.toPath\nDESCRIPTION: Demonstrates converting string paths to property path arrays using _.toPath.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_303\n\nLANGUAGE: javascript\nCODE:\n```\n_.toPath('a.b.c');\n// => ['a', 'b', 'c']\n\n_.toPath('a[0].b.c');\n// => ['a', '0', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from End of JavaScript Array with Predicate using Lodash\nDESCRIPTION: Shows how to use _.takeRightWhile() to create a new array with elements taken from the end of the input array until the predicate returns falsey.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.takeRightWhile(users, function(o) { return !o.active; });\n// => objects for ['fred', 'pebbles']\n\n// The `_.matches` iteratee shorthand.\n_.takeRightWhile(users, { 'user': 'pebbles', 'active': false });\n// => objects for ['pebbles']\n\n// The `_.matchesProperty` iteratee shorthand.\n_.takeRightWhile(users, ['active', false]);\n// => objects for ['fred', 'pebbles']\n\n// The `_.property` iteratee shorthand.\n_.takeRightWhile(users, 'active');\n// => []\n```\n\n----------------------------------------\n\nTITLE: Using isTypedArray() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isTypedArray() function to check if a value is classified as a typed array, such as Uint8Array. This distinguishes between JavaScript's typed arrays and regular arrays.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_160\n\nLANGUAGE: javascript\nCODE:\n```\n_.isTypedArray(new Uint8Array);\n// => true\n\n_.isTypedArray([]);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Object Properties in Reverse with Lodash forInRight Method in JavaScript\nDESCRIPTION: The _.forInRight method is similar to _.forIn, but iterates over properties of the object in the opposite order. It returns the original object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_205\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forInRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.\n```\n\n----------------------------------------\n\nTITLE: Generating Reversed Number Ranges with _.rangeRight\nDESCRIPTION: Demonstrates generating arrays of numbers in descending order using _.rangeRight.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_295\n\nLANGUAGE: javascript\nCODE:\n```\n_.rangeRight(4);\n// => [3, 2, 1, 0]\n\n_.rangeRight(-4);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 5);\n// => [4, 3, 2, 1]\n\n_.rangeRight(0, 20, 5);\n// => [15, 10, 5, 0]\n\n_.rangeRight(0, -4, -1);\n// => [-3, -2, -1, 0]\n\n_.rangeRight(1, 4, 0);\n// => [1, 1, 1]\n\n_.rangeRight(0);\n// => []\n```\n\n----------------------------------------\n\nTITLE: Using sum() method in Lodash\nDESCRIPTION: Computes the sum of values in an array using Lodash's sum method.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_188\n\nLANGUAGE: javascript\nCODE:\n```\n_.sum([4, 2, 8, 6]);\n// => 20\n```\n\n----------------------------------------\n\nTITLE: Adding Numbers with _.add() in JavaScript\nDESCRIPTION: Demonstrates Lodash's add() math utility which adds two numbers together. This utility function provides a functional approach to addition operations.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_174\n\nLANGUAGE: javascript\nCODE:\n```\n_.add(6, 4);\n// => 10\n```\n\n----------------------------------------\n\nTITLE: Right to Left Array Search with findLastIndex\nDESCRIPTION: Shows usage of _.findLastIndex which searches array from right to left. Similar to findIndex but in reverse direction, supporting the same predicate formats.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar users = [\n  { 'user': 'barney',  'active': true },\n  { 'user': 'fred',    'active': false },\n  { 'user': 'pebbles', 'active': false }\n];\n\n_.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n// => 2\n\n// The `_.matches` iteratee shorthand.\n_.findLastIndex(users, { 'user': 'barney', 'active': true });\n// => 0\n\n// The `_.matchesProperty` iteratee shorthand.\n_.findLastIndex(users, ['active', false]);\n// => 2\n\n// The `_.property` iteratee shorthand.\n_.findLastIndex(users, 'active');\n// => 0\n```\n\n----------------------------------------\n\nTITLE: Using _.unzip Method in JavaScript with Lodash\nDESCRIPTION: Demonstrates the unzip method which accepts an array of grouped elements and creates an array regrouping the elements to their pre-zip configuration. It transforms arrays of row-like entries to arrays of column-like entries.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar zipped = _.zip(['a', 'b'], [1, 2], [true, false]);\n// => [['a', 1, true], ['b', 2, false]]\n\n_.unzip(zipped);\n// => [['a', 'b'], [1, 2], [true, false]]\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Own Object Properties in Reverse with Lodash forOwnRight Method in JavaScript\nDESCRIPTION: The _.forOwnRight method is similar to _.forOwn, but iterates over properties of the object in the opposite order. It returns the original object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_207\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  this.a = 1;\n  this.b = 2;\n}\n\nFoo.prototype.c = 3;\n\n_.forOwnRight(new Foo, function(value, key) {\n  console.log(key);\n});\n// => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.\n```\n\n----------------------------------------\n\nTITLE: Checking Greater Than or Equal in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.gte to check if one value is greater than or equal to another. This function works with numbers and other comparable values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_125\n\nLANGUAGE: JavaScript\nCODE:\n```\n_.gte(3, 1);\n// => true\n\n_.gte(3, 3);\n// => true\n\n_.gte(1, 3);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Lodash Commit Method Example\nDESCRIPTION: Shows how to execute a chain sequence and modify the underlying array using commit()\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_243\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1, 2];\nvar wrapped = _(array).push(3);\n\nconsole.log(array);\n// => [1, 2]\n\nwrapped = wrapped.commit();\nconsole.log(array);\n// => [1, 2, 3]\n\nwrapped.last();\n// => 3\n\nconsole.log(array);\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Making Lodash Wrapper Iterable with Symbol.iterator\nDESCRIPTION: This example shows how the Lodash wrapper implements the iteration protocol using Symbol.iterator. It demonstrates that the iterator function returns the wrapper itself, making it compatible with ES6 iteration functionality like Array.from().\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_240\n\nLANGUAGE: javascript\nCODE:\n```\nvar wrapped = _([1, 2]);\n\nwrapped[Symbol.iterator]() === wrapped;\n// => true\n\nArray.from(wrapped);\n// => [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Creating Function Invoked Before N Calls in JavaScript using Lodash\nDESCRIPTION: Uses Lodash's _.before method to create a function that invokes the provided function while it's called less than N times. Subsequent calls return the result of the last invocation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_94\n\nLANGUAGE: JavaScript\nCODE:\n```\njQuery(element).on('click', _.before(5, addContactToList));\n// => Allows adding up to 4 contacts to the list.\n```\n\n----------------------------------------\n\nTITLE: Using Lodash NoConflict Function to Restore Global Variable in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the _.noConflict function to revert the _ variable to its previous value and get a reference to the Lodash function. This is useful when working in environments where multiple libraries use the _ identifier.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_286\n\nLANGUAGE: javascript\nCODE:\n```\nvar lodash = _.noConflict();\n```\n\n----------------------------------------\n\nTITLE: Getting Function Property Names Including Inherited Properties with Lodash functionsIn Method in JavaScript\nDESCRIPTION: The _.functionsIn method creates an array of function property names from own and inherited enumerable properties of an object.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_209\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction Foo() {\n  this.a = _.constant('a');\n  this.b = _.constant('b');\n}\n\nFoo.prototype.c = _.constant('c');\n\n_.functionsIn(new Foo);\n// => ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Using isNumber() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isNumber() function to check if a value is classified as a Number primitive or object. The function returns true for proper numbers, MIN_VALUE, and Infinity, but false for string representations of numbers.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\n_.isNumber(3);\n// => true\n\n_.isNumber(Number.MIN_VALUE);\n// => true\n\n_.isNumber(Infinity);\n// => true\n\n_.isNumber('3');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Lodash Reverse Method Example\nDESCRIPTION: Demonstrates reversing an array using the wrapper version of reverse()\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_246\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [1, 2, 3];\n\n_(array).reverse().value()\n// => [3, 2, 1]\n\nconsole.log(array);\n// => [3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Capitalizing First Character of Strings with Lodash in JavaScript\nDESCRIPTION: Demonstrates the usage of _.upperFirst() function to convert the first character of a string to uppercase.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_269\n\nLANGUAGE: javascript\nCODE:\n```\n_.upperFirst('fred');\n// => 'Fred'\n\n_.upperFirst('FRED');\n// => 'FRED'\n```\n\n----------------------------------------\n\nTITLE: Using Lodash's gte Method for Numeric Comparison in JavaScript\nDESCRIPTION: The _.gte method compares two values and returns true if the first value is greater than or equal to the second value. This is useful for numeric comparisons without writing explicit comparison operators.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\n_.gte(3, 1);\n// => true\n\n_.gte(3, 3);\n// => true\n\n_.gte(1, 3);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Getting Nth Element with Lodash\nDESCRIPTION: Gets element at specified index from array. Supports negative indices to get elements from end.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = ['a', 'b', 'c', 'd'];\n\n_.nth(array, 1);\n// => 'b'\n\n_.nth(array, -2);\n// => 'c';\n```\n\n----------------------------------------\n\nTITLE: Lodash Iterator Protocol Implementation\nDESCRIPTION: Demonstrates using next() to implement the iterator protocol on wrapped objects\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_244\n\nLANGUAGE: javascript\nCODE:\n```\nvar wrapped = _([1, 2]);\n\nwrapped.next();\n// => { 'done': false, 'value': 1 }\n\nwrapped.next();\n// => { 'done': false, 'value': 2 }\n\nwrapped.next();\n// => { 'done': true, 'value': undefined }\n```\n\n----------------------------------------\n\nTITLE: Using isUndefined() for Type Checking in JavaScript\nDESCRIPTION: Demonstrates how to use Lodash's isUndefined() function to check if a value is undefined. It specifically checks for the undefined primitive value, distinguishing it from null.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\n_.isUndefined(void 0);\n// => true\n\n_.isUndefined(null);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using Join Method in Lodash\nDESCRIPTION: Joins array elements with a separator string.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n_.join(['a', 'b', 'c'], '~');\n// => 'a~b~c'\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings into Words with Lodash in JavaScript\nDESCRIPTION: Uses Lodash's words() function to split a string into an array of words. Can optionally provide a custom pattern for matching words.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_270\n\nLANGUAGE: javascript\nCODE:\n```\n_.words('fred, barney, & pebbles');\n// => ['fred', 'barney', 'pebbles']\n\n_.words('fred, barney, & pebbles', /[^, ]+/g);\n// => ['fred', 'barney', '&', 'pebbles']\n```\n\n----------------------------------------\n\nTITLE: Checking for Date Objects with Lodash's isDate Method in JavaScript\nDESCRIPTION: The _.isDate method determines if a value is classified as a Date object. It returns true only for actual Date instances, not for date strings or other values, providing reliable date object validation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\n_.isDate(new Date);\n// => true\n\n_.isDate('Mon April 23 2012');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using PullAllWith Custom Comparator\nDESCRIPTION: Removes array elements using custom comparator function for matching values.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];\n\n_.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);\nconsole.log(array);\n// => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n```\n\n----------------------------------------\n\nTITLE: Lodash Value Method Usage\nDESCRIPTION: Shows how to resolve and unwrap a chain sequence using value()\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_247\n\nLANGUAGE: javascript\nCODE:\n```\n_([1, 2, 3]).value();\n// => [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: NaN Checking in JavaScript with Lodash\nDESCRIPTION: Example of using _.isNaN() to check if a value is NaN, based on Number.isNaN().\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_147\n\nLANGUAGE: javascript\nCODE:\n```\n_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Arrays with _.stubArray\nDESCRIPTION: Demonstrates generating new empty arrays using _.stubArray.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_297\n\nLANGUAGE: javascript\nCODE:\n```\nvar arrays = _.times(2, _.stubArray);\n\nconsole.log(arrays);\n// => [[], []]\n\nconsole.log(arrays[0] === arrays[1]);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using Lodash Noop Function as an Empty Callback in JavaScript\nDESCRIPTION: This snippet demonstrates the _.noop function, which is a utility that returns undefined. It's useful as a default callback or placeholder function when you need to pass a function but don't need it to perform any operation.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_287\n\nLANGUAGE: javascript\nCODE:\n```\n_.times(2, _.noop);\n// => [undefined, undefined]\n```\n\n----------------------------------------\n\nTITLE: Error Type Checking in JavaScript with Lodash\nDESCRIPTION: Example showing how to use _.isError() to check if a value is an Error object instance.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\n_.isError(new Error);\n// => true\n\n_.isError(Error);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using PullAt to Remove Elements by Index\nDESCRIPTION: Removes and returns array elements at specified indexes.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar array = ['a', 'b', 'c', 'd'];\nvar pulled = _.pullAt(array, [1, 3]);\n\nconsole.log(array);\n// => ['a', 'c']\n\nconsole.log(pulled);\n// => ['b', 'd']\n```\n\n----------------------------------------\n\nTITLE: Building Lodash using lodash-cli\nDESCRIPTION: Commands to build different versions of Lodash using the lodash-cli tool. This generates the full build and core build of the library.\nSOURCE: https://github.com/lodash/lodash/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm run build\n$ lodash -o ./dist/lodash.js\n$ lodash core -o ./dist/lodash.core.js\n```\n\n----------------------------------------\n\nTITLE: Null Value Checking in JavaScript with Lodash\nDESCRIPTION: Shows usage of _.isNull() to specifically check if a value is null.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_150\n\nLANGUAGE: javascript\nCODE:\n```\n_.isNull(null);\n// => true\n\n_.isNull(void 0);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Objects with _.stubObject\nDESCRIPTION: Demonstrates generating new empty objects using _.stubObject.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_299\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = _.times(2, _.stubObject);\n\nconsole.log(objects);\n// => [{}, {}]\n\nconsole.log(objects[0] === objects[1]);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Finite Number Checking in JavaScript with Lodash\nDESCRIPTION: Shows usage of _.isFinite() to check if a value is a finite primitive number, based on Number.isFinite().\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\n_.isFinite(3);\n// => true\n\n_.isFinite(Number.MIN_VALUE);\n// => true\n\n_.isFinite(Infinity);\n// => false\n\n_.isFinite('3');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Lodash Versions in Markdown Table\nDESCRIPTION: A markdown table showing which versions of Lodash are currently supported with security updates. Version 4.x is supported, while versions 3.x, 2.x, and 1.x are not.\nSOURCE: https://github.com/lodash/lodash/blob/main/SECURITY.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 4.x   | :white_check_mark:   |\n| 3.x   | :x:                  |\n| 2.x   | :x:                  |\n| 1.x   | :x:                  |\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Strings with _.stubString\nDESCRIPTION: Shows how to generate empty strings using _.stubString.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_300\n\nLANGUAGE: javascript\nCODE:\n```\n_.times(2, _.stubString);\n// => ['', '']\n```\n\n----------------------------------------\n\nTITLE: Checking for DOM Elements with Lodash's isElement Method in JavaScript\nDESCRIPTION: The _.isElement method checks if a value is likely a DOM element. It returns true for actual DOM node elements but false for strings or other non-element values, useful for DOM manipulation functions.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\n_.isElement(document.body);\n// => true\n\n_.isElement('<body>');\n// => false\n```\n\n----------------------------------------\n\nTITLE: Creating False Values with _.stubFalse\nDESCRIPTION: Shows how to generate false values using _.stubFalse.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_298\n\nLANGUAGE: javascript\nCODE:\n```\n_.times(2, _.stubFalse);\n// => [false, false]\n```\n\n----------------------------------------\n\nTITLE: Native Function Detection in JavaScript with Lodash\nDESCRIPTION: Shows how to use _.isNative() to check if a value is a pristine native function.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_148\n\nLANGUAGE: javascript\nCODE:\n```\n_.isNative(Array.prototype.push);\n// => true\n\n_.isNative(_);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Creating True Values with _.stubTrue\nDESCRIPTION: Demonstrates generating true values using _.stubTrue.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_301\n\nLANGUAGE: javascript\nCODE:\n```\n_.times(2, _.stubTrue);\n// => [true, true]\n```\n\n----------------------------------------\n\nTITLE: Checking for Arguments Object with Lodash's isArguments Method in JavaScript\nDESCRIPTION: The _.isArguments method determines if a value is an arguments object. It returns true if the value is an arguments object and false otherwise, which is useful for function parameter handling.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\n_.isArguments(function() { return arguments; }());\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false\n```\n\n----------------------------------------\n\nTITLE: Using minBy() method in Lodash with iteratee function\nDESCRIPTION: Finds the minimum value in an array based on the criteria returned by an iteratee function. Supports both custom functions and property shorthand.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_184\n\nLANGUAGE: javascript\nCODE:\n```\nvar objects = [{ 'n': 1 }, { 'n': 2 }];\n\n_.minBy(objects, function(o) { return o.n; });\n// => { 'n': 1 }\n\n// The `_.property` iteratee shorthand.\n_.minBy(objects, 'n');\n// => { 'n': 1 }\n```\n\n----------------------------------------\n\nTITLE: Lodash Plant Method Usage\nDESCRIPTION: Shows how to create a clone of a chain sequence with a new wrapped value using plant()\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_245\n\nLANGUAGE: javascript\nCODE:\n```\nfunction square(n) {\n  return n * n;\n}\n\nvar wrapped = _([1, 2]).map(square);\nvar other = wrapped.plant([3, 4]);\n\nother.value();\n// => [9, 16]\n\nwrapped.value();\n// => [1, 4]\n```\n\n----------------------------------------\n\nTITLE: Creating New Lodash Instance with _.runInContext\nDESCRIPTION: Shows how to create a new Lodash instance with isolated mixin functionality.\nSOURCE: https://github.com/lodash/lodash/blob/main/doc/README.md#2025-04-17_snippet_296\n\nLANGUAGE: javascript\nCODE:\n```\n_.mixin({ 'foo': _.constant('foo') });\n\nvar lodash = _.runInContext();\nlodash.mixin({ 'bar': lodash.constant('bar') });\n\n_.isFunction(_.foo);\n// => true\n_.isFunction(_.bar);\n// => false\n\nlodash.isFunction(lodash.foo);\n// => false\nlodash.isFunction(lodash.bar);\n// => true\n\n// Create a suped-up `defer` in Node.js.\nvar defer = _.runInContext({ 'setTimeout': setImmediate }).defer;\n```\n\n----------------------------------------\n\nTITLE: Including Lodash in HTML\nDESCRIPTION: Example of how to include Lodash in a browser environment using a script tag. This loads the full build of Lodash.\nSOURCE: https://github.com/lodash/lodash/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"lodash.js\"></script>\n```"
  }
]