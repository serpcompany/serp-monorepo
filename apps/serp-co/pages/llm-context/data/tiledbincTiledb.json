[
  {
    "owner": "tiledb-inc",
    "repo": "tiledb",
    "content": "TITLE: Configuring TileDB C API Enumeration Object Library in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the TileDB C API enumeration component. It includes common settings, defines source files, and creates an object library target with specific dependencies and link libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/enumeration/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES enumeration_api.cc)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_enumeration_stub)\n  this_target_sources(enumeration_api.cc)\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_buffer_stub capi_string constants)\n  this_target_object_libraries(enumeration)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Library Targets and Version Information in CMake\nDESCRIPTION: Sets up the main TileDB library target, configures version information, and handles platform-specific settings for library naming and symbol exports. Also generates and installs the export header.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tiledb $<TARGET_OBJECTS:TILEDB_CORE_OBJECTS>)\n\nif(BUILD_SHARED_LIBS)\n  set_target_properties(tiledb PROPERTIES EXPORT_NAME tiledb_shared)\nelse()\n  set_target_properties(tiledb PROPERTIES EXPORT_NAME tiledb_static)\nendif()\n\nif(TILEDB_REMOVE_DEPRECATIONS)\n  target_compile_definitions(tiledb PUBLIC TILEDB_REMOVE_DEPRECATIONS)\nendif()\n\nfile(READ \"${CMAKE_CURRENT_SOURCE_DIR}/sm/c_api/tiledb_version.h\" ver)\n\nstring(REGEX MATCH \"TILEDB_VERSION_MAJOR ([0-9]*)\" _ ${ver})\nset(ver_major ${CMAKE_MATCH_1})\n\nstring(REGEX MATCH \"TILEDB_VERSION_MINOR ([0-9]*)\" _ ${ver})\nset(ver_minor ${CMAKE_MATCH_1})\n\nstring(REGEX MATCH \"TILEDB_VERSION_PATCH ([0-9]*)\" _ ${ver})\nset(ver_patch ${CMAKE_MATCH_1})\n\nset(VERSION \"${ver_major}.${ver_minor}.${ver_patch}\")\n\nif (WIN32 AND BUILD_SHARED_LIBS)\n  set(TDB_WIN32_FILEVERSION \"${ver_major},${ver_minor},${ver_patch},0\")\n  set(TDB_WIN32_FILEVERSION_STR \"\\\"${ver_major}.${ver_minor}.${ver_patch}\\\"\")\n  configure_file(\n          ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/inputs/tiledb_win32_verinfo.rc.in\n          ${CMAKE_CURRENT_BINARY_DIR}/tiledb_win32_verinfo.rc\n          @ONLY\n  )\n\n  target_sources(tiledb PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/tiledb_win32_verinfo.rc)\n  target_include_directories(tiledb\n    PRIVATE\n      \"${TILEDB_CORE_INCLUDE_DIR}\"\n    )\nendif()\n\nif (TILEDB_VERSION AND CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  set_target_properties(tiledb\n    PROPERTIES\n      SOVERSION \"${TILEDB_VERSION_MAJOR}.${TILEDB_VERSION_MINOR}\")\nendif()\n\ntarget_link_libraries(tiledb\n  PRIVATE\n    $<TARGET_PROPERTY:TILEDB_CORE_OBJECTS_ILIB,INTERFACE_LINK_LIBRARIES>\n    $<BUILD_INTERFACE:TILEDB_CORE_OBJECTS>\n)\n\nif (WIN32 AND NOT BUILD_SHARED_LIBS)\n  set_target_properties(tiledb\n    PROPERTIES\n      OUTPUT_NAME \"tiledbstatic\"\n  )\nendif()\n\ninclude(GenerateExportHeader)\ngenerate_export_header(tiledb\n  BASE_NAME tiledb\n)\nconfigure_file(${TILEDB_EXPORT_HEADER} ${TILEDB_LOCALINSTALL_INCLUDE}/${TILEDB_EXPORT_HEADER_LOCALINSTALL_PATH} COPYONLY)\n\ntarget_compile_definitions(TILEDB_CORE_OBJECTS PRIVATE -Dtiledb_EXPORTS)\ntarget_include_directories(TILEDB_CORE_OBJECTS PRIVATE ${TILEDB_EXPORT_HEADER_DIR})\n\nlist(APPEND TILEDB_PUBLIC_HEADERS\n  ${TILEDB_EXPORT_HEADER}\n)\n\nset_target_properties(tiledb\n  PROPERTIES\n    PUBLIC_HEADER \"${TILEDB_PUBLIC_HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: TileDB Query Results Directory Structure\nDESCRIPTION: Directory structure hierarchy showing the organization of temporary files during the external merge sort process. Shows how query results are organized into iterations, passes, blocks, and attributes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/external_sort/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nquery-results\n├── iter_000 (group, set of big blocks, corresponding to one query)\n│   ├── pass_000 (group, one big block, set of blocks)\n│   │   ├── block_000 (one array, sorted)\n│   │   │   ├── attr_0\n│   │   │   │   ├── attr_0_data\n│   │   │   │   ├── attr_0_offsets\n│   │   │   │   └── attr_N_validity\n│   │   │   ├── attr_1\n│   │   │   ...\n│   │   │   └── attr_N\n│   │   ├── block_001\n│   │   │   ...\n│   │   └── block_M\n│   ├── pass_001\n│   ...\n│   └── pass_L\n├── iter_001\n...\n└── iter_K\n```\n\n----------------------------------------\n\nTITLE: TileDB C API Function Changes\nDESCRIPTION: List of new functions added to the TileDB C API, including array operations, query handling, VFS operations, and configuration parameters.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_50\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_alloc\ntiledb_array_{open, close, free}\ntiledb_array_reopen\ntiledb_array_is_open\ntiledb_array_get_query_type\ntiledb_array_get_schema\ntiledb_array_max_buffer_size\ntiledb_array_max_buffer_size_var\n```\n\n----------------------------------------\n\nTITLE: Setting Separate Coordinate Buffers in TileDB v2.0.0\nDESCRIPTION: Illustrates how to set separate coordinate buffers for different dimensions in a query after the v2.0.0 API changes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_31\n\nLANGUAGE: C++\nCODE:\n```\nQuery query(ctx, array);\nstd::vector<int> coords_x = {1, 2, 3};\nstd::vector<int> coords_y = {4, 5, 6};\nquery.set_buffer(\"x\", coords_x);\nquery.set_buffer(\"y\", coords_y);\n```\n\n----------------------------------------\n\nTITLE: C API Additions\nDESCRIPTION: New C API functions added including schema evolution timestamp range, validity filter list operations, and array schema version retrieval.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_12\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_schema_evolution_set_timestamp_range()\ntiledb_array_schema_get_version()\ntiledb_ctx_alloc_with_error()\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Object Management and VFS Functions\nDESCRIPTION: This section covers functions for TileDB object management and virtual file system (VFS) operations, including object type checking, removal, moving, and VFS bucket operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_9\n\nLANGUAGE: C\nCODE:\n```\ntiledb_object_type\ntiledb_object_remove\ntiledb_object_move\ntiledb_object_walk\ntiledb_object_ls\ntiledb_vfs_alloc\ntiledb_vfs_free\ntiledb_vfs_get_config\ntiledb_vfs_create_bucket\ntiledb_vfs_remove_bucket\ntiledb_vfs_empty_bucket\n```\n\n----------------------------------------\n\nTITLE: Creating TileDB Core Objects Library in CMake\nDESCRIPTION: Defines an object library target TILEDB_CORE_OBJECTS containing all TileDB core and external sources. Sets up include directories, dependencies, and links necessary libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(TILEDB_CORE_OBJECTS OBJECT\n    ${TILEDB_CORE_SOURCES}\n    ${TILEDB_EXTERNALS_SOURCES}\n)\n\nset(TILEDB_CORE_OBJECTS_LIBS\n  baseline\n)\n\nlist(TRANSFORM TILEDB_CORE_OBJECTS_LIBS PREPEND \"$<TARGET_OBJECTS:\" OUTPUT_VARIABLE TILEDB_CORE_OBJECTS_LIBS_SOURCES)\nlist(TRANSFORM TILEDB_CORE_OBJECTS_LIBS_SOURCES APPEND \">\" OUTPUT_VARIABLE TILEDB_CORE_OBJECTS_LIBS_SOURCES)\n\ntarget_sources(TILEDB_CORE_OBJECTS\n  PUBLIC\n    ${TILEDB_CORE_OBJECTS_LIBS_SOURCES}\n)\n\ntarget_link_libraries(TILEDB_CORE_OBJECTS\n  PUBLIC\n    ${TILEDB_CORE_OBJECTS_LIBS}\n)\n\ntarget_link_libraries(TILEDB_CORE_OBJECTS INTERFACE configuration_definitions)\n\nadd_dependencies(TILEDB_CORE_OBJECTS gen_mgc_unarch)\n\ntarget_include_directories(TILEDB_CORE_OBJECTS\n  PRIVATE\n    \"${TILEDB_CORE_INCLUDE_DIR}\"\n    \"${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/c_api\"\n    \"${TILEDB_EXTERNALS_INCLUDE_DIRS}\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/..\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Graph Function Objects in C++\nDESCRIPTION: Defines core function objects for the task graph system including a source function that generates sequences, a transform function for data processing, and a sink function for data consumption. Includes stopping mechanism through std::stop_source.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\nclass source_function {\n public:\n  size_t operator()(std::stop_source& stopper) {\n    static size_t i = 0;\n    if (i < 42) {\n      return i++;\n    stopper.request_stop();\n    return 0UL;\n  }\n};\n\ntemplate <class InItem = size_t, class OutItem = InItem>\nclass function {\n public:\n  OutItem operator()(const InItem& in) {\n    return in;\n  }\n};\n\ntemplate <class Item = size_t>\nclass sink_function {\n public:\n  void operator()(Item) {\n  }\n};\n\nsize_t actual_source_function(std::stop_source stop_source) {\n  static size_t i = 0;\n  if (i < 42) {}\n    return i++;\n  }\n  stop_source.request_stop();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AVX2 Support and Memory Resource Selection\nDESCRIPTION: Checks for AVX2 instruction set support and configures the project to use either C++17 polymorphic memory resources (pmr) or standard pmr based on system capabilities. This optimizes performance and memory management.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Definitions for all targets\nadd_definitions(-D_FILE_OFFSET_BITS=64)\n\n# AVX2 flag\ninclude(CheckAVX2Support)\nCheckAVX2Support()\nif (COMPILER_SUPPORTS_AVX2)\n  add_compile_options(${COMPILER_AVX2_FLAG})\nendif()\n\nif(TILEDB_SANITIZER)\n  validate_sanitizer_options()\nendif()\n\ninclude(DetectStdPmr)\n\nif(TILEDB_USE_CPP17_PMR)\n  message(STATUS \"Building with cpp17::pmr\")\n  add_definitions(-DUSE_CPP17_PMR)\nelse()\n  message(STATUS \"Building with std::pmr\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Group, Buffer, and BufferList Functions\nDESCRIPTION: This section documents functions for working with TileDB groups, buffers, and buffer lists, including creation, allocation, deallocation, and data manipulation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_8\n\nLANGUAGE: C\nCODE:\n```\ntiledb_group_create\ntiledb_group_dump_str\ntiledb_buffer_alloc\ntiledb_buffer_free\ntiledb_buffer_get_type\ntiledb_buffer_set_type\ntiledb_buffer_get_data\ntiledb_buffer_set_data\ntiledb_buffer_list_alloc\ntiledb_buffer_list_free\ntiledb_buffer_list_get_num_buffers\ntiledb_buffer_list_get_total_size\ntiledb_buffer_list_get_buffer\ntiledb_buffer_list_flatten\n```\n\n----------------------------------------\n\nTITLE: C API Wrapper Constructors in C++ API\nDESCRIPTION: API additions for Array and Context constructors that wrap existing C API objects in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_47\n\nLANGUAGE: C++\nCODE:\n```\nArray::Array(c_api_object)\nContext::Context(c_api_object)\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB Core Source Files in CMake\nDESCRIPTION: Lists the source files for the TileDB core library, including various components like query writers, serialization, stats, storage manager, etc. It appends common and API sources to the core sources list.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND TILEDB_CORE_SOURCES ${TILEDB_COMMON_SOURCES})\nlist(APPEND TILEDB_CORE_SOURCES ${TILEDB_API_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Testing Environment in CMake\nDESCRIPTION: Sets up the testing environment for TileDB, including enabling testing, finding required packages like rapidcheck and Catch2, and creating a custom Catch2 entry point.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\n\nif(TILEDB_TESTS)\n  find_package(rapidcheck CONFIG REQUIRED)\n  find_package(Catch2 REQUIRED)\n  add_library(tiledb_Catch2WithMain STATIC\n    test/support/src/tdb_catch_main.cc)\n  target_link_libraries(tiledb_Catch2WithMain PUBLIC Catch2::Catch2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dimension Filter List and Cell Value Number Functions in C API\nDESCRIPTION: API additions for setting and getting filter lists and cell value numbers for dimensions in C.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_35\n\nLANGUAGE: C\nCODE:\n```\ntiledb_dimension_{set,get}_filter_list\ntiledb_dimension_{set,get}_cell_val_num\n```\n\n----------------------------------------\n\nTITLE: Edge Usage Example in C++\nDESCRIPTION: Example code demonstrating how to connect nodes using Edge instances, including type compatibility requirements and using type aliases for simplification.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nProducerNode a{source_function{}};\nConsumerNode b{sink_function{}};\n\nEdge<AsyncMover3> e{a, b};\n\ndouble other_source_function() {\n  return 0.0;\n}\n\nProducerNode c {other_source_function{}};\nConsumerNode d{sink_function{}};\n\nEdge<AsyncMover3> f{c, d};  // This will fail to compile because Item types of Producer and Consumer don't match.\n```\n\n----------------------------------------\n\nTITLE: Parsing TileDB Version from Header File\nDESCRIPTION: Reads the version information from tiledb_version.h header file and extracts the major, minor, and patch version numbers using regex pattern matching. This creates a standardized version string used throughout the build.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(READ \"${CMAKE_CURRENT_SOURCE_DIR}/tiledb/sm/c_api/tiledb_version.h\" VERFILE)\nif (NOT VERFILE)\n  message(FATAL_ERROR \"Failed to parse tiledb_version.h!\")\nendif()\n\nstring(REGEX MATCH \"TILEDB_VERSION_MAJOR ([0-9])*\" _ ${VERFILE})\nset(TILEDB_VERSION_MAJOR ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"TILEDB_VERSION_MINOR ([0-9]+)*\" _ ${VERFILE})\nset(TILEDB_VERSION_MINOR ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"TILEDB_VERSION_PATCH ([0-9]+)*\" _ ${VERFILE})\nset(TILEDB_VERSION_PATCH ${CMAKE_MATCH_1})\n\nset(TILEDB_VERSION \"${TILEDB_VERSION_MAJOR}.${TILEDB_VERSION_MINOR}.${TILEDB_VERSION_PATCH}\")\n```\n\n----------------------------------------\n\nTITLE: TileDB Group Member Addition API\nDESCRIPTION: New C API function for adding group members with type specification in a single call.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntiledb_group_add_member_with_type\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Query Functions\nDESCRIPTION: This section documents functions for working with TileDB queries, including allocation, configuration, buffer management, submission, and result retrieval.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_4\n\nLANGUAGE: C\nCODE:\n```\ntiledb_query_alloc\ntiledb_query_get_stats\ntiledb_query_set_config\ntiledb_query_get_config\ntiledb_query_set_data_buffer\ntiledb_query_set_offsets_buffer\ntiledb_query_set_validity_buffer\ntiledb_query_get_data_buffer\ntiledb_query_get_offsets_buffer\ntiledb_query_get_validity_buffer\ntiledb_query_set_layout\ntiledb_query_set_condition\ntiledb_query_finalize\ntiledb_query_submit_and_finalize\ntiledb_query_free\ntiledb_query_submit\ntiledb_query_get_status\ntiledb_query_get_type\ntiledb_query_get_layout\ntiledb_query_get_array\ntiledb_query_has_results\ntiledb_query_get_est_result_size\ntiledb_query_get_est_result_size_var\ntiledb_query_get_est_result_size_nullable\ntiledb_query_get_est_result_size_var_nullable\ntiledb_query_get_fragment_num\ntiledb_query_get_fragment_uri\ntiledb_query_get_fragment_timestamp_range\ntiledb_query_set_subarray_t\ntiledb_query_get_subarray_t\n```\n\n----------------------------------------\n\nTITLE: ConsumerNode Usage Example in C++\nDESCRIPTION: Example code demonstrating how to create a ConsumerNode instance with a sink function that processes size_t data items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nvoid sink_function(const size_t&);\nConsumer Node b{sink_function};\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Array Schema Object Library Build\nDESCRIPTION: Defines CMake build configuration for the array schema C API component. Sets up source files, includes common configurations, and establishes object library target with dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/array_schema/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  array_schema_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_array_schema_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(array_schema)\n  this_target_object_libraries(array)\n  this_target_object_libraries(capi_attribute_stub)\n  this_target_object_libraries(capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: C API Header File Structure Example\nDESCRIPTION: Demonstrates the typical structure and naming conventions for TileDB C API header files. The API is organized into sections with each having its own directory containing specific header types and source files. Files follow strict naming patterns like '<section>_api_external.h' for external headers and '<section>_api_internal.h' for internal headers.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/DIRECTORY.md#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n<section>_api_external.h\n<section>_api_internal.h\n<section>_api_enum.h\n<section>_api.cc\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB API Build Components\nDESCRIPTION: Sets up the build configuration for TileDB API components by including common root settings, adding relevant subdirectories, and gathering API source files for the parent scope.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common-root)\n\nadd_subdirectory(c_api)\nadd_subdirectory(c_api_support)\nadd_subdirectory(c_api_test_support)\nadd_subdirectory(cpp_api_support)\n\nget_gathered(API_SOURCES)\nset(TILEDB_API_SOURCES ${API_SOURCES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Sink State Machine Proof Outline in C\nDESCRIPTION: Detailed proof outline for the Sink component, including state transitions, predicates, and actions like pull, extract, and drain. It demonstrates the behavior of the Sink in relation to the Source.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_15\n\nLANGUAGE: C\nCODE:\n```\n  init: /* { state = 00 ∧ sink_item = empty } */\n  while (not done)\n     /* { state = 00 ∨ state = 01 } ∧ { sink_item = empty ∨ sink_item = full } */\n     /* Before client invokes the pull event, the source could have filled, filled and pushed, or done nothing */\n       if source filled: 00 → 10\n       if source filled and pushed 00 → 01\n       if source filled and pushed and filled 00 → 11\n       if source did nothing state does not change\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 10 } ∧ { sink_item = empty ∨ sink_item = full } */\n     client invokes pull event\n     state machine locks mutex\n     /* mutex = locked */\n\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧ { sink_item = empty ∨ sink_item = full } */\n     state machine executes pull exit action, which may be one of the following, depending on the state\n     restart:\n       { state = 01 ∨ state = 11 } → none\n       { state = 10 } → sink_swap \n       { state = 00 } → sink_wait\n         pre_sink_swap: /* { state = 10 } ∧ { sink_item = empty } */\n         post_sink_swap: /* { state = 10 } ∧ { sink_item = full } */\n\n         if { state = 00 } → execute sink_wait\n         pre_sink_wait: /* { state = 00 } */ \n           /* unlock mutex and wait for Source to become full */\n           /* Important! When the state machine comes back from wait, it is now no longer in the state it was when it started the wait. */\n           /* We therefore restart event processing for the pull event, given the state present when coming back from wait: goto restart.*/\n       /* { mutex = locked */\n\n       /* { state = 01 ∨ state = 10 ∨ state = 11 } ∧ { sink_item = full } */      \n       make state transition according to state transition table and state and next_state set by most recent event\n         { state = 01 ∨ state = 10 } → { state = 01 }\n         { state = 11 } → { state = 11 }\n\n       /* { state = 01 ∨ state = 11 } ∧ { sink_item = full } */\n       state machine invokes pull entry action (none)\n       /* post_entry: { state = 01 ∨ state = 11 } ∧ { sink_item = full } */ \n     state machine unlocks mutex\n     /* { mutex = unlocked */\n\n     /* post_pull: { state = 01 ∨ state = 11 } ∧ { sink_item = full } */\n\n     client of the sink extracts the item  /* Note that although the Source can execute and potentially change the\n                                                state here, the allowable transitions do not end up changing it */\n     /* { state = 01 ∨ state = 11 } ∧ { sink_item = empty } */\n     client invokes drain event to transition from full to empty \n     state machine locks mutex\n     /* { state = 01 ∨ state = 11 } ∧ { sink_item = empty } */\n     state machine performs exit action\n     if { state = 01 ∨ state = 11 } → none\n     { state = 01 ∨ state = 11 }\n     state machine performs transition\n     { state = 01 } → { state = 00 }\n     { state = 11 } → { state = 10 }\n     /* { state = 00 ∨ state = 10 } ∧ { sink_item = empty } */\n     state machine performs entry action\n       { state = 00 } → notify_source\n       { state = 10 } → notify_source\n     Sink returns\n     state machine unlocks mutex\n     /* end_loop: { state = 00 ∨ state = 10 } ∧ { sink_item = empty } */\n     At this point, the source could inject, fill, push\n        { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧ { sink_item = empty ∨ sink_item = full} */\n  /* post_loop: { state = 00 ∨ state = 10 } ∧ { sink_item = empty } */\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Buffer List API Build Process in CMake\nDESCRIPTION: This snippet sets up the build configuration for the TileDB Buffer List C API component. It includes common CMake modules, defines source files, creates an object library target, configures dependencies, and adds a test subdirectory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/buffer_list/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  buffer_list_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_buffer_list_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_context_stub)\n  this_target_object_libraries(buffer buffer_list)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Rebuilding TileDB After API Changes\nDESCRIPTION: Instructions for rebuilding TileDB after making C/C++ API additions, which requires rerunning the bootstrap script with appropriate flags.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../build\n$ ../bootstrap <flags>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build with CMake Directly\nDESCRIPTION: Commands to create a build directory and configure the build using CMake directly. This example enables Release build type, Ninja generator, and S3 support.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/BUILD.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release -GNinja -DTILEDB_S3=ON\n```\n\n----------------------------------------\n\nTITLE: Connecting Task Graph Nodes with Edges in C++\nDESCRIPTION: Shows how to connect different nodes in the task graph using Edge objects to establish data flow paths between nodes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\nEdge f{a, b};\nEdge g{b, c};\nEdge h{c, d};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with TileDB Dependencies\nDESCRIPTION: Sets up a CMake project that requires TileDB as a dependency. It specifies C++17 as the required standard, finds the TileDB package, creates an executable from a source file, and links it with the TileDB library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\nproject(TileDBExampleProj)\n\n# Set C++17 as required standard for all C++ targets (required to use the TileDB\n# C++ API).\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Find TileDB.\n#\n# If TileDB is not installed globally on your system, either set\n# CMAKE_PREFIX_PATH on the CMake command line:\n#   $ cmake -DCMAKE_PREFIX_PATH=/path/to/TileDB-installation ..\n# or you can hardcode it here e.g.\n#   list(APPEND CMAKE_PREFIX_PATH \"/path/to/TileDB-installation\")\nfind_package(TileDB \n  ${TILEDB_VERSION} EXACT\n  CONFIG\n  REQUIRED\n  )\n\n# Set up the example program.\nadd_executable(ExampleExe \"src/main.cc\")\n\n# Link the example program with the TileDB library.\n# This also configures include paths to find the TileDB headers.\ntarget_link_libraries(ExampleExe TileDB::tiledb)\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Query Condition Functions\nDESCRIPTION: This section documents functions for working with TileDB query conditions, including allocation, deallocation, initialization, and combination of conditions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\ntiledb_query_condition_alloc\ntiledb_query_condition_free\ntiledb_query_condition_init\ntiledb_query_condition_combine\n```\n\n----------------------------------------\n\nTITLE: Using std::tuple and std::optional with structured bindings in C++\nDESCRIPTION: This example demonstrates modern C++ return value patterns using std::tuple, std::optional, and structured bindings. It creates a non-copyable class with move semantics and shows how to return optional values that may or may not be initialized, along with test cases to verify the behavior.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/style/Functions.md#2025-04-16_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <optional>\n\nclass NC {\n  int x;\n  int y;\n public:\n  NC() = delete;\n  explicit NC(int x, int y) : x(x), y(y) {};\n  NC(const NC&) = delete; // No copy constructor\n  NC(NC&&) = default;  // ... but there is a move constructor\n  int operator()() const { return x; }\n};\n\nstd::tuple<bool, std::optional<NC>> foo() {\n  return {true,std::optional<NC>( std::in_place, 1, 3 )};\n}\n\nstd::tuple<bool, std::optional<NC>> bar() {\n  return {false, std::nullopt};\n}\n\nTEST_CASE(\"foo\")\n{\n  auto && [b, nc]{ foo() };\n  CHECK(b);\n  REQUIRE(nc.has_value());\n  CHECK((*nc)() == 1);\n}\n\nTEST_CASE(\"bar\")\n{\n  auto && [b, nc]{ bar() };\n  CHECK_FALSE(b);\n  CHECK_FALSE(nc.has_value());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Installation for TileDB Development in CMake\nDESCRIPTION: Configures local installation of TileDB headers for development purposes, including both C and C++ API headers. Creates an interface library for local installation include paths.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(TILEDB_LOCALINSTALL_DIR \"${CMAKE_BINARY_DIR}/dist-in-build\")\nset(TILEDB_LOCALINSTALL_INCLUDE \"${TILEDB_LOCALINSTALL_DIR}/include\")\n\n# C API\nforeach(HEADER ${TILEDB_C_API_FILENAME_HEADERS})\n  cmake_path(GET HEADER FILENAME HEADER_STRIPPED)\n  configure_file(${HEADER} ${TILEDB_LOCALINSTALL_INCLUDE}/tiledb/${HEADER_STRIPPED} COPYONLY)\nendforeach()\n\n# C++ API\nfile(GLOB TILEDB_CPP_HEADERS\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/cpp_api/*.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/cpp_api/tiledb\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/cpp_api/tiledb_experimental\"\n    )\nforeach(HEADER ${TILEDB_CPP_HEADERS})\n  string(REGEX\n      REPLACE \"^${CMAKE_SOURCE_DIR}/tiledb/sm/cpp_api/\" \"\"\n      HEADER_STRIPPED ${HEADER}\n      )\n  configure_file(${HEADER} ${TILEDB_LOCALINSTALL_INCLUDE}/tiledb/${HEADER_STRIPPED} COPYONLY)\nendforeach()\n\n# Interface library\nadd_library(local_install INTERFACE)\ntarget_include_directories(local_install INTERFACE ${TILEDB_LOCALINSTALL_INCLUDE})\ntarget_include_directories(local_install INTERFACE ${CMAKE_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Array Schema Functions\nDESCRIPTION: This section documents various functions for manipulating and querying TileDB array schemas, including getting filter lists, domains, tile orders, and attributes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_schema_get_offsets_filter_list\ntiledb_array_schema_get_validity_filter_list\ntiledb_array_schema_get_domain\ntiledb_array_schema_get_tile_order\ntiledb_array_schema_get_attribute_num\ntiledb_array_schema_get_attribute_from_index\ntiledb_array_schema_get_attribute_from_name\ntiledb_array_schema_has_attribute\ntiledb_array_schema_dump_str\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Core Object Library in CMake\nDESCRIPTION: Defines the main array object library with its source files and dependencies for core array functionality.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library array)\n    this_target_sources(array.cc consistency.cc)\n    this_target_object_libraries(\n        array_directory\n        array_schema_operations\n        fragment_metadata\n        metadata\n        object\n    )\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Context Object Library in CMake\nDESCRIPTION: Sets up CMake build configuration for TileDB context module. Defines source files, includes common build settings, and creates an object library with appropriate dependencies and linking instructions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/context/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    context_api.cc\n    )\ngather_sources(${SOURCES})\n\nlist(APPEND OTHER_SOURCES\n    # We need to recompile sources that depend on StorageManager to use the stub\n    ../../../sm/storage_manager/context.cc\n    )\n\ncommence(object_library capi_context_stub)\n  this_target_sources(${SOURCES} ${OTHER_SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_config_stub)\n  this_target_object_libraries(storage_manager_stub)\n  this_target_object_libraries(context_resources)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Cloning TileDB Repository and Checking Out Version\nDESCRIPTION: Commands to clone the TileDB GitHub repository and checkout a specific version. Replace <version> with the desired version number (e.g., 2.18.0).\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/BUILD.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/TileDB-Inc/TileDB.git\ncd TileDB\ngit checkout <version>\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Core Library Serialization Support in CMake\nDESCRIPTION: Sets up serialization support for the TileDB core library using Cap'n Proto. Includes configuration for generating serialization files and creating a custom target for updating serialization code.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(TILEDB_SERIALIZATION)\n  find_package(CapnProto REQUIRED)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n          INTERFACE\n          CapnProto::capnp\n          CapnProto::capnp-json\n          CapnProto::kj\n          )\n\n  target_sources(TILEDB_CORE_OBJECTS PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/sm/serialization/tiledb-rest.capnp.c++\n  )\n\n  set(TILEDB_SERIALIZATION_GENERATED_DIR\n      ${CMAKE_CURRENT_SOURCE_DIR}/sm/serialization)\n\n  set(CAPNP_PLUGIN_DIR $<TARGET_FILE_DIR:CapnProto::capnp_tool>)\n  list(APPEND CAPNP_COMPILE_COMMAND \"${CMAKE_COMMAND}\" -E env PATH=\"${CAPNP_PLUGIN_DIR}\" \"${CAPNP_EXECUTABLE}\" compile \"-I${CAPNP_INCLUDE_DIRECTORY}\")\n\n  list(APPEND CAPNP_COMPILE_COMMAND -oc++:\"${TILEDB_SERIALIZATION_GENERATED_DIR}\" \"${CMAKE_CURRENT_SOURCE_DIR}/sm/serialization/tiledb-rest.capnp\" --src-prefix=\"${CMAKE_CURRENT_SOURCE_DIR}/sm/serialization\")\n\n  add_custom_target(\n    update-serialization\n      ${CMAKE_COMMAND} -E echo \"CAPNP_COMPILE_COMMAND: '${CAPNP_COMPILE_COMMAND}'\"\n    COMMAND\n      \"${CAPNP_COMPILE_COMMAND}\"\n    DEPENDS ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/serialization/tiledb-rest.capnp\n    COMMAND_EXPAND_LISTS\n    COMMENT \"Re-generate tiledb-rest.capnp.<h,c++> files for serialization support\"\n    )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Subarray Functions\nDESCRIPTION: This section covers functions for working with TileDB subarrays, including allocation, configuration, range manipulation, and querying subarray properties.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\ntiledb_subarray_alloc\ntiledb_subarray_set_config\ntiledb_subarray_free\ntiledb_subarray_set_coalesce_ranges\ntiledb_subarray_set_subarray\ntiledb_subarray_add_range\ntiledb_subarray_add_range_by_name\ntiledb_subarray_add_range_var\ntiledb_subarray_add_range_var_by_name\ntiledb_subarray_get_range_num\ntiledb_subarray_get_range_num_from_name\ntiledb_subarray_get_range\ntiledb_subarray_get_range_from_name\ntiledb_subarray_get_range_var_size\ntiledb_subarray_get_range_var_size_from_name\ntiledb_subarray_get_range_var\ntiledb_subarray_get_range_var_from_name\n```\n\n----------------------------------------\n\nTITLE: C API Additions for TileDB\nDESCRIPTION: New C API functions added for array operations, encryption, filters, and key-value store management.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_48\n\nLANGUAGE: C\nCODE:\n```\ntiledb_{array,kv}_open_at\ntiledb_{array,kv}_open_at_with_key\ntiledb_{array,kv}_reopen_at\ntiledb_{array,kv}_get_timestamp()\ntiledb_kv_is_open\ntiledb_filter_t\ntiledb_filter_type_t\ntiledb_filter_option_t\ntiledb_filter_list_t\ntiledb_filter_*\ntiledb_filter_list_*\ntiledb_attribute_{set,get}_filter_list\ntiledb_array_schema_{set,get}_coords_filter_list\ntiledb_array_schema_{set,get}_offsets_filter_list\ntiledb_query_get_buffer\ntiledb_query_get_buffer_var\ntiledb_array_get_uri\ntiledb_encryption_type_t\n```\n\n----------------------------------------\n\nTITLE: Error Handling Pattern with RETURN_NOT_OK Macro\nDESCRIPTION: Example of the legacy error handling pattern using Status returns and the RETURN_NOT_OK macro, which is planned to be replaced with exception handling.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/exception/DIRECTORY.md#2025-04-16_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nreturn-if-return\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Domain Functions\nDESCRIPTION: This section documents functions for working with TileDB domains, including allocation, deallocation, adding dimensions, and querying domain properties.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntiledb_domain_alloc\ntiledb_domain_free\ntiledb_domain_get_type\ntiledb_domain_get_ndim\ntiledb_domain_add_dimension\ntiledb_domain_get_dimension_from_index\ntiledb_domain_get_dimension_from_name\ntiledb_domain_has_dimension\ntiledb_domain_dump_str\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for TileDB Query Field API in CMake\nDESCRIPTION: Defines source files for the query field API component and gathers them using a custom CMake function. This establishes the source code files that will be compiled into the object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_field/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND SOURCES\n  query_field_api.cc\n  )\ngather_sources(${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Building TileDB on macOS/Linux\nDESCRIPTION: Commands to build and install TileDB locally on macOS or Linux systems. This sequence bootstraps, builds, and installs TileDB from source.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd TileDB\n$ mkdir build\n$ cd build\n$ ../bootstrap && make && make install\n```\n\n----------------------------------------\n\nTITLE: C++ API Additions for TileDB\nDESCRIPTION: New C++ API methods and classes added for encryption, timestamps, filters, and array operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_49\n\nLANGUAGE: C++\nCODE:\n```\nArray::timestamp()\nArray::reopen_at()\nFilter and FilterList classes\nAttribute::filter_list()\nAttribute::set_filter_list()\nArraySchema::coords_filter_list()\nArraySchema::set_coords_filter_list()\nArraySchema::offsets_filter_list()\nArraySchema::set_offsets_filter_list()\n```\n\n----------------------------------------\n\nTITLE: Configuring Blosc Source Files for TileDB with Platform-Specific Optimizations\nDESCRIPTION: Sets up the source files for Blosc compression library integration, including platform-specific optimizations like AVX2 and SSE2 detection. The code conditionally includes specialized shuffle implementations based on the hardware capabilities.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/external/blosc/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n\nlist(APPEND SOURCES\n  ${SOURCE_DIR}/src/shuffle.c\n  ${SOURCE_DIR}/src/shuffle-generic.c\n  ${SOURCE_DIR}/src/bitshuffle-stub.c\n)\nif(COMPILER_SUPPORTS_AVX2)\n  list(APPEND SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/shuffle-avx2.c\n    )\nendif()\ntry_compile(SSE2_DETECTED ${CMAKE_CURRENT_BINARY_DIR} ${SOURCE_DIR}/cmake/detect-sse2.c)\nif(SSE2_DETECTED)\n  list(APPEND SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/shuffle-sse2.c\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for TileDB PNG Ingestion\nDESCRIPTION: Sets up a CMake project for TileDB PNG ingestion. It defines the project, sets C++17 as the required standard, finds TileDB and libpng dependencies, and configures the build target.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/png_ingestion/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\nproject(TileDBPngIngestion)\n\n# Set C++17 as required standard for all C++ targets (required to use the TileDB\n# C++ API).\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Find TileDB.\n#\n# If TileDB is not installed globally on your system, either set\n# CMAKE_PREFIX_PATH on the CMake command line:\n#   $ cmake -DCMAKE_PREFIX_PATH=/path/to/TileDB-installation ..\n# or you can hardcode it here e.g.\n#   list(APPEND CMAKE_PREFIX_PATH \"/path/to/TileDB-installation\")\nfind_package(TileDB \n  ${TILEDB_VERSION} \n  REQUIRED\n  )\n\n# Set up the example program.\nadd_executable(tiledb_png \"src/main.cc\")\n\n# Link the example program with the TileDB shared library.\n# This also configures include paths to find the TileDB headers.\ntarget_link_libraries(tiledb_png TileDB::tiledb)\n\n# Find and link with libpng.\nfind_package(ZLIB REQUIRED)\nfind_package(PNG REQUIRED)\ntarget_link_libraries(tiledb_png \"${PNG_LIBRARIES}\")\ntarget_include_directories(tiledb_png PRIVATE \"${PNG_INCLUDE_DIRS}\")\ntarget_compile_definitions(tiledb_png PRIVATE \"${PNG_DEFINITIONS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Storage Manager Build System\nDESCRIPTION: CMake configuration that sets up build rules for the TileDB storage manager. Includes multiple subdirectories for different components and conditionally includes serialization support if enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common-root)\n\nadd_subdirectory(array)\nadd_subdirectory(array_schema)\nadd_subdirectory(buffer)\nadd_subdirectory(compressors)\nadd_subdirectory(config)\nadd_subdirectory(consolidator)\nadd_subdirectory(crypto)\nadd_subdirectory(filesystem)\nadd_subdirectory(filter)\nadd_subdirectory(fragment)\nadd_subdirectory(group)\nadd_subdirectory(metadata)\nadd_subdirectory(misc)\nadd_subdirectory(object)\nadd_subdirectory(query)\nadd_subdirectory(query_plan)\nadd_subdirectory(rest)\nadd_subdirectory(rtree)\nadd_subdirectory(stats)\nadd_subdirectory(storage_manager)\nadd_subdirectory(subarray)\nadd_subdirectory(tile)\n\n\nif (TILEDB_SERIALIZATION)\n  add_subdirectory(serialization)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Validating Enum Values During Deserialization in C++\nDESCRIPTION: A helper function that converts an integer to an enum type with validation. This function throws a runtime error if the integer value doesn't correspond to a valid enum value, ensuring type safety during deserialization.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/style/Serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\ninline ArrayType array_type_from_int(uint8_t array_type_enum) {\n    auto type = ArrayType(array_type_enum);\n    if (type != ArrayType::DENSE && type != ArrayType::SPARSE) {\n        throw std::runtime_error(\n            \"Invalid ArrayType (\" + std::to_string(array_type_enum) + \")\");\n    }\n    return type;\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Dimension Functions\nDESCRIPTION: This section covers functions for manipulating and querying TileDB dimensions, including allocation, deallocation, setting properties, and retrieving dimension information.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_3\n\nLANGUAGE: C\nCODE:\n```\ntiledb_dimension_alloc\ntiledb_dimension_free\ntiledb_dimension_get_name\ntiledb_dimension_get_type\ntiledb_dimension_get_domain\ntiledb_dimension_get_cell_val_num\ntiledb_dimension_set_cell_val_num\ntiledb_dimension_get_filter_list\ntiledb_dimension_set_filter_list\ntiledb_dimension_get_tile_extent\ntiledb_dimension_dump_str\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Modules and Setting Up Subdirectories for TileDB C API Support\nDESCRIPTION: This CMake snippet includes common CMake modules and adds subdirectories for different components of the TileDB C API support infrastructure: cpp_string for C++ string handling, exception_wrapper for C++ exception handling in C API, and handle for object handle management.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common)\n\nadd_subdirectory(cpp_string)\nadd_subdirectory(exception_wrapper)\nadd_subdirectory(handle)\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Delete Query Type in TileDB\nDESCRIPTION: This snippet shows the query type constant used for delete operations in TileDB. It's a crucial part of initiating a delete operation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/DELETES_AND_UPDATES.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`TILEDB_QUERY_TYPE_DELETE`\n```\n\n----------------------------------------\n\nTITLE: Executing Task Graph with Scheduler in C++\nDESCRIPTION: Demonstrates graph execution using a BountifulScheduler, including node submission and synchronization waiting.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\nBountifulScheduler sched;\nsched.submit(a, b, c, d);\nsched.sync_wait_all();\n```\n\n----------------------------------------\n\nTITLE: Building and Installing TileDB\nDESCRIPTION: Commands to build and install TileDB after configuring the build tree. Replace <num-procs> with the number of processors to use for parallel build.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/BUILD.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake --build . -j <num-procs> --target install\ncmake --build .\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard and Platform-Specific Settings\nDESCRIPTION: Sets C++20 as the required standard and configures platform-specific settings like macOS @rpath for shared libraries and GNU extensions under Cygwin. Also configures ccache support for faster builds if enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE Release)\nendif()\n\nif(APPLE)\n  # Use @rpath on macOS for building shared libraries.\n  set(CMAKE_MACOSX_RPATH ON)\n  # Don't allow macOS .frameworks to be used for dependencies.\n  set(CMAKE_FIND_FRAMEWORK NEVER)\nendif()\n\n# Set C++20 as default required standard for all C++ targets.\nset(CMAKE_CXX_STANDARD 20 CACHE STRING \"C++ Standard\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nif(CMAKE_SYSTEM_NAME MATCHES \"CYGWIN\")\n  # Use GNU extensions under Cygwin\n  set(CMAKE_CXX_EXTENSIONS ON)\nelse()\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\nif (TILEDB_CCACHE)\n  include(FindCcache)\n  set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE})\n  set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE})\nendif()\n\n# Set -fvisibility=hidden (or equivalent) flags by default.\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n\n# Disable warnings from Boost\nset(Boost_NO_WARN_NEW_VERSIONS ON)\n\nproject(TileDB)\nmessage(STATUS \"Starting TileDB regular build.\")\nmessage(STATUS \"  CMake version: ${CMAKE_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Fragment Array Schema in C++ API\nDESCRIPTION: Adds methods to the FragmentInfo class for retrieving the array schema of a fragment in the C++ API.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nFragmentInfo::array_schema\n```\n\n----------------------------------------\n\nTITLE: Dimension Configuration Functions in C++ API\nDESCRIPTION: API additions for configuring dimension properties including cell value numbers and filter lists in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_40\n\nLANGUAGE: C++\nCODE:\n```\nDimension::set_cell_val_num\nDimension::cell_val_num\nDimension::set_filter_list\nDimension::filter_list\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Compressors Object Library in CMake\nDESCRIPTION: Sets up an object library for TileDB compressors, including source files and dependencies. It finds and links against BZip2, LZ4, ZLIB, and zstd libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/compressors/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library compressors)\n    this_target_sources(\n        bzip_compressor.cc dd_compressor.cc delta_compressor.cc\n        dict_compressor.cc gzip_compressor.cc lz4_compressor.cc\n        rle_compressor.cc zstd_compressor.cc)\n    this_target_object_libraries(baseline buffer)\n    find_package(BZip2 REQUIRED)\n    find_package(LZ4 MODULE REQUIRED)\n    find_package(ZLIB REQUIRED)\n    find_package(zstd CONFIG REQUIRED)\n    this_target_link_libraries(BZip2::BZip2 lz4::lz4 ZLIB::ZLIB zstd::libzstd)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: TileDB Array Folder Structure Hierarchy\nDESCRIPTION: Shows the complete folder and file structure of a TileDB array, including schema folders, fragments, commits, metadata, labels, and legacy components with descriptive comments for each item.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/array_file_hierarchy.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                                # array folder\n    |_ __schema                         # array schema folder\n          |_ <timestamp_name>           # array schema files\n          |_ ...\n          |_ __enumerations             # array enumerations folder\n    |_ __fragments                      # array fragments folder\n          |_ <timestamped_name>         # fragment folder\n          |_ ...\n    |_ __commits                        # array commits folder\n          |_ <timestamped_name>.wrt     # fragment write file\n          |_ ...\n          |_ <timestamped_name>.del     # delete commit file\n          |_ ...\n          |_ <timestamped_name>.upd     # update commit file\n          |_ ...\n          |_ <timestamped_name>.vac     # fragment vacuum file\n          |_ ...\n          |_ <timestamped_name>.con     # consolidated commits file\n          |_ ...\n          |_ <timestamped_name>.ign     # ignore file for consolidated commits file\n    |_ __fragment_meta                  # consolidated fragment metadata folder\n          |_ <timestamped_name>.meta    # consolidated fragment meta file\n          |_ ...\n    |_ __meta                           # array metadata folder\n    |_ __labels                         # dimension label folder\n    |_ <timestamped_name>               # legacy fragment folder\n          |_ ...\n    |_ <timestamped_name>.ok            # legacy fragment write file\n    |_ <timestamped_name>.meta          # legacy consolidated fragment meta file\n    |_ __array_schema.tdb               # legacy array schema file\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Task Graph Execution in C++\nDESCRIPTION: Shows how to emulate a bountiful scheduler by running each node as an asynchronous task using std::async and managing task completion.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\nauto fun_a = [&]() {\n  a.run();\n};\n\nauto fun_b = [&]() {\n  b.run();\n};\n\nauto fun_c = [&]() {\n  c.run();\n};\n\nauto fun_d = [&]() {\n  d.run();\n};\n\nauto fut_a = std::async(std::launch::async, fun_a);\nauto fut_b = std::async(std::launch::async, fun_b);\nauto fut_c = std::async(std::launch::async, fun_c);\nauto fut_d = std::async(std::launch::async, fun_d);\n\nfut_a.get();\nfut_b.get();\nfut_c.get();\nfut_d.get();\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB C++ Library via Conda\nDESCRIPTION: Command to install the TileDB C++ library using Conda package manager. This works for macOS, Linux, and Windows platforms.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ conda install -c conda-forge tiledb\n```\n\n----------------------------------------\n\nTITLE: Creating Schema Evolution Object in C API\nDESCRIPTION: Introduces a new tiledb_schema_evolution_t object and related APIs for schema evolution in the C API.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_21\n\nLANGUAGE: C\nCODE:\n```\ntiledb_schema_evolution_t\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Allow Duplicates Property in C/C++ API\nDESCRIPTION: API addition for controlling whether an array allows duplicate values, with both C and C++ implementations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_34\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_schema_{set,get}_allows_dups\n```\n\nLANGUAGE: C++\nCODE:\n```\nArray::set_allows_dups\nArray::allows_dups\n```\n\n----------------------------------------\n\nTITLE: Demonstrating WebP Compression Effects on Image Data in TileDB\nDESCRIPTION: This example demonstrates how WebP compression affects a 2x3 pixel image when using lossless versus lossy compression. The input shows the original RGB data, followed by the output after lossless compression (identical to input) and lossy compression (with slight value differences).\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filters/webp.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Data from 2x3 pixel image\ninput = [[255,62,83, 149,43,67, 138,43,67]\n         [255,62,83, 149,43,67, 138,43,67]]\n# Ingest and read with lossless compression\noutput = [[255,62,83, 149,43,67, 138,43,67]\n          [255,62,83, 149,43,67, 138,43,67]]\n# Ingest and read with lossy compression\noutput = [[251,60,84, 148,51,61, 142,42,64]\n          [252,63,85, 150,46,67, 139,44,68]]\n```\n\n----------------------------------------\n\nTITLE: Finding C++ Example Source Files in CMake\nDESCRIPTION: Collects all C++ example source files ending with .cc extension in the current directory. Optionally filters out deprecated examples related to async operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB TILEDB_EXAMPLE_SOURCES_CPPAPI \"*.cc\")\n\nif(TILEDB_REMOVE_DEPRECATIONS)\n  list(FILTER TILEDB_EXAMPLE_SOURCES_CPPAPI EXCLUDE REGEX \"async\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Crypto Object Library in CMake\nDESCRIPTION: Sets up the 'tiledb_crypto' object library, specifying source files, object libraries, and platform-specific link libraries. It also handles compiler warnings for OpenSSL-3 MD5 deprecation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/crypto/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library tiledb_crypto)\n    this_target_sources(crypto.cc crypto_openssl.cc crypto_win32.cc encryption_key.cc)\n    this_target_object_libraries(buffer config constants)\n    if(WIN32)\n        this_target_link_libraries(bcrypt)\n    else()\n        find_package(OpenSSL REQUIRED)\n        # We cannot use this_target_link_libraries, because it links with PUBLIC\n        # visibility, and we use OpenSSL only as an internal implementation detail.\n        target_link_libraries(tiledb_crypto PRIVATE OpenSSL::Crypto)\n    endif()\n    # OpenSSL-3 deprecates MD5\n    if(MSVC)\n        set_source_files_properties(crypto_openssl.cc PROPERTIES COMPILE_OPTIONS \"/wd4996\")\n    else()\n        set_source_files_properties(crypto_openssl.cc PROPERTIES COMPILE_OPTIONS \"-Wno-deprecated-declarations\")\n    endif()\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: String Range Functions in C++ API\nDESCRIPTION: API additions for working with string ranges in array queries in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_46\n\nLANGUAGE: C++\nCODE:\n```\nadd_range\nrange\n```\n\n----------------------------------------\n\nTITLE: Implementing Status-based Error Handling in C++\nDESCRIPTION: Example demonstrating how to implement error handling using Status objects in a Context-related function. Shows proper usage of Status::Ok() for success cases and Status_ContextError for failure conditions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/style/ErrorHandling.md#2025-04-16_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include \"tiledb/common/status.h\"\nusing namespace = tiledb::common;\nbool failure_condition();\n\nStatus foo() {\n  if (failure_condition()) {\n    return Status_ContextError(\"Cannot do requested thing\");\n  }  \n  return Status::Ok(); \n}\n```\n\n----------------------------------------\n\nTITLE: API Addition for Fragment Info in C\nDESCRIPTION: New C API functions to expose Minimum Bounding Rectangle (MBR) in Fragment Info API and fetch array schema names used by fragments.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_17\n\nLANGUAGE: C\nCODE:\n```\ntiledb_fragment_info_get_array_schema_name\n```\n\n----------------------------------------\n\nTITLE: Variable-sized Range Functions in C API\nDESCRIPTION: API additions for adding and retrieving variable-sized ranges for array queries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_39\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_add_range_var\ntiledb_array_get_range_var_size\ntiledb_array_get_range_var\n```\n\n----------------------------------------\n\nTITLE: C++ API Additions\nDESCRIPTION: New C++ API methods including ArraySchemaEvolution timestamp range, validity filter list operations, and array schema version access.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nArraySchemaEvolution::set_timestamp_range()\nArraySchema::version()\n```\n\n----------------------------------------\n\nTITLE: Displaying TileDB Fragment Folder Structure\nDESCRIPTION: Shows the structure of a TileDB fragment folder, including metadata and data files for various attribute and dimension types. The structure illustrates the organization of fixed-sized, variable-sized, and nullable attributes and dimensions in the fragment.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/fragment.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                                    # array folder\n   |  ...\n   |_ __fragments                           # array fragments folder\n         |_ <timestamped_name>              # fragment folder\n         |      |_ __fragment_metadata.tdb  # fragment metadata\n         |      |_ a0.tdb                   # fixed-sized attribute\n         |      |_ a1.tdb                   # var-sized attribute (offsets)\n         |      |_ a1_var.tdb               # var-sized attribute (values)\n         |      |_ a2.tdb                   # fixed-sized nullable attribute\n         |      |_ a2_validity.tdb          # fixed-sized nullable attribute (validities)\n         |      |_ ...\n         |      |_ d0.tdb                   # fixed-sized dimension\n         |      |_ d1.tdb                   # var-sized dimension (offsets)\n         |      |_ d1_var.tdb               # var-sized dimension (values)\n         |      |_ ...\n         |      |_ t.tdb                    # timestamp attribute\n         |      |_ ...\n         |      |_ dt.tdb                   # delete timestamp attribute\n         |      |_ ...\n         |      |_ dci.tdb                  # delete condition index attribute\n         |      |_ ...\n         |      |_ __coords.tdb             # legacy coordinates\n         |_ ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Filters Object Library in CMake\nDESCRIPTION: Sets up the 'encryption_filters' object library with AES256GCM filter source and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library encryption_filters)\n    this_target_sources(encryption_aes256gcm_filter.cc)\n    this_target_object_libraries(tiledb_crypto filter)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Serialization Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the unit tests for TileDB serializers. It includes common CMake modules, configures the test target, specifies include directories, and adds source files to the target.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/storage_format/serialization/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(unit_test)\n\ncommence(unit_test serializers)\n    target_include_directories(unit_serializers PUBLIC ${TILEDB_SOURCE_ROOT}/test/support)\n    this_target_sources(main.cc unit_serializers.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Comparing Different C++ Initialization Syntax Approaches\nDESCRIPTION: This code snippet demonstrates different ways to initialize variables in C++, highlighting the preferred method of direct initialization with braced initialization lists. It shows examples of assignment expression initialization, parenthesized expression lists, and both preferred and non-preferred uses of braces.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/style/Variables.md#2025-04-16_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n// No. This is initialization with an assignment expression.\nint x = 1;\n\n// No. This uses a parenthesized expression list.\nint x(1);\n\n// No. This has a brace initialization list, but it uses an assignment expression,\n// not direct initialization\nstd::vector<int> y = {1,2,3};\n\n// Yes\nint x{1};\nstd::vector<int> y{1,2,3};\n```\n\n----------------------------------------\n\nTITLE: Schema Loading in C++ API\nDESCRIPTION: API additions for loading array schemas with or without encryption in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_43\n\nLANGUAGE: C++\nCODE:\n```\nArray::load_schema(ctx, uri)\nArray::load_schema(ctx, uri, key_type, key, key_len)\n```\n\n----------------------------------------\n\nTITLE: C API Addition - Point Range Setter\nDESCRIPTION: New bulk point-range setter API addition for handling multiple point ranges in queries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_15\n\nLANGUAGE: C\nCODE:\n```\ntiledb_query_add_point_ranges\n```\n\n----------------------------------------\n\nTITLE: TileDB CLI Help Command Output\nDESCRIPTION: Detailed help output showing the full command synopsis and available options for the 'info' command, including array schema, tile sizes, and MBR visualization options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tiledb help info\nDESCRIPTION\nDisplays information about a TileDB array.\n\nSYNOPSIS\n    tiledb info array-schema -a <uri>\n    tiledb info tile-sizes -a <uri>\n    tiledb info dump-mbrs -a <uri> [-o <path>]\n    tiledb info svg-mbrs -a <uri> [-o <path>] [-w <N>] [-h <N>]\n\nOPTIONS\n    array-schema: Prints basic information about the array's schema.\n        -a, --array <uri>     URI of TileDB array\n\n    tile-sizes: Prints statistics about tile sizes in the array.\n        -a, --array <uri>     URI of TileDB array\n\n    dump-mbrs: Dumps the MBRs in the array to text output.\n        -a, --array <uri>     URI of TileDB array\n        -o, --output          Path to write output text file\n\n    svg-mbrs: Produces an SVG visualizing the MBRs (2D arrays only)\n        -a, --array <uri>     URI of TileDB array\n        -o, --output          Path to write output SVG\n        -w, --width           Width of output SVG\n        -h, --height          Height of output SVG\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Core Library Optional Features in CMake\nDESCRIPTION: Sets up optional features for the TileDB core library, including serialization, sanitizers, code coverage, and WebP support. Also configures platform-specific libraries and threading support.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_SERIALIZATION)\n  find_package(CURL REQUIRED)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n    INTERFACE\n      CURL::libcurl\n    )\nendif()\n\nif (TILEDB_SANITIZER)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n    INTERFACE\n      -fsanitize=${TILEDB_SANITIZER}\n  )\nendif()\n\nif (CMAKE_BUILD_TYPE MATCHES \"Coverage\")\n  if (NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    message(FATAL_ERROR \"Compiling with code coverage is only supported with Clang.\")\n  endif()\n  target_link_options(TILEDB_CORE_OBJECTS_ILIB\n    INTERFACE\n      --coverage\n  )\nendif()\n\nif(TILEDB_WEBP)\n  find_package(WebP REQUIRED)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n    INTERFACE\n    WebP::webp\n  )\n  add_definitions(-DTILEDB_WEBP)\nendif()\n\nif (NOT WIN32)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n    INTERFACE\n      OpenSSL::SSL\n      OpenSSL::Crypto\n  )\nendif()\n\nif (WIN32)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB INTERFACE shlwapi rpcrt4 bcrypt)\nendif()\n\nif(APPLE)\n  if(TILEDB_S3)\n    target_link_libraries(TILEDB_CORE_OBJECTS_ILIB INTERFACE \"-framework CoreFoundation -framework SystemConfiguration -framework Security\")\n  endif()\nendif()\n\nif (CMAKE_THREAD_LIBS_INIT)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB INTERFACE Threads::Threads)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Non-Empty Domain Retrieval Functions in C API\nDESCRIPTION: API additions for retrieving the non-empty domain of an array by index or name in C.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_36\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_get_non_empty_domain_from_{index,name}\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Evolution in C++ API\nDESCRIPTION: Adds ArraySchemaEvolution class to the C++ API for handling schema evolution operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nArraySchemaEvolution\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Common Utility Build in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for TileDB's common utility components. It includes necessary CMake modules, adds subdirectories for detailed implementations and tests, and establishes the overall structure for building utility-related code.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/util/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nadd_subdirectory(detail)\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Metadata Object Library in CMake\nDESCRIPTION: Sets up the fragment_metadata object library with its source files and extensive list of dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/fragment/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library fragment_metadata)\n    this_target_sources(${SOURCES})\n    this_target_object_libraries(\n        array_directory    \n        array_schema    \n        fragment_identifier\n        generic_tile_io \n        ndrectangle \n        rectangle\n        rtree\n        tiledb_crypto\n        writer_tile\n    )\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Exceptions in C++\nDESCRIPTION: This code snippet shows an example of an exception message that was fixed in TileDB v2.25.0. It demonstrates how to handle unknown exception types in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nunknown exception type; no further information\n```\n\n----------------------------------------\n\nTITLE: Defining a MIMOFunctionNode Template Class in C++\nDESCRIPTION: Declaration of the MIMOFunctionNode template class that handles multiple input and output types using tuples. Supports complex data transformations within the task graph.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <\n    template <class> class SinkMover, class... ItemsIn,\n    template <class> class SourceMover, class... ItemsOut>\nclass MimoFunctionNode;\n```\n\n----------------------------------------\n\nTITLE: Function for Building TileDB C API Examples in CMake\nDESCRIPTION: Defines a function that builds an executable for each C example, links it with TileDB, and adds platform-specific dependencies for Linux systems.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/c_api/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(build_TileDB_example_capi TARGET)\n  add_executable(${TARGET}_c EXCLUDE_FROM_ALL ${TARGET}.c)\n  target_link_libraries(${TARGET}_c PUBLIC local_install tiledb)\n  if (NOT WIN32)\n    # On Linux, must explicitly link -lpthread -ldl in order for static linking\n    # to libzstd or libcurl to work.\n    target_link_libraries(${TARGET}_c PUBLIC pthread dl)\n  endif()\n  add_dependencies(examples_c ${TARGET}_c)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Array Vacuum in C++ API\nDESCRIPTION: API addition for vacuuming (cleaning up/optimizing) an array in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_44\n\nLANGUAGE: C++\nCODE:\n```\nArray::vacuum\n```\n\n----------------------------------------\n\nTITLE: Configuring DAG Unit Tests in CMake\nDESCRIPTION: Defines header-only unit tests for three DAG-related components: taskgraph, MIMO (Multiple Input Multiple Output) taskgraph, and graph sieve functionality\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/graph/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ndag_add_header_only_unit_test(taskgraph)\ndag_add_header_only_unit_test(mimo_taskgraph)\ndag_add_header_only_unit_test(graph_sieve)\n```\n\n----------------------------------------\n\nTITLE: Converting Float Data to Integer with Scale and Offset in Python\nDESCRIPTION: Demonstrates how floating point data is converted to integer format using scale and offset parameters. The example shows the write process where float64 data is converted to int32 using a specified byte width of 4.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filters/float_scale.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata = np.random.rand(npts)\ndata_b = data.view(np.float64)\nnew_data_b = np.zeros(npts, dtype=np.int32) # byte width is 4\nscale, offset\n\nfor i in range(0, len(data)):\n  # round works like <cmath>'s round\n  new_data_b[i] = round((data_b[i] - offset) / scale)\n```\n\n----------------------------------------\n\nTITLE: Float Scaling Filter Example with Sample Data\nDESCRIPTION: Complete example showing the transformation of float data to integer storage and back, using scale=0.25, offset=10.0, and byte_size=2.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filters/float_scale.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninput_data (double) = [10.0, 10.2500, 10.7540, 11.0001]\nstored_data (16 bit integer) = [0, 1, 3, 4]\noutput_data (double) = [10.0, 10.2500, 10.7500, 11.0]\n```\n\n----------------------------------------\n\nTITLE: API Addition - Fill Value Functions\nDESCRIPTION: New C API functions added for getting and setting default fill values for attributes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_25\n\nLANGUAGE: C\nCODE:\n```\ntiledb_attribute_set_fill_value\ntiledb_attribute_get_fill_value\n```\n\n----------------------------------------\n\nTITLE: Processing and Building Each C++ Example\nDESCRIPTION: Iterates through all found example source files, extracts the base name without path and extension using regex operations, and calls the build function to create executables for each example.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(EXAMPLE_SOURCE ${TILEDB_EXAMPLE_SOURCES_CPPAPI})\n  # Get the binary name\n  string(REGEX\n    REPLACE \"^${CMAKE_CURRENT_SOURCE_DIR}/\" \"\"\n    EXAMPLE_STRIPPED ${EXAMPLE_SOURCE}\n  )\n  string(REGEX\n    REPLACE \".cc$\" \"\"\n    EXAMPLE_BIN ${EXAMPLE_STRIPPED}\n  )\n\n  # Build example executable\n  build_TileDB_experimental_example_cppapi(${EXAMPLE_BIN})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Benchmark Executables List and Build Configuration\nDESCRIPTION: Defines a list of benchmark executables and creates build targets for each one. Each benchmark is linked with the benchmark_core library, TileDB, and pthread dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/src/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# List of benchmarks\nset(BENCHMARKS\n  bench_dense_attribute_filtering\n  bench_dense_read_large_tile\n  bench_dense_read_small_tile\n  bench_dense_tile_cache\n  bench_dense_write_large_tile\n  bench_dense_write_small_tile\n  bench_large_io\n  bench_reader_base_unfilter_tile\n  bench_sparse_read_large_tile\n  bench_sparse_read_small_tile\n  bench_sparse_tile_cache\n  bench_sparse_write_large_tile\n  bench_sparse_write_small_tile\n)\n\nforeach(NAME IN LISTS BENCHMARKS)\n  add_executable(${NAME}\n    \"${NAME}.cc\"\n    $<TARGET_OBJECTS:benchmark_core>\n  )\n  target_link_libraries(${NAME} TileDB::tiledb pthread)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Modifying TileDB Unit Test for Handle Leakage Investigation in C++\nDESCRIPTION: Changes made to unit-cppapi-consolidation-with-timestamps.cc to investigate handle leakage. The read_sparse() function, particularly the .query.submit() call, seems to be the main source of leakage.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/performance/msys_handle_leakage/notes.txt#2025-04-16_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Modifications to unit-cppapi-consolidation-with-timestamps.cc\n// TEST_CASE(\"CPP API: Test consolidation with timestamps, full and partial read with dups\")\n\n// Inside read_sparse() function:\n// .query.submit() // This call appears to be the main source of handle leakage\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Compilation Options in CMake\nDESCRIPTION: Sets compilation definitions based on TileDB build options like removing deprecations, enabling verbosity, stats, and serialization.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_REMOVE_DEPRECATIONS)\n  add_definitions(-DTILEDB_REMOVE_DEPRECATIONS)\n  message(STATUS \"The TileDB library is compiled without deprecated APIs.\")\nendif()\n\nif (TILEDB_VERBOSE)\n  add_definitions(-DTILEDB_VERBOSE)\n  message(STATUS \"The TileDB library is compiled with verbosity.\")\nendif()\n\nif (TILEDB_STATS)\n  add_definitions(-DTILEDB_STATS)\n  message(STATUS \"The TileDB library is compiled with stats enabled.\")\nendif()\n\nif (TILEDB_SERIALIZATION)\n  add_definitions(-DTILEDB_SERIALIZATION)\n  message(STATUS \"The TileDB library is compiled with query serialization enabled.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build with Bootstrap Script on macOS/Linux\nDESCRIPTION: Commands to create a build directory and run the bootstrap script for configuring the build on macOS and Linux systems. Use --help to see available options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/BUILD.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\n# You can see a list of all available options by running ../bootstrap --help\n../bootstrap <flags>\n```\n\n----------------------------------------\n\nTITLE: Variable Non-Empty Domain in C++ API\nDESCRIPTION: API addition for accessing variable-sized non-empty domains in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_45\n\nLANGUAGE: C++\nCODE:\n```\nArray::non_empty_domain_var\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Datatype Object Library in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the TileDB C API datatype component. It includes necessary modules, defines source files, and creates an object library target with specified dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/datatype/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    datatype_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_datatype)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline constants capi_enumeration_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB VFS C API Build\nDESCRIPTION: Sets up CMake build configuration for the TileDB VFS C API component. Defines source files, creates an object library with dependencies, and adds test subdirectory. Uses custom CMake functions for managing build targets.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/vfs/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    vfs_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_vfs)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Try-Catch Error Handling Pattern\nDESCRIPTION: The preferred exception-based error handling pattern using try-catch blocks for more readable and maintainable code.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/exception/DIRECTORY.md#2025-04-16_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\ntry\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Serialization Test Files in CMake\nDESCRIPTION: Adds serialization-specific test files when the serialization feature is enabled in TileDB. These tests specifically check the serialization functionality for queries and query conditions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_SERIALIZATION)\n  list(APPEND TILEDB_UNIT_TEST_SOURCES\n    src/unit-capi-serialized_queries.cc\n    src/unit-QueryCondition-serialization.cc\n    src/unit-curl.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for TileDB Shared Library in CMake\nDESCRIPTION: Configures the RPATH for the TileDB shared library to locate dynamic dependencies when building shared libraries on non-Windows systems.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_SHARED_LIBS AND NOT WIN32)\n  set_target_properties(tiledb\n    PROPERTIES\n      INSTALL_RPATH \"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Task Graph Node API Examples in C++\nDESCRIPTION: Demonstrates simplified node creation syntax and template deduction rules, comparing different API approaches for task graph node implementation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Item>\nclass ProducerNode;\nauto node = ProducerNode{function};\n\ntemplate <template <class> class Mover, class Item>\nclass ProducerNode;\nauto node = ProducerNode{function};\n\ntemplate <template <class> class Mover, class Item>\nclass GraphProducerNode;\n\ntemplate <class Item>\nusing ProducerNode = GraphProducerNode<DefaultMover, Item>;\n\nauto node = ProducerNode{function};\n```\n\n----------------------------------------\n\nTITLE: Configuring All Filters Object Library in CMake\nDESCRIPTION: Sets up the 'all_filters' object library, combining various filter components and their dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library all_filters)\n    this_target_sources(filter_create.cc\n        bit_width_reduction_filter.cc noop_filter.cc positive_delta_filter.cc)\n    this_target_object_libraries(bitshuffle_filter byteshuffle_filter\n        checksum_filters compression_filter encryption_filters float_scaling_filter\n        xor_filter webp_filter)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB on Windows\nDESCRIPTION: PowerShell commands to build and install TileDB locally on Windows. This sequence bootstraps the project and builds TileDB in Release configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/README.md#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n> cd TileDB\n> mkdir build\n> cd build\n> ..\\bootstrap.ps1 \n> cmake --build . --config Release\n> cd tiledb\n> cmake --build . --config Release --target install\n```\n\n----------------------------------------\n\nTITLE: Dimension Access in C++ API\nDESCRIPTION: API additions for accessing dimensions by index or name in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_42\n\nLANGUAGE: C++\nCODE:\n```\nDomain::dimension(unsigned idx)\nDomain::dimension(const std::string& name)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the TileDB Query Field C API Object Library in CMake\nDESCRIPTION: Creates the 'capi_query_field' object library and configures its dependencies. The library links to 'export', 'baseline', and includes the baseline objects, but with a note that it cannot be linked standalone.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_field/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(capi_query_field OBJECT ${SOURCES})\ntarget_link_libraries(capi_query_field PUBLIC export)\ntarget_link_libraries(capi_query_field PUBLIC baseline $<TARGET_OBJECTS:baseline>)\n```\n\n----------------------------------------\n\nTITLE: Scheduler Usage Example in C++\nDESCRIPTION: Example code demonstrating how to use a scheduler to submit and wait on nodes in a task graph.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_19\n\nLANGUAGE: c++\nCODE:\n```\n// Define nodes\nProducerNode a;\nConsumerNode b;\n\n// Connect nodes\nEdge {a, b};\n\nBountifulScheduler sched;\n\n// Submit jobs\nsched.submit(a, b);\n\n// Wait on their completion\nsched.sync_wait_all();\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard and Nightly Unit Tests\nDESCRIPTION: Sets up standard unit tests and conditional nightly build tests with specific test parameters.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(\n  NAME \"tiledb_unit\"\n  COMMAND tiledb_unit --durations=yes\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nif (DEFINED ENV{TILEDB_NIGHTLY_BUILD})\n  add_test(\n    NAME \"tiledb_unit_nightly\"\n    COMMAND tiledb_unit --durations=yes --allow-running-no-tests [nightly_only]\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Query Aggregate Unit Tests in CMake\nDESCRIPTION: This CMake snippet sets up the unit test configuration for the TileDB Query Aggregate C API. It specifies the target name, source files, object libraries, and linked libraries. It also handles compiler-specific options and conditional compilation for serialization support.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_aggregate/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_query_aggregate)\n  this_target_sources(unit_capi_query_aggregate.cc)\n  this_target_object_libraries(capi_query_aggregate)\n  if (NOT MSVC)\n    target_compile_options(unit_capi_query_aggregate PRIVATE -Wno-deprecated-declarations)\n  endif()\n  this_target_link_libraries(tiledb_test_support_lib)\n  \n  if (TILEDB_SERIALIZATION)\n    add_definitions(-DTILEDB_SERIALIZATION)\n  endif()\n\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Filter Pipeline Unit Test in CMake\nDESCRIPTION: Sets up a comprehensive unit test target for running filter pipelines, including multiple filter implementations and test support files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test run_filter_pipeline)\n    this_target_object_libraries(filter_pipeline mem_helpers)\n    this_target_sources(\n        main.cc\n        add_1_in_place_filter.cc\n        add_1_including_metadata_filter.cc\n        add_1_out_of_place_filter.cc\n        add_n_in_place_filter.cc\n        filter_test_support.cc\n        filtered_tile_checker.cc\n        pseudo_checksum_filter.cc\n        unit_checksum_pipeline.cc\n        unit_bit_width_reduction_pipeline.cc\n        unit_bitshuffle_pipeline.cc\n        unit_byteshuffle_pipeline.cc\n        unit_encryption_pipeline.cc\n        unit_positive_delta_pipeline.cc\n        unit_run_filter_pipeline.cc\n        unit_webp_pipeline.cc\n        unit_xor_pipeline.cc\n    )\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB Targets and Headers in CMake\nDESCRIPTION: Configures the installation of TileDB targets, including binaries, libraries, and headers, to appropriate directories based on the build type and platform.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  TARGETS ${TILEDB_INSTALL_TARGETS}\n  EXPORT ${TARGETS_EXPORT_NAME}\n  PUBLIC_HEADER DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/tiledb\"\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n  INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB CLI Tools with CMake\nDESCRIPTION: Commands to build the TileDB CLI executable using CMake with the TILEDB_TOOLS flag enabled. Produces the binary in tiledb/tools/tiledb directory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cmake -DTILEDB_TOOLS=ON ..\n$ make tools\n```\n\n----------------------------------------\n\nTITLE: Running TileDB Docker Image\nDESCRIPTION: Commands to pull and run the TileDB Docker image, providing an alternative way to use TileDB without local installation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull tiledb/tiledb\n$ docker run -it tiledb/tiledb\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Filesystem C API Build with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the TileDB filesystem C API component. It includes common CMake modules, defines source files, creates an object library target with appropriate dependencies, and adds test subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/filesystem/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  filesystem_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_filesystem)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline constants exception_wrapper)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: TileDB Group Directory Structure\nDESCRIPTION: Example directory structure showing the layout of a TileDB group folder with the __group subfolder containing timestamped group files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/group.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_group                       # Group folder\n    |  ...\n    |_ __group                 # Group folder\n        |_ <timestamped_name>  # Timestamped group file detailing members\n    |_ ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Test Feature Flags in CMake\nDESCRIPTION: Sets up feature-specific compiler definitions for TileDB tests, conditionally enabling AWS S3, serialization, and WebP support based on build configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS_AWS_S3_CONFIG)\n  message(STATUS \"Tests built with AWS S3 config\")\n  target_compile_definitions(tiledb_unit PRIVATE -DTILEDB_TESTS_AWS_S3_CONFIG)\nendif()\n\nif (TILEDB_SERIALIZATION)\n  target_compile_definitions(tiledb_unit PRIVATE -DTILEDB_SERIALIZATION)\nendif()\n\nif (TILEDB_WEBP)\n  target_compile_definitions(tiledb_unit PRIVATE -DTILEDB_WEBP)\n  find_package(ZLIB) # We need PNG to use our Zlib so that static link works correctly if applicable\n  find_package(PNG)\n  if (PNG_FOUND)\n    target_compile_definitions(tiledb_unit PRIVATE -DPNG_FOUND)\n    # If libpng is available, the test can write output images for visual checking.\n    # If libpng is not available, the test runs on pixel data alone with no output images.\n    target_link_libraries(tiledb_unit PRIVATE PNG::PNG)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: TileDB CLI Basic Usage Example\nDESCRIPTION: Example of running the TileDB CLI without arguments to display the main usage information and available commands.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tiledb\nCommand-line interface for performing common TileDB tasks. Choose a command:\n\n    tiledb help <command>\n    tiledb info array-schema -a <uri>\n    tiledb info tile-sizes -a <uri>\n    tiledb info dump-mbrs -a <uri> [-o <path>]\n    tiledb info svg-mbrs -a <uri> [-o <path>] [-w <N>] [-h <N>]\n```\n\n----------------------------------------\n\nTITLE: Building the Example Project on macOS/Linux\nDESCRIPTION: Commands to build the example project on macOS or Linux, specifying the TileDB installation path via CMAKE_PREFIX_PATH. This creates an executable that links against the TileDB library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd TileDB/examples/cmake_project\n$ mkdir build\n$ cd build\n$ cmake -DCMAKE_PREFIX_PATH=/path/to/TileDB/dist .. && make\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Create Unit Test in CMake\nDESCRIPTION: Sets up a unit test target for filter creation functionality with required object libraries and source files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test filter_create)\n    this_target_object_libraries(all_filters)\n    this_target_sources(main.cc unit_filter_create.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Test Dependencies in CMake\nDESCRIPTION: Establishes dependencies between various test targets and configures the main test runner target.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(check\n    COMMAND ${CMAKE_CTEST_COMMAND} -V -C $<CONFIG>\n    DEPENDS tests\n    USES_TERMINAL\n  )\n```\n\n----------------------------------------\n\nTITLE: Building TileDB from Source - Basic Workflow\nDESCRIPTION: A step-by-step guide showing how to clone a fork of TileDB, build it, make code changes, and create a pull request. This includes setting up the build environment, making changes, formatting code, and running tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/username/TileDB\ncd TileDB && mkdir build && cd build\n../bootstrap\nmake && make check\ncd ../\ngit checkout -b <my_initials>/<my_bugfix_branch>\n... code changes ...\nmake -C build format\nmake -C build check\ngit commit -a -m \"my commit message\"\ngit push --set-upstream origin <my_initials>/<my_bugfix_branch>\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Only Unit Tests for DAG Execution\nDESCRIPTION: Defines and configures multiple header-only unit tests for different components of the DAG execution system including scheduler, duffs, threadpool, tasks, and task state machine. Uses the custom dag_add_header_only_unit_test command for test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/execution/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ndag_add_header_only_unit_test(scheduler)\ndag_add_header_only_unit_test(duffs)\ndag_add_header_only_unit_test(threadpool)\ndag_add_header_only_unit_test(tasks)\ndag_add_header_only_unit_test(task_state_machine)\ndag_add_header_only_unit_test(scheduler_sieve)\n\n# The unit test for frugal needs to be brought up date\n# dag_add_header_only_unit_test(frugal)\n```\n\n----------------------------------------\n\nTITLE: Installing TileDB Relative Headers in CMake\nDESCRIPTION: Installs TileDB headers to their respective subdirectories, maintaining the relative path structure.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(HEADER ${TILEDB_C_API_RELATIVE_HEADERS})\n  cmake_path(RELATIVE_PATH HEADER\n      BASE_DIRECTORY ${TILEDB_C_API_RELATIVE_HEADER_BASE}\n      OUTPUT_VARIABLE HEADER_STRIPPED\n      )\n  cmake_path(REMOVE_FILENAME HEADER_STRIPPED OUTPUT_VARIABLE HEADER_RELATIVE)\n  install(\n      FILES ${HEADER}\n      DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/${HEADER_RELATIVE}\"\n  )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Subarray C API Object Library in CMake\nDESCRIPTION: Sets up the build configuration for the TileDB Subarray C API component. The snippet includes common CMake modules, defines source files, and creates an object library with the necessary dependencies and linkages.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/subarray/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  subarray_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_subarray_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(subarray)\n  this_target_object_libraries(capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Defining Main Compressor Options Structure in Markdown\nDESCRIPTION: This snippet outlines the filter options for main compression filters in TileDB using a Markdown table. It includes fields for compressor type and compression level.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Compressor type | `uint8_t` | Type of compression \\(e.g. `TILEDB_FILTER_BZIP2`\\) |\n| Compression level | `int32_t` | Compression level used \\(ignored by some compressors\\). |\n```\n\n----------------------------------------\n\nTITLE: Compiling Magic Database from Magic Pattern Files\nDESCRIPTION: Combines magic pattern fragments into a single file and compiles it into a binary magic.mgc database using the file utility itself.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB MAGIC_FRAGMENTS magic/Magdir/*)\n\n# Prepare a temporary file to combine the magic fragments:\nset(MAGIC_FRAGMENTS_FILE ${CMAKE_CURRENT_BINARY_DIR}/magic)\nfile(WRITE ${MAGIC_FRAGMENTS_FILE} \"\")\n\n# Call the \"cat\" function for each input file\nforeach(MAGIC_FRAGMENT ${MAGIC_FRAGMENTS})\n  file(APPEND ${MAGIC_FRAGMENTS_FILE} \"############## ${MAGIC_FRAGMENT} ##############\\n\")\n  file(READ ${MAGIC_FRAGMENT} MAGIC_FRAGMENT_CONTENTS)\n  file(APPEND ${MAGIC_FRAGMENTS_FILE} \"${MAGIC_FRAGMENT_CONTENTS}\\n\")\n  unset(MAGIC_FRAGMENT_CONTENTS)\nendforeach()\n\nadd_custom_command(OUTPUT magic.mgc\n  COMMAND file -C -m magic\n  COMMENT \"Compiling magic file\"\n)\n\nadd_custom_target(magic_mgc ALL DEPENDS magic.mgc)\n```\n\n----------------------------------------\n\nTITLE: New C API function for getting total cell number\nDESCRIPTION: Experimental C API function to get the total number of cells in a fragment.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_11\n\nLANGUAGE: C\nCODE:\n```\ntiledb_fragment_info_get_total_cell_num\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Pipeline Unit Test in CMake\nDESCRIPTION: Configures a unit test target for filter pipeline functionality with filter_pipeline library dependency.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test filter_pipeline)\n    this_target_object_libraries(filter_pipeline)\n    this_target_sources(main.cc unit_filter_pipeline.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS Object Library Sources in CMake\nDESCRIPTION: Defines and configures the VFS object library by specifying source files, including filesystem implementations for different platforms and optional S3 support. Sets include directories and links required dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filesystem/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library vfs)\n    list(APPEND VFS_SOURCES\n        mem_filesystem.cc\n        path_win.cc\n        posix.cc\n        uri.cc\n        vfs.cc\n        vfs_file_handle.cc\n        win.cc\n        filesystem_base.cc\n        local.cc\n        ../curl/curl_init.cc\n    )\n    if (TILEDB_S3)\n        target_include_directories(vfs\n                PRIVATE\n                \"${CMAKE_CURRENT_SOURCE_DIR}/../../../external/include\"\n        )\n        list(APPEND VFS_SOURCES\n            s3.cc\n            s3_thread_pool_executor.cc\n        )\n    endif()\n    this_target_sources(${VFS_SOURCES})\n    this_target_object_libraries(\n        baseline\n        buffer\n        cancelable_tasks\n        cert_file\n        config\n        math\n        seedable_global_PRNG\n        stats\n        stringx\n        thread_pool\n    )\n    if(WIN32)\n        this_target_link_libraries(shlwapi)\n    endif()\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Processing and Building TileDB C++ Examples in CMake\nDESCRIPTION: Iterates through all example source files, extracts their base names by removing the path and file extension, and builds each example using the previously defined function.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(EXAMPLE_SOURCE ${TILEDB_EXAMPLE_SOURCES_CPPAPI})\n  # Get the binary name\n  string(REGEX\n    REPLACE \"^${CMAKE_CURRENT_SOURCE_DIR}/\" \"\"\n    EXAMPLE_STRIPPED ${EXAMPLE_SOURCE}\n  )\n  string(REGEX\n    REPLACE \".cc$\" \"\"\n    EXAMPLE_BIN ${EXAMPLE_STRIPPED}\n  )\n\n  # Add WebP example if built with TILEDB_WEBP and libpng is found\n  if (${EXAMPLE_BIN} STREQUAL \"png_ingestion_webp\")\n    find_package(PNG)\n    if (PNG_FOUND AND TILEDB_WEBP)\n      build_TileDB_example_cppapi(${EXAMPLE_BIN})\n      target_link_libraries(png_ingestion_webp_cpp PRIVATE \"${PNG_LIBRARIES}\")\n      target_include_directories(png_ingestion_webp_cpp PRIVATE \"${PNG_INCLUDE_DIRS}\")\n      target_compile_definitions(png_ingestion_webp_cpp PRIVATE \"${PNG_DEFINITIONS}\")\n      find_package(WebP REQUIRED)\n      target_link_libraries(png_ingestion_webp_cpp PRIVATE WebP::webp)\n      target_compile_definitions(png_ingestion_webp_cpp PRIVATE -DTILEDB_WEBP)\n    endif()\n    continue()\n  endif()\n\n  # Build example executable\n  build_TileDB_example_cppapi(${EXAMPLE_BIN})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Applying XOR Filter on NumPy Array in Python\nDESCRIPTION: This code snippet demonstrates how to apply the XOR operation sequentially to input data in chunks of 1-4 bytes, depending on the sizeof the attribute's type representation. It uses a NumPy int64 array as an example.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filters/xor.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndata = np.random.rand(npts)\ndata_b = data.view(np.int64)\nfor i in range(1, len(data)):\n  data_b[i] = data_b[i] ^ data_b[i-1]\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Public Headers\nDESCRIPTION: Sets up a list of public headers for TileDB, including C API headers and conditionally adding C++ API headers if enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_PUBLIC_HEADERS ${TILEDB_C_API_FILENAME_HEADERS})\n\nif (TILEDB_CPP_API)\n  list(APPEND TILEDB_PUBLIC_HEADERS\n    ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/cpp_api/tiledb\n    ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/cpp_api/tiledb_experimental\n    # ... (additional C++ headers)\n  )\nelse()\n  message(STATUS \"TileDB C++ API is not built.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB C API Array Schema\nDESCRIPTION: Sets up unit testing for the C API Array Schema component in TileDB. The configuration includes the test source file and required object libraries, using custom CMake functions 'commence' and 'conclude' to encapsulate the test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/array_schema/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_array_schema)\n  this_target_sources(unit_capi_array_schema.cc)\n  this_target_object_libraries(\n    capi_array_schema_stub \n    capi_current_domain\n    capi_domain_stub\n  )\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Positive Delta Options Structure in Markdown\nDESCRIPTION: This snippet outlines the filter options for the positive delta filter in TileDB using a Markdown table. It includes a field for maximum window size.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Max window size | `uint32_t` | Maximum window size in bytes |\n```\n\n----------------------------------------\n\nTITLE: Defining a ProducerNode Template Class in C++\nDESCRIPTION: Declaration of the ProducerNode template class that produces data items of type Item. This class serves as a data source in the task graph.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Item>\nclass ProducerNode;\n```\n\n----------------------------------------\n\nTITLE: Defining Sink Actions for Three-Stage Port State Machine in C\nDESCRIPTION: This code snippet defines the actions performed by the sink node in a three-stage port state machine. It includes extract, drain, and pull operations with their corresponding state transitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n1. extract: item[2] ← 0\n2. drain: state[2] ← 0\n3. pull: 〈 await ¬{ state = 000 } :\n            if { state = 010 ∧ items = 010 } → { state = 001 ∧ items = 001 } 〉\n            if { state = 100 ∧ items = 100 } → { state = 001 ∧ items = 001 } 〉\n            if { state = 101 ∧ items = 101 } → { state = 011 ∧ items = 011 } 〉\n            if { state = 110 ∧ items = 110 } → { state = 011 ∧ items = 011 } 〉\n```\n\n----------------------------------------\n\nTITLE: Class References in C++ Exception Handling\nDESCRIPTION: Core class references showing the namespace and class structure for TileDB's exception handling. These include StatusException derived from std::exception and the legacy Status class.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/exception/DIRECTORY.md#2025-04-16_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntiledb::common::StatusException\ntiledb::common::Status\n```\n\n----------------------------------------\n\nTITLE: Using Updated TileDB C++ Header Include\nDESCRIPTION: Shows the new correct way to include TileDB headers in C++ applications after the include files were moved to a tiledb folder.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_53\n\nLANGUAGE: C++\nCODE:\n```\n#include <tiledb/tiledb>\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Compressor Unit Tests\nDESCRIPTION: Sets up CMake build configuration for compressor unit tests. Includes the unit_test module, defines target object libraries for compressors, and specifies source files for dictionary, delta and gzip compressor tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/compressors/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test compressors)\n    this_target_object_libraries(compressors)\n    this_target_sources(main.cc unit_dict_compressor.cc unit_delta_compressor.cc unit_gzip_compressor.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Unit Test for TileDB C API Query Field\nDESCRIPTION: Sets up CMake configuration for building query field unit tests. Includes dependencies on test support libraries and handles platform-specific compiler options. Notes limitation regarding standalone linking due to Query class dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_field/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_query_field)\n  this_target_sources(unit_capi_query_field.cc)\n\n# The object library `capi_query_field` cannot be linked standalone at the\n# present time. It depends upon member functions of `class Query`, which does\n# not yet have a standalone object library of its own. Without such a\n# dependency, `capi_query_field` would have to link (essentially) the whole \n# library to get a complete executable.\n  this_target_object_libraries(capi_query_field)\n  this_target_link_libraries(tiledb_test_support_lib)\n\n  if (NOT MSVC)\n    target_compile_options(unit_capi_query_field PRIVATE -Wno-deprecated-declarations)\n  endif()\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring 'attribute' Object Library in CMake for TileDB\nDESCRIPTION: Defines the 'attribute' object library with its source files and dependencies. It includes buffer, constants, filter_pipeline, range, and stringx libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library attribute)\n    this_target_sources(attribute.cc)\n    this_target_object_libraries(\n        baseline\n        buffer\n        constants\n        filter_pipeline\n        range\n        stringx)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Serialization Sources in CMake\nDESCRIPTION: Adds additional source files and sets compiler flags for TileDB serialization functionality when TILEDB_SERIALIZATION is enabled. Handles platform-specific compiler warnings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_SERIALIZATION)\n  list(APPEND TILEDB_CORE_SOURCES\n    ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/rest/curl.cc\n    ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/rest/rest_client_remote.cc\n  )\n\n  if(NOT WIN32)\n    set_source_files_properties(\n      ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/rest/rest_client_remote.cc\n      # ... (other files) ...\n      PROPERTIES\n        COMPILE_FLAGS \"-Wno-unused-parameter\"\n    )\n  endif()\n  if(MSVC)\n    set_source_files_properties(\n      ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/rest/rest_client_remote.cc\n      # ... (other files) ...\n      PROPERTIES\n        COMPILE_FLAGS \"/wd4267 /wd4100\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Task Graph Nodes in C++\nDESCRIPTION: Demonstrates creation of different node types including producer, function, and consumer nodes. Shows both direct function object usage and lambda function initialization.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\nProducerNode a{actual_source_function};\nFunctionNode b{function{}};\nFunctionNode c{[](size_t i) ( return i; };\nConsumerNode d{sink_function{}};\n```\n\n----------------------------------------\n\nTITLE: Finding Threading Package in CMake for TileDB\nDESCRIPTION: Uses CMake's FindThreads module to locate and configure threading libraries for TileDB. It sets variables for thread library usage and type detection.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for C API Object Walk Order in CMake\nDESCRIPTION: This snippet configures a unit test for the C API object walk order functionality. It specifies the source file and links against the capi_object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/object/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test capi_object_walk_order)\n  this_target_sources(unit_capi_object_walk_order.cc)\n  this_target_object_libraries(capi_object)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Array Folder Structure Showing Update Commit File Location\nDESCRIPTION: Shows the directory structure where update commit files are stored within a TileDB array, under the __commits folder with a timestamped filename and .upd extension.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/update_commit_file.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmy_array                              # array folder\n   |_ ....\n   |_ __commits                       # array commits folder\n         |_ <timestamped_name>.upd    # update commit file\n         |_ ...\n```\n\n----------------------------------------\n\nTITLE: Defining a ConsumerNode Template Class in C++\nDESCRIPTION: Declaration of the ConsumerNode template class that consumes data items of type Item. This class serves as a data sink in the task graph.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Item>\nclass ConsumerNode;\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Query Unit Tests in CMake\nDESCRIPTION: This snippet sets up the unit tests for the TileDB query component. It specifies the source files, links necessary libraries, and sets compiler options to ignore deprecation warnings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test query)\n    this_target_sources(main.cc unit_validity_vector.cc unit_query_condition.cc)\n    # Not actually testing a unit yet, but some things that ought to be units\n    this_target_link_libraries(tiledb_test_support_lib)\n    this_target_link_libraries(ast_test_support_lib)\n\n    # We want tests to continue as normal even as the API is changing,\n    # so don't warn for deprecations, since they'll be escalated to errors.\n    if (NOT MSVC)\n      target_compile_options(unit_query PRIVATE -Wno-deprecated-declarations)\n    endif()\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for ProducerNode in C++\nDESCRIPTION: Constructor for ProducerNode that accepts a function object. The function can optionally take a stop_source parameter for controlling graph execution termination.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Function>\nProducerNode(Function&& f);\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options for MSVC and GCC/Clang\nDESCRIPTION: Sets platform-specific compiler options for MSVC (Windows) and GCC/Clang (Unix-like systems), including warning levels, optimization flags, and debug settings. This ensures consistent compilation behavior across platforms.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# NOTE: Config-specific options must use the $<CONFIG> generator expression\n#       and not check the value of CMAKE_BUILD_TYPE. The reason is that\n#       the latter is not set when using multi-config generators like\n#       Visual Studio or Xcode.\n\n# Set compiler flags\nif (MSVC)\n  # Turn on standards-conformance mode\n  add_compile_options(\"/permissive-\")\n  # /EH: Enables standard C++ stack unwinding.\n  # s: Catches only standard C++ exceptions when you use catch(...) syntax.\n  # c: The compiler assumes that functions declared as extern \"C\" never throw a C++ exception\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:/EHsc>)\n  # We disable some warnings that are not present in gcc/clang -Wall:\n  #   C4101: unreferenced local variable\n  #   C4146: unary minus operator applied to unsigned type\n  #   C4244: conversion warning of floating point to integer type.\n  #   C4251: C++ export warning\n  #   C4456: local variable hiding previous local variable\n  #   C4457: local variable hiding function parameter\n  #   C4702: unreachable code\n  #   C4800: warning implicit cast int to bool\n  add_compile_options(/W4 /wd4101 /wd4146 /wd4244 /wd4251 /wd4456 /wd4457 /wd4702 /wd4800)\n  # Warnings as errors:\n  if (TILEDB_WERROR)\n    add_compile_options(/WX)\n  endif()\n  # Turn off MSVC deprecation of certain standard library functions. This allows\n  # other deprecations to remain visible.\n  add_compile_definitions(\"_CRT_SECURE_NO_WARNINGS\")\n  # We currently need to suppress warnings about deprecation (C4996) for two cases:\n  #   1. C++ API functions that call deprecated C API functions\n  #   2. two warnings in `test/src/helpers.cc` that call deprecated C API functions\n  add_compile_options(/wd4996)\n  # Disable GDI (which we don't need, and causes some macro\n  # re-definition issues if wingdi.h is included)\n  add_compile_definitions(\"NOGDI\")\n  # Add /MPn flag from CMake invocation (if defined).\n  add_compile_options(${MSVC_MP_FLAG})\n  # Build-specific flags\n  add_compile_definitions(\"$<IF:$<CONFIG:Debug>,DEBUG,NDEBUG>\")\n  add_compile_options(\n    # /Od: Disable optimizations\n    \"$<$<CONFIG:Debug>:/Od>\"\n    # /Ox: Enable most speed optimizations\n    \"$<$<CONFIG:Release,RelWithDebInfo>:/Ox>\"\n    # /Zi: Generate debug info in a separate .pdb file\n    \"$<$<CONFIG:Debug,RelWithDebInfo>:/Zi>\")\n  # /bigobj: increase number of sections in .obj file\n  add_compile_options(\"/bigobj\")\nelse()\n  add_compile_options(-Wall -Wextra)\n  if (TILEDB_WERROR)\n    add_compile_options(-Werror)\n  endif()\n  # Build-specific flags\n  add_compile_definitions(\"$<IF:$<CONFIG:Debug,Coverage>,DEBUG,NDEBUG>\")\n  add_compile_options(\n    \"$<$<CONFIG:Debug>:-O0;-g3;-ggdb3;-gdwarf-3>\"\n    \"$<$<CONFIG:Coverage>:-g3;-gdwarf-3;--coverage>\"\n    \"$<$<CONFIG:Release,RelWithDebInfo>:-O3>\"\n    \"$<$<CONFIG:RelWithDebInfo>:-g3;-ggdb3;-gdwarf-3>\")\n  if(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    add_compile_options(\n      \"$<$<CONFIG:Debug>:-fstandalone-debug>\"\n      \"$<$<CONFIG:Coverage>:-fprofile-instr-generate;-fcoverage-mapping>\")\n    add_link_options(\"$<$<CONFIG:Coverage>:--coverage;-fprofile-instr-generate;-fcoverage-mapping>\")\n  endif()\n\n  # Disable newer Clang warnings about unqualified calls to std::move\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n    if (${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL \"14.0.3\")\n      add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-unqualified-std-cast-call>)\n    endif()\n  endif()\n\n  if (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\" AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_GREATER_EQUAL \"16\")\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fexperimental-library>)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Enumeration Unit Tests in CMake\nDESCRIPTION: Sets up the unit tests for TileDB C API enumeration functionality. The configuration includes the unit_test module and defines a test target named 'unit_test capi_enumeration' with source file 'unit_capi_enumeration.cc' and an object library dependency 'capi_enumeration_stub'.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/enumeration/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_enumeration)\n  this_target_sources(unit_capi_enumeration.cc)\n  this_target_object_libraries(capi_enumeration_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB Query Plan in CMake\nDESCRIPTION: Sets up the unit test configuration for TileDB's C API query plan functionality. It includes the unit test module, defines test sources, links required libraries, and adds platform-specific compiler options to handle deprecated declarations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_plan/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_query_plan)\n  this_target_sources(unit_capi_query_plan.cc)\n  this_target_object_libraries(capi_query_plan)\n  if (NOT MSVC)\n      target_compile_options(unit_capi_query_plan PRIVATE -Wno-deprecated-declarations)\n  endif()\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB Query Plan Object Library with CMake\nDESCRIPTION: Creates an object library for the query plan module and configures its dependencies. The library depends on the baseline and buffer components but cannot link standalone due to Query class dependencies. Includes test directory configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query_plan/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_library(query_plan OBJECT query_plan.cc)\ntarget_link_libraries(query_plan PUBLIC baseline $<TARGET_OBJECTS:baseline>)\ntarget_link_libraries(query_plan PUBLIC buffer $<TARGET_OBJECTS:buffer>)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Identifier Object Library in CMake\nDESCRIPTION: Sets up the fragment_identifier object library with its source files and dependencies. Includes conditional compilation for statistics support.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/fragment/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library fragment_identifier)\n    this_target_sources(fragment_identifier.cc)\n    this_target_object_libraries(baseline vfs)\n    if(TILEDB_STATS)\n        this_target_compile_definitions(-DTILEDB_STATS)\n    endif()\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Restoring Integer Data Back to Float in Python\nDESCRIPTION: Shows the read process where the stored integer data is converted back to floating point format using the same scale and offset parameters used during writing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filters/float_scale.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrestored_data = np.zeros(npts, dtype=np.float64)\nfor i in range(0, len(data)):\n  restored_data[i] = (new_data_b[i] * scale) + offset\n```\n\n----------------------------------------\n\nTITLE: Running Multiple TileDB Benchmark Iterations\nDESCRIPTION: Commands to run multiple iterations of a TileDB benchmark, including setup, multiple runs with system cache purging, and teardown.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bench_dense_read_small_tile setup\n{ \"phase\": \"setup\", \"ms\": 3524 }\n$ for i in `seq 1 3`; do sudo purge; ./bench_dense_read_small_tile run; done\n{ \"phase\": \"run\", \"ms\": 3287 }\n{ \"phase\": \"run\", \"ms\": 3206 }\n{ \"phase\": \"run\", \"ms\": 3246 }\n$ ./bench_dense_read_small_tile teardown\n{ \"phase\": \"teardown\", \"ms\": 7 }\n```\n\n----------------------------------------\n\nTITLE: Adding Header-Only Unit Tests for Data Block Components in CMake\nDESCRIPTION: This snippet adds three header-only unit tests for pool_allocator, data_block, and blocks_and_ports using a custom CMake function 'dag_add_header_only_unit_test'. These tests are part of the TileDB project's data block module.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/data_block/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_unit_test(pool_allocator)\ndag_add_header_only_unit_test(data_block)\ndag_add_header_only_unit_test(blocks_and_ports)\n```\n\n----------------------------------------\n\nTITLE: TileDB Array Directory Structure with Ignore File\nDESCRIPTION: Shows the directory structure of a TileDB array including the location of ignore files within the commits folder. Ignore files use a timestamped naming convention and are stored with .ign extension.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/ignore_file.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                           # array folder\n   |_ ....\n   |_ __commits                    # array commit folder\n         |_ <timestamped_name>.ign      # ignore file\n```\n\n----------------------------------------\n\nTITLE: Configuration Option for Custom REST Headers in C\nDESCRIPTION: This code snippet shows the new configuration option added in TileDB v2.24.1 to set custom headers on REST requests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nrest.custom_headers.*\n```\n\n----------------------------------------\n\nTITLE: Extracting TileDB Version Components from Header File in CMake\nDESCRIPTION: Finds and parses the tiledb_version.h header file to extract major, minor, and patch version numbers using regex pattern matching. It reads the file contents and uses string regex matching to identify each version component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/packaging/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_file(\n        tiledb_version_h tiledb_version.h\n        PATH_SUFFIXES \"include/tiledb\" REQUIRED\n)\nfile(READ ${tiledb_version_h} ver)\n\nstring(REGEX MATCH \"TILEDB_VERSION_MAJOR ([0-9]*)\" _ ${ver})\nset(ver_major ${CMAKE_MATCH_1})\n\nstring(REGEX MATCH \"TILEDB_VERSION_MINOR ([0-9]*)\" _ ${ver})\nset(ver_minor ${CMAKE_MATCH_1})\n\nstring(REGEX MATCH \"TILEDB_VERSION_PATCH ([0-9]*)\" _ ${ver})\nset(ver_patch ${CMAKE_MATCH_1})\n\nset(VERSION \"${ver_major}.${ver_minor}.${ver_patch}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS File POSIX Permissions in TileDB v2.0.6\nDESCRIPTION: Adds a new configuration option 'vfs.file.posix_permissions' to set POSIX permissions for files created by TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_27\n\nLANGUAGE: C++\nCODE:\n```\nconfig.set(\"vfs.file.posix_permissions\", \"0644\");\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Query Aggregators Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the unit tests for TileDB query aggregators. It includes the unit_test module, commences the test configuration, specifies the source files, links the aggregators object library, and concludes the test setup.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/readers/aggregators/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test aggregators)\n    this_target_sources(main.cc bench_aggregators.cc unit_aggregate_with_count.cc unit_aggregation_policies.cc unit_aggregators.cc)\n    this_target_object_libraries(aggregators)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring NDRectangle Unit Tests in CMake\nDESCRIPTION: Sets up the unit test configuration for the NDRectangle component of TileDB's C API. It defines the source files, adds platform-specific compiler options to suppress deprecated declaration warnings on non-MSVC platforms, and links against required object libraries and test support libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/ndrectangle/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_ndrectangle)\n  this_target_sources(unit_capi_ndrectangle.cc)\n  if (NOT MSVC)\n    target_compile_options(unit_capi_ndrectangle PRIVATE -Wno-deprecated-declarations)\n  endif()\n  this_target_object_libraries(capi_ndrectangle)\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Query AST Object Library in CMake\nDESCRIPTION: Configures the core query AST object library by setting source paths, including dependencies, and defining source files. The library depends on array_schema, generic_tile_io and baseline components.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/ast/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../..\")\n\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  query_ast.cc\n)\n\n#\n# `query_ast` object library\n#\ncommence(object_library query_ast)\n    this_target_sources(${SOURCES})\n    this_target_object_libraries(array_schema generic_tile_io baseline)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Variable-sized Non-Empty Domain Functions in C API\nDESCRIPTION: API additions for working with variable-sized non-empty domains in arrays by index or name.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_38\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_get_non_empty_domain_var_size_from_{index,name}\ntiledb_array_get_non_empty_domain_var_from_{index,name}\n```\n\n----------------------------------------\n\nTITLE: Source and Sink Action Definitions\nDESCRIPTION: Defines the core operations for Source (inject, fill, push) and Sink (extract, drain, pull) ports with atomic state transitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n1. inject: items[0] ← 1\n2. fill: state[0] ← 1\n3. push: 〈 await ¬{ state = 11 } :\n            if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n\n1. extract: item[1] ← 0\n2. drain: state[1] ← 0\n3. pull: 〈 await ¬{ state = 00 } :\n            if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n```\n\n----------------------------------------\n\nTITLE: API Addition for Fragment Info in C++\nDESCRIPTION: New C++ API methods to expose Minimum Bounding Rectangle (MBR) in Fragment Info API and fetch array schema names used by fragments.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nFragmentInfo::array_schema_name\n```\n\n----------------------------------------\n\nTITLE: Running Individual TileDB Benchmark\nDESCRIPTION: Command to execute a single TileDB benchmark program and view its output, which includes setup, run, and teardown phases with timings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bench_dense_read_small_tile\n{ \"phase\": \"setup\", \"ms\": 3492 }\n{ \"phase\": \"run\", \"ms\": 3156 }\n{ \"phase\": \"teardown\", \"ms\": 3 }\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB Unit Test Source Files in CMake\nDESCRIPTION: Lists all the unit test source files for the TileDB project, covering various components including the C API, arrays, filters, and more. This list forms the core test suite for TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_UNIT_TEST_SOURCES\n  support/src/ast_helpers.h\n  support/src/helpers.h\n  support/src/helpers-dimension.h\n  src/test-capi-array-write-ordered-attr-fixed.cc\n  src/test-capi-array-write-ordered-attr-var.cc\n  src/test-capi-consolidation-plan.cc\n  src/test-capi-array-many-dimension-labels.cc\n  src/test-capi-dimension-label.cc\n  src/test-capi-dimension-label-encrypted.cc\n  src/test-capi-dense-array-dimension-label.cc\n  src/test-capi-dense-array-dimension-label-var.cc\n  src/test-capi-query-error-handling.cc\n  src/test-capi-sparse-array-dimension-label.cc\n  src/test-capi-subarray-labels.cc\n  src/test-cppapi-aggregates.cc\n  src/test-cppapi-consolidation-plan.cc\n  src/unit-average-cell-size.cc\n  src/unit-backwards_compat.cc\n  src/unit-capi-any.cc\n  src/unit-capi-as_built.cc\n  src/unit-capi-array.cc\n  src/unit-capi-array_schema.cc\n  src/unit-capi-attributes.cc\n  src/unit-capi-config.cc\n  src/unit-capi-context.cc\n  src/unit-capi-consolidation.cc\n  src/unit-capi-dense_array.cc\n  src/unit-capi-dense_array_2.cc\n  src/unit-capi-dense_neg.cc\n  src/unit-capi-dense_vector.cc\n  src/unit-capi-enum_values.cc\n  src/unit-capi-enumerations.cc\n  src/unit-capi-error.cc\n  src/unit-capi-filestore.cc\n  src/unit-capi-fill_values.cc\n  src/unit-capi-filter.cc\n  src/unit-capi-fragment_info.cc\n  src/unit-capi-group.cc\n  src/unit-capi-incomplete.cc\n  src/unit-capi-incomplete-2.cc\n  src/unit-capi-metadata.cc\n  src/unit-capi-nullable.cc\n  src/unit-capi-object_mgmt.cc\n  src/unit-capi-partial-attribute-write.cc\n  src/unit-capi-query.cc\n  src/unit-capi-query_2.cc\n  src/unit-capi-rest-dense_array.cc\n  src/unit-capi-smoke-test.cc\n  src/unit-capi-sparse_array.cc\n  src/unit-capi-sparse_heter.cc\n  src/unit-capi-sparse_neg.cc\n  src/unit-capi-sparse_neg_2.cc\n  src/unit-capi-sparse_real.cc\n  src/unit-capi-sparse_real_2.cc\n  src/unit-capi-stats.cc\n  src/unit-capi-string.cc\n  src/unit-capi-string_dims.cc\n  src/unit-capi-update-queries.cc\n  src/unit-capi-uri.cc\n  src/unit-capi-version.cc\n  src/unit-capi-vfs.cc\n  src/unit-CellSlabIter.cc\n  src/unit-compression-dd.cc\n  src/unit-compression-delta.cc\n  src/unit-compression-rle.cc\n  src/unit-ctx.cc\n  src/unit-current-domain-rest.cc\n  src/unit-dense-reader.cc\n  src/unit-dense-global-order-reader.cc\n  src/unit-DenseTiler.cc\n  src/unit-dimension.cc\n  src/unit-duplicates.cc\n  src/unit-empty-var-length.cc\n  src/unit-enumerations.cc\n  src/unit-enum-helpers.cc\n  src/unit-filter-buffer.cc\n  src/unit-global-order.cc\n  src/unit-ordered-dim-label-reader.cc\n  src/unit-tile-metadata.cc\n  src/unit-tile-metadata-generator.cc\n  src/unit-query-plan.cc\n  src/unit-ReadCellSlabIter.cc\n  src/unit-Reader.cc\n  src/unit-request-handlers.cc\n  src/unit-resource-pool.cc\n  src/unit-rest-enumerations.cc\n  src/unit-result-coords.cc\n  src/unit-result-tile.cc\n  src/unit-s3.cc\n  src/unit-sparse-global-order-reader.cc\n  src/unit-sparse-unordered-with-dups-reader.cc\n  src/unit-ssl-config.cc\n  src/unit-Subarray.cc\n  src/unit-SubarrayPartitioner-dense.cc\n  src/unit-SubarrayPartitioner-error.cc\n  src/unit-SubarrayPartitioner-sparse.cc\n  src/unit-vfs.cc\n  src/unit-win-filesystem.cc\n  \"${CMAKE_SOURCE_DIR}/tiledb/api/c_api/vfs/test/unit_capi_ls_recursive.cc\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Actions for Three-Stage Port State Machine in C\nDESCRIPTION: This code snippet defines the actions performed by the source node in a three-stage port state machine. It includes inject, fill, and push operations with their corresponding state transitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n1. inject: items[0] ← 1\n2. fill: state[0] ← 1\n3. push: 〈 await ¬{ state = 111 } :\n            if { state = 010 ∧ items = 010 } → { state = 001 ∧ items = 001 } 〉\n            if { state = 100 ∧ items = 100 } → { state = 001 ∧ items = 001 } 〉\n            if { state = 101 ∧ items = 101 } → { state = 011 ∧ items = 011 } 〉\n            if { state = 110 ∧ items = 110 } → { state = 011 ∧ items = 011 } 〉\n```\n\n----------------------------------------\n\nTITLE: Defining Function Node Signature in C++\nDESCRIPTION: Specifies the function signature required for a function node in the TileDB task graph. Function nodes apply their contained function to data available on input ports and return values to output ports. The function must be invocable with a const reference parameter and return a value of type Ret.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/doc/glossary.md#2025-04-16_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nRet fun (const Type& a);\n```\n\nLANGUAGE: c++\nCODE:\n```\n  requires std::is_invocable_r_v<Ret, Fun, const Type&>;\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Platform Unit Tests with CMake\nDESCRIPTION: Sets up a unit test target for the TileDB platform component. Specifies source files (main.cc and unit_platform.cc), adds system-specific compile definitions, and links against the platform object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/platform/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test platform)\n    this_target_sources(main.cc unit_platform.cc)\n    this_target_compile_definitions(PLATFORM_OS_NAME=\"${CMAKE_SYSTEM_NAME}\")\n    this_target_object_libraries(platform)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: C++ API Addition - Context Access Methods\nDESCRIPTION: New getter methods added to Query class for accessing context and array objects.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nQuery::ctx\nQuery::array\n```\n\n----------------------------------------\n\nTITLE: Running TileDB PNG Example\nDESCRIPTION: Command to run the TileDB PNG example program. Takes an input PNG file, creates a TileDB array with the specified name, and produces an output PNG file after processing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/png_ingestion/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tiledb_png input.png my_array_name output.png\n```\n\n----------------------------------------\n\nTITLE: TileDB Array Schema Enumeration API\nDESCRIPTION: New C API functions for handling array schema enumerations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_schema_get_enumeration\ntiledb_array_load_enumerations_all_schemas\n```\n\n----------------------------------------\n\nTITLE: Configuring RTree Unit Tests with CMake\nDESCRIPTION: Sets up a unit test target for RTree functionality, specifying source files and linking required libraries. Uses custom CMake functions 'commence' and 'conclude' to define the test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/rtree/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test rtree)\n    this_target_sources(main.cc unit_rtree.cc)\n    this_target_link_libraries(tiledb_test_support_lib)\n    this_target_object_libraries(rtree)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Array Object Library in CMake\nDESCRIPTION: Sets up the 'capi_array_stub' object library by defining its source files and dependencies. The configuration includes the array source files, links to the export library, and incorporates object libraries for array and context functionality.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/array/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  array_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_array_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(array)\n  this_target_object_libraries(capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Format Unit Test in CMake\nDESCRIPTION: This snippet configures a unit test target for the URI format module. It includes the unit test module, sets up the test target named 'uri_format', specifies the source file, and links against the 'uri_format' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/storage_format/uri/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test uri_format)\n  this_target_sources(unit_uri_format.cc)\n  this_target_object_libraries(uri_format)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB C API Examples in CMake\nDESCRIPTION: Iterates through all collected C example sources, extracts the example name from the filename, and calls the build function to create an executable for each example.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/c_api/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(EXAMPLE_SOURCE ${TILEDB_EXAMPLE_SOURCES_CAPI})\n  # Get the binary name\n  string(REGEX\n    REPLACE \"^${CMAKE_CURRENT_SOURCE_DIR}/\" \"\"\n    EXAMPLE_STRIPPED ${EXAMPLE_SOURCE}\n  )\n  string(REGEX\n    REPLACE \".c$\" \"\"\n    EXAMPLE_BIN ${EXAMPLE_STRIPPED}\n  )\n\n  # Build example executable\n  build_TileDB_example_capi(${EXAMPLE_BIN})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Running TileDB Benchmark Script\nDESCRIPTION: Command to execute the Python benchmarking script that builds and runs the standalone benchmark programs.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd TileDB/test/benchmarking\n$ ./benchmark.py\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Test Compiler Options in CMake\nDESCRIPTION: Sets up compiler flags for TileDB tests, disabling deprecated declaration warnings to ensure tests continue to run as the API evolves.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# We want tests to continue as normal even as the API is changing,\n# so don't warn for deprecations, since they'll be escalated to errors.\nif (NOT MSVC)\n  add_compile_options(-Wno-deprecated-declarations)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing TileDB Config Files in CMake\nDESCRIPTION: Generates and installs TileDB configuration files, including TileDBConfig.cmake and TileDBConfigVersion.cmake, for use in other projects.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_package_config_file(\n  \"${TILEDB_CMAKE_INPUTS_DIR}/Config.cmake.in\"\n  \"${PROJECT_CONFIG}\"\n  INSTALL_DESTINATION \"${CONFIG_INSTALL_DIR}\"\n)\n\ninstall(\n  FILES \"${PROJECT_CONFIG}\"\n  DESTINATION \"${CONFIG_INSTALL_DIR}\"\n)\n\nif (TILEDB_VERSION)\n  set(TILEDB_PROJECT_CONFIG_VERSION_FILE \"${CMAKE_CURRENT_BINARY_DIR}/TileDBConfigVersion.cmake\")\n  write_basic_package_version_file(\"${TILEDB_PROJECT_CONFIG_VERSION_FILE}\"\n    VERSION \"${TILEDB_VERSION}\"\n    COMPATIBILITY SameMinorVersion\n  )\n  install(\n    FILES \"${TILEDB_PROJECT_CONFIG_VERSION_FILE}\"\n    DESTINATION \"${CONFIG_INSTALL_DIR}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Array Vacuum Function in C API\nDESCRIPTION: API addition for vacuuming (cleaning up/optimizing) an array in C.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_37\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_vacuum\n```\n\n----------------------------------------\n\nTITLE: Configuring Cap'n Proto Utils Test Target\nDESCRIPTION: Sets up the unit test target for Cap'n Proto utilities with required source files and core library dependencies. Enables serialization through compile definitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/serialization/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test capnp_utils)\n  this_target_sources(main.cc unit_capnp_utils.cc)\n  this_target_link_libraries(TILEDB_CORE_OBJECTS TILEDB_CORE_OBJECTS_ILIB)\n\n  # Enable serialization\n  target_compile_definitions(unit_capnp_utils PRIVATE -DTILEDB_SERIALIZATION)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB Documentation Locally\nDESCRIPTION: Commands for building the TileDB documentation locally using Sphinx. The script installs required packages in a Python virtual environment and generates HTML documentation that can be viewed in a browser.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd TileDB/doc\n$ ./local-build.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing TileDB Delete Commit File Specification\nDESCRIPTION: This snippet provides a link to the specification for the delete commit file format in TileDB. The delete commit file is a crucial component in implementing deletions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/DELETES_AND_UPDATES.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[delete commit file](https://github.com/TileDB-Inc/TileDB/blob/dev/format_spec/delete_commit_file.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring AST Test Support Library in CMake\nDESCRIPTION: Defines and configures a static library for AST test support, including source files and compiler options for handling deprecated declarations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/ast/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(AST_TEST_SUPPORT_SOURCES\n    ${CMAKE_SOURCE_DIR}/test/support/src/ast_helpers.h\n    ${CMAKE_SOURCE_DIR}/test/support/src/ast_helpers.cc\n    )\nadd_library(ast_test_support_lib STATIC EXCLUDE_FROM_ALL ${AST_TEST_SUPPORT_SOURCES})\nif (NOT MSVC)\n  target_compile_options(ast_test_support_lib PRIVATE -Wno-deprecated-declarations)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Aggregators Object Library\nDESCRIPTION: Creates an object library for TileDB query aggregators, specifying source files and dependencies. Includes count, min-max, sum aggregators and related utility files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/readers/aggregators/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library aggregators)\n    this_target_sources(count_aggregator.cc min_max_aggregator.cc operation.cc output_buffer_validator.cc safe_sum.cc sum_aggregator.cc)\n    this_target_object_libraries(baseline array_schema)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build with Bootstrap Script on Windows\nDESCRIPTION: PowerShell commands to create a build directory and run the bootstrap script for configuring the build on Windows systems. Use Get-Help for available options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/BUILD.md#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir build\ncd build\n# You can see a list of all available options by running Get-Help ..\\bootstrap.ps1 -Detailed\n..\\bootstrap.ps1 <flags>\n```\n\n----------------------------------------\n\nTITLE: Defining a FunctionNode Template Class in C++\nDESCRIPTION: Declaration of the FunctionNode template class that transforms input data of type InItem to output data of type OutItem. By default, OutItem is the same as InItem.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class InItem, class OutItem = InItem>\nclass FunctionNode;\n```\n\n----------------------------------------\n\nTITLE: Building the Example Project on Windows\nDESCRIPTION: PowerShell commands to build the example project on Windows. Note the use of -A X64 flag to specify 64-bit architecture, which is required for TileDB compatibility.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/README.md#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n> cd TileDB\\examples\\cmake_project\n> mkdir build\n> cd build\n> cmake -A X64 -DCMAKE_PREFIX_PATH=\\path\\to\\TileDB\\dist ..\n> cmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Attribute from STL Array in TileDB v2.0.4\nDESCRIPTION: Demonstrates the corrected usage of the C++ Attribute::create API to build an attribute from an STL array.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_28\n\nLANGUAGE: C++\nCODE:\n```\nstd::array<int, 3> data = {1, 2, 3};\nAttribute attr = Attribute::create<int>(ctx, \"attr_name\", data.data(), data.size());\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Object Library in CMake\nDESCRIPTION: Sets up the 'filter' object library with its source files and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library filter)\n    this_target_sources(filter.cc filter_buffer.cc filter_storage.cc)\n    this_target_object_libraries(baseline buffer tiledb_crypto)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Flags for Linux in CMake\nDESCRIPTION: Sets the link flags for the TileDB target on Linux systems to exclude all libraries from automatic export.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n  set_target_properties(tiledb\n    PROPERTIES\n      LINK_FLAGS \"-Wl,--exclude-libs=ALL\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Array Folder Structure with Fragment Metadata Location\nDESCRIPTION: Shows the hierarchical folder structure of a TileDB array, highlighting where consolidated fragment metadata files are stored within the __fragment_meta folder.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/consolidated_fragment_metadata_file.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                              # array folder\n   |_ ....\n   |_ __fragment_meta                 # array fragment metadata folder\n         |_ <timestamped_name>.meta   # consolidated fragment metadata file\n         |_ ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Threading Support for Blosc in TileDB\nDESCRIPTION: Handles the pthread library requirements for Blosc. It checks for existing pthread support and adds a substitute Windows pthread implementation for MSVC. The code ensures appropriate threading capabilities are available across different platforms.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/external/blosc/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Blosc requires a pthread library. There's a substitute one available for Windows for\n# use with Visual C++, which doesn't have it. The following checks if pthreads is\n# already enable, and adds the substitute Windows pthread library for Visual C++.\n# Variables used for checking are set by CMake FindThreads module.\nif (CMAKE_USE_PTHREADS_INIT AND NOT MSVC)\n  message(DEBUG \"Using system-provided pthread\")\nelseif(CMAKE_USE_WIN32_THREADS_INIT OR MSVC)\n  message(DEBUG \"Using blosc-provided pthread substitute for Win32\")\n  list(APPEND SOURCES\n    ${SOURCE_DIR}/src/win32/pthread.c\n  )\nelse()\n  message(FATAL_ERROR \"Thread package found, but not a supported one\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Complete Proof Outline for Source Operations in C\nDESCRIPTION: This code snippet presents the complete proof outline for the source node operations, including inject, fill, and push. It shows the state transitions and possible predicates at each step, considering asynchronous sink actions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nwhile (not done) {\n  /* { state = 000 ∧ items = 000 }                   ∨ */ \n  /* { state = 001 ∧ ( items = 001 ∨ items = 000 ) } ∨ */\n  /* { state = 010 ∧ items = 010 }                   ∨ */\n  /* { state = 011 ∧ ( items = 011 ∨ items = 010 ) }   */\n\n  inject: items[0] ← 1\n\n  /* { state = 000 ∧ items = 100 }                   ∨ */\n  /* { state = 001 ∧ ( items = 101 ∨ items = 100 ) } ∨ */\n  /* { state = 010 ∧ items = 110 }                   ∨ */\n  /* { state = 011 ∧ ( items = 111 ∨ items = 110 ) }   */\n\n  fill: state[0] ← 1\n\n  /* { state = 000 ∧ items = 000 }                   ∨ */ \n  /* { state = 001 ∧ ( items = 001 ∨ items = 000 ) } ∨ */\n  /* { state = 010 ∧ items = 010 }                   ∨ */\n  /* { state = 011 ∧ ( items = 011 ∨ items = 010 ) } ∨ */\n  /* { state = 100 ∧ items = 100 }                   ∨ */ \n  /* { state = 101 ∧ ( items = 101 ∨ items = 100 ) } ∨ */\n  /* { state = 110 ∧ items = 110 }                   ∨ */\n  /* { state = 111 ∧ ( items = 111 ∨ items = 110 ) }   */\n\n  push: 〈 await ¬{ state = 111 } \n\n  /* { state = 000 ∧ items = 000 }                   ∨ */ \n  /* { state = 001 ∧ ( items = 001 ∨ items = 000 ) } ∨ */\n  /* { state = 010 ∧ items = 010 }                   ∨ */\n  /* { state = 011 ∧ ( items = 011 ∨ items = 010 ) }   */\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Installing TileDB for Benchmarking\nDESCRIPTION: Commands to build and install a release version of TileDB locally for benchmarking purposes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd TileDB/build\n$ ../bootstrap && make -j4 install\n$ cd ../dist\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Unit Test in CMake\nDESCRIPTION: Sets up the 'buffer' unit test target with specified source files, object libraries, and linking dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/buffer/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test buffer)\n    this_target_sources(main.cc unit_buffer.cc unit_serialization_buffer.cc)\n    this_target_object_libraries(buffer)\n    this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring DAG Utility Libraries in CMake\nDESCRIPTION: Sets up header-only object libraries for various concurrent data structures and synchronization primitives used in the TileDB DAG implementation. The libraries include bounded buffer, concurrent set and map, range join, and spinlock implementations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/utility/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\n################################################################\n# Include subdirectory with unit tests                         #\n################################################################\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n\ndag_add_header_only_object_library(bounded_buffer)\ndag_add_header_only_object_library(concurrent_set)\ndag_add_header_only_object_library(concurrent_map)\ndag_add_header_only_object_library(range_join)\ndag_add_header_only_object_library(spinlock)\n```\n\n----------------------------------------\n\nTITLE: Configuring NDRectangle Object Library Build in TileDB CMake\nDESCRIPTION: This snippet defines the build configuration for the NDRectangle component in TileDB's C API. It includes necessary CMake modules, specifies source files, and configures an object library with dependencies on export, baseline, ndrectangle, and capi_context_stub libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/ndrectangle/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  ndrectangle_api.cc\n  )\ngather_sources(${SOURCES})\n\ncommence(object_library capi_ndrectangle)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline ndrectangle capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Source Operation Proof Outline\nDESCRIPTION: Shows the proof outline for the Source port operation with state predicates and actions for producing and transferring items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n     do produce and insert item\n     /* { state = 00 ∨ state = 01 } ∧ { source_item = full } */\n     do fill\n     /* { state = 10 ∨ state = 11 } ∧ { source_item = full } */\n     do push\n     /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n   }\n```\n\n----------------------------------------\n\nTITLE: Building TileDB with Address Sanitizer\nDESCRIPTION: Commands to configure and build TileDB with the Address Sanitizer enabled. This requires specifying the vcpkg base triplet and creating a separate build directory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/BUILD.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd TileDB && mkdir build-asan && cd build-asan\n../bootstrap --enable-sanitizer=address --vcpkg-base-triplet=x64-linux\nmake check\n```\n\n----------------------------------------\n\nTITLE: C++ API Breaking Change - Buffer Size Methods Deprecation\nDESCRIPTION: Removal of deprecated methods for buffer size calculations in C and C++ APIs, affecting tiledb_array_max_buffer_size, tiledb_array_max_buffer_size_var, and Array::max_buffer_elements.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\n// Removed methods:\ntiledb_array_max_buffer_size\ntiledb_array_max_buffer_size_var\nArray::max_buffer_elements\n```\n\n----------------------------------------\n\nTITLE: Configuring Compression Filter Object Library in CMake\nDESCRIPTION: Sets up the 'compression_filter' object library with its source and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library compression_filter)\n    this_target_sources(compression_filter.cc)\n    this_target_object_libraries(constants compressors filter)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Thread Pool Object Library in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the TileDB thread pool component. It includes necessary files, defines source files, and creates an object library target named 'thread_pool'. The library depends on the 'baseline' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/thread_pool/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    thread_pool.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library thread_pool)\n    this_target_sources(${SOURCES})\n    this_target_object_libraries(baseline)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for MIMOFunctionNode in C++\nDESCRIPTION: Constructor for MIMOFunctionNode that accepts a function object. The function must transform a tuple of input types to a tuple of output types.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Function>\nexplicit MimoFunctionNode(Function&& f);\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Query Module Build\nDESCRIPTION: Sets up CMake build configuration for TileDB query components. Includes common build settings and adds various query-related subdirectories for compilation. Currently does not define object libraries due to dependencies requiring full library linking.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\nadd_subdirectory(ast)\nadd_subdirectory(deletes_and_updates)\nadd_subdirectory(external_sort)\nadd_subdirectory(readers)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Defining Consumer Node Signature in C++\nDESCRIPTION: Specifies the function signature required for a consumer node in the TileDB task graph. Consumer nodes are leaf nodes that have only input ports and no output ports. They take a const reference parameter and return void.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/doc/glossary.md#2025-04-16_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nvoid fun (const Type& a);\n```\n\nLANGUAGE: c++\nCODE:\n```\n  requires std::is_invocable_r_v<void, Fun, const Type&>;\n```\n\n----------------------------------------\n\nTITLE: Dumping Raw Stats in TileDB v2.0.3 (C++ API)\nDESCRIPTION: Demonstrates the usage of the new C++ API function for dumping raw statistics data.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_30\n\nLANGUAGE: C++\nCODE:\n```\nstd::string stats_dump = Stats::raw_dump();\n// Use stats_dump\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Compilation for Experimental Features in CMake\nDESCRIPTION: Sets up a test compilation target 'compile_experimental' to ensure link completeness. It's excluded from the default build and depends on 'all_link_complete' target.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(compile_experimental EXCLUDE_FROM_ALL)\nadd_dependencies(all_link_complete compile_experimental)\ntarget_sources(compile_experimental PRIVATE\n        test/compile_experimental_main.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header-Only Unit Tests for DAG Utils in CMake\nDESCRIPTION: This snippet uses a custom CMake function 'dag_add_header_only_unit_test' to define unit tests for various DAG utility components. It includes tests for concurrent_map, concurrent_set, bounded_buffer, range_join, and spinlock.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/utility/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_unit_test(concurrent_map)\ndag_add_header_only_unit_test(concurrent_set)\ndag_add_header_only_unit_test(bounded_buffer)\ndag_add_header_only_unit_test(range_join)\ndag_add_header_only_unit_test(spinlock)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Error Object Library with CMake\nDESCRIPTION: Defines the build configuration for the TileDB C API error module. It includes common CMake modules, specifies source files, and configures an object library target with appropriate dependencies. The configuration also adds a test subdirectory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/error/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    error_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_error)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline exception_wrapper)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bitshuffle Filter Object Library in CMake\nDESCRIPTION: Sets up the 'bitshuffle_filter' object library, including external bitshuffle sources and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library bitshuffle_filter)\n    cmake_path(APPEND TILEDB_SOURCE_ROOT \"external/src/bitshuffle\" OUTPUT_VARIABLE BITSHUFFLE_SOURCE_ROOT)\n    cmake_path(APPEND TILEDB_SOURCE_ROOT \"external/include/bitshuffle\" OUTPUT_VARIABLE BITSHUFFLE_INCLUDE)\n    list(APPEND BITSHUFFLE_SOURCES\n        ${BITSHUFFLE_SOURCE_ROOT}/bitshuffle_core.cc\n        ${BITSHUFFLE_SOURCE_ROOT}/iochain.cc\n        )\n    this_target_sources(bitshuffle_filter.cc ${BITSHUFFLE_SOURCES})\n    this_target_object_libraries(baseline buffer filter)\n    set_source_files_properties(\n        bitshuffle_filter.cc ${BITSHUFFLE_SOURCES}\n        PROPERTIES\n        INCLUDE_DIRECTORIES \"${BITSHUFFLE_INCLUDE}\"\n    )\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Experimental Tests in CMake\nDESCRIPTION: Sets up build configuration for experimental features and their unit tests, with conditional compilation based on TILEDB_TESTS flag.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(experimental)\nif (TILEDB_TESTS)\n  add_custom_target(experimental_unit_tests)\n  retrieve_from(Unit_Tests ACCUMULATOR unit_test_targets)\n  if (${Unit_Tests})\n    add_dependencies(experimental_unit_tests ${Unit_Tests})\n  endif()\n  reset_accumulator(ACCUMULATOR unit_test_targets)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a Scheduler Class in C++\nDESCRIPTION: Declaration of the Scheduler base class that manages task execution in the task graph. Provides methods for submitting and waiting on tasks.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\nclass Scheduler;\n```\n\n----------------------------------------\n\nTITLE: Configuring Checksum Filters Object Library in CMake\nDESCRIPTION: Sets up the 'checksum_filters' object library with MD5 and SHA256 filter sources.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library checksum_filters)\n    this_target_sources(\n        checksum_md5_filter.cc checksum_sha256_filter.cc)\n    this_target_object_libraries(config filter)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for TileDB Algorithm Library in CMake\nDESCRIPTION: This snippet defines the source files to be included in the TileDB algorithm library. It uses CMake's list command to append source files to the SOURCES variable.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/algorithm/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND SOURCES\n    parallel_merge.cc\n)\ngather_sources(${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Creating TileDB Unit Test Executable in CMake\nDESCRIPTION: Creates the main unit test executable for TileDB, linking together all the test sources and the TileDB core objects. This executable runs all the unit tests for the TileDB project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# unit test executable\nadd_executable(\n  tiledb_unit EXCLUDE_FROM_ALL\n  $<TARGET_OBJECTS:TILEDB_CORE_OBJECTS>\n  ${TILEDB_UNIT_TEST_SOURCES}\n  \"src/unit.cc\"\n)\n\ntarget_compile_options(tiledb_unit PRIVATE \"$<$<CXX_COMPILER_ID:MSVC>:/utf-8>\")\n\ntarget_include_directories(\n  tiledb_unit BEFORE PRIVATE\n    ${TILEDB_CORE_INCLUDE_DIR}\n    ${TILEDB_EXPORT_HEADER_DIR}\n)\n\ntarget_link_libraries(tiledb_unit\n  PUBLIC\n    TILEDB_CORE_OBJECTS_ILIB\n    TILEDB_CORE_OBJECTS\n    Catch2::Catch2\n    tiledb_test_support_lib\n    configuration_definitions\n    rapidcheck\n)\n\ntarget_link_libraries(tiledb_unit PRIVATE $<BUILD_INTERFACE:common>)\ntarget_include_directories(tiledb_unit PRIVATE\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../external/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Array Unit Tests with CMake\nDESCRIPTION: This snippet defines a unit test target for the TileDB C API array functionality. It includes source files, links object libraries for array stubs, array schema stubs, and domain stubs, and adds the TileDB test support library as a dependency.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/array/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_array)\n  this_target_sources(unit_capi_array.cc)\n  this_target_object_libraries(\n    capi_array_stub\n    capi_array_schema_stub\n    capi_domain_stub\n  )\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Float Scale Filter Options Structure in Markdown\nDESCRIPTION: This snippet describes the filter options for the float scale filter in TileDB using a Markdown table. It includes fields for scale, offset, and byte width parameters.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Scale | `double` | Scale parameter used for float scaling filter conversion |\n| Offset | `double` | Offset parameter used for float scaling filter conversion |\n| Byte width | `uint64_t` | Width of the stored integer data in bytes |\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Build TileDB C++ API Examples\nDESCRIPTION: Creates a function that builds an executable for each example. It links the necessary libraries including tiledb and platform-specific libraries like pthread and dl on non-Windows platforms.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(build_TileDB_example_cppapi TARGET)\n  add_executable(${TARGET}_cpp EXCLUDE_FROM_ALL ${TARGET}.cc)\n  target_link_libraries(${TARGET}_cpp PUBLIC local_install tiledb)\n  if (NOT WIN32)\n    # On Linux, must explicitly link -lpthread -ldl in order for static linking\n    # to libzstd or libcurl to work.\n    target_link_libraries(${TARGET}_cpp PUBLIC pthread dl)\n  endif()\n  add_dependencies(examples_cpp ${TARGET}_cpp)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Pool Unit Tests in CMake\nDESCRIPTION: Sets up CMake unit test configuration for TileDB's thread pool component. Includes object libraries for cancelable tasks and specifies test source files. The configuration uses custom CMake functions 'commence' and 'conclude' for test setup.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/thread_pool/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test thread_pool)\n    # For legacy reasons, the thread pool unit tests also test the cancelable\n    # task class, whose object library depends upon `thread_pool`. At some point\n    # either the unit test should be split apart or cancelable tasks be made\n    # a part of the thread pool.\n    this_target_object_libraries(cancelable_tasks)\n    this_target_sources(main.cc unit_thread_pool.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Only Unit Tests for TileDB DAG Ports in CMake\nDESCRIPTION: Defines header-only unit tests for the pseudo_nodes, concurrency, and ports components of the TileDB DAG system using a custom macro dag_add_header_only_unit_test.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_unit_test(pseudo_nodes)\ndag_add_header_only_unit_test(concurrency)\ndag_add_header_only_unit_test(ports)\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Client Object Library in CMake\nDESCRIPTION: Sets up the 'rest_client' object library, which depends on the rest_profile library. This library likely implements the client-side functionality for REST operations in TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/rest/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library rest_client)\n  this_target_sources(rest_client.cc)\n  this_target_object_libraries(rest_profile)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Session Token in TileDB v2.0.0\nDESCRIPTION: Shows how to set the AWS Security Token Service session token using the new configuration option.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_32\n\nLANGUAGE: C++\nCODE:\n```\nConfig config;\nconfig[\"vfs.s3.session_token\"] = \"your_session_token_here\";\nContext ctx(config);\n```\n\n----------------------------------------\n\nTITLE: Configuring 'domain' Object Library in CMake for TileDB\nDESCRIPTION: Defines the 'domain' object library, specifying its source file and dependencies on datum, dimension, and math libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library domain)\n    this_target_sources(domain.cc)\n    this_target_object_libraries(datum dimension math)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for FunctionNode in C++\nDESCRIPTION: Constructor for FunctionNode that accepts a function object. The function must transform an InItem to an OutItem.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Function>\nProducerNode(Function&& f);\n```\n\n----------------------------------------\n\nTITLE: Creating Edge Type Alias in C++\nDESCRIPTION: Example of creating a type alias for Edge to simplify edge creation when using the same Edge type throughout a graph.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Item>\nusing GraphEdge = Edge<AsyncMover3, Item>;\n```\n\n----------------------------------------\n\nTITLE: Configuring WebP Filter Object Library in CMake\nDESCRIPTION: Sets up the 'webp_filter' object library with conditional WebP support and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library webp_filter)\n    this_target_sources(webp_filter.cc)\n    this_target_object_libraries(filter misc_types tile)\n    if(TILEDB_WEBP)\n        this_target_compile_definitions(-DTILEDB_WEBP)\n        find_package(WebP REQUIRED)\n        this_target_link_libraries(WebP::webp)\n    endif()\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Directory Object Library in CMake\nDESCRIPTION: Defines an object library for home directory functionality in TileDB. Includes source files, export linkage, and baseline object library dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/filesystem/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library home_directory)\n  this_target_sources(home_directory.cc)\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Using Updated TileDB C Header Include\nDESCRIPTION: Demonstrates the new correct way to include TileDB headers in C applications after the include files were moved to a tiledb folder.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_52\n\nLANGUAGE: C\nCODE:\n```\n#include <tiledb/tiledb.h>\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Error Unit Tests in CMake\nDESCRIPTION: Defines the build configuration for unit tests targeting the TileDB C API error handling functionality. The configuration includes the necessary source files and object libraries for the unit tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/error/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_error)\n  this_target_sources(unit_capi_error.cc)\n  this_target_object_libraries(capi_error)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Directory Object Library in CMake\nDESCRIPTION: Defines the array_directory object library with its source files and dependencies. Includes conditional compilation for statistics support.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library array_directory)\n    this_target_sources(array_directory.cc)\n    this_target_object_libraries(\n        array_schema\n        baseline\n        context_resources\n        fragment_identifier\n        generic_tile_io\n        vfs\n    )\n    if(TILEDB_STATS)\n        this_target_compile_definitions(-DTILEDB_STATS)\n    endif()\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for TileDB C API Data Order\nDESCRIPTION: This CMake configuration sets up the build for the data order component of the TileDB C API. It includes common CMake files, defines source files, creates an object library, and sets up dependencies and test subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/data_order/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  data_order_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_data_order)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline constants exception_wrapper)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Registering Sieve Test and Adding it to Test Suite in CMake\nDESCRIPTION: Registers the unit_ports_sieve as a test that can be run with CTest and adds it as a dependency to the all_unit_tests target. The test will run in the current source directory context.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n    NAME \"unit_ports_sieve\"\n    COMMAND $<TARGET_FILE:unit_ports_sieve>\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\nadd_dependencies(all_unit_tests \"unit_ports_sieve\")\n```\n\n----------------------------------------\n\nTITLE: Configuring 'datum' Object Library in CMake\nDESCRIPTION: Sets up an object library named 'datum' using custom CMake functions. It specifies the source files to be included in the library. This library likely contains implementations for untyped and dynamic typed datum structures used in TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/types/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library datum)\n    this_target_sources(untyped_datum.cc dynamic_typed_datum.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Filter and Filter List Functions\nDESCRIPTION: This section covers functions for working with TileDB filters and filter lists, including allocation, deallocation, configuration, and querying filter properties.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_7\n\nLANGUAGE: C\nCODE:\n```\ntiledb_filter_alloc\ntiledb_filter_free\ntiledb_filter_get_type\ntiledb_filter_set_option\ntiledb_filter_get_option\ntiledb_filter_list_alloc\ntiledb_filter_list_free\ntiledb_filter_list_add_filter\ntiledb_filter_list_set_max_chunk_size\ntiledb_filter_list_get_nfilters\ntiledb_filter_list_get_filter_from_index\ntiledb_filter_list_get_max_chunk_size\n```\n\n----------------------------------------\n\nTITLE: Configuring XOR Filter Object Library in CMake\nDESCRIPTION: Sets up the 'xor_filter' object library with its source and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library xor_filter)\n    this_target_sources(xor_filter.cc)\n    this_target_object_libraries(filter)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuration Option for S3 Storage Class in C\nDESCRIPTION: This code snippet shows the new configuration option added in TileDB v2.24.1 to set the storage class of newly uploaded S3 objects.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvfs.s3.storage_class\n```\n\n----------------------------------------\n\nTITLE: Generating Deprecation History using Julia\nDESCRIPTION: A Julia script that generates a deprecation history by analyzing git diffs between TileDB versions. The script searches for DEPRECATE markers in the tiledb.h file and compiles them into a markdown document.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/policy/api_changes.md#2025-04-16_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nimport Base.+\n+(a::VersionNumber, b::VersionNumber) = VersionNumber(a.major + b.major, a.minor + b.minor, a.patch + b.patch)\n\nversions = [\n  v\"2.2.1\",\n  v\"2.3.0\",\n  v\"2.4.0\",\n  v\"2.5.0\",\n  v\"2.6.0\",\n  v\"2.7.0\",\n  v\"2.8.0\",\n  v\"2.9.0\",\n  v\"2.10.0\",\n  v\"2.11.0\",\n  v\"2.12.0\"\n]\n\ndata = Dict()\n\nfor i in 1:length(versions)-1\n  v = versions[i]\n  v_next = versions[i+1]\n  range = \"$v..$v_next\"\n\n  data[range] = read(pipeline(`git diff $v..$v_next tiledb/sm/c_api/tiledb.h`, Cmd(`grep -A2 DEPRECATE`, ignorestatus=true)), String)\nend\n\nprint(data)\n\nopen(\"deprecations.md\", \"w\") do f\n  for i in 1:length(versions)-1\n    v = versions[i]\n    v_next = versions[i+1]\n    range = \"$v..$v_next\"\n\n    println(f, \"## $range\\n\")\n    write(f, unescape_string(string(data[range])))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Float Scaling Filter Object Library in CMake\nDESCRIPTION: Sets up the 'float_scaling_filter' object library with its source and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library float_scaling_filter)\n    this_target_sources(float_scaling_filter.cc)\n    this_target_object_libraries(filter)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Serialization Build Settings\nDESCRIPTION: Configures the CMake build environment for TileDB serialization by including common build settings and adding test subdirectories. Uses the common module and sets up test infrastructure.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/storage_format/serialization/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Headers in CMake\nDESCRIPTION: Sets up lists of C API headers to be installed, categorized as filename headers and relative headers. It also configures the export header generation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND TILEDB_C_API_FILENAME_HEADERS\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb_deprecated.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb_enum.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb_version.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb_experimental.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb_dimension_label_experimental.h\"\n)\n\nif (TILEDB_SERIALIZATION)\n    list(APPEND TILEDB_C_API_FILENAME_HEADERS\n        \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api/tiledb_serialization.h\"\n    )\nendif()\n\nlist(APPEND TILEDB_C_API_RELATIVE_HEADERS\n    \"${CMAKE_SOURCE_DIR}/tiledb/api/c_api/api_external_common.h\"\n    \"${CMAKE_SOURCE_DIR}/tiledb/api/c_api/array/array_api_experimental.h\"\n    # ... (more headers)\n)\nset(TILEDB_C_API_RELATIVE_HEADER_BASE \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\nset(TILEDB_EXPORT_HEADER_DIR \"${CMAKE_BINARY_DIR}/tiledb\")\nset(TILEDB_EXPORT_HEADER_NAME \"tiledb_export.h\")\nset(TILEDB_EXPORT_HEADER \"${TILEDB_EXPORT_HEADER_DIR}/${TILEDB_EXPORT_HEADER_NAME}\")\nset(TILEDB_EXPORT_HEADER_LOCALINSTALL_PATH \"tiledb/api/c_api/${TILEDB_EXPORT_HEADER_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: TileDB C++ Array Creation\nDESCRIPTION: Updated C++ API for array creation with explicit context parameter.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nArray::create(Context)\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Object Library in CMake\nDESCRIPTION: Defines and configures the 'group' object library with its source files and dependencies. The library includes multiple group-related source files and links against baseline, buffer, and object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/group/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(group OBJECT group_directory.cc group.cc group_details.cc group_details_v1.cc group_details_v2.cc group_member.cc group_member_v1.cc group_member_v2.cc)\ntarget_link_libraries(group PUBLIC baseline $<TARGET_OBJECTS:baseline>)\ntarget_link_libraries(group PUBLIC buffer $<TARGET_OBJECTS:buffer>)\ntarget_link_libraries(group PUBLIC object $<TARGET_OBJECTS:object>)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Serialization Build\nDESCRIPTION: CMake configuration that includes common build settings and adds test subdirectory. Contains a note about future restructuring to support object libraries when query objects are better organized.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/serialization/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Catch-Based Sieve Test for TileDB DAG Nodes in CMake\nDESCRIPTION: Sets up a special 'sieve' test for TileDB DAG nodes that doesn't use the Catch testing framework. This includes creating an executable, specifying its source files, and registering it with the test system.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(unit_nodes_sieve EXCLUDE_FROM_ALL)\n\ntarget_sources(unit_nodes_sieve PUBLIC\n    unit_nodes_sieve.cc\n)\n\nadd_test(\n    NAME \"unit_nodes_sieve\"\n    COMMAND $<TARGET_FILE:unit_nodes_sieve>\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\nadd_dependencies(all_unit_tests \"unit_nodes_sieve\")\n```\n\n----------------------------------------\n\nTITLE: Configuring As-Built Interface Library in CMake\nDESCRIPTION: Creates an interface library called 'as_built' for managing compiler definitions related to the build configuration. Includes common CMake configuration and sets up test subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/as_built/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\n# Create an interface library for use in passing the\n# appropriate compiler definitions for the build configuration.\n\nadd_library(as_built INTERFACE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: API Change - Query Result Size Type Update\nDESCRIPTION: Change in return type for Query::est_result_size_var from std::pair to std::array, with size estimates for offsets changed from elements to bytes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nstd::array<uint64_t, 2> Query::est_result_size_var\n```\n\n----------------------------------------\n\nTITLE: Setting Up Core TileDB Build Targets in CMake\nDESCRIPTION: Initializes core build targets including all_link_complete and accumulator definitions for object libraries and unit tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(accumulator)\n\nadd_custom_target(all_link_complete)\ndefine_accumulator(object_library_compile_targets)\n\ndefine_accumulator(unit_test_targets)\nadd_custom_target(all_unit_tests)\n```\n\n----------------------------------------\n\nTITLE: API Addition - C++ Fill Value Methods\nDESCRIPTION: New C++ API methods added to Attribute class for getting and setting default fill values.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_26\n\nLANGUAGE: C++\nCODE:\n```\nAttribute::set_fill_value\nAttribute::get_fill_value\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Library for TileDB Stats in CMake\nDESCRIPTION: Sets up an object library for the TileDB stats module. It specifies source files, conditional compilation definitions for stats tracking, and dependencies on other object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/stats/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library stats)\n    this_target_sources(stats.cc global_stats.cc)\n    if(TILEDB_STATS)\n      this_target_compile_definitions(-DTILEDB_STATS)\n    endif()\n    this_target_object_libraries(baseline stringx)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Dimension C API Object Library in CMake\nDESCRIPTION: This CMake configuration sets up the object library for the TileDB dimension C API. It includes necessary source files, links against required libraries like 'export', and includes dependencies on other object libraries such as 'capi_datatype', 'capi_filter_list_stub', 'capi_string', and 'dimension'.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/dimension/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    dimension_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_dimension_stub)\n  this_target_sources(dimension_api.cc)\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_datatype capi_filter_list_stub capi_string)\n  this_target_object_libraries(dimension)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Source Proof with Concurrent Sink Actions in C\nDESCRIPTION: Detailed proof outline for the Source component, considering concurrent Sink actions. It shows state transitions, predicates, and actions for inject, fill, and push, while accounting for possible Sink interventions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_18\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) } */\n\n        /* extract: { state = 01 ∧ items = 01 } → { state = 01 ∧ items = 00 } */\n        /* drain: { state = 01 ∧ items = 00 } → { state = 00 ∧ items = 00 } */\n        /* pull: no change\n\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) } */\n     inject: items[0] ← 1\n     /* { state = 00 ∧ items = 10 } ∨ { state = 01 ∧ ( items = 10 ∨ items = 11 ) } */\n\n        /* extract: { state = 01 ∧ items = 11 } → { state = 01 ∧ items = 10 } */\n        /* drain: { state = 01 ∧ items = 10 } → { state = 00 ∧ items = 10 } */\n        /* pull: no change\n\n     /* { state = 00 ∧ items = 10 } ∨ { state = 01 ∧ ( items = 10 ∨ items = 11 ) } */\n     fill: state[0] ← 1\n     /* { state = 10 ∧ items = 10 } ∨ { state = 11 ∧ ( items = 10 ∨ items = 11 ) } */\n\n        /* extract: { state = 11 ∧ items = 11 } → { state = 11 ∧ items = 10 } */\n        /* drain: { state = 11 ∧ items = 10 } → { state = 10 ∧ items = 10 } */\n        /* pull: { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } */\n        /* pull+extract: { state = 01 ∧ items = 01 } → { state = 01 ∧ items = 00 } */\n        /* pull+extract+drain: { state = 01 ∧ items = 00 } → { state = 00 ∧ items = 00 } */\n\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) } ∨ */\n     /* { state = 10 ∧ items = 10 } ∨ { state = 11 ∧ ( items = 10 ∨ items = 11 ) } */\n     push: 〈 await ¬{ state = 11 } :\n              if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) } */\n   }\n```\n\n----------------------------------------\n\nTITLE: Building TileDB PNG Example\nDESCRIPTION: Commands to build the TileDB PNG example program using CMake. Creates a build directory, navigates into it, and builds the executable using make.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/png_ingestion/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build\n$ cd build\n$ cmake .. && make\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Buffer Unit Tests with CMake\nDESCRIPTION: This snippet configures the unit tests for the TileDB C API buffer component. It includes the unit_test CMake module, then defines and configures a unit test target named 'capi_buffer' with the source file 'unit_capi_buffer.cc' and links it with the 'capi_buffer_stub' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/buffer/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_buffer)\n  this_target_sources(unit_capi_buffer.cc)\n  this_target_object_libraries(capi_buffer_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Plan Sources and Dependencies in CMake\nDESCRIPTION: Sets up source files and creates an object library for the TileDB Query Plan C API. The library depends on export, baseline, and query_plan components. Note that this object library cannot link standalone due to query_plan dependency constraints.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_plan/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nlist(APPEND SOURCES\n  query_plan_api.cc\n  )\ngather_sources(${SOURCES})\n\nadd_library(capi_query_plan OBJECT ${SOURCES})\ntarget_link_libraries(capi_query_plan PUBLIC export)\ntarget_link_libraries(capi_query_plan PUBLIC baseline $<TARGET_OBJECTS:baseline>)\ntarget_link_libraries(capi_query_plan PUBLIC query_plan $<TARGET_OBJECTS:query_plan>)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Defining Header-Only Object Library for TileDB DAG Edge\nDESCRIPTION: Uses a custom CMake function to define a header-only object library named 'edge' for the TileDB DAG edge component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/edge/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_object_library(edge)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Ranges Build Settings\nDESCRIPTION: CMake configuration that includes common build settings and sets up object library targets for the TileDB ranges component. Also adds test subdirectories to the build.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/__ranges/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Adding Config::must_find marker in C++\nDESCRIPTION: New marker for use with Config::get signature. Throws Status_ConfigError if value cannot be found.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nConfig::must_find\n```\n\n----------------------------------------\n\nTITLE: Setting Position Independent Code for TileDB Core Sources\nDESCRIPTION: Configures CMake to compile all core sources with Position Independent Code (PIC) enabled, which is important for shared library creation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Pipeline Structure in Markdown\nDESCRIPTION: This snippet outlines the main structure of the TileDB filter pipeline using a Markdown table. It includes fields for maximum chunk size, number of filters, and individual filter entries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Max chunk size | `uint32_t` | Maximum chunk size within a tile |\n| Num filters | `uint32_t` | Number of filters in pipeline |\n| Filter 1 | [Filter](#filter) | First filter |\n| … | … | … |\n| Filter N | [Filter](#filter) | Nth filter |\n```\n\n----------------------------------------\n\nTITLE: Testing TileDB Version Compatibility with CMake find_package\nDESCRIPTION: Runs a series of find_package tests against the parsed TileDB version numbers to verify compatibility. It checks major.minor version compatibility, exact version matching, and default version compatibility, counting any unexpected results.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/packaging/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(count_unacceptable 0)\nfind_package(TileDB \"${ver_major}.${ver_minor}\" )\nif (NOT TileDB_FOUND)\n  message(STATUS \"BAD: Unable to find expected TileDB M.m version!\")\n  math(EXPR count_unacceptable \"${count_unacceptable}+1\")\nelse()\n  message(STATUS \"found TileDB satisfying version ${ver_major}.${ver_minor}!\")\nendif()\n\nfind_package(TileDB \"${ver_major}.${ver_minor}.${ver_patch}\" EXACT)\nif (NOT TileDB_FOUND)\n  message(STATUS \"Unable to find expected TileDB M.m.P version!\")\n  math(EXPR count_unacceptable \"${count_unacceptable}+1\")\nelse()\n  message(STATUS \"found TileDB version ${ver_major}.${ver_minor}.${ver_patch}!\")\nendif()\n\nfind_package(TileDB \"${ver_major}.${ver_minor}.${ver_patch}\")\nif (NOT TileDB_FOUND)\n  message(STATUS \"Failed to find TileDB for version ${ver_major}.${ver_minor}.${ver_patch}!\")\n  math(EXPR count_unacceptable \"${count_unacceptable}+1\")\nelse()\n  message(STATUS \"FOUND TileDB satisfying version ${ver_major}.${ver_minor}.${ver_patch}!\")\nendif()\nunset(TileDB_FOUND)\n\nif(count_unacceptable)\n  message(FATAL_ERROR \"${count_unacceptable} unexpected result encountered!\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Stats Unit Tests in CMake\nDESCRIPTION: Configures the build process for stats module unit tests. Includes the unit_test module and specifies test source files along with required object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/stats/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test stats)\n    this_target_sources(main.cc unit_duration_instrument.cc unit_stats.cc)\n    this_target_object_libraries(stats)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Attribute Library Build in CMake\nDESCRIPTION: This CMake snippet configures the build for the TileDB C API attribute library. It includes common CMake modules, defines source files, and sets up an object library target with dependencies. The library is built as a stub, likely for testing or placeholder purposes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/attribute/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    attribute_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_attribute_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_datatype capi_filter_list_stub capi_string)\n  this_target_object_libraries(attribute)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Example Targets\nDESCRIPTION: Sets up build targets for TileDB examples, including mandatory C API examples and conditional C++ API examples based on the TILEDB_CPP_API flag.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Always build the C examples\nadd_subdirectory(c_api)\n# Target 'examples' builds all examples.\nadd_custom_target(examples DEPENDS examples_c)\n\n# Conditionally build the C++ examples\nif (TILEDB_CPP_API)\n  add_subdirectory(cpp_api)\n  add_dependencies(examples examples_cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring 'array_schema' Object Library in CMake for TileDB\nDESCRIPTION: Defines the 'array_schema' object library for data-oriented functions, specifying its source files and dependencies on various other libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library array_schema)\n    this_target_sources(\n        array_schema.cc array_schema_evolution.cc dimension_label.cc)\n    this_target_object_libraries(\n        attribute domain enumeration fragment_identifier current_domain time uri_format vfs)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Resources Object Library in CMake for TileDB\nDESCRIPTION: Defines an object library named 'context_resources' for TileDB's storage manager. It specifies the source file and dependencies required for building the library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/storage_manager/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library context_resources)\n    this_target_sources(context_resources.cc)\n    this_target_object_libraries(baseline config rest_client stats thread_pool vfs)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Considering Fixed Allocations in C++\nDESCRIPTION: Advises on using fixed allocations for small memory needs (1MB or less) to avoid heap fragmentation. This snippet is conceptual and doesn't contain actual code, but represents a guideline for memory allocation strategy in the project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/style/Memory.md#2025-04-16_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// For allocations of 1MB or less, consider fixed allocation\nchar buffer[1024 * 1024]; // 1MB fixed allocation\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for Iterator Facade in TileDB\nDESCRIPTION: This CMake snippet sets up a unit test for the iterator facade in TileDB. It includes the unit_test module, commences a new unit test target for the iterator facade, specifies the source file, and concludes the test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/util/detail/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test iterator_facade)\n    this_target_sources(\n        unit_iterator_facade.cc\n)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB Consolidator\nDESCRIPTION: Sets up CMake configuration for consolidator unit tests by including test sources and linking required libraries. Specifies main.cc and unit_fragment_consolidator.cc as source files and links against the TileDB test support library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/consolidator/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test consolidator)\n  this_target_sources(main.cc unit_fragment_consolidator.cc)\n\n  # Not actually testing a unit yet, but some things that ought to be units\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Source Possible Configurations\nDESCRIPTION: Complete set of possible configurations following push operation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n     /* { state = 00 ∧ items = 00 }                  ∨ */\n     /* { state = 01 ∧ ( items = 00 ∨ items = 01 ) }   */\n```\n\n----------------------------------------\n\nTITLE: Sink Proof Derivation with Concurrent Actions\nDESCRIPTION: Detailed proof outline showing state transitions and invariants for the sink component with potential concurrent source actions. Includes pull, extract and drain operations with state/items predicates.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_19\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∧ items = 00 } ∨ { state = 10 ∧ items = 10 } */\n\n       /* inject: { state = 00 ∧ items = 00 } → { state = 00 ∧ items = 10 }\n       /* inject+fill: { state = 00 ∧ items = 10 } → { state = 10 ∧ items = 10 }\n       /* inject+fill+push: { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 }\n       /* inject+fill+push+inject: { state = 01 ∧ items = 01 } → { state = 01 ∧ items = 11 }\n       /* inject+fill+push+inject+fill: { state = 01 ∧ items = 11 } → { state = 11 ∧ items = 11 }\n\n     pull: 〈 await ¬{ state = 00 } :\n              if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n     extract: extract: item[1] ← 0\n     drain: state[1] ← 0  \n   }\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for Scheduler in C++\nDESCRIPTION: Constructor for Scheduler that accepts a concurrency level parameter, defaulting to the hardware's thread count.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\nScheduler(size_t concurrency_level = std::thread::hardware_concurrency();\n```\n\n----------------------------------------\n\nTITLE: Getting TileDB C API Example Sources in CMake\nDESCRIPTION: Collects all C source files in the current directory as potential examples, with an option to exclude deprecated async examples based on a configuration flag.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/c_api/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB TILEDB_EXAMPLE_SOURCES_CAPI \"*.c\")\n\nif(TILEDB_REMOVE_DEPRECATIONS)\n  list(FILTER TILEDB_EXAMPLE_SOURCES_CAPI EXCLUDE REGEX \"async\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer List Unit Test in CMake\nDESCRIPTION: Sets up the 'buffer_list' unit test target with specified source files, object libraries, and linking dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/buffer/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test buffer_list)\n    this_target_sources(main.cc unit_bufferlist.cc)\n    this_target_object_libraries(buffer_list)\n    this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tile Object Library in CMake\nDESCRIPTION: Creates a basic tile object library with tile.cc as source and dependencies on baseline, buffer, and constants libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/tile/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library tile)\n  this_target_sources(tile.cc)\n  this_target_object_libraries(baseline buffer constants)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Executing Local Documentation Build Script in Bash\nDESCRIPTION: Command to run the local-build.sh script, which sets up a Python virtual environment, installs prerequisites, and runs the Sphinx build process for generating API documentation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./local-build.sh # (current dir)\n```\n\n----------------------------------------\n\nTITLE: Setting Blosc Compilation Options for TileDB\nDESCRIPTION: Configures compilation options for Blosc sources, disabling warnings and setting pthread availability flags when needed. This ensures Blosc compiles correctly across different platforms with appropriate options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/external/blosc/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# The blosc files are external and we ignore their warnings.\n# -w is common to gcc and MSVC\nset(TILEDB_BLOSC_COMPILE_OPTIONS \"-w\")\n# If we found pthreads, activate it by defining PTHREAD_AVAILABLE.\nif (CMAKE_USE_PTHREADS_INIT AND NOT MSVC)\n  string(APPEND TILEDB_BLOSC_COMPILE_OPTIONS \";-DPTHREAD_AVAILABLE\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB C API Filter in CMake\nDESCRIPTION: This snippet configures the build system for unit tests of the TileDB C API filter component. It includes the unit_test module, defines a unit test target named 'capi_filter', specifies the source file 'unit_capi_filter.cc', and links against the 'capi_filter_stub' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/filter/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_filter)\n  this_target_sources(unit_capi_filter.cc)\n  this_target_object_libraries(capi_filter_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Non-Empty Domain Access in C++ API\nDESCRIPTION: API additions for accessing the non-empty domain of an array by index or name in C++.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_41\n\nLANGUAGE: C++\nCODE:\n```\nArray::non_empty_domain(unsigned idx)\nArray::non_empty_domain(const std::string& name)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Wrapper Object Library in CMake for TileDB\nDESCRIPTION: Sets up the exception_wrapper object library which is header-only but uses an empty source file to enable the OBJECT syntax. It defines source files, dependencies on other libraries like baseline, thread_pool, and config, and adds test subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/exception_wrapper/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\n#\n# `exception_wrapper` object library\n#\n# Even though `exception_wrapper` is an object libary, it is actually header-\n# only. `exception_wrapper.cc` is an empty source file needed to allow the\n# OBJECT syntax.\n\nlist(APPEND SOURCES\n    exception_wrapper.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library exception_wrapper)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline thread_pool config)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for TileDB Catch in CMake\nDESCRIPTION: Sets up a unit test named 'test_tdb_catch' using the 'unit_test' custom CMake function. It specifies the source file 'unit_tdb_catch.cc' and links against the 'tdb_catch' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test test_tdb_catch)\n  this_target_sources(unit_tdb_catch.cc)\n  this_target_object_libraries(tdb_catch)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS Read Log Modes Unit Test in CMake\nDESCRIPTION: Sets up a unit test target for VFS read log modes. It includes the 'context_resources' object library and specifies the main source file along with a test file for VFS read log modes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filesystem/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test vfs_read_log_modes)\n    this_target_object_libraries(context_resources)\n    this_target_sources(main.cc unit_vfs_read_log_modes.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining an Edge Template Class in C++\nDESCRIPTION: Declaration of the Edge template class that connects nodes in the task graph. The Edge transfers data of type Item using the specified Mover strategy.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <template <class> class Mover, class Item>\nclass Edge;\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Subarray Unit Tests with CMake\nDESCRIPTION: Sets up a unit test target for the TileDB C API subarray module. It includes the unit test framework, defines the target name, source files, required object libraries, and additional link dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/subarray/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_subarray)\n  this_target_sources(unit_capi_subarray.cc)\n  this_target_object_libraries(capi_subarray_stub)\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining header-only object library macro in CMake\nDESCRIPTION: This macro streamlines the creation of header-only object libraries within the DAG component. It sets up the object library, creates a test-compile executable to ensure link completeness, and configures the necessary dependencies and sources.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmacro (dag_add_header_only_object_library OBJLIBNAME)\n\n  list(APPEND ${OBJLIBNAME}_SOURCES\n      ${OBJLIBNAME}.cc\n  )\n  gather_sources(${${OBJLIBNAME}_SOURCES})\n  #\n  # Object library for other units to depend upon\n  #\n  add_library(${OBJLIBNAME} OBJECT ${${OBJLIBNAME}_SOURCES})\n  #\n  # Test-compile of object library ensures link-completeness\n  #\n  add_executable(compile_${OBJLIBNAME} EXCLUDE_FROM_ALL)\n  add_dependencies(all_link_complete compile_${OBJLIBNAME})\n\n# message(\"==== ${OBJLIBNAME}\")\n# message(\"====---- compile_${OBJLIBNAME} PRIVATE ${OBJLIBNAME}\")\n\n  target_link_libraries(compile_${OBJLIBNAME} PRIVATE ${OBJLIBNAME})\n  target_sources(compile_${OBJLIBNAME} PRIVATE test/compile_${OBJLIBNAME}_main.cc)\nendmacro (dag_add_header_only_object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Tile IO Object Library in CMake\nDESCRIPTION: Sets up generic_tile_io object library with its source file and multiple dependencies including baseline, buffer, crypto, and VFS components.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/tile/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library generic_tile_io)\n  this_target_sources(generic_tile_io.cc)\n  this_target_object_libraries(\n      baseline\n      buffer\n      constants\n      context_resources\n      tiledb_crypto\n      filter_pipeline\n      tile\n      vfs\n  )\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Initializing FragmentInfo Array Schema in C API\nDESCRIPTION: Adds functions to get the array schema of a fragment using the tiledb_fragment_info_t object in the C API.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_20\n\nLANGUAGE: C\nCODE:\n```\ntiledb_fragment_info_get_array_schema\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for C API With Hook in CMake\nDESCRIPTION: Sets up a unit test target for the C API with an API hook, specifying source files, dependencies, and additional compile definitions and include directories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/exception_wrapper/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test capi_ew_with_hook)\n  this_target_sources(\n      unit_capi_hook.cc\n      unit_capi_hook_with.cc\n      ../../../c_api/config/config_api.cc\n      ../../../c_api/context/context_api.cc\n      ../../../c_api/error/error_api.cc\n      ../../../../sm/storage_manager/context.cc\n      ../../../../sm/storage_manager/context_resources.cc\n  )\n  this_target_link_libraries(export)\n  this_target_object_libraries(\n      exception_wrapper\n      rest_client\n      storage_manager_stub\n      vfs\n  )\n  target_compile_definitions(unit_capi_ew_with_hook PUBLIC WITH_HOOK)\n  target_include_directories(\n      unit_capi_ew_with_hook PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/hook)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Node Implementation Example in C++\nDESCRIPTION: Example of an incorrectly implemented producer node function that will not produce the desired sequence of values due to not using static state.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_20\n\nLANGUAGE: c++\nCODE:\n```\nsize_t source_function_1(std::stop_source& stop_source) {\n  for (size_t i = 0; i < 42; ++i) {\n    return i;\n  }\n  stop_source.request_stop();\n  return 0UL;\n}\nsource_function_1 src_1;\nauto a = ProducerNode { src_1; );\n```\n\n----------------------------------------\n\nTITLE: Using Smart Pointers in TileDB C++\nDESCRIPTION: Demonstrates the preferred use of smart pointers in TileDB, specifically tdb_unique_ptr and tdb_shared_ptr, which are custom implementations for the core TileDB library. It also mentions the use of make_unique_ptr and make_shared_ptr for exception-safe creation of smart pointers.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/doc/dev/style/Memory.md#2025-04-16_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntdb_unique_ptr<SomeClass> ptr = make_unique_ptr<SomeClass>();\ntdb_shared_ptr<AnotherClass> shared = make_shared_ptr<AnotherClass>();\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C++ String Support Object Library in CMake\nDESCRIPTION: This CMake code sets up the build configuration for the C++ string support module in TileDB's C API. It includes common CMake configurations, defines source files, and creates an object library that depends on the baseline library. It also adds a test subdirectory for testing the component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/cpp_string/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    cpp_string.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_support_cpp_string)\n  this_target_sources(${SOURCES})\n  this_target_object_libraries(baseline)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring 'mgc_dict' Unit Test in CMake for TileDB\nDESCRIPTION: Sets up the 'mgc_dict' unit test target with object libraries, compile definitions, and source files. It uses custom CMake functions and defines the path to the magic dictionary file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test mgc_dict)\n    this_target_object_libraries(mgc_dict)\n    this_target_compile_definitions(TILEDB_PATH_TO_MAGIC_MGC=\\\"${libmagic_DICTIONARY}\\\")\n    this_target_sources(\n        unit_mgc_dict.cc\n    )\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Creating Deprecated Install Target in CMake\nDESCRIPTION: Adds a custom target 'install-tiledb' for backward compatibility, which invokes the standard 'install' target with a deprecation warning.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(install-tiledb\n  COMMENT \"The install-tiledb target is deprecated and can lead to worse performance. Use install instead.\"\n  COMMAND ${CMAKE_COMMAND} --build . --target install --config $<CONFIG>\n  WORKING_DIRECTORY ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Detailed Source State Machine Implementation\nDESCRIPTION: Comprehensive implementation of the Source component's state machine including mutex handling, state transitions, and item management.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_14\n\nLANGUAGE: C\nCODE:\n```\ninit: /* { state = 00 ∧ source_item = empty } */\n  while (not done)\n\n     /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n     client of the source inserts an item  /* Note that although the Sink can execute and potentially change the\n                                              state here, the allowable transitions do not end up changing it */\n\n\n     /* { state = 00 ∨ state = 01 } ∧ { source_item = full } */\n     client invokes fill event to transition from empty to full.\n\n     state machine locks mutex\n     /* { mutex = locked } */\n     state machine invokes exit action\n     if { state = 00 ∨ state = 01 } → none\n     /* { state = 00 ∨ state = 01 } ∧ { source_item = full } */\n     state machine performs transition\n     /* { state = 00 } → { state = 10 } ∧ { source_item = full } */\n     /* { state = 01 } → { state = 11 } ∧ { source_item = full } */\n     /* { state = 10 ∨ state = 11 } ∧ { source_item = full } */\n     Source notifies Sink that it is full\n     /* { state = 10 ∨ state = 11 } ∧ { source_item = full } */\n     Source returns\n     state machine unlocks mutex\n     /* { mutex = unlocked } */\n\n     /* Before the Source begins the push, the Sink may pull, drain, do both, or do nothing */\n\n     /* { state = 10 ∨ state = 11 ∨ state = 01 ∨ state = 00 } ∧ { source_item = empty ∨ source_item = full } */\n     client invokes push event\n     state machine locks the mutex\n     /* { mutex = locked */\n\n     /* { state = 10 ∨ state = 11 ∨ state = 01 ∨ state = 00 } ∧ { source_item = empty ∨ source_item = full } */\n     state machine executes push exit action, which may be one of the following, depending on the state\n     restart:\n       if { state = 00 ∨ state = 01 } → none\n       if state = 10 → execute source_swap\n       if state = 11 → execute source_wait\n         pre_source_swap: /* { state = 10 } ∧ { source_item = full } */\n            state machine swaps source_item and sink_item -- swap does not change state\n         post_source_swap: /* { state = 10 } ∧ { source_item = empty } */\n\n       if { state = 11 } → execute source_wait  \n          pre_source_wait: /* { state = 11 } */\n          /* unlock mutex and wait for Sink to become empty */\n          /* Important! When the state machine comes back from wait, it is now no longer in the state it was when it started the wait. */\n          /* We therefore restart event processing for the push event, given the state present when coming back from wait: goto restart.*/\n       /* { mutex = locked } */\n\n       /* { state = 00 ∨ state = 01 ∨ state = 10 } ∧ { source_item = empty } */      \n       make state transition according to state transition table and next_state set by most recent event\n         { state = 00 } → { state = 00 }\n         { state = 01 ∨ state = 10 } → { state = 01 }\n\n       /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n       state machine invokes entry action (none) \n\n       post_entry: /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n       state machine unlocks mutex\n       /* { mutex = unlocked } */\n\n      post_push: /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n    end_loop: /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n  post_loop: /* { state = 00 ∨ state = 01 } ∧ { source_item = empty } */\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API String Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the unit test configuration for the TileDB C API string module. It includes the unit_test CMake module, defines the test target, specifies the source file, and links against the capi_string object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/string/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_string)\n  this_target_sources(unit_capi_string.cc)\n  this_target_object_libraries(capi_string)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Header-Only Object Libraries for TileDB DAG Components\nDESCRIPTION: Defines two header-only object libraries for the pool allocator and data block components using a custom CMake function 'dag_add_header_only_object_library'.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/data_block/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_object_library(pool_allocator)\ndag_add_header_only_object_library(data_block)\n```\n\n----------------------------------------\n\nTITLE: Configuring Writer Tile Object Library in CMake\nDESCRIPTION: Defines writer_tile object library with tile metadata generator and writer tile tuple source files, depending on array_schema and tile libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/tile/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library writer_tile)\n  this_target_sources(tile_metadata_generator.cc writer_tile_tuple.cc)\n  this_target_object_libraries(array_schema tile)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Regression Test Executable\nDESCRIPTION: Creates and configures the regression test executable with compiler definitions, options, and link libraries\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/regression/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(tiledb_regression\n  EXCLUDE_FROM_ALL\n  regression.cc\n  ${SOURCES}\n)\n\ntarget_compile_definitions(tiledb_regression PRIVATE\n  -DTILEDB_TEST_INPUTS_DIR=\"${CMAKE_SOURCE_DIR}/test/inputs/\"\n)\n\nif (NOT MSVC)\n  target_compile_options(tiledb_regression PRIVATE -Wno-deprecated-declarations)\nendif()\n\ntarget_link_libraries(tiledb_regression\n  PUBLIC\n    tiledb_Catch2WithMain\n    local_install\n    tiledb\n)\n\ntarget_include_directories(tiledb_regression\n  PRIVATE\n    ${CMAKE_INSTALL_PREFIX}/include\n    \"${TILEDB_CORE_INCLUDE_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Bit-width Reduction Options Structure in Markdown\nDESCRIPTION: This snippet outlines the filter options for the bit-width reduction filter in TileDB using a Markdown table. It includes a field for maximum window size.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Max window size | `uint32_t` | Maximum window size in bytes |\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Baseline Object Library\nDESCRIPTION: Creates the baseline object library with core source files and dependencies including spdlog. Conditionally includes polymorphic allocator for C++17.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library baseline)\n    this_target_sources(\n        logger.cc\n        dynamic_memory/dynamic_memory.cc\n        exception/exception.cc\n        exception/status.cc\n        governor/governor.cc\n        heap_profiler.cc\n        heap_memory.cc\n        memory_tracker.cc\n        pmr.cc\n    )\n    if (TILEDB_USE_CPP17_PMR)\n      this_target_sources(polymorphic_allocator/polymorphic_allocator.cc)\n    endif()\n    find_package(spdlog REQUIRED)\n    target_link_libraries(baseline PUBLIC spdlog::spdlog)\n    target_link_libraries(baseline PUBLIC common)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Consistency Unit Test in CMake for TileDB\nDESCRIPTION: Sets up the 'consistency' unit test target. It specifies the source files and links against the tiledb_test_support_lib library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test consistency)\n    this_target_sources(main.cc unit_consistency.cc)\n    this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cap'n Proto Array Schema Test Target\nDESCRIPTION: Configures the unit test target for array schema serialization, including source files and dependencies. Links against core objects and test support library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/serialization/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test capnp_array_schema)\n  this_target_sources(main.cc unit_capnp_array_schema.cc)\n  this_target_link_libraries(TILEDB_CORE_OBJECTS TILEDB_CORE_OBJECTS_ILIB tiledb_test_support_lib)\n\n  # Enable serialization\n  target_compile_definitions(unit_capnp_array_schema PRIVATE -DTILEDB_SERIALIZATION)\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Consolidator Build\nDESCRIPTION: Basic CMake configuration that includes common build policies and sets up test directories for the TileDB consolidator module. Uses the common CMake include file and adds test subdirectories to the build.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/consolidator/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB Filesystem C API in CMake\nDESCRIPTION: This CMake snippet sets up the unit test configuration for the TileDB filesystem C API. It includes the unit_test module, commences a new unit test target named 'capi_filesystem', specifies the source file, and links against the 'capi_filesystem' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/filesystem/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_filesystem)\n  this_target_sources(unit_capi_filesystem.cc)\n  this_target_object_libraries(capi_filesystem)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Correct Node Implementation Example in C++\nDESCRIPTION: Example of a correctly implemented producer node function that maintains state across invocations using a static variable to generate a sequence of values.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\nsize_t source_function_2(std::stop_source& stop_source) {\n  static i = 0;\n  if (i < 42) {\n    return i++;\n  }\n  stop_source.request_stop();\n  return 0UL;\n}\nsource_function_2 src_2;\nauto a = ProducerNode { src_2; );\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Module Paths in TileDB Project\nDESCRIPTION: Sets the minimum required CMake version and configures the module search paths for various CMake configuration files, including custom modules for build options and toolchain settings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules\")\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Options\")\n\ninclude(CIConfig)\ninclude(BuildOptions)\ninclude(global-policies NO_POLICY_SCOPE)\ninclude(Sanitizer)\ninclude(TileDBToolchain)\ninclude(Doxygen)\ninclude(Format)\n```\n\n----------------------------------------\n\nTITLE: Sink State Machine Proof Outline Summary in C\nDESCRIPTION: Summarized proof outline for the Sink component, showing state transitions and predicates for pull, extract, and drain actions. It demonstrates the behavior of the Sink in relation to the Source.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧       */\n     /* { items = 00 ∨ items = 01 ∨ items = 10 ∨ state = 11 }         */\n     pull\n     /* { state = 01 ∨ state = 11 } ∧ { items = 01 ∨ items = 11 }     */\n     extract\n     /* { state = 01 ∨ state = 11 } ∧ { items = 00 ∨ items = 10 }     */\n     drain\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧       */\n     /* { items = 00 ∨ items = 01 ∨ items = 10 ∨ state = 11 }         */\n   }\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration for TileDB DAG Execution\nDESCRIPTION: Includes a common CMake configuration file for the DAG execution module. This likely sets up common variables, options, or macros used throughout the build process.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/execution/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Subset Library in CMake\nDESCRIPTION: Defines and configures the range_subset object library with its source file and dependencies including baseline, buffer, constants, range, and thread_pool libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/subarray/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library range_subset)\nthis_target_sources(range_subset.cc)\nthis_target_object_libraries(baseline buffer constants range thread_pool)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Sink Protocol Steps\nDESCRIPTION: Shows the basic sequence of operations for the Sink component to receive and process items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_13\n\nLANGUAGE: C\nCODE:\n```\npull\nextract\ndrain\n```\n\n----------------------------------------\n\nTITLE: Configuring Sources and Object Library for TileDB Dimension Label API in CMake\nDESCRIPTION: This CMake snippet defines the source files, includes necessary modules, and creates an object library for the TileDB Dimension Label C API. It sets up dependencies and links against required libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/dimension_label/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    dimension_label_api.cc\n)\ngather_sources(${SOURCES})\n\n#\n# Object library for dimension label\n#\ncommence(object_library capi_dimension_label_stub)\n  this_target_sources(dimension_label_api.cc)\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_datatype capi_data_order capi_context_stub)\n  this_target_object_libraries(array_schema)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Common Interface Library\nDESCRIPTION: Sets up the main common interface library and configures experimental features if enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(common INTERFACE)\nif (TILEDB_EXPERIMENTAL_FEATURES)\n  target_compile_definitions(common INTERFACE TILEDB_EXPERIMENTAL_FEATURES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for C API Datatype Module in CMake\nDESCRIPTION: Sets up a unit test target for the C API datatype module. The script includes the unit_test module, defines a test target named 'capi_datatype', specifies the source file 'unit_capi_datatype.cc', and links against the 'capi_datatype' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/datatype/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_datatype)\n  this_target_sources(unit_capi_datatype.cc)\n  this_target_object_libraries(capi_datatype)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: ProducerNode Usage Examples in C++\nDESCRIPTION: Example code demonstrating different ways to create ProducerNode instances with various function types, including regular functions, function objects, lambdas, and using std::bind.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// Create a `ProducerNode` with a function\nsize_t source_function(std::stop_source &);\nauto a = ProducerNode {source_function};\n\n// Nodes can also be created with function objects\nclass source_function_object {\n  size_t operator()(std::stop_source &);\n}\nsource_function_object f;\nauto b = ProducerNode {f};\n\n// And with lambdas.  IMPORTANT: Note the unary `+`!\nauto c = ProducerNode {+[]() { return 0UL; }};\n\n// Bind requires specifying node type (so it seems)\nauto g = std::bind([](double i) ->size_t { return 0UL;}, 0.0);\nauto d = ProducerNode<size_t> (bb);\n\n// Emulating bind will work, not requiring template type\nsize_t bind_function(double) { return 0UL; }\nauto e = ProducerNode(+[]() -> size_t { return bind_function(0.0); });\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Test Include Directories in CMake\nDESCRIPTION: Sets up the include directories needed for TileDB tests, including the core and C API directories to ensure test files can properly include TileDB headers.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Include TileDB core header directories\nset(TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/..\")\n# Include the C API directory so that the C++ 'tiledb' file can directly\n# include \"tiledb.h\".\nlist(APPEND TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../tiledb/sm/c_api\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for TileDB C API Support C++ String Handling\nDESCRIPTION: This CMake snippet sets up a unit test target for the C API support module's C++ string handling in TileDB. It includes the unit_test module, commences a new unit test target, specifies the source file, and links against the required object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/cpp_string/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_support_cpp_string)\n  this_target_sources(unit_cpp_string.cc)\n  this_target_object_libraries(capi_support_cpp_string)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Creating TDB Catch Object Library\nDESCRIPTION: Defines an object library for Catch2 testing utilities including a PRNG implementation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library tdb_catch)\n  this_target_sources(tdb_catch_prng.cc)\n  this_target_link_libraries(Catch2::Catch2)\n  this_target_object_libraries(seedable_global_PRNG)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB Benchmarks Manually\nDESCRIPTION: Commands to manually build the TileDB benchmarks using CMake, specifying the path to the locally installed TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd TileDB/test/benchmarking\n$ mkdir build && cd build\n$ cmake -DCMAKE_PREFIX_PATH=/path/to/TileDB/dist ../src\n$ make\n```\n\n----------------------------------------\n\nTITLE: Source Protocol Final Proof Outline\nDESCRIPTION: Final proof outline for the source component showing inject, fill and push operations with their state/items predicates and transitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_20\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) }   */\n     inject: items[0] ← 1\n     /* { state = 00 ∧ items = 10 } ∨ { state = 01 ∧ ( items = 10 ∨ items = 11 ) }   */\n     fill: state[0] ← 1\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) } ∨ */\n     /* { state = 10 ∧ items = 10 } ∨ { state = 11 ∧ ( items = 10 ∨ items = 11 ) }   */\n     push: 〈 await ¬{ state = 11 } :\n              if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) }   */     \n   }\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration\nDESCRIPTION: Includes common CMake configuration without changing the policy scope.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subarray Library in CMake\nDESCRIPTION: Defines and configures the subarray object library with multiple source files and dependencies on array and range_subset libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/subarray/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library subarray)\nthis_target_sources(relevant_fragment_generator.cc subarray.cc subarray_tile_overlap.cc)\nthis_target_object_libraries(array range_subset)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Source State Transition\nDESCRIPTION: Initial state transition showing data movement from Source to Sink with atomic state changes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n/* { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } */\n```\n\n----------------------------------------\n\nTITLE: Creating Partial Object Library for TileDB C API Object Module in CMake\nDESCRIPTION: This snippet creates a partial object library named 'capi_object' for the TileDB C API object module. It sets up the library with the defined sources and links it with several dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/object/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(capi_object OBJECT ${SOURCES})\ntarget_link_libraries(capi_object PUBLIC export)\ntarget_link_libraries(capi_object PUBLIC baseline $<TARGET_OBJECTS:baseline>)\ntarget_link_libraries(capi_object PUBLIC constants $<TARGET_OBJECTS:constants>)\ntarget_link_libraries(capi_object PUBLIC exception_wrapper $<TARGET_OBJECTS:exception_wrapper>)\n```\n\n----------------------------------------\n\nTITLE: Adding C API subdirectories in dependency order in CMake\nDESCRIPTION: Adds all the TileDB C API component subdirectories in an order that respects their dependency relationships. Each component is annotated with its dependencies on other components.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# `array`: no dependencies\nadd_subdirectory(array)\n\n# `array_schema`: depends on `context`\nadd_subdirectory(array_schema)\n\n# `buffer`: no dependencies\nadd_subdirectory(buffer)\n\n# `buffer_list`: depends on `buffer`\nadd_subdirectory(buffer_list)\n\n# `current_domain`: depends on `ndrectangle`\nadd_subdirectory(current_domain)\n\n# `error`: no dependencies\nadd_subdirectory(error)\n\n# `config`: depends on `error`\nadd_subdirectory(config)\n\n# `context`: depends on `config`\nadd_subdirectory(context)\n\n# `datatype`: no dependencies\nadd_subdirectory(datatype)\n\n# `data_order`: no dependencies\nadd_subdirectory(data_order)\n\n# `dimension_label`: depends on `context`, `datatype`, `data_order`\nadd_subdirectory(dimension_label)\n\n# `enumeration`: depends on `buffer`, `constants`, and `context`\nadd_subdirectory(enumeration)\n\n# `filesystem`: no dependencies\nadd_subdirectory(filesystem)\n\n# `filter`: depends on `context`\nadd_subdirectory(filter)\n\n# `filter_list`: depends on `context`, `filter`\nadd_subdirectory(filter_list)\n\n# `fragment_info`: depends on `context`\nadd_subdirectory(fragment_info)\n\n# `dimension`: depends on `filter_list`, `datatype`\nadd_subdirectory(dimension)\n\n# `domain`: depends on `dimension`\nadd_subdirectory(domain)\n\n# `attribute`: depends on `filter_list`, `datatype`\nadd_subdirectory(attribute)\n\n# `group`: depends on `config`, `context`\nadd_subdirectory(group)\n\n# `ndrectangle`: depends on `domain`\nadd_subdirectory(ndrectangle)\n\n# `object`: no dependencies\nadd_subdirectory(object)\n\n# NOTE: Only the tiledb_query_type_t enum has been migrated\n# to the new C API layout.\n#\n# `query`: no dependencies yet but will have some\nadd_subdirectory(query)\n\n# `subarray`: depends on `context`\nadd_subdirectory(subarray)\n\n# `string`: no dependencies\nadd_subdirectory(string)\n\n# `vfs`: depends on `context`\nadd_subdirectory(vfs)\n\n# `query_plan`: no dependencies yet\nadd_subdirectory(query_plan)\n\n# `query_aggregate`: no dependencies\nadd_subdirectory(query_aggregate)\n\n# `query_field`: no dependencies\nadd_subdirectory(query_field)\n```\n\n----------------------------------------\n\nTITLE: Expanded Producer Node Logic with Proof Outline in C\nDESCRIPTION: Detailed implementation of producer node logic with stop mechanism, including state management and proof outline annotations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/stop2.md#2025-04-16_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n  init: { state = 00 ∧ stop = 0 }\n\n  while (not done)\n\n     /* { state = 00 ∨ state = 01 } ∧ { stop = 0 } */\n     bool token = false;\n     auto tmp = f(token);\n\n     /* { state = 00 ∨ state = 01 } ∧ { stop = 0 } */\n\n     if (token == stop) {\n\n       /* { state = 00 ∨ state = 01 } ∧ { stop = 0 } */\n       event(stop):\n\n         /* { state = 00 ∨ state = 01 } ∧ { stop = 0 } */\n         exit action: (none)\n\n         /* { state = 00 ∨ state = 01 } ∧ { stop = 0 } */\n         state transition: { stop = 0 } → { stop = 1 }\n\n         /* { state = 00 ∨ state = 01 } ∧ { stop = 1 } */\n         entry action: { state = 00 } → term_source\n                       { state = 01 } → term_source\n\n         /* { state = 00 ∨ state = 01 } ∧ { stop = 1 } */\n     }\n\n     event(source_fill):\n       \n     event(source_push):\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Query Object Library in CMake\nDESCRIPTION: This CMake script configures the build for the TileDB C API query component. It includes necessary modules, defines source files, and sets up an object library with specified dependencies like 'export', 'baseline', 'constants', and 'exception_wrapper'. It also adds a test subdirectory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  query_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_query)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline constants exception_wrapper)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Setting Core Include Directories in CMake\nDESCRIPTION: Configures the include directories for TileDB core components\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/regression/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../..\")\nlist(APPEND TILEDB_CORE_INCLUDE_DIR \"${CMAKE_BINARY_DIR}/tiledb/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Array Unit Test in CMake for TileDB\nDESCRIPTION: Sets up the 'array' unit test target. It defines a compile-time constant for test input directory, specifies source files, and links against the array_directory library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test array)\n    this_target_compile_definitions(-DTILEDB_TEST_INPUTS_DIR=\"${CMAKE_SOURCE_DIR}/test/inputs/\")\n    this_target_sources(main.cc unit_array_directory.cc)\n    this_target_link_libraries(array_directory)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Using Edge Type Alias in C++\nDESCRIPTION: Example of using the GraphEdge type alias to connect nodes, simplifying the edge creation syntax.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nProducerNode a{source_function{}};\nConsumerNode b{sink_function{}};\n\nGraphEdge e{a, b};\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Uninstall Target in CMake\nDESCRIPTION: Creates an uninstall target that removes installed TileDB files and directories from the system.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMD \"xargs printf -- '-- Uninstalling: %s\\\\n' <install_manifest.txt\")\nadd_custom_target(\n   uninstall\n   COMMAND echo \"Uninstalling TileDB from ${CMAKE_INSTALL_PREFIX}...\"\n   COMMAND eval \"${CMD}\"\n   COMMAND xargs rm -f < install_manifest.txt\n   COMMAND rmdir \"${CMAKE_INSTALL_PREFIX}/include/tiledb\"\n   COMMAND echo \"TileDB uninstalled\"\n)\n```\n\n----------------------------------------\n\nTITLE: Source Protocol Steps\nDESCRIPTION: Shows the basic sequence of operations for the Source component to inject and push items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_12\n\nLANGUAGE: C\nCODE:\n```\ninject\nfill\npush\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Sources for TileDB Dynamic Memory\nDESCRIPTION: Specifies additional source files that the dynamic memory component depends on, including governor and heap profiler implementations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/dynamic_memory/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND DEPENDENT_SOURCES\n    ../governor/governor.cc\n    ../heap_profiler.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Metadata Source Files in CMake\nDESCRIPTION: Defines the source files required for the fragment_metadata library component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/fragment/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND SOURCES\n    fragment_metadata.cc\n    fragment_info.cc\n    loaded_fragment_metadata.cc\n    ondemand_fragment_metadata.cc\n    v1v2preloaded_fragment_metadata.cc\n)\ngather_sources(${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Source Valid States After Push\nDESCRIPTION: Valid states that can occur directly following a push operation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n     /* { state = 00 ∧ items = 00 } ∨ */\n     /* { state = 01 ∧ items = 01 }   */\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer Object Library in CMake\nDESCRIPTION: Sets up the core buffer object library compilation configuration. Includes source file buffer.cc and depends on the baseline library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/buffer/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library buffer)\n    this_target_sources(buffer.cc)\n    this_target_object_libraries(baseline)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Setting up TileDB C API export interface library in CMake\nDESCRIPTION: Creates an interface library called 'export' that defines export macros and include paths necessary for the C API. This is a prerequisite for C API functions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(export INTERFACE)\ntarget_compile_definitions(export INTERFACE -Dtiledb_EXPORTS)\ntarget_include_directories(export INTERFACE ${TILEDB_EXPORT_HEADER_DIR})\ntarget_include_directories(export INTERFACE ${TILEDB_SOURCE_ROOT}/tiledb/sm/c_api)\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Node with Stop Handling in C\nDESCRIPTION: Detailed implementation of consumer node logic with stop handling, including state management and event processing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/stop2.md#2025-04-16_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n  init: { state = 00 } ∧ { stop = 0 }\n\n  while (not done)\n\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     event(sink_pull):\n\n       /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n       exit action: { state = 00 }              ∧ { stop = 0 }            → sink_wait\n                    { state = 00 }              ∧ { stop = 1 }            → none\n                    { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 } → none\n                    { state = 10 }              ∧ { stop = 0 ∨ stop = 1 } → sink_swap\n\n       state transition: { state = 00 }              ∧ { stop = 0 }            → n/a (wait)\n                         { state = 00 }              ∧ { stop = 1 }            → { state = done }\n                         { state = 01 ∨ state = 10 } ∧ { stop = 0 ∨ stop = 1 } → { state = 01 }   ∧ { stop = 0 ∨ stop = 1 }\n                         { state = 11 }              ∧ { stop = 0 ∨ stop = 1 } → { state = 11 }   ∧ { stop = 0 ∨ stop = 1 }\n\n       entry action: { state = done }                                                   → term_sink\n                     { state = 10 }                           ∧ { stop = 0 ∨ stop = 1 } → sink_swap\n                     { state = 00 ∨ state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 } → none\n\n       /* { state = 01 ∨ state = 11 } ∧ { stop = 0 }\n\n     /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     auto tmp = extract()\n\n     /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     f(tmp)\n\n     /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     event(sink_drain):\n\n     /* { state = 00 ∨ state = 10 } ∧ { stop = 0 ∨ stop = 1 }\n```\n\n----------------------------------------\n\nTITLE: Buffer Key Replacement\nDESCRIPTION: Code change to replace Buffer key_ with fixed-size char array key_[32] for improved performance.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nchar key_[32]\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific build settings for TileDB testing\nDESCRIPTION: Sets up AWS S3 configuration options and includes necessary TileDB core directories for testing in Windows environments.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/performance/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\n# These options not exposed in bootstrap script.\noption(TILEDB_TESTS_AWS_S3_CONFIG \"Use an S3 config appropriate for AWS in tests\" OFF)\n\n# Include TileDB core header directories\nset(TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../..\")\n\n# Include the C API directory so that the C++ 'tiledb' file can directly\n# include \"tiledb.h\".\nlist(APPEND TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../../tiledb/sm/c_api\")\n\nmessage(STATUS \"CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}\")\nlist(APPEND TILEDB_MSYS_HANDLE_LEAKAGE_SOURCES\n  \"msys_handle_leakage/unit-cppapi-consolidation-with-timestamps.cc\"\n)\n\nif (TILEDB_VERBOSE)\n  add_definitions(-DTILEDB_VERBOSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring As Built Unit Tests in CMake for TileDB\nDESCRIPTION: Sets up the unit tests for the 'as_built' module, including necessary library linkage, include directories, and source files. The test uses the unit_test framework and links against the as_built library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/as_built/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test as_built)\n  this_target_link_libraries(as_built)\n  target_include_directories(\n    unit_as_built PUBLIC ${TILEDB_SOURCE_ROOT}/test/support)\n  this_target_sources(main.cc unit_as_built.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom 'tools' Target in CMake\nDESCRIPTION: Defines a custom target 'tools' that builds all TileDB tool targets.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(tools ALL DEPENDS ${TILEDB_TOOLS})\n```\n\n----------------------------------------\n\nTITLE: Configuration Option for REST Payer Namespace in C\nDESCRIPTION: This code snippet shows the new configuration option added in TileDB v2.24.1 to set the namespace to be charged for REST requests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nrest.payer_namespace\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB Algorithm Object Library in CMake\nDESCRIPTION: This snippet creates an object library named 'algorithm' using custom CMake functions. It sets the target sources and specifies a dependency on the 'thread_pool' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/algorithm/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library algorithm)\n    this_target_sources(${SOURCES})\n    this_target_object_libraries(thread_pool)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Experimental Features in CMake\nDESCRIPTION: Checks if experimental features are enabled and returns if not. This ensures that experimental features are only built when explicitly requested.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT TILEDB_EXPERIMENTAL_FEATURES)\n    return()\nendif()\n\nmessage(\"TileDB is compiled with experimental features enabled\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Range Object Library in CMake\nDESCRIPTION: Sets up the range component as an object library in the TileDB build system. Includes source files and dependencies on baseline and constants libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/type/range/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library range)\n    this_target_sources(range.cc)\n    this_target_object_libraries(baseline constants)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Extracting VCPkg Port Files Using Git\nDESCRIPTION: Shell commands demonstrating how to extract and update a vcpkg port (using curl as an example) from the microsoft/vcpkg repository using a custom extraction script. The process includes removing existing port files, extracting new ones from a specific git commit, and committing the changes.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ rm ports/curl/*\n$ cd path/to/microsoft/vcpkg\n$ extract-tree-from-git.py 6125c796d6e2913a89a2996d7082375ce16b02dd path/to/tiledb/ports/curl/\n$ cd path/to/tiledb\n$ git add ports\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Defining Catch2-based unit test macro in CMake\nDESCRIPTION: This macro facilitates the creation of unit tests based on the Catch2 testing framework. It sets up the test executable, configures the necessary libraries and sources, and registers the test with CMake's testing framework.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmacro (dag_add_header_only_unit_test TESTNAME)\n    #\n    # Define unit test\n    #\n    add_executable(unit_${TESTNAME} EXCLUDE_FROM_ALL)\n    #\n    # Required libraries\n    #\n    target_link_libraries(unit_${TESTNAME} PUBLIC tiledb_Catch2WithMain)\n    #\n    # Define sources for test\n    #\n    target_sources(unit_${TESTNAME} PUBLIC\n        main.cc\n        unit_${TESTNAME}.cc\n    )\n    #\n    # Sources for code elsewhere required for tests\n    #\n    target_sources(unit_${TESTNAME} PUBLIC ${DEPENDENT_SOURCES})\n    #\n    # Add unit test to global suite of unit tests\n    #\n    add_test(\n        NAME \"unit_${TESTNAME}\"\n        COMMAND $<TARGET_FILE:unit_${TESTNAME}> --durations=yes\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    )\n    add_dependencies(all_unit_tests \"unit_${TESTNAME}\")\nendmacro(dag_add_header_only_unit_test)\n```\n\n----------------------------------------\n\nTITLE: Building the File Command-Line Utility\nDESCRIPTION: Creates the 'file' executable target, links it with libmagic and other required dependencies with platform-specific configurations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(file ${LIBMAGIC_SOURCE_DIR}/file.c)\nset(targets ${targets} file)\ntarget_link_libraries(file PRIVATE PCRE2::POSIX libmagic)\nif (WIN32)\n  if (NOT MINGW)\n    target_link_libraries(file PRIVATE unofficial::getopt-win32::getopt)\n  endif()\n  target_link_libraries(file PRIVATE shlwapi)\nendif()\n\nif(MSVC)\n  target_include_directories(file PRIVATE getopt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Producer Node Logic in C\nDESCRIPTION: Basic logic for a producer node in TileDB, including function call, injection, and source operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/stop2.md#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n   tmp = f()\n   inject(tmp)\n   source_fill()\n   source_push()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Dimension Label Unit Tests\nDESCRIPTION: Sets up the build configuration for TileDB dimension label unit tests. It includes common CMake policies, adds a unit test target named 'capi_dimension_label', specifies the source file 'unit_capi_dimension_label.cc', and links against the 'capi_dimension_label_stub' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/dimension_label/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(unit_test)\n\ncommence(unit_test capi_dimension_label)\n  this_target_sources(unit_capi_dimension_label.cc)\n  this_target_object_libraries(capi_dimension_label_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Core Libmagic Source Files\nDESCRIPTION: Lists all the core source files for the libmagic library, with platform-specific conditional additions for Apple platforms.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND LIBMAGIC_SOURCE_FILES\n  ${LIBMAGIC_SOURCE_DIR}/apprentice.c\n  ${LIBMAGIC_SOURCE_DIR}/apptype.c\n  ${LIBMAGIC_SOURCE_DIR}/ascmagic.c\n  ${LIBMAGIC_SOURCE_DIR}/buffer.c\n  ${LIBMAGIC_SOURCE_DIR}/cdf.c\n  ${LIBMAGIC_SOURCE_DIR}/cdf_time.c\n  ${LIBMAGIC_SOURCE_DIR}/compress.c\n  ${LIBMAGIC_SOURCE_DIR}/der.c\n  ${LIBMAGIC_SOURCE_DIR}/encoding.c\n  ${LIBMAGIC_SOURCE_DIR}/fmtcheck.c\n  ${LIBMAGIC_SOURCE_DIR}/fsmagic.c\n  ${LIBMAGIC_SOURCE_DIR}/funcs.c\n  ${LIBMAGIC_SOURCE_DIR}/is_json.c\n  ${LIBMAGIC_SOURCE_DIR}/is_simh.c\n  ${LIBMAGIC_SOURCE_DIR}/is_tar.c\n  ${LIBMAGIC_SOURCE_DIR}/magic.c\n  ${LIBMAGIC_SOURCE_DIR}/print.c\n  ${LIBMAGIC_SOURCE_DIR}/readcdf.c\n  ${LIBMAGIC_SOURCE_DIR}/readelf.c\n  ${LIBMAGIC_SOURCE_DIR}/softmagic.c\n  # ${LIBMAGIC_SOURCE_DIR}/strlcat.c\n  # ${LIBMAGIC_SOURCE_DIR}/strlcpy.c\n  ${LIBMAGIC_SOURCE_DIR}/is_csv.c\n)\nif(NOT APPLE)\nlist(APPEND LIBMAGIC_SOURCE_FILES\n  ${LIBMAGIC_SOURCE_DIR}/strlcat.c\n  ${LIBMAGIC_SOURCE_DIR}/strlcpy.c\n)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for Delete and Update Conditions in CMake\nDESCRIPTION: This CMake snippet sets up unit tests for delete and update conditions in TileDB. It includes the 'unit_test' module, commences a new unit test target, specifies source files, and links required libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/deletes_and_updates/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test delete_update_condition)\n    this_target_sources(main.cc unit_delete_condition.cc unit_update_condition.cc)\n    # The dependencies can't yet be factored into separate object libraries\n    this_target_link_libraries(ast_test_support_lib)\n    this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TileDB Delete Commit File Location\nDESCRIPTION: Shows the directory structure and location of delete commit files within a TileDB array folder. Delete commit files have a .del extension and are stored in the __commits subfolder.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/delete_commit_file.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                              # array folder\n   |_ ....\n   |_ __commits                       # array commits folder\n         |_ <timestamped_name>.del    # delete commit file\n         |_ ...\n```\n\n----------------------------------------\n\nTITLE: Running the Example Executable on Windows\nDESCRIPTION: PowerShell command to run the built example executable on Windows, demonstrating successful linking against TileDB by displaying the version information.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/README.md#2025-04-16_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n> .\\ExampleExe.exe\nYou are using TileDB version 1.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Module Sources and Object Library in CMake\nDESCRIPTION: This CMake snippet defines the source files for the random module, creates an object library named 'seedable_global_PRNG', and sets up its dependencies and test subdirectory. It uses custom CMake functions for configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/random/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  prng.cc\n  random_label.cc\n  seeder.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library seedable_global_PRNG)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline time)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Core Library Dependencies in CMake\nDESCRIPTION: Sets up the TILEDB_CORE_OBJECTS_ILIB interface library with various dependencies based on build options. Includes support for S3, Azure, GCS, and other optional features.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(TILEDB_CORE_OBJECTS_ILIB INTERFACE configuration_definitions)\n\ntarget_link_libraries(TILEDB_CORE_OBJECTS_ILIB INTERFACE ${TileDB_blosc_LINK_OPTIONS})\n\nif (NOT WIN32)\n  find_package(OpenSSL REQUIRED)\nendif()\n\nif (TILEDB_S3)\n  message(STATUS \"The TileDB library is compiled with S3 support.\")\n\n  set(AWS_SERVICES identity-management sts s3)\n  find_package(AWSSDK REQUIRED QUIET COMPONENTS ${AWS_SERVICES})\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n    INTERFACE\n      ${AWSSDK_LINK_LIBRARIES}\n      )\nendif()\n\nif (TILEDB_AZURE)\n  message(STATUS \"The TileDB library is compiled with Azure support.\")\n\n  find_package(azure-identity-cpp CONFIG REQUIRED)\n  find_package(azure-storage-blobs-cpp CONFIG REQUIRED)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB\n          INTERFACE\n          Azure::azure-identity\n          Azure::azure-storage-blobs\n          )\nendif()\n\nif (TILEDB_GCS)\n  find_package(google_cloud_cpp_storage CONFIG REQUIRED)\n  target_link_libraries(TILEDB_CORE_OBJECTS_ILIB INTERFACE\n          google-cloud-cpp::storage\n          )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Common Root and Adding Range Subdirectory in CMake for TileDB Type\nDESCRIPTION: This CMake snippet includes the common-root module and adds the 'range' subdirectory to the build process. It's part of the configuration for the 'type' component of TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/type/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common-root)\n\nadd_subdirectory(range)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Filter API Object Library in CMake\nDESCRIPTION: This CMake script sets up the build configuration for the TileDB filter C API component. It includes common CMake modules, defines source files, creates an object library target with dependencies on other components, and adds the test subdirectory to the build process.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/filter/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    filter_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_filter_stub)\n  this_target_sources(${SOURCES})\n  this_target_object_libraries(capi_context_stub)\n  this_target_object_libraries(all_filters)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Object Library in CMake\nDESCRIPTION: Sets up the 'object' library as part of TileDB's storage manager. It includes source files and specifies dependencies on other object libraries like baseline, context_resources, and vfs.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/object/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library object)\n    this_target_sources(object.cc object_mutex.cc)\n    this_target_object_libraries(baseline context_resources vfs)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB External Dependencies in CMake\nDESCRIPTION: Sets up include directories and source files for external dependencies like bitshuffle and blosc. Configures platform-specific compilation for blosc.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND TILEDB_EXTERNALS_INCLUDE_DIRS\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../external/include\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../external/include/bitshuffle\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../external/include/blosc\"\n)\nlist(APPEND TILEDB_EXTERNALS_SOURCES\n  ${CMAKE_CURRENT_SOURCE_DIR}/../external/src/bitshuffle/iochain.cc\n  ${CMAKE_CURRENT_SOURCE_DIR}/../external/src/bitshuffle/bitshuffle_core.cc\n)\n\nadd_subdirectory(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../external/blosc\n  ${CMAKE_CURRENT_BINARY_DIR}/../external/blosc)\nlist(APPEND TILEDB_EXTERNALS_INCLUDE_DIRS ${TileDB_blosc_INCLUDE_DIRS})\nlist(APPEND TILEDB_EXTERNALS_SOURCES ${TileDB_blosc_SOURCES})\nset_source_files_properties(\n  ${TileDB_blosc_SOURCES}\n  PROPERTIES COMPILE_OPTIONS \"${TileDB_blosc_COMPILE_OPTIONS}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Subset Unit Test in CMake\nDESCRIPTION: Sets up the 'range_subset' unit test target, specifying object libraries and source files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/subarray/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test range_subset)\n    this_target_object_libraries(range_subset)\n    this_target_sources(main.cc unit_range_subset.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Installation Targets in CMake\nDESCRIPTION: Defines the list of targets to be installed, including additional targets for static builds.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_INSTALL_TARGETS\n  tiledb\n)\nif (NOT BUILD_SHARED_LIBS)\n  list(APPEND TILEDB_INSTALL_TARGETS\n      TILEDB_CORE_OBJECTS_ILIB\n      configuration_definitions\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Embedded Magic Data Header in CMake\nDESCRIPTION: Creates a custom command and target to generate a gzipped header file for magic data embedding.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MGC_GZIPPED_H_OUTPUT_FILE \"${PROJECT_BINARY_DIR}/magic_mgc.zst.h_\")\n\nadd_custom_command(\n  OUTPUT \"${MGC_GZIPPED_H_OUTPUT_FILE}\"\n  DEPENDS \"${libmagic_DICTIONARY}\" \"${CMAKE_CURRENT_LIST_DIR}/generate_embedded_data_header.script.cmake\"\n  COMMAND ${CMAKE_COMMAND} \"-DINPUT_FILE=${libmagic_DICTIONARY}\" \"-DOUTPUT_FILE=${MGC_GZIPPED_H_OUTPUT_FILE}\" -P \"${CMAKE_CURRENT_LIST_DIR}/generate_embedded_data_header.script.cmake\"\n)\nadd_custom_target(gen_mgc_unarch\n  DEPENDS ${MGC_GZIPPED_H_OUTPUT_FILE}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Synchronized Optional Unit Tests in CMake\nDESCRIPTION: Sets up unit test configuration for synchronized_optional component. Includes three test source files and links against the threading library. Uses custom CMake functions 'commence' and 'conclude' for test setup.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/synchronized_optional/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test synchronized_optional)\n  this_target_sources(\n      unit_synchronized_optional.cc\n      unit_synchronized_optional_comparisons.cc\n      unit_synchronized_optional_swap.cc)\n  this_target_link_libraries(Threads::Threads)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Enabling Serialization Support for Tests\nDESCRIPTION: Conditionally adds serialization support compile definitions if the feature is enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_SERIALIZATION)\n  target_compile_definitions(tiledb_test_support_lib PRIVATE -DTILEDB_SERIALIZATION)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Task Waiting Method for Scheduler in C++\nDESCRIPTION: Method for synchronously waiting for tasks to complete. Tasks are launched when this method is called.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class... Tasks>\nScheduler::sync_wait_all();\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Object Library in CMake for TileDB\nDESCRIPTION: This snippet defines and configures the 'metadata' object library for TileDB. It specifies the source files and object library dependencies required for building the metadata module.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/metadata/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library metadata)\n    this_target_sources(metadata.cc)\n    this_target_object_libraries(baseline buffer constants generic_tile_io time uri_format vfs)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Library Compilation Definitions in CMake\nDESCRIPTION: Creates an interface library for configuration definitions, setting up compile definitions for Azure, GCS, and S3 support based on CMake variables.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(configuration_definitions INTERFACE)\n\nif (TILEDB_AZURE)\n  target_compile_definitions(configuration_definitions INTERFACE -DHAVE_AZURE)\nendif()\n\nif (TILEDB_GCS)\n  target_compile_definitions(configuration_definitions INTERFACE -DHAVE_GCS)\nendif()\n\nif (TILEDB_S3)\n  target_compile_definitions(configuration_definitions INTERFACE -DHAVE_S3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Submodules to TileDB stdx Build\nDESCRIPTION: Adds subdirectories for 'synchronized_optional' and '__ranges' to the build. These are likely submodules or components of the stdx module that need to be built separately.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(synchronized_optional)\nadd_subdirectory(__ranges)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for TileDB C API Config Module\nDESCRIPTION: This CMake snippet sets up the build configuration for the TileDB C API config module. It includes common CMake modules, defines source files, and creates an object library target with specified dependencies and link libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/config/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    config_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_config_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_link_libraries(storage_manager_stub)\n  this_target_object_libraries(capi_error)\n  this_target_object_libraries(config)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for Seedable Global PRNG in CMake\nDESCRIPTION: This snippet defines the CMake configuration for building unit tests for the seedable global PRNG in TileDB. It specifies the source files to be included and links the necessary object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/random/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test seedable_global_PRNG)\n  this_target_sources(unit_random_label_generator.cc unit_seedable_global_PRNG.cc)\n  this_target_object_libraries(seedable_global_PRNG)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB Core Source Files in CMake\nDESCRIPTION: This CMake snippet defines a variable TILEDB_CORE_SOURCES that contains a list of all core source files for the TileDB project. It includes files from various directories such as common, platform, sm (storage manager), and their subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_CORE_SOURCES\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/common/memory.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/common/stdx_string.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/common/filesystem/home_directory.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/common/interval/interval.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/common/types/dynamic_typed_datum.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/platform/cert_file.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array/array.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array/array_directory.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array/array_operations.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array/consistency.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/array_schema.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/array_schema_evolution.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/array_schema_operations.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/attribute.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/dimension.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/dimension_label.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/domain.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/enumeration.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/ndrectangle.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/array_schema/current_domain.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/buffer/buffer.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/buffer/buffer_list.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/c_api/api_argument_validator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/c_api/tiledb.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/c_api/tiledb_dimension_label.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/c_api/tiledb_filestore.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/bzip_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/dd_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/delta_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/dict_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/gzip_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/lz4_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/rle_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/compressors/zstd_compressor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/config/config.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/config/config_iter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidation_plan/consolidation_plan.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidator/array_meta_consolidator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidator/commits_consolidator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidator/consolidator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidator/fragment_consolidator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidator/fragment_meta_consolidator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/consolidator/group_meta_consolidator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/crypto/crypto.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/crypto/encryption_key.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/crypto/crypto_openssl.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/crypto/crypto_win32.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/curl/curl_init.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/azure.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/gcs.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/local.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/mem_filesystem.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/path_win.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/posix.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/s3.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/s3_thread_pool_executor.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/s3/AWSCredentialsProviderChain.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/s3/GeneralHTTPCredentialsProvider.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/s3/STSCredentialsProvider.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/s3/STSProfileWithWebIdentityCredentialsProvider.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/ssl_config.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/uri.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/vfs.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/vfs_file_handle.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/win.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filesystem/filesystem_base.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/bit_width_reduction_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/bitshuffle_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/byteshuffle_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/checksum_md5_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/checksum_sha256_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/compression_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/encryption_aes256gcm_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/filter_buffer.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/filter_create.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/filter_pipeline.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/filter_storage.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/float_scaling_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/xor_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/webp_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/noop_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/filter/positive_delta_filter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/fragment/fragment_identifier.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/fragment/fragment_info.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/fragment/fragment_metadata.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/fragment/loaded_fragment_metadata.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/fragment/ondemand_fragment_metadata.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/fragment/v1v2preloaded_fragment_metadata.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/global_state/global_state.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/global_state/signal_handlers.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/global_state/watchdog.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_details.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_details_v1.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_details_v2.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_directory.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_member.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_member_v1.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/group/group_member_v2.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/metadata/metadata.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/cancelable_tasks.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/constants.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/mgc_dict.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/parse_argument.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/rectangle.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/tdb_math.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/tdb_time.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/types.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/misc/win_constants.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/object/object.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/object/object_iter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/object/object_mutex.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/ast/query_ast.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/deletes_and_updates/deletes_and_updates.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/deletes_and_updates/serialization.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/dimension_label/array_dimension_label_queries.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/dimension_label/dimension_label_query.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/dimension_label/index_data.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/hilbert_order.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/legacy/cell_slab_iter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/legacy/reader.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/legacy/read_cell_slab_iter.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/query.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/query_condition.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/query_remote_buffer_storage.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/query_state.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/aggregators/count_aggregator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/aggregators/min_max_aggregator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/aggregators/operation.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/aggregators/output_buffer_validator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/aggregators/safe_sum.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/aggregators/sum_aggregator.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/dense_reader.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/ordered_dim_label_reader.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/reader_base.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/result_tile.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/sparse_global_order_reader.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/sparse_index_reader_base.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/readers/sparse_unordered_with_dups_reader.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/strategy_base.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/update_value.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/writers/dense_tiler.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/writers/global_order_writer.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/writers/ordered_writer.cc\n  ${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/query/writers/unordered_writer.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Add Ranges List Unit Test in CMake\nDESCRIPTION: Configures the 'add_ranges_list' unit test target, specifying source files, link libraries, include directories, and compilation options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/subarray/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test add_ranges_list)\n    this_target_sources(main.cc unit_add_ranges_list.cc)\n    this_target_link_libraries(TILEDB_CORE_OBJECTS)\n    this_target_link_libraries(tiledb_test_support_lib)\n    target_include_directories(unit_add_ranges_list PRIVATE\n        \"$<TARGET_PROPERTY:TILEDB_CORE_OBJECTS,INCLUDE_DIRECTORIES>\")\n    # We want tests to continue as normal even as the API is changing,\n    # so don't warn for deprecations, since they'll be escalated to errors.\n    if (NOT MSVC)\n      target_compile_options(unit_add_ranges_list PRIVATE -Wno-deprecated-declarations)\n    endif()\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring misc_types Object Library in CMake\nDESCRIPTION: Sets up the misc_types object library with its source file and dependency on the range library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library misc_types)\n    this_target_sources(types.cc)\n    this_target_object_libraries(range)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring time Object Library in CMake\nDESCRIPTION: Defines the time object library with its source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library time)\n    this_target_sources(tdb_time.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests in CMake for TileDB Common Utils\nDESCRIPTION: Defines multiple unit test targets using a custom CMake pattern with 'commence' and 'conclude' macros. Each test target corresponds to a specific utility class or function implementation with its associated test source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/util/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test alt_var_length_view)\n    this_target_sources(\n        unit_alt_var_length_view.cc\n)\nconclude(unit_test)\n\ncommence(unit_test permutation_sort)\n    this_target_sources(\n        unit_permutation_sort.cc\n)\nconclude(unit_test)\n\ncommence(unit_test permutation_view)\n    this_target_sources(\n        unit_permutation_view.cc\n)\nconclude(unit_test)\n\ncommence(unit_test proxy_sort)\n    this_target_sources(\n        unit_proxy_sort.cc\n)\nconclude(unit_test)\n\ncommence(unit_test sort_chunk)\n    this_target_sources(\n        unit_sort_chunk.cc\n)\nconclude(unit_test)\n\ncommence(unit_test sort_zip)\n    this_target_sources(\n        unit_sort_zip.cc\n)\nconclude(unit_test)\n\ncommence(unit_test var_length_util)\n    this_target_sources(\n        unit_var_length_util.cc\n)\nconclude(unit_test)\n\ncommence(unit_test var_length_view)\n    this_target_sources(\n        unit_var_length_view.cc\n)\nconclude(unit_test)\n\ncommence(unit_test block_view)\n    this_target_sources(\n        unit_block_view.cc\n)\nconclude(unit_test)\n\ncommence(unit_test view_combo)\nthis_target_sources(\n        unit_view_combo.cc\n)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Debug and Release Configurations\nDESCRIPTION: Configures platform-specific compiler options for Debug and Release builds. For MSVC, it sets debug symbols and optimization flags, while for other compilers it sets equivalent GCC-style flags.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/src/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n  add_compile_options(\"$<$<CONFIG:Debug>:/DDEBUG;/Od;/Zi>\")\n  add_compile_options(\"$<$<CONFIG:Release>:/DNDEBUG;/Ox>\")\nelse()\n  add_compile_options(\"$<$<CONFIG:Debug>:-DDEBUG;-O0;-g3;-ggdb3;-gdwarf-3>\")\n  add_compile_options(\"$<$<CONFIG:Release>:-DNDEBUG;-O3>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Producer Node with Stop Mechanism in C\nDESCRIPTION: Enhanced producer node logic with a stop mechanism. The user-supplied function can indicate when to stop processing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/stop2.md#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n  bool token = false;\n  auto tmp = f(token);\n  if (token == stop) {\n    port_exhausted()\n    return\n  }\n  source_fill()\n  source_push()\n```\n\n----------------------------------------\n\nTITLE: Configuring RTree Object Library in CMake\nDESCRIPTION: Creates an object library for the RTree component with required source files and dependencies. The library includes rtree.cc as source and links against baseline, dimension, domain, and math object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/rtree/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library rtree)\n    this_target_sources(rtree.cc)\n    this_target_object_libraries(baseline dimension domain math)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Regression Tests\nDESCRIPTION: Sets up the source files list for regression tests with conditional additions based on build configurations\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/regression/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCES\n  targets/sc-12024.cc\n  targets/sc-15387.cc\n  targets/sc-18836.cc\n  targets/sc-23712.cc\n  targets/sc-44758.cc\n)\n\nif (TILEDB_SERIALIZATION)\n  list(APPEND SOURCES targets/sc-18250.cc)\nendif()\n\nif (TILEDB_CPP_API)\n  list(APPEND SOURCES targets/sc-24079.cc)\n  list(APPEND SOURCES targets/sc-25116.cc)\n  list(APPEND SOURCES targets/sc-29682.cc)\n  list(APPEND SOURCES targets/sc-33480.cc)\n  list(APPEND SOURCES targets/sc-35424.cc)\n  list(APPEND SOURCES targets/sc-36372.cc)\n  list(APPEND SOURCES targets/sc-38300.cc)\n  list(APPEND SOURCES targets/sc-48428.cc)\n  list(APPEND SOURCES targets/sc-52975.cc)\n  list(APPEND SOURCES targets/sc-53334.cc)\n  list(APPEND SOURCES targets/sc-53791.cc)\n  list(APPEND SOURCES targets/sc-53970.cc)\n  list(APPEND SOURCES targets/sc-54473.cc)\n  list(APPEND SOURCES targets/sc-64121.cc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding TileDB Package and Creating Benchmark Core Library\nDESCRIPTION: Locates the TileDB package required for the benchmarks and creates a shared object library containing common benchmark functionality used across all benchmark executables.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/src/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Find TileDB\nfind_package(TileDB REQUIRED)\n\n# Shared code\nadd_library(benchmark_core OBJECT\n  benchmark.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Current Domain Library Build\nDESCRIPTION: Configures the build for the Current Domain API component by setting up source files, linking dependencies, and creating an object library. Includes baseline components and testing setup.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/current_domain/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  current_domain_api.cc\n  )\ngather_sources(${SOURCES})\n\ncommence(object_library capi_current_domain)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline current_domain capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB C API Context in CMake\nDESCRIPTION: This CMake snippet sets up the unit test configuration for the TileDB C API context module. It includes the unit test module, commences a new unit test target named 'capi_context', specifies the source file, and links it with the 'capi_context_stub' object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/context/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_context)\n  this_target_sources(unit_capi_context.cc)\n  this_target_object_libraries(capi_context_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Buffer Object Library in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the TileDB C API buffer component. It includes common CMake modules, defines source files, and creates an object library with specified dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/buffer/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  buffer_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_buffer_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_context_stub)\n  this_target_object_libraries(buffer)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS Unit Test in CMake\nDESCRIPTION: Sets up a unit test target for the VFS module. It includes the 'vfs' object library and specifies the main source file along with two test files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filesystem/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test vfs)\n    this_target_object_libraries(vfs)\n    this_target_sources(main.cc unit_uri.cc unit_ls_filtered.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring rectangle Object Library in CMake\nDESCRIPTION: Sets up the rectangle object library with its source file and dependency on the baseline library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library rectangle)\n    this_target_sources(rectangle.cc)\n    this_target_object_libraries(baseline)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Building TileDB Experimental C++ Examples Function\nDESCRIPTION: Defines a CMake function that builds an executable for each example C++ file. The function sets up the proper linking to TileDB and BZip2, with special handling for Linux platforms that need explicit pthread and dl libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(build_TileDB_experimental_example_cppapi TARGET)\n  add_executable(${TARGET}_exp_cpp EXCLUDE_FROM_ALL ${TARGET}.cc)\n  target_link_libraries(${TARGET}_exp_cpp PUBLIC local_install tiledb)\n  target_link_libraries(${TARGET}_exp_cpp PUBLIC BZip2::BZip2)\n  if (NOT WIN32)\n    # On Linux, must explicitly link -lpthread -ldl in order for static linking\n    # to libzstd or libcurl to work.\n    target_link_libraries(${TARGET}_exp_cpp PUBLIC pthread dl)\n  endif()\n  add_dependencies(experimental_examples_cpp ${TARGET}_exp_cpp)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Memory Unit Test in CMake\nDESCRIPTION: This snippet sets up a unit test target for dynamic memory, specifies source files, and handles conditional linking for thread support. It uses custom CMake functions like 'commence' and 'conclude' for structuring the test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/dynamic_memory/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test dynamic_memory)\n    this_target_object_libraries(baseline)\n    this_target_sources(main.cc unit_dynamic_memory.cc)\n    # Link to Threads::Threads if library or flag needed to enable threading.\n    # The heap_profiler dependency requires threads. The dependency should be\n    # moved to heap_profiler if/when it is added to its own object library.\n    if (CMAKE_THREAD_LIBS_INIT)\n        target_link_libraries(unit_dynamic_memory PUBLIC Threads::Threads)\n    endif()\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Filter Structure in Markdown\nDESCRIPTION: This snippet describes the internal format of individual filters in the TileDB pipeline using a Markdown table. It includes fields for filter type, options size, and filter-specific options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Filter type | `uint8_t` | Type of filter \\(e.g. `TILEDB_FILTER_BZIP2`\\) – see below for values |\n| Filter options size | `uint32_t` | Number of bytes in filter options – may be 0. |\n| Filter options | [Filter Options](#filter-options) | Filter options, specific to each filter. E.g. compression level for compression filters. |\n```\n\n----------------------------------------\n\nTITLE: Defining Header-Only Unit Tests for TileDB DAG Nodes in CMake\nDESCRIPTION: Configures multiple header-only unit tests for different TileDB DAG node types. These tests verify functionality of various node implementations within the DAG system.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_unit_test(general_nodes)\ndag_add_header_only_unit_test(simple_nodes)\ndag_add_header_only_unit_test(segmented_nodes)\ndag_add_header_only_unit_test(segmented_mimo_nodes)\ndag_add_header_only_unit_test(stop_source)\ndag_add_header_only_unit_test(util_functions)\ndag_add_header_only_unit_test(nodes_concurrency)\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Mode in CMake\nDESCRIPTION: Conditionally adds the TILEDB_VERBOSE definition if the verbose mode is enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_VERBOSE)\n  add_definitions(-DTILEDB_VERBOSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB assertion testing executables in CMake\nDESCRIPTION: Defines build configuration for test_assert and try_assert executables, including include directories, dependencies, and compiler definitions. The configuration includes conditional compilation based on TILEDB_ASSERTIONS flag and defines the path to the try_assert executable for testing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/ci/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(TileDBAssertions)\n\nadd_executable(\n  test_assert\n  test_assert.cc\n)\n\ntarget_include_directories(test_assert\n  PRIVATE\n    \"${TILEDB_CORE_INCLUDE_DIR}\"\n    Catch2::Catch2\n)\n\ntarget_link_libraries(test_assert PUBLIC tiledb_Catch2WithMain)\n\nif (TILEDB_ASSERTIONS)\n  target_compile_definitions(\n    test_assert\n    PRIVATE\n    -DTILEDB_ASSERTIONS\n  )\nendif()\n\ntarget_compile_definitions(\n  test_assert\n  PRIVATE\n  -DTILEDB_PATH_TO_TRY_ASSERT=\"$<TARGET_FILE:try_assert>\"\n)\n\nadd_executable(\n  try_assert\n  try_assert.cc\n)\n\nadd_dependencies(test_assert try_assert)\n\nadd_test(\n  NAME \"test_ci_asserts\"\n  COMMAND test_assert\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Info Object Library in CMake\nDESCRIPTION: Sets up the CMake configuration for building the fragment info component as an object library. Includes source files, dependencies, and links to other TileDB components like fragment metadata and context stub.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/fragment_info/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n  fragment_info_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_fragment_info_stub)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(fragment_metadata)\n  this_target_object_libraries(capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Sink Operation Proof Outline\nDESCRIPTION: Shows the proof outline for the Sink port operation with state predicates and actions for receiving and consuming items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∨ state = 10 } ∧ { sink_item = empty } */\n     do pull\n     /* { state = 01 ∨ state = 11 } ∧ { sink_item = full } */\n     do extract and consume item  \n     /* { state = 01 ∨ state = 11 } ∧ { sink_item = full } */\n     do drain\n     /* { state = 00 ∨ state = 10 } ∧ { sink_item = empty } */\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for C API Query Type in TileDB\nDESCRIPTION: Sets up the build configuration for a C API query type unit test in TileDB. The snippet includes the unit test module, defines the test target with its source file, and links it with the capi_query object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_query_type)\n  this_target_sources(unit_capi_query_type.cc)\n  this_target_object_libraries(capi_query)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB Datum Component in CMake\nDESCRIPTION: This CMake snippet sets up unit tests for the 'datum' component in TileDB. It includes the required object libraries and specifies the source files for the unit tests. The configuration uses custom CMake functions 'commence' and 'conclude' to define the test target.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/types/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test datum)\n    this_target_object_libraries(datum)\n    this_target_sources(main.cc unit_dynamic_untyped_datum.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Plan Unit Tests in CMake\nDESCRIPTION: Sets up the unit test configuration for TileDB query plan tests, including source files, object libraries, compiler options, and dependencies. Disables deprecated declarations warnings for non-MSVC compilers and sets up proper include directories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query_plan/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test query_plan)\n    this_target_sources(main.cc unit_query_plan.cc)\n    this_target_object_libraries(query_plan)\n    if (NOT MSVC)\n        target_compile_options(unit_query_plan PRIVATE -Wno-deprecated-declarations)\n    endif()\n    target_include_directories(unit_query_plan PRIVATE\n        \"$<TARGET_PROPERTY:TILEDB_CORE_OBJECTS,INCLUDE_DIRECTORIES>\")\n    this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Running the Example Executable on macOS/Linux\nDESCRIPTION: Command to run the built example executable on macOS or Linux, which demonstrates successful linking against TileDB by displaying the TileDB version.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cmake_project/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./ExampleExe\nYou are using TileDB version 1.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for TileDB C API Attribute\nDESCRIPTION: Sets up a unit test target for testing the C API attribute functionality. Uses custom CMake functions 'commence' and 'conclude' to define the test configuration, specifying source files and object libraries to link against.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/attribute/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_attribute)\n  this_target_sources(unit_capi_attribute.cc)\n  this_target_object_libraries(capi_attribute_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Checking for Regex Characters in Build Paths\nDESCRIPTION: Validates that source, build, and installation paths don't contain regex special characters that could break CMake processing. This addresses a specific GitHub issue (#1799) by offering an option to bypass this check if needed.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\noption(TILEDB_ALLOW_REGEX_CHAR_PATH \"If true, allow regex characters in source, build, or install path.\" FALSE)\nmark_as_advanced(TILEDB_ALLOW_REGEX_CHAR_PATH)\nset(REGEX_CHARS \"[\\\\^\\\\$\\\\+\\\\*\\\\?\\\\|\\\\(\\\\)]\")\nset(REGEX_CHAR_PATH_MSG \" contains a REGEX character and may break CMakeList processing. Please use\"\n                        \" a different path, or set TILEDB_ALLOW_REGEX_CHAR_PATH to override.\")\nif (NOT TILEDB_ALLOW_REGEX_CHAR_PATH)\n  if (CMAKE_CURRENT_SOURCE_DIR MATCHES ${REGEX_CHARS})\n    message(FATAL_ERROR \"CMAKE_CURRENT_SOURCE_DIR ${REGEX_CHAR_PATH_MSG}:\\n  '${CMAKE_CURRENT_SOURCE_DIR}'\")\n  elseif (CMAKE_CURRENT_SOURCE_DIR MATCHES ${REGEX_CHARS})\n    message(FATAL_ERROR \"CMAKE_CURRENT_BINARY_DIR ${REGEX_CHAR_PATH_MSG}:\\n  '${CMAKE_CURRENT_BINARY_DIR}'\")\n  elseif (CMAKE_CURRENT_SOURCE_DIR MATCHES ${REGEX_CHARS})\n    message(FATAL_ERROR \"CMAKE_INSTALL_PREFIX ${REGEX_CHAR_PATH_MSG}:\\n  '${CMAKE_INSTALL_PREFIX}'\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Handle Component Library with CMake\nDESCRIPTION: Sets up compilation for the handle component in TileDB's C API support. It includes the common module, specifies source files, adds an OBJECT library named 'handle', defines dependencies on the 'baseline' library, and adds test subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/handle/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\nlist(APPEND SOURCES\n    handle.cc\n)\ngather_sources(${SOURCES})\n\nadd_library(handle OBJECT handle.cc)\ntarget_link_libraries(handle PUBLIC baseline $<TARGET_OBJECTS:baseline>)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Adding Package Check Target\nDESCRIPTION: Creates a custom target for package checking with specified CMAKE_PREFIX_PATH and build directory configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(\n  check-package\n  COMMAND ${CMAKE_COMMAND}\n    -DCMAKE_PREFIX_PATH=\"${CMAKE_INSTALL_PREFIX}$<SEMICOLON>${VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}\"\n    -B ${CMAKE_CURRENT_BINARY_DIR}/check-package-build\n    ${CMAKE_CURRENT_SOURCE_DIR}/packaging\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Test Compile Definitions in CMake\nDESCRIPTION: Sets additional compile definitions for the TileDB unit tests, including exports flag and the path to test input files. These definitions are necessary for proper test execution.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# This is necessary only because we are linking directly to the core objects.\n# Other users (e.g. the examples) do not need this flag.\ntarget_compile_definitions(tiledb_unit PRIVATE -Dtiledb_EXPORTS)\n\ntarget_compile_definitions(tiledb_unit PRIVATE\n  -DTILEDB_TEST_INPUTS_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/inputs\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Query Aggregate Object Library in CMake\nDESCRIPTION: Defines the build configuration for the C API query_aggregate component in TileDB. It includes the necessary source files, creates an object library, and establishes the required dependencies. The library is configured to link against the export and baseline libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_aggregate/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nlist(APPEND SOURCES\n  query_aggregate_api.cc\n  )\ngather_sources(${SOURCES})\n\n#\n# Object library for C API query_aggregate\n#\n# Maturity:\n#   This object library does not link standalone. There's no corresponding\n#   `query_aggregate` object library to link to, since at present nothing\n#   involving query is able to link standalone.\n#\nadd_library(capi_query_aggregate OBJECT ${SOURCES})\ntarget_link_libraries(capi_query_aggregate PUBLIC export)\ntarget_link_libraries(capi_query_aggregate PUBLIC baseline $<TARGET_OBJECTS:baseline>)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Linking Test Support Library with Dependencies\nDESCRIPTION: Links the test support library with common interfaces and baseline libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(tiledb_test_support_lib PRIVATE $<BUILD_INTERFACE:common>)\ntarget_link_libraries(tiledb_test_support_lib PRIVATE baseline)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exception Unit Tests in CMake\nDESCRIPTION: Sets up a unit test target for exception handling with required object libraries and source files. Uses custom CMake functions 'commence' and 'conclude' to define the test configuration, including baseline object libraries and test source files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/exception/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test exception)\n    this_target_object_libraries(baseline)\n    this_target_sources(main.cc unit_exception.cc unit_status.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for ConsumerNode in C++\nDESCRIPTION: Constructor for ConsumerNode that accepts a function object. The function must accept a constant reference to an Item.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class Function>\nProducerNode(Function&& f);\n  - `Function` must meet the requirements of `std::function<void(const Item&)>`.\n```\n\n----------------------------------------\n\nTITLE: Adding Array Metadata Key Check in C/C++ API\nDESCRIPTION: API addition for checking if an array has a specific metadata key. Includes both C function tiledb_array_has_metadata_key and C++ function Array::has_metadata_key.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_33\n\nLANGUAGE: C\nCODE:\n```\ntiledb_array_has_metadata_key\n```\n\nLANGUAGE: C++\nCODE:\n```\nArray::has_metadata_key\n```\n\n----------------------------------------\n\nTITLE: Creating New TileDB Benchmark\nDESCRIPTION: Steps to add a new benchmark to the TileDB benchmarking suite, including file creation, class implementation, and CMakeLists.txt update.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/README.md#2025-04-16_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// 1. Create a new file `src/bench_<name>.cc`.\n// 2. Subclass from the `BenchmarkBase` class and implement the desired methods.\n// 3. In the `main` function, call the `BenchmarkBase::main` function of an instance of your subclass.\n// 4. Add `bench_<name>` to the `BENCHMARKS` list in `src/CMakeLists.txt`.\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Test Subdirectory for TileDB DAG Execution\nDESCRIPTION: Adds a subdirectory for unit tests if the TILEDB_TESTS flag is set. This allows for conditional compilation and inclusion of test code.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/execution/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Exporting Blosc Configuration Variables to Parent Scope\nDESCRIPTION: Sets parent scope variables for Blosc source files, include directories, and compilation options. This allows the TileDB build system to incorporate Blosc correctly while maintaining modular build files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/external/blosc/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TileDB_blosc_SOURCES ${SOURCES} PARENT_SCOPE)\nset(TileDB_blosc_INCLUDE_DIRS ${SOURCE_DIR}/include PARENT_SCOPE)\nset(TileDB_blosc_COMPILE_OPTIONS ${TILEDB_BLOSC_COMPILE_OPTIONS} PARENT_SCOPE)\nset(TileDB_blosc_LINK_OPTIONS ${CMAKE_THREAD_LIBS_INIT} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for C API Exception Wrapper in CMake\nDESCRIPTION: Sets up a unit test target for the C API exception wrapper, specifying source files and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/exception_wrapper/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test capi_exception_wrapper)\n  this_target_sources(\n      unit_capi_exception_wrapper.cc\n      unit_capi_error_tree.cc)\n  this_target_object_libraries(\n      # The exception wrapper is wrapped up with the context, so that's the\n      # top-level dependency required for the test.\n      capi_context_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Manager Stub Subdirectory in CMake for TileDB C API Tests\nDESCRIPTION: This CMake directive adds the storage_manager_stub subdirectory to the build process. The storage_manager_stub likely contains mock or stub implementations of the storage manager used for testing the TileDB C API.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_test_support/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(storage_manager_stub)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectories\nDESCRIPTION: Adds subdirectories containing test implementations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for TileDB C API String Module\nDESCRIPTION: This CMake configuration sets up the build for the string module of TileDB's C API. It includes common CMake modules, defines source files, creates an object library 'capi_string', and sets up dependencies and test subdirectories.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/string/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    string_api.cc\n)\ngather_sources(${SOURCES})\n\n#\n# object library `capi_string`\n#\ncommence(object_library capi_string)\n  this_target_sources(${SOURCES})\n  this_target_link_libraries(export)\n  this_target_object_libraries(baseline capi_context_stub)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Profile Object Library in CMake\nDESCRIPTION: Defines the 'rest_profile' object library, specifying its source files and dependencies. This library likely handles profiling functionality for REST operations in TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/rest/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library rest_profile)\n  this_target_sources(rest_profile.cc)\n  this_target_object_libraries(config home_directory seedable_global_PRNG)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Handle Unit Test Executable in CMake\nDESCRIPTION: Sets up a CMake executable target for unit testing the TileDB C API Handle component. The configuration links necessary libraries, adds source files, and registers the test with CTest for execution.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/handle/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(unit_capi_handle EXCLUDE_FROM_ALL)\ntarget_link_libraries(unit_capi_handle PUBLIC tiledb_Catch2WithMain)\n\n# Sources for code under test\ntarget_link_libraries(unit_capi_handle PUBLIC handle)\n\n# Sources for tests\ntarget_sources(unit_capi_handle PUBLIC\n    main.cc\n    unit_handle.cc\n)\n\nadd_test(\n    NAME \"unit_capi_handle\"\n    COMMAND $<TARGET_FILE:unit_capi_handle>\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring 'array_schema_operations' Object Library in CMake for TileDB\nDESCRIPTION: Sets up the 'array_schema_operations' object library for I/O-oriented operations, specifying its source file and dependencies on other libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library array_schema_operations)\n    this_target_sources(array_schema_operations.cc)\n    this_target_object_libraries(array_directory array_schema generic_tile_io tiledb_crypto)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring External Sort Unit Tests in CMake\nDESCRIPTION: Configures build settings for the partition unit test in TileDB's external sort functionality. Uses custom CMake functions 'commence' and 'conclude' to set up the test target with the specified source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/external_sort/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test partition)\nthis_target_sources(\n    unit_partition.cc\n)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Delta Compressor Options Structure in Markdown\nDESCRIPTION: This snippet describes the filter options for delta and double-delta compression filters in TileDB using a Markdown table. It includes fields for compressor type, compression level, and reinterpret datatype.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filter_pipeline.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| **Field** | **Type** | **Description** |\n| :--- | :--- | :--- |\n| Compressor type | `uint8_t` | Type of compression \\(e.g. `TILEDB_FILTER_DELTA`\\) |\n| Compression level | `int32_t` | Ignored |\n| Reinterpret datatype | `uint8_t` | Type to reinterpret data prior to compression. |\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Settings and Object Library for TileDB Query Readers\nDESCRIPTION: This snippet includes common CMake settings and object library configurations for the TileDB query readers module. It also adds subdirectories for aggregators and tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/readers/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nadd_subdirectory(aggregators)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: TileDB C++ API Class Changes\nDESCRIPTION: List of additions and modifications to TileDB C++ API classes, including Array, Query, Map, and associated operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_51\n\nLANGUAGE: C++\nCODE:\n```\nArray::{open, close}\nArray::reopen\nArray::is_open\nArray::query_type\nContext::cancel_tasks()\nQuery::finalize()\nQuery::query_type\nQuery::has_results\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Consumer Node Logic in C\nDESCRIPTION: Basic logic for a consumer node in TileDB, including pull, extract, function call, and drain operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/stop2.md#2025-04-16_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n   sink_pull()\n   tmp = extract()\n   f(tmp)\n   sink_drain()\n```\n\n----------------------------------------\n\nTITLE: Configuring chunk_view Unit Test\nDESCRIPTION: Sets up the build configuration for the chunk_view unit test by including the necessary source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/__ranges/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test chunk_view)\nthis_target_sources(\n        unit_chunk_view.cc\n)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Evaluator Unit Tests in CMake\nDESCRIPTION: Sets up unit test configuration for the TileDB evaluator component. Includes baseline object libraries and specifies unit_evaluator.cc as the test source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/evaluator/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test evaluator)\n    this_target_object_libraries(baseline)\n    this_target_sources(unit_evaluator.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Sources and Creating Object Library for TileDB C API Group\nDESCRIPTION: Defines source files for the C API group component and creates an object library target. The library depends on 'export' and 'baseline' components. A note indicates that a proper unit library can't be created due to dependence on StorageManager.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/group/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nlist(APPEND SOURCES\n  group_api.cc\n)\ngather_sources(${SOURCES})\n\n#\n# Object library for other units to depend upon\n#\n# Maturity Note: We can't make a proper group unit library until we've\n# removed its dependence on StorageManager.\n#\nadd_library(capi_group OBJECT ${SOURCES})\ntarget_link_libraries(capi_group PUBLIC export)\ntarget_link_libraries(capi_group PUBLIC baseline $<TARGET_OBJECTS:baseline>)\n```\n\n----------------------------------------\n\nTITLE: Configuring cancelable_tasks Object Library in CMake\nDESCRIPTION: Sets up the cancelable_tasks object library with its source file and dependencies on baseline and thread_pool libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library cancelable_tasks)\n    this_target_sources(cancelable_tasks.cc)\n    this_target_object_libraries(baseline thread_pool)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Config Unit Test Build\nDESCRIPTION: Sets up CMake build configuration for C API config unit tests, including unit test framework inclusion and target configuration with required source files and object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/config/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_config)\n  this_target_sources(unit_capi_config.cc)\n  this_target_object_libraries(capi_config_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB stdx Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for TileDB stdx unit tests. It includes the unit_test module, commences a unit test target for stdx, adds the 'compat.cc' source file to the target, and concludes the unit test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test stdx)\n  this_target_sources(\n      compat.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Query Readers Unit Tests in CMake\nDESCRIPTION: Sets up unit test configuration for TileDB query readers, including source files, object libraries, and dependencies. Links against the baseline library and rapidcheck testing framework.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/readers/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test readers)\n    this_target_sources(main.cc unit_reader_base.cc unit_sparse_global_order_reader_preprocess_tile_order.cc)\n    this_target_object_libraries(baseline)\n    this_target_link_libraries(rapidcheck)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: TileDB Group Directory Structure\nDESCRIPTION: Shows the hierarchical folder and file structure of a TileDB group, including the empty group file indicator, timestamped group member details, and metadata folder locations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/group_file_hierarchy.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_group                       # Group folder\n    |_ __tiledb_group.tdb      # Empty group file\n    |_ __group                 # Group folder\n        |_ <timestamped_name>  # Timestamped group file detailing members\n    |_ __meta                  # group metadata folder\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Targets for TileDB Experimental Examples\nDESCRIPTION: This snippet creates custom targets for experimental examples. It includes C++ API examples if the TILEDB_CPP_API option is enabled and sets up dependencies between targets.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(experimental_examples)\n\nif (TILEDB_CPP_API)\n  add_subdirectory(cpp_api)\n  add_dependencies(experimental_examples experimental_examples_cpp)\nendif()\n\n# Add alias for compatibility.\nadd_custom_target(experimental-examples)\nadd_dependencies(experimental-examples experimental_examples)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Only Unit Tests for DAG Components\nDESCRIPTION: Adds multiple header-only unit test targets for different components of the DAG state machine system. Tests are configured for FSM, scheduler, proof system, policies, item mover, and stop functionality.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ndag_add_header_only_unit_test(fsm)\ndag_add_header_only_unit_test(sched)\ndag_add_header_only_unit_test(proof)\ndag_add_header_only_unit_test(policies)\ndag_add_header_only_unit_test(item_mover)\ndag_add_header_only_unit_test(stop)\n```\n\n----------------------------------------\n\nTITLE: Alternative Consumer Node Implementation with Stop in Sink_Drain in C\nDESCRIPTION: An alternative implementation of consumer node logic where stop handling is done in the sink_drain event instead of sink_pull.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/stop2.md#2025-04-16_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n  init: { state = 00 } ∧ { stop = 0 }\n\n  while (not done)\n\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     event(sink_pull):\n\n     /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     auto tmp = extract()\n\n     /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     f(tmp)\n\n     /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n     event(sink_drain):\n\n       /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n       exit action: (none) \n\n       /* { state = 01 ∨ state = 11 } ∧ { stop = 0 ∨ stop = 1 }\n       state transition: { state = 01 } ∧ { stop = 0 }            → { state = 00 } ∧ { stop = 0 }\n                         { state = 01 } ∧ { stop = 1 }            → { state = done }\n                         { state = 11 } ∧ { stop = 0 ∨ stop = 1 } → { state = 10 } ∧ { stop = 0 ∨ stop = 1 }\n\n       entry action: { state = 00 ∨ state = 10 } ∧ { stop = 0 } → notify_source\n                     { state = 10 }              ∧ { stop = 1 } → none\n                     { state = done }                           → term_sink\n\n\n       /* { state = 01 ∨ state = 11 } ∧ { stop = 0 }\n\n     /* { state = 00 ∨ state = 10 } ∧ { stop = 0 ∨ stop = 1 }\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Settings for TileDB stdx\nDESCRIPTION: Includes common CMake settings for the TileDB stdx module without changing the policy scope. This likely sets up standard build configurations and options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Metadata Unit Tests in CMake\nDESCRIPTION: Sets up unit test configuration for TileDB metadata components. Includes necessary object libraries, links against the test support library, and specifies test source files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/metadata/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test metadata)\n    this_target_object_libraries(metadata mem_helpers)\t\n    this_target_link_libraries(tiledb_test_support_lib)\n    this_target_sources(main.cc unit_metadata.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Crypto Unit Test in CMake\nDESCRIPTION: Sets up a unit test target for the TileDB crypto module by including test framework, specifying source files and linking required object libraries. The test is configured using custom CMake functions for test setup.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/crypto/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test tiledb_crypto)\n    this_target_sources(unit_tiledb_crypto.cc)\n    this_target_object_libraries(tiledb_crypto)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for TileDB C API Current Domain in CMake\nDESCRIPTION: This CMake snippet sets up a unit test target for the TileDB C API current domain functionality. It defines the source files, compiler options, and links necessary libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/current_domain/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_current_domain)\n  this_target_sources(unit_capi_current_domain.cc)\n  if (NOT MSVC)\n    target_compile_options(unit_capi_current_domain PRIVATE -Wno-deprecated-declarations)\n  endif()\n  this_target_object_libraries(capi_current_domain)\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB Test Support Source Files in CMake\nDESCRIPTION: Defines the support source files needed for TileDB tests, including helper classes and utilities for testing the TileDB functionality.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_TEST_SUPPORT_SOURCES\n  support/src/ast_helpers.h\n  support/src/ast_helpers.cc\n  support/src/helpers.h\n  support/src/helpers.cc\n  support/src/helpers-dimension.h\n  support/src/vfs_helpers.cc\n  support/src/serialization_wrappers.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Tile Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the unit tests for the TileDB tile module. It includes the required source files and links against the necessary object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/tile/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test tile)\n    this_target_sources(\n        main.cc\n        unit_tile.cc\n    )\n    this_target_object_libraries(tile mem_helpers)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Test Directory in TileDB CMake Build\nDESCRIPTION: Adds the 'test' subdirectory to the build if the TILEDB_TESTS flag is set, allowing for conditional compilation of unit tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/data_block/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Task Submission Method for Scheduler in C++\nDESCRIPTION: Method for submitting tasks to the scheduler. Tasks are not executed until a wait function is called.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <class... Tasks>\nScheduler::submit(Tasks&&... tasks);\n```\n\n----------------------------------------\n\nTITLE: Finding and Requiring BZip2 Dependency in CMake\nDESCRIPTION: Locates the BZip2 library on the system and marks it as a required dependency for the build.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(BZip2 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring Faketime CMake Project\nDESCRIPTION: Sets up the CMake project for the faketime library. It defines the project name and version, creates the library target from source files, handles platform-specific linking, configures include directories, and specifies installation rules for headers and binaries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libfaketime/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.20)\n\nproject(faketime VERSION 0.9.10)\n\nadd_library(\n        ${PROJECT_NAME}\n        src/libfaketime.c\n)\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    target_link_libraries(\n            ${PROJECT_NAME}\n            rt\n            m\n    )\nendif()\n\ntarget_include_directories(${PROJECT_NAME}\n        PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}/src\n)\n\nfile(GLOB_RECURSE PUBLIC_HEADERS \"src/*.h\")\n\ninstall(FILES ${PUBLIC_HEADERS} DESTINATION include)\n\ninstall(TARGETS ${PROJECT_NAME}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Configuring Libmagic Library\nDESCRIPTION: Creates the libmagic library target, sets up include directories, and links against required dependencies including PCRE2.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(HAVE_CONFIG_H VERSION=\"${CMAKE_PROJECT_VERSION}\")\nif(WIN32)\n  add_compile_definitions(WIN32_LEAN_AND_MEAN WIN32)\nendif()\n\nadd_library(libmagic ${LIBMAGIC_SOURCE_FILES})\nset(targets ${targets} libmagic)\n\ntarget_link_libraries(libmagic PRIVATE PCRE2::POSIX)\n\nif(WIN32)\n  target_link_libraries(libmagic PRIVATE shlwapi)\nendif()\n\ntarget_include_directories(libmagic\n  PUBLIC\n    \"$<BUILD_INTERFACE:${LIBMAGIC_SOURCE_DIR}>\"\n    \"$<INSTALL_INTERFACE:include>\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring URI Format Object Library in CMake for TileDB\nDESCRIPTION: Sets up the 'uri_format' object library with source files and dependencies. It includes parse_uri.cc and generate_uri.cc as sources, and links against baseline, fragment_identifier, time, and vfs object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/storage_format/uri/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library uri_format)\n    this_target_sources(parse_uri.cc generate_uri.cc)\n    this_target_object_libraries(baseline fragment_identifier time vfs)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Config Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for TileDB config unit tests. It includes the unit test framework, commences a unit test target for 'config', specifies the target object libraries and source files, and concludes the unit test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/config/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test config)\n    this_target_object_libraries(config)\n    this_target_sources(unit_config.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Pipeline Object Library in CMake\nDESCRIPTION: Sets up the 'filter_pipeline' object library, combining all filters and additional dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library filter_pipeline)\n    this_target_sources(filter_pipeline.cc)\n    this_target_object_libraries(all_filters baseline buffer constants stats thread_pool tile)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring parse_argument Object Library in CMake\nDESCRIPTION: Defines the parse_argument object library with its source file and dependency on the baseline library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library parse_argument)\n    this_target_sources(parse_argument.cc)\n    this_target_object_libraries(baseline)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Profile Unit Test Build in CMake\nDESCRIPTION: Sets up the build configuration for REST profile unit tests. Includes the unit test module, specifies source files (main.cc and unit_rest_profile.cc), and links against the TileDB test support library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/rest/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test rest_profile)\n    this_target_sources(main.cc unit_rest_profile.cc)\n    this_target_link_libraries(rest_profile tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Identifier Unit Test in CMake\nDESCRIPTION: This CMake snippet sets up the unit test for the fragment identifier component. It includes the unit_test module, specifies the test target name, adds source files, and links against the fragment_identifier library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/fragment/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test fragment_identifier)\n    this_target_sources(main.cc unit_fragment_identifier.cc)\n    this_target_link_libraries(fragment_identifier)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration for TileDB Dynamic Memory\nDESCRIPTION: Includes the common CMake configuration file for the TileDB project, ensuring consistent build settings across components.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/dynamic_memory/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Sink Protocol Final Proof Outline\nDESCRIPTION: Final proof outline for the sink component showing pull, extract and drain operations with complete state/items predicates and transitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_21\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∧ ( items = 00 ∨ items = 10 ) } ∨ { state = 10 ∧ items = 10 } ∨ */\n     /* { state = 01 ∧ ( items = 01 ∨ items = 11 ) } ∨ { state = 11 ∧ items = 11 ) } */\n     pull: 〈 await ¬{ state = 00 } :\n              if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n     /* { state = 01 ∧ ( items = 01 ∨ items = 11 ) } ∨ { state = 11 ∧ items = 11 ) } */\n     extract: extract: item[1] ← 0\n     /* { state = 01 ∧ ( items = 00 ∨ items = 10 ) } ∨ { state = 11 ∧ items = 01 ) } */\n     drain: state[1] ← 0  \n     /* { state = 00 ∧ ( items = 00 ∨ items = 10 ) } ∨ { state = 10 ∧ items = 10 } ∨ */\n     /* { state = 01 ∧ ( items = 01 ∨ items = 11 ) } ∨ { state = 11 ∧ items = 11 ) } */\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring zip_view Unit Test\nDESCRIPTION: Sets up the build configuration for the zip_view unit test by including the necessary source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/__ranges/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test zip_view)\nthis_target_sources(\n        unit_zip_view.cc\n)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Complete Sink Proof Outline\nDESCRIPTION: Full proof outline for Sink showing while loop with pull, extract, and drain operations including state predicates.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∧ ( items = 00 ∨ items = 10 ) } ∨ { state = 10 ∧ items = 10 }   ∨ */\n     /* { state = 01 ∧ ( items = 01 ∨ items = 11 ) } ∨ { state = 11 ∧ items = 11 }     */\n     pull: 〈 await ¬{ state = 00 } :\n              if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n     /* { state = 01 ∧ ( items = 01 ∨ items = 11 ) } ∨ { state = 11 ∧ items = 11 ) }   */\n     extract: extract: item[1] ← 0\n     /* { state = 01 ∧ ( items = 00 ∨ items = 10 ) } ∨ { state = 11 ∧ items = 01 ) }   */\n     drain: state[1] ← 0  \n     /* { state = 00 ∧ ( items = 00 ∨ items = 10 ) } ∨ { state = 10 ∧ items = 10 }   ∨ */\n     /* { state = 01 ∧ ( items = 01 ∨ items = 11 ) } ∨ { state = 11 ∧ items = 11 ) }   */\n   }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Platform-Specific Source Files for Windows Compatibility\nDESCRIPTION: Defines Windows-specific compatibility source files that provide POSIX functionality on Windows platforms.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(WIN_COMPAT_SOURCES\n  ${LIBMAGIC_SOURCE_DIR}/asctime_r.c\n  ${LIBMAGIC_SOURCE_DIR}/asprintf.c\n  ${LIBMAGIC_SOURCE_DIR}/ctime_r.c\n  ${LIBMAGIC_SOURCE_DIR}/dprintf.c\n  ${LIBMAGIC_SOURCE_DIR}/getline.c\n  ${LIBMAGIC_SOURCE_DIR}/gmtime_r.c\n  ${LIBMAGIC_SOURCE_DIR}/localtime_r.c\n  ${LIBMAGIC_SOURCE_DIR}/pread.c\n  ${LIBMAGIC_SOURCE_DIR}/strcasestr.c\n  # ${LIBMAGIC_SOURCE_DIR}/strlcat.c\n  # ${LIBMAGIC_SOURCE_DIR}/strlcpy.c\n  ${LIBMAGIC_SOURCE_DIR}/vasprintf.c\n  ${LIBMAGIC_SOURCE_DIR}/fmtcheck.c\n  ${LIBMAGIC_SOURCE_DIR}/magic.def\n)\n\nif(WIN32)\n  set(LIBMAGIC_SOURCE_FILES ${WIN_COMPAT_SOURCES})\nelse()\n  set(LIBMAGIC_SOURCE_FILES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring platform Object Library in CMake\nDESCRIPTION: Creates an object library target for the platform component. Includes platform.cc source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/platform/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library platform)\n    this_target_sources(platform.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Dimension Unit Tests with CMake\nDESCRIPTION: Sets up CMake configuration for building TileDB dimension C API unit tests. Includes the unit_test module and configures test target with source files and required object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/dimension/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_dimension)\n  this_target_sources(unit_capi_dimension.cc)\n  this_target_object_libraries(capi_dimension_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Byteshuffle Filter Object Library in CMake\nDESCRIPTION: Sets up the 'byteshuffle_filter' object library, including external blosc sources and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library byteshuffle_filter)\n    cmake_path(APPEND TILEDB_SOURCE_ROOT \"external/blosc\" OUTPUT_VARIABLE BLOSC_SOURCE_ROOT)\n    cmake_path(APPEND CMAKE_BINARY_DIR \"external/blosc-alt\" OUTPUT_VARIABLE BLOSC_BINARY_ROOT)\n    add_subdirectory(${BLOSC_SOURCE_ROOT} ${BLOSC_BINARY_ROOT})\n    this_target_sources(byteshuffle_filter.cc ${TileDB_blosc_SOURCES})\n    this_target_object_libraries(baseline buffer filter)\n    set_source_files_properties(byteshuffle_filter.cc PROPERTIES INCLUDE_DIRECTORIES \"${TILEDB_EXTERNAL_INCLUDE};${TileDB_blosc_INCLUDE_DIRS}\")\n    set_source_files_properties(${TileDB_blosc_SOURCES} PROPERTIES INCLUDE_DIRECTORIES \"${TileDB_blosc_INCLUDE_DIRS}\")\n    set_source_files_properties(${TileDB_blosc_SOURCES} PROPERTIES COMPILE_OPTIONS \"${TileDB_blosc_COMPILE_OPTIONS}\")\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sieve Test Executable in CMake\nDESCRIPTION: Creates a custom test executable called unit_ports_sieve that is excluded from the default build target. This test is not based on the Catch testing framework unlike the other tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(unit_ports_sieve EXCLUDE_FROM_ALL)\n```\n\n----------------------------------------\n\nTITLE: Configuring 'current_domain' Object Library in CMake for TileDB\nDESCRIPTION: Sets up the 'current_domain' object library with its source file and dependencies on ndrectangle and constants libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library current_domain)\n    this_target_sources(current_domain.cc)\n    this_target_object_libraries(ndrectangle constants)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for C++ Examples in CMake\nDESCRIPTION: Defines a custom CMake target named 'examples_cpp' that will be used to build all C++ examples collectively.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(examples_cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring math Object Library in CMake\nDESCRIPTION: Defines the math object library with its source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library math)\n    this_target_sources(tdb_math.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Defining Producer Node Signature in C++\nDESCRIPTION: Specifies the function signature required for a producer node in the TileDB task graph. Producer nodes are root nodes that have only output ports and no input ports. They take an std::stop_source parameter and produce output items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/doc/glossary.md#2025-04-16_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nRet fun (std::stop_source stop);\n```\n\nLANGUAGE: c++\nCODE:\n```\n  requires std::is_invocable_r_v<Ret, Fun, std::stop_source>;\n```\n\n----------------------------------------\n\nTITLE: Specifying Sources for Sieve Test in CMake\nDESCRIPTION: Defines the source files required for the unit_ports_sieve test executable, which in this case is just the unit_ports_sieve.cc file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(unit_ports_sieve PUBLIC\n    unit_ports_sieve.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Evaluator Component in CMake\nDESCRIPTION: This CMake snippet configures the build process for the TileDB evaluator component. It includes common settings and adds test subdirectories. The component is header-only, so no object library is needed.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/evaluator/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix-Specific Compiler Options\nDESCRIPTION: Sets Unix-specific compiler options to disable printf format warnings as errors and deprecated declarations warnings for the KV API.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n  # Don't treat printf format warnings as errors.\n  add_compile_options(-Wno-error=format)\n  # TODO: Remove when KV API has been removed.\n  add_compile_options(-Wno-deprecated-declarations)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring 'ndrectangle' Object Library in CMake for TileDB\nDESCRIPTION: Defines the 'ndrectangle' object library, specifying its source file and dependencies on constants and domain libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library ndrectangle)\n    this_target_sources(ndrectangle.cc)\n    this_target_object_libraries(constants domain)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB C API Buffer List in CMake\nDESCRIPTION: This CMake snippet sets up a unit test target for the TileDB C API buffer list. It specifies the source files, object libraries, and links against the TileDB test support library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/buffer_list/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_buffer_list)\n  this_target_sources(unit_capi_buffer_list.cc)\n  this_target_object_libraries(capi_buffer_stub capi_buffer_list_stub)\n  this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring 'dimension' Object Library in CMake for TileDB\nDESCRIPTION: Sets up the 'dimension' object library with its source file and dependencies on baseline, filter_pipeline, misc_types, and range libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library dimension)\n    this_target_sources(dimension.cc)\n    this_target_object_libraries(baseline filter_pipeline misc_types range)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: Adds a test subdirectory to the build configuration, likely for including unit tests or other test-related build targets for the REST component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/rest/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Algorithm Unit Tests in CMake for TileDB\nDESCRIPTION: This CMake snippet sets up the unit tests for the algorithm module in TileDB. It includes necessary libraries, specifies source files, and links required dependencies for the test target.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/algorithm/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test algorithm)\n    this_target_object_libraries(algorithm)\n    this_target_sources(main.cc unit_parallel_merge.cc)\n    this_target_link_libraries(tiledb_test_support_lib)\n    this_target_link_libraries(rapidcheck)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for TileDB DAG Nodes\nDESCRIPTION: This CMake configuration includes common settings, sets up test directories when testing is enabled, and adds two header-only object libraries for DAG nodes implementation. The file follows TileDB's project structure and conventions for library definitions.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\n################################################################\n# Include subdirectory with unit tests                         #\n################################################################\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n\ndag_add_header_only_object_library(simple_nodes)\ndag_add_header_only_object_library(segmented_nodes)\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration\nDESCRIPTION: Includes common CMake configuration settings without policy scope restrictions\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/graph/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB VFS Operations\nDESCRIPTION: Example configuration options showing new VFS logging capabilities and S3 region settings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nvfs.log_operations=true\nvfs.s3.region=\"\"\nrest.curl.tcp_keepalive=true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Configuration\nDESCRIPTION: Configures the test execution settings including working directory and environment modifications for shared libraries\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/regression/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(\n  NAME \"tiledb_regression\"\n  COMMAND $<TARGET_FILE:tiledb_regression> --durations=yes\n  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nif (BUILD_SHARED_LIBS)\n  set_property(TEST tiledb_regression PROPERTY ENVIRONMENT_MODIFICATION \"PATH=path_list_append:$<TARGET_FILE_DIR:tiledb>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including C++ API Test Files in CMake\nDESCRIPTION: Conditionally adds C++ API-specific test files to the test sources when the C++ API is enabled. These tests cover the higher-level C++ interface to TileDB functionality.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_CPP_API)\n  list(APPEND TILEDB_UNIT_TEST_SOURCES\n    src/cpp-integration-filter-pipeline.cc\n    src/test-cppapi-dense-array-dimension-label.cc\n    src/test-cppapi-dimension-label.cc\n    src/test-cppapi-ndrectangle.cc\n    src/test-cppapi-current-domain.cc\n    src/test-cppapi-subarray-labels.cc\n    src/unit-cppapi-array.cc\n    src/unit-cppapi-checksum.cc\n    src/unit-cppapi-config.cc\n    src/unit-cppapi-consolidation-sparse.cc\n    src/unit-cppapi-consolidation.cc\n    src/unit-cppapi-consolidation-with-timestamps.cc\n    src/unit-cppapi-datetimes.cc\n    src/unit-cppapi-deletes.cc\n    src/unit-cppapi-dense-qc-coords-mode.cc\n    src/unit-cppapi-time.cc\n    src/unit-cppapi-enumerations.cc\n    src/unit-cppapi-fill_values.cc\n    src/unit-cppapi-filter.cc\n    src/unit-cppapi-float-scaling-filter.cc\n    src/unit-cppapi-fragment_info.cc\n    src/unit-cppapi-global-order-writes-remote.cc\n    src/unit-cppapi-group.cc\n    src/unit-cppapi-hilbert.cc\n    src/unit-cppapi-incomplete-var.cc\n    src/unit-cppapi-max-fragment-size.cc\n    src/unit-cppapi-metadata.cc\n    src/unit-cppapi-nullable.cc\n    src/unit-cppapi-partial-attribute-write.cc\n    src/unit-cppapi-query.cc\n    src/unit-cppapi-query-condition.cc\n    src/unit-cppapi-query-condition-enumerations.cc\n    src/unit-cppapi-query-condition-sets.cc\n    src/cpp-integration-query-condition.cc\n    src/unit-cppapi-schema.cc\n    src/unit-cppapi-schema-evolution.cc\n    src/unit-cppapi-stats.cc\n    src/unit-cppapi-string-dims.cc\n    src/unit-cppapi-subarray.cc\n    src/unit-cppapi-type.cc\n    src/unit-cppapi-update-queries.cc\n    src/unit-cppapi-updates.cc\n    src/unit-cppapi-util.cc\n    src/unit-cppapi-var-offsets.cc\n    src/unit-cppapi-vfs.cc\n    src/unit-cppapi-webp-filter.cc\n    src/unit-cppapi-xor-filter.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building tiledb_submit_a_b benchmark executable\nDESCRIPTION: Creates and configures the 'tiledb_submit_a_b' performance testing executable with the necessary includes and library linkage.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/performance/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n  tiledb_submit_a_b EXCLUDE_FROM_ALL\n  $<TARGET_OBJECTS:TILEDB_CORE_OBJECTS>\n  \"tiledb_submit_a_b.cc\"\n)\n\ntarget_include_directories(\n  tiledb_submit_a_b BEFORE PRIVATE\n    ${TILEDB_CORE_INCLUDE_DIR}\n    ${TILEDB_EXPORT_HEADER_DIR}\n)\n\ntarget_link_libraries(tiledb_submit_a_b\n  PUBLIC\n    TILEDB_CORE_OBJECTS_ILIB\n    tiledb_test_support_lib\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Disabling Automatic vcpkg Download\nDESCRIPTION: This code snippet shows how to disable automatic downloading of vcpkg in the CMake configuration for TileDB v2.25.0.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n-DTILEDB_DISABLE_AUTO_VCPKG=ON\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Order Unit Tests in CMake\nDESCRIPTION: Sets up CMake build configuration for data order unit tests. Includes the unit_test module and configures test target with source files and required object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/data_order/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_data_order)\n  this_target_sources(unit_capi_data_order.cc)\n  this_target_object_libraries(capi_data_order)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Array Schema Unit Tests with CMake\nDESCRIPTION: Sets up CMake build configuration for array schema unit tests. Includes test support library, specifies source files including various unit test components for array schema, attributes, dimensions, and domains. Uses custom CMake functions commence() and conclude() for test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test array_schema)\n    this_target_object_libraries(array_schema)\n    # should be `this_target_include_directories`, when available\n    target_include_directories(unit_array_schema PUBLIC ${TILEDB_SOURCE_ROOT}/test/support)\n    this_target_sources(\n        main.cc\n        unit_array_schema.cc\n        unit_attribute.cc\n        unit_dimension.cc\n        unit_dimension_label.cc\n        unit_domain.cc\n        unit_domain_data.cc\n        unit_tile_domain.cc\n        unit_current_domain.cc\n    )\n    this_target_link_libraries(tiledb_test_support_lib)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for TileDB Benchmarks\nDESCRIPTION: Sets up the CMake project requirements including minimum version, project name, and C++17 standard requirement needed for TileDB C++ API compatibility.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/benchmarking/src/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.21)\nproject(TileDBBenchmark)\n\n# Set C++17 as required standard for all C++ targets (required to use the TileDB\n# C++ API).\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for TileDB C API Filter List in CMake\nDESCRIPTION: Sets up a unit test target for the TileDB C API filter list component. The configuration includes the test source file and object libraries required for testing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/filter_list/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_filter_list)\n  this_target_sources(unit_capi_filter_list.cc)\n  this_target_object_libraries(capi_filter_list_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Core Include Directories for Test Support Library\nDESCRIPTION: Configures core include directories for the test support library, including main TileDB headers and export headers.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\n  tiledb_test_support_lib BEFORE PRIVATE\n    ${TILEDB_CORE_INCLUDE_DIR}\n    ${TILEDB_EXPORT_HEADER_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Modules\nDESCRIPTION: Includes common CMake functionality and object library module.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# tdb_catch object library\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Dumping Raw Stats in TileDB v2.0.3 (C API)\nDESCRIPTION: Shows the usage of the new C API function for dumping raw statistics data.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nchar* stats_dump;\ntiledb_stats_raw_dump_str(&stats_dump);\n// Use stats_dump\ntiledb_stats_free_str(&stats_dump);\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Compiler Options\nDESCRIPTION: Sets MSVC-specific compiler options to disable warnings not present in gcc, including warnings for non-constant aggregate initializers and implicit truncations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n  # Disable MSVC warnings not present with gcc.\n  #   C4204: non-constant aggregate initializer\n  #   C4221: aggregate initializer with local variable\n  #   C4305: implicit truncation of double to float\n  add_compile_options(/wd4204 /wd4221 /wd4305)\n```\n\n----------------------------------------\n\nTITLE: Configuring 'enumeration' Object Library in CMake for TileDB\nDESCRIPTION: Sets up the 'enumeration' object library with its source file and dependencies on buffer, constants, and seedable_global_PRNG libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/array_schema/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library enumeration)\n    this_target_sources(enumeration.cc)\n    this_target_object_libraries(buffer constants seedable_global_PRNG)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Group Test Compilation Target\nDESCRIPTION: Creates a test compilation target 'compile_group' to ensure link completeness of the group library. The target is excluded from the default build but links against the group library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/group/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(compile_group EXCLUDE_FROM_ALL)\ntarget_link_libraries(compile_group PRIVATE group)\ntarget_sources(compile_group PRIVATE\n    test/compile_group_main.cc $<TARGET_OBJECTS:group>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining TileDB CLI Executable in CMake\nDESCRIPTION: Specifies the source files for the TileDB CLI executable and sets its output name.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(tiledb-cli EXCLUDE_FROM_ALL\n  src/commands/help_command.cc\n  src/commands/info_command.cc\n  src/main/tiledb.cc\n)\n\nset_target_properties(tiledb-cli PROPERTIES\n  OUTPUT_NAME tiledb\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for C API Object Type in CMake\nDESCRIPTION: This snippet sets up a unit test for the C API object type functionality. It specifies the source file and links against the capi_object library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/object/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test capi_object_type)\n  this_target_sources(unit_capi_object_type.cc)\n  this_target_object_libraries(capi_object)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffer List Object Library in CMake\nDESCRIPTION: Configures the buffer_list object library compilation settings. Includes source file buffer_list.cc and depends on the buffer library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/buffer/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library buffer_list)\n    this_target_sources(buffer_list.cc)\n    this_target_object_libraries(buffer)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Consolidated Commits\nDESCRIPTION: Shows the directory structure where consolidated commits files are stored within a TileDB array. The files are located in the __commits subfolder with timestamped names ending in .con\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/consolidated_commits_file.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                              # array folder\n   |_ ....\n   |_ __commits                       # array commits folder\n         |_ <timestamped_name>.con    # consolidated commits file\n         |_ ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for TileDB C Examples in CMake\nDESCRIPTION: Adds a custom target 'examples_c' that can be used to build all C examples at once.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/c_api/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(examples_c)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Support Source Files\nDESCRIPTION: Lists all the test support source files needed for building the test infrastructure, including helpers, wrappers, and utilities.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Gather the test source files\nset(TILEDB_TEST_SUPPORT_SOURCES\n  rapidcheck/show.cc\n  src/array_helpers.cc\n  src/array_schema_helpers.cc\n  src/ast_helpers.h\n  src/ast_helpers.cc\n  src/helpers.h\n  src/helpers.cc\n  src/helpers-dimension.h\n  src/mem_helpers.h\n  src/mem_helpers.cc\n  src/serialization_wrappers.cc\n  src/stats.cc\n  src/temporary_local_directory.cc\n  src/vfs_helpers.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Config Object Library Build\nDESCRIPTION: Sets up CMake configuration to build the 'config' object library with required source files and dependencies. Includes common CMake policies and object library utilities, then configures the library with config.cc and config_iter.cc source files plus baseline, constants, and parse_argument object library dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/config/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\ncommence(object_library config)\n    this_target_sources(config.cc config_iter.cc)\n    this_target_object_libraries(baseline constants parse_argument)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Setting C99 Standard for TileDB C API Examples in CMake\nDESCRIPTION: Configures the C compiler to use C99 standard without GNU extensions for compiling TileDB C API examples.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/examples/c_api/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_STANDARD 99)\nset(CMAKE_C_STANDARD_REQUIRED ON)\nset(CMAKE_C_EXTENSIONS OFF) # Don't use GNU extensions\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for TileDB C++ API Support\nDESCRIPTION: This command adds a subdirectory for tests related to the C++ API support. It's used to organize and include test files in the build process.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/cpp_api_support/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Setting Up TileDB Tools Build Properties in CMake\nDESCRIPTION: Configures link libraries and include directories for all TileDB tool targets.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_TOOLS tiledb-cli)\n\nforeach(TOOL ${TILEDB_TOOLS})\n  target_link_libraries(${TOOL} PRIVATE\n    TILEDB_CORE_OBJECTS_ILIB\n    TILEDB_CORE_OBJECTS\n    clipp::clipp\n  )\n  target_include_directories(${TOOL} PRIVATE\n    ${CMAKE_CURRENT_SOURCE_DIR}/..\n    ${CMAKE_CURRENT_SOURCE_DIR}/src\n  )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining C++ API String Unit Test in CMake\nDESCRIPTION: Sets up a unit test for the C++ API string functionality. The test uses the unit_test CMake module to configure the test target and adds the necessary source files and object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/cpp_api_support/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test cppapi_string)\n    this_target_sources(unit_cppapi_string.cc)\n    this_target_object_libraries(capi_string)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Common Components Build\nDESCRIPTION: CMake configuration that includes common build rules and sets up the DAG subdirectory for compilation. Uses MIT license and establishes basic build structure for TileDB's experimental common components.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common-root)\ninclude(common)\n\nadd_subdirectory(dag)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test for C API Without Hook in CMake\nDESCRIPTION: Sets up a unit test target for the C API without an API hook, specifying source files and dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_support/exception_wrapper/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test capi_ew_without_hook)\n  this_target_sources(\n      unit_capi_hook.cc\n      unit_capi_hook_without.cc)\n  this_target_object_libraries(\n      capi_context_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Defining Sources for TileDB C API Object Module in CMake\nDESCRIPTION: This snippet defines the source files for the TileDB C API object module. It includes the 'object_api.cc' file and uses the 'gather_sources' function to collect the sources.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/object/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND SOURCES\n  object_api.cc\n)\ngather_sources(${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Support for Tests\nDESCRIPTION: Conditionally enables AWS S3 configuration for tests if the feature is enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS_AWS_S3_CONFIG)\n  message(STATUS \"Tests built with AWS S3 config\")\n  target_compile_definitions(tiledb_test_support_lib PRIVATE -DTILEDB_TESTS_AWS_S3_CONFIG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring mgc_dict Object Library in CMake\nDESCRIPTION: Sets up the mgc_dict object library with dependencies on generated magic data, buffer and compressors libraries, and libmagic.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library mgc_dict)\n    add_dependencies(mgc_dict gen_mgc_unarch)\n    target_include_directories(mgc_dict PRIVATE \"${PROJECT_BINARY_DIR}\")\n    this_target_object_libraries(buffer compressors)\n    this_target_link_libraries(libmagic)\n    this_target_sources(mgc_dict.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Header-Only Task Graph Library\nDESCRIPTION: Declares taskgraph as a header-only object library using custom DAG CMake function\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/graph/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ndag_add_header_only_object_library(taskgraph)\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Compiler Options for TileDB Experimental Examples\nDESCRIPTION: This snippet disables specific MSVC warnings that are not present in GCC. It addresses warnings related to non-constant aggregate initializers, local variable usage in aggregate initializers, and implicit double to float truncation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n  # Disable MSVC warnings not present with gcc.\n  #   C4204: non-constant aggregate initializer\n  #   C4221: aggregate initializer with local variable\n  #   C4305: implicit truncation of double to float\n  add_compile_options(/wd4204 /wd4221 /wd4305)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extracting Version from configure.ac in CMake\nDESCRIPTION: Reads the version information from configure.ac using regex pattern matching to extract the version number for use in the CMake project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile(READ ${CMAKE_CURRENT_SOURCE_DIR}/configure.ac CONFIGURE_AC_CONTENT)\nstring(REGEX MATCH \"AC_INIT\\\\(\\\\[file\\\\],\\\\[([0-9]+\\\\.[0-9]+)\\\\]\" _ ${CONFIGURE_AC_CONTENT})\nunset(CONFIGURE_AC_CONTENT)\n\nproject(file VERSION ${CMAKE_MATCH_1})\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Interval Unit Tests in CMake\nDESCRIPTION: Sets up CMake build configuration for interval-related unit tests. Includes test files for interval bounds, constructors, operations, predicates, and types. Uses custom CMake functions 'commence' and 'conclude' for test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/interval/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test interval)\nthis_target_sources(main.cc unit_interval_bound.cc\n    unit_interval_constructors.cc unit_interval_operations.cc\n    unit_interval_predicates.cc unit_interval_types.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Adding TileDB Experimental Subdirectory in CMake\nDESCRIPTION: Adds the 'tiledb' subdirectory to the build, which likely contains the experimental features implementation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(tiledb)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Support Library Include Directories\nDESCRIPTION: Sets up include directories for the test support library, including Catch2 headers.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(tiledb_test_support_lib\n  PRIVATE\n    $<TARGET_PROPERTY:Catch2::Catch2,INTERFACE_INCLUDE_DIRECTORIES>\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for TileDB C API Object Module in CMake\nDESCRIPTION: This snippet adds a test subdirectory for the TileDB C API object module. It's a simple command to include tests related to this module.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/object/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Domain API Build\nDESCRIPTION: Configures CMake build settings for the TileDB Domain API component. Sets up source files, includes common configuration, and establishes object library target with required dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/domain/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    domain_api.cc\n    )\ngather_sources(${SOURCES})\n\ncommence(object_library capi_domain_stub)\n  this_target_sources(domain_api.cc)\n  this_target_link_libraries(export)\n  this_target_object_libraries(capi_dimension_stub capi_string)\n  this_target_object_libraries(domain)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete Condition Tests in CMake\nDESCRIPTION: Sets up the test configuration for delete condition functionality by including common CMake settings and adding test subdirectories. Part of the TileDB storage format testing framework.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/deletes_and_updates/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Catch2 and subdirectories in CMake\nDESCRIPTION: This section configures the Catch2 testing framework when tests are enabled and adds all required subdirectories for the DAG component. It ensures all necessary components of the DAG system are built in the proper order.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS)\n    #\n    # All unit tests depend on Catch\n    #\n    find_package(Catch2 REQUIRED)\nendif()\n\nadd_subdirectory(data_block)\nadd_subdirectory(edge)\nadd_subdirectory(execution)\nadd_subdirectory(nodes)\nadd_subdirectory(ports)\nadd_subdirectory(state_machine)\nadd_subdirectory(utility)\nadd_subdirectory(graph)\n```\n\n----------------------------------------\n\nTITLE: Configuring constants Object Library in CMake\nDESCRIPTION: Defines the constants object library with its source file.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library constants)\n    this_target_sources(constants.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for TileDB Interval Tests in CMake\nDESCRIPTION: This CMake snippet adds a test subdirectory for the interval component of TileDB. It notes that there's no object library for 'interval' as it's header-only.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/interval/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# No object library `interval`; it's header-only\n#\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration for TileDB DAG Edge\nDESCRIPTION: Includes a common CMake configuration file for the TileDB DAG edge component, ensuring consistent build settings across the project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/edge/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: TileDB Array Metadata Folder Structure\nDESCRIPTION: Shows the hierarchical folder structure of metadata in a TileDB array, with the main array folder containing a __meta subfolder that holds timestamped metadata files and vacuum files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/metadata.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                            # array folder\n   |  ...\n   |_ __meta                        # metadata folder\n         |_ <timestamped_name>      # metadata file\n         |_ ...\n         |_ <timestamped_name>.vac  # vacuum file\n         |_ ...\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules for TileDB Common Types\nDESCRIPTION: Includes necessary CMake modules for the build configuration. These modules likely contain common build settings and utility functions used across the TileDB project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/types/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Finding C++ Example Sources with Glob Pattern\nDESCRIPTION: Uses CMake's file glob functionality to find all C++ example source files in the current directory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB TILEDB_EXAMPLE_SOURCES_CPPAPI \"*.cc\")\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB C API Filter List Build in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the TileDB C API filter list component. It includes necessary modules, defines source files, and creates an object library target named 'capi_filter_list_stub'.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/filter_list/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nlist(APPEND SOURCES\n    filter_list_api.cc\n)\ngather_sources(${SOURCES})\n\ncommence(object_library capi_filter_list_stub)\n  this_target_sources(${SOURCES})\n  this_target_object_libraries(capi_filter_stub)\n  this_target_object_libraries(filter_pipeline)\nconclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Installation and CMake Config Files\nDESCRIPTION: Sets up proper installation of library, executable, headers, and magic database, along with CMake package configuration for downstream projects.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Include module with function 'configure_package_config_file'\ninclude(CMakePackageConfigHelpers)\n\nset(PORT_NAME unofficial-libmagic)\nset(TARGETS_EXPORT_NAME ${PORT_NAME}-targets)\n\ninstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/magic.mgc DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PORT_NAME})\n\ninstall(FILES ${LIBMAGIC_SOURCE_DIR}/magic.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\n\ninstall(TARGETS ${targets}\n        EXPORT ${TARGETS_EXPORT_NAME}\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\ninstall(EXPORT ${TARGETS_EXPORT_NAME}\n        FILE ${TARGETS_EXPORT_NAME}.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PORT_NAME}\n        NAMESPACE unofficial::libmagic::\n        )\nconfigure_package_config_file(\n  ${PORT_NAME}-config.cmake.in\n  ${PORT_NAME}-config.cmake\n  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PORT_NAME})\nwrite_basic_package_version_file(\n  ${PORT_NAME}-config-version.cmake\n  VERSION ${CMAKE_PROJECT_VERSION}\n  COMPATIBILITY SameMajorVersion)\ninstall(FILES\n        ${CMAKE_BINARY_DIR}/${PORT_NAME}-config.cmake\n        ${CMAKE_BINARY_DIR}/${PORT_NAME}-config-version.cmake\n        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PORT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring External Sort Build Settings in CMake\nDESCRIPTION: Basic CMake configuration that includes common build settings and adds test subdirectory for TileDB's external sort component. Uses the common module for shared build configurations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/external_sort/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Module and Adding Test Subdirectory in TileDB Exception Handling\nDESCRIPTION: This CMake snippet includes the common module without policy scope and adds a test subdirectory for the exception handling component. It sets up the build configuration for TileDB's exception handling module.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/exception/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring C API Domain Unit Tests with CMake\nDESCRIPTION: Defines a unit test target for TileDB's C API domain functionality. It includes the unit_test module, starts a unit test configuration block, specifies the source file 'unit_capi_domain.cc', links against the 'capi_domain_stub' object library, and concludes the test configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/domain/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_domain)\n  this_target_sources(unit_capi_domain.cc)\n  this_target_object_libraries(capi_domain_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for C++ Experimental Examples in CMake\nDESCRIPTION: Creates a custom build target for all experimental C++ examples that can be built as a group.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/experimental_examples/cpp_api/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(experimental_examples_cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake configuration for TileDB utility details\nDESCRIPTION: This CMake snippet includes common settings, defines an object library, and adds a test subdirectory for the TileDB utility details module. It uses the 'common' and 'object_library' CMake modules and sets up testing infrastructure.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/util/detail/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\ninclude(object_library)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for TileDB stdx\nDESCRIPTION: Adds a test subdirectory to the build configuration. This is likely where unit tests or other test-related files for the stdx module are located.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Setting TileDB Core Include Directory\nDESCRIPTION: Defines the core include directory for TileDB headers, which is one level up from the current source directory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TILEDB_CORE_INCLUDE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/..\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for TileDB Enumerations\nDESCRIPTION: The hierarchical directory structure used by TileDB to store enumeration data. Enumerations are stored inside the array schema directory, with each enumeration stored in a Generic Tile with a UUID-based filename.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/enumeration.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy_array                                    # array folder\n   |  ...\n   |_ schema                      # ArraySchema directory named `__schema`\n         |_ enumerations          # Enumeration directory named `__enumerations`\n               |_ enumeration     # enumeration data with names `__uuid_v`\n```\n\n----------------------------------------\n\nTITLE: Configuring Float Scale Input Validation Unit Test in CMake\nDESCRIPTION: Configures a unit test target for float scaling filter input validation with required dependencies.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/filter/test/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test float_scale_input_val)\n    this_target_object_libraries(float_scaling_filter)\n    this_target_sources(main.cc unit_float_scale_input_validation.cc)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Governor Test Build\nDESCRIPTION: CMake configuration that sets up test builds for the TileDB governor component. Includes test executable configuration, linking with Catch2 testing framework, and test source file inclusion. Currently disabled but preserved for future use.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/governor/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nif (FALSE AND TILEDB_TESTS) # reserved for later\n    find_package(Catch2 REQUIRED)\n\n    add_executable(unit_governor EXCLUDE_FROM_ALL)\n    target_link_libraries(unit_governor PUBLIC tiledb_Catch2WithMain)\n\n    # Sources for code under test\n    target_sources(unit_dynamic_memory PUBLIC\n      ${TILEDB_COMMON_GOVERNOR_SOURCES}\n    )\n\n    # Sources for tests\n    target_sources(unit_governor PUBLIC\n      test/main.cc\n      test/unit_governor.cc\n    )\n\n    add_test(\n            NAME \"unit_governor\"\n            COMMAND $<TARGET_FILE:unit_governor>\n            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for Non-MSVC Platforms\nDESCRIPTION: Adds compiler-specific options for non-Microsoft Visual C++ compilers, specifically disabling deprecated declaration warnings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MSVC)\n  target_compile_options(tiledb_test_support_lib PRIVATE -Wno-deprecated-declarations)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for TileDB Dynamic Memory\nDESCRIPTION: Includes the test subdirectory in the build process, enabling the compilation and execution of unit tests for the dynamic memory component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/dynamic_memory/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Settings for TileDB C++ API Support\nDESCRIPTION: This snippet includes common CMake settings for the TileDB project without applying any policy scope. It's typically used to set up consistent build configurations across different parts of the project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/cpp_api_support/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Buffered Sink State Machine Transitions\nDESCRIPTION: Demonstrates the state transitions and invariants for the Sink component in a buffered communication protocol. Shows state predicates before and after pull, extract and drain operations.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nwhile (not done) {\n\n     /* { state = 000 ∧ ( items = 000 ∨ items = 100 ) } ∨ */\n     /* { state = 001 ∧ ( items = 001 ∨ items = 101 ) } ∨ */\n     /* { state = 010 ∧ ( items = 010 ∨ items = 110 ) } ∨ */\n     /* { state = 011 ∧ ( items = 011 ∨ items = 111 ) } ∨ */\n     /* { state = 100 ∧ items = 100 }                   ∨ */\n     /* { state = 101 ∧ items = 101 }                   ∨ */\n     /* { state = 110 ∧ items = 110 }                   ∨ */\n     /* { state = 111 ∧ items = 111 }                     */\n\n     pull: 〈 await ¬{ state = 000 } :\n\n     /* { state = 001 ∧ ( items = 001 ∨ items = 101 ) } ∨ */\n     /* { state = 011 ∧ ( items = 011 ∨ items = 111 ) } ∨ */\n     /* { state = 101 ∧ items = 101 }                   ∨ */\n     /* { state = 111 ∧ items = 111 }                     */\n\n     extract: extract: item[2] ← 0\n\n     /* { state = 001 ∧ ( items = 000 ∨ items = 100 ) } ∨ */\n     /* { state = 011 ∧ ( items = 010 ∨ items = 110 ) } ∨ */\n     /* { state = 101 ∧ items = 100 }                   ∨ */\n     /* { state = 111 ∧ items = 110 }                     */\n\n     drain: state[2] ← 0\n\n     /* { state = 000 ∧ ( items = 000 ∨ items = 100 ) } ∨ */\n     /* { state = 001 ∧ ( items = 001 ∨ items = 101 ) } ∨ */\n     /* { state = 010 ∧ ( items = 010 ∨ items = 110 ) } ∨ */\n     /* { state = 011 ∧ ( items = 011 ∨ items = 111 ) } ∨ */\n     /* { state = 100 ∧ items = 100 }                   ∨ */\n     /* { state = 101 ∧ items = 101 }                   ∨ */\n     /* { state = 110 ∧ items = 110 }                   ∨ */\n     /* { state = 111 ∧ items = 111 }                     */\n   }\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for TileDB Components\nDESCRIPTION: Includes various subdirectories containing different components of TileDB into the build process.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(api)\nadd_subdirectory(as_built)\nadd_subdirectory(common)\nadd_subdirectory(platform)\nadd_subdirectory(type)\nadd_subdirectory(sm)\nadd_subdirectory(stdx)\nadd_subdirectory(storage_format)\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Integration Tests\nDESCRIPTION: Sets up Python and pybind11 dependencies, configures the unit_arrow executable with necessary source files and linkage for Arrow integration testing.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif (TILEDB_ARROW_TESTS)\n  set(Python_FIND_REGISTRY \"LAST\")\n  set(Python_FIND_STRATEGY \"LOCATION\")\n  find_package(Python COMPONENTS Interpreter Development REQUIRED)\n  find_package(pybind11 REQUIRED)\n  message(STATUS \"Configuring Apache Arrow integration test with Python ${Python_VERSION} (${Python_EXECUTABLE})\"\n\n  add_executable(\n    unit_arrow EXCLUDE_FROM_ALL\n    $<TARGET_OBJECTS:TILEDB_CORE_OBJECTS>\n    src/unit-arrow.cc\n    ${CMAKE_SOURCE_DIR}/tiledb/sm/cpp_api/arrow_io_impl.h\n  )\n\n  target_link_libraries(unit_arrow\n    PUBLIC\n      TILEDB_CORE_OBJECTS_ILIB\n      TILEDB_CORE_OBJECTS\n      tiledb_Catch2WithMain\n      pybind11::embed\n      tiledb_test_support_lib\n      configuration_definitions\n  )\n\n  file(TO_CMAKE_PATH ${CMAKE_CURRENT_BINARY_DIR} SAFE_CURRENT_BINARY_DIR)\n  target_compile_definitions(unit_arrow PRIVATE -DTILEDB_PYTHON_UNIT_PATH=\"${SAFE_CURRENT_BINARY_DIR}\")\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/src/unit_arrow.py\" \"${CMAKE_CURRENT_BINARY_DIR}\" COPYONLY)\n\n  target_include_directories(\n    unit_arrow BEFORE PRIVATE\n      ${TILEDB_CORE_INCLUDE_DIR}\n      ${TILEDB_EXPORT_HEADER_DIR}\n  )\n\n  add_test(\n    NAME \"unit_arrow\"\n    COMMAND unit_arrow --durations=yes\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Header-Only Object Library\nDESCRIPTION: Creates a header-only object library named 'ports' using a custom CMake function.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_object_library(ports)\n```\n\n----------------------------------------\n\nTITLE: Adding Header-Only Object Libraries for TileDB DAG Execution Components\nDESCRIPTION: Creates header-only object libraries for various components of the DAG execution system. These libraries include threadpool, bountiful, throw_catch, frugal, task_state_machine, and duffs.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/execution/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ndag_add_header_only_object_library(threadpool)\ndag_add_header_only_object_library(bountiful)\ndag_add_header_only_object_library(throw_catch)\ndag_add_header_only_object_library(frugal)\ndag_add_header_only_object_library(task_state_machine)\ndag_add_header_only_object_library(duffs)\n```\n\n----------------------------------------\n\nTITLE: Setting TileDB Core Include Directories\nDESCRIPTION: Configures the include directories for TileDB core components, including the main source directory and C API directory for header files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Include TileDB core header directories\nset(TILEDB_CORE_INCLUDE_DIR \"${CMAKE_SOURCE_DIR}\")\n\n# Include the C API directory so that the C++ 'tiledb' file can directly\n# include \"tiledb.h\".\nlist(APPEND TILEDB_CORE_INCLUDE_DIR \"${CMAKE_SOURCE_DIR}/tiledb/sm/c_api\")\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in TileDB CMake Configuration\nDESCRIPTION: This snippet adds a test subdirectory to the CMake build configuration, likely for including unit tests related to the algorithm library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/algorithm/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Directory for TileDB DAG Edge\nDESCRIPTION: Conditionally adds the test subdirectory to the build process if TILEDB_TESTS is enabled, allowing for unit testing of the edge component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/edge/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Synchronized Optional CMake Build\nDESCRIPTION: Basic CMake configuration that includes common build settings and enables test subdirectory compilation for the synchronized_optional component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/stdx/synchronized_optional/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Stringx Object Library\nDESCRIPTION: Creates the stringx object library for string operations, including the stdx_string component.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library stringx)\n    this_target_sources(stdx_string.cc)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Vacuum File Location in Array Commit Folder\nDESCRIPTION: Shows the directory structure where a vacuum file can be located in the array commit folder for managing fragment vacuuming.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/vacuum_file.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy_array                           # array folder\n   |_ ....\n   |_ __commits                    # array commit folder\n         |_ <timestamped_name>.vac # vacuum file\n```\n\n----------------------------------------\n\nTITLE: Creating Memory Helpers Object Library\nDESCRIPTION: Defines an object library for memory helper utilities used in tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(object_library mem_helpers)\n  this_target_sources(src/mem_helpers.cc)\n  this_target_object_libraries(baseline)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Header-Only Library for FSM\nDESCRIPTION: Configures CMake build settings for a header-only finite state machine library. Includes common CMake configurations and conditionally adds test directory if testing is enabled. Creates a header-only object library named 'fsm'.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\n################################################################\n# Include subdirectory with unit tests                         #\n################################################################\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n\ndag_add_header_only_object_library(fsm)\n```\n\n----------------------------------------\n\nTITLE: Finding Catch2 Testing Framework in CMake\nDESCRIPTION: Locates the Catch2 testing framework package which is required for running tests.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Catch2 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration for TileDB\nDESCRIPTION: Includes a common CMake configuration file for the TileDB project, which likely contains shared settings and macros.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/data_block/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building MSYS handle leakage test executable for TileDB\nDESCRIPTION: Creates and configures the 'tiledb_explore_msys_handle_leakage' test executable with appropriate dependencies, include directories, and compiler options.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/performance/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# unit test executable\nadd_executable(\n  tiledb_explore_msys_handle_leakage EXCLUDE_FROM_ALL\n  $<TARGET_OBJECTS:TILEDB_CORE_OBJECTS>\n  ${TILEDB_MSYS_HANDLE_LEAKAGE_SOURCES}\n  \"msys_handle_leakage/unit.cc\"\n)\n\nadd_dependencies(tiledb_explore_msys_handle_leakage tiledb_test_support_lib)\n\n# We want tests to continue as normal even as the API is changing,\n# so don't warn for deprecations, since they'll be escalated to errors.\nif (NOT MSVC)\n  target_compile_options(tiledb_unit PRIVATE -Wno-deprecated-declarations)\n  target_compile_options(tiledb_test_support_lib PRIVATE -Wno-deprecated-declarations)\nendif()\n\ntarget_include_directories(\n  tiledb_explore_msys_handle_leakage BEFORE PRIVATE\n    ${TILEDB_CORE_INCLUDE_DIR}\n    ${TILEDB_EXPORT_HEADER_DIR}\n)\n\ntarget_link_libraries(tiledb_explore_msys_handle_leakage\n  PUBLIC\n    TILEDB_CORE_OBJECTS_ILIB\n    tiledb_Catch2WithMain\n    tiledb_test_support_lib\n)\n\n# This is necessary only because we are linking directly to the core objects.\n# Other users (e.g. the examples) do not need this flag.\ntarget_compile_definitions(tiledb_explore_msys_handle_leakage PRIVATE -Dtiledb_EXPORTS)\n\ntarget_compile_definitions(tiledb_explore_msys_handle_leakage PRIVATE\n  -DTILEDB_TEST_INPUTS_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/inputs\"\n)\n\n# Linking dl is only needed on linux with gcc\nif (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\" AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set_target_properties(tiledb_explore_msys_handle_leakage PROPERTIES\n      LINK_FLAGS \"-Wl,--no-as-needed -ldl\"\n    )\nendif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring cert_file Object Library in CMake\nDESCRIPTION: Creates an object library target for cert_file component. Links with baseline library and includes cert_file.cc source.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/platform/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(object_library cert_file)\n    this_target_sources(cert_file.cc)\n    this_target_link_libraries(baseline)\nconclude(object_library)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory in CMake\nDESCRIPTION: Adds a test subdirectory to the build configuration. This likely includes test files and configurations for the 'datum' object library and other components in the common types module.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/types/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Test Directory\nDESCRIPTION: Adds the test subdirectory only if the TILEDB_TESTS flag is enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/ports/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Manager Stub Library in CMake\nDESCRIPTION: Defines an object library for the stubbed storage manager that overrides the default StorageManager implementation. It specifies the source file to compile and sets up the necessary include directories for both public and private usage.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api_test_support/storage_manager_stub/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(storage_manager_stub OBJECT\n    ${CMAKE_SOURCE_DIR}/tiledb/api/c_api_test_support/storage_manager_stub/storage_manager_stub.cc)\n# Presence of a particular header file causes the override. Add the directory\n# that contains the overriding header to the include search path.\ntarget_include_directories(storage_manager_stub PUBLIC\n    ${CMAKE_SOURCE_DIR}/tiledb/api/c_api_test_support/storage_manager_stub)\ntarget_include_directories(storage_manager_stub PRIVATE\n    ${CMAKE_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header-Only Unit Tests for DAG Edge Components in CMake\nDESCRIPTION: Sets up three header-only unit tests for TileDB's DAG edge implementation. The tests cover basic edge functionality, block edges, and edge pseudo nodes, using a custom CMake function named 'dag_add_header_only_unit_test'.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/edge/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ndag_add_header_only_unit_test(edge)\ndag_add_header_only_unit_test(block_edge)\ndag_add_header_only_unit_test(edge_pseudo_nodes)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Support Static Library\nDESCRIPTION: Defines a static library target for test support code, combining TileDB core objects with test-specific source files.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tiledb_test_support_lib STATIC EXCLUDE_FROM_ALL\n  $<TARGET_OBJECTS:TILEDB_CORE_OBJECTS>\n  ${TILEDB_TEST_SUPPORT_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory for TileDB Query Field API in CMake\nDESCRIPTION: Adds the test subdirectory for the query field component, which will include related tests in the build process.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/query_field/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test_subdirectory()\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration for TileDB Experimental Build\nDESCRIPTION: Sets up the CMake build environment for experimental TileDB components by including common configuration and adding the common subdirectory.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n\nadd_subdirectory(common)\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features Test Suite\nDESCRIPTION: Sets up a unit test target for experimental features testing. Conditionally includes different source files based on whether experimental features are enabled.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test experimental)\n    this_target_object_libraries(baseline)\n    this_target_sources(\n        main.cc\n        $<IF:$<BOOL:${TILEDB_EXPERIMENTAL_FEATURES}>,\n          unit_is_experimental.cc,\n          unit_is_not_experimental.cc>\n        )\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Including Common CMake Configuration in TileDB\nDESCRIPTION: Includes a common CMake configuration file without scope for policy changes. This likely sets up common build settings for the project.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(common NO_POLICY_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Tracker Test Suite\nDESCRIPTION: Defines a unit test target for memory tracking functionality, specifying source files and required object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/common/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test memory_tracker)\n    this_target_sources(main.cc unit_memory_tracker.cc unit_memory_tracker_types.cc)\n    this_target_object_libraries(baseline)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux-specific dl Linking\nDESCRIPTION: Sets linking flags for the tiledb_unit target specifically for Linux systems using GCC compiler to include the dl library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\" AND CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set_target_properties(tiledb_unit PROPERTIES\n      LINK_FLAGS \"-Wl,--no-as-needed -ldl\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for TileDB Storage Format in CMake\nDESCRIPTION: This CMake snippet adds subdirectories for serialization and URI handling to the build process. It's part of the storage format module configuration in TileDB.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/storage_format/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(serialization)\nadd_subdirectory(uri)\n```\n\n----------------------------------------\n\nTITLE: Configuring TileDB Range Unit Tests with CMake\nDESCRIPTION: This snippet configures the unit tests for TileDB range functionality. It includes the necessary object libraries and source files for testing range operations such as subset checking, validation, cropping, and string representation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/type/range/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test range)\n    this_target_object_libraries(range)\n    this_target_sources(main.cc\n        unit_check_range_is_subset.cc\n        unit_check_range_is_valid.cc\n        unit_crop_range.cc\n        unit_range.cc\n        unit_range_str.cc\n        )\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Timing Tests\nDESCRIPTION: Configures timing tests using libfaketime library for UNIX-based systems, setting up test environment with a specific datetime.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nfind_library(\n        LIBFAKETIME\n        NAMES faketime\n)\n\nif (LIBFAKETIME)\n    add_test(\n            NAME \"tiledb_timing_unit\"\n            COMMAND tiledb_unit --durations=yes [sub-millisecond]\n            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    )\n\n    set_property(TEST tiledb_timing_unit PROPERTY ENVIRONMENT_MODIFICATION \"FAKETIME=set:2020-12-24 20:30:00;LD_PRELOAD=path_list_append:${LIBFAKETIME}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Addition\nDESCRIPTION: Conditionally adds the test subdirectory if TILEDB_TESTS flag is enabled\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/graph/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (TILEDB_TESTS)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS C API Unit Tests in CMake\nDESCRIPTION: Sets up unit test configuration for the TileDB VFS C API. Includes the unit_test module and configures test target with source files and required object libraries.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/vfs/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_vfs)\n  this_target_sources(unit_capi_vfs.cc)\n  this_target_object_libraries(capi_vfs)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Test-Specific Compile Definitions\nDESCRIPTION: Adds export definitions and test inputs directory path for the test support library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(tiledb_test_support_lib PRIVATE -Dtiledb_EXPORTS)\n\ntarget_compile_definitions(tiledb_test_support_lib PRIVATE\n  -DTILEDB_TEST_INPUTS_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/../inputs\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating magic.h from Template with Version Information\nDESCRIPTION: Reads magic.h.in template, replaces version placeholder with actual version number, and writes the result to magic.h for compilation.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/ports/libmagic/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nFILE(READ ${LIBMAGIC_SOURCE_DIR}/magic.h.in MAGIC_H_CONTENT)\nSTRING(REPLACE \".\" \"\" FILE_VERSION_WITHOUT_DOT \"${CMAKE_PROJECT_VERSION}\")\nSTRING(REPLACE \"X.YY\" ${FILE_VERSION_WITHOUT_DOT} MAGIC_H_CONTENT_NEW \"${MAGIC_H_CONTENT}\")\nFILE(WRITE ${LIBMAGIC_SOURCE_DIR}/magic.h \"${MAGIC_H_CONTENT_NEW}\")\n```\n\n----------------------------------------\n\nTITLE: Complete Source Proof Outline\nDESCRIPTION: Full proof outline showing while loop with inject, fill, and push operations including state predicates.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) }   */\n     inject: items[0] ← 1\n     /* { state = 00 ∧ items = 10 } ∨ { state = 01 ∧ ( items = 10 ∨ items = 11 ) }   */\n     fill: state[0] ← 1\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) } ∨ */\n     /* { state = 10 ∧ items = 10 } ∨ { state = 11 ∧ ( items = 10 ∨ items = 11 ) }   */\n     push: 〈 await ¬{ state = 11 } :\n              if { state = 10 ∧ items = 10 } → { state = 01 ∧ items = 01 } ⟩\n     /* { state = 00 ∧ items = 00 } ∨ { state = 01 ∧ ( items = 00 ∨ items = 01 ) }   */     \n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Fragment Info Unit Test Build\nDESCRIPTION: Sets up CMake build configuration for fragment info unit tests. Includes unit test module, defines test target with source files, and sets test input directory path definition. Links against fragment info stub library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/c_api/fragment_info/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(unit_test)\n\ncommence(unit_test capi_fragment_info)\n  this_target_sources(unit_capi_fragment_info.cc)\n  this_target_compile_definitions(-DTILEDB_TEST_INPUTS_DIR=\"${CMAKE_SOURCE_DIR}/test/inputs/\")\n  this_target_object_libraries(capi_fragment_info_stub)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Linking Final Dependencies for Test Support Library\nDESCRIPTION: Links the core object libraries and Catch2 testing framework to the test support library.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/test/support/CMakeLists.txt#2025-04-16_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(tiledb_test_support_lib\n  PUBLIC\n    TILEDB_CORE_OBJECTS_ILIB\n    Catch2::Catch2\n)\n```\n\n----------------------------------------\n\nTITLE: Vacuum File Location in Metadata Folder\nDESCRIPTION: Shows the directory structure where a vacuum file can be located in the array or group metadata folder for managing metadata vacuuming.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/vacuum_file.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmy_obj                            # array/group folder\n   |  ...\n   | __meta                       # metadata folder\n         | ...\n         | <timestamped_name>.vac # vacuum file\n         | ...\n```\n\n----------------------------------------\n\nTITLE: Adding Sanitizer Support for C++ API String Unit Test\nDESCRIPTION: Conditionally adds a compiler definition when TileDB sanitizer is enabled. This allows the unit tests to be aware of and properly handle sanitizer-specific behavior.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/cpp_api_support/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(TILEDB_SANITIZER)\n    target_compile_definitions(unit_cppapi_string PRIVATE -DHAVE_SANITIZER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring AST Unit Test Target in CMake\nDESCRIPTION: Sets up the unit test target for AST testing, including source files, dependencies, and compiler configurations. Incorporates the test support library and manages deprecated declaration warnings.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/query/ast/test/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test ast)\n    this_target_object_libraries(query_ast)\n    this_target_sources(main.cc unit-query-ast.cc)\n    target_include_directories(unit_ast PRIVATE \"${TILEDB_CORE_INCLUDE_DIR}\")\n    this_target_link_libraries(ast_test_support_lib)\n    if (NOT MSVC)\n        target_compile_options(unit_ast PRIVATE -Wno-deprecated-declarations)\n    endif()\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Adding experimental API for getting relevant fragments in C\nDESCRIPTION: New C API function to get the number of relevant fragments for a query. This is part of an experimental API.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/HISTORY.md#2025-04-16_snippet_9\n\nLANGUAGE: C\nCODE:\n```\ntiledb_query_get_relevant_fragment_num\n```\n\n----------------------------------------\n\nTITLE: Source State Machine Proof Outline in C\nDESCRIPTION: Summarized proof outline for the Source component, showing state transitions and predicates for inject, fill, and push actions. It demonstrates the behavior of the Source in relation to the Sink.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/state_machine/doc/fsm2.md#2025-04-16_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n   while (not done) {\n     /* { state = 00 ∨ state = 01 } ∧ ( items = 00 ∨ items = 01 ) }   */\n     inject\n     /* { state = 00 ∨ state = 01 } ∧ ( items = 10 ∨ items = 11 ) }   */\n     fill\n     /* { state = 00 ∨ state = 01 ∨ state = 10 ∨ state = 11 } ∧       */\n     /* { items = 00 ∨ items = 01 ∨ items = 10 ∨ state = 11 }         */\n     push\n     /* { state = 00 ∨ state = 01 } ∧ ( items = 00 ∨ items = 01 ) }   */\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring 'misc' Unit Test in CMake for TileDB\nDESCRIPTION: Sets up the 'misc' unit test target with object libraries, link libraries, include directories, and source files. It uses custom CMake functions like 'commence', 'this_target_object_libraries', and 'conclude' for streamlined configuration.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/misc/test/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncommence(unit_test misc)\n    this_target_object_libraries(math)\n    this_target_link_libraries(tiledb_test_support_lib)\n    # change to `this_target_include_directories` when available\n    target_include_directories(unit_misc PRIVATE \"${CMAKE_SOURCE_DIR}\")\n    this_target_sources(\n        main.cc\n        unit_bytevecvalue.cc\n        unit_hilbert.cc\n        unit_integral_type_casts.cc\n        unit_math.cc\n        unit_parse_argument.cc\n    )\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options for OpenSSL MD5 Deprecation in CMake\nDESCRIPTION: Sets compiler-specific options to suppress deprecation warnings for OpenSSL MD5 usage in the crypto_openssl.cc file. Uses different flags for MSVC and other compilers.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  set_source_files_properties(${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/crypto/crypto_openssl.cc PROPERTIES COMPILE_OPTIONS \"/wd4996\")\nelse()\n  set_source_files_properties(${TILEDB_CORE_INCLUDE_DIR}/tiledb/sm/crypto/crypto_openssl.cc PROPERTIES COMPILE_OPTIONS \"-Wno-deprecated-declarations\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting TileDB-C Attribute Functions\nDESCRIPTION: This section covers functions for working with TileDB attributes, including allocation, deallocation, setting properties, and querying attribute information.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/doxygen/source/c-api.rst#2025-04-16_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntiledb_attribute_alloc\ntiledb_attribute_free\ntiledb_attribute_set_nullable\ntiledb_attribute_set_filter_list\ntiledb_attribute_set_cell_val_num\ntiledb_attribute_get_name\ntiledb_attribute_get_type\ntiledb_attribute_get_nullable\ntiledb_attribute_get_filter_list\ntiledb_attribute_get_cell_val_num\ntiledb_attribute_get_cell_size\ntiledb_attribute_dump_str\ntiledb_attribute_set_fill_value\ntiledb_attribute_get_fill_value\ntiledb_attribute_set_fill_value_nullable\ntiledb_attribute_get_fill_value_nullable\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dictionary Encoding in Pseudocode\nDESCRIPTION: This snippet illustrates how the Dictionary Encoding filter compresses string data by creating a unique set of strings (dictionary) and replacing the original data with indices.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/format_spec/filters/dictionary_encoding.md#2025-04-16_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\ninput_data = [\"HG543232\", \"HG543232\", \"HG543232\", \"HG54\", \"HG54\", \"A\", \"HG543232\", \"HG54\"]\n# apply dictionary encoding ->\ndictionary = [\"HG543232\", \"HG54\", \"A\"]\noutput_data = [0, 0, 0, 1, 1, 2, 0, 1]\n```\n\n----------------------------------------\n\nTITLE: Configuring Cap'n Proto Non-Empty Domain Test Target\nDESCRIPTION: Establishes the unit test target for non-empty domain serialization testing. Links with test support library and enables serialization functionality.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/sm/serialization/test/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncommence(unit_test capnp_nonempty_domain)\n  this_target_sources(main.cc unit_capnp_nonempty_domain.cc)\n  this_target_link_libraries(tiledb_test_support_lib)\n\n  # Enable serialization\n  target_compile_definitions(unit_capnp_nonempty_domain PRIVATE -DTILEDB_SERIALIZATION)\nconclude(unit_test)\n```\n\n----------------------------------------\n\nTITLE: SWIG Wrapper Header Include Pattern\nDESCRIPTION: Demonstrates the required pattern for including non-TileDB headers in external header files to ensure correct SWIG wrapper generation. This pattern uses conditional compilation to control header inclusion.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tiledb/api/C_API_STRUCTURE.md#2025-04-16_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifndef TILEDB_CAPI_WRAPPING\n#include <stdint.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: FunctionNode Usage Example in C++\nDESCRIPTION: Example code demonstrating how to create a FunctionNode instance with a function that processes size_t data items.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/experimental/tiledb/common/dag/nodes/doc/api.md#2025-04-16_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nsize_t function(const size_t&);\nFunctionNode b{function};\n```\n\n----------------------------------------\n\nTITLE: Finding Clipp Package in CMake\nDESCRIPTION: Locates the Clipp package, which is required for building the TileDB CLI.\nSOURCE: https://github.com/TileDB-Inc/TileDB/blob/main/tools/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Clipp CONFIG REQUIRED)\n```"
  }
]