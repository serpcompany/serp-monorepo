[
  {
    "owner": "unievo",
    "repo": "mcp.git",
    "content": "TITLE: Using MultiversX API Tools in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to use various MultiversX API tools including set_network, get_accounts, get_account_tokens, get_nfts, and get_transactions. Each example shows proper parameter formatting.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_accounts tool\n{\n  \"name\": \"get_accounts\",\n  \"arguments\": {\n    \"size\": 10,\n    \"fields\": [\"address\", \"balance\", \"nonce\"]\n  }\n}\n\n// Using get_account_tokens tool\n{\n  \"name\": \"get_account_tokens\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"identifier\", \"name\", \"balance\"]\n  }\n}\n\n// Using get_nfts tool\n{\n  \"name\": \"get_nfts\",\n  \"arguments\": {\n    \"collection\": \"MEDAL-ae074f\",\n    \"size\": 10,\n    \"fields\": [\"identifier\", \"name\", \"url\"]\n  }\n}\n\n// Using get_transactions tool\n{\n  \"name\": \"get_transactions\",\n  \"arguments\": {\n    \"sender\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"size\": 10,\n    \"fields\": [\"txHash\", \"sender\", \"receiver\", \"value\", \"status\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NFT API Endpoints Documentation\nDESCRIPTION: API endpoints for querying NFTs across the blockchain. Includes comprehensive functions for retrieving NFT lists and specific NFT details with extensive filtering and customization options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nget_nfts\\nget_nft\n```\n\n----------------------------------------\n\nTITLE: Account NFT API Endpoints Documentation\nDESCRIPTION: API endpoints for retrieving NFTs/SFTs/MetaESDTs owned by an account. Includes functions for getting NFT lists, counts, and specific NFT details with extensive filtering options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nget_account_nfts\\nget_account_nfts_count\\nget_account_nft\n```\n\n----------------------------------------\n\nTITLE: Token API Endpoints Documentation\nDESCRIPTION: API endpoints for retrieving blockchain token information. Provides functions for getting token lists and specific token details with various filtering and sorting capabilities.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\nget_tokens\\nget_token\n```\n\n----------------------------------------\n\nTITLE: Using MCP Tools in TypeScript\nDESCRIPTION: TypeScript examples demonstrating the usage of various MCP tools including set_network, get_collections, get_collection, and get_nft. Each example shows the tool name and its arguments.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_collections tool\n{\n  \"name\": \"get_collections\",\n  \"arguments\": {\n    \"size\": 10,\n    \"fields\": [\"collection\", \"name\", \"type\", \"ticker\"]\n  }\n}\n\n// Using get_collection tool\n{\n  \"name\": \"get_collection\",\n  \"arguments\": {\n    \"collection\": \"MEDAL-ae074f\",\n    \"fields\": [\"all\"]\n  }\n}\n\n// Using get_nft tool\n{\n  \"name\": \"get_nft\",\n  \"arguments\": {\n    \"identifier\": \"MEDAL-ae074f-01\",\n    \"withOwner\": true,\n    \"fields\": [\"all\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction List Retrieval API Parameters\nDESCRIPTION: API endpoint for retrieving a list of blockchain transactions with extensive filtering options including pagination, address filtering, time ranges, and additional data inclusion flags.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nget_transactions\n- from: Number of items to skip for the result set\n- size: Number of items to retrieve\n- sender: Address of the transaction sender\n- receiver: Search by multiple receiver addresses, comma-separated\n- relayer: Search by a relayer address\n- token: Identifier of the token\n- senderShard: Id of the shard the sender address belongs to\n- receiverShard: Id of the shard the receiver address belongs to\n- miniBlockHash: Filter by miniblock hash\n- hashes: Filter by a comma-separated list of transaction hashes\n- status: Filter by transaction status (success/pending/invalid/fail)\n- function: Filter by function name\n- before: Return transactions before given timestamp\n- after: Return transactions after given timestamp\n- order: Sort order (asc/desc)\n- withScResults: Return smart contract results for transactions\n- withOperations: Return operations for transactions\n- withLogs: Return logs for transactions\n- withScamInfo: Returns scam information\n- withUsername: Integrates username in assets for all addresses present in the transactions\n- fields: Array of strings, fields to retrieve. Use \"all\" for all fields\n```\n\n----------------------------------------\n\nTITLE: Using MCP Tools with Function Calling Format\nDESCRIPTION: Example of using various MultiversX API tools with the MCP server in a function calling format. Shows how to set the network, retrieve account details with field filtering, and access collection information.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_account_details tool\n{\n  \"name\": \"get_account_details\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"all\"]\n  }\n}\n\n// Using get_collection tool\n{\n  \"name\": \"get_collection\",\n  \"arguments\": {\n    \"collection\": \"MEDAL-ae074f\",\n    \"fields\": [\"collection\", \"name\", \"type\", \"owner\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Transaction Retrieval API Parameters\nDESCRIPTION: API endpoint for retrieving detailed information about a specific transaction by its hash, with options to include additional transaction-related data.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\nget_transaction\n- txHash: Transaction hash (required)\n- withResults: Include transaction results\n- withOperations: Include transaction operations\n- withLogs: Include transaction logs\n- withScamInfo: Include scam information\n- withUsername: Integrates username in assets for all addresses present in the transaction\n- fields: Array of strings, fields to retrieve. Use \"all\" for all fields\n```\n\n----------------------------------------\n\nTITLE: Using MCP tools with MultiversX API Roles server in TypeScript\nDESCRIPTION: Example TypeScript code demonstrating how to use various tools provided by the MultiversX API Roles MCP server, including setting network, getting account collections with roles, getting account tokens with roles, and getting token with roles.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-roles.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_account_collections_with_roles tool\n{\n  \"name\": \"get_account_collections_with_roles\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"collection\", \"name\", \"type\", \"canCreate\", \"canBurn\"]\n  }\n}\n\n// Using get_account_tokens_with_roles tool\n{\n  \"name\": \"get_account_tokens_with_roles\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"identifier\", \"name\", \"canMint\", \"canBurn\"]\n  }\n}\n\n// Using get_token_with_roles tool\n{\n  \"name\": \"get_token_with_roles\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"identifier\": \"WEGLD-bd4d79\",\n    \"fields\": [\"all\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Submission API Parameters\nDESCRIPTION: API endpoint for submitting a signed transaction to the blockchain, requiring various transaction details for processing.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nsend_transaction\n- Transaction details including chainId, data, gasLimit, gasPrice, nonce, receiver, sender, signature, value, version, etc.\n```\n\n----------------------------------------\n\nTITLE: Account Collection API Endpoints Documentation\nDESCRIPTION: API endpoints for retrieving NFT/SFT/MetaESDT collections associated with an account. Includes functions for getting collection lists, counts, and specific collection details.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nget_account_collections\\nget_account_collections_count\\nget_account_collection\n```\n\n----------------------------------------\n\nTITLE: Collection API Endpoints Documentation\nDESCRIPTION: API endpoints for querying blockchain collections. Provides functionality to retrieve collection lists and specific collection details with various filtering and sorting options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nget_collections\\nget_collection\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Information API Endpoints\nDESCRIPTION: A collection of API endpoints for retrieving various token-related information, including token lists, counts, details, and supply metrics.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_6\n\nLANGUAGE: API\nCODE:\n```\nget_tokens(from, size, type, search, name, identifier, identifiers, sort, order, includeMetaESDT, mexPairType, priceSource, fields)\nget_tokens_count(type, search, name, identifier)\nget_token(identifier, fields)\nget_token_supply(identifier, fields)\n```\n\n----------------------------------------\n\nTITLE: General NFT Tools API Documentation\nDESCRIPTION: Documentation for general NFT management endpoints, including listing NFTs, retrieving NFT details, managing accounts, supply, transactions, and transfers.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nget_nfts\n- Returns a list of Non-Fungible / Semi-Fungible / MetaESDT tokens\n\nget_nft\n- Returns the details of a Non-Fungible / Semi-Fungible / MetaESDT token\n\nget_nft_accounts\n- Returns a list of addresses that hold a specific token\n\nget_nft_supply\n- Returns the supply of a specific token\n\nget_nft_transactions\n- Returns a list of transactions for a token\n\nget_nft_transfers\n- Returns a list of transfers for a token\n\nprocess_nfts\n- Trigger NFT media/metadata reprocessing\n```\n\n----------------------------------------\n\nTITLE: Account Token Operations API Endpoints\nDESCRIPTION: API endpoints for managing and retrieving account-specific token information, including token lists, counts, and details for specific accounts.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_10\n\nLANGUAGE: API\nCODE:\n```\nget_account_tokens(address, from, size, type, subType, search, name, identifier, identifiers, includeMetaESDT, timestamp, mexPairType, fields)\nget_account_tokens_count(address, type, search, name, identifier, identifiers, includeMetaESDT)\nget_account_token(address, token, timestamp, fields)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Transactions in API\nDESCRIPTION: Returns details of all transactions where the account is sender or receiver. Includes various filtering and pagination options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n1. `get_account_transactions`\n   - Description: Returns details of all transactions where the account is sender or receiver\n   - Parameters:\n     - `address`: Account address (required)\n     - `from`: Number of items to skip for the result set\n     - `size`: Number of items to retrieve\n     - `sender`: Address of the transaction sender\n     - `receiver`: Address of the transaction receiver or multiple receivers (comma-separated)\n     - `token`: Identifier of the token\n     - `senderShard`: Id of the shard the sender address is in\n     - `receiverShard`: Id of the shard the receiver address is in\n     - `miniBlockHash`: Filter by miniblock hash\n     - `hashes`: Filter by a comma-separated list of transaction hashes\n     - `status`: Status of the transaction (success/pending/invalid/fail)\n     - `function`: Filter by function name or multiple function names (comma-separated)\n     - `before`: Return transactions before given timestamp\n     - `after`: Return transactions after given timestamp\n     - `round`: Filter by round number\n     - `order`: Sort order (asc/desc)\n     - `withScResults`: Return smart contract results for transactions\n     - `withOperations`: Return operations for transactions\n     - `fields`: Array of strings, fields to retrieve. Use \"all\" for all fields\n     - `withLogs`: Return logs for transactions\n     - `withScamInfo`: Returns scam information\n     - `withUsername`: Integrates username in assets for all addresses present in the transactions\n     - `withBlockInfo`: Returns sender / receiver block details\n     - `senderOrReceiver`: One address that current address interacted with\n     - `isRelayed`: Returns isRelayed transactions details\n     - `isScCall`: Returns sc call transactions details\n     - `withActionTransferValue`: Returns value in USD and EGLD for transferred tokens within the action attribute\n     - `withRelayedScresults`: If set to true, will include smart contract results that resemble relayed transactions\n     - `computeScamInfo`: Compute scam information for transactions\n   - Returns: List of transactions for the specified account\n```\n\n----------------------------------------\n\nTITLE: Listing Token API Endpoints in Markdown\nDESCRIPTION: API endpoints for managing and querying token-related operations, including supply metrics, accounts, transactions, transfers, and logo retrieval.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- `get_tokens`: Get all tokens\n- `get_tokens_count`: Get count of tokens\n- `get_token`: Get details for a specific token\n- `get_token_supply`: Get supply metrics for a token\n- `get_token_accounts`: Get accounts holding a token\n- `get_token_accounts_count`: Get count of accounts holding a token\n- `get_token_transactions`: Get transactions for a token\n- `get_token_transactions_count`: Get count of transactions for a token\n- `get_token_transfers`: Get transfers for a token\n- `get_token_transfers_count`: Get count of transfers for a token\n- `get_token_logo_png`: Get PNG logo for a token\n- `get_token_logo_svg`: Get SVG logo for a token\n```\n\n----------------------------------------\n\nTITLE: Managing Token Accounts API Endpoints\nDESCRIPTION: API endpoints for retrieving information about accounts holding specific tokens, including account lists and counts.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_7\n\nLANGUAGE: API\nCODE:\n```\nget_token_accounts(identifier, from, size, fields)\nget_token_accounts_count(identifier)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transfers in API\nDESCRIPTION: Returns both user-triggered and smart contract-triggered transfers. Includes various filtering and pagination options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n1. `get_transfers`\n   - Description: Returns both transfers triggered by a user account (type = Transaction), as well as transfers triggered by smart contracts (type = SmartContractResult)\n   - Parameters:\n     - `from`: Number of items to skip for the result set\n     - `size`: Number of items to retrieve\n     - `receiver`: Array of strings, search by multiple receiver addresses\n     - `sender`: Array of strings, search by multiple sender addresses\n     - `token`: Identifier of the token\n     - `function`: Array of strings, filter transfers by function name\n     - `senderShard`: Id of the shard the sender address belongs to\n     - `receiverShard`: Id of the shard the receiver address belongs to\n     - `miniBlockHash`: Filter by miniblock hash\n     - `hashes`: Array of strings, filter by transfer hashes\n     - `status`: Status of the transaction (\"success\" | \"pending\" | \"invalid\" | \"fail\")\n     - `before`: Before timestamp\n     - `after`: After timestamp\n     - `round`: Round number\n     - `order`: Sort order (asc/desc)\n     - `fields`: Array of strings, fields to retrieve. Use \"all\" for all fields\n     - `relayer`: Filter by relayer address\n     - `isRelayed`: Returns relayed transactions details\n     - `isScCall`: Returns smart contract calls\n     - `withScamInfo`: Returns scam information\n     - `withUsername`: Integrates username in assets for all addresses present in the transfers\n     - `withBlockInfo`: Returns sender / receiver block details\n   - Returns: List of transfers matching the specified criteria\n```\n\n----------------------------------------\n\nTITLE: Token Transactions and Transfers API Endpoints\nDESCRIPTION: API endpoints for retrieving and managing token transactions and transfers, including filtering and counting operations.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_8\n\nLANGUAGE: API\nCODE:\n```\nget_token_transactions(identifier, from, size, sender, receiver, senderShard, receiverShard, miniBlockHash, hashes, status, function, before, after, order, withScResults, withOperations, withLogs, fields)\nget_token_transactions_count(identifier, sender, receiver, senderShard, receiverShard, miniBlockHash, status, search, function, before, after)\nget_token_transfers(identifier, from, size, sender, receiver, senderShard, receiverShard, miniBlockHash, hashes, status, function, before, after, order, search, withScResults, withLogs, withOperation, withBlockInfo, withUsername, withScamInfo, fields)\nget_token_transfers_count(identifier, sender, receiver, senderShard, receiverShard, miniBlockHash, status, search, function, before, after)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Transfers in API\nDESCRIPTION: Returns both user-triggered and smart contract-triggered transfers for a specific account. Includes various filtering and pagination options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n1. `get_account_transfers`\n   - Description: Returns both transfers triggered by a user account (type = Transaction), as well as transfers triggered by smart contracts (type = SmartContractResult)\n   - Parameters:\n     - `address`: Account address (required)\n     - `from`: Number of items to skip for the result set\n     - `size`: Number of items to retrieve\n     - `sender`: Address of the transfer sender or multiple senders (comma-separated)\n     - `receiver`: Address of the transfer receiver or multiple receivers (comma-separated)\n     - `token`: Identifier of the token\n     - `senderShard`: Id of the shard the sender address belongs to\n     - `receiverShard`: Id of the shard the receiver address belongs to\n     - `miniBlockHash`: Filter by miniblock hash\n     - `hashes`: Filter by a comma-separated list of transfer hashes\n     - `status`: Status of the transaction (success/pending/invalid/fail)\n     - `function`: Filter by function name or multiple function names (comma-separated)\n     - `before`: Return transfers before given timestamp\n     - `after`: Return transfers after given timestamp\n     - `round`: Filter by round number\n     - `order`: Sort order (asc/desc)\n     - `fields`: Array of strings, fields to retrieve. Use \"all\" for all fields\n     - `relayer`: Address of the relayer\n     - `withScamInfo`: Returns scam information\n     - `withUsername`: Integrates username in assets for all addresses present in the transactions\n     - `withBlockInfo`: Returns sender / receiver block details\n     - `senderOrReceiver`: One address that current address interacted with\n   - Returns: List of transfers for the specified account\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Logos API Endpoints\nDESCRIPTION: API endpoints for retrieving token logos in PNG and SVG formats.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_9\n\nLANGUAGE: API\nCODE:\n```\nget_token_logo_png(identifier)\nget_token_logo_svg(identifier)\n```\n\n----------------------------------------\n\nTITLE: Counting Transfers in API\nDESCRIPTION: Returns the total count of user-triggered and smart contract-triggered transfers. Provides various filtering options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n2. `get_transfers_count`\n   - Description: Return total count of transfers triggered by a user account (type = Transaction), as well as transfers triggered by smart contracts (type = SmartContractResult)\n   - Parameters:\n     - `receiver`: Array of strings, search by multiple receiver addresses\n     - `sender`: Array of strings, search by multiple sender addresses\n     - `token`: Identifier of the token\n     - `function`: Array of strings, filter transfers by function name\n     - `senderShard`: Id of the shard the sender address belongs to\n     - `receiverShard`: Id of the shard the receiver address belongs to\n     - `miniBlockHash`: Filter by miniblock hash\n     - `status`: Status of the transaction (\"success\" | \"pending\" | \"invalid\" | \"fail\")\n     - `before`: Before timestamp\n     - `after`: After timestamp\n     - `round`: Round number\n   - Returns: Count of transfers matching the specified criteria\n```\n\n----------------------------------------\n\nTITLE: Account NFT Management API Documentation\nDESCRIPTION: Documentation for API endpoints related to account-specific NFT operations, including retrieving NFTs owned by addresses, counting NFTs, and getting specific NFT details.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nget_account_nfts\n- Returns a list of all available NFTs/SFTs/MetaESDTs owned by the provided address\n\nget_account_nfts_count\n- Returns the total number of NFTs/SFTs/MetaESDTs owned by the provided address\n\nget_account_nft\n- Returns details about a specific NFT/SFT/MetaESDT owned by the provided address\n```\n\n----------------------------------------\n\nTITLE: Counting Account Transfers in API\nDESCRIPTION: Returns the total number of transfers for a given address. Provides various filtering options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n2. `get_account_transfers_count`\n   - Description: Returns total number of transfers for a given address\n   - Parameters:\n     - `address`: Account address (required)\n     - `sender`: Address of the transfer sender\n     - `receiver`: Address of the transfer receiver\n     - `token`: Identifier of the token\n     - `senderShard`: Id of the shard the sender address belongs to\n     - `receiverShard`: Id of the shard the receiver address belongs to\n     - `miniBlockHash`: Filter by miniblock hash\n     - `status`: Status of the transaction (success/pending/invalid/fail)\n     - `function`: Filter by function name\n     - `before`: Return transfers before given timestamp\n     - `after`: Return transfers after given timestamp\n     - `senderOrReceiver`: One address that current address interacted with\n   - Returns: Count of transfers for the specified account\n```\n\n----------------------------------------\n\nTITLE: Example MCP Tool Usage\nDESCRIPTION: TypeScript examples demonstrating how to use various MCP tools including set_network, get_transactions, get_account_transactions, and send_transaction. Shows the JSON structure for each tool call with parameters.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_transactions tool\n{\n  \"name\": \"get_transactions\",\n  \"arguments\": {\n    \"from\": 0,\n    \"size\": 10,\n    \"fields\": [\"txHash\", \"sender\", \"receiver\", \"value\", \"status\"]\n  }\n}\n\n// Using get_account_transactions tool\n{\n  \"name\": \"get_account_transactions\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"from\": 0,\n    \"size\": 10,\n    \"fields\": [\"all\"]\n  }\n}\n\n// Using send_transaction tool\n{\n  \"name\": \"send_transaction\",\n  \"arguments\": {\n    \"chainId\": \"1\",\n    \"data\": \"dGVzdA==\",\n    \"gasLimit\": 70000,\n    \"gasPrice\": 1000000000,\n    \"nonce\": 5,\n    \"receiver\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"sender\": \"erd1spyavw0956vq68xj8y4tenjpq2wd5a9p2c6j8gsz7ztyrnpxrruqzu66jx\",\n    \"signature\": \"ed25519signature\",\n    \"value\": \"0\",\n    \"version\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transaction Data Decoding API Parameters\nDESCRIPTION: API endpoint for decoding the data field of a transaction, requiring the transaction data and optionally the sender and receiver addresses.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\ndecode_transaction\n- data: Transaction data to decode (required)\n- sender: Sender address\n- receiver: Receiver address\n```\n\n----------------------------------------\n\nTITLE: Calling MCP Tools with TypeScript Examples\nDESCRIPTION: Examples of how to call different MCP tools like set_network, get_accounts, and get_account_details with their respective parameters. These demonstrate the typical request format for interacting with the MCP server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-accounts.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_accounts tool\n{\n  \"name\": \"get_accounts\",\n  \"arguments\": {\n    \"size\": 10,\n    \"fields\": [\"address\", \"balance\", \"nonce\"]\n  }\n}\n\n// Using get_account_details tool\n{\n  \"name\": \"get_account_details\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"all\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Tool Usage\nDESCRIPTION: TypeScript examples showing how to use various tools including set_network, get_application, and get_account_deploys with different parameters and field specifications.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-contracts.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_application tool\n{\n  \"name\": \"get_application\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"contract\", \"owner\", \"balance\"]\n  }\n}\n\n// Using get_account_deploys tool\n{\n  \"name\": \"get_account_deploys\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"all\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultiversX API Tools in MCP Client\nDESCRIPTION: TypeScript examples showing how to use the various tools provided by the MultiversX API Tokens MCP server, including network configuration and token retrieval operations.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_tokens tool\n{\n  \"name\": \"get_tokens\",\n  \"arguments\": {\n    \"from\": 0,\n    \"size\": 10,\n    \"type\": \"FungibleESDT\",\n    \"fields\": [\"identifier\", \"name\", \"ticker\", \"price\"]\n  }\n}\n\n// Using get_token tool\n{\n  \"name\": \"get_token\",\n  \"arguments\": {\n    \"identifier\": \"WEGLD-bd4d79\",\n    \"fields\": [\"all\"]\n  }\n}\n\n// Using get_account_tokens tool\n{\n  \"name\": \"get_account_tokens\",\n  \"arguments\": {\n    \"address\": \"erd1qqqqqqqqqqqqqpgqd77fnev2sthnczp2lnfx0y5jdycynjfhzzgq6p3rax\",\n    \"fields\": [\"identifier\", \"name\", \"balance\", \"valueUsd\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Account Transactions in API\nDESCRIPTION: Returns the total number of transactions for a given address where the account is sender or receiver. Provides various filtering options.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n2. `get_account_transactions_count`\n   - Description: Returns total number of transactions for a given address where the account is sender or receiver\n   - Parameters:\n     - `address`: Account address (required)\n     - `sender`: Address of the transaction sender\n     - `receiver`: Address of the transaction receiver or multiple receivers (comma-separated)\n     - `token`: Identifier of the token\n     - `senderShard`: Id of the shard the sender address is in\n     - `receiverShard`: Id of the shard the receiver address is in\n     - `miniBlockHash`: Filter by miniblock hash\n     - `hashes`: Filter by a comma-separated list of transaction hashes\n     - `status`: Status of the transaction (success/pending/invalid/fail)\n     - `function`: Filter by function name or multiple function names (comma-separated)\n     - `before`: Return transactions before given timestamp\n     - `after`: Return transactions after given timestamp\n     - `round`: Filter by round number\n     - `senderOrReceiver`: One address that current address interacted with\n     - `isRelayed`: Returns isRelayed transactions details\n     - `isScCall`: Returns sc call transactions details\n     - `withRelayedScresults`: If set to true, will include smart contract results that resemble relayed transactions\n   - Returns: Count of transactions for the specified account\n```\n\n----------------------------------------\n\nTITLE: Example Tool Usage in MCP Client\nDESCRIPTION: TypeScript examples demonstrating how to use the MultiversX API Network MCP server tools. Shows usage of set_network and get_network_stats tools.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-network.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Using set_network tool\n{\n  \"name\": \"set_network\",\n  \"arguments\": {\n    \"network\": \"mainnet\"\n  }\n}\n\n// Using get_network_stats tool\n{\n  \"name\": \"get_network_stats\",\n  \"arguments\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Transfer API Endpoints in Markdown\nDESCRIPTION: API endpoints for querying transfer operations on the blockchain.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- `get_transfers`: Get all transfers\n- `get_transfers_count`: Get count of transfers\n```\n\n----------------------------------------\n\nTITLE: Listing Transaction API Endpoints in Markdown\nDESCRIPTION: API endpoints for managing blockchain transactions, including retrieval, sending, and decoding operations.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- `get_transactions`: Get all transactions\n- `get_transactions_count`: Get count of transactions\n- `get_transaction`: Get details for a specific transaction\n- `send_transaction`: Send a transaction to the blockchain\n- `decode_transaction`: Decode a transaction\n```\n\n----------------------------------------\n\nTITLE: Listing Validator Identity API Endpoints in Markdown\nDESCRIPTION: API endpoints for managing validator identities, including retrieval of identity details and avatars.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- `get_identities`: Get all validator identities\n- `get_identity`: Get details for a specific validator identity\n- `get_identity_avatar`: Get avatar for a validator identity\n```\n\n----------------------------------------\n\nTITLE: Listing Smart Contract API Endpoints in Markdown\nDESCRIPTION: API endpoints for interacting with smart contracts, including retrieving applications and their details.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- `get_applications`: Get all applications (smart contracts)\n- `get_applications_count`: Get count of applications (smart contracts)\n- `get_application`: Get details for a specific application (smart contract)\n```\n\n----------------------------------------\n\nTITLE: Listing MultiversX API MCP Servers in Markdown\nDESCRIPTION: This code snippet lists the different specialized MCP servers for the MultiversX API, each focusing on a specific domain of the blockchain. It includes links to respective README files for each server type.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Accounts](servers/mx-api/README-accounts.md) : Focus on account-related operations\n- [Collections](servers/mx-api/README-collections.md) : Focus on NFT/SFT collections\n- [Contracts](servers/mx-api/README-contracts.md) : Focus on smart contracts\n- [Network](servers/mx-api/README-network.md) : Focus on network-related information\n- [Tokens](servers/mx-api/README-tokens.md) : Focus on fungible tokens\n- [Transactions](servers/mx-api/README-transactions.md) : Focus on blockchain transactions and transfers\n- [Roles](servers/mx-api/README-roles.md) : Focus on account roles for collections and tokens\n```\n\n----------------------------------------\n\nTITLE: Describing Index and Essentials MCP Servers in Markdown\nDESCRIPTION: This snippet introduces the Index MCP server, which contains all tools from specialized servers, and the Essentials MCP server, which provides a reduced version with essential tools across multiple domains.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Index](servers/mx-api/README-index.md) : Includes all tools\n\n- [Essentials](servers/mx-api/README-essentials.md) : Includes essential tools across multiple domains\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX in JSON Configuration\nDESCRIPTION: JSON configuration for setting up the MultiversX API Accounts MCP server using NPX. This approach automatically uses the latest version of the package and allows setting environment variables like DEFAULT_NETWORK.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-accounts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-accounts\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-accounts\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX in JSON Configuration\nDESCRIPTION: JSON configuration for setting up the MultiversX API Essentials MCP server using NPX. This method automatically uses the latest version from the published NPM package.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-essentials\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-essentials\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX in JSON\nDESCRIPTION: JSON configuration for using the MCP server remotely with NPX. It specifies the command, arguments, and environment variables for the mx-api-collections server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-collections\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-collections\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Local Node Installation in JSON\nDESCRIPTION: JSON configuration for setting up the MultiversX API Essentials MCP server using a local Node.js installation. This requires specifying the full path to the built server file.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-essentials\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-essentials.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Node Server Configuration\nDESCRIPTION: JSON configuration for setting up the MCP server using local Node installation, including path configuration and network environment variable.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-contracts.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-contracts\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-contracts.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX\nDESCRIPTION: JSON configuration for setting up the MultiversX API Tokens MCP server using NPX. Includes environment variable configuration for setting the default network.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-tokens\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-tokens\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX in JSON configuration\nDESCRIPTION: JSON configuration for setting up the MultiversX API Roles MCP server using NPX. This allows automatic updates to the latest version, with an option to set the default network through environment variables.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-roles.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-roles\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-roles\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Local Node Installation\nDESCRIPTION: JSON configuration for setting up the MultiversX API Tokens MCP server using a local Node installation.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-tokens\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-tokens.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX\nDESCRIPTION: JSON configuration for setting up the MCP server using NPX, which automatically uses the latest version from the NPM package. Includes environment variable configuration for setting the default network.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-transactions\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-transactions\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server using NPX with Environment Variables\nDESCRIPTION: JSON configuration example for setting up a MultiversX API MCP server (specifically the network server) using NPX. This configuration includes environment variable settings for the default network.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-network\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-network\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX\nDESCRIPTION: JSON configuration for setting up the MultiversX API Network MCP server using NPX. This approach automatically uses the latest version of the package and allows setting the default network via environment variables.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-network.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-network\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-network\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Using Local Node.js Installation\nDESCRIPTION: JSON configuration example for setting up a MultiversX API MCP server using a local Node.js installation with path to the built server and environment variables.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-network\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-network.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Node for Local Installation\nDESCRIPTION: JSON configuration for setting up the MultiversX API Index MCP server using a local Node.js installation. This configuration requires specifying the full path to the built server JavaScript file.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-index\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-index.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with NPX for Remote Access\nDESCRIPTION: JSON configuration for setting up the MultiversX API Index MCP server using NPX. This approach automatically uses the latest version of the package and allows setting the default network through environment variables.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-index\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-index\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote NPX Server Setup\nDESCRIPTION: JSON configuration for setting up the MCP server using NPX with the published NPM package, including network environment variable configuration.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-contracts.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-contracts\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@unievo/mcp-mx-api-contracts\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Node in JSON Configuration\nDESCRIPTION: JSON configuration for setting up the MultiversX API Accounts MCP server using a local Node.js installation. This allows pointing to a specific local build of the server with custom environment variables.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-accounts.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-accounts\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-accounts.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Local Installation in JSON\nDESCRIPTION: JSON configuration for using the MCP server with local installation. It specifies the command, arguments, and environment variables for the mx-api-collections server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-collections\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-collections.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Local Node Installation\nDESCRIPTION: JSON configuration for setting up the MultiversX API Network MCP server using a local Node.js installation.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-network.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-network\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-network.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Node in JSON configuration\nDESCRIPTION: JSON configuration for setting up the MultiversX API Roles MCP server using local Node installation. This requires specifying the full path to the built JavaScript file and allows setting the default network.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-roles.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-roles\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-roles.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Local Node Installation\nDESCRIPTION: JSON configuration for setting up the MCP server using a local Node.js installation. Requires specifying the full path to the built JavaScript file and environment variables.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"mx-api-transactions\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{full/path/to/mcp/server}/build/mx-api-transactions.js\"\n      ],\n      \"env\": {\n        \"DEFAULT_NETWORK\": \"devnet\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server\nDESCRIPTION: Bash command for building the MultiversX API MCP server from source code.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Local Installation Commands\nDESCRIPTION: Series of bash commands for cloning the repository, installing dependencies, and building the server locally.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-contracts.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server with NPM\nDESCRIPTION: Command to build the MultiversX API Accounts MCP server from source using NPM. This compiles the source code into executable JavaScript.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-accounts.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building the MCP server\nDESCRIPTION: Bash command to build the MultiversX API Roles MCP server after installing dependencies, which compiles the TypeScript code into JavaScript.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-roles.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP Server Repository with Git\nDESCRIPTION: Bash command to clone the MCP server repository from GitHub. This is the first step when installing the server locally.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server\nDESCRIPTION: Bash command for building the MultiversX API Tokens MCP server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP Server Repository\nDESCRIPTION: Bash command to clone the MultiversX MCP server repository from GitHub to your local machine.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server\nDESCRIPTION: Bash command to build the MultiversX API Network MCP server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-network.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP Server Repository\nDESCRIPTION: Bash command to clone the MultiversX MCP server repository from GitHub.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP Server Repository\nDESCRIPTION: Bash command for cloning the MultiversX API MCP server repository from GitHub to a local environment.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Dependencies with NPM\nDESCRIPTION: Bash commands to navigate to the server directory and install the required dependencies using NPM.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP Server Repository with Bash\nDESCRIPTION: Command to clone the MCP server repository from GitHub for local installation. This is the first step for setting up a local development environment.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-accounts.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Dependencies\nDESCRIPTION: Bash commands to navigate to the server directory and install the required NPM dependencies.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning MCP Server Repository in Bash\nDESCRIPTION: Bash command to clone the MCP server repository from GitHub.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Dependencies\nDESCRIPTION: Bash commands to navigate to the server directory and install the required dependencies.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-network.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning MCP Server Repository\nDESCRIPTION: Bash command for cloning the MultiversX MCP server repository from GitHub.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MCP Server in Bash\nDESCRIPTION: Bash commands to navigate to the server directory and install dependencies using npm.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP server repository with Git\nDESCRIPTION: Bash command to clone the MultiversX API Roles MCP server repository from GitHub. This is the first step for local installation of the server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-roles.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the MCP Server Repository\nDESCRIPTION: Bash command to clone the MultiversX MCP server repository from GitHub.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-network.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/unievo/mcp.git\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Dependencies\nDESCRIPTION: Bash commands to navigate to the server directory and install the necessary dependencies for the MultiversX API server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for MCP server\nDESCRIPTION: Bash commands to navigate to the server directory and install the required dependencies for the MultiversX API Roles MCP server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-roles.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Dependencies\nDESCRIPTION: Bash commands for navigating to the server directory and installing the required dependencies.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server Dependencies\nDESCRIPTION: Bash commands for navigating to the server directory and installing the required npm dependencies for the MultiversX API MCP server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MCP Server with NPM\nDESCRIPTION: Commands to navigate to the server directory and install the required dependencies using NPM. This prepares the environment for building the server.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-accounts.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mx-api/\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server with NPM\nDESCRIPTION: Bash command to build the MCP server from source code using NPM.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-essentials.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server\nDESCRIPTION: Bash command to build the MultiversX API server from source code.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building MCP Server in Bash\nDESCRIPTION: Bash command to build the MCP server using npm run build.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-collections.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building the MCP Server\nDESCRIPTION: Bash command to build the MultiversX MCP server from source code.\nSOURCE: https://github.com/unievo/mcp.git/blob/main/servers/mx-api/README-transactions.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```"
  }
]