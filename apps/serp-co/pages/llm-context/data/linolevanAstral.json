[
  {
    "owner": "lino-levan",
    "repo": "astral",
    "content": "TITLE: Implementing Browser Evaluation with Astral\nDESCRIPTION: Demonstrates how to launch a browser, open a page, and evaluate JavaScript code in the browser context. Shows both basic evaluation and evaluation with arguments passed to the function.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/evaluate.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch the browser\nconst browser = await launch();\n\n// Open a new page\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Run code in the context of the browser\nconst value = await page.evaluate(() => {\n  return document.body.innerHTML;\n});\nconsole.log(value);\n\n// Run code with args\nconst result = await page.evaluate((x, y) => {\n  return `The result of adding ${x}+${y} = ${x + y}`;\n}, {\n  args: [10, 15],\n});\nconsole.log(result);\n\n// Close the browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots with Astral in TypeScript\nDESCRIPTION: Demonstrates how to launch a browser, open a page, and take a screenshot using Astral. Shows basic browser control operations including launching, navigating, and closing.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch the browser\nconst browser = await launch();\n\n// Open a new page\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Take a screenshot of the page and save that to disk\nconst screenshot = await page.screenshot();\nDeno.writeFileSync(\"screenshot.png\", screenshot);\n\n// Close the browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Screenshot Functionality with Astral\nDESCRIPTION: TypeScript code demonstrating how to launch a browser, navigate to a page, take a screenshot, and save it to disk using Astral. Shows the complete workflow from browser initialization to cleanup.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/screenshot.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch the browser\nconst browser = await launch();\n\n// Open a new page\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Take a screenshot of the page and save that to disk\nconst screenshot = await page.screenshot();\nDeno.writeFileSync(\"screenshot.png\", screenshot);\n\n// Close the browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Page Navigation and Interaction with Astral\nDESCRIPTION: Demonstrates complex page navigation and interaction including clicking buttons, typing text, and waiting for network events.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch browser in headfull mode\nconst browser = await launch({ headless: false });\n\n// Open the webpage\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Click the search button\nconst button = await page.$(\"button\");\nawait button!.click();\n\n// Type in the search input\nconst input = await page.$(\"#search-input\");\nawait input!.type(\"pyro\", { delay: 1000 });\n\n// Wait for the search results to come back\nawait page.waitForNetworkIdle({ idleConnections: 0, idleTime: 1000 });\n\n// Click the 'pyro' link\nconst xLink = await page.$(\"a.justify-between:nth-child(1)\");\nawait Promise.all([\n  page.waitForNavigation(),\n  xLink!.click(),\n]);\n\n// Click the link to 'pyro.deno.dev'\nconst dLink = await page.$(\n  \".markdown-body > p:nth-child(8) > a:nth-child(1)\",\n);\nawait Promise.all([\n  page.waitForNavigation(),\n  dLink!.click(),\n]);\n\n// Close browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Web Navigation with Astral\nDESCRIPTION: TypeScript code demonstrating automated web navigation including browser launch, clicking elements, typing text, waiting for network events, and handling page navigation. Shows interaction with search functionality and following links on deno.land.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/navigation.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch browser in headfull mode\nconst browser = await launch({ headless: false });\n\n// Open the webpage\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Click the search button\nconst button = await page.$(\"button\");\nawait button!.click();\n\n// Type in the search input\nconst input = await page.$(\"#search-input\");\nawait input!.type(\"pyro\", { delay: 1000 });\n\n// Wait for the search results to come back\nawait page.waitForNetworkIdle({ idleConnections: 0, idleTime: 1000 });\n\n// Click the 'pyro' link\nconst xLink = await page.$(\"a.justify-between:nth-child(1)\");\nawait Promise.all([\n  page.waitForNavigation(),\n  xLink!.click(),\n]);\n\n// Click the link to 'pyro.deno.dev'\nconst dLink = await page.$(\n  \".markdown-body > p:nth-child(8) > a:nth-child(1)\",\n);\nawait Promise.all([\n  page.waitForNavigation(),\n  dLink!.click(),\n]);\n\n// Close browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sandbox Permissions for Network and File Requests in Astral\nDESCRIPTION: This code snippet demonstrates how to use Deno permissions to sandbox pages in Astral. It shows how to check for network and file permissions before opening new pages, and how to handle permission-related errors. The code uses the Astral library to launch a browser and create new pages with sandbox mode enabled.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/advanced/sandbox.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\nimport { fromFileUrl } from \"@std/path/from-file-url\";\n\n// Launch browser\nconst browser = await launch();\n\n// Open the page if permission granted, or throws Deno.errors.PermissionDenied\n{\n  const { state } = await Deno.permissions.query({\n    name: \"net\",\n    path: \"example.com\",\n  });\n  await browser.newPage(\"https://example.com\", { sandbox: true });\n}\n\n// Open the page if permission granted, or throws Deno.errors.PermissionDenied\n{\n  const { state } = await Deno.permissions.query({\n    name: \"read\",\n    path: fromFileUrl(import.meta.url),\n  });\n  await browser.newPage(fromFileUrl(import.meta.url), { sandbox: true });\n}\n\n// Close browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Attributes with Astral in TypeScript\nDESCRIPTION: This code demonstrates how to use Astral to launch a browser, navigate to a webpage, select an element, and retrieve its attributes. It shows how to get all attributes of an element and how to get a specific attribute.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/attributes.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch the browser\nconst browser = await launch();\n\n// Open a new page\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Take an element\nconst element = await page.$(\"img\");\n\n// Take attributes from an element\nconst attributes = await element.getAttributes();\n\nconsole.log(attributes);\n/*\n{\n  class: \"max-w-[28rem] hidden lg:block\",\n  src: \"/runtime/deno-looking-up.svg?__frsh_c=6f92b045bc7486e03053e1977adceb7e4aa071f4\",\n  alt: \"\",\n  width: \"670\",\n  height: \"503\"\n}\n*/\n\n// Take only one attribute from an element\nconst src = await element.getAttribute(\"src\");\n\nconsole.log(src);\n/*\n  \"/runtime/deno-looking-up.svg?__frsh_c=6f92b045bc7486e03053e1977adceb7e4aa071f4\"\n*/\n\n// Close the browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Evaluating Browser Code with Astral\nDESCRIPTION: Shows how to execute JavaScript code in the browser context using Astral's evaluate function. Includes examples of running code with and without arguments.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch the browser\nconst browser = await launch();\n\n// Open a new page\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Run code in the context of the browser\nconst value = await page.evaluate(() => {\n  return document.body.innerHTML;\n});\nconsole.log(value);\n\n// Run code with args\nconst result = await page.evaluate((x, y) => {\n  return `The result of adding ${x}+${y} = ${x + y}`;\n}, {\n  args: [10, 15],\n});\nconsole.log(result);\n\n// Close the browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Reusing a Browser Instance in Astral with TypeScript\nDESCRIPTION: This snippet shows how to reuse an existing browser instance by connecting to its WebSocket endpoint. This technique is particularly useful for unit testing, allowing setup of a shared browser instance while properly managing resources.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/advanced/connect.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Spawn a browser process\nconst browser = await launch();\n\n// Connect to first browser instead\nconst anotherBrowser = await launch({ wsEndpoint: browser.wsEndpoint() });\n```\n\n----------------------------------------\n\nTITLE: Initializing Astral Browser Screenshot Example in TypeScript\nDESCRIPTION: Demonstrates basic usage of Astral to launch a browser, navigate to a page, and take a screenshot. Shows core functionality including browser launch, page navigation, and screenshot capture.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/index.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Launch the browser\nconst browser = await launch();\n\n// Open a new page\nconst page = await browser.newPage(\"https://deno.land\");\n\n// Take a screenshot of the page and save that to disk\nconst screenshot = await page.screenshot();\nDeno.writeFileSync(\"screenshot.png\", screenshot);\n\n// Close the browser\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Browser Reuse Connection in Astral\nDESCRIPTION: Demonstrates how to reuse an existing browser instance by connecting to its WebSocket endpoint.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Spawn a browser process\nconst browser = await launch();\n\n// Connect to first browser instead\nconst anotherBrowser = await connect({ wsEndpoint: browser.wsEndpoint() });\n```\n\n----------------------------------------\n\nTITLE: Remote Browser Connection in Astral\nDESCRIPTION: Shows how to connect to remote browser instances and existing browser processes using Astral's connect function.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { connect } from \"jsr:@astral/astral\";\n\n// Connect to remote endpoint\nconst browser = await connect({\n  wsEndpoint: \"wss://remote-browser-endpoint.example.com\",\n});\n\n// Do stuff\nconst page = await browser.newPage(\"http://example.com\");\nconsole.log(await page.evaluate(() => document.title));\n\n// Close connection\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote Browser Endpoint with Astral in TypeScript\nDESCRIPTION: This snippet demonstrates how to connect to an existing remote browser endpoint rather than spawning a new process. It shows importing Astral, connecting to a remote WebSocket endpoint, creating a page, executing a script, and properly closing the connection.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/advanced/connect.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { launch } from \"jsr:@astral/astral\";\n\n// Connect to remote endpoint\nconst browser = await launch({\n  wsEndpoint: \"wss://remote-browser-endpoint.example.com\",\n});\n\n// Do stuff\nconst page = await browser.newPage(\"http://example.com\");\nconsole.log(await page.evaluate(() => document.title));\n\n// Close connection\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Custom Browser Connection in Astral\nDESCRIPTION: Demonstrates how to connect to a custom browser instance using its WebSocket endpoint.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Import Astral\nimport { connect } from \"jsr:@astral/astral\";\n\n// Connect to remote endpoint\nconst browser = await connect({\n  wsEndpoint: \"<WS-ENDPOINT>\",\n  headless: false,\n});\n\nconsole.log(browser.wsEndpoint());\n\n// Do stuff\nconst page = await browser.newPage(\"http://example.com\");\nconsole.log(await page.evaluate(() => document.title));\n\n// Close connection\nawait browser.close();\n```\n\n----------------------------------------\n\nTITLE: Page Authentication in Astral\nDESCRIPTION: Shows how to handle HTTP authentication in Astral using the authenticate method.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Open a new page\nconst page = await browser.newPage();\n\n// Provide credentials for HTTP authentication.\nconst url = \"https://postman-echo.com/basic-auth\";\nawait page.authenticate({ username: \"postman\", password: \"password\" });\nawait page.goto(url, { waitUntil: \"networkidle2\" });\n```\n\n----------------------------------------\n\nTITLE: Chromium Launch Configuration\nDESCRIPTION: Shows the necessary command-line flags for launching a chromium-like binary for use with Astral.\nSOURCE: https://github.com/lino-levan/astral/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nchromium --remote-debugging-port=1337 \\\n--headless=new \\\n--no-first-run \\\n--password-store=basic \\\n--use-mock-keychain \\\n--hide-scrollbars\n```\n\n----------------------------------------\n\nTITLE: Running Astral Evaluate Example\nDESCRIPTION: Command to run the evaluate example using Deno.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/evaluate.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A https://deno.land/x/astral/examples/evaluate.ts\n```\n\n----------------------------------------\n\nTITLE: Running Astral Screenshot Example\nDESCRIPTION: Command to execute the screenshot example script using Deno with all permissions.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/screenshot.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A https://deno.land/x/astral/examples/screenshot.ts\n```\n\n----------------------------------------\n\nTITLE: Running Astral Navigation Example\nDESCRIPTION: Command to execute the navigation example script using Deno.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/guides/navigation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A https://deno.land/x/astral/examples/navigation.ts\n```\n\n----------------------------------------\n\nTITLE: Running Astral Example via Command Line\nDESCRIPTION: Shows how to execute the Astral screenshot example script using Deno's CLI with all permissions enabled.\nSOURCE: https://github.com/lino-levan/astral/blob/main/docs/pages/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A https://deno.land/x/astral/examples/screenshot.ts\n```"
  }
]