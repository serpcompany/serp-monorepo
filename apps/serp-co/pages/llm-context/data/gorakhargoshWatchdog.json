[
  {
    "owner": "gorakhargosh",
    "repo": "watchdog",
    "content": "TITLE: Implementing File System Monitoring with Watchdog in Python\nDESCRIPTION: This code snippet demonstrates how to set up a file system monitor using Watchdog. It creates an Observer, implements a custom event handler, and starts monitoring the current directory recursively for any file system changes.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/quickstart.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom watchdog.events import FileSystemEvent, FileSystemEventHandler\nfrom watchdog.observers import Observer\n\n\nclass MyEventHandler(FileSystemEventHandler):\n    def on_any_event(self, event: FileSystemEvent) -> None:\n        print(event)\n\n\nevent_handler = MyEventHandler()\nobserver = Observer()\nobserver.schedule(event_handler, \".\", recursive=True)\nobserver.start()\ntry:\n    while True:\n        time.sleep(1)\nfinally:\n    observer.stop()\n    observer.join()\n```\n\n----------------------------------------\n\nTITLE: Monitoring File System Events with Watchdog in Python\nDESCRIPTION: A simple program that uses Watchdog to monitor directories and log events. It creates a custom event handler that prints any file system event, sets up an Observer to monitor the current directory recursively, and runs indefinitely until interrupted.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nfrom watchdog.events import FileSystemEvent, FileSystemEventHandler\nfrom watchdog.observers import Observer\n\n\nclass MyEventHandler(FileSystemEventHandler):\n    def on_any_event(self, event: FileSystemEvent) -> None:\n        print(event)\n\n\nevent_handler = MyEventHandler()\nobserver = Observer()\nobserver.schedule(event_handler, \".\", recursive=True)\nobserver.start()\ntry:\n    while True:\n        time.sleep(1)\nfinally:\n    observer.stop()\n    observer.join()\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with watchmedo in Response to Events\nDESCRIPTION: Example of using the watchmedo shell-command to execute shell commands when file events occur. This monitors Python and text files recursively and echoes the path of any file that changes.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwatchmedo shell-command \\\n    --patterns='*.py;*.txt' \\\n    --recursive \\\n    --command='echo \"${watch_src_path}\"' \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Using PollingObserver for CIFS File Systems\nDESCRIPTION: Example of how to explicitly use PollingObserver for monitoring changes in CIFS file systems, where the standard observers might not work correctly.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom watchdog.observers.polling import PollingObserver as Observer\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog with pip\nDESCRIPTION: Command to install or update the Watchdog package using pip. This is the recommended installation method for Python 3.9 and above.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -U watchdog\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog from PyPI Using pip\nDESCRIPTION: Commands to install the Watchdog package from PyPI using pip. Includes two options: a basic installation of the library only, and an installation that includes the watchmedo utility.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -U watchdog\n\n# or to install the watchmedo utility:\n$ python -m pip install -U 'watchdog[watchmedo]'\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog from Source\nDESCRIPTION: Commands to install the Watchdog package from source code. Includes two options: a basic installation of the library only, and an installation that includes the watchmedo utility.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -e .\n\n# or to install the watchmedo utility:\n$ python -m pip install -e '.[watchmedo]'\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog from PyPI using pip\nDESCRIPTION: Commands for installing the Watchdog package and its watchmedo utility from PyPI using pip. This is the simplest installation method for most users.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/installation.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pip install -U |project_name|\n\n# or to install the watchmedo utility:\n$ python -m pip install -U '|project_name|\\[watchmedo]'\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog from source tarballs\nDESCRIPTION: Commands for downloading, extracting, and installing Watchdog from source tarballs. This method allows installing from a specific version archive.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/installation.rst#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wget -c https://pypi.python.org/packages/source/w/watchdog/watchdog-|project_version|.tar.gz\n$ tar zxvf |project_name|-|project_version|.tar.gz\n$ cd |project_name|-|project_version|\n$ python -m pip install -e .\n\n# or to install the watchmedo utility:\n$ python -m pip install -e '.[watchmedo]'\n```\n\n----------------------------------------\n\nTITLE: Installing Watchdog from the code repository\nDESCRIPTION: Commands for cloning the Watchdog repository from GitHub and installing it in development mode. This method provides the latest development version with all features.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/installation.rst#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive git://github.com/gorakhargosh/watchdog.git\n$ cd watchdog\n$ python -m pip install -e .\n\n# or to install the watchmedo utility:\n$ python -m pip install -e '.[watchmedo]'\n```\n\n----------------------------------------\n\nTITLE: Using watchmedo for File Monitoring in Bash\nDESCRIPTION: Example of using the watchmedo utility to log file system events. This command monitors the current directory recursively for changes to Python and text files while ignoring directory events, with verbose output.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwatchmedo log \\\n    --patterns='*.py;*.txt' \\\n    --ignore-directories \\\n    --recursive \\\n    --verbose \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Getting Help with watchmedo Commands\nDESCRIPTION: Shows how to access the help information for watchmedo commands to learn more about their usage options and parameters.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwatchmedo [command] --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Watchdog Tricks in YAML\nDESCRIPTION: An example tricks.yaml configuration file for watchmedo. It defines two tricks: a LoggerTrick for Python and JavaScript files, and a GoogleClosureTrick for JavaScript files with detailed compilation settings.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/README.rst#2025-04-19_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntricks:\n- watchdog.tricks.LoggerTrick:\n    patterns: [\"*.py\", \"*.js\"]\n- watchmedo_webtricks.GoogleClosureTrick:\n    patterns: ['*.js']\n    hash_names: true\n    mappings_format: json                  # json|yaml|python\n    mappings_module: app/javascript_mappings\n    suffix: .min.js\n    compilation_level: advanced            # simple|advanced\n    source_directory: app/static/js/\n    destination_directory: app/public/js/\n    files:\n      index-page:\n      - app/static/js/vendor/jquery*.js\n      - app/static/js/base.js\n      - app/static/js/index-page.js\n      about-page:\n      - app/static/js/vendor/jquery*.js\n      - app/static/js/base.js\n      - app/static/js/about-page/**/*.js\n```\n\n----------------------------------------\n\nTITLE: Proper Typing for Watchdog Observer in Python\nDESCRIPTION: This code snippet illustrates the correct way to use type annotations with Watchdog's Observer. It shows how to import and use the BaseObserver type for proper type checking, as Observer is not actually a class but a variable holding the best available observer class.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/quickstart.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom watchdog.observers import Observer\nfrom watchdog.observers.api import BaseObserver\n\n\ndef my_func(obs: BaseObserver) -> None:\n    # Do something with obs\n    pass\n\nobserver: BaseObserver = Observer()\nmy_func(observer)\n```\n\n----------------------------------------\n\nTITLE: Increasing Linux inotify watch limit\nDESCRIPTION: Configuration to modify the Linux system's inotify watch limit by editing /etc/sysctl.conf. This increases the number of directories Watchdog can monitor simultaneously.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/installation.rst#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfs.inotify.max_user_watches=16384\n```\n\n----------------------------------------\n\nTITLE: Setting file descriptor limit for BSD variants\nDESCRIPTION: Command to increase the maximum number of open file descriptors for BSD systems. This is required for Watchdog to properly monitor files using kqueue.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/installation.rst#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nulimit -n 1024\n```\n\n----------------------------------------\n\nTITLE: Setting up Linux Development Environment for Watchdog\nDESCRIPTION: Commands to clone the Watchdog repository, create a virtual environment, and install dependencies on Linux systems.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/hacking.rst#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/gorakhargosh/watchdog.git\n$ cd watchdog\n$ python -m venv venv\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ . venv/bin/activate\n(venv)$ python -m pip instal -e '.'\n```\n\n----------------------------------------\n\nTITLE: Setting up Windows Development Environment for Watchdog\nDESCRIPTION: Commands to activate virtual environment and install dependencies on Windows systems.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/hacking.rst#2025-04-19_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n> venv\\Scripts\\activate\n(venv)> python -m pip instal -e '.'\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Watchdog Project\nDESCRIPTION: This snippet specifies the required Python packages and their versions for the Watchdog project. It includes conditional dependencies based on Python versions and covers testing, documentation, and code quality tools.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/requirements-tests.txt#2025-04-19_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\neventlet==0.37.0; python_version < \"3.13\"\nflaky==3.8.1\npytest==8.3.3\npytest-cov==6.0.0\npytest-timeout==2.3.1\nruff==0.7.1\nsphinx==7.4.7; python_version <= \"3.9\"\nsphinx==8.1.3; python_version > \"3.9\"\nmypy==1.13.0\ntypes-PyYAML==6.0.12.20240917\n```\n\n----------------------------------------\n\nTITLE: Adjusting Observer.schedule() Type Annotation in Python\nDESCRIPTION: Modifies the type annotation for the 'path' parameter in Observer.schedule() to reflect support for pathlib.Path.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nObserver.schedule()\n```\n\n----------------------------------------\n\nTITLE: Using select.poll() Instead of select.select() in Python\nDESCRIPTION: Replaces the deprecated select.select() with select.poll() in the inotify module, if available.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nselect.poll()\n```\n\nLANGUAGE: python\nCODE:\n```\nselect.select()\n```\n\n----------------------------------------\n\nTITLE: Updating AutoRestartTrick Class in Python\nDESCRIPTION: Modifies the AutoRestartTrick class to accept either signal.Signals or int for the stop_signal keyword argument.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAutoRestartTrick(stop_signal=signal.SIGINT)\n```\n\n----------------------------------------\n\nTITLE: Adding __repr__() Method to Trick Class in Python\nDESCRIPTION: Implements the __repr__() method for the Trick class to provide a string representation of the object.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Trick:\n    def __repr__(self):\n        return f\"<{self.__class__.__name__}>\"\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Functions from echo Module in Python\nDESCRIPTION: Removes several unused functions from the echo module to clean up the codebase.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Removed functions:\n# echo_class()\n# echo_instancemethod()\n# echo_module()\n# is_class_private_name()\n# is_classmethod()\n# ic_method(met()\n# method_name()\n# name()\n```\n\n----------------------------------------\n\nTITLE: Adding __repr__() Method to HelpFormatter Class in Python\nDESCRIPTION: Implements the __repr__() method for the HelpFormatter class in the watchmedo module.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass HelpFormatter:\n    def __repr__(self):\n        return f\"<{self.__class__.__name__}>\"\n```\n\n----------------------------------------\n\nTITLE: Removing --trace CLI Argument from watchmedo log Command\nDESCRIPTION: Removes the --trace command-line argument from the watchmedo log command as events are logged by default at the LoggerTrick class level.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Removed:\n# parser.add_argument('--trace', ...)\n```\n\n----------------------------------------\n\nTITLE: Buffer Size Configuration for Windows API\nDESCRIPTION: Constants defining buffer sizes for Windows API operations. BUFFER_SIZE increased to 64000 from 2048 while maintaining PATH_BUFFER_SIZE at 2048 for path-related functions.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwinapi.BUFFER_SIZE = 64000\nwinapi.PATH_BUFFER_SIZE = 2048\n```\n\n----------------------------------------\n\nTITLE: Event Handler Method Signature\nDESCRIPTION: Event dispatch method implementation for filesystem event handlers including FileSystemEventHandler, PatternMatchingEventHandler and RegexMatchingEventHandler.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef dispatch(self, event):\n```\n\n----------------------------------------\n\nTITLE: EmptyDirectorySnapshot Class Addition\nDESCRIPTION: New snapshot class implementation for handling empty directories in the filesystem monitoring system.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/changelog.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass EmptyDirectorySnapshot:\n```\n\n----------------------------------------\n\nTITLE: Including Global RST File in Watchdog API Reference\nDESCRIPTION: Includes a global reStructuredText file, likely containing common definitions or settings for the documentation.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. include:: global.rst.inc\n```\n\n----------------------------------------\n\nTITLE: Defining API Reference Section in Watchdog Documentation\nDESCRIPTION: Creates a top-level section for the API reference using reStructuredText syntax.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. api_reference:\n\n=============\nAPI Reference\n=============\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Events Module\nDESCRIPTION: Uses Sphinx automodule directive to generate documentation for the watchdog.events module.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_2\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.events`\n=================\n\n.. automodule:: watchdog.events\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Observers API Module\nDESCRIPTION: Generates documentation for the watchdog.observers.api module, including specific classes and their members.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_3\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.observers.api`\n========================\n\n.. automodule:: watchdog.observers.api\n    :synopsis: Classes useful to observer implementers.\n\n    Immutables\n    ----------\n    .. autoclass:: ObservedWatch\n       :members:\n       :show-inheritance:\n\n\n    Collections\n    -----------\n    .. autoclass:: EventQueue\n       :members:\n       :show-inheritance:\n\n    Classes\n    -------\n    .. autoclass:: EventEmitter\n       :members:\n       :show-inheritance:\n\n    .. autoclass:: EventDispatcher\n       :members:\n       :show-inheritance:\n\n    .. autoclass:: BaseObserver\n       :members:\n       :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Observers Module\nDESCRIPTION: Uses Sphinx automodule directive to generate documentation for the watchdog.observers module.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_4\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.observers`\n====================\n\n.. automodule:: watchdog.observers\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Polling Observer Module\nDESCRIPTION: Generates documentation for the watchdog.observers.polling module using Sphinx automodule directive.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_5\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.observers.polling`\n============================\n\n.. automodule:: watchdog.observers.polling\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Utils Module\nDESCRIPTION: Uses Sphinx automodule directive to generate documentation for the watchdog.utils module.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_6\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.utils`\n================\n\n.. automodule:: watchdog.utils\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Directory Snapshot Module\nDESCRIPTION: Generates documentation for the watchdog.utils.dirsnapshot module using Sphinx automodule directive.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_7\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.utils.dirsnapshot`\n============================\n\n.. automodule:: watchdog.utils.dirsnapshot\n```\n\n----------------------------------------\n\nTITLE: Documenting Watchdog Tricks Module\nDESCRIPTION: Uses Sphinx automodule directive to generate documentation for the watchdog.tricks module.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_8\n\nLANGUAGE: restructuredtext\nCODE:\n```\n`watchdog.tricks`\n=================\n\n.. automodule:: watchdog.tricks\n```\n\n----------------------------------------\n\nTITLE: Adding Table of Contents to Watchdog API Reference\nDESCRIPTION: Includes a table of contents directive with a maximum depth of 2 for the API reference documentation.\nSOURCE: https://github.com/gorakhargosh/watchdog/blob/master/docs/source/api.rst#2025-04-19_snippet_9\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n```"
  }
]