[
  {
    "owner": "udecode",
    "repo": "plate",
    "content": "TITLE: Installing Plate Core Dependencies\nDESCRIPTION: Installs the core Plate package needed for any Plate editor implementation.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Plate\nDESCRIPTION: The recommended TypeScript configuration for Plate requires TypeScript 5.0+ with the bundler module resolution.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    // ... other options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Styling with Tailwind CSS\nDESCRIPTION: Overrides default Plate components with styled versions using the withProps helper. This applies Tailwind CSS classes to various editor elements.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nimport { withProps } from '@udecode/cn';\nimport {\n  Plate,\n  PlateElement,\n  PlateLeaf,\n  usePlateEditor,\n} from '@udecode/plate/react';\n\nexport default function BasicEditor() {\n  const editor = usePlateEditor({\n    plugins: [\n      HeadingPlugin,\n      BlockquotePlugin,\n      BoldPlugin,\n      ItalicPlugin,\n      UnderlinePlugin,\n    ],\n    override: {\n      components: {\n        blockquote: withProps(PlateElement, {\n          as: 'blockquote',\n          className: 'mb-4 border-l-4 border-[#d0d7de] pl-4 text-[#636c76]',\n        }),\n        bold: withProps(PlateLeaf, { as: 'strong' }),\n        h1: withProps(PlateElement, {\n          as: 'h1',\n          className:\n            'mb-4 mt-6 text-3xl font-semibold tracking-tight lg:text-4xl',\n        }),\n        h2: withProps(PlateElement, {\n          as: 'h2',\n          className: 'mb-4 mt-6 text-2xl font-semibold tracking-tight',\n        }),\n        h3: withProps(PlateElement, {\n          as: 'h3',\n          className: 'mb-4 mt-6 text-xl font-semibold tracking-tight',\n        }),\n        italic: withProps(PlateLeaf, { as: 'em' }),\n        p: withProps(PlateElement, {\n          as: 'p',\n          className: 'mb-4',\n        }),\n        underline: withProps(PlateLeaf, { as: 'u' }),\n      },\n    },\n  });\n\n  return (\n    <Plate editor={editor}>\n      <PlateContent />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Plate AI and Required Plugins\nDESCRIPTION: Imports for the AI plugin and other required Plate editor plugins to enable AI features, basic formatting, and markdown support.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AIChatPlugin, AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BaseBoldPlugin,\n  BaseCodePlugin,\n  BaseItalicPlugin,\n  BaseStrikethroughPlugin,\n  BaseUnderlinePlugin,\n} from '@udecode/plate-basic-marks';\nimport { BaseBlockquotePlugin } from '@udecode/plate-block-quote';\nimport {\n  BaseCodeBlockPlugin,\n  BaseCodeLinePlugin,\n  BaseCodeSyntaxPlugin,\n} from '@udecode/plate-code-block';\nimport { BaseParagraphPlugin, createSlateEditor } from '@udecode/plate';\nimport { BaseHeadingPlugin, HEADING_LEVELS } from '@udecode/plate-heading';\nimport { BaseHorizontalRulePlugin } from '@udecode/plate-horizontal-rule';\nimport { BaseIndentListPlugin } from '@udecode/plate-indent-list';\nimport { BaseLinkPlugin } from '@udecode/plate-link';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plate Editor\nDESCRIPTION: Implements a minimal Plate editor setup with the essential components. The Plate component manages editor state while PlateContent renders the editable content area.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  usePlateEditor,\n  Plate,\n  PlateContent,\n} from '@udecode/plate/react';\n\nexport default function BasicEditor() {\n  const editor = usePlateEditor();\n\n  return (\n    <Plate editor={editor}>\n      <PlateContent placeholder=\"Type...\" />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Formatting Plugins to Plate Editor\nDESCRIPTION: Configures the Plate editor with plugins for basic formatting, headings, and blockquotes. These plugins enable rich text editing capabilities.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nimport {\n  BoldPlugin,\n  ItalicPlugin,\n  UnderlinePlugin,\n} from '@udecode/plate-basic-marks/react';\nimport { HeadingPlugin } from '@udecode/plate-heading/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\n\nconst value = [\n  // ...\n];\n\nexport default function BasicEditor() {\n  const editor = usePlateEditor({\n    plugins: [\n      HeadingPlugin,\n      BlockquotePlugin,\n      BoldPlugin,\n      ItalicPlugin,\n      UnderlinePlugin,\n    ],\n    value,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <PlateContent />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin with State Management\nDESCRIPTION: Shows how to implement a plugin with its own state store and methods to update that state when events occur.\n\nLANGUAGE: ts\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: {\n    count: 0,\n  },\n}).extend(({ editor, plugin, setOption }) => ({\n  handlers: {\n    onClick: () => {\n      setOption('count', 1);\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing AIChatEditor with the useAIChatEditor Hook in React\nDESCRIPTION: A React component example showing how to set up an AI-enabled editor using the useAIChatEditor hook. This implementation deserializes markdown content and configures plugins like MarkdownPlugin for the Plate editor.\n\nLANGUAGE: tsx\nCODE:\n```\nconst AIChatEditor = ({ content }: { content: string }) => {\n  const aiEditor = usePlateEditor({\n    plugins: [\n      // Your editor plugins\n      MarkdownPlugin,\n      // etc...\n    ],\n  });\n\n  useAIChatEditor(aiEditor, content, {\n    // Optional markdown parser options\n    parser: {\n      exclude: ['space'],\n    },\n  });\n\n  return <Editor editor={aiEditor} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Plugins to Plate Editor\nDESCRIPTION: Shows how to add multiple plugins to a Plate editor, including paragraph, heading, and list functionality.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, HeadingPlugin, ListPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Plugins for Basic Formatting\nDESCRIPTION: Installs additional plugins for basic text formatting including marks, headings, blockquotes, and styling utilities.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-basic-marks @udecode/plate-heading @udecode/plate-block-quote @udecode/cn\n```\n\n----------------------------------------\n\nTITLE: Complete Form Example with Save and Reset Functionality\nDESCRIPTION: This example demonstrates a complete form implementation with Plate that includes both saving and resetting functionality. It shows how to handle form submission and how to properly reset both the editor and the form state.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from 'react-hook-form';\nimport { Plate, PlateContent, usePlateEditor } from '@udecode/plate/react';\n\nfunction MyForm() {\n  const form = useForm({\n    defaultValues: {\n      content: [\n        { type: 'p', children: [{ text: 'Initial content...' }] },\n      ],\n    },\n  });\n\n  const editor = usePlateEditor();\n\n  const onSubmit = (data) => {\n    alert(JSON.stringify(data, null, 2));\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)}>\n      <Plate\n        editor={editor}\n        onChange={({ value }) => form.setValue('content', value)}\n      >\n        <PlateContent />\n      </Plate>\n\n      <button type=\"submit\">Save</button>\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          // Reset the editor\n          editor.tf.reset();\n          // Reset the form\n          form.reset();\n        }}\n      >\n        Reset\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Form Integration with Plate Editor\nDESCRIPTION: Full implementation of a form using the EditorField component with React Hook Form and Zod validation. Shows how to integrate the Plate editor with form validation and submission handling.\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { z } from \"zod\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { EditorField } from \"./EditorField\"; // Import the component above\n\n// 1. Define our validation schema with zod\nconst FormSchema = z.object({\n  bio: z\n    .string()\n    .min(10, { message: \"Bio must be at least 10 characters.\" })\n    .max(160, { message: \"Bio must not exceed 160 characters.\" }),\n});\n\n// 2. Build our main form component\nexport function EditorForm() {\n  // 3. Setup the form\n  const form = useForm<z.infer<typeof FormSchema>>{\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      // Here \"bio\" is just a string, but our editor\n      // will interpret it as initial content if you parse it as JSON\n      bio: \"\",\n    },\n  });\n\n  // 4. Submission handler\n  function onSubmit(data: z.infer<typeof FormSchema>) {\n    alert(\"Submitted: \" + JSON.stringify(data, null, 2));\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"bio\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Bio</FormLabel>\n              <FormControl>\n                <EditorField\n                  {...field}\n                  placeholder=\"Tell us a bit about yourself...\"\n                />\n              </FormControl>\n              <FormDescription>\n                You can <span>@mention</span> other users and organizations.\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <button type=\"submit\" className=\"py-2 px-4 bg-primary text-white\">\n          Submit\n        </button>\n      </form>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Plugin with AI Integration\nDESCRIPTION: Comprehensive configuration of the Copilot plugin with markdown support, custom API endpoints, and behavior settings. Includes system prompt configuration and event handling for AI completions.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  CopilotPlugin.configure(({ api }) => ({\n    options: {\n    completeOptions: {\n      api: '/api/your-api-endpoint',\n      body: {\n        system: `You are an advanced AI writing assistant, similar to VSCode Copilot but for general text. Your task is to predict and generate the next part of the text based on the given context.\n\nRules:\n- Continue the text naturally up to the next punctuation mark (., ,, ;, :, ?, or !).\n- Maintain style and tone. Don't repeat given text.\n- For unclear context, provide the most likely continuation.\n- Handle code snippets, lists, or structured text if needed.\n- Don't include \"\"\" in your response.\n- CRITICAL: Always end with a punctuation mark.\n- CRITICAL: Avoid starting a new block. Do not use block formatting like >, #, 1., 2., -, etc. The suggestion should continue in the same block as the context.\n- If no context is provided or you can't generate a continuation, return \"0\" without explanation.`,\n      },\n      onFinish: (_, completion) => {\n        if (completion === '0') return;\n\n        api.copilot.setBlockSuggestion({\n          //stripMarkdownBlocks in plus GhostText\n          text: stripMarkdown(completion),\n        });\n      },\n    },\n    debounceDelay: 500,\n    getPrompt: ({ editor }) => {\n      const contextEntry = getAncestorNode(editor);\n\n      if (!contextEntry) return '';\n\n      const prompt = serializeMdNodes([contextEntry[0] as TElement]);\n\n      return `Continue the text up to the next punctuation mark:\n\"\"\"\n${prompt}\n\"\"\"`;\n    },\n    renderGhostText: GhostText,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Chaining with the 'then' Function in TypeScript\nDESCRIPTION: Addition of the 'then' function to PlatePlugin interface allowing recursive plugin merging. This powerful feature enables plugin fields to be derived from the editor and/or loaded plugin for dynamic configuration.\n\nLANGUAGE: ts\nCODE:\n```\ninterface PlatePlugin {\n  /**\n   * Recursive plugin merging. Can be used to derive plugin fields from\n   * `editor`, `plugin`. The returned value will be deeply merged to the\n   * plugin.\n   */\n  then?: (\n    editor: PlateEditor<T>,\n    plugin: WithPlatePlugin<T, P>\n  ) => Partial<PlatePlugin<T, P>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Copilot Plugin with AI Integration\nDESCRIPTION: Comprehensive configuration of the Copilot plugin with markdown support, custom API endpoints, and behavior settings. Includes system prompt configuration and event handling for AI completions.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  CopilotPlugin.configure(({ api }) => ({\n    options: {\n    completeOptions: {\n      api: '/api/your-api-endpoint',\n      body: {\n        system: `You are an advanced AI writing assistant, similar to VSCode Copilot but for general text. Your task is to predict and generate the next part of the text based on the given context.\n\nRules:\n- Continue the text naturally up to the next punctuation mark (., ,, ;, :, ?, or !).\n- Maintain style and tone. Don't repeat given text.\n- For unclear context, provide the most likely continuation.\n- Handle code snippets, lists, or structured text if needed.\n- Don't include \"\"\" in your response.\n- CRITICAL: Always end with a punctuation mark.\n- CRITICAL: Avoid starting a new block. Do not use block formatting like >, #, 1., 2., -, etc. The suggestion should continue in the same block as the context.\n- If no context is provided or you can't generate a continuation, return \"0\" without explanation.`,\n      },\n      onFinish: (_, completion) => {\n        if (completion === '0') return;\n\n        api.copilot.setBlockSuggestion({\n          //stripMarkdownBlocks in plus GhostText\n          text: stripMarkdown(completion),\n        });\n      },\n    },\n    debounceDelay: 500,\n    getPrompt: ({ editor }) => {\n      const contextEntry = getAncestorNode(editor);\n\n      if (!contextEntry) return '';\n\n      const prompt = serializeMdNodes([contextEntry[0] as TElement]);\n\n      return `Continue the text up to the next punctuation mark:\n\"\"\"\n${prompt}\n\"\"\"`;\n    },\n    renderGhostText: GhostText,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Node Types in Slate\nDESCRIPTION: Defines the basic type hierarchy for nodes in Slate. The hierarchy includes TNode as the base type (which can be Editor, Element, or Text), Descendant for child nodes (Element or Text), and Ancestor for parent nodes (Editor or Element).\n\nLANGUAGE: typescript\nCODE:\n```\ntype TNode = Editor | TElement | TText;\n\ntype Descendant = Element | Text\ntype Ancestor = Editor | Element\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor with Content\nDESCRIPTION: Sets initial content for the Plate editor with a predefined value. The editor starts with a single paragraph node containing text.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nconst value = [\n  {\n    type: 'p',\n    children: [\n      {\n        text: 'This is editable plain text with react and history plugins, just like a <textarea>!',\n      },\n    ],\n  },\n];\n\nexport default function BasicEditor() {\n  const editor = usePlateEditor({\n    value,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <PlateContent />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Editor with AI Support and Prompt Templates\nDESCRIPTION: Defines editor creation function, system and user prompt templates for different AI interaction modes, and plugin configuration for the Plate editor with AI capabilities.\n\nLANGUAGE: tsx\nCODE:\n```\nexport const createAIEditor = () => {\n  const editor = createSlateEditor({\n    id: 'ai',\n    plugins: [\n      BaseBlockquotePlugin,\n      BaseBoldPlugin,\n      BaseCodeBlockPlugin,\n      BaseCodeLinePlugin,\n      BaseCodePlugin,\n      BaseCodeSyntaxPlugin,\n      BaseItalicPlugin,\n      BaseStrikethroughPlugin,\n      BaseUnderlinePlugin,\n      BaseHeadingPlugin,\n      BaseHorizontalRulePlugin,\n      BaseLinkPlugin,\n      BaseParagraphPlugin,\n      BaseIndentListPlugin.extend({\n        inject: {\n          targetPlugins: [\n            BaseParagraphPlugin.key,\n            ...HEADING_LEVELS,\n            BaseBlockquotePlugin.key,\n            BaseCodeBlockPlugin.key,\n          ],\n        },\n        options: {\n          listStyleTypes: {\n            todo: {\n              liComponent: TodoLiStatic,\n              markerComponent: TodoMarkerStatic,\n              type: 'todo',\n            },\n          },\n        },\n      }),\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n    ],\n  });\n\n\n  return editor;\n};\n\nconst systemCommon = `\\\nYou are an advanced AI-powered note-taking assistant, designed to enhance productivity and creativity in note management.\nRespond directly to user prompts with clear, concise, and relevant content. Maintain a neutral, helpful tone.\n\nRules:\n- <Document> is the entire note the user is working on.\n- <Reminder> is a reminder of how you should reply to INSTRUCTIONS. It does not apply to questions.\n- Anything else is the user prompt.\n- Your response should be tailored to the user's prompt, providing precise assistance to optimize note management.\n- For INSTRUCTIONS: Follow the <Reminder> exactly. Provide ONLY the content to be inserted or replaced. No explanations or comments.\n- For QUESTIONS: Provide a helpful and concise answer. You may include brief explanations if necessary.\n- CRITICAL: Distinguish between INSTRUCTIONS and QUESTIONS. Instructions typically ask you to modify or add content. Questions ask for information or clarification.\n`;\n\nconst systemDefault = `\\\n${systemCommon}\n- <Block> is the current block of text the user is working on.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- CRITICAL: Provide only a single block of text. DO NOT create multiple paragraphs or separate blocks.\n<Block>\n{block}\n</Block>\n`;\n\nconst systemSelecting = `\\\n${systemCommon}\n- <Block> is the block of text containing the user's selection, providing context.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- <Selection> is the specific text the user has selected in the block and wants to modify or ask about.\n- Consider the context provided by <Block>, but only modify <Selection>. Your response should be a direct replacement for <Selection>.\n<Block>\n{block}\n</Block>\n<Selection>\n{selection}\n</Selection>\n`;\n\nconst systemBlockSelecting = `\\\n${systemCommon}\n- <Selection> represents the full blocks of text the user has selected and wants to modify or ask about.\n- Your response should be a direct replacement for the entire <Selection>.\n- Maintain the overall structure and formatting of the selected blocks, unless explicitly instructed otherwise.\n- CRITICAL: Provide only the content to replace <Selection>. Do not add additional blocks or change the block structure unless specifically requested.\n<Selection>\n{block}\n</Selection>\n`;\n\nconst userDefault = `<Reminder>\nCRITICAL: DO NOT use block formatting. You can only use inline formatting.\nCRITICAL: DO NOT start new lines or paragraphs.\nNEVER write <Block>.\n</Reminder>\n{prompt}`;\n\nconst userSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the text to replace <Selection>. No explanations.\nEnsure it fits seamlessly within <Block>. If <Block> is empty, write ONE random sentence.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nconst userBlockSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the content to replace the entire <Selection>. No explanations.\nMaintain the overall structure unless instructed otherwise.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nexport const PROMPT_TEMPLATES = {\n  systemBlockSelecting,\n  systemDefault,\n  systemSelecting,\n  userBlockSelecting,\n  userDefault,\n  userSelecting,\n};\n\nconst plugins = [\n  // ...otherPlugins,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  AIPlugin,\n  AIChatPlugin.configure({\n    options: {\n      createAIEditor,\n      promptTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.userBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.userSelecting\n            : PROMPT_TEMPLATES.userDefault;\n      },\n      systemTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.systemBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.systemSelecting\n            : PROMPT_TEMPLATES.systemDefault;\n      },\n    },\n    render: { afterEditable: () => <AIMenu /> },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Serializing Slate Editor Content to HTML with Plate\nDESCRIPTION: Demonstrates how to use the serializeHtml function to convert Slate editor content to HTML, including setting up the editor and providing components that map Slate nodes to HTML elements.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { createSlateEditor, serializeHtml } from '@udecode/plate';\nimport { EditorStatic } from '@/components/plate-ui/editor-static';\n\n// Create an editor and configure all the plugins you need\nconst editor = createSlateEditor({\n  // ... your plugins ...\n});\n\n// Provide the components that map Slate nodes to HTML elements\nconst components = {\n  // [ParagraphPlugin.key]: ParagraphElementStatic,\n  // [HeadingPlugin.key]: HeadingElementStatic,\n  // ...\n};\n\n// You can also pass a custom editor component and props.\n// For example, EditorStatic is a styled version of PlateStatic.\nconst html = await serializeHtml(editor, {\n  components,\n  editorComponent: EditorStatic, // defaults to PlateStatic if not provided\n  props: { variant: 'none', className: 'p-2' },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Typed Plugins with Type-Safe Features in TypeScript\nDESCRIPTION: Shows how to use typed plugins in a Plate editor, demonstrating type-safe access to plugin options, API functions, and transforms. Provides examples of accessing plugin state, calling methods, and using transforms with proper type checking.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ExtendedCodeBlockPlugin],\n});\n\n// Type-safe access to options\nconst options = editor.getOptions(ExtendedCodeBlockPlugin);\noptions.syntax;\noptions.syntaxPopularFirst;\noptions.hotkey;\n\n// Type-safe API\neditor.api.toggleSyntax();\neditor.api.plugin.getSyntaxState();\neditor.api.plugin2.setLanguage('python');\neditor.api.plugin.getLanguage();\n\n// Type-safe Transforms\neditor.tf.insert.codeBlock({ language: 'typescript' });\n```\n\n----------------------------------------\n\nTITLE: Converting Slate Plugins to Plate Plugins\nDESCRIPTION: Demonstrates how to transform custom Slate editor plugins into Plate's plugin format, including overriding and extending editor functionality.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst withMyPlugin = (editor) => {\n  const { insertText } = editor;\n  editor.insertText = (text) => {\n    // Custom logic\n    insertText(text);\n  };\n  return editor;\n};\n\n// After\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).overrideEditor(({ editor, tf: { insertText } }) => ({\n  transforms: {\n    insertText(text, options) {\n      // Custom logic\n      insertText(text, options);\n    },\n  }\n}));\n\n// For adding new methods:\nconst MyOtherPlugin = createPlatePlugin({\n  key: 'myOtherPlugin',\n}).extendEditorTransforms(({ editor }) => ({\n  newMethod(text) {\n    // Add new functionality\n  }\n}));\n```\n\n----------------------------------------\n\nTITLE: History Management Methods in Plate Editor\nDESCRIPTION: Methods for querying the current state of history operations in the editor. These functions inform whether operations are being merged, saved, or split.\n\nLANGUAGE: typescript\nCODE:\n```\nisMerging() => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisSaving() => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisSplittingOnce() => boolean\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Plate Editor with Plugins in TypeScript\nDESCRIPTION: Demonstrates how to create a basic Plate editor using the createPlateEditor function with paragraph and heading plugins.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPlateEditor } from '@udecode/plate/react';\n\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, HeadingPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Slate JSON to Markdown\nDESCRIPTION: Example of configuring a Plate editor and using the serialize method to convert Slate JSON to Markdown.\n\nLANGUAGE: tsx\nCODE:\n```\nconst editor = createPlateEditor({ \n  value,\n  plugins: [\n    // ...other plugins,\n    MarkdownPlugin.configure({\n      options: {\n        remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n      },\n    }),\n,\n  ],\n});\n\nconst content = editor.api.markdown.serialize();\n```\n\n----------------------------------------\n\nTITLE: Chaining Extension Methods for Comprehensive Plugin Configuration in TypeScript\nDESCRIPTION: This example demonstrates how to chain multiple extension methods to create a comprehensive plugin with custom API methods, transforms, and options.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: {\n    baseValue: 5,\n  },\n})\n  .extendApi(() => ({\n    pluginMethod: () => 'plugin method',\n  }))\n  .extendEditorApi(({ getOptions }) => ({\n    multiply: (factor: number) => getOptions().baseValue * factor,\n  }))\n  .extendTransforms(() => ({\n    pluginTransform: () => {\n      // Plugin-specific transform\n    },\n  }))\n  .extendEditorTransforms(({ editor }) => ({\n    editorTransform: () => {\n      // Editor-specific transform\n    },\n  }));\n\neditor.api.myPlugin.api.pluginMethod();\neditor.api.multiply(3);\neditor.tf.myPlugin.pluginTransform();\neditor.tf.editorTransform();\n```\n\n----------------------------------------\n\nTITLE: Using PlateProvider for component state management\nDESCRIPTION: Example of using PlateProvider to wrap components that need access to plate hook selectors, allowing them to rerender on state changes.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PlateProvider } from '@udecode/plate';\n\n// Single ID\n<PlateProvider id=\"my-editor\">\n  <EditorComponent />\n</PlateProvider>\n\n// Multiple IDs\n<PlateProvider id={['editor1', 'editor2']}>\n  <MultipleEditorsComponent />\n</PlateProvider>\n```\n\n----------------------------------------\n\nTITLE: Creating a Plate Editor\nDESCRIPTION: Shows how to replace Slate's editor creation pattern with Plate's createPlateEditor function, which simplifies the setup of plugins and initial value.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst editor = useMemo(() => withReact(withHistory(createEditor()))), []);\n\n// After\nconst editor = createPlateEditor({\n  value,\n  plugins: [\n    // Additional plugins here\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Slate Nodes to HTML with serializeHtml Function\nDESCRIPTION: Demonstrates how to convert Slate editor content to an HTML string using the serializeHtml function. The example shows various customization options including component mapping, class name handling, data attribute stripping, and custom wrapper components.\n\nLANGUAGE: typescript\nCODE:\n```\nconst htmlString = await serializeHtml(editor, {\n  components,\n  stripClassNames: true,\n  preserveClassNames: ['slate-'],\n  stripDataAttributes: true,\n  editorComponent: MyCustomStaticWrapper,\n  props: { className: 'my-serialized' },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Plate Editor with React Hook Form\nDESCRIPTION: This snippet demonstrates how to integrate the Plate editor with react-hook-form by syncing the editor's content on change events. It shows how to register the field, update form values when the editor changes, and handle form submission.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useForm } from 'react-hook-form';\nimport type { Value } from '@udecode/plate';\nimport { Plate, PlateContent, usePlateEditor } from '@udecode/plate/react';\n\ntype FormData = {\n  content: Value;\n};\n\nexport function RHFEditorForm() {\n  const initialValue = [\n    { type: 'p', children: [{ text: 'Hello from react-hook-form!' }] },\n  ]\n\n  // Setup react-hook-form\n  const { register, handleSubmit, setValue } = useForm<FormData>({\n    defaultValues: {\n      content: initialValue,\n    },\n  });\n\n  // Create/configure the Plate editor\n  const editor = usePlateEditor({ value: initialValue });\n\n  // Register the field for react-hook-form\n  register('content', { /* validation rules... */ });\n\n  const onSubmit = (data: FormData) => {\n    // data.content will have final editor content\n    console.info('Submitted:', data.content);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Plate\n        editor={editor}\n        onChange={({ value }) => {\n          // Sync editor changes to the form\n          setValue('content', value);\n        }}\n      >\n        <PlateContent placeholder=\"Type here...\" />\n      </Plate>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable EditorField Component\nDESCRIPTION: Implementation of a reusable EditorField component that works like a standard textarea but uses Plate for rich text editing. It accepts value, onChange, and placeholder props to integrate with form libraries.\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport * as React from \"react\";\nimport type { Value } from \"@udecode/plate\";\nimport { Plate, PlateContent, usePlateEditor } from \"@udecode/plate/react\";\n\n/**\n * A reusable editor component that works like a standard <Textarea>,\n * accepting `value`, `onChange`, and optional placeholder.\n *\n * Usage:\n *\n * <FormField\n *   control={form.control}\n *   name=\"bio\"\n *   render={({ field }) => (\n *     <FormItem>\n *       <FormLabel>Bio</FormLabel>\n *       <FormControl>\n *         <EditorField\n *           {...field}\n *           placeholder=\"Tell us a bit about yourself\"\n *         />\n *       </FormControl>\n *       <FormDescription>Some helpful description...</FormDescription>\n *       <FormMessage />\n *     </FormItem>\n *   )}\n * />\n */\nexport interface EditorFieldProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The current Slate Value. Should be an array of Slate nodes.\n   */\n  value?: Value;\n\n  /**\n   * Called when the editor value changes.\n   */\n  onChange?: (value: Value) => void;\n\n  /**\n   * Placeholder text to display when editor is empty.\n   */\n  placeholder?: string;\n}\n\nexport function EditorField({\n  value,\n  onChange,\n  placeholder = \"Type here...\",\n  ...props\n}: EditorFieldProps) {\n  // We create our editor instance with the provided initial `value`.\n  const editor = usePlateEditor({\n    value: value ?? [\n      { type: \"p\", children: [{ text: \"\" }] }, // Default empty paragraph\n    ],\n  });\n\n  return (\n    <Plate\n      editor={editor}\n      onChange={({ value }) => {\n        // Sync changes back to the caller via onChange prop\n        onChange?.(value);\n      }}\n      {...props}\n    >\n      <PlateContent placeholder={placeholder} />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Options in Plate Component\nDESCRIPTION: Examples of using the usePluginOption hook to access different types of plugin options within a Plate component context. Shows how to access simple options, selectors with parameters, and entire state objects.\n\nLANGUAGE: tsx\nCODE:\n```\n// Access a simple option\nconst value = usePluginOption(plugin, 'value');\n// Access a selector with parameters\nconst doubleValue = usePluginOption(plugin, 'doubleValue', 2);\n// Access with equality function\nconst value = usePluginOption(plugin, 'value', (a, b) => a === b);\n// Access entire state\nconst state = usePluginOption(plugin, 'state');\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Options Outside Plate Component\nDESCRIPTION: Examples of using the useEditorPluginOption hook to access plugin options outside of a Plate component context. Demonstrates accessing simple options, selectors with parameters, and state objects with an editor instance.\n\nLANGUAGE: tsx\nCODE:\n```\n// Access a simple option\nconst value = useEditorPluginOption(editor, plugin, 'value');\n// Access a selector with parameters\nconst doubleValue = useEditorPluginOption(editor, plugin, 'doubleValue', 2);\n// Access with equality function\nconst value = useEditorPluginOption(editor, plugin, 'value', (a, b) => a === b);\n// Access entire state\nconst state = useEditorPluginOption(editor, plugin, 'state');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Typed API for Plate Editor\nDESCRIPTION: Shows how to access the typed API for a specific plugin using the getApi method, which provides type-safe access to plugin-specific API methods.\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = editor.getApi(TablePlugin);\napi.api.create.tableCell(); // Type-safe API method\n```\n\n----------------------------------------\n\nTITLE: Associating a Component with Element Plugin in TypeScript\nDESCRIPTION: Shows how to connect a React component to a plugin's element type for custom rendering of paragraphs in the editor.\n\nLANGUAGE: ts\nCODE:\n```\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n    type: 'p',\n    component: ParagraphElement,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Plate Editor with HTML String\nDESCRIPTION: Demonstrates initializing a Plate editor with an HTML string and formatting plugins for bold and italic text.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [BoldPlugin, ItalicPlugin],\n  value: '<p>This is <b>bold</b> and <i>italic</i> text!</p>',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Paragraph Element Plugin in TypeScript\nDESCRIPTION: Demonstrates how to define a new element node type plugin for paragraphs, which is a fundamental building block in the editor.\n\nLANGUAGE: ts\nCODE:\n```\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n    type: 'p',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Plate Component in React\nDESCRIPTION: The Plate component is the root component that loads the editor state into a store provider. It accepts various props including editor instance, callbacks for state changes, and rendering functions.\n\nLANGUAGE: jsx\nCODE:\n```\n<Plate\n  editor={plateEditor}\n  onChange={({ value, editor }) => handleChange(value, editor)}\n  onSelectionChange={(selection) => handleSelectionChange(selection)}\n  readOnly={false}\n>\n  {/* Children components with access to the plate store */}\n</Plate>\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Node Plugins in TypeScript\nDESCRIPTION: Demonstrates how to create various specialized node types: inline elements (links), void elements (images), and leaf nodes (bold formatting).\n\nLANGUAGE: ts\nCODE:\n```\nconst LinkPlugin = createPlatePlugin({\n  key: 'link',\n  node: {\n    isElement: true,\n    isInline: true,\n    type: 'a',\n  },\n});\n\nconst ImagePlugin = createPlatePlugin({\n  key: 'image',\n  node: {\n    isElement: true,\n    isVoid: true,\n    type: 'img',\n  },\n});\n\nconst BoldPlugin = createPlatePlugin({\n  key: 'bold',\n  node: {\n    isLeaf: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Plugin in TypeScript\nDESCRIPTION: Demonstrates how to create the most basic Plate plugin with just a key property, which serves as a starting point for more complex configurations.\n\nLANGUAGE: ts\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'minimal',\n});\n```\n\n----------------------------------------\n\nTITLE: Using RangeRef to Preserve Selection During Transformations in Slate\nDESCRIPTION: This example demonstrates how to create and use a RangeRef to preserve the editor's selection during operations that might change it. It creates a reference with 'inward' affinity, performs a transformation (unwrapping nodes), and then restores the selection using the reference's final value.\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectionRef = editor.api.rangeRef(editor.selection, {\n  affinity: 'inward',\n})\n// Operations that might change the selection\nTransforms.unwrapNodes(editor)\n// Restore the selection using the ref\nTransforms.select(editor, selectionRef.unref())\n```\n\n----------------------------------------\n\nTITLE: Configuring an Existing Plugin in TypeScript\nDESCRIPTION: Shows how to use the .configure method to customize an existing Plate plugin by providing new option values.\n\nLANGUAGE: ts\nCODE:\n```\nconst ConfiguredPlugin = MyPlugin.configure({\n  options: {\n    myOption: 'new value',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Plugin in Plate Editor\nDESCRIPTION: Demonstrates how to use the root plugin to configure any plugin in a Plate editor, such as setting a maximum length.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, HeadingPlugin],\n  rootPlugin: (plugin) =>\n    plugin.configurePlugin(LengthPlugin, {\n    options: {\n        maxLength: 100,\n      },\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Plugins with .configurePlugin Method in TypeScript\nDESCRIPTION: The .configurePlugin method modifies existing properties of a nested plugin within a parent plugin. It's useful for customizing sub-plugin behavior.\n\nLANGUAGE: typescript\nCODE:\n```\nconst TablePlugin = createPlatePlugin({\n  key: 'table',\n  plugins: [TableCellPlugin],\n}).configurePlugin(TableCellPlugin, {\n  options: {\n    cellOption: 'modified',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Editor Using Plate Hooks in TypeScript\nDESCRIPTION: Demonstrates how to access the Plate editor instance using three different hooks: useEditorRef for non-rerendering access, useEditorSelector for selective rerendering based on specific state changes, and useEditorState for complete state subscription.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useEditorRef, useEditorSelector, useEditorState } from '@udecode/plate/react';\n\nconst MyComponent = () => {\n  const editor = useEditorRef();\n  const hasSelection = useEditorSelector((editor) => !!editor.selection, []);\n  const editorState = useEditorState();\n  \n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Options with .configure Method in TypeScript\nDESCRIPTION: The .configure method allows you to override a plugin's configuration with new options. It modifies existing properties of the plugin without changing its type.\n\nLANGUAGE: typescript\nCODE:\n```\nconst ConfiguredPlugin = MyPlugin.configure({\n  options: {\n    myOption: 'new value',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Template Using CLI\nDESCRIPTION: Command to initialize a new Plate editor project using the recommended CLI method with shadcx.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML to Slate Nodes with deserialize Function\nDESCRIPTION: Shows how to parse an HTML string or element into Slate nodes using the editor.api.html.deserialize function. The example demonstrates setting the editor's children property to the result of deserializing an HTML paragraph with a whitespace handling option.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.children = editor.api.html.deserialize('<p>Deserialized</p>', {\n  collapseWhiteSpace: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Editor with Plugin Types\nDESCRIPTION: Shows how to create a typed Plate editor by explicitly specifying plugin types for better type inference.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor<Value, typeof TablePlugin | typeof LinkPlugin>({\n  plugins: [TablePlugin, LinkPlugin],\n});\n\n// Usage\neditor.tf.insert.tableRow()\n```\n\n----------------------------------------\n\nTITLE: Defining Text Node Type in Slate\nDESCRIPTION: The core type definition for Text nodes in Slate. A Text node contains text content and optional formatting properties as key-value pairs.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TText = {\n  text: string\n  [key: string]: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Handler with Local Storage Persistence\nDESCRIPTION: Adds an onChange handler to the Plate editor that persists content to localStorage. This enables saving editor state between sessions.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nexport default function BasicEditor() {\n  const localValue =\n    typeof window !== 'undefined' && localStorage.getItem('editorContent');\n\n  const editor = usePlateEditor({\n    value: localValue ? JSON.parse(localValue) : value,\n  });\n\n  return (\n    <Plate\n      editor={editor}\n      onChange={({ value }) => {\n        // For performance, debounce your saving logic\n        localStorage.setItem('editorContent', JSON.stringify(value));\n      }}\n    >\n      <PlateContent />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Typed Editor with Custom Types\nDESCRIPTION: Demonstrates how to define complex custom types for a Plate editor in a separate file, including custom elements and text formatting.\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TElement, TText } from '@udecode/plate';\nimport type { TPlateEditor } from '@udecode/plate/react';\n\n// Define custom element types\ninterface ParagraphElement extends TElement {\n  align?: 'left' | 'center' | 'right' | 'justify';\n  children: RichText[];\n  type: typeof ParagraphPlugin.key;\n}\n\ninterface ImageElement extends TElement {\n  children: [{ text: '' }]\n  type: typeof ImagePlugin.key;\n  url: string;\n}\n\n// Define custom text types\ninterface FormattedText extends TText {\n  bold?: boolean;\n  italic?: boolean;\n}\n\nexport type MyRootBlock = ParagraphElement | ImageElement;\n\n// Define the editor's value type\nexport type MyValue = MyRootBlock[];\n\n// Define the custom editor type\nexport type MyEditor = TPlateEditor<MyValue, typeof TablePlugin | typeof LinkPlugin>;\n\nexport const useMyEditorRef = () => useEditorRef<MyEditor>();\n\n// Usage\nconst value: MyValue = [{\n  type: 'p',\n  children: [{ text: 'Hello, Plate!' }],\n}]\n\nconst editorInferred = createPlateEditor({\n  plugins: [TablePlugin, LinkPlugin],\n  value,\n});\n\n// or \nconst editorExplicit = createPlateEditor<MyValue, typeof TablePlugin | typeof LinkPlugin>({\n  plugins: [TablePlugin, LinkPlugin],\n  value,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Package\nDESCRIPTION: Command to install the main Plate package using npm, which is the first step in migrating from Slate to Plate.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate\n```\n\n----------------------------------------\n\nTITLE: Configuring Yjs Plugin with Remote Cursor Overlay in Plate\nDESCRIPTION: Example of how to configure the YjsPlugin in a Plate editor with remote cursor support. The configuration includes cursor options, Hocuspocus provider settings, and rendering the remote cursor overlay.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { YjsPlugin } from '@udecode/plate-yjs/react';\nimport { RemoteCursorOverlay } from '@/components/plate-ui/remote-cursor-overlay';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n    YjsPlugin.configure({\n      render: {\n        afterEditable: RemoteCursorOverlay,\n      },\n      options: {\n        cursorOptions: {\n          autoSend: true,\n          data: { name: 'A plate user', color: '#5AC990' },\n        },\n        disableCursors: false,\n        hocuspocusProviderOptions: {\n          url: 'https://hocuspocus.test/hocuspocus',\n          name: 'test',\n        },\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling Plate Editor Value with setValue and reset Methods\nDESCRIPTION: This code demonstrates how to implement controlled editor behavior in Plate by using editor.tf.setValue to replace content with a string or JSON value, and editor.tf.reset to reset the editor state. These methods should be used sparingly as they can impact performance.\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  const editor = usePlateEditor({\n    value: 'Initial Value',\n    // Disable the editor if initial value is not yet ready\n    // enabled: !!value,\n  });\n\n  return (\n    <div>\n      <Plate editor={editor}>\n        <PlateContent />\n      </Plate>\n\n      <button\n        onClick={() => {\n          // Replace with HTML string\n          editor.tf.setValue('Replaced Value');\n\n          // Replace with JSON value\n          editor.tf.setValue([\n            {\n              type: 'p',\n              children: [{ text: 'Replaced Value' }],\n            },\n          ]);\n\n          // Replace with empty value\n          editor.tf.setValue();\n        }}\n      >\n        Replace Value\n      </button>\n      \n      <button\n        onClick={() => {\n          editor.tf.reset();\n        }}\n      >\n        Reset Editor\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Components with Plate Plugin Options\nDESCRIPTION: Method to register custom components with Plate plugins using the node.component option in createPlatePlugin or the withComponent method on an existing plugin.\n\nLANGUAGE: tsx\nCODE:\n```\nconst ParagraphPlugin = createPlatePlugin({\n  // ... \n  node: {\n    component: ParagraphElement,\n  },\n});\n\n// OR\nconst ParagraphPlugin = BaseParagraphPlugin.withComponent(ParagraphElement)\n```\n\n----------------------------------------\n\nTITLE: Using getEditorPlugin for Cross-Plugin Communication\nDESCRIPTION: Demonstrates how to use the getEditorPlugin function to access the context of another plugin, enabling cross-plugin communication and interaction.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onKeyDown: ({ editor }) => {\n      const linkCtx = getEditorPlugin(LinkPlugin);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Dependencies\nDESCRIPTION: Shows how to define dependencies between plugins to ensure proper loading order and functionality.\n\nLANGUAGE: ts\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  dependencies: ['paragraphPlugin', 'listPlugin'],\n});\n```\n\n----------------------------------------\n\nTITLE: Using createPlateEditor with Type Inference in TypeScript\nDESCRIPTION: Demonstrates how to create a Plate editor with TypeScript that automatically infers plugin configurations from the options passed to it, including both core plugins and custom plugins like TablePlugin.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({ plugins: [TablePlugin] });\neditor.api.htmlReact.serialize(); // core plugin is automatically inferred\neditor.tf.insert.tableRow(); // table plugin is automatically inferred\n```\n\n----------------------------------------\n\nTITLE: Init Command Options and Usage\nDESCRIPTION: Complete list of options available for the 'init' command, including flags for defaults, force overwrite, skipping confirmations, and specifying directories.\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcx init [options] [registry]\n\ninitialize your project and install dependencies\n\nOptions:\n  -d, --defaults    use default values i.e slate and css variables. (default: false)\n  -f, --force       force overwrite of existing components.json. (default: false)\n  -y, --yes         skip confirmation prompt. (default: false)\n  -c, --cwd <cwd>   the working directory. defaults to the current directory.\n  -a, --all         add all available components. (default: false)\n  -n, --name <name> registry name. (default: plate)\n  -s, --silent      mute output (default: false)\n  --src-dir         use the src directory when creating a new project (default: false)\n  --pm <pm>         package manager to use (npm, pnpm, yarn, bun)\n  -h, --help        display help for command\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Plugins in Plate Editor\nDESCRIPTION: Configuration of various media plugins including image, video, audio, file, and media embed plugins along with select on backspace and placeholder plugins with their options.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  ImagePlugin,\n  VideoPlugin,\n  AudioPlugin,\n  FilePlugin,\n  MediaEmbedPlugin,\n  SelectOnBackspacePlugin.configure({\n    options: {\n      query: {\n        allow: [ImagePlugin.key, VideoPlugin.key, AudioPlugin.key, FilePlugin.key, MediaEmbedPlugin.key],\n      },\n    },\n  }),\n  PlaceholderPlugin.configure({\n    options: { disableEmptyPlaceholder: true },\n    render: { afterEditable: MediaUploadToast },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Plugins with createTPlatePlugin in TypeScript\nDESCRIPTION: Demonstrates how to create a typed code block plugin using createTPlatePlugin. The example shows defining plugin configuration types, setting default options, and extending the editor API and transforms with type safety.\n\nLANGUAGE: typescript\nCODE:\n```\ntype CodeBlockConfig = PluginConfig<\n  // key\n  'code_block',\n  // options\n  { syntax: boolean; syntaxPopularFirst: boolean },\n  // api\n  {\n    plugin: {\n      getSyntaxState: () => boolean;\n    };\n    toggleSyntax: () => void;\n  },\n  // transforms\n  {\n    insert: {\n      codeBlock: (options: { language: string }) => void;\n    }\n  }\n>;\n\nconst CodeBlockPlugin = createTPlatePlugin<CodeBlockConfig>({\n  key: 'code_block',\n  options: { syntax: true, syntaxPopularFirst: false },\n}).extendEditorApi<CodeBlockConfig['api']>(() => ({\n  plugin: {\n    getSyntaxState: () => true,\n  },\n  toggleSyntax: () => {},\n})).extendEditorTransforms<CodeBlockConfig['transforms']>(() => ({\n  insert: {\n    codeBlock: ({ editor, getOptions }) => {\n      editor.tf.insertBlock({ type: 'code_block', language: getOptions().language });\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Media Plugin Default Options for Media Embedding\nDESCRIPTION: Default configuration for the createMediaEmbedPlugin showing the transformer and rules for parsing different URL types. Includes parsers for Twitter URLs and video URLs with corresponding components.\n\nLANGUAGE: tsx\nCODE:\n```\noptions: {\n  transformUrl: parseIframeUrl,\n  rules: [\n    {\n      parser: parseTwitterUrl,\n      component: MediaEmbedTweet,\n    },\n    {\n      parser: parseVideoUrl,\n      component: MediaEmbedVideo,\n    },\n  ],\n},\n```\n\n----------------------------------------\n\nTITLE: Getting Node Type Associated with a Plugin\nDESCRIPTION: Demonstrates how to retrieve the node type associated with a specific plugin using the getType method, which is useful for type checking and node creation.\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraphType = editor.getType(ParagraphPlugin);\n```\n\n----------------------------------------\n\nTITLE: Using setNodes Transform in Slate\nDESCRIPTION: Sets properties on nodes at the specified location. This allows for changing multiple attributes of nodes while providing options for comparison, merging, and handling special cases.\n\nLANGUAGE: typescript\nCODE:\n```\nsetNodes(props: Partial<NodeProps<N>>, options?: SetNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Basic Setup for Plate Elements\nDESCRIPTION: Basic configuration for setting up plate basic elements with syntax highlighting for code blocks using lowlight with all languages.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BasicElementsPlugin, CodeBlockPlugin } from '@udecode/plate-basic-elements/react';\nimport { all, createLowlight } from 'lowlight';\n\n// Create a lowlight instance with all languages\nconst lowlight = createLowlight(all);\n\nconst plugins = [\n  // ...otherPlugins,\n  BasicElementsPlugin.configurePlugin(CodeBlockPlugin, {\n    options: {\n      lowlight,\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: 使用 .configure 覆盖插件配置\nDESCRIPTION: 展示如何使用 .configure 方法覆盖插件的现有配置，传入一个对象来修改插件选项。\n\nLANGUAGE: typescript\nCODE:\n```\nconst ConfiguredPlugin = MyPlugin.configure({\n  options: {\n    myOption: '新值',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Plate Components to Gatsby Project\nDESCRIPTION: Command to add Plate components to your components/plate-ui directory using the shadcx CLI tool. This adds the necessary UI components for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add -r plate\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Yjs Package\nDESCRIPTION: Command to install the @udecode/plate-yjs package required for implementing collaborative editing in Plate.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-yjs\n```\n\n----------------------------------------\n\nTITLE: Complete tsconfig.json Example for Plate\nDESCRIPTION: A comprehensive tsconfig.json configuration from the Plate template project, demonstrating all the recommended settings including moduleResolution set to \"bundler\".\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": false,\n    \"strictNullChecks\": true,\n    \"allowUnusedLabels\": false,\n    \"allowUnreachableCode\": false,\n    \"exactOptionalPropertyTypes\": false,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitOverride\": true,\n    \"noImplicitReturns\": false,\n    \"noPropertyAccessFromIndexSignature\": false,\n    \"noUncheckedIndexedAccess\": false,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n\n    \"isolatedModules\": true,\n\n    \"allowJs\": true,\n    \"checkJs\": false,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"preserve\",\n    \"module\": \"esnext\",\n    \"target\": \"es2022\",\n    \"moduleResolution\": \"bundler\",\n    \"moduleDetection\": \"force\",\n    \"resolveJsonModule\": true,\n    \"noEmit\": true,\n    \"incremental\": true,\n    \"sourceMap\": true,\n\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@/*\": [\".//*\"]\n    }\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"src/**/*.ts\",\n    \"src/**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Typed Transforms for Plate Editor\nDESCRIPTION: Demonstrates how to get type-safe transform methods for a specific plugin using the getTransforms method, allowing for safer and more predictable editor transformations.\n\nLANGUAGE: typescript\nCODE:\n```\nconst tf = editor.getTransforms(TablePlugin);\ntf.insert.tableRow(); // Type-safe transform method\n```\n\n----------------------------------------\n\nTITLE: Overriding Editor Methods Using New Structure\nDESCRIPTION: Example showing how to override existing editor methods using the new tf and api namespaces, which provides a cleaner way to extend editor functionality compared to the previous top-level methods approach.\n\nLANGUAGE: tsx\nCODE:\n```\n// For overriding existing methods only:\noverrideEditor(({ editor, tf: { deleteForward }, api: { isInline } }) => ({\n  transforms: {\n    deleteForward(options) {\n      // ...conditional override\n      deleteForward(options);\n    },\n  },\n  api: {\n    isInline(element) {\n      // ...conditional override\n      return isInline(element);\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using extendEditor for Integrating Legacy Slate Plugins in TypeScript\nDESCRIPTION: Example of using the extendEditor property to integrate legacy Slate plugins that require direct editor mutation. This demonstrates how to wrap the editor instance with a hypothetical withYjs integration.\n\nLANGUAGE: typescript\nCODE:\n```\nextendEditor: ({ editor }) => {\n  // Example: Integrating a legacy Slate plugin\n  return withYjs(editor);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Selection Plugin in Plate\nDESCRIPTION: Basic usage example showing how to configure the Block Selection plugin with the NodeId plugin, which is a prerequisite for the block selection functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin,\n  BlockSelectionPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Reference in Markdown\nDESCRIPTION: Git commit reference format for bug fixes. This shows how bug fixes are linked to specific commits and pull requests in the changelog.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#713](https://github.com/udecode/slate-plugins/pull/713) [`73b77853`](https://github.com/udecode/slate-plugins/commit/73b77853cb38f61d4bfb31a0d604e947c130ee0f) Thanks [@zbeyens](https://github.com/zbeyens)! - fix: added the core dep to avoid duplicated stores in the build\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Selection Plugin in Plate\nDESCRIPTION: Basic usage example showing how to configure the Block Selection plugin with the NodeId plugin, which is a prerequisite for the block selection functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { BlockSelectionPlugin } from '@udecode/plate-selection/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin,\n  BlockSelectionPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Editor with HTML String Content\nDESCRIPTION: Demonstrates how to initialize the Plate editor with HTML string content instead of a JSON structure. This allows importing content from HTML sources.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\nconst htmlValue = '<p>This is <b>bold</b> and <i>italic</i> text!</p>';\n\nexport default function BasicEditor() {\n  const editor = usePlateEditor({\n    // ...\n    value: htmlValue,\n  });\n\n  return (\n    <Plate editor={editor}>\n      <PlateContent />\n    </Plate>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Deserialization for Plugins\nDESCRIPTION: Demonstrates how to extend a plugin to customize its HTML deserialization behavior, including adding support for custom attributes and preserving specific information during the conversion process.\n\nLANGUAGE: ts\nCODE:\n```\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\n\nconst MyCodeBlockPlugin = CodeBlockPlugin.extend({\n  parsers: {\n    html: {\n      deserializer: {\n        parse: ({ element }) => {\n          const language = element.getAttribute('data-language');\n          const textContent = element.textContent || '';\n          const lines = textContent.split('\\n');\n\n          return {\n            type: CodeBlockPlugin.key,\n            language,\n            children: lines.map((line) => ({\n              type: 'code_line',\n              children: [{ text: line }],\n            })),\n          };\n        },\n        rules: [\n          // inherit existing rules\n          ...CodeBlockPlugin.parsers.html.deserializer.rules,\n          { validAttribute: 'data-language' },\n        ],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using mergeNodes Transform in Slate\nDESCRIPTION: Merges a node at the specified location with the previous node at the same depth. Resulting empty container nodes are removed, with options to customize the merging behavior.\n\nLANGUAGE: typescript\nCODE:\n```\nmergeNodes(options?: MergeNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Using Selectors in React Components with usePluginOption Hook\nDESCRIPTION: This snippet demonstrates how to use selectors in React components by accessing them with the usePluginOption hook, which re-renders only when the selector value changes.\n\nLANGUAGE: tsx\nCODE:\n```\nconst CounterComponent = () => {\n  const count = usePluginOption(CounterPlugin, 'count');\n  const doubleCount = usePluginOption(CounterPlugin, 'doubleCount');\n  const isEven = usePluginOption(CounterPlugin, 'isEven');\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <p>Double Count: {doubleCount}</p>\n      <p>Is Even: {isEven ? 'Yes' : 'No'}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Project with Plate UI using CLI\nDESCRIPTION: Command to initialize a new project with Plate UI. This installs dependencies, configures tailwind.config.js, and sets up CSS variables.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Syncing Plate Editor with Form on Blur\nDESCRIPTION: This snippet shows how to sync Plate editor content with form state only when the user leaves the editor (on blur) instead of on every keystroke. This approach reduces overhead for large documents.\n\nLANGUAGE: tsx\nCODE:\n```\n<Plate editor={editor}>\n  <PlateContent\n    onBlur={() => {\n      // Only sync on blur\n      setValue('content', editor.children);\n    }}\n  />\n</Plate>\n```\n\n----------------------------------------\n\nTITLE: Configuring Comments Plugin in Plate Editor\nDESCRIPTION: Example of how to configure the CommentsPlugin in a Plate editor instance. The plugin is configured with a BlockDiscussion component for rendering comments above nodes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CommentsPlugin } from '@udecode/plate-comments/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n  commentsPlugin.configure({\n    render: { aboveNodes: BlockDiscussion as any },\n  }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Context in Plugin Methods\nDESCRIPTION: Shows how to access the Plugin Context as the first parameter in plugin methods, allowing you to use the editor instance and plugin configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onKeyDown: (ctx) => {\n      // ctx is the Plugin Context\n      console.info(ctx.editor, ctx.plugin);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AlignPlugin with Plate editor\nDESCRIPTION: Example of how to configure and use the AlignPlugin with Plate editor. The plugin is targeted at Paragraph and Heading plugins to enable alignment functionality for those block types.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createPlateEditor } from '@udecode/plate/react';\nimport { AlignPlugin } from '@udecode/plate-alignment/react';\nimport { ParagraphPlugin } from '@udecode/plate/react';\nimport { HeadingPlugin } from '@udecode/plate-heading/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    HeadingPlugin,\n    AlignPlugin.configure({\n      inject: {\n        targetPlugins: [\n          ParagraphPlugin.key,\n          HeadingPlugin.key,\n        ],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Bold Formatting Transform in Plate\nDESCRIPTION: Complete example of testing a bold formatting transform, showing input state, expected output, editor creation with plugins, applying the transform, and asserting the result.\n\nLANGUAGE: typescript\nCODE:\n```\nit('should apply bold formatting', () => {\n  const input = (\n    <editor>\n      <hp>\n        Hello <anchor />\n        world\n        <focus />\n      </hp>\n    </editor>\n  ) as any as PlateEditor;\n\n  const output = (\n    <editor>\n      <hp>\n        Hello <htext bold>world</htext>\n      </hp>\n    </editor>\n  ) as any as PlateEditor;\n\n  const editor = createPlateEditor({\n    plugins: [BoldPlugin],\n    value: input.children,\n    selection: input.selection,\n  });\n\n  // Apply transform directly\n  editor.tf.toggleMark('bold');\n\n  expect(editor.children).toEqual(output.children);\n});\n```\n\n----------------------------------------\n\nTITLE: Working with Active Editor in PlateController\nDESCRIPTION: Demonstrates how to work with the currently active editor in PlateController without specifying an explicit ID. The code shows how to check if an editor is mounted and display appropriate messaging.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = withHoc(PlateController, () => {\n  const activeEditorId = useEditorId();\n  const isFallback = !useEditorMounted();\n  \n  const message = isFallback\n    ? 'Please focus an editor'\n    : `Active editor: ${activeEditorId}`;\n  \n  return (\n    <main>\n      <p>{message}</p>\n      \n      <Plate editor={createPlateEditor({ id: 'main', primary: false })}>\n        <PlateContent />\n      </Plate>\n    \n      <Plate editor={createPlateEditor({ id: 'secondary', primary: false })}>\n        <PlateContent />\n      </Plate>\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing the Editor Instance from Plugin Context\nDESCRIPTION: Shows how to access the current PlateEditor instance from the Plugin Context, which allows interaction with the editor's state and methods.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onChange: ({ editor }) => {\n      console.info('Editor value:', editor.children);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Function-Based Configuration with .configure Method in TypeScript\nDESCRIPTION: This snippet demonstrates how to use a function with .configure to access the current configuration before modifying it, allowing more dynamic configuration patterns.\n\nLANGUAGE: typescript\nCODE:\n```\nconst ConfiguredPlugin = MyPlugin.configure(({ getOptions }) => ({\n  options: {\n    ...getOptions(),\n    myOption: `${getOptions().myOption} + extra`,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding PlaywrightPlugin to Plate Editor Configuration\nDESCRIPTION: Code to add the PlaywrightPlugin to a Plate editor configuration. This plugin exposes utilities on the window object for Playwright tests to interact with the editor, and is configured to be disabled in production.\n\nLANGUAGE: tsx\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [\n    // other plugins...\n    PlaywrightPlugin.configure({ enabled: process.env.NODE_ENV !== 'production' }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Editor with MentionPlugin\nDESCRIPTION: Example of importing and adding the MentionPlugin to the Plate editor's plugin array. This enables mention functionality in the editor, allowing users to trigger mentions with configured characters.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MentionPlugin } from '@udecode/plate-mention/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  MentionPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate AI Editor and Prompt Templates\nDESCRIPTION: Complete configuration for the Plate AI plugin including editor creation, system and user prompt templates for different modes (default, selection, block selection), and plugin setup.\n\nLANGUAGE: tsx\nCODE:\n```\nexport const createAIEditor = () => {\n  const editor = createSlateEditor({\n    id: 'ai',\n    plugins: [\n      BaseBlockquotePlugin,\n      BaseBoldPlugin,\n      BaseCodeBlockPlugin,\n      BaseCodeLinePlugin,\n      BaseCodePlugin,\n      BaseCodeSyntaxPlugin,\n      BaseItalicPlugin,\n      BaseStrikethroughPlugin,\n      BaseUnderlinePlugin,\n      BaseHeadingPlugin,\n      BaseHorizontalRulePlugin,\n      BaseLinkPlugin,\n      BaseParagraphPlugin,\n      BaseIndentListPlugin.extend({\n        inject: {\n          targetPlugins: [\n            BaseParagraphPlugin.key,\n            ...HEADING_LEVELS,\n            BaseBlockquotePlugin.key,\n            BaseCodeBlockPlugin.key,\n          ],\n        },\n        options: {\n          listStyleTypes: {\n            todo: {\n              liComponent: TodoLiStatic,\n              markerComponent: TodoMarkerStatic,\n              type: 'todo',\n            },\n          },\n        },\n      }),\n      MarkdownPlugin.configure({ options: { indentList: true } }),\n    ],\n  });\n\n\n  return editor;\n};\n\nconst systemCommon = `\\\nYou are an advanced AI-powered note-taking assistant, designed to enhance productivity and creativity in note management.\nRespond directly to user prompts with clear, concise, and relevant content. Maintain a neutral, helpful tone.\n\nRules:\n- <Document> is the entire note the user is working on.\n- <Reminder> is a reminder of how you should reply to INSTRUCTIONS. It does not apply to questions.\n- Anything else is the user prompt.\n- Your response should be tailored to the user's prompt, providing precise assistance to optimize note management.\n- For INSTRUCTIONS: Follow the <Reminder> exactly. Provide ONLY the content to be inserted or replaced. No explanations or comments.\n- For QUESTIONS: Provide a helpful and concise answer. You may include brief explanations if necessary.\n- CRITICAL: Distinguish between INSTRUCTIONS and QUESTIONS. Instructions typically ask you to modify or add content. Questions ask for information or clarification.\n`;\n\nconst systemDefault = `\\\n${systemCommon}\n- <Block> is the current block of text the user is working on.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- CRITICAL: Provide only a single block of text. DO NOT create multiple paragraphs or separate blocks.\n<Block>\n{block}\n</Block>\n`;\n\nconst systemSelecting = `\\\n${systemCommon}\n- <Block> is the block of text containing the user's selection, providing context.\n- Ensure your output can seamlessly fit into the existing <Block> structure.\n- <Selection> is the specific text the user has selected in the block and wants to modify or ask about.\n- Consider the context provided by <Block>, but only modify <Selection>. Your response should be a direct replacement for <Selection>.\n<Block>\n{block}\n</Block>\n<Selection>\n{selection}\n</Selection>\n`;\n\nconst systemBlockSelecting = `\\\n${systemCommon}\n- <Selection> represents the full blocks of text the user has selected and wants to modify or ask about.\n- Your response should be a direct replacement for the entire <Selection>.\n- Maintain the overall structure and formatting of the selected blocks, unless explicitly instructed otherwise.\n- CRITICAL: Provide only the content to replace <Selection>. Do not add additional blocks or change the block structure unless specifically requested.\n<Selection>\n{block}\n</Selection>\n`;\n\nconst userDefault = `<Reminder>\nCRITICAL: DO NOT use block formatting. You can only use inline formatting.\nCRITICAL: DO NOT start new lines or paragraphs.\nNEVER write <Block>.\n</Reminder>\n{prompt}`;\n\nconst userSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the text to replace <Selection>. No explanations.\nEnsure it fits seamlessly within <Block>. If <Block> is empty, write ONE random sentence.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nconst userBlockSelecting = `<Reminder>\nIf this is a question, provide a helpful and concise answer about <Selection>.\nIf this is an instruction, provide ONLY the content to replace the entire <Selection>. No explanations.\nMaintain the overall structure unless instructed otherwise.\nNEVER write <Block> or <Selection>.\n</Reminder>\n{prompt} about <Selection>`;\n\nexport const PROMPT_TEMPLATES = {\n  systemBlockSelecting,\n  systemDefault,\n  systemSelecting,\n  userBlockSelecting,\n  userDefault,\n  userSelecting,\n};\n\nconst plugins = [\n  // ...otherPlugins,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  AIPlugin,\n  AIChatPlugin.configure({\n    options: {\n      createAIEditor,\n      promptTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.userBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.userSelecting\n            : PROMPT_TEMPLATES.userDefault;\n      },\n      systemTemplate: ({ isBlockSelecting, isSelecting }) => {\n        return isBlockSelecting\n          ? PROMPT_TEMPLATES.systemBlockSelecting\n          : isSelecting\n            ? PROMPT_TEMPLATES.systemSelecting\n            : PROMPT_TEMPLATES.systemDefault;\n      },\n    },\n    render: { afterEditable: () => <AIMenu /> },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Language Setup for Code Blocks\nDESCRIPTION: Optimized configuration for code blocks that registers only specific languages to reduce bundle size, with an optional default language setting.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createLowlight } from 'lowlight';\nimport css from 'highlight.js/lib/languages/css';\nimport js from 'highlight.js/lib/languages/javascript';\nimport ts from 'highlight.js/lib/languages/typescript';\nimport html from 'highlight.js/lib/languages/xml';\n\n// Create a lowlight instance\nconst lowlight = createLowlight();\n\n// Register only the languages you need\nlowlight.register('html', html);\nlowlight.register('css', css);\nlowlight.register('js', js);\nlowlight.register('ts', ts);\n\nconst plugins = [\n  BasicElementsPlugin.configurePlugin(CodeBlockPlugin, {\n    options: {\n      lowlight,\n      // Set default language (optional)\n      defaultLanguage: 'js',\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Plate Plugin Configuration Example in TypeScript\nDESCRIPTION: Example demonstrating how to define and use custom plugin configuration with typed options, API, and transforms. Creates a plugin with custom options and implementation details.\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyPluginConfig = PluginConfig<\n  'myPlugin',\n  { customOption: boolean },\n  { getData: () => string },\n  { customTransform: () => void }\n>;\n\nconst MyPlugin = createPlatePlugin<MyPluginConfig>({\n  key: 'myPlugin',\n  // plugin implementation\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up PlateEventProvider with withPlateEventProvider\nDESCRIPTION: Code for setting up a PlateEventProvider where the id is the event editor id, commonly used for toolbar buttons. Shows the HOC pattern with withPlateEventProvider.\n\nLANGUAGE: typescript\nCODE:\n```\n// Usage example of PlateEventProvider\nimport { PlateEventProvider, withPlateEventProvider } from '@udecode/plate';\n\n// Direct usage\n<PlateEventProvider>\n  {/* Toolbar buttons or other components */}\n</PlateEventProvider>\n\n// Usage with HOC\nconst ToolbarWithEventProvider = withPlateEventProvider(Toolbar);\n```\n\n----------------------------------------\n\nTITLE: Overriding Component Implementations in Plate Editor\nDESCRIPTION: Demonstrates how to override default component implementations for specific plugins in a Plate editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, HeadingPlugin],\n  override: {\n    components: {\n      [ParagraphPlugin.key]: CustomParagraphComponent,\n      [HeadingPlugin.key]: CustomHeadingComponent,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Provider in React with TypeScript\nDESCRIPTION: This component creates a context-based theme provider that manages light, dark, and system themes. It handles theme persistence in localStorage, applies the correct CSS classes to the document root, and provides a hook for theme access throughout the application.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"dark\" | \"light\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n  storageKey?: string\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Upload Hook in TypeScript\nDESCRIPTION: A custom implementation of the file upload hook using S3 presigned URLs. The hook handles file uploads, tracks progress, and reports completion or errors, compatible with Plate's upload interface.\n\nLANGUAGE: ts\nCODE:\n```\nexport function useUploadFile({ \n  onUploadComplete, \n  onUploadError, \n  onUploadProgress \n}: UseUploadFileProps = {}) {\n  const [uploadedFile, setUploadedFile] = useState<UploadedFile>();\n  const [uploadingFile, setUploadingFile] = useState<File>();\n  const [progress, setProgress] = useState(0);\n  const [isUploading, setIsUploading] = useState(false);\n\n  async function uploadFile(file: File) {\n    setIsUploading(true);\n    setUploadingFile(file);\n\n    try {\n      // Get presigned URL and final URL from your backend\n      const { presignedUrl, fileUrl, fileKey } = await fetch('/api/upload', {\n        method: 'POST',\n        body: JSON.stringify({\n          filename: file.name,\n          contentType: file.type,\n        }),\n      }).then(r => r.json());\n\n      // Upload to S3 using presigned URL\n      await axios.put(presignedUrl, file, {\n        headers: { 'Content-Type': file.type },\n        onUploadProgress: (progressEvent) => {\n          const progress = (progressEvent.loaded / progressEvent.total) * 100;\n          setProgress(progress);\n          onUploadProgress?.({ progress });\n        },\n      });\n\n      const uploadedFile = {\n        key: fileKey,\n        url: fileUrl,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n      };\n\n      setUploadedFile(uploadedFile);\n      onUploadComplete?.(uploadedFile);\n      \n      return uploadedFile;\n    } catch (error) {\n      onUploadError?.(error);\n      throw error;\n    } finally {\n      setProgress(0);\n      setIsUploading(false);\n      setUploadingFile(undefined);\n    }\n  }\n\n  return {\n    isUploading,\n    progress,\n    uploadFile,\n    uploadedFile,\n    uploadingFile,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-trip Serialization with Custom Nodes\nDESCRIPTION: Example configuration for the MarkdownPlugin to support round-trip serialization of custom nodes like a date picker by converting them to and from MDX syntax.\n\nLANGUAGE: tsx\nCODE:\n```\nMarkdownPlugin.configure({\n  options: {\n    remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n     nodes: {\n      date: {\n        deserialize(mdastNode: MdMdxJsxTextElement, deco, options) {\n          if (mdastNode.children?.[0] && 'value' in mdastNode.children[0]) {\n            return {\n              children: [{ text: '', type: 'text' }],\n              date: mdastNode.children[0].value,\n              type: 'date',\n            };\n          }\n\n          // Fallback\n          return {\n            children: [{ text: '', type: 'text' }],\n            date: '',\n            type: 'date',\n          };\n        },\n        serialize: (slateNode): MdMdxJsxTextElement => {\n          return {\n            attributes: [],\n            children: [{ type: 'text', value: slateNode.date || '1999-01-01' }],\n            name: 'date',\n            type: 'mdxJsxTextElement',\n          };\n        },\n      },\n    },\n    remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-trip Serialization with Custom Nodes\nDESCRIPTION: Example of configuring the MarkdownPlugin for round-trip serialization with custom MDX nodes, specifically handling a date picker component.\n\nLANGUAGE: tsx\nCODE:\n```\nMarkdownPlugin.configure({\n  options: {\n    remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n     nodes: {\n      date: {\n        deserialize(mdastNode: MdMdxJsxTextElement, deco, options) {\n          if (mdastNode.children?.[0] && 'value' in mdastNode.children[0]) {\n            return {\n              children: [{ text: '', type: 'text' }],\n              date: mdastNode.children[0].value,\n              type: 'date',\n            };\n          }\n\n          // Fallback\n          return {\n            children: [{ text: '', type: 'text' }],\n            date: '',\n            type: 'date',\n          };\n        },\n        serialize: (slateNode): MdMdxJsxTextElement => {\n          return {\n            attributes: [],\n            children: [{ type: 'text', value: slateNode.date || '1999-01-01' }],\n            name: 'date',\n            type: 'mdxJsxTextElement',\n          };\n        },\n      },\n    },\n    remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Plugin in Plate Editor\nDESCRIPTION: Example code showing how to import and configure the TablePlugin with initialization options, including setting the initial table width.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { TablePlugin } from '@udecode/plate-table/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  TablePlugin.configure({\n    options: {\n      initialTableWidth: 600,\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Selection Hooks\nDESCRIPTION: Various selection-related hooks for checking the state of the editor selection and accessing fragment properties.\n\nLANGUAGE: typescript\nCODE:\n```\nconst isCollapsed = useSelectionCollapsed();\nconst isExpanded = useSelectionExpanded();\nconst isWithinBlock = useSelectionWithinBlock();\nconst isAcrossBlocks = useSelectionAcrossBlocks();\nconst fragment = useSelectionFragment();\nconst fragmentProp = useSelectionFragmentProp('someProperty');\n```\n\n----------------------------------------\n\nTITLE: Setting Component with .withComponent Method in TypeScript\nDESCRIPTION: The withComponent method allows you to set or replace the component associated with a plugin, connecting the plugin's functionality to its visual representation.\n\nLANGUAGE: typescript\nCODE:\n```\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n    type: 'p',\n  },\n}).withComponent(ParagraphElement);\n```\n\n----------------------------------------\n\nTITLE: Styling Plate Components with CSS\nDESCRIPTION: Example of styling Plate components using global CSS. The CSS targets Slate-generated class names, where each node has a class name prefixed with 'slate-' followed by the node type.\n\nLANGUAGE: css\nCODE:\n```\n.slate-p {\n  margin-bottom: 1rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Slate JSON\nDESCRIPTION: Example of how to configure the MarkdownPlugin and use it to deserialize Markdown content into Slate JSON format.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\n\nconst editor = createPlateEditor({ \n  plugins: [\n    // ...其他插件,\n    MarkdownPlugin.configure({\n      options: {\n        remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n      },\n    }),\n  ],\n});\n\nconst value = editor.api.markdown.deserialize('**Hello world!**');\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Menu Plugins in Plate Editor\nDESCRIPTION: Configuration for setting up the Block Menu and Block Selection plugins. Enables the context menu functionality and renders the BlockContextMenu component above the editable area.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin,\n  BlockSelectionPlugin.configure({\n    options: {\n      enableContextMenu: true,\n    },\n  }),\n  BlockMenuPlugin.configure({\n    render: { aboveEditable: BlockContextMenu },\n  }),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Break Plugin in Plate\nDESCRIPTION: Example configuration for the SoftBreakPlugin with custom rules for different contexts. The plugin is configured to work with Shift+Enter globally and Enter key in specific block types.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SoftBreakPlugin } from '@udecode/plate-break/react';\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { TablePlugin } from '@udecode/plate-table/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  SoftBreakPlugin.configure({\n    options: {\n      rules: [\n        { hotkey: 'shift+enter' },\n        {\n          hotkey: 'enter',\n          query: {\n            allow: [CodeBlockPlugin.key, BlockquotePlugin.key, TablePlugin.key],\n          },\n        },\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Excalidraw Plugin in Plate\nDESCRIPTION: Example of how to import and configure the ExcalidrawPlugin in a Plate editor. Includes the SelectOnBackspace plugin configuration to allow backspace selection of Excalidraw elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExcalidrawPlugin } from '@udecode/plate-excalidraw/react';\nimport { SelectOnBackspace } from '@udecode/plate-select';\n\nconst plugins = [\n  // ...otherPlugins\n  ExcalidrawPlugin,\n  SelectOnBackspace.configure({\n    options: { query: { allow: [ExcalidrawPlugin.key] } },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Subscribable Selectors with .extendSelectors Method in TypeScript\nDESCRIPTION: The extendSelectors method allows you to add subscribable selectors to your plugin that create derived state or computed values from plugin options.\n\nLANGUAGE: typescript\nCODE:\n```\nconst CounterPlugin = createPlatePlugin({\n  key: 'counter',\n  options: {\n    count: 0,\n  },\n}).extendSelectors(({ getOptions }) => ({\n  doubleCount: () => getOptions().count * 2,\n  isEven: () => getOptions().count % 2 === 0,\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining TElement Interface in TypeScript for Slate\nDESCRIPTION: The core interface for Element objects in Slate. Elements are nodes that contain other Element nodes or Text nodes, with a required type property and children array. They can also have additional properties through the index signature.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TElement {\n  children: Descendant[]\n  type: string\n  [key: string]: unknown\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme Toggle Dropdown Component for React\nDESCRIPTION: This component provides a user interface for toggling between light, dark, and system themes. It includes animated icons that transition based on the current theme and a dropdown menu for theme selection.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Moon, Sun } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/components/theme-provider\"\n\nexport function ModeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\">\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Indent List Plugin in Plate\nDESCRIPTION: Example configuration for the IndentListPlugin, showing how to integrate it with the IndentPlugin and target specific element types. This setup allows paragraphs and h1 headings to be indented as list items.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { IndentListPlugin } from '@udecode/plate-indent-list/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HeadingPlugin } from '@udecode/plate-heading/react';\nimport { ParagraphPlugin } from '@udecode/plate/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  HeadingPlugin,\n  IndentPlugin.configure({\n    inject: {\n      targetPlugins: [ParagraphPlugin.key, HEADING_KEYS.h1],\n    }\n  }),\n  IndentListPlugin.configure({\n    inject: {\n      targetPlugins: [ParagraphPlugin.key, HEADING_KEYS.h1],\n    }\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin-Specific API Methods with .extendApi in TypeScript\nDESCRIPTION: The extendApi method adds plugin-specific API methods that can be accessed via editor.api.pluginKey.api.methodName().\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendApi(() => ({\n  pluginMethod: () => 'plugin method result',\n}));\n\n// Access the plugin's API\neditor.api.myPlugin.api.pluginMethod();\n```\n\n----------------------------------------\n\nTITLE: Configuring ExitBreakPlugin with Custom Rules\nDESCRIPTION: Example of how to configure the ExitBreakPlugin with custom rules for different hotkeys and behaviors, including special handling for heading elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExitBreakPlugin } from '@udecode/plate-break/react';\nimport { HEADING_LEVELS } from '@udecode/plate-heading';\n\nconst plugins = [\n  // ...otherPlugins,\n  ExitBreakPlugin.configure({\n    options: {\n      rules: [\n        {\n          hotkey: 'mod+enter',\n        },\n        {\n          hotkey: 'mod+shift+enter',\n          before: true,\n        },\n        {\n          hotkey: 'enter',\n          query: {\n            start: true,\n            end: true,\n            allow: HEADING_LEVELS,\n          },\n          relative: true,\n          level: 1,\n        },\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Custom Warning Colors in React Components\nDESCRIPTION: Example of using the custom warning color utility classes in a React component after adding them to Tailwind configuration.\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-warning text-warning-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Function-Based Plugin Extension with .extend Method in TypeScript\nDESCRIPTION: Using a function with .extend gives you access to both the editor and plugin, allowing for more complex extension patterns including custom handlers.\n\nLANGUAGE: typescript\nCODE:\n```\nconst ExtendedPlugin = MyPlugin.extend(({ editor, plugin }) => ({\n  options: {\n    newOption: 'new value',\n  },\n  handlers: {\n    onKeyDown: () => {\n      // Custom key down logic\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing Media Plugins from Plate\nDESCRIPTION: Imports various media-related plugins from the Plate library, including audio, file, image, media embed, placeholder, and video plugins, as well as the select on backspace plugin.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AudioPlugin,\n  FilePlugin,\n  ImagePlugin,\n  MediaEmbedPlugin,\n  PlaceholderPlugin,\n  VideoPlugin,\n} from '@udecode/plate-media/react';\nimport { SelectOnBackspacePlugin } from '@udecode/plate-select';\n```\n\n----------------------------------------\n\nTITLE: Using Primary CSS Variables in React Components\nDESCRIPTION: Example of applying the primary and primary-foreground CSS variables to a React component using Tailwind utility classes that reference these variables.\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-primary text-primary-foreground\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Using PlateController for Accessing Editor Outside Plate Component\nDESCRIPTION: Shows how to access the editor instance outside the Plate component hierarchy using the PlateController component, which manages active editors and provides context for editor-related hooks.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlateController } from '@udecode/plate/react';\n\nconst App = () => (\n  <PlateController>\n    <Toolbar />\n    <MyEditor />\n  </PlateController>\n);\n\nconst Toolbar = () => {\n  const editor = useEditorState();\n  const isMounted = useEditorMounted();\n  // Use editor methods here\n};\n```\n\n----------------------------------------\n\nTITLE: Using replaceNodes Transform in Slate\nDESCRIPTION: Replaces nodes at a location with new nodes. This combines removing existing nodes and inserting new ones in a single operation, with options to customize both aspects.\n\nLANGUAGE: typescript\nCODE:\n```\nreplaceNodes(nodes: N | N[], options?: ReplaceNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Using Plate Editor with shadcn/ui Form Component\nDESCRIPTION: This example shows how to integrate the Plate editor with shadcn/ui Form components. It uses FormField to handle the field logic and syncs the editor content with form state via onChange events.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { useForm } from 'react-hook-form';\nimport { Plate, PlateContent, usePlateEditor } from '@udecode/plate/react';\n\ntype FormValues = {\n  content: any;\n};\n\nexport function EditorForm() {\n  // 1. Create the form\n  const form = useForm<FormValues>({\n    defaultValues: {\n      content: [\n        { type: 'p', children: [{ text: 'Hello from shadcn/ui Form!' }] },\n      ],\n    },\n  });\n\n  // 2. Create the Plate editor\n  const editor = usePlateEditor();\n\n  const onSubmit = (data: FormValues) => {\n    console.info('Submitted data:', data.content);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name=\"content\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Content</FormLabel>\n              <FormControl>\n                <Plate\n                  editor={editor}\n                  onChange={({ value }) => {\n                    // Sync to the form\n                    field.onChange(value);\n                  }}\n                >\n                  <PlateContent placeholder=\"Type...\" />\n                </Plate>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </Form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Template Using CLI\nDESCRIPTION: Command to initialize a new project using the shadcx CLI to create a Plate editor template with Next.js 15.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Plugin Options\nDESCRIPTION: Demonstrates how to set multiple options for a plugin at once using the setOptions method, with both object and Immer function approaches for updating configuration.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setOptions(FindReplacePlugin, {\n  search: 'hello',\n  caseSensitive: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of AutoformatPlugin in Plate\nDESCRIPTION: Example of how to import and configure the AutoformatPlugin in a Plate editor instance. The configuration includes rules and the option to enable undo on delete.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  AutoformatPlugin.configure({\n    options: {\n      rules: autoformatRules,\n      enableUndoOnDelete: true,\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Shortcuts to Plate Plugins in TypeScript\nDESCRIPTION: A basic example showing how to add a toggle paragraph shortcut to a Plate plugin. The shortcut is configured with a handler function that toggles the paragraph block and is bound to two key combinations.\n\nLANGUAGE: typescript\nCODE:\n```\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  shortcuts: {\n    toggleParagraph: {\n      handler: ({ editor }) => {\n        editor.toggleBlock({ type: 'p' });\n      },\n      keys: ['mod+opt+0', 'mod+shift+0'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Utility Classes for Theming in React\nDESCRIPTION: This example demonstrates using Tailwind CSS utility classes for theming with dark mode support. The div uses zinc-950 background color in light mode and white background in dark mode.\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-zinc-950 dark:bg-white\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Plate DOCX and Juice Plugins\nDESCRIPTION: Command to install the required packages for DOCX serialization in Plate. The @udecode/plate-docx package handles DOCX conversion while @udecode/plate-juice handles CSS inlining.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-docx @udecode/plate-juice\n```\n\n----------------------------------------\n\nTITLE: Using removeNodes Transform in Slate\nDESCRIPTION: Removes nodes at a specified location. It provides options to control whether to remove just the target node or also its children, handle hanging selections, and more.\n\nLANGUAGE: typescript\nCODE:\n```\nremoveNodes(options?: RemoveNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Playwright E2E Tests\nDESCRIPTION: Commands to install Playwright browsers and dependencies, and to run end-to-end tests in headless browsers.\n\nLANGUAGE: bash\nCODE:\n```\nyarn playwright install # first time\n\nyarn e2e\n```\n\n----------------------------------------\n\nTITLE: Creating a CodeLeaf Component with PlateLeaf in React\nDESCRIPTION: Implementation of a custom Leaf component for code formatting using PlateLeaf wrapper. This component properly applies all required Slate props to the code HTML element.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PlateLeaf, PlateLeafProps } from '@udecode/plate/react';\n\nexport function CodeLeaf({ className, children, ...props }: PlateLeafProps) {\n  return (\n    <PlateLeaf asChild className={className} {...props}>\n      <code>{children}</code>\n    </PlateLeaf>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating from components prop to plugin factory in Plate\nDESCRIPTION: Shows how to migrate from the removed components prop to using either the plugin factory pattern or createPlugins function with a components object.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Plate plugins={plugins} components={components} />;\n\n// After\n// option 1: use the plugin factory\nlet plugins = [\n  createParagraphPlugin({\n    component: ParagraphElement,\n  }),\n];\n\n// option 2: use createPlugins\nplugins = createPlugins(plugins, {\n  components: {\n    [ELEMENT_PARAGRAPH]: ParagraphElement,\n  },\n});\n\n<Plate plugins={plugins} />;\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Primary Colors\nDESCRIPTION: Example of CSS variable definitions for primary and primary-foreground colors using HSL format. These variables define the main theme colors that can be used throughout the application.\n\nLANGUAGE: css\nCODE:\n```\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\n```\n\n----------------------------------------\n\nTITLE: Configuring Reset Node Plugin in Plate\nDESCRIPTION: Example showing how to configure the Reset Node plugin with various rules for handling key events in different block types. Includes rules for handling Enter and Backspace in blockquotes, todo lists, and code blocks.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport {\n  isBlockAboveEmpty,\n  isSelectionAtBlockStart,\n} from '@udecode/plate';\nimport { ResetNodePlugin } from '@udecode/plate-reset-node/react';\n\nconst resetBlockTypesCommonRule = {\n  types: [BlockquotePlugin.key, TodoListPlugin.key],\n  defaultType: ParagraphPlugin.key,\n};\n\nconst resetBlockTypesCodeBlockRule = {\n  types: [CodeBlockPlugin.key],\n  defaultType: ParagraphPlugin.key,\n  onReset: unwrapCodeBlock,\n};\n\nconst plugins = [\n  // ...otherPlugins,\n  ResetNodePlugin.configure({\n    options: {\n      rules: [\n        {\n          ...resetBlockTypesCommonRule,\n          hotkey: 'Enter',\n          predicate: isBlockAboveEmpty,\n        },\n        {\n          ...resetBlockTypesCommonRule,\n          hotkey: 'Backspace',\n          predicate: isSelectionAtBlockStart,\n        },\n        {\n          ...resetBlockTypesCodeBlockRule,\n          hotkey: 'Enter',\n          predicate: isCodeBlockEmpty,\n        },\n        {\n          ...resetBlockTypesCodeBlockRule,\n          hotkey: 'Backspace',\n          predicate: isSelectionAtCodeBlockStart,\n        },\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Overriding Editor Methods\nDESCRIPTION: Demonstrates how to use the overrideEditor method to modify existing editor functionality while maintaining access to the original implementations.\n\nLANGUAGE: ts\nCODE:\n```\nconst CustomPlugin = createPlatePlugin({\n  key: 'custom',\n}).overrideEditor(({ editor, tf: { deleteForward }, api: { isInline } }) => ({\n  // Override transforms\n  transforms: {\n    deleteForward(options) {\n      // Custom logic before deletion\n      console.info('Deleting forward...');\n      \n      // Call original transform\n      deleteForward(options);\n      \n      // Custom logic after deletion\n      console.info('Deleted forward');\n    },\n  },\n  // Override API methods\n  api: {\n    isInline(element) {\n      // Custom inline element check\n      if (element.type === 'custom-inline') {\n        return true;\n      }\n      \n      // Fall back to original behavior\n      return isInline(element);\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Combobox Component in Plate.js\nDESCRIPTION: Example implementation of a combobox component that uses both useComboboxInput and useHTMLInputCursorState hooks. This component handles input events, cursor tracking, and text insertion in the editor.\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyCombobox = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const cursorState = useHTMLInputCursorState(inputRef);\n\n  const { props: inputProps, removeInput } = useComboboxInput({\n    ref: inputRef,\n    cursorState,\n    cancelInputOnBlur: false,\n    onCancelInput: (cause) => {\n      if (cause !== 'backspace') {\n        insertText(editor, trigger + value);\n      }\n      if (cause === 'arrowLeft' || cause === 'arrowRight') {\n        moveSelection(editor, {\n          distance: 1,\n          reverse: cause === 'arrowLeft',\n        });\n      }\n    },\n  });\n\n  return <input ref={inputRef} {...inputProps} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Plugin Options\nDESCRIPTION: Shows how to set a specific option value for a plugin using the setOption method, enabling runtime configuration of plugin behavior.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setOption(FindReplacePlugin, 'search', 'hello');\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Rule Plugin\nDESCRIPTION: Example of how to configure the Horizontal Rule plugin with autoformatting capabilities. It includes setup for turning typed dashes into a horizontal rule and handling backspace selection behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { insertNodes, setNodes } from '@udecode/plate';\nimport { AutoformatPlugin } from '@udecode/plate-autoformat/react';\nimport { ParagraphPlugin } from '@udecode/plate/react';\nimport { HorizontalRulePlugin } from '@udecode/plate-horizontal-rule/react';\nimport { SelectOnBackspacePlugin } from '@udecode/plate-select/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  HorizontalRulePlugin,\n  SelectOnBackspacePlugin.configure({\n    options: { query: { allow: [HorizontalRulePlugin.key] } },\n  }),\n  AutoformatPlugin.configure({\n    options: {\n      rules: [\n        {\n          mode: 'block',\n          type: HorizontalRulePlugin.key,\n          match: ['---', '—-', '___ '],\n          format: (editor) => {\n            setNodes(editor, { type: HorizontalRulePlugin.key });\n            insertNodes(editor, {\n              type: ParagraphPlugin.key,\n              children: [{ text: '' }],\n            });\n          },\n        },\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Indent Plugin\nDESCRIPTION: Example of how to configure the IndentPlugin with target plugins. This shows how to set up the IndentPlugin to work with paragraph and heading elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading';\nimport { HeadingPlugin } from '@udecode/plate-heading/react';\nimport { ParagraphPlugin } from '@udecode/plate/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  HeadingPlugin,\n  IndentPlugin.configure({\n    inject: {\n      targetPlugins: [ParagraphPlugin.key, HEADING_KEYS.h1],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: PlateEditableProps Interface Definition in TypeScript\nDESCRIPTION: Defines the PlateEditableProps interface that extends TEditableProps and includes additional properties for customizing the PlateEditable component, such as children, editableRef, and renderEditable.\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface PlateEditableExtendedProps {\n  id?: PlateId;\n\n  /** The children rendered inside `Slate`, after `Editable`. */\n  children?: ReactNode;\n\n  /** Ref to the `Editable` component. */\n  editableRef?: Ref<HTMLDivElement>;\n\n  /**\n   * The first children rendered inside `Slate`, before `Editable`. Slate DOM is\n   * not yet resolvable on first render, for that case use `children` instead.\n   */\n  firstChildren?: ReactNode;\n\n  /** Custom `Editable` node. */\n  renderEditable?: (editable: ReactNode) => ReactNode;\n}\n\nexport interface PlateEditableProps<V extends Value = Value>\n  extends Omit<TEditableProps<V>, 'id'>,\n    PlateEditableExtendedProps {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-selection in Plate Editor\nDESCRIPTION: Shows how to configure the Plate editor to automatically select a range of content, such as the start or end of the document.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin],\n  autoSelect: 'end', // or 'start', or true\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Suggestion Plugin\nDESCRIPTION: Example of how to configure and include the SuggestionPlugin in the Plate editor. This shows how to set up the plugin with custom rendering for suggestion nodes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SuggestionPlugin } from '@udecode/plate-suggestion/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // ...otherPlugins,\n  suggestionPlugin.configure({\n    render: { belowNodes: SuggestionBelowNodes as any },\n  }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers in Plugins\nDESCRIPTION: Shows how to add event handlers to a plugin to respond to user actions, such as changes to the editor content and key presses.\n\nLANGUAGE: ts\nCODE:\n```\nconst ExamplePlugin = createPlatePlugin({\n  key: 'example',\n  handlers: {\n    onChange: ({ editor, value })  => {\n      console.info(editor, value);\n    },\n    onKeyDown: ({ editor, event }) => {\n      console.info(`You pressed ${event.key}`);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Major Release Announcement in Version 1.0.0\nDESCRIPTION: Announcement of the project name change from Slate Plugins to Plate with migration instructions for users.\n\nLANGUAGE: markdown\nCODE:\n```\n🎉 The **Slate Plugins** project has evolved to **Plate** 🎉\n\nTo migrate, install `@udecode/plate[-x]` then find and replace all\noccurrences of:\n\n- `slate-plugins` to `plate`\n- `SlatePlugins` to `Plate`\n- `SlatePlugin` to `PlatePlugin`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Instances in Plate Editor\nDESCRIPTION: Shows how to retrieve plugin instances by either providing the plugin directly or specifying its key, which is useful for accessing plugin-specific functionality.\n\nLANGUAGE: typescript\nCODE:\n```\nconst paragraphPlugin = editor.getPlugin(ParagraphPlugin);\nconst headingPlugin = editor.getPlugin({ key: 'heading' });\n```\n\n----------------------------------------\n\nTITLE: Using setOption to Modify a Specific Plugin Option\nDESCRIPTION: Shows how to use the setOption function to update a specific option value in the plugin configuration, enabling dynamic configuration changes.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { count: 0 },\n  handlers: {\n    onClick: ({ setOption }) => {\n      setOption('count', 1);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Length in Plate Editor\nDESCRIPTION: Demonstrates how to set a maximum character length for content in a Plate editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin],\n  maxLength: 100,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Emoji Plugin in Plate Editor\nDESCRIPTION: Implementation of the Emoji plugin in a Plate editor setup. It imports the necessary components and configures the emoji plugin with emoji-mart data.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmojiPlugin } from '@udecode/plate-emoji/react';\nimport emojiMartData from '@emoji-mart/data';\n\nconst plugins = [\n  // ...otherPlugins,\n  EmojiPlugin.configure({ options: { data: emojiMartData } }),\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Root-Level Shortcuts in Plate Editor with TypeScript\nDESCRIPTION: This snippet demonstrates how to define global shortcuts at the root editor level, which have the highest priority by default and apply across all plugins.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [/* your plugins */],\n  shortcuts: {\n    globalShortcut: {\n      handler: () => console.info('Global shortcut triggered'),\n      keys: 'mod+g',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Select Component with Plate\nDESCRIPTION: Example of using the SelectEditor component to create a multi-select interface. This shows how to set up a select editor with predefined items, handle state changes, and structure the UI components.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MultiSelectPlugin } from '@udecode/plate-tag/react';\nimport { TagElement } from '@/components/plate-ui/tag-element';\nimport {\n  SelectEditor,\n  SelectEditorContent,\n  SelectEditorInput,\n  SelectEditorCombobox,\n  type SelectItem,\n} from '@/components/plate-ui/select-editor';\n\n// Define your items\nconst ITEMS: SelectItem[] = [\n  { value: 'React' },\n  { value: 'TypeScript' },\n  { value: 'JavaScript' },\n];\n\nexport default function MySelectEditor() {\n  const [value, setValue] = React.useState<SelectItem[]>([ITEMS[0]]);\n\n  return (\n    <SelectEditor\n      value={value}\n      onValueChange={setValue}\n      items={ITEMS}\n    >\n      <SelectEditorContent>\n        <SelectEditorInput placeholder=\"Select items...\" />\n        <SelectEditorCombobox />\n      </SelectEditorContent>\n    </SelectEditor>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting FloatingArrow Component in Plate Floating Package\nDESCRIPTION: Adds export for the FloatingArrow component, making it available for use in custom implementations of floating UI elements.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3429](https://github.com/udecode/plate/pull/3429) by [@nklhtv](https://github.com/nklhtv) – export FloatingArrow\n```\n\n----------------------------------------\n\nTITLE: Using DebugPlugin Methods in Plate Editor\nDESCRIPTION: Demonstrates how to access and use the DebugPlugin logging methods through the Plate editor's API. The plugin provides different log levels for various severity of messages.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [/* your plugins */],\n});\n\neditor.api.debug.log('This is a log message');\neditor.api.debug.info('This is an info message');\neditor.api.debug.warn('This is a warning');\neditor.api.debug.error('This is an error');\n```\n\n----------------------------------------\n\nTITLE: Creating a Full HTML Document from Serialized Content\nDESCRIPTION: Shows how to wrap the serialized HTML in a complete HTML document structure that includes necessary styles and CSS files to ensure proper rendering of the content.\n\nLANGUAGE: tsx\nCODE:\n```\n// After serializing the content:\nconst html = await serializeHtml(editor, {\n  components,\n  editorComponent: EditorStatic,\n  props: { variant: 'none' },\n});\n\n// Wrap the HTML in a full HTML document\nconst fullHtml = `<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"/path/to/tailwind.css\" />\n    <!-- other head elements -->\n  </head>\n  <body>\n    ${html}\n  </body>\n</html>`;\n```\n\n----------------------------------------\n\nTITLE: Using setOptions to Modify Multiple Plugin Options\nDESCRIPTION: Demonstrates how to use the setOptions function to update multiple option values in the plugin configuration, which is efficient when changing several settings at once.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { option1: 'value1', option2: 'value2' },\n  handlers: {\n    onClick: ({ setOptions }) => {\n      setOptions({\n        option1: 'newValue1',\n        option2: 'newValue2',\n      });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Full HTML Document from Serialized Content\nDESCRIPTION: Shows how to wrap the serialized HTML in a complete HTML document structure that includes necessary styles and CSS files to ensure proper rendering of the content.\n\nLANGUAGE: tsx\nCODE:\n```\n// After serializing the content:\nconst html = await serializeHtml(editor, {\n  components,\n  editorComponent: EditorStatic,\n  props: { variant: 'none' },\n});\n\n// Wrap the HTML in a full HTML document\nconst fullHtml = `<!DOCTYPE html>\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"/path/to/tailwind.css\" />\n    <!-- other head elements -->\n  </head>\n  <body>\n    ${html}\n  </body>\n</html>`;\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Priority\nDESCRIPTION: Demonstrates how to control the order of plugin registration and execution using the priority property.\n\nLANGUAGE: ts\nCODE:\n```\nconst HighPriorityPlugin = createPlatePlugin({\n  key: 'highPriority',\n  priority: 100,\n});\n\nconst LowPriorityPlugin = createPlatePlugin({\n  key: 'lowPriority',\n  priority: 50,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TMediaElement Interface in TypeScript\nDESCRIPTION: TypeScript interface that extends TElement to define the structure of media elements in Plate. It includes properties for URL, optional ID, alignment options, upload status, name, and placeholder ID.\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface TMediaElement extends TElement {\n  url: string;\n  id?: string;\n  align?: 'center' | 'left' | 'right';\n  isUpload?: boolean;\n  name?: string;\n  placeholderId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Deserialization in Plate\nDESCRIPTION: Example showing how to extend a plugin to customize its HTML deserialization behavior by adding support for additional attributes and modifying the parsing logic.\n\nLANGUAGE: ts\nCODE:\n```\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\n\nconst MyCodeBlockPlugin = CodeBlockPlugin.extend({\n  parsers: {\n    html: {\n      deserializer: {\n        parse: ({ element }) => {\n          const language = element.getAttribute('data-language');\n          const textContent = element.textContent || '';\n          const lines = textContent.split('\\n');\n\n          return {\n            type: CodeBlockPlugin.key,\n            language,\n            children: lines.map((line) => ({\n              type: 'code_line',\n              children: [{ text: line }],\n            })),\n          };\n        },\n        rules: [\n          // 继承现有规则\n          ...CodeBlockPlugin.parsers.html.deserializer.rules,\n          { validAttribute: 'data-language' },\n        ],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Horizontal Rule Package\nDESCRIPTION: Command to install the Horizontal Rule package for Plate editor via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-horizontal-rule\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Plugins with Caption Support\nDESCRIPTION: Sets up the plugin configuration array, including media plugins and the CaptionPlugin. The CaptionPlugin is configured with media plugins that should support captions.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  ImagePlugin,\n  VideoPlugin,\n  AudioPlugin,\n  FilePlugin,\n  MediaEmbedPlugin,\n  CaptionPlugin.configure({\n    options: {\n      plugins: [\n        ImagePlugin,\n        VideoPlugin,\n        AudioPlugin,\n        FilePlugin,\n        MediaEmbedPlugin,\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing the Plate Node ID Package\nDESCRIPTION: Command to install the @udecode/plate-node-id package using npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-node-id\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Configurations in Plate Editor\nDESCRIPTION: Shows how to override specific plugin configurations in a Plate editor, such as providing custom options.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, HeadingPlugin],\n  override: {\n    plugins: {\n      [ParagraphPlugin.key]: {\n        options: {\n          customOption: true,\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deserializing HTML to Slate in Plate\nDESCRIPTION: Example showing how to convert HTML content back to Slate nodes using the editor's HTML deserializer API.\n\nLANGUAGE: ts\nCODE:\n```\nimport { createPlateEditor } from '@udecode/plate/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // 所有你想要反序列化的插件\n  ],\n});\n\n// 你可以反序列化 HTML 字符串\neditor.children = editor.api.html.deserialize('<p>Hello, world!</p>');\n\n// 或者反序列化从 Plate 导出的 HTML\nconst exportedHtml = await serializeHtml(editor, { components });\nconst importedValue = editor.api.html.deserialize(exportedHtml);\neditor.children = importedValue;\n```\n\n----------------------------------------\n\nTITLE: Replacing slate dependencies with integrated packages\nDESCRIPTION: Instructions for removing direct Slate dependencies as they're now integrated into the plate package. The `createTEditor` function has been renamed to `createEditor` and returns an editor with API methods organized under namespaces.\n\nLANGUAGE: bash\nCODE:\n```\n- Remove `slate`, `slate-dom`, `slate-react`, `slate-history` and `slate-hyperscript` from your dependencies.\n```\n\n----------------------------------------\n\nTITLE: 使用 .overrideEditor 覆盖编辑器方法\nDESCRIPTION: 展示如何使用 .overrideEditor 方法覆盖现有的编辑器方法，同时保持对原始方法的访问。\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).overrideEditor(({ editor, tf: { insertText }, api: { isInline } }) => ({\n  transforms: {\n    insertText(text, options) {\n      // 覆盖 insertText 行为\n      insertText(text, options);\n    },\n  },\n  api: {\n    isInline(element) {\n      // 覆盖 isInline 行为\n      return isInline(element);\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Plugins with Dangerous Attribute Allowlisting in TypeScript\nDESCRIPTION: Example demonstrating how to safely extend existing plugins to include allowlisted attributes using the extend method, which is necessary for configuring DOM attribute security.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyImagePlugin = ImagePlugin.extend({\n  node: {\n    dangerouslyAllowAttributes: ['alt'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Toggle Plugin with Required Dependencies\nDESCRIPTION: Example of how to configure the Toggle plugin along with its required dependencies (Indent and Node ID plugins) in a Plate editor instance.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ParagraphPlugin } from '@udecode/plate/react';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\nimport { IndentPlugin } from '@udecode/plate-indent/react';\nimport { TogglePlugin } from '@udecode/plate-toggle/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  HeadingPlugin,\n  IndentPlugin.configure({\n    inject: {\n      targetPlugins: [TogglePlugin.key, ParagraphPlugin.key, HEADING_KEYS.h1],\n    },\n  }),\n  NodeIdPlugin,\n  TogglePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Types in Slate\nDESCRIPTION: The base Operation type definition that represents all possible operations in Slate. Operations are the low-level instructions used by Slate editors to apply changes to their internal state.\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Operation<N extends Descendant = Descendant> =\n  | NodeOperation<N>\n  | SelectionOperation\n  | TextOperation;\n```\n\n----------------------------------------\n\nTITLE: Using Plugin Options in React Components\nDESCRIPTION: Shows how to use the usePluginOption hook to subscribe to plugin store changes in React components for reactive UI updates.\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  const count = usePluginOption(MyPlugin, 'count');\n  return <div>Count: {count}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Normalizers Package\nDESCRIPTION: Command to install the plate-normalizers package which provides forced layout functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-normalizers\n```\n\n----------------------------------------\n\nTITLE: Customizing Tabbable Elements with isTabbable Option\nDESCRIPTION: Shows how to override the isTabbable function to support DOM elements contained in specific types of Slate nodes.\n\nLANGUAGE: tsx\nCODE:\n```\n// Enable tabbable DOM elements inside CUSTOM_ELEMENT\nisTabbable: (tabbableEntry) => (\n  tabbableEntry.slateNode.type === CUSTOM_ELEMENT ||\n  isVoid(editor, tabbableEntry.slateNode)\n),\n```\n\n----------------------------------------\n\nTITLE: Element and Text API Namespace Migrations in Plate\nDESCRIPTION: Documents functions moved to ElementApi and TextApi namespaces for better organization and consistency. These functions handle operations specific to element and text nodes.\n\nLANGUAGE: typescript\nCODE:\n```\nelementMatches -> ElementApi.matches\nisElement -> ElementApi.isElement\nisElementList -> ElementApi.isElementList\n\nisText -> TextApi.isText(at)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for File Upload Hook Props\nDESCRIPTION: Interface definition for the file upload hook props, specifying the callback functions and configuration options required for file upload functionality.\n\nLANGUAGE: ts\nCODE:\n```\ninterface UseUploadFileProps {\n  onUploadComplete?: (file: UploadedFile) => void;\n  onUploadError?: (error: unknown) => void;\n  headers?: Record<string, string>;\n  onUploadBegin?: (fileName: string) => void;\n  onUploadProgress?: (progress: { progress: number }) => void;\n  skipPolling?: boolean;\n}\n\ninterface UploadedFile {\n  key: string;    // Unique identifier\n  url: string;    // Public URL of the uploaded file\n  name: string;   // Original filename\n  size: number;   // File size in bytes\n  type: string;   // MIME type\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Debug Plugin Methods in Plate Editor\nDESCRIPTION: Examples of the DebugPlugin API methods for logging messages at different levels in a Plate editor instance.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.debug.log(...args: any[])\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.debug.info(...args: any[])\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.debug.warn(...args: any[])\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.debug.error(...args: any[])\n```\n\n----------------------------------------\n\nTITLE: Configuring the NodeIdPlugin\nDESCRIPTION: Example of configuring the NodeIdPlugin with custom options including idKey, filters, and custom ID generator.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin.configure({\n    options: {\n      idKey: 'id',\n      filterInline: true,\n      filterText: true,\n      idCreator: () => nanoid(10),\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Overriding Core Plugins in Plate Editor\nDESCRIPTION: Shows how to override core plugins or previously defined plugins by adding a plugin with the same key.\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  // Custom implementation\n});\n\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, CustomParagraphPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json Exports for Server Bundle\nDESCRIPTION: JSON configuration for package.json to define the exports for both client and server bundles, including type definitions and different module formats.\n\nLANGUAGE: json\nCODE:\n```\n\"exports\": {\n  \".\": {\n    \"types\": \"./dist/index.d.ts\",\n    \"import\": \"./dist/index.mjs\",\n    \"module\": \"./dist/index.mjs\",\n    \"require\": \"./dist/index.js\"\n  },\n  \"./server\": {\n    \"types\": \"./dist/server.d.ts\",\n    \"import\": \"./dist/server.mjs\",\n    \"module\": \"./dist/server.mjs\",\n    \"require\": \"./dist/server.js\"\n  }\n},\n```\n\n----------------------------------------\n\nTITLE: Converting Custom Elements to Plate Plugins\nDESCRIPTION: Shows how to convert Slate's custom element rendering to Plate's plugin-based approach for element definitions and styling.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nconst renderElement = useCallback(({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'paragraph':\n      return <p {...attributes}>{children}</p>;\n    // ... other cases\n  }\n}, []);\n\n// After\nimport { withCn, type PlateElement } from '@udecode/plate/react';\n\nconst ParagraphElement = withRef<typeof PlateElement>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <PlateElement\n        asChild\n        className={cn('py-1', className)}\n        ref={ref}\n        {...props}\n      >\n        <p>{children}</p>\n      </PlateElement>\n    );\n  }\n);\n\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n    type: 'paragraph',\n    component: ParagraphElement,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Schema in components.json\nDESCRIPTION: Basic configuration showing how to reference the JSON Schema for components.json.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Plugins in Plate Editor\nDESCRIPTION: Demonstrates how to disable specific plugins in a Plate editor configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, HeadingPlugin, ListPlugin],\n  override: {\n    enabled: {\n      [HistoryPlugin.key]: false,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with bundler moduleResolution\nDESCRIPTION: Sets up TypeScript configuration with the bundler moduleResolution option, which is the recommended approach for modern bundlers like Vite and Next.js 14 when working with Plate.\n\nLANGUAGE: jsonc\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    // ...\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Plugin Creation Pattern in TypeScript\nDESCRIPTION: Demonstrates the new approach to creating plugins using createSlatePlugin and toPlatePlugin, showing the separation between vanilla Slate plugins and React plugins.\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin = createSlatePlugin({\n  key: 'myPlugin',\n  node: {\n    isElement: true,\n    component: MyComponent,\n  },\n});\nconst reactPlugin = toPlatePlugin(plugin);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New PlatePlugin normalizeInitialValue Option in v13.8.0\nDESCRIPTION: Shows the addition of a normalizeInitialValue option to PlatePlugin that allows filtering the value before it's passed into the editor.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1650](https://github.com/udecode/plate/pull/1650) by [@zbeyens](https://github.com/zbeyens) – `PlatePlugin` has a new option:\n  - `normalizeInitialValue`: filter the value before it's passed into the editor\n```\n\n----------------------------------------\n\nTITLE: Installing Plate AI and Markdown Dependencies\nDESCRIPTION: Command to install the required npm packages for the Copilot plugin, including @udecode/plate-ai for AI features and @udecode/plate-markdown for markdown support.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-ai @udecode/plate-markdown\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Plugins with TOC\nDESCRIPTION: Configuration of Plate.js plugins array including the TOC plugin with custom options like topOffset for scrolling behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  HeadingPlugin,\n  NodeIdPlugin,\n  TocPlugin.configure({\n    options: {\n      topOffset: 80,\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Reset Node Plugin\nDESCRIPTION: Command to install the Reset Node plugin package for Plate editor via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-reset-node\n```\n\n----------------------------------------\n\nTITLE: Configuring Components Alias in components.json\nDESCRIPTION: Sets the import alias for components in your project.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"components\": \"@/components\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Previous Align Plugin Implementation in TypeScript\nDESCRIPTION: Shows how the align plugin was previously implemented with inject.props and deserializeHtml patterns.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const createAlignPlugin = createPluginFactory({\n  key: KEY_ALIGN,\n  inject: {\n    props: {\n      defaultNodeValue: 'start',\n      nodeKey: KEY_ALIGN,\n      styleKey: 'textAlign',\n      validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n      validTypes: ['p'],\n    },\n  },\n  then: (_, plugin) =>\n    mapInjectPropsToPlugin(editor, plugin, {\n      deserializeHtml: {\n        getNode: (el, node) => {\n          if (el.style.textAlign) {\n            node[plugin.key] = el.style.textAlign;\n          }\n        },\n      },\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using insertNodes Transform in Slate\nDESCRIPTION: Inserts one or more nodes atomically at a specified location. It provides extensive options for controlling insertion behavior, including handling empty blocks and selection after insertion.\n\nLANGUAGE: typescript\nCODE:\n```\ninsertNodes(nodes: N | N[], options?: InsertNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Initializing Plate Project with CLI\nDESCRIPTION: Command to initialize Plate in your project using the shadcx CLI. This sets up the basic structure needed for a Plate project.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Configuring the Single Line Plugin in Plate Editor\nDESCRIPTION: Example of how to import and include the SingleLinePlugin in the plugins array of a Plate editor instance. This limits the editor to only allow a single line of text.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SingleLinePlugin } from '@udecode/plate-break/react';\n\nconst plugins = [\n  // ...otherPlugins\n  SingleLinePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring DOCX to Slate Conversion Plugins\nDESCRIPTION: React/TypeScript code for setting up the plugins needed to convert DOCX content to Slate format. The DocxPlugin handles DOCX parsing while JuicePlugin inlines CSS properties into HTML style attributes.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { JuicePlugin } from '@udecode/plate-juice';\nimport { DocxPlugin } from '@udecode/plate-docx';\n\nconst plugins = [\n  // ...otherPlugins,\n  DocxPlugin,\n  JuicePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Components Configuration with CLI for Plate\nDESCRIPTION: Command to create a components.json file in your project using the shadcx CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Setting Tailwind Prefix in components.json\nDESCRIPTION: Defines a prefix for Tailwind CSS utility classes. Components will be added with this prefix.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"prefix\": \"plate-\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Specialized API Functions in Plate\nDESCRIPTION: Listing of API function migrations to specialized namespaces for Element, Text, Range, Path and Point operations.\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Moved to `ElementApi.`:\n\n  - `elementMatches` -> `ElementApi.matches`\n  - `isElement` -> `ElementApi.isElement`\n  - `isElementList` -> `ElementApi.isElementList`\n\n- Moved to `TextApi.`:\n\n  - `isText` -> `TextApi.isText(at)`\n\n- Moved to `RangeApi.`:\n\n  - `isCollapsed` -> `RangeApi.isCollapsed`\n  - `isExpanded` -> `RangeApi.isExpanded`\n\n- Moved to `PathApi.`:\n\n  - `isFirstChild` -> `!PathApi.hasPrevious`\n  - `getPreviousPath` -> `PathApi.previous`\n\n- Moved to `PointApi.`:\n\n  - `getPointFromLocation({ at, focus })` -> `PointApi.get(at, { focus })`\n```\n\n----------------------------------------\n\nTITLE: Rendering PlateStatic Component in React\nDESCRIPTION: Demonstrates how to render the PlateStatic component with a Slate editor, component mappings, and optional styling.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PlateStatic } from '@udecode/plate/core/static'; \n// or from '@udecode/plate' if re-exported\n\nexport default function MyStaticView() {\n  const editor = createSlateEditor({ /* your config */ });\n\n  return (\n    <PlateStatic\n      editor={editor}\n      components={components}\n      style={{ padding: 16 }}\n      className=\"my-plate-static\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using unsetNodes Transform in Slate\nDESCRIPTION: Removes specified properties from nodes at a location. This allows for selectively removing attributes without changing other properties of the nodes.\n\nLANGUAGE: typescript\nCODE:\n```\nunsetNodes(props: string | string[], options?: UnsetNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Installing Minimal Plate Editor\nDESCRIPTION: Command to add the basic Plate editor to your project. This adds a minimal editor implementation to app/editor along with necessary components.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-basic\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Outside Handler for Selection Reset\nDESCRIPTION: A click handler function that deselects blocks when clicking outside of any selectable element, useful for implementing full-page selection behavior.\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleClickOutside = (event: MouseEvent) => {\n  if (!(event.target as HTMLElement).closest('[data-plate-selectable]')) {\n    editor.api.blockSelection.deselect();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: Command to build all packages in the Plate monorepo using the project's build system.\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Using editor.tf (transforms) instead of imported functions in Plate\nDESCRIPTION: Transform functions are now accessed via editor.tf instead of being imported directly. This example shows how to use setNodes via the new pattern.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { setNodes } from '@udecode/plate';\nsetNodes(editor, { bold: true });\n\n// After\neditor.tf.setNodes({ bold: true });\n```\n\n----------------------------------------\n\nTITLE: Using toggleBlock Transform in Slate\nDESCRIPTION: Toggles the block type at a specified location. This can either directly change the block type or wrap/unwrap with a specific block type, with options to control default behavior.\n\nLANGUAGE: typescript\nCODE:\n```\ntoggleBlock(type: string, options?: ToggleBlockOptions)\n```\n\n----------------------------------------\n\nTITLE: Initializing Plate with shadcn/ui CLI in Astro\nDESCRIPTION: Command to initialize Plate in an Astro project using the shadcn/ui CLI. This sets up the foundation for using Plate components.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Resetting Selection with Direct API Call\nDESCRIPTION: Method to programmatically deselect all blocks using the Block Selection API directly.\n\nLANGUAGE: tsx\nCODE:\n```\neditor.api.blockSelection.deselect();\n```\n\n----------------------------------------\n\nTITLE: Debugging by Overriding Editor Methods\nDESCRIPTION: Demonstrates creating a custom logging plugin that overrides editor methods to add logging functionality. This example logs operations before they are applied to the editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst LoggingPlugin = createPlatePlugin({\n  key: 'logging',\n}).overrideEditor(({ editor, tf: { apply } }) => ({\n  transforms: {\n    apply(operation) {\n      console.log('Operation:', operation);\n      apply(operation);\n    },\n  },\n}));\n\nconst editor = createPlateEditor({\n  plugins: [LoggingPlugin],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CsvPlugin in a Plate Editor\nDESCRIPTION: Example of importing and adding the CsvPlugin to a Plate editor's plugin array. This enables the editor to handle CSV data conversion to Slate format.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CsvPlugin } from '@udecode/plate-csv';\n\nconst plugins = [\n  // ...otherPlugins,\n  CsvPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Muted Elements\nDESCRIPTION: CSS variables defining muted background and foreground colors used for UI elements like TabsList, Skeleton, and Switch components.\n\nLANGUAGE: css\nCODE:\n```\n--muted: 210 40% 96.1%;\n--muted-foreground: 215.4 16.3% 46.9%;\n```\n\n----------------------------------------\n\nTITLE: Setting moduleResolution to bundler in tsconfig.json\nDESCRIPTION: The simplest approach for modern bundlers that sets TypeScript to use the \"bundler\" resolution mode, which better aligns with modern ESM packages.\n\nLANGUAGE: jsonc\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    // ...\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Media Plugin Type Definitions\nDESCRIPTION: Type definitions for resizable elements, image elements, caption elements, and media elements used in the media plugin. These interfaces define the structure of media-related elements with properties for width, URL, and captions.\n\nLANGUAGE: tsx\nCODE:\n```\ninterface TResizableElement extends TElement {\n  width?: number;\n}\n\ninterface TImageElement extends TMediaElement {}\n\ninterface TCaptionElement extends TElement {\n  caption?: TDescendant[];\n}\n\ninterface TMediaElement extends TCaptionElement, TResizableElement {\n  url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using isEmpty Method in Plate Editor\nDESCRIPTION: Shows how to use the isEmpty method to check if elements or regions in the editor are empty, with options to check after a location or within specific blocks.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.isEmpty() // Check if editor is empty\neditor.api.isEmpty(at) // Check if nodes at location are empty\neditor.api.isEmpty(at, { after: true }) // Check if text after location is empty\neditor.api.isEmpty(at, { block: true }) // Check if block above location is empty\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Speed for Block Selection\nDESCRIPTION: Configuration to customize the scroll speed and selection behavior. The speedDivider controls how fast scrolling occurs during selection, and startThreshold defines the distance needed to start selection.\n\nLANGUAGE: ts\nCODE:\n```\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      behaviour: {\n      scrolling: {\n        // You can slow down the scroll speed by setting a bigger value.\n        speedDivider: 1.5,\n      },\n      // The distance needed to move for the selection area to appear.\n      // If it's too small, it may cause the mouse click event to be blocked. 10 is a good default.\n      startThreshold: 4,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AI Editor for Plate in Astro\nDESCRIPTION: Command to add the AI-powered Plate editor to your Astro project. This installs an advanced editor with AI capabilities for enhanced content editing.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Speed for Block Selection\nDESCRIPTION: Configuration to customize the scroll speed and selection behavior. The speedDivider controls how fast scrolling occurs during selection, and startThreshold defines the distance needed to start selection.\n\nLANGUAGE: ts\nCODE:\n```\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      behaviour: {\n      scrolling: {\n        // You can slow down the scroll speed by setting a bigger value.\n        speedDivider: 1.5,\n      },\n      // The distance needed to move for the selection area to appear.\n      // If it's too small, it may cause the mouse click event to be blocked. 10 is a good default.\n      startThreshold: 4,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if Block is Selectable with Editor API\nDESCRIPTION: An editor API method to check if a specific block element is selectable based on the element and its path.\n\nLANGUAGE: typescript\nCODE:\n```\nconst isSelectable = editor.api.blockSelection.isSelectable(element, path)\n```\n\n----------------------------------------\n\nTITLE: Using useBlockSelectionFragment Hook to Get Selected Nodes\nDESCRIPTION: A hook that returns an array of Node objects representing all currently selected blocks in the editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectedNodes = useBlockSelectionFragment()\n```\n\n----------------------------------------\n\nTITLE: Installing the Plate Find-Replace Package\nDESCRIPTION: Commands to install the Plate find-replace package via npm, which provides search functionality for finding and replacing text in documents.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-find-replace\n```\n\n----------------------------------------\n\nTITLE: Conversion Methods Between DOM and Slate in Plate Editor\nDESCRIPTION: Functions for converting between Slate data structures and DOM elements/points/ranges. These methods are essential for handling user interactions and mapping between the editor's internal model and the rendered DOM.\n\nLANGUAGE: typescript\nCODE:\n```\ntoDOMNode(node: TNode) => HTMLElement\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoDOMPoint(point: Point) => DOMPoint\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoDOMRange(range: TRange) => DOMRange\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoSlateNode(domNode: DOMNode) => TNode | undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoSlatePoint(domPoint: DOMPoint) => Point | undefined\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoSlateRange(domRange: DOMRange) => TRange | undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing ThemeProvider in Next.js root layout\nDESCRIPTION: Configures the root layout to use the ThemeProvider component, enabling theme switching throughout the application. The provider is configured to use class-based theming with system preference as default.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from '@/components/theme-provider';\n\nexport default function RootLayout({ children }: RootLayoutProps) {\n  return (\n    <>\n      <html lang=\"en\" suppressHydrationWarning>\n        <head />\n        <body>\n          <ThemeProvider \n            attribute=\"class\"\n            defaultTheme=\"system\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            {children}\n          </ThemeProvider>\n        </body>\n      </html>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Blocks from Selection in Plate\nDESCRIPTION: Configuration to exclude specific plugins and block types from block selection. This example shows how to prevent selection below specific blocks like table rows and exclude certain block types entirely.\n\nLANGUAGE: ts\nCODE:\n```\nBlockSelectionPlugin.configure({\n  inject: {\n    // Exclude blocks below table rows\n    excludeBelowPlugins: ['tr'],\n    // Exclude block types\n    excludePlugins: ['table', 'code_line', 'column_group', 'column'],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Complex Deserialization Example with IndentListPlugin\nDESCRIPTION: Shows a simplified implementation of IndentListPlugin's deserialization logic, which transforms HTML list structures into indented paragraphs while preserving indentation levels using aria-level attributes.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const IndentListPlugin = createTSlatePlugin<IndentListConfig>({\n  // ... other configurations ...\n  parsers: {\n    html: {\n      deserializer: {\n        isElement: true,\n        parse: ({ editor, element, getOptions }) => ({\n          indent: Number(element.getAttribute('aria-level')),\n          listStyleType: element.style.listStyleType,\n          type: editor.getType(ParagraphPlugin),\n        }),\n        rules: [\n          {\n            validNodeName: 'LI',\n          },\n        ],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Component Selection Interface Example\nDESCRIPTION: Example of the interactive component selection interface shown when adding components, displaying a list of available components to choose from.\n\nLANGUAGE: txt\nCODE:\n```\nWhich components would you like to add? › Space to select. A to toggle all.\nEnter to submit.\n\n◯  align-dropdown-menu\n◯  avatar\n◯  blockquote-element\n◯  button\n◯  checkbox\n◯  code-leaf\n◯  code-line-element\n◯  code-syntax-leaf\n◯  combobox\n```\n\n----------------------------------------\n\nTITLE: Creating Editor State with JSX in Plate Tests\nDESCRIPTION: Example of using JSX to represent editor states with a cursor position in Plate testing.\n\nLANGUAGE: typescript\nCODE:\n```\nconst input = (\n  <editor>\n    <hp>\n      Hello<cursor /> world\n    </hp>\n  </editor>\n) as any as PlateEditor;\n```\n\n----------------------------------------\n\nTITLE: Patch Change in Version 38.0.1\nDESCRIPTION: Changelog entry describing a modification to prefix the base plugin with 'Base' in pull request #3526.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3526](https://github.com/udecode/plate/pull/3526) by [@zbeyens](https://github.com/zbeyens) – Prefix base plugin with `Base`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Option Values\nDESCRIPTION: Shows how to get a specific option value for a plugin using the getOption method, providing access to the configuration of individual plugins.\n\nLANGUAGE: typescript\nCODE:\n```\nconst search = editor.getOption(FindReplacePlugin, 'search');\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extendEditorApi Type Signature in TypeScript\nDESCRIPTION: Type signature for the extendEditorApi method that extends the editor's API with plugin-specific methods. Takes a function that receives the plugin context and returns a record of functions.\n\nLANGUAGE: typescript\nCODE:\n```\n(api: (ctx: PlatePluginContext) => Record<string, Function>) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Integrating Theme Provider in Root Layout of a Vite React App\nDESCRIPTION: This snippet demonstrates how to integrate the ThemeProvider into the root layout of a Vite React application. It sets default theme to dark and specifies a storage key for persisting theme preferences.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeProvider } from \"@/components/theme-provider\"\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"dark\" storageKey=\"vite-ui-theme\">\n      {children}\n    </ThemeProvider>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Installing Block Selection Package in Plate\nDESCRIPTION: Command to install the required packages for block selection functionality in Plate editor. Requires both the plate-selection and plate-node-id packages.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-selection @udecode/plate-node-id\n```\n\n----------------------------------------\n\nTITLE: Renaming Basic Element Plugins in Version 37.0.0\nDESCRIPTION: This change from pull request #3420 shows major plugin renaming, moving from function-based plugin creation to class-based plugins. The paragraph plugin was moved to the core package.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createBasicElementPlugins` -> `BasicElementsPlugin`\n  - `createBlockquotePlugin` -> `BlockquotePlugin`\n  - `createCodeBlockPlugin` -> `CodeBlockPlugin`\n  - `createHeadingPlugin` -> `HeadingPlugin`\n  - Move paragraph plugin to `@udecode/plate-core`\n```\n\n----------------------------------------\n\nTITLE: Previous Plugin Configuration with Hotkeys in TypeScript\nDESCRIPTION: Shows how keyboard shortcuts were previously implemented in plugins using the handlers.onKeyDown pattern.\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePluginFactory<HotkeyPlugin>({\n  handlers: {\n    onKeyDown: onKeyDownToggleElement,\n  },\n  options: {\n    hotkey: ['mod+opt+0', 'mod+shift+0'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enhancement to focusEditor Function with Target Selection Option in v13.6.0\nDESCRIPTION: Adds a new target option to the focusEditor function that enables selecting a specific position before focusing, and mentions re-exporting createStore from @udecode/zustood.\n\nLANGUAGE: markdown\nCODE:\n```\n- [`bed47ae`](https://github.com/udecode/plate/commit/bed47ae4380971a829c8f0fff72d1610cf321e73) by [@zbeyens](https://github.com/zbeyens) –\n  - `focusEditor` new option to set selection before focusing the editor\n    - `target`: if defined:\n      - deselect the editor (otherwise it will focus the start of the editor)\n      - select the editor\n      - focus the editor\n  - re-exports `createStore` from `@udecode/zustood`, so the other packages don't have to install it\n```\n\n----------------------------------------\n\nTITLE: HTML Deserialization in Plate Editor\nDESCRIPTION: Method from the HtmlPlugin for converting HTML content into Slate node structure within a Plate editor.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.html.deserialize({ element: HTMLElement }): Descendant[]\n```\n\n----------------------------------------\n\nTITLE: Framework Selection Grid UI in HTML/SVG\nDESCRIPTION: A responsive grid layout displaying various framework options such as Next.js, Vite, Remix, Astro, Laravel, and Gatsby. Each option includes the framework's SVG logo and name, wrapped in LinkedCard components.\n\nLANGUAGE: HTML\nCODE:\n```\n<div className=\"grid grid-cols-2 gap-4 mt-8 sm:gap-6\">\n  <LinkedCard href=\"/docs/components/installation/next\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Next.js</title>\n      <path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Next.js</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/installation/vite\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Vite</title>\n      <path d=\"m8.286 10.578.512-8.657a.306.306 0 0 1 .247-.282L17.377.006a.306.306 0 0 1 .353.385l-1.558 5.403a.306.306 0 0 0 .352.385l2.388-.46a.306.306 0 0 1 .332.438l-6.79 13.55-.123.19a.294.294 0 0 1-.252.14c-.177 0-.35-.152-.305-.369l1.095-5.301a.306.306 0 0 0-.388-.355l-1.433.435a.306.306 0 0 1-.389-.354l.69-3.375a.306.306 0 0 0-.37-.36l-2.32.536a.306.306 0 0 1-.374-.316zm14.976-7.926L17.284 3.74l-.544 1.887 2.077-.4a.8.8 0 0 1 .84.369.8.8 0 0 1 .034.783L12.9 19.93l-.013.025-.015.023-.122.19a.801.801 0 0 1-.672.37.826.826 0 0 1-.634-.302.8.8 0 0 1-.16-.67l1.029-4.981-1.12.34a.81.81 0 0 1-.86-.262.802.802 0 0 1-.165-.67l.63-3.08-2.027.468a.808.808 0 0 1-.768-.233.81.81 0 0 1-.217-.6l.389-6.57-7.44-1.33a.612.612 0 0 0-.64.906L11.58 23.691a.612.612 0 0 0 1.066-.004l11.26-20.135a.612.612 0 0 0-.644-.9z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Vite</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/installation/remix\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Remix</title>\n      <path d=\"M21.511 18.508c.216 2.773.216 4.073.216 5.492H15.31c0-.309.006-.592.011-.878.018-.892.036-1.821-.109-3.698-.19-2.747-1.374-3.358-3.55-3.358H1.574v-5h10.396c2.748 0 4.122-.835 4.122-3.049 0-1.946-1.374-3.125-4.122-3.125H1.573V0h11.541c6.221 0 9.313 2.938 9.313 7.632 0 3.511-2.176 5.8-5.114 6.182 2.48.497 3.93 1.909 4.198 4.694ZM1.573 24v-3.727h6.784c1.133 0 1.379.84 1.379 1.342V24Z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Remix</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/installation/astro\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Astro</title>\n      <path\n        d=\"M16.074 16.86C15.354 17.476 13.917 17.895 12.262 17.895C10.23 17.895 8.527 17.263 8.075 16.412C7.914 16.9 7.877 17.458 7.877 17.814C7.877 17.814 7.771 19.564 8.988 20.782C8.988 20.15 9.501 19.637 10.133 19.637C11.216 19.637 11.215 20.582 11.214 21.349V21.418C11.214 22.582 11.925 23.579 12.937 24C12.7812 23.6794 12.7005 23.3275 12.701 22.971C12.701 21.861 13.353 21.448 14.111 20.968C14.713 20.585 15.383 20.161 15.844 19.308C16.0926 18.8493 16.2225 18.3357 16.222 17.814C16.2221 17.4903 16.1722 17.1685 16.074 16.86ZM15.551 0.6C15.747 0.844 15.847 1.172 16.047 1.829L20.415 16.176C18.7743 15.3246 17.0134 14.7284 15.193 14.408L12.35 4.8C12.3273 4.72337 12.2803 4.65616 12.2162 4.60844C12.152 4.56072 12.0742 4.53505 11.9943 4.53528C11.9143 4.5355 11.8366 4.56161 11.7727 4.60969C11.7089 4.65777 11.6623 4.72524 11.64 4.802L8.83 14.405C7.00149 14.724 5.23264 15.3213 3.585 16.176L7.974 1.827C8.174 1.171 8.274 0.843 8.471 0.6C8.64406 0.385433 8.86922 0.218799 9.125 0.116C9.415 0 9.757 0 10.443 0H13.578C14.264 0 14.608 0 14.898 0.117C15.1529 0.219851 15.3783 0.386105 15.551 0.6Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n    <p className=\"font-medium mt-2\">Astro</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/installation/laravel\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 62 65\"\n      fill=\"currentColor\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n    >\n      <path d=\"M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Laravel</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/installation/gatsby\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Gatsby</title>\n      <path d=\"M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm0 2.571c3.171 0 5.915 1.543 7.629 3.858l-1.286 1.115C16.886 5.572 14.571 4.286 12 4.286c-3.343 0-6.171 2.143-7.286 5.143l9.857 9.857c2.486-.857 4.373-3 4.973-5.572h-4.115V12h6c0 4.457-3.172 8.228-7.372 9.17L2.83 9.944C3.772 5.743 7.543 2.57 12 2.57zm-9.429 9.6l9.344 9.258c-2.4-.086-4.801-.943-6.601-2.743-1.8-1.8-2.743-4.201-2.743-6.515z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Gatsby</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/installation/manual\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>React</title>\n    </svg>\n    <p className=\"font-medium mt-2\">React</p>\n  </LinkedCard>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering TocElement Component in Plate\nDESCRIPTION: Registration of the TocElement component in the Plate.js components configuration object, mapping it to the TocPlugin key.\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  // ...otherComponents,\n  [TocPlugin.key]: TocElement,\n};\n```\n\n----------------------------------------\n\nTITLE: Extending Plugins with Nested Options in TypeScript using getOptions (v38.0.0+)\nDESCRIPTION: Example showing the new way to extend plugins with nested options in v38.0.0+, using getOptions to preserve nested properties when extending plugins, which replaces the previous deep merge behavior.\n\nLANGUAGE: typescript\nCODE:\n```\nconst plugin = createSlatePlugin({\n  key: 'test',\n  options: { nested: { a: 1 } },\n}).extend(({ getOptions }) => ({\n  options: {\n    ...getOptions(),\n    nested: { ...getOptions().nested, b: 1 },\n  },\n}));\n\n// Result: { nested: { a: 1, b: 1 } }\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockquoteElement Component with PlateElement in React\nDESCRIPTION: Example of creating a custom Element component for a blockquote using PlateElement wrapper. The component ensures proper props are applied to the HTML blockquote element as required by Slate.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PlateElement, PlateElementProps } from '@udecode/plate/react';\n\nexport function BlockquoteElement({\n  className,\n  children,\n  ...props\n}: PlateElementProps) {\n  return (\n    <PlateElement asChild className={className} {...props}>\n      <blockquote>{children}</blockquote>\n    </PlateElement>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ImagePlugin with Dangerous Attribute Allowlisting in TypeScript\nDESCRIPTION: Example showing how to configure an ImagePlugin to safely handle DOM attributes by adding specific attributes to the allowlist through the dangerouslyAllowAttributes option. This helps prevent XSS vulnerabilities.\n\nLANGUAGE: typescript\nCODE:\n```\nconst ImagePlugin = createPlatePlugin({\n  key: 'image',\n  node: {\n    isElement: true,\n    isVoid: true,\n    dangerouslyAllowAttributes: ['alt'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Editor Selection and Node Operations in Plate\nDESCRIPTION: Maps deprecated editor selection and node manipulation methods to their new equivalents using the editor.tf namespace. These functions handle operations like selecting, setting, and manipulating editor selection state.\n\nLANGUAGE: typescript\nCODE:\n```\nselect -> editor.tf.select\nselectEndOfBlockAboveSelection -> editor.tf.select(editor.selection, { edge: 'end' })\nselectNodes -> editor.tf.select(editor.api.nodesRange(nodes))\nsetFragmentData -> editor.tf.setFragmentData\nsetMarks(marks, clear) -> editor.tf.addMarks(marks, { remove: string | string[] })\nsetNodes -> editor.tf.setNodes\nsetPoint -> editor.tf.setPoint\nsetSelection -> editor.tf.setSelection\nsomeNode -> editor.api.some(options)\nsplitNodes -> editor.tf.splitNodes\n```\n\n----------------------------------------\n\nTITLE: Adding Root-Level Transform Methods with .extendEditorTransforms in TypeScript\nDESCRIPTION: The extendEditorTransforms method adds root-level transform methods that can be accessed directly via editor.tf.methodName().\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendEditorTransforms(({ editor }) => ({\n  editorTransform: () => {\n    // Custom editor transform logic\n  },\n}));\n\n// Access the plugin's transform\neditor.tf.editorTransform();\n```\n\n----------------------------------------\n\nTITLE: 使用 .configurePlugin 配置嵌套插件\nDESCRIPTION: 展示如何使用 .configurePlugin 方法修改父插件中嵌套子插件的配置。\n\nLANGUAGE: typescript\nCODE:\n```\nconst TablePlugin = createPlatePlugin({\n  key: 'table',\n  plugins: [TableCellPlugin],\n}).configurePlugin(TableCellPlugin, {\n  options: {\n    cellOption: '已修改',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Focus Ring\nDESCRIPTION: CSS variable defining the color used for focus rings to indicate keyboard focus on interactive elements.\n\nLANGUAGE: css\nCODE:\n```\n--ring: 215 20.2% 65.1%;\n```\n\n----------------------------------------\n\nTITLE: Importing Plate TOC Components\nDESCRIPTION: Import statements for the required plugins from Plate.js to enable Table of Contents functionality, including TocPlugin, HeadingPlugin, and NodeIdPlugin.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TocPlugin, HeadingPlugin } from '@udecode/plate-heading/react';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\n```\n\n----------------------------------------\n\nTITLE: Debugging by Removing Suspected Plugins\nDESCRIPTION: Shows how to isolate issues by selectively removing plugins from the editor configuration. This technique helps identify which plugin might be causing problems.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [\n    // Comment out or remove suspected plugins\n    // ParagraphPlugin,\n    // HeadingPlugin,\n    // BoldPlugin,\n    // ...other plugins\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a testing component with PlateTest\nDESCRIPTION: Usage of the PlateTest component which was introduced in version 10.1.0 for testing Plate editor instances.\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PlateTest } from '@udecode/plate';\n\n// Example of using PlateTest for testing\n<PlateTest\n  plugins={plugins}\n  initialValue={initialValue}\n>\n  <TestComponent />\n</PlateTest>\n```\n\n----------------------------------------\n\nTITLE: Editor Transformation Function Mappings in Plate\nDESCRIPTION: Maps deprecated editor method calls to their new equivalents using the editor.tf namespace. This provides a reference for migrating code to the updated API.\n\nLANGUAGE: typescript\nCODE:\n```\nmoveChildren -> editor.tf.moveNodes({ at, to, children: true, fromIndex, match: (node, path) => boolean })\nmoveNodes -> editor.tf.moveNodes\nmoveSelection -> editor.tf.move\nnormalizeEditor -> editor.tf.normalize\nremoveEditorMark -> editor.tf.removeMark\nremoveEditorText -> editor.tf.removeNodes({ text: true, empty: false })\nremoveEmptyPreviousBlock -> editor.tf.removeNodes({ previousEmptyBlock: true })\nremoveMark(options) -> editor.tf.removeMarks(keys, options)\nremoveNodeChildren -> editor.tf.removeNodes({ at, children: true })\nremoveNodes -> editor.tf.removeNodes\nremoveSelectionMark -> editor.tf.removeMarks()\nreplaceNode(editor, { nodes, insertOptions, removeOptions }) -> editor.tf.replaceNodes(nodes, { removeNodes, ...insertOptions })\n```\n\n----------------------------------------\n\nTITLE: 带函数参数的 .extend 方法使用\nDESCRIPTION: 展示如何使用带函数参数的 .extend 方法，通过访问当前插件状态和编辑器来扩展插件功能。\n\nLANGUAGE: typescript\nCODE:\n```\nconst ExtendedPlugin = MyPlugin.extend(({ editor, plugin }) => ({\n  options: {\n    newOption: '新值',\n  },\n  handlers: {\n    onKeyDown: () => {\n      // 自定义按键逻辑\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Warning Color Variables\nDESCRIPTION: Example showing how to add custom warning color variables to the CSS file with support for both light and dark modes.\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n}\n\n.dark {\n  --warning: 48 96% 89%;\n  --warning-foreground: 38 92% 50%;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate TOC Dependencies with npm\nDESCRIPTION: Command to install the required dependencies for the Table of Contents functionality in Plate.js, including plate-heading and plate-node-id packages.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-heading @udecode/plate-node-id\n```\n\n----------------------------------------\n\nTITLE: Comparing PlateProvider Implementation Before and After in React/TSX\nDESCRIPTION: Demonstrates how to migrate from the previous PlateProvider implementation to the new one, showing both the before and after patterns as well as the provider-less mode option.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<PlateProvider>\n  <Toolbar>\n    <AlignToolbarButtons />\n  </Toolbar>\n\n  <Plate<MyValue> editableProps={editableProps} <MyValue> initialValue={alignValue} plugins={plugins} />\n</PlateProvider>\n\n// After\n<PlateProvider<MyValue> initialValue={alignValue} plugins={plugins}>\n  <Toolbar>\n    <AlignToolbarButtons />\n  </Toolbar>\n\n  <Plate<MyValue> editableProps={editableProps} />\n</PlateProvider>\n\n// After (provider-less mode)\n<Plate<MyValue> editableProps={editableProps} initialValue={alignValue} plugins={plugins} />\n```\n\n----------------------------------------\n\nTITLE: Defining TComboboxItem Interface for Mention Plugin in TypeScript\nDESCRIPTION: Interface definition for combobox items used in the mention plugin. It specifies required properties like key and text, as well as optional properties including disabled status and additional data.\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TComboboxItem {\n  /** Unique key. */\n  key: string;\n  /** Item text. */\n  text: any;\n  /**\n   * Whether the item is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n  /** Data available to `onRenderItem`. */\n  data?: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Unselect on Specific Elements\nDESCRIPTION: Example of how to prevent unselecting blocks when clicking on specific elements by adding the data-plate-prevent-unselect attribute to those components.\n\nLANGUAGE: tsx\nCODE:\n```\n<YourSpecialButtoon data-plate-prevent-unselect />\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables for Theming in React\nDESCRIPTION: Example showing how to use semantic CSS variables for styling. The div uses background and foreground variables that map to the theme colors defined in CSS.\n\nLANGUAGE: tsx\nCODE:\n```\n<div className=\"bg-background text-foreground\" />\n```\n\n----------------------------------------\n\nTITLE: Defining TNode Type in TypeScript\nDESCRIPTION: Defines the TNode type as a union of Editor, TElement, and TText types, representing all possible node types in the document tree.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TNode = Editor | TElement | TText;\n```\n\n----------------------------------------\n\nTITLE: 使用函数参数调用 .configure 方法\nDESCRIPTION: 展示如何使用函数参数调用 .configure 方法，通过 getOptions 函数访问当前配置并修改它。\n\nLANGUAGE: typescript\nCODE:\n```\nconst ConfiguredPlugin = MyPlugin.configure(({ getOptions }) => ({\n  options: {\n    ...getOptions(),\n    myOption: `${getOptions().myOption} + 额外`,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks Alias in components.json\nDESCRIPTION: Sets the import alias for hooks such as use-media-query or use-toast.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"hooks\": \"@/hooks\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Slash Command Components in React\nDESCRIPTION: Imports the SlashPlugin and SlashInputPlugin from the plate-slash-command package for use in React applications.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SlashPlugin, SlashInputPlugin } from '@udecode/plate-slash-command/react';\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extendPlugin Type Signature in TypeScript\nDESCRIPTION: Type signature for the extendPlugin method that extends an existing nested plugin or adds a new one if not found. Takes a key identifying the plugin and either a partial plugin configuration or a function returning a partial configuration.\n\nLANGUAGE: typescript\nCODE:\n```\n(key: string, extendConfig: Partial<PlatePlugin> | ((ctx: PlatePluginContext<AnyPluginConfig>) => Partial<PlatePlugin>)) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies for Plate 42.0.0 Migration\nDESCRIPTION: JSON configuration showing all the required dependencies that need to be added when migrating to @udecode/plate version 42.0.0. This replaces the previous need to import from individual packages.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@udecode/plate-alignment\": \"42.0.0\",\n  \"@udecode/plate-autoformat\": \"42.0.0\",\n  \"@udecode/plate-basic-elements\": \"42.0.0\",\n  \"@udecode/plate-basic-marks\": \"42.0.0\",\n  \"@udecode/plate-block-quote\": \"42.0.0\",\n  \"@udecode/plate-break\": \"42.0.0\",\n  \"@udecode/plate-code-block\": \"42.0.0\",\n  \"@udecode/plate-combobox\": \"42.0.0\",\n  \"@udecode/plate-comments\": \"42.0.0\",\n  \"@udecode/plate-csv\": \"42.0.0\",\n  \"@udecode/plate-diff\": \"42.0.0\",\n  \"@udecode/plate-docx\": \"42.0.0\",\n  \"@udecode/plate-find-replace\": \"42.0.0\",\n  \"@udecode/plate-floating\": \"42.0.0\",\n  \"@udecode/plate-font\": \"42.0.0\",\n  \"@udecode/plate-heading\": \"42.0.0\",\n  \"@udecode/plate-highlight\": \"42.0.0\",\n  \"@udecode/plate-horizontal-rule\": \"42.0.0\",\n  \"@udecode/plate-indent\": \"42.0.0\",\n  \"@udecode/plate-indent-list\": \"42.0.0\",\n  \"@udecode/plate-kbd\": \"42.0.0\",\n  \"@udecode/plate-layout\": \"42.0.0\",\n  \"@udecode/plate-line-height\": \"42.0.0\",\n  \"@udecode/plate-link\": \"42.0.0\",\n  \"@udecode/plate-list\": \"42.0.0\",\n  \"@udecode/plate-markdown\": \"42.0.0\",\n  \"@udecode/plate-media\": \"42.0.0\",\n  \"@udecode/plate-mention\": \"42.0.0\",\n  \"@udecode/plate-node-id\": \"42.0.0\",\n  \"@udecode/plate-normalizers\": \"42.0.0\",\n  \"@udecode/plate-reset-node\": \"42.0.0\",\n  \"@udecode/plate-resizable\": \"42.0.0\",\n  \"@udecode/plate-select\": \"42.0.0\",\n  \"@udecode/plate-selection\": \"42.0.0\",\n  \"@udecode/plate-slash-command\": \"42.0.0\",\n  \"@udecode/plate-suggestion\": \"42.0.0\",\n  \"@udecode/plate-tabbable\": \"42.0.0\",\n  \"@udecode/plate-table\": \"42.0.0\",\n  \"@udecode/plate-toggle\": \"42.0.0\",\n  \"@udecode/plate-trailing-block\": \"42.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: DeletePlugin Behavior Example\nDESCRIPTION: Example demonstrating the behavior of DeletePlugin when pressing delete on an empty paragraph followed by a code block.\n\nLANGUAGE: tsx\nCODE:\n```\n// Empty paragraph followed by code block\n<editor>\n  <p>\n    <cursor />\n  </p>\n  <codeblock>\n    <codeline>test</codeline>\n  </codeblock>\n</editor>\n\n// Pressing delete will remove the empty paragraph instead of nothing\n<editor>\n  <codeblock>\n    <codeline>test</codeline>\n  </codeblock>\n</editor>\n```\n\n----------------------------------------\n\nTITLE: Defining NodeOperation Types in Slate\nDESCRIPTION: Definition of the NodeOperation type which encompasses all operations that modify nodes in a Slate document. These include inserting, merging, moving, removing, setting, and splitting nodes.\n\nLANGUAGE: ts\nCODE:\n```\nexport type NodeOperation<N extends Descendant = Descendant> =\n  | InsertNodeOperation<N>\n  | MergeNodeOperation<N>\n  | MoveNodeOperation\n  | RemoveNodeOperation<N>\n  | SetNodeOperation<N>\n  | SplitNodeOperation<N>;\n```\n\n----------------------------------------\n\nTITLE: Integrating a Preview Markdown Component in JSX/React\nDESCRIPTION: This code snippet demonstrates how to embed a Markdown preview component in a React or Next.js page. It uses a ComponentPreview wrapper with a specific demo component named 'preview-markdown-demo'.\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"preview-markdown-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Slash Command Plugin\nDESCRIPTION: Command to install the Plate Slash Command plugin via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-slash-command\n```\n\n----------------------------------------\n\nTITLE: Example components.json Configuration\nDESCRIPTION: A sample components.json configuration file for a project using both shadcn/ui and Plate UI, showing how to configure style, TypeScript support, Tailwind settings, aliases, and registries.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"baseColor\": \"slate\",\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"hooks\": \"@/hooks\",\n    \"lib\": \"@/lib\",\n    \"ui\": \"@/components/ui\",\n    \"utils\": \"@/lib/utils\"\n  },\n  \"iconLibrary\": \"lucide\",\n  \"registries\": {\n    \"plate\": {\n      \"aliases\": {\n        \"ui\": \"@/components/plate-ui\"\n      },\n      \"url\": \"https://platejs.org/r\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the addSelectedRow Utility\nDESCRIPTION: Utility function that depends on the blockSelection plugin for adding a selected row to a table or similar block structure.\n\nLANGUAGE: typescript\nCODE:\n```\naddSelectedRow(editor, path);\n```\n\n----------------------------------------\n\nTITLE: Using withHOC to add props to Higher-Order Components\nDESCRIPTION: Example showing how to use withHOC with a third parameter to add props to a Higher-Order Component in Plate.\n\nLANGUAGE: typescript\nCODE:\n```\n// Example of using withHOC with a third parameter to add props\nimport { withHOC } from '@udecode/plate';\n\nconst EnhancedComponent = withHOC(BaseComponent, (props) => props, {\n  additionalProp: 'value',\n  anotherProp: true\n});\n```\n\n----------------------------------------\n\nTITLE: Installing plate-markdown Package\nDESCRIPTION: Command to install the plate-markdown package via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-markdown\n```\n\n----------------------------------------\n\nTITLE: Configuring NormalizeTypesPlugin in Plate\nDESCRIPTION: Example of how to configure the NormalizeTypesPlugin to enforce document structure rules, such as requiring an h1 element at the beginning of the document.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NormalizeTypesPlugin } from '@udecode/plate-normalizers';\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\nimport { ParagraphPlugin } from '@udecode/plate/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading/react';\n\nconst plugins = [\n  // ...otherPlugins\n  NormalizeTypesPlugin.configure({\n    options: {\n      rules: [{ path: [0], strictType: 'h1' }],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Using Immer for Updating Plugin Options\nDESCRIPTION: Shows how to use an Immer-powered function to update plugin options with the setOptions method, allowing for more complex state updates with a mutable syntax.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.setOptions(FindReplacePlugin, (draft) => {\n  draft.search = 'hello';\n  draft.caseSensitive = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Plate Editor Component\nDESCRIPTION: Command to add the basic Plate editor component to an existing project using shadcx CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-basic\n```\n\n----------------------------------------\n\nTITLE: Configuring SelectOnBackspacePlugin Example\nDESCRIPTION: Example showing how to configure the SelectOnBackspacePlugin with custom query options and removeNodeIfEmpty setting.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  SelectOnBackspacePlugin.configure({\n    options: {\n      // Select these nodes instead of deleting them\n      query: {\n        allow: ['img', 'hr'],\n      },\n      // Remove current node if empty\n      removeNodeIfEmpty: true,\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Plate Copilot Components\nDESCRIPTION: Importing the necessary components from Plate AI and Markdown packages to implement the Copilot functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport {\n  MarkdownPlugin,\n  serializeMdNodes,\n  stripMarkdown,\n} from '@udecode/plate-markdown';\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration with Path Aliases\nDESCRIPTION: A Vite configuration example that sets up path aliases to resolve Plate package imports correctly when using the node module resolution strategy.\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport path from 'path';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@udecode/plate/react': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate/dist/react'\n      ),\n      '@udecode/plate-core/react': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-core/dist/react'\n      ),\n      '@udecode/plate-list/react': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-list/dist/react'\n      ),\n\n      // Non-/react base aliases:\n      '@udecode/plate': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate'\n      ),\n      '@udecode/plate-core': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-core'\n      ),\n      '@udecode/plate-list': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-list'\n      )\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Basic Marks Package\nDESCRIPTION: Command to install the @udecode/plate-basic-marks package using npm. This package provides text styling features for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-basic-marks\n```\n\n----------------------------------------\n\nTITLE: Accessing the Zustand-X Options Store for a Plugin\nDESCRIPTION: Demonstrates how to access the underlying zustand-x options store for a plugin using the getOptionsStore method, providing direct access to the state management store.\n\nLANGUAGE: typescript\nCODE:\n```\nconst store = editor.getOptionsStore(FindReplacePlugin);\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the Next.js development server for local development of the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring DeletePlugin Example\nDESCRIPTION: Example showing how to configure the DeletePlugin with custom query options to only allow removing specific empty blocks.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  DeletePlugin.configure({\n    options: {\n      // Only remove empty paragraphs and blockquotes\n      query: {\n        allow: ['p', 'blockquote'],\n      },\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor Container Component for Proper Cursor Positioning\nDESCRIPTION: Implementation of an EditorContainer component required for correct cursor overlay positioning in collaborative editing. The component sets up a reference to the container and associates it with the editor's unique ID.\n\nLANGUAGE: tsx\nCODE:\n```\nexport const EditorContainer = (\n  props: React.HTMLAttributes<HTMLDivElement>\n) => {\n  const editor = useEditorRef();\n  const containerRef = useEditorContainerRef();\n\n  return <div id={editor.uid} ref={containerRef} {...props} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration from Plugin Context\nDESCRIPTION: Demonstrates how to access the current plugin configuration from the Plugin Context, which contains information about the plugin itself.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  handlers: {\n    onKeyDown: ({ plugin }) => {\n      console.info('Plugin key:', plugin.key);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updated handler signature with plugin parameter in PlatePlugin\nDESCRIPTION: Shows the change in handler function signature, which now includes plugin as a second parameter in addition to the editor object.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nexport type X<T = {}> = (editor: PlateEditor<T>) => Y;\n\n// After\nexport type X<T = {}, P = {}> = (\n  editor: PlateEditor<T>,\n  plugin: WithPlatePlugin<T, P>\n) => Y;\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for Utility Classes Theming\nDESCRIPTION: JSON configuration that sets tailwind.cssVariables to false to use utility classes instead of CSS variables for theming. This is part of the components.json configuration file.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": false\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getOption to Access a Specific Plugin Option\nDESCRIPTION: Shows how to use the getOption function to retrieve a specific option value from the plugin configuration, which is useful for accessing individual settings.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { myOption: 'default' },\n  handlers: {\n    onClick: ({ getOption }) => {\n      const myOption = getOption('myOption');\n      console.info('My option value:', myOption);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Slate Imports with Plate Imports\nDESCRIPTION: Demonstrates how to replace standard Slate imports with their Plate equivalents. Plate re-exports most Slate types and functions.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\n\n// After\nimport { createPlateEditor, Plate, PlateContent } from '@udecode/plate/react';\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Dependencies with shadcx CLI\nDESCRIPTION: Command to initialize dependencies for a new project using shadcx. This installs dependencies, adds the 'cn' utility, configures tailwind.config.js, and sets up CSS variables for the project.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx init\n```\n\n----------------------------------------\n\nTITLE: Disabling Shortcuts in Plate Plugins with TypeScript\nDESCRIPTION: A simple example demonstrating how to disable a specific shortcut in a Plate plugin by setting its value to null during configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = ParagraphPlugin.configure({\n  shortcuts: {\n    myShortcut: null,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Add Command Options and Usage\nDESCRIPTION: Complete list of options available for the 'add' command, including flags for skipping confirmation, overwriting files, and specifying paths and registries.\n\nLANGUAGE: txt\nCODE:\n```\nUsage: shadcx add [options] [components...]\n\nadd a component to your project\n\nArguments:\n  components         the components to add.\n\nOptions:\n  -y, --yes         skip confirmation prompt. (default: false)\n  -o, --overwrite   overwrite existing files. (default: false)\n  -c, --cwd <cwd>   the working directory. defaults to the current directory.\n  -p, --path <path> the path to add the component to.\n  -a, --all         add all available components (default: false)\n  -s, --silent      mute output (default: false)\n  --src-dir         use the src directory when creating a new project (default: false)\n  -r, --registry    registry name or url\n  -l, --list        list all available registries (default: false)\n  -h, --help        display help for command\n```\n\n----------------------------------------\n\nTITLE: CLI Initialization Configuration Prompts\nDESCRIPTION: Example of the configuration prompts shown during the initialization process, allowing users to select base colors and CSS variable usage.\n\nLANGUAGE: txt\nCODE:\n```\nWhich color would you like to use as base color? › Slate\nDo you want to use CSS variables for colors? › yes\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Context in React Components with useEditorPlugin\nDESCRIPTION: Shows how to use the useEditorPlugin hook in React components to access the Plugin Context, including editor, plugin, and type properties.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyComponent = () => {\n  const { editor, plugin, type } = useEditorPlugin(MyPlugin);\n  \n  return <div>{type}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Slate and Editable Components\nDESCRIPTION: Demonstrates how to replace Slate's core components with their Plate equivalents for rendering the editor interface.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Slate editor={editor} value={value}>\n  <Editable className=\"p-4\" />\n</Slate>\n\n// After\n<Plate editor={editor}>\n  <PlateContent className=\"p-4\" />\n</Plate>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Components with shadcx CLI\nDESCRIPTION: Command to view a list of all available components that can be added using the shadcx CLI. This is useful for exploring component options without knowing the exact component name beforehand.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx add\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Shortcuts for a Plate Plugin in TypeScript\nDESCRIPTION: This example demonstrates how to define multiple shortcuts within a single Plate plugin. It implements toggleBold and toggleItalic shortcuts with their respective handlers and key combinations.\n\nLANGUAGE: typescript\nCODE:\n```\nconst FormattingPlugin = createPlatePlugin({\n  key: 'formatting',\n  shortcuts: {\n    toggleBold: {\n      handler: ({ editor }) => {\n        editor.tf.toggleMark('bold');\n      },\n      keys: 'mod+b',\n    },\n    toggleItalic: {\n      handler: ({ editor }) => {\n        editor.tf.toggleMark('italic');\n      },\n      keys: 'mod+i',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Node Path in the Editor\nDESCRIPTION: Demonstrates how to find the path of a node in the editor using the findPath method, which is overridden by withPlate to use ReactEditor.findPath for memoized path resolution.\n\nLANGUAGE: typescript\nCODE:\n```\nconst path = editor.findPath(node);\n```\n\n----------------------------------------\n\nTITLE: Configuring BlockSelectionPlugin in TSX\nDESCRIPTION: This code snippet shows how to configure the BlockSelectionPlugin with custom selection behaviors. It defines which elements should be selectable based on their types and position in the document structure.\n\nLANGUAGE: tsx\nCODE:\n```\nBlockSelectionPlugin.configure(({ editor }) => ({\n  options: {\n    enableContextMenu: true,\n    isSelectable: (element, path) => {\n      return (\n        !['code_line', 'column', 'td'].includes(element.type) &&\n        !editor.api.block({ above: true, at: path, match: { type: 'tr' } })\n      );\n    },\n  },\n}))\n```\n\n----------------------------------------\n\nTITLE: Fixing Floating Toolbar Selection Behavior in Plate\nDESCRIPTION: Series of fixes for the floating toolbar, including improvements for mouse selection outside the editor, keyboard selection support, and dropdown menu functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3302](https://github.com/udecode/plate/pull/3302) by [@felixfeng33](https://github.com/felixfeng33) – Fix: Floating toolbar can't open when mouse is released outside of editor.\n```\n\n----------------------------------------\n\nTITLE: Using the usePlaceholder Hook\nDESCRIPTION: Hook for implementing placeholder functionality in the editor, which hides during composition to prevent conflicts with IME input methods.\n\nLANGUAGE: typescript\nCODE:\n```\nconst placeholderProps = usePlaceholder({\n  placeholder: 'Type something...',\n  nodeType: 'paragraph'\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Utility Functions in v11.1.0\nDESCRIPTION: Introduces new utility functions getEdgeBlocksAbove for retrieving edge blocks above a location and getPluginTypes for getting plugin types by keys.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1546](https://github.com/udecode/plate/pull/1546) by [@zbeyens](https://github.com/zbeyens) –\n  - `getEdgeBlocksAbove`: Get the edge blocks above a location (default: selection).\n  - `getPluginTypes`: Get plugin types option by plugin keys.\n```\n\n----------------------------------------\n\nTITLE: Previous Plugin Creation Pattern in TypeScript\nDESCRIPTION: Shows the legacy approach to creating plugins using createPluginFactory, demonstrating how plugins were initialized before the system redesign.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPluginFactory = createPluginFactory({\n  key: 'myPlugin',\n  isElement: true,\n  component: MyComponent,\n});\nconst plugin = MyPluginFactory();\n```\n\n----------------------------------------\n\nTITLE: Using the Enabled Flag\nDESCRIPTION: Demonstrates how to conditionally enable or disable a plugin using the enabled property.\n\nLANGUAGE: ts\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  enabled: true, // or false to disable\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TextOperation Types in Slate\nDESCRIPTION: Definition of the TextOperation type which encompasses operations that modify text content in a Slate document. These include inserting and removing text from text nodes.\n\nLANGUAGE: ts\nCODE:\n```\nexport type TextOperation = InsertTextOperation | RemoveTextOperation;\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Marks with TypeScript in Plate Editor\nDESCRIPTION: Demonstrates different ways to add multiple marks to the current selection in a Plate editor, including adding simple marks and handling mutually exclusive marks like subscript/superscript.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.tf.addMarks({ bold: true, italic: true })\neditor.tf.addMarks({ bold: subscript }, { remove: 'superscript' })\neditor.tf.addMarks({ bold: true }, { remove: ['italic', 'underline'] })\n```\n\n----------------------------------------\n\nTITLE: Creating a Component with createPrimitiveComponent\nDESCRIPTION: Factory function for creating primitive components with state management and prop forwarding capabilities, supporting the asChild pattern from Radix UI.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyButton = createPrimitiveComponent(Button)({\n  stateHook: useButtonState,\n  propsHook: useButton,\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Card Components\nDESCRIPTION: CSS variables defining the background and foreground colors specifically for Card components in the UI.\n\nLANGUAGE: css\nCODE:\n```\n--card: 0 0% 100%;\n--card-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Previous Link Plugin Configuration Type in TypeScript\nDESCRIPTION: Shows how plugin configuration types were previously defined, using a simple object type with hotkey as an option.\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkPlugin = {\n  hotkey?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Plate DnD Dependencies\nDESCRIPTION: Command to install the necessary packages for implementing drag and drop functionality in Plate, including the core DnD package, node ID plugin, and required React DnD dependencies.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-dnd @udecode/plate-node-id react-dnd react-dnd-html5-backend\n```\n\n----------------------------------------\n\nTITLE: Working with HTML deserializer in Plate plugins\nDESCRIPTION: Shows how to configure the HTML deserializer in a PlatePlugin, including setting up rules for valid attributes, class names, node names, and styles.\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin: PlatePlugin = {\n  // Plugin configuration\n  type: 'my-element',\n  \n  // HTML deserializer configuration\n  deserializeHtml: {\n    // Define rules for deserializing HTML\n    rules: {\n      validAttribute: { id: true, class: true },\n      validClassName: /^my-class-/,\n      validNodeName: ['DIV', 'SPAN'],\n      validStyle: { color: true, fontSize: true }\n    },\n    // Define how to convert HTML to Slate nodes\n    getNode: (element, node) => {\n      if (element.tagName.toLowerCase() === 'div') {\n        return {\n          type: 'my-element',\n          children: [{ text: element.textContent || '' }]\n        };\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Tag Package\nDESCRIPTION: Command to install the required package for using the multi-select tag functionality in Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-tag\n```\n\n----------------------------------------\n\nTITLE: Enhancing Selection Bounding Rectangle and Floating Toolbar in Plate\nDESCRIPTION: Updates to getSelectionBoundingClientRect to use editor selection instead of DOM selection for better reliability. Also improves floating toolbar positioning and adds clickOutsideRef functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3616](https://github.com/udecode/plate/pull/3616) by [@zbeyens](https://github.com/zbeyens) –\n  - `getSelectionBoundingClientRect` is now returning the bounding client rect of the editor selection instead of the dom selection. This is more robust for cases like floating toolbar.\n  - Update floating toolbar position on value change, in addition to selection change.\n  - Return `clickOutsideRef` from `useFloatingToolbar` so it can be used to close the toolbar when clicking outside of it. Use `ignore-click-outside/toolbar` class to ignore clicks outside of the toolbar.\n```\n\n----------------------------------------\n\nTITLE: Deserializing HTML to Slate Content\nDESCRIPTION: Shows how to convert HTML strings back into Slate editor content using the HTML deserializer function, supporting round-trip conversion that preserves document structure and formatting.\n\nLANGUAGE: ts\nCODE:\n```\nimport { createPlateEditor } from '@udecode/plate/react';\n\nconst editor = createPlateEditor({\n  plugins: [\n    // all plugins that you want to deserialize\n  ],\n});\n\n// You can deserialize HTML strings\neditor.children = editor.api.html.deserialize('<p>Hello, world!</p>');\n\n// Or deserialize HTML previously exported from Plate\nconst exportedHtml = await serializeHtml(editor, { components });\nconst importedValue = editor.api.html.deserialize(exportedHtml);\neditor.children = importedValue;\n```\n\n----------------------------------------\n\nTITLE: New Align Plugin Implementation in TypeScript\nDESCRIPTION: Demonstrates the new approach to implementing the align plugin with the inject pattern and HTML parser configuration.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AlignPlugin = createSlatePlugin({\n  inject: {\n    nodeProps: {\n      defaultNodeValue: 'start',\n      nodeKey: 'align',\n      styleKey: 'textAlign',\n      validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n    },\n    targetPluginToInject: ({ editor, plugin }) => ({\n      parsers: {\n        html: {\n          deserializer: {\n            parse: ({ element, node }) => {\n              if (element.style.textAlign) {\n                node[editor.getType(plugin)] = element.style.textAlign;\n              }\n            },\n          },\n        },\n      },\n    }),\n    targetPlugins: [ParagraphPlugin.key],\n  },\n  key: 'align',\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Destructive Actions\nDESCRIPTION: CSS variables defining the colors for destructive actions like the destructive button variant, typically using red tones.\n\nLANGUAGE: css\nCODE:\n```\n--destructive: 0 100% 50%;\n--destructive-foreground: 210 40% 98%;\n```\n\n----------------------------------------\n\nTITLE: Plugin Renaming in Version 8.0.0\nDESCRIPTION: Major change from pull request #1234 renaming the createBasicElementPlugins function to createBasicElementsPlugin.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1234](https://github.com/udecode/plate/pull/1234) by [@zbeyens](https://github.com/zbeyens) –\n  - renamed `createBasicElementPlugins` to `createBasicElementsPlugin`\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Removing Empty Nodes in Plate's Select Plugin\nDESCRIPTION: Enhancement to the select plugin that adds functionality for removing empty nodes, providing better handling of selection and deletion operations.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2562](https://github.com/udecode/plate/pull/2562) by [@dimaanj](https://github.com/dimaanj) – select plugin: add support for removing empty nodes\n```\n\n----------------------------------------\n\nTITLE: Defining Descendant Type in TypeScript\nDESCRIPTION: Defines the Descendant union type that represents nodes that can be descendants in the tree, including elements and text nodes.\n\nLANGUAGE: typescript\nCODE:\n```\ntype Descendant = TElement | TText;\n```\n\n----------------------------------------\n\nTITLE: Adding Popover Options Props in Plate Floating\nDESCRIPTION: Implements a new property to customize popover options, providing more flexibility in configuring floating UI components.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2282](https://github.com/udecode/plate/pull/2282) by [@haydencarlson](https://github.com/haydencarlson) – Add popover options prop\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Navigation Component with Next.js and Vite Options\nDESCRIPTION: A grid layout component that provides navigation links to dark mode implementation guides for Next.js and Vite frameworks. Each option includes the framework's logo and a title.\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid sm:grid-cols-2 gap-4 sm:gap-6\">\n  <LinkedCard href=\"/docs/components/dark-mode/next\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Next.js</title>\n      <path d=\"M11.5725 0c-.1763 0-.3098.0013-.3584.0067-.0516.0053-.2159.021-.3636.0328-3.4088.3073-6.6017 2.1463-8.624 4.9728C1.1004 6.584.3802 8.3666.1082 10.255c-.0962.659-.108.8537-.108 1.7474s.012 1.0884.108 1.7476c.652 4.506 3.8591 8.2919 8.2087 9.6945.7789.2511 1.6.4223 2.5337.5255.3636.04 1.9354.04 2.299 0 1.6117-.1783 2.9772-.577 4.3237-1.2643.2065-.1056.2464-.1337.2183-.1573-.0188-.0139-.8987-1.1938-1.9543-2.62l-1.919-2.592-2.4047-3.5583c-1.3231-1.9564-2.4117-3.556-2.4211-3.556-.0094-.0026-.0187 1.5787-.0235 3.509-.0067 3.3802-.0093 3.5162-.0516 3.596-.061.115-.108.1618-.2064.2134-.075.0374-.1408.0445-.495.0445h-.406l-.1078-.068a.4383.4383 0 01-.1572-.1712l-.0493-.1056.0053-4.703.0067-4.7054.0726-.0915c.0376-.0493.1174-.1125.1736-.143.0962-.047.1338-.0517.5396-.0517.4787 0 .5584.0187.6827.1547.0353.0377 1.3373 1.9987 2.895 4.3608a10760.433 10760.433 0 004.7344 7.1706l1.9002 2.8782.096-.0633c.8518-.5536 1.7525-1.3418 2.4657-2.1627 1.5179-1.7429 2.4963-3.868 2.8247-6.134.0961-.6591.1078-.854.1078-1.7475 0-.8937-.012-1.0884-.1078-1.7476-.6522-4.506-3.8592-8.2919-8.2087-9.6945-.7672-.2487-1.5836-.42-2.4985-.5232-.169-.0176-1.0835-.0366-1.6123-.037zm4.0685 7.217c.3473 0 .4082.0053.4857.047.1127.0562.204.1642.237.2767.0186.061.0234 1.3653.0186 4.3044l-.0067 4.2175-.7436-1.14-.7461-1.14v-3.066c0-1.982.0093-3.0963.0234-3.1502.0375-.1313.1196-.2346.2323-.2955.0961-.0494.1313-.054.4997-.054z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Next.js</p>\n  </LinkedCard>\n  <LinkedCard href=\"/docs/components/dark-mode/vite\">\n    <svg\n      role=\"img\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className=\"w-10 h-10\"\n      fill=\"currentColor\"\n    >\n      <title>Vite</title>\n      <path d=\"m8.286 10.578.512-8.657a.306.306 0 0 1 .247-.282L17.377.006a.306.306 0 0 1 .353.385l-1.558 5.403a.306.306 0 0 0 .352.385l2.388-.46a.306.306 0 0 1 .332.438l-6.79 13.55-.123.19a.294.294 0 0 1-.252.14c-.177 0-.35-.152-.305-.369l1.095-5.301a.306.306 0 0 0-.388-.355l-1.433.435a.306.306 0 0 1-.389-.354l.69-3.375a.306.306 0 0 0-.37-.36l-2.32.536a.306.306 0 0 1-.374-.316zm14.976-7.926L17.284 3.74l-.544 1.887 2.077-.4a.8.8 0 0 1 .84.369.8.8 0 0 1 .034.783L12.9 19.93l-.013.025-.015.023-.122.19a.801.801 0 0 1-.672.37.826.826 0 0 1-.634-.302.8.8 0 0 1-.16-.67l1.029-4.981-1.12.34a.81.81 0 0 1-.86-.262.802.802 0 0 1-.165-.67l.63-3.08-2.027.468a.808.808 0 0 1-.768-.233.81.81 0 0 1-.217-.6l.389-6.57-7.44-1.33a.612.612 0 0 0-.64.906L11.58 23.691a.612.612 0 0 0 1.066-.004l11.26-20.135a.612.612 0 0 0-.644-.9z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Vite</p>\n  </LinkedCard>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Root-Level API Methods with .extendEditorApi in TypeScript\nDESCRIPTION: The extendEditorApi method adds root-level API methods that can be accessed directly via editor.api.methodName().\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendEditorApi(({ getOptions }) => ({\n  editorMethod: () => getOptions().someOption,\n}));\n\n// Access the plugin's API\neditor.api.editorMethod();\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Block Plugin with Lowlight in TypeScript/React\nDESCRIPTION: Example of configuring the CodeBlockPlugin with the lowlight library for syntax highlighting after migration from prismjs to highlight.js. Imports all language definitions and creates a lowlight instance.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { all, createLowlight } from 'lowlight';\n\nconst lowlight = createLowlight(all);\n\nCodeBlockPlugin.configure({\n  options: {\n    lowlight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced DebugPlugin Configuration Options\nDESCRIPTION: Demonstrates comprehensive configuration of the DebugPlugin including production mode settings, custom loggers, and error throwing behavior. This example shows how to customize logging functionality for different environments.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [\n    DebugPlugin.configure({\n      options: {\n        isProduction: process.env.NODE_ENV === 'production',\n        logLevel: 'info',\n        logger: {\n          error: (message, type, details) => {\n            // Custom error logging\n            console.error(`Custom Error: ${message}`, type, details);\n          },\n          // ... custom loggers for other levels\n        },\n        throwErrors: false,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSelectionArea Hook\nDESCRIPTION: A hook that initializes and manages selection area functionality, enabling users to select multiple blocks by dragging.\n\nLANGUAGE: typescript\nCODE:\n```\nuseSelectionArea()\n```\n\n----------------------------------------\n\nTITLE: Mapping Plugin Keys to Static Components in TypeScript\nDESCRIPTION: Creates a mapping object that associates plugin keys or node types with their corresponding static components for use with PlateStatic.\n\nLANGUAGE: ts\nCODE:\n```\nimport { ParagraphElementStatic } from './paragraph-element-static';\nimport { HeadingElementStatic } from './heading-element-static';\n// etc.\n\nexport const components = {\n  p: ParagraphElementStatic,\n  h1: HeadingElementStatic,\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Creating New Plate-Floating Package with Selection Utilities\nDESCRIPTION: Initial creation of the plate-floating package to replace plate-popper, introducing utilities for virtual elements, floating UI, and selection bounding client rectangle calculations.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1677](https://github.com/udecode/plate/pull/1677) by [@zbeyens](https://github.com/zbeyens) –\n  - new package replacing `plate-popper`\n  - dep:\n    - `\"@floating-ui/react-dom-interactions\": \"^0.6.6\"`\n  - re-exports `@floating-ui/react-dom-interactions`\n  - utils:\n    - `createVirtualElement`\n    - `useVirtualFloating`\n    - `getSelectionBoundingClientRect`\n```\n\n----------------------------------------\n\nTITLE: Plugin Renaming in Plate Select Module\nDESCRIPTION: Major change that renames plugins for consistency, converting createSelectOnBackspacePlugin to SelectOnBackspacePlugin and createDeletePlugin to DeletePlugin as part of API standardization.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createSelectOnBackspacePlugin` -> `SelectOnBackspacePlugin`\n  - `createDeletePlugin` -> `DeletePlugin`\n```\n\n----------------------------------------\n\nTITLE: Node Insertion Behavior Example\nDESCRIPTION: Demonstrates how the NodeIdPlugin handles node insertion, including handling existing IDs and inserting multiple nodes.\n\nLANGUAGE: tsx\nCODE:\n```\n<editor>\n  <hp id=\"10\">test</hp>\n</editor>\n\n// Insert node with existing ID (e.g. copy/paste)\neditor.tf.insertNode(<hp id=\"10\">inserted</hp>);\n// Results in:\n<editor>\n  <hp id=\"10\">test</hp>\n  <hp id=\"1\">inserted</hp>  {/* Gets new ID */}\n</editor>\n\n// Insert multiple nodes\neditor.tf.insertNodes([\n  <hp>inserted</hp>,\n  <hp>test</hp>,\n]);\n// Results in:\n<editor>\n  <hp id=\"10\">test</hp>\n  <hp id=\"1\">inserted</hp>  \n  <hp id=\"2\">test</hp>      \n</editor>\n```\n\n----------------------------------------\n\nTITLE: Migrating from PlateProvider to Plate Component in React\nDESCRIPTION: Example showing the migration from the old Plate/PlateProvider pattern to the new Plate/PlateContent components structure, where PlateContent must be explicitly rendered inside Plate.\n\nLANGUAGE: JSX\nCODE:\n```\n// Before\n<Plate />\n// or\n<PlateProvider>\n  <Plate />\n</PlateProvider>\n\n// After\n<Plate>\n  <PlateContent />\n</Plate>\n```\n\n----------------------------------------\n\nTITLE: Documenting Patch Changes in Markdown\nDESCRIPTION: This snippet documents patch changes for the plate project, including a fix for supporting custom paragraph types and listing updated dependencies with their corresponding commit references.\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#699](https://github.com/udecode/slate-plugins/pull/699) [`28f30c8a`](https://github.com/udecode/slate-plugins/commit/28f30c8a6b0a2d245d6f6403c8399f2e59d98b92) Thanks [@zbeyens](https://github.com/zbeyens)! - fix: support paragraph custom type\n\n- Updated dependencies [[`33605a49`](https://github.com/udecode/slate-plugins/commit/33605a495ccc3fd9b4f6cfdaf2eb0e6e59bd7a67), [`28f30c8a`](https://github.com/udecode/slate-plugins/commit/28f30c8a6b0a2d245d6f6403c8399f2e59d98b92), [`75e6d25d`](https://github.com/udecode/slate-plugins/commit/75e6d25de0f9cf2487adecff54c2993ebc795aa0)]:\n  - @udecode/slate-plugins-core@1.0.0-next.30\n  - @udecode/slate-plugins-common@1.0.0-next.30\n\n## 1.0.0-next.29\n\n### Patch Changes\n\n- Updated dependencies [[`dfbde8bd`](https://github.com/udecode/slate-plugins/commit/dfbde8bd856e1e646e3d8fe2cbf1df8f9b8c67c3), [`dfbde8bd`](https://github.com/udecode/slate-plugins/commit/dfbde8bd856e1e646e3d8fe2cbf1df8f9b8c67c3)]:\n  - @udecode/slate-plugins-core@1.0.0-next.29\n  - @udecode/slate-plugins-common@1.0.0-next.29\n\n## 1.0.0-next.26\n\n### Patch Changes\n\n- Updated dependencies [[`201a7993`](https://github.com/udecode/slate-plugins/commit/201a799342ff88405e120182d8554e70b726beea)]:\n  - @udecode/slate-plugins-core@1.0.0-next.26\n  - @udecode/slate-plugins-common@1.0.0-next.26\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Basic Elements\nDESCRIPTION: Instructions for installing the plate-basic-elements package or individual element packages using npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-basic-elements\n# or\nnpm install @udecode/plate-block-quote @udecode/plate-code-block @udecode/plate-heading\n```\n\n----------------------------------------\n\nTITLE: PlateProviderProps Interface Definition in TypeScript\nDESCRIPTION: Defines the interface for PlateProviderProps that extends PlateProviderEffectsProps and includes optional properties like initialValue, normalizeInitialValue, and scope.\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface PlateProviderProps<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> extends PlateProviderEffectsProps<V, E>,\n    Partial<Pick<PlateStoreState<V, E>, 'id' | 'editor'>> {\n  /**\n   * Initial value of the editor.\n   *\n   * @default [{ children: [{ text: '' }] }]\n   */\n  initialValue?: PlateStoreState<V>['value'];\n\n  /**\n   * When `true`, it will normalize the initial value passed to the `editor`\n   * once it gets created. This is useful when adding normalization rules on\n   * already existing content.\n   *\n   * @default false\n   */\n  normalizeInitialValue?: boolean;\n\n  scope?: Scope;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Version Requirement in package.json\nDESCRIPTION: Specifies the minimum TypeScript version (5.0.0) required for using the \"bundler\" moduleResolution option.\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n  \"devDependencies\": {\n    \"typescript\": \"^5.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Floating UI Dependencies in Plate\nDESCRIPTION: Upgrading from @floating-ui/react-dom-interactions to @floating-ui/react and adding Radix UI dropdown menu dependency for improved floating UI functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2289](https://github.com/udecode/plate/pull/2289) by [@zbeyens](https://github.com/zbeyens) –\n  - updated dep: `\"@floating-ui/react-dom-interactions\": \"^0.6.6\"` -> `\"@floating-ui/react\": \"^0.22.0\"`\n  - new dep: `\"@radix-ui/react-dropdown-menu\": \"^2.0.4\"`\n```\n\n----------------------------------------\n\nTITLE: Introduction of useElement Context Hook in v13.5.0\nDESCRIPTION: Introduces a new useElement hook that stores element references in context provided for each rendered element, requiring the plugin key for properly handling nested elements.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1616](https://github.com/udecode/plate/pull/1616) by [@zbeyens](https://github.com/zbeyens) –\n  - `useElement`: Plate is now storing `element` in a context provided in each rendered element. Required parameter: the plugin key is used as a scope as it's needed for nested elements.\n```\n\n----------------------------------------\n\nTITLE: Adding getDOMSelectionBoundingClientRect Function in Plate Floating Package\nDESCRIPTION: Added a new utility function to get the bounding client rectangle of DOM selection. This enables more precise positioning of floating elements relative to text selection.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3622](https://github.com/udecode/plate/pull/3622) by [@zbeyens](https://github.com/zbeyens) – Add `getDOMSelectionBoundingClientRect`\n```\n\n----------------------------------------\n\nTITLE: Defining AutoformatTextRule Interface in TypeScript\nDESCRIPTION: The AutoformatTextRule interface specifies the structure for text autoformatting rules. It requires a 'text' mode, a match pattern (either a string or array of strings), and a format parameter that can be a string, string array, or a formatting function that takes an editor and match options.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AutoformatTextRule {\n  mode: 'text';\n  match: string | string[];\n  format: string | string[] | ((editor: PlateEditor, options: GetMatchPointsReturnType) => void);\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Block Selection with Editor API\nDESCRIPTION: An editor API method that moves the selection up or down to the next selectable block. It clears the previous selection and selects only the new block.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.blockSelection.moveSelection(direction)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Plate Components\nDESCRIPTION: Configuration for Tailwind CSS to support Plate UI components, including scrollbar hiding, hover detection for mobile devices, and screen definitions that improve the user experience.\n\nLANGUAGE: typescript\nCODE:\n```\n// plugins\nrequire(\"tailwind-scrollbar-hide\")\n\n// theme.extend.screens\nscreens: {\n  /**\n   * Matches devices where the primary pointing device is capable of\n   * hovering conveniently. Usage: main-hover:group-hover:bg-red-500 See:\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/@media/hover\n   *\n   * On iOS devices, buttons inside a .group element that contains\n   * descendent elements with `group-hover:` CSS rules require two taps to\n   * click. As a workaround, we disable these rules on devices that cannot\n   * conveniently hover using `main-hover:`.\n   */\n  'main-hover': {\n    raw: '(hover: hover)',\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Minor Change in Version 24.4.0\nDESCRIPTION: Changelog entry documenting slate-react version 0.99.0 support in pull request #2675.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2675](https://github.com/udecode/plate/pull/2675) by [@zbeyens](https://github.com/zbeyens) – Support slate-react 0.99.0\n```\n\n----------------------------------------\n\nTITLE: Adding Plate components to a Remix project\nDESCRIPTION: Command to add Plate components to the components/plate-ui directory in your Remix project using the shadcn CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add -r plate\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to Slate JSON\nDESCRIPTION: Example of configuring the MarkdownPlugin and deserializing Markdown content to Slate JSON format.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\n\nconst editor = createPlateEditor({ \n  plugins: [\n    // ...other plugins,\n    MarkdownPlugin.configure({\n      options: {\n        remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n      },\n    }),\n  ],\n});\n\nconst value = editor.api.markdown.deserialize('**Hello world!**');\n```\n\n----------------------------------------\n\nTITLE: New Exports and Type Improvements in v11.2.0\nDESCRIPTION: Adds exports for isComposing from ReactEditor and Hotkeys from slate, and improves types by using slate type options when available.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1560](https://github.com/udecode/plate/pull/1560) by [@zbeyens](https://github.com/zbeyens) –\n  - exports `isComposing` from `ReactEditor`\n  - exports `Hotkeys` from slate\n  - types:\n    - use [slate type options](https://github.com/ianstormtaylor/slate/commit/3b7a1bf72d0c3951416c771f7f149bfbda411111) when defined\n```\n\n----------------------------------------\n\nTITLE: Adding Read-Only Support for Floating Toolbar in Plate\nDESCRIPTION: Implementation of a showWhenReadOnly property for the floating toolbar state, allowing the toolbar to be displayed even when the editor is in read-only mode.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3493](https://github.com/udecode/plate/pull/3493) by [@zbeyens](https://github.com/zbeyens) –\n  - Fixes #3492\n  - Add `state.showWhenReadOnly` prop to show the toolbar when read-only\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Autoformat Plugin with npm\nDESCRIPTION: Command to install the Plate Autoformat plugin package using npm package manager.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-autoformat\n```\n\n----------------------------------------\n\nTITLE: Updating useEditorState to useEditorSelector in Plate Floating\nDESCRIPTION: Replaces useEditorState with useEditorSelector for better state management and compatibility with nested editors.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2816](https://github.com/udecode/plate/pull/2816) by [@12joan](https://github.com/12joan) –\n  - Replace `useEdtiorState` with `useEditorSelector`\n```\n\n----------------------------------------\n\nTITLE: Getting Selection in Playwright\nDESCRIPTION: Code to retrieve the current selection in the editor and make assertions about its anchor and focus points.\n\nLANGUAGE: ts\nCODE:\n```\nconst selection = await getSelection(page, editorHandle);\n\nexpect(selection).toBe({\n  anchor: { path: [0, 0], offset: 0 },\n  focus: { path: [0, 0], offset: 7 },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Italic Plugin Deserialization\nDESCRIPTION: Bug fix specifically addressing the deserialization issue in the italic plugin. This patch ensures proper conversion of italic HTML elements to Slate format.\n\nLANGUAGE: markdown\nCODE:\n```\n[#720](https://github.com/udecode/slate-plugins/pull/720) [`53ebb551`](https://github.com/udecode/slate-plugins/commit/53ebb551d823b092e23b49370d9a924b853bd374) Thanks [@cawabunga](https://github.com/cawabunga)! - fix: deserialization of italic plugin\n```\n\n----------------------------------------\n\nTITLE: Managing plate store with hooks and selectors\nDESCRIPTION: Examples of using various hooks and selectors to interact with the plate store, including getting plate ID, accessing store data, and triggering actions.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  usePlateId, \n  usePlateStore, \n  usePlateSelectors, \n  getPlateActions,\n  getPlateSelectors\n} from '@udecode/plate';\n\n// Get the current plate ID\nconst plateId = usePlateId();\n\n// Access the plate store\nconst store = usePlateStore(plateId);\n\n// Use selectors for reactive data\nconst { value, enabled } = usePlateSelectors(plateId);\nconst editorValue = value();\nconst isEnabled = enabled();\n\n// Use actions to update state\ngetPlateActions(plateId).enabled(true);\ngetPlateActions(plateId).value(newValue);\n\n// Non-hook selectors (getters)\nconst storeValue = getPlateSelectors(plateId).value();\n```\n\n----------------------------------------\n\nTITLE: Node API Namespace Migrations in Plate\nDESCRIPTION: Documents functions moved to the NodeApi namespace. These functions handle node traversal, querying, and manipulation within the editor.\n\nLANGUAGE: typescript\nCODE:\n```\ngetNextSiblingNodes(parentEntry, path) -> NodeApi.children(editor, path, { from: path.at(-1) + 1 })\ngetFirstNodeText -> NodeApi.firstText\ngetFirstChild([node, path]) -> NodeApi.firstChild(editor, path)\ngetLastChild([node, path]) -> NodeApi.lastChild(editor, path)\ngetLastChildPath([node, path]) -> NodeApi.lastChild(editor, path)\nisLastChild([node, path], childPath) -> NodeApi.isLastChild(editor, childPath)\ngetChildren([node, path]) -> Array.from(NodeApi.children(editor, path))\ngetCommonNode -> NodeApi.common\ngetNode -> NodeApi.get\ngetNodeAncestor -> NodeApi.ancestor\ngetNodeAncestors -> NodeApi.ancestors\ngetNodeChild -> NodeApi.child\ngetNodeChildren -> NodeApi.children\ngetNodeDescendant -> NodeApi.descendant\ngetNodeDescendants -> NodeApi.descendants\ngetNodeElements -> NodeApi.elements\ngetNodeFirstNode -> NodeApi.first\ngetNodeFragment -> NodeApi.fragment\ngetNodeLastNode -> NodeApi.last\ngetNodeLeaf -> NodeApi.leaf\ngetNodeLevels -> NodeApi.levels\ngetNodeParent -> NodeApi.parent\ngetNodeProps -> NodeApi.extractProps\ngetNodes -> NodeApi.nodes\ngetNodeString -> NodeApi.string\ngetNodeTexts -> NodeApi.texts\nhasNode -> NodeApi.has\nhasSingleChild -> NodeApi.hasSingleChild\nisAncestor -> NodeApi.isAncestor\nisDescendant -> NodeApi.isDescendant\nisNode -> NodeApi.isNode\nisNodeList -> NodeApi.isNodeList\nnodeMatches -> NodeApi.matches\n```\n\n----------------------------------------\n\nTITLE: Defining Range Type in Slate\nDESCRIPTION: Definition of the TRange type in Slate, representing a span in a document with anchor (start) and focus (end) points.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TRange = {\n  anchor: Point\n  focus: Point\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Content in Plate Editor with TypeScript\nDESCRIPTION: Demonstrates different ways to select content in a Plate editor, including basic selection and selecting with edge options for start or end positions.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.tf.select(at)\neditor.tf.select(at, { edge: 'end' })\neditor.tf.select(at, { edge: 'start' })\n```\n\n----------------------------------------\n\nTITLE: Migrating toggle functions in Plate\nDESCRIPTION: The signature for toggle functions has been changed to be more direct. This example shows how to migrate toggle.block and toggle.mark functions to the new format.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\neditor.tf.toggle.block({ type: 'paragraph', ...options });\neditor.tf.toggle.mark({ key: 'bold', clear: true });\n\n// After\neditor.tf.toggleBlock('paragraph', options);\neditor.tf.toggleMark('bold', { remove: true }); // 'clear' renamed to 'remove'\n```\n\n----------------------------------------\n\nTITLE: Defining Point Type in Slate\nDESCRIPTION: A Point represents a specific location in a Slate document with a path to a text node and an offset within that text node's content.\n\nLANGUAGE: typescript\nCODE:\n```\ntype Point = {\n  path: Path\n  offset: number\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing the Editor in Plate\nDESCRIPTION: Demonstrates how to focus the editor with different options for controlling cursor placement. The focus method can position the cursor at the beginning or end of content or selection.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.tf.focus()\neditor.tf.focus({ edge: 'end' })\neditor.tf.focus({ edge: 'endEditor' })\n```\n\n----------------------------------------\n\nTITLE: Using plugin hooks with useHooks property\nDESCRIPTION: Example of implementing the useHooks property in a PlatePlugin to execute hooks once the editor is initialized.\n\nLANGUAGE: typescript\nCODE:\n```\nconst myPlugin: PlatePlugin = {\n  type: 'my-plugin',\n  \n  // useHooks will be called once the editor is initialized\n  useHooks: (editor, plugin) => {\n    // Run hooks here\n    React.useEffect(() => {\n      console.log('Editor initialized with plugin:', plugin.type);\n      \n      // Setup event handlers or other side effects\n      \n      return () => {\n        // Cleanup when editor unmounts or plugins change\n        console.log('Cleaning up plugin:', plugin.type);\n      };\n    }, [editor, plugin]);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from options prop to plugin configuration in Plate\nDESCRIPTION: Demonstrates how to migrate from the removed options prop to either using the plugin factory pattern or createPlugins function with overrideByKey for configuration.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Plate plugins={plugins} options={options} />;\n\n// After\n// option 1: use the plugin factory\nlet plugins = [\n  createParagraphPlugin({\n    type: 'paragraph',\n  }),\n];\n\n// option 2: use createPlugins\nplugins = createPlugins(plugins, {\n  overrideByKey: {\n    [ELEMENT_PARAGRAPH]: {\n      type: 'paragraph',\n    },\n  },\n});\n\n<Plate plugins={plugins} />;\n```\n\n----------------------------------------\n\nTITLE: Package and Store Migrations in Plate\nDESCRIPTION: Documents package migrations and updates to Zustand store implementation. Includes changes to store creation syntax and performance improvements.\n\nLANGUAGE: typescript\nCODE:\n```\n// Moved from @udecode/plate/react to @udecode/plate:\nHotkeys\n\n// Upgraded to zustand@5 and zustand-x@5:\n// Replace createZustandStore('name')(initialState) with createZustandStore(initialState, { mutative: true, name: 'name' })\n// All plugin stores now use zustand-mutative for immutable state updates, which is faster than immer.\n```\n\n----------------------------------------\n\nTITLE: Defining Ancestor Type in TypeScript\nDESCRIPTION: Defines the Ancestor union type that represents nodes that can be ancestors in the tree, including editors and elements.\n\nLANGUAGE: typescript\nCODE:\n```\ntype Ancestor = Editor | TElement;\n```\n\n----------------------------------------\n\nTITLE: Adding Plate UI Components with CLI\nDESCRIPTION: Various command formats for adding Plate UI components to a project, demonstrating prefix syntax, mixed usage, and registry option approaches.\n\nLANGUAGE: bash\nCODE:\n```\n# Using prefix syntax\nnpx shadcx@latest add plate/editor plate/toolbar\n\n# Or mixed usage (registry will be from the first prefix found)\nnpx shadcx@latest add plate/editor toolbar\n\n# Or using registry option\nnpx shadcx@latest add editor toolbar -r plate\n```\n\n----------------------------------------\n\nTITLE: Enhanced setNodes Functionality in Plate\nDESCRIPTION: Details the enhanced functionality in the editor.tf.setNodes method, particularly related to mark handling and special case behaviors.\n\nLANGUAGE: typescript\nCODE:\n```\n// Enhanced editor.tf.setNodes:\n// - Added marks option to handle mark-specific operations\n// - When marks: true:\n//   - Only applies to text nodes in non-void nodes or markable void nodes\n//   - Automatically sets split: true and voids: true\n//   - Handles both expanded ranges and collapsed selections in markable voids\n// - Replaces addRangeMarks functionality\n```\n\n----------------------------------------\n\nTITLE: Adding Plate UI Components in Astro\nDESCRIPTION: Command to add Plate UI components to the components/plate-ui directory. This populates your project with necessary UI components for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add -r plate\n```\n\n----------------------------------------\n\nTITLE: Updated SerializeHtml type in PlatePlugin\nDESCRIPTION: Shows the change in the serialize property, which no longer has element and leaf properties but now uses a RenderFunction type with PlateRenderElementProps or PlateRenderLeafProps.\n\nLANGUAGE: ts\nCODE:\n```\ntype SerializeHtml = RenderFunction<\n  PlateRenderElementProps | PlateRenderLeafProps\n>;\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies for @udecode/plate v42.0.0 Migration\nDESCRIPTION: JSON configuration showing the required package dependencies needed when migrating to @udecode/plate v42.0.0, where individual plugin packages must be added explicitly.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@udecode/plate-alignment\": \"42.0.0\",\n  \"@udecode/plate-autoformat\": \"42.0.0\",\n  \"@udecode/plate-basic-elements\": \"42.0.0\",\n  \"@udecode/plate-basic-marks\": \"42.0.0\",\n  \"@udecode/plate-block-quote\": \"42.0.0\",\n  \"@udecode/plate-break\": \"42.0.0\",\n  \"@udecode/plate-code-block\": \"42.0.0\",\n  \"@udecode/plate-combobox\": \"42.0.0\",\n  \"@udecode/plate-comments\": \"42.0.0\",\n  \"@udecode/plate-csv\": \"42.0.0\",\n  \"@udecode/plate-diff\": \"42.0.0\",\n  \"@udecode/plate-docx\": \"42.0.0\",\n  \"@udecode/plate-find-replace\": \"42.0.0\",\n  \"@udecode/plate-floating\": \"42.0.0\",\n  \"@udecode/plate-font\": \"42.0.0\",\n  \"@udecode/plate-heading\": \"42.0.0\",\n  \"@udecode/plate-highlight\": \"42.0.0\",\n  \"@udecode/plate-horizontal-rule\": \"42.0.0\",\n  \"@udecode/plate-indent\": \"42.0.0\",\n  \"@udecode/plate-indent-list\": \"42.0.0\",\n  \"@udecode/plate-kbd\": \"42.0.0\",\n  \"@udecode/plate-layout\": \"42.0.0\",\n  \"@udecode/plate-line-height\": \"42.0.0\",\n  \"@udecode/plate-link\": \"42.0.0\",\n  \"@udecode/plate-list\": \"42.0.0\",\n  \"@udecode/plate-markdown\": \"42.0.0\",\n  \"@udecode/plate-media\": \"42.0.0\",\n  \"@udecode/plate-mention\": \"42.0.0\",\n  \"@udecode/plate-node-id\": \"42.0.0\",\n  \"@udecode/plate-normalizers\": \"42.0.0\",\n  \"@udecode/plate-reset-node\": \"42.0.0\",\n  \"@udecode/plate-resizable\": \"42.0.0\",\n  \"@udecode/plate-select\": \"42.0.0\",\n  \"@udecode/plate-selection\": \"42.0.0\",\n  \"@udecode/plate-slash-command\": \"42.0.0\",\n  \"@udecode/plate-suggestion\": \"42.0.0\",\n  \"@udecode/plate-tabbable\": \"42.0.0\",\n  \"@udecode/plate-table\": \"42.0.0\",\n  \"@udecode/plate-toggle\": \"42.0.0\",\n  \"@udecode/plate-trailing-block\": \"42.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TLocation Type in TypeScript\nDESCRIPTION: Defines the TLocation type alias in Slate, which represents a union type of Path, Point, or TRange objects used to identify positions within document structures.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TLocation = Path | Point | TRange\n```\n\n----------------------------------------\n\nTITLE: Toggling Marks in Plate Editor with TypeScript\nDESCRIPTION: Shows how to toggle marks on and off in a Plate editor. Demonstrates simple toggling as well as handling mutually exclusive marks by removing one before adding another.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.tf.toggleMark('bold')                                // Toggle bold on/off\neditor.tf.toggleMark('subscript', { remove: 'superscript'}) // Remove superscript before adding subscript\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tab Key Handling for Copilot\nDESCRIPTION: Configuration to handle Tab key conflicts between Copilot and other plugins by ensuring proper plugin order in the configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...其他插件,\n  CopilotPlugin,\n  // 将使用 Tab 的插件放在 Copilot 之后\n  IndentPlugin,\n  TabbablePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Range and Node Utilities in Plate\nDESCRIPTION: Maps deprecated range and node utility functions to their new equivalents in the editor.api namespace. These functions handle operations on ranges and editor node structure.\n\nLANGUAGE: typescript\nCODE:\n```\nunhangCharacterRange -> editor.api.unhangRange(range, { character: true })\nunhangRange -> editor.api.unhangRange\nunsetNodes -> editor.tf.unsetNodes\nunwrapNodes -> editor.tf.unwrapNodes\nwithoutNormalizing -> editor.tf.withoutNormalizing\nwrapNodeChildren -> editor.tf.wrapNodes(element, { children: true })\nwrapNodes -> editor.tf.wrapNodes\nreplaceNodeChildren -> editor.tf.replaceNodes({ at, children: true })\nresetEditor -> editor.tf.reset\nresetEditorChildren -> editor.tf.reset({ children: true })\nselectEditor -> editor.tf.select([], { focus, edge })\nselectSiblingNodePoint -> editor.tf.select(at, { next, previous })\n```\n\n----------------------------------------\n\nTITLE: Using Registry Prefix with shadcx CLI\nDESCRIPTION: Command showing how to specify which registry to use when adding components with the CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/button\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value in Plate Editor\nDESCRIPTION: Shows how to initialize a Plate editor with content by setting the initial value with a paragraph node.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin],\n  value: [\n    {\n      type: 'p',\n      children: [{ text: 'Hello, Plate!' }],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Moving event handlers to handlers field in PlatePlugin\nDESCRIPTION: Shows how event handler methods like onDrop have been moved to a dedicated handlers object within the plugin definition.\n\nLANGUAGE: ts\nCODE:\n```\n// Before\nonDrop: handler;\n\n// After\nhandlers: {\n  onDrop: handler;\n}\n```\n\n----------------------------------------\n\nTITLE: Export Configuration for Plate.js v42.0.0 Packages\nDESCRIPTION: TypeScript code showing how to create a centralized plate.ts file that re-exports all the individual Plate.js packages, making it easier to maintain imports across a codebase after migration.\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@udecode/plate-alignment';\nexport * from '@udecode/plate-autoformat';\nexport * from '@udecode/plate-basic-elements';\nexport * from '@udecode/plate-basic-marks';\nexport * from '@udecode/plate-block-quote';\nexport * from '@udecode/plate-break';\nexport * from '@udecode/plate-code-block';\nexport * from '@udecode/plate-combobox';\nexport * from '@udecode/plate-comments';\nexport * from '@udecode/plate-diff';\nexport * from '@udecode/plate-find-replace';\nexport * from '@udecode/plate-font';\nexport * from '@udecode/plate-heading';\nexport * from '@udecode/plate-highlight';\nexport * from '@udecode/plate-horizontal-rule';\nexport * from '@udecode/plate-indent';\nexport * from '@udecode/plate-indent-list';\nexport * from '@udecode/plate-kbd';\nexport * from '@udecode/plate-layout';\nexport * from '@udecode/plate-line-height';\nexport * from '@udecode/plate-link';\nexport * from '@udecode/plate-list';\nexport * from '@udecode/plate-media';\nexport * from '@udecode/plate-mention';\nexport * from '@udecode/plate-node-id';\nexport * from '@udecode/plate-normalizers';\nexport * from '@udecode/plate-reset-node';\nexport * from '@udecode/plate-select';\nexport * from '@udecode/plate-csv';\nexport * from '@udecode/plate-docx';\nexport * from '@udecode/plate-markdown';\nexport * from '@udecode/plate-slash-command';\nexport * from '@udecode/plate-suggestion';\nexport * from '@udecode/plate-tabbable';\nexport * from '@udecode/plate-table';\nexport * from '@udecode/plate-toggle';\nexport * from '@udecode/plate-trailing-block';\nexport * from '@udecode/plate-alignment/react';\nexport * from '@udecode/plate-autoformat/react';\nexport * from '@udecode/plate-basic-elements/react';\nexport * from '@udecode/plate-basic-marks/react';\nexport * from '@udecode/plate-block-quote/react';\nexport * from '@udecode/plate-break/react';\nexport * from '@udecode/plate-code-block/react';\nexport * from '@udecode/plate-combobox/react';\nexport * from '@udecode/plate-comments/react';\nexport * from '@udecode/plate-floating';\nexport * from '@udecode/plate-font/react';\nexport * from '@udecode/plate-heading/react';\nexport * from '@udecode/plate-highlight/react';\nexport * from '@udecode/plate-layout/react';\nexport * from '@udecode/plate-slash-command/react';\nexport * from '@udecode/plate-indent/react';\nexport * from '@udecode/plate-indent-list/react';\nexport * from '@udecode/plate-kbd/react';\nexport * from '@udecode/plate-line-height/react';\nexport * from '@udecode/plate-link/react';\nexport * from '@udecode/plate-list/react';\nexport * from '@udecode/plate-media/react';\nexport * from '@udecode/plate-reset-node/react';\nexport * from '@udecode/plate-selection';\nexport * from '@udecode/plate-suggestion/react';\nexport * from '@udecode/plate-tabbable/react';\nexport * from '@udecode/plate-table/react';\nexport * from '@udecode/plate-toggle/react';\nexport * from '@udecode/plate-resizable';\n```\n\n----------------------------------------\n\nTITLE: Defining ElementIn Generic Type in TypeScript for Slate\nDESCRIPTION: A utility type to get an element type from a Slate Value type. It uses ElementOf to extract element node types from the given value type.\n\nLANGUAGE: ts\nCODE:\n```\ntype ElementIn<V extends Value> = ElementOf<V[number]>;\n```\n\n----------------------------------------\n\nTITLE: Setting Tailwind CSS Path in components.json\nDESCRIPTION: Defines the path to the CSS file that imports Tailwind CSS into your project.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"css\": \"styles/global.css\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating to editor.api for queries in Plate\nDESCRIPTION: Editor queries have been consolidated under the editor.api namespace with more consistent naming patterns. This example shows how to use various query functions.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { isEditorEmpty, getSelectionText, isBlockAboveEmpty } from '@udecode/plate';\nconst isEmpty = isEditorEmpty(editor);\nconst text = getSelectionText(editor);\nconst isBlockEmpty = isBlockAboveEmpty(editor);\n\n// After\nconst isEmpty = editor.api.isEmpty();\nconst text = editor.api.string();\nconst isBlockEmpty = editor.api.isEmpty(editor.selection, { block: true });\n```\n\n----------------------------------------\n\nTITLE: Using the PlateElement Component\nDESCRIPTION: Example of the PlateElement component which renders content below the root element but above children, and adds a data-block-id attribute for element identification.\n\nLANGUAGE: jsx\nCODE:\n```\n<PlateElement element={element} data-block-id={element.id}>\n  {children}\n</PlateElement>\n```\n\n----------------------------------------\n\nTITLE: Defining TableTransforms Type Structure in TypeScript\nDESCRIPTION: TypeScript interface definition for TableTransforms that provides methods for table operations including insertion, removal, and cell manipulation operations like merging and splitting.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableTransforms = {\n  insert: {\n    table: OmitFirst<typeof insertTable>;\n  };\n  remove: {\n    table: OmitFirst<typeof deleteTable>;\n    tableColumn: OmitFirst<typeof deleteColumn>;\n    tableRow: OmitFirst<typeof deleteRow>;\n  };\n  table: {\n    merge: OmitFirst<typeof mergeTableCells>;\n    split: OmitFirst<typeof splitTableCell>;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Migrating from Plate UI Components to CLI Generated Components\nDESCRIPTION: Instructions for generating UI components using the new Plate CLI, which is now installed as a dev dependency instead of using the previously included components.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before: importing components directly\nimport { SomeComponent } from '@udecode/plate-ui-x';\n\n// After: generate components using the CLI\n// See https://platejs.org/docs/components/cli\n```\n\n----------------------------------------\n\nTITLE: Defining ElementOrTextOf Generic Type in TypeScript for Slate\nDESCRIPTION: A type utility that represents either an element or a text node from a specific editor type. This enables type safety when working with nodes from a particular editor implementation.\n\nLANGUAGE: ts\nCODE:\n```\ntype ElementOrTextOf<E extends Editor> = ElementOf<E> | TextOf<E>;\n```\n\n----------------------------------------\n\nTITLE: Block Method Usage Examples in Editor API\nDESCRIPTION: Shows various ways to use the block method to retrieve blocks at different locations or with different constraints, demonstrating the flexibility of the API.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.block() // Get block above selection\neditor.api.block({ above: true }) // Get block above selection\neditor.api.block({ at: [0, 0] }) // Get block at [0, 0]\neditor.api.block({ at: [0, 0], above: true }) // Get block at [0]\neditor.api.block({ highest: true }) // Get highest block at selection\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the LineHeightPlugin in Plate\nDESCRIPTION: Example of how to import the LineHeightPlugin and add it to the plugins array in a Plate editor configuration. This enables line height functionality for block elements.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LineHeightPlugin } from '@udecode/plate-line-height/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  LineHeightPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Examples of migrated editor functions in Plate\nDESCRIPTION: Several editor functions have been moved to the editor.api or editor.tf namespaces. This example shows how to use various functions in the new structure.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { addMark, findNode, getBlockAbove, isMarkActive } from '@udecode/plate';\naddMark(editor, 'bold', true);\nconst node = findNode(editor, options);\nconst block = getBlockAbove(editor);\nconst isBold = isMarkActive(editor, 'bold');\n\n// After\neditor.tf.addMark('bold', true);\nconst node = editor.api.node(options);\nconst block = editor.api.block();\nconst isBold = editor.api.hasMark('bold');\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Deserializer for Paste from CSV\nDESCRIPTION: A patch that introduces the CSV deserializer functionality, allowing users to paste CSV data directly into the editor. This enables easy conversion of CSV format into table structures in the editor.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#822](https://github.com/udecode/slate-plugins/pull/822) [`0779802d`](https://github.com/udecode/slate-plugins/commit/0779802d0eab817fcb1e7de21d1e2fcff3d5fd8f) Thanks [@dylans](https://github.com/dylans)! - Add CSV deserializer for paste from CSV\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Select Plugins\nDESCRIPTION: Example of configuring the SelectOnBackspacePlugin and DeletePlugin in the plugins array of a Plate editor.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  SelectOnBackspacePlugin.configure({\n    options: {\n      query: {\n        allow: ['img', 'hr'],\n      },\n    },\n  }),\n  DeletePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading Plugin with Maximum Level in TypeScript\nDESCRIPTION: Example showing the traditional way of configuring the heading plugin by specifying a maximum level, which enables all heading levels from 1 up to the specified number.\n\nLANGUAGE: typescript\nCODE:\n```\nconst headingPlugin = createHeadingPlugin({\n  levels: 6, // Enable heading levels 1, 2, 3, 4, 5 and 6\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Juice Package for DOCX Serialization\nDESCRIPTION: Command to install the @udecode/plate-juice package, which was removed from @udecode/plate in version 13.0.0 but is required when using the DOCX serializer.\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @udecode/plate-juice\n```\n\n----------------------------------------\n\nTITLE: Using splitNodes Transform in Slate\nDESCRIPTION: Splits nodes at a specified location. Options control how deep the split occurs, which nodes are affected, and how void nodes are handled.\n\nLANGUAGE: typescript\nCODE:\n```\nsplitNodes(options?: SplitNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Setting Shortcut Priorities in Plate Plugins with TypeScript\nDESCRIPTION: This code shows how to manage conflicting shortcuts using the priority property. When multiple plugins define the same key combination, the one with higher priority will take precedence.\n\nLANGUAGE: typescript\nCODE:\n```\nconst HighPriorityPlugin = createPlatePlugin({\n  key: 'highPriority',\n  shortcuts: {\n    myShortcut: {\n      handler: () => console.info('High priority'),\n      keys: 'mod+k',\n      priority: 100,\n    },\n  },\n});\n\nconst LowPriorityPlugin = createPlatePlugin({\n  key: 'lowPriority',\n  shortcuts: {\n    myShortcut: {\n      handler: () => console.info('Low priority'),\n      keys: 'mod+k',\n      priority: 50,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from createTEditor to createEditor in Plate\nDESCRIPTION: The createTEditor function has been renamed to createEditor. The new function returns an editor with all queries under editor.api and transforms under editor.tf, improving organization and type safety.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { createTEditor } from '@udecode/plate';\nconst editor = createTEditor();\n\n// After\nimport { createEditor } from '@udecode/plate';\nconst editor = createEditor(); // Now returns editor with .api and .tf properties\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for @udecode/plate-math\nDESCRIPTION: A markdown changelog documenting version changes for the @udecode/plate-math package, including features such as equation and inlineEquation plugins, toolbar buttons, and various fixes.\n\nLANGUAGE: markdown\nCODE:\n```\n# @udecode/plate-math\n\n## 44.0.0\n\n## 43.0.0\n\n### Minor Changes\n\n- [#4019](https://github.com/udecode/plate/pull/4019) by [@zbeyens](https://github.com/zbeyens) – Upgrade dependencies to latest\n\n## 42.0.0\n\n## 41.0.11\n\n### Patch Changes\n\n- [#3923](https://github.com/udecode/plate/pull/3923) by [@wststone](https://github.com/wststone) – fix: equation input undo history not working.\n\n## 41.0.4\n\n### Patch Changes\n\n- [`ddaa89a49075c341cdf7dde57a549435daa1845e`](https://github.com/udecode/plate/commit/ddaa89a49075c341cdf7dde57a549435daa1845e) by [@felixfeng33](https://github.com/felixfeng33) – Missing export\n\n## 41.0.3\n\n### Patch Changes\n\n- [#3888](https://github.com/udecode/plate/pull/3888) by [@felixfeng33](https://github.com/felixfeng33) – Add `getEquationHtml`\n\n## 41.0.0\n\n## 40.3.3\n\n### Patch Changes\n\n- [#3852](https://github.com/udecode/plate/pull/3852) by [@wststone](https://github.com/wststone) – Fixes #3851\n\n## 40.0.0\n\n## 39.2.0\n\n### Minor Changes\n\n- [#3644](https://github.com/udecode/plate/pull/3644) by [@felixfeng33](https://github.com/felixfeng33) – Add `editor.tf.insert.equation`, `editor.tf.insert.inlineEquation`\n\n## 39.1.8\n\n### Patch Changes\n\n- [`52b590477c5376f871f88a862ca521d9c35149e4`](https://github.com/udecode/plate/commit/52b590477c5376f871f88a862ca521d9c35149e4) by [@zbeyens](https://github.com/zbeyens) – Prerelease 2\n\n## 39.0.0\n\n## 38.0.1\n\n### Patch Changes\n\n- [#3526](https://github.com/udecode/plate/pull/3526) by [@zbeyens](https://github.com/zbeyens) – Prefix base plugin with `Base`\n\n## 38.0.0\n\n## 37.0.0\n\n### Major Changes\n\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createMathPlugin` -> `MathPlugin`\n\n## 36.0.0\n\n## 34.1.0\n\n### Minor Changes\n\n- [#3289](https://github.com/udecode/plate/pull/3289) by [@felixfeng33](https://github.com/felixfeng33) – Add `inline-equation` toolbar button\n\n## 34.0.0\n\n### Minor Changes\n\n- [#3241](https://github.com/udecode/plate/pull/3241) by [@felixfeng33](https://github.com/felixfeng33) – Add `equation` and `inlineEquation` plugins.\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Error Tolerance for CSV Deserializer\nDESCRIPTION: A patch change that adds an optional errorTolerance parameter to the CSV deserializer detection mechanism. This allows more flexibility when parsing CSV data that might have minor formatting issues.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#907](https://github.com/udecode/plate/pull/907) [`decc90d9`](https://github.com/udecode/plate/commit/decc90d984170d94ac8dbd0dc487a107d68d296d) Thanks [@dylans](https://github.com/dylans)! - add optional errorTolerance for csv deserializer detection\n```\n\n----------------------------------------\n\nTITLE: DeserializeHtml type definition for HTML to Slate conversion\nDESCRIPTION: Detailed type definition for DeserializeHtml that specifies how HTML elements are converted to Slate nodes, with options for attributes, element/leaf handling, queries, and style validation.\n\nLANGUAGE: tsx\nCODE:\n```\ntype DeserializeHtml = {\n  /** List of HTML attribute names to store their values in `node.attributes`. */\n  attributeNames?: string[];\n\n  /**\n   * Deserialize an element. Use this instead of plugin.isElement if you don't\n   * want the plugin to renderElement.\n   *\n   * @default plugin.isElement\n   */\n  isElement?: boolean;\n\n  /**\n   * Deserialize a leaf. Use this instead of plugin.isLeaf if you don't want the\n   * plugin to renderLeaf.\n   *\n   * @default plugin.isLeaf\n   */\n  isLeaf?: boolean;\n\n  /** Deserialize html element to slate node. */\n  getNode?: (element: HTMLElement) => AnyObject | undefined;\n\n  query?: (element: HTMLElement) => boolean;\n\n  /**\n   * Deserialize an element:\n   *\n   * - If this option (string) is in the element attribute names.\n   * - If this option (object) values match the element attributes.\n   */\n  validAttribute?: string | { [key: string]: string | string[] };\n\n  /** Valid element `className`. */\n  validClassName?: string;\n\n  /** Valid element `nodeName`. Set '*' to allow any node name. */\n  validNodeName?: string | string[];\n\n  /**\n   * Valid element style values. Can be a list of string (only one match is\n   * needed).\n   */\n  validStyle?: Partial<\n    Record<keyof CSSStyleDeclaration, string | string[] | undefined>\n  >;\n\n  /** Whether or not to include deserialized children on this node */\n  withoutChildren?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Using duplicateNodes Transform in Slate\nDESCRIPTION: Duplicates nodes at a location and inserts them after that location. This transform accepts options like insertion location, whether to duplicate blocks, and specific nodes to duplicate.\n\nLANGUAGE: typescript\nCODE:\n```\nduplicateNodes(options?: DuplicateNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Core Editor Functionality and Normalization in Plate\nDESCRIPTION: Core methods for controlling the editor's normalization process. These functions determine when and how the editor normalizes its content after operations.\n\nLANGUAGE: typescript\nCODE:\n```\ngetDirtyPaths(operation: Operation<N extends DescendantIn<V>>) => Path[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetNormalizing(isNormalizing: boolean) => void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nshouldMergeNodesRemovePrevNode(prevNodeEntry: NodeEntry, curNodeEntry: NodeEntry) => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nshouldNormalize({ dirtyPaths, initialDirtyPathsLength, iteration, operation? }) => boolean\n```\n\n----------------------------------------\n\nTITLE: Extending Nested Plugins with .extendPlugin Method in TypeScript\nDESCRIPTION: The .extendPlugin method adds new properties or modifies existing ones in a nested plugin. It returns a new parent plugin instance with the extended nested plugin.\n\nLANGUAGE: typescript\nCODE:\n```\nconst TablePlugin = createPlatePlugin({\n  key: 'table',\n  plugins: [TableCellPlugin],\n}).extendPlugin(TableCellPlugin, {\n  options: {\n    newCellOption: 'added',\n  },\n  handlers: {\n    onKeyDown: () => {\n      // Custom key down logic for table cells\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Working with the cn Utility Package\nDESCRIPTION: The @udecode/cn package provides utility functions for classname and component management in Plate. It includes cn (joins classNames conditionally), withCn (sets default className), withProps (sets default props), and withVariants (sets default className using class-variance-authority).\n\nLANGUAGE: typescript\nCODE:\n```\n- `cn`: utility function to conditionally join classNames\n- `withCn`: Set default `className` to a component using `cn`\n- `withProps`: Set default props to a component\n- `withVariants`: Set default `className` to a component using variants from `class-variance-authority`\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Plugin with Custom Parse Options in TypeScript\nDESCRIPTION: Example showing how to configure the CSV deserializer plugin with custom PapaParse options. The parseOptions parameter allows customizing CSV parsing behavior such as disabling the header row.\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDeserializeCsvPlugin({\n  options: {\n    parseOptions: {\n      header: false,\n    },\n  },\n}),\n```\n\n----------------------------------------\n\nTITLE: Removing Fragment and Insert Options\nDESCRIPTION: A major change that removes getFragment and insert options in favor of new plugin options. This is part of the migration from Slate Plugins to Plate.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#869](https://github.com/udecode/slate-plugins/pull/869) [`fd91359d`](https://github.com/udecode/slate-plugins/commit/fd91359dc3722292cee06e0f80ed414934b27572) Thanks [@zbeyens](https://github.com/zbeyens)! - Removed `getFragment` and `insert` option in favor of the new plugin options.\n```\n\n----------------------------------------\n\nTITLE: ComboboxItemData Interface Definition in TypeScript\nDESCRIPTION: Interface definition for ComboboxItemData, which replaced MentionNodeData in version 5.0.0. This interface defines the structure of combobox items including key, text, disabled state, and custom data properties.\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ComboboxItemData {\n  /** Unique key. */\n  key: string;\n  /** Item text. */\n  text: any;\n  /**\n   * Whether the item is disabled.\n   *\n   * @default false\n   */\n  disabled?: boolean;\n  /** Data available to `onRenderItem`. */\n  data?: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Using isAt Method with Ranges and Points in Plate Editor\nDESCRIPTION: Demonstrates how to use the isAt method to check if a location (point/range) is at specific positions, such as within a text node, across blocks, or at text boundaries.\n\nLANGUAGE: typescript\nCODE:\n```\n// For ranges:\neditor.api.isAt({ text: true }) // Check if range is in a single text node\neditor.api.isAt({ block: true }) // Check if range is in a single block\neditor.api.isAt({ blocks: true }) // Check if range is across multiple blocks\neditor.api.isAt({ start: true }) // Check if range starts at block start\neditor.api.isAt({ end: true }) // Check if range ends at block end\n\n// For points:\neditor.api.isAt({ word: true }) // Check relative to word boundaries\neditor.api.isAt({ start: true }) // Check if at start\neditor.api.isAt({ end: true }) // Check if at end\n```\n\n----------------------------------------\n\nTITLE: Converting TableElement to use TableProvider with HOC Pattern\nDESCRIPTION: Shows how to migrate TableElement implementation to use TableProvider as a higher-order component, addressing changes required in version 7.2.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nexport const TableElement = withRef<typeof PlateElement>(\n  ({ className, children, ...props }, ref) => {\n    // ...\n  }\n);\n\n// After\nexport const TableElement = withHOC(\n  TableProvider,\n  withRef<typeof PlateElement>(({ className, children, ...props }, ref) => {\n    // ...\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration with Path Aliases for Plate\nDESCRIPTION: Configures Vite with path aliases that match the TypeScript paths, resolving both the /react subpaths and base package paths for Plate libraries.\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport path from 'path';\n\nexport default defineConfig({\n  resolve: {\n    alias: {\n      '@udecode/plate/react': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate/dist/react'\n      ),\n      '@udecode/plate-core/react': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-core/dist/react'\n      ),\n      '@udecode/plate-list/react': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-list/dist/react'\n      ),\n\n      // Non-/react base aliases:\n      '@udecode/plate': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate'\n      ),\n      '@udecode/plate-core': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-core'\n      ),\n      '@udecode/plate-list': path.resolve(\n        __dirname,\n        'node_modules/@udecode/plate-list'\n      )\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Element Type in TypeScript\nDESCRIPTION: Type definition for TTagElement which extends TElement with a required value property and allows for additional key-value pairs.\n\nLANGUAGE: ts\nCODE:\n```\ntype TTagElement = TElement & {\n  value: string;\n  [key: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Media URL Parser and Plugin Rule Types\nDESCRIPTION: Type definitions for media URL parsing and plugin rules. Includes definitions for the MediaUrlParser function type and MediaPluginRule type which associate parsers with rendering components.\n\nLANGUAGE: tsx\nCODE:\n```\ntype MediaUrlParser = (url: string) => EmbedUrlData | undefined;\n\ntype MediaPluginRule = {\n  parser: MediaUrlParser;\n  component?: RenderFunction<EmbedUrlData>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all project dependencies using Yarn package manager.\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Editor by ID with PlateController in React\nDESCRIPTION: Example of using PlateController to access the store of a specific editor using its ID. The code demonstrates how to check if an editor is available and not a fallback before working with it.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = withHoc(PlateController, () => {\n  const mainEditor = useEditorRef('main');\n  \n  useEffect(() => {\n    if (!mainEditor.isFallback) {\n      console.info('Editor mounted', mainEditor);\n    }\n  }, [mainEditor]);\n  \n  return (\n    <>\n      <Plate editor={createPlateEditor({ id: 'main' })}>\n        <PlateContent />\n      </Plate>\n    \n      <Plate editor={createPlateEditor({ id: 'secondary' })}>\n        <PlateContent />\n      </Plate>\n    </>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Match Predicate Examples in Editor API\nDESCRIPTION: Shows how to use match predicates for finding nodes in the editor. Demonstrates both function predicates and object predicates with single or multiple values.\n\nLANGUAGE: typescript\nCODE:\n```\n// Function predicate\neditor.api.nodes({\n  match: (node) => node.type === 'p'\n})\n\n// Object predicate\neditor.api.nodes({\n  match: { type: 'p' }\n})\n\n// Object predicate with multiple possible values\neditor.api.nodes({\n  match: { type: ['p', 'h1'] }\n})\n```\n\n----------------------------------------\n\nTITLE: Showing Updated Dependency Requirements for Plate\nDESCRIPTION: Lists the updated dependencies required for the new version of Plate, including specific version requirements for packages like zustood, jotai, lodash, and zustand.\n\nLANGUAGE: bash\nCODE:\n```\n\"@udecode/zustood\": \"^1.1.1\",\n\"jotai\": \"^1.6.6\",\n\"lodash\": \"^4.17.21\",\n\"zustand\": \"^3.7.2\"\n```\n\n----------------------------------------\n\nTITLE: Refactoring Insert for Deserializers\nDESCRIPTION: A minor change that refactors how content is inserted when deserializing data. This improves the way deserialized content is integrated into the editor.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#864](https://github.com/udecode/slate-plugins/pull/864) [`37a52994`](https://github.com/udecode/slate-plugins/commit/37a529945a882adb0222b47a28466dd31286a354) Thanks [@dylans](https://github.com/dylans)! - Refactor insert for deserializers\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Injection Support to PlatePlugin Interface in TypeScript\nDESCRIPTION: Extension to the PlatePlugin interface adding the pluginsByKey field to inject code into a plugin stack. This allows multiple plugins to define insertData transformations for a specific key.\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PlatePlugin {\n  inject?: {\n    /**\n     * Any plugin can use this field to inject code into a stack. For example,\n     * if multiple plugins have defined `inject.editor.insertData.transformData`\n     * for `key=KEY_DESERIALIZE_HTML`, `insertData` plugin will call all of\n     * these `transformData` for `KEY_DESERIALIZE_HTML` plugin. Differs from\n     * `overrideByKey` as this is not overriding any plugin.\n     */\n    pluginsByKey?: Record<PluginKey, Partial<PlatePlugin<T>>>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Final Version Announcement in Version 1.0.0-next.61\nDESCRIPTION: Announcement about the final version of @udecode/slate-plugins[-x] and instructions to install the new @udecode/plate[-x] package.\n\nLANGUAGE: markdown\nCODE:\n```\n> This is the last version of `@udecode/slate-plugins[-x]`, please install\n> `@udecode/plate[-x]`.\n```\n\n----------------------------------------\n\nTITLE: Displaying Registry Component Structure\nDESCRIPTION: Shows the directory structure for components in the registry system, organized by styles.\n\nLANGUAGE: plaintext\nCODE:\n```\napps\n└── www\n    └── registry\n        ├── default\n        │   ├── example\n        │   └── plate-ui\n```\n\n----------------------------------------\n\nTITLE: Using PlateContent Component in React\nDESCRIPTION: The PlateContent component renders the actual editor content. It extends TextareaHTMLAttributes<HTMLDivElement> and accepts additional props for customizing the editable area.\n\nLANGUAGE: jsx\nCODE:\n```\n<PlateContent\n  autoFocus={true}\n  placeholder=\"Start typing...\"\n  readOnly={false}\n  style={{ minHeight: '200px' }}\n  renderEditable={(editable) => <div className=\"editor-wrapper\">{editable}</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Emoji Plugin with Dependencies\nDESCRIPTION: Command to install the Plate emoji plugin and its required data dependency. This provides the necessary packages for enabling emoji functionality in the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-emoji @emoji-mart/data\n```\n\n----------------------------------------\n\nTITLE: Installing AI Editor Components\nDESCRIPTION: Command to add the AI-enhanced Plate editor components to your project, which includes additional AI capabilities.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: Using the useEditorString Hook\nDESCRIPTION: Hook that subscribes to the editor string value on each change, allowing components to access the current editor content as a string.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editorString = useEditorString(editor);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Speed for Block Selection\nDESCRIPTION: Configuration options for customizing the scroll speed and threshold settings when using block selection with scrollable content.\n\nLANGUAGE: ts\nCODE:\n```\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      behaviour: {\n      scrolling: {\n        // 你可以通过设置更大的值来减慢滚动速度。\n        speedDivider: 1.5,\n      },\n      // 需要移动的距离以使选择区域出现。\n      // 如果太小，可能会导致鼠标点击事件被阻止。10 是一个不错的默认值。\n      startThreshold: 4,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete tsconfig.json Configuration from Plate Template\nDESCRIPTION: A comprehensive TypeScript configuration example from the Plate template repository, showing the recommended settings including bundler moduleResolution and other optimizations.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": false,\n    \"strictNullChecks\": true,\n    \"allowUnusedLabels\": false,\n    \"allowUnreachableCode\": false,\n    \"exactOptionalPropertyTypes\": false,\n    \"noFallthroughCasesInSwitch\": true,\n    \"noImplicitOverride\": true,\n    \"noImplicitReturns\": false,\n    \"noPropertyAccessFromIndexSignature\": false,\n    \"noUncheckedIndexedAccess\": false,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n\n    \"isolatedModules\": true,\n\n    \"allowJs\": true,\n    \"checkJs\": false,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"jsx\": \"preserve\",\n    \"module\": \"esnext\",\n    \"target\": \"es2022\",\n    \"moduleResolution\": \"bundler\",\n    \"moduleDetection\": \"force\",\n    \"resolveJsonModule\": true,\n    \"noEmit\": true,\n    \"incremental\": true,\n    \"sourceMap\": true,\n\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"src/**/*.ts\",\n    \"src/**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlockSelectionNodes Hook to Get Selected NodeEntries\nDESCRIPTION: A hook that returns an array of NodeEntry tuples representing all currently selected blocks in the editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectedNodeEntries = useBlockSelectionNodes()\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading Plugin with Specific Levels in TypeScript\nDESCRIPTION: Example of using the createHeadingPlugin function with granular selection of heading levels, allowing developers to specify exactly which heading levels to enable in the editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst headingPlugin = createHeadingPlugin({\n  levels: [1, 2, 3], // Enable heading levels 1, 2, and 3\n});\n```\n\n----------------------------------------\n\nTITLE: Project Rename Announcement in Version 1.0.0\nDESCRIPTION: Major announcement about the project's evolution from Slate Plugins to Plate, with migration instructions for updating imports and class names.\n\nLANGUAGE: markdown\nCODE:\n```\n🎉 The **Slate Plugins** project has evolved to **Plate** 🎉\n\nTo migrate, install `@udecode/plate[-x]` then find and replace all\noccurrences of:\n\n- `slate-plugins` to `plate`\n- `SlatePlugins` to `Plate`\n- `SlatePlugin` to `PlatePlugin`\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ancestor Scroll Container with useEditorScrollRef\nDESCRIPTION: Implementation of a Layout component that uses the useEditorScrollRef hook to enable TOC scrolling functionality when the scroll container is an ancestor of the editor container.\n\nLANGUAGE: tsx\nCODE:\n```\n// Below <Plate> component\nfunction Layout() {\n  const scrollRef = useEditorScrollRef();\n\n  return (\n    <main ref={scrollRef}>\n      <EditorContainer>\n        <PlateContent />\n      </EditorContainer>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Markdown Deserializer in Plate v11.0.0\nDESCRIPTION: Dependency updates for the remark-slate and unified packages used by the Markdown deserializer plugin. These packages are essential for converting Markdown content to the Slate document model.\n\nLANGUAGE: bash\nCODE:\n```\n\"remark-slate\": \"^1.8.6\",\n\"unified\": \"^9.2.1\"\n```\n\n----------------------------------------\n\nTITLE: Making Outside Elements Selectable\nDESCRIPTION: Making elements outside the editor selectable by adding the data-plate-selectable attribute to components.\n\nLANGUAGE: tsx\nCODE:\n```\n<Cover data-plate-selectable />\n<Sidebar data-plate-selectable />\n```\n\n----------------------------------------\n\nTITLE: Slate Dependencies Update in Version 3.2.0\nDESCRIPTION: Minor change from pull request #995 updating slate dependencies and peerDependencies to version 0.66.*.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#995](https://github.com/udecode/plate/pull/995) [`58387c6d`](https://github.com/udecode/plate/commit/58387c6d34e86be7880999b40a9105b6178f4ce4) Thanks [@dylans](https://github.com/dylans)! - update slate dependencies and peerDependencies to 0.66.*\n```\n\n----------------------------------------\n\nTITLE: Migrating DnD Plugin Imports in TypeScript\nDESCRIPTION: Due to ESM issues, the DnD plugin was moved out of the main plate package. This snippet shows how to update imports to use the new dedicated package.\n\nLANGUAGE: typescript\nCODE:\n```\n// before\nimport { createDndPlugin } from '@udecode/plate';\n// after\nimport { createDndPlugin } from '@udecode/plate-ui-dnd';\n```\n\n----------------------------------------\n\nTITLE: TCalloutElement Interface Definition\nDESCRIPTION: TypeScript interface definition for TCalloutElement that extends TElement with variant and icon properties used for callout customization.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TCalloutElement extends TElement {\n  variant?: string;\n  icon?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Popover Components to Plate Floating\nDESCRIPTION: Introduces Popover and ElementPopover components for displaying content over children or selected elements, providing context-sensitive UI functionality.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1721](https://github.com/udecode/plate/pull/1721) by [@zbeyens](https://github.com/zbeyens) –\n  - `Popover`: Popover displayed over children, rendering `content`\n  - `ElementPopover`: Popover displayed over an element if not read-only, element selected\n```\n\n----------------------------------------\n\nTITLE: Resetting Block Selection Programmatically\nDESCRIPTION: Two methods for resetting block selection: directly calling the API and handling clicks outside selectable elements.\n\nLANGUAGE: tsx\nCODE:\n```\neditor.api.blockSelection.deselect();\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst handleClickOutside = (event: MouseEvent) => {\n  if (!(event.target as HTMLElement).closest('[data-plate-selectable]')) {\n    editor.api.blockSelection.deselect();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: 使用 .extendApi 添加插件特定 API 方法\nDESCRIPTION: 展示如何使用 .extendApi 方法向插件添加特定的 API 方法，这些方法可以通过 editor.api.[pluginKey].api 访问。\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendApi(() => ({\n  pluginMethod: () => '插件方法结果',\n}));\n\n// 访问插件的 API\neditor.api.myPlugin.api.pluginMethod();\n```\n\n----------------------------------------\n\nTITLE: Using useBlockSelected Hook to Check Selection Status\nDESCRIPTION: A hook that returns a boolean indicating whether the current block is selected in the editor.\n\nLANGUAGE: typescript\nCODE:\n```\nconst isSelected = useBlockSelected()\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin-Specific Transform Methods with .extendTransforms in TypeScript\nDESCRIPTION: The extendTransforms method adds plugin-specific transform methods that can be accessed via editor.tf.pluginKey.methodName().\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendTransforms(() => ({\n  pluginTransform: () => {\n    // Custom transform logic\n  },\n}));\n\n// Access the plugin's transform\neditor.tf.myPlugin.pluginTransform();\n\n// NOTE: `editor.tf` in a short alias to `editor.transforms`\neditor.transforms.myPlugin.pluginTransform();\n```\n\n----------------------------------------\n\nTITLE: Installing React DnD Dependencies for Plate UI DnD\nDESCRIPTION: Command to install the peer dependencies required for @udecode/plate-ui-dnd after they were moved from direct dependencies in version 13.0.0.\n\nLANGUAGE: bash\nCODE:\n```\nyarn install react-dnd react-dnd-html5-backend\n```\n\n----------------------------------------\n\nTITLE: Registering SlashInputElement in Components Configuration\nDESCRIPTION: Registers the SlashInputElement component in the Plate editor's components configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  // ...otherComponents,\n  [SlashInputPlugin.key]: SlashInputElement,\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Context Menu Visibility with Data Attributes\nDESCRIPTION: Example of using a data attribute to control whether the context menu can be opened for a specific PlateElement. Setting data-plate-open-context-menu to false prevents the context menu from appearing on right-click.\n\nLANGUAGE: tsx\nCODE:\n```\n<PlateElement data-plate-open-context-menu={false} {...props}>\n  {children}\n</PlateElement>\n```\n\n----------------------------------------\n\nTITLE: Implementing useFloatingToolbarState in Plate\nDESCRIPTION: Added useFloatingToolbarState hook to manage floating toolbar state more effectively, and updated useFloatingToolbar to return a more comprehensive object with references and visibility state.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2585](https://github.com/udecode/plate/pull/2585) by [@zbeyens](https://github.com/zbeyens) – `FloatingToolbar`:\n\n  - soft br: `useFloatingToolbar` now returns `{ ref, props, hidden }`\n  - feat: `useFloatingToolbarState`\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Break Plugin\nDESCRIPTION: Command to install the @udecode/plate-break package which provides functionality for exiting paragraphs with keyboard shortcuts.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-break\n```\n\n----------------------------------------\n\nTITLE: Configuring ExitBreakPlugin in Plate\nDESCRIPTION: Example configuration for the ExitBreakPlugin with various rules for exiting paragraphs using different hotkeys and conditions, including special handling for heading levels.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExitBreakPlugin } from '@udecode/plate-break/react';\nimport { HEADING_LEVELS } from '@udecode/plate-heading';\n\nconst plugins = [\n  // ...其他插件\n  ExitBreakPlugin.configure({\n    options: {\n      rules: [\n        {\n          hotkey: 'mod+enter',\n        },\n        {\n          hotkey: 'mod+shift+enter',\n          before: true,\n        },\n        {\n          hotkey: 'enter',\n          query: {\n            start: true,\n            end: true,\n            allow: HEADING_LEVELS,\n          },\n          relative: true,\n          level: 1,\n        },\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Tabbable Plugin with npm\nDESCRIPTION: Command to install the @udecode/plate-tabbable package using npm package manager.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-tabbable\n```\n\n----------------------------------------\n\nTITLE: Running the Website Development Server\nDESCRIPTION: Command to start the development server for the Plate documentation website using Turborepo's filtering feature.\n\nLANGUAGE: bash\nCODE:\n```\nturbo --filter=www dev\n```\n\n----------------------------------------\n\nTITLE: Installing Minimal Editor for Plate in Laravel\nDESCRIPTION: Command to add the basic Plate editor to your Laravel project. This installs necessary components and creates a starting page in the app/editor directory.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-basic\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Default Background\nDESCRIPTION: CSS variables defining the default background and foreground colors used for body and general elements in light mode.\n\nLANGUAGE: css\nCODE:\n```\n--background: 0 0% 100%;\n--foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Default Background\nDESCRIPTION: CSS variables defining the default background and foreground colors used for body and general elements in light mode.\n\nLANGUAGE: css\nCODE:\n```\n--background: 0 0% 100%;\n--foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Using Static Components for HTML Serialization\nDESCRIPTION: Example demonstrating how to use static versions of Plate components when serializing content to HTML for server-side rendering.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSlateEditor, serializeHtml } from '@udecode/plate';\nimport { ParagraphElementStatic } from '@/components/plate-ui/paragraph-element-static';\nimport { HeadingElementStatic } from '@/components/plate-ui/heading-element-static';\nimport { ImageElementStatic } from '@/components/plate-ui/image-element-static';\n// ... 等等。\n\nconst editor = createSlateEditor({ /* 你的插件 */ });\n\nconst components = {\n  [BaseParagraphPlugin.key]: ParagraphElementStatic,\n  [BaseHeadingPlugin.key]: HeadingElementStatic,\n  [BaseImagePlugin.key]: ImageElementStatic,\n};\n\nconst html = await serializeHtml(editor, { components });\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Copilot Component\nDESCRIPTION: Command for installing the necessary packages for the Plate Copilot component, including the AI and Markdown modules.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-ai @udecode/plate-markdown\n```\n\n----------------------------------------\n\nTITLE: Using useBlockSelectable Hook for React Components\nDESCRIPTION: A hook that provides props for making a block element selectable, including context menu behavior. Returns props object with className and onContextMenu handler.\n\nLANGUAGE: typescript\nCODE:\n```\nconst { props } = useBlockSelectable()\n```\n\n----------------------------------------\n\nTITLE: Shifting Block Selection with Editor API\nDESCRIPTION: An editor API method that expands or shrinks the selection based on the anchor block and the specified direction. It handles both expanding the selection to include additional blocks and shrinking it to remove blocks.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.blockSelection.shiftSelection(direction)\n```\n\n----------------------------------------\n\nTITLE: Building a Package and Restarting Development Server\nDESCRIPTION: Commands to rebuild a specific package and restart the development server to see changes.\n\nLANGUAGE: bash\nCODE:\n```\nturbo --filter=[PACKAGE] build\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Input Components\nDESCRIPTION: CSS variable defining the border color specifically for input components like Input, Select, and Textarea.\n\nLANGUAGE: css\nCODE:\n```\n--input: 214.3 31.8% 91.4%;\n```\n\n----------------------------------------\n\nTITLE: Using JSX Plate Component with Read-Only Mode\nDESCRIPTION: Shows the migration from using readOnly in editableProps to using it as a direct prop on the Plate component. The readOnly prop is now stored in the plate store for easier access between PlateProvider and Plate.\n\nLANGUAGE: JSX\nCODE:\n```\n// from\n<Plate editableProps={{readOnly: true}} />\n\n// to\n<Plate readOnly />\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Component Registries in components.json\nDESCRIPTION: Sets up multiple component registries for your project, useful when working with Plate UI alongside shadcn/ui components.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registries\": {\n    \"plate\": {\n      \"url\": \"https://platejs.org/r\",\n      \"style\": \"default\",\n      \"aliases\": {\n        \"ui\": \"@/components/plate-ui\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced HTML Deserialization Example with IndentListPlugin\nDESCRIPTION: Simplified example of IndentListPlugin's deserialization logic, showing how it converts HTML list structures to indented paragraphs with preserved indentation levels.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const IndentListPlugin = createTSlatePlugin<IndentListConfig>({\n  // ... 其他配置 ...\n  parsers: {\n    html: {\n      deserializer: {\n        isElement: true,\n        parse: ({ editor, element, getOptions }) => ({\n          indent: Number(element.getAttribute('aria-level')),\n          listStyleType: element.style.listStyleType,\n          type: editor.getType(ParagraphPlugin),\n        }),\n        rules: [\n          {\n            validNodeName: 'LI',\n          },\n        ],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeBlockPlugin with Lowlight in TSX\nDESCRIPTION: This code snippet demonstrates how to configure the CodeBlockPlugin to use Lowlight for syntax highlighting, replacing the previous PrismJS implementation. It imports lowlight with all supported languages and passes the configuration to the plugin.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { all, createLowlight } from 'lowlight';\n\nconst lowlight = createLowlight(all);\n\nCodeBlockPlugin.configure({\n  options: {\n    lowlight,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing useEditorState with usePlateEditorState\nDESCRIPTION: Updates the editor state hook to support nested editors by replacing useEditorState with usePlateEditorState.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2187](https://github.com/udecode/plate/pull/2187) by [@zbeyens](https://github.com/zbeyens) – fix: replace `useEditorState` by `usePlateEditorState` to support nested editors.\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: withComponent Type Signature in TypeScript\nDESCRIPTION: Type signature for the withComponent method that sets or replaces the component associated with a plugin. Takes a NodeComponent as parameter and returns an updated PlatePlugin instance.\n\nLANGUAGE: typescript\nCODE:\n```\n(component: NodeComponent) => PlatePlugin<C>\n```\n\n----------------------------------------\n\nTITLE: Adding AI Editor to Gatsby Project\nDESCRIPTION: Command to add the AI-powered Plate editor to your Gatsby project. This installs an advanced editor with AI capabilities for enhanced text editing.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: Initializing Plate in Gatsby Project\nDESCRIPTION: Command to initialize Plate in your Gatsby project using the shadcx CLI tool. This sets up the necessary configuration for using Plate with your Gatsby installation.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: Converting Slate JSON to Markdown\nDESCRIPTION: Example showing how to serialize Slate JSON content back to Markdown format using the MarkdownPlugin.\n\nLANGUAGE: tsx\nCODE:\n```\nconst editor = createPlateEditor({ \n  value,\n  plugins: [\n    // ...其他插件,\n    MarkdownPlugin.configure({\n      options: {\n        remarkPlugins: [remarkMath, remarkGfm, remarkMdx],\n      },\n    }),\n,\n  ],\n});\n\nconst content = editor.api.markdown.serialize();\n```\n\n----------------------------------------\n\nTITLE: Configuring Scrollable Container for Block Selection\nDESCRIPTION: Default configuration for setting up the scrollable container boundaries and selectable elements for block selection functionality.\n\nLANGUAGE: js\nCODE:\n```\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      boundaries: `#${editor.uid}`,\n      container: `#${editor.uid}`,\n      selectables: `#${editor.uid} .slate-selectable`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using moveNodes Transform in Slate\nDESCRIPTION: Moves nodes from one location to another in the document. It provides options to control which nodes are moved and how they're positioned at the destination.\n\nLANGUAGE: typescript\nCODE:\n```\nmoveNodes(options: MoveNodesOptions & { to: Path })\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Popover Components\nDESCRIPTION: CSS variables defining the background and foreground colors for popover-type components like DropdownMenu, HoverCard, and Popover.\n\nLANGUAGE: css\nCODE:\n```\n--popover: 0 0% 100%;\n--popover-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extendSelectors Type Signature in TypeScript\nDESCRIPTION: Type signature for the extendSelectors method that extends the plugin with selectors. Takes a function that receives the plugin context and returns a record of selector functions.\n\nLANGUAGE: typescript\nCODE:\n```\n(options: (ctx: PlatePluginContext) => Record<string, any>) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for Plate and shadcn/ui\nDESCRIPTION: Creates a configuration file that defines project settings for component generation, including style preferences, file paths, and registry information for Plate components.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"baseColor\": \"slate\",\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"hooks\": \"@/hooks\",\n    \"lib\": \"@/lib\",\n    \"ui\": \"@/components/ui\",\n    \"utils\": \"@/lib/utils\"\n  },\n  \"iconLibrary\": \"lucide\",\n  \"registries\": {\n    \"plate\": {\n      \"aliases\": {\n        \"ui\": \"@/components/plate-ui\"\n      },\n      \"url\": \"https://platejs.org/r\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionOperation Type in Slate\nDESCRIPTION: Definition of the SelectionOperation type which represents operations that modify the current selection in a Slate editor. Currently, this only includes the SetSelectionOperation.\n\nLANGUAGE: ts\nCODE:\n```\nexport type SelectionOperation = SetSelectionOperation;\n```\n\n----------------------------------------\n\nTITLE: Installing AI Editor for Plate in Laravel\nDESCRIPTION: Command to add the AI-powered Plate editor to your Laravel project. This installs necessary components and creates a starting page in the app/editor directory.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: 使用 .extend 扩展插件功能\nDESCRIPTION: 展示如何使用 .extend 方法向插件添加新功能或修改现有功能，返回具有扩展类型的新插件实例。\n\nLANGUAGE: typescript\nCODE:\n```\nconst ExtendedPlugin = MyPlugin.extend({\n  options: {\n    newOption: '新值',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing AIChatEditor Component with useAIChatEditor Hook in React\nDESCRIPTION: A React component that demonstrates how to use the useAIChatEditor hook to create an editor that can parse and display markdown content with AI chat capabilities. The example shows configuration options including memoization and parser customization.\n\nLANGUAGE: tsx\nCODE:\n```\nconst AIChatEditor = ({ content }: { content: string }) => {\n  const aiEditor = usePlateEditor({\n    plugins: [\n      // Your editor plugins\n      MarkdownPlugin,\n      // etc...\n    ],\n  });\n\n  useAIChatEditor(aiEditor, content, {\n    // Optional markdown parser options\n    parser: {\n      exclude: ['space'],\n    },\n  });\n\n  return <Editor editor={aiEditor} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Editor State Query Methods in Plate\nDESCRIPTION: Functions to check the current state of the editor, including focus state, composition state, and read-only mode. These methods are useful for conditional rendering or behavior based on editor state.\n\nLANGUAGE: typescript\nCODE:\n```\nhasRange(range: TRange) => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisComposing() => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisFocused() => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisReadOnly() => boolean\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extend Type Signature in TypeScript\nDESCRIPTION: Type signature for the extend method that creates a new plugin instance with additional configuration. Takes either a partial plugin configuration or a function that returns a partial configuration based on the plugin context.\n\nLANGUAGE: typescript\nCODE:\n```\n(extendConfig: Partial<PlatePlugin> | ((ctx: PlatePluginContext<AnyPluginConfig>) => Partial<PlatePlugin>)) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Adding hideToolbar Property to Floating Package\nDESCRIPTION: Adds a missing hideToolbar property to the floating toolbar configuration, allowing programmatic control over toolbar visibility.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3400](https://github.com/udecode/plate/pull/3400) by [@felixfeng33](https://github.com/felixfeng33) – Add the missing property `hideToolbar`.\n```\n\n----------------------------------------\n\nTITLE: Importing Required Plate Plugins for AI Integration\nDESCRIPTION: Imports necessary plugins from various Plate packages to support AI functionality along with basic text formatting, code blocks, and other editor features.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AIChatPlugin, AIPlugin } from '@udecode/plate-ai/react';\nimport {\n  BaseBoldPlugin,\n  BaseCodePlugin,\n  BaseItalicPlugin,\n  BaseStrikethroughPlugin,\n  BaseUnderlinePlugin,\n} from '@udecode/plate-basic-marks';\nimport { BaseBlockquotePlugin } from '@udecode/plate-block-quote';\nimport {\n  BaseCodeBlockPlugin,\n  BaseCodeLinePlugin,\n  BaseCodeSyntaxPlugin,\n} from '@udecode/plate-code-block';\nimport { BaseParagraphPlugin, createSlateEditor } from '@udecode/plate';\nimport { BaseHeadingPlugin, HEADING_LEVELS } from '@udecode/plate-heading';\nimport { BaseHorizontalRulePlugin } from '@udecode/plate-horizontal-rule';\nimport { BaseIndentListPlugin } from '@udecode/plate-indent-list';\nimport { BaseLinkPlugin } from '@udecode/plate-link';\nimport { MarkdownPlugin } from '@udecode/plate-markdown';\n```\n\n----------------------------------------\n\nTITLE: 使用 .extendPlugin 扩展嵌套插件\nDESCRIPTION: 展示如何使用 .extendPlugin 方法扩展父插件中嵌套子插件的功能，添加新选项和处理程序。\n\nLANGUAGE: typescript\nCODE:\n```\nconst TablePlugin = createPlatePlugin({\n  key: 'table',\n  plugins: [TableCellPlugin],\n}).extendPlugin(TableCellPlugin, {\n  options: {\n    newCellOption: '已添加',\n  },\n  handlers: {\n    onKeyDown: () => {\n      // 自定义表格单元格的按键逻辑\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate AI Components with npm\nDESCRIPTION: Command to install the required Plate packages for AI functionality, including support for selection, markdown, and basic text formatting.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-ai @udecode/plate-selection @udecode/plate-markdown @udecode/plate-basic-marks\n```\n\n----------------------------------------\n\nTITLE: Using liftNodes Transform in Slate\nDESCRIPTION: Lifts nodes upwards in the document tree at the specified location. If necessary, the parent node is split to accommodate the lifting operation.\n\nLANGUAGE: typescript\nCODE:\n```\nliftNodes(options?: LiftNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Extending PlatePlugin Interface with InsertData Fields in TypeScript/React\nDESCRIPTION: Extension to the PlatePlugin interface adding insertData fields used by the withInsertData plugin. These fields handle data format specifications, queries, fragment manipulation, and insertion behaviors.\n\nLANGUAGE: tsx\nCODE:\n```\ninterface PlatePlugin {\n  editor?: Nullable<{\n    insertData?: {\n      /**\n       * Format to get data. Example data types are text/plain and\n       * text/uri-list.\n       */\n      format?: string;\n\n      /** Query to skip this plugin. */\n      query?: (options: PlatePluginInsertDataOptions) => boolean;\n\n      /** Deserialize data to fragment */\n      getFragment?: (\n        options: PlatePluginInsertDataOptions\n      ) => TDescendant[] | undefined;\n\n      // injected\n\n      /**\n       * Function called on `editor.insertData` just before\n       * `editor.insertFragment`. Default: if the block above the selection is\n       * empty and the first fragment node type is not inline, set the selected\n       * node type to the first fragment node type.\n       *\n       * @returns If true, the next handlers will be skipped.\n       */\n      preInsert?: (\n        fragment: TDescendant[],\n        options: PlatePluginInsertDataOptions\n      ) => HandlerReturnType;\n\n      /** Transform the inserted data. */\n      transformData?: (\n        data: string,\n        options: { dataTransfer: DataTransfer }\n      ) => string;\n\n      /** Transform the fragment to insert. */\n      transformFragment?: (\n        fragment: TDescendant[],\n        options: PlatePluginInsertDataOptions\n      ) => TDescendant[];\n    };\n  }>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Floating Package\nDESCRIPTION: Command to install the @udecode/plate-floating package via npm, which provides floating UI components and hooks for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-floating\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Components Alias in components.json\nDESCRIPTION: Defines where UI components will be placed when generated by the CLI.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"ui\": \"@/components/plate-ui\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using unwrapNodes Transform in Slate\nDESCRIPTION: Unwraps nodes at a specified location, lifting their content up to replace them. If necessary, the parent node is split to accommodate the unwrapping operation.\n\nLANGUAGE: typescript\nCODE:\n```\nunwrapNodes(options?: UnwrapNodesOptions)\n```\n\n----------------------------------------\n\nTITLE: Arranging Plugins to Handle Tab Key Properly\nDESCRIPTION: Example of plugin arrangement to ensure proper Tab key handling. The Copilot plugin is placed before other plugins that use the Tab key to avoid conflicts when accepting suggestions.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  CopilotPlugin,\n  // Place tab-using plugins after Copilot\n  IndentPlugin,\n  TabbablePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: 使用 .extendSelectors 添加可订阅选择器\nDESCRIPTION: 展示如何使用 .extendSelectors 方法向插件添加可订阅的选择器，用于创建派生状态或计算值。\n\nLANGUAGE: typescript\nCODE:\n```\nconst CounterPlugin = createPlatePlugin({\n  key: 'counter',\n  options: {\n    count: 0,\n  },\n}).extendSelectors(({ getOptions }) => ({\n  doubleCount: () => getOptions().count * 2,\n  isEven: () => getOptions().count % 2 === 0,\n}));\n```\n\n----------------------------------------\n\nTITLE: Testing Plugin Options with Autoformat in Plate\nDESCRIPTION: Test for the AutoformatPlugin that verifies how the enableUndoOnDelete option affects behavior when backspace is pressed after an autoformat operation, demonstrating testing plugins with configurable options.\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('when undo is enabled', () => {\n  it('should undo text format upon delete', () => {\n    const input = (\n      <fragment>\n        <hp>\n          1/<cursor />\n        </hp>\n      </fragment>\n    ) as any;\n\n    const output = (\n      <fragment>\n        <hp>\n          1/4<cursor />\n        </hp>\n      </fragment>\n    ) as any;\n\n    const editor = createPlateEditor({\n      plugins: [\n        AutoformatPlugin.configure({\n          options: {\n            enableUndoOnDelete: true,\n            rules: [\n              {\n                format: '¼',\n                match: '1/4',\n                mode: 'text',\n              },\n            ],\n          },\n        }),\n      ],\n      value: input,\n    });\n\n    // Trigger the autoformat\n    editor.tf.insertText('4');\n\n    // Simulate backspace key\n    const event = new KeyboardEvent('keydown', {\n      key: 'backspace',\n    }) as any;\n\n    // Call the handler\n    editor.plugins[AutoformatPlugin.key].handlers.onKeyDown({\n      ...getEditorPlugin(editor, AutoformatPlugin),\n      event,\n    });\n\n    // With enableUndoOnDelete: true, pressing backspace should restore the original text\n    expect(input.children).toEqual(output.children);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using PlateStatic with Override Value in React\nDESCRIPTION: Shows how to use PlateStatic with a value prop that overrides the editor's children content.\n\nLANGUAGE: tsx\nCODE:\n```\n<PlateStatic\n  editor={editor}\n  components={components}\n  value={[\n    {\n      type: 'p',\n      children: [{ text: 'Overridden content.' }],\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing plate-resizable package\nDESCRIPTION: Command to install the plate-resizable package using npm. This package provides resizable element functionality for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-resizable\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate Copilot Plugin\nDESCRIPTION: Complete configuration of the CopilotPlugin with AI text completion options, including custom prompts, debounce settings, and ghost text rendering.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...其他插件,\n  MarkdownPlugin.configure({ options: { indentList: true } }),\n  CopilotPlugin.configure(({ api }) => ({\n    options: {\n    completeOptions: {\n      api: '/api/your-api-endpoint',\n      body: {\n        system: `你是一个高级的 AI 写作助手，类似于 VSCode Copilot，但适用于通用文本。你的任务是根据给定的上下文预测并生成文本的下一部分。\n\n规则：\n- 自然地继续文本，直到下一个标点符号（., ,, ;, :, ?, 或 !）。\n- 保持风格和语气。不要重复给定的文本。\n- 对于不明确的上下文，提供最可能的延续。\n- 如果需要，处理代码片段、列表或结构化文本。\n- 不要在响应中包含 \"\"\"。\n- 关键：始终以标点符号结尾。\n- 关键：避免开始新的块。不要使用块格式化，如 >, #, 1., 2., -, 等。建议应继续在与上下文相同的块中。\n- 如果没有提供上下文或无法生成延续，则返回 \"0\" 而不解释。`,\n      },\n      onFinish: (_, completion) => {\n        if (completion === '0') return;\n\n        api.copilot.setBlockSuggestion({\n          //stripMarkdownBlocks 加上 GhostText\n          text: stripMarkdown(completion),\n        });\n      },\n    },\n    debounceDelay: 500,\n    getPrompt: ({ editor }) => {\n      const contextEntry = getAncestorNode(editor);\n\n      if (!contextEntry) return '';\n\n      const prompt = serializeMdNodes([contextEntry[0] as TElement]);\n\n      return `继续文本直到下一个标点符号：\n\"\"\"\n${prompt}\n\"\"\"`;\n    },\n    renderGhostText: GhostText,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Font Package\nDESCRIPTION: Command to install the @udecode/plate-font package via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-font\n```\n\n----------------------------------------\n\nTITLE: 在组件中使用插件选择器\nDESCRIPTION: 展示如何在 React 组件中使用通过 .extendSelectors 添加的选择器，使用 usePluginOption 钩子订阅值。\n\nLANGUAGE: tsx\nCODE:\n```\nconst CounterComponent = () => {\n  const count = usePluginOption(CounterPlugin, 'count');\n  const doubleCount = usePluginOption(CounterPlugin, 'doubleCount');\n  const isEven = usePluginOption(CounterPlugin, 'isEven');\n\n  return (\n    <div>\n      <p>计数: {count}</p>\n      <p>双倍计数: {doubleCount}</p>\n      <p>是否为偶数: {isEven ? '是' : '否'}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Table Insertion in Plate\nDESCRIPTION: Complex test scenario for the Table plugin that verifies inserting a table with a specific number of rows and columns, checking both content structure and cursor position after the operation.\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('Table plugin', () => {\n  it('should insert a table', () => {\n    const input = (\n      <editor>\n        <hp>\n          Test<cursor />\n        </hp>\n      </editor>\n    ) as any as PlateEditor;\n\n    const output = (\n      <editor>\n        <hp>Test</hp>\n        <htable>\n          <htr>\n            <htd>\n              <hp>\n                <cursor />\n              </hp>\n            </htd>\n            <htd>\n              <hp></hp>\n            </htd>\n          </htr>\n          <htr>\n            <htd>\n              <hp></hp>\n            </htd>\n            <htd>\n              <hp></hp>\n            </htd>\n          </htr>\n        </htable>\n      </editor>\n    ) as any as PlateEditor;\n\n    const editor = createPlateEditor({\n      value: input.children,\n      selection: input.selection,\n      plugins: [TablePlugin],\n    });\n\n    // Call transform directly\n    editor.tf.insertTable({ rows: 2, columns: 2 });\n\n    expect(editor.children).toEqual(output.children);\n    expect(editor.selection).toEqual(output.selection);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Scrollable Container for Block Selection\nDESCRIPTION: Default configuration for the scrollable container options. This sets the boundaries, container, and selectable elements using CSS selectors based on the editor's unique ID.\n\nLANGUAGE: js\nCODE:\n```\nBlockSelectionPlugin.configure({\n  options: {\n    areaOptions: {\n      boundaries: `#${editor.uid}`,\n      container: `#${editor.uid}`,\n      selectables: `#${editor.uid} .slate-selectable`,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Playwright Dependencies\nDESCRIPTION: Command to install the required dependencies for integrating Playwright with Plate. This includes the Playwright testing framework and the Plate-specific Playwright adapter.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-playwright playwright\n```\n\n----------------------------------------\n\nTITLE: Defining ElementOrTextIn Generic Type in TypeScript for Slate\nDESCRIPTION: A type utility that represents either an element or a text node from a specific value type. This enables type safety when working with nodes from a particular Slate value.\n\nLANGUAGE: ts\nCODE:\n```\ntype ElementOrTextIn<V extends Value> = ElementIn<V> | TextIn<V>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Color in components.json\nDESCRIPTION: Sets the default color palette for your components. This setting cannot be changed after initialization.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"baseColor\": \"slate\" |\"gray\" | \"neutral\" | \"stone\" | \"zinc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Node with Text Alignment\nDESCRIPTION: Shows the structure of a paragraph node affected by the AlignPlugin, with the alignment property set to right.\n\nLANGUAGE: ts\nCODE:\n```\n{\n  type: 'p',\n  align: 'right',\n  children: [{ text: 'This paragraph is aligned to the right!' }],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Date Plugin with npm\nDESCRIPTION: Command to install the plate-date package using npm. This package provides date element functionality for Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-date\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with moduleNameMapper for Plate\nDESCRIPTION: Configures Jest with moduleNameMapper to handle Plate's ESM package structure, aligning with the path aliases set in TypeScript and bundler configurations.\n\nLANGUAGE: js\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  // ...\n  moduleNameMapper: {\n    '^@udecode/plate/react$': '<rootDir>/node_modules/@udecode/plate/dist/react',\n    '^@udecode/plate-core/react$': '<rootDir>/node_modules/@udecode/plate-core/dist/react',\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Test Utils with npm\nDESCRIPTION: Command to install the @udecode/plate-test-utils package which provides utilities for testing Plate editor and plugins.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-test-utils\n```\n\n----------------------------------------\n\nTITLE: Table Component Renaming\nDESCRIPTION: Breaking changes where headless table components have been moved from plate-ui-table to plate-table with renamed components in version 20.0.0.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport {\n  TableElement,\n  TableRowElement,\n  TableCellElement,\n  TablePopover\n} from '@udecode/plate-ui-table';\n\n// After\nimport {\n  PlateTableElement,\n  PlateTableRowElement,\n  PlateTableCellElement,\n  PlateTablePopover\n} from '@udecode/plate-table';\n\n// Note: Styling changes have also been made to these components\n```\n\n----------------------------------------\n\nTITLE: Using insertFragment Transform in Slate\nDESCRIPTION: Inserts a fragment of nodes at a specified location. The function takes a fragment parameter containing the nodes to insert, and optional settings to control insertion behavior.\n\nLANGUAGE: typescript\nCODE:\n```\ninsertFragment(fragment: N[], options?: InsertFragmentOptions)\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Break Plugin\nDESCRIPTION: Command to install the necessary package for the Soft Break plugin functionality in Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-break\n```\n\n----------------------------------------\n\nTITLE: Configuring the Date Plugin in Plate\nDESCRIPTION: Example of importing and adding the DatePlugin to your Plate editor configuration. The plugin needs to be included in the plugins array alongside other plugins.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DatePlugin } from '@udecode/plate-date/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  DatePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering React Logo SVG Path in JSX\nDESCRIPTION: SVG path data that draws the React logo atom symbol with its characteristic electron orbits. The path is followed by a paragraph with the text 'Manual' that has styling classes for font and margin.\n\nLANGUAGE: JSX\nCODE:\n```\n<path d=\"M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z\" />\n    </svg>\n    <p className=\"font-medium mt-2\">Manual</p>\n  </LinkedCard>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Package Resolutions for Consistent Slate Versions\nDESCRIPTION: Configuration to force consistent versions of Slate dependencies in package.json using the resolutions field.\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n  \"resolutions\": {\n    \"slate\": \"0.112.0\",\n    \"slate-dom\": \"0.112.2\",\n    \"slate-react\": \"0.112.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: overrideEditor Example in TypeScript\nDESCRIPTION: Example showing how to use the overrideEditor method to create a new plugin instance with overridden editor transforms and API methods. Provides access to original methods for extending functionality.\n\nLANGUAGE: typescript\nCODE:\n```\noverrideEditor(({ editor, tf: { deleteForward }, api: { isInline } }) => ({\n  transforms: {\n    // Override transforms\n    deleteForward(options) {\n      deleteForward(options);\n    },\n  },\n  api: {\n    // Override API methods\n    isInline(element) {\n      return isInline(element);\n    },\n  },\n})) => PlatePlugin<C>\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag & Drop Plugin in Plate\nDESCRIPTION: Basic setup for integrating drag and drop functionality in a Plate editor by incorporating the DndPlugin and NodeIdPlugin in the plugins array. This is the foundation for enabling drag & drop features.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DndPlugin } from '@udecode/plate-dnd';\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\n\nconst plugins = [\n  // ...otherPlugins,\n  NodeIdPlugin,\n  DndPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Documenting Dependency Updates in Markdown Changelog\nDESCRIPTION: A changelog entry written in Markdown listing updated dependencies for the plate project. It references a specific commit using a GitHub-style link and specifies new versions of dependencies.\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`201a7993`](https://github.com/udecode/slate-plugins/commit/201a799342ff88405e120182d8554e70b726beea)]:\n  - @udecode/slate-plugins-core@1.0.0-next.26\n  - @udecode/slate-plugins-common@1.0.0-next.26\n```\n\n----------------------------------------\n\nTITLE: Implementing Label with Tailwind CSS in React JSX\nDESCRIPTION: A React JSX paragraph element styled with Tailwind CSS classes that displays the label 'Manual' below an SVG icon. The styling includes medium font weight and top margin spacing.\n\nLANGUAGE: JSX\nCODE:\n```\n<p className=\"font-medium mt-2\">Manual</p>\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extendApi Type Signature in TypeScript\nDESCRIPTION: Type signature for the extendApi method that extends the plugin's API with additional methods. Takes a function that receives the plugin context and returns a record of functions.\n\nLANGUAGE: typescript\nCODE:\n```\n(api: (ctx: PlatePluginContext) => Record<string, Function>) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Registering Equation Plugins\nDESCRIPTION: Adds the EquationPlugin and InlineEquationPlugin to the plugins array configuration for Plate editor.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  EquationPlugin,\n  InlineEquationPlugin,\n]\n```\n\n----------------------------------------\n\nTITLE: Installing plate-alignment package\nDESCRIPTION: Command to install the alignment plugin package for Plate editor using npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-alignment\n```\n\n----------------------------------------\n\nTITLE: Upgrading Plate Packages to a Consistent Version\nDESCRIPTION: Example command for upgrading all Plate packages to a consistent version (v45 in this example) to resolve dependency conflicts.\n\nLANGUAGE: bash\nCODE:\n```\n# Example upgrading all packages to v45\npnpm add @udecode/plate@45 @udecode/plate-core@45 @udecode/plate-ui@45 # etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Error Codes in TypeScript\nDESCRIPTION: Enumeration of error codes used for handling media upload failures in the Plate editor, including codes for invalid file types, size constraints, and quantity limitations.\n\nLANGUAGE: typescript\nCODE:\n```\nenum UploadErrorCode {\n  INVALID_FILE_TYPE = 400,\n  TOO_MANY_FILES = 402,\n  INVALID_FILE_SIZE = 403,\n  TOO_LESS_FILES = 405,\n  TOO_LARGE = 413,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Trailing Block Plugin\nDESCRIPTION: Example configuration for the TrailingBlockPlugin, setting a paragraph (p) type at the root level (0) to ensure it always exists at the end of the document.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...其他插件,\n  TrailingBlockPlugin.configure(() => ({\n    options: {\n      level: 0,\n      type: 'p',\n    },\n  })),\n];\n```\n\n----------------------------------------\n\nTITLE: TEquationElement Interface Definition\nDESCRIPTION: TypeScript interface that defines the structure of an equation element, extending TElement with a texExpression property to store LaTeX content.\n\nLANGUAGE: typescript\nCODE:\n```\ninterface TEquationElement extends TElement {\n  texExpression: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using cn Function for Tailwind CSS Class Merging\nDESCRIPTION: The cn function allows for conditionally adding Tailwind CSS classes without conflicts. It combines class values using clsx and tailwind-merge to produce a final className string.\n\nLANGUAGE: typescript\nCODE:\n```\ncn(...inputs: CxOptions): string\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Multiple Plate Package Versions using NPM or PNPM\nDESCRIPTION: Commands for identifying multiple versions of Plate packages in your project, which can cause unexpected behavior or hooks-related errors.\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm ls @udecode/plate @udecode/plate-core\n\n# pnpm or yarn\npnpm why @udecode/plate\npnpm why @udecode/plate-core\n```\n\n----------------------------------------\n\nTITLE: Using Element Selector Hook for Optimized Rendering\nDESCRIPTION: Example of using the new useElementSelector hook to subscribe to an ancestor element property while minimizing re-renders. This is recommended over useElement when subscribing to ancestor elements.\n\nLANGUAGE: tsx\nCODE:\n```\nconst rowSize = useElementSelector(([node]) => node.size, [], {\n  key: TableRowPlugin.key,\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BasicMarksPlugin in React\nDESCRIPTION: Code snippet showing how to import and use the BasicMarksPlugin in a Plate editor setup. The plugin should be included in the plugins array alongside other plugins.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BasicMarksPlugin } from '@udecode/plate-basic-marks/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  BasicMarksPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Validating Table Dimensions for CSV Data\nDESCRIPTION: A patch change that adds validation to ensure the CSV data contains at least a 2x2 table before processing it. This prevents incorrect interpretation of text as CSV data when it doesn't have proper tabular structure.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#900](https://github.com/udecode/plate/pull/900) [`c5c73683`](https://github.com/udecode/plate/commit/c5c73683eb3b9c9a091fe1fa05113c9176f9b12a) Thanks [@dylans](https://github.com/dylans)! - Make sure there's at least a 2x2 table before treating text as csv\n```\n\n----------------------------------------\n\nTITLE: Embed URL Data Type Definition\nDESCRIPTION: Type definition for the data structure returned by URL parsers. Contains properties for the URL, provider name, ID, and an optional component for rendering the embedded content.\n\nLANGUAGE: tsx\nCODE:\n```\ntype EmbedUrlData = {\n  url?: string;\n  provider?: string;\n  id?: string;\n  component?: RenderFunction<EmbedUrlData>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Plate's API and Transforms\nDESCRIPTION: Shows how to use Plate's transform functions and debug API for editor operations and debugging.\n\nLANGUAGE: typescript\nCODE:\n```\n// Using Plate's transforms\neditor.tf.toggleMark('bold');\n\n// Using Plate's debug API\neditor.api.debug.log('Hello, Plate!');\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Suggestion Plugin\nDESCRIPTION: Command to install the Plate Suggestion plugin package via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-suggestion\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extendTransforms Type Signature in TypeScript\nDESCRIPTION: Type signature for the extendTransforms method that extends the plugin's transforms with additional methods. Takes a function that receives the plugin context and returns a record of functions.\n\nLANGUAGE: typescript\nCODE:\n```\n(transforms: (ctx: PlatePluginContext) => Record<string, Function>) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Block Plugin in Plate Editor\nDESCRIPTION: Example configuration for the TrailingBlockPlugin in a Plate editor setup, specifying a paragraph block at root level should always be present at the end of the document.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  TrailingBlockPlugin.configure(() => ({\n    options: {\n      level: 0,\n      type: 'p',\n    },\n  })),\n];\n```\n\n----------------------------------------\n\nTITLE: Resetting Editor State with ReactPlugin\nDESCRIPTION: Transform method from ReactPlugin to reset the editor state while maintaining focus if the editor was previously focused.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.tf.reset()\n```\n\n----------------------------------------\n\nTITLE: Adding External DOM Elements to Tabbable List\nDESCRIPTION: Demonstrates how to include DOM elements outside the editor in the tabbable list using insertTabbableEntries and globalEventListener options.\n\nLANGUAGE: tsx\nCODE:\n```\n// Add buttons inside .my-popover to the list of tabbables\nglobalEventListener: true,\ninsertTabbableEntries: (editor) => {\n  const [selectedNode, selectedNodePath] = getNodeEntry(editor, editor.selection);\n\n  return [\n    ...document.querySelectorAll('.my-popover > button'),\n  ].map((domNode) => ({\n    domNode,\n    slateNode: selectedNode,\n    path: selectedNodePath,\n  }));\n},\n```\n\n----------------------------------------\n\nTITLE: Example Slate Node Structure with Custom Date Node\nDESCRIPTION: Example showing the structure of a Slate node with a custom date element that needs special handling for serialization.\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  type: 'p',\n  children: [{ type: 'text', text: '现在是' }, { type: 'date', date: '2025-03-31',children:[{type:'text',text:'2025-03-31'}] }],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KbdLeaf component for rendering\nDESCRIPTION: Maps the KbdPlugin.key to the KbdLeaf component in the components object for proper rendering of keyboard input marks.\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  [KbdPlugin.key]: KbdLeaf,\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: extendEditorTransforms Type Signature in TypeScript\nDESCRIPTION: Type signature for the extendEditorTransforms method that extends the editor's transforms with plugin-specific methods. Takes a function that receives the plugin context and returns a record of functions.\n\nLANGUAGE: typescript\nCODE:\n```\n(transforms: (ctx: PlatePluginContext) => Record<string, Function>) => PlatePlugin\n```\n\n----------------------------------------\n\nTITLE: Importing Trailing Block Plugin in React\nDESCRIPTION: How to import the TrailingBlockPlugin from the @udecode/plate-trailing-block package in a React application.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\n```\n\n----------------------------------------\n\nTITLE: Migration Example for Inline and Void Elements\nDESCRIPTION: Complete example of migrating from the old approach of extending editor with top-level methods to the new structure using overrideEditor. Shows how to handle inline and void element types with better organization.\n\nLANGUAGE: tsx\nCODE:\n```\n// From:\nexport const withInlineVoid: ExtendEditor = ({ editor }) => {\n  const { isInline, isSelectable, isVoid, markableVoid } = editor;\n\n  const voidTypes: string[] = [];\n  const inlineTypes: string[] = [];\n\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.node.isInline) {\n      inlineTypes.push(plugin.node.type);\n    }\n    if (plugin.node.isVoid) {\n      voidTypes.push(plugin.node.type);\n    }\n  });\n\n  editor.isInline = (element) => {\n    return inlineTypes.includes(element.type as any)\n      ? true\n      : isInline(element);\n  };\n\n  editor.isVoid = (element) => {\n    return voidTypes.includes(element.type as any) ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nexport const InlineVoidPlugin = createSlatePlugin({\n  key: 'inlineVoid',\n  extendEditor: withInlineVoid,\n});\n\n// After (using overrideEditor since we're only overriding existing methods):\nexport const withInlineVoid: OverrideEditor = ({\n  api: { isInline, isSelectable, isVoid, markableVoid },\n  editor,\n}) => {\n  const voidTypes: string[] = [];\n  const inlineTypes: string[] = [];\n\n  editor.pluginList.forEach((plugin) => {\n    if (plugin.node.isInline) {\n      inlineTypes.push(plugin.node.type);\n    }\n    if (plugin.node.isVoid) {\n      voidTypes.push(plugin.node.type);\n    }\n  });\n\n  return {\n    api: {\n      isInline(element) {\n        return inlineTypes.includes(element.type as any)\n          ? true\n          : isInline(element);\n      },\n      isVoid(element) {\n        return voidTypes.includes(element.type as any)\n          ? true\n          : isVoid(element);\n      },\n    },\n  };\n};\n\nexport const InlineVoidPlugin = createSlatePlugin({\n  key: 'inlineVoid',\n}).overrideEditor(withInlineVoid);\n```\n\n----------------------------------------\n\nTITLE: Prefixing Base Plugin Names in Plate\nDESCRIPTION: Patch change that prefixes base plugin names with 'Base' for better clarity and consistency in the plugin naming system.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3526](https://github.com/udecode/plate/pull/3526) by [@zbeyens](https://github.com/zbeyens) – Prefix base plugin with `Base`\n```\n\n----------------------------------------\n\nTITLE: Implementing PlateStatic in Next.js React Server Component\nDESCRIPTION: Example of using PlateStatic in a Next.js 14 React Server Component for server-side rendering without client-side code.\n\nLANGUAGE: tsx\nCODE:\n```\n// app/preview/page.tsx (RSC)\nimport { PlateStatic } from '@udecode/plate/core/static';\nimport { createSlateEditor } from '@udecode/plate';\nimport { components } from './my-static-components'; // your static components\n\nexport default async function Page() {\n  // Potentially fetch data from DB or an API here\n  const editor = createSlateEditor({\n    value: [\n      { type: 'p', children: [{ text: 'Rendered server-side 🎉' }] },\n    ],\n  });\n\n  // Return the static output:\n  return (\n    <PlateStatic \n      editor={editor} \n      components={components} \n      className=\"my-static-preview\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Break Plugin\nDESCRIPTION: Command to install the Plate break plugin via npm, which provides the SoftBreakPlugin functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-break\n```\n\n----------------------------------------\n\nTITLE: Slate React Extension Plugin Methods\nDESCRIPTION: Methods from SlateReactExtensionPlugin for redecorating the editor and setting editor values programmatically in a controlled component setup.\n\nLANGUAGE: typescript\nCODE:\n```\neditor.api.redecorate()\n```\n\nLANGUAGE: typescript\nCODE:\n```\neditor.tf.setValue(value: Value)\n```\n\n----------------------------------------\n\nTITLE: Importing KbdPlugin from Plate\nDESCRIPTION: Imports the KbdPlugin from the @udecode/plate-kbd package to enable keyboard input marks functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { KbdPlugin } from '@udecode/plate-kbd';\n```\n\n----------------------------------------\n\nTITLE: Defining At Type in Plate Editor API\nDESCRIPTION: Defines the At type which represents a location reference in the editor. It can be either a Location or a Node, allowing for flexible location referencing.\n\nLANGUAGE: typescript\nCODE:\n```\ntype At = TLocation | TNode\n```\n\n----------------------------------------\n\nTITLE: Configuring TabbablePlugin to Avoid Conflicts with Other Plugins\nDESCRIPTION: Shows how to use the query option to disable TabbablePlugin when Tab key should be handled by other plugins like Lists or Code blocks.\n\nLANGUAGE: tsx\nCODE:\n```\nquery: (editor) => {\n  const inList = findNode(editor, { match: { type: ListItemPlugin.key } });\n  const inCodeBlock = findNode(editor, { match: { type: CodeBlockPlugin.key } });\n  return !inList && !inCodeBlock;\n},\n```\n\n----------------------------------------\n\nTITLE: Overriding Editor Methods with .overrideEditor in TypeScript\nDESCRIPTION: The overrideEditor method is used to override existing editor methods without altering the plugin's type. It provides access to original methods through the context parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).overrideEditor(({ editor, tf: { insertText }, api: { isInline } }) => ({\n  transforms: {\n    insertText(text, options) {\n      // Override insertText behavior\n      insertText(text, options);\n    },\n  },\n  api: {\n    isInline(element) {\n      // Override isInline behavior\n      return isInline(element);\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Node Splitting Behavior Example\nDESCRIPTION: Demonstrates how the NodeIdPlugin handles node splitting, preserving the original ID and assigning a new ID to the split node.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before split\n<hp id=\"1\">te|st</hp>\n// After split:\n<hp id=\"1\">te</hp>\n<hp id=\"2\">st</hp>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to launch the Next.js development server to run the Plate editor template locally.\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Using Export Toolbar Button Component in Plate\nDESCRIPTION: Example showing how to reference and use the Export Toolbar Button component in a Plate UI implementation.\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentPreview name=\"playground-demo\" id=\"basic-elements\" />\n```\n\n----------------------------------------\n\nTITLE: Using Location References in Editor API\nDESCRIPTION: Demonstrates different ways to reference locations in the editor using paths, points, ranges, or node references. This shows the flexibility of the At parameter in API methods.\n\nLANGUAGE: typescript\nCODE:\n```\n// Using a location\neditor.api.nodes({ at: [0, 0] }) // Path location\neditor.api.nodes({ at: { path: [0], offset: 0 } }) // Point location \neditor.api.nodes({ at: { anchor: point1, focus: point2 } }) // Range location\n\n// Using a node reference\nconst node = editor.children[0]\neditor.api.nodes({ at: node }) // Will find node's path internally\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Table Plugin\nDESCRIPTION: Command to install the table plugin for Plate editor via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-table\n```\n\n----------------------------------------\n\nTITLE: Plugin Method: configure Type Signature in TypeScript\nDESCRIPTION: Type signature for the configure method that creates a new plugin instance with updated options. Takes either a configuration object or a function that returns a configuration based on the plugin context.\n\nLANGUAGE: typescript\nCODE:\n```\n(config: PlatePluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>> | ((ctx: PlatePluginContext<C>) => PlatePluginConfig<C['key'], InferOptions<C>, InferApi<C>, InferTransforms<C>>)) => PlatePlugin<C>\n```\n\n----------------------------------------\n\nTITLE: Updating Event Handlers to Plate's Plugin System\nDESCRIPTION: Shows how to convert manual event handlers to Plate's plugin-based event handling system and introduces the shortcuts system.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nconst onKeyDown = (event) => {\n  if (event.key === 'Tab') {\n    // Handle tab\n  }\n};\n\n// After\nconst TabPlugin = createPlatePlugin({\n  key: 'tab',\n  handlers: {\n    onKeyDown: ({ editor, event }) => {\n      if (event.key === 'Tab') {\n        // Handle tab\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Undo/Redo Behavior Example\nDESCRIPTION: Demonstrates how the NodeIdPlugin handles ID preservation during undo/redo operations based on the reuseId configuration.\n\nLANGUAGE: tsx\nCODE:\n```\n// With reuseId=true\neditor.tf.insertNode(<hp id=\"1\">text</hp>);\neditor.undo();\neditor.redo();\n// Node keeps id=\"1\" if not in use\n\n// With reuseId=false\neditor.tf.insertNode(<hp id=\"1\">text</hp>);\neditor.undo();\neditor.redo();\n// Node gets new id=\"2\"\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Configuration File\nDESCRIPTION: Command to create a local environment configuration file from the provided example file for setting up API keys.\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Cursor Overlay Plugin\nDESCRIPTION: Code to configure the CursorOverlayPlugin within the Plate editor's plugins array, rendering the CursorOverlay component after the editable area.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  CursorOverlayPlugin.configure({\n    render: { afterEditable: () => <CursorOverlay /> },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Cursor Overlay Components\nDESCRIPTION: Code for importing the CursorOverlayPlugin from the plate-selection package and a custom CursorOverlay component.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CursorOverlayPlugin } from '@udecode/plate-selection/react';\nimport { CursorOverlay } from '@/components/plate-ui/cursor-overlay';\n```\n\n----------------------------------------\n\nTITLE: Element Creation Utilities in Plate Editor\nDESCRIPTION: Factory methods for creating new editor elements. These utilities help in generating standardized blocks and initializing editor values.\n\nLANGUAGE: typescript\nCODE:\n```\ncreate.block(node?: Partial<TElement>, path?: Path) => TElement\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreate.value() => Value\n```\n\n----------------------------------------\n\nTITLE: Configuring Equation Components\nDESCRIPTION: Configures the component mapping to use EquationElement and InlineEquationElement for rendering equations in the editor.\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  // ...otherComponents,\n  [EquationPlugin.key]: EquationElement,\n  [InlineEquationPlugin.key]: InlineEquationElement,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Editor Methods in Playwright Tests\nDESCRIPTION: Code showing how to use editor methods in Playwright tests by evaluating code in the browser context. This is a workaround for using transforms that can't be directly imported into Playwright tests.\n\nLANGUAGE: ts\nCODE:\n```\nawait editorHandle.evaluate((editor) => {\n  editor.tf.insertNodes(/* ... */);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TagLike Interface in TypeScript\nDESCRIPTION: Type definition for the TagLike interface that represents items that can be used as tags, with a required value property and optional additional properties.\n\nLANGUAGE: ts\nCODE:\n```\ntype TagLike = {\n  value: string;\n  [key: string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Dependency Updates for Plate Project\nDESCRIPTION: A changelog documenting the dependency updates across multiple versions of the Plate project packages. It tracks version changes for @udecode/slate-plugins-core and @udecode/slate-plugins-common packages.\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [[`abaf4a11`](https://github.com/udecode/slate-plugins/commit/abaf4a11d3b69157983b6cf77b023a6008478a79)]:\n  - @udecode/slate-plugins-core@1.0.0-next.55\n  - @udecode/slate-plugins-common@1.0.0-next.55\n\n## 1.0.0-next.54\n\n### Patch Changes\n\n- Updated dependencies [[`d906095d`](https://github.com/udecode/slate-plugins/commit/d906095d20cf8755a200d254f6c20c510a748f29)]:\n  - @udecode/slate-plugins-common@1.0.0-next.54\n\n## 1.0.0-next.53\n\n### Patch Changes\n\n- Updated dependencies [[`42360b44`](https://github.com/udecode/slate-plugins/commit/42360b444d6a2959847d5619eda32319e360e3af)]:\n  - @udecode/slate-plugins-core@1.0.0-next.53\n  - @udecode/slate-plugins-common@1.0.0-next.53\n\n## 1.0.0-next.46\n\n### Patch Changes\n\n- Updated dependencies [[`6e9068f6`](https://github.com/udecode/slate-plugins/commit/6e9068f6f483b698b6b3aae6819333103504f41b)]:\n  - @udecode/slate-plugins-common@1.0.0-next.46\n\n## 1.0.0-next.40\n\n### Patch Changes\n\n- Updated dependencies [[`15048e6f`](https://github.com/udecode/slate-plugins/commit/15048e6facbefc5fe21b0b9bd9a586f269cada89)]:\n  - @udecode/slate-plugins-core@1.0.0-next.40\n  - @udecode/slate-plugins-common@1.0.0-next.40\n\n## 1.0.0-next.39\n\n### Patch Changes\n\n- Updated dependencies [[`b444071e`](https://github.com/udecode/slate-plugins/commit/b444071e2673803dba05c770c5dfbbde14f7a631)]:\n  - @udecode/slate-plugins-core@1.0.0-next.39\n  - @udecode/slate-plugins-common@1.0.0-next.39\n\n## 1.0.0-next.37\n\n### Patch Changes\n\n- Updated dependencies [[`2cf618c3`](https://github.com/udecode/slate-plugins/commit/2cf618c3a0220ca03c1d95e0b51d1ff58d73578c)]:\n  - @udecode/slate-plugins-common@1.0.0-next.37\n\n## 1.0.0-next.36\n\n### Patch Changes\n\n- Updated dependencies [[`7cbd7bd9`](https://github.com/udecode/slate-plugins/commit/7cbd7bd95b64e06fde38dcd68935984de8f3a82f), [`806e1632`](https://github.com/udecode/slate-plugins/commit/806e16322e655802822079d8540a6983a9dfb06e)]:\n  - @udecode/slate-plugins-common@1.0.0-next.36\n  - @udecode/slate-plugins-core@1.0.0-next.36\n\n## 1.0.0-next.32\n\n### Patch Changes\n\n- [#713](https://github.com/udecode/slate-plugins/pull/713) [`73b77853`](https://github.com/udecode/slate-plugins/commit/73b77853cb38f61d4bfb31a0d604e947c130ee0f) Thanks [@zbeyens](https://github.com/zbeyens)! - fix: added the core dep to avoid duplicated stores in the build\n\n## 1.0.0-next.30\n\n### Patch Changes\n\n- Updated dependencies [[`33605a49`](https://github.com/udecode/slate-plugins/commit/33605a495ccc3fd9b4f6cfdaf2eb0e6e59bd7a67), [`28f30c8a`](https://github.com/udecode/slate-plugins/commit/28f30c8a6b0a2d245d6f6403c8399f2e59d98b92), [`75e6d25d`](https://github.com/udecode/slate-plugins/commit/75e6d25de0f9cf2487adecff54c2993ebc795aa0)]:\n  - @udecode/slate-plugins-core@1.0.0-next.30\n  - @udecode/slate-plugins-common@1.0.0-next.30\n\n## 1.0.0-next.29\n\n### Patch Changes\n\n- Updated dependencies [[`dfbde8bd`](https://github.com/udecode/slate-plugins/commit/dfbde8bd856e1e646e3d8fe2cbf1df8f9b8c67c3), [`dfbde8bd`](https://github.com/udecode/slate-plugins/commit/dfbde8bd856e1e646e3d8fe2cbf1df8f9b8c67c3)]:\n  - @udecode/slate-plugins-core@1.0.0-next.29\n  - @udecode/slate-plugins-common@1.0.0-next.29\n\n## 1.0.0-next.26\n\n### Patch Changes\n\n- Updated dependencies [[`201a7993`](https://github.com/udecode/slate-plugins/commit/201a799342ff88405e120182d8554e70b726beea)]:\n  - @udecode/slate-plugins-core@1.0.0-next.26\n  - @udecode/slate-plugins-common@1.0.0-next.26\n```\n\n----------------------------------------\n\nTITLE: Rendering Visual Indicators for Selected Blocks\nDESCRIPTION: Configuration for rendering a visual indicator around selected blocks by configuring the plugin render option to include the BlockSelection component below root nodes.\n\nLANGUAGE: tsx\nCODE:\n```\nrender: {\n  belowRootNodes: (props) => {\n    if (!props.className?.includes('slate-selectable')) return null;\n\n    return <BlockSelection />;\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Using reset Transform in Slate\nDESCRIPTION: Resets the editor state including history, selection, and children. Options allow for only resetting the children without clearing history or operations.\n\nLANGUAGE: typescript\nCODE:\n```\nreset(options?: ResetOptions)\n```\n\n----------------------------------------\n\nTITLE: Importing Equation Plugins\nDESCRIPTION: Imports the EquationPlugin and InlineEquationPlugin from the Plate math package to enable equation functionality.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EquationPlugin, InlineEquationPlugin } from '@udecode/plate-math/react';\n```\n\n----------------------------------------\n\nTITLE: Using withVariants Function for Class Variance Authority Integration\nDESCRIPTION: The withVariants function sets default className to a component using variants from class-variance-authority. It manages component variants while allowing you to specify which props should be used only for styling and not passed to the underlying component.\n\nLANGUAGE: typescript\nCODE:\n```\nwithVariants(Component: React.ComponentType | ElementType, variants: V extends ReturnType<typeof cva>, onlyVariantsProps: (keyof VariantProps<V>)[]): React.ComponentType\n```\n\n----------------------------------------\n\nTITLE: Diagnosing Multiple Slate Library Versions\nDESCRIPTION: Commands to check for multiple versions of Slate dependencies (slate, slate-react, slate-dom) in your project.\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm ls slate slate-react slate-dom\n\n# pnpm or yarn\npnpm why slate\npnpm why slate-react\npnpm why slate-dom\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Link Package with npm\nDESCRIPTION: Command to install the @udecode/plate-link package using npm, which provides link functionality for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-link\n```\n\n----------------------------------------\n\nTITLE: Using Plate's Built-in Plugins\nDESCRIPTION: Demonstrates how to import and use Plate's built-in plugins for common text formatting features.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BoldPlugin, ItalicPlugin, UnderlinePlugin } from '@udecode/plate/react';\n\nconst plugins = [\n  BoldPlugin,\n  ItalicPlugin,\n  UnderlinePlugin,\n  // ... other plugins\n];\n\nconst editor = createPlateEditor({ plugins });\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Plugin in Plate Editor\nDESCRIPTION: Example of importing and configuring the LinkPlugin with a floating toolbar in a Plate editor setup.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { LinkPlugin } from '@udecode/plate-link/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  LinkPlugin.configure({\n    render: { afterEditable: () => <LinkFloatingToolbar /> },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Handling Fallback Editors with useEditorMounted Hook\nDESCRIPTION: Example of handling fallback editors using the useEditorMounted hook. This pattern disables UI elements when no valid editor is mounted, preventing operations on fallback editors.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = withHoc(PlateController, () => {\n  const activeEditor = useEditorRef();\n  const isFallback = !useEditorMounted();\n  \n  const toggleBold = () => {\n    activeEditor.tf.toggleMark(BoldPlugin.key);\n  };\n  \n  return (\n    <main>\n      <button\n        type=\"button\"\n        onClick={toggleBold}\n        disabled={isFallback}\n      >\n        Bold\n      </button>\n      \n      <Plate editor={createPlateEditor({ id: 'main', primary: false })}>\n        <PlateContent />\n      </Plate>\n    \n      <Plate editor={createPlateEditor({ id: 'secondary', primary: false })}>\n        <PlateContent />\n      </Plate>\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate CSV Plugin with npm\nDESCRIPTION: Command to install the @udecode/plate-csv package using npm. This package provides functionality to deserialize CSV content into Slate editor values.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-csv\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Normalization\nDESCRIPTION: Demonstrates how to control whether the Plate editor should normalize its content upon initialization.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin],\n  shouldNormalizeEditor: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Using getOptions to Access All Plugin Options\nDESCRIPTION: Demonstrates how to use the getOptions function to retrieve all options for the plugin, which is useful when you need to access multiple configuration settings.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: { option1: 'value1', option2: 'value2' },\n  handlers: {\n    onClick: ({ getOptions }) => {\n      const options = getOptions();\n      console.info('All options:', options);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Indent List Plugin\nDESCRIPTION: Command to install the necessary packages for using the indent list functionality in Plate.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-indent-list @udecode/plate-indent\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Families in Tailwind Config\nDESCRIPTION: This TypeScript snippet shows how to configure font families in Tailwind CSS to better support HTML export. It defines custom font families for headings, monospace, and sans-serif text with appropriate fallbacks.\n\nLANGUAGE: ts\nCODE:\n```\nfontFamily: {\n  heading: [\n    'var(--font-heading)',\n    'ui-sans-serif',\n    '-apple-system',\n    'BlinkMacSystemFont',\n    'Segoe UI Variable Display',\n    'Segoe UI',\n    'Helvetica',\n    'Apple Color Emoji',\n    'Arial',\n    'sans-serif',\n    'Segoe UI Emoji',\n    'Segoe UI Symbol',\n    'Noto Color Emoji',\n  ],\n  mono: ['var(--font-mono)', ...fontFamily.mono],\n  sans: [\n    'var(--font-sans)',\n    'ui-sans-serif',\n    '-apple-system',\n    'BlinkMacSystemFont',\n    'Segoe UI Variable Display',\n    'Segoe UI',\n    'Helvetica',\n    'Apple Color Emoji',\n    'Arial',\n    'sans-serif',\n    'Segoe UI Emoji',\n    'Segoe UI Symbol',\n    'Noto Color Emoji',\n  ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Levels in DebugPlugin\nDESCRIPTION: Shows how to set the minimum log level in the DebugPlugin to control which messages are displayed. This example configures the plugin to only show warnings and errors.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [\n    DebugPlugin.configure({\n      options: {\n        logLevel: 'warn', // Only show warnings and errors\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Tailwind Config with Custom Colors\nDESCRIPTION: JavaScript configuration to extend Tailwind's theme with custom warning colors that use the CSS variables. This code is added to the tailwind.config.js file.\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        warning: \"hsl(var(--warning))\",\n        \"warning-foreground\": \"hsl(var(--warning-foreground))\",\n      },\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using withProps Function for Default Component Properties\nDESCRIPTION: The withProps function allows setting default props to a React component. It takes a component and a props object, returning a new component with those default props applied.\n\nLANGUAGE: typescript\nCODE:\n```\nwithProps(Component: React.ComponentType | ElementType, props: Partial<T>): React.ComponentType\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Type from Plugin Context\nDESCRIPTION: Shows how to access the node type associated with the plugin from the Plugin Context, which is useful for identifying and working with specific node types.\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  node: { type: 'myNodeType' },\n  handlers: {\n    onKeyDown: ({ type }) => {\n      console.info('Node type:', type);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Selection Package\nDESCRIPTION: Command to install the @udecode/plate-selection package which contains the Cursor Overlay functionality via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-selection\n```\n\n----------------------------------------\n\nTITLE: Updated SerializeHtml type definition\nDESCRIPTION: Shows the simplified SerializeHtml type definition which no longer has separate element and leaf properties.\n\nLANGUAGE: ts\nCODE:\n```\ntype SerializeHtml = RenderFunction<\n  PlateRenderElementProps | PlateRenderLeafProps\n>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Common Export File for Plate 42.0.0\nDESCRIPTION: TypeScript code that exports all Plate plugin packages from a single file. This approach allows replacing imports from '@udecode/plate' with imports from a single common file in your project.\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from '@udecode/plate-alignment';\nexport * from '@udecode/plate-autoformat';\nexport * from '@udecode/plate-basic-elements';\nexport * from '@udecode/plate-basic-marks';\nexport * from '@udecode/plate-block-quote';\nexport * from '@udecode/plate-break';\nexport * from '@udecode/plate-code-block';\nexport * from '@udecode/plate-combobox';\nexport * from '@udecode/plate-comments';\nexport * from '@udecode/plate-diff';\nexport * from '@udecode/plate-find-replace';\nexport * from '@udecode/plate-font';\nexport * from '@udecode/plate-heading';\nexport * from '@udecode/plate-highlight';\nexport * from '@udecode/plate-horizontal-rule';\nexport * from '@udecode/plate-indent';\nexport * from '@udecode/plate-indent-list';\nexport * from '@udecode/plate-kbd';\nexport * from '@udecode/plate-layout';\nexport * from '@udecode/plate-line-height';\nexport * from '@udecode/plate-link';\nexport * from '@udecode/plate-list';\nexport * from '@udecode/plate-media';\nexport * from '@udecode/plate-mention';\nexport * from '@udecode/plate-node-id';\nexport * from '@udecode/plate-normalizers';\nexport * from '@udecode/plate-reset-node';\nexport * from '@udecode/plate-select';\nexport * from '@udecode/plate-csv';\nexport * from '@udecode/plate-docx';\nexport * from '@udecode/plate-markdown';\nexport * from '@udecode/plate-slash-command';\nexport * from '@udecode/plate-suggestion';\nexport * from '@udecode/plate-tabbable';\nexport * from '@udecode/plate-table';\nexport * from '@udecode/plate-toggle';\nexport * from '@udecode/plate-trailing-block';\nexport * from '@udecode/plate-alignment/react';\nexport * from '@udecode/plate-autoformat/react';\nexport * from '@udecode/plate-basic-elements/react';\nexport * from '@udecode/plate-basic-marks/react';\nexport * from '@udecode/plate-block-quote/react';\nexport * from '@udecode/plate-break/react';\nexport * from '@udecode/plate-code-block/react';\nexport * from '@udecode/plate-combobox/react';\nexport * from '@udecode/plate-comments/react';\nexport * from '@udecode/plate-floating';\nexport * from '@udecode/plate-font/react';\nexport * from '@udecode/plate-heading/react';\nexport * from '@udecode/plate-highlight/react';\nexport * from '@udecode/plate-layout/react';\nexport * from '@udecode/plate-slash-command/react';\nexport * from '@udecode/plate-indent/react';\nexport * from '@udecode/plate-indent-list/react';\nexport * from '@udecode/plate-kbd/react';\nexport * from '@udecode/plate-line-height/react';\nexport * from '@udecode/plate-link/react';\nexport * from '@udecode/plate-list/react';\nexport * from '@udecode/plate-media/react';\nexport * from '@udecode/plate-reset-node/react';\nexport * from '@udecode/plate-selection';\nexport * from '@udecode/plate-suggestion/react';\nexport * from '@udecode/plate-tabbable/react';\nexport * from '@udecode/plate-table/react';\nexport * from '@udecode/plate-toggle/react';\nexport * from '@udecode/plate-resizable';\n```\n\n----------------------------------------\n\nTITLE: SelectOnBackspacePlugin Behavior Example\nDESCRIPTION: Example demonstrating the behavior of SelectOnBackspacePlugin when pressing backspace in an empty paragraph after an image.\n\nLANGUAGE: tsx\nCODE:\n```\n// Empty paragraph after an image\n<editor>\n  <img src=\"...\" />\n  <p>\n    <cursor />\n  </p>\n</editor>\n\n// Pressing backspace will select the image instead of deleting it\n<editor>\n  <img src=\"...\" selected />\n  <p></p>\n</editor>\n\n// If removeNodeIfEmpty is true, the empty paragraph is also removed\n<editor>\n  <img src=\"...\" selected />\n</editor>\n```\n\n----------------------------------------\n\nTITLE: Checking Editor Mount Status with useEditorMounted\nDESCRIPTION: Shows how to check if any editor is mounted using the useEditorMounted hook, which is useful when working with the editor outside the Plate component to ensure operations are only performed when an editor is available.\n\nLANGUAGE: typescript\nCODE:\n```\nconst Toolbar = () => {\n  const editor = useEditorState();\n  const isMounted = useEditorMounted();\n  \n  if (!isMounted) {\n    return <div>Editor not ready</div>;\n  }\n  \n  return <div>{/* Toolbar content */}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Secondary Button\nDESCRIPTION: CSS variables defining the background and foreground colors for secondary button variants.\n\nLANGUAGE: css\nCODE:\n```\n--secondary: 210 40% 96.1%;\n--secondary-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Creating a ThemeProvider component in Next.js\nDESCRIPTION: Creates a client-side ThemeProvider component that wraps the next-themes provider to manage theme state across the application.\n\nLANGUAGE: tsx\nCODE:\n```\n'use client';\n\nimport * as React from 'react';\nimport { ThemeProvider as NextThemesProvider } from 'next-themes';\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Copilot and Markdown Components\nDESCRIPTION: Imports the necessary components from the Plate AI and Markdown packages, including CopilotPlugin for AI suggestions and markdown utilities for text processing.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CopilotPlugin } from '@udecode/plate-ai/react';\nimport {\n  MarkdownPlugin,\n  serializeMdNodes,\n  stripMarkdown,\n} from '@udecode/plate-markdown';\n```\n\n----------------------------------------\n\nTITLE: Updated PlatePlugin handler signature with additional plugin parameter\nDESCRIPTION: Shows the updated signature for plugin handlers which now receive the plugin as a second parameter in addition to the editor.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\nexport type X<T = {}> = (editor: PlateEditor<T>) => Y;\n\n// After\nexport type X<T = {}, P = {}> = (\n  editor: PlateEditor<T>,\n  plugin: WithPlatePlugin<T, P>\n) => Y;\n```\n\n----------------------------------------\n\nTITLE: Configuring NormalizeTypesPlugin in Plate Editor\nDESCRIPTION: Example showing how to import and configure the NormalizeTypesPlugin in a Plate editor. The configuration forces the first element to be an h1 heading.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NormalizeTypesPlugin } from '@udecode/plate-normalizers';\nimport { TrailingBlockPlugin } from '@udecode/plate-trailing-block';\nimport { ParagraphPlugin } from '@udecode/plate/react';\nimport { HEADING_KEYS } from '@udecode/plate-heading/react';\n\nconst plugins = [\n  // ...其他插件\n  NormalizeTypesPlugin.configure({\n    options: {\n      rules: [{ path: [0], strictType: 'h1' }],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Getting All Options for a Plugin\nDESCRIPTION: Demonstrates how to retrieve all options for a specific plugin using the getOptions method, allowing access to the complete configuration of a plugin.\n\nLANGUAGE: typescript\nCODE:\n```\nconst linkOptions = editor.getOptions(LinkPlugin);\n```\n\n----------------------------------------\n\nTITLE: Installing AI-Enhanced Plate Editor\nDESCRIPTION: Command to add the AI-enhanced Plate editor to your project. This provides an advanced editor with AI capabilities in app/editor directory along with necessary components.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: Using withCn Function for Default Component Classes\nDESCRIPTION: The withCn function sets a default className to a React component. It takes a component and class options that will be merged with any className props passed when the component is used.\n\nLANGUAGE: typescript\nCODE:\n```\nwithCn(Component: React.ComponentType, ...inputs: CxOptions): React.ComponentType\n```\n\n----------------------------------------\n\nTITLE: Configuring components.json for CSS Variables Theming\nDESCRIPTION: JSON configuration that sets tailwind.cssVariables to true to enable CSS variables for theming. This configuration is used in the components.json file.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AI Editor to a Remix project\nDESCRIPTION: Command to add the AI Editor components to your Remix project. This adds an advanced AI-powered editor page in app/editor along with necessary components in components/plate-ui.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: Starting the Documentation Development Server\nDESCRIPTION: Command to run the documentation website in development mode after building the project.\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Handling Fallback Editors with isFallback Check\nDESCRIPTION: Example of handling fallback editors by checking the editor.isFallback property. This pattern prevents operations on fallback editors by returning early from event handlers.\n\nLANGUAGE: tsx\nCODE:\n```\nconst App = withHoc(PlateController, () => {\n  const activeEditor = useEditorRef();\n  \n  const toggleBold = () => {\n    if (activeEditor.isFallback) return;\n    activeEditor.tf.toggleMark(BoldPlugin.key);\n  };\n  \n  return (\n    <main>\n      <button type=\"button\" onClick={toggleBold}>\n        Bold\n      </button>\n      \n      <Plate editor={createPlateEditor({ id: 'main', primary: false })}>\n        <PlateContent />\n      </Plate>\n    \n      <Plate editor={createPlateEditor({ id: 'secondary', primary: false })}>\n        <PlateContent />\n      </Plate>\n    </main>\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SoftBreakPlugin with Custom Rules\nDESCRIPTION: Example of configuring the SoftBreakPlugin with custom rules for soft breaks. It sets up rules for Shift+Enter and regular Enter in specific block types such as code blocks, blockquotes, and tables.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SoftBreakPlugin } from '@udecode/plate-break/react';\nimport { CodeBlockPlugin } from '@udecode/plate-code-block/react';\nimport { BlockquotePlugin } from '@udecode/plate-block-quote/react';\nimport { TablePlugin } from '@udecode/plate-table/react';\n\nconst plugins = [\n  // ...其他插件,\n  SoftBreakPlugin.configure({\n    options: {\n      rules: [\n        { hotkey: 'shift+enter' },\n        {\n          hotkey: 'enter',\n          query: {\n            allow: [CodeBlockPlugin.key, BlockquotePlugin.key, TablePlugin.key],\n          },\n        },\n      ],\n    },\n  }),\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Custom ID for Plate Editor\nDESCRIPTION: Shows how to set a custom identifier for a Plate editor, which is needed when using editor retrieval methods.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin],\n  id: 'my-custom-editor-id',\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Block Menu Dependencies with npm\nDESCRIPTION: Command to install the required packages for implementing block menus in Plate editor. This installs the plate-selection and plate-node-id packages which are prerequisites for the block menu functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-selection @udecode/plate-node-id\n```\n\n----------------------------------------\n\nTITLE: New Link Plugin Configuration Type in TypeScript\nDESCRIPTION: Demonstrates the new strongly-typed plugin configuration approach using PluginConfig with generic type parameters for key, options, API, and transforms.\n\nLANGUAGE: typescript\nCODE:\n```\ntype LinkConfig = PluginConfig<\n  // key\n  'p',\n  // options\n  { defaultLinkAttributes?: any },\n  // api\n  { link: { getAttributes: (editor: PlateEditor) => LinkAttributes } },\n  // transforms\n  { floatingLink: { hide: () => void } }\n>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Plate using CLI with shadcn/ui\nDESCRIPTION: Command to initialize Plate in a Remix project using the shadcn CLI. This sets up the basic configuration needed for Plate to work with your Remix application.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Border Colors\nDESCRIPTION: CSS variable defining the default border color used throughout the application.\n\nLANGUAGE: css\nCODE:\n```\n--border: 214.3 31.8% 91.4%;\n```\n\n----------------------------------------\n\nTITLE: Testing Keyboard Event Handlers in Plate\nDESCRIPTION: Example of testing a keyboard event handler by creating a mock handler, setting up the editor with the handler in a plugin, and verifying that the handler is called with the correct parameters.\n\nLANGUAGE: typescript\nCODE:\n```\nit('should call the onKeyDown handler', () => {\n  const input = (\n    <editor>\n      <hp>\n        Hello <anchor />world<focus />\n      </hp>\n    </editor>\n  ) as any as PlateEditor;\n\n  // Create a mock handler to verify it's called\n  const onKeyDownMock = jest.fn();\n\n  const editor = createPlateEditor({\n    value: input.children,\n    selection: input.selection,\n    plugins: [\n      {\n        key: 'test',\n        handlers: {\n          onKeyDown: onKeyDownMock,\n        },\n      },\n    ],\n  });\n\n  // Create the keyboard event\n  const event = new KeyboardEvent('keydown', {\n    key: 'Enter',\n  }) as any;\n\n  // Call the handler directly\n  editor.plugins.test.handlers.onKeyDown({\n    ...getEditorPlugin(editor, { key: 'test' }),\n    event,\n  });\n\n  // Verify the handler was called\n  expect(onKeyDownMock).toHaveBeenCalled();\n});\n```\n\n----------------------------------------\n\nTITLE: Original shadcn TextareaForm Implementation\nDESCRIPTION: The original code snippet showing a standard shadcn/ui TextareaForm implementation that will be replaced with a Plate editor.\n\nLANGUAGE: tsx\nCODE:\n```\n<FormField\n  control={form.control}\n  name=\"bio\"\n  render={({ field }) => (\n    <FormItem>\n      <FormLabel>Bio</FormLabel>\n      <FormControl>\n        <Textarea\n          placeholder=\"Tell us a bit about yourself\"\n          className=\"resize-none\"\n          {...field}\n        />\n      </FormControl>\n      <FormDescription>\n        You can <span>@mention</span> other users and organizations.\n      </FormDescription>\n      <FormMessage />\n    </FormItem>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Selection Area with Tailwind Classes\nDESCRIPTION: Example of how to style the selection area by adding tailwind CSS classes to the editor container component.\n\nLANGUAGE: js\nCODE:\n```\n'[&_.slate-selection-area]:border [&_.slate-selection-area]:border-primary [&_.slate-selection-area]:bg-primary/10'\n```\n\n----------------------------------------\n\nTITLE: Registering Media Components in Plate Editor\nDESCRIPTION: Registration of component renderers for each media plugin type in the Plate editor, mapping plugin keys to their respective component implementations.\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  // ...otherComponents,\n  [ImagePlugin.key]: ImageElement,\n  [VideoPlugin.key]: VideoElement,\n  [AudioPlugin.key]: AudioElement,\n  [FilePlugin.key]: FileElement,\n  [MediaEmbedPlugin.key]: MediaEmbedElement,\n  [PlaceholderPlugin.key]: MediaPlaceholderElement,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Plate Components in Laravel\nDESCRIPTION: Command to add Plate UI components to your components/plate-ui directory.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add -r plate\n```\n\n----------------------------------------\n\nTITLE: Node Filtering Behavior Example\nDESCRIPTION: Shows how the NodeIdPlugin filters nodes based on configuration options like filterText and allow/exclude lists.\n\nLANGUAGE: tsx\nCODE:\n```\n// With filterText=false\n<hp id=\"1\">\n  <htext id=\"2\">text</htext>\n</hp>\n\n// With allow=['p'] exclude=['blockquote']\n<hp id=\"1\">text</hp>\n<hblockquote>quote</hblockquote>\n```\n\n----------------------------------------\n\nTITLE: Diff Grouping Example in Markdown\nDESCRIPTION: Comparison showing how the diff plugin groups consecutive deletions and insertions after version 30.8.0 update.\n\nLANGUAGE: diff\nCODE:\n```\n- Old paragraph 1\n+ New paragraph 1\n- Old paragraph 2\n+ New paragraph 2\n```\n\nLANGUAGE: diff\nCODE:\n```\n- Old paragraph 1\n- Old paragraph 2\n+ New paragraph 1\n+ New paragraph 2\n```\n\n----------------------------------------\n\nTITLE: Defining TPlaceholderElement Fragment in TypeScript\nDESCRIPTION: Fragment of a TypeScript interface for placeholder elements, containing only the mediaType property. This appears to be incomplete in the source material.\n\nLANGUAGE: tsx\nCODE:\n```\n  mediaType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parsers\nDESCRIPTION: Shows how to define custom parsers for a plugin to handle specialized serialization and deserialization logic.\n\nLANGUAGE: ts\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  parsers: {\n    myCustomParser: {\n      deserializer: {\n        parse: // ...\n      },\n      serializer: {\n        parse: // ...\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Path Finding API Changes in Slate-React v41.0.0\nDESCRIPTION: Renaming of path finding function for better clarity and guidance on when to use different path finding methods based on performance characteristics.\n\nLANGUAGE: JavaScript\nCODE:\n```\n## @udecode/slate-react@41.0.0\n\n### Major Changes\n\n- [#3830](https://github.com/udecode/plate/pull/3830) by [@felixfeng33](https://github.com/felixfeng33) – Rename `findNodePath` to `findPath` since the addition of `findNodePath` in the headless lib.\n\n  We recommend using `findPath` mostly when subscribing to its value (e.g. in a React component) as it has O(path.length) complexity, compared to O(n) for the traversal-based `findNodePath`. This optimization is particularly important in:\n\n  - Render functions of Plate components where using `findNodePath` would increase the initial render time by O(n²)\n  - Key press handlers where using `findNodePath` would increase the handling time by O(n)\n\n  where n is the number of nodes in the editor.\n```\n\n----------------------------------------\n\nTITLE: Installing Minimal Editor for Plate in Astro\nDESCRIPTION: Command to add the basic Plate editor to your Astro project. This installs a minimal editor configuration with essential functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-basic\n```\n\n----------------------------------------\n\nTITLE: Building Registry in Plate Project with Yarn\nDESCRIPTION: Command to rebuild the registry after making changes to files in the registry folder. This should be run anytime modifications are made to ensure the registry is up to date.\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:registry\n```\n\n----------------------------------------\n\nTITLE: tsconfig.json with Node Resolution and Path Aliases\nDESCRIPTION: A workaround configuration for projects that can't use TypeScript 5.0+ or \"bundler\" resolution, using path aliases to map imports to the correct locations.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    \"paths\": {\n      \"@udecode/plate/react\": [\n        \"./node_modules/@udecode/plate/dist/react/index.d.ts\"\n      ],\n      \"@udecode/plate-core/react\": [\n        \"./node_modules/@udecode/plate-core/dist/react/index.d.ts\"\n      ],\n      \"@udecode/plate-list/react\": [\n        \"./node_modules/@udecode/plate-list/dist/react/index.d.ts\"\n      ]\n      // ...repeat for all @udecode/plate-*/react packages\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Props into Target Plugins\nDESCRIPTION: Demonstrates how to inject properties into specific nodes by targeting other plugins, such as adding text alignment capabilities to paragraph nodes.\n\nLANGUAGE: ts\nCODE:\n```\nconst AlignPlugin = createPlatePlugin({\n  key: 'align',\n  inject: {\n    nodeProps: {\n      defaultNodeValue: 'start',\n      nodeKey: 'align',\n      styleKey: 'textAlign',\n      validNodeValues: ['start', 'left', 'center', 'right', 'end', 'justify'],\n    },\n    targetPlugins: [ParagraphPlugin.key],\n    // This is injected into all `targetPlugins`. In this example, ParagraphPlugin will be able to deserialize `textAlign` style.\n    targetPluginToInject: ({ editor, plugin }) => ({\n      parsers: {\n        html: {\n          deserializer: {\n            parse: ({ element, node }) => {\n              if (element.style.textAlign) {\n                node[editor.getType(plugin)] = element.style.textAlign;\n              }\n            },\n          },\n        },\n      },\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Table Plugin Improvements in Plate v42.0.0\nDESCRIPTION: Major performance improvements and API changes for the table plugin, including node ID dependencies, parameter updates, and state hook consolidation.\n\nLANGUAGE: JavaScript\nCODE:\n```\n## @udecode/plate-table@42.0.0\n\n### Major Changes\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – **Major performance improvement**: all table cells were re-rendering when a single cell changed. This is now fixed.\n\n  - `TablePlugin` now depends on `NodeIdPlugin`.\n  - Table merging is now enabled by default:\n    - Renamed `enableMerging` to `disableMerge`.\n    - **Migration**:\n      - `enableMerging: true` → remove the option.\n      - otherwise → `TablePlugin.configure({ options: { disableMerge: true } })`\n  - Renamed `unmergeTableCells` to `splitTableCell`.\n  - Renamed `editor.api.create.cell` to `editor.api.create.tableCell`.\n  - In `useTableMergeState`, renamed `canUnmerge` to `canSplit`.\n  - `insertTableRow` and `insertTableColumn`: removed `disableSelect` in favor of `select`. **Migration**: replace it with the opposite boolean.\n  - `getTableCellBorders`: params `(element, options)` → `(editor, options)`; removed `isFirstCell` and `isFirstRow`.\n  - Merged `useTableCellElementState` into `useTableCellElement`:\n    - Removed its parameter.\n    - Removed `hovered` and `hoveredLeft` returns (use CSS instead).\n    - Renamed `rowSize` to `minHeight`.\n    - Computes column sizes and returns `width`.\n  - Merged `useTableCellElementResizableState` into `useTableCellElementResizable`:\n    - Removed `onHover` and `onHoverEnd` props (use CSS instead).\n  - Merged `useTableElementState` into `useTableElement`:\n    - Removed its parameter.\n    - No longer computes and returns `colSizes`, `minColumnWidth`, and `colGroupProps`.\n```\n\n----------------------------------------\n\nTITLE: Migrating Node API Functions in Plate\nDESCRIPTION: List of node-related function migrations to the NodeApi namespace with updated parameter structures and return values.\n\nLANGUAGE: JavaScript\nCODE:\n```\n- `getNextSiblingNodes(parentEntry, path)` -> `NodeApi.children(editor, path, { from: path.at(-1) + 1 })`\n- `getFirstNodeText` -> `NodeApi.firstText`\n- `getFirstChild([node, path])` -> `NodeApi.firstChild(editor, path)`\n- `getLastChild([node, path])` -> `NodeApi.lastChild(editor, path)`\n- `getLastChildPath([node, path])` -> `NodeApi.lastChild(editor, path)`\n- `isLastChild([node, path], childPath)` -> `NodeApi.isLastChild(editor, childPath)`\n- `getChildren([node, path])` -> `Array.from(NodeApi.children(editor, path))`\n- `getCommonNode` -> `NodeApi.common`\n- `getNode` -> `NodeApi.get`\n- `getNodeAncestor` -> `NodeApi.ancestor`\n- `getNodeAncestors` -> `NodeApi.ancestors`\n- `getNodeChild` -> `NodeApi.child`\n- `getNodeChildren` -> `NodeApi.children`\n- `getNodeDescendant` -> `NodeApi.descendant`\n- `getNodeDescendants` -> `NodeApi.descendants`\n- `getNodeElements` -> `NodeApi.elements`\n- `getNodeFirstNode` -> `NodeApi.first`\n- `getNodeFragment` -> `NodeApi.fragment`\n- `getNodeLastNode` -> `NodeApi.last`\n- `getNodeLeaf` -> `NodeApi.leaf`\n- `getNodeLevels` -> `NodeApi.levels`\n- `getNodeParent` -> `NodeApi.parent`\n- `getNodeProps` -> `NodeApi.extractProps`\n- `getNodes` -> `NodeApi.nodes`\n- `getNodeString` -> `NodeApi.string`\n- `getNodeTexts` -> `NodeApi.texts`\n- `hasNode` -> `NodeApi.has`\n- `hasSingleChild` -> `NodeApi.hasSingleChild`\n- `isAncestor` -> `NodeApi.isAncestor`\n- `isDescendant` -> `NodeApi.isDescendant`\n- `isEditor` -> `NodeApi.isEditor`\n- `isNode` -> `NodeApi.isNode`\n- `isNodeList` -> `NodeApi.isNodeList`\n- `nodeMatches` -> `NodeApi.matches`\n```\n\n----------------------------------------\n\nTITLE: Rendering Hundreds Editors Component Preview in JSX\nDESCRIPTION: This code displays a preview of the Hundreds Editors component using the ComponentPreview element, referencing a component named 'hundreds-editors-demo'.\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"hundreds-editors-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Plugin for Empty Block Handling in Plate\nDESCRIPTION: The DeletePlugin was added to handle delete forward actions in empty blocks. When enabled, this plugin allows for removing the current empty block without affecting subsequent blocks.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2687](https://github.com/udecode/plate/pull/2687) by [@archie9211](https://github.com/archie9211) – Added `createDeletePlugin`. If enabled, performing a delete forward inside an empty block will remove that block without affecting the subsequent block.\n```\n\n----------------------------------------\n\nTITLE: Adding Prevent Unselect Attribute for Elements\nDESCRIPTION: Example of how to add the data-plate-prevent-unselect attribute to components to prevent deselection when clicking on them.\n\nLANGUAGE: tsx\nCODE:\n```\n<YourSpecialButtoon data-plate-prevent-unselect />\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Dependencies with npm\nDESCRIPTION: Installs the core Plate library and its required dependencies including component libraries and utility packages.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate @udecode/cn class-variance-authority tailwindcss-animate tailwind-scrollbar-hide lucide-react\n```\n\n----------------------------------------\n\nTITLE: Package Restructuring and Dependency Updates\nDESCRIPTION: Code showing how @udecode/plate-core has been split into multiple packages for separation of concerns and decoupled versioning in version 20.0.0.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { someUtil } from '@udecode/plate-core';\n\n// After\nimport { someUtil } from '@udecode/plate-common';\n\n// New package structure:\n// - @udecode/utils: miscellaneous utilities\n// - @udecode/slate: slate experimental features and bug fixes\n// - @udecode/slate-react: slate-react experimental features and bug fixes\n// - @udecode/plate-core: minimalistic core of plate\n// - @udecode/slate-utils: utils depending on @udecode/slate\n// - @udecode/plate-utils: utils depending on @udecode/slate-react and @udecode/plate-core\n// - @udecode/plate-common: re-exports the 6 previous packages\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Select Package\nDESCRIPTION: Command to install the @udecode/plate-select package via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-select\n```\n\n----------------------------------------\n\nTITLE: Package Deprecation Notices in Plate v42.0.0\nDESCRIPTION: Notes about packages that have been deprecated and should be replaced with alternative packages in the Plate ecosystem.\n\nLANGUAGE: JavaScript\nCODE:\n```\n## @udecode/slate-utils@42.0.0\n\n### Major Changes\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – This package is now deprecated. Use `@udecode/slate` or `@udecode/plate` instead.\n\n## @udecode/slate-react@42.0.0\n\n### Major Changes\n\n- [#3920](https://github.com/udecode/plate/pull/3920) by [@zbeyens](https://github.com/zbeyens) – This package is now deprecated. Use `@udecode/slate` or `@udecode/plate` instead.\n```\n\n----------------------------------------\n\nTITLE: Configuring Utils Alias in components.json\nDESCRIPTION: Sets the import alias for utility functions used by the CLI.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"utils\": \"@/lib/utils\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 将 Slate 插件转换为 Plate 插件\nDESCRIPTION: 展示如何使用 toPlatePlugin 函数将一个类型化的 Slate 插件转换为 Plate 插件，添加 Plate 特定的处理程序和选项。\n\nLANGUAGE: typescript\nCODE:\n```\nconst CodeBlockPlugin = toPlatePlugin(createSlatePlugin({ key: 'code_block' }), {\n  handlers: {},\n  options: { hotkey: ['mod+opt+8', 'mod+shift+8'] },\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Blocks from Selection\nDESCRIPTION: Configuration for excluding certain block types from being selectable in the block selection feature.\n\nLANGUAGE: ts\nCODE:\n```\nBlockSelectionPlugin.configure({\n  inject: {\n    // 排除表格行下方的块\n    excludeBelowPlugins: ['tr'],\n    // 排除块类型\n    excludePlugins: ['table', 'code_line', 'column_group', 'column'],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Link Plugin Configuration Change\nDESCRIPTION: Breaking change in the plate-link package that requires explicitly specifying allowed URL schemes other than the default ones.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before: all URL schemes were allowed implicitly\n\n// After: need to specify allowedSchemes for non-default schemes\ncreatePlugins([\n  createLinkPlugin({\n    // Default schemes (http, https, mailto, tel) don't need to be specified\n    // Any other schemes must be explicitly allowed\n    allowedSchemes: ['ftp', 'ftps', 'ssh']\n  })\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Toggle Plugin and Dependencies\nDESCRIPTION: Command to install the Toggle plugin and its dependencies (Indent and Node ID plugins) for Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-indent @udecode/plate-node-id @udecode/plate-toggle\n```\n\n----------------------------------------\n\nTITLE: Plate Package and Type Changes\nDESCRIPTION: Details of package relocations, zustand store updates, and type renaming in the Plate project for better organization and performance.\n\nLANGUAGE: TypeScript\nCODE:\n```\n- Moved from `@udecode/plate/react` to `@udecode/plate`:\n\n  - `Hotkeys`\n\n- Upgraded to `zustand@5` and `zustand-x@5`:\n  - Replace `createZustandStore('name')(initialState)` with `createZustandStore(initialState, { mutative: true, name: 'name' })`\n  - All plugin stores now use [zustand-mutative](https://github.com/mutativejs/zustand-mutative) for immutable state updates, which is faster than `immer`.\n\nTypes:\n\n- Rename the following types:\n  - `TEditor` -> `Editor`\n  - `TOperation` -> `Operation`\n  - `TPath` -> `Path`\n  - `TNodeProps` -> `NodeProps`\n  - `TNodeChildEntry` -> `NodeChildEntry`\n  - `TNodeEntry` -> `NodeEntry`\n  - `TDescendant` -> `Descendant`\n  - `TDescendantEntry` -> `DescendantEntry`\n  - `TAncestor` -> `Ancestor`\n  - `TAncestorEntry` -> `AncestorEntry`\n  - `TElementEntry` -> `ElementEntry`\n  - `TTextEntry` -> `TextEntry`\n- Query/transform options now use generic `V extends Value` instead of `E extends Editor`.\n- `getEndPoint`, `getEdgePoints`, `getFirstNode`, `getFragment`, `getLastNode`, `getLeafNode`, `getPath`, `getPoint`, `getStartPoint` can return `undefined` if not found (suppressing error throws).\n- `NodeApi.ancestor`, `NodeApi.child`, `NodeApi.common`, `NodeApi.descendant`, `NodeApi.first`, `NodeApi.get`, `NodeApi.last`, `NodeApi.leaf`, `NodeApi.parent`, `NodeApi.getIf`, `PathApi.previous` return `undefined` if not found instead of throwing\n- Replace `NodeOf` type with `DescendantOf` in `editor.tf.setNodes` `editor.tf.unsetNodes`, `editor.api.previous`, `editor.api.node`, `editor.api.nodes`, `editor.api.last`\n- Enhanced `editor.tf.setNodes`:\n  - Added `marks` option to handle mark-specific operations\n  - When `marks: true`:\n    - Only applies to text nodes in non-void nodes or markable void nodes\n    - Automatically sets `split: true` and `voids: true`\n    - Handles both expanded ranges and collapsed selections in markable voids\n  - Replaces `addRangeMarks` functionality\n```\n\n----------------------------------------\n\nTITLE: Overriding Editor Methods with Plate's New Structure\nDESCRIPTION: Example showing how to override existing editor methods using the new organization where methods are in editor.tf and editor.api namespaces, rather than at the top level of the editor object.\n\nLANGUAGE: tsx\nCODE:\n```\n// For overriding existing methods only:\noverrideEditor(({ editor, tf: { deleteForward }, api: { isInline } }) => ({\n  transforms: {\n    deleteForward(options) {\n      // ...conditional override\n      deleteForward(options);\n    },\n  },\n  api: {\n    isInline(element) {\n      // ...conditional override\n      return isInline(element);\n    },\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Using useBlockSelectionFragmentProp Hook\nDESCRIPTION: A hook that returns fragment prop for selected blocks, useful when needing to pass selected nodes to other components.\n\nLANGUAGE: typescript\nCODE:\n```\nconst fragmentProp = useBlockSelectionFragmentProp()\n```\n\n----------------------------------------\n\nTITLE: 使用 .withComponent 设置插件组件\nDESCRIPTION: 展示如何使用 .withComponent 方法设置或替换与插件关联的组件。\n\nLANGUAGE: typescript\nCODE:\n```\nconst ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: {\n    isElement: true,\n    type: 'p',\n  },\n}).withComponent(ParagraphElement);\n```\n\n----------------------------------------\n\nTITLE: Installing Block Selection in Plate\nDESCRIPTION: Command for installing the required block selection packages for Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-selection @udecode/plate-node-id\n```\n\n----------------------------------------\n\nTITLE: Error Handling with DebugPlugin\nDESCRIPTION: Shows how to catch and handle errors thrown by the DebugPlugin. This example demonstrates checking for PlateError instances and accessing error properties like type and message.\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  editor.api.debug.error('An error occurred', 'CUSTOM_ERROR', { details: 'Additional information' });\n} catch (error) {\n  if (error instanceof PlateError) {\n    console.log(error.type); // 'CUSTOM_ERROR'\n    console.log(error.message); // '[CUSTOM_ERROR] An error occurred'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DnD Plugin Import Path Change\nDESCRIPTION: Breaking change where the unstyled logic for DnD has been moved from plate-ui-dnd to plate-dnd in version 20.0.0.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nimport { createDndPlugin } from '@udecode/plate-ui-dnd';\n\n// After\nimport { createDndPlugin } from '@udecode/plate-dnd';\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Trailing Block in Node.js\nDESCRIPTION: Command to install the Plate Trailing Block plugin using npm package manager.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-trailing-block\n```\n\n----------------------------------------\n\nTITLE: 插件方法链式调用示例\nDESCRIPTION: 展示如何链式调用多个插件扩展方法来创建一个具有完整功能的插件，包括 API、转换和选项。\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n  options: {\n    baseValue: 5,\n  },\n})\n  .extendApi(() => ({\n    pluginMethod: () => '插件方法',\n  }))\n  .extendEditorApi(({ getOptions }) => ({\n    multiply: (factor: number) => getOptions().baseValue * factor,\n  }))\n  .extendTransforms(() => ({\n    pluginTransform: () => {\n      // 插件特定的转换\n    },\n  }))\n  .extendEditorTransforms(({ editor }) => ({\n    editorTransform: () => {\n      // 编辑器特定的转换\n    },\n  }));\n\neditor.api.myPlugin.api.pluginMethod();\neditor.api.multiply(3);\neditor.tf.myPlugin.pluginTransform();\neditor.tf.editorTransform();\n```\n\n----------------------------------------\n\nTITLE: Importing Plate Select Plugins\nDESCRIPTION: How to import the DeletePlugin and SelectOnBackspacePlugin from the @udecode/plate-select package.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DeletePlugin, SelectOnBackspacePlugin } from '@udecode/plate-select';\n```\n\n----------------------------------------\n\nTITLE: Styling Selection Area with Tailwind CSS\nDESCRIPTION: Example of styling the selection area using Tailwind CSS classes for border and background effects.\n\nLANGUAGE: js\nCODE:\n```\n'[&_.slate-selection-area]:border [&_.slate-selection-area]:border-primary [&_.slate-selection-area]:bg-primary/10'\n```\n\n----------------------------------------\n\nTITLE: Adding Components with shadcx CLI\nDESCRIPTION: Command to add a component to your project using shadcx. This adds the specified component and installs all required dependencies.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx add [component]\n```\n\n----------------------------------------\n\nTITLE: DnD Component Props Restructuring\nDESCRIPTION: Breaking change in the withDraggables function which has been renamed to withPlateDraggables with restructured parameters in version 20.0.0.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\nwithDraggables(editor, {\n  onRenderDragHandle: () => {},\n  styles,\n})\n\n// After\nwithPlateDraggables(editor, {\n  draggableProps: {\n    onRenderDragHandle: () => {},\n    styles,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up JSX Pragma for Plate Tests\nDESCRIPTION: Initial setup for a test file that includes the JSX pragma to enable JSX syntax for creating editor values in tests.\n\nLANGUAGE: typescript\nCODE:\n```\n/** @jsx jsx */\n\nimport { jsx } from '@udecode/plate-test-utils';\n\njsx; // so ESLint doesn't complain\n```\n\n----------------------------------------\n\nTITLE: 使用 .extendTransforms 添加插件特定转换方法\nDESCRIPTION: 展示如何使用 .extendTransforms 方法向插件添加特定的转换方法，这些方法可以通过 editor.tf.[pluginKey] 访问。\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendTransforms(() => ({\n  pluginTransform: () => {\n    // 自定义转换逻辑\n  },\n}));\n\n// 访问插件的转换\neditor.tf.myPlugin.pluginTransform();\n\n// 注意：`editor.tf` 是 `editor.transforms` 的简写\neditor.transforms.myPlugin.pluginTransform();\n```\n\n----------------------------------------\n\nTITLE: Range, Path, and Point API Namespace Migrations in Plate\nDESCRIPTION: Documents functions moved to RangeApi, PathApi, and PointApi namespaces. These functions provide utilities for working with ranges, paths, and points in the editor.\n\nLANGUAGE: typescript\nCODE:\n```\nisCollapsed -> RangeApi.isCollapsed\nisExpanded -> RangeApi.isExpanded\n\nisFirstChild -> !PathApi.hasPrevious\ngetPreviousPath -> PathApi.previous\n\ngetPointFromLocation({ at, focus }) -> PointApi.get(at, { focus })\n```\n\n----------------------------------------\n\nTITLE: Migrating Editor Transformation Functions in Plate\nDESCRIPTION: List of editor transformation function migrations from older API formats to newer editor.tf.* namespace pattern with updated parameter structures.\n\nLANGUAGE: JavaScript\nCODE:\n```\n- `mergeNodes` -> `editor.tf.mergeNodes`\n- `moveChildren` -> `editor.tf.moveNodes({ at, to, children: true, fromIndex, match: (node, path) => boolean })`\n- `moveNodes` -> `editor.tf.moveNodes`\n- `moveSelection` -> `editor.tf.move`\n- `normalizeEditor` -> `editor.tf.normalize`\n- `removeEditorMark` -> `editor.tf.removeMark`\n- `removeEditorText` -> `editor.tf.removeNodes({ text: true, empty: false })`\n- `removeEmptyPreviousBlock` -> `editor.tf.removeNodes({ previousEmptyBlock: true })`\n- `removeMark(options)` -> `editor.tf.removeMarks(keys, options)`\n- `removeNodeChildren` -> `editor.tf.removeNodes({ at, children: true })`\n- `removeNodes` -> `editor.tf.removeNodes`\n- `removeSelectionMark` -> `editor.tf.removeMarks()`\n- `replaceNode(editor, { nodes, insertOptions, removeOptions })` -> `editor.tf.replaceNodes(nodes, { removeNodes, ...insertOptions })`\n- `select` -> `editor.tf.select`\n- `selectEndOfBlockAboveSelection` -> `editor.tf.select(editor.selection, { edge: 'end' })`\n- `selectNodes` -> `editor.tf.select(editor.api.nodesRange(nodes))`\n- `setFragmentData` -> `editor.tf.setFragmentData`\n- `setMarks(marks, clear)` -> `editor.tf.addMarks(marks, { remove: string | string[] })`\n- `setNodes` -> `editor.tf.setNodes`\n- `setPoint` -> `editor.tf.setPoint`\n- `setSelection` -> `editor.tf.setSelection`\n- `someNode` -> `editor.api.some(options)`\n- `splitNodes` -> `editor.tf.splitNodes`\n- `toDOMNode` -> `editor.api.toDOMNode`\n- `toDOMPoint` -> `editor.api.toDOMPoint`\n- `toDOMRange` -> `editor.api.toDOMRange`\n- `toggleWrapNodes` -> `editor.tf.toggleBlock(type, { wrap: true })`\n- `toSlateNode` -> `editor.api.toSlateNode`\n- `toSlatePoint` -> `editor.api.toSlatePoint`\n- `toSlateRange` -> `editor.api.toSlateRange`\n- `unhangCharacterRange` -> `editor.api.unhangRange(range, { character: true })`\n- `unhangRange` -> `editor.api.unhangRange`\n- `unsetNodes` -> `editor.tf.unsetNodes`\n- `unwrapNodes` -> `editor.tf.unwrapNodes`\n- `withoutNormalizing` -> `editor.tf.withoutNormalizing`\n- `wrapNodeChildren` -> `editor.tf.wrapNodes(element, { children: true })`\n- `wrapNodes` -> `editor.tf.wrapNodes`\n- `replaceNodeChildren` -> `editor.tf.replaceNodes({ at, children: true })`\n- `resetEditor` -> `editor.tf.reset`\n- `resetEditorChildren` -> `editor.tf.reset({ children: true })`\n- `selectEditor` -> `editor.tf.select([], { focus, edge })`\n- `selectSiblingNodePoint` -> `editor.tf.select(at, { next, previous })`\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Selection Visual Indicators\nDESCRIPTION: Configuration for rendering visual indicators around selected blocks using the BlockSelection component.\n\nLANGUAGE: tsx\nCODE:\n```\nrender: {\n  belowRootNodes: (props) => {\n    if (!props.className?.includes('slate-selectable')) return null;\n\n    return <BlockSelection />;\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Enabling TabbablePlugin Only for Void Nodes\nDESCRIPTION: Demonstrates how to configure TabbablePlugin to only be active when void nodes are selected, useful when using with the Indent plugin.\n\nLANGUAGE: tsx\nCODE:\n```\nquery: (editor) => !!findNode(editor, {\n  match: (node) => isVoid(editor, node),\n}),\n```\n\n----------------------------------------\n\nTITLE: Accessing Window and DOM Node Methods in Plate Editor\nDESCRIPTION: Methods for accessing the window object and checking DOM nodes within the editor. These functions help determine if nodes are within the editor's scope and if they're editable or selectable.\n\nLANGUAGE: typescript\nCODE:\n```\ngetWindow() => Window\n```\n\nLANGUAGE: typescript\nCODE:\n```\nhasDOMNode(target: Node, options?: { editable?: boolean }) => boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nhasEditableTarget(target: EventTarget | null) => target is Node\n```\n\nLANGUAGE: typescript\nCODE:\n```\nhasSelectableTarget(target: EventTarget | null) => target is Node\n```\n\nLANGUAGE: typescript\nCODE:\n```\nhasTarget(target: EventTarget | null) => target is Node\n```\n\n----------------------------------------\n\nTITLE: Updated GetHoverDirection Function Signature in Plate UI DnD\nDESCRIPTION: Code comparison showing the function signature change for getHoverDirection in version 12.0.0, changing from individual parameters to an options object pattern.\n\nLANGUAGE: tsx\nCODE:\n```\n// before\n(\n  dragItem: DragItemBlock,\n  monitor: DropTargetMonitor,\n  ref: any,\n  hoverId: string\n)\n// after\n{\n  dragItem,\n  id,\n  monitor,\n  nodeRef,\n}: GetHoverDirectionOptions\n```\n\n----------------------------------------\n\nTITLE: Testing Selection Changes on Backspace in Plate\nDESCRIPTION: Test case demonstrating how to verify both content changes and selection position changes after a delete operation in the Plate editor.\n\nLANGUAGE: typescript\nCODE:\n```\nit('should collapse selection on backspace', () => {\n  const input = (\n    <editor>\n      <hp>\n        He<anchor />llo wor<focus />ld\n      </hp>\n    </editor>\n  ) as any as PlateEditor;\n\n  const output = (\n    <editor>\n      <hp>\n        He<cursor />ld\n      </hp>\n    </editor>\n  ) as any as PlateEditor;\n\n  const editor = createPlateEditor({\n    value: input.children,\n    selection: input.selection,\n  });\n\n  editor.tf.deleteBackward();\n\n  expect(editor.children).toEqual(output.children);\n  expect(editor.selection).toEqual(output.selection);\n});\n```\n\n----------------------------------------\n\nTITLE: 使用 .extendEditorApi 添加编辑器级 API 方法\nDESCRIPTION: 展示如何使用 .extendEditorApi 方法向编辑器添加根级别的 API 方法，这些方法可以直接通过 editor.api 访问。\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyPlugin = createPlatePlugin({\n  key: 'myPlugin',\n}).extendEditorApi(({ getOptions }) => ({\n  editorMethod: () => getOptions().someOption,\n}));\n\n// 访问插件的 API\neditor.api.editorMethod();\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Jest\nDESCRIPTION: Command to execute all unit tests for the project using Jest.\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Upgrading to AI-Enhanced Editor\nDESCRIPTION: Command to upgrade the basic Plate editor to the AI-enhanced version using the shadcx CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add editor-ai -r plate -o\n```\n\n----------------------------------------\n\nTITLE: Installing the Plate Mention Plugin\nDESCRIPTION: Command to install the Plate Mention plugin package using npm. This package provides mention functionality for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-mention\n```\n\n----------------------------------------\n\nTITLE: Migrating from options prop to plugin configuration in Plate\nDESCRIPTION: Demonstrates how to migrate from the removed 'options' prop to configuring plugins directly or using createPlugins with overrideByKey.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Plate plugins={plugins} options={options} />;\n\n// After\n// option 1: use the plugin factory\nlet plugins = [\n  createParagraphPlugin({\n    type: 'paragraph',\n  }),\n];\n\n// option 2: use createPlugins\nplugins = createPlugins(plugins, {\n  overrideByKey: {\n    [ELEMENT_PARAGRAPH]: {\n      type: 'paragraph',\n    },\n  },\n});\n\n<Plate plugins={plugins} />;\n```\n\n----------------------------------------\n\nTITLE: Directly Using the CSV Deserializer Function in TypeScript\nDESCRIPTION: Example demonstrating how to directly call the deserializeCsv function with custom options. This allows passing data and specifying whether the CSV includes headers without using the plugin configuration.\n\nLANGUAGE: typescript\nCODE:\n```\ndeserializeCsv({ data, headers: true })\n```\n\n----------------------------------------\n\nTITLE: Using createSlotComponent for child component behavior\nDESCRIPTION: Creates a Slot component that is useful when you want a component to behave like its child component. Takes a base component or native HTML element as input.\n\nLANGUAGE: typescript\nCODE:\n```\ncreateSlotComponent(element: React.ElementType)\n```\n\n----------------------------------------\n\nTITLE: Importing Caption and Media Plugins for Plate\nDESCRIPTION: Imports the CaptionPlugin and various media plugins that can be used with captions, such as Image, Video, Audio, File, and MediaEmbed plugins.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CaptionPlugin } from '@udecode/plate-caption/react';\nimport {\n  AudioPlugin,\n  FilePlugin,\n  ImagePlugin,\n  MediaEmbedPlugin,\n  VideoPlugin,\n} from '@udecode/plate-media/react';\n```\n\n----------------------------------------\n\nTITLE: Dependency Update Reference in Markdown\nDESCRIPTION: Git commit reference format for dependency updates. This shows how dependency updates are linked to specific commits in the changelog.\n\nLANGUAGE: markdown\nCODE:\n```\n- Updated dependencies [[`6e9068f6`](https://github.com/udecode/slate-plugins/commit/6e9068f6f483b698b6b3aae6819333103504f41b)]:\n  - @udecode/slate-plugins-common@1.0.0-next.46\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML in Plate utilities\nDESCRIPTION: Example of using the parseHtmlDocument and parseHtmlElement utilities introduced in version 8.1.0 to handle HTML content in Plate.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseHtmlDocument, parseHtmlElement } from '@udecode/plate';\n\n// Parse an HTML string into a Document\nconst htmlString = '<div><p>Hello world</p></div>';\nconst document = parseHtmlDocument(htmlString);\n\n// Parse an HTML string into an Element\nconst elementString = '<p>Hello world</p>';\nconst element = parseHtmlElement(elementString);\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Plugins in Plate Editor\nDESCRIPTION: Example of importing and using font-related plugins from the @udecode/plate-font package in a Plate editor configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  FontBackgroundColorPlugin,\n  FontColorPlugin,\n  FontSizePlugin,\n} from '@udecode/plate-font/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  FontColorPlugin,\n  FontBackgroundColorPlugin,\n  FontSizePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Focus Preservation to UI Elements\nDESCRIPTION: Example of adding the data-plate-focus attribute to UI elements to maintain the editor's selection state when those elements are focused.\n\nLANGUAGE: tsx\nCODE:\n```\n<ToolbarButton data-plate-focus=\"true\">\n  {/* toolbar content */}\n</ToolbarButton>\n```\n\n----------------------------------------\n\nTITLE: Adding Plate Editor AI Component\nDESCRIPTION: Command to add the AI-enhanced editor component to the Plate template using the shadcx CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-ai\n```\n\n----------------------------------------\n\nTITLE: Using createPrimitiveComponent for React component creation\nDESCRIPTION: Creates a primitive component factory that leverages hooks to manage state, properties, and forwards references to child components. Takes a base component or native HTML element as input.\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePrimitiveComponent(element: React.ElementType)\n```\n\n----------------------------------------\n\nTITLE: Accessing Font API Methods\nDESCRIPTION: Example showing the API method added for font size operations. This snippet demonstrates the availability of the setMark operation in the fontSize API.\n\nLANGUAGE: typescript\nCODE:\n```\napi.fontSize.setMark\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Selection Plugin for Table Integration in Plate\nDESCRIPTION: Configuration for the BlockSelectionPlugin that defines which elements are selectable, excluding specific types like code_line, column, and td. It also prevents selection for elements contained within table rows.\n\nLANGUAGE: tsx\nCODE:\n```\nBlockSelectionPlugin.configure(({ editor }) => ({\n  options: {\n    enableContextMenu: true,\n    isSelectable: (element, path) => {\n      return (\n        !['code_line', 'column', 'td'].includes(element.type) &&\n        !editor.api.block({ above: true, at: path, match: { type: 'tr' } })\n      );\n    },\n  },\n}))\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Keyboard Input Plugin in bash\nDESCRIPTION: Command to install the @udecode/plate-kbd package via npm, which adds support for keyboard input marks in Plate.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-kbd\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Template\nDESCRIPTION: Command to install all required dependencies after cloning or using the template repository.\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Getting a Node Handle by Path in Playwright\nDESCRIPTION: Code to retrieve a handle to a node at a specific path in the editor and make assertions about its value using jsonValue().\n\nLANGUAGE: ts\nCODE:\n```\nconst nodeHandle = await getNodeByPath(page, editorHandle, [0]);\n\nexpect(await nodeHandle.jsonValue()).toBe({\n  type: 'p',\n  children: [{ text: 'My paragraph' }],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering CalloutElement in Plate Components\nDESCRIPTION: Configuration code to register the CalloutElement component in the Plate editor's components map.\n\nLANGUAGE: tsx\nCODE:\n```\nconst components = {\n  // ...otherComponents,\n  [CalloutPlugin.key]: CalloutElement,\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Adding a Specific Component with shadcx CLI\nDESCRIPTION: Example showing how to add the alert-dialog component to your project using the shadcx CLI.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx add alert-dialog\n```\n\n----------------------------------------\n\nTITLE: Generating HTML with serializeHtml using PlateStatic\nDESCRIPTION: Demonstrates how to generate complete HTML strings using serializeHtml with PlateStatic for exporting content to formats like emails or PDFs.\n\nLANGUAGE: ts\nCODE:\n```\nimport { createSlateEditor } from '@udecode/plate';\nimport { serializeHtml } from '@udecode/plate/core/static';\nimport { components } from './my-static-components';\n\nconst editor = createSlateEditor({ /* ...plugins... */ });\n\n// Using PlateStatic under the hood\nconst html = await serializeHtml(editor, {\n  components,\n  editorComponent: PlateStatic, // optional if you want a custom wrapper\n  props: { className: 'max-w-3xl mx-auto' }, \n});\n\nconsole.info(html);\n/*\n<div data-slate-editor=\"true\" data-slate-node=\"value\" class=\"max-w-3xl mx-auto\">\n  <div data-slate-node=\"element\" data-slate-type=\"p\" ...>Hello Plate!</div>\n</div>\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding Plate Components with shadcx\nDESCRIPTION: Command to add Plate components to your project using the shadcx CLI tool.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add -r plate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies after creating a project from the template repository.\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Converting Slate Plugin to Plate Plugin with toPlatePlugin in TypeScript\nDESCRIPTION: The toPlatePlugin function allows you to convert a typed Slate plugin to a Plate plugin, adding Plate-specific configuration options and handlers.\n\nLANGUAGE: typescript\nCODE:\n```\nconst CodeBlockPlugin = toPlatePlugin(createSlatePlugin({ key: 'code_block' }), {\n  handlers: {},\n  options: { hotkey: ['mod+opt+8', 'mod+shift+8'] },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Repository Structure with Directory Tree\nDESCRIPTION: Shows the basic directory structure of the Plate project repository, which follows a monorepo pattern with apps and packages directories.\n\nLANGUAGE: plaintext\nCODE:\n```\napps\n└── www\n    ├── content\n    └── src\n        └── app\n            ├── components\n            └── registry\n                └── default\n                    ├── example\n                    └── plate-ui\npackages\n└── core\n```\n\n----------------------------------------\n\nTITLE: Adding CalloutPlugin to Plate Plugins Array\nDESCRIPTION: Configuration code to add the CalloutPlugin to the Plate editor's plugins array.\n\nLANGUAGE: tsx\nCODE:\n```\nconst plugins = [\n  // ...otherPlugins,\n  CalloutPlugin,\n]\n```\n\n----------------------------------------\n\nTITLE: Clicking a Node at Path in Playwright\nDESCRIPTION: Code to simulate a click on a node at a specific path in the editor. This is useful for setting focus on a particular node.\n\nLANGUAGE: ts\nCODE:\n```\nawait clickAtPath(page, elementHandle, [0]);\n```\n\n----------------------------------------\n\nTITLE: Importing CalloutPlugin from Plate\nDESCRIPTION: Import statement for the CalloutPlugin from the Plate editor framework.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CalloutPlugin } from '@udecode/plate-callout/react';\n```\n\n----------------------------------------\n\nTITLE: Diff Example in Markdown\nDESCRIPTION: Example showing the diff format for comparing paragraphs, demonstrating how text differences are displayed in the plugin's output.\n\nLANGUAGE: diff\nCODE:\n```\n- My slightly modified paragraph.\n+ New paragraph\n+ My slightly modified paragraph!\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Caption Package\nDESCRIPTION: Command to install the Caption plugin package for Plate from npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-caption\n```\n\n----------------------------------------\n\nTITLE: Defining Static Node Components for PlateStatic in React\nDESCRIPTION: Creates a static paragraph element component that can be used with PlateStatic for server-side rendering without interactive features.\n\nLANGUAGE: tsx\nCODE:\n```\n// paragraph-element-static.ts\nimport React from 'react';\nimport { SlateElementProps } from '@udecode/plate';\n\nexport function ParagraphElementStatic(props: SlateElementProps) {\n  return (\n    <p {...props.attributes} style={props.style}>\n      {props.children}\n    </p>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Callout Plugin with npm\nDESCRIPTION: Command to install the @udecode/plate-callout package using npm package manager.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-callout\n```\n\n----------------------------------------\n\nTITLE: Defining TableApi Type Structure in TypeScript\nDESCRIPTION: TypeScript interface definition for the TableApi object with create and table property groups. This defines the structure of table-related API functions available in the editor.\n\nLANGUAGE: typescript\nCODE:\n```\ntype TableApi = {\n  create: {\n    table: OmitFirst<typeof getEmptyTableNode>;\n    /** Cell node factory used each time a cell is created. */\n    tableCell: OmitFirst<typeof getEmptyCellNode>;\n    tableRow: OmitFirst<typeof getEmptyRowNode>;\n  };\n  table: {\n    getCellBorders: OmitFirst<typeof getTableCellBorders>;\n    getCellSize: OmitFirst<typeof getTableCellSize>;\n    getColSpan: typeof getColSpan;\n    getRowSpan: typeof getRowSpan;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Column Plugins in Plate Editor\nDESCRIPTION: Code snippet showing how to import and add Column plugins to your Plate editor configuration.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ColumnPlugin, ColumnItemPlugin } from '@udecode/plate-layout/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  ColumnPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Up EditorContainer Scroll Container\nDESCRIPTION: Implementation of an EditorContainer component that works as a scroll container for the Table of Contents functionality using the useEditorContainerRef hook.\n\nLANGUAGE: tsx\nCODE:\n```\n// Below <Plate> component\nfunction EditorContainer({ children }: { children: React.ReactNode }) {\n  const containerRef = useEditorContainerRef();\n\n  return <div ref={containerRef}>{children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Plate Layout Package\nDESCRIPTION: Command to install the Plate Layout package which provides column functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-layout\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Generic WithOverride Type Changes in TypeScript\nDESCRIPTION: Shows the before and after type definition for WithOverride, which now uses more specific generics to support custom editor types.\n\nLANGUAGE: tsx\nCODE:\n```\n// before\nexport type WithOverride<T = {}, P = {}> = (\n  editor: PlateEditor<T>,\n  plugin: WithPlatePlugin<T, P>\n) => PlateEditor<T>;\n\n// after - where E is the Editor type (input), and EE is the Extended Editor type (output)\nexport type WithOverride<\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n  EE extends E = E,\n> = (editor: E, plugin: WithPlatePlugin<P, V, E>) => EE;\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Indent Plugin\nDESCRIPTION: Command to install the @udecode/plate-indent package using npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-indent\n```\n\n----------------------------------------\n\nTITLE: Serializing Slate to HTML in Plate\nDESCRIPTION: Example of how to convert Slate nodes to HTML using serializeHtml function, including editor creation, component mapping, and wrapping options.\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport { createSlateEditor, serializeHtml } from '@udecode/plate';\nimport { EditorStatic } from '@/components/plate-ui/editor-static';\n\n// 创建一个编辑器并配置所有需要的插件\nconst editor = createSlateEditor({\n  // ... 你的插件 ...\n});\n\n// 提供将 Slate 节点映射到 HTML 元素的组件\nconst components = {\n  // [ParagraphPlugin.key]: ParagraphElementStatic,\n  // [HeadingPlugin.key]: HeadingElementStatic,\n  // ...\n};\n\n// 你也可以传递自定义的编辑器组件和 props。\n// 例如，EditorStatic 是 PlateStatic 的样式版本。\nconst html = await serializeHtml(editor, {\n  components,\n  editorComponent: EditorStatic, // 如果不提供，默认为 PlateStatic\n  props: { variant: 'none', className: 'p-2' },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Plate List Plugin in React\nDESCRIPTION: Basic usage example showing how to import and add the ListPlugin to the Plate editor plugins array.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ListPlugin } from '@udecode/plate-list/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  ListPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Mapping inject props to plugins\nDESCRIPTION: Using the mapInjectPropsToPlugin utility to map plugin inject props to an injected plugin.\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mapInjectPropsToPlugin } from '@udecode/plate';\n\n// Original plugin\nconst basePlugin = {\n  type: 'paragraph',\n  // plugin properties\n};\n\n// Inject props into the plugin\nconst injectedPlugin = mapInjectPropsToPlugin(basePlugin, {\n  inject: {\n    props: {\n      nodeKey: 'custom-key',\n      defaultNodeValue: 'default text',\n      // other props to inject\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Line Height Plugin with npm\nDESCRIPTION: Command to install the plate-line-height package which provides line height functionality to the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-line-height\n```\n\n----------------------------------------\n\nTITLE: Importing the NodeIdPlugin\nDESCRIPTION: Example of importing the NodeIdPlugin from the @udecode/plate-node-id package.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NodeIdPlugin } from '@udecode/plate-node-id';\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Media Package\nDESCRIPTION: Command to install the Plate media package via npm, which provides components for handling various media types in the editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-media\n```\n\n----------------------------------------\n\nTITLE: Installing next-themes package for Next.js\nDESCRIPTION: Command to install the next-themes package which provides dark mode functionality for Next.js applications.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next-themes\n```\n\n----------------------------------------\n\nTITLE: Implementing HighlightPlugin in Plate React Application\nDESCRIPTION: Example code showing how to import and add the HighlightPlugin to your Plate editor plugins array. This enables support for text highlighting functionality within the editor.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HighlightPlugin } from '@udecode/plate-highlight/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  HighlightPlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration with Node Resolution and Path Aliases\nDESCRIPTION: Alternative TypeScript configuration that uses node moduleResolution with path aliases to map Plate subpath imports to their dist/react types.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\",\n    \"paths\": {\n      \"@udecode/plate/react\": [\n        \"./node_modules/@udecode/plate/dist/react/index.d.ts\"\n      ],\n      \"@udecode/plate-core/react\": [\n        \"./node_modules/@udecode/plate-core/dist/react/index.d.ts\"\n      ],\n      \"@udecode/plate-list/react\": [\n        \"./node_modules/@udecode/plate-list/dist/react/index.d.ts\"\n      ]\n      // ...repeat for all @udecode/plate-*/react packages\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Highlight Package via npm\nDESCRIPTION: Command to install the highlight functionality package for Plate editor. This package provides text marking tools for content review and referencing.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-highlight\n```\n\n----------------------------------------\n\nTITLE: Adding Minimal Editor to Gatsby Project\nDESCRIPTION: Command to add the basic Plate editor to your Gatsby project. This creates a minimal rich text editor with essential functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-basic\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Comments Plugin\nDESCRIPTION: Command to install the plate-comments package via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-comments\n```\n\n----------------------------------------\n\nTITLE: Change to Plate Children Rendering Order in v13.1.0\nDESCRIPTION: Major change to how children are rendered in the Plate component, with additions of firstChildren prop and editableRef prop, plus a new isRendered store field.\n\nLANGUAGE: markdown\nCODE:\n```\n### Major Changes\n\n- `Plate` children are now rendered as last children of `Slate` (previously first children). To reproduce the previous behavior, move `children` to `firstChildren`\n\n### Minor Changes\n\n- [#1592](https://github.com/udecode/plate/pull/1592) by [@zbeyens](https://github.com/zbeyens) –\n  - fix: `Plate` children were rendered before `Editable`, making slate DOM not resolvable on first render. Fixed by moving `Editable` as the first child of `Slate` and `children` as the last children of `Slate`.\n  - `Plate` new props:\n    - `firstChildren`: replaces the previous behavior of `children`, rendered as the first children of `Slate`\n    - `editableRef`: Ref to the `Editable` component.\n  - Plate store - new field:\n    - `isRendered`: Whether `Editable` is rendered so slate DOM is resolvable. Subscribe to this value when you query the slate DOM outside `Plate`.\n```\n\n----------------------------------------\n\nTITLE: Installing Plate AI Plugin Dependencies\nDESCRIPTION: Command to install the required npm packages for using the Plate AI plugin with markdown and basic formatting support.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-ai @udecode/plate-selection @udecode/plate-markdown @udecode/plate-basic-marks\n```\n\n----------------------------------------\n\nTITLE: Adding Redecorate Action in Plate v13.7.0\nDESCRIPTION: Introduction of a new plate action called 'redecorate' that triggers a redecoration of the editor.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1648](https://github.com/udecode/plate/pull/1648) by [@zbeyens](https://github.com/zbeyens) –\n  - new plate action:\n    - `redecorate` - triggers a redecoration of the editor.\n```\n\n----------------------------------------\n\nTITLE: PlateStatic TypeScript Interface Definition\nDESCRIPTION: Defines the TypeScript interface for PlateStatic component props, including editor instance, component mappings, and optional value override.\n\nLANGUAGE: ts\nCODE:\n```\ninterface PlateStaticProps extends React.HTMLAttributes<HTMLDivElement> {\n  /** The Slate editor instance. */\n  editor: SlateEditor;\n\n  /** Node components used to render each plugin/node type. */\n  components: NodeComponents;\n\n  /** Optional new `Value` to override `editor.children`. */\n  value?: Descendant[];\n\n  /** Inline styling. */\n  style?: React.CSSProperties;\n\n  /** className or other <div> attributes also supported. */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Block Background Color Transformation\nDESCRIPTION: Added transform function to set background color on blocks rather than just text marks.\n\nLANGUAGE: typescript\nCODE:\n```\nsetBlockBackgroundColor\n```\n\n----------------------------------------\n\nTITLE: Creating a Slate Editor for PlateStatic in TypeScript\nDESCRIPTION: Creates a static Slate editor instance with plugins and initial value, which can be used with PlateStatic for server-side rendering.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSlateEditor } from '@udecode/plate';\n// Import your desired plugins\n\nconst editor = createSlateEditor({\n  plugins: [\n    // your plugin list: e.g. headings, images, markdown, etc.\n  ],\n  value: [\n    {\n      type: 'p',\n      children: [{ text: 'Hello from a static Plate editor!' }],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Components with Plate Editor Options\nDESCRIPTION: Alternative approach to register components by specifying them for each plugin key using the override.components option in createPlateEditor. This method allows centralized component registration.\n\nLANGUAGE: tsx\nCODE:\n```\nconst editor = createPlateEditor({\n  plugins: [ParagraphPlugin, LinkPlugin],\n  override: {\n    components: {\n      [ParagraphPlugin.key]: ParagraphElement,\n      [LinkPlugin.key]: LinkElement,\n      // ...other components\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Selection and Typing in Playwright\nDESCRIPTION: Code to click at a specific path to focus the editor, set the selection to a specific point, and then type text at that position. This demonstrates a common user interaction pattern.\n\nLANGUAGE: ts\nCODE:\n```\n// Click the first paragraph to focus the editor \nawait clickAtPath(page, editorHandle, [0]);\n\nawait setSelection(page, editorHandle, {\n  path: [0, 0],\n  offset: 2,\n});\n\nawait page.keyboard.type('Hello world!');\n```\n\n----------------------------------------\n\nTITLE: Adding Minimal Editor to a Remix project\nDESCRIPTION: Command to add the Minimal Editor components to your Remix project. This adds a basic editor page in app/editor along with necessary components in components/plate-ui.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor-basic\n```\n\n----------------------------------------\n\nTITLE: Getting DOM Node for Slate Node in Playwright\nDESCRIPTION: Code to get an ElementHandle for the DOM node corresponding to a Slate node at a specific path, allowing for DOM-level operations like hover.\n\nLANGUAGE: ts\nCODE:\n```\nconst firstNodeEl = await getDOMNodeByPath(page, elementHandle, [0]);\nawait firstNodeEl.hover();\n```\n\n----------------------------------------\n\nTITLE: Adding Plate Components to Project\nDESCRIPTION: CLI command to add Plate components to your components/plate-ui directory. This populates your project with the necessary UI components for Plate.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add -r plate\n```\n\n----------------------------------------\n\nTITLE: Getting Plate Editor Handle in Playwright Test\nDESCRIPTION: Code to get a handle to the Plate editor instance in a Playwright test. This is a fundamental step before interacting with the editor in tests.\n\nLANGUAGE: ts\nCODE:\n```\nconst editorHandle = await getEditorHandle(page);\n```\n\n----------------------------------------\n\nTITLE: QueryMode Usage Example in Editor API\nDESCRIPTION: Illustrates the three query modes (all, highest, lowest) with a practical example showing how each mode returns different nodes in a document hierarchy.\n\nLANGUAGE: typescript\nCODE:\n```\n// Given this structure:\n// - blockquote (matches)\n//   - paragraph (matches)\n//     - text\n\n// mode: 'all' returns both blockquote and paragraph\neditor.api.nodes({ match: { type: ['blockquote', 'paragraph'] }, mode: 'all' })\n\n// mode: 'highest' returns only blockquote\neditor.api.nodes({ match: { type: ['blockquote', 'paragraph'] }, mode: 'highest' })\n\n// mode: 'lowest' returns only paragraph\neditor.api.nodes({ match: { type: ['blockquote', 'paragraph'] }, mode: 'lowest' })\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Variables Usage in components.json\nDESCRIPTION: Determines whether to use CSS variables or Tailwind utility classes for theming. Cannot be changed after initialization.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"cssVariables\": `true` | `false`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Plugin Configuration with Shortcuts in TypeScript\nDESCRIPTION: Demonstrates the new approach to implementing keyboard shortcuts using the shortcuts property with multiple configurable shortcuts per plugin.\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ParagraphPlugin = createPlatePlugin({\n  key: 'p',\n  node: { isElement: true },\n}).extend({ editor, type }) => ({\n  shortcuts: {\n    toggleParagraph: {\n      handler: () => {\n        editor.tf.toggle.block({ type });\n      },\n      keys: [\n        [Key.Mod, Key.Alt, '0'],\n        [Key.Mod, Key.Shift, '0'],\n      ],\n      preventDefault: true,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Config Path in components.json\nDESCRIPTION: Specifies the path to your Tailwind configuration file, supporting both JavaScript and TypeScript formats.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minor Change in Version 3.2.0\nDESCRIPTION: Changelog entry noting the update of slate dependencies and peerDependencies to version 0.66.*.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#995](https://github.com/udecode/plate/pull/995) [`58387c6d`](https://github.com/udecode/plate/commit/58387c6d34e86be7880999b40a9105b6178f4ce4) Thanks [@dylans](https://github.com/dylans)! - update slate dependencies and peerDependencies to 0.66.*\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Accent Elements\nDESCRIPTION: CSS variables defining the accent colors used for interactive elements like hover effects on dropdown menu items and select items.\n\nLANGUAGE: css\nCODE:\n```\n--accent: 210 40% 96.1%;\n--accent-foreground: 222.2 47.4% 11.2%;\n```\n\n----------------------------------------\n\nTITLE: Signature changes for toggle methods\nDESCRIPTION: Examples of how method signatures for toggle operations have changed, using more direct parameter passing instead of option objects.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\neditor.tf.toggle.block({ type, ...options })\neditor.tf.toggle.mark({ key, clear })\n\n// After\neditor.tf.toggleBlock(type, options)\neditor.tf.toggleMark(key, { remove: clear })\n```\n\n----------------------------------------\n\nTITLE: Installing the Trailing Block Plugin for Plate\nDESCRIPTION: Command to install the trailing block plugin package for Plate editor via npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-trailing-block\n```\n\n----------------------------------------\n\nTITLE: Dependency Addition in Version 1.1.6\nDESCRIPTION: Changelog entry documenting the addition of slate-history as a peer dependency.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#918](https://github.com/udecode/plate/pull/918) [`7d045d8d`](https://github.com/udecode/plate/commit/7d045d8db39515d4574c5313cc97287486c5866b) Thanks [@zbeyens](https://github.com/zbeyens)! - add `slate-history` as a peerDep\n```\n\n----------------------------------------\n\nTITLE: Dependency Changes in Version 30.5.3\nDESCRIPTION: Changelog entry noting the movement of @udecode/plate-common to peer dependencies to resolve multiple instance installation bug.\n\nLANGUAGE: markdown\nCODE:\n```\n- [`4cbed7159`](https://github.com/udecode/plate/commit/4cbed7159d51f7427051686e45bcf2a8899aeede) by [@zbeyens](https://github.com/zbeyens) – Move `@udecode/plate-common` to peerDeps to fix a bug when multiple instances were installed\n```\n\n----------------------------------------\n\nTITLE: Dependency Change in Version 30.5.3\nDESCRIPTION: This change moves @udecode/plate-common to peer dependencies to fix a bug when multiple instances were installed.\n\nLANGUAGE: markdown\nCODE:\n```\n- [`4cbed7159`](https://github.com/udecode/plate/commit/4cbed7159d51f7427051686e45bcf2a8899aeede) by [@zbeyens](https://github.com/zbeyens) – Move `@udecode/plate-common` to peerDeps to fix a bug when multiple instances were installed\n```\n\n----------------------------------------\n\nTITLE: Major Change in Version 37.0.0\nDESCRIPTION: Changelog entry documenting the renaming of 'createHighlightPlugin' to 'HighlightPlugin' in pull request #3420.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3420](https://github.com/udecode/plate/pull/3420) by [@zbeyens](https://github.com/zbeyens) –\n  - `createHighlightPlugin` -> `HighlightPlugin`\n```\n\n----------------------------------------\n\nTITLE: Setting UploadThing API Key in Environment Variables\nDESCRIPTION: Configuration for the UploadThing integration, showing how to set up the required environment variable for authentication with the UploadThing service.\n\nLANGUAGE: bash\nCODE:\n```\nUPLOADTHING_TOKEN=xxx\n```\n\n----------------------------------------\n\nTITLE: New Plugins Addition for Plate Tag Package\nDESCRIPTION: Introduction of two new plugins: TagPlugin and MultiSelectPlugin. These plugins were added in pull request #3809 by zbeyens.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3809](https://github.com/udecode/plate/pull/3809) by [@zbeyens](https://github.com/zbeyens) –\n  - New plugins: `TagPlugin`, `MultiSelectPlugin`\n```\n\n----------------------------------------\n\nTITLE: Jest Configuration with Module Name Mapping\nDESCRIPTION: A Jest configuration example that sets up moduleNameMapper to resolve Plate package imports correctly during testing.\n\nLANGUAGE: js\nCODE:\n```\n// jest.config.js\nmodule.exports = {\n  // ...\n  moduleNameMapper: {\n    '^@udecode/plate/react$': '<rootDir>/node_modules/@udecode/plate/dist/react',\n    '^@udecode/plate-core/react$': '<rootDir>/node_modules/@udecode/plate-core/dist/react',\n    // ...\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for useSelectEditorCombobox in Plate Tag Plugin\nDESCRIPTION: A patch that fixes an infinite re-rendering issue in the useSelectEditorCombobox component. The fix was implemented by zbeyens in commit 796e41d.\n\nLANGUAGE: markdown\nCODE:\n```\n- [`796e41d`](https://github.com/udecode/plate/commit/796e41dde88b4db1527aa8341f9b81f47dcaafd9) by [@zbeyens](https://github.com/zbeyens) – Fix useSelectEditorCombobox infinite re-rendering\n```\n\n----------------------------------------\n\nTITLE: Using createPlateEditor with Plugin Type Inference in TypeScript\nDESCRIPTION: Example showing how the new createPlateEditor can automatically infer plugin configurations from the options passed to it, including both core and custom plugins like TablePlugin.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({ plugins: [TablePlugin] });\neditor.api.htmlReact.serialize(); // core plugin is automatically inferred\neditor.tf.insert.tableRow(); // table plugin is automatically inferred\n```\n\n----------------------------------------\n\nTITLE: Using createPlateEditor with Plugin Type Inference in TypeScript\nDESCRIPTION: Example showing how the new createPlateEditor can automatically infer plugin configurations from the options passed to it, including both core and custom plugins like TablePlugin.\n\nLANGUAGE: typescript\nCODE:\n```\nconst editor = createPlateEditor({ plugins: [TablePlugin] });\neditor.api.htmlReact.serialize(); // core plugin is automatically inferred\neditor.tf.insert.tableRow(); // table plugin is automatically inferred\n```\n\n----------------------------------------\n\nTITLE: Media Plugin Interface Definition\nDESCRIPTION: Interface definition for the MediaPlugin with optional methods for URL validation, URL transformation, and an array of rules for matching URLs to rendering components.\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MediaPlugin {\n  isUrl?: (text: string) => boolean;\n\n  /** Transforms the url. */\n  transformUrl?: (url: string) => string;\n\n  /**\n   * List of rules. The first rule that matches the url will be used, i.e. its\n   * component will be used to render the media. Used by `MediaEmbed`.\n   */\n  rules?: MediaPluginRule[];\n}\n```\n\n----------------------------------------\n\nTITLE: Version Update Information in Markdown\nDESCRIPTION: Release notes for version 0.2.0 of the @udecode/cmdk package, documenting a minor version change that upgraded dependencies to their latest versions. The change was made through pull request #4019 by GitHub user zbeyens.\n\nLANGUAGE: markdown\nCODE:\n```\n# @udecode/cmdk\n\n## 0.2.0\n\n### Minor Changes\n\n- [#4019](https://github.com/udecode/plate/pull/4019) by [@zbeyens](https://github.com/zbeyens) – Upgrade dependencies to latest\n```\n\n----------------------------------------\n\nTITLE: Converting Size Units to Numberless Format\nDESCRIPTION: Utility function that was added to remove units from size values, making them easier to manipulate programmatically.\n\nLANGUAGE: typescript\nCODE:\n```\ntoUnitLess\n```\n\n----------------------------------------\n\nTITLE: Installing Plate List Plugin\nDESCRIPTION: This command installs the Plate List plugin package which provides traditional HTML-compliant list functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-list\n```\n\n----------------------------------------\n\nTITLE: Configuring EmojiPlugin with Emoji Mart Data in TypeScript\nDESCRIPTION: Example showing how to configure the EmojiPlugin with emoji-mart data. This is necessary after version 42.1.0 to properly load emoji data. The code demonstrates importing emoji data from @emoji-mart/data and configuring the plugin.\n\nLANGUAGE: typescript\nCODE:\n```\nEmojiPlugin.configure({ options: { data: emojiMartData as any } });\n```\n\n----------------------------------------\n\nTITLE: Plugin Keys Export in Version 33.0.3\nDESCRIPTION: This change from pull request #3194 adds the ability to export plugin keys, making it easier to access plugin options by key.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3194](https://github.com/udecode/plate/pull/3194) by [@KorovinQuantori](https://github.com/KorovinQuantori) – Export plugin keys for easier access plugin options by key\n```\n\n----------------------------------------\n\nTITLE: Wrapping Paste Deserialization for Error Prevention\nDESCRIPTION: A patch that wraps the paste deserialization process in a withoutNormalization block to prevent errors during paste operations. This ensures smoother handling of pasted content.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#860](https://github.com/udecode/slate-plugins/pull/860) [`db6371c3`](https://github.com/udecode/slate-plugins/commit/db6371c36e389cb03901a119194dd93652134554) Thanks [@dylans](https://github.com/dylans)! - wrap paste deserialization in withoutNormalization block to prevent paste errors\n```\n\n----------------------------------------\n\nTITLE: Rendering Hundreds Editors Component Demo in JSX\nDESCRIPTION: A simple component rendering that uses ComponentPreview to demonstrate the hundreds-editors-demo component. This is typically used in documentation to showcase component functionality with live examples.\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentPreview name=\"hundreds-editors-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Fix for SVG Elements in HTML Deserialization in v11.2.1\nDESCRIPTION: Patch to fix runtime errors that occur when deserialized HTML contains SVG elements.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1566](https://github.com/udecode/plate/pull/1566) by [@armedi](https://github.com/armedi) – Fix runtime error when deserialized html contains svg element\n```\n\n----------------------------------------\n\nTITLE: Configuring Path Aliases in tsconfig.json\nDESCRIPTION: Sets up path aliases in the TypeScript configuration file to enable import shortcuts, with the base URL set to the root directory.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./\"] \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing Base Plugin in Version 38.0.1\nDESCRIPTION: Change from pull request #3526 that prefixes the base plugin with 'Base' for better naming clarity.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#3526](https://github.com/udecode/plate/pull/3526) by [@zbeyens](https://github.com/zbeyens) – Prefix base plugin with `Base`\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Break Plugin\nDESCRIPTION: Command to install the plate-break package using npm, which provides the Exit Break functionality.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-break\n```\n\n----------------------------------------\n\nTITLE: Code-Block Configuration in Version 4.4.0\nDESCRIPTION: This change from pull request #1090 adds configuration options for code-block syntax highlighting.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1090](https://github.com/udecode/plate/pull/1090) [`7c32d4ef`](https://github.com/udecode/plate/commit/7c32d4efc0e84f6e2878473a3dd0efad3740ba9e) Thanks [@dylans](https://github.com/dylans)! - Add configuration options for code-block syntax highlighting\n```\n\n----------------------------------------\n\nTITLE: Configuring Lib Functions Alias in components.json\nDESCRIPTION: Sets the import alias for library functions such as format-date or generate-id.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliases\": {\n    \"lib\": \"@/lib\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Slate-React Support Update in Version 24.4.0\nDESCRIPTION: Minor change from pull request #2675 adding support for slate-react version 0.99.0.\n\nLANGUAGE: markdown\nCODE:\n```\n- [#2675](https://github.com/udecode/plate/pull/2675) by [@zbeyens](https://github.com/zbeyens) – Support slate-react 0.99.0\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Element Metadata in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for a Tag element component in the Plate project. It includes the title and documentation routing information.\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tag\ndocs:\n  - route: /docs/components/tag-element\n    title: Tag Element\n---\n```\n\n----------------------------------------\n\nTITLE: Exporting Server Bundle Modules in TypeScript\nDESCRIPTION: A TypeScript file that serves as the entry point for the server bundle, exporting shared components and server-specific implementations if needed.\n\nLANGUAGE: typescript\nCODE:\n```\nexport * from './shared/index';\nexport * from './server/index'; // If needed\n```\n\n----------------------------------------\n\nTITLE: Migrating event handlers to the handlers property in plugins\nDESCRIPTION: Shows how to migrate from directly specifying handlers on plugins to using the handlers property.\n\nLANGUAGE: ts\nCODE:\n```\n// Before\nonDrop: handler;\n\n// After\nhandlers: {\n  onDrop: handler;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Package with Generator Script\nDESCRIPTION: Commands to generate a new package using the project's package generator and build it.\n\nLANGUAGE: bash\nCODE:\n```\nyarn gen:package\n\nyarn install\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Displaying Single Commit Reference in Markdown\nDESCRIPTION: Markdown syntax showing a single commit reference for version 1.0.0-next.26. This snippet demonstrates the format used when only one commit is referenced for a particular update.\n\nLANGUAGE: markdown\nCODE:\n```\n[`201a7993`](https://github.com/udecode/slate-plugins/commit/201a799342ff88405e120182d8554e70b726beea)\n```\n\n----------------------------------------\n\nTITLE: Running ESLint for Code Linting\nDESCRIPTION: Commands to run ESLint for checking code quality, with an option to automatically fix issues.\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# autofix with:\nyarn lint:fix\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Package\nDESCRIPTION: Command to build only the plate-core package using Turborepo's filtering capability.\n\nLANGUAGE: bash\nCODE:\n```\nturbo --filter=@udecode/plate-core build\n```\n\n----------------------------------------\n\nTITLE: Using CLI in a Monorepo Environment\nDESCRIPTION: Commands demonstrating how to use the Plate UI CLI in a monorepo setup by specifying the workspace path with the -c option.\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest init plate -c ./apps/www\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx shadcx@latest add plate/editor -c ./apps/www\n```\n\n----------------------------------------\n\nTITLE: Migrating from Plate to PlateContent in 24.0.0\nDESCRIPTION: Example of how to migrate from the old Plate component structure to the new structure in version 24.0.0. Shows both the before and after usage patterns where Plate was renamed to PlateContent and PlateProvider to Plate.\n\nLANGUAGE: tsx\nCODE:\n```\n// Before\n<Plate />\n// or\n<PlateProvider>\n  <Plate />\n</PlateProvider>\n\n// After\n<Plate>\n  <PlateContent />\n</Plate>\n```\n\n----------------------------------------\n\nTITLE: Displaying Additional Commit References in Markdown\nDESCRIPTION: Markdown syntax used to display another set of commit references with hyperlinks. This snippet shows three different commit references for version 1.0.0-next.30 of the project.\n\nLANGUAGE: markdown\nCODE:\n```\n[`33605a49`](https://github.com/udecode/slate-plugins/commit/33605a495ccc3fd9b4f6cfdaf2eb0e6e59bd7a67), [`28f30c8a`](https://github.com/udecode/slate-plugins/commit/28f30c8a6b0a2d245d6f6403c8399f2e59d98b92), [`75e6d25d`](https://github.com/udecode/slate-plugins/commit/75e6d25de0f9cf2487adecff54c2993ebc795aa0)\n```\n\n----------------------------------------\n\nTITLE: Fixing HTML Deserialization in Text Formatting Plugins\nDESCRIPTION: Bug fix for HTML deserialization of strikethrough, subscript, and superscript plugins. This change addresses improper HTML element handling during deserialization.\n\nLANGUAGE: markdown\nCODE:\n```\n[#726](https://github.com/udecode/slate-plugins/pull/726) [`abe34bfa`](https://github.com/udecode/slate-plugins/commit/abe34bfa83265a9404ed911e03ba455dfa01a769) Thanks [@cawabunga](https://github.com/cawabunga)! - fix: HTML deserialization of createStrikethroughPlugin, createSubscriptPlugin, createSuperscriptPlugin\n```\n\n----------------------------------------\n\nTITLE: Displaying Commit References in Markdown\nDESCRIPTION: Markdown syntax used to display commit references with hyperlinks to the GitHub repository. Each reference includes the commit hash and links to the specific commit in the udecode/slate-plugins repository.\n\nLANGUAGE: markdown\nCODE:\n```\n[`7cbd7bd9`](https://github.com/udecode/slate-plugins/commit/7cbd7bd95b64e06fde38dcd68935984de8f3a82f), [`806e1632`](https://github.com/udecode/slate-plugins/commit/806e16322e655802822079d8540a6983a9dfb06e)\n```\n\n----------------------------------------\n\nTITLE: Installing plate-normalizers Package\nDESCRIPTION: Command to install the @udecode/plate-normalizers package which provides the NormalizeTypesPlugin functionality for forced layouts.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-normalizers\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Primary Button\nDESCRIPTION: CSS variables defining the background and foreground colors for primary button variants.\n\nLANGUAGE: css\nCODE:\n```\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of TabbablePlugin in Plate\nDESCRIPTION: Demonstrates how to import and include the TabbablePlugin in the Plate editor plugins array.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TabbablePlugin } from '@udecode/plate-tabbable/react';\n\nconst plugins = [\n  // ...otherPlugins,\n  TabbablePlugin,\n];\n```\n\n----------------------------------------\n\nTITLE: Table Plugin Option Renaming\nDESCRIPTION: Breaking change in the TablePlugin where the disableUnsetSingleColSize option has been renamed and inverted into enableUnsetSingleColSize in version 20.0.0.\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\ncreateTablePlugin({\n  disableUnsetSingleColSize: true // or false\n})\n\n// After\ncreateTablePlugin({\n  // if using disableUnsetSingleColSize: true, the option can be removed\n  // if using disableUnsetSingleColSize: false, use:\n  enableUnsetSingleColSize: true\n})\n```\n\n----------------------------------------\n\nTITLE: CSS Variables for Border Radius\nDESCRIPTION: CSS variable defining the default border radius applied to cards, inputs, and buttons throughout the application.\n\nLANGUAGE: css\nCODE:\n```\n--radius: 0.5rem;\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git\nDESCRIPTION: Command to clone the Plate repository from GitHub using SSH authentication.\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:udecode/plate.git\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Math Plugin\nDESCRIPTION: Command to install the @udecode/plate-math package which provides equation functionality for the Plate editor.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-math\n```\n\n----------------------------------------\n\nTITLE: Installing Plate Markdown Package with npm\nDESCRIPTION: Command to install the @udecode/plate-markdown package using npm.\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @udecode/plate-markdown\n```\n\n----------------------------------------\n\nTITLE: Migrating from prismjs to highlight.js in CodeBlockPlugin\nDESCRIPTION: Code snippet showing how to configure CodeBlockPlugin with highlight.js and lowlight after the migration from prismjs in version 46.0.0.\n\nLANGUAGE: tsx\nCODE:\n```\nimport { all, createLowlight } from 'lowlight';\n\nconst lowlight = createLowlight(all);\n\nCodeBlockPlugin.configure({\n  options: {\n    lowlight,\n  },\n});\n```"
  }
]