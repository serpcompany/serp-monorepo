[
  {
    "owner": "ros2",
    "repo": "ros2_documentation",
    "content": "TITLE: Sourcing ROS 2 workspace on Linux and macOS\nDESCRIPTION: Commands to source the ROS 2 setup files in Linux and macOS environments, ensuring environment variables are set for running ROS 2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n. <path to ROS 2 install space>/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS2 Package using Command Line\nDESCRIPTION: This command creates a basic ROS 2 package in the workspace. It requires specifying the license and dependencies.  The package name and dependencies should be replaced with desired values. This command is typically run in the 'src' directory of a ROS 2 workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --license Apache-2.0 <pkg-name> --dependencies [deps]\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Workspace with colcon (Console)\nDESCRIPTION: Command to build the entire ROS 2 workspace containing the newly created package and its integrated launch files using the `colcon build` tool.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncolcon build\n```\n\n----------------------------------------\n\nTITLE: Echoing a ROS2 Topic to the Console - Console\nDESCRIPTION: This command subscribes to the '/synthetic' topic and prints incoming message data to the console using the ROS2 CLI. The 'ros2 topic echo' command displays each message received on the specified topic, making it useful for debugging or verifying live or replayed data flows. It requires an active ROS2 environment with the target topic available, such as during or after a bag playback session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /synthetic\n```\n\n----------------------------------------\n\nTITLE: Echoing ROS 2 Messages from a Topic via Command Line\nDESCRIPTION: This command echoes messages received on the '/chatter' topic using the 'ros2 topic echo' sub-command. It subscribes to the specified topic and prints any received messages to the console.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Command-Line-Tools.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /chatter\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with colcon\nDESCRIPTION: These commands use the `colcon` build tool to compile and install the specified ROS 2 package (`py_pubsub`). The Linux and macOS commands are similar, while the Windows command includes the `--merge-install` option.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_16\n\nLANGUAGE: Console\nCODE:\n```\n$ colcon build --packages-select py_pubsub\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ colcon build --merge-install --packages-select py_pubsub\n```\n\n----------------------------------------\n\nTITLE: Configuring 'CMakeLists.txt' for Interface Generation\nDESCRIPTION: Adds commands to generate language-specific code from custom message and service definitions using 'rosidl_generate_interfaces' and dependencies like 'geometry_msgs'. Ensures proper build configuration for ROS2 message interfaces.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(geometry_msgs REQUIRED)\nfind_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  \"msg/Num.msg\"\n  \"msg/Sphere.msg\"\n  \"srv/AddThreeInts.srv\"\n  DEPENDENCIES geometry_msgs\n)\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Workspace with colcon - Cross-Platform Shell\nDESCRIPTION: Builds all packages located in the workspace source directory using colcon build tool. On Linux and macOS, simply runs 'colcon build'. On Windows, adds '--merge-install' to combine install paths due to path length limitations. Outputs build progress and summary. Requires colcon installed. Produces 'build', 'install', and 'log' directories alongside 'src'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\nStarting >>> turtlesim\nFinished <<< turtlesim [5.49s]\n\nSummary: 1 package finished [5.58s]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\nStarting >>> turtlesim\nFinished <<< turtlesim [5.49s]\n\nSummary: 1 package finished [5.58s]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --merge-install\nStarting >>> turtlesim\nFinished <<< turtlesim [5.49s]\n\nSummary: 1 package finished [5.58s]\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimal Publisher Node in ROS2 Using Python\nDESCRIPTION: This Python snippet defines a minimal ROS2 publisher node using the rclpy library. It declares a class MinimalPublisher inheriting from Node, initializing a publisher on topic 'topic' with String messages, and a timer to call a callback every 0.5 seconds. The callback publishes 'Hello World' messages with an increasing counter. The main function initializes rclpy, creates the node, and spins it to process callbacks until shutdown or interruption.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom std_msgs.msg import String\n\n\nclass MinimalPublisher(Node):\n\n    def __init__(self):\n        super().__init__('minimal_publisher')\n        self.publisher_ = self.create_publisher(String, 'topic', 10)\n        timer_period = 0.5  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n\n    def timer_callback(self):\n        msg = String()\n        msg.data = 'Hello World: %d' % self.i\n        self.publisher_.publish(msg)\n        self.get_logger().info('Publishing: \"%s\"' % msg.data)\n        self.i += 1\n\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            minimal_publisher = MinimalPublisher()\n\n            rclpy.spin(minimal_publisher)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Complete updated setup.py using setuptools with console_scripts entry point in Python\nDESCRIPTION: Provides the full content of setup.py after migration, showing use of setuptools.setup() with package metadata, dependencies, data files, maintainer info, and the crucial console_scripts entry point enabling ROS 2 executable management.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom setuptools import setup\n\npackage_name = 'talker_py'\n\nsetup(\n    name=package_name,\n    version='1.0.0',\n    packages=['talker_py'],\n    package_dir={'': 'src'},\n    install_requires=['setuptools'],\n    zip_safe=True,\n    data_files=[\n        ('share/ament_index/resource_index/packages',\n            ['resource/' + package_name]),\n        ('share/' + package_name, ['package.xml']),\n    ],\n    maintainer='Brian Gerkey',\n    maintainer_email='gerkey@example.com',\n    description='The talker_py package',\n    license='BSD',\n    entry_points={\n        'console_scripts': [\n            'talker_py_node = talker_py:main',\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Running turtlesim_node with ros2 run\nDESCRIPTION: This command demonstrates running the `turtlesim_node` executable from the `turtlesim` package. It opens the turtlesim window. This command demonstrates the basic use of `ros2 run` command and prerequisites include the installation of ROS 2 and the `turtlesim` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Implementing a tf2 Frame Broadcaster Node with ROS 2 (C++)\nDESCRIPTION: This C++ snippet defines the FramePublisher class, a ROS 2 node that broadcasts the pose of a specified turtle as a tf2 transform, subscribing to the turtle's pose topic and translating 2D pose data to a 3D transformation. Dependencies include ROS 2, geometry_msgs, tf2_ros, tf2, and turtlesim_msgs. Key parameters are 'turtlename' (the target turtle, default 'turtle'), and the expected input is turtlesim_msgs::msg::Pose messages. The broadcaster publishes transformations with correctly set frame and child_frame IDs, applying translation in x and y, zero z, and quaternion rotation about the z-axis. Limitations: only 2D poses are handled, with z translation and roll/pitch fixed to zero.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <functional>\n#include <memory>\n#include <sstream>\n#include <string>\n\n#include \"geometry_msgs/msg/transform_stamped.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2/LinearMath/Quaternion.hpp\"\n#include \"tf2_ros/transform_broadcaster.h\"\n#include \"turtlesim_msgs/msg/pose.hpp\"\n\nclass FramePublisher : public rclcpp::Node\n{\npublic:\n  FramePublisher()\n  : Node(\"turtle_tf2_frame_publisher\")\n  {\n    // Declare and acquire `turtlename` parameter\n    turtlename_ = this->declare_parameter<std::string>(\"turtlename\", \"turtle\");\n\n    // Initialize the transform broadcaster\n    tf_broadcaster_ =\n      std::make_unique<tf2_ros::TransformBroadcaster>(*this);\n\n    // Subscribe to a turtle{1}{2}/pose topic and call handle_turtle_pose\n    // callback function on each message\n    std::ostringstream stream;\n    stream << \"/\" << turtlename_.c_str() << \"/pose\";\n    std::string topic_name = stream.str();\n\n    auto handle_turtle_pose = [this](const std::shared_ptr<turtlesim_msgs::msg::Pose> msg){\n        geometry_msgs::msg::TransformStamped t;\n\n        // Read message content and assign it to\n        // corresponding tf variables\n        t.header.stamp = this->get_clock()->now();\n        t.header.frame_id = \"world\";\n        t.child_frame_id = turtlename_.c_str();\n\n        // Turtle only exists in 2D, thus we get x and y translation\n        // coordinates from the message and set the z coordinate to 0\n        t.transform.translation.x = msg->x;\n        t.transform.translation.y = msg->y;\n        t.transform.translation.z = 0.0;\n\n        // For the same reason, turtle can only rotate around one axis\n        // and this why we set rotation in x and y to 0 and obtain\n        // rotation in z axis from the message\n        tf2::Quaternion q;\n        q.setRPY(0, 0, msg->theta);\n        t.transform.rotation.x = q.x();\n        t.transform.rotation.y = q.y();\n        t.transform.rotation.z = q.z();\n        t.transform.rotation.w = q.w();\n\n        // Send the transformation\n        tf_broadcaster_->sendTransform(t);\n    };\n    subscription_ = this->create_subscription<turtlesim_msgs::msg::Pose>(\n      topic_name, 10,\n      handle_turtle_pose);\n  }\n\nprivate:\n  rclcpp::Subscription<turtlesim_msgs::msg::Pose>::SharedPtr subscription_;\n  std::unique_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;\n  std::string turtlename_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<FramePublisher>());\n  rclcpp::shutdown();\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a tf2 Listener Node in ROS2 Using C++\nDESCRIPTION: Defines the FrameListener node class which subscribes to tf2 transform updates and issues velocity commands to a turtle in the turtlesim simulator. The node declares a parameter for the target frame, initializes a tf2_ros::Buffer and TransformListener to receive frame transformations, and creates a service client to spawn an additional turtle. It contains a timer callback that checks for the transform between the target turtle and the newly spawned turtle, computes angular and linear velocity commands based on the relative transform, and publishes commands to move the follower turtle. The node also handles asynchronous service calls to spawn the follower turtle at specific coordinates, and robustly manages the lifecycle of transforms and service availability.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <functional>\n#include <memory>\n#include <string>\n\n#include \"geometry_msgs/msg/transform_stamped.hpp\"\n#include \"geometry_msgs/msg/twist.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2/exceptions.hpp\"\n#include \"tf2_ros/transform_listener.h\"\n#include \"tf2_ros/buffer.h\"\n#include \"turtlesim_msgs/srv/spawn.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass FrameListener : public rclcpp::Node\n{\npublic:\n  FrameListener()\n  : Node(\"turtle_tf2_frame_listener\"),\n    turtle_spawning_service_ready_(false),\n    turtle_spawned_(false)\n  {\n    // Declare and acquire `target_frame` parameter\n    target_frame_ = this->declare_parameter<std::string>(\"target_frame\", \"turtle1\");\n\n    tf_buffer_ =\n      std::make_unique<tf2_ros::Buffer>(this->get_clock());\n    tf_listener_ =\n      std::make_shared<tf2_ros::TransformListener>(*tf_buffer_);\n\n    // Create a client to spawn a turtle\n    spawner_ =\n      this->create_client<turtlesim_msgs::srv::Spawn>(\"spawn\");\n\n    // Create turtle2 velocity publisher\n    publisher_ =\n      this->create_publisher<geometry_msgs::msg::Twist>(\"turtle2/cmd_vel\", 1);\n\n    // Call on_timer function every second\n    timer_ = this->create_wall_timer(\n      1s, [this]() {return this->on_timer();});\n  }\n\nprivate:\n  void on_timer()\n  {\n    // Store frame names in variables that will be used to\n    // compute transformations\n    std::string fromFrameRel = target_frame_.c_str();\n    std::string toFrameRel = \"turtle2\";\n\n    if (turtle_spawning_service_ready_) {\n      if (turtle_spawned_) {\n        geometry_msgs::msg::TransformStamped t;\n\n        // Look up for the transformation between target_frame and turtle2 frames\n        // and send velocity commands for turtle2 to reach target_frame\n        try {\n          t = tf_buffer_->lookupTransform(\n            toFrameRel, fromFrameRel,\n            tf2::TimePointZero);\n        } catch (const tf2::TransformException & ex) {\n          RCLCPP_INFO(\n            this->get_logger(), \"Could not transform %s to %s: %s\",\n            toFrameRel.c_str(), fromFrameRel.c_str(), ex.what());\n          return;\n        }\n\n        geometry_msgs::msg::Twist msg;\n\n        static const double scaleRotationRate = 1.0;\n        msg.angular.z = scaleRotationRate * atan2(\n          t.transform.translation.y,\n          t.transform.translation.x);\n\n        static const double scaleForwardSpeed = 0.5;\n        msg.linear.x = scaleForwardSpeed * sqrt(\n          pow(t.transform.translation.x, 2) +\n          pow(t.transform.translation.y, 2));\n\n        publisher_->publish(msg);\n      } else {\n        RCLCPP_INFO(this->get_logger(), \"Successfully spawned\");\n        turtle_spawned_ = true;\n      }\n    } else {\n      // Check if the service is ready\n      if (spawner_->service_is_ready()) {\n        // Initialize request with turtle name and coordinates\n        // Note that x, y and theta are defined as floats in turtlesim_msgs/srv/Spawn\n        auto request = std::make_shared<turtlesim_msgs::srv::Spawn::Request>();\n        request->x = 4.0;\n        request->y = 2.0;\n        request->theta = 0.0;\n        request->name = \"turtle2\";\n\n        // Call request\n        using ServiceResponseFuture =\n          rclcpp::Client<turtlesim_msgs::srv::Spawn>::SharedFuture;\n        auto response_received_callback = [this](ServiceResponseFuture future) {\n            auto result = future.get();\n            if (strcmp(result->name.c_str(), \"turtle2\") == 0) {\n              turtle_spawning_service_ready_ = true;\n            } else {\n              RCLCPP_ERROR(this->get_logger(), \"Service callback result mismatch\");\n            }\n          };\n        auto result = spawner_->async_send_request(request, response_received_callback);\n      } else {\n        RCLCPP_INFO(this->get_logger(), \"Service is not ready\");\n      }\n    }\n  }\n\n  // Boolean values to store the information\n  // if the service for spawning turtle is available\n  bool turtle_spawning_service_ready_;\n  // if the turtle was successfully spawned\n  bool turtle_spawned_;\n  rclcpp::Client<turtlesim_msgs::srv::Spawn>::SharedPtr spawner_{nullptr};\n  rclcpp::TimerBase::SharedPtr timer_{nullptr};\n  rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr publisher_{nullptr};\n  std::shared_ptr<tf2_ros::TransformListener> tf_listener_{nullptr};\n  std::unique_ptr<tf2_ros::Buffer> tf_buffer_;\n  std::string target_frame_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<FrameListener>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ROS2 Client Library (C++)\nDESCRIPTION: Initializes the ROS 2 C++ client library (`rclcpp`). This is a prerequisite for using any ROS 2 functionality within a C++ application. It takes command-line arguments, typically passed from the operating system, allowing ROS 2 nodes to process standard arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::init(argc, argv);\n```\n\n----------------------------------------\n\nTITLE: Getting ROS2 topic info\nDESCRIPTION: This command provides information about a specific topic, including its type, the number of publishers, and the number of subscribers.  This command is used to provide metadata about the topic, such as the message type and the connections to other nodes in the ROS graph.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic info /turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Launch File in Python Format - Python\nDESCRIPTION: This snippet shows a Python-based ROS 2 launch file leveraging the launch and launch_ros libraries to programmatically specify a system composed of two turtlesim_node nodes (each in a unique namespace) and a mimic node. Topic remapping is accomplished by passing remap dictionaries, and node configurations are implemented via class constructors. Prerequisites include Python 3, ROS 2, turtlesim, and launch_ros. File location: launch/turtlesim_mimic_launch.py. Inputs include Python dictionaries for node settings and remaps; output is a LaunchDescription object that spawns the three processes. Limitation: Python code must comply with ROS 2 launch Python API requirements.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim',\n            namespace='turtlesim1'\n        ),\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim',\n            namespace='turtlesim2'\n        ),\n        Node(\n            package='turtlesim',\n            executable='mimic',\n            name='mimic',\n            remappings=[\n                ('/input/pose', '/turtlesim1/turtle1/pose'),\n                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel')\n            ]\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Complete TF2 Message Filter Implementation in C++\nDESCRIPTION: Complete implementation of a ROS2 node that uses tf2_ros::MessageFilter to transform points between coordinate frames. It subscribes to PointStamped messages and transforms them to a target frame.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <memory>\n#include <string>\n\n#include \"geometry_msgs/msg/point_stamped.hpp\"\n#include \"message_filters/subscriber.h\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2_ros/buffer.h\"\n#include \"tf2_ros/create_timer_ros.h\"\n#include \"tf2_ros/message_filter.h\"\n#include \"tf2_ros/transform_listener.h\"\n#ifdef TF2_CPP_HEADERS\n  #include \"tf2_geometry_msgs/tf2_geometry_msgs.hpp\"\n#else\n  #include \"tf2_geometry_msgs/tf2_geometry_msgs.h\"\n#endif\n\nusing namespace std::chrono_literals;\n\nclass PoseDrawer : public rclcpp::Node\n{\npublic:\n  PoseDrawer()\n  : Node(\"turtle_tf2_pose_drawer\")\n  {\n    // Declare and acquire `target_frame` parameter\n    target_frame_ = this->declare_parameter<std::string>(\"target_frame\", \"turtle1\");\n\n    std::chrono::duration<int> buffer_timeout(1);\n\n    tf2_buffer_ = std::make_shared<tf2_ros::Buffer>(this->get_clock());\n    // Create the timer interface before call to waitForTransform,\n    // to avoid a tf2_ros::CreateTimerInterfaceException exception\n    auto timer_interface = std::make_shared<tf2_ros::CreateTimerROS>(\n      this->get_node_base_interface(),\n      this->get_node_timers_interface());\n    tf2_buffer_->setCreateTimerInterface(timer_interface);\n    tf2_listener_ =\n      std::make_shared<tf2_ros::TransformListener>(*tf2_buffer_);\n\n    point_sub_.subscribe(this, \"/turtle3/turtle_point_stamped\");\n    tf2_filter_ = std::make_shared<tf2_ros::MessageFilter<geometry_msgs::msg::PointStamped>>(\n      point_sub_, *tf2_buffer_, target_frame_, 100, this->get_node_logging_interface(),\n      this->get_node_clock_interface(), buffer_timeout);\n    // Register a callback with tf2_ros::MessageFilter to be called when transforms are available\n    tf2_filter_->registerCallback(&PoseDrawer::msgCallback, this);\n  }\n\nprivate:\n  void msgCallback(const geometry_msgs::msg::PointStamped::SharedPtr point_ptr)\n  {\n    geometry_msgs::msg::PointStamped point_out;\n    try {\n      tf2_buffer_->transform(*point_ptr, point_out, target_frame_);\n      RCLCPP_INFO(\n        this->get_logger(), \"Point of turtle3 in frame of turtle1: x:%f y:%f z:%f\\n\",\n        point_out.point.x,\n        point_out.point.y,\n        point_out.point.z);\n    } catch (const tf2::TransformException & ex) {\n      RCLCPP_WARN(\n        // Print exception which was caught\n        this->get_logger(), \"Failure %s\\n\", ex.what());\n    }\n  }\n\n  std::string target_frame_;\n  std::shared_ptr<tf2_ros::Buffer> tf2_buffer_;\n  std::shared_ptr<tf2_ros::TransformListener> tf2_listener_;\n  message_filters::Subscriber<geometry_msgs::msg::PointStamped> point_sub_;\n  std::shared_ptr<tf2_ros::MessageFilter<geometry_msgs::msg::PointStamped>> tf2_filter_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<PoseDrawer>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a ROS 2 C++ Subscriber Node\nDESCRIPTION: C++ code for a ROS 2 subscriber node that listens for String messages on a topic and logs received messages. It demonstrates the use of lambda functions for subscription callbacks.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n\nclass MinimalSubscriber : public rclcpp::Node\n{\npublic:\n  MinimalSubscriber()\n  : Node(\"minimal_subscriber\")\n  {\n    auto topic_callback =\n      [this](std_msgs::msg::String::UniquePtr msg) -> void {\n        RCLCPP_INFO(this->get_logger(), \"I heard: '%s'\", msg->data.c_str());\n      };\n    subscription_ =\n      this->create_subscription<std_msgs::msg::String>(\"topic\", 10, topic_callback);\n  }\n\nprivate:\n  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<MinimalSubscriber>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using rclcpp::NodeInterfaces (C++)\nDESCRIPTION: This snippet demonstrates the recommended way of accessing node information using `rclcpp::NodeInterfaces<>`. It defines a custom interface `MyNodeInterfaces` using `NodeBaseInterface` and `NodeLoggingInterface`, then creates `node_info` function that accepts the interfaces. The main function then creates `SimpleNode` and `LifecycleTalker` instances and passes them to `node_info` to print their names.  This method leverages the benefits of `NodeInterfaces` for a more compact, flexible, and type-safe approach.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Using-Node-Interfaces-Template-Class.rst#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#include <memory>\n#include <string>\n#include <thread>\n#include \"lifecycle_msgs/msg/transition.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"rclcpp_lifecycle/lifecycle_node.hpp\"\n#include \"rclcpp_lifecycle/lifecycle_publisher.hpp\"\n#include \"rclcpp/node_interfaces/node_interfaces.hpp\"\n\nusing MyNodeInterfaces =\n  rclcpp::node_interfaces::NodeInterfaces<rclcpp::node_interfaces::NodeBaseInterface, rclcpp::node_interfaces::NodeLoggingInterface>;\n\nvoid node_info(MyNodeInterfaces interfaces)\n{\n  auto base_interface = interfaces.get_node_base_interface();\n  auto logging_interface = interfaces.get_node_logging_interface();\n  RCLCPP_INFO(logging_interface->get_logger(), \"Node name: %s\", base_interface->get_name());\n}\n\nclass SimpleNode : public rclcpp::Node\n{\npublic:\n  SimpleNode(const std::string & node_name)\n  : Node(node_name)\n  {\n  }\n};\n\nclass LifecycleTalker : public rclcpp_lifecycle::LifecycleNode\n{\npublic:\n  explicit LifecycleTalker(const std::string & node_name, bool intra_process_comms = false)\n  : rclcpp_lifecycle::LifecycleNode(node_name,\n      rclcpp::NodeOptions().use_intra_process_comms(intra_process_comms))\n  {}\n}\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::executors::SingleThreadedExecutor exe;\n  auto node = std::make_shared<SimpleNode>(\"Simple_Node\");\n  auto lc_node = std::make_shared<LifecycleTalker>(\"Simple_LifeCycle_Node\");\n  node_info(*node);\n  node_info(*lc_node);\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for ROS 2 Container\nDESCRIPTION: This Dockerfile defines the instructions for building the ROS 2 development container. It uses a base ROS distribution image, sets the username and user ID, creates the user, installs sudo and python3-pip, and sets up the shell. Replace ROS_DISTRO with the appropriate ROS 2 distribution like 'rolling' or 'humble'. The USERNAME variable is used throughout the configuration. It also adds some optional steps and sets the user to the created user.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nFROM ros:ROS_DISTRO\nARG USERNAME=USERNAME\nARG USER_UID=1000\nARG USER_GID=$USER_UID\n\n# Delete user if it exists in container (e.g Ubuntu Noble: ubuntu)\nRUN if id -u $USER_UID ; then userdel `id -un $USER_UID` ; fi\n\n# Create the user\nRUN groupadd --gid $USER_GID $USERNAME \\\n    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\\n    #\n    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.\n    && apt-get update \\\n    && apt-get install -y sudo \\\n    && echo $USERNAME ALL=\\(root\\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \\\n    && chmod 0440 /etc/sudoers.d/$USERNAME\nRUN apt-get update && apt-get upgrade -y\nRUN apt-get install -y python3-pip\nENV SHELL /bin/bash\n\n# ********************************************************\n# * Anything else you want to do like clean up goes here *\n# ********************************************************\n\n# [Optional] Set the default user. Omit if you want to keep the default as root.\nUSER $USERNAME\nCMD [\"/bin/bash\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python ROS2 Package Metadata and Entry Points with setup.py\nDESCRIPTION: Defines the package metadata, dependencies, and console entry points for a ROS2 Python package using setuptools. It declares the package name, version, packages to include, data files related to ROS2 resource indexing, install requirements, license, maintainer contact information, description, and testing requirements. The 'entry_points' section defines console_scripts linking ROS2 nodes to executable command line names. This setup.py file must be kept consistent with package.xml metadata, and is critical for proper package installation and execution in ROS2 Python environments. Dependencies include 'setuptools' and 'pytest' for testing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import find_packages, setup\n\npackage_name = 'my_py_pkg'\n\nsetup(\n name=package_name,\n version='0.0.0',\n packages=find_packages(exclude=['test']),\n data_files=[\n     ('share/ament_index/resource_index/packages',\n             ['resource/' + package_name]),\n     ('share/' + package_name, ['package.xml']),\n   ],\n install_requires=['setuptools'],\n zip_safe=True,\n maintainer='TODO',\n maintainer_email='TODO',\n description='TODO: Package description',\n license='TODO: License declaration',\n tests_require=['pytest'],\n entry_points={\n     'console_scripts': [\n             'my_node = my_py_pkg.my_node:main'\n     ],\n   },\n)\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files (Linux/macOS)\nDESCRIPTION: Sources the generated Bash setup file located in the 'install' directory. This command updates the current shell environment, adding the built package and its dependencies to the ROS 2 paths, making them discoverable by ROS 2 tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n. install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Running Executable with ros2 run\nDESCRIPTION: This command launches an executable from a specified ROS 2 package. It requires the package name and executable name as arguments. The output is the execution of the specified ROS 2 node from the `turtlesim` package. Prerequisites include the installation of ROS 2 and the `turtlesim` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run <package_name> <executable_name>\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Package and Workspace Setup via Console Commands\nDESCRIPTION: This collection of console commands shows how to create a ROS 2 workspace directory structure and a Python package using the ROS 2 CLI. Commands include directory creation using platform-specific commands, initializing a ROS 2 Python package with dependencies, building the package using colcon with symlink install enabled, and sourcing the appropriate setup files to configure the ROS 2 environment. These steps are prerequisites before running the state publisher node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-py.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p second_ros2_ws/src\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_python --license Apache-2.0 urdf_tutorial_r2d2 --dependencies rclpy\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd second_ros2_ws\n$ colcon build --symlink-install --packages-select urdf_tutorial_r2d2\n```\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Subscription\nDESCRIPTION: This Python snippet shows the `create_subscription` method call within the node's constructor. It specifies the message type (`String`), the topic name ('topic'), the callback function to handle messages (`self.listener_callback`), and a quality of service (QoS) profile depth (10).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nself.subscription = self.create_subscription(\n    String,\n    'topic',\n    self.listener_callback,\n    10)\n```\n\n----------------------------------------\n\nTITLE: ROS2 Python Publisher Class\nDESCRIPTION: Defines a ROS2 publisher node in Python that publishes incremental numbers on 'topic' every 0.5 seconds. It uses rclpy for node creation, timer setup, and message publishing, with a focus on simple message broadcasting.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nfrom tutorial_interfaces.msg import Num\n\nclass MinimalPublisher(Node):\n    def __init__(self):\n        super().__init__('minimal_publisher')\n        self.publisher_ = self.create_publisher(Num, 'topic', 10)  # CHANGE\n        timer_period = 0.5  # seconds\n        self.timer = self.create_timer(timer_period, self.timer_callback)\n        self.i = 0\n\n    def timer_callback(self):\n        msg = Num()  # CHANGE\n        msg.num = self.i  # CHANGE\n        self.publisher_.publish(msg)\n        self.get_logger().info('Publishing: \"%d\"' % msg.num)  # CHANGE\n        self.i += 1\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            minimal_publisher = MinimalPublisher()\n            rclpy.spin(minimal_publisher)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: ROS2 Python Subscriber Node\nDESCRIPTION: Creates a ROS2 Python node that subscribes to 'Num' messages on 'topic'. The callback logs the received integer value. It uses rclpy for node creation, subscription setup, and spinning to process incoming messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nfrom tutorial_interfaces.msg import Num  # CHANGE\n\nclass MinimalSubscriber(Node):\n    def __init__(self):\n        super().__init__('minimal_subscriber')\n        self.subscription = self.create_subscription(\n            Num,  # CHANGE\n            'topic',\n            self.listener_callback,\n            10)\n        self.subscription  # prevent unused variable warning\n\n    def listener_callback(self, msg):\n        self.get_logger().info('I heard: \"%d\"' % msg.num)  # CHANGE\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            minimal_subscriber = MinimalSubscriber()\n            rclpy.spin(minimal_subscriber)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Message (ROS 2)\nDESCRIPTION: This code snippet illustrates the basic structure of a service message definition in ROS 2. It defines a request and a response part.  The example provides a simple message with a 32-bit unsigned integer request, and a 32-bit unsigned integer response. This serves as a fundamental building block for inter-node communication via remote procedure calls.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Services.rst#_snippet_0\n\nLANGUAGE: other\nCODE:\n```\nuint32 request\n---\nuint32 response\n```\n\n----------------------------------------\n\nTITLE: Building and running a ROS 2 package\nDESCRIPTION: Commands for installing dependencies, building the package, and running the parameter node across different operating systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nrosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncolcon build --packages-select python_parameters\n```\n\nLANGUAGE: Shell\nCODE:\n```\nros2 run python_parameters minimal_param_node\n```\n\n----------------------------------------\n\nTITLE: ROS 2 tf2 Turtle Pose Broadcaster Node\nDESCRIPTION: This Python code defines a ROS 2 node (`FramePublisher`) that subscribes to a turtle's pose topic and broadcasts its transform (`world` -> `turtlename`) using `tf2_ros.TransformBroadcaster`. It includes necessary imports, a helper function to convert Euler angles to quaternions, the node class with parameter declaration, a subscriber callback (`handle_turtle_pose`) that creates and sends the `TransformStamped` message based on the received pose, and a main entry point.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport math\n\nfrom geometry_msgs.msg import TransformStamped\n\nimport numpy as np\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom tf2_ros import TransformBroadcaster\n\nfrom turtlesim.msg import Pose\n\n\ndef quaternion_from_euler(ai, aj, ak):\n    ai /= 2.0\n    aj /= 2.0\n    ak /= 2.0\n    ci = math.cos(ai)\n    si = math.sin(ai)\n    cj = math.cos(aj)\n    sj = math.sin(aj)\n    ck = math.cos(ak)\n    sk = math.sin(ak)\n    cc = ci*ck\n    cs = ci*sk\n    sc = si*ck\n    ss = si*sk\n\n    q = np.empty((4, ))\n    q[0] = cj*sc - sj*cs\n    q[1] = cj*ss + sj*cc\n    q[2] = cj*cs - sj*sc\n    q[3] = cj*cc + sj*ss\n\n    return q\n\n\nclass FramePublisher(Node):\n\n    def __init__(self):\n        super().__init__('turtle_tf2_frame_publisher')\n\n        # Declare and acquire `turtlename` parameter\n        self.turtlename = self.declare_parameter(\n          'turtlename', 'turtle').get_parameter_value().string_value\n\n        # Initialize the transform broadcaster\n        self.tf_broadcaster = TransformBroadcaster(self)\n\n        # Subscribe to a turtle{1}{2}/pose topic and call handle_turtle_pose\n        # callback function on each message\n        self.subscription = self.create_subscription(\n            Pose,\n            f'/{self.turtlename}/pose',\n            self.handle_turtle_pose,\n            1)\n        self.subscription  # prevent unused variable warning\n\n    def handle_turtle_pose(self, msg):\n        t = TransformStamped()\n\n        # Read message content and assign it to\n        # corresponding tf variables\n        t.header.stamp = self.get_clock().now().to_msg()\n        t.header.frame_id = 'world'\n        t.child_frame_id = self.turtlename\n\n        # Turtle only exists in 2D, thus we get x and y translation\n        # coordinates from the message and set the z coordinate to 0\n        t.transform.translation.x = msg.x\n        t.transform.translation.y = msg.y\n        t.transform.translation.z = 0.0\n\n        # For the same reason, turtle can only rotate around one axis\n        # and this why we set rotation in x and y to 0 and obtain\n        # rotation in z axis from the message\n        q = quaternion_from_euler(0, 0, msg.theta)\n        t.transform.rotation.x = q[0]\n        t.transform.rotation.y = q[1]\n        t.transform.rotation.z = q[2]\n        t.transform.rotation.w = q[3]\n\n        # Send the transformation\n        self.tf_broadcaster.sendTransform(t)\n\n\ndef main():\n    try:\n        with rclpy.init():\n            node = FramePublisher()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files on Linux\nDESCRIPTION: This code snippet demonstrates how to source the ROS 2 setup script in a Linux environment, enabling access to ROS 2 commands and packages within the current shell session. Replace '{DISTRO}' with your specific ROS 2 distribution name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Service Node Implementation Using Python\nDESCRIPTION: Defines a ROS 2 service node that offers an addition service by handling incoming requests, summing two integers, and sending back the result. It includes class initialization, callback setup, and main execution logic, requiring rclpy and example_interfaces dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom example_interfaces.srv import AddTwoInts\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nclass MinimalService(Node):\n    def __init__(self):\n        super().__init__('minimal_service')\n        self.srv = self.create_service(AddTwoInts, 'add_two_ints', self.add_two_ints_callback)\n    \n    def add_two_ints_callback(self, request, response):\n        response.sum = request.a + request.b\n        self.get_logger().info('Incoming request\\na: %d b: %d' % (request.a, request.b))\n        return response\n\ndef main():\n    try:\n        with rclpy.init():\n            minimal_service = MinimalService()\n            rclpy.spin(minimal_service)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Launching the Turtlesim TF2 Demo\nDESCRIPTION: Uses the 'ros2 launch' command to execute the specified Python launch file ('turtle_tf2_demo_launch.py') from the 'learning_tf2_cpp' package. This typically starts the turtlesim simulation node and the custom 'turtle_tf2_broadcaster' node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nros2 launch learning_tf2_cpp turtle_tf2_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Launch File (Console)\nDESCRIPTION: Commands to execute the integrated launch files using the `ros2 launch` command. It shows how to specify the package name and the name of the launch file (including the extension) after building and sourcing the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nros2 launch py_launch_example my_script_launch.xml\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 launch py_launch_example my_script_launch.yaml\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 launch py_launch_example my_script_launch.py\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 launch cpp_launch_example my_script_launch.xml\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 launch cpp_launch_example my_script_launch.yaml\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 launch cpp_launch_example my_script_launch.py\n```\n\n----------------------------------------\n\nTITLE: Defining Collision Element in URDF\nDESCRIPTION: This XML snippet demonstrates how to define a collision element within a URDF link. The collision element defines the shape for collision detection, using a geometry tag, similar to the visual element.  Dependencies include the URDF standard and ROS environment. The code defines a cylinder shape for the collision element. The output is a URDF file containing the collision definition, used for simulation and collision detection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <link name=\"base_link\">\n        <visual>\n          <geometry>\n            <cylinder length=\"0.6\" radius=\"0.2\"/>\n          </geometry>\n          <material name=\"blue\">\n            <color rgba=\"0 0 .8 1\"/>\n          </material>\n        </visual>\n        <collision>\n          <geometry>\n            <cylinder length=\"0.6\" radius=\"0.2\"/>\n          </geometry>\n        </collision>\n      </link>\n```\n\n----------------------------------------\n\nTITLE: Installing Launch Files in CMake\nDESCRIPTION: This CMake command installs all files from the 'launch' directory within the package source into the 'share/<package_name>/launch' directory in the install space. This makes the launch files accessible to the 'ros2 launch' command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY launch\n  DESTINATION share/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Node and Client (C++)\nDESCRIPTION: Creates a ROS 2 node named 'minimal_client' and then creates a service client associated with that node. The client is configured to interact with services of type `AddTwoInts` and is targeted at the service named 'add_two_ints'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nauto node = rclcpp::Node::make_shared(\"minimal_client\");\nauto client = node->create_client<AddTwoInts>(\"add_two_ints\");\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 nodes, topics, services, and actions\nDESCRIPTION: These commands list the currently active nodes, topics, services, and actions in the ROS 2 system. They are used for introspection and debugging.  Requires ROS 2 environment setup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node list\n$ ros2 topic list\n$ ros2 service list\n$ ros2 action list\n```\n\n----------------------------------------\n\nTITLE: Querying the ament Index in CMake: has_resource\nDESCRIPTION: This CMake function checks if a resource exists in the ament index.  It takes the resource type and name and returns a boolean value in the specified variable. It provides the prefix path to the resource if it exists. The output variable is filled with the prefix or FALSE.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nament_index_has_resource(var resource_type resource_name)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic TF2 Frame Broadcaster Node in Python\nDESCRIPTION: Defines a ROS2 node `DynamicFrameBroadcaster` in Python that publishes TF2 transforms. It uses `rclpy`, `geometry_msgs.msg.TransformStamped`, and `tf2_ros.TransformBroadcaster`. A timer periodically calls `broadcast_timer_callback` to compute and send a transform where the child frame (`carrot1`) moves sinusoidally relative to the parent frame (`turtle1`) based on time. The `main` function initializes the node and keeps it running.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\nfrom geometry_msgs.msg import TransformStamped\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom tf2_ros import TransformBroadcaster\n\n\nclass DynamicFrameBroadcaster(Node):\n\n    def __init__(self):\n        super().__init__('dynamic_frame_tf2_broadcaster')\n        self.tf_broadcaster = TransformBroadcaster(self)\n        self.timer = self.create_timer(0.1, self.broadcast_timer_callback)\n\n    def broadcast_timer_callback(self):\n        seconds, _ = self.get_clock().now().seconds_nanoseconds()\n        x = seconds * math.pi\n\n        t = TransformStamped()\n        t.header.stamp = self.get_clock().now().to_msg()\n        t.header.frame_id = 'turtle1'\n        t.child_frame_id = 'carrot1'\n        t.transform.translation.x = 10 * math.sin(x)\n        t.transform.translation.y = 10 * math.cos(x)\n        t.transform.translation.z = 0.0\n        t.transform.rotation.x = 0.0\n        t.transform.rotation.y = 0.0\n        t.transform.rotation.z = 0.0\n        t.transform.rotation.w = 1.0\n\n        self.tf_broadcaster.sendTransform(t)\n\n\ndef main():\n    try:\n        with rclpy.init():\n            node = DynamicFrameBroadcaster()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Checking ROS 2 Topic Bandwidth Usage Using ros2 topic bw Command in Console\nDESCRIPTION: This snippet illustrates how to use the 'ros2 topic bw' command to measure the bandwidth consumed by messages published on a ROS 2 topic. It outputs the subscription confirmation, average bandwidth in KB/s, message count, and statistics on message size. It requires an active topic publisher and subscription. Input is the topic name; output is bandwidth utilization and message statistics which help evaluate network usage and message size constraints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic bw /turtle1/pose\nSubscribed to [/turtle1/pose]\n1.51 KB/s from 62 messages\n    Message size mean: 0.02 KB min: 0.02 KB max: 0.02 KB\n```\n\n----------------------------------------\n\nTITLE: Running rqt_graph for ROS 2 Visualization - Console\nDESCRIPTION: This snippet shows how to invoke rqt_graph from the console to visualize the communication graph of a running ROS 2 system. It is used for introspection and debugging of interactions defined in the launch files. Prerequisites: rqt_graph is installed, and the ROS 2 system is active. No parameters are needed. Output is a graphical window displaying nodes and topics present in the system. Constraint: must be run in a sourced ROS 2 terminal with GUI support.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ rqt_graph\n```\n\n----------------------------------------\n\nTITLE: Building and Launching the ROS 2 Package (Linux)\nDESCRIPTION: Sequence of shell commands for building the ROS 2 workspace using `colcon build`, sourcing the setup file (`source install/local_setup.bash`), and launching the robot simulation using `ros2 launch`. These commands compile the code and start the Webots simulation along with the ROS 2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\n$ source install/local_setup.bash\n$ ros2 launch my_package robot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Create ROS 2 Publisher - C++\nDESCRIPTION: This code snippet demonstrates how to create a ROS 2 publisher using rclcpp, replacing the ROS 1 publisher creation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n//  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);\n//  ros::Rate loop_rate(10);\n  auto chatter_pub = node->create_publisher<std_msgs::msg::String>(\"chatter\",\n    1000);\n  rclcpp::Rate loop_rate(10);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fibonacci Action Server in C++\nDESCRIPTION: C++ code for a ROS2 action server that computes the Fibonacci sequence. It handles goal requests, cancellations, and provides feedback for each sequence step calculated asynchronously.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nclass FibonacciActionServer : public rclcpp::Node\n\n// Constructor\nFibonacciActionServer()\n: Node(\"fibonacci_action_server\")\n\n// Callback for handling new goals\n[this](const rclcpp_action::GoalUUID & uuid, std::shared_ptr<const Fibonacci::Goal> goal) {\n  RCLCPP_INFO(this->get_logger(), \"Received goal request with order %d\", goal->order);\n  (void)uuid;\n  return rclcpp_action::GoalResponse::ACCEPT_AND_EXECUTE;\n}\n\n// Callback for handling cancellation\n[this](const std::shared_ptr<GoalHandleFibonacci> goal_handle) {\n  RCLCPP_INFO(this->get_logger(), \"Received request to cancel goal\");\n  (void)goal_handle;\n  return rclcpp_action::CancelResponse::ACCEPT;\n}\n\n// Callback for handling goal accept\n[this](const std::shared_ptr<GoalHandleFibonacci> goal_handle) {\n  // this needs to return quickly to avoid blocking the executor, so spin up a new thread\n  std::thread{std::bind(&FibonacciActionServer::execute, this, std::placeholders::_1), goal_handle}.detach();\n}\n\n// Action server instantiation\nthis->action_server_ = rclcpp_action::create_server<Fibonacci>(\n  this,\n  \"fibonacci\",\n  handle_goal,\n  handle_cancel,\n  handle_accepted);\n\n// Execute method running in a separate thread\nvoid execute(const std::shared_ptr<GoalHandleFibonacci> goal_handle)\n{\n  RCLCPP_INFO(this->get_logger(), \"Executing goal\");\n  rclcpp::Rate loop_rate(1);\n  const auto goal = goal_handle->get_goal();\n  auto feedback = std::make_shared<Fibonacci::Feedback>();\n  auto & sequence = feedback->partial_sequence;\n  sequence.push_back(0);\n  sequence.push_back(1);\n  auto result = std::make_shared<Fibonacci::Result>();\n\n  for (int i = 1; (i < goal->order) && rclcpp::ok(); ++i) {\n    // Check if there is a cancel request\n    if (goal_handle->is_canceling()) {\n      result->sequence = sequence;\n      goal_handle->canceled(result);\n      RCLCPP_INFO(this->get_logger(), \"Goal canceled\");\n      return;\n    }\n    // Update sequence\n    sequence.push_back(sequence[i] + sequence[i - 1]);\n    // Publish feedback\n    goal_handle->publish_feedback(feedback);\n    RCLCPP_INFO(this->get_logger(), \"Publish feedback\");\n\n    loop_rate.sleep();\n  }\n\n  // Check if goal is done\n  if (rclcpp::ok()) {\n    result->sequence = sequence;\n    goal_handle->succeed(result);\n    RCLCPP_INFO(this->get_logger(), \"Goal succeeded\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing ros::Rate with rclcpp::Rate\nDESCRIPTION: ROS 2 offers an equivalent rclcpp::Rate class, which can replace ros::Rate with minimal changes, maintaining consistent rate control in spinning and timing operations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nUse ``rclcpp::Rate`` as a drop-in replacement for ``ros::Rate``.\n```\n\n----------------------------------------\n\nTITLE: Playing Back a ROS2 Bag Using Console Commands\nDESCRIPTION: Utilizes the 'ros2 bag play' command to replay data from the recorded bag 'big_synthetic_bag'. This playback respects the original time stamps, effectively reproducing the timing of the data as it was recorded. This command helps verify that the input data was correctly recorded and can be accessed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play big_synthetic_bag\n```\n\n----------------------------------------\n\nTITLE: Publishing Robot Joint States and Transforms in ROS 2 with C++\nDESCRIPTION: This C++ snippet defines the StatePublisher class, a ROS 2 node that publishes JointState messages and broadcasts transforms for a walking robot simulation. It uses rclcpp for node management, publishes joint states for three joints ('swivel', 'tilt', 'periscope'), and broadcasts the transform between 'odom' and 'axis' frames using tf2_ros. The node updates joint angles and position in a timer callback running at roughly 30 Hz, enabling motion simulation. Dependencies include ROS 2 packages rclcpp, sensor_msgs, geometry_msgs, and tf2_ros.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-cpp.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <rclcpp/rclcpp.hpp>\n#include <geometry_msgs/msg/quaternion.hpp>\n#include <sensor_msgs/msg/joint_state.hpp>\n#include <tf2_ros/transform_broadcaster.h>\n#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n#include <cmath>\n#include <thread>\n#include <chrono>\n\nusing namespace std::chrono;\n\nclass StatePublisher : public rclcpp::Node{\n    public:\n\n    StatePublisher(rclcpp::NodeOptions options=rclcpp::NodeOptions()):\n        Node(\"state_publisher\",options){\n            joint_pub_ = this->create_publisher<sensor_msgs::msg::JointState>(\"joint_states\",10);\n            // create a publisher to tell robot_state_publisher the JointState information.\n            // robot_state_publisher will deal with this transformation\n            broadcaster = std::make_shared<tf2_ros::TransformBroadcaster>(this);\n            // create a broadcaster to tell the tf2 state information\n            // this broadcaster will determine the position of coordinate system 'asix' in coordinate system 'odom'\n            RCLCPP_INFO(this->get_logger(),\"Starting state publisher\");\n\n            loop_rate_=std::make_shared<rclcpp::Rate>(33ms);\n\n            timer_=this->create_wall_timer(33ms,std::bind(&StatePublisher::publish,this));\n        }\n\n        void publish();\n    private:\n    rclcpp::Publisher<sensor_msgs::msg::JointState>::SharedPtr joint_pub_;\n    std::shared_ptr<tf2_ros::TransformBroadcaster> broadcaster;\n    rclcpp::Rate::SharedPtr loop_rate_;\n    rclcpp::TimerBase::SharedPtr timer_;\n\n    //Robot state variables\n    // degree means one degree\n    const double degree=M_PI/180.0;\n    double tilt = 0.;\n    double tinc = degree;\n    double swivel = 0.;\n    double angle = 0.;\n    double height = 0.;\n    double hinc = 0.005;\n};\n\nvoid StatePublisher::publish(){\n    // create the necessary messages\n    geometry_msgs::msg::TransformStamped t;\n    sensor_msgs::msg::JointState joint_state;\n\n    // add time stamp\n    joint_state.header.stamp=this->get_clock()->now();\n    // Specify joints' name which are defined in the r2d2.urdf.xml and their content\n    joint_state.name={\"swivel\",\"tilt\",\"periscope\"};\n    joint_state.position={swivel,tilt,height};\n\n    // add time stamp\n    t.header.stamp=this->get_clock()->now();\n    // specify the father and child frame\n\n    // odom is the base coordinate system of tf2\n    t.header.frame_id=\"odom\";\n    // axis is defined in r2d2.urdf.xml file and it is the base coordinate of model\n    t.child_frame_id=\"axis\";\n\n    // add translation change\n    t.transform.translation.x=cos(angle)*2;\n    t.transform.translation.y=sin(angle)*2;\n    t.transform.translation.z=0.7;\n    tf2::Quaternion q;\n    // euler angle into Quanternion and add rotation change\n    q.setRPY(0,0,angle+M_PI/2);\n    t.transform.rotation.x=q.x();\n    t.transform.rotation.y=q.y();\n    t.transform.rotation.z=q.z();\n    t.transform.rotation.w=q.w();\n\n    // update state for next time\n    tilt+=tinc;\n    if (tilt<-0.5 || tilt>0.0){\n        tinc*=-1;\n    }\n    height+=hinc;\n    if (height>0.2 || height<0.0){\n        hinc*=-1;\n    }\n    swivel+=degree;  // Increment by 1 degree (in radians)\n    angle+=degree;    // Change angle at a slower pace\n\n    // send message\n    broadcaster->sendTransform(t);\n    joint_pub_->publish(joint_state);\n\n    RCLCPP_INFO(this->get_logger(),\"Publishing joint state\");\n}\n\nint main(int argc, char * argv[]){\n    rclcpp::init(argc,argv);\n    rclcpp::spin(std::make_shared<StatePublisher>());\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Quaternion Rotation in Python\nDESCRIPTION: Performs quaternion multiplication to rotate the original quaternion by a specified rotation quaternion, updating the pose orientation in Python.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nq_orig = quaternion_from_euler(0, 0, 0)\n# Rotate the previous pose by 180* about X\nq_rot = quaternion_from_euler(3.14159, 0, 0)\nq_new = quaternion_multiply(q_rot, q_orig)\n```\n\n----------------------------------------\n\nTITLE: Declaring ROS Publisher and Node Constructor Skeleton in C++\nDESCRIPTION: Illustrates the creation of an AddressBookPublisher class inheriting from rclcpp::Node, and the initialization of a publisher for the AddressBook message topic 'address_book' with default QoS settings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nusing namespace std::chrono_literals;\n\nclass AddressBookPublisher : public rclcpp::Node\n{\npublic:\n  AddressBookPublisher()\n  : Node(\"address_book_publisher\")\n  {\n    address_book_publisher_ =\n      this->create_publisher<more_interfaces::msg::AddressBook>(\"address_book\");\n```\n\n----------------------------------------\n\nTITLE: ROS2 Service Server Implementation in C++\nDESCRIPTION: Implements a service server for 'AddThreeInts.srv' in C++ that adds three integers from the request and responds with their sum. It sets up a callback for incoming requests and logs the operation, using rclcpp library functions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tutorial_interfaces/srv/add_three_ints.hpp\"  // CHANGE\n\n#include <memory>\n\nvoid add(const std::shared_ptr<tutorial_interfaces::srv::AddThreeInts::Request> request,\n         std::shared_ptr<tutorial_interfaces::srv::AddThreeInts::Response> response)\n{\n  response->sum = request->a + request->b + request->c;  // CHANGE\n  RCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"Incoming request\\na: %ld b: %ld c: %ld\", request->a, request->b, request->c);  // CHANGE\n  RCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"sending back response: [%ld]\", (long int)response->sum);\n}\n\nint main(int argc, char **argv)\n{\n  rclcpp::init(argc, argv);\n  auto node = rclcpp::Node::make_shared(\"add_three_ints_server\");  // CHANGE\n  auto service = node->create_service<tutorial_interfaces::srv::AddThreeInts>(\"add_three_ints\", &add);  // CHANGE\n  RCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"Ready to add three ints.\");  // CHANGE\n  rclcpp::spin(node);\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking TF2 Transforms with tf2_echo\nDESCRIPTION: Uses the 'tf2_echo' tool from the 'tf2_ros' package to display the transformation (position and orientation) being published between the 'world' frame (source) and the 'turtle1' frame (target). This verifies if the TF2 broadcaster node is correctly publishing the turtle's pose.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nros2 run tf2_ros tf2_echo world turtle1\n```\n\n----------------------------------------\n\nTITLE: Loading Parameters from YAML File (Python)\nDESCRIPTION: This Python launch file launches the `turtlesim_node` with parameter values loaded from a YAML configuration file. The `Node` action utilizes the `parameters` argument, passing the path to the YAML file using the `os.path.join` function to locate the file within the package's `config` directory. The YAML file defines parameter values.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nimport os\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim',\n            namespace='turtlesim2',\n            parameters=[\n                os.path.join(get_package_share_directory('launch_tutorial'),\n                             'config', 'turtlesim.yaml')\n            ]\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Installing ROS Dependencies with rosdep (Console)\nDESCRIPTION: Installs system dependencies, including Python packages defined via `rosdep` keys in `package.xml` files, for a ROS 2 workspace. The `-y` flag provides automatic yes to prompts, and `-r` retries transient errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nrosdep install -yr ./path/to/your/workspace\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS2 Package Using Console Commands\nDESCRIPTION: This snippet shows the console command to create a ROS2 Python package named 'py_pubsub' with the ament_python build type and Apache-2.0 license. The command initializes the package structure required for ROS2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nros2 pkg create --build-type ament_python --license Apache-2.0 py_pubsub\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Launch File via ros2 launch Command - Shell\nDESCRIPTION: This shell command launches multiple ROS 2 nodes as defined in a launch file (multisim.launch.py) using the ros2 CLI. It requires a properly installed ROS 2 environment, sourced in the shell, and the specified launch file. The main parameter is the launch file path, and it will execute all nodes/configurations included in the launch script. Output is displayed on the terminal with all started nodes; errors will be shown if dependencies or files are missing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ros2 launch turtlesim multisim.launch.py\n```\n\n----------------------------------------\n\nTITLE: Running rqt\nDESCRIPTION: This command starts the rqt graphical user interface.  It requires rqt to be installed. The output is the rqt GUI window.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ rqt\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Action Message in ROS 2 - Plaintext\nDESCRIPTION: This snippet shows a minimal example of an action message definition in ROS 2, using the special action file format. It consists of three sections separated by '---': a request section, a response section, and a feedback section, all carrying 32-bit integers. This format is used to enable structured communication between action clients and servers in ROS 2, but does not represent executable code; instead, it defines the schema used by the communication framework.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Actions.rst#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nint32 request\n---\nint32 response\n---\nint32 feedback\n```\n\n----------------------------------------\n\nTITLE: Refactoring ROS 2 Python Node with Class and Timer\nDESCRIPTION: Refactored Python code for a ROS 2 publisher node following conventions. It defines a `Talker` class inheriting from `rclpy.node.Node`, creates a publisher for `std_msgs.msg.String` on the `/chatter` topic, and uses `create_timer` to trigger the `do_publish` method periodically (10Hz). The `main` function initializes `rclpy`, creates an instance of `Talker`, and spins the node using `rclpy.spin()`, handling potential shutdown exceptions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.node import Node\nfrom rclpy.executors import ExternalShutdownException\nfrom std_msgs.msg import String\n\n\nclass Talker(Node):\n\n    def __init__(self, **kwargs):\n        super().__init__('talker', **kwargs)\n\n        self._pub = self.create_publisher(String, 'chatter', 10)\n        self._timer = self.create_timer(1 / 10, self.do_publish)\n\n    def do_publish(self):\n        hello_str = String()\n        hello_str.data = f'hello world {self.get_clock().now()}'\n        self.get_logger().info(hello_str.data)\n        self._pub.publish(hello_str)\n\n\ndef main():\n    try:\n        with rclpy.init():\n            rclpy.spin(Talker())\n    except (ExternalShutdownException, KeyboardInterrupt):\n        pass\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Python Main Function\nDESCRIPTION: Standard ROS 2 Python main function structure. It initializes the ROS 2 context, creates an instance of the `SampleNodeWithParameters`, spins the node to process callbacks, and handles keyboard interrupts or external shutdown exceptions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n        try:\n            with rclpy.init():\n                node = SampleNodeWithParameters()\n                rclpy.spin(node)\n        except (KeyboardInterrupt, ExternalShutdownException):\n            pass\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Custom Message Definition for AddressBook in msg/AddressBook.msg\nDESCRIPTION: Defines a custom ROS 2 message AddressBook.msg specifying constants for phone types and string fields for storing contact information. This message includes fields for first name, last name, phone number, and phone type, facilitating structured contact data for publishing and subscribing nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nuint8 PHONE_TYPE_HOME=0\nuint8 PHONE_TYPE_WORK=1\nuint8 PHONE_TYPE_MOBILE=2\n\nstring first_name\nstring last_name\nstring phone_number\nuint8 phone_type\n```\n\n----------------------------------------\n\nTITLE: Setting ROS2 Node Parameters from YAML Files - YAML\nDESCRIPTION: Provides an example YAML configuration file for setting parameters for multiple ROS2 nodes using wildcards and namespaces. The file assigns parameters to specific nodes and wildcard namespaces and node names using supported syntax under ros__parameters keys. This YAML file can be passed to nodes via the --params-file argument for bulk parameter configuration. Dependencies include correct YAML format for ROS2 parameter parsing and node support for declaration of parameters via YAML. Wildcards allow flexible specification of parameter hierarchies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparameter_blackboard:\n    ros__parameters:\n        some_int: 42\n        a_string: \"Hello world\"\n        some_lists:\n            some_integers: [1, 2, 3, 4]\n            some_doubles : [3.14, 2.718]\n\n/**:\n  ros__parameters:\n    wildcard_full: \"Full wildcard for any namespaces and any node names\"\n\n/**/parameter_blackboard:\n  ros__parameters:\n    wildcard_namespace: \"Wildcard for a specific node name under any namespace\"\n\n/*:\n  ros__parameters:\n    wildcard_nodename_root_namespace: \"Wildcard for any node names, but only in root namespace\"\n```\n\n----------------------------------------\n\nTITLE: Source ROS 2 Setup File (Bash) (sh)\nDESCRIPTION: Sources the `setup.bash` file from an extracted ROS 2 binary archive installation. This command sets up the necessary environment variables (like `AMENT_PREFIX_PATH`, `PATH`, etc.) to use the ROS 2 installation from the archive in the current bash shell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsource path/to/extracted/archive/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment for Debugging\nDESCRIPTION: Sources the ROS 2 installation's setup script. This step is crucial before running GDB on executables or tests, as it configures environment variables like `LD_LIBRARY_PATH`, allowing GDB to locate and load debug symbols for shared libraries used by the ROS 2 application.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsource install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Sourcing the colcon Install Environment - macOS Bash\nDESCRIPTION: Configures the shell environment to use built packages by directly sourcing the install/setup.bash script. Makes ROS 2 workspace binaries available for the current session. Run this command after building or reopening the terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n. install/setup.bash\n\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Python Package with ament_python - Shell\nDESCRIPTION: This shell command initializes a new ROS 2 package named \"launch_tutorial\" with the build type set to ament_python and the Apache-2.0 license. The command sets up the basic directory and package files needed for further ROS 2 Python-based development. Prerequisite: ROS 2 environment must be sourced. The resulting folder will have a setup.py script for package configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nros2 pkg create --build-type ament_python --license Apache-2.0 launch_tutorial\n```\n\n----------------------------------------\n\nTITLE: Including a Launch File Dynamically with Substitutions - Python\nDESCRIPTION: This Python snippet shows how to dynamically compute and include another launch file using FindPackageShare and PathJoinSubstitution in a ROS 2 launch file. It uses the substitutions to programmatically construct a path to a dependent launch file, supporting argument-driven file name selection. Key dependencies are launch.substitutions.FindPackageShare, PathJoinSubstitution, and (optionally) LaunchConfiguration. The approach enables dynamic referencing of launch resources at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Make sure to import LaunchConfiguration:\n# from launch.substitutions import LaunchConfiguration\n\nPathJoinSubstitution([\n    FindPackageShare('launch_tutorial'),\n    'launch',\n    [LaunchConfiguration('file', default='example_substitutions'), '_launch', '.py']\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 C++ Package with Required Dependencies - Console Shell\nDESCRIPTION: This console command creates a new ROS 2 package named 'my_package' with 'ament_cmake' build type for C++ development and Apache-2.0 license. It initiates a template C++ node 'MyRobotDriver.cpp' and specifies dependencies on rclcpp, geometry_msgs, webots_ros2_driver, and pluginlib. Execute this command from within the desired parent directory, with ROS 2 and its C++ components properly installed. The created package is ready for additional source and header files for driver development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 --node-name MyRobotDriver my_package --dependencies rclcpp geometry_msgs webots_ros2_driver pluginlib\n```\n\n----------------------------------------\n\nTITLE: Setting a ROS 2 Node Parameter at Runtime with ros2 CLI (console)\nDESCRIPTION: Modifies a live node parameter's value using the 'ros2 param set' command. Demonstrated by changing '/turtlesim' background color parameter 'background_r' to 150. Changes affect the current node session without persistence across restarts. Requires a running node and sourced ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set /turtlesim background_r 150\nSet parameter successful\n```\n\n----------------------------------------\n\nTITLE: Query Service Information Using ros2 CLI (Console, ROS 2)\nDESCRIPTION: This command provides detailed information about a specific ROS 2 service, including its type, number of associated clients, and server count. Replace <service_name> with the desired service. Requires an active workspace and relevant services started. Outputs include type and counts, aiding introspection and debugging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service info <service_name>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service info /clear\nType: std_srvs/srv/Empty\nClients count: 0\nServices count: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscriber in ROS 1 and ROS 2\nDESCRIPTION: This snippet shows how to create a subscriber in ROS 1 and ROS 2. The ROS 2 example uses `node.create_subscription()` which accepts the message type, topic name, callback function, and either a QoS profile or queue size. The ROS 1 examples show how to create a subscriber and set the queue size.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsub = rospy.Subscriber('chatter', String, callback)\n# or\nsub = rospy.Subscriber('chatter', String, callback, queue_size=10)\n```\n\nLANGUAGE: python\nCODE:\n```\nsub = node.create_subscription(String, 'chatter', callback, rclpy.qos.QoSProfile())\n# or\nsub = node.create_subscription(String, 'chatter', callback, 10)\n```\n\n----------------------------------------\n\nTITLE: Cloning ROS Tutorials Repository - Shell\nDESCRIPTION: Clones the 'ros_tutorials' repository, which contains the 'turtlesim' package used in subsequent tutorials, into the workspace 'src' directory. The '-b {DISTRO}' option is used to check out the branch that matches the installed ROS 2 distribution. Assumes Git is installed and network access is available. The cloned directory appears in 'src'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/ros/ros_tutorials.git -b {DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service in ROS 1 and ROS 2\nDESCRIPTION: This snippet demonstrates the creation of a service in both ROS 1 and ROS 2. The ROS 2 version uses `node.create_service()` to create the service, specifying the service type, service name, and callback function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsrv = rospy.Service('add_two_ints', AddTwoInts, add_two_ints_callback)\n```\n\nLANGUAGE: python\nCODE:\n```\nsrv = node.create_service(AddTwoInts, 'add_two_ints', add_two_ints_callback)\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Service 'AddThreeInts'\nDESCRIPTION: Command to display the structure of 'tutorial_interfaces/srv/AddThreeInts', showing fields for inputs and response, confirming the service's definition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show tutorial_interfaces/srv/AddThreeInts\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in package.xml for a TF2 Python Node\nDESCRIPTION: XML configuration that defines the required runtime dependencies for a Python node using TF2. Includes dependencies for geometry_msgs, NumPy, rclpy, tf2_ros_py, and turtlesim packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<exec_depend>geometry_msgs</exec_depend>\n<exec_depend>python3-numpy</exec_depend>\n<exec_depend>rclpy</exec_depend>\n<exec_depend>tf2_ros_py</exec_depend>\n<exec_depend>turtlesim</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup File\nDESCRIPTION: This command sources the ROS 2 setup file, which is necessary to configure the environment for using ROS 2 tools like RViz. Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron).  It is required to set up the ROS 2 environment before running any ROS 2 commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-User-Guide/RViz-User-Guide.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node in ROS 1 and ROS 2\nDESCRIPTION: This snippet demonstrates how to initialize a ROS node in both ROS 1 and ROS 2. The ROS 2 code uses `rclpy.init` with `sys.argv` for argument passing, and `rclpy.create_node` to create a node object.  It also provides logger information. This is the entry point for ROS applications.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nrospy.init_node('asdf')\n\nrospy.loginfo('Created node')\n```\n\nLANGUAGE: python\nCODE:\n```\nwith rclpy.init(args=sys.argv):\n    node = rclpy.create_node('asdf')\n\n    node.get_logger().info('Created node')\n```\n\n----------------------------------------\n\nTITLE: Cloning tf2 Demo Source Repository\nDESCRIPTION: Clones the 'geometry_tutorials' repository containing the tf2 demo source code using Git. It specifically checks out the 'ros2' branch, which is necessary for building the demo from source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/ros/geometry_tutorials.git -b ros2\n```\n\n----------------------------------------\n\nTITLE: Registering the Broadcaster Executable in CMake (console)\nDESCRIPTION: This snippet shows the CMake configuration commands to compile the turtle_tf2_broadcaster node from its source file, link against required ROS 2 and tf2 libraries, and specify installation rules. Dependencies needed: geometry_msgs, rclcpp, tf2, tf2_ros, turtlesim_msgs with corresponding *_TARGETS variables. Inputs include the C++ source file path, and outputs are the built executable and CMake installation directives. Place in the CMakeLists.txt in the root of your ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nadd_executable(turtle_tf2_broadcaster src/turtle_tf2_broadcaster.cpp)\ntarget_link_libraries(\n    turtle_tf2_broadcaster PUBLIC\n    ${geometry_msgs_TARGETS}\n    rclcpp::rclcpp\n    tf2::tf2\n    tf2_ros::tf2_ros\n    ${turtlesim_msgs_TARGETS}\n)\n\n```\n\nLANGUAGE: console\nCODE:\n```\ninstall(TARGETS\n    turtle_tf2_broadcaster\n    DESTINATION lib/${PROJECT_NAME})\n\n```\n\n----------------------------------------\n\nTITLE: Defining Service Callback Function (C++)\nDESCRIPTION: Defines the `handle_service` function, which is executed when a service request is received. It takes the request and response objects as input, logs the incoming request values, calculates the sum of the two integers from the request, and populates the 'sum' field in the response object.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nvoid handle_service(\n  const std::shared_ptr<rmw_request_id_t> request_header,\n  const std::shared_ptr<AddTwoInts::Request> request,\n  const std::shared_ptr<AddTwoInts::Response> response)\n{\n  (void)request_header;\n  RCLCPP_INFO(\n    g_node->get_logger(),\n    \"request: %\" PRId64 \" + %\" PRId64, request->a, request->b);\n  response->sum = request->a + request->b;\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Back Data with QoS Reliability Override\nDESCRIPTION: This snippet illustrates how to playback a bag file with an overridden reliability policy. It leverages the `--qos-profile-overrides-path` flag of `ros2 bag play` to specify the YAML file with the QoS override settings. The example overrides the reliability for `/talker` to `best_effort`.  The prerequisite is a bag file called `my_bag`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# reliability_override.yaml\n/talker:\n  reliability: best_effort\n  history: keep_all\n```\n\n----------------------------------------\n\nTITLE: Listing ROS2 topics\nDESCRIPTION: The `ros2 topic list` command lists all active topics in the ROS 2 system. The `-t` option includes the topic type, specifying the message type being published and subscribed to on each topic.  This command is helpful for getting an overview of available topics and identifying the data types used.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic list\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic list -t\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple ROS 2 Bag Reader Node\nDESCRIPTION: This Python code defines a ROS 2 node (`SimpleBagReader`) that uses `rosbag2_py.SequentialReader` to open and read messages from a bag file specified by `uri` and `storage_id`. It then publishes the read messages (specifically from the 'chatter' topic) onto a ROS topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nimport rosbag2_py\nfrom std_msgs.msg import String\n\n\nclass SimpleBagReader(Node):\n\n        def __init__(self):\n            super().__init__('simple_bag_reader')\n            self.reader = rosbag2_py.SequentialReader()\n            storage_options = rosbag2_py.StorageOptions(\n                uri='my_bag',\n                storage_id='mcap')\n            converter_options = rosbag2_py.ConverterOptions('', '')\n            self.reader.open(storage_options, converter_options)\n\n            self.publisher = self.create_publisher(String, 'chatter', 10)\n            self.timer = self.create_timer(0.1, self.timer_callback)\n\n        def timer_callback(self):\n            while self.reader.has_next():\n                msg = self.reader.read_next()\n                if msg[0] != 'chatter':\n                    continue\n                self.publisher.publish(msg[1])\n                self.get_logger().info('Publish serialized data to ' + msg[0])\n                break\n\n\n    def main(args=None):\n        try:\n            with rclpy.init(args=args):\n                sbr = SimpleBagReader()\n                rclpy.spin(sbr)\n        except (KeyboardInterrupt, ExternalShutdownException):\n            pass\n\n\n    if __name__ == '__main__':\n        main()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using rosdep\nDESCRIPTION: This command installs dependencies for packages within a workspace.  `--from-paths src` specifies the path to search for `package.xml` files. The `-y` flag automatically confirms all prompts.  `--ignore-src` ignores packages also in the workspace.  This is a common workflow for building ROS projects.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Rosdep.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install --from-paths src -y --ignore-src\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 Node Parameters Using ros2 CLI (console)\nDESCRIPTION: Uses the 'ros2 param list' command to display all parameters currently available for active ROS 2 nodes. This shows each node's parameter namespaces and their respective parameter names, helping users identify configurable settings for nodes like turtlesim. No dependencies aside from a sourced ROS 2 environment are required.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param list\n/teleop_turtle:\n  qos_overrides./parameter_events.publisher.depth\n  qos_overrides./parameter_events.publisher.durability\n  qos_overrides./parameter_events.publisher.history\n  qos_overrides./parameter_events.publisher.reliability\n  scale_angular\n  scale_linear\n  use_sim_time\n/turtlesim:\n  background_b\n  background_g\n  background_r\n  qos_overrides./parameter_events.publisher.depth\n  qos_overrides./parameter_events.publisher.durability\n  qos_overrides./parameter_events.publisher.history\n  qos_overrides./parameter_events.publisher.reliability\n  use_sim_time\n```\n\n----------------------------------------\n\nTITLE: Building and Launching ROS 2 Package for Robot Simulation on Linux VM using Shell\nDESCRIPTION: These shell commands build the ROS 2 workspace using colcon, source the locally installed workspace environment to overlay packages, and launch the custom robot simulation package with ros2 launch. This sequence is executed inside the Linux VM environment where the simulation and ROS 2 nodes run, ensuring the latest builds are active and the robot_launch.py launch file is executed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\n$ colcon build\n$ source install/local_setup.bash\n$ ros2 launch my_package robot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Defining a ROS 2 Launch File in XML - ROS 2 - XML\nDESCRIPTION: This XML snippet defines a ROS 2 launch file that demonstrates setting up global arguments (with defaults), including other launch files (with and without namespace scoping), launching nodes in certain namespaces, setting parameters using arguments, and remapping topics. The snippet requires the ROS 2 launch infrastructure and a typical ROS 2 workspace setup. Input values are sourced via arguments, and outputs are the resulting launched nodes and configuration. All parameters, node names, remappings, and includes should exist in the referenced packages and files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launch-file-different-formats.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Example XML ROS 2 launch file implementing argument setup, file inclusion, node execution with namespace, parameters, and topic remapping -->\n<!-- (actual code content to be filled in from launch/different_formats_launch.xml) -->\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Node with Overlay Workspace - Console\nDESCRIPTION: This snippet shows how to execute the turtlesim_node from the overlay using the ros2 run command. It requires ROS 2 to be installed and sourced, with the overlay workspace built and sourced as described. The command starts the turtlesim graphical simulation, and if the overlay was modified (e.g., a changed window title), these changes will be reflected in the running application. Input is not required; output is the turtlesim GUI window launched.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Spinning ROS2 Node (C++)\nDESCRIPTION: Initiates the ROS 2 event loop for the specified node. The `rclcpp::spin` function keeps the node alive, allowing it to process incoming messages, service requests, and timer callbacks until the node is explicitly shut down or an interrupt signal is received.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::spin(g_node);\n```\n\n----------------------------------------\n\nTITLE: Handling Action Result Callback in ROS2 C++ Action Client\nDESCRIPTION: This snippet shows the implementation of the ``result_callback`` in a ROS2 C++ action client, responsible for handling the final result once the action server finishes processing the goal. It processes the action result message and integrates with ROS2 rclcpp and rclcpp_action client libraries. This callback is essential for retrieving success or failure outcomes from the action server. The snippet depends on client-server communication established via ROS2 actions and expects an active action goal lifecycle.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nWhen the server is finished processing, it will return a result to the client.\\nThe result is handled by the ``result_callback``:\n```\n\nLANGUAGE: c++\nCODE:\n```\n.. literalinclude:: scripts/client.cpp\\n    :language: c++\\n    :lines: 72-94\n```\n\n----------------------------------------\n\nTITLE: CMakeLists.txt Setup for ROS2 C++ Publisher and Subscriber\nDESCRIPTION: Configures CMake build system to include 'tutorial_interfaces' dependency and links executables 'talker' and 'listener' with the necessary libraries and message interfaces. Ensures proper packaging and installation directives.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n#...\n\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(tutorial_interfaces REQUIRED)  # CHANGE\n\nadd_executable(talker src/publisher_member_function.cpp)\ntarget_link_libraries(talker PUBLIC rclcpp::rclcpp ${tutorial_interfaces_TARGETS})  # CHANGE\n\nadd_executable(listener src/subscriber_member_function.cpp)\ntarget_link_libraries(listener PUBLIC rclcpp::rclcpp ${tutorial_interfaces_TARGETS})  # CHANGE\n\ninstall(TARGETS\n  talker\n  listener\n  DESTINATION lib/${PROJECT_NAME})\n\nament_package()\n```\n\n----------------------------------------\n\nTITLE: setup.py for ROS2 Python Package\nDESCRIPTION: This Python script defines the setup parameters for a ROS 2 Python package, including package name, version, dependencies, and entry points.  The `package_name` variable should be updated to reflect your ROS2 package name. Launch files should be placed in the 'launch' directory within your package and referenced in the data_files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom glob import glob\nfrom setuptools import find_packages, setup\n\npackage_name = 'my_package'\n\nsetup(\n    name=package_name,\n    version='0.0.0',\n    # Packages to export\n    packages=find_packages(exclude=['test']),\n    # Files we want to install, specifically launch files\n    data_files=[\n        # Install marker file in the package index\n        ('share/ament_index/resource_index/packages', ['resource/' + package_name]),\n        # Include our package.xml file\n        (os.path.join('share', package_name), ['package.xml']),\n        # Include all launch files.\n        (os.path.join('share', package_name, 'launch'), glob('launch/*')),\n    ],\n    # This is important as well\n    install_requires=['setuptools'],\n    zip_safe=True,\n    author='ROS 2 Developer',\n    author_email='ros2@ros.com',\n    maintainer='ROS 2 Developer',\n    maintainer_email='ros2@ros.com',\n    keywords=['foo', 'bar'],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'License :: TODO',\n        'Programming Language :: Python',\n        'Topic :: Software Development',\n    ],\n    description='My awesome package.',\n    license='TODO',\n    # Like the CMakeLists add_executable macro, you can add your python\n    # scripts here.\n    entry_points={\n        'console_scripts': [\n            'my_script = my_package.my_script:main'\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building ROS 2 Nodes and Libraries with CMake - CMake\nDESCRIPTION: This CMake build script initializes and configures a ROS 2 package, specifying the required C++ standard and finding all package dependencies including rclcpp, geometry_msgs, pluginlib, and webots_ros2_driver. It defines targets for compiling an obstacle avoidance executable and a shared library implementing the robot driver, associates necessary include directories and dependencies for each target, and exports the driver as a ROS 2 plugin. The script also defines installation rules for binaries, libraries, include headers, and additional resource directories, and exports the relevant CMake configuration for downstream use. Prerequisites include installation of ROS 2 and all listed dependencies; inputs include the source files for the executable and library, as well as an XML description for the plugin. Outputs are compiled binaries, libraries, and installed resources ready for deployment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists_sensor.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(my_package)\n\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 14)\nendif()\n\n# Besides the package specific dependencies we also need the `pluginlib` and `webots_ros2_driver`\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(std_msgs REQUIRED)\nfind_package(geometry_msgs REQUIRED)\nfind_package(pluginlib REQUIRED)\nfind_package(webots_ros2_driver REQUIRED)\n\n# Export the plugin configuration file\npluginlib_export_plugin_description_file(webots_ros2_driver my_robot_driver.xml)\n\n# Obstacle avoider\ninclude_directories(\n  include\n)\nadd_executable(obstacle_avoider\n  src/ObstacleAvoider.cpp\n)\nament_target_dependencies(obstacle_avoider\n  rclcpp\n  geometry_msgs\n  sensor_msgs\n)\ninstall(TARGETS\n  obstacle_avoider\n  DESTINATION lib/${PROJECT_NAME}\n)\ninstall(\n  DIRECTORY include/\n  DESTINATION include\n)\n\n# MyRobotDriver library\nadd_library(\n  ${PROJECT_NAME}\n  SHARED\n  src/MyRobotDriver.cpp\n)\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PRIVATE\n  include\n)\nament_target_dependencies(\n  ${PROJECT_NAME}\n  pluginlib\n  rclcpp\n  webots_ros2_driver\n)\ninstall(TARGETS\n  ${PROJECT_NAME}\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib\n  RUNTIME DESTINATION bin\n)\n# Install additional directories.\ninstall(DIRECTORY\n  launch\n  resource\n  worlds\n  DESTINATION share/${PROJECT_NAME}/\n)\n\nament_export_include_directories(\n  include\n)\nament_export_libraries(\n  ${PROJECT_NAME}\n)\nament_package()\n\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Node using ros2 run - Console\nDESCRIPTION: This snippet showcases how to run the talker executable. It first sources the setup file to set up the ROS 2 environment and then uses `ros2 run` command. The `ros2 run` command takes the package name and the executable name as arguments, allowing the talker node to begin execution within the ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n   $ . ~/ros2_ws/install/setup.bash\n   $ ros2 run talker talker\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic TF2 Broadcaster Node C++\nDESCRIPTION: This C++ code defines a ROS2 node `DynamicFrameBroadcaster` that periodically publishes a TF2 transform. It uses a timer callback to calculate and send a transform between `turtle1` and `carrot1` frames, making the `carrot1` frame move in a circle relative to `turtle1`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <functional>\n#include <memory>\n\n#include \"geometry_msgs/msg/transform_stamped.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2_ros/transform_broadcaster.h\"\n\nusing namespace std::chrono_literals;\n\nconst double PI = 3.141592653589793238463;\n\nclass DynamicFrameBroadcaster : public rclcpp::Node\n{\npublic:\n  DynamicFrameBroadcaster()\n  : Node(\"dynamic_frame_tf2_broadcaster\")\n  {\n    tf_broadcaster_ = std::make_shared<tf2_ros::TransformBroadcaster>(this);\n\n    auto broadcast_timer_callback = [this](){\n        rclcpp::Time now = this->get_clock()->now();\n        double x = now.seconds() * PI;\n\n        geometry_msgs::msg::TransformStamped t;\n        t.header.stamp = now;\n        t.header.frame_id = \"turtle1\";\n        t.child_frame_id = \"carrot1\";\n        t.transform.translation.x = 10 * sin(x);\n        t.transform.translation.y = 10 * cos(x);\n        t.transform.translation.z = 0.0;\n        t.transform.rotation.x = 0.0;\n        t.transform.rotation.y = 0.0;\n        t.transform.rotation.z = 0.0;\n        t.transform.rotation.w = 1.0;\n\n        tf_broadcaster_->sendTransform(t);\n    };\n    timer_ = this->create_wall_timer(100ms, broadcast_timer_callback);\n  }\n\nprivate:\n  rclcpp::TimerBase::SharedPtr timer_;\n  std::shared_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<DynamicFrameBroadcaster>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in CMake Packages\nDESCRIPTION: This snippet provides a command-line argument to disable building tests in CMake-based packages by passing ``--cmake-args -DBUILD_TESTING=0`` during the build process. It helps streamline builds by excluding tests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nIf you want to avoid configuring and building tests in CMake packages you can pass: ``--cmake-args -DBUILD_TESTING=0``.\n```\n\n----------------------------------------\n\nTITLE: Example Output of Subscriber Node\nDESCRIPTION: This snippet shows example console output from the running ROS 2 subscriber node (`minimal_subscriber`). It logs informational messages indicating that it has received data, including the content of the message payload from the publisher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_21\n\nLANGUAGE: Console\nCODE:\n```\n[INFO] [minimal_subscriber]: I heard: \"Hello World: 10\"\n[INFO] [minimal_subscriber]: I heard: \"Hello World: 11\"\n[INFO] [minimal_subscriber]: I heard: \"Hello World: 12\"\n[INFO] [minimal_subscriber]: I heard: \"Hello World: 13\"\n[INFO] [minimal_subscriber]: I heard: \"Hello World: 14\"\n```\n\n----------------------------------------\n\nTITLE: Call Service with Argument Structure in YAML (Console, YAML, ROS 2)\nDESCRIPTION: This command calls the /spawn service of type turtlesim_msgs/srv/Spawn, supplying arguments in YAML syntax for positional (x, y, theta) and optional (name) fields. Requires knowledge of the argument structure from prior introspection. The command outputs a request/response object display. Limitations: incorrect YAML or missing required fields will cause errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service call /spawn turtlesim_msgs/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"\nrequester: making request: turtlesim.srv.Spawn_Request(x=2.0, y=2.0, theta=0.2, name='')\n\nresponse:\nturtlesim.srv.Spawn_Response(name='turtle2')\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package using Colcon - Console\nDESCRIPTION: This snippet demonstrates how to build the ROS 2 package using `colcon build`.  The preceding `source` command activates the ROS 2 environment. Building the package compiles the code, generates the necessary build artifacts, and prepares the package for execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n   $ . ~/ros2_ws/install/setup.bash\n   $ cd ~/ros2_talker\n   $ colcon build\n```\n\n----------------------------------------\n\nTITLE: Running Turtlesim Teleoperation Node\nDESCRIPTION: Runs the 'turtle_teleop_key' node from the 'turtlesim' package using 'ros2 run'. This node listens for keyboard input (arrow keys) and publishes velocity commands to control a turtle in the turtlesim simulation. Requires a separate terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files on Windows\nDESCRIPTION: Console command to source the setup files after building a ROS 2 package on Windows systems. This makes the built packages available in the current terminal session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ call install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Installing rosdep via apt\nDESCRIPTION: This command installs the rosdep package using the apt package manager. It's the recommended method when working within a ROS environment, ensuring compatibility and integration with the ROS ecosystem. Dependencies include the apt package manager and a working internet connection to fetch the package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Rosdep.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ apt-get install python3-rosdep\n```\n\n----------------------------------------\n\nTITLE: Adding ROS 2 Setup to Shell Startup Script on Linux\nDESCRIPTION: This snippet shows how to automate sourcing the ROS 2 setup script by appending the source command to the `.bashrc` file, ensuring it runs every time a new shell is opened. Replace '{DISTRO}' with your specific distribution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"source /opt/ros/{DISTRO}/setup.bash\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Defining ROS2 Package Manifest Using package.xml for Python (XML)\nDESCRIPTION: Provides the ROS2 package manifest configuration targeting the ament_python build system. It defines essential package information including name, version, description, maintainer contact, license, and test dependencies relevant to Python projects such as 'ament_copyright', 'ament_flake8', 'ament_pep257', and 'python3-pytest'. The build type is declared as 'ament_python' in the export section. This XML manifest is required to guide ROS2 build and testing tools for Python packages. Similar to the CMake manifest, description and license fields initially contain TODO placeholders to be updated before package release.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model\n   href=\"http://download.ros.org/schema/package_format3.xsd\"\n   schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"3\">\n <name>my_package</name>\n <version>0.0.0</version>\n <description>TODO: Package description</description>\n <maintainer email=\"user@todo.todo\">user</maintainer>\n <license>TODO: License declaration</license>\n\n <test_depend>ament_copyright</test_depend>\n <test_depend>ament_flake8</test_depend>\n <test_depend>ament_pep257</test_depend>\n <test_depend>python3-pytest</test_depend>\n\n <export>\n   <build_type>ament_python</build_type>\n </export>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Show Types for All Active Services (Console, ROS 2)\nDESCRIPTION: This command lists all active ROS 2 services with their associated types using the -t (--show-types) flag. Prerequisites and inputs match those of 'ros2 service list'. Outputs each service and its type; useful for identifying service signatures across nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service list -t\n/clear [std_srvs/srv/Empty]\n/kill [turtlesim_msgs/srv/Kill]\n/reset [std_srvs/srv/Empty]\n/spawn [turtlesim_msgs/srv/Spawn]\n...\n/turtle1/set_pen [turtlesim_msgs/srv/SetPen]\n/turtle1/teleport_absolute [turtlesim_msgs/srv/TeleportAbsolute]\n/turtle1/teleport_relative [turtlesim_msgs/srv/TeleportRelative]\n...\n```\n\n----------------------------------------\n\nTITLE: ROS2 C++ Subscriber Implementation\nDESCRIPTION: Implements a ROS2 subscriber node in C++ that listens to messages of type 'Num' on 'topic' and logs the received integer. It uses rclcpp library functions for subscription setup and handles messages via a callback lambda function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\n#include <functional>\n#include <memory>\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tutorial_interfaces/msg/num.hpp\"  // CHANGE\n\nusing std::placeholders::_1;\n\nclass MinimalSubscriber : public rclcpp::Node\n{\npublic:\n  MinimalSubscriber()\n  : Node(\"minimal_subscriber\")\n  {\n    auto topic_callback = [this](const tutorial_interfaces::msg::Num & msg){\n      RCLCPP_INFO_STREAM(this->get_logger(), \"I heard: '\" << msg.num << \"'\");  // CHANGE\n    };\n    subscription_ = this->create_subscription<tutorial_interfaces::msg::Num>(\n      \"topic\", 10, topic_callback);\n  }\nprivate:\n  rclcpp::Subscription<tutorial_interfaces::msg::Num>::SharedPtr subscription_;  // CHANGE\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<MinimalSubscriber>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace Directories\nDESCRIPTION: This set of commands creates the necessary directory structure for the ROS 2 workspace including ws and src directories within the user's home directory. This is the foundation for building the ROS 2 project.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~\n$ mkdir ws\n$ cd ws\n$ mkdir src\n```\n\n----------------------------------------\n\nTITLE: Showing the structure of action messages\nDESCRIPTION: Displays the message definitions for the RotateAbsolute action, including goal, result, and feedback structures, which are necessary when implementing clients or servers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show turtlesim_msgs/action/RotateAbsolute\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Python Subscriber Node Implementation\nDESCRIPTION: This is the complete Python code for the `MinimalSubscriber` node. It defines a class that inherits from `rclpy.node.Node`, initializes a subscriber to a 'topic' of type `std_msgs.msg.String`, and includes a callback function to process incoming messages. The `main` function handles node initialization, execution (`rclpy.spin`), and shutdown.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom std_msgs.msg import String\n\n\nclass MinimalSubscriber(Node):\n\n    def __init__(self):\n        super().__init__('minimal_subscriber')\n        self.subscription = self.create_subscription(\n            String,\n            'topic',\n            self.listener_callback,\n            10)\n        self.subscription  # prevent unused variable warning\n\n    def listener_callback(self, msg):\n        self.get_logger().info('I heard: \"%s\"' % msg.data)\n\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            minimal_subscriber = MinimalSubscriber()\n\n            rclpy.spin(minimal_subscriber)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Basic Message Field Definition in ROS 2\nDESCRIPTION: Shows the basic syntax for defining fields in a .msg file. Each field consists of a type and a name separated by a space.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfieldtype1 fieldname1\nfieldtype2 fieldname2\nfieldtype3 fieldname3\n```\n\n----------------------------------------\n\nTITLE: Sourcing the Local Workspace Setup File - Console\nDESCRIPTION: Sources the local setup.bash script in the install directory, updating environment variables to use workspace builds. Must be run in every new terminal used for development or simulation. Ensures newly built packages and overlays are available in the environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nsource install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 C++ Package with ament_cmake - Shell\nDESCRIPTION: This shell command creates a new ROS 2 package named \"launch_tutorial\" for C++ development using the ament_cmake build system and Apache-2.0 license. It prepares the basic files and folder structure for further integration of launch files or C++ code. ROS 2 must be sourced prior to running this command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nros2 pkg create --build-type ament_cmake --license Apache-2.0 launch_tutorial\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Node\nDESCRIPTION: Executes the compiled ROS 2 node (`parameter_event_handler`) from the specified package (`cpp_parameter_event_handler`). This starts the node and its parameter event monitoring.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run cpp_parameter_event_handler parameter_event_handler\n```\n\n----------------------------------------\n\nTITLE: Running the ROS2 Service Server Node\nDESCRIPTION: Command to run the compiled C++ service server node, which will wait for incoming client requests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nros2 run cpp_srvcli server\n```\n\n----------------------------------------\n\nTITLE: Building a ROS 2 Package with colcon\nDESCRIPTION: Builds a specific ROS 2 package using the colcon build system. This command targets only the py_srvcli package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select py_srvcli\n```\n\n----------------------------------------\n\nTITLE: Subscriber Callback Function\nDESCRIPTION: This Python function is the callback executed whenever the subscriber receives a message. It takes the received message (`msg`) as input and prints its data payload (`msg.data`) to the console using the node's logger.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndef listener_callback(self, msg):\n    self.get_logger().info('I heard: \"%s\"' % msg.data)\n```\n\n----------------------------------------\n\nTITLE: Getting ROS 2 Node Parameter Value and Type Using ros2 CLI (console)\nDESCRIPTION: Retrieves the current value and data type of a specific parameter on a running ROS 2 node using the 'ros2 param get' command. Example shows querying the 'background_g' parameter on the '/turtlesim' node, demonstrating parameter introspection at runtime. Requires ROS 2 environment setup and access to the target node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param get /turtlesim background_g\nInteger value is: 86\n```\n\n----------------------------------------\n\nTITLE: Importing rclpy Components\nDESCRIPTION: Imports necessary components from the `rclpy` library: `rclpy` itself for initialization and spinning, `ExternalShutdownException` for handling shutdown signals, and `Node` for creating the ROS 2 node class.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Client with Timed Requests and Callback Groups in rclcpp (C++)\nDESCRIPTION: This C++ snippet demonstrates a ROS 2 service client node using rclcpp, which calls the 'test_service' Empty service at 1-second intervals using a timer and manages callback group assignments for concurrent execution. The DemoNode class creates separate callback groups for the client and timer, submits asynchronous requests, and waits for responses with a timeout via std::future_status. Key dependencies include the rclcpp and std_srvs packages. Inputs are timer events triggering requests, while outputs are service responses logged to the console. The design ensures deadlock avoidance by using distinct callback groups for timer and client.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <memory>\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_srvs/srv/empty.hpp\"\n\nusing namespace std::chrono_literals;\n\nnamespace cb_group_demo\n{\nclass DemoNode : public rclcpp::Node\n{\npublic:\n    DemoNode() : Node(\"client_node\")\n    {\n        client_cb_group_ = nullptr;\n        timer_cb_group_ = nullptr;\n        client_ptr_ = this->create_client<std_srvs::srv::Empty>(\"test_service\", rmw_qos_profile_services_default,\n                                                                client_cb_group_);\n\n        auto timer_callback = [this](){\n            RCLCPP_INFO(this->get_logger(), \"Sending request\");\n            auto request = std::make_shared<std_srvs::srv::Empty::Request>();\n            auto result_future = client_ptr_->async_send_request(request);\n            std::future_status status = result_future.wait_for(10s);  // timeout to guarantee a graceful finish\n            if (status == std::future_status::ready) {\n                RCLCPP_INFO(this->get_logger(), \"Received response\");\n            }\n        };\n\n        timer_ptr_ = this->create_wall_timer(1s, timer_callback, timer_cb_group_);\n    }\n\nprivate:\n    rclcpp::CallbackGroup::SharedPtr client_cb_group_;\n    rclcpp::CallbackGroup::SharedPtr timer_cb_group_;\n    rclcpp::Client<std_srvs::srv::Empty>::SharedPtr client_ptr_;\n    rclcpp::TimerBase::SharedPtr timer_ptr_;\n\n};  // class DemoNode\n}   // namespace cb_group_demo\n\nint main(int argc, char* argv[])\n{\n    rclcpp::init(argc, argv);\n    auto client_node = std::make_shared<cb_group_demo::DemoNode>();\n    rclcpp::executors::MultiThreadedExecutor executor;\n    executor.add_node(client_node);\n\n    RCLCPP_INFO(client_node->get_logger(), \"Starting client node, shut down with CTRL-C\");\n    executor.spin();\n    RCLCPP_INFO(client_node->get_logger(), \"Keyboard interrupt, shutting down.\\n\");\n\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Running introspection_client\nDESCRIPTION: Runs the introspection_client node and enables Service Introspection.  This allows service data to be recorded and replayed later on.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp introspection_client --ros-args -p client_configure_introspection:=contents\n```\n\n----------------------------------------\n\nTITLE: Setting up a Virtual Environment for Colcon (Console)\nDESCRIPTION: Provides the sequence of commands to create a ROS 2 Colcon workspace directory structure, set up a Python 3 virtual environment within it using `virtualenv`, activate the environment, and create a `COLCON_IGNORE` file to prevent Colcon from processing the virtual environment directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p ~/colcon_venv/src\ncd ~/colcon_venv/\n\nvirtualenv -p python3 ./venv\nsource ./venv/bin/activate\ntouch ./venv/COLCON_IGNORE\n```\n\n----------------------------------------\n\nTITLE: Creating a Content Filtering Publisher in C++\nDESCRIPTION: This C++ code defines a ROS 2 node named `ContentFilteringPublisher`. It publishes simulated temperature data with a range from -100 to 150, incrementing by 10 every second. It uses `rclcpp` for ROS 2 node functionality, `std_msgs/msg/Float32` for the message type, and a timer to schedule publishing. The publisher uses a Quality of Service (QoS) profile.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Content-Filtering-Subscription.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <chrono>\n#include <cstdio>\n#include <memory>\n#include <utility>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"rclcpp_components/register_node_macro.hpp\"\n\n#include \"std_msgs/msg/float32.hpp\"\n\n#include \"demo_nodes_cpp/visibility_control.h\"\n\nusing namespace std::chrono_literals;\n\nnamespace demo_nodes_cpp\n{\n// The simulated temperature data starts from -100.0 and ends at 150.0 with a step size of 10.0\nconstexpr std::array<float, 3> TEMPERATURE_SETTING {-100.0f, 150.0f, 10.0f};\n\n// Create a ContentFilteringPublisher class that subclasses the generic rclcpp::Node base class.\n// The main function below will instantiate the class as a ROS node.\nclass ContentFilteringPublisher : public rclcpp::Node\n{\npublic:\n  DEMO_NODES_CPP_PUBLIC\n  explicit ContentFilteringPublisher(const rclcpp::NodeOptions & options)\n  : Node(\"content_filtering_publisher\", options)\n  {\n    // Create a function for when messages are to be sent.\n    setvbuf(stdout, NULL, _IONBF, BUFSIZ);\n    auto publish_message =\n      [this]() -> void\n      {\n        msg_ = std::make_unique<std_msgs::msg::Float32>();\n        msg_->data = temperature_;\n        temperature_ += TEMPERATURE_SETTING[2];\n        if (temperature_ > TEMPERATURE_SETTING[1]) {\n          temperature_ = TEMPERATURE_SETTING[0];\n        }\n        RCLCPP_INFO(this->get_logger(), \"Publishing: '%f'\", msg_->data);\n        // Put the message into a queue to be processed by the middleware.\n        // This call is non-blocking.\n        pub_->publish(std::move(msg_));\n      };\n    // Create a publisher with a custom Quality of Service profile.\n    // Uniform initialization is suggested so it can be trivially changed to\n    // rclcpp::KeepAll{} if the user wishes.\n    // (rclcpp::KeepLast(7) -> rclcpp::KeepAll() fails to compile)\n    rclcpp::QoS qos(rclcpp::KeepLast{7});\n    pub_ = this->create_publisher<std_msgs::msg::Float32>(\"temperature\", qos);\n\n    // Use a timer to schedule periodic message publishing.\n    timer_ = this->create_wall_timer(1s, publish_message);\n  }\n\nprivate:\n  float temperature_ = TEMPERATURE_SETTING[0];\n  std::unique_ptr<std_msgs::msg::Float32> msg_;\n  rclcpp::Publisher<std_msgs::msg::Float32>::SharedPtr pub_;\n  rclcpp::TimerBase::SharedPtr timer_;\n};\n\n}\t// namespace demo_nodes_cpp\n```\n\n----------------------------------------\n\nTITLE: Launching a ROS 2 Talker Node with Discovery Server\nDESCRIPTION: Launch a talker node that uses the Discovery Server for node discovery instead of the default multicast mechanism.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp talker --ros-args --remap __node:=talker_discovery_server\n```\n\n----------------------------------------\n\nTITLE: Run turtlesim Node\nDESCRIPTION: This command starts the turtlesim node, which is a simple ROS 2 simulation. It requires sourcing the ROS 2 environment before execution. The turtlesim node creates a graphical window with a simulated turtle.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Checking RMW Implementation in Use (Console)\nDESCRIPTION: This snippet illustrates the method of checking which RMW implementation is currently active. It explicitly mentions that the RMW_IMPLEMENTATION environment variable stores the identifier of the RMW in use. If the variable is not set, it's safe to assume the default RMW for the ROS distro is being used.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Package with ament_cmake Build Type Using Console\nDESCRIPTION: This snippet shows the terminal commands to create a new ROS 2 package named 'more_interfaces' with the build type set to ament_cmake and Apache-2.0 license. It also demonstrates how to create a 'msg' directory inside the package for placing message definition files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 more_interfaces\n$ mkdir more_interfaces/msg\n```\n\n----------------------------------------\n\nTITLE: Include rclcpp Header - C++\nDESCRIPTION: This code snippet demonstrates how to replace the ROS 1 roscpp header with the ROS 2 rclcpp header in the C++ code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// #include \"ros/ros.h\"\n#include \"rclcpp/rclcpp.hpp\"\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 package (Linux)\nDESCRIPTION: These commands create a new ROS 2 package named 'sync_async_node_example_cpp' with specified build type, license, and dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/ros2_ws/src\n$ cd ~/ros2_ws/src\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 --dependencies rclcpp std_msgs -- sync_async_node_example_cpp\n```\n\n----------------------------------------\n\nTITLE: Downloading Subscriber Code\nDESCRIPTION: These commands download the Python source code for the minimal subscriber example directly from the ROS 2 examples GitHub repository using `curl`. The first command is for standard Unix-like shells, while the second is specifically for Powershell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_8\n\nLANGUAGE: Console\nCODE:\n```\n$ curl -sk https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_subscriber/examples_rclpy_minimal_subscriber/subscriber_member_function.py -o subscriber_member_function.py\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_subscriber/examples_rclpy_minimal_subscriber/subscriber_member_function.py -o subscriber_member_function.py\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 talker_py Node (Console)\nDESCRIPTION: Platform-specific commands to run the compiled `talker_py_node` from the `talker_py` package using `ros2 run`. This involves navigating to the workspace directory, sourcing the local installation setup script (`install/setup.bash` or `install\\setup.bat`), and then executing the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\ncd ~/ros2_talker_py\n. install/setup.bash\nros2 run talker_py talker_py_node\n```\n\nLANGUAGE: bash\nCODE:\n```\n# macOS\ncd ~/ros2_talker_py\n. install/setup.bash\nros2 run talker_py talker_py_node\n```\n\nLANGUAGE: batch\nCODE:\n```\nREM Windows\ncd \\ros2_talker_py\ncall install\\setup.bat\nros2 run talker_py talker_py_node\n```\n\n----------------------------------------\n\nTITLE: Inspecting Bagged Action Data with ros2 bag info (Console)\nDESCRIPTION: This command provides detailed metadata on a recorded action bag, including associated files, storage details, action type, topics, services, and event counts. The input is a ROS 2 bag filename from a prior action recording. Used for auditing what actions, topics, and services are present in the bag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag info <bag_file_name>\nFiles:             rosbag2_2025_04_17-22_20_40_0.mcap\nBag size:          20.7 KiB\nStorage id:        mcap\nROS Distro:        rolling\nDuration:          9.019568080s\nStart:             Apr 17 2025 22:20:47.263125070 (1744953647.263125070)\nEnd:               Apr 17 2025 22:20:56.282693150 (1744953656.282693150)\nMessages:          0\nTopic information:\nServices:          0\nService information:\nActions:           1\nAction information:\n  Action: /fibonacci | Type: example_interfaces/action/Fibonacci | Topics: 2 | Service: 3 | Serialization Format: cdr\n    Topic: feedback | Count: 9\n    Topic: status | Count: 3\n    Service: send_goal | Event Count: 4\n    Service: cancel_goal | Event Count: 0\n    Service: get_result | Event Count: 4\n```\n\n----------------------------------------\n\nTITLE: Installing rosbag2 package in ROS 2\nDESCRIPTION: Command to install the rosbag2 package if it's not already installed with your ROS 2 distribution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install ros-{DISTRO}-rosbag2\n```\n\n----------------------------------------\n\nTITLE: Resolving Package Dependencies with rosdep - Linux Shell\nDESCRIPTION: Resolves and installs missing package dependencies declared in the packages within the workspace using rosdep. Must be run from the workspace root directory. The '-i' option installs missing dependencies, '--from-path src' scans source directory, and '-y' auto-confirms installation. Supported only on Linux; skipped on macOS and Windows. Requires rosdep installed and configured. Confirms all dependencies are installed or installs those missing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd ..\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Creating a CMake Package\nDESCRIPTION: This command creates a new ROS2 package using the 'ament_cmake' build type. It sets the license to 'Apache-2.0' and requires the 'ros2 pkg create' tool.  The package name is a required argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 <package_name>\n```\n\n----------------------------------------\n\nTITLE: Setting ROS_DOMAIN_ID Environment Variable on macOS\nDESCRIPTION: This snippet sets the ROS_DOMAIN_ID variable in a macOS shell session, which can be made persistent by adding it to `~/.bash_profile`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ export ROS_DOMAIN_ID=<your_domain_id>\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Workspace Source Directory - Shell\nDESCRIPTION: Creates a new workspace directory named 'ros2_ws' with a 'src' subdirectory, and navigates into the 'src' directory. This layout is standard for ROS 2 workspaces, placing all packages inside 'src'. Commands differ slightly across OS due to shell differences. No parameters; expected effect is ready workspace source directory for package cloning or creation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/ros2_ws/src\n$ cd ~/ros2_ws/src\n```\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/ros2_ws/src\n$ cd ~/ros2_ws/src\n```\n\nLANGUAGE: console\nCODE:\n```\n$ md \\ros2_ws\\src\n$ cd \\ros2_ws\\src\n```\n\n----------------------------------------\n\nTITLE: Running turtlesim teleop_turtle Node\nDESCRIPTION: Starts the teleop_turtle node. This node allows keyboard control of the turtle within the turtlesim window. It publishes commands to the /turtle1/cmd_vel topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Configuring ROS 2 Launch File for Robot Simulation\nDESCRIPTION: A Python launch file that sets up the robot simulation with the obstacle avoider node. It configures the necessary parameters and includes all required nodes for the simulation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# robot_launch_sensor.py - Sets up the complete simulation with obstacle avoidance\n# Full code referenced in the tutorial\n```\n\n----------------------------------------\n\nTITLE: Main function for running the Fibonacci action client in ROS 2\nDESCRIPTION: Initializes ROS 2, creates an instance of the Fibonacci action client, sends a goal for a specific Fibonacci sequence order, and waits for the result, demonstrating the client-side workflow for goal management and response handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    rclpy.init()\n    node = FibonacciActionClient()\n    future = node.send_goal(5)\n    rclpy.spin_until_future_complete(node, future)\n    # process result or handle exceptions\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Running specific test functions with colcon in ROS2\nDESCRIPTION: Command to run a specific test function by name using colcon and pytest arguments. The -k flag filters tests by name pattern.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Python.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ colcon test --packages-select <name-of-pkg> --pytest-args -k name_of_the_test_function\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with Debug Symbols using Colcon\nDESCRIPTION: Command to build a ROS 2 package using colcon, ensuring debug symbols are included. The `--cmake-clean-cache` flag clears any previous CMake configuration, and `--mixin debug` applies the necessary compiler flags (like -g) for debugging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --cmake-clean-cache --mixin debug\n```\n\n----------------------------------------\n\nTITLE: Running a component container with the MultiThreadedExecutor\nDESCRIPTION: This command runs `component_container_mt` with MultiThreadedExecutor. The number of threads can be specified with the `thread_num` parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rclcpp_components component_container_mt --ros-args -p thread_num:=4\n```\n\n----------------------------------------\n\nTITLE: Running a ROS2 node with a launch file\nDESCRIPTION: Command to run a ROS2 node using a launch file, showing how the parameter value affects the node's output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch python_parameters python_parameters_launch.py\n[INFO] [custom_minimal_param_node]: Hello earth!\n```\n\n----------------------------------------\n\nTITLE: Inspecting Bagged Service Data with ros2 bag info (Console)\nDESCRIPTION: Using the 'ros2 bag info' command with a bag file, this snippet displays metadata including files, storage backend, ROS Distro, duration, messages, and detailed service information about what was recorded. It expects the bag file created from a previous recording session. Input is the bag filename; output is a summary table describing content, size, and types of the recorded data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag info <bag_file_name>\nFiles:             rosbag2_2024_04_24-14_59_17_0.mcap\nBag size:          15.1 KiB\nStorage id:        mcap\nROS Distro:        rolling\nDuration:          9.211s\nStart:             Apr 24 2024 14:59:17.676 (1713995957.676)\nEnd:               Apr 24 2024 14:59:26.888 (1713995966.888)\nMessages:          0\nTopic information:\nService:           1\nService information: Service: /add_two_ints | Type: example_interfaces/srv/AddTwoInts | Event Count: 78 | Serialization Format: cdr\n```\n\n----------------------------------------\n\nTITLE: Enabling Loaned Messages Temporarily (Linux/macOS Shell)\nDESCRIPTION: Sets the ROS_DISABLE_LOANED_MESSAGES environment variable to '0' for the current shell session using the export command. This explicitly enables the loaned messages feature for subscriptions in ROS 2 for this session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_DISABLE_LOANED_MESSAGES=0\n```\n\n----------------------------------------\n\nTITLE: Running the Standalone Data Generator and Playing Back Bag Data (Console)\nDESCRIPTION: This set of commands runs the standalone C++ executable that writes synthetic data to a ROS 2 bag, then plays back its content. The node completes almost instantly, and the resulting bag file can be played back at the intended pace using ros2 bag play.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_18\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run bag_recorder_nodes data_generator_executable\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 bag play big_synthetic_bag\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Node Services with Docker Compose - YAML\nDESCRIPTION: This snippet shows a minimal docker-compose.yaml configuration for running two ROS 2 nodes (talker and listener) in separate services. Each service is defined with the ROS image, specifying the node to run as the command. The listener service depends on the talker, ensuring correct startup order. No extra configuration or networking is included by default; the version is set to '2'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\n\nservices:\n  talker:\n    image: osrf/ros:{DISTRO}-desktop\n    command: ros2 run demo_nodes_cpp talker\n  listener:\n    image: osrf/ros:{DISTRO}-desktop\n    command: ros2 run demo_nodes_cpp listener\n    depends_on:\n      - talker\n```\n\n----------------------------------------\n\nTITLE: Creating a Quaternion from Roll/Pitch/Yaw in C++\nDESCRIPTION: Demonstrates creating a unit quaternion with no rotation (identity quaternion) in ROS 2 using tf2::Quaternion, including setting rotation via RPY angles and printing components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <tf2/LinearMath/Quaternion.hpp>\n\n tf2::Quaternion q;\n // Create a quaternion from roll/pitch/yaw in radians (0, 0, 0)\n q.setRPY(0, 0, 0);\n // Print the quaternion components (0, 0, 0, 1)\n RCLCPP_INFO(this->get_logger(), \"%f %f %f %f\",\n             q.x(), q.y(), q.z(), q.w());\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 Workspace Setup Files in Console\nDESCRIPTION: Executes the setup script for the ROS2 workspace environment across different operating systems to configure environment variables and paths necessary for running ROS2 commands. Dependencies include having a built ROS2 workspace with setup files present. Inputs are platform-specific commands to source the setup, outputs are configured terminals ready to run ROS2 executables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ call install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Overriding Global New and Delete Operators to Track Memory Allocations in C++\nDESCRIPTION: Provides global operator new and delete overrides that increment global counters whenever memory is allocated or deallocated. The overrides are guarded by a boolean flag is_running to only count during active execution phases such as spinning. This method helps compare the count of default heap allocations against custom allocator usage to verify real-time memory safety.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n void * operator new(std::size_t size)\n {\n   if (is_running) {\n     global_runtime_allocs++;\n   }\n   return std::malloc(size);\n }\n\n void operator delete(void * ptr, size_t) noexcept\n {\n   if (ptr != nullptr) {\n     if (is_running) {\n       global_runtime_deallocs++;\n     }\n     std::free(ptr);\n   }\n }\n\n void operator delete(void * ptr) noexcept\n {\n   if (ptr != nullptr) {\n     if (is_running) {\n       global_runtime_deallocs++;\n     }\n     std::free(ptr);\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Configure Topic Name (C++)\nDESCRIPTION: This code snippet, commented out, demonstrates the ability to customize the topic name on which statistics data will be published. The default topic is `/statistics`. By uncommenting and modifying the provided line, users can specify an alternative topic name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// configure the topic name (default '/statistics')\n// options.topic_stats_options.publish_topic = \"/my_topic\"\n```\n\n----------------------------------------\n\nTITLE: Updating processMessage for visualization\nDESCRIPTION: This updates the `processMessage` function to transform the scene node based on the message header's frame and set the position of the shape object according to the message data. This provides the actual visualization of the Point2D message in the RViz display. Includes frame transformations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nvoid PointDisplay::processMessage(const rviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtr msg)\n{\n  RVIZ_COMMON_LOG_INFO_STREAM(\"We got a message with frame \" << msg->header.frame_id);\n\n  Ogre::Vector3 position;\n  Ogre::Quaternion orientation;\n  if (!context_->getFrameManager()->getTransform(msg->header, position, orientation)) {\n    RVIZ_COMMON_LOG_DEBUG_STREAM(\"Error transforming from frame '\" << msg->header.frame_id <<\n        \"' to frame '\" << qPrintable(fixed_frame_) << \"'\");\n  }\n\n  scene_node_->setPosition(position);\n  scene_node_->setOrientation(orientation);\n\n  Ogre::Vector3 point_pos;\n  point_pos.x = msg->x;\n  point_pos.y = msg->y;\n  point_shape_->setPosition(point_pos);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Timestamped Messages Automatically with ROS 2 CLI in Console\nDESCRIPTION: This snippet shows how to automatically fill timestamp fields in messages published to ROS 2 topics using the 'auto' value for std_msgs/msg/Header fields and 'now' for builtin_interfaces/msg/Time fields. The examples illustrate publishing PoseStamped and TimeReference messages where header.stamp and time_ref fields are filled with the current time by the publisher command. Dependencies include having appropriate ROS 2 message definitions and running ros2 topic pub. Inputs are message fields with timestamp placeholders; outputs are messages with current time stamps set automatically.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /pose geometry_msgs/msg/PoseStamped '{header: \"auto\", pose: {position: {x: 1.0, y: 2.0, z: 3.0}}}'\n\n$ ros2 topic pub /reference sensor_msgs/msg/TimeReference '{header: \"auto\", time_ref: \"now\", source: \"dumy\"}'\n```\n\n----------------------------------------\n\nTITLE: Implementing a TF2 Frame Listener in Python for ROS2\nDESCRIPTION: A Python node that listens to TF2 transformations between frames. It spawns a second turtle and makes it follow the first turtle by computing velocity commands based on the transformation between their frames.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport math\n\nfrom geometry_msgs.msg import Twist\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom tf2_ros import TransformException\nfrom tf2_ros.buffer import Buffer\nfrom tf2_ros.transform_listener import TransformListener\n\nfrom turtlesim.srv import Spawn\n\n\nclass FrameListener(Node):\n\n    def __init__(self):\n        super().__init__('turtle_tf2_frame_listener')\n\n        # Declare and acquire `target_frame` parameter\n        self.target_frame = self.declare_parameter(\n          'target_frame', 'turtle1').get_parameter_value().string_value\n\n        self.tf_buffer = Buffer()\n        self.tf_listener = TransformListener(self.tf_buffer, self)\n\n        # Create a client to spawn a turtle\n        self.spawner = self.create_client(Spawn, 'spawn')\n        # Boolean values to store the information\n        # if the service for spawning turtle is available\n        self.turtle_spawning_service_ready = False\n        # if the turtle was successfully spawned\n        self.turtle_spawned = False\n\n        # Create turtle2 velocity publisher\n        self.publisher = self.create_publisher(Twist, 'turtle2/cmd_vel', 1)\n\n        # Call on_timer function every second\n        self.timer = self.create_timer(1.0, self.on_timer)\n\n    def on_timer(self):\n        # Store frame names in variables that will be used to\n        # compute transformations\n        from_frame_rel = self.target_frame\n        to_frame_rel = 'turtle2'\n\n        if self.turtle_spawning_service_ready:\n            if self.turtle_spawned:\n                # Look up for the transformation between target_frame and turtle2 frames\n                # and send velocity commands for turtle2 to reach target_frame\n                try:\n                    t = self.tf_buffer.lookup_transform(\n                        to_frame_rel,\n                        from_frame_rel,\n                        rclpy.time.Time())\n                except TransformException as ex:\n                    self.get_logger().info(\n                        f'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}')\n                    return\n\n                msg = Twist()\n                scale_rotation_rate = 1.0\n                msg.angular.z = scale_rotation_rate * math.atan2(\n                    t.transform.translation.y,\n                    t.transform.translation.x)\n\n                scale_forward_speed = 0.5\n                msg.linear.x = scale_forward_speed * math.sqrt(\n                    t.transform.translation.x ** 2 +\n                    t.transform.translation.y ** 2)\n\n                self.publisher.publish(msg)\n            else:\n                if self.result.done():\n                    self.get_logger().info(\n                        f'Successfully spawned {self.result.result().name}')\n                    self.turtle_spawned = True\n                else:\n                    self.get_logger().info('Spawn is not finished')\n        else:\n            if self.spawner.service_is_ready():\n                # Initialize request with turtle name and coordinates\n                # Note that x, y and theta are defined as floats in turtlesim_msgs/srv/Spawn\n                request = Spawn.Request()\n                request.name = 'turtle2'\n                request.x = float(4)\n                request.y = float(2)\n                request.theta = float(0)\n                # Call request\n                self.result = self.spawner.call_async(request)\n                self.turtle_spawning_service_ready = True\n            else:\n                # Check if the service is ready\n                self.get_logger().info('Service is not ready')\n\n\ndef main():\n    try:\n        with rclpy.init():\n            node = FrameListener()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Node\nDESCRIPTION: Executes the ROS 2 node named `node_with_parameters` from the package `python_parameter_event_handler` using the `ros2 run` command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nros2 run python_parameter_event_handler node_with_parameters\n```\n\n----------------------------------------\n\nTITLE: Skipping Packages During ROS 2 Build\nDESCRIPTION: This code snippet shows how to skip specific packages during the ROS 2 build process using the `--packages-skip` flag in `colcon build`.  This is useful for avoiding build failures due to specific package dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install --packages-skip image_tools intra_process_demo\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Domain ID Port Calculator\nDESCRIPTION: This HTML snippet defines the user interface for a web-based calculator. It provides input fields for the DDS Domain ID and Participant ID, and output fields to display the calculated Discovery Multicast, User Multicast, Discovery Unicast, and User Unicast UDP ports based on the provided IDs. It serves as the frontend for a JavaScript function that performs the actual port calculations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Domain-ID.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tr>\n    <td style=\"text-align: right; vertical-align: middle;\"><label>Domain ID:</label></td>\n    <td><input type=\"number\" min=\"0\" max=\"232\" size=\"3\" class=\"display\" value=\"0\" id=\"domainID\" onChange=\"calculate(this.value)\"/></td>\n  </tr>\n  <tr>\n    <td style=\"text-align: right; vertical-align: middle;\"><label>Participant ID:</label></td>\n    <td><input type=\"number\" min=\"0\" size=\"3\" class=\"display\" value=\"0\" id=\"participantID\" onChange=\"calculate(this.value)\"/></td>\n  </tr>\n</table>\n<hr/>\n<table>\n  <tr>\n    <td style=\"text-align: right; vertical-align: middle;\"><label>Discovery Multicast Port:</label></td>\n    <td><input type=\"text\" size=\"5\" class=\"discoveryMulticastPort\" disabled/></td>\n  </tr>\n  <tr>\n    <td style=\"text-align: right; vertical-align: middle;\"><label>User Multicast Port:</label></td>\n    <td><input type=\"text\" size=\"5\" class=\"userMulticastPort\" disabled/></td>\n  </tr>\n  <tr>\n    <td style=\"text-align: right; vertical-align: middle;\"><label>Discovery Unicast Port:</label></td>\n    <td><input type=\"text\" size=\"5\" class=\"discoveryUnicastPort\" disabled/></td>\n  </tr>\n  <tr>\n    <td style=\"text-align: right; vertical-align: middle;\"><label>User Unicast Port:</label></td>\n    <td><input type=\"text\" size=\"5\" class=\"userUnicastPort\" disabled/></td>\n  </tr>\n</table>\n<br/>\n<br/>\n```\n\n----------------------------------------\n\nTITLE: Python Asynchronous Service Client Implementation\nDESCRIPTION: Defines a ROS2 Python node class for an asynchronous service client using rclpy, with methods to wait for service availability, send requests, and process responses. Uses tutorial_interfaces.srv.AddThreeInts; requires rclpy and standard ROS2 Python libraries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nfrom tutorial_interfaces.srv import AddThreeInts\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\n\nclass MinimalClientAsync(Node):\n\n    def __init__(self):\n        super().__init__('minimal_client_async')\n        self.cli = self.create_client(AddThreeInts, 'add_three_ints')\n        while not self.cli.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('service not available, waiting again...')\n        self.req = AddThreeInts.Request()\n\n    def send_request(self):\n        self.req.a = 41\n        self.req.b = 1\n        self.req.c = 1\n        return self.cli.call_async(self.req)\n\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            minimal_client = MinimalClientAsync()\n            future = minimal_client.send_request()\n            rclpy.spin_until_future_complete(minimal_client, future)\n            response = future.result()\n            minimal_client.get_logger().info(\n                'Result of add_three_ints: for %d + %d + %d = %d' %\n                (minimal_client.req.a, minimal_client.req.b, minimal_client.req.c, response.sum))\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n----------------------------------------\n\nTITLE: Defining Action File Structure in ROS 2\nDESCRIPTION: Shows the general structure for .action files in ROS 2. The format includes request, result, and feedback message definitions separated by triple dashes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Request\n---\n# Result\n---\n# Feedback\n```\n\n----------------------------------------\n\nTITLE: Example Output of Publisher Node\nDESCRIPTION: This snippet shows example console output from the running ROS 2 publisher node (`minimal_publisher`). It logs informational messages indicating that it is publishing data, including the message content and an incrementing counter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_19\n\nLANGUAGE: Console\nCODE:\n```\n[info] [minimal_publisher]: publishing: \"hello world: 0\"\n[info] [minimal_publisher]: publishing: \"hello world: 1\"\n[info] [minimal_publisher]: publishing: \"hello world: 2\"\n[info] [minimal_publisher]: publishing: \"hello world: 3\"\n[info] [minimal_publisher]: publishing: \"hello world: 4\"\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing a ROS 2 parameter node in Python\nDESCRIPTION: Complete Python class that implements a ROS 2 node with a parameter. The node declares a parameter 'my_parameter', uses it in a timer callback, and resets it to the default value.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nclass MinimalParam(Node):\n    def __init__(self):\n        super().__init__('minimal_param_node')\n\n        self.declare_parameter('my_parameter', 'world')\n\n        self.timer = self.create_timer(1, self.timer_callback)\n\n    def timer_callback(self):\n        my_param = self.get_parameter('my_parameter').get_parameter_value().string_value\n\n        self.get_logger().info('Hello %s!' % my_param)\n\n        my_new_param = rclpy.parameter.Parameter(\n            'my_parameter',\n            rclpy.Parameter.Type.STRING,\n            'world'\n        )\n        all_new_parameters = [my_new_param]\n        self.set_parameters(all_new_parameters)\n\ndef main():\n    try:\n        with rclpy.init():\n            node = MinimalParam()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Listing Topics and Node Info in ROS2\nDESCRIPTION: CLI commands to list active topics, inspect node information, and echo topic messages in ROS2, with options to disable the daemon for troubleshooting or testing specific configurations. Useful for verifying node discovery and topic visibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 topic list\n$ ros2 node info /talker\n$ ros2 topic info /chatter\n$ ros2 topic echo /chatter\n```\n\n----------------------------------------\n\nTITLE: Listing Active Services with ros2 CLI (Console, ROS 2)\nDESCRIPTION: This command lists all currently active ROS 2 services in the system. It requires an active ROS 2 workspace and running nodes that provide services. Outputs a newline-separated list of service names. No parameters other than the base command are needed. Constraints: must be run from a terminal with sourced ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service list\n```\n\n----------------------------------------\n\nTITLE: Sourcing Workspace Setup Files\nDESCRIPTION: Demonstrates how to source the workspace setup files after a successful build to make the package's executables and resources available in the current terminal session. Different commands are used for Bash (Linux/macOS), Windows Command Prompt (`.bat`), and Windows PowerShell (`.ps1`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n# Linux / macOS (Bash)\n$ . install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n# Windows Command Prompt\n$ call install\\setup.bat\n```\n\nLANGUAGE: console\nCODE:\n```\n# Windows PowerShell\n$ .\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Creating ROS2 Package\nDESCRIPTION: Creates a new ROS 2 package named 'cpp_srvcli' using ament_cmake as the build type. It also automatically adds 'rclcpp' and 'example_interfaces' as dependencies in package.xml and CMakeLists.txt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\nros2 pkg create --build-type ament_cmake --license Apache-2.0 cpp_srvcli --dependencies rclcpp example_interfaces\n```\n\n----------------------------------------\n\nTITLE: Create ROS2 package with dependencies\nDESCRIPTION: This command creates a new ROS2 package named 'cpp_parameters' using the 'ament_cmake' build type and specifies 'rclcpp' as a dependency. The '--license' argument sets the license to 'Apache-2.0'. This sets up the basic structure for developing a ROS2 node in C++.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nros2 pkg create --build-type ament_cmake --license Apache-2.0 cpp_parameters --dependencies rclcpp\n```\n\n----------------------------------------\n\nTITLE: Using ament_cmake_python in CMakeLists.txt to install Python package (CMake)\nDESCRIPTION: This snippet demonstrates the minimum CMake configuration to locate the ament_cmake_python package and install a Python package directory named after the project (using ${PROJECT_NAME}) as a Python package within the build. ament_python_install_package is the key function, and its argument must match the directory containing Python code alongside the CMakeLists.txt. This setup enables integration of Python modules within the CMake build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Python-Documentation.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake_python REQUIRED)\n# ...\nament_python_install_package(${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining a Continuous Joint for R2D2 Head in URDF\nDESCRIPTION: XML definition of a continuous joint for the robot's head that can rotate infinitely around the z-axis. This joint connects the base_link to the head with an origin offset on the z-axis.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<joint name=\"head_swivel\" type=\"continuous\">\n  <parent link=\"base_link\"/>\n  <child link=\"head\"/>\n  <axis xyz=\"0 0 1\"/>\n  <origin xyz=\"0 0 0.3\"/>\n</joint>\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamic Broadcaster Executable CMake\nDESCRIPTION: This CMake code block configures the installation of the `dynamic_frame_tf2_broadcaster` executable. It specifies that the target should be installed in the `lib/${PROJECT_NAME}` directory, making it findable by `ros2 run` after building and sourcing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS\n    dynamic_frame_tf2_broadcaster\n    DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 Subscriber Node\nDESCRIPTION: This command uses the `ros2 run` tool to execute the `listener` executable from the `py_pubsub` package. This starts the subscriber node, which will listen for messages on the 'topic' and print them to the console when received.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_20\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run py_pubsub listener\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Transform with Timeout Using tf2 in C++\nDESCRIPTION: This snippet enhances the lookupTransform() call by adding an optional timeout parameter set to 50 milliseconds (50ms). This causes the method to block and wait up to that duration for the requested transform to become available in the buffer before throwing an exception. This approach handles latency between broadcasters and buffers ensuring transform availability. The snippet depends on the C++14 or newer chrono literals for ms and requires proper tf2 and rclcpp setup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::Time now = this->get_clock()->now();\ntry {\n    t = tf_buffer_->lookupTransform(\n        toFrameRel,\n        fromFrameRel,\n        now,\n        50ms);\n} catch (const tf2::TransformException & ex) {\n\n```\n\n----------------------------------------\n\nTITLE: Defining a ROS2 Node (C++)\nDESCRIPTION: This C++ code snippet defines a basic ROS2 node class named `VincentDriver` that inherits from `rclcpp::Node`. It's the starting point for the composable node, representing the core functionality that will be integrated into a container.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace palomino\n{\n    class VincentDriver : public rclcpp::Node\n    {\n        // ...\n    };\n}\n\nint main(int argc, char * argv[])\n{\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<palomino::VincentDriver>());\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Running turtlesim nodes\nDESCRIPTION: This command initializes the turtlesim node and the turtle_teleop_key node.  The turtlesim node provides a graphical interface for a turtle, and the turtle_teleop_key node allows the user to control the turtle using the keyboard.  These nodes will be used in subsequent commands to showcase ROS topic functionalities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Adding Executable to CMakeLists.txt CMake\nDESCRIPTION: This CMake code block adds an executable target named `dynamic_frame_tf2_broadcaster` from the specified source file. It then links the necessary ROS2 libraries (`geometry_msgs`, `rclcpp`, `tf2_ros`) required by the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(dynamic_frame_tf2_broadcaster src/dynamic_frame_tf2_broadcaster.cpp)\ntarget_link_libraries(\n    dynamic_frame_tf2_broadcaster PUBLIC\n    ${geometry_msgs_TARGETS}\n    rclcpp::rclcpp\n    tf2_ros::tf2_ros\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Fast DDS XML Env Vars for Subscriber (Linux/macOS)\nDESCRIPTION: Sets environment variables on Linux/macOS to use the `rmw_fastrtps_cpp` implementation, enable loading QoS settings from an XML file (`RMW_FASTRTPS_USE_QOS_FROM_XML=1`), and specify the path to the XML configuration file (`FASTRTPS_DEFAULT_PROFILES_FILE`). These are required before running the subscriber node to ensure it uses the same custom Fast DDS configurations as the publisher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n$ export RMW_FASTRTPS_USE_QOS_FROM_XML=1\n$ export FASTRTPS_DEFAULT_PROFILES_FILE=path/to/SyncAsync.xml\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files (Windows CMD)\nDESCRIPTION: Executes the generated batch setup file located in the 'install' directory using the 'call' command in the Windows Command Prompt. This updates the current command prompt environment, making the built ROS 2 package available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ncall install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Building the ROS2 Workspace Using Colcon in Console\nDESCRIPTION: This console command snippet instructs the user on building the entire ROS2 workspace including the custom action client package using the ``colcon build`` tool. It is a required step after configuring CMakeLists.txt and before running the action client to ensure all code is compiled properly. The snippet assumes the terminal is in the top-level directory of the ROS2 workspace configured for the package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\n```\n\n----------------------------------------\n\nTITLE: Constants Examples in ROS 2 Messages\nDESCRIPTION: Examples of defining constants in ROS 2 messages, including integer and string constants. Note that constant names must be uppercase.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nint32 X=123\nint32 Y=-123\nstring FOO=\"foo\"\nstring EXAMPLE='bar'\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Action Example in ROS 2\nDESCRIPTION: An example action definition for a Fibonacci sequence calculation. It sends an integer order, receives an array of integers as the result, and provides intermediate array results as feedback.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_10\n\nLANGUAGE: code\nCODE:\n```\nint32 order\n---\nint32[] sequence\n---\nint32[] sequence\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Workspace with Colcon in Bash\nDESCRIPTION: Invokes 'colcon build' in the ROS 2 workspace to compile all packages, skipping 'python_qt_binding' due to a known issue. Requires colcon and all build dependencies to be installed. Accepts '--symlink-install' for development convenience and '--packages-skip-by-dep' to avoid problematic packages. Output is a built workspace with install/setup scripts. Constraint: Excludes PyQt-related bindings until further notice.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/ros2_{DISTRO}/\ncolcon build --symlink-install --packages-skip-by-dep python_qt_binding\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files\nDESCRIPTION: Sources the generated setup file in the workspace's `install` directory. This adds the workspace's executables and libraries to the environment, making the built ROS 2 package accessible.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nsource install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\ncall install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Implementing a Static TF2 Broadcaster Node in Python\nDESCRIPTION: Complete Python script for a ROS 2 node (`StaticFramePublisher`) that publishes a static transform. It takes transformation details (child frame name, translation, Euler angles for rotation) as command-line arguments, converts Euler angles to a quaternion, creates a `TransformStamped` message, and uses `StaticTransformBroadcaster` to publish it once upon initialization. Requires `rclpy`, `geometry_msgs`, `numpy`, and `tf2_ros` libraries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport math\nimport sys\n\nfrom geometry_msgs.msg import TransformStamped\n\nimport numpy as np\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster\n\n\ndef quaternion_from_euler(ai, aj, ak):\n    ai /= 2.0\n    aj /= 2.0\n    ak /= 2.0\n    ci = math.cos(ai)\n    si = math.sin(ai)\n    cj = math.cos(aj)\n    sj = math.sin(aj)\n    ck = math.cos(ak)\n    sk = math.sin(ak)\n    cc = ci*ck\n    cs = ci*sk\n    sc = si*ck\n    ss = si*sk\n\n    q = np.empty((4, ))\n    q[0] = cj*sc - sj*cs\n    q[1] = cj*ss + sj*cc\n    q[2] = cj*cs - sj*sc\n    q[3] = cj*cc + sj*ss\n\n    return q\n\n\nclass StaticFramePublisher(Node):\n    \"\"\"\n    Broadcast transforms that never change.\n\n    This example publishes transforms from `world` to a static turtle frame.\n    The transforms are only published once at startup, and are constant for all\n    time.\n    \"\"\"\n\n    def __init__(self, transformation):\n        super().__init__('static_turtle_tf2_broadcaster')\n\n        self.tf_static_broadcaster = StaticTransformBroadcaster(self)\n\n        # Publish static transforms once at startup\n        self.make_transforms(transformation)\n\n    def make_transforms(self, transformation):\n        t = TransformStamped()\n\n        t.header.stamp = self.get_clock().now().to_msg()\n        t.header.frame_id = 'world'\n        t.child_frame_id = transformation[1]\n\n        t.transform.translation.x = float(transformation[2])\n        t.transform.translation.y = float(transformation[3])\n        t.transform.translation.z = float(transformation[4])\n        quat = quaternion_from_euler(\n            float(transformation[5]), float(transformation[6]), float(transformation[7]))\n        t.transform.rotation.x = quat[0]\n        t.transform.rotation.y = quat[1]\n        t.transform.rotation.z = quat[2]\n        t.transform.rotation.w = quat[3]\n\n        self.tf_static_broadcaster.sendTransform(t)\n\n\ndef main():\n    try:\n        logger = rclpy.logging.get_logger('logger')\n\n        # obtain parameters from command line arguments\n        if len(sys.argv) != 8:\n            logger.info('Invalid number of parameters. Usage: \\n'\n                        '$ ros2 run learning_tf2_py static_turtle_tf2_broadcaster'\n                        'child_frame_name x y z roll pitch yaw')\n            sys.exit(1)\n\n        if sys.argv[1] == 'world':\n            logger.info('Your static turtle name cannot be \"world\"')\n            sys.exit(2)\n\n        # pass parameters and initialize node\n        with rclpy.init():\n            node = StaticFramePublisher(sys.argv)\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Verifying Published Messages on the address_book ROS 2 Topic via CLI\nDESCRIPTION: Shows how to open a new terminal, source the workspace environment, and echo messages on the '/address_book' topic to confirm that the publisher node is broadcasting the AddressBook messages correctly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n$ ros2 topic echo /address_book\n```\n\n----------------------------------------\n\nTITLE: Sourcing setup files in Linux after build\nDESCRIPTION: This command sources the 'setup.bash' script to configure the environment in the current terminal, enabling ROS2 commands and package paths. It's essential to run this after building to access the newly built workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_16\n\nLANGUAGE: Console\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Setting Up ROS 2 Environment on Ubuntu\nDESCRIPTION: Command to source the ROS 2 setup file, which configures the environment variables needed to use ROS 2. The shell extension can be changed based on the user's shell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\nsource /opt/ros/{DISTRO}/setup.bash\n```\n\n----------------------------------------\n\nTITLE: package.xml Dependencies for ROS2 Publisher/Subscriber and Service/Client\nDESCRIPTION: Specifies project dependencies on 'tutorial_interfaces' package for both C++ and Python, ensuring proper build and runtime resolution of message and service types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\n<depend>tutorial_interfaces</depend>\n```\n\nLANGUAGE: python\nCODE:\n```\n<exec_depend>tutorial_interfaces</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Creating ROS2 Node (C++)\nDESCRIPTION: Creates a shared pointer to a new ROS 2 node instance using `rclcpp::Node::make_shared`. The node is named 'minimal_service'. This node serves as the main entry point for ROS 2 communication components like services, topics, and parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ng_node = rclcpp::Node::make_shared(\"minimal_service\");\n```\n\n----------------------------------------\n\nTITLE: Opening ROS 2 Bag File with Reader\nDESCRIPTION: This code demonstrates how to configure `StorageOptions` and `ConverterOptions` and open a bag file named 'my_bag' using the initialized `rosbag2_py.SequentialReader` object. It specifies 'mcap' as the storage format.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nstorage_options = rosbag2_py.StorageOptions(\n       uri='my_bag',\n       storage_id='mcap')\n   converter_options = rosbag2_py.ConverterOptions('', '')\n   self.reader.open(storage_options, converter_options)\n```\n\n----------------------------------------\n\nTITLE: Updating ROS2 Repository List on Windows (PowerShell)\nDESCRIPTION: Updates the ros2.repos file to the latest version for a specific ROS 2 distribution using curl within PowerShell. It navigates to the ros2 directory and uses curl to download the updated ros2.repos file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ncd \\dev\\ros2_{DISTRO}\ncurl https://raw.githubusercontent.com/ros2/ros2/{REPOS_FILE_BRANCH}/ros2.repos -o ros2.repos\n```\n\n----------------------------------------\n\nTITLE: Fixed Frame Broadcaster - Python\nDESCRIPTION: This code creates a ROS2 node that broadcasts a fixed transform between 'turtle1' and 'carrot1'. It initializes a TransformBroadcaster and publishes a TransformStamped message with a constant offset on the y-axis. The transform is sent every 0.1 seconds.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom geometry_msgs.msg import TransformStamped\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom tf2_ros import TransformBroadcaster\n\n\nclass FixedFrameBroadcaster(Node):\n\n   def __init__(self):\n       super().__init__('fixed_frame_tf2_broadcaster')\n       self.tf_broadcaster = TransformBroadcaster(self)\n       self.timer = self.create_timer(0.1, self.broadcast_timer_callback)\n\n   def broadcast_timer_callback(self):\n       t = TransformStamped()\n\n       t.header.stamp = self.get_clock().now().to_msg()\n       t.header.frame_id = 'turtle1'\n       t.child_frame_id = 'carrot1'\n       t.transform.translation.x = 0.0\n       t.transform.translation.y = 2.0\n       t.transform.translation.z = 0.0\n       t.transform.rotation.x = 0.0\n       t.transform.rotation.y = 0.0\n       t.transform.rotation.z = 0.0\n       t.transform.rotation.w = 1.0\n\n       self.tf_broadcaster.sendTransform(t)\n\n\ndef main():\n    try:\n        with rclpy.init():\n            node = FixedFrameBroadcaster()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Workspace with colcon Console Commands\nDESCRIPTION: Shows how to build ROS 2 workspaces using 'colcon build' command. Discusses how Python source code is copied into build/install directories, and the option to use '--symlink-install' flag to create symlinks instead of copies, enabling easier debugging and breakpoint placement within IDEs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Message 'Sphere.msg'\nDESCRIPTION: Creates a composite message 'Sphere.msg' including a 'geometry_msgs/Point' named 'center' and a 'float64' radius, representing a geometric sphere object.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngeometry_msgs/Point center\nfloat64 radius\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Workspace Directory - Bash\nDESCRIPTION: Creates a new directory for a ROS 2 workspace named ros2_ws and an empty src directory within it, then changes the working directory into the workspace root. This structure is required for colcon to build and manage ROS 2 packages. No arguments are required, and the commands can be run in any shell that supports typical Unix commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws\n\n```\n\n----------------------------------------\n\nTITLE: Adding ROS2 Package Execution Dependencies in package.xml\nDESCRIPTION: This XML snippet demonstrates how to declare runtime dependencies for a ROS2 Python package in the package.xml file. The package requires 'rclpy' and 'std_msgs' to execute, which correspond to the imported Python modules needed by the publisher and subscriber nodes. The snippet also shows filling generic package metadata like description, maintainer, and license.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<description>Examples of minimal publisher/subscriber using rclpy</description>\n<maintainer email=\"you@email.com\">Your Name</maintainer>\n<license>Apache-2.0</license>\n\n<exec_depend>rclpy</exec_depend>\n<exec_depend>std_msgs</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Building the Workspace\nDESCRIPTION: Builds all ROS2 packages in the workspace using 'colcon'. Requires that you are in the root of the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\n```\n\n----------------------------------------\n\nTITLE: Installing Default colcon Mixins\nDESCRIPTION: This segment shows the commands required to install and update default colcon mixins, which provide convenient command shortcuts. It includes commands to add the default mixin and update its configuration for easier build options.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ colcon mixin add default https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml\n$ colcon mixin update default\n```\n\n----------------------------------------\n\nTITLE: Basic Node Spinning with rclcpp::spin\nDESCRIPTION: This code snippet shows the basic way to use rclcpp to initialize a node and spin it with the default SingleThreadedExecutor. The `rclcpp::spin(node)` call blocks until the node is shut down, processing incoming messages and events. `rclcpp::init` must be called first to initialize the ROS 2 client library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Executors.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint main(int argc, char* argv[])\n{\n   // Some initialization.\n   rclcpp::init(argc, argv);\n   ...\n\n   // Instantiate a node.\n   rclcpp::Node::SharedPtr node = ...\n\n   // Run the executor.\n   rclcpp::spin(node);\n\n   // Shutdown and exit.\n   ...\n   return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing turtlesim package\nDESCRIPTION: This command installs the turtlesim package for a specific ROS 2 distribution. It requires sudo privileges and the user's ROS 2 environment should be setup. The output is a list of installed executables if successful.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt update\n$ sudo apt install ros-{DISTRO}-turtlesim\n```\n\n----------------------------------------\n\nTITLE: Building and Installing tf2 Listener Executable in CMake for ROS2\nDESCRIPTION: Provides instructions to update CMakeLists.txt for compiling and linking the tf2 listener node. It adds an executable target named turtle_tf2_listener which depends on ROS2 client libraries, tf2 libraries, and message targets from geometry_msgs and turtlesim_msgs. The snippet includes linking directives and installation instructions to ensure that the executable is correctly built and discoverable by ROS2 run-time facilities. This setup is critical for integrating the listener node within ROS2 build and runtime environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nadd_executable(turtle_tf2_listener src/turtle_tf2_listener.cpp)\ntarget_link_libraries(\n    turtle_tf2_listener PUBLIC\n    ${geometry_msgs_TARGETS}\n    rclcpp::rclcpp\n    tf2::tf2\n    tf2_ros::tf2_ros\n    ${turtlesim_msgs_TARGETS}\n)\n\ninstall(TARGETS\n    turtle_tf2_listener\n    DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Generating Data and Recording to Bag from Standalone Executable (Python)\nDESCRIPTION: Implements a standalone Python script that uses `rosbag2_py.SequentialWriter` to record synthetic `Int32` data to a bag file named `big_synthetic_bag`. It generates 100 data points in a loop, manually assigning timestamps spaced 1 second apart.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom rclpy.clock import Clock\nfrom rclpy.duration import Duration\nfrom rclpy.serialization import serialize_message\nfrom example_interfaces.msg import Int32\n\nimport rosbag2_py\n\n\ndef main(args=None):\n    writer = rosbag2_py.SequentialWriter()\n\n    storage_options = rosbag2_py.StorageOptions(\n        uri='big_synthetic_bag',\n        storage_id='mcap')\n    converter_options = rosbag2_py.ConverterOptions('', '')\n    writer.open(storage_options, converter_options)\n\n    topic_info = rosbag2_py.TopicMetadata(\n        id=0,\n        name='synthetic',\n        type='example_interfaces/msg/Int32',\n        serialization_format='cdr')\n    writer.create_topic(topic_info)\n\n    time_stamp = Clock().now()\n    for ii in range(0, 100):\n        data = Int32()\n        data.data = ii\n        writer.write(\n            'synthetic',\n            serialize_message(data),\n            time_stamp.nanoseconds)\n        time_stamp += Duration(seconds=1)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Enable Twist Interpolator and Update ROS2 tf2 Packages in C++\nDESCRIPTION: Adds twist interpolation support in tf2-related packages and updates various tf2 modules to support new features and fix deprecations. Dependencies include tf2_core, Eigen, and message filters. Key updates include enabling twist interpolation, cleaning obsolete headers, and documentation updates.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_61\n\nLANGUAGE: C++\nCODE:\n```\n# Enable twist interpolator in tf2 and tf2_geometry_msgs\n# Remove obsolete headers\n# Update documentation\n\n```\n\n----------------------------------------\n\nTITLE: Installing Directories\nDESCRIPTION: This snippet installs specified directories (launch, resource, worlds) to the share/${PROJECT_NAME}/ directory. It handles the installation of additional resources like launch files, configuration files and world files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY\n  launch\n  resource\n  worlds\n  DESTINATION share/${PROJECT_NAME}/\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Python ROS2 Package using Command Line\nDESCRIPTION: This command creates a Python ROS 2 package, specifying the build type as 'ament_python'. It sets the license and dependencies.  The package name and dependencies should be replaced with the desired values.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create  --build-type ament_python --license Apache-2.0 <pkg-name> --dependencies [deps]\n```\n\n----------------------------------------\n\nTITLE: Adding a parameter descriptor to a ROS 2 parameter\nDESCRIPTION: Optional code snippet showing how to add a descriptor to a parameter for providing metadata like description and constraints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# ...\n\nclass MinimalParam(Node):\n    def __init__(self):\n        super().__init__('minimal_param_node')\n\n        from rcl_interfaces.msg import ParameterDescriptor\n        my_parameter_descriptor = ParameterDescriptor(description='This parameter is mine!')\n\n        self.declare_parameter('my_parameter', 'world', my_parameter_descriptor)\n\n        self.timer = self.create_timer(1, self.timer_callback)\n```\n\n----------------------------------------\n\nTITLE: Sourcing the ROS 2 environment setup file\nDESCRIPTION: This snippet shows how to source the ROS 2 environment setup file, which configures the shell environment with necessary variables for using ROS 2 tools and libraries. Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron).  Ensure the correct shell setup file (bash, sh, zsh) is used.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\nsource /opt/ros/{DISTRO}/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Node Constructor with Options (C++)\nDESCRIPTION: This C++ code shows how to modify the node's constructor to accept a `NodeOptions` argument. This change is important for passing configuration options when the node is composed within a container. The constructor also initializes the node's name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nVincentDriver(const rclcpp::NodeOptions & options) : Node(\"vincent_driver\", options)\n{\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Environment Variables to GTest with ament_add_gtest in CMake\nDESCRIPTION: Demonstrates using the `APPEND_ENV` parameter within `ament_add_gtest` to modify the test execution environment. This example appends a custom path (`some/additional/path/for/testing/resources`) to the `PATH` environment variable specifically for the `some_test` target.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake_gtest REQUIRED)\nament_add_gtest(some_test <test_sources>\n  APPEND_ENV PATH=some/additional/path/for/testing/resources)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMakeLists.txt for ROS 2 Action Interface\nDESCRIPTION: CMake configuration required to generate code for the custom action interface. This must be added before the ament_package() line.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(rosidl_default_generators REQUIRED)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  \"action/Fibonacci.action\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running the C++ Talker demo node\nDESCRIPTION: This snippet runs the C++ \"talker\" demo node after sourcing the ROS 2 environment setup file.  This node publishes messages. Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Python Package\nDESCRIPTION: Command to create a new ROS 2 package named `learning_tf2_py` using the `ament_python` build type. It specifies Apache-2.0 license and implicitly depends on standard Python packages. Further dependencies like `geometry_msgs`, `rclpy`, `tf2_ros_py`, etc., need to be added to `package.xml`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_python --license Apache-2.0 -- learning_tf2_py\n```\n\n----------------------------------------\n\nTITLE: Using Service Callbacks in ROS 2\nDESCRIPTION: This snippet updates service callback signatures from returning booleans to void, with exceptions for failure handling. It includes the proper namespace for service types following ROS 2 conventions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\n// #include \"nav_msgs/GetMap.h\"\n#include \"nav_msgs/srv/get_map.hpp\"\n\n// bool service_callback(\n//   nav_msgs::GetMap::Request & request,\n//   nav_msgs::GetMap::Response & response)\nvoid service_callback(\n  const std::shared_ptr<nav_msgs::srv::GetMap::Request> request,\n  std::shared_ptr<nav_msgs::srv::GetMap::Response> response)\n{\n  // ...\n  // no return; throw exceptions for failures\n}\n```\n\n----------------------------------------\n\nTITLE: Running Webots Local TCP Simulation Server on macOS Host - Shell Commands\nDESCRIPTION: Shell commands to set the WEBOTS_HOME environment variable pointing to the Webots application directory on macOS and execute the local_simulation_server.py Python script. This server enables communication via TCP between the ROS 2 nodes running inside the VM and the native Webots instance on the host macOS. The commands are run on the host machine outside the VM to facilitate launching Webots remotely.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nexport WEBOTS_HOME=/Applications/Webots.app\n```\n\nLANGUAGE: console\nCODE:\n```\npython3 local_simulation_server.py\n```\n\n----------------------------------------\n\nTITLE: Installing Targets with EXPORT in ROS 2\nDESCRIPTION: Demonstrates the proper way to install library targets in ROS 2 using the EXPORT keyword for proper CMake target exporting.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS my_library EXPORT export_my_package\n   ARCHIVE DESTINATION lib\n   LIBRARY DESTINATION lib\n   RUNTIME DESTINATION bin\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Finding Test Dependencies in CMake\nDESCRIPTION: Demonstrates the recommended practice in CMakeLists.txt to only find and require test-specific packages (like 'testfoo') when the `BUILD_TESTING` CMake flag is enabled. This ensures test dependencies don't affect regular builds.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n    find_package(testfoo REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 Subscriber Node\nDESCRIPTION: Sources the ROS 2 workspace setup file and executes the `SyncAsyncReader` node using `ros2 run`. The example output shows the node receiving and logging messages from both the `sync_topic` and `async_topic`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n$ ros2 run sync_async_node_example_cpp SyncAsyncReader\n[INFO] [1612972054.495429090] [sync_async_subscriber]: I heard: 'SYNC: Hello, world! 10'\n[INFO] [1612972054.995410057] [sync_async_subscriber]: I heard: 'ASYNC: Hello, world! 10'\n[INFO] [1612972055.495453494] [sync_async_subscriber]: I heard: 'SYNC: Hello, world! 11'\n[INFO] [1612972055.995396561] [sync_async_subscriber]: I heard: 'ASYNC: Hello, world! 11'\n[INFO] [1612972056.495534818] [sync_async_subscriber]: I heard: 'SYNC: Hello, world! 12'\n[INFO] [1612972056.995473953] [sync_async_subscriber]: I heard: 'ASYNC: Hello, world! 12'\n```\n\n----------------------------------------\n\nTITLE: Test for tf2 library with Fixes and Quaternion Normalization in C++\nDESCRIPTION: Contains test code for the tf2 library in ROS2, addressing API changes, enabling caching, and normalizing quaternions. Dependencies include tf2 and Eigen libraries. It involves test setup, API usage, and validation of transformation accuracy with input parameters and expected normalized outputs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_58\n\nLANGUAGE: C++\nCODE:\n```\n# Compile fix for upcoming rclcpp::Executor API changes\n# Enabling cache normalization for tf2 eigen\n# Code includes test cases with quaternion normalization and cache handling\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (ROS 2 rosdep)\nDESCRIPTION: Runs `rosdep` to check and install any missing system dependencies required by the packages in the workspace's source directory. The `-i` flag ignores errors, `--from-path src` specifies the source directory, `--rosdistro` uses the current distribution, and `-y` automatically confirms installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_9\n\nLANGUAGE: Linux\nCODE:\n```\nrosdep install -i --from-path src --rosdistro $ROS_DISTRO -y\n```\n\n----------------------------------------\n\nTITLE: Updated CMakeLists.txt with Subscriber Configuration\nDESCRIPTION: Extended CMake configuration that adds the subscriber node executable and updates the installation target to include both publisher and subscriber binaries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(listener src/subscriber_lambda_function.cpp)\ntarget_link_libraries(talker PUBLIC rclcpp::rclcpp ${std_msgs_TARGETS})\n\ninstall(TARGETS\n  talker\n  listener\n  DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameter Change Callback Function (Python)\nDESCRIPTION: Defines the callback method `callback` that is invoked when a monitored parameter changes. It takes a `rclpy.parameter.Parameter` object as input and logs an informational message containing the name and the new value of the parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef callback(self, p: rclpy.parameter.Parameter) -> None:\n            self.get_logger().info(f\"Received an update to parameter: {p.name}: {rclpy.parameter.parameter_value_to_python(p.value)}\")\n```\n\n----------------------------------------\n\nTITLE: C++ Implementation of ROS 2 Ping Service\nDESCRIPTION: Code for a ROS 2 service node that responds to Trigger service requests with success=true and logs the interaction to the console.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"example_interfaces/srv/trigger.hpp\"\n\n/**\n * Service action: responds with success=true and prints the request on the console\n */\nvoid ping(const std::shared_ptr<example_interfaces::srv::Trigger::Request> request,\n        std::shared_ptr<example_interfaces::srv::Trigger::Response> response)\n{\n    // The request data is unused\n    (void) request;\n\n    // Build the response\n    response->success = true;\n\n    // Log to the console\n    RCLCPP_INFO(rclcpp::get_logger(\"ping_server\"), \"Incoming request\");\n    RCLCPP_INFO(rclcpp::get_logger(\"ping_server\"), \"Sending back response\");\n}\n\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n\n    // Create the node and the service\n    std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared(\"ping_server\");\n    rclcpp::Service<example_interfaces::srv::Trigger>::SharedPtr service =\n        node->create_service<example_interfaces::srv::Trigger>(\"ping\", &ping);\n\n    // Log that the service is ready\n    RCLCPP_INFO(rclcpp::get_logger(\"ping_server\"), \"Ready to serve.\");\n\n    // run the node\n    rclcpp::spin(node);\n    rclcpp::shutdown();\n}\n```\n\n----------------------------------------\n\nTITLE: Configure and Launch Multiple turtle_tf2_broadcaster Nodes in ROS2 (Python)\nDESCRIPTION: This launch script starts two instances of the 'turtle_tf2_broadcaster' node with different names and parameters to duplicate the node without conflicts. It also launches a 'turtle_tf2_listener' node with a configurable 'target_frame' parameter, allowing dynamic adjustment of which frame to follow. The script demonstrates parameter overriding and node instantiation in ROS2 to manage multiple broadcasters simultaneously.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n# Launch file for multiple tf2_broadcaster nodes\nimport launch\nimport launch_ros.actions\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch_ros.actions.Node(\n            package='turtle_tf2',\n            executable='turtle_tf2_broadcaster',\n            name='broadcaster1',\n            output='screen'\n        ),\n        launch_ros.actions.Node(\n            package='turtle_tf2',\n            executable='turtle_tf2_broadcaster',\n            name='broadcaster2',\n            output='screen'\n        ),\n        launch_ros.actions.Node(\n            package='turtle_tf2',\n            executable='turtle_tf2_listener',\n            name='listener',\n            parameters=[{'target_frame': 'turtle1'}]\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Example ROS 2 Launch File (Python)\nDESCRIPTION: Provides a basic example of a ROS 2 launch file written in Python. It defines the required `generate_launch_description()` function which returns a `LaunchDescription` object.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport launch\nimport launch.actions\nimport launch.substitutions\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        # Add launch configuration and nodes here\n        launch.actions.DeclareLaunchArgument(\n            'node_output',\n            default_value='screen',\n            description='Console output mode'\n        ),\n        launch.actions.Node(\n            package='your_package',\n            executable='your_executable',\n            name='your_node_name',\n            output=launch.substitutions.LaunchConfiguration('node_output'),\n            # parameters=[{'param_name': 'param_value'}]\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Listing ROS2 Topics\nDESCRIPTION: Lists all the available topics in the ROS 2 system. This command is used to identify which topics are available for recording.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic list\n```\n\n----------------------------------------\n\nTITLE: Implementing ROS 2 Node with Parameter Event Handler (C++)\nDESCRIPTION: Defines a ROS 2 node class (`SampleNodeWithParameters`) that declares a parameter and initializes a `ParameterEventHandler` to monitor changes to that parameter. It sets up a callback function to be executed when the parameter is updated. The `main` function initializes ROS 2 and spins the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n\nclass SampleNodeWithParameters : public rclcpp::Node\n{\npublic:\n  SampleNodeWithParameters()\n  : Node(\"node_with_parameters\")\n  {\n    this->declare_parameter(\"an_int_param\", 0);\n\n    // Create a parameter subscriber that can be used to monitor parameter changes\n    // (for this node's parameters as well as other nodes' parameters)\n    param_subscriber_ = std::make_shared<rclcpp::ParameterEventHandler>(this);\n\n    // Set a callback for this node's integer parameter, \"an_int_param\"\n    auto cb = [this](const rclcpp::Parameter & p) {\n        RCLCPP_INFO(\n          this->get_logger(), \"cb: Received an update to parameter \\\"%s\\\" of type %s: \\\"%ld\\\"\",\n          p.get_name().c_str(),\n          p.get_type_name().c_str(),\n          p.as_int());\n      };\n    cb_handle_ = param_subscriber_->add_parameter_callback(\"an_int_param\", cb);\n  }\n\nprivate:\n  std::shared_ptr<rclcpp::ParameterEventHandler> param_subscriber_;\n  std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;\n};\n\nint main(int argc, char ** argv)\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<SampleNodeWithParameters>());\n  rclcpp::shutdown();\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Loaded Components using ros2\nDESCRIPTION: This snippet shows how to list the loaded components using the `ros2 component list` command.  It's expected to display the component manager and the loaded components with their respective names and namespaces (as set by previous remaps).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component list\n   /ComponentManager\n      1  /talker2\n      2  /ns/talker\n      3  /ns2/talker3\n```\n\n----------------------------------------\n\nTITLE: Example Invocation to Run ROS2 Node with YAML Parameter File - Console\nDESCRIPTION: Example command line to launch a ROS2 node and supply its configuration parameters from a YAML file using the --ros-args and --params-file arguments. This command depends on having the YAML file saved locally and the target executable configured to accept parameters from files. It outputs the node with parameters initialized as specified in the file, enabling bulk parameter setups.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp parameter_blackboard --ros-args --params-file demo_params.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Console Entry Points in setup.py\nDESCRIPTION: This Python dictionary snippet shows how to configure console entry points in the `setup.py` file of a Python ROS 2 package. It maps desired executable names ('talker', 'listener') to the corresponding Python functions (`main`) within the package modules (`py_pubsub.publisher_member_function`, `py_pubsub.subscriber_member_function`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nentry_points={\n        'console_scripts': [\n                'talker = py_pubsub.publisher_member_function:main',\n                'listener = py_pubsub.subscriber_member_function:main',\n        ],\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Complete Robot Model with Visual Elements Using URDF - XML\nDESCRIPTION: This snippet provides a full XML-based URDF robot model which introduces feet, wheels, a head (sphere), and gripper meshes. It describes robot components via <link> and <joint> tags, applies reusable <material> definitions, and leverages geometric primitives and external mesh files for rich visual representation. All visual elements are connected with fixed joints, and the model expects dependencies on the 'urdf_tutorial' package for mesh resources. Parameters like 'length', 'radius', 'size', and 'filename' specify shape and source of each component. The expected inputs are compatible mesh files and proper ROS2 URDF configuration, and the output is a descriptive visual model for simulation or visualization. Limitations depend on the availability and correct path of mesh files and compliance with URDF/XML syntax.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<robot name=\"visual\">\n\n  <material name=\"blue\">\n    <color rgba=\"0 0 0.8 1\"/>\n  </material>\n  <material name=\"black\">\n    <color rgba=\"0 0 0 1\"/>\n  </material>\n  <material name=\"white\">\n    <color rgba=\"1 1 1 1\"/>\n  </material>\n\n  <link name=\"base_link\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n      <material name=\"blue\"/>\n    </visual>\n  </link>\n\n  <link name=\"right_leg\">\n    <visual>\n      <geometry>\n        <box size=\"0.6 0.1 0.2\"/>\n      </geometry>\n      <origin rpy=\"0 1.57075 0\" xyz=\"0 0 -0.3\"/>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n\n  <joint name=\"base_to_right_leg\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"right_leg\"/>\n    <origin xyz=\"0 -0.22 0.25\"/>\n  </joint>\n\n  <link name=\"right_base\">\n    <visual>\n      <geometry>\n        <box size=\"0.4 0.1 0.1\"/>\n      </geometry>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n\n  <joint name=\"right_base_joint\" type=\"fixed\">\n    <parent link=\"right_leg\"/>\n    <child link=\"right_base\"/>\n    <origin xyz=\"0 0 -0.6\"/>\n  </joint>\n\n  <link name=\"right_front_wheel\">\n    <visual>\n      <origin rpy=\"1.57075 0 0\" xyz=\"0 0 0\"/>\n      <geometry>\n        <cylinder length=\"0.1\" radius=\"0.035\"/>\n      </geometry>\n      <material name=\"black\"/>\n    </visual>\n  </link>\n  <joint name=\"right_front_wheel_joint\" type=\"fixed\">\n    <parent link=\"right_base\"/>\n    <child link=\"right_front_wheel\"/>\n    <origin rpy=\"0 0 0\" xyz=\"0.133333333333 0 -0.085\"/>\n  </joint>\n\n  <link name=\"right_back_wheel\">\n    <visual>\n      <origin rpy=\"1.57075 0 0\" xyz=\"0 0 0\"/>\n      <geometry>\n        <cylinder length=\"0.1\" radius=\"0.035\"/>\n      </geometry>\n      <material name=\"black\"/>\n    </visual>\n  </link>\n  <joint name=\"right_back_wheel_joint\" type=\"fixed\">\n    <parent link=\"right_base\"/>\n    <child link=\"right_back_wheel\"/>\n    <origin rpy=\"0 0 0\" xyz=\"-0.133333333333 0 -0.085\"/>\n  </joint>\n\n  <link name=\"left_leg\">\n    <visual>\n      <geometry>\n        <box size=\"0.6 0.1 0.2\"/>\n      </geometry>\n      <origin rpy=\"0 1.57075 0\" xyz=\"0 0 -0.3\"/>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n\n  <joint name=\"base_to_left_leg\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"left_leg\"/>\n    <origin xyz=\"0 0.22 0.25\"/>\n  </joint>\n\n  <link name=\"left_base\">\n    <visual>\n      <geometry>\n        <box size=\"0.4 0.1 0.1\"/>\n      </geometry>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n\n  <joint name=\"left_base_joint\" type=\"fixed\">\n    <parent link=\"left_leg\"/>\n    <child link=\"left_base\"/>\n    <origin xyz=\"0 0 -0.6\"/>\n  </joint>\n\n  <link name=\"left_front_wheel\">\n    <visual>\n      <origin rpy=\"1.57075 0 0\" xyz=\"0 0 0\"/>\n      <geometry>\n        <cylinder length=\"0.1\" radius=\"0.035\"/>\n      </geometry>\n      <material name=\"black\"/>\n    </visual>\n  </link>\n  <joint name=\"left_front_wheel_joint\" type=\"fixed\">\n    <parent link=\"left_base\"/>\n    <child link=\"left_front_wheel\"/>\n    <origin rpy=\"0 0 0\" xyz=\"0.133333333333 0 -0.085\"/>\n  </joint>\n\n  <link name=\"left_back_wheel\">\n    <visual>\n      <origin rpy=\"1.57075 0 0\" xyz=\"0 0 0\"/>\n      <geometry>\n        <cylinder length=\"0.1\" radius=\"0.035\"/>\n      </geometry>\n      <material name=\"black\"/>\n    </visual>\n  </link>\n  <joint name=\"left_back_wheel_joint\" type=\"fixed\">\n    <parent link=\"left_base\"/>\n    <child link=\"left_back_wheel\"/>\n    <origin rpy=\"0 0 0\" xyz=\"-0.133333333333 0 -0.085\"/>\n  </joint>\n\n  <joint name=\"gripper_extension\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"gripper_pole\"/>\n    <origin rpy=\"0 0 0\" xyz=\"0.19 0 0.2\"/>\n  </joint>\n\n  <link name=\"gripper_pole\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.2\" radius=\"0.01\"/>\n      </geometry>\n      <origin rpy=\"0 1.57075 0 \" xyz=\"0.1 0 0\"/>\n    </visual>\n  </link>\n\n  <joint name=\"left_gripper_joint\" type=\"fixed\">\n    <origin rpy=\"0 0 0\" xyz=\"0.2 0.01 0\"/>\n    <parent link=\"gripper_pole\"/>\n    <child link=\"left_gripper\"/>\n  </joint>\n\n  <link name=\"left_gripper\">\n    <visual>\n      <origin rpy=\"0.0 0 0\" xyz=\"0 0 0\"/>\n      <geometry>\n        <mesh filename=\"package://urdf_tutorial/meshes/l_finger.dae\"/>\n      </geometry>\n    </visual>\n  </link>\n\n  <joint name=\"left_tip_joint\" type=\"fixed\">\n    <parent link=\"left_gripper\"/>\n    <child link=\"left_tip\"/>\n  </joint>\n\n  <link name=\"left_tip\">\n    <visual>\n      <origin rpy=\"0.0 0 0\" xyz=\"0.09137 0.00495 0\"/>\n      <geometry>\n        <mesh filename=\"package://urdf_tutorial/meshes/l_finger_tip.dae\"/>\n      </geometry>\n    </visual>\n  </link>\n  <joint name=\"right_gripper_joint\" type=\"fixed\">\n    <origin rpy=\"0 0 0\" xyz=\"0.2 -0.01 0\"/>\n    <parent link=\"gripper_pole\"/>\n    <child link=\"right_gripper\"/>\n  </joint>\n\n  <link name=\"right_gripper\">\n    <visual>\n      <origin rpy=\"-3.1415 0 0\" xyz=\"0 0 0\"/>\n      <geometry>\n        <mesh filename=\"package://urdf_tutorial/meshes/l_finger.dae\"/>\n      </geometry>\n    </visual>\n  </link>\n\n  <joint name=\"right_tip_joint\" type=\"fixed\">\n    <parent link=\"right_gripper\"/>\n    <child link=\"right_tip\"/>\n  </joint>\n\n  <link name=\"right_tip\">\n    <visual>\n      <origin rpy=\"-3.1415 0 0\" xyz=\"0.09137 0.00495 0\"/>\n      <geometry>\n        <mesh filename=\"package://urdf_tutorial/meshes/l_finger_tip.dae\"/>\n      </geometry>\n    </visual>\n  </link>\n\n  <link name=\"head\">\n    <visual>\n      <geometry>\n        <sphere radius=\"0.2\"/>\n      </geometry>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n  <joint name=\"head_swivel\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"head\"/>\n    <origin xyz=\"0 0 0.3\"/>\n  </joint>\n\n  <link name=\"box\">\n    <visual>\n      <geometry>\n        <box size=\"0.08 0.08 0.08\"/>\n      </geometry>\n      <material name=\"blue\"/>\n    </visual>\n  </link>\n\n  <joint name=\"tobox\" type=\"fixed\">\n    <parent link=\"head\"/>\n    <child link=\"box\"/>\n    <origin xyz=\"0.1814 0 0.1414\"/>\n  </joint>\n</robot>\n\n```\n\n----------------------------------------\n\nTITLE: Client Node Implementation Using Python\nDESCRIPTION: Creates an asynchronous ROS 2 client node that sends two integers to the addition service, waits for the response, and logs the result. It initializes the client, waits for service availability, sends the request, and processes the reply, requiring rclpy and example_interfaces dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom example_interfaces.srv import AddTwoInts\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nclass MinimalClientAsync(Node):\n    def __init__(self):\n        super().__init__('minimal_client_async')\n        self.cli = self.create_client(AddTwoInts, 'add_two_ints')\n        while not self.cli.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('service not available, waiting again...')\n        self.req = AddTwoInts.Request()\n\n    def send_request(self):\n        self.req.a = 41\n        self.req.b = 1\n        return self.cli.call_async(self.req)\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            minimal_client = MinimalClientAsync()\n            future = minimal_client.send_request()\n            rclpy.spin_until_future_complete(minimal_client, future)\n            response = future.result()\n            minimal_client.get_logger().info(\n                'Result of add_two_ints: for %d + %d = %d' %\n                (minimal_client.req.a, minimal_client.req.b, response.sum))\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: package.xml Dependency Inclusion for Custom Interface Package\nDESCRIPTION: Adds dependencies for the custom interfaces in package.xml for both C++ and Python, ensuring correct build and runtime linking with the custom message/service package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<depend>tutorial_interfaces</depend>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<exec_depend>tutorial_interfaces</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Sourcing the setup file (Windows Command Prompt)\nDESCRIPTION: This command sources the setup file to properly configure the environment for ROS2, specifically for use within the Windows Command Prompt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ call install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Show Service Interface Structure via ros2 CLI (Console, ROS 2)\nDESCRIPTION: Displays the request and response field structure for a given service type using its type identifier. Replace <type_name> with the fully-qualified service type. Outputs field definitions in type-specific syntax, often blank for Empty-type services. Useful for preparing service requests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show <type_name>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show std_srvs/srv/Empty\n---\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show turtlesim_msgs/srv/Spawn\nfloat32 x\nfloat32 y\nfloat32 theta\nstring name # Optional.  A unique name will be created and returned if this is empty\n---\nstring name\n```\n\n----------------------------------------\n\nTITLE: Creating Mutually Exclusive Callback Group and Subscription in Python\nDESCRIPTION: This code snippet demonstrates how to create a mutually exclusive callback group in Python using `MutuallyExclusiveCallbackGroup()` and how to assign it to a subscription using the `callback_group` argument of `create_subscription`. The subscription is created for the `/topic` topic with `Int32` messages and a callback function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_callback_group = MutuallyExclusiveCallbackGroup()\nmy_subscription = self.create_subscription(Int32, \"/topic\", self.callback, qos_profile=1,\n                                                  callback_group=my_callback_group)\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Workspace Directories (Console)\nDESCRIPTION: Commands to create the base directory structure for a new ROS 2 workspace, including the `src` directory where packages will reside. Provides variants for Linux/macOS and Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p launch_ws/src\ncd launch_ws/src\n```\n\nLANGUAGE: console\nCODE:\n```\nmd launch_ws\\src\ncd launch_ws\\src\n```\n\n----------------------------------------\n\nTITLE: Viewing Elliptic Curve Private Key Details with OpenSSL - bash\nDESCRIPTION: This snippet shows how to inspect the full details of an elliptic curve private key in PEM format using OpenSSL in a bash shell. Prerequisites include OpenSSL installed and access to the 'ca.key.pem' private key file in the specified directory. The command will print the key size, private key value, public key associated with the private key, ASN1 Object Identifier, and NIST curve used. This operation does not alter files; it is for key inspection only.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/sros2_demo/demo_keystore/private\nopenssl ec -in ca.key.pem -text -noout\n```\n\n----------------------------------------\n\nTITLE: Linking a Library Target to Dependencies Using target_link_libraries in CMake\nDESCRIPTION: Demonstrates the linkage of a library target to an external dependency target obtained using find_package, here linking 'my_library' to the Eigen3 library target 'Eigen3::Eigen'. This ensures inclusion of headers and libraries for proper compilation and linking.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Eigen3 REQUIRED)\ntarget_link_libraries(my_library PUBLIC Eigen3::Eigen)\n```\n\n----------------------------------------\n\nTITLE: Building Fast DDS with Security Enabled using Colcon (Bash)\nDESCRIPTION: Shows the `colcon build` command required to compile Fast DDS RMW implementations with security features enabled. It passes the `-DSECURITY=ON` CMake argument specifically for the selected Fast DDS packages (`fastrtps`, `rmw_fastrtps_cpp`, etc.).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install --cmake-args -DSECURITY=ON --packages-select fastrtps rmw_fastrtps_cpp rmw_fastrtps_dynamic_cpp rmw_fastrtps_shared_cpp\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Loading Composable Nodes (Python)\nDESCRIPTION: This Python launch file loads cam2image and showimage composable nodes into an existing container. It utilizes the `LoadComposableNodes` action and includes remappings, custom parameters, and extra arguments. Requires `launch_ros`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Python content to load composable nodes into an existing container would be here\n#Requires launch_ros\n```\n\n----------------------------------------\n\nTITLE: Waiting for /clock before beginning recording\nDESCRIPTION: This ensures `ros2bag` waits for the /clock topic before beginning recording when using simulated time. This is necessary to avoid incorrect timestamp data and to ensure proper time synchronization.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Support loading meshes other than .mesh and .stl with package URIs\nDESCRIPTION: This change enhances support for loading mesh files with package URIs, allowing for loading of various file types besides .mesh and .stl. Dependencies: rviz_rendering, possibly Ogre and Assimp libraries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Defining ROS2 Package Manifest Using package.xml for CMake (XML)\nDESCRIPTION: Defines the package manifest for a ROS2 package using the XML format targeting a CMake build system. It specifies mandatory fields like package name, version, description, maintainer contact, license, buildtool dependencies, test dependencies, and declares the build type under export. This XML snippet is processed by ROS2 build tools to manage package building, testing, and installation. Key parameters include the package 'name', 'version', 'maintainer' with email, 'license', and dependency declarations such as 'ament_cmake' build tool and lint testing dependencies. Limitations include that the description and license fields initially contain TODO placeholders that must be replaced before release.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model\n   href=\"http://download.ros.org/schema/package_format3.xsd\"\n   schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"3\">\n <name>my_package</name>\n <version>0.0.0</version>\n <description>TODO: Package description</description>\n <maintainer email=\"user@todo.todo\">user</maintainer>\n <license>TODO: License declaration</license>\n\n <buildtool_depend>ament_cmake</buildtool_depend>\n\n <test_depend>ament_lint_auto</test_depend>\n <test_depend>ament_lint_common</test_depend>\n\n <export>\n   <build_type>ament_cmake</build_type>\n </export>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Plugin Source (point_display.cpp)\nDESCRIPTION: This C++ code defines the `processMessage` function for the `PointDisplay` class. It logs the frame ID of received messages.  This serves as the starting point for the plugin's functionality, which will eventually handle the actual visualization within RViz.  Requires the rviz_plugin_tutorial_msgs package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#include <rviz_plugin_tutorial/point_display.hpp>\n#include <rviz_common/logging.hpp>\n\nnamespace rviz_plugin_tutorial\n{\nvoid PointDisplay::processMessage(const rviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtr msg)\n{\n  RVIZ_COMMON_LOG_INFO_STREAM(\"We got a message with frame \" << msg->header.frame_id);\n}\n}\n\n#include <pluginlib/class_list_macros.hpp>\nPLUGINLIB_EXPORT_CLASS(rviz_plugin_tutorial::PointDisplay, rviz_common::Display)\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Desktop on Ubuntu\nDESCRIPTION: Command to install the recommended Desktop version of ROS 2, which includes ROS, RViz, demos, and tutorials with GUI tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ros-{DISTRO}-desktop\n```\n\n----------------------------------------\n\nTITLE: Running a compiled executable using components in ROS 2\nDESCRIPTION: This command executes a pre-compiled ROS 2 executable, `manual_composition`, that has multiple components hardcoded within the main function. This showcases compile-time composition of components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run composition manual_composition\n```\n\n----------------------------------------\n\nTITLE: Running Turtlesim Keyboard Teleoperation\nDESCRIPTION: Starts the 'turtle_teleop_key' node from the 'turtlesim' package. This node listens for keyboard input (arrow keys) and publishes velocity commands, allowing manual control of one of the turtles in the simulation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with colcon (Linux/macOS)\nDESCRIPTION: This command uses the `colcon build` tool to build the specific ROS 2 package `bag_reader_node_py` from the workspace source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select bag_reader_node_py\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pixi - Console\nDESCRIPTION: This command installs all the dependencies listed in the pixi.toml file that was downloaded in the previous step. This uses the pixi package manager.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npixi install\n```\n\n----------------------------------------\n\nTITLE: Handling Webots Shutdown Event in Launch File (Python)\nDESCRIPTION: Snippet from `robot_launch.py` demonstrating the setup of event handlers. It registers an `OnProcessExit` handler for the `webots` process (started by `WebotsLauncher`) to emit a `Shutdown` event, ensuring all ROS 2 nodes are terminated when the Webots simulation window is closed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Content of Code/robot_launch.py, lines 27-32, dedent 8\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Sensors in URDF for Webots Integration\nDESCRIPTION: URDF configuration that defines the robot's distance sensors for obstacle detection. It uses <device> tags to interface with Webots DistanceSensor nodes and configures ROS parameters like topic names and update rates.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<!-- Code not explicitly shown in the tutorial but referenced as my_robot_with_sensors_python.urdf and my_robot_with_sensors_cpp.urdf -->\n```\n\n----------------------------------------\n\nTITLE: Getting Parameters in ROS 1 and ROS 2\nDESCRIPTION: This snippet shows how to declare and retrieve parameters in both ROS 1 and ROS 2, including asserting that the parameter values have the correct types. The ROS 2 version uses `node.declare_parameter()` to declare parameters and retrieve their values.  The example handles string and integer parameters and logging warnings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nport = rospy.get_param('port', '/dev/ttyUSB0')\nassert isinstance(port, str), 'port parameter must be a str'\n\nbaudrate = rospy.get_param('baudrate', 115200)\nassert isinstance(baudrate, int), 'baudrate parameter must be an integer'\n\nrospy.logwarn('port: ' + port)\n```\n\nLANGUAGE: python\nCODE:\n```\nport = node.declare_parameter('port', '/dev/ttyUSB0').value\nassert isinstance(port, str), 'port parameter must be a str'\n\nbaudrate = node.declare_parameter('baudrate', 115200).value\nassert isinstance(baudrate, int), 'baudrate parameter must be an integer'\n\nnode.get_logger().warn('port: ' + port)\n```\n\n----------------------------------------\n\nTITLE: Complete ROS 2 Action Client with Feedback Handling\nDESCRIPTION: A complete Python implementation of a ROS 2 action client that sends goals and processes feedback for a Fibonacci action service.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Full content not shown in the provided text\n```\n\n----------------------------------------\n\nTITLE: Main Function Instantiation (C++)\nDESCRIPTION: This snippet demonstrates the instantiation and usage of the `SimpleNode` and `LifecycleTalker` classes within the `main` function. It initializes ROS, creates instances of both node types, and calls the `node_info` function (defined previously) using each node, showing how `NodeInterfaces` is used in practice.  The `SharedPtr` of the nodes is dereferenced before passing them as arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Using-Node-Interfaces-Template-Class.rst#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::executors::SingleThreadedExecutor exe;\n  auto node = std::make_shared<SimpleNode>(\"Simple_Node\");\n  auto lc_node = std::make_shared<LifecycleTalker>(\"Simple_LifeCycle_Node\");\n  node_info(*node);\n  node_info(*lc_node);\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcaster Listener Launch File in Python\nDESCRIPTION: This Python launch file declares a `target_frame` launch argument with a default value of 'turtle1'. It includes nodes for TF broadcasting and listening, showcasing the reusability of nodes with default argument values. It uses `DeclareLaunchArgument` to declare argument and then passes it to the nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport launch\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    return LaunchDescription([\n        DeclareLaunchArgument(\n            'target_frame',\n            default_value='turtle1',\n            description='Target frame name.'\n        ),\n        Node(\n            package='turtle_tf2_py',\n            executable='turtle_tf2_broadcaster',\n            name='turtle_tf2_broadcaster2',\n            output='screen',\n            parameters=[\n                {'target_frame': LaunchConfiguration('target_frame')}\n            ]\n\n        ),\n        Node(\n            package='turtle_tf2_py',\n            executable='turtle_tf2_listener',\n            name='turtle_tf2_listener2',\n            output='screen',\n            parameters=[\n                {'target_frame': LaunchConfiguration('target_frame')}\n            ]\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Defining a ROS 2 Launch File in YAML - ROS 2 - YAML\nDESCRIPTION: This YAML snippet models a ROS 2 launch file that configures command-line arguments, file inclusion, node instantiation within namespaces, parameter assignment, and topic remapping. YAML in ROS 2 launch files is less common than XML or Python and may depend on specific support in the launch system version. Prerequisites include ROS 2 launch YAML support and relevant package/file availability. All input arguments and expected outputs mirror the XML pattern.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launch-file-different-formats.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Example YAML ROS 2 launch file implementing argument setup, file inclusion, node execution with namespace, parameters, and topic remapping\n# (actual code content to be filled in from launch/different_formats_launch.yaml)\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Model with Multiple Shapes and Joints\nDESCRIPTION: This XML code defines a robot model named 'multipleshapes' with multiple links and a fixed joint. It includes a 'base_link' (cylinder) and a 'right_leg' (box).  The 'base_to_right_leg' joint connects the two links, creating a basic assembly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<robot name=\"multipleshapes\">\n  <link name=\"base_link\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n    </visual>\n  </link>\n\n  <link name=\"right_leg\">\n    <visual>\n      <geometry>\n        <box size=\"0.6 0.1 0.2\"/>\n      </geometry>\n    </visual>\n  </link>\n\n  <joint name=\"base_to_right_leg\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"right_leg\"/>\n  </joint>\n\n</robot>\n```\n\n----------------------------------------\n\nTITLE: Publishing Twist Messages to a ROS 2 Topic from the Console - Console\nDESCRIPTION: This snippet provides a ros2 topic pub command to publish geometry_msgs/msg/Twist messages at 1 Hz to a specific turtlesim velocity command topic. Designed for interactive testing, this command should be run while the launch file is active, and it will move the main turtle. Prerequisites: ROS 2 sourced, correct topic exists, geometry_msgs installed. Key parameters include message frequency (-r), topic name, message type, and a YAML-like dictionary with linear/angular velocity values. Outputs are published Twist messages; constraint: must match topic and message type.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub -r 1 /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\"\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Executable with Parameter Setting Using Console Commands\nDESCRIPTION: Illustrates how to pass parameters to a ROS 2 node using the --ros-args flag combined with the -p (parameter) option. This differs from ROS 1 where parameters could be passed with leading underscores. The example sets 'my_param' to 'value' when launching the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run some_package some_ros_executable --ros-args -p my_param:=value\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Example Publisher Node - Console\nDESCRIPTION: Runs a sample publisher node from the examples_rclcpp_minimal_publisher package for demo purposes. Terminal must have the environment properly sourced. The publisher_member_function executable should be present in the current overlay workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nros2 run examples_rclcpp_minimal_publisher publisher_member_function\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Node with Pluginlib (C++)\nDESCRIPTION: This C++ code replaces the main method with a `pluginlib`-style macro invocation. This macro registers the `VincentDriver` class as a plugin, enabling it to be loaded and managed by a ROS2 component container. This replaces the standard `main()` function used previously.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <rclcpp_components/register_node_macro.hpp>\nRCLCPP_COMPONENTS_REGISTER_NODE(palomino::VincentDriver)\n```\n\n----------------------------------------\n\nTITLE: Displaying Available ROS 2 Sub-Commands in Console\nDESCRIPTION: This command displays a list of all available sub-commands for the 'ros2' command-line tool. It's the starting point for understanding the capabilities of the ROS 2 command-line interface.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Command-Line-Tools.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Publish Period (C++)\nDESCRIPTION: This code configures the period in which statistics data is collected and published. By default, the publish period is set to one second. This snippet overrides the default and sets it to 10 seconds using the `std::chrono::seconds` function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// configure the collection window and publish period (default 1s)\noptions.topic_stats_options.publish_period = std::chrono::seconds(10);\n```\n\n----------------------------------------\n\nTITLE: Configure ROS 2 Apt Source for Testing (sh)\nDESCRIPTION: Modifies the ROS 2 apt source list file to point to the `ros2-testing` repository instead of the main `ros2` repository. This allows `apt` to find and install pre-release binary packages. Requires root privileges to edit the file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndeb http://packages.ros.org/ros2-testing/ubuntu noble main\n```\n\n----------------------------------------\n\nTITLE: Importing threading and ExternalShutdownException for executing ROS 2 callbacks in background in Python\nDESCRIPTION: Imports the threading module and ExternalShutdownException class from rclpy.executors. These are prerequisites for running the ROS 2 executor in a dedicated thread to allow background callback handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nimport threading\n\nfrom rclpy.executors import ExternalShutdownException\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Base on Ubuntu\nDESCRIPTION: Command to install the bare bones ROS-Base version, which includes only communication libraries, message packages, and command line tools without GUI components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ros-{DISTRO}-ros-base\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 logger levels remotely using service call via Bash\nDESCRIPTION: Shows how to invoke the 'set_logger_levels' service to modify logger levels for specified loggers using 'ros2 service call' CLI. The request includes an array of logger names and levels. The response confirms success status. Node must have logger service enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 service call /NodeWithLoggerService/set_logger_levels rcl_interfaces/srv/SetLoggerLevels '{levels: [{name: \"NodeWithLoggerService\", level: 20}, {name: \"rcl\", level: 10}]}'\n\nrequester: making request: rcl_interfaces.srv.SetLoggerLevels_Request(levels=[rcl_interfaces.msg.LoggerLevel(name='NodeWithLoggerService', level=20), rcl_interfaces.msg.LoggerLevel(name='rcl', level=10)])\n\nresponse:\nrcl_interfaces.srv.SetLoggerLevels_Response(results=[rcl_interfaces.msg.SetLoggerLevelsResult(successful=True, reason=''), rcl_interfaces.msg.SetLoggerLevelsResult(successful=True, reason='')])\n```\n\n----------------------------------------\n\nTITLE: Implementing service introspection\nDESCRIPTION: This implements service introspection features for `ros2 service echo` in the `ros2cli` package, enabling easier service debugging and data inspection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: Launching Dynamic Frame Demo ROS2\nDESCRIPTION: This console command executes the ROS2 launch file `turtle_tf2_dynamic_frame_demo_launch.py` from the `learning_tf2_cpp` package. Running this command starts the nodes defined in the launch file, including the dynamic frame broadcaster.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_cpp turtle_tf2_dynamic_frame_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Creating Executable and Linking rclcpp in CMakeLists.txt\nDESCRIPTION: Defines in CMakeLists.txt the need to find rclcpp, add the executable target for the publisher node source file, link against rclcpp libraries, and specify installation rules for the built executable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(rclcpp REQUIRED)\n\nadd_executable(publish_address_book src/publish_address_book.cpp)\ntarget_link_libraries(publish_address_book rclcpp::rclcpp)\n\ninstall(TARGETS\n    publish_address_book\n  DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Event Handlers in a Python ROS 2 Launch File\nDESCRIPTION: This Python script defines a ROS 2 launch description using various event handlers. It imports necessary modules from `launch`, `launch_ros`, and defines the `generate_launch_description` function. Inside, it declares launch arguments, defines nodes (like `turtlesim_node`), actions (like `spawn_turtle`, `change_background_r`), and registers multiple `RegisterEventHandler` instances tied to specific events (`OnProcessStart`, `OnProcessIO`, `OnExecutionComplete`, `OnProcessExit`, `OnShutdown`) to trigger callbacks or other actions based on the lifecycle of nodes and actions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Copyright 2019 Open Source Robotics Foundation, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Launch the turtlesim demo with event handlers.\"\"\"\n\nimport time\n\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.actions import EmitEvent\nfrom launch.actions import ExecuteProcess\nfrom launch.actions import LogInfo\nfrom launch.actions import RegisterEventHandler\nfrom launch.conditions import IfCondition\nfrom launch.event_handlers import OnExecutionComplete\nfrom launch.event_handlers import OnProcessExit\nfrom launch.event_handlers import OnProcessIO\nfrom launch.event_handlers import OnProcessStart\nfrom launch.event_handlers import OnShutdown\nfrom launch.events import ExecutionComplete\nfrom launch.events import IOEvent\nfrom launch.events import ProcessExited\nfrom launch.events import ProcessStarted\nfrom launch.events import Shutdown\nfrom launch.substitutions import EnvironmentVariable\nfrom launch.substitutions import FindExecutable\nfrom launch.substitutions import LaunchConfiguration\nfrom launch.substitutions import LocalSubstitution\nfrom launch.substitutions import PythonExpression\n\nfrom launch_ros.actions import Node\n\n\ndef generate_launch_description():\n    \"\"\"Register event handlers for the turtlesim demo.\"\"\"\n    # Arguments\n    turtlesim_ns = LaunchConfiguration('turtlesim_ns')\n    use_provided_red = LaunchConfiguration('use_provided_red')\n    new_background_r = LaunchConfiguration('new_background_r')\n\n    turtlesim_ns_launch_arg = DeclareLaunchArgument(\n        'turtlesim_ns',\n        default_value='turtlesim1'\n    )\n    use_provided_red_launch_arg = DeclareLaunchArgument(\n        'use_provided_red',\n        default_value='False',\n        description='Set True to use the provided red value.'\n    )\n    new_background_r_launch_arg = DeclareLaunchArgument(\n        'new_background_r',\n        default_value='200',\n        description='Value for the background R channel.'\n    )\n\n    # Nodes\n    turtlesim_node = Node(\n        package='turtlesim',\n        namespace=turtlesim_ns,\n        executable='turtlesim_node',\n        name='sim'\n    )\n    # Actions\n    spawn_turtle = ExecuteProcess(\n        cmd=[[FindExecutable(name='ros2'),\n              ' service call ',\n              turtlesim_ns,\n              '/spawn ',\n              'turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2}\"']],\n        shell=True\n    )\n    change_background_r = ExecuteProcess(\n        cmd=[[FindExecutable(name='ros2'),\n              ' param set ',\n              turtlesim_ns,\n              '/sim background_r ',\n              '100']],\n        shell=True\n    )\n    change_background_r_conditioned = ExecuteProcess(\n        condition=IfCondition(use_provided_red),\n        cmd=[[FindExecutable(name='ros2'),\n              ' param set ',\n              turtlesim_ns,\n              '/sim background_r ',\n              new_background_r]],\n        shell=True\n    )\n\n    # Event handlers\n    on_turtlesim_start = RegisterEventHandler(\n        OnProcessStart(\n            target_action=turtlesim_node,\n            on_start=[LogInfo(msg='Turtlesim started, spawning turtle'),\n                      spawn_turtle]\n        )\n    )\n    on_spawn_stdout = RegisterEventHandler(\n        OnProcessIO(\n            target_action=spawn_turtle,\n            on_stdout=lambda event: LogInfo(\n                msg='Spawn request says \"{}\"'.format(\n                    event.text.decode().strip()))\n        )\n    )\n    on_spawn_complete = RegisterEventHandler(\n        OnExecutionComplete(\n            target_action=spawn_turtle,\n            on_completion=[LogInfo(msg='Spawn finished'),\n                           change_background_r,\n                           TimerAction(period=2.0,\n                                       actions=[change_background_r_conditioned])]\n        )\n    )\n    on_turtlesim_exit = RegisterEventHandler(\n        OnProcessExit(\n            target_action=turtlesim_node,\n            on_exit=[LogInfo(msg=EnvironmentVariable(name='USER') +\n                           ' closed the turtlesim window'),\n                     EmitEvent(event=Shutdown(\n                         reason='Window closed'))]\n        )\n    )\n    on_launch_shutdown = RegisterEventHandler(\n        OnShutdown(\n            on_shutdown=[LogInfo(\n                msg=['Launch was asked to shutdown: ', LocalSubstitution('event.reason')])]\n        )\n    )\n\n    return LaunchDescription([\n        turtlesim_ns_launch_arg,\n        use_provided_red_launch_arg,\n        new_background_r_launch_arg,\n        turtlesim_node,\n        on_turtlesim_start,\n        on_spawn_stdout,\n        on_spawn_complete,\n        on_turtlesim_exit,\n        on_launch_shutdown\n    ])\n```\n\n----------------------------------------\n\nTITLE: Launching RViz2 for Dummy Robot Visualization (Bash)\nDESCRIPTION: Sources the built ROS 2 workspace and starts RViz2 to visualize the running dummy robot environment. Requires a running dummy_robot_bringup launch in another terminal and the workspace to be built and sourced. Input: bash commands; Output: RViz2 application opens for robot visualization.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/dummy-robot-demo.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource ~/ros2_ws/install/setup.bash\nrviz2\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files\nDESCRIPTION: Sources the setup files needed to set up the ROS 2 environment for running nodes. Commands differ based on the operating system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ call install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Defining LaunchDescription Entities (Python)\nDESCRIPTION: Snippet from `robot_launch.py` returning the `LaunchDescription` object. This object aggregates all launch actions and nodes (like `WebotsLauncher` and `WebotsController`) that should be executed when the launch file is run.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Content of Code/robot_launch.py, lines 24-26, dedent 4\n```\n\n----------------------------------------\n\nTITLE: Running Tests with colcon - Bash\nDESCRIPTION: Executes built-in tests for packages in your ROS 2 workspace on Linux or macOS using colcon test. Ensures the workspace is built first and environment is properly sourced. The command will collect and report test results for all available packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncolcon test\n\n```\n\n----------------------------------------\n\nTITLE: Handling Process Start Events in a Python ROS 2 Launch File\nDESCRIPTION: This snippet demonstrates using `RegisterEventHandler` with `OnProcessStart` to react when a specific node (`turtlesim_node`) starts. The `target_action` specifies the node to monitor, and the `on_start` parameter takes a list of actions (logging a message and executing the `spawn_turtle` action) to perform upon the start event.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n    on_turtlesim_start = RegisterEventHandler(\n        OnProcessStart(\n            target_action=turtlesim_node,\n            on_start=[LogInfo(msg='Turtlesim started, spawning turtle'),\n                      spawn_turtle]\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Sourcing the colcon Install Environment - Windows Console\nDESCRIPTION: Prepares the Windows shell environment to use installed ROS 2 packages by calling the generated setup.bat script in the install directory. This is necessary before running ROS 2 executables produced by colcon.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncall install\\setup.bat\n\n```\n\n----------------------------------------\n\nTITLE: Downloading Subscriber Node Source Code with wget/curl\nDESCRIPTION: Shell commands for downloading the subscriber node implementation from the ROS 2 examples repository using wget or curl, depending on the operating system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Linux/macOS\nwget -O subscriber_lambda_function.cpp https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_subscriber/lambda.cpp\n\n# Windows (command prompt)\ncurl -sk https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_subscriber/lambda.cpp -o subscriber_lambda_function.cpp\n\n# Windows (powershell)\ncurl https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclcpp/topics/minimal_subscriber/lambda.cpp -o subscriber_lambda_function.cpp\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 node instance with rclpy.create_node() and adding it to the executor in Python\nDESCRIPTION: Replaces ROS 1 rospy.init_node() with rclpy.create_node(), storing the result in a variable 'node'. Registers this node with the global executor by calling add_node(node) to enable message handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nnode = rclpy.create_node('talker')\nrclpy.get_global_executor().add_node(node)\n```\n\n----------------------------------------\n\nTITLE: Add Entry Point to setup.py (Python)\nDESCRIPTION: This Python snippet shows the required line to add to the `entry_points` dictionary in the `setup.py` file. This registers the `main` function of the `turtle_tf2_broadcaster.py` module as a console script executable by `ros2 run learning_tf2_py turtle_tf2_broadcaster`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n'turtle_tf2_broadcaster = learning_tf2_py.turtle_tf2_broadcaster:main',\n```\n\n----------------------------------------\n\nTITLE: Declaring Launch File Dependencies in package.xml (xml)\nDESCRIPTION: This XML snippet lists required exec_depend tags for ROS 2 launch files, specifically 'launch' and 'launch_ros'. These should be placed in the package.xml of the learning_tf2_cpp package. They ensure runtime availability of the ROS 2 launch and launch_ros packages for launching nodes using Python launch files. The tags take no parameters beyond the package names. No functional constraints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<exec_depend>launch</exec_depend>\n<exec_depend>launch_ros</exec_depend>\n\n```\n\n----------------------------------------\n\nTITLE: Updating setup.py to include launch files in ROS2 Python package\nDESCRIPTION: This Python code snippet modifies the 'setup.py' to include the 'launch/' directory files during package installation by adjusting the 'data_files' field and importing necessary modules ('os' and 'glob'). It ensures that launch files are accessible after installation, which is essential for running launch scripts in ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom glob import glob\n\n# Define data_files to include launch files\n# 'share', package_name, 'launch' points to the directory where launch files are stored\n# glob('launch/*') collects all files within the 'launch/' directory\n# This setup allows ROS2 to install and access launch files properly\n\ndata_files=[\n    ...\n    (os.path.join('share', package_name, 'launch'), glob('launch/*')),\n]\n```\n\n----------------------------------------\n\nTITLE: Simple Service Definition in ROS 2\nDESCRIPTION: A basic example of a ROS 2 service definition that takes a string as input and returns a string. The request and response are separated by three dashes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstring str\n---\nstring str\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Workspace with colcon\nDESCRIPTION: This code snippet navigates to the ROS 2 workspace directory and builds the packages within using 'colcon build' with the '--symlink-install' option.  This allows changes to be made to the python code without needing to rebuild.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/ros2_{DISTRO}/\ncolcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Example ROS 2 Launch File (XML)\nDESCRIPTION: Provides a simple example demonstrating the structure and basic elements of a ROS 2 launch file written in XML format.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<launch>\n  <!-- Add launch configuration and nodes here -->\n  <arg name=\"node_output\" default=\"screen\" description=\"Console output mode\"/>\n  <node pkg=\"your_package\" exec=\"your_executable\" name=\"your_node_name\" output=\"$(arg node_output)\">\n    <!-- Node arguments, parameters, etc. -->\n  </node>\n</launch>\n```\n\n----------------------------------------\n\nTITLE: SingleThreadedExecutor Usage\nDESCRIPTION: This code snippet demonstrates the explicit instantiation and usage of a SingleThreadedExecutor in rclcpp. It adds a node to the executor and then spins the executor, which handles the processing of callbacks for that node in a single thread. This is the equivalent of `rclcpp::spin(node)`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Executors.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nrclcpp::executors::SingleThreadedExecutor executor;\nexecutor.add_node(node);\nexecutor.spin();\n```\n\n----------------------------------------\n\nTITLE: setup.cfg Configuration for ROS2 Python Package Scripts\nDESCRIPTION: This console snippet shows the setup.cfg file contents that inform setuptools where to place built Python scripts for the package. It configures scripts to be installed in a lib directory within the workspace, which matches ROS2's expectation for executables when using 'ros2 run'. This configuration is essential for correct packaging and executable discovery.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n[develop]\nscript_dir=$base/lib/py_pubsub\n[install]\ninstall_scripts=$base/lib/py_pubsub\n```\n\n----------------------------------------\n\nTITLE: C++ Implementation of Static Frame Broadcaster in ROS2\nDESCRIPTION: Defines a node that broadcasts a fixed frame named 'carrot1' as a child of 'turtle1', with a constant translation offset. Utilizes tf2_ros::TransformBroadcaster to send static transforms in ROS2. Requires dependencies: rclcpp, tf2_ros, geometry_msgs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <functional>\n#include <memory>\n\n#include \"geometry_msgs/msg/transform_stamped.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2_ros/transform_broadcaster.h\"\n\nusing namespace std::chrono_literals;\n\nclass FixedFrameBroadcaster : public rclcpp::Node\n{\npublic:\n  FixedFrameBroadcaster()\n  : Node(\"fixed_frame_tf2_broadcaster\")\n  {\n    tf_broadcaster_ = std::make_shared<tf2_ros::TransformBroadcaster>(this);\n\n    auto broadcast_timer_callback = [this](){\n        geometry_msgs::msg::TransformStamped t;\n\n        t.header.stamp = this->get_clock()->now();\n        t.header.frame_id = \"turtle1\";\n        t.child_frame_id = \"carrot1\";\n        t.transform.translation.x = 0.0;\n        t.transform.translation.y = 2.0;\n        t.transform.translation.z = 0.0;\n        t.transform.rotation.x = 0.0;\n        t.transform.rotation.y = 0.0;\n        t.transform.rotation.z = 0.0;\n        t.transform.rotation.w = 1.0;\n\n        tf_broadcaster_->sendTransform(t);\n    };\n    timer_ = this->create_wall_timer(100ms, broadcast_timer_callback);\n  }\n\nprivate:\n  rclcpp::TimerBase::SharedPtr timer_;\n  std::shared_ptr<tf2_ros::TransformBroadcaster> tf_broadcaster_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<FixedFrameBroadcaster>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple ROS 2 Service Server with rclpy (Python)\nDESCRIPTION: This snippet implements a ROS 2 service server node in Python using rclpy that creates an Empty service called 'test_service'. The ServiceNode class initializes the service with its callback, logs received requests, and gracefully handles shutdown on KeyboardInterrupt or ExternalShutdownException. Dependencies include the rclpy and std_srvs Python packages, and the expected input is a call to 'test_service', which responds with an empty result. This basic server sets the foundation for service-client interactions in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom rclpy.node import Node\nfrom std_srvs.srv import Empty\n\nclass ServiceNode(Node):\n    def __init__(self):\n        super().__init__('service_node')\n        self.srv = self.create_service(Empty, 'test_service', callback=self.service_callback)\n\n    def service_callback(self, request, result):\n        self.get_logger().info('Received request, responding...')\n        return result\n\nif __name__ == '__main__':\n    try:\n        with rclpy.init():\n            node = ServiceNode()\n            node.get_logger().info(\"Starting server node, shut down with CTRL-C\")\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Starting a ROS 2 Node with Parameters from a YAML File Using ros2 CLI (console)\nDESCRIPTION: Launches a node while loading parameters from a file at startup using the '--ros-args --params-file' flags. Example shows restarting the turtlesim_node with 'turtlesim.yaml' to persist saved parameter settings such as background color, including read-only parameters that can only be set at startup. This enables initializing nodes with custom configurations reliably. Requires the parameter file and the correct package and executable names.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml\n```\n\n----------------------------------------\n\nTITLE: C++ Service Client Request Handling and Logging\nDESCRIPTION: Handles asynchronous service request sending and response processing in C++, including waiting for result and error logging. Depends on rclcpp and tutorial_interfaces, utilizing ROS2 logging and node management.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nRCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"service not available, waiting again...\");\n\nauto result = client->async_send_request(request);\n// Wait for the result.\nif (rclcpp::spin_until_future_complete(node, result) ==\n  rclcpp::FutureReturnCode::SUCCESS)\n{\n  RCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"Sum: %ld\", result.get()->sum);\n} else {\n  RCLCPP_ERROR(rclcpp::get_logger(\"rclcpp\"), \"Failed to call service add_three_ints\");\n}\n\nrclcpp::shutdown();\nreturn 0;\n\n```\n\n----------------------------------------\n\nTITLE: Adding ament_package() to CMakeLists.txt\nDESCRIPTION: Adds the required ament_package() call at the end of the CMakeLists.txt file, which is necessary for all ROS 2 packages using ament_cmake.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Add this to the bottom of your CMakeLists.txt\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Polling asynchronous ROS2 service client responses in Python\nDESCRIPTION: This code snippet demonstrates how to safely interact with asynchronous ROS2 service client calls in Python by using a loop that spins the node once per iteration and checks the completion status of the returned future. This pattern allows managing node callbacks and future response polling within the same thread to avoid blocking and eliminate deadlock risks. It requires the use of rclpy and a previously initiated asynchronous service client with a 'future' returned from a call_async() method. This approach encourages reactive and non-blocking programming patterns compliant with ROS2 recommendations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Sync-Vs-Async.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwhile rclpy.ok():\n    rclpy.spin_once(node)\n    if future.done():\n        #Get response\n```\n\n----------------------------------------\n\nTITLE: Adding Library and Setting Dependencies\nDESCRIPTION: This snippet creates a shared library named '${PROJECT_NAME}' using the add_library command.  It includes source files (src/MyRobotDriver.cpp), sets include directories, and links against required libraries (pluginlib, rclcpp, webots_ros2_driver).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n  ${PROJECT_NAME}\n  SHARED\n  src/MyRobotDriver.cpp\n)\ntarget_include_directories(\n  ${PROJECT_NAME}\n  PRIVATE\n  include\n)\nament_target_dependencies(\n  ${PROJECT_NAME}\n  pluginlib\n  rclcpp\n  webots_ros2_driver\n)\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Workspace Overlay Setup - Cross-Platform Shell\nDESCRIPTION: Sources the workspace overlay environment setup scripts to use packages built in the overlay rather than or in addition to the underlay workspace. Must be sourced in a new terminal, after sourcing the underlay environment and changing directory to the workspace root. The commands vary by platform: on Linux and macOS source 'install/local_setup.bash', on Windows call 'install\\setup.bat'. This updates environment variables to overlay the built workspace packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ source install/local_setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ . install/local_setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ call install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Installing Executables with ament_cmake in CMake\nDESCRIPTION: Provides the mandatory CMake `install` command syntax for installing an executable target (`my_exe`). The specified `DESTINATION` (`lib/${PROJECT_NAME}`) is crucial and must be followed exactly for ROS 2 tooling to correctly discover and use the installed executable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS my_exe\n    DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Running C++ Talker Node\nDESCRIPTION: This code snippet sources the ROS 2 environment and then runs the C++ 'talker' demo node using 'ros2 run'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/install/local_setup.bash\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Updating Client Code for async_send_request API Change in C++\nDESCRIPTION: This snippet demonstrates how to update code after the breaking change where Client::async_send_request now returns std::future instead of std::shared_future. The updated code extracts the response value once and reuses it.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\nauto future = client->async_send_request(req);\n...\ndo_something_with_response(future.get());\n...\ndo_something_else_with_response(future.get());  // this will throw an exception now!!\n```\n\nLANGUAGE: cpp\nCODE:\n```\nauto future = client->async_send_request(req);\n...\nauto response = future.get();\ndo_something_with_response(response);\n...\ndo_something_else_with_response(response);\n```\n\n----------------------------------------\n\nTITLE: rosbag2_compression_zstd plugin updates\nDESCRIPTION: Describes version updates and header installation for the zstd compression plugin, contributing to efficient compression in rosbag2 recordings and ensuring plugin compatibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n* Bump version number to avoid conflict\\n* Install headers to include/${PROJECT_NAME} (\\#958 <https://github.com/ros2/rosbag2/issues/958>)\\n* Update package maintainers (\\#899 <https://github.com/ros2/rosbag2/issues/899>)\\n* Contributors: Chris Lalancette, Michel Hidalgo, Shane Loretz\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Launch File for Webots Simulation (Python)\nDESCRIPTION: Complete Python launch file (`robot_launch.py`) using `launch` and `webots_ros2_driver` packages. It defines actions to start a Webots instance (`WebotsLauncher`) with a specific world file and the `WebotsController` node, linking it to the robot via its URDF description. Includes event handlers for shutdown synchronization.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Content of Code/robot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Implementing a ROS 2 C++ Node for Reading Bag Files\nDESCRIPTION: Complete C++ implementation of a node that reads messages from a ROS 2 bag file. It uses the rosbag2_transport API to open a bag file, deserialize messages from a specific topic, and republish them.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <functional>\n#include <iostream>\n#include <memory>\n#include <string>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"rclcpp/serialization.hpp\"\n#include \"rosbag2_transport/reader_writer_factory.hpp\"\n#include \"turtlesim_msgs/msg/pose.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass PlaybackNode : public rclcpp::Node\n{\n  public:\n    PlaybackNode(const std::string & bag_filename)\n    : Node(\"playback_node\")\n    {\n      publisher_ = this->create_publisher<turtlesim_msgs::msg::Pose>(\"/turtle1/pose\", 10);\n\n      timer_ = this->create_wall_timer(100ms,\n          [this](){return this->timer_callback();}\n      );\n\n      rosbag2_storage::StorageOptions storage_options;\n      storage_options.uri = bag_filename;\n      reader_ = rosbag2_transport::ReaderWriterFactory::make_reader(storage_options);\n      reader_->open(storage_options);\n    }\n\n  private:\n    void timer_callback()\n    {\n      while (reader_->has_next()) {\n        rosbag2_storage::SerializedBagMessageSharedPtr msg = reader_->read_next();\n\n        if (msg->topic_name != \"/turtle1/pose\") {\n          continue;\n        }\n\n        rclcpp::SerializedMessage serialized_msg(*msg->serialized_data);\n        turtlesim_msgs::msg::Pose::SharedPtr ros_msg = std::make_shared<turtlesim_msgs::msg::Pose>();\n\n        serialization_.deserialize_message(&serialized_msg, ros_msg.get());\n\n        publisher_->publish(*ros_msg);\n        std::cout << '(' << ros_msg->x << \", \" << ros_msg->y << \")\\n\";\n\n        break;\n      }\n    }\n\n    rclcpp::TimerBase::SharedPtr timer_;\n    rclcpp::Publisher<turtlesim_msgs::msg::Pose>::SharedPtr publisher_;\n\n    rclcpp::Serialization<turtlesim_msgs::msg::Pose> serialization_;\n    std::unique_ptr<rosbag2_cpp::Reader> reader_;\n};\n\nint main(int argc, char ** argv)\n{\n  if (argc != 2) {\n    std::cerr << \"Usage: \" << argv[0] << \" <bag>\" << std::endl;\n    return 1;\n  }\n\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<PlaybackNode>(argv[1]));\n  rclcpp::shutdown();\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Fibonacci Action Data with ros2 bag (Console)\nDESCRIPTION: This command records action data for the /fibonacci action using 'ros2 bag record --action'. Output includes recording progress and topics/services being subscribed. Requires active fibonacci_client/server with introspection enabled. Bag directory and logs provide feedback about subscription and recording status.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record --action /fibonacci\n[INFO] [1744953225.214114862] [rosbag2_recorder]: Press SPACE for pausing/resuming\n[INFO] [1744953225.218369761] [rosbag2_recorder]: Listening for topics...\n[INFO] [1744953225.218386223] [rosbag2_recorder]: Event publisher thread: Starting\n[INFO] [1744953225.218580294] [rosbag2_recorder]: Recording...\n[INFO] [1744953225.725417634] [rosbag2_recorder]: Subscribed to topic '/fibonacci/_action/cancel_goal/_service_event'\n[INFO] [1744953225.727901848] [rosbag2_recorder]: Subscribed to topic '/fibonacci/_action/feedback'\n[INFO] [1744953225.729655213] [rosbag2_recorder]: Subscribed to topic '/fibonacci/_action/get_result/_service_event'\n[INFO] [1744953225.731315612] [rosbag2_recorder]: Subscribed to topic '/fibonacci/_action/send_goal/_service_event'\n[INFO] [1744953225.735061252] [rosbag2_recorder]: Subscribed to topic '/fibonacci/_action/status'\n...\n```\n\n----------------------------------------\n\nTITLE: Examining Filesystem within Talker Docker Container (Bash)\nDESCRIPTION: Executes a sequence of commands to inspect the deployed security files within the running `tutorial-talker-1` container. Similar to the listener inspection, it opens a shell, navigates to `/keystore`, and uses `tree` to verify the deployed file structure, confirming the absence of the private CA keys.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 2\ndocker exec -it tutorial-talker-1 bash\ncd keystore\ntree\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Information (rviz_common_plugins.xml)\nDESCRIPTION: This XML file configures plugin information for RViz, specifically for the `pluginlib` framework. It defines the library path, class type and base class. This is essential for RViz to recognize and load the custom display plugin at runtime.  The `description` tag is also included.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<library path=\"point_display\">\n  <class type=\"rviz_plugin_tutorial::PointDisplay\" base_class_type=\"rviz_common::Display\">\n    <description></description>\n  </class>\n</library>\n```\n\n----------------------------------------\n\nTITLE: rosdep key for doxygen\nDESCRIPTION: This snippet shows the rosdep keys associated with the doxygen dependency. It illustrates how rosdep maps a single key (doxygen) to different package names used in various operating systems' package managers. This facilitates cross-platform dependency management.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Rosdep.rst#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndoxygen:\n  arch: [doxygen]\n  debian: [doxygen]\n  fedora: [doxygen]\n  freebsd: [doxygen]\n  gentoo: [app-doc/doxygen]\n  macports: [doxygen]\n  nixos: [doxygen]\n  openembedded: [doxygen@meta-oe]\n  opensuse: [doxygen]\n  rhel: [doxygen]\n  ubuntu: [doxygen]\n```\n\n----------------------------------------\n\nTITLE: ROS 2 rclcpp LifecycleNode Constructor with Communication Interface Option in C++\nDESCRIPTION: Demonstrates the constructor of rclcpp LifecycleNode that includes a boolean flag 'enable_communication_interface' to control whether internal lifecycle services (e.g., change_state, get_state) are instantiated. Default is true to maintain backward compatibility. This allows creating lifecycle nodes without exposing services if desired.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_42\n\nLANGUAGE: c++\nCODE:\n```\nexplicit LifecycleNode(\n  const std::string & node_name,\n  const rclcpp::NodeOptions & options = rclcpp::NodeOptions(),\n  bool enable_communication_interface = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake to Build ROS2 Action Client in CMake\nDESCRIPTION: This CMake snippet configures the build system for the ROS2 action client node, defining a shared library target and linking necessary dependencies including custom action interfaces and rclcpp components. It sets include directories, compilation definitions, registers the component node as a plugin, and specifies install locations. This is a prerequisite for compiling and running the action client in ROS2. The snippet requires a ROS2 workspace setup and the presence of the client source files and interface packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(action_client SHARED\\n  src/fibonacci_action_client.cpp)\\ntarget_include_directories(action_client PRIVATE\\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\\n  $<INSTALL_INTERFACE:include>)\\ntarget_compile_definitions(action_client\\n  PRIVATE \"CUSTOM_ACTION_CPP_BUILDING_DLL\")\\ntarget_link_libraries(action_client PUBLIC\\n  ${custom_action_interfaces_TARGETS}\\n  rclcpp::rclcpp\\n  rclcpp_action::rclcpp_action\\n  rclcpp_components::component)\\nrclcpp_components_register_node(action_client PLUGIN \"custom_action_cpp::FibonacciActionClient\" EXECUTABLE fibonacci_action_client)\\ninstall(TARGETS\\n  action_client\\n  ARCHIVE DESTINATION lib\\n  LIBRARY DESTINATION lib\\n  RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Validating Trace Data - babeltrace - Console\nDESCRIPTION: Uses the `babeltrace` command-line tool to read the raw trace data generated by `ros2 trace`. The output is piped to `less` for viewing, allowing inspection of the trace events in a human-readable format to confirm data was captured.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nbabeltrace ~/.ros/tracing/perf-test | less\n```\n\n----------------------------------------\n\nTITLE: Register Test in CMakeLists.txt - CMake\nDESCRIPTION: This code snippet demonstrates how to register the integration test within the CMakeLists.txt file for the ROS 2 package. It uses a custom CMake function, add_ros_isolated_launch_test, to integrate the test with the CTest framework and specify how the test should be run, ensuring test isolation using a unique domain ID.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Integration.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\nproject(app)\n\n########\n# test #\n########\n\nif(BUILD_TESTING)\n  # Integration tests\n  find_package(ament_cmake_ros REQUIRED)\n  find_package(launch_testing_ament_cmake REQUIRED)\n  function(add_ros_isolated_launch_test path)\n    set(RUNNER \"${ament_cmake_ros_DIR}/run_test_isolated.py\")\n```\n\n----------------------------------------\n\nTITLE: Replaying Action Data as Client with ros2 bag play (Console)\nDESCRIPTION: Replays recorded action events as if sent by a client using 'ros2 bag play --send-actions-as-client'. The bag file argument must reference previously recorded action introspection data. Status logs report playback controls. Requires target action server to be running during playback to process replayed events.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play --send-actions-as-client <bag_file_name>\n[INFO] [1744953720.691068674] [rosbag2_player]: Set rate to 1\n[INFO] [1744953720.702365209] [rosbag2_player]: Adding keyboard callbacks.\n[INFO] [1744953720.702409447] [rosbag2_player]: Press SPACE for Pause/Resume\n```\n\n----------------------------------------\n\nTITLE: Adding console_scripts entry point in setup.py for ROS 2 executable creation in Python\nDESCRIPTION: Demonstrates how to specify console_scripts entry points in setup.py using setuptools. This defines the executable name 'talker_py_node' and maps it to the 'main' function in the 'talker_py' module, replacing the need for custom script files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nentry_points={\n    'console_scripts': [\n        'talker_py_node = talker_py:main',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Publishing geometry_msgs/msg/Twist Messages to ROS 2 Topics Using Console\nDESCRIPTION: This snippet illustrates how to publish Twist messages with linear and angular velocity components to the '/turtle1/cmd_vel' topic in ROS 2 using the ros2 topic pub command. The example covers using YAML and dictionary-structured strings as the message body, allowing for continuous or one-time publishing with optional flags (--once for single publication and -w to wait for subscriptions). It requires ROS 2 and the turtlesim node running with appropriate topic subscriptions. The inputs are linear and angular vector values, while the output is movement of the turtle robot as per the published velocities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist \\'linear:\\n  x: 0.0\\n  y: 0.0\\n  z: 0.0\\nangular:\\n  x: 0.0\\n  y: 0.0\\n  z: 0.0\\n\\'\n\n$ ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"\n\n$ ros2 topic pub --once -w 2 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Parameter YAML File Format with Node Names\nDESCRIPTION: This snippet demonstrates the recommended format for ROS 2 YAML parameter files. Parameters are organized under fully qualified node names mapped into nested YAML dictionaries. The key ros__parameters indicates where node-specific parameters start. It includes the use of wildcards (/**) to apply parameters globally to all nodes. This structure enables per-node parameter configuration, conforming to ROS 2’s node-centric parameter system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n/lidar_ns:\n  lidar_node_name:\n    ros__parameters:\n      lidar_name: foo\n      id: 10\nimu:\n  ros__parameters:\n    ports: [2438, 2439, 2440]\n/**:\n  ros__parameters:\n    debug: true\n```\n\n----------------------------------------\n\nTITLE: Linking Against Generated Interface Code in CMake for Same-Package Messages\nDESCRIPTION: Demonstrates how to obtain the generated C++ type support target for the current package and link the publisher executable against it, which is required when using interfaces generated in the same package as the node code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nrosidl_get_typesupport_target(cpp_typesupport_target\n  ${PROJECT_NAME} rosidl_typesupport_cpp)\n\ntarget_link_libraries(publish_address_book \"${cpp_typesupport_target}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Launch Directory in CMakeLists.txt for C++ Packages - CMake\nDESCRIPTION: This CMake snippet installs the contents of the 'launch' directory to the share directory of the package. The install() command should be placed just before ament_package() in CMakeLists.txt. No additional dependencies are required. The 'launch' directory must be present in the package source tree before installing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY\n        launch\n        DESTINATION share/${PROJECT_NAME}/\n)\n```\n\n----------------------------------------\n\nTITLE: Default Value Syntax in ROS 2 Messages\nDESCRIPTION: Shows the syntax for defining default values for fields in ROS 2 messages. A third element is added to the field definition line representing the default value.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfieldtype fieldname fielddefaultvalue\n```\n\n----------------------------------------\n\nTITLE: Using timeout in lookupTransform\nDESCRIPTION: This snippet shows how to specify a timeout when calling `lookupTransform`. The timeout parameter is a `rclcpp::Duration`, that specifies how much time the tf2 buffer will wait until the transform is found.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n    try {\n      t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        this->now(),\n        rclcpp::Duration::from_seconds(0.05));\n    } catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes with ros2 node list\nDESCRIPTION: This command lists all currently running nodes in the ROS 2 graph. It is useful for identifying active nodes and their names. The output displays a list of node names. Prerequisites include having at least one ROS 2 node running, such as the `turtlesim_node`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node list\n```\n\n----------------------------------------\n\nTITLE: Launching turtlesim Node in ROS 2 - Console\nDESCRIPTION: This command starts the turtlesim_node, a graphical simulator commonly used for ROS 2 tutorials and demos. The turtlesim package must be installed and the ROS 2 environment sourced. Upon execution, a GUI window showing the turtle will appear, ready to receive commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Use RCLCPP_INFO for logging - C++\nDESCRIPTION: This code snippet shows how to use RCLCPP_INFO for logging in ROS 2, replacing the ROS_INFO macro from ROS 1. It requires a logger object from the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n//    ROS_INFO(\"%s\", msg.data.c_str());\n    RCLCPP_INFO(node->get_logger(), \"%s\\n\", msg.data.c_str());\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Dependencies with rosdep\nDESCRIPTION: Command to install package dependencies using rosdep, which ensures all required ROS 2 packages are available before building.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with rosdep for ROS2 Package\nDESCRIPTION: Command to install dependencies for a ROS2 workspace using rosdep, specific to Linux environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nrosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Array and Bounded Type Examples in ROS 2 Messages\nDESCRIPTION: Demonstrates how to define various arrays and bounded types in ROS 2 messages, including unbounded arrays, fixed-size arrays, bounded arrays, and bounded strings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nint32[] unbounded_integer_array\nint32[5] five_integers_array\nint32[<=5] up_to_five_integers_array\n\nstring string_of_unbounded_size\nstring<=10 up_to_ten_characters_string\n\nstring[<=5] up_to_five_unbounded_strings\nstring<=10[] unbounded_array_of_strings_up_to_ten_characters_each\nstring<=10[<=5] up_to_five_strings_up_to_ten_characters_each\n```\n\n----------------------------------------\n\nTITLE: Registering Environment Hooks in CMakeLists.txt\nDESCRIPTION: This CMake code registers the environment hook files (.dsv.in and .sh.in) using the ament_environment_hooks function.  It requires the ament_cmake package. The function takes the paths to the hook files as arguments, which are relative to the CMAKE_CURRENT_SOURCE_DIR.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nament_environment_hooks(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/hooks/my_package.dsv.in\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/hooks/my_package.sh.in\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fix segfault on changing filter size for non-existent topic\nDESCRIPTION: This fixes a segmentation fault occurring when changing the filter size for a non-existent topic. The dependency is rviz itself.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Launching the URDF Display\nDESCRIPTION: This command launches the display.launch.py file from the urdf_tutorial package. It loads the specified URDF model (01-myfirst.urdf) and saves it as a parameter. It also runs nodes to publish joint states and transforms, and starts Rviz with a configuration file, allowing visualization of the robot model.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch urdf_tutorial display.launch.py model:=urdf/01-myfirst.urdf\n```\n\n----------------------------------------\n\nTITLE: Downloading tf2 Listener Source Code Using Command Line Tools\nDESCRIPTION: Lists OS-specific commands for downloading the tf2 listener source code file (turtle_tf2_listener.cpp) used in the tutorial. For Linux and macOS, wget is used, while Windows users can use curl from command prompt or PowerShell. These commands download the example C++ source file from a remote GitHub repository, facilitating easy setup and compilation of the listener node. No additional dependencies beyond standard OS tools and network access are needed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/turtle_tf2_listener.cpp\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/turtle_tf2_listener.cpp -o turtle_tf2_listener.cpp\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/turtle_tf2_listener.cpp -o turtle_tf2_listener.cpp\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Discovery Variables in CMD (Windows)\nDESCRIPTION: Illustrates setting the `ROS_AUTOMATIC_DISCOVERY_RANGE` to `LOCALHOST` and `ROS_STATIC_PEERS` in the Windows Command Prompt using `set` for the current session and `setx` for persistent configuration across sessions. Requires a Windows Command Prompt environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Improved-Dynamic-Discovery.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ set ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST\n$ set ROS_STATIC_PEERS=192.168.0.1;remote.com\n```\n\nLANGUAGE: console\nCODE:\n```\n$ setx ROS_AUTOMATIC_DISCOVERY_RANGE LOCALHOST\n$ setx ROS_STATIC_PEERS 192.168.0.1;remote.com\n```\n\n----------------------------------------\n\nTITLE: Run Fast DDS Discovery Server with Backup\nDESCRIPTION: Starts a Fast DDS discovery server instance with a specific server ID, IP address, port, and enables the backup functionality. The server saves its state for restoration in case of failure.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nfastdds discovery --server-id 0 --ip-address 127.0.0.1 --port 11811 --backup\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Folder on Ubuntu VM - Shell Commands\nDESCRIPTION: Shell commands run inside the Ubuntu VM to create and mount a shared folder used for exchanging files between the host macOS and the VM. The shared folder facilitates transfer of Webots assets. Key commands include mkdir to create the directory, mount to map the host shared directory to the VM folder using 9p protocol with virtio transport, and a line to be added into /etc/fstab to automate mounting at VM startup. This snippet requires the VM to support 9p file sharing and assumes user privileges to execute mount and edit fstab.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir /home/ubuntu/shared\n```\n\nLANGUAGE: console\nCODE:\n```\nsudo mount -t 9p -o trans=virtio share /home/ubuntu/shared -oversion=9p2000.L\n```\n\nLANGUAGE: console\nCODE:\n```\nshare     /home/ubuntu/shared     9p      trans=virtio,version=9p2000.L,rw,_netdev,nofail 0       0\n```\n\n----------------------------------------\n\nTITLE: Creating a New ROS2 Package with Ament CMake\nDESCRIPTION: Command to create a new ROS2 package named 'tutorial_interfaces' with ament_cmake build system and Apache-2.0 license. Sets up the package's directory structure for custom message and service files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 tutorial_interfaces\n```\n\n----------------------------------------\n\nTITLE: Downloading Dynamic Frame Broadcaster Source File\nDESCRIPTION: These console commands download the C++ source file for the dynamic TF2 frame broadcaster node from the ros/geometry_tutorials GitHub repository. They are platform-specific, showing methods for Linux, macOS (using wget), and Windows (using curl).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nwget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/dynamic_frame_tf2_broadcaster.cpp\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/dynamic_frame_tf2_broadcaster.cpp -o dynamic_frame_tf2_broadcaster.cpp\n```\n\nLANGUAGE: console\nCODE:\n```\ncurl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/dynamic_frame_tf2_broadcaster.cpp -o dynamic_frame_tf2_broadcaster.cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for RViz Qt Panel Plugin - CMake\nDESCRIPTION: Adds package dependencies, configures Qt5 moc processing, and sets up library build/install for demo_panel. Ensures the MOC_FILES generated from Q_OBJECT macros are included, links pluginlib and rviz_common, and registers the plugin via pluginlib_export_plugin_description_file. No parameters; must be in CMakeLists.txt. Requires ament_cmake_ros, pluginlib, and rviz_common packages installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(ament_cmake_ros REQUIRED)\nfind_package(pluginlib REQUIRED)\nfind_package(rviz_common REQUIRED)\n\nset(CMAKE_AUTOMOC ON)\nqt5_wrap_cpp(MOC_FILES\n  include/rviz_panel_tutorial/demo_panel.hpp\n)\n\nadd_library(demo_panel src/demo_panel.cpp ${MOC_FILES})\ntarget_include_directories(demo_panel PUBLIC\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:include>\n)\ntarget_link_libraries(demo_panel PUBLIC\n  pluginlib::pluginlib\n  rviz_common::rviz_common\n)\ninstall(TARGETS demo_panel\n        EXPORT export_rviz_panel_tutorial\n        ARCHIVE DESTINATION lib\n        LIBRARY DESTINATION lib\n        RUNTIME DESTINATION bin\n)\ninstall(DIRECTORY include/\n        DESTINATION include\n)\ninstall(FILES rviz_common_plugins.xml\n        DESTINATION share/${PROJECT_NAME}\n)\\nament_export_include_directories(include)\nament_export_targets(export_rviz_panel_tutorial)\npluginlib_export_plugin_description_file(rviz_common rviz_common_plugins.xml)\n\n```\n\n----------------------------------------\n\nTITLE: Echoing Topic Data\nDESCRIPTION: Displays the data being published on the specified topic. This command is used to understand the data format and content of the topic, as well as to verify data is being published. The command echoes data from the /turtle1/cmd_vel topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Loading Composable Nodes (YAML)\nDESCRIPTION: This YAML launch file loads cam2image and showimage composable nodes into an existing container. It utilizes the `LoadComposableNodes` action and includes remappings, custom parameters, and extra arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# YAML content to load composable nodes into an existing container would be here\n```\n\n----------------------------------------\n\nTITLE: Constructing Quaternion from RPY in Python\nDESCRIPTION: Uses the quaternion_from_euler function to generate a quaternion from roll, pitch, and yaw angles, facilitating rotation specifications in Python scripts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# quaternion_from_euler method is available in turtle_tf2_py/turtle_tf2_py/turtle_tf2_broadcaster.py\nq = quaternion_from_euler(1.5707, 0, -1.5707)\nprint(f'The quaternion representation is x: {q[0]} y: {q[1]} z: {q[2]} w: {q[3]}.')\n```\n\n----------------------------------------\n\nTITLE: Find Packages - CMake\nDESCRIPTION: This CMake code snippet demonstrates how to find required packages for a ROS 2 package using ament_cmake.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(std_msgs REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Installing RTI Connext DDS via apt, v6.0.1\nDESCRIPTION: This command updates the apt package index and installs the RTI Connext DDS v6.0.1 libraries. It's used for older ROS 2 distributions. Prerequisites include a Linux system with apt configured, and access to the ROS apt repositories. This command installs the Connext DDS libraries, specifically v6.0.1.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update && sudo apt install -q -y rti-connext-dds-6.0.1\n```\n\n----------------------------------------\n\nTITLE: Recording All Actions with ros2 bag (Bash)\nDESCRIPTION: Records all available action introspection data with 'ros2 bag record --all-actions'. This command collects all live action events for nodes that have introspection enabled. It produces a bag file for subsequent analysis or playback, and doesn't require explicit action names.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record --all-actions\n```\n\n----------------------------------------\n\nTITLE: Throttled logging skipping the first message in ROS 2 nodes using Python\nDESCRIPTION: Logs DEBUG level messages from a Python ROS 2 node, throttled to not output more than once per second, skipping the first time using 'skip_first=True' and 'throttle_duration_sec=1.0' keyword arguments. The message uses f-string formatting.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nnum = 4\nnode.get_logger().debug(f'My log message {num}', skip_first=True, throttle_duration_sec=1.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Node Entry Point in setup.py (Python)\nDESCRIPTION: Modifies the `setup.py` file for a Python package to register a script (`data_generator_node.py`) as a console script entry point, allowing it to be run using `ros2 run`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nentry_points={\n    'console_scripts': [\n        'simple_bag_recorder = bag_recorder_nodes_py.simple_bag_recorder:main',\n        'data_generator_node = bag_recorder_nodes_py.data_generator_node:main',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: C++ Static Transform Broadcaster Node Implementation\nDESCRIPTION: This code defines a ROS2 node that publishes static coordinate frame transforms using tf2's StaticTransformBroadcaster. It initializes the node, processes command-line arguments for transform parameters, constructs TransformStamped messages with position and orientation, and broadcasts them once at startup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <memory>\n\n#include \"geometry_msgs/msg/transform_stamped.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2/LinearMath/Quaternion.hpp\"\n#include \"tf2_ros/static_transform_broadcaster.h\"\n\nclass StaticFramePublisher : public rclcpp::Node\n{\npublic:\n  explicit StaticFramePublisher(char * transformation[])\n  : Node(\"static_turtle_tf2_broadcaster\")\n  {\n    tf_static_broadcaster_ = std::make_shared<tf2_ros::StaticTransformBroadcaster>(this);\n\n    // Publish static transforms once at startup\n    this->make_transforms(transformation);\n  }\n\nprivate:\n  void make_transforms(char * transformation[])\n  {\n    geometry_msgs::msg::TransformStamped t;\n\n    t.header.stamp = this->get_clock()->now();\n    t.header.frame_id = \"world\";\n    t.child_frame_id = transformation[1];\n\n    t.transform.translation.x = atof(transformation[2]);\n    t.transform.translation.y = atof(transformation[3]);\n    t.transform.translation.z = atof(transformation[4]);\n    tf2::Quaternion q;\n    q.setRPY(\n      atof(transformation[5]),\n      atof(transformation[6]),\n      atof(transformation[7]));\n    t.transform.rotation.x = q.x();\n    t.transform.rotation.y = q.y();\n    t.transform.rotation.z = q.z();\n    t.transform.rotation.w = q.w();\n\n    tf_static_broadcaster_->sendTransform(t);\n  }\n\n  std::shared_ptr<tf2_ros::StaticTransformBroadcaster> tf_static_broadcaster_;\n};\n\nint main(int argc, char * argv[])\n{\n  auto logger = rclcpp::get_logger(\"logger\");\n\n  // Obtain parameters from command line arguments\n  if (argc != 8) {\n    RCLCPP_INFO(\n      logger, \"Invalid number of parameters\\nusage: \"\n      \"$ ros2 run learning_tf2_cpp static_turtle_tf2_broadcaster \"\n      \"child_frame_name x y z roll pitch yaw\");\n    return 1;\n  }\n\n  // As the parent frame of the transform is `world`, it is\n  // necessary to check that the frame name passed is different\n  if (strcmp(argv[1], \"world\") == 0) {\n    RCLCPP_INFO(logger, \"Your static turtle name cannot be 'world'\");\n    return 1;\n  }\n\n  // Pass parameters and initialize node\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<StaticFramePublisher>(argv));\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements (Windows)\nDESCRIPTION: This command installs the Python dependencies listed in 'requirements.txt', using constraints specified in 'constraints.txt'.  This is used to set up the environment for building the ROS 2 documentation on Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython -m pip install -r requirements.txt -c constraints.txt\n```\n\n----------------------------------------\n\nTITLE: Example Launch File Using static_transform_publisher in Python\nDESCRIPTION: A Python launch file demonstrating the use of the tf2_ros static_transform_publisher node for publishing static transforms programmatically within a ROS 2 launch system. This approach integrates static transforms into complex launch configurations. The full Python code is included as a literal inclusion referencing 'launch/static_transform_publisher_launch.py'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Python Action Client Class for Fibonacci\nDESCRIPTION: This code defines the Fibonacci action client as a subclass of Node, initializing the ActionClient with the specific action type and name. It includes a method to send goals and wait for completion, serving as the client-side component to communicate with the server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FibonacciActionClient(Node):\n    def __init__(self):\n        super().__init__('fibonacci_action_client')\n        self._client = ActionClient(\n            self, Fibonacci, 'fibonacci'\n        )\n\n    def send_goal(self, order):\n        self._client.wait_for_server()\n        goal_msg = Fibonacci.Goal()\n        goal_msg.order = order\n        return self._client.send_goal_async(goal_msg)\n```\n\n----------------------------------------\n\nTITLE: Example Message Fields in ROS 2\nDESCRIPTION: Example of defining simple fields in a ROS 2 message, showing an integer and string field definition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nint32 my_int\nstring my_string\n```\n\n----------------------------------------\n\nTITLE: Declaring a ROS2 Parameter with Descriptor in C++\nDESCRIPTION: This C++ code snippet demonstrates how to add a descriptor to a parameter during declaration, enabling specification of textual descriptions and constraints, such as read-only status or a value range.  It uses the rcl_interfaces::msg::ParameterDescriptor to associate a description with the parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n    // ...\n\n    class MinimalParam : public rclcpp::Node\n    {\n    public:\n      MinimalParam()\n      : Node(\"minimal_param_node\")\n      {\n        auto param_desc = rcl_interfaces::msg::ParameterDescriptor{};\n        param_desc.description = \"This parameter is mine!\";\n\n        this->declare_parameter(\"my_parameter\", \"world\", param_desc);\n\n        auto timer_callback = [this](){\n          std::string my_param = this->get_parameter(\"my_parameter\").as_string();\n\n          RCLCPP_INFO(this->get_logger(), \"Hello %s!\", my_param.c_str());\n\n          std::vector<rclcpp::Parameter> all_new_parameters{rclcpp::Parameter(\"my_parameter\", \"world\")};\n          this->set_parameters(all_new_parameters);\n        };\n        timer_ = this->create_wall_timer(1000ms, timer_callback);\n\n      }\n```\n\n----------------------------------------\n\nTITLE: Executing synchronous ROS2 service client calls in Python\nDESCRIPTION: This snippet demonstrates creating and using a synchronous ROS2 Python service client for the AddTwoInts service. It shows how to properly spin the ROS node in a separate thread while making a blocking call to the service, avoiding deadlock. Dependencies include the rclpy Python client library, example_interfaces for AddTwoInts service, and Python's threading library. The example client sends a request with two integers and blocks until the response is received, then logs the result. Proper use requires spinning the node concurrently in a different thread since both call() and spin() block, preventing deadlock that would occur if run on the same thread.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Sync-Vs-Async.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Thread\n\nfrom example_interfaces.srv import AddTwoInts\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nclass MinimalClientSync(Node):\n\n    def __init__(self):\n        super().__init__('minimal_client_sync')\n        self.cli = self.create_client(AddTwoInts, 'add_two_ints')\n        while not self.cli.wait_for_service(timeout_sec=1.0):\n            self.get_logger().info('service not available, waiting again...')\n        self.req = AddTwoInts.Request()\n\n    def send_request(self):\n        self.req.a = 41\n        self.req.b = 1\n        return self.cli.call(self.req)\n        # This only works because rclpy.spin() is called in a separate thread below.\n        # Another configuration, like spinning later in main() or calling this method from a timer callback, would result in a deadlock.\n\ndef main():\n    try:\n        with rclpy.init():\n            minimal_client = MinimalClientSync()\n\n            spin_thread = Thread(target=rclpy.spin, args=(minimal_client,))\n            spin_thread.start()\n\n            response = minimal_client.send_request()\n            minimal_client.get_logger().info(\n                'Result of add_two_ints: for %d + %d = %d' %\n                (minimal_client.req.a, minimal_client.req.b, response.sum))\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Loading a component into a container in ROS 2\nDESCRIPTION: This command loads a specific component into a specified container using the ros2 component load command. It specifies the container to load into, the package of the component, and the component's class name. It also returns a unique ID.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager composition composition::Talker\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutually Exclusive Callback Group (Python)\nDESCRIPTION: This code snippet shows how to create a mutually exclusive callback group in rclpy and associate it with a subscription. Callbacks within this group will not be executed in parallel. The `create_subscription` method of the node is used with the `callback_group` parameter to specify the callback group.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Executors.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmy_callback_group = MutuallyExclusiveCallbackGroup()\nmy_subscription = self.create_subscription(Int32, \"/topic\", self.callback, qos_profile=1,\n                                           callback_group=my_callback_group)\n```\n\n----------------------------------------\n\nTITLE: Installing Server Executable in CMakeLists.txt\nDESCRIPTION: Adds an installation rule to CMakeLists.txt for the 'server' executable. It specifies that the compiled executable should be installed into the 'lib/${PROJECT_NAME}' directory within the ROS 2 install space, making it available via `ros2 run`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_10\n\nLANGUAGE: Console\nCODE:\n```\ninstall(TARGETS\n    server\n  DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Dependencies (Linux)\nDESCRIPTION: Uses the 'rosdep' tool on Linux to install system dependencies required by the ROS 2 packages located in the 'src' directory of the workspace. It targets the specified ROS distribution ({DISTRO}) and automatically confirms installations (-y). The -i flag ensures dependencies are installed even if already present system-wide.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nrosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Sending Action Goal to Turtlesim\nDESCRIPTION: This snippet demonstrates sending a goal to the turtlesim's rotate_absolute action. It uses the ros2 action send_goal command and specifies the action name, action type, and goal values in YAML format.  The expected output is the result of the action and any feedback.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action send_goal <action_name> <action_type> <values>\n```\n\n----------------------------------------\n\nTITLE: Registering Feedback Callback in ROS 2 Action Client\nDESCRIPTION: Code snippet showing how to register a feedback callback when sending a goal with a ROS 2 action client.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nself._send_goal_future = self._action_client.send_goal_async(goal_msg, feedback_callback=self.feedback_callback)\n```\n\n----------------------------------------\n\nTITLE: Enabling Ubuntu Universe Repository Using Bash\nDESCRIPTION: This snippet installs prerequisites and enables the Ubuntu Universe repository, which is required to access additional software packages including those needed for ROS 2 installation. It uses 'software-properties-common' to manage repository sources.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_Apt-Repositories.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install software-properties-common\nsudo add-apt-repository universe\n```\n\n----------------------------------------\n\nTITLE: Handling /cmd_vel Subscription Callback (C++)\nDESCRIPTION: Lambda function defined within the `init` method of `MyRobotDriver.cpp`. This callback is executed upon receiving a `geometry_msgs::msg::Twist` message on the `/cmd_vel` topic and stores the message in the `cmd_vel_msg` member variable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Content of Code/MyRobotDriver.cpp, lines 28-31\n```\n\n----------------------------------------\n\nTITLE: Adding a Library Target and Specifying Include Directories in CMake for ROS 2\nDESCRIPTION: Demonstrates adding a library target with add_library providing source files, best practices for header organization, and setting target_include_directories with PUBLIC scope to expose include paths for both build and install interfaces. Includes guidance on header layout for client-visible headers versus internal headers and notes on Windows symbol visibility management with macros and compile definitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(my_library\n  PUBLIC\n    \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n    \"$<INSTALL_INTERFACE:include/${PROJECT_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Composable Nodes in XML Launch File\nDESCRIPTION: Demonstrates how to start node containers and load components into them from XML launch files, showcasing the new frontend support for composable nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <node_container pkg=\"rclcpp_components\" exec=\"component_container\" name=\"my_container\" namespace=\"\">\n    <composable_node pkg=\"composition\" plugin=\"composition::Talker\" name=\"talker\" />\n  </node_container>\n  <load_composable_node target=\"my_container\">\n    <composable_node pkg=\"composition\" plugin=\"composition::Listener\" name=\"listener\" />\n  </load_composable_node>\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 Workspace Setup Files\nDESCRIPTION: Commands to source the setup files for a ROS2 workspace, which is necessary before running nodes, with variations for different operating systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nsource install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\ncall install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 nodes and identifying action endpoints\nDESCRIPTION: Commands to retrieve detailed information about nodes, highlighting the action server and client endpoints related to the rotate_absolute action.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node info /turtlesim\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node info /teleop_turtle\n```\n\n----------------------------------------\n\nTITLE: Normalizing a Quaternion in C++\nDESCRIPTION: Shows how to normalize a quaternion in ROS 2 using tf2::Quaternion to ensure it has unit magnitude, preventing warnings during rotation calculations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nq.normalize();\n```\n\n----------------------------------------\n\nTITLE: Adding Entry Point to setup.py - Python\nDESCRIPTION: This code adds an entry point to the setup.py file so that the ROS2 run command can execute the node.  It maps the node name 'fixed_frame_tf2_broadcaster' to the main function in the fixed_frame_tf2_broadcaster.py file within the learning_tf2_py package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'fixed_frame_tf2_broadcaster = learning_tf2_py.fixed_frame_tf2_broadcaster:main',\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters with Bash\nDESCRIPTION: This snippet demonstrates how to set a parameter value using the `ros2 param set` command, setting the 'foo' parameter to the value 'bar'.  It assumes the `parameter_blackboard` node from the demo_nodes_cpp package is running and requires ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 param set /parameter_blackboard foo bar  # sets 'foo' parameter to value 'bar'\n```\n\n----------------------------------------\n\nTITLE: Signing the policy file with OpenSSL (Bash)\nDESCRIPTION: This bash command uses OpenSSL to sign the updated 'permissions.xml' file and create a new S/MIME signed policy file named 'permissions.p7s'.  It utilizes the permissions CA certificate and private key for signing, ensuring the integrity and authenticity of the policy file. The 'text' option includes the certificate in the signed data. Access to the Permissions CA private key is essential for this step.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl smime -sign -text -in permissions.xml -out permissions.p7s \\\n  --signer permissions_ca.cert.pem \\\n  -inkey ~/sros2_demo/demo_keystore/private/permissions_ca.key.pem\n```\n\n----------------------------------------\n\nTITLE: Example RMW Implementation Error Message (Bash)\nDESCRIPTION: This snippet displays an example error message that may occur if you try to run an RMW implementation that is not installed or supported.  The message highlights an expected implementation and what was actually found, usually due to a missing dependency or incorrectly specified RMW.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nExpected RMW implementation identifier of 'rmw_connextdds' but instead found 'rmw_fastrtps_cpp', exiting with 102.\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Linter (sphinx-lint)\nDESCRIPTION: This command runs the documentation linter using sphinx-lint to identify potential issues and inconsistencies in the reStructuredText files. It helps maintain documentation quality and adherence to standards.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Publishing ROS 2 Messages to a Topic via Command Line\nDESCRIPTION: This command publishes a string message to the '/chatter' topic using the 'ros2 topic pub' sub-command. It specifies the topic name, message type (std_msgs/msg/String), and the message data ('data: Hello world').\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Command-Line-Tools.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /chatter std_msgs/msg/String \"data: Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Defining QoS Override YAML Schema\nDESCRIPTION: This snippet defines the YAML schema for QoS profile overrides, which is used to specify custom QoS settings for topics during recording and playback with rosbag2.  It's a dictionary where the keys are topic names and the values are dictionaries representing QoS policies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntopic_name: str\n  qos_policy_name: str\n  ...\n  qos_duration: object\n    sec: int\n    nsec: int\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes on a Secured Network using ros2cli (Bash)\nDESCRIPTION: Demonstrates using the `ros2 node list` command to discover active nodes within a security-enabled ROS 2 graph. Requires the security environment variables, including `ROS_SECURITY_ENCLAVE_OVERRIDE`, to be correctly set. Using `--no-daemon` and providing a `--spin-time` can improve discovery reliability in secured environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nros2 node list --no-daemon --spin-time 3\n```\n\n----------------------------------------\n\nTITLE: Copy ROS 1 Source to ROS 2 Workspace - Bash\nDESCRIPTION: This bash code copies the source directory from the ROS 1 workspace to the newly created ROS 2 workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir src\n$ cp -a ~/ros1_talker/src/talker src\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Buffering in ROS 2 CLI Commands\nDESCRIPTION: Example showing how to use the ros2 echo command with grep. By default, output buffering is now disabled in ros2 commands, making piped commands more responsive. The --use-python-default-buffering flag can be used to restore default Python buffering behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nros2 echo /chatter | grep \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Tracing Status - ROS 2 - Console\nDESCRIPTION: Sources the ROS 2 installation setup script to make ROS 2 commands available in the current terminal. Then, runs the `tracetools status` command to check if the tracing feature is enabled in the ROS 2 build. Replaces `{DISTRO}` with the ROS 2 distribution name. Expected output is \"Tracing enabled\".\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\nros2 run tracetools status\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests with colcon in ROS 2\nDESCRIPTION: Command to compile and run tests for ROS 2 packages using the colcon test verb. Optional package selection arguments can be used to limit which packages are tested.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/CLI.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ colcon test --ctest-args tests [package_selection_args]\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Docker Image with Demo Nodes - Docker - console\nDESCRIPTION: This code shows how to run a Docker container interactively from the image previously built, starting up ROS 2 with talker and listener demo nodes. The prerequisite is a built Docker image (ID as shown by the previous build). The command runs the container and outputs real-time ROS node messages indicating message exchange between publisher and subscriber. Input is the command, and output is the live message log from ROS 2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it 0dc6ce7cb487\n[INFO] [launch]: All log files can be found below /root/.ros/log/2020-10-28-02-41-45-177546-0b5d9ed123be-1\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [talker-1]: process started with pid [28]\n[INFO] [listener-2]: process started with pid [30]\n[talker-1] [INFO] [1603852907.249886590] [talker]: Publishing: 'Hello World: 1'\n[listener-2] [INFO] [1603852907.250964490] [listener]: I heard: [Hello World: 1]\n[talker-1] [INFO] [1603852908.249786312] [talker]: Publishing: 'Hello World: 2'\n[listener-2] [INFO] [1603852908.250453386] [listener]: I heard: [Hello World: 2]\n[talker-1] [INFO] [1603852909.249882257] [talker]: Publishing: 'Hello World: 3'\n[listener-2] [INFO] [1603852909.250536089] [listener]: I heard: [Hello World: 3]\n[talker-1] [INFO] [1603852910.249845718] [talker]: Publishing: 'Hello World: 4'\n[listener-2] [INFO] [1603852910.250509355] [listener]: I heard: [Hello World: 4]\n[talker-1] [INFO] [1603852911.249506058] [talker]: Publishing: 'Hello World: 5'\n[listener-2] [INFO] [1603852911.250152324] [listener]: I heard: [Hello World: 5]\n[talker-1] [INFO] [1603852912.249556670] [talker]: Publishing: 'Hello World: 6'\n[listener-2] [INFO] [1603852912.250212678] [listener]: I heard: [Hello World: 6]\n```\n\n----------------------------------------\n\nTITLE: Enabling Intra-Process Communication with Custom Allocator in ROS 2 Node Options (C++)\nDESCRIPTION: Demonstrates obtaining the global ROS 2 context and configuring NodeOptions to enable intra-process communication. This approach exposes the IntraProcessManager internals to inject a custom allocator, which prevents default heap allocations during intra-process message passing. The snippet is prerequisite to creating ROS 2 nodes that support custom allocators for intra-process pipelines.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n auto context = rclcpp::contexts::get_global_default_context();\n auto options = rclcpp::NodeOptions()\n   .context(context)\n   .use_intra_process_comms(true);\n auto node = rclcpp::Node::make_shared(\"allocator_example\", options);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Producer Node in ROS2 using C++ for Intra-Process Communication\nDESCRIPTION: This snippet defines a ROS2 node called Producer that publishes integer messages periodically on a specified topic using intra-process communication enabled with use_intra_process_comms(true). It creates a publisher, sets up a timer for periodic publishing, and outputs message details including memory address and value to demonstrate zero-copy transfer.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <cinttypes>\n#include <cstdio>\n#include <memory>\n#include <string>\n#include <utility>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/int32.hpp\"\n\nusing namespace std::chrono_literals;\n\n// Node that produces messages.\nstruct Producer : public rclcpp::Node\n{\n  Producer(const std::string & name, const std::string & output)\n  : Node(name, rclcpp::NodeOptions().use_intra_process_comms(true))\n  {\n    // Create a publisher on the output topic.\n    pub_ = this->create_publisher<std_msgs::msg::Int32>(output, 10);\n    std::weak_ptr<std::remove_pointer<decltype(pub_.get())>::type> captured_pub = pub_;\n    // Create a timer which publishes on the output topic at ~1Hz.\n    auto callback = [captured_pub]() -> void {\n        auto pub_ptr = captured_pub.lock();\n        if (!pub_ptr) {\n          return;\n        }\n        static int32_t count = 0;\n        std_msgs::msg::Int32::UniquePtr msg(new std_msgs::msg::Int32());\n        msg->data = count++;\n        printf(\n          \"Published message with value: %d, and address: 0x%\" PRIXPTR \"\\n\", msg->data,\n          reinterpret_cast<std::uintptr_t>(msg.get()));\n        pub_ptr->publish(std::move(msg));\n      };\n    timer_ = this->create_wall_timer(1s, callback);\n  }\n\n  rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr pub_;\n  rclcpp::TimerBase::SharedPtr timer_;\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Parameters to a ROS 2 Node from a YAML File Using ros2 CLI (console)\nDESCRIPTION: Loads parameters from a YAML file into an active ROS 2 node using 'ros2 param load'. Demonstrated by applying 'turtlesim.yaml' to '/turtlesim'. Some parameters may fail if they are read-only and can only be set at node startup. This method enables restoring saved configurations for live nodes. Requires the node to be running and the YAML file accessible.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param load /turtlesim turtlesim.yaml\nSet parameter background_b successful\nSet parameter background_g successful\nSet parameter background_r successful\nSet parameter qos_overrides./parameter_events.publisher.depth failed: parameter 'qos_overrides./parameter_events.publisher.depth' cannot be set because it is read-only\nSet parameter qos_overrides./parameter_events.publisher.durability failed: parameter 'qos_overrides./parameter_events.publisher.durability' cannot be set because it is read-only\nSet parameter qos_overrides./parameter_events.publisher.history failed: parameter 'qos_overrides./parameter_events.publisher.history' cannot be set because it is read-only\nSet parameter qos_overrides./parameter_events.publisher.reliability failed: parameter 'qos_overrides./parameter_events.publisher.reliability' cannot be set because it is read-only\nSet parameter use_sim_time successful\n```\n\n----------------------------------------\n\nTITLE: Recording with Per-Message Compression\nDESCRIPTION: This command-line snippet demonstrates using `ros2 bag record` with per-message compression. The `--compression-format zstd` option specifies the compression format, and `--compression-mode message` specifies per-message compression.  This enables compression of individual messages within the bag file, improving storage efficiency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record --all --compression-format zstd --compression-mode message\n```\n\n----------------------------------------\n\nTITLE: Creating a Marker Publisher Node in ROS2 (C++)\nDESCRIPTION: This code snippet demonstrates how to create a publisher node in ROS2 that publishes `visualization_msgs::msg::Marker` messages to the `visualization_marker` topic. This is the first step in sending marker data for visualization in RViz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/Marker-Display-types/Marker-Display-types.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nauto marker_pub = node->create_publisher<visualization_msgs::msg::Marker>(\"visualization_marker\", 1);\n```\n\n----------------------------------------\n\nTITLE: Rotating Turtle with Feedback\nDESCRIPTION: This command sends a rotate_absolute goal to the turtlesim action server, requesting negative rotation, and includes the --feedback flag to display intermediate updates.  Dependencies: ROS2, turtlesim package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action send_goal /turtle1/rotate_absolute turtlesim_msgs/action/RotateAbsolute \"{theta: -1.57}\" --feedback\n```\n\n----------------------------------------\n\nTITLE: Defining ROS2 IncrementerPipe Node Members\nDESCRIPTION: Declares the publisher and subscriber members for the IncrementerPipe ROS2 node. These shared pointers manage the communication interfaces for sending and receiving Integer messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n     rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr pub;\n     rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr sub;\n```\n\n----------------------------------------\n\nTITLE: Static Parameter Type Declaration in C++\nDESCRIPTION: Examples demonstrating the new static parameter typing behavior in rclcpp, including declaring parameters with specific types, mandatory overrides, conditional declarations, and retaining the old dynamic typing behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\n// declare integer parameter with default value, trying to set it to a different type will fail.\nnode->declare_parameter(\"my_int\", 5);\n// declare string parameter with no default and mandatory user provided override.\n// i.e. the user must pass a parameter file setting it or a command line rule -p <param_name>:=<value>\nnode->declare_parameter(\"string_mandatory_override\", rclcpp::PARAMETER_STRING);\n// Conditionally declare a floating point parameter with a mandatory override.\n// Useful when the parameter is only needed depending on other conditions and no default is reasonable.\nif (mode == \"modeA\") {\n    node->declare_parameter(\"conditionally_declare_double_parameter\", rclcpp::PARAMETER_DOUBLE);\n}\n// You can also get the old dynamic typing behavior if you want:\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(\"dynamically_typed_param\", rclcpp::ParameterValue{}, descriptor);\n```\n\n----------------------------------------\n\nTITLE: Configuring ROS 2 Python Package Setup (setup.py)\nDESCRIPTION: Content of `setup.py` for a ROS 2 Python package (`my_package`). It defines package metadata and specifies data files (like world, URDF, launch files) to be installed using `setuptools`. This ensures the necessary resource files are available at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Content of Code/setup.py\n```\n\n----------------------------------------\n\nTITLE: Modifying rosdep sources.list - Console\nDESCRIPTION: This console command modifies the rosdep sources list to point to a specific rosdistro version (tagged branch). It uses the `sed` command to find and replace the main rosdistro URL in the `20-default.list` file. Requires root access if running on a local host.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Custom-Rosdistro.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sed -i \"s|ros\\/rosdistro\\/master|ros\\/rosdistro\\/rolling\\/2024-02-28|\" /etc/ros/rosdep/sources.list.d/20-default.list\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package (Linux/macOS)\nDESCRIPTION: Builds the specific ROS 2 package named 'learning_tf2_cpp' using the 'colcon' build tool. This command compiles the source code and installs the package into the 'install' directory within the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Launching Webots Separately for Manual ROS 2 Node Restart (Python)\nDESCRIPTION: Provides a minimal ROS 2 launch file specifically designed to launch only the Webots simulator. This file is intended to be run in a separate process from other ROS 2 nodes. This separation is necessary for complex scenarios (e.g., involving Nav2 or RViz) where other nodes require a full shutdown and cannot be automatically restarted by the launch system upon a Webots reset.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef generate_launch_description():\n    # Starts Webots\n    webots = WebotsLauncher(world=PathJoinSubstitution([package_dir, 'worlds', world]))\n\n    return LaunchDescription([\n        webots\n    ])\n```\n\n----------------------------------------\n\nTITLE: Update package.xml with package metadata\nDESCRIPTION: This XML snippet demonstrates how to update the 'package.xml' file with essential package metadata such as the description, maintainer information, and license details.  These fields are crucial for package identification and distribution within the ROS2 ecosystem.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <description>C++ parameter tutorial</description>\n  <maintainer email=\"you@email.com\">Your Name</maintainer>\n  <license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Adding Console Script Entry Point (Python)\nDESCRIPTION: Configures the `entry_points` in `setup.py` to define a console script named `node_with_parameters`. This entry point maps the executable name to the `main` function within the `parameter_event_handler` module, allowing the node to be run using `ros2 run`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nentry_points={\n      'console_scripts': [\n          'node_with_parameters = python_parameter_event_handler.parameter_event_handler:main',\n      ],\n  },\n```\n\n----------------------------------------\n\nTITLE: Using Gazebo Vendor Packages in package.xml\nDESCRIPTION: An example of how to declare a dependency on Gazebo vendor packages in a ROS 2 package.xml file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Jazzy-Jalisco.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<depend>gz_math_vendor</depend>\n```\n\n----------------------------------------\n\nTITLE: Starting and joining a background thread to spin ROS 2 executor in main() function in Python\nDESCRIPTION: Shows adding a new thread in main() to call spin_in_background(), starting it after rclpy.init(), and joining the thread before exiting to keep the ROS 2 callbacks running in background during execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n# In rospy callbacks are always called in background threads.\n# Spin the executor in another thread for similar behavior in ROS 2.\nt = threading.Thread(target=spin_in_background)\nt.start()\n```\n\nLANGUAGE: Python\nCODE:\n```\nt.join()\n```\n\n----------------------------------------\n\nTITLE: Silence a dead store warning.\nDESCRIPTION: This resolves a 'dead store' warning. This eliminates unused variables in the code. Dependencies: C++ compiler\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Assign Translation and Rotation (Python)\nDESCRIPTION: This Python snippet from the `handle_turtle_pose` callback demonstrates assigning translation and rotation data from the incoming `Pose` message to the `TransformStamped` object. It copies the 2D x, y pose into the translation, sets z to 0, and converts the 2D orientation (theta) into a 3D quaternion rotation around the z-axis.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# Turtle only exists in 2D, thus we get x and y translation\n# coordinates from the message and set the z coordinate to 0\nt.transform.translation.x = msg.x\nt.transform.translation.y = msg.y\nt.transform.translation.z = 0.0\n\n# For the same reason, turtle can only rotate around one axis\n# and this why we set rotation in x and y to 0 and obtain\n# rotation in z axis from the message\nq = quaternion_from_euler(0, 0, msg.theta)\nt.transform.rotation.x = q[0]\nt.transform.rotation.y = q[1]\nt.transform.rotation.z = q[2]\nt.transform.rotation.w = q[3]\n```\n\n----------------------------------------\n\nTITLE: Implementing a ROS 2 C++ Publisher Node Using Custom AddressBook Message\nDESCRIPTION: A complete C++ source code example implementing a ROS 2 node that periodically publishes an 'AddressBook' message with sample contact data. It includes headers, creation of a rclcpp::Node subclass, declaration of a publisher for the custom message type, periodic publishing using a wall timer, message field population, and main function initializing and running the ROS 2 node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#include <chrono>\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"more_interfaces/msg/address_book.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass AddressBookPublisher : public rclcpp::Node\n{\npublic:\n  AddressBookPublisher()\n  : Node(\"address_book_publisher\")\n  {\n    address_book_publisher_ =\n      this->create_publisher<more_interfaces::msg::AddressBook>(\"address_book\", 10);\n\n    auto publish_msg = [this]() -> void {\n        auto message = more_interfaces::msg::AddressBook();\n\n        message.first_name = \"John\";\n        message.last_name = \"Doe\";\n        message.phone_number = \"1234567890\";\n        message.phone_type = message.PHONE_TYPE_MOBILE;\n\n        std::cout << \"Publishing Contact\\nFirst:\" << message.first_name <<\n          \"  Last:\" << message.last_name << std::endl;\n\n        this->address_book_publisher_->publish(message);\n      };\n    timer_ = this->create_wall_timer(1s, publish_msg);\n  }\n\nprivate:\n  rclcpp::Publisher<more_interfaces::msg::AddressBook>::SharedPtr address_book_publisher_;\n  rclcpp::TimerBase::SharedPtr timer_;\n};\n\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<AddressBookPublisher>());\n  rclcpp::shutdown();\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing rqt and plugins\nDESCRIPTION: This command installs the rqt graphical user interface and its associated plugins. It uses `sudo apt update` to refresh the package list before installing.  The specific package name varies based on the ROS 2 distribution.  Requires sudo privileges and a configured ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt update\n$ sudo apt install '~nros-{DISTRO}-rqt*'\n```\n\n----------------------------------------\n\nTITLE: Specifying ROS2 Package Dependencies for RViz Plugin - XML\nDESCRIPTION: These XML entries specify required dependencies in the package.xml file for building the plugin: pluginlib (for plugin registration) and rviz_common (for panel base classes). No parameters; must be included in the package.xml. Essential for ROS2 package and build resolution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<depend>pluginlib</depend>\n<depend>rviz_common</depend>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fibonacci Action Client in C++\nDESCRIPTION: C++ code for a ROS2 action client that sends Fibonacci sequence calculation requests. It handles sending goals, processing feedback, and receiving results from the action server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nclass FibonacciActionClient : public rclcpp::Node\n\n// Constructor\nFibonacciActionClient()\n: Node(\"fibonacci_action_client\")\n{\n  // Create an action client with the action name and node\n  this->client_ptr_ = rclcpp_action::create_client<Fibonacci>(\n    this,\n    \"fibonacci\");\n\n  // Create a timer to trigger sending a goal\n  this->timer_ = this->create_wall_timer(\n    std::chrono::milliseconds(500),\n    std::bind(&FibonacciActionClient::send_goal, this));\n}\n\n// Send goal function triggered by timer\nvoid send_goal()\n{\n  // Cancel the timer to avoid sending multiple goals\n  this->timer_->cancel();\n\n  // Wait for the action server\n  if (!this->client_ptr_->wait_for_action_server()) {\n    RCLCPP_ERROR(this->get_logger(), \"Action server not available after waiting\");\n    rclcpp::shutdown();\n    return;\n  }\n\n  // Create a goal message\n  auto goal_msg = Fibonacci::Goal();\n  goal_msg.order = 10;\n\n  RCLCPP_INFO(this->get_logger(), \"Sending goal\");\n\n  // Setup response callback\n  auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions();\n  send_goal_options.goal_response_callback =\n    std::bind(&FibonacciActionClient::goal_response_callback, this, std::placeholders::_1);\n  \n  // Setup feedback callback\n  send_goal_options.feedback_callback =\n    std::bind(&FibonacciActionClient::feedback_callback, this, std::placeholders::_1, std::placeholders::_2);\n  \n  // Setup result callback\n  send_goal_options.result_callback =\n    std::bind(&FibonacciActionClient::result_callback, this, std::placeholders::_1);\n  \n  // Send the goal\n  this->client_ptr_->async_send_goal(goal_msg, send_goal_options);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Service Introspection to CONTENTS (Bash)\nDESCRIPTION: This bash command uses the `ros2 param set` tool to change the `service_configure_introspection` parameter of the `/introspection_service` node to `contents`. This enables service introspection including user data payloads for the server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 param set /introspection_service service_configure_introspection contents\n```\n\n----------------------------------------\n\nTITLE: Configuring the Kernel via Menuconfig\nDESCRIPTION: Opens the kernel configuration menu (menuconfig) to enable specific real-time options. Requires the user to navigate the menu and select the options to enable RT-PREEMPT and high-resolution timers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n   $ make menuconfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Security for ros2cli Tools\nDESCRIPTION: Sets the standard security environment variables and additionally defines `ROS_SECURITY_ENCLAVE_OVERRIDE`. This override variable grants `ros2cli` commands (like `ros2 node list`, `ros2 topic list`) the necessary permissions to interact with the secured network by impersonating the specified node's security profile (in this case, the listener's).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_SECURITY_KEYSTORE=~/sros2_demo/demo_keystore\nexport ROS_SECURITY_ENABLE=true\nexport ROS_SECURITY_STRATEGY=Enforce\nexport ROS_SECURITY_ENCLAVE_OVERRIDE=/talker_listener/listener\n```\n\nLANGUAGE: bat\nCODE:\n```\nset ROS_SECURITY_KEYSTORE=%cd%/demo_keystore\nset ROS_SECURITY_ENABLE=true\nset ROS_SECURITY_STRATEGY=Enforce\nset ROS_SECURITY_ENCLAVE_OVERRIDE=/talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running ROS 2 Docker Images on Raspberry Pi - Console\nDESCRIPTION: This snippet demonstrates how to fetch and launch an official ROS 2 Docker image using the docker pull and docker run commands. These commands assume Docker is installed and the correct {DISTRO} placeholder is replaced with the desired ROS 2 distribution (e.g., foxy, humble). The -it flag provides interactive access, --rm removes the container after exit, and ros:{DISTRO}-ros-core specifies the chosen image variant. No additional dependencies beyond Docker are required.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installing-on-Raspberry-Pi.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull ros:{DISTRO}-ros-core\n$ docker run -it --rm ros:{DISTRO}-ros-core\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard Version\nDESCRIPTION: This snippet checks if the CMAKE_CXX_STANDARD variable is set. If not, it sets it to 14. This ensures that the code is compiled using the C++14 standard, providing a consistent compilation environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 14)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing ROS 2 Repository from Ubuntu\nDESCRIPTION: Commands to remove the ROS 2 repository from the APT sources, update the package cache, and clean up the system after uninstalling ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/apt/sources.list.d/ros2.list\nsudo apt update\nsudo apt autoremove\n# Consider upgrading for packages previously shadowed.\nsudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Populate TransformStamped Header (Python)\nDESCRIPTION: This Python snippet from the `handle_turtle_pose` callback shows how to create a `geometry_msgs.msg.TransformStamped` message and populate its header fields. It sets the timestamp to the current ROS 2 time, assigns 'world' as the parent `frame_id`, and uses the node's `turtlename` parameter for the child `child_frame_id`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nt = TransformStamped()\n\n# Read message content and assign it to\n# corresponding tf variables\nt.header.stamp = self.get_clock().now().to_msg()\nt.header.frame_id = 'world'\nt.child_frame_id = self.turtlename\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Content Filtering Subscription C++\nDESCRIPTION: Configures a ROS 2 subscriber to use content filtering by setting the filter expression and parameters in `SubscriptionOptions`. It creates a subscription for `std_msgs::msg::Float32` messages on the topic \"temperature\". It also checks if content filtering is actually supported by the underlying RMW implementation using `is_cft_enabled()` and logs the status and filter details.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Content-Filtering-Subscription.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n          std::to_string(EMERGENCY_TEMPERATURE[1])\n        };\n\n        sub_ = create_subscription<std_msgs::msg::Float32>(\"temperature\", 10, callback, sub_options);\n\n        if (!sub_->is_cft_enabled()) {\n          RCLCPP_WARN(\n            this->get_logger(), \"Content filter is not enabled since it's not supported\");\n        } else {\n          RCLCPP_INFO(\n            this->get_logger(),\n            \"subscribed to topic \\\"%s\\\" with content filter options \\\"%s, {%s}\\\"\",\n            sub_->get_topic_name(),\n            sub_options.content_filter_options.filter_expression.c_str(),\n            rcpputils::join(sub_options.content_filter_options.expression_parameters, \", \").c_str());\n        }\n      }\n\n    private:\n      rclcpp::Subscription<std_msgs::msg::Float32>::SharedPtr sub_;\n    };\n```\n\n----------------------------------------\n\nTITLE: Running the Polygon Area Node Example - console\nDESCRIPTION: Executes the polygon_base area_node, which loads and runs area plugins to calculate and display the area of polygons. Assumes prior completion of build and environment sourcing steps. The output includes calculated areas for triangle and square; node execution requires the previously built polygon_base and polygon_plugins packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nros2 run polygon_base area_node\nTriangle area: 43.30\nSquare area: 100.00\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies in CMake for ROS2 C++\nDESCRIPTION: This CMake command links the specified dependencies to the executable.  `<executable-name>` should be replaced with the name of the executable. `[targets from your dependencies]` should be replaced with the targets of the packages being linked.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(<executable-name> PUBLIC [targets from your dependencies])\n```\n\n----------------------------------------\n\nTITLE: Building Selected ROS 2 Packages with colcon in Docker - Bash\nDESCRIPTION: This Dockerfile section shows how to build only selected ROS 2 packages (demo_nodes_cpp and demo_nodes_py) using colcon, possibly with specified mixins for release builds. The OVERLAY_MIXINS argument allows customization of build optimizations. It assumes all dependencies are installed and sources the ROS 2 environment before building. Output is the built install workspace, ready for use by ROS 2 launch.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# build overlay source\nCOPY --from=cacher $OVERLAY_WS/src ./src\nARG OVERLAY_MIXINS=\"release\"\nRUN . /opt/ros/$ROS_DISTRO/setup.sh && \\\n    colcon build \\\n      --packages-select \\\n        demo_nodes_cpp \\\n        demo_nodes_py \\\n      --mixin $OVERLAY_MIXINS\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Environment Variables\nDESCRIPTION: Sets the essential environment variables required by the ROS 2 middleware to enable and enforce security. `ROS_SECURITY_KEYSTORE` points to the keystore directory, `ROS_SECURITY_ENABLE` activates security features, and `ROS_SECURITY_STRATEGY=Enforce` mandates that all communication must be secure. These must be set in each terminal running secured ROS 2 nodes or tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_SECURITY_KEYSTORE=~/sros2_demo/demo_keystore\nexport ROS_SECURITY_ENABLE=true\nexport ROS_SECURITY_STRATEGY=Enforce\n```\n\nLANGUAGE: bat\nCODE:\n```\nset ROS_SECURITY_KEYSTORE=%cd%/demo_keystore\nset ROS_SECURITY_ENABLE=true\nset ROS_SECURITY_STRATEGY=Enforce\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Launching Composable Nodes (XML)\nDESCRIPTION: This XML launch file instantiates a cam2image and showimage composable node. It includes remappings, custom parameters, and extra arguments for setting up intra-process communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<launch>\n  <!-- Composable node definitions would be here -->\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Adding ros2launch as an exec_depend in package.xml - XML\nDESCRIPTION: This snippet illustrates how to declare ros2launch as an exec_depend within a package.xml file for a ROS 2 package. Adding this dependency ensures that the ros2 launch command and all launch file formats are recognized after building the package. The user must edit package.xml and insert the dependency element within the correct block. Prerequisite: XML syntax compliance and proper integration with ROS 2's build tools. Input: none; output: proper dependency resolution at build and runtime. Constraint: only valid within ROS 2 package.xml contexts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<exec_depend>ros2launch</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Exporting Dependencies in ROS 2\nDESCRIPTION: Demonstrates how to export dependencies in ROS 2 using ament_export_dependencies, replacing the CATKIN_DEPENDS and DEPENDS arguments from ROS 1.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nament_export_dependencies(\n   foo\n   bar\n   std_msgs\n   baz\n)\n```\n\n----------------------------------------\n\nTITLE: Running rqt_graph\nDESCRIPTION: This command opens the rqt_graph visualization tool, showing the nodes, topics, and their connections in a ROS 2 system.  rqt_graph is a graphical tool that aids in understanding the relationships between different components of a ROS 2 system, specifically the interaction through topics.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rqt_graph\n```\n\n----------------------------------------\n\nTITLE: Registering Parameter Change Callback (Python)\nDESCRIPTION: Adds a callback function (`self.callback`) to the `ParameterEventHandler` to monitor changes specifically to the parameter named 'an_int_param' on the node named 'node_with_parameters' (the node itself). The returned handle must be stored to keep the callback active.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nself.callback_handle = self.handler.add_parameter_callback(\n                parameter_name=\"an_int_param\",\n                node_name=\"node_with_parameters\",\n                callback=self.callback,\n            )\n```\n\n----------------------------------------\n\nTITLE: Running rqt_console in ROS 2 - Console\nDESCRIPTION: This command launches the rqt_console GUI tool, which displays log messages from ROS 2 nodes in real time. The rqt_console package must be installed, and the ROS 2 environment must be sourced in the terminal. No additional arguments are required; the tool will open its main window for filtering and examining logs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rqt_console rqt_console\n```\n\n----------------------------------------\n\nTITLE: Importing ROS2 Python Dependencies\nDESCRIPTION: This Python snippet imports core ROS2 Python client library (rclpy) elements required to define nodes, handle shutdown exceptions, and use the Node base class. It also imports the standard ROS2 String message type from std_msgs package, which is used for message passing in publisher and subscriber nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom std_msgs.msg import String\n```\n\n----------------------------------------\n\nTITLE: Processing Goals and Feedback with ROS2 Action Client in C++\nDESCRIPTION: This snippet demonstrates how the ROS2 action client handles an accepted goal using a ``feedback_callback`` to process asynchronous feedback from the action server. The snippet includes the implementation details of receiving feedback and printing progress updates. It depends on ROS2 rclcpp and rclcpp_action C++ client libraries and requires an active ROS2 action server. Input includes clients goals sent to the server; output is feedback printing to logs or console. It assumes the setup of an action client node with action interface types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nAssuming the goal was accepted by the server, it will start processing.\\nAny feedback to the client will be handled by the ``feedback_callback``:\n```\n\nLANGUAGE: c++\nCODE:\n```\n.. literalinclude:: scripts/client.cpp\\n    :language: c++\\n    :lines: 51-58\n```\n\n----------------------------------------\n\nTITLE: Publishing Static Coordinate Transforms Using tf2_ros static_transform_publisher with Quaternion Rotation\nDESCRIPTION: Uses tf2_ros static_transform_publisher to broadcast static transforms with position (x, y, z) and rotation represented as a quaternion (qx, qy, qz, qw). This method is essential for representing arbitrary rotations without gimbal lock. Frame names (parent and child) must also be specified. Intended for command-line or launch file usage.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run tf2_ros static_transform_publisher --x x --y y --z z --qx qx --qy qy --qz qz --qw qw --frame-id frame_id --child-frame-id child_frame_id\n```\n\n----------------------------------------\n\nTITLE: Publishing a Sphere Marker in ROS2 (C++)\nDESCRIPTION: This code snippet demonstrates how to create and publish a `visualization_msgs::msg::Marker` message representing a sphere in ROS2.  It covers setting the frame ID, timestamp, namespace, ID, type (sphere), action (add), pose, scale, color, and lifetime of the marker. This allows a sphere to be displayed in RViz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/Marker-Display-types/Marker-Display-types.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nvisualization_msgs::msg::Marker marker;\n\n    marker.header.frame_id = \"/my_frame\";\n    marker.header.stamp = rclcpp::Clock().now();\n\n    marker.ns = \"basic_shapes\";\n    marker.id = 0;\n\n    marker.type = visualization_msgs::msg::Marker::SPHERE;\n\n    marker.action = visualization_msgs::msg::Marker::ADD;\n\n    marker.pose.position.x = 0;\n    marker.pose.position.y = 0;\n    marker.pose.position.z = 0;\n    marker.pose.orientation.x = 0.0;\n    marker.pose.orientation.y = 0.0;\n    marker.pose.orientation.z = 0.0;\n    marker.pose.orientation.w = 1.0;\n\n    marker.scale.x = 1.0;\n    marker.scale.y = 1.0;\n    marker.scale.z = 1.0;\n\n    marker.color.r = 0.0f;\n    marker.color.g = 1.0f;\n    marker.color.b = 0.0f;\n    marker.color.a = 1.0;   // Don't forget to set the alpha!\n\n    // only if using a MESH_RESOURCE marker type:\n    marker.mesh_resource = \"package://pr2_description/meshes/base_v0/base.dae\";\n\n    marker.lifetime = rclcpp::Duration::from_nanoseconds(0);\n\n    marker_pub->publish(marker);\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the urdf_tutorial_cpp Package with CMake\nDESCRIPTION: This CMakeLists.txt snippet configures the build system for the urdf_tutorial_cpp ROS 2 package. It specifies the project details, compiler warnings, and dependencies on common ROS 2 packages like rclcpp, sensor_msgs, geometry_msgs, and tf2_ros. The snippet defines compilation of the urdf_tutorial_cpp executable from urdf_tutorial.cpp, links necessary libraries, and installs executables and resource directories (launch and urdf files). This enables colcon to build and install the package properly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-cpp.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\nproject(urdf_tutorial_cpp)\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\n# find dependencies\nfind_package(ament_cmake REQUIRED)\nfind_package(geometry_msgs REQUIRED)\nfind_package(sensor_msgs REQUIRED)\nfind_package(tf2_ros REQUIRED)\nfind_package(tf2_geometry_msgs REQUIRED)\nfind_package(rclcpp REQUIRED)\n\nadd_executable(urdf_tutorial_cpp src/urdf_tutorial.cpp)\n\ntarget_link_libraries(urdf_tutorial_cpp PUBLIC\n  ${geometry_msgs_TARGETS}\n  ${sensor_msgs_TARGETS}\n  tf2_ros::tf2_ros\n  ${tf2_geometry_msgs_TARGETS}\n  rclcpp::rclcpp\n)\n\ninstall(TARGETS\n  urdf_tutorial_cpp\n  DESTINATION lib/${PROJECT_NAME}\n)\n\ninstall(DIRECTORY\n  launch\n  DESTINATION share/${PROJECT_NAME}\n)\n\ninstall(DIRECTORY\n  urdf\n  DESTINATION share/${PROJECT_NAME}\n)\n\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Using Basic lookupTransform() for Time Travel in tf2\nDESCRIPTION: A code snippet showing how to look up a transform from 5 seconds in the past using the basic tf2 API. This approach has limitations as it requests transforms for both source and target frames at the same past time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::Time when = this->get_clock()->now() - rclcpp::Duration(5, 0);\ntry {\n    t = tf_buffer_->lookupTransform(\n        toFrameRel,\n        fromFrameRel,\n        when,\n        50ms);\n} catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Updating build dependencies in package.xml - XML\nDESCRIPTION: Short XML snippets showing the removal of Catkin/rospy dependencies and addition of rclpy, as well as adding the export of build type for ament_python packages. These changes are required to adapt the package.xml from ROS 1 to ROS 2 format.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<!-- delete this -->\n<buildtool_depend>catkin</buildtool_depend>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Delete this -->\n<depend>rospy</depend>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<depend>rclpy</depend>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<export>\n  <build_type>ament_python</build_type>\n</export>\n```\n\n----------------------------------------\n\nTITLE: Complete CMakeLists.txt for Talker - CMake\nDESCRIPTION: This provides the full `CMakeLists.txt` file, which includes all necessary configurations to build the `talker` executable within a ROS 2 package.  It encompasses setting the minimum CMake version, project name, compiler options, finding ROS 2 packages (`rclcpp`, `std_msgs`, and `ament_cmake`), creating the executable, setting include directories, linking libraries, installing the executable and finally defining the ament package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\n   cmake_minimum_required(VERSION 3.14.4)\n   project(talker)\n   if(NOT CMAKE_CXX_STANDARD)\n     set(CMAKE_CXX_STANDARD 17)\n   endif()\n   if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n     add_compile_options(-Wall -Wextra -Wpedantic)\n   endif()\n   find_package(ament_cmake REQUIRED)\n   find_package(rclcpp REQUIRED)\n   find_package(std_msgs REQUIRED)\n   add_executable(talker talker.cpp)\n   target_include_directories(talker PUBLIC\n      \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n      \"$<INSTALL_INTERFACE:include/${PROJECT_NAME}>\")\n   target_link_libraries(talker PUBLIC\n     rclcpp::rclcpp\n     ${std_msgs_TARGETS})\n   install(TARGETS talker\n     DESTINATION lib/${PROJECT_NAME})\n   ament_package()\n```\n\n----------------------------------------\n\nTITLE: Handling Action Completion Events in a Python ROS 2 Launch File\nDESCRIPTION: This snippet illustrates using `RegisterEventHandler` with `OnExecutionComplete` to trigger subsequent actions after a specific action (`spawn_turtle`) finishes. The `target_action` specifies the action to monitor, and `on_completion` lists the actions to execute upon completion: logging a message, running the `change_background_r` action immediately, and running the `change_background_r_conditioned` action after a 2-second delay using `TimerAction`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    on_spawn_complete = RegisterEventHandler(\n        OnExecutionComplete(\n            target_action=spawn_turtle,\n            on_completion=[LogInfo(msg='Spawn finished'),\n                           change_background_r,\n                           TimerAction(period=2.0,\n                                       actions=[change_background_r_conditioned])]\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Macro in Xacro\nDESCRIPTION: This XML shows a simple, often redundant, xacro macro definition using `<xacro:macro>`. The macro, named 'default_origin', encapsulates an `<origin>` element. It is then invoked using `<xacro:default_origin />`, effectively inserting the origin element. Macros are replaced by the content inside them wherever the macro is called.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<xacro:macro name=\"default_origin\">\n    <origin xyz=\"0 0 0\" rpy=\"0 0 0\"/>\n</xacro:macro>\n<xacro:default_origin />\n```\n\n----------------------------------------\n\nTITLE: Launch File Demonstrating Use of Environment Variables (Python)\nDESCRIPTION: This launch script shows how to incorporate environment variables, such as 'USER', to set namespaces or identify nodes dynamically based on the environment. It highlights flexible node configuration that adapts to different runtime environments or user contexts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# fixed_broadcaster_launch.py\nimport launch\nimport launch_ros.actions\nfrom launch.substitutions import EnvironmentVariable\n\ndef generate_launch_description():\n    user_env = EnvironmentVariable('USER')\n    ns_name = user_env.perform()\n    return launch.LaunchDescription([\n        launch_ros.actions.Node(\n            package='turtle_tf2',\n            executable='fixed_broadcaster',\n            namespace=ns_name,\n            name='fixed_broadcaster',\n            output='screen'\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Generate Test Description - Python\nDESCRIPTION: This Python function generates a launch description for integration testing.  It defines the nodes to be launched, in this case the turtlesim_node, and sets up a timer to initialize the tests. It mimics the functionality of a ROS 2 launch file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Integration.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef generate_test_description():\n    return (\n        launch.LaunchDescription(\n            [\n                # Nodes under test\n                launch_ros.actions.Node(\n                    package='turtlesim',\n                    namespace='',\n                    executable='turtlesim_node',\n                    name='turtle1',\n                ),\n                # Launch tests 0.5 s later\n                launch.actions.TimerAction(\n                    period=0.5, actions=[launch_testing.actions.ReadyToTest()]),\n            ]\n        ), {},\n    )\n```\n\n----------------------------------------\n\nTITLE: APT Install Error Due to Package Conflicts - Console Output\nDESCRIPTION: This is an example console output from using apt to install 'ros-core-dev' while both upstream ROS 1 and ROS 2 repositories are present. It demonstrates the specific error messages about unmet dependencies (catkin not installable) and outlines the broken packages situation. This is a reference for users troubleshooting similar installation errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ apt install ros-core-dev\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nSome packages could not be installed. This may mean that you have\nrequested an impossible situation or if you are using the unstable\ndistribution that some required packages have not yet been created\nor been moved out of Incoming.\nThe following information may help to resolve the situation:\n\nThe following packages have unmet dependencies:\n ros-core-dev : Depends: catkin but it is not installable\nE: Unable to correct problems, you have held broken packages.\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Callback and Spinning Node in ROS 2 using Python\nDESCRIPTION: Demonstrates how to add a parameter change callback function to a ROS 2 node in Python using rclpy and then spin the node to process events. The callback responds to parameter changes dynamically. Requires ROS 2 Python client libraries (rclpy). The snippet shows registering 'on_parameter_event' callback with the node and invoking 'rclpy.spin' to keep the node active and responsive to changes. Input is parameter change events, output is callback invocation effects.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nnode.add_on_set_parameters_callback(on_parameter_event)\nrclpy.spin(node)\n```\n\n----------------------------------------\n\nTITLE: Upgrade Colcon Packages\nDESCRIPTION: These commands check for newer versions of colcon-related packages and then upgrade them to the latest version using `apt`. This addresses potential exceptions encountered when sourcing the environment after building from source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon version-check  # check if newer versions available\n$ sudo apt install python3-colcon* --only-upgrade  # upgrade installed colcon packages to latest version\n```\n\n----------------------------------------\n\nTITLE: Listing actions with their types\nDESCRIPTION: Displays actions and their corresponding types, essential for sending goals with the correct message structure.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action list -t\n```\n\n----------------------------------------\n\nTITLE: Build Instructions for C++ and Python ROS2 Packages\nDESCRIPTION: Provides commands to build C++ and Python ROS2 packages using colcon, specifying package selection options for efficient compilation. Promotes proper setup for service client/server packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select cpp_srvcli\n$ colcon build --packages-select py_srvcli\n```\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --merge-install --packages-select cpp_srvcli\n$ colcon build --merge-install --packages-select py_srvcli\n```\n\n----------------------------------------\n\nTITLE: Viewing Auto-Generated Changelog in reStructuredText (RST)\nDESCRIPTION: This snippet shows the forthcoming changelog section generated by catkin_generate_changelog in RST format within the CHANGELOG.rst files. It represents the structure of commit messages that need to be reviewed and cleaned up to summarize package updates. The RST format is used for rendering documentation and requires preservation of the 'Forthcoming' header as a section title. No additional dependencies are needed beyond an RST-capable editor for review and editing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Clean-Up-Changelog.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nChangelog for package your_package\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nForthcoming\n-----------\n* you can modify this commit message\n* and this\n```\n\n----------------------------------------\n\nTITLE: Examining Basic Test Results in ROS 2\nDESCRIPTION: Command to view test results for all packages using colcon's test-result verb. This shows a summary of test outcomes without detailed information about individual test cases.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/CLI.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ colcon test-result --all\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Bag Reader Node\nDESCRIPTION: This command executes the ROS 2 node named `simple_bag_reader` from the `bag_reader_node_py` package. This node will attempt to read and publish data from the specified bag file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nros2 run bag_reader_node_py simple_bag_reader\n```\n\n----------------------------------------\n\nTITLE: Install Cyclone DDS from apt repository (bash)\nDESCRIPTION: This command installs the Cyclone DDS RMW implementation for ROS 2 from the apt repository.  The distro name needs to be replaced with the actual ROS 2 distribution name (e.g., humble, iron). This assumes the ROS 2 apt repository is properly set up.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ros-{DISTRO}-rmw-cyclonedds-cpp\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages Globally with pip (Console)\nDESCRIPTION: Shows how to install a Python package from The Python Package Index (PyPI) system-wide using the `pip` command for the default Python 3 interpreter. The `-U` flag is used to upgrade the package if it is already installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npython3 -m pip install -U pyserial\n```\n\n----------------------------------------\n\nTITLE: Creating a Component Library (CMake)\nDESCRIPTION: This CMake snippet replaces `add_executable` with `add_library` to build the node as a library. This is fundamental for composition, allowing the node to be loaded into a container.  The target name should reflect the new library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(vincent_driver_component src/vincent_driver.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Package Dependency - XML\nDESCRIPTION: This code snippet modifies the `package.xml` file to declare dependencies on existing ROS 2 packages. This is necessary to use interfaces from these packages within your own. It specifies build and execution dependencies. The example shows how to declare a dependency on the `rosidl_tutorials_msgs` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<build_depend>rosidl_tutorials_msgs</build_depend>\n\n       <exec_depend>rosidl_tutorials_msgs</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Replacing Boost Function with std::function\nDESCRIPTION: This snippet guides updating function object types from boost::function to the standard library version std::function, along with the corresponding include directive.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n* Replace ``#include <boost/function.hpp>`` with ``#include <functional>``\n* Replace ``boost::function`` with ``std::function``\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Standards and Warning Flags for ROS 2 C/C++ in CMake\nDESCRIPTION: Sets the C and C++ standards to C99 and C++17 respectively if not already defined, to comply with ROS 2 requirements. It also configures recommended compiler warning flags for GCC and Clang (--Wall, --Wextra, --Wpedantic) using add_compile_options to enable code quality checks globally for all targets.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_C_STANDARD)\n  set(CMAKE_C_STANDARD 99)\nendif()\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 C++ Subscriber Node for Sync/Async Topics\nDESCRIPTION: Provides the C++ source code for a `SyncAsyncSubscriber` node class inheriting from `rclcpp::Node`. It creates two subscriptions using `std_msgs::msg::String`, one for `sync_topic` and one for `async_topic`. Both subscriptions use the same lambda callback function to log received messages. The `main` function initializes ROS 2, spins the node, and handles shutdown.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n\nclass SyncAsyncSubscriber : public rclcpp::Node\n{\npublic:\n\n    SyncAsyncSubscriber()\n        : Node(\"sync_async_subscriber\")\n    {\n        // Lambda function to run every time a new message is received\n        auto topic_callback = [this](const std_msgs::msg::String & msg){\n            RCLCPP_INFO(this->get_logger(), \"I heard: '%s'\", msg.data.c_str());\n        };\n\n        // Create the synchronous subscriber on topic 'sync_topic'\n        // and tie it to the topic_callback\n        sync_subscription_ = this->create_subscription<std_msgs::msg::String>(\n            \"sync_topic\", 10, topic_callback);\n\n        // Create the asynchronous subscriber on topic 'async_topic'\n        // and tie it to the topic_callback\n        async_subscription_ = this->create_subscription<std_msgs::msg::String>(\n            \"async_topic\", 10, topic_callback);\n    }\n\nprivate:\n\n    // A subscriber that listens to topic 'sync_topic'\n    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr sync_subscription_;\n\n    // A subscriber that listens to topic 'async_topic'\n    rclcpp::Subscription<std_msgs::msg::String>::SharedPtr async_subscription_;\n};\n\nint main(int argc, char * argv[])\n{\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<SyncAsyncSubscriber>());\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RTI Connext DDS via apt, v7.3.0\nDESCRIPTION: This command updates the apt package index and installs the RTI Connext DDS v7.3.0 libraries. It's used for ROS 2 distributions that support this version. Prerequisites include a Linux system with apt configured, and access to the ROS apt repositories. This command is used to install the Connext DDS libraries for a specific ROS 2 distribution.  Output is the installation logs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install -q -y rti-connext-dds-7.3.0\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Super Client Profile on Linux\nDESCRIPTION: Configures the environment for using a custom Super Client profile for Fast RTPS via the specified XML file, ensuring nodes use optimized discovery settings for shared infrastructure. Must be sourced before starting ROS2 daemon.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ export FASTRTPS_DEFAULT_PROFILES_FILE=super_client_configuration_file.xml\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package (Windows)\nDESCRIPTION: Builds the specific ROS 2 package 'learning_tf2_cpp' using the 'colcon build' command on Windows. The '--merge-install' flag installs all built packages into a single install directory, which can help avoid path length limitations on Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --merge-install --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Sourcing the ROS2 Environment - Windows\nDESCRIPTION: Sources the 'local_setup.bat' file to set up the ROS2 environment variables for the current terminal session. Required to use the created package. Must be run from within the ros2_ws directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ call install/local_setup.bat\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Example Subscriber Node - Console\nDESCRIPTION: Runs a sample subscriber node from the examples_rclcpp_minimal_subscriber package installed in the overlay workspace. The setup script must be sourced in the current shell before running. Expects the subscriber_member_function executable to exist in the overlay's install space.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nros2 run examples_rclcpp_minimal_subscriber subscriber_member_function\n\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Packages in colcon Build\nDESCRIPTION: This snippet shows how to prevent a package from being built by creating an empty file named ``COLCON_IGNORE`` in its directory. This instructs colcon to skip indexing and building that package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nIf you do not want to build a specific package, then place an empty file named ``COLCON_IGNORE`` in the directory and it will not be indexed.\n```\n\n----------------------------------------\n\nTITLE: Registering a Component (CMake)\nDESCRIPTION: This CMake command, `rclcpp_components_register_node`, declares the component, associating it with its plugin and the executable that will contain it. This step is essential for the ROS2 composition system to recognize and load the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nrclcpp_components_register_node(\n    vincent_driver_component\n    PLUGIN \"palomino::VincentDriver\"\n    EXECUTABLE vincent_driver\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic GTest Unit Test in C++\nDESCRIPTION: This C++ code snippet demonstrates a minimal GTest setup. It includes the necessary GTest header, defines a simple test case `a_first_test` within the `package_name` test suite using `ASSERT_EQ` for assertion, and provides the standard `main` function required to initialize (`testing::InitGoogleTest`) and execute (`RUN_ALL_TESTS`) all defined tests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Cpp.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <gtest/gtest.h>\n\nTEST(package_name, a_first_test)\n{\n  ASSERT_EQ(4, 2 + 2);\n}\n\nint main(int argc, char ** argv)\n{\n  testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Find Services by Type Using ros2 CLI (Console, ROS 2)\nDESCRIPTION: This command locates all active services matching the specified type. Replace <type_name> with the desired service type (e.g., std_srvs/srv/Empty). Outputs a list of all matching service names. Useful for identifying all service endpoints implementing a shared interface.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service find <type_name>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service find std_srvs/srv/Empty\n/clear\n/reset\n```\n\n----------------------------------------\n\nTITLE: Running and Configuring Introspection for ROS 2 Action Server and Client (Bash)\nDESCRIPTION: These Bash commands show how to launch the Fibonacci action server and client with introspection enabled or reconfigured at runtime using the 'ros2 run' and 'ros2 param set' CLI tools. The main parameters for configuration are 'action_server_configure_introspection' and 'action_client_configure_introspection', which accept 'contents', 'metadata', or 'disabled' as valid values. ROS 2 CLI tools must be sourced in the shell environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nros2 run action_tutorials_py fibonacci_action_server --ros-args -p action_server_configure_introspection:=contents\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 param set /fibonacci_action_server action_server_configure_introspection contents\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 param set /fibonacci_action_server action_server_configure_introspection metadata\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 param set /fibonacci_action_server action_server_configure_introspection disabled\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 run action_tutorials_cpp fibonacci_action_client --ros-args -p action_client_configure_introspection:=contents\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 param set /fibonacci_action_client action_client_configure_introspection contents\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 param set /fibonacci_action_client action_client_configure_introspection metadata\n```\n\nLANGUAGE: Bash\nCODE:\n```\nros2 param set /fibonacci_action_client action_client_configure_introspection disabled\n```\n\n----------------------------------------\n\nTITLE: Throttled logging in ROS 2 nodes using C++\nDESCRIPTION: Demonstrates logging ERROR severity messages throttled to no more than once per specified interval (in milliseconds). Typical macros like 'RCLCPP_ERROR_THROTTLE' and 'RCLCPP_ERROR_STREAM_THROTTLE' are used with the node logger, clock reference, interval, and formatted message. Interval value should be an integer to match the expected duration type and can be derived from rclcpp Duration objects.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n// printf style\nRCLCPP_ERROR_THROTTLE(node->get_logger(), *node->get_clock(), 1000, \"My log message %d\", 4);\n\n// C++ stream style\nRCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(), *node->get_clock(), 1000, \"My log message \" << 4);\n\n// Using existing Duration nanoseconds method\nRCLCPP_ERROR_STREAM_THROTTLE(node->get_logger(), *node->get_clock(), msg_interval.nanoseconds()/1000000, \"My log message \" << 4);\n```\n\n----------------------------------------\n\nTITLE: Upgrading System Packages using apt in Bash\nDESCRIPTION: This snippet provides the command to perform a full system upgrade on an Ubuntu system using the `apt` package manager. It is recommended for ensuring the system is up-to-date before installing ROS 2 packages. The `sudo` command is required to execute the upgrade with administrative privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_Apt-Upgrade-Admonition.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Upstream Repository URI in Bloom\nDESCRIPTION: Prompt for entering the URI of your upstream source code repository. The URI can be templated with variables like ':{version}' that will be replaced during release.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUpstream Repository URI:\n   <uri>\n      Any valid URI. This variable can be templated, for example an svn url\n      can be templated as such: \"https://svn.foo.com/foo/tags/foo-:{version}\"\n      where the :{version} token will be replaced with the version for this release.\n   [None]:\n```\n\n----------------------------------------\n\nTITLE: Declaring Statically and Dynamically Typed ROS 2 Parameters in Python\nDESCRIPTION: Shows how to declare both statically and dynamically typed parameters in ROS 2 Python nodes using the ParameterDescriptor with the 'dynamic_typing' flag. Static parameters cannot change type once set whereas dynamic parameters allow type changes. The snippet requires rclpy and rosidl_interfaces for the ParameterDescriptor. The code initializes rclpy, creates a node, and declares two parameters ('static_param' and 'dynamic_param') with appropriate descriptors. The node is then spun to process parameter events.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nimport rclpy.node\nfrom rcl_interfaces.msg import ParameterDescriptor\n\nrclpy.init()\nnode = rclpy.node.Node('static_param_example')\nnode.declare_parameter('static_param', 'initial value')\nnode.declare_parameter('dynamic_param', 'initial value', descriptor=ParameterDescriptor(dynamic_typing=True))\nrclpy.spin(node)\n```\n\n----------------------------------------\n\nTITLE: Creating Folders and Resource Files for ROS 2 C++ Package - Console Shell\nDESCRIPTION: This sequence of shell commands creates 'launch', 'worlds', and 'resource' directories within the 'my_package' directory, and adds two essential files for the C++ plugin: 'my_robot_driver.xml' (pluginlib XML description) and 'include/my_package/MyRobotDriver.hpp' (C++ header). These resources are necessary for plugin configuration and compilation. Run these commands after creating the C++ package to ensure all required subfolders and files exist for further development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_package\n$ mkdir launch\n$ mkdir worlds\n$ mkdir resource\n$ touch my_robot_driver.xml\n$ touch include/my_package/MyRobotDriver.hpp\n```\n\n----------------------------------------\n\nTITLE: Setting UTF-8 Locale in Bash\nDESCRIPTION: This code snippet demonstrates how to set the UTF-8 locale in a Bash environment. It includes commands to check the current locale, install the required language packs, and set the LANG environment variable.  It aims to provide a suitable environment for applications, such as ROS 2 documentation, that require UTF-8 support.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_RHEL-Set-Locale.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlocale  # check for UTF-8\n\nsudo dnf install langpacks-en glibc-langpack-en\nexport LANG=en_US.UTF-8\n\nlocale  # verify settings\n```\n\n----------------------------------------\n\nTITLE: Updating package.xml with Package Information\nDESCRIPTION: XML snippet showing how to update the package.xml file with description, maintainer information, and license details. This is required for proper package metadata.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<description>C++ bag reading tutorial</description>\n<maintainer email=\"you@email.com\">Your Name</maintainer>\n<license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Using add_on_set_parameters_callback in Python\nDESCRIPTION: Example showing how to use the new add_on_set_parameters_callback() method in rclpy instead of the deprecated and removed set_parameters_callback method.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nimport rclpy.node\nfrom rcl_interfaces.msg import ParameterType\nfrom rcl_interfaces.msg import SetParametersResult\n\n\nrclpy.init()\nnode = rclpy.node.Node('callback_example')\nnode.declare_parameter('my_param', 'initial value')\n\n\ndef on_parameter_event(parameter_list):\n    for parameter in parameter_list:\n        node.get_logger().info(f'Got {parameter.name}={parameter.value}')\n    return SetParametersResult(successful=True)\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CMakeLists.txt for Executable\nDESCRIPTION: Adds an executable target to `CMakeLists.txt` for the C++ source file, links it against `rclcpp`, and defines an installation rule to place the executable in the package's library directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(parameter_event_handler src/parameter_event_handler.cpp)\ntarget_link_libraries(parameter_event_handler PUBLIC rclcpp::rclcpp)\n\ninstall(TARGETS\n  parameter_event_handler\n  DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Velocity Commands to Turtle1 with ros2 topic pub - Console\nDESCRIPTION: This command continuously publishes Twist messages with specified linear and angular velocities to the /turtle1/cmd_vel topic at a rate of 1 Hz. This causes the turtle to move forward and can be used to generate log activity in rqt_console. The geometry_msgs/msg/Twist message type is required, and proper ROS 2 sourcing is needed in the terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub -r 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0,y: 0.0,z: 0.0}}\"\n```\n\n----------------------------------------\n\nTITLE: Setting up colcon_cd in Linux - Bash\nDESCRIPTION: Appends source and environment variable export commands to ~/.bashrc to enable fast directory changes to ROS 2 packages using colcon_cd. Requires colcon_cd to be installed system-wide. Change /opt/ros/{DISTRO}/ to match your ROS installation; colcon_cd will use this root for locating packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\necho \"source /usr/share/colcon_cd/function/colcon_cd.sh\" >> ~/.bashrc\necho \"export _colcon_cd_root=/opt/ros/{DISTRO}/\" >> ~/.bashrc\n\n```\n\n----------------------------------------\n\nTITLE: Creating subscriptions with new API signatures in ROS2\nDESCRIPTION: This snippet demonstrates how to create subscriptions in ROS2 with updated signatures that include rclcpp::QoS and option classes, replacing deprecated methods. It requires including the rclcpp library, and the callback function must match the message type. It ensures users follow the newer, more flexible API for subscriptions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<\n  typename MessageT,\n  typename CallbackT,\n  typename AllocatorT = std::allocator<void>,\n  typename SubscriptionT = rclcpp::Subscription<\n    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>>\nstd::shared_ptr<SubscriptionT>\ncreate_subscription(\n  const std::string & topic_name,\n  const rclcpp::QoS & qos,\n  CallbackT && callback,\n  const SubscriptionOptionsWithAllocator<AllocatorT> & options =\n  SubscriptionOptionsWithAllocator<AllocatorT>(),\n  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\n    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>::SharedPtr\n  msg_mem_strat = nullptr);\n```\n\n----------------------------------------\n\nTITLE: Load LoggerConfig Component\nDESCRIPTION: This command loads the `LoggerConfig` component from the `logging_demo` package into the component container named `/ComponentManager`. This component allows you to remotely configure loggers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nros2 component load /ComponentManager logging_demo logging_demo::LoggerConfig\n```\n\n----------------------------------------\n\nTITLE: Setting RTI Connext Environment Variable\nDESCRIPTION: This command sets up the environment to allow colcon to discover the RTI Connext installation.  It uses a script that comes with the RTI Connext installation and needs the correct path. Prerequisites include RTI Connext DDS installed and a build host environment set. The script sets necessary environment variables for the build process to correctly locate the RTI Connext DDS installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsource ${RTI_CONNEXT_INSTALL_LOCATION}/resource/scripts/rtisetenv_x64Linux4gcc7.3.0.bash\n```\n\n----------------------------------------\n\nTITLE: Calculating Topic Hz\nDESCRIPTION: Calculates and displays the publication rate (frequency) of a specific ROS topic. This command is used to monitor how often data is being published on a topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic hz /turtle1/pose\n```\n\n----------------------------------------\n\nTITLE: Running Fibonacci Client\nDESCRIPTION: This command starts the fibonacci_action_client from the action_tutorials_py package with the action_client_configure_introspection parameter enabled. This enables the introspection of the action to see data flow in the ros2 action echo command. Dependencies: action_tutorials_py package, ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run action_tutorials_py fibonacci_action_client --ros-args -p action_client_configure_introspection:=contents\n```\n\n----------------------------------------\n\nTITLE: Finding Required Packages\nDESCRIPTION: This snippet uses the find_package command to locate required ROS2 packages such as ament_cmake, rclcpp, std_msgs, geometry_msgs, pluginlib, and webots_ros2_driver.  These packages are essential dependencies for the ROS2 project.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(std_msgs REQUIRED)\nfind_package(geometry_msgs REQUIRED)\nfind_package(pluginlib REQUIRED)\nfind_package(webots_ros2_driver REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Compiling the ROS2 Node (CMake)\nDESCRIPTION: This CMake snippet demonstrates how to compile the initial ROS2 node as an executable. It adds the source file to the executable and specifies its installation destination. This shows the standard way of building a standalone ROS2 node before conversion to a composable one.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# ...\nadd_executable(vincent_driver src/vincent_driver.cpp)\n# ...\ninstall(TARGETS vincent_driver\n    DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Registering the Plugin Class in rviz_common_plugins.xml - XML\nDESCRIPTION: Registers the DemoPanel plugin class so RViz and pluginlib can discover it. The library path and class/type fields must match the shared library and C++ class, respectively. Used by pluginlib_export_plugin_description_file in CMake. No parameters, just XML entries. file must reside in the package and its path referenced from CMake.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<library path=\"demo_panel\">\n  <class type=\"rviz_panel_tutorial::DemoPanel\" base_class_type=\"rviz_common::Panel\">\n    <description></description>\n  </class>\n</library>\n\n```\n\n----------------------------------------\n\nTITLE: Fibonacci Action Server Output (console)\nDESCRIPTION: This console output shows the interaction with the `/fibonacci` action server during the playback of a ROS2 bag file.  The output includes feedback messages detailing the Fibonacci sequence calculation and timestamps.  This section of the output is the result of the rosbag2 player publishing the action goal from the bag file, which is then handled by the action server.\n\nDependencies are the `ros2 bag play` command playing back a rosbag that contains action goal requests, plus a running `fibonacci_action_server`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1744953720.815577088] [fibonacci_action_server]: Executing goal...\n[INFO] [1744953720.815927050] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1])\n[INFO] [1744953721.816509658] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2])\n[INFO] [1744953722.817220270] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3])\n[INFO] [1744953723.817876426] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5])\n[INFO] [1744953724.818498515] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8])\n[INFO] [1744953725.819182228] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13])\n[INFO] [1744953726.820032562] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21])\n[INFO] [1744953727.820738690] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34])\n[INFO] [1744953728.821449308] [fibonacci_action_server]: Feedback: array('i', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Intra-Process Image Pipeline with Two Viewers Demo\nDESCRIPTION: Executes the ROS2 demo showcasing an image pipeline within a single process, where the watermark node publishes to two image view nodes, illustrating behavior with one-to-many intra-process connections.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nros2 run intra_process_demo image_pipeline_with_two_image_view\n```\n\n----------------------------------------\n\nTITLE: Correcting Time in Lookup Transform Call\nDESCRIPTION: This snippet modifies the `lookupTransform` call by subtracting a duration from the current time. This adjustment is made to request a transformation from the past, accounting for possible delays in tf2 data publishing and correcting a timestamp issue.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n    try {\n      t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        this->now() - rclcpp::Duration::from_seconds(0.1));\n    } catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies ROS2\nDESCRIPTION: These console commands demonstrate how to install package dependencies using `rosdep`. The Linux command automatically checks and installs missing dependencies from the workspace source path. Notes are included for macOS and Windows, indicating manual installation is required as `rosdep` is Linux-only.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nrosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\nLANGUAGE: console\nCODE:\n```\nrosdep only runs on Linux, so you will need to install ``geometry_msgs`` and ``turtlesim`` dependencies yourself\n```\n\nLANGUAGE: console\nCODE:\n```\nrosdep only runs on Linux, so you will need to install ``geometry_msgs`` and ``turtlesim`` dependencies yourself\n```\n\n----------------------------------------\n\nTITLE: Defining a Prismatic Joint for R2D2 Gripper Arm in URDF\nDESCRIPTION: XML definition of a prismatic joint for the robot's gripper arm that enables linear extension and retraction. The joint has position limits in meters along with velocity and effort constraints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<joint name=\"gripper_extension\" type=\"prismatic\">\n  <parent link=\"base_link\"/>\n  <child link=\"gripper_pole\"/>\n  <limit effort=\"1000.0\" lower=\"-0.38\" upper=\"0\" velocity=\"0.5\"/>\n  <origin rpy=\"0 0 0\" xyz=\"0.19 0 0.2\"/>\n</joint>\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages Using Custom Allocator Memory Strategy in ROS 2 C++\nDESCRIPTION: Shows a loop where messages are allocated, constructed, and published using the custom allocator setup. The snippet demonstrates allocating memory for one message, constructing it with placement new, managing it with a unique pointer and custom deleter, setting message data, publishing it via the ROS 2 publisher, and spinning the executor. This ensures all message memory handling avoids the default heap allocator for deterministic real-time behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n uint32_t i = 0;\n while (rclcpp::ok()) {\n   auto ptr = MessageAllocTraits::allocate(message_alloc, 1);\n   MessageAllocTraits::construct(message_alloc, ptr);\n   MessageUniquePtr msg(ptr, message_deleter);\n   msg->data = i;\n   ++i;\n   publisher->publish(std::move(msg));\n   rclcpp::sleep_for(10ms);\n   executor.spin_some();\n }\n```\n\n----------------------------------------\n\nTITLE: Dumping Parameters with Bash\nDESCRIPTION: This example uses the `ros2 param dump` command to dump the current parameter values of a node to a YAML file. This is used to save the configuration so it can later be loaded. Requires a running ROS 2 system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 param dump /parameter_blackboard  # dumps current value of parameters to ./parameter_blackboard.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Service Server (C++)\nDESCRIPTION: Creates and advertises a ROS 2 service named 'add_two_ints' on the network. It uses the `AddTwoInts` service type and binds the incoming requests to the `handle_service` callback function. The service object is stored in an `auto` variable named `server`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nauto server = g_node->create_service<AddTwoInts>(\"add_two_ints\", handle_service);\n```\n\n----------------------------------------\n\nTITLE: Defining Console Scripts Entry Points in Python\nDESCRIPTION: Configures entry points for ROS 2 Python nodes in the package setup script, mapping executable names to specific Python modules and functions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'console_scripts': [\n    'service = py_srvcli.service_member_function:main',\n    'client = py_srvcli.client_member_function:main',\n],\n```\n\n----------------------------------------\n\nTITLE: Spinning the ROS 2 Node\nDESCRIPTION: This Python snippet from the `main` function shows the standard pattern for running a ROS 2 node. An instance of the `MinimalSubscriber` class is created, and then `rclpy.spin()` is called, which blocks execution and keeps the node alive, allowing its timers and callbacks to be processed until shutdown is requested.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nminimal_subscriber = MinimalSubscriber()\n\nrclpy.spin(minimal_subscriber)\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Workspace Directory - Console\nDESCRIPTION: Creates a new ROS 2 workspace directory structure with a nested src folder. No dependencies required. The directory is usually located at ~/ros2_ws and is intended for storing source-based ROS 2 packages. The workspace is essential for custom builds.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p ~/ros2_ws/src\n```\n\n----------------------------------------\n\nTITLE: QoS Incompatibility with Bash\nDESCRIPTION: These commands set up a scenario to trigger QoS incompatibilities between a publisher and a subscriber using `ros2 run`.  The example uses 'talker_qos' with best effort settings and 'listener_qos' with reliable settings to demonstrate how `ros2doctor` detects QoS incompatibilities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_py talker_qos -n 1000  # i.e. best_effort publisher\n```\n\n----------------------------------------\n\nTITLE: Updating package.xml Metadata\nDESCRIPTION: Adds descriptive metadata to the package.xml file, including a description of the package's purpose, maintainer information (email and name), and the license under which the package is released.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<description>C++ client server tutorial</description>\n  <maintainer email=\"you@email.com\">Your Name</maintainer>\n  <license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Enhancing rviz2 Visualization with Reset and Display Improvements (C++)\nDESCRIPTION: This snippet adds a resetTime shortcut key, switches linking strategies, and implements display enhancements like TF filter fields and overlay fixes in rviz2, a core visualization framework for ROS2 in C++.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_54\n\nLANGUAGE: C++\nCODE:\n```\n* Add \"R\" key as shortcut for resetTime (\\#1088 <https://github.com/ros2/rviz/issues/1088>)\\n* Switch to target_link_libraries. (\\#1098 <https://github.com/ros2/rviz/issues/1098>)\\n* Fix camera display overlay (\\#1151 <https://github.com/ros2/rviz/issues/1151>)\\n* Fixes for uncrustify 0.78. (\\#1155 <https://github.com/ros2/rviz/issues/1155>)\n```\n\n----------------------------------------\n\nTITLE: Monitoring action result in turtlesim node\nDESCRIPTION: Displays messages indicating success or cancellation of rotation goals, showing how feedback from action server is reflected in the node's output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [turtlesim]: Rotation goal completed successfully\n```\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [turtlesim]: Rotation goal canceled\n```\n\n----------------------------------------\n\nTITLE: Add ament_package - CMake\nDESCRIPTION: This CMake code snippet demonstrates how to call the `ament_package()` function at the bottom of `CMakeLists.txt`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Listing ROS2 Node Parameters Including Wildcards After Using YAML - Console\nDESCRIPTION: Lists parameters available on a ROS2 node after loading parameters from a YAML file, including those set via wildcards for namespaces and node names. Demonstrates successful application of parameters from complex YAML configurations and confirms visibility via the ros2 param list command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param list parameter_blackboard\n  a_string\n  qos_overrides./parameter_events.publisher.depth\n  qos_overrides./parameter_events.publisher.durability\n  qos_overrides./parameter_events.publisher.history\n  qos_overrides./parameter_events.publisher.reliability\n  some_int\n  some_lists.some_doubles\n  some_lists.some_integers\n  use_sim_time\n  wildcard_full\n  wildcard_namespace\n  wildcard_nodename_root_namespace\n```\n\n----------------------------------------\n\nTITLE: Sending the Static Transform\nDESCRIPTION: Calls the `sendTransform` method of the `StaticTransformBroadcaster` instance (`self.tf_static_broadcaster`), passing the fully populated `TransformStamped` message (`t`). This action publishes the transform to the `/tf_static` topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nself.tf_static_broadcaster.sendTransform(t)\n```\n\n----------------------------------------\n\nTITLE: Handling asynchronous goal response and result retrieval\nDESCRIPTION: This code demonstrates how to asynchronously handle the goal response callback, check for rejection, and if accepted, request and process the final result using futures and callbacks, enabling efficient asynchronous goal and result management in ROS 2 actions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef goal_response_callback(future):\n    goal_handle = future.result()\n    if not goal_handle.accepted:\n        print('Goal rejected')\n        return\n    result_future = goal_handle.get_result_async()\n    result_future.add_done_callback(result_callback)\n\ndef result_callback(future):\n    result = future.result().result\n    print('Result:', result.sequence)\n```\n\n----------------------------------------\n\nTITLE: Building ROS2 workspace with colcon on Linux\nDESCRIPTION: This command builds the specific package 'learning_tf2_py' within the ROS2 workspace using 'colcon build'. It compiles the code and prepares the package for execution. Similar commands are used on macOS and Windows with slight variations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_15\n\nLANGUAGE: Console\nCODE:\n```\n$ colcon build --packages-select learning_tf2_py\n```\n\n----------------------------------------\n\nTITLE: Type Inference Rules in ROS 2 Launch File Attributes\nDESCRIPTION: Examples of type inference rules applied to various attributes in ROS 2 launch files, showing correct and incorrect ways to specify values for attributes expecting specific types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!--Setting a string value to an attribute expecting an int will raise an error.-->\n<tag1 attr-expecting-an-int=\"'1'\"/>\n<!--Correct version.-->\n<tag1 attr-expecting-an-int=\"1\"/>\n<!--Setting an integer in an attribute expecting a string will raise an error.-->\n<tag2 attr-expecting-a-str=\"1\"/>\n<!--Correct version.-->\n<tag2 attr-expecting-a-str=\"'1'\"/>\n<!--Setting a list of strings in an attribute expecting a string will raise an error.-->\n<tag3 attr-expecting-a-str=\"asd, bsd\" str-attr-sep=\", \"/>\n<!--Correct version.-->\n<tag3 attr-expecting-a-str=\"don't use a separator\"/>\n```\n\n----------------------------------------\n\nTITLE: Writing Periodic Synthetic Data to a ROS 2 Bag File Using a Node in C++\nDESCRIPTION: This C++ code defines a ROS 2 node named \"DataGenerator\" that uses a timer to generate and write integer data to a bag file named \"timed_synthetic_bag\" every second. The node pre-registers the topic \"synthetic\" with type \"example_interfaces/msg/Int32\", and messages are serialized automatically by the writer. Dependencies include ROS 2 (rclcpp), example_interfaces, and rosbag2_cpp. Key parameters include the timer interval (1 second) and the message data. Input/output consists of a sequence of messages written into the bag, one per second. Prior to running, ensure that the target bag directory does not already exist. Limitations: Intended for periodic data generation; timestamps are generated at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n\n#include <example_interfaces/msg/int32.hpp>\n#include <rclcpp/rclcpp.hpp>\n\n#include <rosbag2_cpp/writer.hpp>\n\nusing namespace std::chrono_literals;\n\nclass DataGenerator : public rclcpp::Node\n{\npublic:\n  DataGenerator()\n  : Node(\"data_generator\")\n  {\n    data_.data = 0;\n    writer_ = std::make_unique<rosbag2_cpp::Writer>();\n\n    writer_->open(\"timed_synthetic_bag\");\n\n    writer_->create_topic(\n    {\n      0u,\n      \"synthetic\",\n      \"example_interfaces/msg/Int32\",\n      rmw_get_serialization_format(),\n      {},\n      \"\",\n    });\n\n    auto timer_callback_lambda = [this](){return this->timer_callback();};\n    timer_ = create_wall_timer(1s, timer_callback_lambda);\n  }\n\nprivate:\n  void timer_callback()\n  {\n    writer_->write(data_, \"synthetic\", now());\n\n    ++data_.data;\n  }\n\n  rclcpp::TimerBase::SharedPtr timer_;\n  std::unique_ptr<rosbag2_cpp::Writer> writer_;\n  example_interfaces::msg::Int32 data_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<DataGenerator>());\n  rclcpp::shutdown();\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Visualizing ROS2 Node Graph via rqt_graph Tool\nDESCRIPTION: Displays the node interaction graph in ROS2 using the rqt_graph tool, showing nodes, topics, and their connections. Refresh may be necessary to visualize current system topology.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\n$ rqt_graph\n```\n\n----------------------------------------\n\nTITLE: Remapping Node Name and Namespace using ros2\nDESCRIPTION: This snippet demonstrates remapping both the node name and namespace simultaneously using the `ros2 component load` command. The `--node-name` and `--node-namespace` options are used in conjunction. The resulting component will have both its name and namespace modified.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager composition composition::Talker --node-name talker3 --node-namespace /ns2\n```\n\n----------------------------------------\n\nTITLE: Implementing the execution callback in the Fibonacci action server\nDESCRIPTION: This snippet showcases how to define the execute_callback method to process incoming goals, generate the Fibonacci sequence, and set the result. It also demonstrates handling goal acceptance and providing optional feedback.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef execute_callback(self, goal_handle):\n    self.get_logger().info('Executing goal...')\n    order = goal_handle.request.order\n    sequence = [0, 1]\n    for i in range(2, order):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    goal_handle.succeed()\n    result = Fibonacci.Result()\n    result.sequence = sequence\n    return result\n```\n\n----------------------------------------\n\nTITLE: Default Value Examples in ROS 2 Messages\nDESCRIPTION: Examples of setting default values for different field types in ROS 2 messages, including integers, strings, and arrays.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuint8 x 42\nint16 y -2000\nstring full_name \"John Doe\"\nint32[] samples [-200, -100, 0, 100, 200]\n```\n\n----------------------------------------\n\nTITLE: Launching URDF Model Visualization in ROS2 - Console\nDESCRIPTION: This command launches the visualization of the URDF model with ROS2 using the display.launch.py script, specifying the location of the URDF file via the 'model' argument. Requires the ROS2 installation, the 'urdf_tutorial' package, and the provided URDF file. The 'model' parameter should be set to the path of the URDF model; the output will be a visualization window showing the defined robot. The user should ensure that all dependencies and mesh files referenced are correctly installed and accessible.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch urdf_tutorial display.launch.py model:=urdf/05-visual.urdf\n\n```\n\n----------------------------------------\n\nTITLE: Finding Dependencies Using find_package in CMake for ament_cmake Packages\nDESCRIPTION: Shows how to declare dependencies on other ROS 2 packages using find_package with the REQUIRED option to ensure the package is found before continuing the build. Demonstrates that it is unnecessary to find transitive dependencies explicitly and advises to report bugs if required.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(rclcpp REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace and Cloning Repos\nDESCRIPTION: This snippet creates a workspace directory and uses `vcs import` to clone the ROS 2 source code repositories from a specified URL into the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_{DISTRO}/src\n   cd ~/ros2_{DISTRO}\n   vcs import --input https://raw.githubusercontent.com/ros2/ros2/{REPOS_FILE_BRANCH}/ros2.repos src\n```\n\n----------------------------------------\n\nTITLE: Processing Action Results in Python ROS 2 Client\nDESCRIPTION: A callback function that processes the final result from a Fibonacci action. It logs the result sequence and shuts down ROS 2 for a clean exit after receiving the result.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef goal_response_callback(future):\n    goal_handle = future.result()\n    if not goal_handle.accepted:\n        self.get_logger().info('Goal rejected :(')\n```\n\n----------------------------------------\n\nTITLE: Publishing Static Coordinate Transforms Using tf2_ros static_transform_publisher with Euler Angles\nDESCRIPTION: Executes the standard tf2_ros static_transform_publisher command to publish a static transform using positional (x, y, z) offsets in meters and rotational offsets as roll, pitch, yaw angles in radians. Requires specifying parent (--frame-id) and child (--child-frame-id) frames to define the coordinate transform. Suitable for quick command-line static transform publication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run tf2_ros static_transform_publisher --x x --y y --z z --yaw yaw --pitch pitch --roll roll --frame-id frame_id --child-frame-id child_frame_id\n```\n\n----------------------------------------\n\nTITLE: Setting up a Timer Callback in a ROS 2 C++ Node\nDESCRIPTION: This C++ code snippet initializes a lambda function that invokes the timer_callback method and schedules it with a one-second periodic timer using create_wall_timer. This allows periodic invocation of the callback to generate and write synthetic data. Prerequisites: a ROS 2 node environment and all necessary includes. The timer interval (1 second) determines message generation and bag writing frequency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nauto timer_callback_lambda = [this](){return this->timer_callback();};\ntimer_ = create_wall_timer(1s, timer_callback_lambda);\n```\n\n----------------------------------------\n\nTITLE: Defining a Revolute Joint for R2D2 Gripper in URDF\nDESCRIPTION: XML definition of a revolute joint for the robot's left gripper. This joint has rotation limits specified by upper and lower bounds, along with maximum velocity and effort constraints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<joint name=\"left_gripper_joint\" type=\"revolute\">\n  <axis xyz=\"0 0 1\"/>\n  <limit effort=\"1000.0\" lower=\"0.0\" upper=\"0.548\" velocity=\"0.5\"/>\n  <origin rpy=\"0 0 0\" xyz=\"0.2 0.01 0\"/>\n  <parent link=\"gripper_pole\"/>\n  <child link=\"left_gripper\"/>\n</joint>\n```\n\n----------------------------------------\n\nTITLE: Installing Nodes in CMake for ROS2 C++\nDESCRIPTION: This CMake command installs the executable nodes to the 'lib' directory of the package.  `[node-names]` should be replaced with the name of the target/executable to be installed. ${PROJECT_NAME} is a CMake variable that represents the name of the project.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Install nodes\ninstall(\n  TARGETS [node-names]\n  DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Querying the type of a specific action\nDESCRIPTION: Retrieves the data type for the rotate_absolute action, necessary for understanding message format when sending goals.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action type /turtle1/rotate_absolute\n```\n\n----------------------------------------\n\nTITLE: Launching the Material Display\nDESCRIPTION: This command launches display.launch.py with the '04-materials.urdf' model. This enables the display of the robot in Rviz with the color applied by the 'material' tag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch urdf_tutorial display.launch.py model:=urdf/04-materials.urdf\n```\n\n----------------------------------------\n\nTITLE: Publishing Velocity Command to ROS 2 Topic to Move Robot Forward using Shell\nDESCRIPTION: Publishes a geometry_msgs/Twist message to the /cmd_vel topic, commanding the robot to move forward by setting the linear x velocity to 0.1. This terminal command demonstrates how to send velocity commands manually to the robot in simulation and expects the robot to respond by moving forward accordingly. It depends on the ROS 2 environment being properly sourced and the simulation running with subscribers to /cmd_vel.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\n$ ros2 topic pub /cmd_vel geometry_msgs/Twist  \"linear: { x: 0.1 }\"\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Executable to Generate Synthetic Bag Data in Console\nDESCRIPTION: Runs a ROS2 executable named 'data_generator_executable' from the 'bag_recorder_nodes_py' package to generate synthetic data and record it into a ROS2 bag named 'big_synthetic_bag'. Requires that any existing 'big_synthetic_bag' directory be deleted beforehand to avoid conflicts. The executable runs quickly and produces recorded bag data as output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run bag_recorder_nodes_py data_generator_executable\n```\n\n----------------------------------------\n\nTITLE: Loading Robot Model in Python using urdf_launch\nDESCRIPTION: This Python launch file loads a robot model using the `urdf_launch` package.  This is presented as an easier alternative to manually invoking xacro within a launch file. It demonstrates using the `urdf_launch` package to automatically load the xacro/urdf model, simplifying the process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlaunch/urdf_display_launch.py\n```\n\n----------------------------------------\n\nTITLE: Updating ros2 param dump docstring\nDESCRIPTION: This updates the documentation (docstring) for the `ros2 param dump` command. This makes the command easier to use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_39\n\n\n\n----------------------------------------\n\nTITLE: Creating publishers using new rclcpp::QoS and options classes\nDESCRIPTION: This code snippet illustrates the recommended approach for creating publishers in ROS2 using the new create_publisher() template function that accepts an rclcpp::QoS object and PublisherOptionsWithAllocator. The approach simplifies API signatures and enhances configurability. It depends on the rclcpp library and correct message type definitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<\n  typename MessageT,\n  typename AllocatorT = std::allocator<void>,\n  typename PublisherT = ::rclcpp::Publisher<MessageT, AllocatorT>>\nstd::shared_ptr<PublisherT>\ncreate_publisher(\n  const std::string & topic_name,\n  const rclcpp::QoS & qos,\n  const PublisherOptionsWithAllocator<AllocatorT> & options =\n  PublisherOptionsWithAllocator<AllocatorT>()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Launch File for TF2 Listener Demo in Python\nDESCRIPTION: A ROS2 launch file that sets up a demo with two turtles using TF2. It launches the turtlesim node, a TF2 broadcaster for each turtle, and a TF2 listener node that makes the second turtle follow the first one.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch.actions import DeclareLaunchArgument\nfrom launch.substitutions import LaunchConfiguration\n\nfrom launch_ros.actions import Node\n\n\ndef generate_launch_description():\n    return LaunchDescription([\n        DeclareLaunchArgument(\n            'target_frame', default_value='turtle1',\n            description='Target frame name.'\n        ),\n\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim'\n        ),\n\n        Node(\n            package='learning_tf2_py',\n            executable='turtle_tf2_broadcaster',\n            name='broadcaster1',\n            parameters=[\n                {'turtlename': 'turtle1'}\n            ]\n        ),\n\n        Node(\n            package='learning_tf2_py',\n            executable='turtle_tf2_broadcaster',\n            name='broadcaster2',\n            parameters=[\n                {'turtlename': 'turtle2'}\n            ]\n        ),\n\n        Node(\n            package='learning_tf2_py',\n            executable='turtle_tf2_listener',\n            name='listener',\n            parameters=[\n                {'target_frame': LaunchConfiguration('target_frame')}\n            ]\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Building Custom ROS 2 Docker Images on Raspberry Pi - Console\nDESCRIPTION: This snippet shows how to build a custom ROS 2 Docker image using docker build after cloning the official docker_images repository and navigating to the desired variant directory. The -t flag tags the resulting image as ros_docker. Prior requirements include git, Docker, and access to the desired source directory. The build command must be run from the directory containing the Dockerfile, and the operation will complete in a short time on supported Raspberry Pi models.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installing-on-Raspberry-Pi.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t ros_docker .\n```\n\n----------------------------------------\n\nTITLE: Writing Synthetic Data to a ROS 2 Bag from a C++ Standalone Executable\nDESCRIPTION: This C++ program creates and writes 100 synthetic Int32 messages with one-second gap timestamps to a ROS 2 bag file named \"big_synthetic_bag\". It programmatically increments the time using rclcpp::Duration instead of relying on system wall clock, enabling fast data generation. Dependencies: ROS 2 (rclcpp), example_interfaces, rosbag2_cpp. Inputs: None. Outputs: Bagged messages with controlled timestamps. The executable runs to completion rapidly, regardless of the total timestamp range.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n\n#include <rclcpp/rclcpp.hpp>  // For rclcpp::Clock, rclcpp::Duration and rclcpp::Time\n#include <example_interfaces/msg/int32.hpp>\n\n#include <rosbag2_cpp/writer.hpp>\n#include <rosbag2_cpp/writers/sequential_writer.hpp>\n#include <rosbag2_storage/serialized_bag_message.hpp>\n\nusing namespace std::chrono_literals;\n\nint main(int, char**)\n{\n  example_interfaces::msg::Int32 data;\n  data.data = 0;\n  std::unique_ptr<rosbag2_cpp::Writer> writer_ = std::make_unique<rosbag2_cpp::Writer>();\n\n  writer_->open(\"big_synthetic_bag\");\n\n  writer_->create_topic(\n  {\n    0u,\n    \"synthetic\",\n    \"example_interfaces/msg/Int32\",\n    rmw_get_serialization_format(),\n    {},\n    \"\",\n  });\n\n  rclcpp::Clock clock;\n  rclcpp::Time time_stamp = clock.now();\n  for (int32_t ii = 0; ii < 100; ++ii) {\n    writer_->write(data, \"synthetic\", time_stamp);\n    ++data.data;\n    time_stamp += rclcpp::Duration(1s);\n  }\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Dumping ROS 2 Node Parameters to a YAML File Using ros2 CLI (console, YAML)\nDESCRIPTION: Exports all parameters for a specified node using 'ros2 param dump' and optionally redirects output to a YAML file for persistence. Example shows dumping '/turtlesim' parameters into 'turtlesim.yaml'. The saved YAML file can be used later to reload parameters. Important for replicating node configurations across sessions. Requires write permissions in the current directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param dump /turtlesim > turtlesim.yaml\n```\n\nLANGUAGE: YAML\nCODE:\n```\n/turtlesim:\n  ros__parameters:\n    background_b: 255\n    background_g: 86\n    background_r: 150\n    qos_overrides:\n      /parameter_events:\n        publisher:\n          depth: 1000\n          durability: volatile\n          history: keep_last\n          reliability: reliable\n    use_sim_time: false\n```\n\n----------------------------------------\n\nTITLE: Updating Quality Declaration Document\nDESCRIPTION: This entry indicates an update to the quality declaration document within the `rmw_implementation` package. This is likely related to ensuring the software adheres to specific quality standards or guidelines.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Getting my_turtle Info with ros2 node info\nDESCRIPTION: This command displays detailed information about the `/my_turtle` node, showing its subscribers, publishers, service servers, and other ROS graph connections. It provides insights into the node's role and interactions within the ROS system. The node `/my_turtle` must be running. Prerequisites include a running ROS 2 node and the installation of ROS 2 and the `turtlesim` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node info /my_turtle\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Dependencies with rosdep\nDESCRIPTION: Uses rosdep to check for and install missing dependencies before building the ROS 2 package. This is specific to Linux environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Example Output of tf2_echo\nDESCRIPTION: Shows sample output from the 'tf2_echo world turtle1' command. Each entry displays the timestamp and the corresponding translation (x, y, z) and quaternion rotation (x, y, z, w) representing the pose of 'turtle1' relative to the 'world' frame.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nAt time 1625137663.912474878\n- Translation: [5.276, 7.930, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.934, -0.357]\nAt time 1625137664.950813527\n- Translation: [3.750, 6.563, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.934, -0.357]\nAt time 1625137665.906280726\n- Translation: [2.320, 5.282, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, 0.934, -0.357]\nAt time 1625137666.850775673\n- Translation: [2.153, 5.133, 0.000]\n- Rotation: in Quaternion [0.000, 0.000, -0.365, 0.931]\n```\n\n----------------------------------------\n\nTITLE: Launch File Imports (Python)\nDESCRIPTION: This Python snippet shows the import statements needed at the beginning of a ROS 2 launch file (`turtle_tf2_demo_launch.py`). It imports essential modules from the `launch` and `launch_ros` packages, including `LaunchDescription` for defining the launch graph and `Node` for representing ROS 2 executable nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n```\n\n----------------------------------------\n\nTITLE: Simulating goal abortion in turtlesim node\nDESCRIPTION: Instructs how to send conflicting commands to the turtlesim action server to trigger goal abortion, illustrating server-side goal management.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[WARN] [turtlesim]: Rotation goal received before a previous goal finished. Aborting previous goal\n```\n\n----------------------------------------\n\nTITLE: Listing available components in ROS 2\nDESCRIPTION: This command lists the available component types registered in the workspace. It is used to discover what components are available for use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component types\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Publisher and Subscriber Nodes\nDESCRIPTION: Commands to run the publisher and subscriber nodes in separate terminals after sourcing the workspace. Demonstrates the interaction where the publisher sends integer messages and the subscriber receives and logs them.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run cpp_pubsub talker\n\n$ ros2 run cpp_pubsub listener\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run py_pubsub talker\n\n$ ros2 run py_pubsub listener\n```\n\n----------------------------------------\n\nTITLE: Disabling Loaned Messages Temporarily (Linux/macOS Shell)\nDESCRIPTION: Sets the ROS_DISABLE_LOANED_MESSAGES environment variable to '1' for the current shell session using the export command. This action disables the loaned messages feature in ROS 2 for this session only.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_DISABLE_LOANED_MESSAGES=1\n```\n\n----------------------------------------\n\nTITLE: Updating ROS2 Repositories\nDESCRIPTION: Updates all repositories in the workspace to the versions specified in the ros2.repos file. It uses the `vcs` tool to remotely update the repositories based on the versions specified in the `ros2.repos` file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvcs custom --args remote update\n```\n\n----------------------------------------\n\nTITLE: Configuring GTest in CMakeLists.txt for ROS 2\nDESCRIPTION: This CMake snippet illustrates how to configure the build system to compile and link a GTest executable within a ROS 2 package. It uses `find_package` to locate `ament_cmake_gtest`, `ament_add_gtest` to define the test executable from the source file, and standard CMake commands `target_include_directories` and `target_link_libraries` to manage dependencies. The configuration is wrapped in a `BUILD_TESTING` conditional block to only build tests when requested.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Cpp.rst#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  find_package(ament_cmake_gtest REQUIRED)\n  ament_add_gtest(${PROJECT_NAME}_tutorial_test test/tutorial_test.cpp)\n  target_include_directories(${PROJECT_NAME}_tutorial_test PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include>\n  )\n  target_link_libraries(${PROJECT_NAME}_tutorial_test name_of_local_library)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring ament_cmake_python dependency in package.xml (XML)\nDESCRIPTION: This snippet shows how to declare a buildtool dependency on the ament_cmake_python package within a ROS 2 package's package.xml file. This declaration is required to use ament_cmake_python CMake functions for installing Python packages alongside CMake builds.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Python-Documentation.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<buildtool_depend>ament_cmake_python</buildtool_depend>\n```\n\n----------------------------------------\n\nTITLE: Example of updating publisher creation to use new QoS signature\nDESCRIPTION: This diff example shows how to modify old publisher creation code that only specified the topic, changing it to include a QoS object with a depth of 10, thus adopting the new API for better configurability and compatibility. It improves code clarity and adheres to the latest API recommendations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- pub_ = create_publisher<std_msgs::msg::String>(\"chatter\");\n+ pub_ = create_publisher<std_msgs::msg::String>(\"chatter\", 10);\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Package Manifest - XML\nDESCRIPTION: This XML file represents the package manifest for the migrated ROS 2 talker package. It defines the package name, version, description, maintainer, license, build tool dependency (ament_cmake_ros), runtime dependencies (rclcpp, std_msgs), and export tag with build type ament_cmake.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"2\">\n  <name>talker</name>\n  <version>0.0.0</version>\n  <description>talker</description>\n  <maintainer email=\"gerkey@example.com\">Brian Gerkey</maintainer>\n  <license>Apache-2.0</license>\n  <buildtool_depend>ament_cmake_ros</buildtool_depend>\n  <depend>rclcpp</depend>\n  <depend>std_msgs</depend>\n  <export>\n    <build_type>ament_cmake</build_type>\n  </export>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Cleaning up help text for ros2 bag record\nDESCRIPTION: This improves the help text displayed for the `ros2 bag record` command in `ros2bag`.  This makes the functionality easier to use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Constructing a Parameter Object with Automatic Type Inference in rclpy.parameter.Parameter (Python)\nDESCRIPTION: Shows how to create a Parameter object with or without explicit type using rclpy.parameter.Parameter. Demonstrates that providing a value enables type inference, aligning with the Dashing API update. Inputs are parameter name, optional type, and value. Output is a typed Parameter object, compatible with rclpy and rcl_interfaces APIs. This feature streamlines node parameter handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\np = Parameter('myparam', Parameter.Type.DOUBLE, 2.41)\np = Parameter('myparam', value=2.41)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules to conf.py (Python)\nDESCRIPTION: This snippet shows how to add the package's python modules to the python search path within the Sphinx configuration file (conf.py). This is necessary for Sphinx to find and document the python code in the package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n    sys.path.insert(0, os.path.abspath('.'))\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Service Introspection to METADATA (Bash)\nDESCRIPTION: This bash command uses the `ros2 param set` tool to change the `service_configure_introspection` parameter of the `/introspection_service` node to `metadata`. This enables service introspection, but only includes metadata about the request/response, not the user data payloads.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 param set /introspection_service service_configure_introspection metadata\n```\n\n----------------------------------------\n\nTITLE: Added covariance settings to set pose estimate\nDESCRIPTION: This adds covariance settings for setting pose estimates within a program or rviz plugins. Dependencies depend on the code that utilizes pose and covariance information.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Exporting Targets in ROS 2\nDESCRIPTION: Shows how to export targets in ROS 2 using ament_export_targets, which allows downstream packages to use the exported targets.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nament_export_targets(export_my_package)\n```\n\n----------------------------------------\n\nTITLE: Defining Service Message Structure\nDESCRIPTION: Shows the structure of the AddTwoInts service message from the example_interfaces package. It defines two 64-bit integer fields ('a' and 'b') for the request and one 64-bit integer field ('sum') for the response, separated by '---'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nint64 a\nint64 b\n---\nint64 sum\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Service 'AddThreeInts.srv'\nDESCRIPTION: Specifies a service request-response structure with three input integers 'a', 'b', and 'c', and an output 'sum', facilitating addition operations through ROS2 services.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nint64 a\nint64 b\nint64 c\n---\nint64 sum\n```\n\n----------------------------------------\n\nTITLE: Configuring ROS 2 C++ Package Build (CMakeLists.txt)\nDESCRIPTION: CMake build script (`CMakeLists.txt`) for the C++ ROS 2 package (`my_package`). It finds necessary dependencies (like `pluginlib`, `rclcpp`, `webots_ros2_driver`), defines the C++ plugin library (`my_robot_driver`), links dependencies, exports the plugin description XML, installs necessary files (library, launch, resource, worlds), and declares package information using `ament_package`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n# Content of Code/CMakeLists.txt\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Launch File in XML Format - XML\nDESCRIPTION: This snippet represents a ROS 2 launch file written in XML to define and execute a system comprising two turtlesim nodes and one mimic node. The file specifies node configurations, their namespaces to avoid conflicts, and remaps for topics so that one node's output becomes another's input. Dependencies required include ROS 2 installation, the turtlesim package, and launch_ros. All node parameters and remappings are expressed as XML elements, and the launch file is expected to be saved as launch/turtlesim_mimic_launch.xml. Inputs are node and topic names; outputs are running processes for all specified nodes. Constraints: must be run with ros2 launch and the XML schema must be correct.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<launch>\n  <node pkg=\"turtlesim\" exec=\"turtlesim_node\" name=\"sim\" namespace=\"turtlesim1\"/>\n  <node pkg=\"turtlesim\" exec=\"turtlesim_node\" name=\"sim\" namespace=\"turtlesim2\"/>\n  <node pkg=\"turtlesim\" exec=\"mimic\" name=\"mimic\">\n    <remap from=\"/input/pose\" to=\"/turtlesim1/turtle1/pose\"/>\n    <remap from=\"/output/cmd_vel\" to=\"/turtlesim2/turtle1/cmd_vel\"/>\n  </node>\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Python Script for Recording ROS 2 Topic Data into rosbag2 with rosbag2_py\nDESCRIPTION: This code defines a ROS 2 Python node that subscribes to a topic and records messages into a rosbag2 file using the rosbag2_py API. It sets up storage options, topic metadata, and handles serialization before writing data. The script is meant for advanced users seeking custom bag recording functionality within ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nfrom rclpy.serialization import serialize_message\nfrom std_msgs.msg import String\n\nimport rosbag2_py\n\nclass SimpleBagRecorder(Node):\n    def __init__(self):\n        super().__init__('simple_bag_recorder')\n        self.writer = rosbag2_py.SequentialWriter()\n\n        storage_options = rosbag2_py.StorageOptions(\n            uri='my_bag',\n            storage_id='mcap')\n        converter_options = rosbag2_py.ConverterOptions('', '')\n        self.writer.open(storage_options, converter_options)\n\n        topic_info = rosbag2_py.TopicMetadata(\n            id=0,\n            name='chatter',\n            type='std_msgs/msg/String',\n            serialization_format='cdr')\n        self.writer.create_topic(topic_info)\n\n        self.subscription = self.create_subscription(\n            String,\n            'chatter',\n            self.topic_callback,\n            10)\n        self.subscription\n\n    def topic_callback(self, msg):\n        self.writer.write(\n            'chatter',\n            serialize_message(msg),\n            self.get_clock().now().nanoseconds)\n\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            sbr = SimpleBagRecorder()\n            rclpy.spin(sbr)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Querying a Transform at Current Time Using tf2 in C++\nDESCRIPTION: This snippet demonstrates modifying the lookupTransform() method to request a transform at the current ROS2 system clock time instead of the latest transform by using rclcpp::Time now = this->get_clock()->now(). It shows capturing the current timestamp, passing it as the time argument to lookupTransform(), and handling potential transform exceptions. This requires access to the ROS2 node clock and uses the tf2 and rclcpp libraries to convert between time types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::Time now = this->get_clock()->now();\ntry {\n    t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        now);\n} catch (const tf2::TransformException & ex) {\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment: bash\nDESCRIPTION: This snippet sources the ROS 2 setup file to configure the environment. This step is crucial for setting up the paths and variables needed to run ROS 2.  The specific setup file (setup.bash, setup.sh, or setup.zsh) depends on the user's shell. The command uses the dot (`.`) operator for sourcing the setup file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\n. ~/ros2_{DISTRO}/ros2-linux/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Calling ament_package\nDESCRIPTION: This snippet calls the ament_package() function, which generates package metadata required for ROS2's build and packaging system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Example ROS 2 Launch File (YAML)\nDESCRIPTION: Provides a simple example demonstrating the structure and basic elements of a ROS 2 launch file written in YAML format.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Example YAML launch file\nlaunch:\n  # Add launch configuration and nodes here\n  - arg: node_output\n    default: screen\n    description: Console output mode\n  - node: your_node_name\n    pkg: your_package\n    exec: your_executable\n    parameters:\n      # Node parameters\n    output: $(arg node_output)\n\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 C++ Package\nDESCRIPTION: Command to create a new ROS 2 package using ament_cmake as the build type. It specifies the license and adds necessary dependencies for C++ development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 cpp_parameter_event_handler --dependencies rclcpp\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Workspace via Shell - console\nDESCRIPTION: This snippet demonstrates how to source the ROS 2 workspace's environment setup script ('install/setup.sh') from within a Docker container or terminal session. This is a prerequisite step for enabling ROS 2 commands and ensuring all necessary environment variables are set. No additional dependencies are required beyond the existing ROS 2 installation and a built workspace. Input: none. Output: modifies the current shell session's environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n. install/setup.sh\n```\n\n----------------------------------------\n\nTITLE: Installing colcon-argcomplete for Command Line Completion\nDESCRIPTION: This snippet explains how to install the colcon-argcomplete package to enable command line autocompletion features. It also references the required setup and dependencies for proper functionality.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nThe ``colcon-argcomplete`` package must be installed, and `some setup may be required <https://colcon.readthedocs.io/en/released/user/installation.html#enable-completion>`__ to make it work.\n```\n\n----------------------------------------\n\nTITLE: Running dlopen composition in ROS 2 (Windows)\nDESCRIPTION: This command runs `dlopen_composition` in a Windows environment. It specifies the full paths to the compiled DLL component libraries, obtained using the previous command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run composition dlopen_composition <path_to_composition_install>\\bin\\talker_component.dll <path_to_composition_install>\\bin\\listener_component.dll\n```\n\n----------------------------------------\n\nTITLE: Running turtle_teleop_key with ros2 run\nDESCRIPTION: This command runs the `turtle_teleop_key` executable from the `turtlesim` package. It opens a terminal that allows the user to control the turtle using keyboard input. It demonstrates the use of `ros2 run` and target the `turtle_teleop_key` program. Prerequisites include the installation of ROS 2 and the `turtlesim` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Declaring ament_lint Test Dependencies in package.xml - XML\nDESCRIPTION: This snippet shows how to specify ament_lint dependencies in a ROS 2 package.xml to ensure static lint testing tools are installed and discovered. The <test_depend> tags for ament_lint_auto and ament_lint_common are required for static analysis integration with ament. Add these dependencies to your package.xml under the root <package> element; no parameters, input, or output. This is compatible with ROS 2 ament-based projects using package format 2 or higher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n...\n<package format=\"2\">\n  ...\n  <test_depend>ament_lint_auto</test_depend>\n  <test_depend>ament_lint_common</test_depend>\n  ...\n</package>\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Package\nDESCRIPTION: Builds only the 'my_package' package in the ROS2 workspace using 'colcon'. Requires that you are in the root of the workspace and that 'my_package' exists.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select my_package\n```\n\n----------------------------------------\n\nTITLE: Demonstrating deadlock scenario with synchronous ROS2 service calls in Python callbacks\nDESCRIPTION: This snippet illustrates a common source of deadlock caused by invoking a synchronous service client call within a subscription callback. It shows a trigger_request() function that calls send_request() synchronously, which blocks the single-threaded executor spinning the node. Since rclpy.spin() cannot preempt the callback to process the service response, a deadlock occurs. This highlights the constraint that callbacks must be quick and non-blocking, and synchronous service calls must not be made inside them. Dependencies include rclpy and a previously defined synchronous client instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Sync-Vs-Async.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef trigger_request(msg):\n    response = minimal_client.send_request()  # This will cause deadlock\n    minimal_client.get_logger().info(\n        'Result of add_two_ints: for %d + %d = %d' %\n        (minimal_client.req.a, minimal_client.req.b, response.sum))\nsubscription = minimal_client.create_subscription(String, 'trigger', trigger_request, 10)\n\nrclpy.spin(minimal_client)\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Loading Composable Nodes (XML)\nDESCRIPTION: This XML launch file loads cam2image and showimage composable nodes into an existing container. It utilizes the `LoadComposableNodes` action and includes remappings, custom parameters, and extra arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<launch>\n  <!-- XML content to load composable nodes into an existing container would be here -->\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Unloading components from container in ROS 2\nDESCRIPTION: This command unloads a component from a container in ROS 2. It requires the container name and component IDs to unload the components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component unload /ComponentManager 1 2\n```\n\n----------------------------------------\n\nTITLE: Recording Data with QoS Durability Override\nDESCRIPTION: This snippet shows how to record data with overridden QoS settings for a specific topic using `ros2 bag record` and a YAML file.  It utilizes the  `--qos-profile-overrides-path` flag to specify a YAML file (`durability_override.yaml`) containing the QoS override settings, such as setting durability to `transient_local` and history to `keep_all`.  The input is the YAML file specifying the overrides and the output is a rosbag2 bag file named `my_bag`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# durability_override.yaml\n/talker:\n  durability: transient_local\n  history: keep_all\n```\n\n----------------------------------------\n\nTITLE: ament_flake8 Output Example\nDESCRIPTION: This console output demonstrates the errors reported by ament_flake8 when applied to the provided Python code snippet.  It shows specific error codes, line numbers, and descriptions of the style violations.  The errors highlight whitespace issues, line length violations, and unused variables.  It shows how to interpret the output of the flake8 tool.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nexample.py:1:25: E231 missing whitespace after ','\ndef uglyPythonFunction(a,b,  c):\n\nexample.py:5:5: F841 local variable 'extra_long' is assigned to but never used\n    extra_long =(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n    ^\n\nexample.py:5:17: E225 missing whitespace around operator\n    extra_long =(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n                ^\n\nexample.py:5:100: E501 line too long (106 > 99 characters)\n    extra_long =(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n                                                                                                   ^\n\nexample.py:5:105: E202 whitespace before ')'\n    extra_long =(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n                                                                                                        ^\n\n1     E202 whitespace before ')'\n1     E225 missing whitespace around operator\n1     E231 missing whitespace after ','\n1     E501 line too long (106 > 99 characters)\n1     F841 local variable 'extra_long' is assigned to but never used\n\n1 files checked\n5 errors\n\n'E'-type errors: 4\n'F'-type errors: 1\n\nChecked files:\n\n* example.py\n```\n\n----------------------------------------\n\nTITLE: ROS 2 CLI Commands to Set Parameters Demonstrating Static and Dynamic Typing\nDESCRIPTION: Console commands illustrating attempts to change parameter types in ROS 2 for both static and dynamic parameters. Shows successful type change for dynamic parameter and failure for static parameter due to type mismatch. This highlights the enforced static typing behavior unless dynamic typing is explicitly enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set /static_param_example dynamic_param 42\nSet parameter successful\n$ ros2 param set /static_param_example static_param 42\nSetting parameter failed: Wrong parameter type, expected 'Type.STRING' got 'Type.INTEGER'\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with rosdep on Linux\nDESCRIPTION: This shell command runs 'rosdep install' to automatically install all missing dependencies for the ROS2 workspace located at 'src'. It uses the specified ROS distribution '{DISTRO}'. This step is critical for ensuring all required packages are available before building.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_14\n\nLANGUAGE: Console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Writing Synthetic Data to a ROS 2 Bag in a Timer Callback (C++)\nDESCRIPTION: This code writes a message (example_interfaces::msg::Int32) into a ROS 2 bag named \"synthetic\" topic using the writer_->write method. The timestamp is provided by now(), ensuring accurate temporal ordering. The message data is incremented after each write. This function is invoked by a periodic timer inside the node. The writer and topic must be properly initialized before use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nwriter_->write(data_, \"synthetic\", now());\n\n++data_.data;\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Talker Node - C++\nDESCRIPTION: This C++ code defines the ROS 2 talker node, publishing \"hello world\" messages to the \"chatter\" topic. It utilizes rclcpp for ROS 2 communication and std_msgs/msg/string.hpp for the message type.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n#include <chrono>\n#include <sstream>\n// #include \"ros/ros.h\"\n#include \"rclcpp/rclcpp.hpp\"\n// #include \"std_msgs/String.h\"\n#include \"std_msgs/msg/string.hpp\"\n\nusing namespace std::chrono_literals;\n\nint main(int argc, char **argv)\n{\n//  ros::init(argc, argv, \"talker\");\n//  ros::NodeHandle n;\n  rclcpp::init(argc, argv);\n  auto node = rclcpp::Node::make_shared(\"talker\");\n//  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);\n//  ros::Rate loop_rate(10);\n  auto chatter_pub = node->create_publisher<std_msgs::msg::String>(\"chatter\", 1000);\n  rclcpp::Rate loop_rate(10);\n  int count = 0;\n//  std_msgs::String msg;\n  std_msgs::msg::String msg;\n//  while (ros::ok())\n  while (rclcpp::ok())\n  {\n    std::stringstream ss;\n    ss << \"hello world \" << count++;\n    msg.data = ss.str();\n//    ROS_INFO(\"%s\", msg.data.c_str());\n    RCLCPP_INFO(node->get_logger(), \"%s\\n\", msg.data.c_str());\n//    chatter_pub.publish(msg);\n    chatter_pub->publish(msg);\n//    ros::spinOnce();\n    rclcpp::spin_all(node, 0s);\n    loop_rate.sleep();\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Build in CMakeLists.txt\nDESCRIPTION: CMake configuration to compile and install the C++ obstacle_avoider node. This snippet adds the necessary commands to build the C++ implementation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Code not explicitly shown in the tutorial but referenced as CMakeLists_sensor.txt\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Backtrace in GDB After a Crash\nDESCRIPTION: Inside a GDB session, the backtrace command prints the stack trace from the point of crash. Prerequisites: GDB session with a crashed process. Inputs: none; simply type backtrace at the (gdb) prompt. Output: shows the active call stack with function names, file names, and line numbers. This is essential for debugging ROS 2 node crashes and interpreting crash origins.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(gdb)\nbacktrace\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\n#1  0x00007ffff79cc859 in __GI_abort () at abort.c:79\n#2  0x00007ffff7c52951 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#3  0x00007ffff7c5e47c in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#4  0x00007ffff7c5e4e7 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#5  0x00007ffff7c5e799 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#6  0x00007ffff7c553eb in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n#7  0x000055555555936c in std::vector<int, std::allocator<int> >::_M_range_check (\n    this=0x5555555cfdb0, __n=100) at /usr/include/c++/9/bits/stl_vector.h:1070\n#8  0x0000555555558e1d in std::vector<int, std::allocator<int> >::at (this=0x5555555cfdb0,\n    __n=100) at /usr/include/c++/9/bits/stl_vector.h:1091\n#9  0x000055555555828b in GDBTester::VectorCrash (this=0x5555555cfb40)\n    at /home/steve/Documents/nav2_ws/src/gdb_test_pkg/src/gdb_test_node.cpp:44\n#10 0x0000555555559cfc in main (argc=1, argv=0x7fffffffc108)\n    at /home/steve/Documents/nav2_ws/src/gdb_test_pkg/src/main.cpp:25\n```\n\n----------------------------------------\n\nTITLE: Assigning Package Name Variable in setup.py - Python\nDESCRIPTION: Defines a variable 'package_name' for easy reuse in Python setup scripts. This is used to avoid repetition of the package name in setup() and file installation code. Required when providing data_files or other dynamic setup configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npackage_name = 'talker_py'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Super Client Profile on Windows\nDESCRIPTION: Sets the environment variable for the Super Client configuration XML on Windows, preparing ROS2 to use optimized discovery settings without connecting to a dedicated server. This setting affects subsequent daemon start and node communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ set FASTRTPS_DEFAULT_PROFILES_FILE=super_client_configuration_file.xml\n```\n\n----------------------------------------\n\nTITLE: Persistently Disabling Loaned Messages (Linux Bash)\nDESCRIPTION: Appends the export command for ROS_DISABLE_LOANED_MESSAGES=1 to the user's .bashrc file. This makes the disabling of loaned messages persistent across new Bash shell sessions on Linux.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho \"export ROS_DISABLE_LOANED_MESSAGES=1\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Modifying lookupTransform Call in C++\nDESCRIPTION: This code snippet changes the time argument passed to the `lookupTransform` function in `turtle_tf2_listener.cpp`. It replaces `tf2::TimePointZero` with `this->now()` causing potential issues with future transformations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n    try {\n      t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        this->now());\n    } catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Updating CMakeLists.txt for Bag Reader Executable\nDESCRIPTION: CMake configuration to add the bag reader executable to the build system. This sets up the target linking against the required libraries and configures the installation destination.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nadd_executable(simple_bag_reader src/simple_bag_reader.cpp)\ntarget_link_libraries(simple_bag_reader PUBLIC rclcpp::rclcpp rosbag2_transport::rosbag2_transport ${turtlesim_msgs_TARGETS})\n\ninstall(TARGETS\n  simple_bag_reader\n  DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Explicit Node Interfaces (C++)\nDESCRIPTION: This snippet demonstrates a more robust way to access node information by explicitly passing `rclcpp::node_interfaces` as arguments.  It defines a `node_info` function that takes `NodeBaseInterface` and `NodeLoggingInterface` and prints the node's name.  It shows how to handle different node types, `rclcpp::Node` and `rclcpp_lifecycle::LifecycleNode`. This method, while functional, can lead to verbose function signatures as the number of interfaces grows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Using-Node-Interfaces-Template-Class.rst#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nvoid node_info(std::shared_ptr<rclcpp::node_interfaces::NodeBaseInterface> base_interface,\n                   std::shared_ptr<rclcpp::node_interfaces::NodeLoggingInterface> logging_interface)\n{\n  RCLCPP_INFO(logging_interface->get_logger(), \"Node name: %s\", base_interface->get_name());\n}\n\nclass SimpleNode : public rclcpp::Node\n{\npublic:\n  SimpleNode(const std::string & node_name)\n  : Node(node_name)\n  {\n  }\n};\n\nclass LifecycleTalker : public rclcpp_lifecycle::LifecycleNode\n{\npublic:\n  explicit LifecycleTalker(const std::string & node_name, bool intra_process_comms = false)\n  : rclcpp_lifecycle::LifecycleNode(node_name,\n      rclcpp::NodeOptions().use_intra_process_comms(intra_process_comms))\n  {}\n}\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::executors::SingleThreadedExecutor exe;\n  auto node = std::make_shared<SimpleNode>(\"Simple_Node\");\n  auto lc_node = std::make_shared<LifecycleTalker>(\"Simple_LifeCycle_Node\");\n  node_info(node->get_node_base_interface(),node->get_node_logging_interface());\n  node_info(lc_node->get_node_base_interface(),lc_node->get_node_logging_interface());\n}\n```\n\n----------------------------------------\n\nTITLE: Persistently Disabling Loaned Messages (Windows)\nDESCRIPTION: Permanently sets the ROS_DISABLE_LOANED_MESSAGES environment variable to '1' for the user account using the setx command. This setting persists across sessions but requires opening a new command prompt to take effect.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nsetx ROS_DISABLE_LOANED_MESSAGES 1\n```\n\n----------------------------------------\n\nTITLE: Create Mimic Node Launch with Topic Remapping (Python)\nDESCRIPTION: This launch script starts the 'mimic' node, which makes one turtle follow another by receiving pose commands and remapping relevant topics. It remaps the '/turtle2/pose' topic to control the target's pose and redirects the output command velocity topic to enable one turtle to mimic the other's movements in the simulation environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# mimic_launch.py\nimport launch\nimport launch_ros.actions\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch_ros.actions.Node(\n            package='mimic',\n            executable='mimic',\n            remappings=[\n                ('/input/pose', '/turtle2/pose'),\n                ('/output/cmd_vel', '/turtlesim2/turtle1/cmd_vel')\n            ],\n            output='screen'\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 Publisher and Subscriber Nodes\nDESCRIPTION: Commands for running the publisher and subscriber nodes, showing the expected output from each.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1 - Run the publisher\nros2 run cpp_pubsub talker\n# Output:\n# [INFO] [minimal_publisher]: Publishing: \"Hello World: 0\"\n# [INFO] [minimal_publisher]: Publishing: \"Hello World: 1\"\n# ...\n\n# Terminal 2 - Run the subscriber\nros2 run cpp_pubsub listener\n# Output:\n# [INFO] [minimal_subscriber]: I heard: \"Hello World: 10\"\n# [INFO] [minimal_subscriber]: I heard: \"Hello World: 11\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Fix a memory leak when using the ResourceIOSystem.\nDESCRIPTION: This fixes a memory leak found in the `ResourceIOSystem`. This will ensure the memory is properly managed. Dependencies: ResourceIOSystem.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Setting ROS2 Node Parameters Directly from the Command Line - Console\nDESCRIPTION: Explains the syntax to set ROS2 node parameters at runtime using -p flags with --ros-args. This feature allows passing individual parameter assignments as name-value pairs directly via the ros2 run command, supporting primitive types and lists encoded as strings. Dependencies include the parameter API in ROS2 nodes to declare and expose parameters as usable. Inputs are parameter names and values provided at invocation; outputs are nodes configured with assigned parameter values on startup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run package_name executable_name --ros-args -p param_name:=param_value\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp parameter_blackboard --ros-args -p some_int:=42 -p \"a_string:=Hello world\" -p \"some_lists.some_integers:=[1, 2, 3, 4]\" -p \"some_lists.some_doubles:=[3.14, 2.718]\"\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Multiple Servers (Partition Example - Windows)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Windows to connect a node to multiple servers for the partition example.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nset ROS_DISCOVERY_SERVER=\"127.0.0.1:11811;127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Entry Point for Publisher Node in setup.py\nDESCRIPTION: This Python snippet configures the setup.py script for the ROS2 Python package to add an entry point. The entry_point defined in 'console_scripts' specifies that the executable 'talker' will run the main() function from the 'publisher_member_function' module inside the 'py_pubsub' package. This setup enables running the publisher node with 'ros2 run py_pubsub talker'. It also shows updating maintainer and license metadata to reflect package details.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmaintainer='YourName',\nmaintainer_email='you@email.com',\ndescription='Examples of minimal publisher/subscriber using rclpy',\nlicense='Apache-2.0',\n\nentry_points={\n        'console_scripts': [\n                'talker = py_pubsub.publisher_member_function:main',\n        ],\n},\n```\n\n----------------------------------------\n\nTITLE: Source ROS2 environment setup file\nDESCRIPTION: This command sources the setup file to configure the environment for ROS2. This allows the user to utilize ROS2 commands and tools from the current terminal.  The correct setup file is located in the 'install' directory of the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsource install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Error Reporting for Tracing Configuration in ROS2\nDESCRIPTION: Focuses on improving error reporting mechanisms within the trace tools configuration in ROS2, aiding debugging and setup validation. Dependency on tracing configuration libraries and logging frameworks. It provides functions to detect, report, and log configuration errors during trace setup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_60\n\nLANGUAGE: C++\nCODE:\n```\n# Improve tracing configuration error reporting\n# Functions for better diagnostics during trace setup\n\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Workspace Setup Files\nDESCRIPTION: These commands source the setup files generated by `colcon` in the workspace's `install` directory. This makes the executables and libraries of the built packages available in the current shell environment. The command varies slightly depending on the operating system and shell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_17\n\nLANGUAGE: Console\nCODE:\n```\n$ source install/setup.bash\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ . install/setup.bash\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ call install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Build the ROS 2 workspace with Cyclone DDS (bash)\nDESCRIPTION: This command builds the ROS 2 workspace using colcon.  The `--symlink-install` option creates symlinks instead of copying files, which speeds up the build process. It assumes that the current directory is the root of the ROS 2 workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Creating Colcon Workspace Folders - Bash\nDESCRIPTION: Shell commands for Linux/macOS/Windows to create the initial directory structure and empty files for the ROS 1 package inside a Colcon workspace. These commands prepare the workspace for code and build tool integration. They must be run in a shell; they touch or create required package files, directories for Python sources, scripts, and setup scripts. No outputs other than filesystem structure.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p ~/ros2_talker_py/src\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/ros2_talker_py\n$ mkdir -p src/talker_py/src/talker_py\n$ mkdir -p src/talker_py/scripts\n$ touch src/talker_py/package.xml\n$ touch src/talker_py/CMakeLists.txt\n$ touch src/talker_py/src/talker_py/__init__.py\n$ touch src/talker_py/scripts/talker_py_node\n$ touch src/talker_py/setup.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ md \\ros2_talker_py\\src\n$ cd \\ros2_talker_py\n$ md src\\talker_py\\src\\talker_py\n$ md src\\talker_py\\scripts\n$ type nul > src\\talker_py\\package.xml\n$ type nul > src\\talker_py\\CMakeLists.txt\n$ type nul > src\\talker_py\\src\\talker_py\\__init__.py\n$ type nul > src\\talker_py\\scripts/talker_py_node\n$ type nul > src\\talker_py\\setup.py\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir resource\n$ touch resource/talker_py\n```\n\n----------------------------------------\n\nTITLE: Including Launch Files Under Namespaces in ROS 2\nDESCRIPTION: Shows how to include launch files under a namespace in ROS 2, which differs from ROS 1 by requiring a group tag and push_ros_namespace instead of the ns attribute.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<group>\n   <include file=\"another_launch_file\"/>\n</group>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<group>\n   <push_ros_namespace namespace=\"my_ns\"/>\n   <include file=\"another_launch_file\"/>\n</group>\n```\n\n----------------------------------------\n\nTITLE: Running turtle teleoperation node\nDESCRIPTION: This command executes the 'turtle_teleop_key' node to remotely control the turtlesim. It allows manual movement of the turtle using keyboard inputs while broadcasting pose information via TF2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_18\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Creating Sync/Async Publishers Node (C++)\nDESCRIPTION: This C++ code defines a ROS 2 node that creates two publishers: one synchronous and one asynchronous. The node publishes string messages on 'sync_topic' and 'async_topic' respectively, demonstrating different publication modes using Fast DDS middleware.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <functional>\n#include <memory>\n#include <string>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass SyncAsyncPublisher : public rclcpp::Node\n{\npublic:\n    SyncAsyncPublisher()\n        : Node(\"sync_async_publisher\"), count_(0)\n    {\n        // Create the synchronous publisher on topic 'sync_topic'\n        sync_publisher_ = this->create_publisher<std_msgs::msg::String>(\"sync_topic\", 10);\n\n        // Create the asynchronous publisher on topic 'async_topic'\n        async_publisher_ = this->create_publisher<std_msgs::msg::String>(\"async_topic\", 10);\n\n        // Actions to run every time the timer expires\n        auto timer_callback = [this](){\n\n            // Create a new message to be sent\n            auto sync_message = std_msgs::msg::String();\n            sync_message.data = \"SYNC: Hello, world! \" + std::to_string(count_);\n\n            // Log the message to the console to show progress\n            RCLCPP_INFO(this->get_logger(), \"Synchronously publishing: '%s'\", sync_message.data.c_str());\n\n            // Publish the message using the synchronous publisher\n            sync_publisher_->publish(sync_message);\n\n            // Create a new message to be sent\n            auto async_message = std_msgs::msg::String();\n            async_message.data = \"ASYNC: Hello, world! \" + std::to_string(count_);\n\n            // Log the message to the console to show progress\n            RCLCPP_INFO(this->get_logger(), \"Asynchronously publishing: '%s'\", async_message.data.c_str());\n\n            // Publish the message using the asynchronous publisher\n            async_publisher_->publish(async_message);\n\n            // Prepare the count for the next message\n            count_++;\n        };\n\n        // This timer will trigger the publication of new data every half a second\n        timer_ = this->create_wall_timer(500ms, timer_callback);\n    }\n\nprivate:\n    // This timer will trigger the publication of new data every half a second\n    rclcpp::TimerBase::SharedPtr timer_;\n\n    // A publisher that publishes asynchronously\n    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr async_publisher_;\n\n    // A publisher that publishes synchronously\n    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr sync_publisher_;\n\n    // Number of messages sent so far\n    size_t count_;\n};\n\nint main(int argc, char * argv[])\n{\n    rclcpp::init(argc, argv);\n    rclcpp::spin(std::make_shared<SyncAsyncPublisher>());\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Introspection in ROS 2 Python Action Server\nDESCRIPTION: This Python snippet implements the on_post_set_parameters_callback method used by FibonacciActionServer to adjust the action introspection state based on the 'action_server_configure_introspection' parameter. The mapping interprets parameter values of 'disabled', 'metadata', and 'contents' to set the corresponding introspection state and calls configure_introspection on the internal action server. Prerequisites include ROS 2 Foxy or higher with rclpy and a proper setup for dynamic parameter changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass FibonacciActionServer(Node):\n...\n    def on_post_set_parameters_callback(self, parameter_list):\n        for param in parameter_list:\n            if param.name != 'action_server_configure_introspection':\n                continue\n\n            introspection_state = ServiceIntrospectionState.OFF\n            if param.value == 'disabled':\n                introspection_state = ServiceIntrospectionState.OFF\n            elif param.value == 'metadata':\n                introspection_state = ServiceIntrospectionState.METADATA\n            elif param.value == 'contents':\n                introspection_state = ServiceIntrospectionState.CONTENTS\n\n            self._action_server.configure_introspection(self.get_clock(),\n                                                        qos_profile_system_default,\n                                                        introspection_state)\n            break\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools on Ubuntu\nDESCRIPTION: This code snippet installs essential development tools required for building ROS 2 from source on Ubuntu. It updates the apt package index and then installs a list of Python packages and ROS development tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install -y \\\n  python3-flake8-blind-except \\\n  python3-flake8-class-newline \\\n  python3-flake8-deprecated \\\n  python3-mypy \\\n  python3-pip \\\n  python3-pytest \\\n  python3-pytest-cov \\\n  python3-pytest-mock \\\n  python3-pytest-repeat \\\n  python3-pytest-rerunfailures \\\n  python3-pytest-runner \\\n  python3-pytest-timeout \\\n  ros-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Launching Composable Node (Python)\nDESCRIPTION: This Python code demonstrates how to launch a composable node using a `ComposableNodeContainer` and `ComposableNode` objects in a launch file. It replaces the traditional `Node` launch action with a container and the node's plugin definition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom launch_ros.actions import ComposableNodeContainer\nfrom launch_ros.descriptions import ComposableNode\n\n# ..\nld.add_action(ComposableNodeContainer(\n    name='a_buncha_nodes',\n    namespace='',\n    package='rclcpp_components',\n    executable='component_container',\n    composable_node_descriptions=[\n        ComposableNode(\n            package='palomino',\n            plugin='palomino::VincentDriver',\n            name='vincent_driver',\n            # ..\n            extra_arguments=[{'use_intra_process_comms': True}],\n        ),\n    ]\n))\n```\n\n----------------------------------------\n\nTITLE: Sourcing the ROS 2 environment - Console\nDESCRIPTION: This command sets up the ROS 2 environment in the command prompt. It loads the necessary environment variables. The command may print an expected error message: 'The system cannot find the path specified.'\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncall ros2_{DISTRO}\\local_setup.bat\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Environment - Console\nDESCRIPTION: This snippet shows how to set up the ROS 2 environment using either the `setup.bat` batch file (for Windows) or the `setup.ps1` PowerShell script. It prepares the command line environment for ROS 2 commands. Before running this, ensure that ROS 2 is installed. This ensures that the necessary environment variables are set up correctly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ call install/setup.bat\n$ ros2 topic echo /address_book\n```\n\nLANGUAGE: console\nCODE:\n```\n$ install/setup.ps1\n$ ros2 topic echo /address_book\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using StaticTransformBroadcaster\nDESCRIPTION: Within the node's `__init__` method, an instance of `StaticTransformBroadcaster` is created, passing the node instance (`self`) to it. Immediately after instantiation, the `make_transforms` method is called to construct and publish the static transform.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nself.tf_static_broadcaster = StaticTransformBroadcaster(self)\nself.make_transforms(transformation)\n```\n\n----------------------------------------\n\nTITLE: Fixing Imported Targets with Multiple Configurations\nDESCRIPTION: Fix for handling imported targets with multiple configurations in the ament_cmake_export_dependencies package, taking into account the DEBUG_CONFIGURATIONS global variable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfix imported targets with multiple configuration * fix imported targets with multiple configuration * taking into account DEBUG_CONFIGURATIONS global variable\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Single Server Partition (Talker 2 - Windows)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Windows to connect 'Talker 2' to only Server 1 for the partition example.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nset ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"\n```\n\n----------------------------------------\n\nTITLE: Complete CMakeLists.txt (CMake)\nDESCRIPTION: This CMake configuration file defines the project, sets the C++ standard, finds required packages (ament_cmake, rclcpp, std_msgs), creates the executable, links libraries, installs the executable, and declares the package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\nproject(sync_async_node_example_cpp)\n\n# Default to C++14\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 14)\nendif()\n\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(std_msgs REQUIRED)\n\nadd_executable(SyncAsyncWriter src/sync_async_writer.cpp)\ntarget_link_libraries(SyncAsyncWriter PUBLIC rclcpp::rclcpp ${std_msgs_TARGETS})\n\ninstall(TARGETS\n    SyncAsyncWriter\n    DESTINATION lib/${PROJECT_NAME})\n\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Call Stack Collapse in C++ Example\nDESCRIPTION: This C++ snippet illustrates a chain of function calls resulting in a crash in functionC(), simulating a stack trace scenario for educational purposes. There are no dependencies beyond the standard C++ toolchain. Inputs involve no parameters—this is a self-contained minimal example showing stack unwinding on failure. Output is a crash, usable with a debugger to observe the call stack. There are no I/O or error-handling parameters in this example; it is not intended for production use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid functionC() {\n  // Something bad happens here, causing a crash\n}\n\nvoid functionB() {\n    functionC();\n}\n\nvoid functionA() {\n    functionB();\n}\n\nint main() {\n    functionA();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Launching TF2 Turtle Demo in ROS2\nDESCRIPTION: Command to launch the turtle TF2 demo using ros2 launch. This starts the simulation environment with two turtles configured for the transformation demonstration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nros2 launch learning_tf2_py turtle_tf2_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Running a launch file in ROS 2\nDESCRIPTION: This command launches a ROS 2 launch file, `composition_demo_launch.py`, which automates the process of starting a set of components defined in the launch file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch composition composition_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Changed to avoid trying to moc generate ``env_config.hpp`` file.\nDESCRIPTION: This avoids moc generating the `env_config.hpp` file. This resolves some build issues and improves compilation. Dependencies are the build system and the moc utility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Sourcing the ROS2 Environment - macOS\nDESCRIPTION: Sources the 'local_setup.bash' file to set up the ROS2 environment variables for the current terminal session.  Required to use the created package. Must be run from within the ros2_ws directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ . install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Assigning Shared Reentrant Callback Group - C++\nDESCRIPTION: This snippet creates a Reentrant callback group and assigns it to both the client callback group (`client_cb_group_`) and the timer callback group (`timer_cb_group_`). Both the client and timer will use the same shared reentrant group, allowing multiple callbacks within this group to be executed concurrently.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nclient_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::Reentrant);\ntimer_cb_group_ = client_cb_group_;\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating TransformStamped Header\nDESCRIPTION: Instantiates a `TransformStamped` message. The header is populated with the current ROS time obtained from the node's clock, the parent frame ID ('world'), and the child frame ID taken from the command-line arguments (`transformation[1]`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nt = TransformStamped()\n\nt.header.stamp = self.get_clock().now().to_msg()\nt.header.frame_id = 'world'\nt.child_frame_id = transformation[1]\n```\n\n----------------------------------------\n\nTITLE: Running the component container in ROS 2\nDESCRIPTION: This command starts the component container, which is responsible for managing and running the components. This is a prerequisite for loading and using components at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rclcpp_components component_container\n```\n\n----------------------------------------\n\nTITLE: Example Keystore Structure within Talker Container (Output)\nDESCRIPTION: Shows the expected output of the `tree` command executed within the talker container's `/keystore` directory. Similar to the listener, this output confirms that only the 'talker' sub-enclave files and public CA certificates are deployed, adhering to the security guidelines of not shipping private keys.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n# Terminal 2\nkeystore\n ├── enclaves\n │   ├── governance.p7s\n │   ├── governance.xml\n │   └── talker_listener\n │       └── talker\n │           ├── cert.pem\n │           ├── governance.p7s\n │           ├── identity_ca.cert.pem\n │           ├── key.pem\n │           ├── permissions_ca.cert.pem\n │           ├── permissions.p7s\n │           └── permissions.xml\n └── public\n     ├── ca.cert.pem\n     ├── identity_ca.cert.pem\n     └── permissions_ca.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Authenticating with IBM Cloud CLI Using SSO - IBM Cloud CLI - console\nDESCRIPTION: This snippet provides the command to sign in to the IBM Cloud CLI using your account credentials with Single Sign-On (SSO). The only requirement is a valid IBM Cloud account and prior installation of the IBM Cloud CLI. Upon execution, you are prompted for SSO tokens or credentials to complete the login. Input is the CLI command; output is a login session for further IBM Cloud operations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud login --sso\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Executable with Remapping Using Console Commands\nDESCRIPTION: Shows how to use the ROS 2 CLI to run a node executable while remapping topic or node names using the --ros-args flag and the -r (remap) option. This contrasts with ROS 1 where remapping was done directly on the command line without explicit flags. The snippet demonstrates remapping from 'foo' to 'bar'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run some_package some_ros_executable --ros-args -r foo:=bar\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Single Server Partition (Listener 2 - Linux)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Linux to connect 'Listener 2' to only Server 2 for the partition example, using a leading semicolon.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\nexport ROS_DISCOVERY_SERVER=\";127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Checking Dependencies with rosdep\nDESCRIPTION: Runs the `rosdep check` command to verify that all dependencies declared in the package's package.xml file are installed on the system. Running this command in the workspace root helps ensure that the build process will not fail due to missing system dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_16\n\nLANGUAGE: Console\nCODE:\n```\nrosdep check --from-paths src --ignore-src -y\n```\n\n----------------------------------------\n\nTITLE: Starting PyCharm from Terminal with ROS 2 Environment on Linux\nDESCRIPTION: Details how to source the ROS 2 environment and launch PyCharm from the terminal on Linux to enable proper ROS 2 Python interpreter context within the IDE. The example includes navigating to the workspace and starting the PyCharm executable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/humble/setup.bash\n$ cd path/to/dev_ws\n$ /opt/pycharm/bin/pycharm.sh\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio Code from Sourced Environment on macOS\nDESCRIPTION: Demonstrates the shell commands to source ROS 2 and workspace setups and launch VSCode on macOS from the terminal, preserving the ROS environment within the IDE.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ . ~/ros2_install/ros2-osx/setup.bash\n$ cd ~/dev_ws\n$ . ./install/setup.bash\n$ /Applications/Visual Studio Code.app/Contents/Resources/app/bin/code ./src/my_node/\n```\n\n----------------------------------------\n\nTITLE: Building the ROS 2 C++ Publisher-Subscriber Package\nDESCRIPTION: Commands for building the C++ publisher-subscriber package using colcon, with variations for different operating systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Linux/macOS\ncolcon build --packages-select cpp_pubsub\n\n# Windows\ncolcon build --merge-install --packages-select cpp_pubsub\n```\n\n----------------------------------------\n\nTITLE: Defining a ROS 2 Launch File in Python - ROS 2 - Python\nDESCRIPTION: This Python script provides an equivalent ROS 2 launch file, using the ROS 2 Launch API to define arguments, file inclusions, namespace handling, node launching, parameter passing, and topic remapping. Dependencies include the 'launch' and 'launch_ros' Python packages. All functions and object constructors correspond to launch and launch_ros APIs, and the file assumes referenced files and nodes exist. The script is the most flexible and programmatic of the three formats, allowing advanced logic and dynamic substitutions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launch-file-different-formats.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example Python ROS 2 launch file demonstrating argument setup, file inclusion, node execution with namespace, parameters, and topic remapping\n# (actual code content to be filled in from launch/different_formats_launch.py)\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Action Client on Linux\nDESCRIPTION: Command to run the Fibonacci action client Python script on a Linux system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ python3 fibonacci_action_client.py\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Service Introspection Server Node (Bash)\nDESCRIPTION: This bash command launches the `introspection_service` executable from the `demo_nodes_cpp` ROS 2 package. This starts the ROS 2 node that provides the `add_two_ints` service with dynamic introspection configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp introspection_service\n```\n\n----------------------------------------\n\nTITLE: Querying a Transform at Time Zero Using tf2 in C++\nDESCRIPTION: This snippet shows the basic usage of the tf2::BufferCore lookupTransform() method in C++ to obtain the latest available transform by passing tf2::TimePointZero as the time parameter. It catches any tf2::TransformException thrown if the transform is not available. This code depends on having a tf2 buffer pointer (tf_buffer_) properly initialized. The TimePointZero represents the latest timestamp in the buffer.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\ntry {\n    t = tf_buffer_->lookupTransform(\n       toFrameRel,\n       fromFrameRel,\n       tf2::TimePointZero);\n} catch (const tf2::TransformException & ex) {\n\n```\n\n----------------------------------------\n\nTITLE: Composable Nodes in YAML Launch File\nDESCRIPTION: Demonstrates how to start node containers and load components into them from YAML launch files, showcasing the new frontend support for composable nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nlaunch:\n  - node_container:\n      pkg: rclcpp_components\n      exec: component_container\n      name: my_container\n      namespace: ''\n      composable_node:\n        - pkg: composition\n          plugin: composition::Talker\n          name: talker\n  - load_composable_node:\n      target: my_container\n      composable_node:\n        - pkg: composition\n          plugin: composition::Listener\n          name: listener\n```\n\n----------------------------------------\n\nTITLE: Publishing Robot Joint States and Transforms with robot_state_publisher in Python\nDESCRIPTION: This Python snippet defines a ROS 2 node named StatePublisher that simulates a walking robot by publishing periodic JointState messages and corresponding transforms using the tf2 ROS package. It includes a timer callback that updates joint angles and publishes odometry as TransformStamped messages. Dependencies include rclpy, ROS 2 message types (JointState, Quaternion), and tf2_ros for broadcasting transforms. The main loop initializes ROS, creates the node, and spins it until shutdown. The euler_to_quaternion helper converts Euler angles to Quaternion messages for transform rotations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-py.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom math import sin, cos, pi\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nfrom rclpy.qos import QoSProfile\nfrom geometry_msgs.msg import Quaternion\nfrom sensor_msgs.msg import JointState\nfrom tf2_ros import TransformBroadcaster, TransformStamped\n\n\nclass StatePublisher(Node):\n\n    def __init__(self):\n        super().__init__('state_publisher')\n\n        qos_profile = QoSProfile(depth=10)\n        self.joint_pub = self.create_publisher(JointState, 'joint_states', qos_profile)\n        self.broadcaster = TransformBroadcaster(self, qos=qos_profile)\n        self.timer = self.create_timer(1/30, self.update)\n\n        self.degree = pi / 180.0\n\n        # robot state\n        self.tilt = 0.\n        self.tinc = self.degree\n        self.swivel = 0.\n        self.angle = 0.\n        self.height = 0.\n        self.hinc = 0.005\n\n        # message declarations\n        self.odom_trans = TransformStamped()\n        self.odom_trans.header.frame_id = 'odom'\n        self.odom_trans.child_frame_id = 'axis'\n        self.joint_state = JointState()\n\n        self.get_logger().info(\"{0} started\".format(self.get_name()))\n\n    def update(self):\n        # update joint_state\n        now = self.get_clock().now()\n        self.joint_state.header.stamp = now.to_msg()\n        self.joint_state.name = ['swivel', 'tilt', 'periscope']\n        self.joint_state.position = [self.swivel, self.tilt, self.height]\n\n        # update transform\n        # (moving in a circle with radius=2)\n        self.odom_trans.header.stamp = now.to_msg()\n        self.odom_trans.transform.translation.x = cos(self.angle)*2\n        self.odom_trans.transform.translation.y = sin(self.angle)*2\n        self.odom_trans.transform.translation.z = 0.7\n        self.odom_trans.transform.rotation = \\\n            euler_to_quaternion(0, 0, self.angle + pi/2) # roll,pitch,yaw\n\n        # send the joint state and transform\n        self.joint_pub.publish(self.joint_state)\n        self.broadcaster.sendTransform(self.odom_trans)\n\n        # Create new robot state\n        self.tilt += self.tinc\n        if self.tilt < -0.5 or self.tilt > 0.0:\n            self.tinc *= -1\n        self.height += self.hinc\n        if self.height > 0.2 or self.height < 0.0:\n            self.hinc *= -1\n        self.swivel += self.degree\n        self.angle += self.degree/4\n\ndef euler_to_quaternion(roll, pitch, yaw):\n    qx = sin(roll/2) * cos(pitch/2) * cos(yaw/2) - cos(roll/2) * sin(pitch/2) * sin(yaw/2)\n    qy = cos(roll/2) * sin(pitch/2) * cos(yaw/2) + sin(roll/2) * cos(pitch/2) * sin(yaw/2)\n    qz = cos(roll/2) * cos(pitch/2) * sin(yaw/2) - sin(roll/2) * sin(pitch/2) * cos(yaw/2)\n    qw = cos(roll/2) * cos(pitch/2) * cos(yaw/2) + sin(roll/2) * sin(pitch/2) * sin(yaw/2)\n    return Quaternion(x=qx, y=qy, z=qz, w=qw)\n\ndef main():\n    try:\n        with rclpy.init():\n            node = StatePublisher()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Mutually Exclusive Callback Groups in rclcpp (C++)\nDESCRIPTION: This C++ snippet shows how to explicitly create separate mutually exclusive callback groups for a service client and a timer within a ROS 2 node using rclcpp. By calling create_callback_group with rclcpp::CallbackGroupType::MutuallyExclusive for both the client and timer variables, concurrent asynchronous activities are handled without deadlocks. These assignments guarantee that the timer and client do not contend for the same mutually exclusive group and can be scheduled independently. The usage assumes a ROS 2 C++ project with access to rclcpp and related headers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nclient_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\ntimer_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Publisher and Timer\nDESCRIPTION: This snippet within the node's constructor initializes a ROS 2 publisher on the 'chatter' topic using the `std_msgs.String` message type and creates a timer that will periodically call the `timer_callback` function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.publisher = self.create_publisher(String, 'chatter', 10)\n   self.timer = self.create_timer(0.1, self.timer_callback)\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Launching Composable Nodes (YAML)\nDESCRIPTION: This YAML launch file instantiates a cam2image and showimage composable node. It includes remappings, custom parameters, and extra arguments for setting up intra-process communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# YAML launch file content for launching composable nodes would be here\n```\n\n----------------------------------------\n\nTITLE: Selecting Fast DDS RMW via Environment Variable in Bash\nDESCRIPTION: Sets the `RMW_IMPLEMENTATION` environment variable to `rmw_fastrtps_cpp`. This command configures the current shell session to instruct ROS 2 applications to use the eProsima Fast DDS RMW implementation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nexport RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutually Exclusive Callback Group (C++)\nDESCRIPTION: This code snippet shows how to create a mutually exclusive callback group in rclcpp and associate it with a subscription. Callbacks within this group will not be executed in parallel. The `create_subscription` function is used with `rclcpp::SubscriptionOptions` to specify the callback group.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Executors.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nmy_callback_group = create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\n\nrclcpp::SubscriptionOptions options;\noptions.callback_group = my_callback_group;\n\nmy_subscription = create_subscription<Int32>(\"/topic\", rclcpp::SensorDataQoS(),\n                                           callback, options);\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Client Node\nDESCRIPTION: Executes the client node which sends a request to the service node. The client requests addition of two integers and receives the result.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run py_srvcli client\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files (Linux/macOS)\nDESCRIPTION: This command sources the generated setup file in a Linux or macOS environment to make the built ROS 2 packages and commands available in the current terminal session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nsource install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Sourcing Workspace for Application - Source - Console\nDESCRIPTION: Changes directory to the ROS 2 workspace and sources its setup script. This makes the executables and libraries built within the workspace available in the current terminal, preparing it to run the `performance_test` application.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncd ~/tracing_ws\nsource install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Declaring TF2 Member Variables in C++\nDESCRIPTION: Declaration of member variables needed for tf2_ros::MessageFilter including a buffer, transform listener, message subscriber, and message filter instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nstd::string target_frame_;\nstd::shared_ptr<tf2_ros::Buffer> tf2_buffer_;\nstd::shared_ptr<tf2_ros::TransformListener> tf2_listener_;\nmessage_filters::Subscriber<geometry_msgs::msg::PointStamped> point_sub_;\nstd::shared_ptr<tf2_ros::MessageFilter<geometry_msgs::msg::PointStamped>> tf2_filter_;\n```\n\n----------------------------------------\n\nTITLE: Integrating ament Lint Static Analysis in ROS 2 Build System - Bash\nDESCRIPTION: This snippet demonstrates how to configure the ROS 2 ament build system to run static code analysis during the package build process. It adds conditional logic to CMakeLists.txt using Bash-like pseudocode for including ament_lint_auto when BUILD_TESTING is enabled. Requires ament_cmake and associated lint packages. No inputs or outputs beyond modifying the CMake configuration; ensure your project uses ament and supports CMake. Insert this code inside your ROS 2 package's CMakeLists.txt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n...\nif(BUILD_TESTING)\n  find_package(ament_lint_auto REQUIRED)\n  ament_lint_auto_find_test_dependencies()\n  ...\nendif()\n...\n```\n\n----------------------------------------\n\nTITLE: Running and Playing Back ROS 2 Bag Data (Console)\nDESCRIPTION: These commands run the data generator node or executable and then playback the data from the created bag file. The echo command displays the recorded topic's messages in the console. Prerequisite: Executables built and bags generated as per prior steps.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_14\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run bag_recorder_nodes data_generator_node\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 bag play timed_synthetic_bag\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 topic echo /synthetic\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Introspection Client in ROS 2 C++\nDESCRIPTION: This C++ code defines a ROS 2 node (`IntrospectionClientNode`) that acts as a client for the `AddTwoInts` service. It includes parameter callbacks to allow dynamic configuration of the client's introspection state via the `client_configure_introspection` parameter. It also uses a timer to periodically send requests to the service and print the results. It depends on `rclcpp` and `example_interfaces`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nnamespace demo_nodes_cpp\n{\nclass IntrospectionClientNode : public rclcpp::Node\n{\npublic:\n  DEMO_NODES_CPP_PUBLIC\n  explicit IntrospectionClientNode(const rclcpp::NodeOptions & options)\n  : Node(\"introspection_client\", options)\n  {\n    client_ = create_client<example_interfaces::srv::AddTwoInts>(\"add_two_ints\");\n\n    auto on_set_parameter_callback =\n      [](std::vector<rclcpp::Parameter> parameters) {\n        rcl_interfaces::msg::SetParametersResult result;\n        result.successful = true;\n        for (const rclcpp::Parameter & param : parameters) {\n          if (param.get_name() != \"client_configure_introspection\") {\n            continue;\n          }\n\n          if (param.get_type() != rclcpp::ParameterType::PARAMETER_STRING) {\n            result.successful = false;\n            result.reason = \"must be a string\";\n            break;\n          }\n\n          if (param.as_string() != \"disabled\" && param.as_string() != \"metadata\" &&\n            param.as_string() != \"contents\")\n          {\n            result.successful = false;\n            result.reason = \"must be one of 'disabled', 'metadata', or 'contents'\";\n            break;\n          }\n        }\n\n        return result;\n      };\n\n    auto post_set_parameter_callback =\n      [this](const std::vector<rclcpp::Parameter> & parameters) {\n        for (const rclcpp::Parameter & param : parameters) {\n          if (param.get_name() != \"client_configure_introspection\") {\n            continue;\n          }\n\n          rcl_service_introspection_state_t introspection_state = RCL_SERVICE_INTROSPECTION_OFF;\n\n          if (param.as_string() == \"disabled\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_OFF;\n          } else if (param.as_string() == \"metadata\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_METADATA;\n          } else if (param.as_string() == \"contents\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_CONTENTS;\n          }\n\n          this->client_->configure_introspection(\n            this->get_clock(), rclcpp::SystemDefaultsQoS(), introspection_state);\n          break;\n        }\n      };\n\n    on_set_parameters_callback_handle_ = this->add_on_set_parameters_callback(\n      on_set_parameter_callback);\n    post_set_parameters_callback_handle_ = this->add_post_set_parameters_callback(\n      post_set_parameter_callback);\n\n    this->declare_parameter(\"client_configure_introspection\", \"disabled\");\n\n    timer_ = this->create_wall_timer(\n      std::chrono::milliseconds(500),\n      [this]() {\n        if (!client_->service_is_ready()) {\n          return;\n        }\n\n        if (!request_in_progress_) {\n          auto request = std::make_shared<example_interfaces::srv::AddTwoInts::Request>();\n          request->a = 2;\n          request->b = 3;\n          request_in_progress_ = true;\n          client_->async_send_request(\n            request,\n            [this](rclcpp::Client<example_interfaces::srv::AddTwoInts>::SharedFuture cb_f)\n            {\n              request_in_progress_ = false;\n              RCLCPP_INFO(get_logger(), \"Result of add_two_ints: %ld\", cb_f.get()->sum);\n            }\n          );\n          return;\n        }\n\n```\n\n----------------------------------------\n\nTITLE: New ROS 2 rclcpp_action Goal Response Callback Signature in C++\nDESCRIPTION: The updated callback signature for action client goal responses in rclcpp uses a shared pointer directly to the goal handle instead of a future. This simplifies goal management and matches design conventions. Requires C++11 or newer and rclcpp_action client library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_39\n\nLANGUAGE: c++\nCODE:\n```\nvoid goal_response_callback(GoalHandleFibonacci::SharedPtr goal_handle)\n```\n\n----------------------------------------\n\nTITLE: Loading components into a remapped container in ROS 2\nDESCRIPTION: This command loads a component, Listener, into a component container that has been remapped with the name MyContainer and is within the /ns namespace.  This demonstrates how to use the remapped container name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ns/MyContainer composition composition::Listener\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 package with Python parameters\nDESCRIPTION: Command to create a new ROS 2 package for the parameters tutorial. The package is created with ament_python build type and depends on rclpy.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nros2 pkg create --build-type ament_python --license Apache-2.0 python_parameters --dependencies rclpy\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Node in C++\nDESCRIPTION: Provides the complete source code for the ROS 2 C++ client node. It includes necessary headers, initializes ROS 2, creates a node, creates a client for the specified service, waits for the service to become available, creates and sends a service request asynchronously, waits for the response, logs the result, and then shuts down ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <cinttypes>\n#include <memory>\n\n#include \"example_interfaces/srv/add_two_ints.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n\nusing AddTwoInts = example_interfaces::srv::AddTwoInts;\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  auto node = rclcpp::Node::make_shared(\"minimal_client\");\n  auto client = node->create_client<AddTwoInts>(\"add_two_ints\");\n  while (!client->wait_for_service(std::chrono::seconds(1))) {\n    if (!rclcpp::ok()) {\n      RCLCPP_ERROR(node->get_logger(), \"client interrupted while waiting for service to appear.\");\n      return 1;\n    }\n    RCLCPP_INFO(node->get_logger(), \"waiting for service to appear...\");\n  }\n  auto request = std::make_shared<AddTwoInts::Request>();\n  request->a = 41;\n  request->b = 1;\n  auto result_future = client->async_send_request(request);\n  if (rclcpp::spin_until_future_complete(node, result_future) !=\n    rclcpp::FutureReturnCode::SUCCESS)\n  {\n    RCLCPP_ERROR(node->get_logger(), \"service call failed :(\");\n    client->remove_pending_request(result_future);\n    return 1;\n  }\n  auto result = result_future.get();\n  RCLCPP_INFO(\n    node->get_logger(), \"result of %\" PRId64 \" + %\" PRId64 \" = %\" PRId64,\n    request->a, request->b, result->sum);\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing the ROS2 Environment - Linux\nDESCRIPTION: Sources the 'local_setup.bash' file to set up the ROS2 environment variables for the current terminal session.  Required to use the created package. Must be run from within the ros2_ws directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ source install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio Code from Sourced Environment on Linux\nDESCRIPTION: Demonstrates commands to source ROS 2 and workspace environments in a Linux terminal and start VSCode from the configured shell, ensuring that the IDE inherits the correct environment variables for ROS 2 development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n$ cd ~/dev_ws\n$ source ./install/setup.bash\n$ /usr/bin/code ./src/my_node/\n```\n\n----------------------------------------\n\nTITLE: Getting Parameters with a Default Fallback in rclpy.node.Node (Python)\nDESCRIPTION: Details the convenience method 'get_parameter_or' for fetching a parameter, providing a fallback value if the parameter is undeclared. Input is the parameter name and optional alternative Parameter; output is a Parameter object. This method aids in robust node initialization with support for default values. No external dependencies beyond rclpy are required.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ndef get_parameter_or(name: str, alternative_value: Optional[Parameter] = None) -> Parameter\n```\n\n----------------------------------------\n\nTITLE: rclcpp Node Constructor Usage Before Dashing\nDESCRIPTION: Demonstrates the usage of the `rclcpp::Node()` constructor with extended arguments prior to the Dashing release. This method of passing options is now deprecated.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto context = rclcpp::contexts::default_context::get_global_default_context();\nstd::vector<std::string> args;\nstd::vector<rclcpp::Parameter> params = { rclcpp::Parameter(\"use_sim_time\", true) };\nauto node = std::make_shared<rclcpp::Node>(\"foo_node\", \"bar_namespace\", context, args, params);\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Launching Composable Nodes (Python)\nDESCRIPTION: This Python launch file instantiates a cam2image and showimage composable node. It includes remappings, custom parameters, and extra arguments for setting up intra-process communication. It requires the `launch_ros` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Python launch file content for launching composable nodes would be here\n# Requires launch_ros package\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Python Package\nDESCRIPTION: Creates a new ROS 2 package named `python_parameter_event_handler` using the ament_python build type. It automatically includes `rclpy` as a dependency in `package.xml` and `CMakeLists.txt`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nros2 pkg create --build-type ament_python --license Apache-2.0 python_parameter_event_handler --dependencies rclpy\n```\n\n----------------------------------------\n\nTITLE: Launching ROS 2 Listener Node with Specific Enclave in Bash\nDESCRIPTION: Runs the 'listener' node from the 'demo_nodes_cpp' package, specifying the security enclave '/talker_listener/listener' using ROS arguments. This command is intended to be run after setting security environment variables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp listener --ros-args --enclave /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: ROS 1 CMake Build Configuration\nDESCRIPTION: This CMakeLists.txt file configures the build process for the ROS 1 talker package. It finds required packages (catkin, roscpp, std_msgs), creates a catkin package, includes directories, adds an executable (talker), links libraries, and installs the executable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.3)\nproject(talker)\nfind_package(catkin REQUIRED COMPONENTS roscpp std_msgs)\ncatkin_package()\ninclude_directories(${catkin_INCLUDE_DIRS})\nadd_executable(talker talker.cpp)\ntarget_link_libraries(talker ${catkin_LIBRARIES})\ninstall(TARGETS talker\n  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})\n```\n\n----------------------------------------\n\nTITLE: Launching the Dynamic Frame Demo using ros2 launch\nDESCRIPTION: Uses the `ros2 launch` command to start the ROS2 nodes defined in the specified launch file (`turtle_tf2_dynamic_frame_demo_launch.py`) belonging to the `learning_tf2_py` package. This command initiates the entire demonstration, including the dynamic TF2 broadcaster node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_py turtle_tf2_dynamic_frame_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Installing tf2 Demo Dependencies on RHEL\nDESCRIPTION: Installs required ROS 2 packages for the tf2 turtlesim demo on RHEL-based systems using dnf. Packages include rviz2, turtle_tf2_py, tf2_ros, tf2_tools, and turtlesim. Replace {DISTRO} with your specific ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install ros-{DISTRO}-rviz2 ros-{DISTRO}-turtle-tf2-py ros-{DISTRO}-tf2-ros ros-{DISTRO}-tf2-tools ros-{DISTRO}-turtlesim\n```\n\n----------------------------------------\n\nTITLE: Expected Directory Contents\nDESCRIPTION: This snippet shows the expected file structure within the package directory after downloading the subscriber code. It includes the package initializer (`__init__.py`), the publisher node script, and the newly added subscriber node script.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_9\n\nLANGUAGE: Console\nCODE:\n```\n__init__.py  publisher_member_function.py  subscriber_member_function.py\n```\n\n----------------------------------------\n\nTITLE: Sourcing Workspace Setup Files (Linux/macOS)\nDESCRIPTION: Sources the ROS 2 workspace setup file (`setup.bash`) to make the built packages and environment variables available in the current terminal session. Execute this command from the workspace root.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Logging basic messages in ROS 2 nodes using Python\nDESCRIPTION: Shows how to output a DEBUG severity log message in a ROS 2 Python node using the node's 'get_logger().debug()' method. It supports printf-style string formatting via Python's '%' operator. The snippet expects a 'node' object representing a ROS 2 node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nnode.get_logger().debug('My log message %d' % (4))\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories for Talker - CMake\nDESCRIPTION: This snippet adds include directories to the talker executable. It uses the `target_include_directories` function with `PUBLIC` visibility, which makes the include directories available to the target and any targets that link to it. It specifies include paths relative to build and install interfaces, which is essential for the compiler to find the header files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\n   target_include_directories(talker PUBLIC\n      \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n      \"$<INSTALL_INTERFACE:include/${PROJECT_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Quaternion from List in Python\nDESCRIPTION: Creates a geometry_msgs::msg::Quaternion message from a list of float values representing quaternion components in Python for ROS 2 communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom geometry_msgs.msg import Quaternion\n\n # Create a list of floats, which is compatible with tf2\n quat_tf = [0.0, 1.0, 0.0, 0.0]\n\n # Convert a list to geometry_msgs.msg.Quaternion\n msg_quat = Quaternion(x=quat_tf[0], y=quat_tf[1], z=quat_tf[2], w=quat_tf[3])\n```\n\n----------------------------------------\n\nTITLE: Converting tf2::Quaternion to geometry_msgs::msg::Quaternion in C++\nDESCRIPTION: Illustrates converting between tf2::Quaternion and geometry_msgs::msg::Quaternion types in ROS 2 using tf2_geometry_msgs library, necessary for message passing and library interoperability.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n\n tf2::Quaternion tf2_quat, tf2_quat_from_msg;\n tf2_quat.setRPY(roll, pitch, yaw);\n // Convert tf2::Quaternion to geometry_msgs::msg::Quaternion\n geometry_msgs::msg::Quaternion msg_quat = tf2::toMsg(tf2_quat);\n\n // Convert geometry_msgs::msg::Quaternion to tf2::Quaternion\n tf2::convert(msg_quat, tf2_quat_from_msg);\n // or\n tf2::fromMsg(msg_quat, tf2_quat_from_msg);\n```\n\n----------------------------------------\n\nTITLE: Replacing Boost Unordered Map with Standard Library\nDESCRIPTION: This snippet instructs to swap boost unordered_map with std::unordered_map by updating include statements and replacing type usage for better compatibility and standards compliance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\n* Replace ``#include <boost/unordered_map.hpp>`` with ``#include <unordered_map>``\n* Replace ``boost::unordered_map`` with ``std::unordered_map``\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with Pip in Bash\nDESCRIPTION: Uses pip to upgrade itself and install or update a set of Python dependencies needed for building and testing ROS 2. The command sets specific build options for graphviz-related packages and pins certain versions to avoid compatibility issues. Requires Python 3 and Homebrew graphviz, and ensures paths for build extensions are correct.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --upgrade pip\n\npython3 -m pip install -U \\\n  --config-settings=\"--global-option=build_ext\" \\\n  --config-settings=\"--global-option=-I$(brew --prefix graphviz)/include/\" \\\n  --config-settings=\"--global-option=-L$(brew --prefix graphviz)/lib/\" \\\n  argcomplete catkin_pkg colcon-common-extensions coverage \\\n  cryptography empy flake8 flake8-blind-except==0.1.1 flake8-builtins \\\n  flake8-class-newline flake8-comprehensions flake8-deprecated \\\n  flake8-import-order flake8-quotes \\\n  importlib-metadata jsonschema lark==1.1.1 lxml matplotlib mock mypy==0.931 netifaces \\\n  psutil pydot pygraphviz pyparsing==2.4.7 \\\n  pytest-mock rosdep rosdistro setuptools==59.6.0 vcstool\n```\n\n----------------------------------------\n\nTITLE: Recording Specific Services with ros2 bag (Console)\nDESCRIPTION: This command records data for specified ROS 2 services using 'ros2 bag record --service <service_names>'. The snippet is used to capture service events simultaneously with topic data. It requires that the specified services exist and Service Introspection is enabled. The command takes service names as parameters and outputs a bag file accumulating all relevant service interactions. Stop the recording by pressing Ctrl+C.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record --service <service_names>\n```\n\n----------------------------------------\n\nTITLE: Implementing the MyRobotDriver Plugin (C++)\nDESCRIPTION: Full implementation file (`MyRobotDriver.cpp`) for the `MyRobotDriver` C++ class. Defines the `init` method for setup (motors, subscriptions) and the `step` method for control logic based on received `/cmd_vel` messages. It also includes the necessary `PLUGINLIB_EXPORT_CLASS` macro to register the class as a plugin.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// Content of Code/MyRobotDriver.cpp\n```\n\n----------------------------------------\n\nTITLE: Console Output of Parameter Change\nDESCRIPTION: Shows the expected output in the terminal where the node is running after its `an_int_param` is changed via the `ros2 param set` command. The output demonstrates that the callback function was successfully invoked and logged the new parameter value.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1698483083.315084660] [node_with_parameters]: Received an update to parameter: an_int_param: 43\n```\n\n----------------------------------------\n\nTITLE: Setting RMW Implementation\nDESCRIPTION: This command sets the environment variable `RMW_IMPLEMENTATION` to tell ROS 2 which RMW to use.  It specifies the implementation to use when running ROS 2 nodes. Prerequisites:  ROS 2 installed and the RMW (rmw_connextdds in this case) installed and built.  This variable must be set before running any ROS 2 nodes that use the selected RMW.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport RMW_IMPLEMENTATION=rmw_connextdds\n```\n\n----------------------------------------\n\nTITLE: Sourcing Workspace Setup Files (Windows CMD)\nDESCRIPTION: Sources the ROS 2 workspace setup file (`setup.bat`) in a Windows Command Prompt to make the built packages and environment variables available. Execute this command from the workspace root.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_15\n\nLANGUAGE: Batch\nCODE:\n```\n$ call install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Installing and Exporting Libraries with ament_cmake in CMake\nDESCRIPTION: Demonstrates installing a library target (`my_library`) using `install(TARGETS ...)` and exporting it using `ament_export_targets` so downstream packages can link against it (`target_link_libraries`). It also shows exporting dependencies with `ament_export_dependencies` to simplify usage for client packages. The `HAS_LIBRARY_TARGET` option is crucial for library exports, and the `EXPORT` name must match the argument to `ament_export_targets`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  TARGETS my_library\n  EXPORT export_${PROJECT_NAME}\n  LIBRARY DESTINATION lib\n  ARCHIVE DESTINATION lib\n  RUNTIME DESTINATION bin\n)\n\nament_export_targets(export_${PROJECT_NAME} HAS_LIBRARY_TARGET)\nament_export_dependencies(some_dependency)\n```\n\n----------------------------------------\n\nTITLE: Include std_msgs String Header - C++\nDESCRIPTION: This code snippet demonstrates how to replace the ROS 1 std_msgs/String header with the ROS 2 equivalent in the C++ code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// #include \"std_msgs/String.h\"\n#include \"std_msgs/msg/string.hpp\"\n```\n\n----------------------------------------\n\nTITLE: YAML Representation of Messages with C++\nDESCRIPTION: This C++ code demonstrates how to generate a YAML representation of a ROS 2 message using the `to_yaml` function from the `rosidl_generator_traits` namespace.  It includes the necessary headers for the `string` message type and the `printf` function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\n#include <cstdio>\n\n#include <std_msgs/msg/string.hpp>\n\nint main()\n{\n  std_msgs::msg::String msg;\n  msg.data = \"hello world\";\n  printf(\"%s\", rosidl_generator_traits::to_yaml(msg).c_str());\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Quaternion Rotation in C++\nDESCRIPTION: Shows how to rotate a pose by multiplying its orientation quaternion with another quaternion representing the rotation, both in C++ and Python, to update pose orientations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>\n\n tf2::Quaternion q_orig, q_rot, q_new;\n\n q_orig.setRPY(0.0, 0.0, 0.0);\n // Rotate the previous pose by 180* about X\n q_rot.setRPY(3.14159, 0.0, 0.0);\n q_new = q_rot * q_orig;\n q_new.normalize();\n```\n\n----------------------------------------\n\nTITLE: Filtering topic by type\nDESCRIPTION: This enhancement enables topic filtering by type in the `ros2bag` package. This enables more specific topic filtering, making recordings cleaner and more targeted.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: rosidl Translate Messages with Bash\nDESCRIPTION: This example showcases the use of `rosidl translate` for converting a message definition into a different format (e.g., IDL), specifying include paths, and the output directory.  This is useful for third-party code generation.  It requires a ROS 2 environment and defined messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrosidl translate -o gen --to idl -I$(ros2 pkg prefix --share std_msgs)/.. \\\n    -I$(ros2 pkg prefix --share geometry_msgs)/.. demo msg/Demo.msg\n```\n\n----------------------------------------\n\nTITLE: Listing plugins with 'ros2 bag list'\nDESCRIPTION: This command-line snippet shows the use of `ros2 bag list` command. This command lists installed plugins by type, allowing the user to check available storage and converter plugins for rosbag2. The example output demonstrates listings for the `storage` and `converter` types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 bag list storage\nrosbag2_v2\nsqlite3\n\n$ ros2 bag list converter\nrosbag_v2_converter\n```\n\n----------------------------------------\n\nTITLE: Downloading pixi configuration file - Console\nDESCRIPTION: This snippet downloads the pixi configuration file (pixi.toml) to the C:\\dev directory. This file is required to install ROS 2 dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncd C:\\dev\nirm https://raw.githubusercontent.com/ros2/ros2/refs/heads/{REPOS_FILE_BRANCH}/pixi.toml -OutFile pixi.toml\n```\n\n----------------------------------------\n\nTITLE: Implementing Panel UI, ROS Subscription, and QT Interaction in DemoPanel - C++\nDESCRIPTION: Implements DemoPanel construction, initializes ROS publisher/subscriber, sets up a Qt vertical layout with a label and button, and links GUI events to ROS communication. Subscribes to /input (shows messages), publishes to /output when button pressed. Dependencies: rclcpp, std_msgs, rviz_common, QVBoxLayout, pluginlib. No runtime parameters. Input: ROS messages and UI events; output: panel display update and ROS message publication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n#include <rviz_panel_tutorial/demo_panel.hpp>\n#include <QVBoxLayout>\n#include <rviz_common/display_context.hpp>\n\nnamespace rviz_panel_tutorial\n{\n\nDemoPanel::DemoPanel(QWidget* parent) : Panel(parent)\n{\n  // Create a label and a button, displayed vertically (the V in VBox means vertical)\n  const auto layout = new QVBoxLayout(this);\n  // Create a button and a label for the button\n  label_ = new QLabel(\"[no data]\");\n  button_ = new QPushButton(\"GO!\");\n  // Add those elements to the GUI layout\n  layout->addWidget(label_);\n  layout->addWidget(button_);\n\n  // Connect the event of when the button is released to our callback,\n  // so pressing the button results in the buttonActivated callback being called.\n  QObject::connect(button_, &QPushButton::released, this, &DemoPanel::buttonActivated);\n}\n\nDemoPanel::~DemoPanel() = default;\n\nvoid DemoPanel::onInitialize()\n{\n  // Access the abstract ROS Node and\n  // in the process lock it for exclusive use until the method is done.\n  node_ptr_ = getDisplayContext()->getRosNodeAbstraction().lock();\n\n  // Get a pointer to the familiar rclcpp::Node for making subscriptions/publishers\n  // (as per normal rclcpp code)\n  rclcpp::Node::SharedPtr node = node_ptr_->get_raw_node();\n\n  // Create a String publisher for the output\n  publisher_ = node->create_publisher<std_msgs::msg::String>(\"/output\", 10);\n\n  // Create a String subscription and bind it to the topicCallback inside this class.\n  subscription_ = node->create_subscription<std_msgs::msg::String>(\"/input\", 10, std::bind(&DemoPanel::topicCallback, this, std::placeholders::_1));\n}\n\n// When the subscriber gets a message, this callback is triggered,\n// and then we copy its data into the widget's label\nvoid DemoPanel::topicCallback(const std_msgs::msg::String & msg)\n{\n  label_->setText(QString(msg.data.c_str()));\n}\n\n// When the widget's button is pressed, this callback is triggered,\n// and then we publish a new message on our topic.\nvoid DemoPanel::buttonActivated()\n{\n  auto message = std_msgs::msg::String();\n  message.data = \"Button clicked!\";\n  publisher_->publish(message);\n}\n\n}  // namespace rviz_panel_tutorial\n\n#include <pluginlib/class_list_macros.hpp>\n\nPLUGINLIB_EXPORT_CLASS(rviz_panel_tutorial::DemoPanel, rviz_common::Panel)\n\n```\n\n----------------------------------------\n\nTITLE: Registering an Ament Extension in CMake\nDESCRIPTION: This snippet shows how to register a hook as an ament extension. The macro `ament_register_extension` is used to register a specific file, such as a CMake file, to be executed at a certain extension point. The hook file defines the actual logic to be executed, for instance, `ament_index_register_resource`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nament_register_extension(\"ament_package\" \"rviz_rendering\"\n      \"register_rviz_ogre_media_exports_hook.cmake\")\n```\n\n----------------------------------------\n\nTITLE: QoS Incompatibility with Bash\nDESCRIPTION: This command, meant to be run in a separate terminal, starts a subscription with a different QoS profile than the publisher (in the previous code snippet) to create a QoS incompatibility. A ROS 2 environment and the demo_nodes_py package are needed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_py listener_qos --reliable -n 1000  # i.e. reliable subscription\n```\n\n----------------------------------------\n\nTITLE: Autocomplete for topic pub\nDESCRIPTION: This code snippet describes the autocomplete feature to help the user compose ros2 topic pub commands by using the tab key.  The user types the initial commands and the TAB key presents a number of options and possible arguments for the command to publish a message to the topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist <TAB>\n```\n\n----------------------------------------\n\nTITLE: Install ROS2 dependencies with rosdep\nDESCRIPTION: This console command uses 'rosdep' to install any missing dependencies required by the ROS2 package. The flags '-i', '--from-path', '--rosdistro', and '-y' specify that rosdep should install dependencies interactively, search for packages in the 'src' directory, use the specified ROS2 distribution, and answer 'yes' to all prompts, respectively.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nrosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Replacing ros::Time and std_msgs::Time with ROS 2 Types\nDESCRIPTION: This snippet instructs to replace all instances of ros::Time with rclcpp::Time, and convert std_msgs::Time to builtin_interfaces::msg::Time. It also covers changing includes and field names for consistency in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nReplace all instances of ``ros::Time`` with ``rclcpp::Time``.\n\nIf using std_msgs::Time:\n- Convert to ``builtin_interfaces::msg::Time``\n- Change include to ``#include <builtin_interfaces/msg/time.hpp>``\n- Convert field ``nsec`` to ``nanosec``\n```\n\n----------------------------------------\n\nTITLE: Verify Multicast Setup with ROS2\nDESCRIPTION: This snippet demonstrates how to use ROS2's multicast tools to verify if multicast is enabled on the network interface. It involves running a receiver and a sender in separate terminals. This is crucial for DDS communication in ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 multicast receive\n```\n\n----------------------------------------\n\nTITLE: Setting Up ROS 2 Security Environment Variables in Bash\nDESCRIPTION: Exports necessary environment variables (ROS_SECURITY_KEYSTORE, ROS_SECURITY_ENABLE, ROS_SECURITY_STRATEGY) to enable and enforce ROS 2 security using a specific keystore directory. It also changes the current directory to the listener's enclave within the demo keystore.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_SECURITY_KEYSTORE=~/sros2_demo/demo_keystore\nexport ROS_SECURITY_ENABLE=true\nexport ROS_SECURITY_STRATEGY=Enforce\n\ncd ~/sros2_demo/demo_keystore/enclaves/talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Removing old script files using terminal commands on Linux/macOS/Windows\nDESCRIPTION: Executes shell commands to delete the obsolete 'talker_py_node' script and the scripts directory after moving to console_scripts entry point installation for ROS 2. Commands differ based on OS platform.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ rm scripts/talker_py_node\n$ rmdir scripts\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rm scripts/talker_py_node\n$ rmdir scripts\n```\n\nLANGUAGE: console\nCODE:\n```\n$ del scripts/talker_py_node\n$ rd scripts\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py for pytest dependency in ROS2 packages\nDESCRIPTION: Add pytest as a test dependency in your package's setup.py file. This addition is required within the setup() function call to ensure pytest is available during test execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Python.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntests_require=['pytest'],\n```\n\n----------------------------------------\n\nTITLE: Launch File Node Definitions (Python)\nDESCRIPTION: This Python snippet from a ROS 2 launch file defines the nodes to be executed. It launches the `turtlesim_node` and the custom `turtle_tf2_broadcaster` node, specifying the package, executable name, and a parameter (`turtlename`) for the broadcaster.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim'\n        ),\n        Node(\n            package='learning_tf2_py',\n            executable='turtle_tf2_broadcaster',\n            name='broadcaster1',\n            parameters=[\n                {'turtlename': 'turtle1'}\n            ]\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: RTI Connext OSX Shared Memory Error (Console)\nDESCRIPTION: This code displays an example error message that occurs when running RTI Connext on OSX due to insufficient shared memory kernel settings. The error message indicates that shared memory transport is unusable and provides information on how to resolve the problem.  The error originates from the DomainParticipant class and its inability to allocate memory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n[D0062|ENABLE]DDS_DomainParticipantPresentation_reserve_participant_index_entryports:!enable reserve participant index\n[D0062|ENABLE]DDS_DomainParticipant_reserve_participant_index_entryports:Unusable shared memory transport. For a more in-   depth explanation of the possible problem and solution, please visit https://community.rti.com/kb/osx510.\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment Setup - Shell\nDESCRIPTION: Loads the ROS 2 environment setup for the current terminal session, enabling ROS 2 packages to be found and used. The exact source command varies by OS and installation method. This step must be done before building or using any workspaces. On Windows, uses a call to a batch script from a Visual Studio command prompt; on macOS and Linux, uses source or dot commands pointing to the installation setup script. No parameters needed. Output is the environment setup for ROS 2 in the terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ . ~/ros2_install/ros2-osx/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ call C:\\dev\\ros2\\local_setup.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake to Build the ROS 2 Subscriber Node\nDESCRIPTION: CMake code snippet for `CMakeLists.txt` to build the subscriber node. It defines an executable named `SyncAsyncReader` from the `sync_async_reader.cpp` source file, links it against the `rclcpp` library and `std_msgs` message targets, and installs the executable to the package's library destination.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(SyncAsyncReader src/sync_async_reader.cpp)\ntarget_link_libraries(SyncAsyncReader PUBLIC rclcpp::rclcpp ${std_msgs_TARGETS})\n\ninstall(TARGETS\n    SyncAsyncReader\n    DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using rosdep\nDESCRIPTION: This script initializes rosdep, updates its database, and installs dependencies required by ROS 2. It uses `rosdep init`, `rosdep update`, and `rosdep install` commands. The script also skips certain keys specified in the documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo rosdep init\n   rosdep update\n   rosdep install --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-7.3.0 urdfdom_headers\"\n```\n\n----------------------------------------\n\nTITLE: Defining Build Macros in CMakeLists for Windows Symbol Visibility in CMake\nDESCRIPTION: Illustrates how to define a preprocessor macro specific to the library being built in the CMakeLists.txt file. This macro toggles the visibility control preprocessor logic to export symbols when building the library on Windows. It ensures that the MY_LIB_BUILDING_LIBRARY macro is defined during build, enabling correct use of the visibility macros.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${PROJECT_NAME}\n  PRIVATE \"MY_LIB_BUILDING_LIBRARY\")\n```\n\n----------------------------------------\n\nTITLE: Configuring 'package.xml' Dependencies for Interface Package\nDESCRIPTION: Specifies necessary build and runtime dependencies, including 'geometry_msgs', 'rosidl_default_generators', and 'rosidl_default_runtime', and groups dependencies under 'rosidl_interface_packages' for the package named 'tutorial_interfaces'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<depend>geometry_msgs</depend>\n<buildtool_depend>rosidl_default_generators</buildtool_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n<member_of_group>rosidl_interface_packages</member_of_group>\n```\n\n----------------------------------------\n\nTITLE: Running Turtlesim Teleoperation Node\nDESCRIPTION: Runs the 'turtle_teleop_key' node from the 'turtlesim' package using the 'ros2 run' command. This node listens for keyboard input (arrow keys) and publishes velocity commands to control a turtlesim turtle.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Listing and recording topics in ROS 1\nDESCRIPTION: Commands to list available topics that have been bridged from ROS 2 to ROS 1, and to record these topics using rosbag record.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Shell E:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nrostopic list\nrosbag record /image /imu_data /odom\n```\n\n----------------------------------------\n\nTITLE: Building and Verifying a ROS 2 Action Interface\nDESCRIPTION: Commands to build the package containing the action definition and verify that the interface was created successfully using the ROS 2 command line tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/ros2_ws # Change to the root of the workspace\n$ colcon build # Build\n$ source install/local_setup.console\n$ ros2 interface show custom_action_interfaces/action/Fibonacci\n```\n\n----------------------------------------\n\nTITLE: Configuring topic access in permissions.xml (XML)\nDESCRIPTION: This XML snippet configures the permissions for a ROS2 node, specifically the 'talker'. It defines which topics the node is allowed to publish and subscribe to, restricting access to the 'chatter', 'rosout', and 'parameter_events' topics, as well as topics related to parameter management. It also defines access for discovery information. The DDS naming format is used for topics.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dds xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"http://www.omg.org/spec/DDS-SECURITY/20170901/omg_shared_ca_permissions.xsd\">\n  <permissions>\n    <grant name=\"/talker_listener/talker\">\n      <subject_name>CN=/talker_listener/talker</subject_name>\n      <validity>\n        <not_before>2021-06-01T16:57:53</not_before>\n        <not_after>2031-05-31T16:57:53</not_after>\n      </validity>\n      <allow_rule>\n        <domains>\n          <id>0</id>\n        </domains>\n        <publish>\n          <topics>\n            <topic>rt/chatter</topic>\n            <topic>rt/rosout</topic>\n            <topic>rt/parameter_events</topic>\n            <topic>*/talker/*</topic>\n          </topics>\n        </publish>\n        <subscribe>\n          <topics>\n            <topic>rt/parameter_events</topic>\n            <topic>*/talker/*</topic>\n          </topics>\n        </subscribe>\n      </allow_rule>\n      <allow_rule>\n        <domains>\n          <id>0</id>\n        </domains>\n        <publish>\n          <topics>\n            <topic>ros_discovery_info</topic>\n          </topics>\n        </publish>\n        <subscribe>\n          <topics>\n            <topic>ros_discovery_info</topic>\n          </topics>\n        </subscribe>\n      </allow_rule>\n      <default>DENY</default>\n    </grant>\n  </permissions>\n</dds>\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Single Server (Linux)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Linux to specify a single discovery server address.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nexport ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Loaned Messages Using ROS 2 rclcpp in C++\nDESCRIPTION: This C++ code sample demonstrates a ROS 2 node that publishes both POD (e.g., std_msgs::msg::Float64) and non-POD (e.g., std_msgs::msg::String) messages using loaned message APIs in rclcpp. It showcases how to acquire loaned message buffers from the underlying middleware for zero copy data transfer when supported, or fallback to standard allocation if not supported. The code requires ROS 2, rclcpp, and demo_nodes_cpp dependencies, and illustrates message publication on two topics with periodic scheduling via a timer; environments lacking loaned message support will automatically revert to heap allocation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <cstdio>\n#include <memory>\n#include <utility>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"rclcpp_components/register_node_macro.hpp\"\n\n#include \"std_msgs/msg/float64.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n\n#include \"demo_nodes_cpp/visibility_control.h\"\n\nusing namespace std::chrono_literals;\n\nnamespace demo_nodes_cpp\n{\n// Create a Talker class that subclasses the generic rclcpp::Node base class.\n// The main function below will instantiate the class as a ROS node.\nclass LoanedMessageTalker : public rclcpp::Node\n{\npublic:\n  DEMO_NODES_CPP_PUBLIC\n  explicit LoanedMessageTalker(const rclcpp::NodeOptions & options)\n  : Node(\"loaned_message_talker\", options)\n  {\n    // Create a function for when messages are to be sent.\n    setvbuf(stdout, NULL, _IONBF, BUFSIZ);\n\n    // We differentiate in this demo between two fundamental message types - POD and non-POD\n    // PODs are plain old data types, meaning all the data of its type is encapsulated within\n    // the structure and does not require any heap allocation or dynamic resizing.\n    // non-PODs are essentially the opposite where the data size changes during runtime.\n    // All containers (including Strings) are such non-PODs.\n    // Most middlewares won't be able to loan non-POD datatypes.\n    // We thus feature two publishers in this demo where both, a POD and non-POD message\n    // will be used to publish data.\n    // The take-away for this is that the rclcpp API for message loaning can cope with\n    // either POD and non-POD transparently.\n    auto publish_message =\n      [this]() -> void\n      {\n        // We loan a message here and don't allocate the memory on the stack.\n        // For middlewares which support message loaning, this means the middleware\n        // completely owns the memory for this message.\n        // This enables a zero-copy message transport for middlewares with shared memory\n        // capabilities.\n        // If the middleware doesn't support this, the loaned message will be allocated\n        // with the allocator instance provided by the publisher.\n        auto pod_loaned_msg = pod_pub_->borrow_loaned_message();\n        auto pod_msg_data = static_cast<double>(count_);\n        pod_loaned_msg.get().data = pod_msg_data;\n        RCLCPP_INFO(this->get_logger(), \"Publishing: '%f'\", pod_msg_data);\n        // As the middleware might own the memory allocated for this message,\n        // a call to publish explicitly transfers ownership back to the middleware.\n        // The loaned message instance is thus no longer valid after a call to publish.\n        pod_pub_->publish(std::move(pod_loaned_msg));\n\n        // Similar as in the above case, we ask the middleware to loan a message.\n        // As most likely the middleware won't be able to loan a message for a non-POD\n        // data type, the memory for the message will be allocated on the heap within\n        // the scope of the `LoanedMessage` instance.\n        // After the call to `publish()`, the message will be correctly allocated.\n        auto non_pod_loaned_msg = non_pod_pub_->borrow_loaned_message();\n        auto non_pod_msg_data = \"Hello World: \" + std::to_string(count_);\n        non_pod_loaned_msg.get().data = non_pod_msg_data;\n        RCLCPP_INFO(this->get_logger(), \"Publishing: '%s'\", non_pod_msg_data.c_str());\n        non_pod_pub_->publish(std::move(non_pod_loaned_msg));\n        count_++;\n      };\n\n    // Create a publisher with a custom Quality of Service profile.\n    rclcpp::QoS qos(rclcpp::KeepLast(7));\n    pod_pub_ = this->create_publisher<std_msgs::msg::Float64>(\"chatter_pod\", qos);\n    non_pod_pub_ = this->create_publisher<std_msgs::msg::String>(\"chatter\", qos);\n\n    // Use a timer to schedule periodic message publishing.\n    timer_ = this->create_wall_timer(1s, publish_message);\n  }\n\nprivate:\n  size_t count_ = 1;\n  rclcpp::Publisher<std_msgs::msg::Float64>::SharedPtr pod_pub_;\n  rclcpp::Publisher<std_msgs::msg::String>::SharedPtr non_pod_pub_;\n  rclcpp::TimerBase::SharedPtr timer_;\n};\n\n}  // namespace demo_nodes_cpp\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Package Dependencies (package.xml)\nDESCRIPTION: This XML snippet defines the dependencies required by the custom RViz plugin in the `package.xml` file.  It lists `pluginlib`, `rviz_common`, and `rviz_plugin_tutorial_msgs`, ensuring the plugin has access to the necessary libraries and message definitions.  These are essential for proper plugin functionality within RViz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n   <depend>pluginlib</depend>\n     <depend>rviz_common</depend>\n     <depend>rviz_plugin_tutorial_msgs</depend>\n```\n\n----------------------------------------\n\nTITLE: Pulling ROS 2 Docker Image - Docker - Console\nDESCRIPTION: This snippet uses Docker CLI to pull the official ROS 2 docker image tagged with the specified distribution name for desktop usage. The command requires the user to replace \"{DISTRO}\" with the desired ROS 2 distribution, such as \"humble\" or \"foxy\". The image includes desktop support and is necessary for running ROS 2 inside a container.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull osrf/ros:{DISTRO}-desktop\n```\n\n----------------------------------------\n\nTITLE: Creating a Content Filtering Subscriber in C++\nDESCRIPTION: This C++ code defines a ROS 2 node called `ContentFilteringSubscriber`. It subscribes to the \"temperature\" topic and uses a content filter to only receive temperature data less than -30 or greater than 100. The node utilizes `rclcpp` for ROS 2 node functionality, `std_msgs/msg/Float32` for the message type, and includes a callback to process the filtered messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Content-Filtering-Subscription.rst#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n#include \"rclcpp/rclcpp.hpp\"\n#include \"rclcpp_components/register_node_macro.hpp\"\n#include \"rcpputils/join.hpp\"\n\n#include \"std_msgs/msg/float32.hpp\"\n\n#include \"demo_nodes_cpp/visibility_control.h\"\n\nnamespace demo_nodes_cpp\n{\n// Emergency temperature data less than -30 or greater than 100\nconstexpr std::array<float, 2> EMERGENCY_TEMPERATURE {-30.0f, 100.0f};\n\n// Create a ContentFilteringSubscriber class that subclasses the generic rclcpp::Node base class.\n// The main function below will instantiate the class as a ROS node.\nclass ContentFilteringSubscriber : public rclcpp::Node\n{\npublic:\n  DEMO_NODES_CPP_PUBLIC\n  explicit ContentFilteringSubscriber(const rclcpp::NodeOptions & options)\n  : Node(\"content_filtering_subscriber\", options)\n  {\n    setvbuf(stdout, NULL, _IONBF, BUFSIZ);\n    // Create a callback function for when messages are received.\n    auto callback =\n      [this](const std_msgs::msg::Float32 & msg) -> void\n      {\n        if (msg.data < EMERGENCY_TEMPERATURE[0] || msg.data > EMERGENCY_TEMPERATURE[1]) {\n          RCLCPP_INFO(\n            this->get_logger(),\n            \"I receive an emergency temperature data: [%f]\", msg.data);\n        } else {\n          RCLCPP_INFO(this->get_logger(), \"I receive a temperature data: [%f]\", msg.data);\n        }\n      };\n\n    // Initialize a subscription with a content filter to receive emergency temperature data that\n    // are less than -30 or greater than 100.\n    rclcpp::SubscriptionOptions sub_options;\n    sub_options.content_filter_options.filter_expression = \"data < %0 OR data > %1\";\n    sub_options.content_filter_options.expression_parameters = {\n      std::to_string(EMERGENCY_TEMPERATURE[0]),\n\n```\n\n----------------------------------------\n\nTITLE: Using Advanced lookupTransform() API for Correct Time Travel in tf2\nDESCRIPTION: A code snippet demonstrating the advanced tf2 API that allows for more precise control over time points for transformations. This approach correctly transforms from a past source frame to a current target frame using a fixed reference frame.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Time-Travel-With-Tf2-Cpp.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::Time now = this->get_clock()->now();\nrclcpp::Time when = now - rclcpp::Duration(5, 0);\ntry {\n    t = tf_buffer_->lookupTransform(\n        toFrameRel,\n        now,\n        fromFrameRel,\n        when,\n        \"world\",\n        50ms);\n} catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package (Linux/macOS)\nDESCRIPTION: Builds the specific ROS 2 package 'learning_tf2_cpp' using the 'colcon build' command. This command should be executed from the root of the ROS 2 workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Defining setuptools installation directories in setup.cfg\nDESCRIPTION: Specifies configuration entries for the 'develop' and 'install' sections in setup.cfg to direct setuptools to install scripts/executables into the package-specific library directory, enabling ROS 2 to locate the executables properly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[develop]\nscript_dir=$base/lib/talker_py\n[install]\ninstall_scripts=$base/lib/talker_py\n```\n\n----------------------------------------\n\nTITLE: Publishing Address Book (with Contact) - C++\nDESCRIPTION: This C++ code snippet shows the implementation of a publisher that uses an array of `Contact` messages to create an address book. It populates the address book with example contacts and publishes the message. It requires the `rosidl_tutorials_msgs/msg/contact.hpp` header, the `AddressBook` message definition, and a correctly initialized ROS 2 node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\nauto publish_msg = [this]() -> void {\n       auto msg = std::make_shared<more_interfaces::msg::AddressBook>();\n       {\n         rosidl_tutorials_msgs::msg::Contact contact;\n         contact.first_name = \"John\";\n         contact.last_name = \"Doe\";\n         contact.phone_number = \"1234567890\";\n         contact.phone_type = message.PHONE_TYPE_MOBILE;\n         msg->address_book.push_back(contact);\n       }\n       {\n         rosidl_tutorials_msgs::msg::Contact contact;\n         contact.first_name = \"Jane\";\n         contact.last_name = \"Doe\";\n         contact.phone_number = \"4254242424\";\n         contact.phone_type = message.PHONE_TYPE_HOME;\n         msg->address_book.push_back(contact);\n       }\n\n       std::cout << \"Publishing address book:\" << std::endl;\n       for (auto contact : msg->address_book) {\n         std::cout << \"First:\" << contact.first_name << \"  Last:\" << contact.last_name <<\n           std::endl;\n       }\n\n       address_book_publisher_->publish(*msg);\n     };\n```\n\n----------------------------------------\n\nTITLE: Changing Namespace in ROS 2 via CLI Remapping Using Bash Commands\nDESCRIPTION: Shows how to change the namespace of a node in ROS 2 using the ros2 CLI with the remapping flag '-r' and the special remap key '__ns'. This replaces the ROS 1 '__ns' key but now requires the explicit '-r' flag. The example changes the namespace to '/new/namespace'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run some_package some_ros_executable --ros-args -r __ns:=/new/namespace\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Package Dependencies (Linux)\nDESCRIPTION: Uses the 'rosdep' tool to automatically install missing system dependencies for ROS 2 packages found in the 'src' directory of the workspace. This command targets a specific ROS distribution ({DISTRO}), ignores errors from already installed packages (-i), and confirms prompts automatically (-y).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Running a C++ talker - Bash\nDESCRIPTION: This command runs the C++ talker node from the demo_nodes_cpp package after setting up the ROS 2 environment. It publishes messages to a topic for other nodes to subscribe to.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Starting ROS 1 roscore\nDESCRIPTION: Command to source ROS 1 setup file and start the ROS 1 master (roscore).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Shell A:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nroscore\n```\n\n----------------------------------------\n\nTITLE: Configure ROS 2 Apt Source for Main (sh)\nDESCRIPTION: Reverts the modification to the ROS 2 apt source list file, changing it back to point to the main `ros2` repository. This command prepares the system to switch back from testing binaries to official release binaries. Requires root privileges to edit the file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndeb http://packages.ros.org/ros2/ubuntu noble main\n```\n\n----------------------------------------\n\nTITLE: Playing a bag and controlling with 'ros2 service'\nDESCRIPTION: This set of commands demonstrates how to play a bag file using `ros2 bag play` and control its playback using `ros2 service`. The first command starts playing a bag file named `my_bag`.  The subsequent `ros2 service` calls show interactions with the rosbag2 player services for pausing, resuming, checking pause state, setting rate, and changing the rate.  The first command must be run in one terminal, then service calls run in another.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# In one shell\n$ ros2 bag play my_bag\n\n# In another shell\n$ ros2 service list -t\n/rosbag2_player/get_rate [rosbag2_interfaces/srv/GetRate]\n/rosbag2_player/is_paused [rosbag2_interfaces/srv/IsPaused]\n/rosbag2_player/pause [rosbag2_interfaces/srv/Pause]\n/rosbag2_player/play_next [rosbag2_interfaces/srv/PlayNext]\n/rosbag2_player/resume [rosbag2_interfaces/srv/Resume]\n/rosbag2_player/set_rate [rosbag2_interfaces/srv/SetRate]\n/rosbag2_player/toggle_paused [rosbag2_interfaces/srv/TogglePaused]\n\n# Check if playback is paused\n$ ros2 service call /rosbag2_player/is_paused rosbag2_interfaces/IsPaused\n\n# Pause playback\n$ ros2 service call /rosbag2_player/pause rosbag2_interfaces/Pause\n\n# Resume playback\n$ ros2 service call /rosbag2_player/resume rosbag2_interfaces/Resume\n\n# Change the paused state of playback to its opposite. If playing, pauses. If paused, resumes.\n$ ros2 service call /rosbag2_player/toggle_paused rosbag2_interfaces/TogglePaused\n\n# Get the current playback rate\n$ ros2 service call /rosbag2_player/get_rate\n\n# Set the current playback rate (must be > 0)\n$ ros2 service call /rosbag2_player/set_rate rosbag2_interfaces/SetRate \"rate: 0.1\"\n\n# Play a single next message (only works while paused)\n$ ros2 service call /rosbag2_player/play_next rosbag2_interfaces/PlayNext\n```\n\n----------------------------------------\n\nTITLE: Defining a YAML Parameter File with Substitutions\nDESCRIPTION: This YAML code snippet shows a sample parameter file that utilizes launch substitutions. It defines a parameter named `launch_date` whose value is set using the `$(command date)` substitution. This substitution is evaluated at launch time, and the current date will be assigned to the parameter. This file is referenced in the Python and XML snippets.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n/**:\n  ros__parameters:\n    launch_date: $(command date)\n```\n\n----------------------------------------\n\nTITLE: Sourcing the Workspace for Interface Validation\nDESCRIPTION: Commands to source the workspace setup files depending on OS, enabling ROS2 nodes to recognize the newly built interfaces.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Rotating Turtle with Action Goal\nDESCRIPTION: This command sends a rotate_absolute goal to the turtlesim action server. The goal specifies a rotation of 1.57 radians. The command sends the goal and outputs the goal's ID, the result after completion, and potentially feedback if the action is still running. Dependencies: ROS2, turtlesim package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action send_goal /turtle1/rotate_absolute turtlesim_msgs/action/RotateAbsolute \"{theta: 1.57}\"\n```\n\n----------------------------------------\n\nTITLE: Running tf2_ros in a Namespace in Bash\nDESCRIPTION: Example showing how to run the tf2_echo tool with a namespace parameter, which now subscribes to /tf and /tf_static in the global namespace regardless of the node's namespace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nros2 run tf2_ros tf2_echo --ros-args -r __ns:=/test -- odom base_link\n```\n\n----------------------------------------\n\nTITLE: Handling Shutdown Events in a Python ROS 2 Launch File\nDESCRIPTION: This snippet shows how to use `RegisterEventHandler` with `OnShutdown` to perform actions when the launch system receives a shutdown request (e.g., from `EmitEvent(Shutdown())` or Ctrl+C). The `on_shutdown` parameter defines a list of actions, here just a `LogInfo` action that logs a message indicating the reason for the shutdown, obtained using `LocalSubstitution('event.reason')`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    on_launch_shutdown = RegisterEventHandler(\n        OnShutdown(\n            on_shutdown=[LogInfo(\n                msg=['Launch was asked to shutdown: ', LocalSubstitution('event.reason')])]\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Registering a ROS 2 Package with CMake\nDESCRIPTION: This CMake snippet defines the CMakeLists.txt file for the custom ROS 2 variant, enabling the package to be built and used within the ROS environment.  It specifies the minimum CMake version required, sets the project name, finds the ament_cmake package, and registers the current package as an ament package using `ament_package()`.  This is essential for enabling the ROS build system to detect and build the variant.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Variants.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\n\nproject(my_project_variant NONE)\nfind_package(ament_cmake REQUIRED)\nament_package()\n\n```\n\n----------------------------------------\n\nTITLE: Adding Entry Point in setup.py for a TF2 Static Transform Broadcaster\nDESCRIPTION: Python setup.py configuration line that registers the static_turtle_tf2_broadcaster node as an entry point. This enables running the node with the 'ros2 run' command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n'static_turtle_tf2_broadcaster = learning_tf2_py.static_turtle_tf2_broadcaster:main',\n```\n\n----------------------------------------\n\nTITLE: Creating Python Package with Node\nDESCRIPTION: Creates a new ROS2 Python package named 'my_package' with a simple 'Hello World' node called 'my_node' and sets the license to 'Apache-2.0'. Requires ROS2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_python --license Apache-2.0 --node-name my_node my_package\n```\n\n----------------------------------------\n\nTITLE: Run ros2doctor to Check ROS 2 Setup\nDESCRIPTION: This command executes the ros2doctor tool to perform a series of checks on the ROS 2 environment. It identifies potential issues related to platform, version, network, environment, and running systems. The command requires sourcing the ROS 2 environment beforehand. A successful check will return a message indicating all checks passed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 doctor\nAll <n> checks passed\n```\n\n----------------------------------------\n\nTITLE: Running Logger Service Demo\nDESCRIPTION: This command runs the `use_logger_service.py` demo node, which demonstrates the usage of the logger service in ROS 2. The service allows for dynamically configuring logger levels at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py use_logger_service\n```\n\n----------------------------------------\n\nTITLE: Logging a message once in ROS 2 nodes using C++\nDESCRIPTION: Logs an INFO level message only the first time the code location is hit in a ROS 2 C++ node. Both printf-style and stream-style macros are demonstrated using 'RCLCPP_INFO_ONCE' and 'RCLCPP_INFO_STREAM_ONCE' respectively. The logger is accessed via 'node->get_logger()'. This is useful for preventing log spam from repeated events.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// printf style\nRCLCPP_INFO_ONCE(node->get_logger(), \"My log message %d\", 4);\n\n// C++ stream style\nRCLCPP_INFO_STREAM_ONCE(node->get_logger(), \"My log message \" << 4);\n```\n\n----------------------------------------\n\nTITLE: Using push_ros_namespace for Namespace Management in ROS 2 Launch Files\nDESCRIPTION: Demonstrates how to handle namespaces in ROS 2 launch files using push_ros_namespace within a group tag, including absolute namespaces and node namespace specification.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<group>\n   <push_ros_namespace namespace=\"my_ns\"/>\n   <!--Nodes here are namespaced with \"my_ns\".-->\n   <!--If there is an include action here, its nodes will also be namespaced.-->\n   <push_ros_namespace namespace=\"another_ns\"/>\n   <!--Nodes here are namespaced with \"another_ns/my_ns\".-->\n   <push_ros_namespace namespace=\"/absolute_ns\"/>\n   <!--Nodes here are namespaced with \"/absolute_ns\".-->\n   <!--The following node receives an absolute namespace, so it will ignore the others previously pushed.-->\n   <!--The full path of the node will be /asd/my_node.-->\n   <node pkg=\"my_pkg\" exec=\"my_executable\" name=\"my_node\" ns=\"/asd\"/>\n</group>\n<!--Nodes outside the group action won't be namespaced.-->\n```\n\n----------------------------------------\n\nTITLE: Generating Timestamps and Writing Data in a Loop for ROS 2 Bag (C++)\nDESCRIPTION: This code snippet shows how to generate sequential timestamps and write multiple data messages to a ROS 2 bag in a tight loop. It uses rclcpp::Clock to obtain the initial time and increments it by 1 second in each iteration, writing a new Int32 message each time. Dependencies: rclcpp, rosbag2_cpp, example_interfaces. Limitation: The loop's pace is not tied to wall clock; generation is as fast as possible.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nrclcpp::Clock clock;\nrclcpp::Time time_stamp = clock.now();\nfor (int32_t ii = 0; ii < 100; ++ii) {\n  writer_->write(data, \"synthetic\", time_stamp);\n  ++data.data;\n  time_stamp += rclcpp::Duration(1s);\n}\n```\n\n----------------------------------------\n\nTITLE: Launching a ROS 2 Listener Node with Discovery Server\nDESCRIPTION: Launch a listener node that uses the Discovery Server for node discovery instead of the default multicast mechanism.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp listener --ros-args --remap __node:=listener_discovery_server\n```\n\n----------------------------------------\n\nTITLE: Running rosdep (Linux)\nDESCRIPTION: This command runs rosdep to install missing dependencies. The command is intended for Linux systems only.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Echoing ROS2 Action Communication (bash)\nDESCRIPTION: This bash command demonstrates how to use `ros2 action echo` to inspect the communication between the client and the `/fibonacci` action server during playback. This allows users to see the goal requests and server responses in real-time.\n\nRequires the ROS2 environment and the `ros2` command-line tool to be installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nros2 action echo --flow-style /fibonacci\n```\n\n----------------------------------------\n\nTITLE: Playing ROS 2 Bag File\nDESCRIPTION: Plays back messages from a specified ROS 2 bag directory. The bag must exist at the given path. Messages will be published on the topics contained within the bag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nros2 bag play my_bag\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 logger service endpoints using Bash\nDESCRIPTION: Shows the output of 'ros2 service list' after a node with logger service enabled is running. It lists the 'get_logger_levels' and 'set_logger_levels' services exposed by the node, which allow runtime querying and setting of logger levels.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 service list\n...\n/NodeWithLoggerService/get_logger_levels\n/NodeWithLoggerService/set_logger_levels\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 package for bag recording\nDESCRIPTION: Command to create a new ROS 2 package with necessary dependencies for implementing a bag recorder node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 bag_recorder_nodes --dependencies example_interfaces rclcpp rosbag2_cpp std_msgs\n```\n\n----------------------------------------\n\nTITLE: Adding ROSIDL Dependencies in package.xml for Message Generation and Runtime\nDESCRIPTION: The snippet adds required build and execution dependencies for ROS interface generation and runtime support inside package.xml. It declares buildtool_depend on rosidl_default_generators, an exec_depend on rosidl_default_runtime, and membership in the rosidl_interface_packages group to enable proper message generation and runtime linking.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n <buildtool_depend>rosidl_default_generators</buildtool_depend>\n <exec_depend>rosidl_default_runtime</exec_depend>\n <member_of_group>rosidl_interface_packages</member_of_group>\n```\n\n----------------------------------------\n\nTITLE: Run Logging Demo with Specific Logger Level\nDESCRIPTION: This command runs the `logging_demo_main` executable from the `logging_demo` package, configuring the severity level for the logger named `logger_usage_demo` to `debug` using command line arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nros2 run logging_demo logging_demo_main --ros-args --log-level logger_usage_demo:=debug\n```\n\n----------------------------------------\n\nTITLE: Code block with syntax highlighting in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create a code block with C++ syntax highlighting in reStructuredText. The code must be indented.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_22\n\nLANGUAGE: rst\nCODE:\n```\n.. code-block:: C++\n\n   int main(int argc, char** argv)\n   {\n      rclcpp::init(argc, argv);\n      rclcpp::spin(std::make_shared<ParametersClass>());\n      rclcpp::shutdown();\n      return 0;\n   }\n```\n\n----------------------------------------\n\nTITLE: ROS 1 Package Directory Structure - Bash\nDESCRIPTION: This bash command displays the directory structure of the ROS 1 talker package, showing the location of the package.xml, CMakeLists.txt, and talker.cpp files within the src/talker directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/ros1_talker\n$ find .\n.\n./src\n./src/talker\n./src/talker/package.xml\n./src/talker/CMakeLists.txt\n./src/talker/talker.cpp\n```\n\n----------------------------------------\n\nTITLE: Installing Fast DDS Build Dependencies using rosdep in Bash\nDESCRIPTION: Installs system dependencies required to build Fast DDS and its RMW layer from source using `rosdep`. It operates from the root of the ROS 2 workspace (`ros2_ws`) and checks dependencies listed in the `package.xml` files within the `src` directory. Assumes the current directory is the workspace root (`ros2_ws`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncd ..\nrosdep install --from src -i\n```\n\n----------------------------------------\n\nTITLE: Python launch script defining launch configurations and spawn actions\nDESCRIPTION: The Python script initializes launch configurations for namespace and background color, declares launch arguments, and creates nodes and process actions. It uses LaunchConfiguration objects to dynamically pass arguments, and executes commands conditionally based on evaluated expressions. This script enables flexible, parameter-driven launch setups for turtlesim.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: launch/example_substitutions_launch.py\n  :language: python\n  :lines: 13-24\n```\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: launch/example_substitutions_launch.py\n  :language: python\n  :lines: 26-31\n```\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: launch/example_substitutions_launch.py\n  :language: python\n  :lines: 32-41\n```\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: launch/example_substitutions_launch.py\n  :language: python\n  :lines: 42-67\n```\n\n----------------------------------------\n\nTITLE: Launching and Configuring Service Introspection Demo (Console, ROS 2)\nDESCRIPTION: This sequence launches the ROS 2 demo for service introspection, then enables introspection on client and server via parameter setting commands. Required: ROS 2 demo_nodes_cpp package, introspect_services_launch.py, and parameter configuration permissions. Preparing the system for observing service-level message exchange (as shown in echo demo).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch demo_nodes_cpp introspect_services_launch.py\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set /introspection_service service_configure_introspection contents\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set /introspection_client client_configure_introspection contents\n```\n\n----------------------------------------\n\nTITLE: Adding Server Executable in CMakeLists.txt\nDESCRIPTION: Adds a build rule to CMakeLists.txt to create an executable named 'server' from the source file src/add_two_ints_server.cpp. It then links this executable against the required libraries: rclcpp and the generated targets for the example_interfaces package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_9\n\nLANGUAGE: Console\nCODE:\n```\nadd_executable(server src/add_two_ints_server.cpp)\ntarget_link_libraries(server PUBLIC rclcpp::rclcpp ${example_interfaces_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: Defining Point2D Message Structure\nDESCRIPTION: This code defines the structure of a custom message type named `Point2D`.  It includes a header for frame information and float64 values for the x and y coordinates of a point. This message is used in the custom RViz display plugin.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n   std_msgs/Header header\n   float64 x\n   float64 y\n```\n\n----------------------------------------\n\nTITLE: Setting Build Type in package.xml\nDESCRIPTION: Sets the build type to ament_cmake in the export section of package.xml, indicating that this package uses the ament_cmake build system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<export>\n   <build_type>ament_cmake</build_type>\n</export>\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Information (C++)\nDESCRIPTION: This snippet defines a function `node_info` that accepts a shared pointer to a `rclcpp::Node` and prints the node's name using its logger.  It shows a basic approach to accessing node information that works for `rclcpp::Node` but has limitations with other node types.  The `RCLCPP_INFO` macro is used to log the node's name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Using-Node-Interfaces-Template-Class.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <memory>\n#include \"rclcpp/rclcpp.hpp\"\n\nvoid node_info(rclcpp::Node::SharedPtr node)\n{\n  RCLCPP_INFO(node->get_logger(), \"Node name: %s\", node->get_name());\n}\n\nclass SimpleNode : public rclcpp::Node\n{\npublic:\n  SimpleNode(const std::string & node_name)\n  : Node(node_name)\n  {\n  }\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  auto node = std::make_shared<SimpleNode>(\"Simple_Node\");\n  node_info(*node);\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Implementation of ROS 2 Ping Client\nDESCRIPTION: Code for a ROS 2 client node that sends a Trigger service request to the ping service and waits for the response, with appropriate error handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"example_interfaces/srv/trigger.hpp\"\n\nusing namespace std::chrono_literals;\n\nint main(int argc, char **argv)\n{\n    rclcpp::init(argc, argv);\n\n    // Create the node and the client\n    std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared(\"ping_client\");\n    rclcpp::Client<example_interfaces::srv::Trigger>::SharedPtr client =\n        node->create_client<example_interfaces::srv::Trigger>(\"ping\");\n\n    // Create a request\n    auto request = std::make_shared<example_interfaces::srv::Trigger::Request>();\n\n    // Wait for the service to be available\n    while (!client->wait_for_service(1s)) {\n        if (!rclcpp::ok()) {\n            RCLCPP_ERROR(rclcpp::get_logger(\"ping_client\"), \"Interrupted while waiting for the service. Exiting.\");\n            return 0;\n        }\n        RCLCPP_INFO(rclcpp::get_logger(\"ping_client\"), \"Service not available, waiting again...\");\n    }\n\n    // Now that the service is available, send the request\n    RCLCPP_INFO(rclcpp::get_logger(\"ping_client\"), \"Sending request\");\n    auto result = client->async_send_request(request);\n\n    // Wait for the result and log it to the console\n    if (rclcpp::spin_until_future_complete(node, result) ==\n        rclcpp::FutureReturnCode::SUCCESS)\n    {\n        RCLCPP_INFO(rclcpp::get_logger(\"ping_client\"), \"Response received\");\n    } else {\n        RCLCPP_ERROR(rclcpp::get_logger(\"ping_client\"), \"Failed to call service ping\");\n    }\n\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Node Restart with ROS 2 Launch Event Handler (Python)\nDESCRIPTION: Illustrates how to use a `RegisterEventHandler` with an `OnProcessExit` event in a ROS 2 launch file to restart multiple nodes when the main robot driver exits (due to Webots reset). The handler monitors the `robot_driver` and executes a specified function (`get_ros2_control_spawners`) upon its exit, relaunching the nodes defined within that function. This is useful for restarting related nodes like `ros2_control` spawners alongside the driver.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_ros2_control_spawners(*args):\n    # Declare here all nodes that must be restarted at simulation reset\n    ros_control_node = Node(\n        package='controller_manager',\n        executable='spawner',\n        arguments=['diffdrive_controller']\n    )\n    return [\n        ros_control_node\n    ]\n\ndef generate_launch_description():\n    robot_driver = WebotsController(\n        robot_name='my_robot',\n        parameters=[\n            {'robot_description': robot_description_path}\n        ],\n\n        # Every time one resets the simulation the controller is automatically respawned\n        respawn=True\n    )\n\n    # Starts Webots\n    webots = WebotsLauncher(world=PathJoinSubstitution([package_dir, 'worlds', world]))\n\n    # Declare the reset handler that respawns nodes when robot_driver exits\n    reset_handler = launch.actions.RegisterEventHandler(\n        event_handler=launch.event_handlers.OnProcessExit(\n            target_action=robot_driver,\n            on_exit=get_ros2_control_spawners,\n        )\n    )\n\n    return LaunchDescription([\n        webots,\n        robot_driver,\n        reset_handler\n    ] + get_ros2_control_spawners())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Bag Recorder Node in C++\nDESCRIPTION: Complete C++ implementation of a node that subscribes to the 'chatter' topic and records received messages to a bag file using rosbag2_cpp Writer API.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <rclcpp/rclcpp.hpp>\n#include <std_msgs/msg/string.hpp>\n\n#include <rosbag2_cpp/writer.hpp>\n\nclass SimpleBagRecorder : public rclcpp::Node\n{\npublic:\n  SimpleBagRecorder()\n  : Node(\"simple_bag_recorder\")\n  {\n    writer_ = std::make_unique<rosbag2_cpp::Writer>();\n\n    writer_->open(\"my_bag\");\n\n    auto subscription_callback_lambda = [this](std::shared_ptr<rclcpp::SerializedMessage> msg){\n      rclcpp::Time time_stamp = this->now();\n\n      writer_->write(msg, \"chatter\", \"std_msgs/msg/String\", time_stamp);\n    };\n\n    subscription_ = create_subscription<std_msgs::msg::String>(\n      \"chatter\", 10, subscription_callback_lambda);\n  }\n\nprivate:\n\n  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;\n  std::unique_ptr<rosbag2_cpp::Writer> writer_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<SimpleBagRecorder>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting parameters for a ROS 2 node via command line\nDESCRIPTION: Commands to list and set parameters for a running ROS 2 node using the ROS 2 param command-line tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\nros2 param list\n```\n\nLANGUAGE: Shell\nCODE:\n```\nros2 param set /minimal_param_node my_parameter earth\n```\n\n----------------------------------------\n\nTITLE: Implementing Obstacle Avoidance in C++\nDESCRIPTION: A C++ ROS 2 node that performs the same obstacle avoidance functionality as the Python version. It subscribes to sensor topics and publishes velocity commands to navigate the robot away from obstacles.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// ObstacleAvoider.hpp - Header file for the C++ obstacle avoider node\n// Full code in ObstacleAvoider.hpp\n```\n\nLANGUAGE: C++\nCODE:\n```\n// ObstacleAvoider.cpp - Implementation of the obstacle avoider node\n\n// Publisher and subscriber setup\nObstacleAvoider::ObstacleAvoider() : Node(\"obstacle_avoider\") {\n  // Initialize member variables\n  left_sensor_value = 0.0;\n\n  // Create a publisher on the \"cmd_vel\" topic\n  command_publisher = create_publisher<geometry_msgs::msg::Twist>(\"/cmd_vel\", 1);\n\n  // Create the first subscription\n  left_sensor_subscriber = create_subscription<sensor_msgs::msg::Range>(\n    \"left_sensor\", 1,\n    std::bind(&ObstacleAvoider::left_sensor_callback, this, std::placeholders::_1));\n\n  // Create the second subscription\n  right_sensor_subscriber = create_subscription<sensor_msgs::msg::Range>(\n    \"right_sensor\", 1,\n    std::bind(&ObstacleAvoider::right_sensor_callback, this, std::placeholders::_1));\n}\n\n// Left sensor callback\nvoid ObstacleAvoider::left_sensor_callback(const sensor_msgs::msg::Range::SharedPtr message) {\n  left_sensor_value = message->range;\n}\n\n// Right sensor callback with obstacle avoidance logic\nvoid ObstacleAvoider::right_sensor_callback(const sensor_msgs::msg::Range::SharedPtr message) {\n  auto command_message = std::make_unique<geometry_msgs::msg::Twist>();\n\n  // Move forward\n  command_message->linear.x = 0.15;\n\n  // Avoid obstacles\n  if (left_sensor_value < 0.9 || message->range < 0.9) {\n    // Increase rotation to the right\n    command_message->angular.z = -1.0;\n  }\n\n  // Publish the command\n  command_publisher->publish(std::move(command_message));\n}\n```\n\n----------------------------------------\n\nTITLE: Building a ROS2 Python package\nDESCRIPTION: Commands to build a ROS2 package named 'python_parameters' using colcon, with different syntax for Linux/macOS and Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select python_parameters\n```\n\n----------------------------------------\n\nTITLE: Initializing Launch with Substitutions\nDESCRIPTION: This Python snippet demonstrates how to use launch substitutions in parameter files when launching a ROS 2 node.  It imports the necessary launch and launch_ros modules, defines a launch description, and then creates a Node action. The Node action is configured to read parameters from a YAML file, with `allow_substs` set to `True` to enable substitution evaluation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport launch\nimport launch_ros.parameter_descriptions\nimport launch_ros.actions\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch_ros.actions.Node(\n            package='demo_nodes_cpp',\n            executable='parameter_blackboard',\n            parameters=[\n                launch_ros.parameter_descriptions.ParameterFile(\n                    param_file='parameter_file_with_substitutions.yaml',\n                    allow_substs=True)\n            ]\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Replacing `<run_depend>` with Format 2 Tags\nDESCRIPTION: Provides the format 2 replacements for the deprecated `<run_depend>` tag for a dependency 'foo'. Use `<exec_depend>` if the dependency is needed at runtime, and `<build_export_depend>` if downstream packages need it during their build. Both can be used if unsure.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<build_export_depend>foo</build_export_depend>\n<exec_depend>foo</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Echoing Action Data\nDESCRIPTION: This command echoes the action data using the ros2 action echo command.  It requires action introspection to be enabled, which is disabled by default, so a client and server need to be configured to enable it.  Dependencies: ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action echo <action_name> <optional arguments/action_type>\n```\n\n----------------------------------------\n\nTITLE: Starting ROS 2 Tracing Session - ros2 trace - Console\nDESCRIPTION: Changes directory to the ROS 2 workspace and sources its setup script. Initiates a tracing session named `perf-test` using the `ros2 trace` command. The `--list` flag prints a list of available ROS 2 userspace events before starting the trace upon pressing Enter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncd ~/tracing_ws\nsource install/setup.bash\nros2 trace --session-name perf-test --list\n```\n\n----------------------------------------\n\nTITLE: Add Exec Dependencies to package.xml (XML)\nDESCRIPTION: This XML snippet shows how to add execution dependencies to the `package.xml` file for a ROS 2 package. It includes dependencies on the `launch` and `launch_ros` packages, which are required to run the launch file created for the demo.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<exec_depend>launch</exec_depend>\n<exec_depend>launch_ros</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Updating CMakeLists.txt for Launch Directory Installation\nDESCRIPTION: CMake configuration to install the launch directory to the appropriate location in the ROS2 package share directory, ensuring launch files are available when the package is installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ninstall(\n  DIRECTORY launch\n  DESTINATION share/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: ROS 1 Parameter YAML File Format Example\nDESCRIPTION: This snippet illustrates a simple example of a ROS 1 parameters YAML file containing flat key-value pairs for parameters like lidar name, ID, port list, and a debug flag. It demonstrates the older flat structure without node names, which is incompatible with ROS 2’s per-node parameter organization.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlidar_name: foo\nlidar_id: 10\nports: [11312, 11311, 21311]\ndebug: true\n```\n\n----------------------------------------\n\nTITLE: Building the ROS 2 talker_py Package (Console)\nDESCRIPTION: Platform-specific commands to build the `ros2_talker_py` ROS 2 package using `colcon build`. This requires navigating to the workspace directory (`~/ros2_talker_py` or `\\ros2_talker_py`) and sourcing the appropriate ROS 2 environment setup script (`setup.bash` or `local_setup.bat`) before running the build command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\ncd ~/ros2_talker_py\n. /opt/ros/{DISTRO}/setup.bash\ncolcon build\n```\n\nLANGUAGE: bash\nCODE:\n```\n# macOS\ncd ~/ros2_talker_py\n. /opt/ros/{DISTRO}/setup.bash\ncolcon build\n```\n\nLANGUAGE: batch\nCODE:\n```\nREM Windows\ncd \\ros2_talker_py\ncall C:\\dev\\ros2\\local_setup.bat\ncolcon build\n```\n\n----------------------------------------\n\nTITLE: Setting logging output directory using environment variables in Bash\nDESCRIPTION: Explains how to configure the logging directory for ROS 2 logs using environment variables 'ROS_LOG_DIR' and 'ROS_HOME' on various operating systems. Examples include setting 'ROS_LOG_DIR' to a custom path or setting 'ROS_HOME' which affects the log subdirectory path. Commands illustrate export syntax for Linux/macOS and set syntax for Windows. This controls where log files are stored.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nexport ROS_LOG_DIR=~/my_logs\nros2 run logging_demo logging_demo_main\n```\n\nLANGUAGE: Bash\nCODE:\n```\nexport ROS_HOME=~/my_ros_home\nros2 run logging_demo logging_demo_main\n```\n\nLANGUAGE: Bash\nCODE:\n```\nset \"ROS_LOG_DIR=~/my_logs\"\nros2 run logging_demo logging_demo_main\n```\n\nLANGUAGE: Bash\nCODE:\n```\nset \"ROS_HOME=~/my_ros_home\"\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Disabling ROS 2 Service Introspection (Bash)\nDESCRIPTION: This bash command uses the `ros2 param set` tool to change the `service_configure_introspection` parameter of the `/introspection_service` node to `disabled`. This turns off service introspection for the server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 param set /introspection_service service_configure_introspection disabled\n```\n\n----------------------------------------\n\nTITLE: Inspecting detailed information about an action\nDESCRIPTION: Provides a summary of the action's client and server nodes, illustrating the communication pattern and endpoints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action info /turtle1/rotate_absolute\n```\n\n----------------------------------------\n\nTITLE: Building ROS2 Package with Colcon - Windows\nDESCRIPTION: Command to build a specific ROS2 package named 'cpp_parameters' using colcon on Windows systems, with the merge-install option enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --merge-install --packages-select cpp_parameters\n```\n\n----------------------------------------\n\nTITLE: Setting Log Levels with ros2 run Bash\nDESCRIPTION: This snippet demonstrates how to set log levels for specific nodes and loggers using the `--log-level` option in the `ros2 run` command. The command configures different log levels for a talker node and its messages.  Requires ROS 2 environment to be set up.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --log-level WARN --log-level talker:=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Using the Events Executor in rclcpp C++\nDESCRIPTION: This C++ snippet shows how to instantiate and use the experimental EventsExecutor in rclcpp, which enables event-driven subscription and timer callbacks for nodes. The executor is created, a node is added, and the spin method is called to process events. The code assumes rclcpp-experimental is available, and users should note that EventsExecutor is in the experimental namespace, meaning API/ABI stability is not guaranteed. Requires including the relevant header and linking against rclcpp_experimental; node must be a valid rclcpp node instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <rclcpp/experimental/executors/events_executor/events_executor.hpp>\nusing rclcpp::experimental::executors::EventsExecutor;\n\nEventsExecutor executor;\nexecutor.add_node(node);\nexecutor.spin();\n\n```\n\n----------------------------------------\n\nTITLE: Run turtlesim Teleop Key Node\nDESCRIPTION: This command starts the turtle_teleop_key node, which allows controlling the turtlesim turtle using keyboard input. It requires sourcing the ROS 2 environment beforehand. This node publishes velocity commands based on the key presses.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Echoing ROS2 Topic in Console to Verify Data Output\nDESCRIPTION: Uses the 'ros2 topic echo' command on the '/synthetic' topic to print messages published on this topic to the console. This allows users to observe the recorded and played-back data in real-time at the rate it was originally generated (one message per second), aiding in data verification and debugging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /synthetic\n```\n\n----------------------------------------\n\nTITLE: Publishing feedback during Fibonacci sequence computation\nDESCRIPTION: This snippet illustrates publishing ongoing feedback to the action client during computation by periodically sending the current sequence state, thereby enabling clients to monitor progress in real-time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(2, order):\n    sequence.append(sequence[i-1] + sequence[i-2])\n    feedback = Fibonacci.Feedback()\n    feedback.sequence = sequence[:]\n    goal_handle.publish_feedback(feedback)\n    time.sleep(0.5)\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode Command Line Tools and Accepting License in Bash\nDESCRIPTION: These Bash commands install the Xcode Command Line Tools, switch the active Xcode developer directory, and accept the Xcode license agreement. Requires Xcode.app to be pre-installed in /Applications/Xcode.app. The commands modify system state and may need sudo privileges. Expected output includes prompts for license acceptance and confirmation of tool installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n# This command will not succeed if you have not installed Xcode.app\nsudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n# If you installed Xcode.app manually, you need to either open it or run:\nsudo xcodebuild -license\n# To accept the Xcode.app license\n```\n\n----------------------------------------\n\nTITLE: Building ROS2 Package with Colcon - Linux/macOS\nDESCRIPTION: Command to build a specific ROS2 package named 'cpp_parameters' using colcon on Linux or macOS systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select cpp_parameters\n```\n\n----------------------------------------\n\nTITLE: Suppressed warnings when building with older Qt versions.\nDESCRIPTION: This suppresses warnings that may occur when building the software with older Qt versions. Dependencies depend on the specific Qt version and its compatibility with the rviz code base.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Executing Traffic Generation Bash Script\nDESCRIPTION: Runs the bash script with the path to ROS2 setup script to generate network traffic trace for either simple discovery or discovery server based on the second argument. Uses 'sudo' due to network packet capturing requirements, depending on system configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo bash generate_discovery_packages.bash ~/ros2/install/local_setup.bash\n$ sudo bash generate_discovery_packages.bash ~/ros2/install/local_setup.bash SERVER\n```\n\n----------------------------------------\n\nTITLE: Setting Timer Interface for TF2 Buffer in ROS 2 Eloquent (C++)\nDESCRIPTION: This C++ code illustrates the correct construction of a TF2 buffer in ROS 2 Eloquent, demonstrating the requirement to provide a timer interface using tf2_ros::CreateTimerROS. Attempting to use a Buffer instance without assigning a timer interface will cause an exception. Dependencies include ROS 2 Eloquent, tf2_ros, and rclcpp. The snippet creates shared pointers to Buffer and timer interface objects, links them, and then passes the Buffer to a TransformListener. Inputs include clock and node interface pointers, while the output is an initialized TF2 transform listener ready for timed operations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Eloquent-Elusor.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\ntf = std::make_shared<tf2_ros::Buffer>(get_clock());\n// The next two lines are new in Eloquent\nauto timer_interface = std::make_shared<tf2_ros::CreateTimerROS>(\n  this->get_node_base_interface(),\n  this->get_node_timers_interface());\ntf->setCreateTimerInterface(timer_interface);\n// Pass the Buffer to the TransformListener as before\ntransform_listener = std::make_shared<tf2_ros::TransformListener>(*tf);\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal ROS 2 Variant (package.xml)\nDESCRIPTION: This XML snippet defines the structure of a package.xml file for a minimal ROS 2 variant.  It specifies the package name, version, description, maintainer information, license, dependencies (exec_depend), and build type (ament_cmake). The `exec_depend` tags declare dependencies on other ROS packages.  The file is crucial for informing the ROS build system of the dependencies and metadata of the custom variant.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Variants.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"2\">\n  <name>my_project_variant</name>\n  <version>1.0.0</version>\n  <description>A package to aggregate all packages in my_project.</description>\n  <maintainer email=\"maintainer-email\">Maintainer Name</maintainer>\n  <license>Apache-2.0</license>\n  <!-- packages in my_project -->\n  <exec_depend>my_project_msgs</exec_depend>\n  <exec_depend>my_project_services</exec_depend>\n  <exec_depend>my_project_examples</exec_depend>\n\n  <export>\n    <build_type>ament_cmake</build_type>\n  </export>\n</package>\n\n```\n\n----------------------------------------\n\nTITLE: Running the Bag Recorder Node\nDESCRIPTION: Command to run the bag recorder node after building and sourcing the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run bag_recorder_nodes simple_bag_recorder\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files Into Package-Specific Include Directory in CMake\nDESCRIPTION: Installs header files by copying the contents of the 'include' directory into the appropriate location under 'include/${PROJECT_NAME}' in the install space. This organization supports overlay workspaces in colcon and enables downstream clients to find headers correctly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  DIRECTORY include/\n  DESTINATION include/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Top-Level Launch File Structure in Python\nDESCRIPTION: This Python launch file serves as the top-level entry point, including other launch files that correspond to subcomponents of the application. It launches two turtlesim simulation worlds, TF broadcaster, TF listener, mimic, fixed frame broadcaster, and RViz nodes. It uses `IncludeLaunchDescription` to incorporate other launch files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch.actions import IncludeLaunchDescription\nfrom launch.launch_description_sources import PythonLaunchDescriptionSource\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nimport os\n\ndef generate_launch_description():\n\n    return LaunchDescription([\n        IncludeLaunchDescription(\n            PythonLaunchDescriptionSource([os.path.join(\n                get_package_share_directory('launch_tutorial'), 'launch'),\n                '/turtlesim_world_1_launch.py'])\n        ),\n        IncludeLaunchDescription(\n            PythonLaunchDescriptionSource([os.path.join(\n                get_package_share_directory('launch_tutorial'), 'launch'),\n                '/turtlesim_world_2_launch.py'])\n        ),\n        Node(\n            package='tf2_ros',\n            executable='static_transform_publisher',\n            name='static_transform_publisher',\n            output='log',\n            arguments=['0', '0', '0', '0', '0', '0', 'world', 'turtle1']\n        ),\n        Node(\n            package='turtle_tf2_py',\n            executable='turtle_tf2_broadcaster',\n            name='turtle_tf2_broadcaster1',\n            output='log',\n            prefix = 'xterm -e',\n        ),\n        Node(\n            package='turtle_tf2_py',\n            executable='turtle_tf2_listener',\n            name='turtle_tf2_listener1',\n            output='log',\n        ),\n        Node(\n            package='turtle_tf2_py',\n            executable='fixed_frame_tf2_broadcaster',\n            name='fixed_frame_tf2_broadcaster',\n            output='log',\n        ),\n        Node(\n            package='topic_tools',\n            executable='relay',\n            name='relay',\n            output='log',\n            arguments=['/turtle1/pose', '/turtle2/pose']\n        ),\n        Node(\n            package='rviz2',\n            executable='rviz2',\n            name='rviz2',\n            output='log',\n            arguments=['-d', [os.path.join(get_package_share_directory('launch_tutorial'), 'config', 'turtlesim.rviz')]]\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Publish message with pointer - C++\nDESCRIPTION: This code snippet shows how to publish message using the `->` operator in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n//    chatter_pub.publish(msg);\n    chatter_pub->publish(msg);\n```\n\n----------------------------------------\n\nTITLE: Updating package.xml Metadata\nDESCRIPTION: Updates the package description, maintainer information, and license in the package manifest file (package.xml) to provide standard package metadata.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<description>C++ parameter events client tutorial</description>\n  <maintainer email=\"you@email.com\">Your Name</maintainer>\n  <license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Creating a C++ ROS2 Package using Command Line\nDESCRIPTION: This command creates a C++ ROS 2 package, specifying the build type as 'ament_cmake'. It includes setting the license and dependencies. The package name and dependencies should be replaced with the desired values.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create  --build-type ament_cmake --license Apache-2.0 <pkg-name> --dependencies [deps]\n```\n\n----------------------------------------\n\nTITLE: Responding with Final Fibonacci Result Using ROS 2 RESULT_SERVICE (YAML)\nDESCRIPTION: These YAML snippets represent the result service interactions, where the FibonacciActionServer sends the final result to the client, and the client receives it via the RESULT_SERVICE interface. Each message includes metadata such as event_type, timing, and an explicit result object with the computed sequence, providing traceability for result communication. The status attribute indicates the success outcome, and the result structure makes these messages suitable for introspection and debugging in ROS 2 action flows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: RESULT_SERVICE\ninfo:\n  event_type: RESPONSE_SENT\n  stamp:\n    sec: 1742070807\n    nanosec: 402339670\n  client_gid: [1, 15, 165, 231, 194, 197, 167, 157, 0, 0, 0, 0, 0, 0, 24, 4]\n  sequence_number: 1\nrequest: []\nresponse: [{status: 4, result: {sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}}]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: RESULT_SERVICE\ninfo:\n  event_type: RESPONSE_RECEIVED\n  stamp:\n    sec: 1742070807\n    nanosec: 402698784\n  client_gid: [1, 15, 165, 231, 194, 197, 167, 157, 0, 0, 0, 0, 0, 0, 24, 4]\n  sequence_number: 1\nrequest: []\nresponse: [{status: 4, result: {sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]}}]\n\n```\n\n----------------------------------------\n\nTITLE: Sample Error Messages for Unsupported Symbol Visibility in Console\nDESCRIPTION: Displays example compiler and CMake error messages that may occur on Windows when symbols are not correctly exported from a shared library. These errors illustrate common problems encountered when migrating Linux-built libraries to Windows without proper symbol visibility control.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nerror C2448: '__attribute__': function-style initializer appears to be a function definition\n'visibility': identifier not found\n```\n\nLANGUAGE: console\nCODE:\n```\nCMake Error at C:/ws_ros2/install/random_numbers/share/random_numbers/cmake/ament_cmake_export_libraries-extras.cmake:48 (message):\n  Package 'random_numbers' exports the library 'random_numbers' which\n  couldn't be found\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package (Windows)\nDESCRIPTION: Builds the specific ROS 2 package named 'learning_tf2_cpp' using the 'colcon' build tool on Windows. The '--merge-install' option is recommended on Windows to avoid potential path length issues by installing all packages into a single merged directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --merge-install --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Checking Homebrew System Configuration in Bash\nDESCRIPTION: Runs 'brew doctor' to assess the Homebrew installation's health and detect potential issues with system configuration. Prerequisite: Homebrew should be installed. Outputs system diagnostic messages and suggestions for resolving detected problems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew doctor\n```\n\n----------------------------------------\n\nTITLE: Echo ROS 2 Topic\nDESCRIPTION: This command echoes the messages published on the specified ROS 2 topic. It requires sourcing the ROS 2 environment before execution. Replace `/turtle1/color_sensor` or `/turtle1/pose` with the topic you wish to monitor. Press Ctrl+C to stop echoing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /turtle1/color_sensor\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /turtle1/pose\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard - CMake\nDESCRIPTION: This CMake snippet sets the C++ standard to C++17. This is a required change for ROS 2 interface packages. This sets the compiler to use a more modern version of the C++ standard, ensuring compatibility with ROS 2 features and libraries.  It needs to be set in `CMakeLists.txt`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Interfaces.rst#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Building the ROS 2 Package (Windows/WSL)\nDESCRIPTION: Shell command `colcon build` executed within a Windows Subsystem for Linux (WSL) environment to build the ROS 2 workspace containing the `my_package`. Subsequent sourcing and launching steps are implied but not shown.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\n```\n\n----------------------------------------\n\nTITLE: Visualizing tf2 Frame Tree with view_frames\nDESCRIPTION: Runs the 'view_frames' tool from the 'tf2_tools' package. It listens to tf2 transform data broadcast over ROS 2 for 5 seconds and generates a PDF file named 'frames.pdf' depicting the hierarchy and connections between coordinate frames. Note: This tool is primarily available on Linux.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run tf2_tools view_frames\nListening to tf data during 5 seconds...\nGenerating graph in frames.pdf file...\n```\n\n----------------------------------------\n\nTITLE: Adding ROS 2 Setup to macOS shell profile\nDESCRIPTION: This command adds the sourcing of the ROS 2 setup script to your `~/.bash_profile` to automate environment setup upon terminal startup on macOS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"source ~/ros2_install/ros2-osx/setup.bash\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Configuring package.xml for TF2 Node\nDESCRIPTION: Example snippet of a `package.xml` file, highlighting the essential metadata tags: `description`, `maintainer`, and `license`. For this specific tutorial package (`learning_tf2_py`), dependencies on `geometry_msgs`, `rclpy`, `tf2_ros_py`, and `turtlesim` should also be declared within `<exec_depend>` or `<depend>` tags (not shown).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<description>Learning tf2 with rclpy</description>\n<maintainer email=\"you@email.com\">Your Name</maintainer>\n<license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Running Turtlesim Nodes via ROS 2 Console\nDESCRIPTION: These commands start the turtlesim simulation and the turtle teleoperation node in separate terminals, initializing the ROS 2 example environment. Requires ROS 2 installed and sourced, and the turtlesim package available. No additional parameters are needed; these are preparatory commands for the hands-on exercises.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Using Properties in XML\nDESCRIPTION: This XML snippet shows how properties are used in xacro files. Properties are accessed using the `${}` syntax inside XML attributes. Properties can be combined with other text.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<xacro:property name=\"robotname\" value=\"marvin\" />\n<link name=\"${robotname}s_leg\" />\n```\n\n----------------------------------------\n\nTITLE: Expected Output for ROS2 Python Publisher\nDESCRIPTION: Sample terminal output indicating the publisher node is publishing incrementing integers, confirming correct message broadcast frequency and content.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [minimal_publisher]: Publishing: '0'\n[INFO] [minimal_publisher]: Publishing: '1'\n[INFO] [minimal_publisher]: Publishing: '2'\n```\n\n----------------------------------------\n\nTITLE: Enabling Topic Statistics (C++)\nDESCRIPTION: This snippet demonstrates the explicit enabling of topic statistics using `rclcpp::TopicStatisticsState::Enable`. It shows the core functionality of setting up the topic statistics within the subscriber. The configuration can specify the publish period and the topic name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// manually enable topic statistics via options\nauto options = rclcpp::SubscriptionOptions();\noptions.topic_stats_options.state = rclcpp::TopicStatisticsState::Enable;\n```\n\n----------------------------------------\n\nTITLE: Example Message Filter Node Output\nDESCRIPTION: Shows example console output from the `turtle_tf2_message_filter` node. Each line indicates a successful transformation, displaying the coordinates of `turtle3` relative to the `turtle1` frame at a specific time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_22\n\nLANGUAGE: Console\nCODE:\n```\n[INFO] [1630016162.006173900] [turtle_tf2_pose_drawer]: Point of turtle3 in frame of turtle1: x:-6.493231 y:-2.961614 z:0.000000\n\n[INFO] [1630016162.006291983] [turtle_tf2_pose_drawer]: Point of turtle3 in frame of turtle1: x:-6.472169 y:-3.004742 z:0.000000\n\n[INFO] [1630016162.006326234] [turtle_tf2_pose_drawer]: Point of turtle3 in frame of turtle1: x:-6.479420 y:-2.990479 z:0.000000\n\n[INFO] [1630016162.006355644] [turtle_tf2_pose_drawer]: Point of turtle3 in frame of turtle1: x:-6.486441 y:-2.976102 z:0.000000\n```\n\n----------------------------------------\n\nTITLE: Running Executables with the executable Tag in ROS 2 Launch Files\nDESCRIPTION: Demonstrates how to run any executable using the executable tag in ROS 2 launch files, including command parameters, working directory, environment variables, and output configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<executable cmd=\"ls -las\" cwd=\"/var/log\" name=\"my_exec\" launch-prefix=\"something\" output=\"screen\" shell=\"true\">\n   <env name=\"LD_LIBRARY\" value=\"/lib/some.so\"/>\n</executable>\n```\n\n----------------------------------------\n\nTITLE: Installing Launch Files in CMake for ROS2 C++\nDESCRIPTION: This CMake command installs launch files from the 'launch' directory to the 'share' directory of the package.  ${PROJECT_NAME} is a CMake variable that represents the name of the project, in this case, the ROS2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Install launch files\ninstall(\n  DIRECTORY launch\n  DESTINATION share/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Components using ros2\nDESCRIPTION: This code demonstrates passing parameters to a node during its construction using the `ros2 component load` command with the `-p` option.  The parameter name and value are specified. The functionality requires the component to support parameters. The result is the component loading with the specified parameter values.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager image_tools image_tools::Cam2Image -p burger_mode:=true\n```\n\n----------------------------------------\n\nTITLE: Add ViewPicker::get3DPatch to the public API\nDESCRIPTION: This change exposes `ViewPicker::get3DPatch` to the public API. This extends the public interface of the `ViewPicker` class, making its functionality accessible to external components. There are no specific dependencies mentioned.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Running Talker Example: bash\nDESCRIPTION: This is a bash command to verify the proper functionality of the ROS 2 installation, specifically the C++ talker node. It first sources the setup file to configure the environment, and then executes the C++ talker example using the `ros2 run` command. This requires sourcing the setup file beforehand.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/ros2-linux/setup.bash\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Node Under GDB with --prefix Option\nDESCRIPTION: This bash command demonstrates launching a ROS 2 node via ros2 run using the --prefix option to insert GDB with the -ex run --args flags. This sets up the debugging environment with all ROS setup intact. Prerequisites: ROS 2 workspace sourced, GDB installed. Inputs: <pkg> and <node> (the package and executable to run), plus any additional launch arguments. Output: GDB session attached to the node process, ready to fetch stack traces. Limitations: Ensure --prefix is used to avoid environment issues present in direct GDB invocation of ros2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run --prefix 'gdb -ex run --args' <pkg> <node> --all-other-launch arguments\n```\n\n----------------------------------------\n\nTITLE: Playing Back the Recorded Bag\nDESCRIPTION: Command to play back the bag file that was recorded by the custom node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play my_bag\n```\n\n----------------------------------------\n\nTITLE: Implementing Obstacle Avoidance in Python\nDESCRIPTION: A Python ROS 2 node that subscribes to distance sensor topics and publishes velocity commands to avoid obstacles. It controls the robot to move forward until obstacles are detected, at which point it turns to avoid collision.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Full code in obstacle_avoider.py\n\n# Publisher and subscriber setup\nself.command_publisher = self.create_publisher(Twist, '/cmd_vel', 1)\nself.left_sensor_subscriber = self.create_subscription(\n    Range, 'left_sensor', self.left_sensor_callback, 1)\nself.right_sensor_subscriber = self.create_subscription(\n    Range, 'right_sensor', self.right_sensor_callback, 1)\n\n# Left sensor callback\ndef left_sensor_callback(self, message):\n    self.left_sensor_value = message.range\n\n# Right sensor callback with obstacle avoidance logic\ndef right_sensor_callback(self, message):\n    command_message = Twist()\n    # Move forward\n    command_message.linear.x = 0.15\n    # Avoid obstacles\n    if self.left_sensor_value < 0.9 or message.range < 0.9:\n        # Increase rotation to the right\n        command_message.angular.z = -1.0\n    # Publish the command\n    self.command_publisher.publish(command_message)\n```\n\n----------------------------------------\n\nTITLE: Defining a Fast DDS Publisher Profile in XML\nDESCRIPTION: Shows the start of an XML snippet for defining a Fast DDS publisher profile specifically for the ROS 2 topic named `/async_topic`. This profile allows customization of QoS settings, like limiting matched subscribers, for publishers associated with this topic name within the `SyncAsync.xml` configuration file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<!-- publisher profile for topic async_topic -->\n<publisher profile_name=\"/async_topic\">\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 C++ Test Executable with GDB\nDESCRIPTION: Launches GDB directly on a compiled C++ test executable located in the build directory. The `-ex run` argument tells GDB to immediately execute the test program upon starting. The environment must be sourced beforehand (see previous snippet).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngdb -ex run ./build/rcl/test/test_logging\n```\n\n----------------------------------------\n\nTITLE: Remapping Arguments Targeting Specific Nodes in Composed ROS2 Processes - Console\nDESCRIPTION: Illustrates passing remapping arguments to named nodes within a multicomponent process, targeting nodes by name prefixing the remapping flag. This is used when multiple nodes run inside a single executable, such as when using composition. The example shows remapping node names and topic names by specifying the node prefix before the remapping flag. Node and namespace changes are applied before topic remapping. Dependencies include ability to run multicomponent ROS2 executables and specifying correct node names.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run composition manual_composition --ros-args -r talker:__node:=my_talker -r listener:__node:=my_listener\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run composition manual_composition --ros-args -r talker:__node:=my_talker -r my_talker:chatter:=my_topic -r listener:__node:=my_listener -r my_listener:chatter:=my_topic\n```\n\n----------------------------------------\n\nTITLE: Building Custom Debian Package with Bloom and Fakeroot (Bash)\nDESCRIPTION: This Bash sequence performs the steps to build a ROS 2 package into a Debian package. The process involves changing to the source package directory (which must contain package.xml), generating Debian packaging files with bloom-generate, and running the fakeroot debian/rules binary command to build the binary package. All required dependencies must be available for a successful build, and outputs appear in the parent directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-a-Custom-Deb-Package.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/pkg_source  # this should be the directory that contains the package.xml\n```\n\nLANGUAGE: bash\nCODE:\n```\nbloom-generate rosdebian\n```\n\nLANGUAGE: bash\nCODE:\n```\nfakeroot debian/rules binary\n```\n\n----------------------------------------\n\nTITLE: Defining a Sphere Link for the Robot Head using URDF - XML\nDESCRIPTION: This XML snippet demonstrates how to define a spherical link intended as a robot head in a URDF file. It uses the <sphere> geometry with a specified 'radius' parameter and assigns a <material> for coloring. Requires the URDF XML format and referenced materials to be available. Inputs include the desired name of the link and radius; output is a new visually distinct sphere link, which can be referenced by joints elsewhere in the robot model. This snippet assumes the material 'white' has been defined elsewhere in the URDF.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<link name=\"head\">\n  <visual>\n    <geometry>\n      <sphere radius=\"0.2\"/>\n    </geometry>\n    <material name=\"white\"/>\n  </visual>\n</link>\n\n```\n\n----------------------------------------\n\nTITLE: Building a Specific ROS 2 Package Using colcon (Linux/macOS/Windows Console)\nDESCRIPTION: Builds the ROS 2 package named 'learning_tf2_cpp' from the workspace using colcon, selecting only that package to reduce build time. The Windows command includes the --merge-install flag for unified installation layout. This is performed after dependencies are installed and environment is prepared.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select learning_tf2_cpp\n```\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --merge-install --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Rebuilding ROS 2 Package (colcon)\nDESCRIPTION: Uses `colcon` to rebuild the `python_parameter_event_handler` package after code modifications. This step is necessary to incorporate the changes made to the `SampleNodeWithParameters` class for monitoring a remote parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select python_parameter_event_handler\n```\n\n----------------------------------------\n\nTITLE: Describing QoS Policy Values\nDESCRIPTION: This code block details the various QoS policy options that can be overridden using YAML.  It includes examples of history, depth, reliability, durability, deadline, lifespan, liveliness, liveliness_lease_duration and avoid_ros_namespace_conventions settings.  These values are used within the override YAML file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhistory: [keep_all, keep_last]\ndepth: int\nreliability: [system_default, reliable, best_effort, unknown]\ndurability: [system_default, transient_local, volatile, unknown]\ndeadline:\n  sec: int\n  nsec: int\nlifespan:\n  sec: int\n  nsec: int\nliveliness: [system_default, automatic, manual_by_topic, unknown]\nliveliness_lease_duration:\n  sec: int\n  nsec: int\navoid_ros_namespace_conventions: [true, false]\n```\n\n----------------------------------------\n\nTITLE: Cloning Example ROS 2 Packages - Console\nDESCRIPTION: Downloads the ROS 2 examples repository into the src/examples directory of your workspace using git. This provides sample packages to build and run. Replace {REPOS_FILE_BRANCH} with the correct branch for your setup. Requires git to be installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/ros2/examples src/examples -b {REPOS_FILE_BRANCH}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Message Field Assertions Per-Message in ROS 2 (Python)\nDESCRIPTION: Illustrates enabling assertions for field types on a single ROS 2 Python message instance using the constructor's 'check_fields' argument. Requires 'std_msgs.msg.String'. Passing 'check_fields=True' validates field assignments at runtime for this instance only. Input is optional boolean constructor argument; output is a message instance with runtime assertion checking enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom std_msgs.msg import String\n\nnew_message=String(check_fields=True)\n```\n\n----------------------------------------\n\nTITLE: Recording Topics using 'ros2 bag record'\nDESCRIPTION: This command-line snippet demonstrates how to record ROS 2 topics using `ros2 bag record`. This command splits the bag file by time, creating chunks of 100 seconds each.  The `--all` option indicates all topics should be recorded. The  `--max-bag-duration` option specifies the maximum duration of each bag file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record --all --max-bag-duration 100\n```\n\n----------------------------------------\n\nTITLE: Updating build type in package.xml\nDESCRIPTION: This snippet updates the build type in the package.xml file to specify the build system used in ROS 2 for pure Python packages. This is a necessary step in migrating a package to ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<export>\n  <build_type>ament_python</build_type>\n</export>\n```\n\n----------------------------------------\n\nTITLE: Updating Message, Service, and Action Includes for ROS 2 C++\nDESCRIPTION: This snippet describes how to modify include statements for ROS 2 message types, replacing direct include paths with the subnamespace pattern, changing 'h' headers to 'hpp', and updating the namespace usage accordingly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\n// ROS 1 style is in comments, ROS 2 follows, uncommented.\n// # include <geometry_msgs/PointStamped.h>\n# include <geometry_msgs/msg/point_stamped.hpp>\n\n// geometry_msgs::PointStamped point_stamped;\ngeometry_msgs::msg::PointStamped point_stamped;\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Launch File from the Console - Console\nDESCRIPTION: This snippet details shell commands to change to the launch directory and execute a ROS 2 launch file using ros2 launch. The file can be in XML, YAML, or Python format, and ROS 2 must be properly sourced in the terminal. Prerequisites: ROS 2 environment sourced, launch file prepared, and all referenced packages installed. The user is expected to provide the proper launch file extension (xml, yaml, py) depending on chosen format. Outputs are the spawned nodes as described in the launch file. Limitation: commands must be executed from the correct directory or specify absolute paths.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd launch\n$ ros2 launch turtlesim_mimic_launch.xml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd launch\n$ ros2 launch turtlesim_mimic_launch.yaml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd launch\n$ ros2 launch turtlesim_mimic_launch.py\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate MutuallyExclusive Callback Group - C++\nDESCRIPTION: This snippet creates a MutuallyExclusive callback group and assigns it to the client callback group (`client_cb_group_`). The timer callback group (`timer_cb_group_`) is set to `nullptr`, meaning the timer will not use a specific callback group and will default to the node's default callback group (typically mutually exclusive).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nclient_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\ntimer_cb_group_ = nullptr;\n```\n\n----------------------------------------\n\nTITLE: Set Persistent rmem_max Kernel Parameter - Linux Config\nDESCRIPTION: This configuration line placed in `/etc/sysctl.d/10-cyclone-max.conf` persistently sets the `net.core.rmem_max` kernel parameter to 2147483647 bytes (2GB). This provides a permanent solution for Cyclone DDS large message reliability issues by increasing the maximum socket receive buffer size.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnet.core.rmem_max=2147483647\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test with RT Priority - Sudo - Console\nDESCRIPTION: Executes the `performance_test` application using `sudo` to allow setting a real-time priority. Configures a test with one publisher (`-p 1`), one subscriber (`-s 1`), zero requested samples (`-r 0`), using 1MB array messages (`-m Array1m`), reliable reliability (`--reliability RELIABLE`), running for 60 seconds (`--max-runtime 60`), and setting real-time priority to 98 (`--use-rt-prio 98`). Uses a single-threaded RCLCPP executor.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nsudo ./install/performance_test/lib/performance_test/perf_test -c rclcpp-single-threaded-executor -p 1 -s 1 -r 0 -m Array1m --reliability RELIABLE --max-runtime 60 --use-rt-prio 98\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 Node Daemon Information (Console)\nDESCRIPTION: This snippet demonstrates how to use the 'ros2 node list' command to show the daemon's RMW implementation. This is useful when the daemon is running and the user needs to verify the daemon is using the correct RMW implementation.  The example illustrates Fast DDS being used.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node list\n```\n\n----------------------------------------\n\nTITLE: Launching Encrypted ROS 2 Talker and Listener Nodes via Bash\nDESCRIPTION: This snippet illustrates how to run ROS 2 nodes with security enabled on different machines to achieve encrypted and authenticated communication. The talker node is launched on machine Bob and the listener node on machine Alice with ROS 2 command line arguments specifying enclaves for security contexts. Dependencies include ROS 2 installed nodes 'demo_nodes_cpp' and 'demo_nodes_py' and pre-configured keystores on the respective machines. The inputs are no additional runtime parameters, and the outputs are encrypted and authenticated messages sent from Bob to Alice. This enables secure multi-machine interactions within ROS 2 environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Security-on-Two.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker\n```\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py listener --ros-args --enclave /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Declaring Python Documentation Dependency with `<doc_depend>`\nDESCRIPTION: Provides an example of declaring a documentation dependency for Python packages, specifically Sphinx (via `python3-sphinx`), using the `<doc_depend>` tag available in `package.xml` format 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<doc_depend>python3-sphinx</doc_depend>\n```\n\n----------------------------------------\n\nTITLE: New Texture Fields in visualization_msgs/Marker Message\nDESCRIPTION: Details the three new fields (`texture_resource`, `texture`, `uv_coordinates`) added to the `visualization_msgs/Marker` message to support applying textures. It explains how `texture_resource` uses URIs (including `embedded://`) and how `texture` holds the image data for embedded resources.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n# Texture resource is a special URI that can either reference a texture file in\n# a format acceptable to (resource retriever)[https://index.ros.org/p/resource_retriever/]\n# or an embedded texture via a string matching the format:\n#   \"embedded://texture_name\"\nstring texture_resource\n# An image to be loaded into the rendering engine as the texture for this marker.\n# This will be used iff texture_resource is set to embedded.\nsensor_msgs/CompressedImage texture\n# Location of each vertex within the texture; in the range: [0.0-1.0]\nUVCoordinate[] uv_coordinates\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Parameter Blackboard Node Console Command\nDESCRIPTION: This snippet shows the console command to run the ROS 2 demo node called parameter_blackboard, which acts as a dedicated node to mimic a global parameter server in ROS 2. The command uses the ROS 2 run tool to execute the demo node from the demo_nodes_cpp package. It requires ROS 2 to be installed and sourced properly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Parameters.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp parameter_blackboard\n```\n\n----------------------------------------\n\nTITLE: Adding Visualization Elements (header)\nDESCRIPTION: This section describes changes to header file to include rviz_rendering and add a new protected virtual method and a shape object.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include <rviz_rendering/objects/shape.hpp>\n\n  protected:\n    void onInitialize() override;\n  \n  std::unique_ptr<rviz_rendering::Shape> point_shape_;\n```\n\n----------------------------------------\n\nTITLE: Loading message from standard input\nDESCRIPTION: This enhancement adds functionality to load a message, request, or goal from standard input, allowing for greater flexibility in providing data to the `ros2action` and other ros2 related command line tools. Requires the message format to be compatible.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Disable Console Output Colorization (Linux/macOS)\nDESCRIPTION: This command sets the `RCUTILS_COLORIZED_OUTPUT` environment variable to `0` to disable colorized output, then runs `logging_demo_main`. This applies to Linux and macOS systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nexport RCUTILS_COLORIZED_OUTPUT=0  # 1 for forcing it\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Setting Fast DDS XML Env Vars for Subscriber (Windows)\nDESCRIPTION: Sets environment variables on Windows to use the `rmw_fastrtps_cpp` implementation, enable loading QoS settings from an XML file (`RMW_FASTRTPS_USE_QOS_FROM_XML=1`), and specify the path to the XML configuration file (`FASTRTPS_DEFAULT_PROFILES_FILE`). These are required before running the subscriber node to ensure it uses the same custom Fast DDS configurations as the publisher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ SET RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n$ SET RMW_FASTRTPS_USE_QOS_FROM_XML=1\n$ SET FASTRTPS_DEFAULT_PROFILES_FILE=path/to/SyncAsync.xml\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Wildcard Parameters\nDESCRIPTION: This YAML configuration file utilizes wildcard characters (`/**`) to apply parameters to all nodes, regardless of their names and namespaces.  It sets the `background_b`, `background_g`, and `background_r` parameters for all nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n/**:\n   ros__parameters:\n      background_b: 255\n      background_g: 86\n      background_r: 150\n```\n\n----------------------------------------\n\nTITLE: Logging informational messages through ROS 2 node's logger instead of rospy.loginfo in Python\nDESCRIPTION: Replaces rospy.loginfo calls with calling info() on the node's logger object to publish informational log messages complying with ROS 2 logging APIs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nnode.get_logger().info(hello_str.data)\n```\n\n----------------------------------------\n\nTITLE: Running RViz 2 with ROS 2\nDESCRIPTION: This command launches the RViz 2 visualizer using the ros2 run command.  This assumes that the ROS 2 environment has been properly sourced. It starts the RViz application for visualizing robot data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-User-Guide/RViz-User-Guide.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rviz2 rviz2\n```\n\n----------------------------------------\n\nTITLE: Running a C++ Talker\nDESCRIPTION: This snippet first sources the environment setup script and then executes the C++ talker demo node. This is a demonstration of the built ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/install/local_setup.bash\n   ros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Publishing Velocity Command to turtlesim2 Node - Shell\nDESCRIPTION: This shell command publishes a Twist message to the /turtlesim2/turtle1/cmd_vel topic using ros2 topic pub, targeting the second turtle node. It requires an active ROS 2 system, geometry_msgs package, and the relevant turtlesim node. The message specification controls the turtle's velocities, with the angular.z value set to -1.8 for movement in the opposite direction. The expected output is that turtlesim2's turtle moves as commanded.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ros2 topic pub  /turtlesim2/turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -1.8}}\"\n```\n\n----------------------------------------\n\nTITLE: SimpleNode and LifecycleTalker Class Definitions (C++)\nDESCRIPTION: This snippet contains the class definitions for `SimpleNode` (a standard `rclcpp::Node`) and `LifecycleTalker` (a `rclcpp_lifecycle::LifecycleNode`). These classes are used in the examples to demonstrate the usage of node interfaces with different node types. The `LifecycleTalker` includes an option for intra-process communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Using-Node-Interfaces-Template-Class.rst#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nclass SimpleNode : public rclcpp::Node\n{\npublic:\n  SimpleNode(const std::string & node_name)\n  : Node(node_name)\n  {\n  }\n};\n\nclass LifecycleTalker : public rclcpp_lifecycle::LifecycleNode\n{\npublic:\n  explicit LifecycleTalker(const std::string & node_name, bool intra_process_comms = false)\n  : rclcpp_lifecycle::LifecycleNode(node_name,\n      rclcpp::NodeOptions().use_intra_process_comms(intra_process_comms))\n  {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URDF with Xacro in a Python Launch File\nDESCRIPTION: This code shows how to integrate xacro into a ROS 2 launch file, automatically generating the URDF. It uses the Command substitution and the robot_state_publisher node to process the xacro file specified by the path_to_urdf variable.  The result is then passed as the 'robot_description' parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npath_to_urdf = get_package_share_path('turtlebot3_description') / 'urdf' / 'turtlebot3_burger.urdf'\nrobot_state_publisher_node = launch_ros.actions.Node(\n    package='robot_state_publisher',\n    executable='robot_state_publisher',\n    parameters=[{\n        'robot_description': ParameterValue(\n            Command(['xacro ', str(path_to_urdf)]), value_type=str\n        )\n    }]\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Msg 'Num' in Python Publisher\nDESCRIPTION: Sample Python publisher code using the custom message 'Num' from 'tutorial_interfaces' to publish integer data periodically.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nimport rclpy.node\nfrom tutorial_interfaces.msg import Num  # Custom message\n\nclass MinimalPublisher(rclpy.node.Node):\n\n    def __init__(self):\n        super().__init__('minimal_publisher')\n```\n\n----------------------------------------\n\nTITLE: Initializing ament_cmake Project in CMakeLists.txt Using CMake\nDESCRIPTION: Defines the basic project setup for aament_cmake packages in ROS 2. It declares the minimum CMake version, names the project matching the package.xml, and calls ament_package() once to configure the package build environment, install metadata, and register the package with the ament index. ament_package() should be the last call in CMakeLists.txt to collect all build information.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.8)\nproject(my_project)\n\nament_package()\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Publisher with Matched Subscribers Allocation\nDESCRIPTION: XML profile for a publisher with asynchronous publish mode and limited matched subscribers to a maximum of one.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_17\n\nLANGUAGE: XML\nCODE:\n```\n<historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n<qos>\n    <publishMode>\n        <kind>ASYNCHRONOUS</kind>\n    </publishMode>\n</qos>\n<matchedSubscribersAllocation>\n    <initial>0</initial>\n    <maximum>1</maximum>\n    <increment>1</increment>\n</matchedSubscribersAllocation>\n```\n\n----------------------------------------\n\nTITLE: Send Multicast Message with ROS2\nDESCRIPTION: This snippet shows how to send a multicast message using ROS2's multicast tools. It's used in conjunction with the 'ros2 multicast receive' command to test multicast functionality. Successful communication verifies proper network configuration for ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 multicast send\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites: apt\nDESCRIPTION: This snippet installs the necessary prerequisites for the binary ROS 2 installation using the apt package manager.  It installs common utilities for package management. It requires sudo privileges. The command utilizes `apt install` to install 'tar', 'bzip2', and 'wget' packages, along with the '-y' flag to automatically confirm installations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install tar bzip2 wget -y\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Listener Node\nDESCRIPTION: This command executes the example ROS 2 `listener` node from the `demo_nodes_py` package, which subscribes to the 'chatter' topic and prints received messages. This is used to verify that the `simple_bag_reader` node is successfully publishing data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Memory Resource Class Using std::pmr in C++\nDESCRIPTION: Defines a skeleton for a custom memory resource class by deriving from std::pmr::memory_resource. This class declares the required override functions: do_allocate for allocating memory with a specified byte size and alignment, do_deallocate for freeing memory with the same parameters, and do_is_equal to compare memory resource equality. Dependencies include the C++17 <memory_resource> header. The snippet serves as a base for building a real-time friendly allocator compatible with the ROS 2 allocator interface.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nclass CustomMemoryResource : public std::pmr::memory_resource\n{\nprivate:\n  void * do_allocate(std::size_t bytes, std::size_t alignment) override;\n\n  void do_deallocate(\n    void * p, std::size_t bytes,\n    std::size_t alignment) override;\n\n  bool do_is_equal(\n    const std::pmr::memory_resource & other) const noexcept override;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Inertial Properties in URDF\nDESCRIPTION: This XML snippet shows how to add inertial properties to a link element within a URDF file. These properties include mass and the inertia tensor, which are crucial for accurate physics simulation. Dependencies include the URDF standard and physics engine support. The mass is in kilograms, and the inertia tensor is a 3x3 matrix specified using ixx, ixy, ixz, iyy, iyz, and izz.  The output is a URDF file containing inertia information for the specified link.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Adding-Physical-and-Collision-Properties-to-a-URDF-Model.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <link name=\"base_link\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n      <material name=\"blue\">\n        <color rgba=\"0 0 .8 1\"/>\n      </material>\n    </visual>\n    <collision>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n    </collision>\n    <inertial>\n      <mass value=\"10\"/>\n      <inertia ixx=\"1e-3\" ixy=\"0.0\" ixz=\"0.0\" iyy=\"1e-3\" iyz=\"0.0\" izz=\"1e-3\"/>\n    </inertial>\n  </link>\n```\n\n----------------------------------------\n\nTITLE: Creating an Overlay with Custom ROS 2 Packages from GitHub - Bash\nDESCRIPTION: This snippet demonstrates Dockerfile steps for creating an overlay workspace and importing custom ROS 2 packages from a GitHub repository via vcs. It assumes Dockerfile context, a valid value for OVERLAY_WS, and access to vcs and GitHub. The key parameters are OVERLAY_WS (path to the overlay workspace) and the repository information in the 'overlay.repos' file. The output is a populated src/ directory containing the cloned sources, enabling further dependency installation and building.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nARG OVERLAY_WS\nWORKDIR $OVERLAY_WS/src\nRUN echo \"\\\nrepositories: \\n\\\n  ros2/demos: \\n\\\n    type: git \\n\\\n    url: https://github.com/ros2/demos.git \\n\\\n    version: ${ROS_DISTRO} \\n\\\n\" > ../overlay.repos\nRUN vcs import ./ < ../overlay.repos\n```\n\n----------------------------------------\n\nTITLE: Adding rosdoc2 to package.xml (XML)\nDESCRIPTION: This snippet demonstrates how to add a line in the ``package.xml`` file that informs the build system to use the ``rosdoc2.yaml`` file to configure the build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <package>\n        <!-- [...] -->\n        <export>\n            <!-- [...] -->\n            <rosdoc2>rosdoc2.yaml</rosdoc2>\n        </export>\n    </package>\n```\n\n----------------------------------------\n\nTITLE: Reindexing a bag file with 'ros2 bag reindex'\nDESCRIPTION: This command-line snippet shows how to use `ros2 bag reindex`. The command reconstructs the `metadata.yaml` file from the bag files within a given directory (`$bag_dir`). This is useful when the metadata file is missing or corrupted.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag reindex $bag_dir\n```\n\n----------------------------------------\n\nTITLE: Building, Sourcing, and Running the ROS 2 Package via Console Commands\nDESCRIPTION: This console snippet illustrates the commands needed to build the urdf_tutorial_cpp ROS 2 package using colcon, source the workspace overlay, launch the package using ros2 launch, and finally run Rviz2 to visualize the robot based on the provided rviz configuration file. It emphasizes environment setup per OS (Linux/macOS/Windows) and proper use of launch files and rviz configs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-cpp.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --symlink-install --packages-select urdf_tutorial_cpp\n\n# Linux/macOS\n$ source install/setup.bash\n\n# Windows\n$ call install/setup.bat\n\n$ ros2 launch urdf_tutorial_cpp launch.py\n\n$ rviz2 -d install/urdf_tutorial_cpp/share/urdf_tutorial_cpp/urdf/r2d2.rviz\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Client Node with Custom QoS\nDESCRIPTION: Executes a ROS2 client node with custom QoS settings loaded from an XML file. The client is configured to use asynchronous publication mode.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_28\n\nLANGUAGE: console\nCODE:\n```\nros2 run sync_async_node_example_cpp ping_client\n```\n\n----------------------------------------\n\nTITLE: Building the ROS2 Package using colcon\nDESCRIPTION: Shows the `colcon build` command used to compile and build the specified ROS2 package (`learning_tf2_py`). The `--packages-select` argument targets only this package. The Windows version includes `--merge-install`, which is often recommended on that platform to avoid potential path length issues during installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n# Linux / macOS\n$ colcon build --packages-select learning_tf2_py\n```\n\nLANGUAGE: console\nCODE:\n```\n# Windows\n$ colcon build --merge-install --packages-select learning_tf2_py\n```\n\n----------------------------------------\n\nTITLE: Adding a Google Test with ament_add_gtest in CMake\nDESCRIPTION: Illustrates the basic usage of the `ament_add_gtest` macro to define a Google Test target. It requires finding the `ament_cmake_gtest` package first and specifies the test target name (`some_test`) and the source files (`<test_sources>`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake_gtest)\nament_add_gtest(some_test <test_sources>)\n```\n\n----------------------------------------\n\nTITLE: Echo Service Communication Events Using ros2 CLI (Console, YAML, ROS 2)\nDESCRIPTION: This command displays the real-time request and response events exchanged between a service client and server, with structured output in YAML style. It must be used after enabling service introspection for the service/client pair. Outputs categorized event information, including request/response data and metadata. Only works for introspection-enabled services.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service echo --flow-style /add_two_ints\n info:\n   event_type: REQUEST_SENT\n   stamp:\n     sec: 1709408301\n     nanosec: 423227292\n   client_gid: [1, 15, 0, 18, 250, 205, 12, 100, 0, 0, 0, 0, 0, 0, 21, 3]\n   sequence_number: 618\n request: [{a: 2, b: 3}]\n response: []\n ---\n info:\n   event_type: REQUEST_RECEIVED\n   stamp:\n     sec: 1709408301\n     nanosec: 423601471\n   client_gid: [1, 15, 0, 18, 250, 205, 12, 100, 0, 0, 0, 0, 0, 0, 20, 4]\n   sequence_number: 618\n request: [{a: 2, b: 3}]\n response: []\n ---\n info:\n   event_type: RESPONSE_SENT\n   stamp:\n     sec: 1709408301\n     nanosec: 423900744\n   client_gid: [1, 15, 0, 18, 250, 205, 12, 100, 0, 0, 0, 0, 0, 0, 20, 4]\n   sequence_number: 618\n request: []\n response: [{sum: 5}]\n ---\n info:\n   event_type: RESPONSE_RECEIVED\n   stamp:\n     sec: 1709408301\n     nanosec: 424153133\n   client_gid: [1, 15, 0, 18, 250, 205, 12, 100, 0, 0, 0, 0, 0, 0, 21, 3]\n   sequence_number: 618\n request: []\n response: [{sum: 5}]\n ---\n```\n\n----------------------------------------\n\nTITLE: Using Math Expressions in Xacro\nDESCRIPTION: This XML demonstrates the use of math expressions within xacro. It shows how to use basic arithmetic operations, unary minus, and parenthesis inside the `${}` construct. This allows for dynamic calculations of values in URDF files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<cylinder radius=\"${wheeldiam/2}\" length=\"0.1\"/>\n<origin xyz=\"${reflect*(width+.02)} 0 0.25\" />\n```\n\n----------------------------------------\n\nTITLE: Declaring Test Dependencies with `<test_depend>` (Format 2)\nDESCRIPTION: Shows the correct way to declare a dependency ('testfoo') needed for building or running tests in `package.xml` format 2, using the `<test_depend>` tag. This replaces the potential misuse of `<build_depend>` for test dependencies in format 1.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<test_depend>testfoo</test_depend>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with colcon - Windows Console\nDESCRIPTION: Runs all available tests on a Windows ROS 2 workspace with colcon, using --merge-install for consistent install layout. Execute from the same environment as the build, typically a Visual Studio Command Prompt. Reports test results at the end of execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncolcon test --merge-install\n\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment Setup on Linux - console\nDESCRIPTION: Sources the setup.bash file to configure the current shell environment for ROS 2 package usage on Linux systems. Prepares environment variables so installed packages and dependencies are available for execution. Requires prior successful build; must run within the ros2_ws directory or provide an absolute path.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsource install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services for Deployment Example (Bash)\nDESCRIPTION: Executes the Docker Compose setup defined in `compose.deployment.yaml` using `docker compose up -f`. This command starts the containers defined as services: one for initializing the keystore and two simulating deployed, secure ROS 2 nodes (listener and talker). Requires Docker and the Docker Compose plugin.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Start the example\ndocker compose -f compose.deployment.yaml up\n```\n\n----------------------------------------\n\nTITLE: Building a Timed Service Client with rclpy and Callback Groups (Python)\nDESCRIPTION: This snippet provides a Python client node using rclpy which sends periodic service requests to 'test_service' through a timer. The CallbackGroupDemo class shows how to assign callback groups (initially None) to the service client and timer, which by default puts both in the node's mutually exclusive group. The timer triggers the client call every second and logs the request and response. Dependencies include rclpy, std_srvs, and appropriate callback group classes. This setup serves as a basis for demonstrating callback group deadlocks and their resolution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException, MultiThreadedExecutor\nfrom rclpy.callback_groups import MutuallyExclusiveCallbackGroup, ReentrantCallbackGroup\nfrom rclpy.node import Node\nfrom std_srvs.srv import Empty\n\nclass CallbackGroupDemo(Node):\n    def __init__(self):\n        super().__init__('client_node')\n\n        client_cb_group = None\n        timer_cb_group = None\n        self.client = self.create_client(Empty, 'test_service', callback_group=client_cb_group)\n        self.call_timer = self.create_timer(1, self._timer_cb, callback_group=timer_cb_group)\n\n    def _timer_cb(self):\n        self.get_logger().info('Sending request')\n        _ = self.client.call(Empty.Request())\n        self.get_logger().info('Received response')\n\nif __name__ == '__main__':\n    try:\n        with rclpy.init():\n            node = CallbackGroupDemo()\n            executor = MultiThreadedExecutor()\n            executor.add_node(node)\n\n            node.get_logger().info('Beginning client, shut down with CTRL-C')\n            executor.spin()\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: rosbag2 compression and serialization extension updates\nDESCRIPTION: Covers version management, header installation, bug fixes, and trait management improvements for rosbag2 compression plugins, specifically focusing on Zstandard compression. Ensures proper plugin configuration and compatibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n* Bump version number to avoid conflict\\n* Install headers to include/${PROJECT_NAME} (\\#958 <https://github.com/ros2/rosbag2/issues/958>)\\n* Remove unnecessary public definition. (\\#950 <https://github.com/ros2/rosbag2/issues/950>)\\n* Changes for uncrustify 0.72 (\\#937 <https://github.com/ros2/rosbag2/issues/937>)\\n* Bugfix for broken bag split when using cache (\\#936 <https://github.com/ros2/rosbag2/issues/936>)\\n* Update package maintainers (\\#899 <https://github.com/ros2/rosbag2/issues/899>)\\n* Don't preprocess a storage file more than once (\\#895 <https://github.com/ros2/rosbag2/issues/895>)\\n* added seek interface (\\#836 <https://github.com/ros2/rosbag2/issues/836>)\\n* Refactor plugin query mechanism and standardize trait management (\\#833 <https://github.com/ros2/rosbag2/issues/833>)\\n* fix sequential reader rollover-to-next-file strategy: (\\#839 <https://github.com/ros2/rosbag2/issues/839>)\n```\n\n----------------------------------------\n\nTITLE: Launching ROS2 Node with Parameter Set in Launch File\nDESCRIPTION: Command to launch a ROS2 node using a launch file that includes parameter settings. This launches the cpp_parameters_launch.py file from the cpp_parameters package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch cpp_parameters cpp_parameters_launch.py\n```\n\n----------------------------------------\n\nTITLE: Make the types explicit in quaternion_helper.hpp.\nDESCRIPTION: This improves the code's clarity and maintainability within `quaternion_helper.hpp` by making the types explicit. This reduces ambiguity and helps prevent type-related errors. Dependencies are not specified but the header file is from rviz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Implementing the Custom RViz Panel Plugin - C++\nDESCRIPTION: Implements the DemoPanel class functions. Sets up the constructor/destructor and exports the plugin with pluginlib macros so RViz can load it. Dependencies are rviz_panel_tutorial/demo_panel.hpp and pluginlib. This file is required for plugin recognition. No input parameters, outputs a plugin library. Must be compiled into a shared library for RViz to load.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <rviz_panel_tutorial/demo_panel.hpp>\n\nnamespace rviz_panel_tutorial\n{\nDemoPanel::DemoPanel(QWidget* parent) : Panel(parent)\n{\n}\n\nDemoPanel::~DemoPanel() = default;\n}  // namespace rviz_panel_tutorial\n\n#include <pluginlib/class_list_macros.hpp>\nPLUGINLIB_EXPORT_CLASS(rviz_panel_tutorial::DemoPanel, rviz_common::Panel)\n\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 node with logger service enabled in C++\nDESCRIPTION: Illustrates how to create an rclcpp node with the logger service enabled programmatically by passing 'enable_logger_service(true)' option to the Node constructor via NodeOptions. This enables external runtime configuration of logger levels via ROS 2 services.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\n// Create a node with logger service enabled\nauto node = std::make_shared<rclcpp::Node>(\"NodeWithLoggerService\", rclcpp::NodeOptions().enable_logger_service(true));\n```\n\n----------------------------------------\n\nTITLE: Allow UDP Multicast Traffic through UFW\nDESCRIPTION: These commands configure the Uncomplicated Firewall (UFW) to allow incoming and outgoing UDP traffic for multicast addresses (224.0.0.0/4). This is necessary if UFW is blocking multicast communication, which is essential for DDS-based ROS2 applications.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ufw allow in proto udp to 224.0.0.0/4\n$ sudo ufw allow in proto udp from 224.0.0.0/4\n```\n\n----------------------------------------\n\nTITLE: Logging all but the first message in ROS 2 nodes using Python\nDESCRIPTION: Logs WARN level messages from a ROS 2 Python node, skipping the first time the code is hit using 'skip_first=True' keyword argument on the logger's warning method. It formats the message using Python's 'str.format()' method.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nnum = 4\nnode.get_logger().warning('My log message {0}'.format(num), skip_first=True)\n```\n\n----------------------------------------\n\nTITLE: Run ROS 2 Listener Node\nDESCRIPTION: Launches a ROS 2 listener node using the `demo_nodes_cpp` package. The node is remapped to a specific name (`listener` or `listener_X`) for identification in the network graph.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp listener --ros-args --remap __node:=listener\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp listener --ros-args --remap __node:=listener_1\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp listener --ros-args --remap __node:=listener_2\n```\n\n----------------------------------------\n\nTITLE: Rebooting the System\nDESCRIPTION: Reboots the system to load the newly installed kernel. Requires sudo privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n   $ sudo reboot\n```\n\n----------------------------------------\n\nTITLE: Starting Fibonacci Action Client with Introspection (Bash)\nDESCRIPTION: Launches the fibonacci_action_client with introspection enabled via 'ros2 run' and a command line parameter. Dependencies include action_tutorials_cpp and a running ROS system. The key parameter is '-p action_client_configure_introspection:=contents'. The action client starts and interacts with a suitable action server, making its actions available for introspection and recording.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nros2 run action_tutorials_cpp fibonacci_action_client --ros-args -p action_client_configure_introspection:=contents\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Python Package with Required Dependencies - Console Shell\nDESCRIPTION: This console command initializes a new ROS 2 package named 'my_package' with 'ament_python' as the build type and Apache-2.0 license. It also generates a starter Python node 'my_robot_driver.py' and specifies dependencies on rclpy, geometry_msgs, and webots_ros2_driver. Ensure ROS 2 and its Python tools are installed before executing. The command should be run from within your workspace's src directory. The expected output is a new directory structure under 'my_package' with the mentioned dependencies listed in package.xml.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_python --license Apache-2.0 --node-name my_robot_driver my_package --dependencies rclpy geometry_msgs webots_ros2_driver\n```\n\n----------------------------------------\n\nTITLE: Running dynamic_bridge between ROS 1 and ROS 2\nDESCRIPTION: Commands to run the ros1_bridge to enable communication between ROS 1 and ROS 2. The bridge is started with the --bridge-all-topics option to make all topics visible.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Shell B:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS 2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nexport ROS_MASTER_URI=http://localhost:11311\nros2 run ros1_bridge dynamic_bridge --bridge-all-topics\n```\n\n----------------------------------------\n\nTITLE: Launching rviz2 with tf2 Demo Configuration (Windows)\nDESCRIPTION: Starts the rviz2 visualization tool on Windows, loading a specific configuration file ('turtle_rviz.rviz'). It uses a `for` loop in the command prompt to retrieve the package path via `ros2 pkg prefix` and passes it to rviz2. This setup visualizes the turtles and their tf2 frames.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ for /f \"usebackq tokens=*\" %a in (`ros2 pkg prefix --share turtle_tf2_py`) do rviz2 -d %a/rviz/turtle_rviz.rviz\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Output in ROS2 Launch File\nDESCRIPTION: Configuration options to ensure node output is printed to the console when launched. These parameters are added to the node definition in a launch file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n          output=\"screen\",\n          emulate_tty=True,\n```\n\n----------------------------------------\n\nTITLE: Example Python code with style issues for ament_flake8\nDESCRIPTION: This Python code snippet demonstrates several common style issues that ament_flake8 can identify, such as missing whitespace, overly long lines, and unused variables. It serves as an example for showcasing the capabilities of ament_flake8 in enforcing Python code style guidelines. The code defines a function with style errors and an unused variable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef uglyPythonFunction(a,b,  c):\n    if a != b:\n        print(\"A does not match b\")\n    thisIsAVariableNameThatIsWayTooLongLongLong = 2\n    extra_long =(thisIsAVariableNameThatIsWayTooLongLongLong*thisIsAVariableNameThatIsWayTooLongLongLong )\n    return(c)\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Listener Node in Console\nDESCRIPTION: Launches the ROS2 listener node with remapping options in the CLI. It subscribes to the default 'chatter' topic and facilitates the discovery of publisher nodes via the configured discovery server. Input is the process of node execution with specific node name remapping.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp listener --ros-args --remap __node:=listener\n```\n\n----------------------------------------\n\nTITLE: Listing Images in IBM Cloud Container Registry - IBM Cloud CLI - console\nDESCRIPTION: This snippet displays the command to list all images in the IBM Cloud Container Registry. The only prerequisite is a successful login to IBM Cloud CLI and the container-registry plugin. Running this command outputs a table of repositories, tags, namespaces, creation dates, and sizes for available images. Input is the command; output is a listing of all container images in the registry.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud cr image-list\nListing images...\n\nREPOSITORY               TAG   DIGEST         NAMESPACE   CREATED         SIZE     SECURITY STATUS\n```\n\n----------------------------------------\n\nTITLE: Remapping Node Name with ros2 run\nDESCRIPTION: This command renames the `/turtlesim` node to `/my_turtle`. The `--ros-args --remap __node:=my_turtle` arguments specify the remapping rule. The result will be the remapped node name in the node list. Prerequisites include the installation of ROS 2 and the `turtlesim` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle\n```\n\n----------------------------------------\n\nTITLE: ROS2 Launch File for Parameters in Python\nDESCRIPTION: A launch file reference showing how to set parameters when launching a ROS2 node. The file sets 'my_parameter' to 'earth' and ensures console output with output='screen' and emulate_tty=True options.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# This is a reference to an external file: cpp_parameters_launch.py\n```\n\n----------------------------------------\n\nTITLE: Running the TF2 Message Filter Node\nDESCRIPTION: Runs the C++ node `turtle_tf2_message_filter` from the `learning_tf2_cpp` package. This node listens to `/turtle3/turtle_point_stamped` messages, uses `tf2` to transform the point into the `turtle1` frame, and prints the transformed coordinates.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\n$ ros2 run learning_tf2_cpp turtle_tf2_message_filter\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Introspection Server in ROS 2 C++\nDESCRIPTION: This C++ code defines a ROS 2 node (`IntrospectionServiceNode`) that provides the `AddTwoInts` service. It includes parameter callbacks (`on_set_parameters_callback` and `post_set_parameters_callback`) to allow dynamic configuration of the service's introspection state (disabled, metadata, contents) via the `service_configure_introspection` parameter. It depends on `rclcpp` for ROS 2 functionalities and `example_interfaces` for the service definition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nnamespace demo_nodes_cpp\n{\n\nclass IntrospectionServiceNode : public rclcpp::Node\n{\npublic:\n  DEMO_NODES_CPP_PUBLIC\n  explicit IntrospectionServiceNode(const rclcpp::NodeOptions & options)\n  : Node(\"introspection_service\", options)\n  {\n    auto handle_add_two_ints =\n      [this](const std::shared_ptr<rmw_request_id_t> request_header,\n        const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request> request,\n        std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> response) -> void\n      {\n        (void)request_header;\n        RCLCPP_INFO(\n          this->get_logger(), \"Incoming request\\na: %\" PRId64 \" b: %\" PRId64,\n          request->a, request->b);\n        response->sum = request->a + request->b;\n      };\n    // Create a service that will use the callback function to handle requests.\n    srv_ = create_service<example_interfaces::srv::AddTwoInts>(\"add_two_ints\", handle_add_two_ints);\n\n    auto on_set_parameter_callback =\n      [](std::vector<rclcpp::Parameter> parameters) {\n        rcl_interfaces::msg::SetParametersResult result;\n        result.successful = true;\n        for (const rclcpp::Parameter & param : parameters) {\n          if (param.get_name() != \"service_configure_introspection\") {\n            continue;\n          }\n\n          if (param.get_type() != rclcpp::ParameterType::PARAMETER_STRING) {\n            result.successful = false;\n            result.reason = \"must be a string\";\n            break;\n          }\n\n          if (param.as_string() != \"disabled\" && param.as_string() != \"metadata\" &&\n            param.as_string() != \"contents\")\n          {\n            result.successful = false;\n            result.reason = \"must be one of 'disabled', 'metadata', or 'contents'\";\n            break;\n          }\n        }\n\n        return result;\n      };\n\n    auto post_set_parameter_callback =\n      [this](const std::vector<rclcpp::Parameter> & parameters) {\n        for (const rclcpp::Parameter & param : parameters) {\n          if (param.get_name() != \"service_configure_introspection\") {\n            continue;\n          }\n\n          rcl_service_introspection_state_t introspection_state = RCL_SERVICE_INTROSPECTION_OFF;\n\n          if (param.as_string() == \"disabled\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_OFF;\n          } else if (param.as_string() == \"metadata\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_METADATA;\n          } else if (param.as_string() == \"contents\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_CONTENTS;\n          }\n\n          this->srv_->configure_introspection(\n            this->get_clock(), rclcpp::SystemDefaultsQoS(), introspection_state);\n          break;\n        }\n      };\n\n    on_set_parameters_callback_handle_ = this->add_on_set_parameters_callback(\n      on_set_parameter_callback);\n    post_set_parameters_callback_handle_ = this->add_post_set_parameters_callback(\n      post_set_parameter_callback);\n\n    this->declare_parameter(\"service_configure_introspection\", \"disabled\");\n  }\n\nprivate:\n  rclcpp::Service<example_interfaces::srv::AddTwoInts>::SharedPtr srv_;\n  rclcpp::node_interfaces::OnSetParametersCallbackHandle::SharedPtr\n    on_set_parameters_callback_handle_;\n  rclcpp::node_interfaces::PostSetParametersCallbackHandle::SharedPtr\n    post_set_parameters_callback_handle_;\n};\n\n}  // namespace demo_nodes_cpp\n```\n\n----------------------------------------\n\nTITLE: Running the ROS2 Introspection Client\nDESCRIPTION: Command to launch the introspection client node from the demo_nodes_cpp package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nros2 run demo_nodes_cpp introspection_client\n```\n\n----------------------------------------\n\nTITLE: Configuring CMakeLists.txt for TF2 Message Filter\nDESCRIPTION: CMake configuration required for building a node that uses tf2_ros::MessageFilter, including finding required packages and handling differences between ROS distributions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(message_filters REQUIRED)\nfind_package(tf2_geometry_msgs REQUIRED)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET tf2_geometry_msgs::tf2_geometry_msgs)\n  get_target_property(_include_dirs tf2_geometry_msgs::tf2_geometry_msgs INTERFACE_INCLUDE_DIRECTORIES)\nelse()\n  set(_include_dirs ${tf2_geometry_msgs_INCLUDE_DIRS})\nendif()\n\nfind_file(TF2_CPP_HEADERS\n  NAMES tf2_geometry_msgs.hpp\n  PATHS ${_include_dirs}\n  NO_CACHE\n  PATH_SUFFIXES tf2_geometry_msgs\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(turtle_tf2_message_filter src/turtle_tf2_message_filter.cpp)\ntarget_link_libraries(\n  turtle_tf2_message_filter PUBLIC\n  ${geometry_msgs_TARGETS}\n  message_filters::message_filters\n  rclcpp::rclcpp\n  tf2::tf2\n  ${tf2_geometry_msgs_TARGETS}\n  tf2_ros::tf2_ros\n)\n\nif(EXISTS ${TF2_CPP_HEADERS})\n  target_compile_definitions(turtle_tf2_message_filter PUBLIC -DTF2_CPP_HEADERS)\nendif()\n```\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS\n  turtle_tf2_message_filter\n  DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Python Listener Example\nDESCRIPTION: Commands to source the ROS 2 setup file and run a Python listener node, which subscribes to messages from the talker as part of the basic ROS 2 demo.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Writing a basic pytest test function in Python\nDESCRIPTION: Example of a simple test function using pytest. Functions prefixed with test_ will be automatically discovered by pytest. This example includes an assertion that will fail.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Python.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef test_math():\n    assert 2 + 2 == 5   # This should fail for most mathematical systems\n```\n\n----------------------------------------\n\nTITLE: Running the Allocator Tutorial Example Executable in ROS 2 Console\nDESCRIPTION: Commands to run the example executable provided by the tutorial demonstrating the custom allocator integration in ROS 2. The first command runs the basic allocator tutorial, while the second enables intra-process communication, showing runtime statistics about allocator and global new/delete calls. The output helps confirm the use and effectiveness of the custom allocator.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp allocator_tutorial\n\n$ ros2 run demo_nodes_cpp allocator_tutorial intra\nGlobal new was called 15590 times during spin\nGlobal delete was called 15590 times during spin\nAllocator new was called 27284 times during spin\nAllocator delete was called 27281 times during spin\n```\n\n----------------------------------------\n\nTITLE: Create ROS 2 Subscriber (Python)\nDESCRIPTION: This Python snippet shows how to create a subscriber within the ROS 2 `FramePublisher` node. It subscribes to the `/turtlename/pose` topic, expecting messages of type `turtlesim.msg.Pose`, and directs incoming messages to the `self.handle_turtle_pose` callback function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n self .subscription = self.create_subscription(\n     Pose,\n     f'/{self.turtlename}/pose',\n     self.handle_turtle_pose,\n     1)\n```\n\n----------------------------------------\n\nTITLE: Running Discovery Server and Nodes without Daemon\nDESCRIPTION: Configures and executes a Fast DDS discovery server and ROS2 talker/listener nodes without utilizing the ROS2 daemon, simulating a direct connection scenario using environment variables and CLI commands. It demonstrates nodes connecting directly to the discovery server and communicating topics.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n$ fastdds discovery -i 0 -l 127.0.0.1 -p 11811\n\n# On Linux and Windows in separate terminals:\n$ export ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"  # Linux\n$ set ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"          # Windows\n\n# Run listener node\n$ ros2 run demo_nodes_cpp listener --ros-args --remap __node:=listener\n\n# Run talker node\n$ ros2 run demo_nodes_cpp talker --ros-args --remap __node:=talker\n```\n\n----------------------------------------\n\nTITLE: Sourcing the pixi environment - Console\nDESCRIPTION: This command sets up the environment to use the dependencies managed by pixi. It's executed in the shell to make the installed packages available. This step ensures that the ROS 2 environment is correctly configured.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd C:\\dev\npixi shell\n```\n\n----------------------------------------\n\nTITLE: Improve color support for themes\nDESCRIPTION: This aims to improve color support within themes in rviz. This likely changes the color configuration options. Dependencies: themeing in rviz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Setting Timeout for GTest with ament_add_gtest in CMake\nDESCRIPTION: Example of using the `TIMEOUT` parameter with `ament_add_gtest` to specify a custom execution time limit for a test. In this case, the timeout for `some_test` is set to 120 seconds, overriding the default of 60 seconds.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nament_add_gtest(some_test <test_sources> TIMEOUT 120)\n```\n\n----------------------------------------\n\nTITLE: Build and Launch the Complete ROS2 TurtleSim Project\nDESCRIPTION: This section guides building the ROS2 package and executing the top-level launch file to start multiple turtlesim nodes, TF broadcasters, listeners, and visualization tools. It also describes how to control the turtles and observe their behavior and TF frames in RViz, providing an integrated simulation environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_12\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 launch launch_tutorial launch_turtlesim_launch.py\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Daemon Information Showing RMW Implementation (Bash)\nDESCRIPTION: This bash snippet shows the output of a daemon running with a specific RMW implementation.  It illustrates how the daemon is launched with a specific RMW implementation argument, in this case, Fast DDS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n21318 22.0  0.6 535896 55044 pts/8    Sl   16:14   0:00 /usr/bin/python3 /opt/ros/{DISTRO}/bin/_ros2_daemon --rmw-implementation rmw_fastrtps_cpp --ros-domain-id 0\n```\n\n----------------------------------------\n\nTITLE: Defining ROS 2 Package Metadata in package.xml - XML\nDESCRIPTION: This snippet shows the final, fully-migrated package.xml for ROS 2, specifying package name, version, maintainer, license, updated dependencies ('rclpy' instead of 'rospy'), and 'std_msgs'. It includes an <export> section designating 'ament_python' as the build type, required for ROS 2 Python packages using Colcon. This file informs ROS 2 tools of the package’s build system and dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"2\">\n    <name>talker_py</name>\n    <version>1.0.0</version>\n    <description>The talker_py package</description>\n    <maintainer email=\"gerkey@example.com\">Brian Gerkey</maintainer>\n    <license>BSD</license>\n\n    <depend>rclpy</depend>\n    <depend>std_msgs</depend>\n\n    <export>\n        <build_type>ament_python</build_type>\n    </export>\n</package>\n\n```\n\n----------------------------------------\n\nTITLE: Running a component container with isolated executors\nDESCRIPTION: This command runs `component_container_isolated` and enables the MultiThreadedExecutor for each component. This provides isolated execution environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rclcpp_components component_container_isolated --use_multi_threaded_executor\n```\n\n----------------------------------------\n\nTITLE: VSCode launch.json Configuration for Debugging Python ROS 2 Node\nDESCRIPTION: Presents an example launch.json file for Visual Studio Code to create a debug configuration that runs a Python ROS 2 node script directly. The config simplifies debugging by bypassing 'ros2 run/launch' commands and running the script with the standard Python debug launcher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: File\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"program\": \"my_node.py\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Actions with ros2 action (Console)\nDESCRIPTION: Shows all available actions in the current ROS 2 network using 'ros2 action list'. No parameters are needed; the command lists the topics for actions, used prior to introspection or recording. Useful for verifying that the target action is running and available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action list\n/fibonacci\n```\n\n----------------------------------------\n\nTITLE: Sending an action goal via command line\nDESCRIPTION: Sends a rotation goal to the turtlesim's rotate_absolute action from the terminal, enabling control over the turtle's orientation programmatically.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nros2 action send_goal /turtle1/rotate_absolute --goal-parameters \"float32 theta: 1.57\"\n```\n\n----------------------------------------\n\nTITLE: Post-Shutdown Test - Python\nDESCRIPTION: This snippet defines a post-shutdown test using the @launch_testing.post_shutdown_test() decorator. The class TestTurtleSimShutdown tests if the processes exited normally using launch_testing.asserts.assertExitCodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Integration.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Post-shutdown tests\n@launch_testing.post_shutdown_test()\nclass TestTurtleSimShutdown(unittest.TestCase):\n    def test_exit_codes(self, proc_info):\n        \"\"\"Check if the processes exited normally.\"\"\"\n        launch_testing.asserts.assertExitCodes(proc_info)\n```\n\n----------------------------------------\n\nTITLE: ros2 action echo Output (console)\nDESCRIPTION: This console output details action communication, including goal requests, responses, and feedback messages during bag playback. Includes the `interface`, `info`, `request`, and `response` details related to the `/fibonacci` action server. This information is streamed by the `ros2 action echo` command. The `---` separators divide the different communications.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_34\n\nLANGUAGE: console\nCODE:\n```\ninterface: STATUS_TOPIC\nstatus_list: [{goal_info: {goal_id: {uuid: [34, 116, 225, 217, 48, 121, 146, 36, 240, 98, 99, 134, 55, 227, 184, 72]}, stamp: {sec: 1744953720, nanosec: 804984321}}, status: 4}]\n---\ninterface: GOAL_SERVICE\ninfo:\n  event_type: REQUEST_RECEIVED\n  stamp:\n    sec: 1744953927\n    nanosec: 957359210\n  client_gid: [1, 15, 165, 231, 190, 254, 1, 50, 0, 0, 0, 0, 0, 0, 19, 4]\n  sequence_number: 1\nrequest: [{goal_id: {uuid: [191, 200, 153, 122, 221, 251, 152, 172, 60, 69, 94, 20, 212, 160, 40, 12]}, goal: {order: 10}}]\nresponse: []\n---\ninterface: GOAL_SERVICE\ninfo:\n  event_type: RESPONSE_SENT\n  stamp:\n    sec: 1744953927\n    nanosec: 957726145\n  client_gid: [1, 15, 165, 231, 190, 254, 1, 50, 0, 0, 0, 0, 0, 0, 19, 4]\n  sequence_number: 1\nrequest: []\nresponse: [{accepted: true, stamp: {sec: 1744953927, nanosec: 957615866}}]\n---\ninterface: STATUS_TOPIC\nstatus_list: [{goal_info: {goal_id: {uuid: [191, 200, 153, 122, 221, 251, 152, 172, 60, 69, 94, 20, 212, 160, 40, 12]}, stamp: {sec: 1744953927, nanosec: 957663383}}, status: 2}]\n---\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [191, 200, 153, 122, 221, 251, 152, 172, 60, 69, 94, 20, 212, 160, 40, 12]\nfeedback:\n  sequence: [0, 1, 1]\n---\n...\n```\n\n----------------------------------------\n\nTITLE: Run Logging Demo with Default Log Level\nDESCRIPTION: This command runs the `logging_demo_main` executable from the `logging_demo` package, configuring the default severity for any unset logger to the `debug` severity level using command line arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nros2 run logging_demo logging_demo_main --ros-args --log-level debug\n```\n\n----------------------------------------\n\nTITLE: Implementing the Leg Macro in Xacro\nDESCRIPTION: This XML code presents a complex example of a xacro macro named 'leg'. The macro defines the visual, collision and inertial properties for a leg of a robot. The macro accepts `prefix` and `reflect` parameters. The `prefix` parameter is used to give the legs distinct names, while the `reflect` parameter is used in math expressions to calculate the joint origins for placement on either side of the robot base. This example highlights the utility of combining macros, math, and parameterization to create efficient and maintainable URDF code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<xacro:macro name=\"leg\" params=\"prefix reflect\">\n    <link name=\"${prefix}_leg\">\n        <visual>\n            <geometry>\n                <box size=\"${leglen} 0.1 0.2\"/>\n            </geometry>\n            <origin xyz=\"0 0 -${leglen/2}\" rpy=\"0 ${pi/2} 0\"/>\n            <material name=\"white\"/>\n        </visual>\n        <collision>\n            <geometry>\n                <box size=\"${leglen} 0.1 0.2\"/>\n            </geometry>\n            <origin xyz=\"0 0 -${leglen/2}\" rpy=\"0 ${pi/2} 0\"/>\n        </collision>\n        <xacro:default_inertial mass=\"10\"/>\n    </link>\n\n    <joint name=\"base_to_${prefix}_leg\" type=\"fixed\">\n        <parent link=\"base_link\"/>\n        <child link=\"${prefix}_leg\"/>\n        <origin xyz=\"0 ${reflect*(width+.02)} 0.25\" />\n    </joint>\n    <!-- A bunch of stuff cut -->\n</xacro:macro>\n<xacro:leg prefix=\"right\" reflect=\"1\" />\n<xacro:leg prefix=\"left\" reflect=\"-1\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing service recording\nDESCRIPTION: This implements service recording and display info about recorded services in `ros2bag`. This enhances `ros2bag` by enabling it to record and provide information about services, allowing recording and playing back of service calls.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Defining a ROS 2 Python Action Server Class and Initialization\nDESCRIPTION: This snippet includes the class definition for the Fibonacci action server, extending Node, and initializes the action server with key parameters including the callback for execution. It sets up the node environment and prepares it to handle incoming goals.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FibonacciActionServer(Node):\n    def __init__(self):\n        super().__init__('fibonacci_action_server')\n        self._action_server = ActionServer(\n            self,\n            Fibonacci,\n            'fibonacci',\n            execute_callback=self.execute_callback\n        )\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate MutuallyExclusive Callback Group - Python\nDESCRIPTION: This snippet creates a MutuallyExclusive callback group instance and assigns it to the client callback group (`client_cb_group`). The timer callback group (`timer_cb_group`) is set to `None`, meaning the timer will not use a specific callback group and will default to the node's default callback group (typically mutually exclusive).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclient_cb_group = MutuallyExclusiveCallbackGroup()\ntimer_cb_group = None\n```\n\n----------------------------------------\n\nTITLE: Publishing Velocity Command to turtlesim1 Node - Shell\nDESCRIPTION: This shell command publishes a Twist message to the /turtlesim1/turtle1/cmd_vel topic using ros2 topic pub. It requires ROS 2, geometry_msgs package, and at least one running turtlesim node as started from the launch file. The primary parameter is the topic name; the message sets the turtle's linear and angular velocities. Output is movement of the turtlesim1 turtle according to the provided velocities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Launching-Multiple-Nodes/Launching-Multiple-Nodes.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ros2 topic pub  /turtlesim1/turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing webots_ros2 Distributed Package on Ubuntu VM - Shell Command\nDESCRIPTION: A simple shell command to install the webots_ros2 package from released ROS 2 binary packages using the apt package manager. The placeholder {DISTRO} should be replaced with the targeted ROS 2 distribution name such as humble or foxy. This command requires the ROS 2 package repository to be already set up and the user to have sudo permissions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install ros-{DISTRO}-webots-ros2\n```\n\n----------------------------------------\n\nTITLE: Remapping Node Name using ros2\nDESCRIPTION: This snippet shows how to remap a node's name using the `ros2 component load` command-line tool. It loads a component, specifying a new name for it with the `--node-name` option. The expected output is the component being loaded with the renamed node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager composition composition::Talker --node-name talker2\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Service Node with Custom QoS\nDESCRIPTION: Executes a ROS2 service node with custom QoS settings loaded from an XML file. The service is configured to use synchronous publication mode.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nros2 run sync_async_node_example_cpp ping_service\n```\n\n----------------------------------------\n\nTITLE: ROS2 Parameter Update Event Output\nDESCRIPTION: This console output shows the expected log message from the 'node_with_parameters' (Python) after it detects the change to the 'a_double_param' on the 'parameter_blackboard' node. It confirms that the ParameterEventHandler callback was successfully invoked.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1699821958.757770223] [node_with_parameters]: Received an update to parameter: a_double_param: 3.45\n```\n\n----------------------------------------\n\nTITLE: Updating find_package Calls for ROS 2\nDESCRIPTION: Replaces the consolidated catkin find_package call with individual find_package calls for each dependency in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake_ros REQUIRED)\nfind_package(foo REQUIRED)\nfind_package(bar REQUIRED)\nfind_package(std_msgs REQUIRED)\nfind_package(baz REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Creating setup.cfg for setuptools executable installation in Linux/macOS/Windows terminal\nDESCRIPTION: Demonstrates commands to create an empty setup.cfg file across Linux, macOS, and Windows platforms using terminal commands. The setup.cfg configures setuptools to install console scripts in package-specific directories for ROS 2 tooling compatibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ touch setup.cfg\n```\n\nLANGUAGE: console\nCODE:\n```\n$ touch setup.cfg\n```\n\nLANGUAGE: console\nCODE:\n```\n$ type nul > touch setup.cfg\n```\n\n----------------------------------------\n\nTITLE: Lists in reStructuredText\nDESCRIPTION: This snippet demonstrates how to create unordered and ordered lists in reStructuredText. Both types of lists support nested definitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_20\n\nLANGUAGE: rst\nCODE:\n```\n* bullet point\n\n  * bullet point nested\n  * bullet point nested\n\n* bullet point\n```\n\nLANGUAGE: rst\nCODE:\n```\n#. first listed item\n#. second lited item\n```\n\n----------------------------------------\n\nTITLE: Building a ROS 2 Package with Colcon\nDESCRIPTION: This command uses `colcon build` to compile and build the ROS 2 packages found within the current workspace. It should be executed from the root directory of the ROS 2 workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncolcon build\n```\n\n----------------------------------------\n\nTITLE: Changing Node Name in ROS 2 via CLI Remapping Using Console Commands\nDESCRIPTION: Demonstrates how to rename a ROS 2 node at launch time by using the remapping flag '-r' with the special key '__node'. This replaces ROS 1's '__name'. It shows how to rename a node to 'new_node_name' using this syntax.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Scripts.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run some_package some_ros_executable --ros-args -r __node:=new_node_name\n```\n\n----------------------------------------\n\nTITLE: Load Talker Component\nDESCRIPTION: This command loads the `Talker` component from the `composition` package into the component container named `/ComponentManager`. It is a step to setup a talker node within the ROS 2 component framework.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nros2 component load /ComponentManager composition composition::Talker\n```\n\n----------------------------------------\n\nTITLE: Creating a Publisher in ROS 1 and ROS 2\nDESCRIPTION: This snippet demonstrates how to create a publisher in both ROS 1 and ROS 2.  In ROS 2, `node.create_publisher()` is used, accepting the message type, topic name, and either a QoS profile or queue size. The ROS 1 examples show how to create a publisher and set the queue size.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npub = rospy.Publisher('chatter', String)\n# or\npub = rospy.Publisher('chatter', String, queue_size=10)\n```\n\nLANGUAGE: python\nCODE:\n```\npub = node.create_publisher(String, 'chatter', rclpy.qos.QoSProfile())\n# or\npub = node.create_publisher(String, 'chatter', 10)\n```\n\n----------------------------------------\n\nTITLE: ROS2 Two-Node Pipeline Demonstration for Zero-Copy Intra-Process Messaging in C++\nDESCRIPTION: This demo includes source code for a publisher (ProducerNode) that publishes integer messages periodically with ownership transferred via std::unique_ptr, and a subscriber (ConsumerNode) that prints message addresses and values upon receipt, illustrating zero-copy message passing within ROS2's intra-process setup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <cinttypes>\n#include <cstdio>\n#include <memory>\n#include <string>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/int32.hpp\"\n\nusing namespace std::chrono_literals;\n\n// Producer node class\nstruct Producer : public rclcpp::Node\n{\n  Producer(const std::string & name, const std::string & output)\n  : Node(name, rclcpp::NodeOptions().use_intra_process_comms(true))\n  {\n    pub_ = this->create_publisher<std_msgs::msg::Int32>(output, 10);\n    auto callback = [this]() -> void {\n      auto msg = std::make_unique<std_msgs::msg::Int32>();\n      msg->data = count++;\n      printf(\"Published message with value: %d, address: 0x%\" PRIXPTR \"\\n\", msg->data, reinterpret_cast<std::uintptr_t>(msg.get()));\n      pub_->publish(std::move(msg));\n    };\n    timer_ = this->create_wall_timer(1s, callback);\n  }\n  rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr pub_;\n  rclcpp::TimerBase::SharedPtr timer_;\n  int count = 0;\n};\n\n// Consumer node class\nstruct Consumer : public rclcpp::Node\n{\n  Consumer(const std::string & name, const std::string & input)\n  : Node(name, rclcpp::NodeOptions().use_intra_process_comms(true))\n  {\n    sub_ = this->create_subscription<std_msgs::msg::Int32>(input, 10,\n      [](std_msgs::msg::Int32::UniquePtr msg) {\n        printf(\"Received message with value: %d, address: 0x%\" PRIXPTR \"\\n\", msg->data,\n        reinterpret_cast<std::uintptr_t>(msg.get()));\n      });\n  }\n  rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr sub_;\n};\n```\n\n----------------------------------------\n\nTITLE: Build the documentation with make\nDESCRIPTION: This command builds the ROS 2 documentation. It requires a Makefile in the current directory. The command compiles reStructuredText files and generates HTML output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Calling get_action_interfaces() properly\nDESCRIPTION: This involves ensuring the `get_action_interfaces()` function is called correctly in the `ros2action` package. This corrects potential errors related to how action interfaces are obtained.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Building the ROS 2 Workspace with colcon - Bash\nDESCRIPTION: Builds all packages in the current ROS 2 workspace using colcon, creating build, install, and log directories. The --symlink-install option allows changes in the source tree to be immediately reflected in the install space for non-compiled files, facilitating rapid development. Ensure your terminal environment is sourced with the necessary dependencies from an underlay ROS 2 installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install\n\n```\n\n----------------------------------------\n\nTITLE: Using a Mixin for Simplified Build Commands\nDESCRIPTION: This snippet instructs how to utilize an existing mixin, such as 'debug', to run build commands with preset options, reducing manual argument entry and improving efficiency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --mixin debug\n```\n\n----------------------------------------\n\nTITLE: Fast DDS XML profile configuration\nDESCRIPTION: This XML file configures Fast DDS profiles to enable synchronous publication for 'sync_topic' and asynchronous publication for 'async_topic'.  It also defines default publisher and subscriber profiles.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\">\n\n    <!-- default publisher profile -->\n    <publisher profile_name=\"default_publisher\" is_default_profile=\"true\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n    </publisher>\n\n    <!-- default subscriber profile -->\n    <subscriber profile_name=\"default_subscriber\" is_default_profile=\"true\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n    </subscriber>\n\n    <!-- publisher profile for topic sync_topic -->\n    <publisher profile_name=\"/sync_topic\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n        <qos>\n            <publishMode>\n                <kind>SYNCHRONOUS</kind>\n            </qos>\n        </publisher>\n\n    <!-- publisher profile for topic async_topic -->\n    <publisher profile_name=\"/async_topic\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n        <qos>\n            <publishMode>\n                <kind>ASYNCHRONOUS</kind>\n            </qos>\n        </publisher>\n</profiles>\n```\n\n----------------------------------------\n\nTITLE: Running the Parameter Event Handler Node\nDESCRIPTION: Console command to launch the parameter event handler node that will monitor parameter changes. This should be run in the first terminal after building and sourcing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run cpp_parameter_event_handler parameter_event_handler\n```\n\n----------------------------------------\n\nTITLE: Starting HTML5 Animation Recording via Ros2Supervisor Service Call in Console\nDESCRIPTION: Illustrates invoking the /Ros2Supervisor/animation_start_recording service of type webots_ros2_msgs/srv/SetString to initiate recording of HTML5 animations. The input value is the absolute path specifying the directory to save the output animation files including an index.html. This command requires the animation services provided by Ros2Supervisor to be active.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service call /Ros2Supervisor/animation_start_recording webots_ros2_msgs/srv/SetString \"{value: \\\"<ABSOLUTE_PATH>/index.html\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Example ROS 2 QoS Compatibility Check Console Output\nDESCRIPTION: Shows typical output in a console when running a QoS compatibility check in Python. The compatibility function reports an error due to mismatched QoS policies (best effort vs reliable). The output helps diagnose communication issues between ROS 2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n$ python3 qos_check_compatible_example.py\n(QoSCompatibility.ERROR, 'ERROR: Best effort publisher and reliable subscription;')\n```\n\n----------------------------------------\n\nTITLE: Example Output from Dummy Robot Demo Node Launch (Bash)\nDESCRIPTION: Shows example log messages and node outputs when starting the dummy robot demo. Indicates successful launch of core nodes such as dummy_map_server, robot_state_publisher, dummy_joint_states, and dummy_laser. Input: command output; Output: process start confirmations and node status updates.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/dummy-robot-demo.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [dummy_map_server-1]: process started with pid [2922]\n[INFO] [robot_state_publisher-2]: process started with pid [2923]\n[INFO] [dummy_joint_states-3]: process started with pid [2924]\n[INFO] [dummy_laser-4]: process started with pid [2925]\n[dummy_laser-4] [INFO] [1714837459.645517297] [dummy_laser]: angle inc:    0.004363\n[dummy_laser-4] [INFO] [1714837459.645613393] [dummy_laser]: scan size:    1081\n[dummy_laser-4] [INFO] [1714837459.645626640] [dummy_laser]: scan time increment:     0.000000\n[robot_state_publisher-2] [INFO] [1714837459.652977937] [robot_state_publisher]: Robot initialized\n```\n\n----------------------------------------\n\nTITLE: Lambda Callback for Periodic Message Publishing in C++\nDESCRIPTION: Defines a lambda function that constructs an AddressBook message, sets sample contact fields (first name, last name, phone number, phone type), logs to standard output, and publishes the message to the ROS 2 topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nauto publish_msg = [this]() -> void {\n  auto message = more_interfaces::msg::AddressBook();\n\n  message.first_name = \"John\";\n  message.last_name = \"Doe\";\n  message.phone_number = \"1234567890\";\n  message.phone_type = message.PHONE_TYPE_MOBILE;\n\n  std::cout << \"Publishing Contact\\nFirst:\" << message.first_name <<\n    \"  Last:\" << message.last_name << std::endl;\n\n  this->address_book_publisher_->publish(message);\n};\n```\n\n----------------------------------------\n\nTITLE: Remapping Namespace using ros2\nDESCRIPTION: This code remaps the namespace of a node using the `ros2 component load` command. The `--node-namespace` option is used to specify the new namespace for the node. The outcome is the loaded node's namespace being updated.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager composition composition::Talker --node-namespace /ns\n```\n\n----------------------------------------\n\nTITLE: Removing rospy import and adding rclpy import in Python ROS 2 migration\nDESCRIPTION: Shows removal of the ROS 1 rospy import statement, replacing it with import rclpy to use the ROS 2 Python client library APIs for node management, communication, and lifecycle.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n# Remove this\nimport rospy\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\n```\n\n----------------------------------------\n\nTITLE: Listing available actions in the ROS graph\nDESCRIPTION: Command to list all active actions, showing that rotate_absolute is the sole action being used, foundational for further interaction.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action list\n```\n\n----------------------------------------\n\nTITLE: Linking Python Modules in index.rst (RST)\nDESCRIPTION: This snippet demonstrates how to add a link to the \"modules\" page within the index.rst file. This adds the documentation for the Python modules to the table of contents.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n    .. toctree::\n       :maxdepth: 2\n       :caption: Contents:\n\n       Python Modules <modules>\n```\n\n----------------------------------------\n\nTITLE: Installing rmw_gurumdds from ROS 2 apt repository - Bash\nDESCRIPTION: Installs the `rmw_gurumdds_cpp` and `gurumdds` packages using apt.  Replace `{DISTRO}` with the ROS 2 distribution name (e.g., rolling, jazzy, humble). This is the recommended installation method.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ros-{DISTRO}-rmw-gurumdds-cpp\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Parameter Descriptors in rclpy.node.Node (Python)\nDESCRIPTION: Exposes methods for retrieving and updating parameter descriptors in rclpy nodes. 'describe_parameter(s)' returns descriptor(s) for named parameters. 'set_descriptor' assigns a descriptor to a parameter, optionally providing an alternative value. Inputs are names, descriptors, and optionally alternative ParameterValue. Outputs are ParameterDescriptor or ParameterValue objects. Requires rclpy and rcl_interfaces. Used when customizing parameter metadata and constraints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndef describe_parameter(name: str) -> ParameterDescriptor\n\ndef describe_parameters(names: List[str]) -> List[ParameterDescriptor]\n\ndef set_descriptor(\n    name: str,\n    descriptor: ParameterDescriptor,\n    alternative_value: Optional[ParameterValue] = None\n) -> ParameterValue\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package (colcon)\nDESCRIPTION: Uses `colcon` to build the specific ROS 2 package `python_parameter_event_handler`. The `--packages-select` option limits the build process to only the specified package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select python_parameter_event_handler\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Packages with Debug Symbols via colcon\nDESCRIPTION: This shell command demonstrates how to build a specific ROS 2 package using colcon with debug symbols enabled by passing --cmake-args -DCMAKE_BUILD_TYPE=Debug. This ensures debug information is present for debugging crashes with GDB. Prerequisites: colcon, a proper ROS 2 workspace, and the desired package. Inputs: <package_name> (the ROS 2 package to compile). Outputs: targets in the build directory will contain debug symbols. Absence of this flag produces stripped binaries, making backtraces less useful.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ colcon build --packages-up-to <package_name> --cmake-args -DCMAKE_BUILD_TYPE=Debug\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Entry Point in setup.py (Python)\nDESCRIPTION: Updates the `setup.py` file to register another script (`data_generator_executable.py`) as a console script entry point, making it runnable from the command line after building the package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nentry_points={\n    'console_scripts': [\n        'simple_bag_recorder = bag_recorder_nodes_py.simple_bag_recorder:main',\n        'data_generator_node = bag_recorder_nodes_py.data_generator_node:main',\n        'data_generator_executable = bag_recorder_nodes_py.data_generator_executable:main',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ROS 2 from Ubuntu\nDESCRIPTION: Command to remove all ROS 2 packages from an Ubuntu system and clean up any unused dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove ~nros-{DISTRO}-* && sudo apt autoremove\n```\n\n----------------------------------------\n\nTITLE: Running turtle_teleop_key node\nDESCRIPTION: This command runs the turtle_teleop_key node, allowing the user to control the turtle in the turtlesim window using keyboard arrow keys. Requires an active turtlesim_node to be running. The output is keyboard input controlling the turtle in turtlesim.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Catching Exceptions in ROS 2 C++ Tests with GDB\nDESCRIPTION: Demonstrates how to use GDB to catch unhandled C++ exceptions thrown by a test executable before the testing framework (like gtest) handles them. First, GDB is started with the test executable. Then, the `catch throw` command sets a breakpoint for any thrown exception. Finally, `run` executes the test.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngdb ./build/rcl/test/test_logging\n```\n\nLANGUAGE: bash\nCODE:\n```\ncatch throw\n```\n\nLANGUAGE: bash\nCODE:\n```\nrun\n```\n\n----------------------------------------\n\nTITLE: Annotating C++ Data Members for Thread Safety - C++\nDESCRIPTION: Demonstrates how to annotate C++ class members with RCPPUTILS_TSA_GUARDED_BY for Clang's thread safety analysis. The code shows a class Foo using a std::mutex and marking an int member as guarded, so the static analyzer can check correct locking. Requires rcpputils/thread_safety_annotations.hpp, Clang compiler, libcxx, and preprocessor macro support. Input: object methods manipulating shared data; output: static warnings when thread safety is violated. Works best on codebases adopting private mutex patterns.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\npublic:\n  void incr(int amount) {\n    std::lock_guard<std::mutex> lock(mutex_);\n    bar += amount;\n  }\n\n  void get() const {\n    return bar;\n  }\n\nprivate:\n  mutable std::mutex mutex_;\n  int bar RCPPUTILS_TSA_GUARDED_BY(mutex_) = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Adapter for String Conversion in C++\nDESCRIPTION: This snippet demonstrates how to create a type adapter that converts between std::string and std_msgs::msg::String. The adapter implements the rclcpp::TypeAdapter template specialization with methods to convert between custom and ROS message types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<>\nstruct rclcpp::TypeAdapter<\n   std::string,\n   std_msgs::msg::String\n>\n{\n  using is_specialized = std::true_type;\n  using custom_type = std::string;\n  using ros_message_type = std_msgs::msg::String;\n\n  static\n  void\n  convert_to_ros_message(\n    const custom_type & source,\n    ros_message_type & destination)\n  {\n    destination.data = source;\n  }\n\n  static\n  void\n  convert_to_custom(\n    const ros_message_type & source,\n    custom_type & destination)\n  {\n    destination = source.data;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Simple ROS2 Intra-Process Image Pipeline Demo\nDESCRIPTION: Executes the ROS2 demo where camera, watermark, and image view nodes are run in a single process pipeline, demonstrating zero-copy image message passing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nros2 run intra_process_demo image_pipeline_all_in_one\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 Sync/Async Publisher Node\nDESCRIPTION: Sources the ROS 2 workspace setup file and executes the `SyncAsyncWriter` node using `ros2 run`. The example output shows the node publishing messages synchronously on `sync_topic` and asynchronously on `async_topic`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n$ ros2 run sync_async_node_example_cpp SyncAsyncWriter\n[INFO] [1612972049.994630332] [sync_async_publisher]: Synchronously publishing: 'SYNC: Hello, world! 0'\n[INFO] [1612972049.995097767] [sync_async_publisher]: Asynchronously publishing: 'ASYNC: Hello, world! 0'\n[INFO] [1612972050.494478706] [sync_async_publisher]: Synchronously publishing: 'SYNC: Hello, world! 1'\n[INFO] [1612972050.494664334] [sync_async_publisher]: Asynchronously publishing: 'ASYNC: Hello, world! 1'\n[INFO] [1612972050.994368474] [sync_async_publisher]: Synchronously publishing: 'SYNC: Hello, world! 2'\n[INFO] [1612972050.994549851] [sync_async_publisher]: Asynchronously publishing: 'ASYNC: Hello, world! 2'\n```\n\n----------------------------------------\n\nTITLE: Add executable to CMakeLists.txt (CMake)\nDESCRIPTION: This CMake code adds an executable named 'SyncAsyncWriter' to the project, linking it against rclcpp and std_msgs libraries. This allows the ROS 2 node to be built and run.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(SyncAsyncWriter src/sync_async_writer.cpp)\ntarget_link_libraries(SyncAsyncWriter PUBLIC rclcpp::rclcpp ${std_msgs_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Launch File in YAML Format - YAML\nDESCRIPTION: This snippet provides a YAML-based launch file for ROS 2 that starts two turtlesim simulation nodes under different namespaces and a mimic node with specific topic remappings. It demonstrates declarative configuration of nodes, includes key-value mapping for arguments and remaps, and must be valid YAML syntax. Dependencies are identical to the XML version: ROS 2, turtlesim, and launch_ros. The launch file should be placed at launch/turtlesim_mimic_launch.yaml. Inputs are namespaced node definitions and remap settings; outputs are running processes as configured. Constraint: YAML structure must match ROS 2 launch specifications.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Creating-Launch-Files.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlaunch:\n  - node:\n      pkg: turtlesim\n      exec: turtlesim_node\n      name: sim\n      namespace: turtlesim1\n  - node:\n      pkg: turtlesim\n      exec: turtlesim_node\n      name: sim\n      namespace: turtlesim2\n  - node:\n      pkg: turtlesim\n      exec: mimic\n      name: mimic\n      remaps:\n        - from: /input/pose\n          to: /turtlesim1/turtle1/pose\n        - from: /output/cmd_vel\n          to: /turtlesim2/turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Running Python Documentation Tools Tests (pytest)\nDESCRIPTION: This command executes tests for the Python documentation tools using pytest. These tests verify the functionality of any custom tools or scripts used in generating the documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nmake test-tools\n```\n\n----------------------------------------\n\nTITLE: Remove Obsolete Headers from tf2 Modules in C++\nDESCRIPTION: Cleans up tf2 modules by removing outdated header files to modernize the codebase. Dependencies are minimal, focusing on code maintenance and compatibility. Ensures future code compatibility and reduces compilation overhead.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_62\n\nLANGUAGE: C++\nCODE:\n```\n# Removed obsolete headers from tf2_bullet, tf2_kdl, tf2_geometry_msgs, and tf2_py\n\n```\n\n----------------------------------------\n\nTITLE: ROS 1 Bridge Dependencies Source Download with rosinstall_generator and wstool (Bash)\nDESCRIPTION: Downloads minimum ROS 1 packages needed for building the ROS 1<->2 bridge using rosinstall_generator and sets up the workspace with wstool. Requires ROS 1 tools and Python on the system. Input is the desired ROS 1 distribution (e.g., kinetic). Outputs a .rosinstall file and initializes the src directory for building the bridge. Limitations: Only generates 'wet' packages necessary for the bridge.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrosinstall_generator catkin common_msgs roscpp rosmsg --rosdistro kinetic --deps --wet-only --tar > kinetic-ros2-bridge-deps.rosinstall\nwstool init -j8 src kinetic-ros2-bridge-deps.rosinstall\n```\n\n----------------------------------------\n\nTITLE: Building the Kernel Packages\nDESCRIPTION: Builds the kernel debian packages using the make command with parallel processing enabled. Requires a significant amount of time and system resources.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n   $ make -j `nproc` deb-pkg\n```\n\n----------------------------------------\n\nTITLE: Running Secured Listener Node (Bash)\nDESCRIPTION: Executes the Python listener demo node (`demo_nodes_py listener`) ensuring it uses its designated security enclave. The `--ros-args --enclave /talker_listener/listener` argument directs the node to load its specific security keys and certificates. Requires the security environment variables to be set in the listener's terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py listener --ros-args --enclave /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Listing Topics on a Secured Network using ros2cli (Bash)\nDESCRIPTION: Demonstrates using the `ros2 topic list` command to discover available topics within a security-enabled ROS 2 graph. Requires the security environment variables, including `ROS_SECURITY_ENCLAVE_OVERRIDE`, to be correctly set. Using `--no-daemon` and providing a `--spin-time` is recommended for reliable discovery.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nros2 topic list --no-daemon --spin-time 3\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment Setup (WSL)\nDESCRIPTION: Sources the main ROS 2 setup script for the specified distribution (`{DISTRO}`), making ROS 2 commands and packages available in the current shell session within WSL. This needs to be done in every new terminal before using ROS 2 commands or building/running workspace packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Using Gazebo Vendor Packages in CMakeLists.txt\nDESCRIPTION: An example of how to find and use Gazebo vendor packages in a ROS 2 CMakeLists.txt file, including linking to the required libraries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Jazzy-Jalisco.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(gz_math_vendor REQUIRED)\nfind_package(gz-math)\n\nadd_executable(my_executable src/exe.cpp)\ntarget_link_libraries(my_executable gz-math::core)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools: apt\nDESCRIPTION: This snippet installs development tools. The purpose is to provide tools necessary for building ROS packages. It first updates the package lists using `apt update` and then installs `ros-dev-tools`. It is an optional step. This uses `apt install` with sudo privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install ros-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Installing and Opening Analysis Tools - pip/jupyter - Console\nDESCRIPTION: Installs the `bokeh` library using `pip3`, which is required for plotting in the analysis notebook. Then, opens the `callback_duration.ipynb` Jupyter notebook located in the cloned `tracetools_analysis` repository using the `jupyter notebook` command, which typically launches a server and opens the notebook in a web browser.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\npip3 install bokeh\njupyter notebook ~/tracing_ws/src/tracetools_analysis/tracetools_analysis/analysis/callback_duration.ipynb\n```\n\n----------------------------------------\n\nTITLE: Listing components running in container in ROS 2\nDESCRIPTION: This command lists the components currently loaded and running within a specific container, such as the ComponentManager. It uses the ros2 command line tool to check the state of the container.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component list\n```\n\n----------------------------------------\n\nTITLE: Sourcing Setup File (Bash on Linux/macOS)\nDESCRIPTION: Sources the generated Bash setup file located in the 'install' directory of the workspace. Running this command updates the current terminal session's environment variables (like PATH and ROS-specific variables) so that the built ROS 2 packages and executables can be found.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 setup files\nDESCRIPTION: Commands to source the setup files after building a ROS2 package, with different syntax for Linux/macOS and Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Echoing Fibonacci Action Data\nDESCRIPTION: This command echoes the action communication between the fibonacci_action_server and the fibonacci_action_client. The command demonstrates action data inspection, showing the interaction between the client and server. Requires the server and client to be running with introspection enabled. Dependencies: ROS2, fibonacci action server and client.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action echo /fibonacci example_interfaces/action/Fibonacci --flow-style\n```\n\n----------------------------------------\n\nTITLE: Switching to rmw_gurumdds - Bash\nDESCRIPTION: Sets the `RMW_IMPLEMENTATION` environment variable to `rmw_gurumdds_cpp`, which instructs ROS 2 to use GurumDDS as the RMW implementation. This command must be executed in each terminal where ROS 2 nodes will be run.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport RMW_IMPLEMENTATION=rmw_gurumdds_cpp\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with colcon\nDESCRIPTION: Builds a specific ROS 2 package (`bag_recorder_nodes_py`) using the `colcon` build tool. The `--packages-select` argument limits the build to only the specified package. `--merge-install` is used on Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select bag_recorder_nodes_py\n```\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --merge-install --packages-select bag_recorder_nodes_py\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Multiple Servers (Partition Example - Linux)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Linux to connect a node to multiple servers for the partition example.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nexport ROS_DISCOVERY_SERVER=\"127.0.0.1:11811;127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Setting Discovery Server Environment Variable in Windows\nDESCRIPTION: Configure the ROS_DISCOVERY_SERVER environment variable to point to the discovery server's IP and port in Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ set ROS_DISCOVERY_SERVER=127.0.0.1:11811\n```\n\n----------------------------------------\n\nTITLE: Starting a Fast DDS Discovery Server\nDESCRIPTION: Launch a discovery server with ID 0 on the default port 11811, listening on all available interfaces.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ fastdds discovery --server-id 0\n```\n\n----------------------------------------\n\nTITLE: Configuring RT-PREEMPT in Kernel Menu\nDESCRIPTION: Details specific configurations for RT_PREEMPT, high resolution timers, full dynticks and timer frequency within the kernel configuration menu. These settings are crucial for achieving real-time performance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n  # Enable CONFIG_PREEMPT_RT\n   -> General Setup\n    -> Preemption Model (Fully Preemptible Kernel (Real-Time))\n     (X) Fully Preemptible Kernel (Real-Time)\n\n  # Enable CONFIG_HIGH_RES_TIMERS\n   -> General setup\n    -> Timers subsystem\n     [*] High Resolution Timer Support\n\n  # Enable CONFIG_NO_HZ_FULL\n   -> General setup\n    -> Timers subsystem\n     -> Timer tick handling (Full dynticks system (tickless))\n      (X) Full dynticks system (tickless)\n\n  # Set CONFIG_HZ_1000 (note: this is no longer in the General Setup menu, go back twice)\n   -> Processor type and features\n    -> Timer frequency (1000 HZ)\n     (X) 1000 HZ\n\n  # Set CPU_FREQ_DEFAULT_GOV_PERFORMANCE [=y]\n   ->  Power management and ACPI options\n    -> CPU Frequency scaling\n     -> CPU Frequency scaling (CPU_FREQ [=y])\n      -> Default CPUFreq governor (<choice> [=y])\n       (X) performance\n```\n\n----------------------------------------\n\nTITLE: Running listener node with specific enclave using ros2 run (Bash)\nDESCRIPTION: This bash command runs the 'listener' node from the 'demo_nodes_py' package with a specific enclave '/talker_listener/listener' using the '--ros-args -e' option. This ensures the node operates within the defined security context.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py listener --ros-args -e /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Publishing a Single ROS 2 Message from a YAML File (Console)\nDESCRIPTION: Demonstrates using `ros2 topic pub` to publish a message to the `/cmd_vel` topic with the specified type `geometry_msgs/msg/Twist`. The `--yaml-file` option instructs the command to load the message data from `cmd_vel.yaml`. If the file contains one message (like the first YAML example), that single message is published once.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Publishing-Messages-Using-YAML-Files.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /cmd_vel geometry_msgs/msg/Twist --yaml-file cmd_vel.yaml\n```\n\n----------------------------------------\n\nTITLE: Logging into IBM Cloud Container Registry and Running Docker Images - Console\nDESCRIPTION: This snippet provides the shell commands required to authenticate with IBM Cloud Container Registry and to run a Docker image pulled from the registry. It requires both Docker and IBM Cloud CLI installed, along with associated credentials and permissions configured. The inputs are the registry login command and the full image tag, and the output is an interactive shell running the Docker container, matching local execution behavior. The user may need elevated privileges (sudo) in case of permission errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud cr login\nLogging in to 'registry.ng.bluemix.net'...\nLogged in to 'registry.ng.bluemix.net'.\nLogging in to 'us.icr.io'...\nLogged in to 'us.icr.io'.\n\nOK\n\n$ docker run -v -it registry.ng.bluemix.net/ros2nasr/ros2foxy:1\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Python Package for Bag Reading\nDESCRIPTION: This command creates a new ROS 2 package named `bag_reader_node_py` with the `ament_python` build type. It automatically adds `rclpy`, `rosbag2_py`, and `std_msgs` as dependencies in the `package.xml`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nros2 pkg create --build-type ament_python --license Apache-2.0 bag_reader_node_py --dependencies rclpy rosbag2_py std_msgs\n```\n\n----------------------------------------\n\nTITLE: Checking subscriber output in terminal\nDESCRIPTION: Sample output lines from the `showimage` node displaying received image notifications, confirming that images are being received correctly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] [1715662452.188906764] [showimage]: Received image #camera_frame\nReceived image #camera_frame\n...\n```\n\n----------------------------------------\n\nTITLE: Running Python ROS2 Parameter Event Handler Node\nDESCRIPTION: This command launches a Python ROS2 node named 'node_with_parameters'. This node is configured to use the ParameterEventHandler class to listen for changes to its own parameters and potentially parameters on other nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nros2 run python_parameter_event_handler node_with_parameters\n```\n\n----------------------------------------\n\nTITLE: Sourcing the colcon Install Environment - Windows Powershell\nDESCRIPTION: Sets up the Powershell session to access ROS 2 binaries by executing the install\\setup.ps1 script from the workspace. This should be used after building to ensure all environment variables for the install space are available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\ninstall\\setup.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Workspace and Cloning - Git - Console\nDESCRIPTION: Creates a new ROS 2 workspace directory (`tracing_ws`) and its source subdirectory (`src`). Navigates into the source directory and clones the `performance_test` and `tracetools_analysis` repositories required for the tutorial. Specifies the ROS 2 distribution branch for `tracetools_analysis`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncd ~\nmkdir -p tracing_ws/src\ncd tracing_ws/src/\ngit clone https://gitlab.com/ApexAI/performance_test.git\ngit clone https://github.com/ros-tracing/tracetools_analysis.git -b {DISTRO}\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Launching ROS 2 TF2 Demo Application\nDESCRIPTION: Launches the main turtlesim TF2 demo application using the 'ros2 launch' command. It specifies the package 'learning_tf2_cpp' and the Python launch file 'turtle_tf2_demo_launch.py' to start the necessary nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_cpp turtle_tf2_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Setting Repository Name in Bloom\nDESCRIPTION: Prompt for setting the repository name, which should typically be the name of your project. This name is used in the archive name for the release.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRepository Name:\n   upstream\n      Default value, leave this as upstream if you are unsure\n   <name>\n      Name of the repository (used in the archive name)\n   ['upstream']:\n```\n\n----------------------------------------\n\nTITLE: Setting Fast DDS XML Env Vars for Publisher (Windows)\nDESCRIPTION: Sets environment variables on Windows to use the `rmw_fastrtps_cpp` implementation, enable loading QoS settings from an XML file (`RMW_FASTRTPS_USE_QOS_FROM_XML=1`), and specify the path to the XML configuration file (`FASTRTPS_DEFAULT_PROFILES_FILE`). These are required before running the publisher node to apply custom Fast DDS configurations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ SET RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n$ SET RMW_FASTRTPS_USE_QOS_FROM_XML=1\n$ SET FASTRTPS_DEFAULT_PROFILES_FILE=path/to/SyncAsync.xml\n```\n\n----------------------------------------\n\nTITLE: Declaring Parameter Event Handler Members in C++\nDESCRIPTION: C++ code snippet showing the private member variables needed for a ROS 2 node to use parameter event handling. It includes shared pointers for the parameter event handler and callback handles.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nprivate:\n  std::shared_ptr<rclcpp::ParameterEventHandler> param_subscriber_;\n  std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle_;\n  std::shared_ptr<rclcpp::ParameterCallbackHandle> cb_handle2_;  // Add this\n};\n```\n\n----------------------------------------\n\nTITLE: Spin node with timeout - C++\nDESCRIPTION: This code snippet shows how to spin the node with a timeout in ROS 2 using `rclcpp::spin_all`, which takes node and timeout as arguments\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\n//    ros::spinOnce();\n    rclcpp::spin_all(node, 0s);\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Linting with ament_lint_auto in CMake\nDESCRIPTION: Shows the recommended approach for running linters using `ament_lint_auto`. This requires finding the `ament_lint_auto` package and calling `ament_lint_auto_find_test_dependencies()`, which automatically executes the linters defined in the package's `package.xml` file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_lint_auto REQUIRED)\nament_lint_auto_find_test_dependencies()\n```\n\n----------------------------------------\n\nTITLE: Adding Console Entry Point in setup.py\nDESCRIPTION: This snippet adds an entry point to the `setup.py` file under `console_scripts`. This allows the Python script `simple_bag_reader.py` within the `bag_reader_node_py` package to be executed using `ros2 run bag_reader_node_py simple_bag_reader`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nentry_points={\n       'console_scripts': [\n           'simple_bag_reader = bag_reader_node_py.simple_bag_reader:main',\n       ],\n   },\n```\n\n----------------------------------------\n\nTITLE: Running Fibonacci Server\nDESCRIPTION: This command starts the fibonacci_action_server from the action_tutorials_cpp package with the action_server_configure_introspection parameter enabled. This allows the introspection of the action to see data flow in the ros2 action echo command.  Dependencies: action_tutorials_cpp package, ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run action_tutorials_cpp fibonacci_action_server --ros-args -p action_server_configure_introspection:=contents\n```\n\n----------------------------------------\n\nTITLE: Logging a message once in ROS 2 nodes using Python\nDESCRIPTION: Logs an INFO severity message only once from a ROS 2 Python node. The method 'info()' on the logger accepts the 'once=True' keyword argument to restrict output to the first invocation. This helps limit repetitive log lines.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nnum = 4\nnode.get_logger().info(f'My log message {num}', once=True)\n```\n\n----------------------------------------\n\nTITLE: Modifying CMakeLists.txt for the Bag Recorder Node\nDESCRIPTION: CMake configuration required to build the bag recorder node, including setting C++17 standard and adding the executable target.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# Default to C++17\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif()\n\nadd_executable(simple_bag_recorder src/simple_bag_recorder.cpp)\ntarget_link_libraries(simple_bag_recorder rclcpp::rclcpp rosbag2_cpp::rosbag2_cpp ${std_msgs_TARGETS})\n\ninstall(TARGETS\n  simple_bag_recorder\n  DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring ament_cmake_pytest test dependency in package.xml (XML)\nDESCRIPTION: This snippet shows the declaration of a test dependency on the ament_cmake_pytest package in a ROS 2 package's package.xml file. This dependency enables integration of pytest-based tests using CMake infrastructure.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Python-Documentation.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<test_depend>ament_cmake_pytest</test_depend>\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Demo with Connext RMW (Linux)\nDESCRIPTION: This snippet demonstrates running the C++ talker and Python listener demo nodes using the Connext RMW implementation on Linux. It sets the RMW_IMPLEMENTATION environment variable to 'rmw_connextdds' before executing the ROS 2 commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRMW_IMPLEMENTATION=rmw_connextdds ros2 run demo_nodes_cpp talker\n\n# Run in another terminal\nRMW_IMPLEMENTATION=rmw_connextdds ros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Redundancy (Windows)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Windows to specify multiple discovery server addresses, enabling node discovery through redundant servers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nset ROS_DISCOVERY_SERVER=\"127.0.0.1:11811;127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated subscription creation signatures with qos_profile\nDESCRIPTION: These functions show how subscriptions were previously created using qos_profile parameters, including options for callback grouping and ignoring local publications. They are deprecated in favor of new signatures accepting rclcpp::QoS and options classes for more flexibility and clarity.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n[[deprecated(\"use create_subscription(const std::string &, const rclcpp::QoS &, CallbackT, ...) instead\")]]\nstd::shared_ptr<SubscriptionT> create_subscription(\n  const std::string & topic_name,\n  CallbackT && callback,\n  const rmw_qos_profile_t & qos_profile = rmw_qos_profile_default,\n  rclcpp::callback_group::CallbackGroup::SharedPtr group = nullptr,\n  bool ignore_local_publications = false,\n  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\n    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>::SharedPtr\n  msg_mem_strat = nullptr,\n  std::shared_ptr<Alloc> allocator = nullptr);\n```\n\nLANGUAGE: cpp\nCODE:\n```\n[[deprecated(\"use create_subscription(const std::string &, const rclcpp::QoS &, CallbackT, ...) instead\")]]\nstd::shared_ptr<SubscriptionT> create_subscription(\n  const std::string & topic_name,\n  CallbackT && callback,\n  size_t qos_history_depth,\n  rclcpp::callback_group::CallbackGroup::SharedPtr group = nullptr,\n  bool ignore_local_publications = false,\n  typename rclcpp::message_memory_strategy::MessageMemoryStrategy<\n    typename rclcpp::subscription_traits::has_message_type<CallbackT>::type, Alloc>::SharedPtr\n  msg_mem_strat = nullptr,\n  std::shared_ptr<Alloc> allocator = nullptr);\n```\n\n----------------------------------------\n\nTITLE: Playing Back ROS2 Bag Data\nDESCRIPTION: Replays the data recorded in a rosbag file. The command plays back the contents of the `subset` bag file.  The turtle in the turtlesim window will move based on the recorded commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play subset\n```\n\n----------------------------------------\n\nTITLE: Defining the Launch File\nDESCRIPTION: This snippet defines a launch file, `start_tf2_debug_demo_launch.py`, responsible for starting the turtlesim demo. This launch file sets up the environment for the debugging process, allowing the user to replicate the reported issues.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. literalinclude:: launch/start_tf2_debug_demo_launch.py\n   :language: python\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files (Windows PowerShell)\nDESCRIPTION: Executes the generated PowerShell setup script located in the 'install' directory. This updates the current PowerShell environment, making the built ROS 2 package available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Cpp.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n.\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function for ROS 2 Node Execution\nDESCRIPTION: This `main` function initializes the ROS 2 context, creates an instance of the `SimpleBagReader` node, and enters the `rclpy.spin()` loop to process callbacks. It includes basic exception handling for shutdown signals.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef main(args=None):\n       try:\n           with rclpy.init(args=args):\n               sbr = SimpleBagReader()\n               rclpy.spin(sbr)\n       except (KeyboardInterrupt, ExternalShutdownException):\n            pass\n```\n\n----------------------------------------\n\nTITLE: Launch file with Parameter Overrides for TF2 Listener Target Frame (Python)\nDESCRIPTION: This launch script demonstrates passing a 'target_frame' argument as a launch parameter, enabling dynamic control over which TF frame the listener node will track. It shows how to override default parameters via launch arguments, allowing easy customization of the target frame at runtime for flexible node behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n# launch_turtlesim_launch.py\nimport launch\nimport launch_ros.actions\nfrom launch.substitutions import LaunchConfiguration\n\nlaunch_arguments = LaunchConfiguration('target_frame', default='turtle1')\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch_arguments,\n        launch_ros.actions.Node(\n            package='turtle_tf2',\n            executable='turtle_tf2_listener',\n            parameters=[{'target_frame': launch_arguments}],\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Echoing Serialized Data with Bash\nDESCRIPTION: This command uses `ros2 topic echo` with the `--raw` flag to display the raw serialized data of messages on a topic. It shows the underlying bytes sent by the RMW. Requires a running ROS 2 system with a topic publishing messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 topic echo --raw /chatter\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Publisher and Subscriber with Partitions\nDESCRIPTION: XML profiles showing how to use partitions to isolate publishers and subscribers within the same topic. The publisher uses 'part1' while the subscriber uses 'part2'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_19\n\nLANGUAGE: XML\nCODE:\n```\n<!-- publisher profile for topic sync_topic -->\n<publisher profile_name=\"/sync_topic\">\n    <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n    <qos>\n        <publishMode>\n            <kind>SYNCHRONOUS</kind>\n        </publishMode>\n        <partition>\n            <names>\n                <name>part1</name>\n            </names>\n        </partition>\n    </qos>\n</publisher>\n\n<!-- subscriber profile for topic sync_topic -->\n<subscriber profile_name=\"/sync_topic\">\n    <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n    <qos>\n        <partition>\n            <names>\n                <name>part2</name>\n            </names>\n        </partition>\n    </qos>\n</subscriber>\n```\n\n----------------------------------------\n\nTITLE: Applying the RT-Preempt Patch\nDESCRIPTION: Applies the RT-Preempt patch to the Linux kernel source code using the patch command. Requires the patch command to be installed. Modifies the kernel source code to enable real-time capabilities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n   $ patch -p1 < ../patch-5.4.78-rt44.patch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - rosdep - Console\nDESCRIPTION: Updates the rosdep database and installs system dependencies required by the packages in the workspace's `src` directory. The `--ignore-src` flag prevents rosdep from trying to install packages found locally, and `-y` automatically confirms installations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nrosdep update\nrosdep install --from-paths src --ignore-src -y\n```\n\n----------------------------------------\n\nTITLE: Measuring ROS 2 Topic Publishing Rate Using ros2 topic hz Command in Console\nDESCRIPTION: This snippet demonstrates how to monitor the rate at which messages are published on a ROS 2 topic using the 'ros2 topic hz' command. It reports the average rate, minimum and maximum message intervals, standard deviation, and window size of messages received on the specified topic. It requires having an active publisher on the topic and suitable subscriptions. Input is the topic name; output is a statistical summary of message publication frequency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic hz /turtle1/pose\naverage rate: 59.354\n  min: 0.005s max: 0.027s std dev: 0.00284s window: 58\n```\n\n----------------------------------------\n\nTITLE: Setting OpenSSL Environment Variables on macOS (Bash)\nDESCRIPTION: Exports environment variables (`DYLD_LIBRARY_PATH`, `OPENSSL_ROOT_DIR`) necessary for the system and build tools to find the Homebrew-installed OpenSSL library on macOS. This is often required when building DDS-Security components or demos from source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DYLD_LIBRARY_PATH=`brew --prefix openssl`/lib:$DYLD_LIBRARY_PATH\nexport OPENSSL_ROOT_DIR=`brew --prefix openssl`\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in YAML Files (Python)\nDESCRIPTION: This Python launch file includes a turtlesim node in the 'turtlesim3' namespace. It's similar to the 'turtlesim_world_2_launch.py' file, but it highlights the line where the namespace is defined. This launch file loads the same YAML configuration file as the second turtlesim, and demonstrates the use of wildcard parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\nfrom ament_index_python.packages import get_package_share_directory\nimport os\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim',\n            namespace='turtlesim3',\n            parameters=[\n                os.path.join(get_package_share_directory('launch_tutorial'),\n                             'config', 'turtlesim.yaml')\n            ]\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Expose MessageFilterDisplay's queue size\nDESCRIPTION: This exposes `MessageFilterDisplay's` queue size to the public interface to adjust its size or access it. Dependencies are `MessageFilterDisplay`. \nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Force Output to stdout (Windows)\nDESCRIPTION: This command sets the `RCUTILS_LOGGING_USE_STDOUT` environment variable to `1`, forcing all log output to go to stdout. It applies to Windows systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nset \"RCUTILS_LOGGING_USE_STDOUT=1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 package (macOS)\nDESCRIPTION: These commands create a new ROS 2 package named 'sync_async_node_example_cpp' with specified build type, license, and dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/ros2_ws/src\n$ cd ~/ros2_ws/src\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 --dependencies rclcpp std_msgs -- sync_async_node_example_cpp\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Service and Client Executables\nDESCRIPTION: CMake code to build the ping service and client nodes, including finding the example_interfaces package and configuring the executables with proper linking.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(example_interfaces REQUIRED)\n\nadd_executable(ping_service src/ping_service.cpp)\ntarget_link_libraries(ping_service PUBLIC ${example_interfaces_TARGETS} rclcpp::rclcpp)\n\nadd_executable(ping_client src/ping_client.cpp)\ntarget_link_libraries(ping_client PUBLIC ${example_interfaces_TARGETS} rclcpp::rclcpp)\n\ninstall(TARGETS\n    ping_service\n    DESTINATION lib/${PROJECT_NAME})\n\ninstall(TARGETS\n    ping_client\n    DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Echoing ROS 2 Topic\nDESCRIPTION: Subscribes to the specified topic (`/synthetic`) and prints any received messages to the console. Used here to observe the data being played back from the bag file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nros2 topic echo /synthetic\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom Message 'Sphere' Interface\nDESCRIPTION: Command to show the structure of 'tutorial_interfaces/msg/Sphere', including nested message 'center' and 'radius' fields to confirm correct interface creation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show tutorial_interfaces/msg/Sphere\n```\n\n----------------------------------------\n\nTITLE: Extending DemoPanel with ROS2 Publisher, Subscriber, and Qt Widgets - C++\nDESCRIPTION: This revised C++ header introduces fields/methods for ROS publisher/subscriber integration inside the DemoPanel class, using rclcpp, std_msgs, and Qt widgets. The onInitialize method sets up publishers/subscribers for /input and /output topics. The class exposes a Qt label and button and slots for reacting to button activation. Dependencies: rviz_common, rviz_common/ros_integration, std_msgs, QtWidgets. Inputs: ROS topic messages; outputs: string message display and publishing. Q_OBJECT macro and moc required.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include <rviz_common/panel.hpp>\n#include <rviz_common/ros_integration/ros_node_abstraction_iface.hpp>\n#include <std_msgs/msg/string.hpp>\n#include <QLabel>\n#include <QPushButton>\n\nnamespace rviz_panel_tutorial\n{\nclass DemoPanel : public rviz_common::Panel\n{\n  Q_OBJECT\npublic:\n  explicit DemoPanel(QWidget * parent = 0);\n  ~DemoPanel() override;\n\n  void onInitialize() override;\n\nprotected:\n  std::shared_ptr<rviz_common::ros_integration::RosNodeAbstractionIface> node_ptr_;\n  rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;\n  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;\n\n  void topicCallback(const std_msgs::msg::String & msg);\n\n  QLabel* label_;\n  QPushButton* button_;\n\nprivate Q_SLOTS:\n  void buttonActivated();\n};\n}  // namespace rviz_panel_tutorial\n\n```\n\n----------------------------------------\n\nTITLE: Echoing Topic with QoS Reliability\nDESCRIPTION: This console command utilizes `ros2 topic echo` to verify that the QoS policy has been successfully overridden during playback. It echoes the data from the `/talker` topic and explicitly specifies the desired reliability setting (`best_effort`) using the `--qos-reliability` flag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo --qos-reliability best_effort /talker std_msgs/String\n```\n\n----------------------------------------\n\nTITLE: Adding ament_cmake_ros Dependency in package.xml\nDESCRIPTION: Adds ament_cmake_ros as a buildtool dependency in the package.xml file, replacing the catkin dependency for ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<buildtool_depend>ament_cmake_ros</buildtool_depend>\n```\n\n----------------------------------------\n\nTITLE: Accessing ROS 2 CLI Help - Console\nDESCRIPTION: This snippet demonstrates how to access the ROS 2 command line interface help documentation, which provides an overview of available commands and options. The command requires that the ROS 2 executable is installed and available in the container's environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 --help\n```\n\n----------------------------------------\n\nTITLE: Adding Integration Test Dependencies in ROS 2 Package Manifest (XML)\nDESCRIPTION: This code snippet demonstrates how to declare necessary test-specific dependencies in a ROS 2 package.xml file for integration testing. It includes dependencies on packages such as 'ament_cmake_ros', 'launch', 'launch_ros', 'launch_testing', 'launch_testing_ament_cmake', 'rclpy', and 'turtlesim'. These are required for writing, launching, and managing integration tests, as well as running the turtlesim example. Add these <test_depend> entries inside your <package> XML block. The snippet does not include any parameters and should be adapted if additional custom testing dependencies are needed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Integration.rst#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<test_depend>ament_cmake_ros</test_depend>\n<test_depend>launch</test_depend>\n<test_depend>launch_ros</test_depend>\n<test_depend>launch_testing</test_depend>\n<test_depend>launch_testing_ament_cmake</test_depend>\n<test_depend>rclpy</test_depend>\n<test_depend>turtlesim</test_depend>\n```\n\n----------------------------------------\n\nTITLE: Launching webots_ros2 Tiago Example with RViz/SLAM (WSL)\nDESCRIPTION: Installs the `slam-toolbox` package for the specified ROS 2 distribution (`{DISTRO}`) using `apt` (requires `sudo`) and then launches the Tiago robot example from `webots_ros2_tiago`, explicitly enabling RViz visualization (`rviz:=true`) and SLAM (`slam:=true`) within WSL. Used for testing RViz functionality.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install ros-{DISTRO}-slam-toolbox\n$ ros2 launch webots_ros2_tiago robot_launch.py rviz:=true slam:=true\n```\n\n----------------------------------------\n\nTITLE: Exporting Include Directories\nDESCRIPTION: This snippet exports the 'include' directory for the package.  This allows other packages that depend on this one to find the header files needed to use the library's API.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nament_export_include_directories(\n  include\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 node with logger service enabled in Python\nDESCRIPTION: Shows how to instantiate a ROS 2 Python node with the logger service enabled by passing the keyword argument 'enable_logger_service=True'. This exposes services to get/set logger levels at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# Create a node with logger service enabled\nnode = Node('NodeWithLoggerService', enable_logger_service=True)\n```\n\n----------------------------------------\n\nTITLE: Building Package Documentation with rosdoc2 (Console)\nDESCRIPTION: This snippet demonstrates how to generate the documentation for a package in HTML format using the `rosdoc2` command-line tool. The command specifies the package path where the documentation is located, and the generated output is stored in a specific directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rosdoc2 build --package-path <package-path>\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 Loaned Message Talker from the Console\nDESCRIPTION: This shell command demonstrates execution of the ROS 2 demo_nodes_cpp talker node configured for loaned message publishing. It assumes ROS 2 and the demo_nodes_cpp package are installed and sourced, and illustrates standard and RMW implementation-specific invocation patterns, including setting environment variables to influence middleware and loaned message behavior. The console output shows runtime informational logs, reflecting successful message publishing and fallback mechanisms when loaned messages are unsupported.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp talker_loaned_message\n[INFO] [1741063656.446278828] [loaned_message_talker]: Publishing: '1.000000'\n[INFO] [1741063656.446705580] [rclcpp]: Currently used middleware cannot loan messages. Local allocator will be used.\n[INFO] [1741063656.446754794] [loaned_message_talker]: Publishing: 'Hello World: 1'\n[INFO] [1741063657.446232119] [loaned_message_talker]: Publishing: '2.000000'\n[INFO] [1741063657.446401820] [loaned_message_talker]: Publishing: 'Hello World: 2'\n[INFO] [1741063658.446217220] [loaned_message_talker]: Publishing: '3.000000'\n[INFO] [1741063658.446383011] [loaned_message_talker]: Publishing: 'Hello World: 3'\n[...]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp talker_loaned_message\n[INFO] [1741064109.676860153] [rclcpp]: Currently used middleware cannot loan messages. Local allocator will be used.\n[INFO] [1741064109.677043250] [loaned_message_talker]: Publishing: '1.000000'\n[INFO] [1741064109.677185724] [rclcpp]: Currently used middleware cannot loan messages. Local allocator will be used.\n[INFO] [1741064109.677224058] [loaned_message_talker]: Publishing: 'Hello World: 1'\n[INFO] [1741064110.676842111] [loaned_message_talker]: Publishing: '2.000000'\n[INFO] [1741064110.677008774] [loaned_message_talker]: Publishing: 'Hello World: 2'\n[INFO] [1741064111.676779850] [loaned_message_talker]: Publishing: '3.000000'\n[INFO] [1741064111.676937613] [loaned_message_talker]: Publishing: 'Hello World: 3'\n[...]\n```\n\n----------------------------------------\n\nTITLE: Selecting ROS Distribution in Bloom\nDESCRIPTION: Prompt for specifying which ROS distribution you are releasing the package for, such as indigo, kinetic, lunar, or melodic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nROS Distro:\n   <ROS distro>\n      This can be any valid ROS distro, e.g. indigo, kinetic, lunar, melodic\n   ['indigo']:\n```\n\n----------------------------------------\n\nTITLE: Changelog and release updates for ros2cli Python packages\nDESCRIPTION: Provides a summary of recent updates, dependency changes, and maintainer information for the ros2cli tools, indicating ongoing maintenance and feature enhancements.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* Also provide --include-hidden-services for ``ros2 service list`` verb (\\#551 <https://github.com/ros2/ros2cli/issues/551>)\\n* Depend on launch packages instead of ros_testing to avoid circular dependency (\\#685 <https://github.com/ros2/ros2cli/issues/685>)\\n* Update maintainers to Aditya Pande, Audrow Nash, and Michael Jeronimo (\\#673 <https://github.com/ros2/ros2cli/issues/673>)\\n* Updated maintainers (\\#670 <https://github.com/ros2/ros2cli/issues/670>)\\n* Add changelogs (\\#635 <https://github.com/ros2/ros2cli/issues/635>)\\n* Contributors: Aditya Pande, Audrow Nash, Ivan Santiago Paunovic, Karsten Knese, Shane Loretz\n```\n\n----------------------------------------\n\nTITLE: Creating Demo Directory for Security Files\nDESCRIPTION: Creates a directory (`sros2_demo`) to store the security artifacts generated during the tutorial. Commands are provided for Linux/macOS (using `mkdir` in the home directory) and Windows (using `md` in `C:\\dev\\ros2`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/sros2_demo\n```\n\nLANGUAGE: bat\nCODE:\n```\nmd C:\\dev\\ros2\\sros2_demo\n```\n\n----------------------------------------\n\nTITLE: Remapping container name and namespace in ROS 2\nDESCRIPTION: This command runs the component container and renames the node using `--ros-args` and `-r __node:=MyContainer` and renames the namespace using `-r __ns:=/ns`. This allows to modify the container's name and namespace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rclcpp_components component_container --ros-args -r __node:=MyContainer -r __ns:=/ns\n```\n\n----------------------------------------\n\nTITLE: Updating setup.py Metadata\nDESCRIPTION: This Python snippet demonstrates how to add or update the `maintainer`, `maintainer_email`, `description`, and `license` fields in the `setup.py` file for the package metadata.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmaintainer='Your Name',\n   maintainer_email='you@email.com',\n   description='Python bag reading tutorial',\n   license='Apache-2.0',\n```\n\n----------------------------------------\n\nTITLE: Adding rclcpp_components Dependency (XML)\nDESCRIPTION: This XML snippet shows how to add a dependency on `rclcpp_components` in the `package.xml` file. This is essential for using ROS2 composition features, allowing the node to be loaded into a container.  It utilizes the `<depend>` tag to declare the dependency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<depend>rclcpp_components</depend>\n```\n\n----------------------------------------\n\nTITLE: Verifying Published Static Transforms by Echoing /tf_static Topic in ROS 2 Console\nDESCRIPTION: Commands to observe the published static transform data on the /tf_static ROS 2 topic. The output reflects a static transform from frame 'world' to child frame 'mystaticturtle' with translation offset Z=1.0 and identity rotation quaternion. Useful for debugging and confirming broadcasted static transforms.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /tf_static\ntransforms:\n- header:\n   stamp:\n      sec: 1622908754\n      nanosec: 208515730\n   frame_id: world\nchild_frame_id: mystaticturtle\ntransform:\n   translation:\n      x: 0.0\n      y: 0.0\n      z: 1.0\n   rotation:\n      x: 0.0\n      y: 0.0\n      z: 0.0\n      w: 1.0\n```\n\n----------------------------------------\n\nTITLE: Run RViz2 in X11 Compatibility Mode\nDESCRIPTION: This command sets the `QT_QPA_PLATFORM` environment variable to `xcb` before running RViz2. This forces RViz2 to use the X11 compatibility mode, which can resolve issues when running RViz2 on a Wayland display system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nQT_QPA_PLATFORM=xcb rviz2\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Tests with BUILD_TESTING in CMake\nDESCRIPTION: Demonstrates wrapping test-related CMake commands (like finding `ament_cmake_gtest` and adding tests with `ament_add_gtest`) within an `if(BUILD_TESTING)` block. This standard practice allows tests to be optionally built and run based on the `BUILD_TESTING` CMake variable, typically controlled by build tools like colcon.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  find_package(ament_cmake_gtest REQUIRED)\n  ament_add_gtest(<tests>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Logging all but the first message in ROS 2 nodes using C++\nDESCRIPTION: Outputs a WARN severity log message every time after the first occurrence at this code location, using ROS 2 C++ logging macros 'RCLCPP_WARN_SKIPFIRST' and 'RCLCPP_WARN_STREAM_SKIPFIRST'. This applies printf-style and stream-style approaches respectively.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n// printf style\nRCLCPP_WARN_SKIPFIRST(node->get_logger(), \"My log message %d\", 4);\n\n// C++ stream style\nRCLCPP_WARN_STREAM_SKIPFIRST(node->get_logger(), \"My log message \" << 4);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom RViz Panel Class - C++\nDESCRIPTION: This C++ header defines the DemoPanel class, inheriting from rviz_common::Panel to allow custom UI integration in RViz. Dependencies include rviz_common (for Panel base), Qt (for Q_OBJECT), and standard C++ headers. The file declares essential constructors/destructors. Required for any custom RViz panel plugin. Expects parent QWidget as argument; no other parameters. Must be compiled with Qt's meta-object compiler (moc).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#ifndef RVIZ_PANEL_TUTORIAL__DEMO_PANEL_HPP_\n#define RVIZ_PANEL_TUTORIAL__DEMO_PANEL_HPP_\n\n#include <rviz_common/panel.hpp>\n\nnamespace rviz_panel_tutorial\n{\nclass DemoPanel\n  : public rviz_common::Panel\n{\n  Q_OBJECT\npublic:\n  explicit DemoPanel(QWidget * parent = 0);\n  ~DemoPanel() override;\n};\n}  // namespace rviz_panel_tutorial\n\n#endif  // RVIZ_PANEL_TUTORIAL__DEMO_PANEL_HPP_\n\n```\n\n----------------------------------------\n\nTITLE: Playing a bag and publishing clock message\nDESCRIPTION: This command-line snippet shows how to play a bag file and publish a `/clock` message for simulation time. The first command publishes the clock message at the default rate (40Hz). The second command publishes at a specific rate (100Hz). This enables the bag player to control the simulation time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# Publish at default rate - 40Hz\nros2 bag play my_bag --clock\n\n# Publish at specific rate - 100Hz\nros2 bag play my_bag --clock 100\n```\n\n----------------------------------------\n\nTITLE: Configuring package.xml Dependencies for ROS 2 Action Interface\nDESCRIPTION: XML entries required in package.xml to specify dependencies for generating action interfaces in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<buildtool_depend>rosidl_default_generators</buildtool_depend>\n\n<member_of_group>rosidl_interface_packages</member_of_group>\n```\n\n----------------------------------------\n\nTITLE: Declaring XML Namespace in Xacro\nDESCRIPTION: This XML snippet shows the required namespace declaration at the top of a xacro file.  This namespace is necessary for the file to be parsed correctly and enables the use of xacro features.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<robot xmlns:xacro=\"http://www.ros.org/wiki/xacro\" name=\"firefighter\">\n```\n\n----------------------------------------\n\nTITLE: Modifying rclcpp Logging Macros Format Strings\nDESCRIPTION: Examples showing how to update code to use the new secure logging macros that only accept string literals for format strings, addressing format string attack vulnerabilities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\nconst char *my_const_char_string format = \"Foo\";\nRCLCPP_DEBUG(get_logger(), my_const_char_string);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nconst char *my_const_char_string format = \"Foo\";\nRCLCPP_DEBUG(get_logger(), \"%s\", my_const_char_string);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nRCLCPP_DEBUG(get_logger(), \"Foo\");\n```\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string my_std_string = \"Foo\";\nRCLCPP_DEBUG(get_logger(), my_std_string);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string my_std_string = \"Foo\";\nRCLCPP_DEBUG(get_logger(), \"%s\", my_std_string.c_str());\n```\n\n----------------------------------------\n\nTITLE: Registering and Opening a ROS 2 Bag Topic Using rosbag2_cpp in C++\nDESCRIPTION: This C++ statement demonstrates how to open a ROS 2 bag file and register a topic named \"synthetic\" with the rosbag2_cpp Writer. The topic is assigned type \"example_interfaces/msg/Int32\" and uses the serialization format returned by rmw_get_serialization_format. This is necessary when writing serialized messages without topic info. Applicable dependencies and prerequisites include an initialized rosbag2_cpp Writer. The operation must be performed before any data is written to the bag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nwriter_->open(\"timed_synthetic_bag\");\n```\n\nLANGUAGE: C++\nCODE:\n```\nwriter_->create_topic(\n{\n  0u,\n  \"synthetic\",\n  \"example_interfaces/msg/Int32\",\n  rmw_get_serialization_format(),\n  {},\n  \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching to Running Python ROS 2 Node with PyCharm Debugger\nDESCRIPTION: Shows the command to run a ROS 2 Python node normally and the instructions to use PyCharm's \"Attach to Process...\" feature to connect the debugger to the running node process for breakpoint debugging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run my_node main\n```\n\n----------------------------------------\n\nTITLE: Example of updating subscription creation to specify QoS\nDESCRIPTION: This diff demonstrates updating subscription creation to specify QoS with a depth of 10, replacing older signatures that lacked QoS parameters. It encourages best practices for setting quality of service policies in ROS2 subscriptions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- sub_ = create_subscription<std_msgs::msg::String>(\"chatter\", callback);\n+ sub_ = create_subscription<std_msgs::msg::String>(\"chatter\", 10, callback);\n```\n\n----------------------------------------\n\nTITLE: Launching a Native Executable with GDB and Arguments\nDESCRIPTION: This bash command starts GDB for a native executable, setting up immediate execution with the provided arguments. Intended for use with standalone (non-ROS) C++ programs. Prerequisites: GDB installed, a compiled executable with debug symbols. Inputs: /path/to/exe/program (the binary to debug). Outputs: drops the user into an interactive GDB session ready to catch crashes and backtraces. Not directly suitable for ROS 2 commands due to environment issues.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gdb ex run --args /path/to/exe/program\n```\n\n----------------------------------------\n\nTITLE: ROS2 Cyclic Pipeline Demonstration for Incremental Message Passing in C++\nDESCRIPTION: This code demonstrates a cyclic intra-process communication setup where a node receives an integer message, waits for 1 second, modifies the message by incrementing its data, and publishes it back, creating a message loop with zero-copy efficiency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <cinttypes>\n#include <cstdio>\n#include <memory>\n#include <string>\n#include <utility>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/int32.hpp\"\n\nusing namespace std::chrono_literals;\n\n// Node that receives an Int32, waits, then increments and redistributes it.\nstruct IncrementerPipe : public rclcpp::Node\n{\n  IncrementerPipe(const std::string & name, const std::string & in, const std::string & out)\n  : Node(name, rclcpp::NodeOptions().use_intra_process_comms(true))\n  {\n    pub = this->create_publisher<std_msgs::msg::Int32>(out, 10);\n    std::weak_ptr<std::remove_pointer<decltype(pub.get())>::type> captured_pub = pub;\n    sub = this->create_subscription<std_msgs::msg::Int32>(in, 10,\n      [captured_pub](std_msgs::msg::Int32::UniquePtr msg) {\n        auto pub_ptr = captured_pub.lock();\n        if (!pub_ptr) {\n          return;\n        }\n        printf(\"Received message with value: %d, address: 0x%\" PRIXPTR \"\\n\", msg->data,\n          reinterpret_cast<std::uintptr_t>(msg.get()));\n        printf(\"  sleeping for 1 second...\\n\");\n        rclcpp::sleep_for(1s);\n        printf(\"  done.\\n\");\n        msg->data++;\n        printf(\"Incrementing and sending with value: %d, address: 0x%\" PRIXPTR \"\\n\", msg->data, reinterpret_cast<std::uintptr_t>(msg.get()));\n        pub_ptr->publish(std::move(msg));\n      });\n  }\n  rclcpp::Publisher<std_msgs::msg::Int32>::SharedPtr pub;\n  rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr sub;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding and Installing a C++ Executable to CMakeLists for ROS 2\nDESCRIPTION: This CMake code snippet demonstrates how to add a new executable target (\"data_generator_node\") for building the previously shown C++ file and links it against the required ROS 2, rosbag2_cpp, and example_interfaces libraries. The install command configures installation of the executable binary into the proper output directory. Prerequisites include an existing CMake project with all dependencies configured.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_11\n\nLANGUAGE: Console\nCODE:\n```\nadd_executable(data_generator_node src/data_generator_node.cpp)\ntarget_link_libraries(data_generator_node PUBLIC rclcpp::rclcpp rosbag2_cpp::rosbag2_cpp ${example_interfaces_TARGETS})\n\ninstall(TARGETS\n  data_generator_node\n  DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Running a Python listener - Bash\nDESCRIPTION: This command runs the Python listener node from the demo_nodes_py package, subscribing to messages published by the talker node. It demonstrates the communication between C++ and Python nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Declare ROS 2 String Message - C++\nDESCRIPTION: This code snippet shows how to declare a ROS 2 String message using rclcpp and std_msgs, replacing the ROS 1 declaration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n//  std_msgs::String msg;\n  std_msgs::msg::String msg;\n```\n\n----------------------------------------\n\nTITLE: Remapping cmd_vel topic for second teleop node\nDESCRIPTION: This command runs a second turtle_teleop_key node and remaps its 'cmd_vel' topic to control a different turtle (turtle2).  This allows independent control of two turtles. Requires ROS 2 environment setup and a running turtlesim and at least one other teleop key instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Sourcing Setup File (Windows CMD)\nDESCRIPTION: Executes the generated batch setup script located in the 'install' directory using the 'call' command in the Windows Command Prompt. This updates the current command prompt session's environment to recognize the built ROS 2 packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ call install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Running RQt Python Console Plugin\nDESCRIPTION: This command runs the RQt Python Console plugin in a standalone window. It's a specific example of launching an RQt plugin, demonstrating how to access individual tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-RQt.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rqt_py_console rqt_py_console\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS UDP Max Datagram Size\nDESCRIPTION: Sets the system-wide maximum UDP datagram size on macOS to a larger value, which might be necessary for ROS2 demos involving large messages like images to prevent errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w net.inet.udp.maxdgram=65500\n```\n\n----------------------------------------\n\nTITLE: Complex Service Definition in ROS 2\nDESCRIPTION: A more complex example of a ROS 2 service definition showing constants, fields, references to other message types, and package references in both request and response sections.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# request constants\nint8 FOO=1\nint8 BAR=2\n# request fields\nint8 foobar\nanother_pkg/AnotherMessage msg\n---\n# response constants\nuint32 SECRET=123456\n# response fields\nanother_pkg/YetAnotherMessage val\nCustomMessageDefinedInThisPackage value\nuint32 an_integer\n```\n\n----------------------------------------\n\nTITLE: Source ROS 2 Setup File\nDESCRIPTION: This command sources the ROS 2 setup file to configure the environment variables required to run ROS 2 commands and applications. It uses the `source` command (shorthand `.`) to execute the setup script.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\n. ~/ros2_{DISTRO}/ros2-linux/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Validating XML Governance Policy S/MIME Signature with OpenSSL - bash\nDESCRIPTION: This snippet verifies the integrity and authenticity of a domain governance policy file (in S/MIME format) using OpenSSL in a bash shell. It requires the presence of the 'governance.p7s' signed policy file and the Permissions CA certificate ('permissions_ca.cert.pem'). The command outputs the content of the signed XML document and prints 'Verification successful' if the signature is valid. Ensure proper directory context and necessary files before running the command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl smime -verify -in governance.p7s -CAfile ../public/permissions_ca.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Specifying C++14 Standard for Eclipse Indexer - Bash\nDESCRIPTION: This snippet shows the exact compiler flag needed to set the C++ language standard to C++14 using the Eclipse Indexer settings. It is entered into the 'command to get compiler specs' textbox under C++General->Preprocessor includes in Eclipse. There are no other dependencies, but the project must be using CMake with C++ sources. Input is not applicable—this is a flag; output is the Eclipse indexer correctly parsing C++14 code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-std=c++14\n```\n\n----------------------------------------\n\nTITLE: Including Version Header in C Code\nDESCRIPTION: Shows how to include the version header generated by ament_generate_version_header in C code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <my_project/version.h>\n```\n\n----------------------------------------\n\nTITLE: Setting up ROS2 Environment in PowerShell\nDESCRIPTION: Command to source the ROS2 setup script in a PowerShell environment, which sets the necessary environment variables for running ROS2 commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n.\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Attaching Mesh Geometry to a Link in URDF - XML\nDESCRIPTION: This snippet details how to specify a mesh file as geometry for a link, particularly for a gripper, using URDF in XML format. It uses the <mesh> tag with a 'filename' attribute pointing to a package-relative path, and includes an <origin> tag to set the pose. Requires the mesh file to exist at the specified path and the 'urdf_tutorial' package to be present. Key parameters are the 'filename' and optional pose parameters. The snippet outputs a visually rich link using external geometry. The mesh format (e.g., DAE) may include embedded color data, which can override the need for a separate material tag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<link name=\"left_gripper\">\n  <visual>\n    <origin rpy=\"0.0 0 0\" xyz=\"0 0 0\"/>\n    <geometry>\n      <mesh filename=\"package://urdf_tutorial/meshes/l_finger.dae\"/>\n    </geometry>\n  </visual>\n</link>\n\n```\n\n----------------------------------------\n\nTITLE: Launching webots_ros2 Universal Robot Example (WSL)\nDESCRIPTION: Uses the `ros2 launch` command to start the `multirobot_launch.py` launch file from the `webots_ros2_universal_robot` package within WSL. Requires the ROS 2 environment (and local workspace, if applicable) to be sourced, and potentially `WEBOTS_HOME` to be set.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch webots_ros2_universal_robot multirobot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Adjusting memlock permissions\nDESCRIPTION: This bash code snippet shows how to modify the /etc/security/limits.conf file to increase the memlock limit for a given user. This is a crucial step for enabling real-time performance by allowing the demo to lock memory into RAM and prevent page faults. The user's username and a memory limit in kB needs to be specified.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Real-Time-Programming.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<your username>    -   memlock   <limit in kB>\n```\n\n----------------------------------------\n\nTITLE: Echoing Service Events with ros2 service (Console)\nDESCRIPTION: This snippet demonstrates how to use 'ros2 service echo' with the --flow-style flag to monitor introspection events for a specific service (here, /add_two_ints). Output includes event types (e.g., REQUEST_SENT), timestamps, client identifiers, sequence numbers, request and response payloads. Dependencies include a running ROS 2 system with Service Introspection enabled. This command is used for debugging service communications; input is a service name and output is a stream of service event data. Only available when introspection is enabled on both client and server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service echo --flow-style /add_two_ints\ninfo:\n  event_type: REQUEST_SENT\n  stamp:\n    sec: 1713995389\n    nanosec: 386809259\n  client_gid: [1, 15, 96, 219, 162, 1, 108, 201, 0, 0, 0, 0, 0, 0, 21, 3]\n  sequence_number: 133\nrequest: [{a: 2, b: 3}]\nresponse: []\n---\n```\n\n----------------------------------------\n\nTITLE: Including Header for Contact Message - C++\nDESCRIPTION: This code snippet illustrates including the header file for the `Contact` message, which is used within the custom `AddressBook` message. This allows the publisher to use the `Contact` type when creating and populating the `address_book`. Before using this, ensure that the necessary dependencies are set up correctly, including the correct ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\n#include \"rosidl_tutorials_msgs/msg/contact.hpp\"\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 C++ Talker Demo Node in Bash\nDESCRIPTION: Executes the `talker` node from the `demo_nodes_cpp` package using the `ros2 run` command. This node publishes messages and is used for testing communication, typically in conjunction with a `listener` node. Requires the ROS 2 environment to be sourced.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Discovery Variables in Bash (macOS)\nDESCRIPTION: Shows how to configure the `ROS_AUTOMATIC_DISCOVERY_RANGE` to `LOCALHOST` and specify static peers via `ROS_STATIC_PEERS` in a macOS Bash shell. Includes commands for temporary session setting and permanent configuration via `.bash_profile`. Requires a Bash shell environment on macOS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Improved-Dynamic-Discovery.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST\n$ export ROS_STATIC_PEERS='192.168.0.1;remote.com'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"export ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST\" >> ~/.bash_profile\n$ echo \"export ROS_STATIC_PEERS='192.168.0.1;remote.com'\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image from Dockerfile - Docker - console\nDESCRIPTION: This snippet demonstrates how to create a Docker image by building from a Dockerfile in the current directory using the docker build command. The main dependency is a valid Dockerfile present in the specified directory. The expected result is a new local Docker image with a unique image ID, which can be used for further container runs or pushed to a registry. Input is the command in a terminal, output is a sequence of build messages and image confirmation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build .\n\n~ You will see a bunch of lines that execute the docker file instructions followed by:\n\nSuccessfully built 0dc6ce7cb487\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Introspection Parameters\nDESCRIPTION: Commands for setting the client_configure_introspection parameter to control introspection behavior. Options include 'contents' for full data, 'metadata' for headers only, or 'disabled' to turn off introspection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n### User data contents with metadata\nros2 param set /introspection_client client_configure_introspection contents\n### Or only metadata\nros2 param set /introspection_client client_configure_introspection metadata\n### To disable\nros2 param set /introspection_client client_configure_introspection disabled\n```\n\n----------------------------------------\n\nTITLE: Running the Kobuki emulator node\nDESCRIPTION: Command to run the Python script that emulates the Kobuki robot's sensor data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Shell D:\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS 2 from source:\n# . <workspace-with-bridge>/install/setup.bash\npython3 emulate_kobuki_node.py\n```\n\n----------------------------------------\n\nTITLE: Sourcing Workspace Setup Files (Windows PowerShell)\nDESCRIPTION: Sources the ROS 2 workspace setup file (`setup.ps1`) in Windows PowerShell to make the built packages and environment variables available. Execute this command from the workspace root.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ .\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Assigning Shared Reentrant Callback Group - Python\nDESCRIPTION: This snippet creates a Reentrant callback group instance and assigns it to both the client callback group (`client_cb_group`) and the timer callback group (`timer_cb_group`). Both the client and timer will use the same shared reentrant group, allowing multiple callbacks within this group to be executed concurrently.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclient_cb_group = ReentrantCallbackGroup()\ntimer_cb_group = client_cb_group\n```\n\n----------------------------------------\n\nTITLE: Playing Back a ROS2 Bag Using the Console - Console\nDESCRIPTION: This command replays a recorded ROS2 bag file named \"big_synthetic_bag\" using the ROS2 CLI tool. The 'ros2 bag play' command requires the path or name of the bag to play as its parameter. The playback rate matches the time stamps recorded in the bag, not the speed at which the bag was originally created. Ensure that ROS2 and the ros2bag CLI tool are installed before running this command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play big_synthetic_bag\n```\n\n----------------------------------------\n\nTITLE: Passing ROS Arguments to Node Actions - XML Launch File\nDESCRIPTION: Shows how to provide ROS-specific node arguments directly to a node in an XML launch file without needing to use the --ros-args flag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <node pkg=\"demo_nodes_cpp\" exec=\"talker\" ros_args=\"--log-level debug\" />\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Running Minimal ROS 2 C++ Nodes Example - Console\nDESCRIPTION: These commands launch two example ROS 2 nodes (a listener and a talker) from the demo_nodes_cpp package in the background within a single container session. The 'listener' subscribes to a topic, while the 'talker' publishes to the same topic, demonstrating inter-process communication inside the container. The first command launches the listener in the background, while the second starts the talker in the foreground.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp listener &\n$ ros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Process (CMakeLists.txt)\nDESCRIPTION: This CMake snippet defines the build process for the RViz plugin.  It uses `ament_cmake_ros`, `pluginlib`, and `rviz_common`. It includes generating Qt files using `CMAKE_AUTOMOC`, linking required libraries and installing the plugin, ensuring that the plugin is built and installed correctly for RViz to find it. Also includes target include directories, and exports.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake_ros REQUIRED)\nfind_package(pluginlib REQUIRED)\nfind_package(rviz_common REQUIRED)\nfind_package(rviz_plugin_tutorial_msgs REQUIRED)\n\nset(CMAKE_AUTOMOC ON)\nqt5_wrap_cpp(MOC_FILES\n  include/rviz_plugin_tutorial/point_display.hpp\n)\n\nadd_library(point_display src/point_display.cpp ${MOC_FILES})\ntarget_include_directories(point_display PUBLIC\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:include>\n)\ntarget_link_libraries(point_display PUBLIC\n  pluginlib::pluginlib\n  rviz_common::rviz_common\n  ${rviz_plugin_tutorial_msgs_TARGETS}\n)\ninstall(TARGETS point_display\n        EXPORT export_rviz_plugin_tutorial\n        ARCHIVE DESTINATION lib\n        LIBRARY DESTINATION lib\n        RUNTIME DESTINATION bin\n)\ninstall(DIRECTORY include/\n        DESTINATION include\n)\ninstall(FILES rviz_common_plugins.xml\n        DESTINATION share/${PROJECT_NAME}\n)\nament_export_include_directories(include)\nament_export_targets(export_rviz_plugin_tutorial)\npluginlib_export_plugin_description_file(rviz_common rviz_common_plugins.xml)\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 workspace on Windows\nDESCRIPTION: Command to source the ROS 2 workspace on Windows, setting the environment variables for ROS 2 tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncall <path to ROS 2 install space>/local_setup.bat\n```\n\n----------------------------------------\n\nTITLE: Creating a PointCloud2 Message with Python\nDESCRIPTION: This Python code snippet demonstrates how to create a PointCloud2 message using the `sensor_msgs_py.point_cloud2` module.  It takes a list of points and generates a PointCloud2 message. It uses the `Header` from `std_msgs`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport sensor_msgs_py.point_cloud2\nfrom std_msgs.msg import Header\n\npointlist = [[0.0, 0.1, 0.2]]\n\npointcloud = sensor_msgs_py.point_cloud2.create_cloud_xyz32(Header(frame_id='frame'), pointlist)\n```\n\n----------------------------------------\n\nTITLE: Running Node from Underlay to Confirm Isolation - Console\nDESCRIPTION: This snippet demonstrates running the original turtlesim_node from a terminal that has only the underlay (main ROS 2 installation) sourced. This is used to verify that modifications in the overlay do not affect the underlay environment. The command requires the base ROS 2 installation to be sourced, but not the overlay workspace. Output will be the default turtlesim application, confirming environment isolation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Node Interface Code Example (C++)\nDESCRIPTION: This snippet provides the key parts of the rclcpp::NodeInterfaces example. It defines the `MyNodeInterfaces` type and the `node_info` function that takes this interface as an argument, using the `NodeBaseInterface` and `NodeLoggingInterface` to access and display the node's name, demonstrating how to define and use `NodeInterfaces<>`. It also highlights how to use this approach to simplify the code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Using-Node-Interfaces-Template-Class.rst#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nusing MyNodeInterfaces =\n  rclcpp::node_interfaces::NodeInterfaces<rclcpp::node_interfaces::NodeBaseInterface, rclcpp::node_interfaces::NodeLoggingInterface>;\n\nvoid node_info(MyNodeInterfaces interfaces)\n{\n  auto base_interface = interfaces.get_node_base_interface();\n  auto logging_interface = interfaces.get_node_logging_interface();\n  RCLCPP_INFO(logging_interface->get_logger(), \"Node name: %s\", base_interface->get_name());\n}\n```\n\n----------------------------------------\n\nTITLE: Run Fast DDS Discovery Server (Server 1 for Partitions)\nDESCRIPTION: Starts the first instance of a Fast DDS discovery server for demonstrating network partitions, using server ID 0 and listening on port 11811.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nfastdds discovery --server-id 0 --ip-address 127.0.0.1 --port 11811\n```\n\n----------------------------------------\n\nTITLE: Monitoring Action Communication with ros2 action echo (Console Example)\nDESCRIPTION: This console command demonstrates how to monitor live action communication for the Fibonacci action with introspection turned on using the 'ros2 action echo' tool. The output displays structured messages for goal, result, feedback, and status interfaces, illustrating the real-time communication between action server and client. The example output covers both sent and received requests and responses, helping users debug or analyze their action flows. Requires an active ROS 2 workspace, running action nodes, and introspection enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nros2 action echo /fibonacci example_interfaces/action/Fibonacci --flow-style\n```\n\n----------------------------------------\n\nTITLE: Downloading the Dynamic TF2 Broadcaster Script\nDESCRIPTION: Downloads the `dynamic_frame_tf2_broadcaster.py` script from a GitHub repository using command-line tools. `wget` is typically used on Linux/macOS, while `curl` is used on Windows (both CMD and PowerShell variants shown).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n# Linux / macOS\n$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/dynamic_frame_tf2_broadcaster.py\n```\n\nLANGUAGE: console\nCODE:\n```\n# Windows Command Prompt\n$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/dynamic_frame_tf2_broadcaster.py -o dynamic_frame_tf2_broadcaster.py\n```\n\nLANGUAGE: console\nCODE:\n```\n# Windows PowerShell\n$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/dynamic_frame_tf2_broadcaster.py -o dynamic_frame_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: Enabling Topic Statistics in Subscriber (C++)\nDESCRIPTION: This C++ code snippet demonstrates how to enable topic statistics within a ROS 2 subscriber node. It uses `rclcpp::SubscriptionOptions` to configure topic statistics, specifically enabling the feature and setting the publish period. The subscriber receives and processes string messages, and the topic statistics collect performance data. The code depends on the rclcpp and std_msgs libraries and assumes a basic ROS 2 setup including a publisher and subscriber.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <memory>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"rclcpp/subscription_options.hpp\"\n\n#include \"std_msgs/msg/string.hpp\"\n\nclass MinimalSubscriberWithTopicStatistics : public rclcpp::Node\n{\npublic:\n  MinimalSubscriberWithTopicStatistics()\n  : Node(\"minimal_subscriber_with_topic_statistics\")\n  {\n    // manually enable topic statistics via options\n    auto options = rclcpp::SubscriptionOptions();\n    options.topic_stats_options.state = rclcpp::TopicStatisticsState::Enable;\n\n    // configure the collection window and publish period (default 1s)\n    options.topic_stats_options.publish_period = std::chrono::seconds(10);\n\n    // configure the topic name (default '/statistics')\n    // options.topic_stats_options.publish_topic = \"/topic_statistics\"\n\n    auto callback = [this](std_msgs::msg::String::SharedPtr msg) {\n        this->topic_callback(msg);\n      };\n\n    subscription_ = this->create_subscription<std_msgs::msg::String>(\n      \"topic\", 10, callback, options);\n  }\n\nprivate:\n  void topic_callback(const std_msgs::msg::String::ConstSharedPtr msg) const\n  {\n    RCLCPP_INFO(this->get_logger(), \"I heard: '%s'\", msg->data.c_str());\n  }\n  rclcpp::Subscription<std_msgs::msg::String>::SharedPtr subscription_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<MinimalSubscriberWithTopicStatistics>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining spin_in_background() function to run ROS 2 executor spin loop safely in Python\nDESCRIPTION: Defines the spin_in_background() function which obtains the global executor and calls its spin() method to process callbacks until shutdown. It handles ExternalShutdownException gracefully, enabling background spinning of ROS 2 executors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\ndef spin_in_background():\n    executor = rclpy.get_global_executor()\n    try:\n        executor.spin()\n    except ExternalShutdownException:\n        pass\n```\n\n----------------------------------------\n\nTITLE: Generating Node Keys/Certificates (Enclaves)\nDESCRIPTION: Uses the `ros2 security create_enclave` command to generate specific keys and certificates (an enclave) for individual ROS 2 nodes (`/talker_listener/talker` and `/talker_listener/listener`) within the specified `demo_keystore`. These are essential for nodes to authenticate and establish secure communication channels.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 security create_enclave demo_keystore /talker_listener/talker\nros2 security create_enclave demo_keystore /talker_listener/listener\n```\n\nLANGUAGE: bat\nCODE:\n```\nros2 security create_enclave demo_keystore /talker_listener/talker\nros2 security create_enclave demo_keystore /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Defining Package Repository in ROS Distro YAML\nDESCRIPTION: This YAML template is used to register a package repository within a specific ROS distribution's configuration file (`distribution.yaml`) in the ros/rosdistro repository. It specifies the repository's source URL, the branch to track for releases, a human-readable name, and the package's status within the distribution. Filling this out correctly is crucial for the indexing process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Index-Your-Packages.rst#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nYOUR-REPO-NAME:\n  source:\n    type: git\n    url: https://YOUR-GIT-REPO-URL.git\n    version: YOUR-BRANCH-NAME\n  status: YOUR-STATUS\n```\n\n----------------------------------------\n\nTITLE: Setting up and Running Cyclic ROS2 Pipeline Demo\nDESCRIPTION: Initializes the ROS2 context, creates two IncrementerPipe nodes configured in a cyclic dependency, publishes the initial message to start the cycle, adds nodes to a single-threaded executor, and spins the executor to process callbacks.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n   int main(int argc, char * argv[])\n   {\n     setvbuf(stdout, NULL, _IONBF, BUFSIZ);\n     rclcpp::init(argc, argv);\n     rclcpp::executors::SingleThreadedExecutor executor;\n\n     // Create a simple loop by connecting the in and out topics of two IncrementerPipe's.\n     // The expectation is that the address of the message being passed between them never changes.\n     auto pipe1 = std::make_shared<IncrementerPipe>(\"pipe1\", \"topic1\", \"topic2\");\n     auto pipe2 = std::make_shared<IncrementerPipe>(\"pipe2\", \"topic2\", \"topic1\");\n     rclcpp::sleep_for(1s);  // Wait for subscriptions to be established to avoid race conditions.\n     // Publish the first message (kicking off the cycle).\n     std::unique_ptr<std_msgs::msg::Int32> msg(new std_msgs::msg::Int32());\n     msg->data = 42;\n     printf(\n       \"Published first message with value:  %d, and address: 0x%\" PRIXPTR \"\\n\", msg->data,\n       reinterpret_cast<std::uintptr_t>(msg.get()));\n     pipe1->pub->publish(std::move(msg));\n\n     executor.add_node(pipe1);\n     executor.add_node(pipe2);\n     executor.spin();\n\n     rclcpp::shutdown();\n\n     return 0;\n   }\n```\n\n----------------------------------------\n\nTITLE: Switch to nullptr everywhere.\nDESCRIPTION: This involves changing the code to use `nullptr` instead of `NULL` or `0` wherever possible, improving code readability and modern C++ compliance. It involves the codebase.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Building and Running ROS 2 Package Using colcon and Source Commands\nDESCRIPTION: Shows console commands for building the 'more_interfaces' package (including all platform variants), sourcing the workspace setup scripts, and running the publisher executable to make the custom AddressBook message visible on the ROS 2 network.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/ros2_ws\n$ colcon build --packages-up-to more_interfaces\n```\n\nLANGUAGE: console\nCODE:\n```\n$ source install/local_setup.bash\n$ ros2 run more_interfaces publish_address_book\n```\n\n----------------------------------------\n\nTITLE: Re-running Modified ROS 2 Node to Observe Overlay Effects - Console\nDESCRIPTION: After modifying the turtlesim source in the overlay and rebuilding, this command runs the turtlesim_node again from a terminal where the overlay is sourced. The command demonstrates overlay precedence: changes made in the overlay will be visible, such as a modified window title. It requires building the workspace with colcon after code edits. Inputs are not required; output is the modified turtlesim application window.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Creating Directories for Custom Interface Files\nDESCRIPTION: Commands to create 'msg' and 'srv' directories within the 'tutorial_interfaces' package for storing message and service definition files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir msg srv\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Script in Bash\nDESCRIPTION: Sources the install/setup file for the built ROS 2 workspace, setting environment variables for proper operation of ROS 2 tooling and DDS vendors. Input is the path to the build directory's setup script. Output is an updated shell environment; must be run in each new terminal prior to using ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/install/setup.zsh\n```\n\n----------------------------------------\n\nTITLE: ROS2 Service Client in C++ for AddThreeInts\nDESCRIPTION: Creates a C++ client that calls the 'add_three_ints' service with three integers. It waits for the service to be available, sends the request, and logs the response. It requires arguments for the integers to add.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tutorial_interfaces/srv/add_three_ints.hpp\"  // CHANGE\n\n#include <chrono>\n#include <cstdlib>\n#include <memory>\n\nusing namespace std::chrono_literals;\n\nint main(int argc, char **argv)\n{\n  rclcpp::init(argc, argv);\n  if (argc != 4) {  // CHANGE\n    RCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"usage: add_three_ints_client X Y Z\");  // CHANGE\n    return 1;\n  }\n  auto node = rclcpp::Node::make_shared(\"add_three_ints_client\");  // CHANGE\n  auto client = node->create_client<tutorial_interfaces::srv::AddThreeInts>(\"add_three_ints\");  // CHANGE\n\n  auto request = std::make_shared<tutorial_interfaces::srv::AddThreeInts::Request>();  // CHANGE\n  request->a = std::atoi(argv[1]);  // CHANGE\n  request->b = std::atoi(argv[2]);  // CHANGE\n  request->c = std::atoi(argv[3]);  // CHANGE\n\n  while (!client->wait_for_service(1s)) {\n    if (!rclcpp::ok()) {\n      RCLCPP_ERROR(rclcpp::get_logger(\"rclcpp\"), \"Interrupted while waiting for the service. Exiting.\");\n      return 0;\n    }\n  }\n\n  auto result_ready = false;\n  auto future = client->async_send_request(request);  // CHANGE\n\n  if (rclcpp::spin_until_future_complete(node, future) == rclcpp::FutureReturnCode::SUCCESS) {\n    RCLCPP_INFO(rclcpp::get_logger(\"rclcpp\"), \"Sum: %ld\", future.get()->sum);  // CHANGE\n  } else {\n    RCLCPP_ERROR(rclcpp::get_logger(\"rclcpp\"), \"Failed to call service 'add_three_ints'\");\n  }\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Python Package Entry Points\nDESCRIPTION: Configuration in setup.py to register the obstacle_avoider node as an entry point for the ROS 2 package, making it available as a runnable command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Advanced.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n'console_scripts': [\n    'my_robot_driver = my_package.my_robot_driver:main',\n    'obstacle_avoider = my_package.obstacle_avoider:main',\n],\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Without Instrumentation\nDESCRIPTION: Command to build ROS 2 from source with the TRACETOOLS_DISABLED option set to ON to completely remove both tracepoints and function calls related to tracing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-ROS-2-with-Tracing.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/ros2_{DISTRO}\n$ colcon build --cmake-args -DTRACETOOLS_DISABLED=ON --no-warn-unused-cli\n```\n\n----------------------------------------\n\nTITLE: Running Turtle Teleoperation Node\nDESCRIPTION: Runs the `turtle_teleop_key` node from the `turtlesim` package, allowing manual control of one of the turtles (typically `turtle1`) using keyboard commands in the terminal where it's executed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Webots Plugin in URDF (Python)\nDESCRIPTION: Example XML snippet demonstrating how to pass parameters (e.g., `parameterName` with value `someValue`) to a Python-based Webots ROS 2 plugin within a URDF file using nested tags inside the `<plugin>` tag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<plugin type=\"my_package.my_robot_driver.MyRobotDriver\">\n    <parameterName>someValue</parameterName>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Implementing Visibility Control in C++\nDESCRIPTION: Header file implementing visibility control for cross-platform compatibility, especially for Windows. This handles symbol exporting/importing to ensure proper DLL functionality.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#ifndef CUSTOM_ACTION_CPP__VISIBILITY_CONTROL_H_\n#define CUSTOM_ACTION_CPP__VISIBILITY_CONTROL_H_\n\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n\n// This logic was borrowed (then namespaced) from the examples on the gcc wiki:\n//     https://gcc.gnu.org/wiki/Visibility\n\n#if defined _WIN32 || defined __CYGWIN__\n  #ifdef __GNUC__\n    #define CUSTOM_ACTION_CPP_EXPORT __attribute__ ((dllexport))\n    #define CUSTOM_ACTION_CPP_IMPORT __attribute__ ((dllimport))\n  #else\n    #define CUSTOM_ACTION_CPP_EXPORT __declspec(dllexport)\n    #define CUSTOM_ACTION_CPP_IMPORT __declspec(dllimport)\n  #endif\n  #ifdef CUSTOM_ACTION_CPP_BUILDING_DLL\n    #define CUSTOM_ACTION_CPP_PUBLIC CUSTOM_ACTION_CPP_EXPORT\n  #else\n    #define CUSTOM_ACTION_CPP_PUBLIC CUSTOM_ACTION_CPP_IMPORT\n  #endif\n  #define CUSTOM_ACTION_CPP_PUBLIC_TYPE CUSTOM_ACTION_CPP_PUBLIC\n  #define CUSTOM_ACTION_CPP_LOCAL\n#else\n  #define CUSTOM_ACTION_CPP_EXPORT __attribute__ ((visibility(\"default\")))\n  #define CUSTOM_ACTION_CPP_IMPORT\n  #if __GNUC__ >= 4\n    #define CUSTOM_ACTION_CPP_PUBLIC __attribute__ ((visibility(\"default\")))\n    #define CUSTOM_ACTION_CPP_LOCAL  __attribute__ ((visibility(\"hidden\")))\n  #else\n    #define CUSTOM_ACTION_CPP_PUBLIC\n    #define CUSTOM_ACTION_CPP_LOCAL\n  #endif\n  #define CUSTOM_ACTION_CPP_PUBLIC_TYPE\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif  // CUSTOM_ACTION_CPP__VISIBILITY_CONTROL_H_\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 package (Windows)\nDESCRIPTION: These commands create a new ROS 2 package named 'sync_async_node_example_cpp' with specified build type, license, and dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ md \\ros2_ws\\src\n$ cd \\ros2_ws\\src\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 --dependencies rclcpp std_msgs -- sync_async_node_example_cpp\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Installation Directory - Console\nDESCRIPTION: This snippet creates a directory on the C: drive (C:\\dev) to store the ROS 2 installation files. The Windows path-length limitation is considered by choosing a short directory name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmd C:\\dev\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Development Tools on Ubuntu\nDESCRIPTION: Command to install the development tools needed for building ROS packages and performing other development tasks on Ubuntu.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install ros-dev-tools\n```\n\n----------------------------------------\n\nTITLE: Recording with Regex Topic Selection\nDESCRIPTION: This command-line snippet demonstrates using `ros2 bag record` with the `--regex` option to record only topics matching a specific pattern. The command records only topics containing \"scan\" in their name.  The `--regex` option enables fine-grained topic filtering during recording.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record --regex \"*scan*\"\n```\n\n----------------------------------------\n\nTITLE: Normalize Quaternion Functionality in tf2_eigen in C++\nDESCRIPTION: Provides quaternion normalization within tf2_eigen, addressing Unicode warnings and adding helper references for transformations. Dependencies include Eigen and tf2. It improves numerical stability for rotation calculations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_63\n\nLANGUAGE: C++\nCODE:\n```\n# Normalize quaternions within tf2_eigen\n# Fix clang build warnings\n# Add reference comments for twist transformations\n\n```\n\n----------------------------------------\n\nTITLE: Launching Talker Node in Separate Docker Container - Console\nDESCRIPTION: This command runs the ROS 2 talker node from the demo_nodes_cpp package in a new, single-use Docker container. It uses the '--rm' flag to automatically remove the container upon exit and launches the talker executable directly. Replace \"{DISTRO}\" as needed. It requires a separate container to be running a corresponding listener node for communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm osrf/ros:{DISTRO}-desktop ros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Setting WEBOTS_HOME Environment Variable - Console\nDESCRIPTION: Configures the shell to use a specific Webots installation for all subsequent ROS 2 interactions. Requires Webots installed at /usr/local/webots or other desired location. Exporting this variable overrides default package search logic and is useful for managing multiple installations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nexport WEBOTS_HOME=/usr/local/webots\n```\n\n----------------------------------------\n\nTITLE: Launch RViz with Predefined Configuration (Python)\nDESCRIPTION: This launch file initiates RViz with a specified configuration file from the package, setting up the visualization environment with a top-down view, world frame, and TF visualization enabled. It facilitates visual monitoring of TF frames and turtle positions in the simulation environment, aiding debugging and analysis.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# turtlesim_rviz_launch.py\nimport launch\nimport launch_ros.actions\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch_ros.actions.Node(\n            package='rviz2',\n            executable='rviz2',\n            arguments=['-d', '$(find turtle_tf2_py)/launch/turtle_tf2_py.rviz'],\n            name='rviz',\n            output='screen'\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Launching webots_ros2_universal_robot ROS 2 Package in VM - Shell Commands\nDESCRIPTION: Commands to launch the webots_ros2_universal_robot example package inside the VM after setting up environment variables and sourcing necessary ROS 2 workspaces. This includes sourcing the base ROS 2 installation, optionally sourcing the locally built ROS 2 workspace if installed from source, exporting the shared folder environment variable, and finally launching the package with ros2 launch. This snippet assumes prior installation and setup of webots_ros2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\ncd ~/ros2_ws\nsource install/local_setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\nexport WEBOTS_SHARED_FOLDER=/Users/username/shared:/home/ubuntu/shared\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 launch webots_ros2_universal_robot multirobot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Unlink Homebrew Libraries\nDESCRIPTION: This command unlinks the `libpng`, `libtiff`, and `libjpeg` libraries from Homebrew to resolve symbol not found errors during building when these libraries are installed with Homebrew. It's a temporary workaround that requires updating OpenCV afterwards.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ brew unlink libpng libtiff libjpeg\n```\n\n----------------------------------------\n\nTITLE: Monitoring Another Node's Parameter (Python)\nDESCRIPTION: Modifies the node's constructor (`__init__`) to add another parameter callback. This new callback monitors the parameter named 'a_double_param' on a *different* node, specified as 'parameter_blackboard', demonstrating how to listen for remote parameter changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\ndef __init__(...):\n        ...\n        self.callback_handle = self.handler.add_parameter_callback(\n            parameter_name=\"a_double_param\",\n            node_name=\"parameter_blackboard\",\n            callback=self.callback,\n        )\n```\n\n----------------------------------------\n\nTITLE: Running Listener Example: bash\nDESCRIPTION: This bash snippet runs the python listener example. It is for the purpose of verifying the correct installation by executing the python listener node and verifying the python API. The script first sources the setup file and then runs the python listener example using ros2 run. Requires sourcing of setup file first.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/ros2-linux/setup.bash\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Bloom Release Command in Bash\nDESCRIPTION: This command initiates the bloom release process for a ROS package.  It uses the `bloom-release` tool with the specified ROS distribution and repository name. It assumes bloom is installed and configured to access the rosdistro repository.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Subsequent-Releases.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bloom-release --rosdistro {DISTRO} my_repo\n```\n\n----------------------------------------\n\nTITLE: Creating Mutually Exclusive Callback Group and Subscription in C++\nDESCRIPTION: This code snippet demonstrates how to create a mutually exclusive callback group in C++ using `create_callback_group` and how to assign it to a subscription using `rclcpp::SubscriptionOptions`. The subscription is created for the `/topic` topic with `Int32` messages and a callback function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nmy_callback_group = create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\n\nrclcpp::SubscriptionOptions options;\noptions.callback_group = my_callback_group;\n\nmy_subscription = create_subscription<Int32>(\"/topic\", rclcpp::SensorDataQoS(),\n                                                    callback, options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Node in C++\nDESCRIPTION: Provides the complete source code for the ROS 2 C++ service node. It includes necessary headers, defines the service callback function 'handle_service' to perform addition, and sets up the main function to initialize ROS 2, create a node, create and advertise the service, and spin the node to process requests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n#include <cinttypes>\n#include <memory>\n\n#include \"example_interfaces/srv/add_two_ints.hpp\"\n#include \"rclcpp/rclcpp.hpp\"\n\nusing AddTwoInts = example_interfaces::srv::AddTwoInts;\nrclcpp::Node::SharedPtr g_node = nullptr;\n\nvoid handle_service(\n  const std::shared_ptr<rmw_request_id_t> request_header,\n  const std::shared_ptr<AddTwoInts::Request> request,\n  const std::shared_ptr<AddTwoInts::Response> response)\n{\n  (void)request_header;\n  RCLCPP_INFO(\n    g_node->get_logger(),\n    \"request: %\" PRId64 \" + %\" PRId64, request->a, request->b);\n  response->sum = request->a + request->b;\n}\n\nint main(int argc, char ** argv)\n{\n  rclcpp::init(argc, argv);\n  g_node = rclcpp::Node::make_shared(\"minimal_service\");\n  auto server = g_node->create_service<AddTwoInts>(\"add_two_ints\", handle_service);\n  rclcpp::spin(g_node);\n  rclcpp::shutdown();\n  g_node = nullptr;\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MyRobotDriver Plugin Header (C++)\nDESCRIPTION: Header file (`MyRobotDriver.hpp`) defining the `MyRobotDriver` C++ class, which inherits from `webots_ros2_driver::PluginInterface`. It declares the required `init` and `step` methods, along with private helper functions, callbacks, and member variables for controlling the robot in Webots.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Content of Code/MyRobotDriver.hpp\n```\n\n----------------------------------------\n\nTITLE: Creating CMake Package with Node\nDESCRIPTION: Creates a new ROS2 CMake package named 'my_package' with a simple 'Hello World' node called 'my_node' and sets the license to 'Apache-2.0'. Requires ROS2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 --node-name my_node my_package\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Rotation in Python with Quaternion Multiplication\nDESCRIPTION: Defines a function to multiply two quaternions in Python and demonstrates how to find the relative rotation quaternion between two orientations by multiplying the target quaternion with the inverse of the initial quaternion.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef quaternion_multiply(q0, q1):\n    \"\"\"\n    Multiplies two quaternions.\n\n    Input\n    :param q0: A 4 element array containing the first quaternion (w, x, y, z)\n    :param q1: A 4 element array containing the second quaternion (w, x, y, z)\n\n    Output\n    :return: A 4 element array containing the final quaternion\n    \"\"\"\n    w0, x0, y0, z0 = q0\n    w1, x1, y1, z1 = q1\n\n    q0q1_w = w0*w1 - x0*x1 - y0*y1 - z0*z1\n    q0q1_x = w0*x1 + x0*w1 + y0*z1 - z0*y1\n    q0q1_y = w0*y1 - x0*z1 + y0*w1 + z0*x1\n    q0q1_z = w0*z1 + x0*y1 - y0*x1 + z0*w1\n\n    return [q0q1_w, q0q1_x, q0q1_y, q0q1_z]\n```\n\n----------------------------------------\n\nTITLE: Building the Workspace with colcon - Console\nDESCRIPTION: Invokes colcon build in the workspace to compile all source packages. Requires prior setup of sources and dependencies. Upon success, creates a build/install structure for the ROS 2 workspace at ~/ros2_ws. Outputs built libraries and executables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncolcon build\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies with APT for ROS 2 (Bash)\nDESCRIPTION: This Bash command installs required utilities for building custom Debian packages for ROS 2 using apt. The command requires superuser privileges and will fetch and install python3-bloom, python3-rosdep, fakeroot, debhelper, and dh-python. Ensure that the system has apt and sudo configured before execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-a-Custom-Deb-Package.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-bloom python3-rosdep fakeroot debhelper dh-python\n```\n\n----------------------------------------\n\nTITLE: ROS 2 ros2cli Command Workaround to Bypass Daemon on Windows\nDESCRIPTION: Provides a bash snippet that disables the daemon in ros2cli commands on Windows platforms to avoid slowdowns caused by the daemon process. This is a temporary workaround until the related issue is resolved. Users can add the '--no-daemon' flag to CLI commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nros2 topic list --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Running the Content Filtering Publisher in Bash\nDESCRIPTION: This bash command shows how to run the `content_filtering_publisher` executable, which is part of the `demo_nodes_cpp` package. It is assumed that the ROS 2 environment has been set up correctly, which is a prerequisite before running the node. The output will show the publisher's messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Content-Filtering-Subscription.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp content_filtering_publisher\n[INFO] [1651094594.822753479] [content_filtering_publisher]: Publishing: '-100.000000'\n[INFO] [1651094595.822723857] [content_filtering_publisher]: Publishing: '-90.000000'\n[INFO] [1651094596.822752996] [content_filtering_publisher]: Publishing: '-80.000000'\n[INFO] [1651094597.822752475] [content_filtering_publisher]: Publishing: '-70.000000'\n[INFO] [1651094598.822721485] [content_filtering_publisher]: Publishing: '-60.000000'\n[INFO] [1651094599.822696188] [content_filtering_publisher]: Publishing: '-50.000000'\n[INFO] [1651094600.822699217] [content_filtering_publisher]: Publishing: '-40.000000'\n[INFO] [1651094601.822744113] [content_filtering_publisher]: Publishing: '-30.000000'\n[INFO] [1651094602.822694805] [content_filtering_publisher]: Publishing: '-20.000000'\n[INFO] [1651094603.822735805] [content_filtering_publisher]: Publishing: '-10.000000'\n[INFO] [1651094604.822722094] [content_filtering_publisher]: Publishing: '0.000000'\n[INFO] [1651094605.822699960] [content_filtering_publisher]: Publishing: '10.000000'\n[INFO] [1651094606.822748946] [content_filtering_publisher]: Publishing: '20.000000'\n[INFO] [1651094607.822694017] [content_filtering_publisher]: Publishing: '30.000000'\n[INFO] [1651094608.822708798] [content_filtering_publisher]: Publishing: '40.000000'\n[INFO] [1651094609.822692417] [content_filtering_publisher]: Publishing: '50.000000'\n[INFO] [1651094610.822696426] [content_filtering_publisher]: Publishing: '60.000000'\n[INFO] [1651094611.822751913] [content_filtering_publisher]: Publishing: '70.000000'\n[INFO] [1651094612.822692231] [content_filtering_publisher]: Publishing: '80.000000'\n[INFO] [1651094613.822745549] [content_filtering_publisher]: Publishing: '90.000000'\n[INFO] [1651094614.822701982] [content_filtering_publisher]: Publishing: '100.000000'\n[INFO] [1651094615.822691465] [content_filtering_publisher]: Publishing: '110.000000'\n[INFO] [1651094616.822649070] [content_filtering_publisher]: Publishing: '120.000000'\n[INFO] [1651094617.822693616] [content_filtering_publisher]: Publishing: '130.000000'\n[INFO] [1651094618.822691832] [content_filtering_publisher]: Publishing: '140.000000'\n[INFO] [1651094619.822688452] [content_filtering_publisher]: Publishing: '150.000000'\n[INFO] [1651094620.822645327] [content_filtering_publisher]: Publishing: '-100.000000'\n[INFO] [1651094621.822689219] [content_filtering_publisher]: Publishing: '-90.000000'\n[INFO] [1651094622.822694292] [content_filtering_publisher]: Publishing: '-80.000000'\n[...]\n```\n\n----------------------------------------\n\nTITLE: Registering a Resource in CMake\nDESCRIPTION: This CMake function registers a resource within the ament index. The first, unnamed parameter is the resource's name, which becomes the folder name in the resource index. The `CONTENT` or `CONTENT_FILE` parameter defines the marker file content. Other parameters allow to specify package name, install paths and skipping install. The result is a file named after the PROJECT_NAME being installed to a subfolder of the resource index.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nament_index_register_resource(rviz_ogre_media_exports CONTENT ${OGRE_MEDIA_RESOURCE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting up colcon_cd in macOS - Bash\nDESCRIPTION: Configures the user's shell to support colcon_cd by sourcing the appropriate script and setting _colcon_cd_root in ~/.bashrc. Adjust the root or script path if installed elsewhere. Requires colcon_cd to be installed, and the given lines appended to the user's shell initialization file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\necho \"source /usr/local/share/colcon_cd/function/colcon_cd.sh\" >> ~/.bashrc\necho \"export _colcon_cd_root=~/ros2_install\" >> ~/.bashrc\n\n```\n\n----------------------------------------\n\nTITLE: Debugging ROS 2 Node with GDB (Local GUI) in Python Launch File\nDESCRIPTION: Demonstrates how to configure a ROS 2 launch file node to start within a GDB session running in a separate xterm window. This is useful for local debugging where a graphical interface is available. The `prefix` argument of the `Node` action is used to prepend the command with 'xterm -e gdb -ex run --args'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nprefix=['xterm -e gdb -ex run --args']\n```\n\nLANGUAGE: python\nCODE:\n```\nstart_sync_slam_toolbox_node = Node(\n  parameters=[\n      get_package_share_directory(\"slam_toolbox\") + '/config/mapper_params_online_sync.yaml',\n      {'use_sim_time': use_sim_time}\n  ],\n  package='slam_toolbox',\n  executable='sync_slam_toolbox_node',\n  name='slam_toolbox',\n  prefix=['xterm -e gdb -ex run --args'],  # For interactive GDB in a separate window/GUI\n  output='screen')\n```\n\n----------------------------------------\n\nTITLE: Enabling and Running Encrypted ROS 2 Nodes - bash\nDESCRIPTION: Sets the necessary environment variables (`ROS_SECURITY_KEYSTORE`, `ROS_SECURITY_ENABLE`, `ROS_SECURITY_STRATEGY`) to enable ROS 2 security with the 'Enforce' strategy. It then restarts the `demo_nodes_cpp` talker and listener nodes in separate terminals with these security settings applied.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# In terminal 1:\nexport ROS_SECURITY_KEYSTORE=~/sros2_demo/demo_keystore\nexport ROS_SECURITY_ENABLE=true\nexport ROS_SECURITY_STRATEGY=Enforce\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker\n\n# In terminal 2:\nexport ROS_SECURITY_KEYSTORE=~/sros2_demo/demo_keystore\nexport ROS_SECURITY_ENABLE=true\nexport ROS_SECURITY_STRATEGY=Enforce\nros2 run demo_nodes_cpp listener --ros-args --enclave /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Set Console Output Format (Linux/macOS)\nDESCRIPTION: This command sets the `RCUTILS_CONSOLE_OUTPUT_FORMAT` environment variable and then runs the `logging_demo_main` executable, changing the console output format to include timestamp and location of log calls. This applies to Linux and macOS systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nexport RCUTILS_CONSOLE_OUTPUT_FORMAT=\"[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\"\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Running the camera image publisher\nDESCRIPTION: Command to start the `cam2image` node that publishes webcam images or predefined images when no webcam is connected; it requires no special parameters for basic operation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 run image_tools cam2image\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Introspection in ROS 2 C++ Action Client\nDESCRIPTION: This C++ snippet defines a lambda callback (post_set_parameter_callback) in the FibonacciActionClient class to handle dynamic changes to the 'action_client_configure_introspection' parameter. Depending on the parameter's string value ('disabled', 'metadata', or 'contents'), it updates the introspection state for the action client and configures introspection using the internal client pointer. Requires ROS 2 Galactic or newer, rclcpp, and the action_ros2 API.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace action_tutorials_cpp\n{\nclass FibonacciActionClient : public rclcpp::Node\n...\n    auto post_set_parameter_callback =\n      [this](const std::vector<rclcpp::Parameter> & parameters) {\n        for (const rclcpp::Parameter & param : parameters) {\n          if (param.get_name() != \"action_client_configure_introspection\") {\n            continue;\n          }\n\n          rcl_service_introspection_state_t introspection_state = RCL_SERVICE_INTROSPECTION_OFF;\n\n          if (param.as_string() == \"disabled\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_OFF;\n          } else if (param.as_string() == \"metadata\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_METADATA;\n          } else if (param.as_string() == \"contents\") {\n            introspection_state = RCL_SERVICE_INTROSPECTION_CONTENTS;\n          }\n\n          this->client_ptr_->configure_introspection(\n            this->get_clock(), rclcpp::SystemDefaultsQoS(), introspection_state);\n          break;\n        }\n      };\n...\n```\n\n----------------------------------------\n\nTITLE: Package.xml configuration for parameter tutorial\nDESCRIPTION: XML snippet showing the required fields to be added to the package.xml file, including description, maintainer information, and license.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<description>Python parameter tutorial</description>\n<maintainer email=\"you@email.com\">Your Name</maintainer>\n<license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Creating and populating a std_msgs.msg.String message with current time using f-string in Python\nDESCRIPTION: Demonstrates replacing the ROS 1 way of getting time and formatting strings by using node.get_clock().now() to obtain current time, formatting the string with an f-string, and assigning it to the data field of a std_msgs.msg.String instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nhello_str = String()\nhello_str.data = f'hello world {node.get_clock().now()}'\n```\n\n----------------------------------------\n\nTITLE: Building the 'tutorial_interfaces' Package\nDESCRIPTION: Command to compile the package using 'colcon build', selecting the 'tutorial_interfaces' package. Builds the custom message and service interfaces into usable code for ROS2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select tutorial_interfaces\n```\n\n----------------------------------------\n\nTITLE: Setting Webots Home Environment and Launching Simulation with ROS 2 on WSL using Shell\nDESCRIPTION: Exports the WEBOTS_HOME environment variable pointing to the Webots installation folder on Windows accessible via WSL, sources the ROS 2 workspace local setup script, and launches the robot simulation using ros2 launch. These commands prepare the user environment to start the simulation in WSL ensuring proper Webots path resolution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\n$ export WEBOTS_HOME=/mnt/c/Program\\ Files/Webots\n$ source install/local_setup.bash\n$ ros2 launch my_package robot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Replaying Bagged Service Requests with ros2 bag play (Console)\nDESCRIPTION: This command replays recorded service request events from a bag file using 'ros2 bag play --publish-service-requests'. Requires a valid bag file containing service event data and that the service node is running to receive requests. The output includes status logs for playback and instructions for using keyboard control to pause/resume. On execution, it sends the stored service events back to the ROS 2 network.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play --publish-service-requests <bag_file_name>\n[INFO] [1713997477.870856190] [rosbag2_player]: Set rate to 1\n[INFO] [1713997477.877417477] [rosbag2_player]: Adding keyboard callbacks.\n[INFO] [1713997477.877442404] [rosbag2_player]: Press SPACE for Pause/Resume\n[INFO] [1713997477.877447855] [rosbag2_player]: Press CURSOR_RIGHT for Play Next Message\n[INFO] [1713997477.877452655] [rosbag2_player]: Press CURSOR_UP for Increase Rate 10%\n[INFO] [1713997477.877456954] [rosbag2_player]: Press CURSOR_DOWN for Decrease Rate 10%\n[INFO] [1713997477.877573647] [rosbag2_player]: Playback until timestamp: -1\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Macro in Xacro\nDESCRIPTION: This XML demonstrates how to create parameterized macros.  The `params` attribute within the `<xacro:macro>` tag specifies the parameters (e.g., mass).  These parameters can then be used within the macro definition using `${param_name}`. The `xacro:default_inertial` macro shows use of `mass` parameter and the subsequent calling the macro.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<xacro:macro name=\"default_inertial\" params=\"mass\">\n    <inertial>\n            <mass value=\"${mass}\" />\n            <inertia ixx=\"1e-3\" ixy=\"0.0\" ixz=\"0.0\"\n                 iyy=\"1e-3\" iyz=\"0.0\"\n                 izz=\"1e-3\" />\n    </inertial>\n</xacro:macro>\n\n<xacro:default_inertial mass=\"10\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Description for Pluginlib (XML)\nDESCRIPTION: XML file (`my_robot_driver.xml`) used by `pluginlib` to discover and load the C++ `MyRobotDriver` plugin. It specifies the library path containing the plugin and details about the plugin class, including its type (`my_robot_driver::MyRobotDriver`) and base class type.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n// Content of Code/my_robot_driver.xml\n```\n\n----------------------------------------\n\nTITLE: Pass through CMAKE_{C,CXX}_FLAGS to OGRE build\nDESCRIPTION: This passes through `CMAKE_{C,CXX}_FLAGS` to the Ogre build process. Dependencies: CMake and Ogre build system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Installing Development and ROS Tools on Ubuntu - Bash\nDESCRIPTION: Installs essential build tools and Python requirements for ROS 2 development by updating the system and using apt to install multiple packages. 'colcon', a required build tool for ROS 2, is installed from PyPI via pip rather than the Ubuntu package manager to avoid version conflicts. Prerequisites: Ubuntu 22.04, sudo privileges, internet connection. This sequence does not work if the ROS 2 apt repositories are present, due to package conflicts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt update && sudo apt install -y \\\n  build-essential \\\n  cmake \\\n  git \\\n  python3-flake8 \\\n  python3-flake8-blind-except \\\n  python3-flake8-builtins \\\n  python3-flake8-class-newline \\\n  python3-flake8-comprehensions \\\n  python3-flake8-deprecated \\\n  python3-flake8-docstrings \\\n  python3-flake8-import-order \\\n  python3-flake8-quotes \\\n  python3-pip \\\n  python3-pytest \\\n  python3-pytest-cov \\\n  python3-pytest-repeat \\\n  python3-pytest-rerunfailures \\\n  python3-rosdep \\\n  python3-setuptools \\\n  wget\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install -U colcon-common-extensions vcstool\n```\n\n----------------------------------------\n\nTITLE: Monitoring Service Communication with Introspection\nDESCRIPTION: Command to echo service events with flow style and its example output. The output shows the complete service call lifecycle with REQUEST_SENT, REQUEST_RECEIVED, RESPONSE_SENT, and RESPONSE_RECEIVED events.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nros2 service echo --flow-style /add_two_ints\ninfo:\n  event_type: REQUEST_SENT\n  stamp:\n    sec: 1709432402\n    nanosec: 680094264\n  client_gid: [1, 15, 0, 18, 86, 208, 115, 86, 0, 0, 0, 0, 0, 0, 21, 3]\n  sequence_number: 247\nrequest: []\nresponse: []\n---\ninfo:\n  event_type: REQUEST_RECEIVED\n  stamp:\n    sec: 1709432402\n    nanosec: 680459568\n  client_gid: [1, 15, 0, 18, 86, 208, 115, 86, 0, 0, 0, 0, 0, 0, 20, 4]\n  sequence_number: 247\nrequest: [{a: 2, b: 3}]\nresponse: []\n---\ninfo:\n  event_type: RESPONSE_SENT\n  stamp:\n    sec: 1709432402\n    nanosec: 680765280\n  client_gid: [1, 15, 0, 18, 86, 208, 115, 86, 0, 0, 0, 0, 0, 0, 20, 4]\n  sequence_number: 247\nrequest: []\nresponse: [{sum: 5}]\n---\ninfo:\n  event_type: RESPONSE_RECEIVED\n  stamp:\n    sec: 1709432402\n    nanosec: 681027998\n  client_gid: [1, 15, 0, 18, 86, 208, 115, 86, 0, 0, 0, 0, 0, 0, 21, 3]\n  sequence_number: 247\nrequest: []\nresponse: []\n---\n...\n```\n\n----------------------------------------\n\nTITLE: CMakeLists.txt Configuration (CMake)\nDESCRIPTION: This snippet shows how to add the subscriber node to the CMakeLists.txt file to allow it to be built as an executable. The listener node is created and linked against rclcpp and std_msgs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Topic-Statistics-Tutorial/Topic-Statistics-Tutorial.rst#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(listener_with_topic_statistics src/member_function_with_topic_statistics.cpp)\ntarget_link_libraries(listener_with_topic_statistics rclcpp::rclcpp ${std_msgs_TARGETS})\n\ninstall(TARGETS\n  talker\n  listener\n  listener_with_topic_statistics\n  DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: C++ Publisher Node Implementation in ROS2\nDESCRIPTION: This code defines a minimal ROS2 publisher node using C++ that publishes string messages to a topic named 'topic' every 500 milliseconds. It includes the necessary headers, defines a node class with a timer callback that publishes messages, and contains a main function to initialize and run the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <memory>\n#include <string>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/string.hpp\"\n\nusing namespace std::chrono_literals;\n\nclass MinimalPublisher : public rclcpp::Node\n{\npublic:\n  MinimalPublisher()\n  : Node(\"minimal_publisher\"), count_(0)\n  {\n    publisher_ = this->create_publisher<std_msgs::msg::String>(\"topic\", 10);\n    auto timer_callback =\n      [this]() -> void {\n        auto message = std_msgs::msg::String();\n        message.data = \"Hello, world! \" + std::to_string(this->count_++);\n        RCLCPP_INFO(this->get_logger(), \"Publishing: '%s'\", message.data.c_str());\n        this->publisher_->publish(message);\n      };\n    timer_ = this->create_wall_timer(500ms, timer_callback);\n  }\n\nprivate:\n  rclcpp::TimerBase::SharedPtr timer_;\n  rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;\n  size_t count_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<MinimalPublisher>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing to ROS2 topic\nDESCRIPTION: The `ros2 topic pub` command allows you to publish data to a topic directly from the command line.  This allows the user to manually send messages to a topic and control the actions of other nodes. Various options exist to specify the data to be published using YAML strings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub <topic_name> <msg_type> '<args>'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0}, angular: {z: 1.8}}\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist\n```\n\n----------------------------------------\n\nTITLE: Add rclcpp Dependency - XML\nDESCRIPTION: This XML snippet demonstrates how to add a dependency on rclcpp in the package.xml file for a ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n    <depend>rclcpp</depend>\n```\n\n----------------------------------------\n\nTITLE: Building ros1_bridge Workspace from Source - Bash\nDESCRIPTION: Creates a new ROS workspace directory, clones the ros1_bridge repository from GitHub, and builds it using colcon. The environment for the ROS 2 workspace is sourced before building to ensure proper dependencies are found. Prerequisites: ROS 2 previously built from source, user has permission to write in their home directory, and ROS 1 'ros-core-dev' is installed. This setup enables bridging nodes and messages between ROS 1 and ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p ~/ros1_bridge/src # Create a workspace for the ros1_bridge\n$ cd ~/ros1_bridge/src\n$ git clone https://github.com/ros2/ros1_bridge\n$ cd ~/ros1_bridge\n$. ~/ros2_humble/install/local_setup.bash # Source the ROS 2 workspace\n$ colcon build # Build\n```\n\n----------------------------------------\n\nTITLE: Passing ROS2 Node Arguments Using Command Line - Console\nDESCRIPTION: Demonstrates the syntax to pass ROS-specific arguments to a ROS2 node executable at runtime using the --ros-args flag. This allows configuring node properties such as name, namespace, topic remapping, and parameters. It requires the ros2 command-line tools and assumes correct package and executable names. Inputs are provided as command-line flags following --ros-args, and the output is the behavior modification of the launched node with the specified remappings or parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run my_package node_executable --ros-args ...\n```\n\n----------------------------------------\n\nTITLE: Starting Fibonacci Action Server with Introspection (Bash)\nDESCRIPTION: This demonstrates how to launch the fibonacci_action_server node with action introspection enabled using 'ros2 run' and an extra CLI parameter. It relies on a working ROS 2 installation, the action_tutorials_py package, and requires the --ros-args argument for configuring introspection. No inputs except the CLI flags; the output is a running action server that publishes introspection data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nros2 run action_tutorials_py fibonacci_action_server --ros-args -p action_server_configure_introspection:=contents\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 C++ Listener Demo Node in Bash\nDESCRIPTION: Executes the `listener` node from the `demo_nodes_cpp` package using the `ros2 run` command. This node subscribes to messages published by a corresponding `talker` node, allowing verification of the communication setup. Requires the ROS 2 environment to be sourced.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nros2 run demo_nodes_cpp listener\n```\n\n----------------------------------------\n\nTITLE: Building the workspace with Colcon - Bash\nDESCRIPTION: Builds the ROS 2 workspace using Colcon. The `--symlink-install` option creates symlinks instead of copying files, which allows for faster iteration during development. This command must be run from the root of the workspace (i.e. ros2_ws).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Building Fast DDS from Source using colcon in Bash\nDESCRIPTION: Builds the ROS 2 workspace, including the cloned Fast DDS and `rmw_fastrtps` packages, using `colcon build`. The `--symlink-install` option creates symbolic links instead of copying files, potentially speeding up development iterations. Assumes the command is run from the root of the ROS 2 workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncolcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Node in the rclpy Python Client Library\nDESCRIPTION: This Python snippet demonstrates how to use the wait_for_node method with a rclpy node instance to block execution until another node with a specified fully-qualified name joins the ROS 2 graph. No external dependencies are needed beyond rclpy. The required parameter is the fully-qualified target node name (e.g., '/fully_qualified_node_name'). The method blocks until the node becomes available or times out, facilitating synchronization with dynamic systems. The code must be run within a valid rclpy node context.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nnode.wait_for_node('/fully_qualified_node_name')\n\n```\n\n----------------------------------------\n\nTITLE: Finalizing ROS 2 Lifecycle State Machine Using Stored Allocator in C\nDESCRIPTION: Updated lifecycle state machine finalization function which no longer requires an explicit allocator parameter. The allocator is taken from the stored options struct provided during initialization. This change simplifies the API and manages memory deallocation internally.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nrcl_ret_t\nrcl_lifecycle_state_machine_fini(\n  rcl_lifecycle_state_machine_t * state_machine,\n  rcl_node_t * node_handle);\n```\n\n----------------------------------------\n\nTITLE: Checking the Kernel Version\nDESCRIPTION: Displays the currently running kernel version using uname. Used to verify that the new real-time kernel is running.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n   uname -a\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command creates a Python virtual environment named 'ros2doc'.  A virtual environment helps isolate project dependencies.  It requires Python 3 and the 'venv' module.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python3 -m venv ros2doc  # create venv\n$ source ros2doc/bin/activate  # activate venv\n```\n\n----------------------------------------\n\nTITLE: Building the learning_tf2_cpp Package (Windows)\nDESCRIPTION: Builds the specific ROS 2 package `learning_tf2_cpp` using the `colcon` build tool on Windows. The `--merge-install` flag is often recommended on Windows to avoid potential path length issues.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_13\n\nLANGUAGE: Batch\nCODE:\n```\n$ colcon build --merge-install --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Importing ROS 2 Parameter Event Handler (Python)\nDESCRIPTION: Imports necessary classes and modules from the `rclpy` library, including `Node`, `Parameter`, `ParameterEventHandler`, and `ExternalShutdownException`, required for creating a ROS 2 node and handling parameter events.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nimport rclpy.parameter\n\nfrom rclpy.parameter_event_handler import ParameterEventHandler\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Dockerfile - Docker - bash\nDESCRIPTION: This snippet defines a multi-step Dockerfile for building a ROS 2 (Foxy) environment with demo nodes for C++ and Python, setting the working directory, and specifying the startup command to launch the 'talker_listener_launch.py'. Dependencies include the ros:foxy base image and various ROS 2 demo node packages. Key parameters are the ROS distribution and destination directory. Input is a Dockerfile, output is a reusable container image suitable for local or IBM Cloud deployment. The Dockerfile must be named precisely and placed in the build context directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFROM ros:foxy\n\n# install ros package\nRUN apt-get update && apt-get install -y \\\n      ros-${ROS_DISTRO}-demo-nodes-cpp \\\n      ros-${ROS_DISTRO}-demo-nodes-py && \\\n    rm -rf /var/lib/apt/lists/* && mkdir /ros2_home\n\nWORKDIR /ros2_home\n\n# launch ros package\nCMD [\"ros2\", \"launch\", \"demo_nodes_cpp\", \"talker_listener_launch.py\"]\n```\n\n----------------------------------------\n\nTITLE: Updating ROS 2 CLI Argument Syntax for Node Execution (Console)\nDESCRIPTION: This snippet compares the old and new syntax for launching ROS 2 nodes from the command line, specifically highlighting changes introduced in the Eloquent release. The Dashing syntax uses double underscores for built-in options, while Eloquent and later require explicit --ros-args and new flag names. Dependencies: ROS 2 Eloquent and ros2 CLI tools. Inputs are package and node names along with remapping and parameter files; outputs are equivalent node launch invocations. Ensure your scripts and documentation use the new explicit syntax when targeting Eloquent or newer.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Eloquent-Elusor.rst#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\nros2 run some_package some_node foo:=bar __params:=/path/to/params.yaml __log_level:=WARN --user-flag\n```\n\nLANGUAGE: Console\nCODE:\n```\nros2 run some_package some_node --ros-args --remap foo:=bar --params-file /path/to/params.yaml --log-level WARN -- --user-flag\n```\n\n----------------------------------------\n\nTITLE: Generating C/C++ Header with Version Info in CMake\nDESCRIPTION: Example of using the new ament_generate_version_header function to create a version header from package.xml information. The header is generated and made available to the specified target library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(my_project)\nadd_library(my_lib ...)\nament_generate_version_header(my_lib)\n```\n\n----------------------------------------\n\nTITLE: Downloading the RT-Preempt Patch\nDESCRIPTION: Downloads the RT-Preempt patch for the specified Linux kernel version using wget. Requires wget to be installed and a network connection to the kernel.org mirror.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n   $ wget http://cdn.kernel.org/pub/linux/kernel/projects/rt/5.4/older/patch-5.4.78-rt44.patch.gz\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Package\nDESCRIPTION: This command creates a new ROS2 package using the 'ament_python' build type. It sets the license to 'Apache-2.0' and requires the 'ros2 pkg create' tool.  The package name is a required argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_python --license Apache-2.0 <package_name>\n```\n\n----------------------------------------\n\nTITLE: Handling Node Interfaces with rclcpp C++\nDESCRIPTION: This C++ code demonstrates various overloads of the function do_thing to accept either a NodeGraphInterface, a regular Node, or a LifecycleNode from rclcpp. The approach uses node interface pointers to interact with both Node and LifecycleNode seamlessly, allowing flexible downstream code reuse. Key parameters include node interface pointers, and the code highlights the use of get_node_graph_interface while omitting a shared base class dependency. Limitations include repetitiveness if more interfaces are needed; use the new NodeInterfaces class for a more scalable solution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid do_thing(rclcpp::node_interfaces::NodeGraphInterface graph)\n{\n  fprintf(stderr, \"Doing a thing\\n\");\n}\n\nvoid do_thing(rclcpp::Node::SharedPtr node)\n{\n  do_thing(node->get_node_graph_interface());\n}\n\nvoid do_thing(rclcpp::LifecycleNode::SharedPtr node)\n{\n  do_thing(node->get_node_graph_interface());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Transform Values - Python\nDESCRIPTION: This code snippet shows how to set the transform values for a TransformStamped message.  It sets the timestamp, parent frame ('turtle1'), child frame ('carrot1'), and the translation, setting the y-axis offset to 2 meters.  Rotation is set to the identity quaternion.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nt = TransformStamped()\n\nt.header.stamp = self.get_clock().now().to_msg()\nt.header.frame_id = 'turtle1'\nt.child_frame_id = 'carrot1'\nt.transform.translation.x = 0.0\nt.transform.translation.y = 2.0\nt.transform.translation.z = 0.0\n```\n\n----------------------------------------\n\nTITLE: Checking for ROS 2 Dependencies with rosdep\nDESCRIPTION: This command uses `rosdep` to check and install any missing dependencies for packages within the current workspace (`src` path) for a specific ROS distribution. This step is primarily for Linux systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_15\n\nLANGUAGE: Console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Building the learning_tf2_cpp Package (Linux/macOS)\nDESCRIPTION: Builds the specific ROS 2 package `learning_tf2_cpp` using the `colcon` build tool within the workspace root. This command is suitable for Linux and macOS environments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ colcon build --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Adding Console Script Entry Point in setup.py (Python)\nDESCRIPTION: Shows the specific line to add to the `entry_points` dictionary within the `console_scripts` section of a Python package's `setup.py` file. This makes the `main` function of the `dynamic_frame_tf2_broadcaster` module executable via the `ros2 run` command using the specified script name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n'dynamic_frame_tf2_broadcaster = learning_tf2_py.dynamic_frame_tf2_broadcaster:main',\n```\n\n----------------------------------------\n\nTITLE: Example Kubernetes Deployment YAML for ROS 2 IBM Cloud - Bash\nDESCRIPTION: This is an example of a complete Kubernetes Deployment manifest, deploying a single replica of a ROS 2 Docker image stored at us.icr.io/ros2nasr/ros2foxy:2. All placeholders are replaced with concrete names, suitable for direct deployment. Use this file with kubectl apply -f to spin up the ROS 2 service on IBM Cloud Kubernetes Service. Requires the appropriate image to be available in the specified registry.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ros2-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: ros2-ibmcloud\n  template:\n    metadata:\n      labels:\n        app: ros2-ibmcloud\n    spec:\n      containers:\n      - name: ros2-ibmcloud\n        image: us.icr.io/ros2nasr/ros2foxy:2\n```\n\n----------------------------------------\n\nTITLE: Declare ROS 2 Node Parameter (Python)\nDESCRIPTION: This Python snippet from the `FramePublisher` node shows how to declare and retrieve a string parameter named `turtlename` with a default value of 'turtle'. This parameter determines which turtle's pose topic the node will subscribe to.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nself.turtlename = self.declare_parameter(\n  'turtlename', 'turtle').get_parameter_value().string_value\n```\n\n----------------------------------------\n\nTITLE: Permanent Shared Memory Settings (Console)\nDESCRIPTION: This snippet details how to persistently increase shared memory resources on OSX by editing or creating the /etc/sysctl.conf file. These settings require root privileges and a reboot to take effect.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nkern.sysv.shmmax=419430400\nkern.sysv.shmmin=1\nkern.sysv.shmmni=128\nkern.sysv.shmseg=1024\nkern.sysv.shmall=262144\n```\n\n----------------------------------------\n\nTITLE: Running Static TF2 Broadcaster Node in ROS 2 Using Console\nDESCRIPTION: Executes the static_turtle_tf2_broadcaster node from the 'learning_tf2_cpp' package to publish a static transform for the turtle frame named 'mystaticturtle' placed 1 meter above ground. The positional offset (0,0,1) and zero rotation indicate the turtle's static pose relative to the world frame.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run learning_tf2_cpp static_turtle_tf2_broadcaster mystaticturtle 0 0 1 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Console directive for terminal commands with output\nDESCRIPTION: Demonstrates using the console directive with '$' prefixes to distinguish commands from their output. This is the recommended approach when showing both commands and their resulting output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n$ ros2 run turtlesim turtlesim_node\n[INFO] [1743878028.269334696] [turtlesim]: Starting turtlesim with node name /turtlesim\n[INFO] [1743878028.275096618] [turtlesim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]\n```\n\n----------------------------------------\n\nTITLE: Adding interface type filters\nDESCRIPTION: This adds interface type filters to the `ros2 interface package` command in `ros2interface`, allowing for more specific interface discovery.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_37\n\n\n\n----------------------------------------\n\nTITLE: Illustrating Keystore Directory Structure\nDESCRIPTION: Displays the standard folder structure for a ROS 2 Keystore created by `sros2`. It includes directories for enclaves (containing node-specific security artifacts), private keys (`private/`), and public certificates (`public/`). This structure is fundamental for organizing security components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nkeystore\n├── enclaves\n│   └── ...\n│       └── ...\n├── private\n│   └── ...\n└── public\n    └── ...\n```\n\n----------------------------------------\n\nTITLE: Removing an Imported Webots Node Using ROS 2 Topic Publish Command\nDESCRIPTION: Shows the ROS 2 console command to publish a string message to the /Ros2Supervisor/remove_node topic in order to remove the Webots node named 'imported_robot' from the simulation. It uses the std_msgs/msg/String message type. This assumes the Ros2Supervisor node is running and subscribed to this topic to manage node removals.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub --once /Ros2Supervisor/remove_node std_msgs/msg/String \"{data: imported_robot}\"\n```\n\n----------------------------------------\n\nTITLE: List ROS2 parameters\nDESCRIPTION: This command lists all available parameters in the ROS2 system.  It is used to find the 'my_parameter' that was defined in the 'cpp_parameters' package's node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nros2 param list\n```\n\n----------------------------------------\n\nTITLE: Modifying tf2 Listener C++ Code\nDESCRIPTION: This snippet modifies the `turtle_tf2_listener.cpp` file to introduce and then fix a tf2-related problem. Specifically, it changes the target frame and the time argument used in the `lookupTransform` call, which will lead to transform failures.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n   std::string toFrameRel = \"turtle3\";\n```\n\n----------------------------------------\n\nTITLE: Running Publisher Executable\nDESCRIPTION: This command runs the publisher executable from the examples_rclcpp_minimal_publisher package with wait for all acknowledgements enabled. The publisher sends messages and waits for acknowledgments from all subscribers before shutting down upon receiving a signal (e.g., Ctrl-C).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Wait-for-Acknowledgment.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run examples_rclcpp_minimal_publisher publisher_wait_for_all_acked\n[INFO] [1743121567.030353553] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 0'\n[INFO] [1743121567.530420788] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 1'\n[INFO] [1743121568.030461599] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 2'\n[INFO] [1743121568.530435646] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 3'\n[INFO] [1743121569.030431263] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 4'\n[INFO] [1743121569.530447106] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 5'\n[INFO] [1743121570.030353934] [minimal_publisher_with_wait_for_all_acked]: Publishing: 'Hello, world! 6'\n^C[INFO] [1743121570.344981639] [rclcpp]: signal_handler(signum=2)\n[INFO] [1743121570.345398788] [minimal_publisher_with_wait_for_all_acked]: All subscribers acknowledge messages\n```\n\n----------------------------------------\n\nTITLE: Build Instructions for ROS2 Packages Using colcon\nDESCRIPTION: Provides terminal commands for building ROS2 C++ and Python packages specifically 'cpp_pubsub' and 'py_pubsub'. It includes instructions for Linux/macOS and Windows environments, preparing the workspace for execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select cpp_pubsub\n\n# On Windows:\n$ colcon build --merge-install --packages-select cpp_pubsub\n```\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select py_pubsub\n\n# On Windows:\n$ colcon build --merge-install --packages-select py_pubsub\n```\n\n----------------------------------------\n\nTITLE: Defining Constants with Xacro Properties\nDESCRIPTION: This XML code defines constants using xacro's property mechanism. It uses the `<xacro:property>` tag to assign values to variables (e.g., `width` and `bodylen`), which are then used within the robot's link definitions via `${}` syntax. This enhances readability and maintainability by centralizing the definition of geometric properties.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<xacro:property name=\"width\" value=\"0.2\" />\n<xacro:property name=\"bodylen\" value=\"0.6\" />\n<link name=\"base_link\">\n    <visual>\n        <geometry>\n            <cylinder radius=\"${width}\" length=\"${bodylen}\"/>\n        </geometry>\n        <material name=\"blue\"/>\n    </visual>\n    <collision>\n        <geometry>\n            <cylinder radius=\"${width}\" length=\"${bodylen}\"/>\n        </geometry>\n    </collision>\n</link>\n```\n\n----------------------------------------\n\nTITLE: Initializing WebotsController Node in Launch File (Python)\nDESCRIPTION: Snippet from `robot_launch.py` showing the creation of the `WebotsController` node from the `webots_ros2_driver` package. It configures the node with parameters like `robot_description` (path to URDF) and `robot_name` to connect the ROS 2 driver to the specific robot in the simulation defined in the URDF.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Content of Code/robot_launch.py, lines 17-22, dedent 4\n```\n\n----------------------------------------\n\nTITLE: Unpacking the Kernel Source\nDESCRIPTION: Unpacks the downloaded Linux kernel source archive using tar. Requires tar to be installed on the system. Extracts the kernel source code into a new directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n   $ tar -xzf linux-5.4.78.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining ROS 2 Environment Variables in DSV Hook\nDESCRIPTION: This .dsv.in file defines the same environment variables as the shell script, but in a machine-readable format. It sets the RMW implementation, enables QoS from XML, and defines the default FastRTPS profiles file. The format is 'set;VARIABLE_NAME;value'. This format enables ament to efficiently process these environment variable definitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nset;RMW_IMPLEMENTATION;rmw_fastrtps_cpp\nset;RMW_FASTRTPS_USE_QOS_FROM_XML;1\nset;FASTRTPS_DEFAULT_PROFILES_FILE;my_dds_profile.xml\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Service Node in C++\nDESCRIPTION: This C++ code snippet defines a ROS 2 service node called `ServiceNode` that provides a simple service named `test_service`. The service callback logs a message when a request is received.  It uses the `std_srvs/Empty` service type.  Dependencies include `rclcpp.hpp` and `std_srvs/srv/empty.hpp`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <memory>\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_srvs/srv/empty.hpp\"\n\nusing namespace std::placeholders;\n\nnamespace cb_group_demo\n{\nclass ServiceNode : public rclcpp::Node\n{\npublic:\n    ServiceNode() : Node(\"service_node\")\n    {\n        auto service_callback = [this](\n            const std::shared_ptr<rmw_request_id_t> request_header,\n            const std::shared_ptr<std_srvs::srv::Empty::Request> request,\n            const std::shared_ptr<std_srvs::srv::Empty::Response> response)\n        {\n            (void)request_header;\n            (void)request;\n            (void)response;\n            RCLCPP_INFO(this->get_logger(), \"Received request, responding...\");\n        };\n        service_ptr_ = this->create_service<std_srvs::srv::Empty>(\n                \"test_service\",\n                service_callback\n        );\n    }\n\nprivate:\n    rclcpp::Service<std_srvs::srv::Empty>::SharedPtr service_ptr_;\n\n};  // class ServiceNode\n}   // namespace cb_group_demo\n\nint main(int argc, char* argv[])\n{\n    rclcpp::init(argc, argv);\n    auto service_node = std::make_shared<cb_group_demo::ServiceNode>();\n\n    RCLCPP_INFO(service_node->get_logger(), \"Starting server node, shut down with CTRL-C\");\n    rclcpp::spin(service_node);\n    RCLCPP_INFO(service_node->get_logger(), \"Keyboard interrupt, shutting down.\\n\");\n\n    rclcpp::shutdown();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Running pendulum_demo with a result file\nDESCRIPTION: This command executes the pendulum_demo and specifies a file to write the collected data to.  The -f argument allows the results of the demo execution to be saved to a file. The results can then be analyzed by running a dedicated plotting script.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Real-Time-Programming.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npendulum_demo -f pendulum_demo_results\n```\n\n----------------------------------------\n\nTITLE: Copying the Ubuntu Kernel Config\nDESCRIPTION: Copies the current Ubuntu kernel configuration file to the kernel source directory. This provides a baseline configuration for building the new kernel, inheriting existing settings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n   $ cp /boot/config-5.4.0-54-generic .config\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Dependencies\nDESCRIPTION: Runs the `rosdep` tool to check for and install any missing system dependencies required by packages in the workspace source directory, based on the ROS distribution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro $ROS_DISTRO -y\n```\n\n----------------------------------------\n\nTITLE: Downloading ROS2 Source Code (Linux/macOS)\nDESCRIPTION: Downloads the latest source code for the ROS 2 distribution based on the updated ros2.repos file. The `vcs import` command initializes the `src` directory, and `vcs pull` fetches the latest changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvcs import src < ros2.repos\nvcs pull src\n```\n\n----------------------------------------\n\nTITLE: Use retriever.hpp\nDESCRIPTION: This change involves the utilization of `retriever.hpp` within the packages, likely to provide a mechanism for retrieving data or resources. No specific dependencies are stated but the presence of this suggests there could be a dependency on the library providing `retriever.hpp`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: rosbag2_cpp plugin and data management enhancements\nDESCRIPTION: Includes changelog entries for version bumping, metadata recording, header correctness, message cache optimization, and plugin mechanisms, aiming to improve robustness and feature set of rosbag2 C++ core components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n* Revert \"Add the ability to record any key/value pair in the 'custom' field in metadata.yaml (#976)\" (#984)*\\n* Add the ability to record any key/value pair in the 'custom' field in metadata.yaml (\\#976 <https://github.com/ros2/rosbag2/issues/976>)\\n* Revert \"Add the ability to record any key/value pair in the 'custom' field in metadata.yaml (#976)\" (\\#984 <https://github.com/ros2/rosbag2/issues/984>)\\n* Add the ability to record any key/value pair in the 'custom' field in metadata.yaml (\\#976 <https://github.com/ros2/rosbag2/issues/976>)\\n* Bump version number to avoid conflict\\n* Install headers to include/${PROJECT_NAME} (\\#958 <https://github.com/ros2/rosbag2/issues/958>)\\n* Remove unnecessary public definition. (\\#950 <https://github.com/ros2/rosbag2/issues/950>)\\n* Fix relative path syntax for cpplint (\\#947 <https://github.com/ros2/rosbag2/issues/947>)\\n* Mark up the message_cache with TSA annotations (\\#946 <https://github.com/ros2/rosbag2/issues/946>)\\n* Changes for uncrustify 0.72 (\\#937 <https://github.com/ros2/rosbag2/issues/937>)\\n* Redesign in cache consumer and circular message cache to get rid from busy loop (\\#941 <https://github.com/ros2/rosbag2/issues/941>)\\n* Bugfix for broken bag split when using cache (\\#936 <https://github.com/ros2/rosbag2/issues/936>)\\n* Remove JumpHandler copy-implementation from PlayerClock/TimeControllerClock (\\#935 <https://github.com/ros2/rosbag2/issues/935>)\\n* Auto-detect storage_id for Reader (if possible) (\\#918 <https://github.com/ros2/rosbag2/issues/918>)\\n* Add --start-paused option to ``ros2 bag play`` (\\#904 <https://github.com/ros2/rosbag2/issues/904>)\\n* Use the message_introspection header to get MessageMember. (\\#903 <https://github.com/ros2/rosbag2/issues/903>)\\n* Update package maintainers (\\#899 <https://github.com/ros2/rosbag2/issues/899>)\\n* Fix converter plugin choices for record (\\#897 <https://github.com/ros2/rosbag2/issues/897>)\\n* Enable sanitizers only if code actually can run (\\#572 <https://github.com/ros2/rosbag2/issues/572>)\\n* Need to pass introspection TS to converter plugin for it to be useful (\\#896 <https://github.com/ros2/rosbag2/issues/896>)\\n* Don't preprocess a storage file more than once (\\#895 <https://github.com/ros2/rosbag2/issues/895>)\\n* Fix a bug on invalid pointer address when using \"MESSAGE\" compressio… (\\#866 <https://github.com/ros2/rosbag2/issues/866>)\\n* Metadata per file info (\\#870 <https://github.com/ros2/rosbag2/issues/870>)\\n* Fix TSA warnings when building with clang thread analysis. (\\#877 <https://github.com/ros2/rosbag2/issues/877>)\\n* Implement snapshot mechanism and corresponding ROS Service (\\#850 <https://github.com/ros2/rosbag2/issues/850>)\\n* Circular Message Cache implementation for snapshot feature (\\#844 <https://github.com/ros2/rosbag2/issues/844>)\\n* Fix discovery silently stops after unknown msg type is found. (\\#848 <https://github.com/ros2/rosbag2/issues/848>)\\n* added seek interface (\\#836 <https://github.com/ros2/rosbag2/issues/836>)\\n* Refactor plugin query mechanism and standardize trait management (\\#833 <https://github.com/ros2/rosbag2/issues/833>)\\n* fix sequential reader rollover-to-next-file strategy: (\\#839 <https://github.com/ros2/rosbag2/issues/839>)\n```\n\n----------------------------------------\n\nTITLE: Run ROS 2 Talker Node\nDESCRIPTION: Launches a ROS 2 talker node using the `demo_nodes_cpp` package. The node is remapped to a specific name (`talker` or `talker_X`) for identification in the network graph.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --remap __node:=talker\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --remap __node:=talker_1\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --remap __node:=talker_2\n```\n\n----------------------------------------\n\nTITLE: ros2trace plugin fixes and feature deprecations\nDESCRIPTION: Addresses errors and feature deprecations in ros2trace, including fixing fini() errors, optional kernel tracer detection, and replacing deprecated parameters to improve trace management and compatibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* Fix 'ros2 trace' fini() error\\n* Don't require kernel tracer and detect when it's not installed\\n* Deprecate 'context_names' param and replace with 'context_fields'\\n* Contributors: Christophe Bedard\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Package (Console)\nDESCRIPTION: Utilizes the `ros2 pkg create` command to generate a new ROS 2 package within the workspace's `src` directory. Includes options for specifying the build type (ament_python or ament_cmake) and license.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nros2 pkg create --build-type ament_python --license Apache-2.0 py_launch_example\n```\n\nLANGUAGE: console\nCODE:\n```\nros2 pkg create --build-type ament_cmake --license Apache-2.0 cpp_launch_example\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment Setup File\nDESCRIPTION: This code snippet demonstrates how to source the ROS 2 environment setup file, which adds ROS 2 executables and libraries to the system's PATH and other environment variables. The user is instructed to replace '.bash' with the appropriate shell setup file (e.g., setup.sh, setup.zsh) if they are not using bash.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Replace \".bash\" with your shell if you're not using bash\n# Possible values are: setup.bash, setup.sh, setup.zsh\n. ~/ros2_{DISTRO}/install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Not recording sim-time messages before /clock\nDESCRIPTION: This prevents recording of sim-time messages before the first /clock message in `ros2bag`. This is likely aimed at improving timestamp accuracy when working with simulation time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Installing IBM Cloud Container Registry Plugin - IBM Cloud CLI - console\nDESCRIPTION: This snippet shows how to install the IBM Cloud CLI plugin for container registry management. Dependency is the ibmcloud CLI tool, which must be installed before running this command. The command adds the necessary functionality for container registry operations within IBM Cloud. Input is the CLI command, output is a confirmation of successful plugin installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud plugin install container-registry\n```\n\n----------------------------------------\n\nTITLE: Building webots_ros2 from Source (WSL)\nDESCRIPTION: Builds the ROS 2 packages located in the `src` directory of the current workspace (expected to be `~/ros2_ws`) using the `colcon` build tool within WSL. Requires the ROS 2 environment and build dependencies to be set up.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build\n```\n\n----------------------------------------\n\nTITLE: Setting Trace Path - Python - Jupyter\nDESCRIPTION: Python code snippet intended to be run within a Jupyter notebook cell. It assigns the string `~/.ros/tracing/perf-test` to the variable `path`. This variable is used by subsequent cells in the notebook to specify the directory containing the trace data collected by `ros2 trace`. The path should be adjusted if a different session name was used.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npath = '~/.ros/tracing/perf-test'\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Model with Materials\nDESCRIPTION: This XML code defines a robot model named 'materials'. It includes material definitions ('blue' and 'white') and applies these materials to the visual elements of the 'base_link' (cylinder) and 'right_leg' and 'left_leg' (boxes).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<robot name=\"materials\">\n\n  <material name=\"blue\">\n    <color rgba=\"0 0 0.8 1\"/>\n  </material>\n\n  <material name=\"white\">\n    <color rgba=\"1 1 1 1\"/>\n  </material>\n\n  <link name=\"base_link\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n      <material name=\"blue\"/>\n    </visual>\n  </link>\n\n  <link name=\"right_leg\">\n    <visual>\n      <geometry>\n        <box size=\"0.6 0.1 0.2\"/>\n      </geometry>\n      <origin rpy=\"0 1.57075 0\" xyz=\"0 0 -0.3\"/>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n\n  <joint name=\"base_to_right_leg\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"right_leg\"/>\n    <origin xyz=\"0 -0.22 0.25\"/>\n  </joint>\n\n  <link name=\"left_leg\">\n    <visual>\n      <geometry>\n        <box size=\"0.6 0.1 0.2\"/>\n      </geometry>\n      <origin rpy=\"0 1.57075 0\" xyz=\"0 0 -0.3\"/>\n      <material name=\"white\"/>\n    </visual>\n  </link>\n\n  <joint name=\"base_to_left_leg\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"left_leg\"/>\n    <origin xyz=\"0 0.22 0.25\"/>\n  </joint>\n\n</robot>\n```\n\n----------------------------------------\n\nTITLE: Initialize ROS 2 Node - C++\nDESCRIPTION: This code snippet shows how to initialize the ROS 2 node, replacing the ROS 1 initialization and NodeHandle creation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n//  ros::init(argc, argv, \"talker\");\n//  ros::NodeHandle n;\n    rclcpp::init(argc, argv);\n    auto node = rclcpp::Node::make_shared(\"talker\");\n```\n\n----------------------------------------\n\nTITLE: Query Service Types Using ros2 CLI (Console, ROS 2)\nDESCRIPTION: This command retrieves the type of a specific ROS 2 service. Replace <service_name> with the name of the service. Outputs the service type string. Prerequisite: the named service must be active. This is essential for knowing required argument structures.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service type <service_name>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service type /clear\nstd_srvs/srv/Empty\n```\n\n----------------------------------------\n\nTITLE: Configuring pytest tests with ament_cmake_pytest in CMakeLists.txt (CMake)\nDESCRIPTION: This snippet illustrates the recommended approach to integrate pytest tests into a ROS 2 CMake project using ament_cmake_pytest. It checks if BUILD_TESTING is enabled, finds the ament_cmake_pytest package, and enumerates test files explicitly. For each test file, it registers a pytest test target using ament_add_pytest_test with environment configuration and timeout setup. The example includes setting PYTHONPATH to the current binary directory and running tests from the source directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Python-Documentation.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  find_package(ament_cmake_pytest REQUIRED)\n  set(_pytest_tests\n    tests/test_a.py\n    tests/test_b.py\n    # Add other test files here\n  )\n  foreach(_test_path ${_pytest_tests})\n    get_filename_component(_test_name ${_test_path} NAME_WE)\n    ament_add_pytest_test(${_test_name} ${_test_path}\n      APPEND_ENV PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}\n      TIMEOUT 60\n      WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Linter Tests in ROS 2\nDESCRIPTION: To enforce code style consistency in ROS 2, add ament_lint_auto packages and find_package calls within a conditional block that checks for BUILD_TESTING.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  find_package(ament_lint_auto REQUIRED)\n  ament_lint_auto_find_test_dependencies()\n  # ...\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fixing SIGTERM handling\nDESCRIPTION: This fixes the handling of SIGTERM signals in the `ros2 daemon` process within the `ros2cli` package. This ensures that the daemon shuts down gracefully when it receives a termination signal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Installing Python Packages via System Package Manager (Console)\nDESCRIPTION: Demonstrates installing a Python package that is available in the system's package repository using `apt`. This method is suitable when the desired package has a corresponding system package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo apt install python3-serial\n```\n\n----------------------------------------\n\nTITLE: Implementing onInitialize method\nDESCRIPTION: This code initializes the shape object in the `onInitialize` method, which is called after the plugin is initialized by RViz, using `MFDClass` for convenience.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nvoid PointDisplay::onInitialize()\n{\n  MFDClass::onInitialize();\n  point_shape_ =\n    std::make_unique<rviz_rendering::Shape>(rviz_rendering::Shape::Type::Cube, scene_manager_,\n      scene_node_);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Math Module in Python Expressions in XML Launch File\nDESCRIPTION: Shows how to use symbols from Python's math module within PythonExpression substitutions in launch files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <log message=\"$(eval 'ceil(pi)')\" />\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocomplete in rqt_py_common (Python)\nDESCRIPTION: This code snippet adds support for autocompleting namespaced topics in rqt_py_common, a utility module for ROS Python interfaces. It enhances user experience by facilitating easier navigation and topic selection in Python-based ROS tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nAllow to autocomplete namespaced topics (\\#299 <https://github.com/ros-visualization/rqt/issues/299>)\n```\n\n----------------------------------------\n\nTITLE: Avoid hiding base class getRenderOperation in PointCloudRenderable\nDESCRIPTION: This fix prevents the hiding of the `getRenderOperation` method in the `PointCloudRenderable` class. It resolves a potential issue with method visibility and correct function calls. The primary dependency is the rviz rendering.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Running a ROS2 Launch File from Console\nDESCRIPTION: This console snippet shows how to launch a ROS2 test/demo using a predefined launch file located in the learning_tf2_cpp package. It provides example output indicating an extrapolation error when trying to lookup a transform at a future time that is not yet available in the buffer. This snippet assumes the ROS2 environment is properly sourced and the package is built.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_cpp turtle_tf2_demo_launch.py\n[INFO] [1629873136.345688064] [listener]: Could not transform turtle2 to turtle1: Lookup would\nrequire extrapolation into the future.  Requested time 1629873136.345539 but the latest data\nis at time 1629873136.338804, when looking up transform from frame [turtle1] to frame [turtle2]\n```\n\n----------------------------------------\n\nTITLE: Test TurtleSim - Python\nDESCRIPTION: This class, TestTurtleSim, defines active tests. It utilizes unittest.TestCase to define individual test methods, setUp, and tearDown functions.  The setUpClass and tearDownClass methods handle ROS 2 initialization and shutdown, creating and destroying the node before and after each test to prevent interference between tests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Integration.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Active tests\nclass TestTurtleSim(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        rclpy.init()\n\n    @classmethod\n    def tearDownClass(cls):\n        rclpy.shutdown()\n\n    def setUp(self):\n        self.node = rclpy.create_node('test_turtlesim')\n\n    def tearDown(self):\n        self.node.destroy_node()\n\n    def test_publishes_pose(self, proc_output):\n        \"\"\"Check whether pose messages published\"\"\"\n        msgs_rx = []\n        sub = self.node.create_subscription(\n            Pose, 'turtle1/pose',\n            lambda msg: msgs_rx.append(msg), 100)\n        try:\n            # Listen to the pose topic for 10 s\n            end_time = time.time() + 10\n            while time.time() < end_time:\n                # spin to get subscriber callback executed\n                rclpy.spin_once(self.node, timeout_sec=1)\n            # There should have been 100 messages received\n            assert len(msgs_rx) > 100\n        finally:\n            self.node.destroy_subscription(sub)\n\n    def test_logs_spawning(self, proc_output):\n        \"\"\"Check whether logging properly\"\"\"\n        proc_output.assertWaitFor(\n            'Spawning turtle [turtle1] at x=',\n            timeout=5, stream='stderr')\n```\n\n----------------------------------------\n\nTITLE: Launching Foxglove Bridge in ROS 2 (Bash)\nDESCRIPTION: Launches the Foxglove bridge using the `ros2 launch` command with its default launch file (`foxglove_bridge_launch.xml`). This starts the WebSocket server (defaulting to ws://localhost:8765), allowing Foxglove Studio to connect and receive ROS 2 data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Related-Projects/Visualizing-ROS-2-Data-With-Foxglove.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nros2 launch foxglove_bridge foxglove_bridge_launch.xml\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Build Type to Debug in Eclipse - Bash\nDESCRIPTION: This snippet demonstrates how to pass a CMake definition to enable debug build settings by appending '-DCMAKE_BUILD_TYPE=Debug' to the build command in Eclipse. This allows debugging symbols to be included when building ROS 2 packages with Eclipse. There are no dependencies except that the project must use CMake as its build system. This command is intended for the build system configuration and does not take runtime input; output is a debug-build binary.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Eclipse-Oxygen-with-ROS-2-and-rviz2.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-DCMAKE_BUILD_TYPE=Debug\n```\n\n----------------------------------------\n\nTITLE: devcontainer.json Configuration\nDESCRIPTION: This JSON configuration defines the settings for the Docker development container, including the name, privileged access, remote user, build details (Dockerfile path, arguments), workspace mounting, extensions to install, environment variables, and run arguments. It also includes mounts and a post-create command for setting up the ROS 2 environment inside the container. Replace \"YOUR_USERNAME\" with your actual Linux username for correct user mapping.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"ROS 2 Development Container\",\n    \"privileged\": true,\n    \"remoteUser\": \"YOUR_USERNAME\",\n    \"build\": {\n        \"dockerfile\": \"Dockerfile\",\n        \"args\": {\n            \"USERNAME\": \"YOUR_USERNAME\"\n        }\n    },\n    \"workspaceFolder\": \"/home/ws\",\n    \"workspaceMount\": \"source=${localWorkspaceFolder},target=/home/ws,type=bind\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\":[\n                \"ms-vscode.cpptools\",\n                \"ms-vscode.cpptools-themes\",\n                \"twxs.cmake\",\n                \"donjayamanne.python-extension-pack\",\n                \"eamodio.gitlens\",\n                \"ms-iot.vscode-ros\"\n            ]\n        }\n    },\n    \"containerEnv\": {\n        \"DISPLAY\": \"unix:0\",\n        \"ROS_AUTOMATIC_DISCOVERY_RANGE\": \"LOCALHOST\",\n        \"ROS_DOMAIN_ID\": \"42\"\n    },\n    \"runArgs\": [\n        \"--net=host\",\n        \"--pid=host\",\n        \"--ipc=host\",\n        \"-e\", \"DISPLAY=${env:DISPLAY}\"\n    ],\n    \"mounts\": [\n       \"source=/tmp/.X11-unix,target=/tmp/.X11-unix,type=bind,consistency=cached\",\n       \"source=/dev/dri,target=/dev/dri,type=bind,consistency=cached\"\n    ],\n    \"postCreateCommand\": \"sudo rosdep update && sudo rosdep install --from-paths src --ignore-src -y && sudo chown -R $(whoami) /home/ws/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Packages and Generating Interfaces - CMake\nDESCRIPTION: This snippet shows how to modify `CMakeLists.txt` to find dependencies and generate interfaces.  It first finds the `rosidl_tutorials_msgs` package and then generates the interfaces for the project using the `rosidl_generate_interfaces` function. The DEPENDENCIES keyword ensures that the necessary dependencies are used.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(rosidl_tutorials_msgs REQUIRED)\n\n     rosidl_generate_interfaces(${PROJECT_NAME}\n       ${msg_files}\n       DEPENDENCIES rosidl_tutorials_msgs\n     )\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon\nDESCRIPTION: This command starts the Docker daemon if it's not already running. This might be required before executing other docker commands, if \"hello-world\" fails.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Installing tcpdump on Linux - bash\nDESCRIPTION: Installs the `tcpdump` command-line utility using `apt`. This is a prerequisite for capturing network traffic as described in the tutorial. Requires root privileges (`sudo`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install tcpdump\n```\n\n----------------------------------------\n\nTITLE: Disabling Loaned Messages Temporarily (Windows Cmd/PowerShell)\nDESCRIPTION: Sets the ROS_DISABLE_LOANED_MESSAGES environment variable to '1' for the current command prompt or PowerShell session using the set command. This disables loaned messages only for the active session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nset ROS_DISABLE_LOANED_MESSAGES=1\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Bagfile Information\nDESCRIPTION: Displays the information for the specified rosbag file, allowing users to examine the contents and metadata of the recordings. The command gets info on the `subset` bag file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag info subset\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 setup file\nDESCRIPTION: This command sources the setup file for the workspace to make the compiled RMW accessible.  This action is performed after a successful build with colcon. Prerequisites are a ROS 2 workspace created and the build completed. This makes the new packages available in the current shell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsource install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Installing RQt Packages\nDESCRIPTION: This command installs RQt packages from the Debian package repository using apt. Replace `{DISTRO}` with the specific ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-RQt.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install ros-{DISTRO}-rqt*\n```\n\n----------------------------------------\n\nTITLE: Executing Ament Extensions in CMake\nDESCRIPTION: This snippet demonstrates how to execute ament extensions within a CMake script.  It assumes that an extension point has been defined (e.g., `my_extension_point`) and registered using `ament_register_extension`. When this macro is called the scripts associated with the extension point will be executed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nament_execute_extensions(my_extension_point)\n```\n\n----------------------------------------\n\nTITLE: Running Simple ROS2 Intra-Process Image Pipeline (for inter-process test)\nDESCRIPTION: Executes the base ROS2 image pipeline demo (`image_pipeline_all_in_one`) simultaneously with a standalone inter-process viewer to demonstrate that intra-process zero-copy is maintained.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nros2 run intra_process_demo image_pipeline_all_in_one\n```\n\n----------------------------------------\n\nTITLE: Computing Relative Rotation Between Quaternions in C++\nDESCRIPTION: Calculates the relative rotation quaternion that converts one orientation to another by inverting the initial quaternion and multiplying it with the target quaternion, following quaternion algebra rules.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nq_r = q_2 * q_1_inverse\n```\n\n----------------------------------------\n\nTITLE: Converting ROS 1 message, service, and action definitions to ROS 2 interface generation in CMake\nDESCRIPTION: This snippet shows how to replace individual add_message_files, add_service_files, add_action_files, and generate_messages commands with a unified rosidl_generate_interfaces call for ROS 2, streamlining the build configuration. Dependencies are specified as string arguments, and references to the devel space are to be removed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nrosidl_generate_interfaces(${PROJECT_NAME}\n  \"msg/FooBar.msg\"\n  \"msg/Baz.msg\"\n  \"srv/Ping.srv\"\n  \"action/DoPong.action\"\n  DEPENDENCIES actionlib_msgs std_msgs geometry_msgs\n)\n```\n\n----------------------------------------\n\nTITLE: Recording Specific Actions with ros2 bag (Bash)\nDESCRIPTION: Records introspection data for specified actions using 'ros2 bag record --action <action_names>'. The input is a list of action names. Action introspection must be enabled on the nodes. The command creates a ROS 2 bag with all related action goals, results, and feedback events, suitable for later inspection or replay.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record --action <action_names>\n```\n\n----------------------------------------\n\nTITLE: Importing TransformStamped Message\nDESCRIPTION: Imports the `TransformStamped` message type from the `geometry_msgs.msg` module. This message structure is used to represent coordinate frame transformations in ROS 2 and TF2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom geometry_msgs.msg import TransformStamped\n```\n\n----------------------------------------\n\nTITLE: TF2 Message Filter Callback in C++\nDESCRIPTION: Implementation of the callback function that is called when a message is received and the required transform is available. It transforms the point from its original frame to the target frame and logs the result.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nprivate:\n  void msgCallback(const geometry_msgs::msg::PointStamped::SharedPtr point_ptr)\n  {\n    geometry_msgs::msg::PointStamped point_out;\n    try {\n      tf2_buffer_->transform(*point_ptr, point_out, target_frame_);\n      RCLCPP_INFO(\n        this->get_logger(), \"Point of turtle3 in frame of turtle1: x:%f y:%f z:%f\\n\",\n        point_out.point.x,\n        point_out.point.y,\n        point_out.point.z);\n    } catch (const tf2::TransformException & ex) {\n      RCLCPP_WARN(\n        // Print exception which was caught\n        this->get_logger(), \"Failure %s\\n\", ex.what());\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Launch Files in setup.py for Python Packages - Python\nDESCRIPTION: This Python snippet modifies the data_files argument of a setup.py script to ensure all files in the 'launch' directory are installed as part of the package. It uses glob to match all files inside the 'launch' directory and installs them to the appropriate share location under the package name. Requires setuptools and glob; typically edited in setup.py. Precondition: The launch directory and files exist prior to packaging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom glob import glob\nfrom setuptools import find_packages, setup\n\npackage_name = 'launch_tutorial'\n\nsetup(\n    # Other parameters ...\n    data_files=[\n        # ... Other data files\n        # Include all launch files.\n        (os.path.join('share', package_name, 'launch'), glob('launch/*'))\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using Modern Target Link Libraries in CMake\nDESCRIPTION: Shows how to update target_link_libraries() calls to use modern CMake targets with explicit PUBLIC or PRIVATE visibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(my_library PUBLIC foo::foo bar::bar ${std_msgs_TARGETS} baz::baz)\n```\n\n----------------------------------------\n\nTITLE: Navigating to the src directory - macOS\nDESCRIPTION: This command changes the current directory to the 'src' directory within the 'ros2_ws' workspace. This is where the package will be created.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/ros2_ws/src\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test with RT Priority (Env) - Sudo - Console\nDESCRIPTION: Alternative execution command for `performance_test` using `sudo env` to preserve the `PATH` and `LD_LIBRARY_PATH` environment variables. This is necessary on some systems for shared libraries to be found when running with `sudo`. The test configuration is identical to the previous snippet, including real-time priority settings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nsudo env PATH=\"$PATH\" LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\" ./install/performance_test/lib/performance_test/perf_test -c rclcpp-single-threaded-executor -p 1 -s 1 -r 0 -m Array1m --reliability RELIABLE --max-runtime 60 --use-rt-prio 98\n```\n\n----------------------------------------\n\nTITLE: Setting ROS2 Parameter on Running Node\nDESCRIPTION: This command uses the `ros2 param set` utility to change the value of the 'a_double_param' parameter on the running 'parameter_blackboard' node to '3.45'. Executing this command should trigger the parameter event handler callback in the 'node_with_parameters' node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\nros2 param set parameter_blackboard a_double_param 3.45\n```\n\n----------------------------------------\n\nTITLE: Updating RViz Core and Visualizations in C++\nDESCRIPTION: This code discusses multiple improvements in rviz_common, including updating dependency targets to yaml-cpp 0.8.0, removing unnecessary moc lines, adding regex filters, fixing overlay issues, and implementing reset time and fullscreen options, to enhance visualization features and code efficiency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_56\n\nLANGUAGE: C++\nCODE:\n```\n* Update to yaml-cpp 0.8.0 (\\#1183 <https://github.com/ros2/rviz/issues/1183>) yaml-cpp 0.8.0 has a proper CMake target, i.e. yaml-cpp::yaml-cpp. Use that here.\\n* Remove regex_filter_property.hpp from the moc lines. (\\#1172 <https://github.com/ros2/rviz/issues/1172>) Since it has no SLOTS or SIGNALS, we don't need to run MOC on it.  That will both speed up the compilation and remove a warning when building.\\n* Added regex filter field for TF display (\\#1032 <https://github.com/ros2/rviz/issues/1032>)\\n* Fix camera display overlay (\\#1151 <https://github.com/ros2/rviz/issues/1151>)\\n* Fixes for uncrustify 0.78. (\\#1155 <https://github.com/ros2/rviz/issues/1155>)\\n* Append measured subscription frequency to topic status (\\#1113 <https://github.com/ros2/rviz/issues/1113>)\\n* Implement reset time service (\\#1109 <https://github.com/ros2/rviz/issues/1109>)\\n* Add \"R\" key as shortcut for resetTime (\\#1088 <https://github.com/ros2/rviz/issues/1088>)\\n* Add fullscreen startup option (\\#1097 <https://github.com/ros2/rviz/issues/1097>)\n```\n\n----------------------------------------\n\nTITLE: Run C++ Talker Example\nDESCRIPTION: This command runs the C++ `talker` example node in ROS 2. It first sources the setup file to configure the environment, and then uses `ros2 run` to execute the `demo_nodes_cpp talker` node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/ros2-linux/setup.bash\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Creating external links in RST documentation\nDESCRIPTION: Shows the syntax for creating links to external web pages in RST documentation. The example creates a link to the ROS documentation website.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_35\n\nLANGUAGE: rst\nCODE:\n```\n`ROS Docs <https://docs.ros.org>`_\n```\n\n----------------------------------------\n\nTITLE: Initializing and Updating rosdep\nDESCRIPTION: This snippet shows how to initialize and update rosdep. The `sudo rosdep init` command initializes rosdep, creating necessary configuration files. The `rosdep update` command updates the local rosdistro index, fetching the latest information about available packages and dependencies. This should be run before using rosdep for the first time and occasionally to ensure you have the latest package information.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Rosdep.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rosdep init\n$ rosdep update\n```\n\n----------------------------------------\n\nTITLE: Run Commands for C++ and Python ROS2 Service Clients and Servers\nDESCRIPTION: Commands to execute ROS2 nodes for service server and client in C++ and Python, after sourcing the workspace. Facilitates testing and interaction with the custom services.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run cpp_srvcli server\n$ ros2 run cpp_srvcli client\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run py_srvcli service\n$ ros2 run py_srvcli client\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Workspace Directory (WSL)\nDESCRIPTION: Creates the necessary directory structure (`~/ros2_ws/src`) for a new ROS 2 workspace in the user's home directory within WSL. This is the first step when building `webots_ros2` from source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/ros2_ws/src\n```\n\n----------------------------------------\n\nTITLE: Installing Development Tools\nDESCRIPTION: This snippet installs essential development tools necessary to build ROS 2 from source on RHEL. It includes tools like `cmake`, `gcc-c++`, `git`, and Python related packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y \\\n     cmake \\\n     gcc-c++ \\\n     git \\\n     make \\\n     patch \\\n     python3-colcon-common-extensions \\\n     python3-mypy \\\n     python3-pip \\\n     python3-pytest \\\n     python3-pytest-cov \\\n     python3-pytest-mock \\\n     python3-pytest-repeat \\\n     python3-pytest-rerunfailures \\\n     python3-pytest-runner \\\n     python3-rosdep \\\n     python3-setuptools \\\n     python3-vcstool \\\n     wget\n\n   # install some pip packages needed for testing and\n   # not available as RPMs\n   python3 -m pip install -U --user \\\n     flake8-blind-except==0.1.1 \\\n     flake8-class-newline \\\n     flake8-deprecated\n```\n\n----------------------------------------\n\nTITLE: Including AddressBook Message Header in C++ Node\nDESCRIPTION: Shows the include statement to bring the generated header for the AddressBook message into the C++ source, enabling access to the message fields and constants within the node implementation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n#include \"more_interfaces/msg/address_book.hpp\"\n```\n\n----------------------------------------\n\nTITLE: Unpacking the RT-Preempt Patch\nDESCRIPTION: Unpacks the downloaded RT-Preempt patch using gunzip. Requires gunzip to be installed on the system. Decompresses the patch file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n   $ gunzip patch-5.4.78-rt44.patch.gz\n```\n\n----------------------------------------\n\nTITLE: Registering Ogre Media Exports in CMake\nDESCRIPTION: This snippet showcases the registration of Ogre media directories as a resource in the ament index. The function `register_rviz_ogre_media_exports` registers directories to be included in the ament index allowing RViz to load resources at startup. It installs a file containing relative paths to directories. Prerequisites: Ogre.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nregister_rviz_ogre_media_exports(DIRECTORIES <my_dirs>)\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files on Linux/macOS\nDESCRIPTION: Console command to source the setup files after building a ROS 2 package on Linux or macOS systems. This makes the built packages available in the current terminal session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Registering Subscription Callbacks with Message Info in ROS 2 (Python)\nDESCRIPTION: Demonstrates how to create and register a ROS 2 subscription callback in Python that accepts both the message and associated MessageInfo. This requires access to the 'std_msgs.msg.String' message type and a ROS 2 Python node object. The callback receives the published message along with a MessageInfo structure containing metadata such as sequence numbers and timestamps. Inputs are 'msg' (the message) and 'msg_info' (message metadata); the output is side-effect (printing info). The 'node.create_subscription' method registers the callback for a given topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef msg_info_cb(msg, msg_info):\n    print('Message info:', msg_info)\n\nnode.create_subscription(msg_type=std_msgs.msg.String, topic='/chatter', qos_profile=10, callback=msg_info_cb)\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with Colcon\nDESCRIPTION: Console command to build a specific ROS 2 package using colcon. This targets only the cpp_parameter_event_handler package for faster build times.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select cpp_parameter_event_handler\n```\n\n----------------------------------------\n\nTITLE: Handling Symbol Visibility with Visibility Control Headers in C++\nDESCRIPTION: Defines a C++ header implementing symbol visibility macros to properly export and import DLL symbols on Windows and other platforms. The macro logic adapts to compiler type (MSVC or GCC/clang) and whether the library is being built or consumed. It is intended to be included in shared library headers to manage symbol exposure and prevent linker errors when building ROS 2 libraries on Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#ifndef MY_LIB__VISIBILITY_CONTROL_H_\n#define MY_LIB__VISIBILITY_CONTROL_H_\n#if defined _WIN32 || defined __CYGWIN__\n#ifdef __GNUC__\n   #define MY_LIB_EXPORT __attribute__ ((dllexport))\n   #define MY_LIB_IMPORT __attribute__ ((dllimport))\n#else\n   #define MY_LIB_EXPORT __declspec(dllexport)\n   #define MY_LIB_IMPORT __declspec(dllimport)\n#endif\n#ifdef MY_LIB_BUILDING_LIBRARY\n   #define MY_LIB_PUBLIC MY_LIB_EXPORT\n#else\n   #define MY_LIB_PUBLIC MY_LIB_IMPORT\n#endif\n#define MY_LIB_PUBLIC_TYPE MY_LIB_PUBLIC\n#define MY_LIB_LOCAL\n#else\n // Linux visibility settings\n#define MY_LIB_PUBLIC_TYPE\n#endif\n#endif  // MY_LIB__VISIBILITY_CONTROL_H_\n```\n\n----------------------------------------\n\nTITLE: Setting Up Redundant Discovery Servers\nDESCRIPTION: Start two discovery servers with different IDs and ports to provide server redundancy for the discovery process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ fastdds discovery --server-id 0 --ip-address 127.0.0.1 --port 11811\n```\n\nLANGUAGE: console\nCODE:\n```\n$ fastdds discovery --server-id 1 --ip-address 127.0.0.1 --port 11888\n```\n\n----------------------------------------\n\nTITLE: Updating APT Package Cache on Ubuntu\nDESCRIPTION: Command to update the APT package cache after setting up the repositories, necessary before installing ROS 2 packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with rosdep: apt\nDESCRIPTION: This script installs dependencies needed for ROS 2 using `rosdep`.  It first updates the apt package index, installs python3-rosdep, initializes `rosdep` and then updates rosdep's internal data. The `rosdep install` command installs dependencies. The `--from-paths` argument specifies the path to the ROS 2 share directory.  The `--ignore-src` skips dependencies in the source.  The `-y` flag automatically answers yes to prompts and  `--skip-keys` ignores specific packages during the install.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y python3-rosdep\nsudo rosdep init\nrosdep update\nrosdep install --from-paths ~/ros2_{DISTRO}/ros2-linux/share --ignore-src -y --skip-keys \"cyclonedds fastcdr fastrtps iceoryx_binding_c rmw_connextdds rti-connext-dds-7.3.0 urdfdom_headers\"\n```\n\n----------------------------------------\n\nTITLE: Installing webots_ros2 from Source on Ubuntu VM - Shell Commands\nDESCRIPTION: A multi-command shell snippet illustrating the installation of webots_ros2 by cloning its sources from GitHub and building inside a ROS 2 workspace. Steps include installing git, creating a workspace directory, sourcing ROS 2 environment, cloning the repository with submodules, installing dependencies with rosdep, building the package using colcon, and sourcing the local setup. The {DISTRO} placeholder denotes the ROS 2 distribution. This method enables users to get the latest source code and contribute to development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install git\n```\n\nLANGUAGE: console\nCODE:\n```\nmkdir -p ~/ros2_ws/src\n```\n\nLANGUAGE: console\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\ncd ~/ros2_ws\n$ git clone --recurse-submodules https://github.com/cyberbotics/webots_ros2.git src/webots_ros2\n```\n\nLANGUAGE: console\nCODE:\n```\nsudo apt install python3-pip python3-rosdep python3-colcon-common-extensions\nsudo rosdep init && rosdep update\nrosdep install --from-paths src --ignore-src --rosdistro {DISTRO}\n```\n\nLANGUAGE: console\nCODE:\n```\ncolcon build\n```\n\nLANGUAGE: console\nCODE:\n```\nsource install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Getting ROS 2 logger levels remotely using service call via Bash\nDESCRIPTION: Demonstrates how to call the 'get_logger_levels' service on a running node to retrieve logger levels for specified logger names using 'ros2 service call' CLI. Shows request and response message formats. Requires the node to have logger service enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 service call /NodeWithLoggerService/get_logger_levels rcl_interfaces/srv/GetLoggerLevels '{names: [\"NodeWithLoggerService\", \"rcl\"]}'\n\nrequester: making request: rcl_interfaces.srv.GetLoggerLevels_Request(names=['NodeWithLoggerService', 'rcl'])\n\nresponse:\nrcl_interfaces.srv.GetLoggerLevels_Response(levels=[rcl_interfaces.msg.LoggerLevel(name='NodeWithLoggerService', level=0), rcl_interfaces.msg.LoggerLevel(name='rcl', level=0)])\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment Setup on macOS - console\nDESCRIPTION: Sources the setup.bash script for macOS to configure the shell environment for ROS 2 usage. Equivalent to the Linux command, using a dot (.) to execute the setup.bash script. Must be executed after building the workspace to register installed packages in the shell session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n. install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Webots Plugin in URDF (C++ Style)\nDESCRIPTION: URDF file content (`my_robot.urdf`) used to declare the `MyRobotDriver` plugin for a C++ based ROS 2 package setup. The `type` attribute specifies the C++ namespace and class name for `pluginlib` to load the plugin class.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n// Content of Code/my_robot_cpp.urdf\n```\n\n----------------------------------------\n\nTITLE: Cloning rmw_gurumdds repository - Bash\nDESCRIPTION: Clones the `rmw_gurumdds` repository from GitHub into the `ros2_ws/src` directory. The `-b {DISTRO}` option specifies the branch corresponding to the ROS 2 distribution. Replace `{DISTRO}` with the ROS 2 distribution name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ros2_ws/src\ngit clone https://github.com/ros2/rmw_gurumdds -b {DISTRO} ros2/rmw_gurumdds\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to package.xml for TF2 Message Filter\nDESCRIPTION: XML snippet showing the additional dependencies required for using tf2_ros::MessageFilter in the package.xml file, including message_filters and tf2_geometry_msgs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_9\n\nLANGUAGE: XML\nCODE:\n```\n<depend>message_filters</depend>\n<depend>tf2_geometry_msgs</depend>\n```\n\n----------------------------------------\n\nTITLE: Creating Service Request (C++)\nDESCRIPTION: Creates a shared pointer to an `AddTwoInts::Request` object. It then assigns specific integer values (41 and 1) to the 'a' and 'b' fields of the request object, preparing it to be sent to the service.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nauto request = std::make_shared<example_interfaces::srv::AddTwoInts::Request>();\nrequest->a = 41;\nrequest->b = 1;\n```\n\n----------------------------------------\n\nTITLE: Using SingleThreadedExecutor with Multiple Nodes\nDESCRIPTION: This code snippet shows how to use a SingleThreadedExecutor with multiple nodes in rclcpp. Each node is added to the executor, and then the executor is spun. The single thread will handle callbacks from all the nodes in a non-parallel manner. This example shows how to use a single executor instance to manage multiple nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Executors.rst#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nrclcpp::Node::SharedPtr node1 = ...\nrclcpp::Node::SharedPtr node2 = ...\nrclcpp::Node::SharedPtr node3 = ...\n\nrclcpp::executors::SingleThreadedExecutor executor;\nexecutor.add_node(node1);\nexecutor.add_node(node2);\nexecutor.add_node(node3);\nexecutor.spin();\n```\n\n----------------------------------------\n\nTITLE: Finding ROS 2 Topics by Message Type Using ros2 topic find Command in Console\nDESCRIPTION: This snippet explains how to list all available ROS 2 topics that use a specific message type with the 'ros2 topic find' command. Providing a message type such as geometry_msgs/msg/Twist returns all topics publishing messages of that type. This facilitates discovery of relevant topics when developing or debugging. Input is the message type; output is a list of matching topic names.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic find geometry_msgs/msg/Twist\n/turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Cloning webots_ros2 Sources from GitHub - Console\nDESCRIPTION: Pulls the latest webots_ros2 source code from GitHub using git with submodules. Requires git installed and a valid ~/ros2_ws directory. Enables working with the most up-to-date package features for advanced users or contributors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd ~/ros2_ws\ngit clone --recurse-submodules https://github.com/cyberbotics/webots_ros2.git src/webots_ros2\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS2 Node with Parameters in C++\nDESCRIPTION: This C++ code snippet demonstrates creating a ROS2 node that declares, accesses, and updates a parameter named 'my_parameter'. It initializes a timer to periodically log the parameter's value and reset it to a default value. The code uses the 'rclcpp' library for ROS2 functionalities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n    #include <chrono>\n    #include <functional>\n    #include <string>\n\n    #include <rclcpp/rclcpp.hpp>\n\n    using namespace std::chrono_literals;\n\n    class MinimalParam : public rclcpp::Node\n    {\n    public:\n      MinimalParam()\n      : Node(\"minimal_param_node\")\n      {\n        this->declare_parameter(\"my_parameter\", \"world\");\n\n        auto timer_callback = [this](){\n          std::string my_param = this->get_parameter(\"my_parameter\").as_string();\n\n          RCLCPP_INFO(this->get_logger(), \"Hello %s!\", my_param.c_str());\n\n          std::vector<rclcpp::Parameter> all_new_parameters{rclcpp::Parameter(\"my_parameter\", \"world\")};\n          this->set_parameters(all_new_parameters);\n        };\n        timer_ = this->create_wall_timer(1000ms, timer_callback);\n      }\n\n    private:\n      rclcpp::TimerBase::SharedPtr timer_;\n    };\n\n    int main(int argc, char ** argv)\n    {\n      rclcpp::init(argc, argv);\n      rclcpp::spin(std::make_shared<MinimalParam>());\n      rclcpp::shutdown();\n      return 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Scoping Environment Variables in Group Actions - XML Launch File\nDESCRIPTION: Demonstrates how environment variables are now scoped to group actions in launch files, using XML syntax. Variables set inside a group don't affect the global scope.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <set_env name=\"FOO\" value=\"1\" />\n  <group>\n    <set_env name=\"FOO\" value=\"2\" />\n  </group>\n  <executable cmd=\"echo $FOO\" output=\"screen\" shell=\"true\" />\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Testing the ROS 2 Container\nDESCRIPTION: This snippet demonstrates how to test the ROS 2 container setup by installing rviz2 and sourcing the ROS 2 setup file to enable ROS commands, then attempting to run rviz2 inside the container's terminal. Prerequisites include a built and running Docker container, and appropriate configuration of the container. The user needs to be able to access the X window system to visualize rviz2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install ros-$ROS_DISTRO-rviz2 -y\n$ source /opt/ros/$ROS_DISTRO/setup.bash\n$ rviz2\n```\n\n----------------------------------------\n\nTITLE: Getting fdsize from /proc for open fd limit\nDESCRIPTION: This modification enables `ros2cli.node.daemon` to try getting the file descriptor size limit from `/proc` to manage file descriptors, preventing problems caused by exceeding the limit.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Generating Keystore with sros2\nDESCRIPTION: Navigates into the previously created demo directory and uses the `ros2 security create_keystore` command to generate a new keystore named `demo_keystore`. This keystore serves as the central repository for security certificates and keys for the ROS 2 system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/sros2_demo\nros2 security create_keystore demo_keystore\n```\n\nLANGUAGE: bat\nCODE:\n```\ncd sros2_demo\nros2 security create_keystore demo_keystore\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Bag Reader Node\nDESCRIPTION: Commands for building the package with colcon, sourcing the setup files, and running the bag reader node. The bag reader requires a path to the bag file as an argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select bag_reading_cpp\n$ source install/setup.bash\n$ ros2 run bag_reading_cpp simple_bag_reader /path/to/subset\n```\n\n----------------------------------------\n\nTITLE: Deleting catkin/catkin_pkg from setup.py - Python\nDESCRIPTION: This snippet highlights the removal of the dependency on 'catkin_pkg' in setup.py during ROS 2 migration. It shows which import and function call lines to delete from the setup.py script to comply with ROS 2’s build system, which does not use catkin or catkin_pkg.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Delete this\nfrom catkin_pkg.python_setup import generate_distutils_setup\n```\n\nLANGUAGE: python\nCODE:\n```\n# Delete this\nsetup_args = generate_distutils_setup(\n    packages=['talker_py'],\n    package_dir={'': 'src'}\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing rosdep Database (Bash)\nDESCRIPTION: These Bash commands initialize and update the rosdep dependency database, which is required for ROS 2 package builds. The first command sets up rosdep (may be safely ignored if already run); the second command updates dependency information. Requires sudo for initialization.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-a-Custom-Deb-Package.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo rosdep init\n```\n\nLANGUAGE: bash\nCODE:\n```\nrosdep update\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Preferred Python Import Style - Python\nDESCRIPTION: This snippet illustrates the preferred Python coding style rule of having only one import statement per line. It contrasts the recommended format with less preferred alternatives that group multiple imports on a single line or use multi-line parentheses.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This is preferred\nfrom typing import Dict\nfrom typing import List\n\n# over these\nfrom typing import Dict, List\nfrom typing import (\n  Dict,\n  List,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Google Mock Test with ament_add_gmock in CMake\nDESCRIPTION: Shows how to define a Google Test that utilizes Google Mock features using the `ament_add_gmock` macro. Similar to `ament_add_gtest`, it requires finding the corresponding package (`ament_cmake_gmock`) and takes comparable parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(ament_cmake_gmock REQUIRED)\nament_add_gmock(some_test <test_sources>)\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate Reentrant Callback Group for Client - C++\nDESCRIPTION: This snippet creates a Reentrant callback group and assigns it specifically to the client callback group (`client_cb_group_`). The timer callback group (`timer_cb_group_`) is set to `nullptr`, meaning the timer will default to the node's default callback group. This isolates the client in a reentrant group while the timer uses the default group.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nclient_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::Reentrant);\ntimer_cb_group_ = nullptr;\n```\n\n----------------------------------------\n\nTITLE: Reading PointCloud2 Message with Python\nDESCRIPTION: This Python code snippet demonstrates reading the points from a `PointCloud2` message, which was previously created. It utilizes the `sensor_msgs_py.point_cloud2.read_points` function and iterates through the points. Requires a `PointCloud2` message instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfor point in sensor_msgs_py.point_cloud2.read_points(pointcloud):\n    print(point)\n```\n\n----------------------------------------\n\nTITLE: Source ROS 2 Environment in PowerShell for PyCharm PATH Setup on Windows\nDESCRIPTION: Explains how to source ROS 2 and workspace environments in Windows PowerShell, and override the PATH environment variable in PyCharm's run/debug configuration to resolve import errors and enable debugging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nC:\\dev\\ros2_humble\\local_setup.ps1\nC:\\dev_ws\\install\\local_setup.ps1\necho $ENV:Path\n```\n\n----------------------------------------\n\nTITLE: Capturing Unencrypted ROS 2 Discovery Traffic - bash\nDESCRIPTION: Captures and displays network packets on any interface (`-i any`) filtered by UDP port 7400 using `tcpdump`. The `-X` option prints the packet contents in hex and ASCII, showing that discovery information (like node names and enclaves) is in plain text. Requires root privileges (`sudo`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo tcpdump -X -i any udp port 7400\n```\n\n----------------------------------------\n\nTITLE: Setting ROSDISTRO_INDEX_URL - Console\nDESCRIPTION: This command sets the `ROSDISTRO_INDEX_URL` environment variable to a custom rosdistro index. It specifies the URL of the index-v4.yaml file from a specific tagged branch on GitHub. This allows rosdep to use the custom index during updates.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Custom-Rosdistro.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export ROSDISTRO_INDEX_URL=https://raw.githubusercontent.com/ros/rosdistro/rolling/2024-02-28/index-v4.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Docker Hello-World Image - Docker - console\nDESCRIPTION: This snippet shows the use of the docker CLI to verify if Docker is properly installed and functional on your system by executing the 'hello-world' image. No dependencies beyond Docker itself are required. Expected output is a welcome message from Docker and diagnostics about the container execution. Input is the shell command, and output is the validation message from Docker.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run hello-world\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n```\n\n----------------------------------------\n\nTITLE: Building and Running Updated Docker Images with IBM Cloud CLI - Console\nDESCRIPTION: This snippet comprises IBM Cloud CLI commands to build and push a tagged Docker image to the IBM Cloud Container Registry, authenticate, and run it. Dependencies include IBM Cloud CLI, Docker, and the new or updated Dockerfile. Replace tags and image names as needed. Inputs are the name and version tag; outputs are updated containers ready for deployment. The command builds the image and makes it available for Kubernetes or manual execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud cr build --tag registry.bluemix.net/ros2nasr/ros2foxy:2 .\n\n$ ibmcloud cr login\nLogging in to 'registry.ng.bluemix.net'...\nLogged in to 'registry.ng.bluemix.net'.\nLogging in to 'us.icr.io'...\nLogged in to 'us.icr.io'.\n\nOK\n\n$ docker run -v -it registry.ng.bluemix.net/ros2nasr/ros2foxy:2\n```\n\n----------------------------------------\n\nTITLE: Installing the Component Library (CMake)\nDESCRIPTION: This snippet shows how to install the component library created in the previous steps.  It changes the install commands to install the library instead of the executable. This ensures the library is available for use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nament_export_targets(export_vincent_driver_component)\ninstall(TARGETS vincent_driver_component\n        EXPORT export_vincent_driver_component\n        ARCHIVE DESTINATION lib\n        LIBRARY DESTINATION lib\n        RUNTIME DESTINATION bin\n)\n```\n\n----------------------------------------\n\nTITLE: Adding myst_parser Extension to conf.py (Python)\nDESCRIPTION: This snippet shows how to add the \"myst_parser\" extension to the list of Sphinx extensions in the conf.py file. This is required when including Markdown files from RST.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n    extensions = [\"myst_parser\"]\n```\n\n----------------------------------------\n\nTITLE: Adding the ROS 2 repository to RHEL using DNF\nDESCRIPTION: This snippet downloads the ROS 2 repository file from packages.ros.org and places it in the /etc/yum.repos.d/ directory, allowing the dnf package manager to access ROS 2 packages.  It first installs curl if it is not already installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install curl\nsudo curl --output /etc/yum.repos.d/ros2.repo http://packages.ros.org/ros2/rhel/ros2.repo\n```\n\n----------------------------------------\n\nTITLE: Enabling Ubuntu Configuration\nDESCRIPTION: Uses 'make oldconfig' with a series of empty inputs to enable all default Ubuntu configurations in the kernel. This step ensures compatibility with the current Ubuntu system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n   $ yes '' | make oldconfig\n```\n\n----------------------------------------\n\nTITLE: Run Interactive ROS 2 Nightly Docker Container (sh)\nDESCRIPTION: Starts a new Docker container based on the `osrf/ros2:nightly` image and attaches an interactive terminal (`-it`). This allows the user to work directly within the container environment which has the nightly ROS 2 build pre-configured. Requires Docker installed and the image pulled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it osrf/ros2:nightly\n```\n\n----------------------------------------\n\nTITLE: Rebuilding ROS2 Workspace\nDESCRIPTION: Rebuilds the ROS 2 workspace after updating the source code.  It uses `colcon build` to compile the packages in the workspace with symlinking enabled for faster iteration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Identifying Format 1 `package.xml` (No Format Attribute)\nDESCRIPTION: Shows an example of the opening `<package>` tag in a `package.xml` file that uses format 1 because it lacks the `format` attribute. This indicates the need for migration to format 2 for ROS 2 compatibility.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<package>\n```\n\n----------------------------------------\n\nTITLE: Echoing Transform Between turtle2 and turtle1\nDESCRIPTION: Uses the 'tf2_echo' tool to continuously display the geometric transform from the 'turtle2' frame to the 'turtle1' frame. The output includes translation, quaternion rotation, Euler angles (RPY in radians and degrees), and the transformation matrix, updating as the turtles move.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run tf2_ros tf2_echo turtle2 turtle1\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Bag Files - Windows\nDESCRIPTION: Creates a directory named `bag_files` and navigates into it using the command line on a Windows system.  This directory is used to store the rosbag recordings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nmd bag_files\ncd bag_files\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Service Node in Python (Incomplete)\nDESCRIPTION: This incomplete Python code snippet imports necessary libraries for creating a ROS 2 node. It imports `rclpy` and `ExternalShutdownException` from `rclpy.executors`.  The full service node implementation is not provided.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\n```\n\n----------------------------------------\n\nTITLE: Debugging ROS 2 Node with GDB (Remote/No GUI) in Python Launch File\nDESCRIPTION: Shows how to configure a ROS 2 launch file node to start within a GDB session directly in the same terminal where the launch file was executed. This is suitable for remote debugging or environments without a GUI. The `prefix` argument is set to 'gdb -ex run --args', omitting 'xterm -e'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Getting-Backtraces-in-ROS-2.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nprefix=['gdb -ex run --args']\n```\n\nLANGUAGE: python\nCODE:\n```\nstart_sync_slam_toolbox_node = Node(\n  parameters=[\n      get_package_share_directory(\"slam_toolbox\") + '/config/mapper_params_online_sync.yaml',\n      {'use_sim_time': use_sim_time}\n  ],\n  package='slam_toolbox',\n  executable='sync_slam_toolbox_node',\n  name='slam_toolbox',\n  prefix=['gdb -ex run --args'],  # For GDB within the launch terminal\n  output='screen')\n```\n\n----------------------------------------\n\nTITLE: Sourcing Local ROS 2 Workspace Setup (WSL)\nDESCRIPTION: Sources the setup script generated by `colcon build` in the `install` directory (relative to the workspace root), making the newly built packages available in the current shell session within WSL. This must be done after building and in every new terminal using the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ source install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Set CYCLONEDDS_URI Environment Variable - Linux Bash\nDESCRIPTION: This command sets the `CYCLONEDDS_URI` environment variable to the absolute path of a Cyclone DDS configuration file. This tells Cyclone DDS to use the specified XML file for its configuration, allowing custom settings like the minimum socket receive buffer size to take effect.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCYCLONEDDS_URI=file:///absolute/path/to/config_file.xml\n```\n\n----------------------------------------\n\nTITLE: Loading Parameter from File with Bash\nDESCRIPTION: This command shows how to use `ros2 param load` to load previously saved parameters from a YAML file and set the parameter values. This reloads the previously set values.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 param load /parameter_blackboard ./parameter_blackboard.yaml  # reloads previous state of parameters, 'foo' is back to 'bar'\n```\n\n----------------------------------------\n\nTITLE: Replacing netifaces library\nDESCRIPTION: This replaces the unmaintained ``netifaces`` library to avoid local wheel build problems in the `ros2cli` package. This improves the build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Ensure rviz_common::MessageFilterDisplay processes messages in the main thread\nDESCRIPTION: This change ensures that messages processed by `rviz_common::MessageFilterDisplay` are handled in the main thread. This relates to thread safety concerns and the need to interact with the GUI. Dependencies are rviz and message filtering.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Assigning Separate Mutually Exclusive Callback Groups in rclpy (Python)\nDESCRIPTION: This snippet demonstrates how to resolve callback deadlocks by explicitly assigning separate MutuallyExclusiveCallbackGroup instances for the service client and timer in a Python ROS 2 node. These assignments prevent both entities from blocking each other, thus allowing service calls and timer events to proceed without deadlock. The key requirement is importing MutuallyExclusiveCallbackGroup from rclpy.callback_groups and properly passing new instances for both client_cb_group and timer_cb_group. This change ensures that asynchronous operations do not share a group and thus execute independently.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nclient_cb_group = MutuallyExclusiveCallbackGroup()\ntimer_cb_group = MutuallyExclusiveCallbackGroup()\n```\n\n----------------------------------------\n\nTITLE: Configure Fast DDS Participant as Super Client via XML\nDESCRIPTION: Provides an XML configuration profile to set a Fast DDS participant as a 'SUPER_CLIENT', enabling it to receive full discovery information from specified discovery servers (like the ROS 2 daemon or CLI tools). This file should be saved and referenced, typically via the `FASTRTPS_DEFAULT_PROFILES_FILE` environment variable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n <dds>\n  <profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\">\n   <participant profile_name=\"super_client_profile\" is_default_profile=\"true\">\n    <rtps>\n     <builtin>\n      <discovery_config>\n       <discoveryProtocol>SUPER_CLIENT</discoveryProtocol>\n       <discoveryServersList>\n        <RemoteServer prefix=\"44.53.00.5f.45.50.52.4f.53.49.4d.41\">\n         <metatrafficUnicastLocatorList>\n          <locator>\n           <udpv4>\n            <address>127.0.0.1</address>\n            <port>11811</port>\n           </udpv4>\n          </locator>\n         </metatrafficUnicastLocatorList>\n        </RemoteServer>\n       </discoveryServersList>\n      </discovery_config>\n     </builtin>\n    </rtps>\n   </participant>\n  </profiles>\n </dds>\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with rospy in __init__.py - Python\nDESCRIPTION: Defines the ROS 1 node's main function in Python, initializing a node with 'rospy', creating a publisher for the 'chatter' topic (with type 'std_msgs/String'), and publishing a 'hello world' message periodically at 10 Hz. Requires 'rospy' and 'std_msgs' packages. Assumes this script is managed as part of a Catkin-built package. Inputs: none; outputs: publishes string messages to ROS 1 topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport rospy\nfrom std_msgs.msg import String\n\ndef main():\n    rospy.init_node('talker')\n    pub = rospy.Publisher('chatter', String, queue_size=10)\n    rate = rospy.Rate(10)  # 10hz\n    while not rospy.is_shutdown():\n        hello_str = \"hello world %s\" % rospy.get_time()\n        rospy.loginfo(hello_str)\n        pub.publish(hello_str)\n        rate.sleep()\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Transform Offset C++\nDESCRIPTION: These lines from the broadcaster node's timer callback show how the X and Y translation offsets for the `carrot1` frame are calculated. The `sin()` and `cos()` functions are applied to the current time (scaled by PI) to produce a circular motion path for the frame relative to its parent.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\ndouble x = now.seconds() * PI;\n...\nt.transform.translation.x = 10 * sin(x);\nt.transform.translation.y = 10 * cos(x);\n```\n\n----------------------------------------\n\nTITLE: Catching ExternalShutdownException\nDESCRIPTION: This enhances the `ros2cli main` function by catching `ExternalShutdownException`. This ensures the program handles external shutdown signals properly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Loading another component into a container in ROS 2\nDESCRIPTION: This command loads a specific component, the Listener, into the specified component container, which is '/ComponentManager'. It uses the `ros2 component load` command along with the namespace and component class.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager composition composition::Listener\n```\n\n----------------------------------------\n\nTITLE: Checking QoS Profile Compatibility in ROS 2 using Python\nDESCRIPTION: Demonstrates the use of 'rclpy.qos.qos_check_compatible' function to determine if two Quality of Service (QoS) profiles are compatible allowing communication between a publisher and subscriber. Requires rclpy with QoS support. The snippet imports predefined QoS profiles and prints the compatibility check result, which includes an error if profiles mismatch.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport rclpy.qos\n\npublisher_profile = rclpy.qos.qos_profile_sensor_data\nsubscription_profile = rclpy.qos.qos_profile_parameter_events\n\nprint(rclpy.qos.qos_check_compatible(publisher_profile, subscription_profile))\n```\n\n----------------------------------------\n\nTITLE: Initializing ROS 2 Lifecycle State Machine with Options Struct in C\nDESCRIPTION: Shows the updated C API function to initialize the lifecycle state machine by passing a newly created options struct. This options struct consolidates configuration including allocator, default initialization flags, and enabling attached services. It replaces older API variants and affects lifecycle state machine setup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nrcl_ret_t\nrcl_lifecycle_state_machine_init(\n  rcl_lifecycle_state_machine_t * state_machine,\n  rcl_node_t * node_handle,\n  const rosidl_message_type_support_t * ts_pub_notify,\n  const rosidl_service_type_support_t * ts_srv_change_state,\n  const rosidl_service_type_support_t * ts_srv_get_state,\n  const rosidl_service_type_support_t * ts_srv_get_available_states,\n  const rosidl_service_type_support_t * ts_srv_get_available_transitions,\n  const rosidl_service_type_support_t * ts_srv_get_transition_graph,\n  const rcl_lifecycle_state_machine_options_t * state_machine_options);\n```\n\n----------------------------------------\n\nTITLE: Styling Table Rows with CSS for ROS 2 Distributions\nDESCRIPTION: This CSS snippet styles specific rows in a table within the ROS documentation to highlight supported ROS 2 distributions.  It uses the `:nth-child` selector to target odd and even rows, applying a green background color to indicate active support. This relies heavily on the structure of the generated HTML table, making it fragile to changes in the table's layout.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases.rst#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\n  This CSS overrides the styles of certain rows to mark them green, indicating they are supported releases.\n  For the odd number rows, a line like the following must be used:\n\n    .rst-content table.docutils:not(.field-list) tr:nth-child(1) td {background-color: #33cc66;}\n\n  For the even number rows, a line like the following must be used:\n\n    .rst-content tr:nth-child(2) {background-color: #33cc66;}\n\n  No other combination I've found has worked.  Yes, this is extremely fragile.  No, I don't understand\n  why it is like this.\n-->\n<style>\n  .rst-content table.docutils:not(.field-list) tr:nth-child(1) td {background-color: #33cc66;}\n  .rst-content table.docutils:not(.field-list) tr:nth-child(3) td {background-color: #33cc66;}\n  .rst-content tr:nth-child(3) {background-color: #33cc66;}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Upgrade to tinyxml2 for rviz\nDESCRIPTION: This updates the xml library to `tinyxml2` within rviz. This involves replacing the older `tinyxml` library. The dependencies are the existing rviz package and the `tinyxml2` library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Constants Definition in ROS 2 Messages\nDESCRIPTION: Shows how to define constants in ROS 2 messages using the equal sign. Constants are values that cannot be changed programmatically.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nconstanttype CONSTANTNAME=constantvalue\n```\n\n----------------------------------------\n\nTITLE: Registering Component Nodes in CMake for ROS2\nDESCRIPTION: This CMake code snippet demonstrates how to register component nodes with the index to make them discoverable by ROS2 tooling. It includes creating a shared library from component source code and registering one or more components from the same library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Composition.rst#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(talker_component SHARED src/talker_component.cpp)\nrclcpp_components_register_nodes(talker_component \"composition::Talker\")\n# To register multiple components in the same shared library, use multiple calls\n# rclcpp_components_register_nodes(talker_component \"composition::Talker2\")\n```\n\n----------------------------------------\n\nTITLE: Launching a ROS 2 Talker with Default Discovery\nDESCRIPTION: Launch a standard talker node that uses the default Simple Discovery Protocol and will not connect to nodes using the Discovery Server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp talker --ros-args --remap __node:=simple_talker\n```\n\n----------------------------------------\n\nTITLE: Setting DISPLAY Variable for X11 Forwarding (WSL)\nDESCRIPTION: Sets the `DISPLAY` environment variable within the WSL shell to point to the IP address of the Windows host (obtained using `ip route` and `awk`) and display number :0. This directs GUI application output from WSL to an X11 server (like VcXsrv) running on the Windows host, required for RViz on older WSL versions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ export DISPLAY=$(ip route list default | awk '{print $3}'):0\n```\n\n----------------------------------------\n\nTITLE: Create ROS 2 Workspace - Bash\nDESCRIPTION: This bash code creates a new workspace named `ros2_talker` and navigates into it, this will hold the migrated ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir ~/ros2_talker\n$ cd ~/ros2_talker\n```\n\n----------------------------------------\n\nTITLE: Running introspection_service\nDESCRIPTION: Runs the introspection_service node and enables Service Introspection.  This allows service data to be recorded and replayed later on.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp introspection_service --ros-args -p service_configure_introspection:=contents\n```\n\n----------------------------------------\n\nTITLE: Setting WEBOTS_HOME Environment Variable (WSL)\nDESCRIPTION: Exports the `WEBOTS_HOME` environment variable within the WSL shell, pointing it to the Webots installation directory located on the Windows host system (accessed via `/mnt/c/`). This allows `webots_ros2` running in WSL to find and launch the Webots simulator installed on Windows. Note the escaped space.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ export WEBOTS_HOME=/mnt/c/Program\\ Files/Webots\n```\n\n----------------------------------------\n\nTITLE: Running Unencrypted ROS 2 Nodes - bash\nDESCRIPTION: Starts the ROS 2 `demo_nodes_cpp` talker and listener nodes in separate terminals. It explicitly disables ROS security by unsetting `ROS_SECURITY_ENABLE`. The nodes are launched with specific `--enclave` arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Disable ROS Security for both terminals\nunset ROS_SECURITY_ENABLE\n\n# In terminal 1:\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker\n\n# In terminal 2:\nros2 run demo_nodes_cpp listener --ros-args --enclave /talker_listener/listener\n```\n\n----------------------------------------\n\nTITLE: Call ROS 2 Setup File (Batch) (bat)\nDESCRIPTION: Executes the `setup.bat` file from an extracted ROS 2 binary archive installation on Windows. This command sets up the necessary environment variables in the current command prompt session to use the ROS 2 installation from the archive.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_8\n\nLANGUAGE: bat\nCODE:\n```\ncall path\\to\\extracted\\archive\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: use rcutils_get_env.\nDESCRIPTION: This uses `rcutils_get_env` likely to replace a custom method for environment variable retrieval. Dependencies include the rcutils library.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_43\n\n\n\n----------------------------------------\n\nTITLE: Updating package.xml Metadata\nDESCRIPTION: Adds or updates the description, maintainer information, and license tag within the `package.xml` file of the newly created ROS 2 package. These fields are standard for ROS 2 package metadata.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<description>Python parameter events client tutorial</description>\n  <maintainer email=\"you@email.com\">Your Name</maintainer>\n  <license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Running Gazebo simulation\nDESCRIPTION: This command is used to verify the Gazebo installation. It launches the Gazebo simulator, allowing users to confirm that Gazebo is correctly installed and configured on their system. No specific inputs or outputs are described beyond starting the simulator.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Gazebo/Gazebo.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngz sim\n```\n\n----------------------------------------\n\nTITLE: Registering an Extension with ament_register_extension in CMake\nDESCRIPTION: Example using `ament_register_extension` to associate a CMake script (`rosidl_generator_cpp_generate_interfaces.cmake`) from a specific package (`rosidl_generator_cpp`) with an ament extension point (`rosidl_generate_interfaces`). This mechanism allows the registered script to be automatically executed when the function defining the extension point is called, commonly used for tasks like code generation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nament_register_extension(\n  \"rosidl_generate_interfaces\"\n  \"rosidl_generator_cpp\"\n  \"rosidl_generator_cpp_generate_interfaces.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Correcting Thread Safety Warning by Locking Member Access - C++\nDESCRIPTION: This snippet revises the get() method of a C++ class, properly locking access to a protected member variable for thread safety. By acquiring a lock with std::lock_guard before returning the shared variable, it prevents race conditions and satisfies clang's thread safety analyzer. Dependencies: C++ threading library, rcpputils annotations (if used), and Clang with thread safety analysis flags. Expected input: class containing a mutex and shared member; output: safe, correct access patterns.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid get() const {\n  std::lock_guard<std::mutex> lock(mutex_);\n  return bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Block Parameterized Macro in Xacro\nDESCRIPTION: This XML snippet demonstrates the use of block parameters in a xacro macro.  A block parameter (indicated by `*shape`) allows passing entire XML structures as arguments to the macro.  The `<xacro:insert_block>` command is then used to insert the block parameter where the macro is used, allowing more complex and flexible constructions. This example shows how to create a reusable macro that can accept different shapes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<xacro:macro name=\"blue_shape\" params=\"name *shape\">\n    <link name=\"${name}\">\n        <visual>\n            <geometry>\n                <xacro:insert_block name=\"shape\" />\n            </geometry>\n            <material name=\"blue\"/>\n        </visual>\n        <collision>\n            <geometry>\n                <xacro:insert_block name=\"shape\" />\n            </geometry>\n        </collision>\n    </link>\n</xacro:macro>\n\n<xacro:blue_shape name=\"base_link\">\n    <cylinder radius=\".42\" length=\".01\" />\n</xacro:blue_shape>\n```\n\n----------------------------------------\n\nTITLE: Python script to emulate Kobuki robot sensor data\nDESCRIPTION: A Python script that creates a ROS 2 node to publish simulated odometry and IMU data, emulating a Kobuki base robot. It publishes to the 'odom' and 'imu_data' topics at different frequencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\nimport time\n\nimport rclpy\n\nfrom nav_msgs.msg import Odometry\nfrom sensor_msgs.msg import Imu\n\ndef main():\n    rclpy.init(args=sys.argv)\n\n    node = rclpy.create_node('emulate_kobuki_node')\n\n    imu_publisher = node.create_publisher(Imu, 'imu_data')\n    odom_publisher = node.create_publisher(Odometry, 'odom')\n\n    imu_msg = Imu()\n    odom_msg = Odometry()\n    counter = 0\n    while True:\n        counter += 1\n        now = time.time()\n        if (counter % 50) == 0:\n            odom_msg.header.stamp.sec = int(now)\n            odom_msg.header.stamp.nanosec = int(now * 1e9) % 1000000000\n            odom_publisher.publish(odom_msg)\n        if (counter % 100) == 0:\n            imu_msg.header.stamp.sec = int(now)\n            imu_msg.header.stamp.nanosec = int(now * 1e9) % 1000000000\n            imu_publisher.publish(imu_msg)\n            counter = 0\n        time.sleep(0.001)\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n```\n\n----------------------------------------\n\nTITLE: Setting a Mesh Resource Marker in ROS2 Visualization Markers Using C++\nDESCRIPTION: This snippet demonstrates how to configure a Marker message to represent a mesh resource in the ROS2 visualization system. It sets the marker type to MESH_RESOURCE and assigns a mesh resource URI using the package:// syntax, which allows loading mesh files from ROS packages. This example requires ROS2 visualization_msgs/msg/Marker and assumes the mesh file is a COLLADA (.dae) or supported format located within the specified package path. The scale of the mesh can be adjusted later to resize the mesh while maintaining proportions. Mesh materials embedded in the mesh file can optionally be used for rendering instead of the marker's color.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/Marker-Display-types/Marker-Display-types.rst#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nmarker.type = visualization_msgs::Marker::MESH_RESOURCE;\\nmarker.mesh_resource = \"package://pr2_description/meshes/base_v0/base.dae\";\n```\n\n----------------------------------------\n\nTITLE: Launching Demo ROS 2 Nodes with ros2 launch - console\nDESCRIPTION: This snippet shows how to use the 'ros2 launch' command in the console to start the 'talker_listener_launch.py' launch file from the 'demo_nodes_cpp' package. This requires that the ROS 2 environment has been properly sourced and that the specified demo package and launch file are available within the workspace. Input: none. Output: starts ROS 2 demo nodes for publisher-subscriber communication.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\nros2 launch demo_nodes_cpp talker_listener_launch.py\n```\n\n----------------------------------------\n\nTITLE: Launching the turtle_tf2_demo in ROS2\nDESCRIPTION: This command starts the 'turtle_tf2_demo_launch.py' launch file, initializing the turtlesim simulation and broadcasting TF2 transformations. It sets up the environment for controlling and visualizing the robot pose through ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_17\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 launch learning_tf2_py turtle_tf2_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Fixing CMake List Transform for Exported Dependencies\nDESCRIPTION: Fix for the ament_cmake_export_dependencies package to address an issue where list(TRANSFORM) is only available from CMake version 3.12 onwards. It converts to string instead.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfix cmake list(TRANSFORM ) is only available from version 3.12, convert to string instead\n```\n\n----------------------------------------\n\nTITLE: Running cam2image in ROS 2\nDESCRIPTION: Command to run the cam2image program from image_tools package with the -b option to generate synthetic images without requiring a camera.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Shell C:\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS 2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nros2 run image_tools cam2image -- -b\n```\n\n----------------------------------------\n\nTITLE: Quiet a clang warning about a Qt memory leak.\nDESCRIPTION: This suppresses a clang warning concerning a Qt memory leak. The warning is resolved by adjusting the code. Dependencies depend on the Qt code being corrected.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Throttled logging skipping the first message in ROS 2 nodes using C++\nDESCRIPTION: Logs DEBUG severity messages throttled to once per given interval (milliseconds) while skipping the very first occurrence, using 'RCLCPP_DEBUG_SKIPFIRST_THROTTLE' macros with printf-style and stream-style syntax. Both macros take logger, clock, interval, and message parameters. This is useful to limit frequent log output after initialization phase.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\n// printf style\nRCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(), *node->get_clock(), 1000, \"My log message %d\", 4);\n\nRCLCPP_DEBUG_SKIPFIRST_THROTTLE(node->get_logger(), *node->get_clock(), 1000, \"My log message \" << 4);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Frame Demo ROS2 Launch File Python\nDESCRIPTION: This entry refers to a Python launch file used to start the dynamic TF2 frame broadcasting demo. The actual code for the launch file is included via a `literalinclude` directive in the source text, but is not present in this excerpt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Console directive for terminal commands without output\nDESCRIPTION: Alternative approach using the console directive with '$' prefixes for terminal commands without output. This clearly indicates these are terminal commands while allowing only the commands to be copied.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ source /opt/ros/{DISTRO}/setup.bash\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Echoing Action Events with ros2 action echo (Console)\nDESCRIPTION: This command observes live introspection data for an action using 'ros2 action echo --flow-style' with a specific action name (e.g., /fibonacci). The output includes interface type, event types (e.g., REQUEST_SENT), timestamps, client IDs, request payloads, and more. It is intended for debugging or auditing action event flows. Requires the action to have introspection enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 action echo --flow-style /fibonacci\ninterface: GOAL_SERVICE\ninfo:\n  event_type: REQUEST_SENT\n  stamp:\n    sec: 1744917904\n    nanosec: 760683446\n  client_gid: [1, 15, 165, 231, 234, 109, 65, 202, 0, 0, 0, 0, 0, 0, 19, 4]\n  sequence_number: 1\nrequest: [{goal_id: {uuid: [81, 55, 121, 145, 81, 66, 209, 93, 214, 113, 255, 100, 120, 6, 102, 83]}, goal: {order: 10}}]\nresponse: []\n---\n...\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Single Server (Windows)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Windows to specify a single discovery server address.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nset ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Repository Initialization in Bloom\nDESCRIPTION: Prompt to confirm the initialization of a new Git repository with an empty commit when setting up a release repository for the first time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFreshly initialized git repository detected.\nAn initial empty commit is going to be made.\nContinue [Y/n]?\n```\n\n----------------------------------------\n\nTITLE: Maintainer Change and Test Dependency in rqt_shell (Python)\nDESCRIPTION: This code updates the maintainer information to 'clalancette' and adds pytest dependency in rqt_shell, a ROS2 shell interface plugin, to enhance testing capabilities and reflect current maintainership.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_49\n\nLANGUAGE: Python\nCODE:\n```\nChange maintainer to clalancette. (\\#21 <https://github.com/ros-visualization/rqt_shell/issues/21>)\\nAdd in pytest test dependency. (\\#19 <https://github.com/ros-visualization/rqt_shell/issues/19>)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements (Linux)\nDESCRIPTION: This command installs the Python dependencies listed in 'requirements.txt', using constraints specified in 'constraints.txt'.  This is used to set up the environment for building the ROS 2 documentation on Linux.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\npip install -r requirements.txt -c constraints.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Subscriptions with Explicit QoS or Depth in rclpy (Python)\nDESCRIPTION: Demonstrates the preferred Dashing API for creating subscriptions in rclpy, where a history depth or a QoSProfile is mandatory. Samples use the 'BasicTypes' message and 'chatter' topic, passing a lambda callback and either an integer depth or a QoSProfile object as the fourth argument. The main dependency is rclpy; assumes 'node' and 'qos_profile_sensor_data' are defined. Returns a Subscription instance. Deprecated forms without depth or QoSProfile will trigger warnings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nnode.create_subscription(BasicTypes, 'chatter', lambda msg: print(msg), 10)\nnode.create_subscription(BasicTypes, 'chatter', lambda msg: print(msg), qos_profile_sensor_data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Deployment YAML for ROS 2 Docker Images - Bash\nDESCRIPTION: This YAML file defines a Kubernetes Deployment for deploying a custom ROS 2 Docker image to an IBM Cloud-managed cluster. The parameters include deployment name, number of replicas, app labels, container name, image URI, and tag. Required software includes Kubernetes and kubectl, with the expectation that the provided image tag is already built and available in the IBM Cloud registry. Replace angle-bracketed placeholders with appropriate values for your project.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: <deployment>\nspec:\n  replicas: <number_of_replicas>\n  selector:\n    matchLabels:\n      app: <app_name>\n  template:\n    metadata:\n      labels:\n        app: <app_name>\n    spec:\n      containers:\n      - name: <app_name>\n        image: <region>.icr.io/<namespace>/<image>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Declaring Parameters in rclpy.node.Node (Python)\nDESCRIPTION: Shows the modern approach for declaring single or multiple parameters on a rclpy node, using the 'declare_parameter' and 'declare_parameters' methods with optional default values and descriptors. Dependencies include rclpy and rcl_interfaces modules. Inputs are parameter names, values, and descriptors. Outputs are Parameter objects or lists thereof. Passing only 'name' is allowed; descriptors are optional. The API ensures parameters are declared before use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndef declare_parameter(\n    name: str,\n    value: Any = None,\n    descriptor: ParameterDescriptor = ParameterDescriptor()\n) -> Parameter\n\ndef declare_parameters(\n  namespace: str,\n  parameters: List[Union[\n      Tuple[str],\n      Tuple[str, Any],\n      Tuple[str, Any, ParameterDescriptor],\n  ]]\n) -> List[Parameter]\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Single Server Partition (Listener 2 - Windows)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Windows to connect 'Listener 2' to only Server 2 for the partition example, using a leading semicolon.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\nset ROS_DISCOVERY_SERVER=\";127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Importing StaticTransformBroadcaster\nDESCRIPTION: Imports the `StaticTransformBroadcaster` class from the `tf2_ros.static_transform_broadcaster` module. This specialized broadcaster is optimized for publishing transforms that do not change over time, sending them only once.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster\n```\n\n----------------------------------------\n\nTITLE: Switch to Cyclone DDS RMW implementation (bash)\nDESCRIPTION: This command sets the `RMW_IMPLEMENTATION` environment variable to `rmw_cyclonedds_cpp`, which tells ROS 2 to use Cyclone DDS as the RMW implementation.  This needs to be executed in every terminal where you want to use Cyclone DDS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport RMW_IMPLEMENTATION=rmw_cyclonedds_cpp\n```\n\n----------------------------------------\n\nTITLE: Version Header Installation Path in CMake\nDESCRIPTION: Shows the path where the generated version header will be installed by the ament_generate_version_header function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(VERSION_HEADER ${CMAKE_INSTALL_PREFIX}/include/my_project/my_project/version.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMakeLists.txt for Executables\nDESCRIPTION: Provides the complete content of the CMakeLists.txt file. It defines the minimum required CMake version, the project name, finds necessary ROS 2 packages (ament_cmake, rclcpp, example_interfaces), adds executable build rules for both the server and client nodes, links them against required libraries, defines installation rules for both executables, and includes the ament_package() macro.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_15\n\nLANGUAGE: Console\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(cpp_srvcli)\n\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(example_interfaces REQUIRED)\n\nadd_executable(server src/add_two_ints_server.cpp)\ntarget_link_libraries(server PUBLIC rclcpp::rclcpp ${example_interfaces_TARGETS})\n\nadd_executable(client src/add_two_ints_client.cpp)\ntarget_link_libraries(client PUBLIC rclcpp::rclcpp ${example_interfaces_TARGETS})\n\ninstall(TARGETS\n  server\n  client\n  DESTINATION lib/${PROJECT_NAME})\n\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Using `<build_depend>` for Test Dependencies (Format 1)\nDESCRIPTION: Illustrates how a test-only dependency ('testfoo') might have been declared using `<build_depend>` in `package.xml` format 1 due to the limitations of `<test_depend>` in that format. This should be corrected in format 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<build_depend>testfoo</build_depend>\n```\n\n----------------------------------------\n\nTITLE: Generating Network Traffic Graph with Python\nDESCRIPTION: Runs the Python script to process captured network traffic data and produce a comparative graph (discovery packets visualization). This helps analyze the network load with different discovery methods.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 discovery_packets.py\n```\n\n----------------------------------------\n\nTITLE: Building Production Code with ThreadSanitizer Using Clang - C++\nDESCRIPTION: This snippet demonstrates how to compile and link C++ production code with the ThreadSanitizer instrumentation enabled by adding the -fsanitize=thread option to the clang and clang++ commands. This is necessary to activate runtime checks for data races and deadlocks. Requires a modern version of Clang with ThreadSanitizer support, and all source files and linked libraries must be compatible or instrumented likewise. The instrumented binary may consume additional memory and produce different runtime behavior due to inserted checks.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nclang++ -fsanitize=thread -g your_source.cpp -o your_program\n```\n\n----------------------------------------\n\nTITLE: Scoping Environment Variables in Python Launch Files (ROS 2 Foxy Patch 8)\nDESCRIPTION: Demonstrates the behavior change in ROS 2 Foxy Patch 8 for Python launch files, where the `SetEnvironmentVariable` action is now scoped to the `GroupAction` it's returned from. The node 'foo' will start with 'my_env_var=1' due to the second `SetEnvironmentVariable` being scoped within the `GroupAction`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport launch\nfrom launch.actions import SetEnvironmentVariable\nfrom launch.actions import GroupAction\nfrom launch_ros.actions import Node\n\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        SetEnvironmentVariable(name='my_env_var', value='1'),\n        Node(package='foo', executable='foo', output='screen'),\n        GroupAction([\n            SetEnvironmentVariable(name='my_env_var', value='2'),\n        ]),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Launching ROS2 Talker Node\nDESCRIPTION: Starts the ROS2 talker node with node remapping in CLI. This node publishes messages on the 'chatter' topic, enabling discovery with listener nodes configured similarly. Inputs include the node name remap argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp talker --ros-args --remap __node:=talker\n```\n\n----------------------------------------\n\nTITLE: Enhancements to ros2topic CLI tool in Python\nDESCRIPTION: The ros2topic changelog reflects improvements such as timeout support for hanging tests, YAML output formatting, echo once functionality, QoS info enhancements, and default settings for reliability and durability. These modifications improve usability, diagnostics, and performance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* Add timeout to kill hanging tests (\\#701 <https://github.com/ros2/ros2cli/issues/701>)\\n* Add yaml dump flow style. (\\#698 <https://github.com/ros2/ros2cli/issues/698>)\\n* support ros2topic echo once option. (\\#695 <https://github.com/ros2/ros2cli/issues/695>)\\n* Fix special case for fastrtps incompatible QoS. (\\#694 <https://github.com/ros2/ros2cli/issues/694>)\\n* Depend on launch packages instead of ros_testing to avoid circular dependency (\\#685 <https://github.com/ros2/ros2cli/issues/685>)\\n* Add QoS history and depth information if available. (\\#678 <https://github.com/ros2/ros2cli/issues/678>)\\n* Cleanup mislabeled BSD license (\\#447 <https://github.com/ros2/ros2cli/issues/447>)\\n* Update maintainers to Aditya Pande, Audrow Nash, and Michael Jeronimo (\\#673 <https://github.com/ros2/ros2cli/issues/673>)\\n* Updated maintainers (\\#670 <https://github.com/ros2/ros2cli/issues/670>)\\n* Update lost messages test case (\\#669 <https://github.com/ros2/ros2cli/issues/669>)\\n* Implementation of message filtering for ros2 (\\#654 <https://github.com/ros2/ros2cli/issues/654>)\\n* Change default QoSProfile for pub (\\#653 <https://github.com/ros2/ros2cli/issues/653>)\\n* Add option in ros2 topic pub to wait for N matching subscriptions, use N=1 by default when combined with --times (\\#642 <https://github.com/ros2/ros2cli/issues/642>)\\n* ``ros2 topic pub`` starts publishing right away. (\\#626 <https://github.com/ros2/ros2cli/issues/626>)\\n* Fix Topic Info Test with \"Infinite\" printing (\\#616 <https://github.com/ros2/ros2cli/issues/616>)\\n* Add changelogs (\\#635 <https://github.com/ros2/ros2cli/issues/635>)\\n* QoS autodetection (\\#613 <https://github.com/ros2/ros2cli/issues/613>)\\n* Make Lost Messages option ON by default (\\#633 <https://github.com/ros2/ros2cli/issues/633>)\\n* Contributors: Aditya Pande, Audrow Nash, Chris Lalancette, Emerson Knapp, Gonzo, Ivan Santiago Paunovic, Jorge Perez, Shane Loretz, Tomoya Fujita, Tully Foote, matthews-jca\n```\n\n----------------------------------------\n\nTITLE: Persistently Enabling Loaned Messages (Windows)\nDESCRIPTION: Permanently sets the ROS_DISABLE_LOANED_MESSAGES environment variable to '0' for the user account using the setx command. This setting persists across sessions but requires opening a new command prompt to take effect.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_12\n\nLANGUAGE: batch\nCODE:\n```\nsetx ROS_DISABLE_LOANED_MESSAGES 0\n```\n\n----------------------------------------\n\nTITLE: Calling Ros2Supervisor Spawn Node Service via ROS 2 Console Command\nDESCRIPTION: Demonstrates how to spawn a Webots node named 'imported_robot' by calling the /Ros2Supervisor/spawn_node_from_string ROS 2 service from the console. The service expects a string representation of the Webots node to instantiate. This command assumes the spawn node service is available and the ROS 2 environment is properly sourced.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service call /Ros2Supervisor/spawn_node_from_string webots_ros2_msgs/srv/SpawnNodeFromString \"data: Robot { name \\\"imported_robot\\\" }\"\n```\n\n----------------------------------------\n\nTITLE: Including a README.md using a proxy (RST)\nDESCRIPTION: This snippet demonstrates how to include an existing README.md file in the Sphinx documentation. It utilizes a proxy file (readme_include.md) to preserve relative links and images in the original Markdown file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n    .. include:: readme_include.md\n       :parser: myst_parser.sphinx_\n```\n\n----------------------------------------\n\nTITLE: Recording Data with QoS Durability Override CLI\nDESCRIPTION: This is the command-line example demonstrating how to use `ros2 bag record` to record data and applies the specified QoS override. It uses the `--qos-profile-overrides-path` flag to point to a YAML file (`durability_override.yaml`). The primary dependency is the `ros2 bag` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record -a -o my_bag --qos-profile-overrides-path durability_override.yaml\n```\n\n----------------------------------------\n\nTITLE: Contributing Environment Variable Checks in rti_connext_dds_cmake_module (CMake)\nDESCRIPTION: This snippet describes using a unified approach for environment variable existence checks within the rti_connext_dds_cmake_module, a CMake module for ROS2 middleware with Connext DDS, improving build robustness.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_52\n\nLANGUAGE: CMake\nCODE:\n```\nUse unified approach for checking the existence of environment variables (\\#105 <https://github.com/ros2/rmw_connextdds/issues/105>)\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio Code from Sourced Environment on Windows\nDESCRIPTION: Shows Windows command line and PowerShell instructions to source ROS 2 and workspace setup scripts and launch VSCode such that it inherits the ROS 2 environment on Windows systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/ROS-2-IDEs.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ call C:\\dev\\ros2\\local_setup.bat\n$ cd C:\\dev_ws\n$ call .\\install\\local_setup.bat\n$ \"C:\\Program Files\\Microsoft VS Code\\Code.exe\" .\\src\\my_node\\\n```\n\nLANGUAGE: console\nCODE:\n```\n$ C:\\dev\\ros2\\local_setup.ps1\n$ cd C:\\dev_ws\n$ .\\install\\local_setup.ps1\n$ & \"C:\\Program Files\\Microsoft VS Code\\Code.exe\" .\\src\\my_node\\\n```\n\n----------------------------------------\n\nTITLE: Echoing Replayed Service Events with ros2 service (Console)\nDESCRIPTION: Run this command to observe live replay of service requests and responses using 'ros2 service echo --flow-style'. The sample output includes event details such as REQUEST_RECEIVED and RESPONSE_SENT, with timestamps, client GIDs, sequence numbers, requests, and responses. This facilitates verification of replayed service calls. Requires Service Introspection enabled and the service node running.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service echo --flow-style /add_two_ints\ninfo:\n  event_type: REQUEST_RECEIVED\n  stamp:\n    sec: 1713998176\n    nanosec: 372700698\n  client_gid: [1, 15, 96, 219, 80, 2, 158, 123, 0, 0, 0, 0, 0, 0, 20, 4]\n  sequence_number: 1\nrequest: [{a: 2, b: 3}]\nresponse: []\n---\ninfo:\n  event_type: RESPONSE_SENT\n  stamp:\n    sec: 1713998176\n    nanosec: 373016882\n  client_gid: [1, 15, 96, 219, 80, 2, 158, 123, 0, 0, 0, 0, 0, 0, 20, 4]\n  sequence_number: 1\nrequest: []\nresponse: [{sum: 5}]\n```\n\n----------------------------------------\n\nTITLE: Defining a Fibonacci Action Message in ROS 2 - Plaintext\nDESCRIPTION: This snippet demonstrates an action definition for computing the Fibonacci sequence in ROS 2's action file syntax. The request includes an integer 'order' parameter, while both the response and feedback sections return an integer array 'sequence'. This format, used in .action files, is consumed by ROS 2 tools to autogenerate code for communicating action status, results, and feedback, but does not execute directly outside the ROS 2 system. It requires ROS 2's build and messaging infrastructure to be utilized.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Actions.rst#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nint32 order\n---\nint32[] sequence\n---\nint32[] sequence\n```\n\n----------------------------------------\n\nTITLE: Initializing TF2 Message Filter in C++ Constructor\nDESCRIPTION: Constructor implementation that initializes the tf2 buffer, transform listener, message subscriber, and message filter. It sets up a callback to process messages when transforms are available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nPoseDrawer()\n: Node(\"turtle_tf2_pose_drawer\")\n{\n  // Declare and acquire `target_frame` parameter\n  target_frame_ = this->declare_parameter<std::string>(\"target_frame\", \"turtle1\");\n\n  std::chrono::duration<int> buffer_timeout(1);\n\n  tf2_buffer_ = std::make_shared<tf2_ros::Buffer>(this->get_clock());\n  // Create the timer interface before call to waitForTransform,\n  // to avoid a tf2_ros::CreateTimerInterfaceException exception\n  auto timer_interface = std::make_shared<tf2_ros::CreateTimerROS>(\n    this->get_node_base_interface(),\n    this->get_node_timers_interface());\n  tf2_buffer_->setCreateTimerInterface(timer_interface);\n  tf2_listener_ =\n    std::make_shared<tf2_ros::TransformListener>(*tf2_buffer_);\n\n  point_sub_.subscribe(this, \"/turtle3/turtle_point_stamped\");\n  tf2_filter_ = std::make_shared<tf2_ros::MessageFilter<geometry_msgs::msg::PointStamped>>(\n    point_sub_, *tf2_buffer_, target_frame_, 100, this->get_node_logging_interface(),\n    this->get_node_clock_interface(), buffer_timeout);\n  // Register a callback with tf2_ros::MessageFilter to be called when transforms are available\n  tf2_filter_->registerCallback(&PoseDrawer::msgCallback, this);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Component Node in CMake for rclcpp_components (CMake)\nDESCRIPTION: Demonstrates how to register a ROS 2 composable node in a CMakeLists.txt file using the rclcpp_components_register_nodes macro. Assumes that 'listener' is a target built from 'src/listener.cpp' containing the composable node class. The macro associates the target with the class name ('composition::Listener') to enable dynamic component discovery. CMake 3.x (with ament and rclcpp_components) is required. The only outputs are build rules for the shared library and correct registration for node composition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(listener src/listener.cpp)\nrclcpp_components_register_nodes(listener \"composition::Listener\")\n```\n\n----------------------------------------\n\nTITLE: Filtering ros2 topic echo Output by Message Content\nDESCRIPTION: Provides an example command using `ros2 topic echo --filter` to subscribe to the `/chatter` topic and only display messages where the `data` field starts with the string \"foo\". The filter uses a Python expression evaluated against the message (`m`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nros2 topic echo --filter 'm.data.startswith(\"foo\")' /chatter\n```\n\n----------------------------------------\n\nTITLE: Installing Foxglove Bridge for ROS 2 (Bash)\nDESCRIPTION: Installs the `foxglove-bridge` package for the specified ROS 2 distribution using the `apt` package manager. This bridge is required to establish a WebSocket connection between a live ROS 2 stack and Foxglove. The `$ROS_DISTRO` environment variable must be set correctly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Related-Projects/Visualizing-ROS-2-Data-With-Foxglove.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ros-$ROS_DISTRO-foxglove-bridge\n```\n\n----------------------------------------\n\nTITLE: Creating Publishers with Explicit QoS or Depth in rclpy (Python)\nDESCRIPTION: Illustrates publisher creation in Python ROS 2 (rclpy) with the new Dashing API, requiring the depth or a QoSProfile to be set. Shows how to initialize a publisher with the 'Empty' message type and the 'chatter' topic, providing a depth value (10) or a QoSProfile object. Assumes 'node' is an instantiated rclpy.node.Node and 'qos_profile_sensor_data' is a valid QoSProfile. Outputs a Publisher instance. Previous patterns without depth or QoSProfile will raise deprecation warnings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nnode.create_publisher(Empty, 'chatter', 10)\nnode.create_publisher(Empty, 'chatter', qos_profile_sensor_data)\n```\n\n----------------------------------------\n\nTITLE: Checking ROS 2 Environment Variables on Linux/macOS\nDESCRIPTION: This command filters all environment variables containing 'ROS' to verify correct setup of the ROS 2 environment variables like ROS_DISTRO and ROS_VERSION.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ printenv | grep -i ROS\n```\n\n----------------------------------------\n\nTITLE: Configuring ROS2 Listener Node on Windows\nDESCRIPTION: Sets the environment variable for the ROS Discovery Server on Windows to connect ROS2 tools and nodes to the specified discovery server. Necessary before launching the listener node to ensure proper discovery configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ set ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"\n```\n\n----------------------------------------\n\nTITLE: Codespell Whitelist Example\nDESCRIPTION: These are examples of words that can be added to the codespell whitelist to prevent them from being flagged as misspellings. This is useful for technical terms or project-specific vocabulary.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nempy\nws\nlets\njupyter\n```\n\n----------------------------------------\n\nTITLE: Removing ROS 2 Workspace Directory\nDESCRIPTION: This code snippet removes the entire ROS 2 workspace directory, effectively uninstalling the ROS 2 installation. Use with caution as it will delete all files within the directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/ros2_{DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Installing tf2 Demo Dependencies on Ubuntu\nDESCRIPTION: Installs required ROS 2 packages for the tf2 turtlesim demo on Ubuntu using apt-get. Packages include rviz2, turtle_tf2_py, tf2_ros, tf2_tools, and turtlesim. Replace {DISTRO} with your specific ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install ros-{DISTRO}-rviz2 ros-{DISTRO}-turtle-tf2-py ros-{DISTRO}-tf2-ros ros-{DISTRO}-tf2-tools ros-{DISTRO}-turtlesim\n```\n\n----------------------------------------\n\nTITLE: ROS2 tf2_ros Python API with Twist Interpolator Support\nDESCRIPTION: Provides Python interfaces for tf2_ros, including support for twist interpolation features. Dependencies include tf2_ros_py and ROS2 Python libraries. It offers transformation and listener functionalities in Python, aligned with ROS2 standards.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_68\n\nLANGUAGE: Python\nCODE:\n```\n# Enable twist interpolator support in tf2_ros Python\n# Provides Python API for tf2_ros functionalities\n\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with colcon\nDESCRIPTION: Uses the `colcon` build tool to compile the specified ROS 2 package (`cpp_parameter_event_handler`) within the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select cpp_parameter_event_handler\n```\n\n----------------------------------------\n\nTITLE: Test Enhancements and Crash Fixes in rqt_py_console (Python)\nDESCRIPTION: This snippet details adding pytest as a test dependency and fixing a crash in the rqt_py_console dialog box, improving robustness and test coverage of the console plugin used within ROS2 for Python.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_46\n\nLANGUAGE: Python\nCODE:\n```\nAdd in test dependency on pytest. (\\#16 <https://github.com/ros-visualization/rqt_py_console/issues/16>)\\nFix a crash in the rqt_py_console dialog box. (\\#15 <https://github.com/ros-visualization/rqt_py_console/issues/15>)\n```\n\n----------------------------------------\n\nTITLE: Entering Release Repository URL in Bloom\nDESCRIPTION: Command prompt for entering the URL of your release repository, which should be in the format 'https://github.com/ros2-gbp/my_repo-release.git' for repositories hosted on ros2-gbp.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNo reasonable default release repository url could be determined from previous releases.\nRelease repository url [press enter to abort]:\n```\n\n----------------------------------------\n\nTITLE: Validating Tracing Configuration in ROS 2\nDESCRIPTION: Commands to validate that tracing is disabled by running the tracetools status command, which will output different messages depending on whether tracepoints are disabled or instrumentation is completely removed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-ROS-2-with-Tracing.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/ws\n$ source install/setup.bash\n$ ros2 run tracetools status\n```\n\n----------------------------------------\n\nTITLE: Final migrated ROS 2 talker node example using rclpy, threading, and std_msgs.msg.String in Python\nDESCRIPTION: Complete example of the migrated talker ROS 2 node Python code that initializes rclpy, starts a background executor thread, creates and adds a node, publisher, and rate to the executor, then loops publishing timestamped messages with proper logging until shutdown.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nimport threading\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom std_msgs.msg import String\n\n\ndef spin_in_background():\n    executor = rclpy.get_global_executor()\n    try:\n        executor.spin()\n    except ExternalShutdownException:\n        pass\n\n\ndef main():\n    rclpy.init()\n    # In rospy callbacks are always called in background threads.\n    # Spin the executor in another thread for similar behavior in ROS 2.\n    t = threading.Thread(target=spin_in_background)\n    t.start()\n\n    node = rclpy.create_node('talker')\n    rclpy.get_global_executor().add_node(node)\n    pub = node.create_publisher(String, 'chatter', 10)\n    rate = node.create_rate(10)  # 10hz\n\n    while rclpy.ok():\n```\n\n----------------------------------------\n\nTITLE: Editing setup.py to Include Launch and Asset Files and Define Console Entry Point in Python\nDESCRIPTION: This snippet shows the modifications required in the setup.py file of the Python package to include launch and URDF files in the package install path and to define a console script entry point for running the state_publisher node. It requires importing os, glob, setuptools modules and configuring the data_files list and entry_points dictionary accordingly. These changes enable colcon to install additional resources and setup executable scripts for command-line usage.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-py.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom glob import glob\nfrom setuptools import setup\nfrom setuptools import find_packages\n```\n\nLANGUAGE: python\nCODE:\n```\ndata_files=[\n  ...\n  (os.path.join('share', package_name, 'launch'), glob('launch/*')),\n  (os.path.join('share', package_name), glob('urdf/*')),\n],\n```\n\nLANGUAGE: python\nCODE:\n```\n    'console_scripts': [\n        'state_publisher = urdf_tutorial_r2d2.state_publisher:main'\n    ],\n```\n\n----------------------------------------\n\nTITLE: Suppressing ThreadSanitizer Instrumentation with Blacklist Ignorelist Files - C++\nDESCRIPTION: This snippet illustrates how to instruct Clang to use a blacklist (now called ignorelist) file via the --fsanitize-blacklist option. Entries in this file define file, function, or pattern rules for code sections that should not be instrumented by ThreadSanitizer. Prerequisites: properly formatted ignorelist file and build with supported Clang versions. Limitations: incorrectly formatted lists may leave undesired code uninstrumented or unchecked.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nclang++ -fsanitize=thread -g your_source.cpp -o your_program --fsanitize-blacklist=ignorelist.txt\n```\n\n----------------------------------------\n\nTITLE: Updating ROS2 Package Description and License in package.xml (XML)\nDESCRIPTION: Demonstrates how to replace placeholder values in a ROS2 package.xml manifest file with meaningful metadata. Specifically, it updates the 'description' tag to summarize the package purpose, and sets the 'license' tag to 'Apache-2.0'. This modification is essential to comply with ROS2 package release requirements and open source licensing practice. This snippet assumes prior knowledge of XML editing. Inputs are user-defined descriptive text and license identifier; outputs are an updated package.xml file that reflects these details.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n  <description>Beginner client libraries tutorials practice package</description>\n```\n\nLANGUAGE: xml\nCODE:\n```\n  <license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Assigning Shared Mutually Exclusive Callback Group (Leads to Deadlock) in rclcpp (C++)\nDESCRIPTION: This snippet shows how assigning both a service client and timer to the same mutually exclusive callback group in rclcpp (C++) leads to a service deadlock. By setting timer_cb_group_ = client_cb_group_ after creating a single MutuallyExclusive group, both asynchronous operations contend for the same execution slot, preventing their callbacks from running concurrently. This serves as a cautionary example and highlights the need for using separate callback groups for concurrent asynchronous actions in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nclient_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\ntimer_cb_group_ = client_cb_group_;\n```\n\n----------------------------------------\n\nTITLE: Capturing a Single ROS 2 Message to a YAML File (Console)\nDESCRIPTION: Uses the `ros2 topic echo` command with the `--once` flag to capture a single message currently being published on the `/cmd_vel` topic. The standard output, containing the message in YAML format, is redirected ('>') to create or overwrite the file `cmd_vel.yaml` in the current directory. This assumes an entity is publishing to `/cmd_vel`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Publishing-Messages-Using-YAML-Files.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo --once  /cmd_vel > cmd_vel.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Node Respawn in ROS 2 Launch (Python)\nDESCRIPTION: Demonstrates a basic ROS 2 launch file configuration using the `respawn=True` parameter on a `WebotsController` node. This setting ensures that the main robot driver node is automatically restarted by the launch system when it exits, which occurs during a Webots simulation reset. This method is suitable for simple setups where only the primary controller needs to be restarted.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef generate_launch_description():\n    robot_driver = WebotsController(\n        robot_name='my_robot',\n        parameters=[\n            {'robot_description': robot_description_path}\n        ],\n\n        # Every time one resets the simulation the controller is automatically respawned\n        respawn=True\n    )\n\n    # Starts Webots\n    webots = WebotsLauncher(world=PathJoinSubstitution([package_dir, 'worlds', world]))\n\n    return LaunchDescription([\n        webots,\n        robot_driver\n    ])\n```\n\n----------------------------------------\n\nTITLE: Implementing a PointStamped Message Broadcaster in Python for ROS 2\nDESCRIPTION: This Python code creates a node that spawns a new turtle (turtle3), publishes its position as PointStamped messages, and makes it move in a circular pattern. It demonstrates how to publish stamped messages that can be processed by tf2_ros::MessageFilter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom geometry_msgs.msg import PointStamped\nfrom geometry_msgs.msg import Twist\n\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\n\nfrom turtlesim.msg import Pose\nfrom turtlesim.srv import Spawn\n\n\nclass PointPublisher(Node):\n\n    def __init__(self):\n        super().__init__('turtle_tf2_message_broadcaster')\n\n        # Create a client to spawn a turtle\n        self.spawner = self.create_client(Spawn, 'spawn')\n        # Boolean values to store the information\n        # if the service for spawning turtle is available\n        self.turtle_spawning_service_ready = False\n        # if the turtle was successfully spawned\n        self.turtle_spawned = False\n        # if the topics of turtle3 can be subscribed\n        self.turtle_pose_cansubscribe = False\n\n        self.timer = self.create_timer(1.0, self.on_timer)\n\n    def on_timer(self):\n        if self.turtle_spawning_service_ready:\n            if self.turtle_spawned:\n                self.turtle_pose_cansubscribe = True\n            else:\n                if self.result.done():\n                    self.get_logger().info(\n                        f'Successfully spawned {self.result.result().name}')\n                    self.turtle_spawned = True\n                else:\n                    self.get_logger().info('Spawn is not finished')\n        else:\n            if self.spawner.service_is_ready():\n                # Initialize request with turtle name and coordinates\n                # Note that x, y and theta are defined as floats in turtlesim_msgs/srv/Spawn\n                request = Spawn.Request()\n                request.name = 'turtle3'\n                request.x = 4.0\n                request.y = 2.0\n                request.theta = 0.0\n                # Call request\n                self.result = self.spawner.call_async(request)\n                self.turtle_spawning_service_ready = True\n            else:\n                # Check if the service is ready\n                self.get_logger().info('Service is not ready')\n\n        if self.turtle_pose_cansubscribe:\n            self.vel_pub = self.create_publisher(Twist, 'turtle3/cmd_vel', 10)\n            self.sub = self.create_subscription(Pose, 'turtle3/pose', self.handle_turtle_pose, 10)\n            self.pub = self.create_publisher(PointStamped, 'turtle3/turtle_point_stamped', 10)\n\n    def handle_turtle_pose(self, msg):\n        vel_msg = Twist()\n        vel_msg.linear.x = 1.0\n        vel_msg.angular.z = 1.0\n        self.vel_pub.publish(vel_msg)\n\n        ps = PointStamped()\n        ps.header.stamp = self.get_clock().now().to_msg()\n        ps.header.frame_id = 'world'\n        ps.point.x = msg.x\n        ps.point.y = msg.y\n        ps.point.z = 0.0\n        self.pub.publish(ps)\n\n\ndef main():\n    try:\n        with rclpy.init():\n            node = PointPublisher()\n            rclpy.spin(node)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating \"launch\" Directory for Package Launch Files - Shell\nDESCRIPTION: This command creates a new directory named \"launch\" inside the \"launch_tutorial\" package. This directory is intended to store all launch files (.py, .xml, .yaml) associated with the package. The command is provided for Linux and macOS using mkdir, and for Windows using md. Make sure the package directory exists before executing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir launch_tutorial/launch\n```\n\nLANGUAGE: shell\nCODE:\n```\nmd launch_tutorial/launch\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog with catkin\nDESCRIPTION: This command generates a changelog for the ROS package using the `catkin_generate_changelog` tool. It helps maintain a record of changes made in the package. The tool should be available if you have a catkin-based workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Subsequent-Releases.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ catkin_generate_changelog\n```\n\n----------------------------------------\n\nTITLE: Launching Multiple Shapes Display\nDESCRIPTION: This command launches the display.launch.py file from the urdf_tutorial package, but this time using the 02-multipleshapes.urdf model. This allows for visualization of the robot model that uses multiple shapes defined in the urdf file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch urdf_tutorial display.launch.py model:=urdf/02-multipleshapes.urdf\n```\n\n----------------------------------------\n\nTITLE: Setting ROS_DOMAIN_ID on Windows Command Line\nDESCRIPTION: This command sets the ROS_DOMAIN_ID environment variable in a Windows command prompt for current session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_11\n\nLANGUAGE: batch\nCODE:\n```\n$ set ROS_DOMAIN_ID=<your_domain_id>\n```\n\n----------------------------------------\n\nTITLE: Scripts and Configuration Files for Network Traffic Analysis\nDESCRIPTION: Provides scripts and configuration files to generate network traffic data for comparing Simple Discovery Protocol and Discovery Server approaches, including bash, Python, and XML files. These scripts require external tools like tshark and are intended for Linux only with ROS2 built against Fast DDS v2.1.0 or higher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n<!-- No code snippet in provided text, but references to 'scripts/generate_discovery_packages.bash' and 'scripts/discovery_packets.py' -->\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake to Use Clang\nDESCRIPTION: These commands install clang, set the CC and CXX environment variables to use clang, and trigger a reconfigure of CMake. It uses dnf, the package manager for Fedora/RHEL.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install clang\n   export CC=clang\n   export CXX=clang++\n   colcon build --cmake-force-configure\n```\n\n----------------------------------------\n\nTITLE: Implementing a Consumer Node in ROS2 using C++ for Intra-Process Communication\nDESCRIPTION: This snippet defines a ROS2 node called Consumer that subscribes to an integer message topic with intra-process communication enabled, and prints message value and address upon receipt to verify zero-copy message passing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <chrono>\n#include <cinttypes>\n#include <cstdio>\n#include <memory>\n#include <string>\n#include <utility>\n\n#include \"rclcpp/rclcpp.hpp\"\n#include \"std_msgs/msg/int32.hpp\"\n\nusing namespace std::chrono_literals;\n\n// Node that consumes messages.\nstruct Consumer : public rclcpp::Node\n{\n  Consumer(const std::string & name, const std::string & input)\n  : Node(name, rclcpp::NodeOptions().use_intra_process_comms(true))\n  {\n    // Create a subscription on the input topic which prints on receipt of new messages.\n    sub_ = this->create_subscription<std_msgs::msg::Int32>(\n      input,\n      10,\n      [](std_msgs::msg::Int32::UniquePtr msg) {\n        printf(\n          \" Received message with value: %d, and address: 0x%\" PRIXPTR \"\\n\", msg->data,\n          reinterpret_cast<std::uintptr_t>(msg.get()));\n      });\n  }\n\n  rclcpp::Subscription<std_msgs::msg::Int32>::SharedPtr sub_;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding exclude-topic-types to record\nDESCRIPTION: This adds functionality to exclude topic types when recording in the `ros2bag` package. This allows the user to filter unwanted topics based on their types for storage efficiency or noise reduction.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Updating Maintainer and Regex Handling in rqt_publisher (Python)\nDESCRIPTION: This snippet involves changing the maintainer information and switching to using raw strings for regular expressions in rqt_publisher, a Python-based ROS visualization tool. These updates ensure correct identification of maintainers and proper handling of regex patterns to prevent escape sequence issues.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_44\n\nLANGUAGE: Python\nCODE:\n```\nUse raw strings for regular expressions. (\\#44 <https://github.com/ros-visualization/rqt_publisher/issues/44>)\\nSwitch maintainer to me. (\\#43 <https://github.com/ros-visualization/rqt_publisher/issues/43>)\\nUpdate maintainer list in package.xml files (\\#42 <https://github.com/ros-visualization/rqt_publisher/issues/42>)\n```\n\n----------------------------------------\n\nTITLE: Installing ros-<DISTRO>-image-tools on Linux\nDESCRIPTION: Shell commands for installing the ROS 2 image_tools package either via binary packages or building from source, necessary for image publishing and subscribing demo.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install ros-{DISTRO}-image-tools\n```\n\n----------------------------------------\n\nTITLE: Export ROS2 Repository Information (Windows)\nDESCRIPTION: Exports the current state of the repositories in the workspace to a `my_ros2.repos` file. This file can be used to reproduce the same workspace state on another machine.  The script changes the directory to \\dev\\ros2_{DISTRO}.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd \\dev\\ros2_{DISTRO}\nvcs export src > my_ros2.repos\n```\n\n----------------------------------------\n\nTITLE: Executing catkin_prepare_release for ROS 2 Package Release\nDESCRIPTION: This command automates the release process for a ROS 2 package. It increments the version in `package.xml`, updates `CHANGELOG.rst` with the new version and date, commits these changes, creates a version tag, and pushes the commit and tag to the remote repository. By default, it bumps the patch version; use `--bump minor` or `--bump major` for different increments. Requires `package.xml` and `CHANGELOG.rst` files to be present and correctly formatted.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Bump-Package-Version.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncatkin_prepare_release\n```\n\n----------------------------------------\n\nTITLE: Capturing Encrypted ROS 2 Discovery Traffic - bash\nDESCRIPTION: Captures and displays network packets on any interface (`-i any`) filtered by UDP port 7400 using `tcpdump`. The `-X` option prints packet contents, showing that while some header information is visible, authentication and permission details are included, and the overall packet structure changes compared to unencrypted discovery. Requires root privileges (`sudo`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo tcpdump -X -i any udp port 7400\n```\n\n----------------------------------------\n\nTITLE: Running turtlesim and teleop_turtle Nodes\nDESCRIPTION: Starts the turtlesim and teleop_turtle nodes. These nodes will be used to generate data that will be recorded and played back.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Publishing Multiple ROS 2 Messages from a YAML File (Console)\nDESCRIPTION: Shows the execution of `ros2 topic pub` using a YAML file (`cmd_vel.yaml`) containing multiple messages (like the second YAML example). The command targets the `/cmd_vel` topic with type `geometry_msgs/msg/Twist`. It reads the specified YAML file and publishes each message defined within it (separated by `---`) sequentially.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Publishing-Messages-Using-YAML-Files.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /cmd_vel geometry_msgs/msg/Twist --yaml-file cmd_vel.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Data and Recording to Bag in ROS 2 Node (Python)\nDESCRIPTION: Implements a ROS 2 node (`DataGeneratorNode`) that uses a `rosbag2_py.SequentialWriter` to record synthetic `Int32` data to a bag file named `timed_synthetic_bag`. A timer triggers a callback every second to generate, serialize, and write the next data value with the current ROS time.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport rclpy\nfrom rclpy.executors import ExternalShutdownException\nfrom rclpy.node import Node\nfrom rclpy.serialization import serialize_message\nfrom example_interfaces.msg import Int32\n\nimport rosbag2_py\n\nclass DataGeneratorNode(Node):\n    def __init__(self):\n        super().__init__('data_generator_node')\n        self.data = Int32()\n        self.data.data = 0\n        self.writer = rosbag2_py.SequentialWriter()\n\n        storage_options = rosbag2_py.StorageOptions(\n            uri='timed_synthetic_bag',\n            storage_id='mcap')\n        converter_options = rosbag2_py.ConverterOptions('', '')\n        self.writer.open(storage_options, converter_options)\n\n        topic_info = rosbag2_py.TopicMetadata(\n            id=0,\n            name='synthetic',\n            type='example_interfaces/msg/Int32',\n            serialization_format='cdr')\n        self.writer.create_topic(topic_info)\n\n        self.timer = self.create_timer(1, self.timer_callback)\n\n    def timer_callback(self):\n        self.writer.write(\n            'synthetic',\n            serialize_message(self.data),\n            self.get_clock().now().nanoseconds)\n        self.data.data += 1\n\n\ndef main(args=None):\n    try:\n        with rclpy.init(args=args):\n            dgn = DataGeneratorNode()\n            rclpy.spin(dgn)\n    except (KeyboardInterrupt, ExternalShutdownException):\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Example: configure QoS with transient local durability policy\nDESCRIPTION: This code modifies QoS configuration for a publisher to use transient local durability policy, making it similar to latching in ROS1. It demonstrates how to create a rclcpp::QoS object with specific policies for reliable message delivery, enhancing message persistence.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- // Creates a latched topic\n- rmw_qos_profile_t qos = rmw_qos_profile_default;\n- qos.depth = 1;\n- qos.durability = RMW_QOS_POLICY_DURABILITY_TRANSIENT_LOCAL;\n- \n-   model_xml_.data = model_xml;\n-   node_handle->declare_parameter(\"robot_description\", model_xml);\n-   description_pub_ = node_handle->create_publisher<std_msgs::msg::String>(\n-   \"robot_description\", qos);\n+ // Creates a latched topic\n+ // Using rclcpp::QoS with transient local durability policy\n+ auto qos = rclcpp::QoS(1).transient_local();\n+ model_xml_.data = model_xml;\n+ node_handle->declare_parameter(\"robot_description\", model_xml);\n+ description_pub_ = node_handle->create_publisher<std_msgs::msg::String>(\"robot_description\", qos);\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files After Build (Console)\nDESCRIPTION: These commands source the ROS 2 workspace's setup files for bash or Windows batch. This step sets required environment variables before running built executables. Inputs: None. Outputs: Exports environment variables. Prerequisite: ros2_ws built with colcon. Choose the appropriate command for Linux, macOS, or Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_13\n\nLANGUAGE: Console\nCODE:\n```\n$ source install/setup.bash\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ call install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Creating Folders for ROS 2 Python Package - Console Shell\nDESCRIPTION: These commands create 'launch' and 'worlds' directories inside the previously generated 'my_package' directory. This is necessary for organizing launch files and simulation world files, which are commonly required for ROS 2 and Webots integration. The commands assume you are in the workspace source folder. After execution, 'my_package/launch' and 'my_package/worlds' folders will be present for placing launch configuration and world files, respectively.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd my_package\n$ mkdir launch\n$ mkdir worlds\n```\n\n----------------------------------------\n\nTITLE: Creating ROS 2 Workspace and Importing Repositories with vcs (Bash)\nDESCRIPTION: Creates a new ROS 2 workspace directory and initializes it by importing repositories listed in the ros2.repos file via vcs. Requires vcs tool to be installed and the REPOS_FILE_BRANCH variable properly set. Inputs are the ROS 2 distribution and branch; the resulting folder structure is ready for building. Outputs the populated workspace under ~/ros2_{DISTRO}/src.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_{DISTRO}/src\ncd ~/ros2_{DISTRO}\nvcs import --input https://raw.githubusercontent.com/ros2/ros2/{REPOS_FILE_BRANCH}/ros2.repos src\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files\nDESCRIPTION: Sources the ROS 2 setup files located in the `install` directory of the workspace. This makes the executables and libraries from the built packages available in the current terminal session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_11\n\nLANGUAGE: Linux\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: macOS\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: Windows\nCODE:\n```\ncall install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project Name\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.5 and defines the project name as 'my_package'. This is the standard starting point for a CMake project and essential for proper build configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(my_package)\n```\n\n----------------------------------------\n\nTITLE: Building the ROS 2 Workspace with colcon - Windows Console\nDESCRIPTION: Builds all packages in a ROS 2 workspace on Windows using colcon. The --symlink-install flag provides faster iteration for non-compiled files, and --merge-install combines install paths to avoid Windows long path issues. Run this in a Visual Studio Developer Command Prompt where the build environment has been set.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --symlink-install --merge-install\n\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ROS 2 Workspace\nDESCRIPTION: This snippet provides instructions on how to uninstall the ROS 2 workspace. This is accomplished by opening a new terminal and deleting the workspace directory, ensuring the environment will no longer use that installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/ros2_{DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Running a Python Listener\nDESCRIPTION: This command first sources the local setup script and then runs the python listener example. This validates that both C++ and Python APIs are working.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/install/local_setup.bash\n   ros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Handling Process Exit Events in a Python ROS 2 Launch File\nDESCRIPTION: This snippet demonstrates using `RegisterEventHandler` with `OnProcessExit` to react when a specific node (`turtlesim_node`) terminates. The `target_action` identifies the node being monitored. The `on_exit` parameter specifies actions to take: logging a message indicating the node closure (including the user who closed it via an environment variable) and emitting a `Shutdown` event using `EmitEvent` to trigger the shutdown of the entire launch process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n    on_turtlesim_exit = RegisterEventHandler(\n        OnProcessExit(\n            target_action=turtlesim_node,\n            on_exit=[LogInfo(msg=EnvironmentVariable(name='USER') +\n                           ' closed the turtlesim window'),\n                     EmitEvent(event=Shutdown(\n                         reason='Window closed'))]\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding ros2 service info\nDESCRIPTION: This addition adds the `ros2 service info` command to `ros2cli`, which enables users to inspect the service information of a specific service.  This command offers introspection capabilities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Building a Custom ROS 2 Dockerfile with Custom Packages - Bash\nDESCRIPTION: This comprehensive Dockerfile builds a ROS 2 Docker image with custom packages cloned from GitHub using multi-stage Docker builds. It introduces overlays for new packages, installs dependencies with rosdep, and builds selected demo nodes with colcon. The process requires Docker, vcs-tool, ROS 2 dependencies, an accessible GitHub repository, and optionally, colcon mixins. Inputs are build-time ARGs such as FROM_IMAGE and OVERLAY_WS; outputs are the built image, properly configured with entrypoints to launch specific nodes. Limitations include the need for compatible ROS 2 versions and external network access for cloning repositories.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nARG FROM_IMAGE=ros:foxy\nARG OVERLAY_WS=/opt/ros/overlay_ws\n\n# multi-stage for caching\nFROM $FROM_IMAGE AS cacher\n\n# clone overlay source\nARG OVERLAY_WS\nWORKDIR $OVERLAY_WS/src\nRUN echo \"\\\nrepositories: \\n\\\n  ros2/demos: \\n\\\n    type: git \\n\\\n    url: https://github.com/ros2/demos.git \\n\\\n    version: ${ROS_DISTRO} \\n\\\n\" > ../overlay.repos\nRUN vcs import ./ < ../overlay.repos\n\n# copy manifests for caching\nWORKDIR /opt\nRUN mkdir -p /tmp/opt && \\\n    find ./ -name \"package.xml\" | \\\n      xargs cp --parents -t /tmp/opt && \\\n    find ./ -name \"COLCON_IGNORE\" | \\\n      xargs cp --parents -t /tmp/opt || true\n\n# multi-stage for building\nFROM $FROM_IMAGE AS builder\n\n# install overlay dependencies\nARG OVERLAY_WS\nWORKDIR $OVERLAY_WS\nCOPY --from=cacher /tmp/$OVERLAY_WS/src ./src\nRUN . /opt/ros/$ROS_DISTRO/setup.sh && \\\n    apt-get update && rosdep install -y \\\n      --from-paths \\\n        src/ros2/demos/demo_nodes_cpp \\\n        src/ros2/demos/demo_nodes_py \\\n      --ignore-src \\\n    && rm -rf /var/lib/apt/lists/*\n\n# build overlay source\nCOPY --from=cacher $OVERLAY_WS/src ./src\nARG OVERLAY_MIXINS=\"release\"\nRUN . /opt/ros/$ROS_DISTRO/setup.sh && \\\n    colcon build \\\n      --packages-select \\\n        demo_nodes_cpp \\\n        demo_nodes_py \\\n      --mixin $OVERLAY_MIXINS\n\n# source entrypoint setup\nENV OVERLAY_WS $OVERLAY_WS\nRUN sed --in-place --expression \\\n      '$isource \"$OVERLAY_WS/install/setup.bash\"' \\\n      /ros_entrypoint.sh\n\n# run launch file\nCMD [\"ros2\", \"launch\", \"demo_nodes_cpp\", \"talker_listener_launch.py\"]\n```\n\n----------------------------------------\n\nTITLE: Updating Maintainers in Various Packages\nDESCRIPTION: This snippet describes the update of maintainers for various ROS 2 packages, typically done as a rolling update. This involves changing the individuals responsible for the maintenance and upkeep of the associated code base.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Iron-Irwini-Complete-Changelog.rst#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing rosdep via pip\nDESCRIPTION: This command installs rosdep using pip, the Python package installer. This method is suitable for users who are not using ROS or when the system package is unavailable. It requires Python and pip to be installed. This provides a standalone installation of rosdep.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Rosdep.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install rosdep\n```\n\n----------------------------------------\n\nTITLE: XML Snippet for Setting RTI QoS Property for Locator Compatibility\nDESCRIPTION: Shows the XML configuration snippet to explicitly enable 'dds.transport.use_510_compatible_locator_kinds' property within a participant's QoS profile. This setup enables backward compatibility of locator kinds in RTI Connext DDS 5.2.0 applications with 5.1.0 participants. It is necessary to apply this setting via QoS profiles and set the NDDS_QOS_PROFILES environment variable to the file path.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<participant_qos>\\n   <property>\\n      <value>\\n            <element>\\n               <name>\\n                  dds.transport.use_510_compatible_locator_kinds\\n               </name>\\n               <value>1</value>\\n            </element>\\n      </value>\\n   </property>\\n</participant_qos>\n```\n\n----------------------------------------\n\nTITLE: Implementing ROS2 IncrementerPipe Node Constructor and Callback\nDESCRIPTION: Defines the constructor for the IncrementerPipe node, creating the publisher and subscriber. The subscription uses a unique_ptr callback to receive messages without copying, increments the integer data, and publishes the modified message.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n     IncrementerPipe(const std::string & name, const std::string & input_topic, const std::string & output_topic)\n     : rclcpp::Node(name),\n       pub(this->create_publisher<std_msgs::msg::Int32>(output_topic, 10)),\n       sub(this->create_subscription<std_msgs::msg::Int32>(\n         input_topic, 10, [this](std::unique_ptr<std_msgs::msg::Int32> msg) {\n           printf(\n             \"Received message with value:         %d, and address: 0x%\" PRIXPTR \"\\n\", msg->data, reinterpret_cast<std::uintptr_t>(msg.get()));\n           rclcpp::sleep_for(1s);\n           printf(\n             \"  sleeping for 1 second...\\n  done.\\nIncrementing and sending with value: %d, and address: 0x%\" PRIXPTR \"\\n\", ++msg->data,\n             reinterpret_cast<std::uintptr_t>(msg.get()));\n           pub_ptr->publish(std::move(msg));    // Send the message along to the output topic.\n         }));\n     }\n\n```\n\n----------------------------------------\n\nTITLE: Adding Test Dependency, Enhancing Node Handler and Namespace Handling in rqt_reconfigure (Python)\nDESCRIPTION: This code outlines the inclusion of pytest as a dependency, removal of redundant parentheses, and improvements for handling namespaces and executor conflicts within rqt_reconfigure, a dynamic reconfiguration plugin for ROS2, primarily written in Python.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_47\n\nLANGUAGE: Python\nCODE:\n```\nExplicitly add a pytest test dependency. (\\#141 <https://github.com/ros-visualization/rqt_reconfigure/issues/141>)\\nRemove unnecessary parentheses around if statements. (\\#140 <https://github.com/ros-visualization/rqt_reconfigure/issues/140>)\\nFixed executor conflict (\\#126 <https://github.com/ros-visualization/rqt_reconfigure/issues/126>)\\nAdd param filtering (\\#128 <https://github.com/ros-visualization/rqt_reconfigure/issues/128>)\\nFix handling of namespaces in the node tree  (\\#132 <https://github.com/ros-visualization/rqt_reconfigure/issues/132>)\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Bash\nDESCRIPTION: This snippet demonstrates the use of `ros2 topic pub` to publish messages to a topic. It publishes a string message to the /chatter topic. A ROS 2 environment is required.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 topic pub /chatter std_msgs/msg/String \"data: 'hello'\"\n```\n\n----------------------------------------\n\nTITLE: Listing Existing ROS2 Python Package Files in Console\nDESCRIPTION: Displays the list of files and directories within a ROS2 Python package directory using a console command. This snippet is used to verify existing package structure files such as package.xml, setup.py, resource directory, and test directory. There are no explicit dependencies, but it assumes a typical ROS2 Python package structure is present. Expected input is the user running the console command at the package directory; output is the list of files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nmy_package  package.xml  resource  setup.cfg  setup.py  test\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Package Dependencies with rosdep in Docker - Bash\nDESCRIPTION: This Dockerfile fragment installs dependencies required by the imported ROS 2 packages using rosdep. It expects the overlay workspace and cloned packages to be available and requires environment sourcing of the base ROS 2 installation. Key inputs are the package paths for demo_nodes_cpp and demo_nodes_py, with outputs being an image layer with all system and ROS package dependencies installed. It cleans the apt cache to reduce image size, and must be run with network access for apt-get.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# install overlay dependencies\nARG OVERLAY_WS\nWORKDIR $OVERLAY_WS\nCOPY --from=cacher /tmp/$OVERLAY_WS/src ./src\nRUN . /opt/ros/$ROS_DISTRO/setup.sh && \\\n    apt-get update && rosdep install -y \\\n      --from-paths \\\n        src/ros2/demos/demo_nodes_cpp \\\n        src/ros2/demos/demo_nodes_py \\\n      --ignore-src \\\n    && rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Checking Copyright and License using ament_copyright\nDESCRIPTION: This example demonstrates how to use the `ament_copyright` tool with the `--verbose` option to check for copyright and license information in a ROS package. It lists all checked files and indicates whether each file has a copyright notice and license information.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ament_copyright --verbose\nmy_package/src/new_file.cpp: could not find copyright notice\nmy_package/src/old_file.cpp: copyright=Open Source Robotics Foundation, Inc. (2023), license=apache2\nmy_package/include/new_file.h: could not find copyright notice\nmy_package/include/old_file.h: copyright=Open Source Robotics Foundation, Inc. (2023), license=apache2\n```\n\n----------------------------------------\n\nTITLE: Assigning Shared Mutually Exclusive Callback Group (Leads to Deadlock) in rclpy (Python)\nDESCRIPTION: This snippet demonstrates an incorrect callback group assignment in rclpy where both the client and timer share the same MutuallyExclusiveCallbackGroup. This configuration will reproduce the previous deadlock, as both entities compete for the same mutually exclusive slot, blocking necessary callbacks from firing. This snippet is intended to illustrate the importance of separating callback groups when designing asynchronous ROS 2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nclient_cb_group = MutuallyExclusiveCallbackGroup()\ntimer_cb_group = client_cb_group\n```\n\n----------------------------------------\n\nTITLE: Installing Launch Files in C++ CMakeLists.txt (CMake)\nDESCRIPTION: Adds an `install` command to the `CMakeLists.txt` file for an `ament_cmake` package. This command copies the `launch` directory to the package's installation share directory, making the launch files available after the package is built and installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY\n  launch\n  DESTINATION share/${PROJECT_NAME}/\n)\n```\n\n----------------------------------------\n\nTITLE: Improving result string generation\nDESCRIPTION: This enhances the result string generation in the `ros2doctor` package (package). This is likely an improvement to provide better output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_35\n\n\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OpenSSL and Qt in Bash\nDESCRIPTION: Configures environment variables needed for DDS-Security (OpenSSL) and Qt. Appends OPENSSL_ROOT_DIR export to the shell startup script and updates the CMAKE_PREFIX_PATH and PATH variables for Qt@5. Requires Homebrew installations of openssl and qt@5. Expected to persist changes by updating ~/.zshrc or ~/.bashrc as appropriate.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add the openssl dir for DDS-Security\n# if you are using BASH, then replace '.zshrc' with '.bashrc'\necho \"export OPENSSL_ROOT_DIR=$(brew --prefix openssl)\" >> ~/.zshrc\n\n# Add the Qt directory to the PATH and CMAKE_PREFIX_PATH\nexport CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH:$(brew --prefix qt@5)\nexport PATH=$PATH:$(brew --prefix qt@5)/bin\n```\n\n----------------------------------------\n\nTITLE: Persistently Disabling Loaned Messages (macOS Bash)\nDESCRIPTION: Appends the export command for ROS_DISABLE_LOANED_MESSAGES=1 to the user's .bash_profile file. This makes the disabling of loaned messages persistent across new Bash shell sessions on macOS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho \"export ROS_DISABLE_LOANED_MESSAGES=1\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Improving log messages\nDESCRIPTION: This change improves the log messages within the `robot_state_publisher` package. This makes debugging and troubleshooting the package easier.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Create table of contents in reStructuredText\nDESCRIPTION: This snippet shows how to create a table of contents in reStructuredText with a maximum depth of 1.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_17\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Icon in ROS2 Package Using CMake - cmake\nDESCRIPTION: This snippet illustrates how to add installation rules in the CMakeLists.txt file to deploy the panel plugin icon to the appropriate runtime location. The icon file \"DemoPanel.png\" located in \"icons/classes\" is installed into the share directory under the package name so RViz2 can find and display it. Prerequisites include a properly configured CMake build system and existing icon file. This code affects file deployment during installation and does not generate runtime output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES icons/classes/DemoPanel.png\n        DESTINATION share/${PROJECT_NAME}/icons/classes\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Tracing Tools - apt-get - Console\nDESCRIPTION: Installs necessary command-line tracing tools like `babeltrace` and the ROS 2 specific tracing tools `ros2trace` and `tracetools-analysis` using the APT package manager. Requires root privileges (`sudo`). Replaces `{DISTRO}` with the target ROS 2 distribution name (e.g., `humble`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y babeltrace ros-{DISTRO}-ros2trace ros-{DISTRO}-tracetools-analysis\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files on macOS\nDESCRIPTION: This code illustrates how to source the ROS 2 setup script on macOS to configure the environment for ROS 2 development. Adjust the path as needed for your installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ . ~/ros2_install/ros2-osx/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Content Filtering Subscriber Bash\nDESCRIPTION: Executes the `content_filtering_subscriber` node from the `demo_nodes_cpp` package using the default RMW implementation. This command assumes the package is built and sourced. Expected output includes logs showing the successful creation of the subscription with content filter options and subsequent messages that match the specified filter (temperature < -30.0 or > 100.0).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Content-Filtering-Subscription.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp content_filtering_subscriber\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Msg 'Num' in C++ Publisher\nDESCRIPTION: Modified C++ publisher node code illustrating how to publish a 'Num' message, initializing the publisher with 'tutorial_interfaces::msg::Num', setting the 'num' field, and publishing at regular intervals.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\n#include <chrono>\n#include <memory>\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tutorial_interfaces/msg/num.hpp\" // Custom message\n\nusing namespace std::chrono_literals;\n\nclass MinimalPublisher : public rclcpp::Node\n{\npublic:\n  MinimalPublisher()\n  : Node(\"minimal_publisher\"), count_(0)\n  {\n    publisher_ = this->create_publisher<tutorial_interfaces::msg::Num>(\"topic\", 10);\n\n    auto timer_callback = [this](){\n      auto message = tutorial_interfaces::msg::Num();\n      message.num = this->count_++;\n      RCLCPP_INFO_STREAM(this->get_logger(), \"Publishing: '\" << message.num << \"'\");\n      publisher_->publish(message);\n    };\n    timer_ = this->create_wall_timer(500ms, timer_callback);\n  }\n\nprivate:\n  rclcpp::TimerBase::SharedPtr timer_;\n  rclcpp::Publisher<tutorial_interfaces::msg::Num>::SharedPtr publisher_;\n  size_t count_;\n};\n\nint main(int argc, char * argv[])\n{\n  rclcpp::init(argc, argv);\n  rclcpp::spin(std::make_shared<MinimalPublisher>());\n  rclcpp::shutdown();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Name Remapping for ROS2 Nodes and Topics - Console\nDESCRIPTION: Shows how to perform static name remapping of node names, namespaces, and topic names for ROS2 nodes at launch time using the -r flag after --ros-args. Old names are remapped to new names for the lifetime of the node. Supports remapping the node's namespace using __ns and the node's own name using __node. This static remapping mechanism is limited to startup and cannot do dynamic remapping after node initialization.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp talker --ros-args -r __ns:=/demo -r __node:=my_talker -r chatter:=my_topic\n```\n\n----------------------------------------\n\nTITLE: Populating Transform Translation and Rotation\nDESCRIPTION: Sets the `transform` field of the `TransformStamped` message. The translation (x, y, z) components are directly assigned from command-line arguments. The rotation is calculated by converting Euler angles (roll, pitch, yaw from arguments) into a quaternion using the `quaternion_from_euler` helper function, and then assigned to the rotation (x, y, z, w) components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nt.transform.translation.x = float(transformation[2])\nt.transform.translation.y = float(transformation[3])\nt.transform.translation.z = float(transformation[4])\nquat = quaternion_from_euler(\n    float(transformation[5]), float(transformation[6]), float(transformation[7]))\nt.transform.rotation.x = quat[0]\nt.transform.rotation.y = quat[1]\nt.transform.rotation.z = quat[2]\nt.transform.rotation.w = quat[3]\n```\n\n----------------------------------------\n\nTITLE: Launching the URDF Display for Origins\nDESCRIPTION: This command launches the display.launch.py file from the urdf_tutorial package and loads the '03-origins.urdf' model, allowing visualization of the robot model with origin transformations and positioning.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch urdf_tutorial display.launch.py model:=urdf/03-origins.urdf\n```\n\n----------------------------------------\n\nTITLE: Instantiating rosbag2_py SequentialReader\nDESCRIPTION: This snippet shows the initialization of a `rosbag2_py.SequentialReader` object, which is used to read messages from a bag file in the order they were recorded.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.reader = rosbag2_py.SequentialReader()\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Shared Folder Communication - Shell Command\nDESCRIPTION: A shell command to set the environment variable WEBOTS_SHARED_FOLDER, which specifies the path mapping between the macOS host shared folder and the Ubuntu VM shared folder. This mapping is critical to enable the webots_ros2 package to exchange data correctly between host and VM. Users are advised to add this line to their ~/.bashrc to persist across terminal sessions. The paths should be customized as per actual folder locations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-MacOS.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nexport WEBOTS_SHARED_FOLDER=/Users/username/shared:/home/ubuntu/shared\n```\n\n----------------------------------------\n\nTITLE: Waiting for Service Availability (C++)\nDESCRIPTION: Implements a loop that repeatedly checks if the 'add_two_ints' service is available on the network. It waits for up to 1 second in each iteration. If the service does not become available and the client is interrupted, it logs an error and exits. Otherwise, it logs a message indicating it is still waiting.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nwhile (!client->wait_for_service(std::chrono::seconds(1))) {\n  if (!rclcpp::ok()) {\n    RCLCPP_ERROR(node->get_logger(), \"client interrupted while waiting for service to appear.\");\n    return 1;\n  }\n  RCLCPP_INFO(node->get_logger(), \"waiting for service to appear...\");\n}\n```\n\n----------------------------------------\n\nTITLE: Remove ROS 2 Installation Directory\nDESCRIPTION: This command recursively removes the ROS 2 installation directory, effectively uninstalling ROS 2 from the system. The `rm -rf` command is used to force the removal of the directory and its contents.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/ros2_{DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Importing Python function from installed package (Python)\nDESCRIPTION: This snippet shows how a Python function from a Python module installed via ament_cmake_python can be imported and used by another Python package. Assuming a script named my_script.py contains a function my_function(), it can be imported with the standard Python import statement referencing the project package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Python-Documentation.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom my_project.my_script import my_function\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Callback for Reading and Publishing\nDESCRIPTION: This `timer_callback` function contains the core logic for reading from the bag. It checks if the reader has more messages, reads the next one, filters for the 'chatter' topic, publishes the message data using the node's publisher, logs information, and then breaks the loop to process one message per timer tick.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef timer_callback(self):\n       while self.reader.has_next():\n           msg = self.reader.read_next()\n           if msg[0] != 'chatter':\n               continue\n           self.publisher.publish(msg[1])\n           self.get_logger().info('Publish serialized data to ' + msg[0])\n           break\n```\n\n----------------------------------------\n\nTITLE: ament_uncrustify Output (Diff)\nDESCRIPTION: This diff output shows the changes made by ament_uncrustify to fix the style issues in the provided C++ code. It highlights the addition of indentation, removal of trailing whitespace, and addition of spaces around operators to adhere to coding style conventions.  The output demonstrates the formatting improvements made by the tool.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n--- example.cpp\n+++ example.cpp.uncrustify\n@@ -1,9 +1,10 @@\n-  int main()\n-  {\n-       int a = 10;\n-       int b = 10;\n-       int c = 0;<trailing whitespace>\n-       if( a == b)<trailing whitespace>{\n- <tab>       c=a;}<trailing whitespace>\n-       return 0;\n-   }\n+int main()\n+{\n+  int a = 10;\n+  int b = 10;\n+  int c = 0;\n+  if (a == b) {\n+    c = a;\n+  }\n+  return 0;\n+}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple geometry_msgs/msg/Twist Messages in YAML\nDESCRIPTION: Illustrates the YAML format for defining multiple `geometry_msgs/msg/Twist` messages within a single file (`cmd_vel.yaml`). Each message structure is separated by the YAML document separator `---`. This allows `ros2 topic pub --yaml-file` to publish them sequentially.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Publishing-Messages-Using-YAML-Files.rst#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlinear:\n    x: 1.0\n    y: 0.0\n    z: 0.0\nangular:\n    x: 0.0\n    y: 0.0\n    z: 0.0\n---\nlinear:\n    x: 2.0\n    y: 0.0\n    z: 0.0\nangular:\n    x: 0.0\n    y: 0.0\n    z: 0.0\n---\nlinear:\n    x: 3.0\n    y: 0.0\n    z: 0.0\nangular:\n    x: 0.0\n    y: 0.0\n    z: 0.0\n---\n```\n\n----------------------------------------\n\nTITLE: Update OpenCV's Library Paths\nDESCRIPTION: These commands update the library paths for `libjpeg`, `libpng`, and `libtiff` within the `libopencv_highgui.2.4.dylib` library. This is necessary after unlinking the Homebrew versions of these libraries to ensure OpenCV can find the correct dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libpng16.16.dylib /usr/local/opt/libpng/lib/libpng16.16.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libtiff.5.dylib /usr/local/opt/libtiff/lib/libtiff.5.dylib /usr/local/lib/libopencv_highgui.2.4.dylib\n$ sudo install_name_tool -change /usr/local/lib/libjpeg.8.dylib /usr/local/opt/jpeg/lib/libjpeg.8.dylib /usr/local/Cellar/libtiff/4.0.4/lib/libtiff.5.dylib\n```\n\n----------------------------------------\n\nTITLE: Static Transform Publisher Launch File for TF2\nDESCRIPTION: Python-based launch file for configuring a static transform publisher. This demonstrates how to integrate static_transform_publisher into a ROS2 launch system rather than running it manually.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Not shown in the snippet but referenced in the text\n```\n\n----------------------------------------\n\nTITLE: Echoing PointStamped Topic Data\nDESCRIPTION: Subscribes to and prints the messages published on the `/turtle3/turtle_point_stamped` topic. This displays the raw `geometry_msgs/PointStamped` data being published by the demo.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\n$ ros2 topic echo /turtle3/turtle_point_stamped\n```\n\n----------------------------------------\n\nTITLE: Implementing a Composable Node Constructor with NodeOptions in rclcpp (C++)\nDESCRIPTION: Defines a C++ class inheriting from rclcpp::Node, where the constructor accepts an rclcpp::NodeOptions parameter for compliance with the Dashing requirements for runtime composition. This enables nodes to participate in component-based architectures and to be loaded dynamically. No external dependencies beyond rclcpp and core ROS 2 libraries are required. The only parameter is 'options', used to initialize the node with appropriate configuration. Outputs a properly constructed node instance supporting composition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nclass Listener: public rclcpp::Node {\n  Listener(const rclcpp::NodeOptions & options)\n  : Node(\"listener\", options)\n  {\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Visibility Control Macros in C++ for Symbol Export\nDESCRIPTION: Demonstrates how to apply the visibility control macros in C++ to class and function declarations that should be visible to external consumers of the library. This ensures symbols are properly exported or imported depending on build context, preventing linkage issues on Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nClass MY_LIB_PUBLIC example_class {}\n\nMY_LIB_PUBLIC void example_function (){}\n```\n\n----------------------------------------\n\nTITLE: Using wait_for_all_acked with Publishers in C++\nDESCRIPTION: Example showing how to use the new wait_for_all_acked method on publishers. This method blocks until all messages in the publisher queue are acknowledged by matching subscribers or until a specified timeout expires.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nauto pub = node->create_publisher<std_msgs::msg::String>(...);\n...\npub->publish(my_msg);\n...\npub->wait_for_all_acked(); // or pub->wait_for_all_acked(timeout)\n```\n\n----------------------------------------\n\nTITLE: Fixing and Enhancing rqt_topic (Python)\nDESCRIPTION: This code involves small fixes for modern flake8 compliance and adding an explicit dependency on python3-pytest within rqt_topic, a plugin for viewing ROS2 topics, to ensure coding standards and testing reliability.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_51\n\nLANGUAGE: Python\nCODE:\n```\nSmall fix for modern flake8. (\\#50 <https://github.com/ros-visualization/rqt_topic/issues/50>)\\nAdd explicit python3-pytest dependency. (\\#48 <https://github.com/ros-visualization/rqt_topic/issues/48>)\n```\n\n----------------------------------------\n\nTITLE: Persisting ROS_DOMAIN_ID in macOS Shell Profile\nDESCRIPTION: This command adds the ROS_DOMAIN_ID export command to `.bash_profile` for persistence across shell sessions on macOS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"export ROS_DOMAIN_ID=<your_domain_id>\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Navigating to the src directory - Linux\nDESCRIPTION: This command changes the current directory to the 'src' directory within the 'ros2_ws' workspace. This is where the package will be created.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/ros2_ws/src\n```\n\n----------------------------------------\n\nTITLE: Warning: get_parameter_value() is deprecated\nDESCRIPTION: This includes a warning that `get_parameter_value()` is deprecated within the `ros2component` and `ros2param` packages. This signals a change to newer APIs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_32\n\n\n\n----------------------------------------\n\nTITLE: Launching Listener Node in Separate Docker Container - Console\nDESCRIPTION: This command runs the ROS 2 listener node from the demo_nodes_cpp package in another, separate Docker container. The '--rm' option ensures the container is deleted after stopping. Communication between talker and listener requires proper network setup if on different hosts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm osrf/ros:{DISTRO}-desktop ros2 run demo_nodes_cpp listener\n```\n\n----------------------------------------\n\nTITLE: Throttled logging in ROS 2 nodes using Python\nDESCRIPTION: Outputs an ERROR level log message from a ROS 2 Python node no more than once per specified throttle duration (in seconds) using the keyword argument 'throttle_duration_sec' in the logger's error method. The message uses Python f-string formatting to include variables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nnum = 4\nnode.get_logger().error(f'My log message {num}', throttle_duration_sec=1)\n```\n\n----------------------------------------\n\nTITLE: Downloading ROS2 Source Code (Windows CMD)\nDESCRIPTION: Downloads the latest source code for the ROS 2 distribution based on the updated ros2.repos file, using command prompt. The `vcs import` command initializes the `src` directory, and `vcs pull` fetches the latest changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvcs import src < ros2.repos\nvcs pull src\n```\n\n----------------------------------------\n\nTITLE: Exporting the MyRobotDriver as a Pluginlib Plugin (C++)\nDESCRIPTION: Code snippet from `MyRobotDriver.cpp` that uses the `PLUGINLIB_EXPORT_CLASS` macro to make the `MyRobotDriver` class discoverable and loadable by the `pluginlib` system within the `webots_ros2_driver`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n// Content of Code/MyRobotDriver.cpp, lines 51-53\n```\n\n----------------------------------------\n\nTITLE: Downloading ROS2 Source Code (Windows PowerShell)\nDESCRIPTION: Downloads the latest source code for the ROS 2 distribution based on the updated ros2.repos file using powershell. The `vcs import --input ros2.repos src` command initializes the `src` directory from the `ros2.repos` file, and `vcs pull src` fetches the latest changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nvcs import --input ros2.repos src\nvcs pull src\n```\n\n----------------------------------------\n\nTITLE: Passing target_frame as argument\nDESCRIPTION: This command launches the turtle broadcaster demo while passing the target_frame as an argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_py turtle_tf2_fixed_frame_demo_launch.py target_frame:=carrot1\n```\n\n----------------------------------------\n\nTITLE: Deprecating ament_target_dependencies, CMake\nDESCRIPTION: This snippet demonstrates the deprecation of the CMake macro ament_target_dependencies.  It suggests replacing the deprecated macro with target_link_libraries() using modern CMake targets to avoid deprecation warnings during the build process.  This improves code maintainability and aligns with current best practices in CMake.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Kilted-Kaiju.rst#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nCMake Deprecation Warning at [...]/ament_cmake_target_dependencies/share/ament_cmake_target_dependencies/cmake/ament_target_dependencies.cmake:89 (message):\n    ament_target_dependencies() is deprecated.  Use target_link_libraries()\n    with modern CMake targets instead.  Try replacing this call with:\n\n        target_link_libraries([...] PUBLIC\n        [...]\n        )\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files (After Rebuild)\nDESCRIPTION: Sourses the ROS 2 setup files again after rebuilding the workspace. This ensures that the terminal session uses the updated executables and libraries from the rebuilt package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_17\n\nLANGUAGE: Linux\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: macOS\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: Windows\nCODE:\n```\ncall install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Using ROS2 Tools with No Daemon and Custom Profiles\nDESCRIPTION: Shows how to run ROS2 CLI commands with '--no-daemon' option for nodes that connect directly to the discovery server, avoiding daemon dependency. Explains that 'ROS_DISCOVERY_SERVER' environment variable is not necessary when using 'FASTRTPS_DEFAULT_PROFILES_FILE' with appropriate configuration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 topic list --no-daemon\n$ ros2 node info /talker --no-daemon --spin-time 2\n```\n\n----------------------------------------\n\nTITLE: Attempting to remap topic and failing (Bash)\nDESCRIPTION: This bash command attempts to launch the 'talker' node while remapping the 'chatter' topic to 'not_chatter'. Due to the enforced security policy, this attempt will fail because the node is restricted to only publishing on the 'chatter' topic. This demonstrates the access control in action.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker \\\n  --remap chatter:=not_chatter\n```\n\n----------------------------------------\n\nTITLE: Adding and Installing a Standalone Data Generator Executable in CMake (Console)\nDESCRIPTION: This CMake code registers the C++ executable (\"data_generator_executable\") that performs non-node synthetic data generation. It links against rclcpp, rosbag2_cpp, and example_interfaces, and configures installation to the standard location. Prerequisite: Proper CMake and ROS 2 setup.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_17\n\nLANGUAGE: Console\nCODE:\n```\nadd_executable(data_generator_executable src/data_generator_executable.cpp)\ntarget_link_libraries(data_generator_executable PUBLIC rclcpp::rclcpp rosbag2_cpp::rosbag2_cpp ${example_interfaces_TARGETS})\n\ninstall(TARGETS\n  data_generator_executable\n  DESTINATION lib/${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating permission files using ros2 security tools (Bash)\nDESCRIPTION: These bash commands use the 'ros2 security create_permission' verb to generate XML permission files for the 'talker' and 'listener' nodes. They point to a sample policy file ('sample.policy.xml') within the downloaded 'sros2' repository to define the permissions, allowing nodes to only publish or subscribe to the 'chatter' topic and enabling parameter communications. The demo_keystore must be created and properly configured.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nros2 security create_permission demo_keystore \\\n  /talker_listener/talker \\\n  /tmp/sros2/sros2/test/policies/sample.policy.xml\nros2 security create_permission demo_keystore \\\n  /talker_listener/listener \\\n  /tmp/sros2/sros2/test/policies/sample.policy.xml\n```\n\n----------------------------------------\n\nTITLE: Run Fast DDS Discovery Server (Server 2 for Partitions)\nDESCRIPTION: Starts the second instance of a Fast DDS discovery server for demonstrating network partitions, using server ID 1 and listening on port 11888.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nfastdds discovery --server-id 1 --ip-address 127.0.0.1 --port 11888\n```\n\n----------------------------------------\n\nTITLE: Setting Logger Level for turtlesim Node via Command Line - Console\nDESCRIPTION: This command launches the turtlesim_node with the default log-level set to WARN, filtering out less severe messages such as INFO. The --ros-args and --log-level options are used to adjust the logging threshold, providing focused visibility for warnings or more severe logs. Requires turtlesim package and properly sourced ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Using-Rqt-Console/Using-Rqt-Console.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node --ros-args --log-level WARN\n```\n\n----------------------------------------\n\nTITLE: Adding ROS 2 APT Repository to Sources List Using Bash\nDESCRIPTION: This snippet adds the ROS 2 APT repository URL to the system package sources list, dynamically inserting the system's architecture and Ubuntu release code name. It directs the repository list through sudo 'tee' to '/etc/apt/sources.list.d/ros2.list' ensuring that ROS 2 packages can be installed securely and are properly signed using the previously added GPG key.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_Apt-Repositories.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Styling Google Calendar Embeds with CSS\nDESCRIPTION: This CSS code provides responsive styling for embedded Google Calendars, ensuring they adapt to different screen sizes. It uses media queries to display either a monthly calendar view for desktop devices or an agenda view for mobile devices, improving the user experience on various platforms.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Governance.rst#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n      .responsiveCal {\n        position: relative; padding-bottom: 75%; height: 0; overflow: hidden;\n      }\n\n      .responsiveCal iframe {\n        position: absolute; top:0; left: 0; width: 100%; height: 100%;\n      }\n\n      @media all and (min-width: 768px) {\n        .deskContent {display:block;}\n        .phoneContent {display:none;}\n      }\n\n      @media all and (max-width: 767px) {\n        .deskContent {display:none;}\n        .phoneContent {display:block;}\n      }\n```\n\n----------------------------------------\n\nTITLE: Enabling Message Field Assertions Globally in ROS 2 (Python)\nDESCRIPTION: Shows how to enable assertions on all field types for ROS 2 Python message classes across the entire project by setting the 'ROS_PYTHON_CHECK_FIELDS' environment variable. Requires 'os' and 'std_msgs.msg.String'. Setting this variable to '1' enables runtime type assertions during message construction for increased debugging visibility, at the cost of runtime performance. No function input/output: behavior controlled externally.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nfrom std_msgs.msg import String\n\nos.environ['ROS_PYTHON_CHECK_FIELDS'] = '1'\nnew_message=String()\n```\n\n----------------------------------------\n\nTITLE: Configuring System Locale for UTF-8 (Bash)\nDESCRIPTION: A sequence of bash commands to configure the system locale to support UTF-8. This includes checking the current locale, installing locale generation tools, generating the en_US.UTF-8 locale, setting system-wide locale defaults, exporting the LANG environment variable for the current session, and finally re-checking the locale settings. Requires root privileges (sudo) for some commands and an internet connection for apt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_Ubuntu-Set-Locale.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlocale  # check for UTF-8\n\nsudo apt update && sudo apt install locales\nsudo locale-gen en_US en_US.UTF-8\nsudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\nlocale  # verify settings\n```\n\n----------------------------------------\n\nTITLE: Excluding Functions from ThreadSanitizer Instrumentation Using no_sanitize Attribute - C++\nDESCRIPTION: This snippet demonstrates how to annotate individual functions so that they are ignored by ThreadSanitizer using the no_sanitize(\"thread\") function attribute. This is useful for excluding specific critical sections or performance-sensitive code from instrumentation overhead. Dependency: Clang 3.3 or higher is required. Note that improper exclusion may hide real concurrency issues from analysis.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n__attribute__((no_sanitize(\"thread\")))\nvoid criticalFunction() {\n  // Function body excluded from ThreadSanitizer\n}\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files in Linux/macOS/Windows Consoles\nDESCRIPTION: Sources the workspace install setup files in the current terminal session to overlay the built packages into the environment, enabling ROS 2 commands and nodes to be run. On Linux/macOS this uses the bash source command; on Windows, both command prompt and PowerShell methods are shown.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ call install\\setup.bat\n```\n\nLANGUAGE: console\nCODE:\n```\n$ .\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Checking turtlesim installation\nDESCRIPTION: This command checks if the turtlesim package is correctly installed by listing its executables. It's a verification step to confirm that the installation was successful. The output will be a list of the turtlesim's executables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg executables turtlesim\nturtlesim draw_square\nturtlesim mimic\nturtlesim turtle_teleop_key\nturtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Allow to zoom more with orbit controller\nDESCRIPTION: This increases the zoom limits of the orbit controller. This modifies camera control behavior, allowing for a broader range of zoom levels. The primary dependency is the orbit controller used within rviz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Simplifying Dependencies with `<depend>` Tag\nDESCRIPTION: Shows how to use the `<depend>` tag in `package.xml` format 2 as a shorthand for a dependency ('foo') needed for building, exporting, and execution. This replaces the combination of `<build_depend>`, `<build_export_depend>`, and `<exec_depend>`, making the file more concise.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<depend>foo</depend>\n```\n\n----------------------------------------\n\nTITLE: Using Type Adapters with Publishers and Subscriptions in C++\nDESCRIPTION: Example showing how to use type adapters with ROS 2 publishers and subscriptions. It demonstrates publishing a std::string directly and creating a subscription that receives std::string objects directly, without manual conversion.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nusing MyAdaptedType = TypeAdapter<std::string, std_msgs::msg::String>;\n\n// Publish a std::string\nauto pub = node->create_publisher<MyAdaptedType>(...);\nstd::string custom_msg = \"My std::string\"\npub->publish(custom_msg);\n\n// Pass a std::string to a subscription's callback\nauto sub = node->create_subscription<MyAdaptedType>(\n  \"topic\",\n  10,\n  [](const std::string & msg) {...});\n```\n\n----------------------------------------\n\nTITLE: Clone ROS 2 Documentation repository\nDESCRIPTION: Clones the ROS 2 documentation repository using git.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_24\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/ros2/ros2_documentation\n```\n\n----------------------------------------\n\nTITLE: Running the listener node - Bash\nDESCRIPTION: Runs the `listener` node from the `demo_nodes_cpp` package. This node subscribes to a topic and receives messages published by the `talker` node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp listener\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS2 launch file for parameters\nDESCRIPTION: A Python launch file that sets the 'my_parameter' to 'earth' when launching a parameter node with console output enabled.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom glob import glob\n# ...\n\nsetup(\n  # ...\n  data_files=[\n      # ...\n      (os.path.join('share', package_name, 'launch'), glob('launch/*')),\n    ]\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling Process I/O Events in a Python ROS 2 Launch File\nDESCRIPTION: This snippet shows how to use `RegisterEventHandler` with `OnProcessIO` to capture and process output from a specific action (`spawn_turtle`). The `target_action` identifies the process whose I/O is monitored, and the `on_stdout` parameter defines a lambda function that logs the received standard output data after decoding and stripping whitespace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    on_spawn_stdout = RegisterEventHandler(\n        OnProcessIO(\n            target_action=spawn_turtle,\n            on_stdout=lambda event: LogInfo(\n                msg='Spawn request says \"{}\"'.format(\n                    event.text.decode().strip()))\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Renaming Node Parameters in launch_ros XML Configuration\nDESCRIPTION: Demonstrates the updated parameter names for defining ROS 2 nodes in launch files using XML syntax. The 'node_name' attribute is renamed to 'name', and the 'node_namespace' attribute is renamed to 'namespace'. Deprecated parameters should be replaced to adopt the idiomatic style introduced in recent versions. This snippet shows the legacy and new XML node definitions reflecting those changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<node pkg=\"demo_nodes_cpp\" exec=\"talker\" node-name=\"foo\" />\n```\n\nLANGUAGE: XML\nCODE:\n```\n<node pkg=\"demo_nodes_cpp\" exec=\"talker\" name=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Deployment with kubectl - Console\nDESCRIPTION: This command applies a Kubernetes deployment manifest (YAML) to an active cluster using kubectl. The command creates the deployment and provisions containers as described in the YAML. Required dependencies are a working kubeconfig, kubectl, and the previously created YAML file (ros2-deployment.yaml). Output confirms resource creation on the cluster; errors will indicate misconfiguration or connectivity issues.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f ros2-deployment.yaml\ndeployment.apps/ros2-deployment created\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using rosdep (Linux)\nDESCRIPTION: Uses the `rosdep` command-line tool, primarily on Linux, to check for and install missing system dependencies required by ROS2 packages located in the `src` directory of the workspace. It uses the specified ROS distribution (`{DISTRO}`) to determine correct dependency versions. Note: `rosdep` is typically not used directly on macOS or Windows; dependencies need manual installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Capturing Unencrypted ROS 2 Data Traffic - bash\nDESCRIPTION: Captures and displays network packets on any interface (`-i any`) filtered by UDP ports 7401 through 7500 using `tcpdump`. The `-X` option prints packet contents, demonstrating that message data (\"Hello World: XXXX\") is visible in plain text. Requires root privileges (`sudo`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo tcpdump -i any -X udp portrange 7401-7500\n```\n\n----------------------------------------\n\nTITLE: Running ament_cpplint to Detect Coding Standard Violations\nDESCRIPTION: This example demonstrates the output of running `ament_cpplint` on the `example.cpp` program, which contains coding standard violations.  The output shows the detected errors, including missing copyright, trailing whitespace, tabs, and missing spaces around operators.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nexample.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]\nexample.cpp:6:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\nexample.cpp:6:  Tab found; better to use spaces  [whitespace/tab] [1]\nexample.cpp:6:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]\nexample.cpp:6:  Missing spaces around =  [whitespace/operators] [4]\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Redundancy (Linux)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Linux to specify multiple discovery server addresses, enabling node discovery through redundant servers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nexport ROS_DISCOVERY_SERVER=\"127.0.0.1:11811;127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Boost Mutexes and Threading with Standard C++\nDESCRIPTION: This snippet explains upgrades for mutual exclusion and threading from boost to standard C++ equivalents by changing include headers and replacing lock and mutex types with their std namespace counterparts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n* Replace ``#include <boost/thread/mutex.hpp>`` with ``#include <mutex>``\n* Replace ``boost::mutex::scoped_lock`` with ``std::unique_lock<std::mutex>``\n* Replace ``boost::mutex`` with ``std::mutex``\n```\n\n----------------------------------------\n\nTITLE: Open VS Code\nDESCRIPTION: Opens the current directory in Visual Studio Code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\ncode .\n```\n\n----------------------------------------\n\nTITLE: Installing Python Tools via APT on Ubuntu\nDESCRIPTION: Installs the necessary Python packages 'python3-bloom' and 'python3-catkin-pkg' using the apt package manager. This command requires superuser privileges and is intended for Debian-based systems like Ubuntu.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Install-Dependencies.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install python3-bloom python3-catkin-pkg\n```\n\n----------------------------------------\n\nTITLE: Installing Talker Executable - CMake\nDESCRIPTION: This snippet installs the `talker` executable to a project-specific directory under the `lib` directory. It utilizes the `install(TARGETS)` CMake command. The `DESTINATION` argument specifies the installation location. This is important so that the executable is in a place from where ROS 2 can find it after sourcing the setup file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\n   install(TARGETS talker\n     DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Convert HTML to reStructuredText using PanDoc\nDESCRIPTION: This command converts an HTML file to reStructuredText using PanDoc. It requires PanDoc to be installed. The input is an HTML file (urdf.html), and the output is a reStructuredText file (URDF.rst).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\npandoc -f html -t rst urdf.html > URDF.rst\n```\n\n----------------------------------------\n\nTITLE: Boolean Substitutions in XML Launch File\nDESCRIPTION: Demonstrates the new boolean substitutions (NotSubstitution, AndSubstitution, OrSubstitution) for logical operations in launch files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <let name=\"p\" value=\"true\" />\n  <let name=\"q\" value=\"false\" />\n  <group if=\"$(or $(var p) $(var q))\">\n    <log message=\"The first condition is true\" />\n  </group>\n  <group unless=\"$(and $(var p) $(var q))\">\n    <log message=\"The second condition is false\" />\n  </group>\n  <group if=\"$(not $(var q))\">\n    <log message=\"The third condition is true\" />\n  </group>\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Desktop version on RHEL\nDESCRIPTION: This snippet installs the full ROS 2 desktop environment, which includes ROS core packages, RViz, demos, and tutorials.  Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install ros-{DISTRO}-desktop\n```\n\n----------------------------------------\n\nTITLE: Add an override flag to force vendored build\nDESCRIPTION: This implements an override flag to force vendored builds within the rviz package. Dependencies depend on the build system and how it incorporates vendored dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_44\n\n\n\n----------------------------------------\n\nTITLE: Disable Console Output Colorization (Windows)\nDESCRIPTION: This command sets the `RCUTILS_COLORIZED_OUTPUT` environment variable to `0` to disable colorized output, then runs `logging_demo_main`. This applies to Windows systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nset \"RCUTILS_COLORIZED_OUTPUT=0\" :: 1 for forcing it\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Installing Fast DDS RMW via apt in Bash\nDESCRIPTION: Installs the ROS 2 package for the eProsima Fast DDS RMW implementation using the apt package manager. Requires `rosdep` to be installed and the ROS 2 apt repository configured. Replace `{DISTRO}` with the target ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsudo apt install ros-{DISTRO}-rmw-fastrtps-cpp\n```\n\n----------------------------------------\n\nTITLE: Run ROS 2 Launch File\nDESCRIPTION: This command runs a ROS 2 launch file. Replace `<path_to_launch_file>` with the actual path to your launch file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Launching-composable-nodes.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch <path_to_launch_file>\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Discovery Variables in Bash (Linux)\nDESCRIPTION: Demonstrates how to set the `ROS_AUTOMATIC_DISCOVERY_RANGE` to `LOCALHOST` and define static peers using `ROS_STATIC_PEERS` in a Linux Bash shell, both for the current session and permanently by adding them to the `.bashrc` file. Requires a Bash shell environment on Linux.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Improved-Dynamic-Discovery.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ export ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST\n$ export ROS_STATIC_PEERS='192.168.0.1;remote.com'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"export ROS_AUTOMATIC_DISCOVERY_RANGE=LOCALHOST\" >> ~/.bashrc\n$ echo \"export ROS_STATIC_PEERS='192.168.0.1;remote.com'\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Disabling ROS 2 Loaned Messages with Environment Variable in Console\nDESCRIPTION: This shell command sets the ROS_DISABLE_LOANED_MESSAGES environment variable to disable loaned message functionality globally for ROS 2 publishers at runtime. No code or middleware changes are required; publishers will always fallback to normal memory allocation regardless of RMW middleware capabilities. This method is useful for testing or deployment scenarios where zero copy transport is undesirable or known to cause issues.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export ROS_DISABLE_LOANED_MESSAGES=1\n```\n\n----------------------------------------\n\nTITLE: rosidl Generate Messages with Bash\nDESCRIPTION: This example shows the process of generating source code (C, C++, and Python) from ROS 2 message definitions using the `rosidl generate` command-line tool.  It involves creating a message file and then using `rosidl generate` with appropriate flags to produce the code.  It relies on existing ROS 2 package structure and message definitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p demo/msg\n  cd demo\n  cat << EOF > msg/Demo.msg\n  std_msgs/Header header\n  geometry_msgs/Twist twist\n  geometry_msgs/Accel accel\n  EOF\n```\n\n----------------------------------------\n\nTITLE: Installing webots_ros2 Build Dependencies (WSL)\nDESCRIPTION: Installs necessary Python tools (`pip`, `rosdep`, `colcon`), initializes and updates `rosdep`, and then uses `rosdep` to install all required system dependencies for the packages found in the `src` directory for the specified ROS 2 distribution (`{DISTRO}`) within WSL. Requires `sudo` privileges and internet access.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install python3-pip python3-rosdep python3-colcon-common-extensions\n$ sudo rosdep init && rosdep update\n$ rosdep install --from-paths src --ignore-src --rosdistro {DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMakeLists.txt for Message Generation in ROS 2 (ament_cmake)\nDESCRIPTION: This snippet details how to configure CMakeLists.txt for generating code from custom message files. It finds the rosidl_default_generators package, declares the message files list including 'msg/AddressBook.msg', invokes rosidl_generate_interfaces for the specified message files, and exports the runtime dependencies to ensure proper build and linkage.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(rosidl_default_generators REQUIRED)\n\nset(msg_files\n  \"msg/AddressBook.msg\"\n)\n\nrosidl_generate_interfaces(${PROJECT_NAME}\n  ${msg_files}\n)\n\nament_export_dependencies(rosidl_default_runtime)\n```\n\n----------------------------------------\n\nTITLE: Logging basic messages in ROS 2 nodes using C++\nDESCRIPTION: Demonstrates basic logging of messages at DEBUG severity level using ROS 2 C++ client library macros. It includes both printf-style logging with 'RCLCPP_DEBUG' and stream-style logging with 'RCLCPP_DEBUG_STREAM'. The logger object is retrieved from a node pointer, and the macros automatically append newlines. This snippet requires a valid rclcpp node instance named 'node'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// printf style\nRCLCPP_DEBUG(node->get_logger(), \"My log message %d\", 4);\n\n// C++ stream style\nRCLCPP_DEBUG_STREAM(node->get_logger(), \"My log message \" << 4);\n```\n\n----------------------------------------\n\nTITLE: Example ROS Message Definition (IDL)\nDESCRIPTION: Illustrates a simple ROS message definition demonstrating strong typing. It defines two fields: 'field1' of type unsigned 32-bit integer (uint32) and 'field2' of type string. This structure enforces specific data types for communication over ROS topics.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Topics.rst#_snippet_0\n\nLANGUAGE: IDL\nCODE:\n```\nuint32 field1\nstring field2\n```\n\n----------------------------------------\n\nTITLE: Install target in CMakeLists.txt (CMake)\nDESCRIPTION: This CMake code installs the 'SyncAsyncWriter' executable to the 'lib/${PROJECT_NAME}' directory, making it accessible to 'ros2 run'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS\n    SyncAsyncWriter\n    DESTINATION lib/${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Launching Dummy Robot Demo using Source Build in ROS 2 (Bash)\nDESCRIPTION: Sets up a ROS 2 workspace, clones the demos repository, builds the dummy robot bringup package using colcon, sources the workspace, and launches the dummy_robot_bringup_launch.py file. Requires ROS 2 already installed and the ROS_DISTRO environment variable set. Input: bash commands; Output: running robot demo with simulated nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/dummy-robot-demo.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_ws/src\ncd ~/ros2_ws/src\ngit clone -b ${ROS_DISTRO} https://github.com/ros2/demos\ncd .. && colcon build --packages-up-to dummy_robot_bringup\nsource ~/ros2_ws/install/setup.bash\nros2 launch dummy_robot_bringup dummy_robot_bringup_launch.py\n```\n\n----------------------------------------\n\nTITLE: Modifying launch file - Python\nDESCRIPTION: This Python code modifies the launch file by adding the 'target_frame': 'carrot1' parameter through the launch_arguments argument. This will cause the second turtle to follow the carrot instead of the first turtle.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef generate_launch_description():\n    demo_nodes = IncludeLaunchDescription(\n        ...,\n        launch_arguments={'target_frame': 'carrot1'}.items(),\n        )\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate MutuallyExclusive Callback Group for Timer - Python\nDESCRIPTION: This snippet creates a MutuallyExclusive callback group instance and assigns it to the timer callback group (`timer_cb_group`). The client callback group (`client_cb_group`) is set to `None`, meaning the client will not use a specific callback group and will default to the node's default callback group (typically mutually exclusive).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclient_cb_group = None\ntimer_cb_group = MutuallyExclusiveCallbackGroup()\n```\n\n----------------------------------------\n\nTITLE: Updating Build Configuration for Real-time Support in rttest (C++)\nDESCRIPTION: This code updates the rttest component to use C++17 standards, ensuring compatibility with modern C++ features in real-time support within ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_53\n\nLANGUAGE: C++\nCODE:\n```\nUpdate to C++17 (\\#124 <https://github.com/ros2/realtime_support/issues/124>)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Plugin Header (point_display.hpp)\nDESCRIPTION: This is the header file for the custom RViz display plugin. It includes necessary headers, defines the `PointDisplay` class inheriting from `MessageFilterDisplay`, and declares the `processMessage` method. The `Q_OBJECT` macro is crucial for Qt integration in the GUI.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Display/RViz-Custom-Display.rst#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n#ifndef RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_\n#define RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_\n\n#include <rviz_common/message_filter_display.hpp>\n#include <rviz_plugin_tutorial_msgs/msg/point2_d.hpp>\n\nnamespace rviz_plugin_tutorial\n{\nclass PointDisplay\n  : public rviz_common::MessageFilterDisplay<rviz_plugin_tutorial_msgs::msg::Point2D>\n{\n  Q_OBJECT\n\nprotected:\n  void processMessage(const rviz_plugin_tutorial_msgs::msg::Point2D::ConstSharedPtr msg) override;\n};\n}\n\n#endif  // RVIZ_PLUGIN_TUTORIAL__POINT_DISPLAY_HPP_\n```\n\n----------------------------------------\n\nTITLE: Building a ROS 2 Package with colcon (Console)\nDESCRIPTION: These console commands build the ROS 2 package \"bag_recorder_nodes\" using colcon for different platforms. On Windows, the --merge-install flag is used to accommodate ROS 2 installation structure. Inputs: No command line arguments other than the package specifier. Outputs: Built executables in the workspace. Prerequisite: colcon build system set up in the workspace and dependencies installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_12\n\nLANGUAGE: Console\nCODE:\n```\n$ colcon build --packages-select bag_recorder_nodes\n```\n\nLANGUAGE: Console\nCODE:\n```\n$ colcon build --merge-install --packages-select bag_recorder_nodes\n```\n\n----------------------------------------\n\nTITLE: Registering a Component Node with rclcpp_components Macro (C++)\nDESCRIPTION: Shows proper usage of rclcpp_components registration macro in a C++ translation unit. Includes the required header and registers the given fully-qualified node class for dynamic discovery by the ROS 2 component loader. The only dependency is the rclcpp_components package. 'composition::Listener' is the name of the class being registered. No output is produced, but registration is required for runtime component composition.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\n#include \"rclcpp_components/register_node_macro.hpp\"\nRCLCPP_COMPONENTS_REGISTER_NODE(composition::Listener);\n```\n\n----------------------------------------\n\nTITLE: Configure Cyclone DDS Minimum Socket Receive Buffer - XML\nDESCRIPTION: This XML configuration snippet for Cyclone DDS sets the minimum requested socket receive buffer size to 10MB within the <Internal> settings for any domain. This helps ensure that Cyclone DDS sockets have a sufficiently large buffer to handle large incoming messages reliably.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<CycloneDDS xmlns=\"https://cdds.io/config\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"https://cdds.io/config\nhttps://raw.githubusercontent.com/eclipse-cyclonedds/cyclonedds/master/etc/cyclonedds.xsd\">\n    <Domain id=\"any\">\n        <Internal>\n            <SocketReceiveBufferSize min=\"10MB\"/>\n        </Internal>\n    </Domain>\n</CycloneDDS>\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Demo Nodes in Bash (C++ Talker, Python Listener)\nDESCRIPTION: Demonstrates ROS 2 communication by running a C++ 'talker' demo node and a Python 'listener' node in separate terminals. Requires the ROS 2 workspace to be sourced and built successfully. Inputs are the 'demo_nodes_cpp' and 'demo_nodes_py' packages. Standard output shows message exchanges, verifying build success and correct ROS 2 functionality in both C++ and Python.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker\n```\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Recording All ROS 2 Topics to MCAP Bag File (Bash)\nDESCRIPTION: Uses the `ros2 bag record` command with the `-a` flag to record data from all currently published topics into a `.mcap` file in the current directory. This file can then be opened and visualized offline in Foxglove Studio.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Related-Projects/Visualizing-ROS-2-Data-With-Foxglove.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record -a\n```\n\n----------------------------------------\n\nTITLE: Initializing Ros2Supervisor Node in a ROS 2 Launch File Using Python\nDESCRIPTION: Shows how to instantiate the WebotsLauncher with the ros2_supervisor parameter enabled to spawn the Ros2Supervisor node automatically. Demonstrates including the supervisor object in the LaunchDescription along with event handlers to shut down ROS 2 on Webots exit. This code assumes familiarity with ROS 2 launch files, Webots simulation worlds, and Python launch APIs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwebots = WebotsLauncher(\n    world=PathJoinSubstitution([package_dir, 'worlds', world]),\n    mode=mode,\n    ros2_supervisor=True\n)\n```\n\n----------------------------------------\n\nTITLE: Using tf2_ros Buffer and TransformListener in C++ with Updated Clock Constructor\nDESCRIPTION: This C++ code snippet demonstrates how to properly instantiate a tf2_ros::Buffer using the updated constructor that requires a shared pointer to a rclcpp::Clock instance, reflecting API changes introduced in the Crystal Clemmys release. It also shows creating a tf2_ros::TransformListener object linked to this buffer. The snippet requires ROS 2 Crystal Clemmys libraries including tf2_ros and rclcpp. The key input is a rclcpp::Node instance, used to obtain the clock shared pointer. This enables correct time management within the tf2_ros buffer for transform lookups.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Crystal-Clemmys.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <tf2_ros/transform_listener.h>\\n#include <rclcpp/rclcpp.hpp>\\n...\\n// Assuming you have a rclcpp::Node my_node\\ntf2_ros::Buffer buffer(my_node.get_clock());\\ntf2_ros::TransformListener tf_listener(buffer);\n```\n\n----------------------------------------\n\nTITLE: Embedding Responsive Google Calendars with HTML\nDESCRIPTION: This HTML code embeds a second Google Calendar using iframes, following the same responsive design pattern as the first. It includes separate iframes for desktop and mobile views, and relies on CSS classes (`deskContent`, `phoneContent`, `responsiveCal`) and media queries to adjust the calendar display based on screen size. This snippet is intended for embedding community events.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Governance.rst#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n    <div class=\"responsiveCal\">\n      <div class=\"deskContent\">\n        <iframe src=\"https://calendar.google.com/calendar/embed?src=c_3fc5c4d6ece9d80d49f136c1dcd54d7f44e1acefdbe87228c92ff268e85e2ea0@group.calendar.google.com\" style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n      </div>\n      <div class=\"phoneContent\"><iframe src=\"https://calendar.google.com/calendar/embed?mode=AGENDA&amp;height=400&amp;wkst=1&amp;src=c_3fc5c4d6ece9d80d49f136c1dcd54d7f44e1acefdbe87228c92ff268e85e2ea0@group.calendar.google.com\" style=\"border: 0\" width=\"280\" height=\"500\" frameborder=\"0\" scrolling=\"no\"></iframe>\n      </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with rosdep for ROS2 C++ Projects\nDESCRIPTION: Command to install all required dependencies for the project using rosdep, which reads package.xml files to determine what packages need to be installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: Downloading the turtle_tf2_message_filter.cpp file in Linux/macOS\nDESCRIPTION: Console command to download the turtle_tf2_message_filter.cpp file from the ROS2 geometry tutorials repository using wget.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/turtle_tf2_message_filter.cpp\n```\n\n----------------------------------------\n\nTITLE: Example Keystore Structure within Listener Container (Output)\nDESCRIPTION: Shows the expected output of the `tree` command executed within the listener container's `/keystore` directory. This structure demonstrates a correctly deployed setup where the `private` directory is absent, and only the 'listener' sub-enclave and public CA certificates are included.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n# Terminal 1\nkeystore\n ├── enclaves\n │   ├── governance.p7s\n │   ├── governance.xml\n │   └── talker_listener\n │       └── listener\n │           ├── cert.pem\n │           ├── governance.p7s\n │           ├── identity_ca.cert.pem\n │           ├── key.pem\n │           ├── permissions_ca.cert.pem\n │           ├── permissions.p7s\n │           └── permissions.xml\n └── public\n     ├── ca.cert.pem\n     ├── identity_ca.cert.pem\n     └── permissions_ca.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Recording a Specific Service with Status Output (Console)\nDESCRIPTION: This command records the /add_two_ints service using ros2 bag with service introspection. Output messages indicate recording status, what events and topics are subscribed, and confirmation the system is listening. Requires an active /add_two_ints service and Service Introspection enabled. Output includes status logs, and data is saved in a newly created bag folder.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record --service /add_two_ints\n[INFO] [1713995957.643573503] [rosbag2_recorder]: Press SPACE for pausing/resuming\n[INFO] [1713995957.662067587] [rosbag2_recorder]: Event publisher thread: Starting\n[INFO] [1713995957.662067614] [rosbag2_recorder]: Listening for topics...\n[INFO] [1713995957.666048323] [rosbag2_recorder]: Subscribed to topic '/add_two_ints/_service_event'\n[INFO] [1713995957.666092458] [rosbag2_recorder]: Recording...\n```\n\n----------------------------------------\n\nTITLE: Test Fixture Setup for ROS2 Security Artifacts using CMake\nDESCRIPTION: Defines procedures to prepare SROS artifacts for testing security features in ROS2, using fixtures and CMake scripting. Dependencies include CMake and ROS2 testing frameworks. Key parameters involve artifact configuration paths and security policies, with expected outputs being ready-to-use security artifacts for tests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_57\n\nLANGUAGE: CMake\nCODE:\n```\n# Extract sros_artifacts fixture into a CMake script\n# Used to prepare security artifacts for ROS2 tests\n# Dependencies: CMake, ROS2 testing modules\n\n# Define fixture extraction commands or scripts\n\n```\n\n----------------------------------------\n\nTITLE: Running Keyboard Teleoperation Node (WSL)\nDESCRIPTION: Executes the `teleop_twist_keyboard` node from the `teleop_twist_keyboard` package using `ros2 run` within WSL. This node listens for keyboard inputs and publishes Twist messages to control a robot's movement, typically used with examples like the Tiago simulation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run teleop_twist_keyboard teleop_twist_keyboard\n```\n\n----------------------------------------\n\nTITLE: Setting a Parameter on a Remote Node\nDESCRIPTION: Console command to set a parameter on the parameter_blackboard node. This change will trigger the parameter event handler's callback function.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set parameter_blackboard a_double_param 3.45\n```\n\n----------------------------------------\n\nTITLE: Updating RViz Assimp Vendor for Vendor Library Compatibility (C++)\nDESCRIPTION: This snippet discusses removing warnings, updating vendor package paths, and switching to ament_cmake_vendor_package for rviz_assimp_vendor, which handles 3D model import support in rviz, ensuring compatibility with newer assimp versions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_55\n\nLANGUAGE: C++\nCODE:\n```\n* Removed assimp warnings (\\#1191 <https://github.com/ros2/rviz/issues/1191>) (\\#1192 <https://github.com/ros-2/rviz/issues/1192>) (cherry picked from commit e8dd485d19a35d3abba905020741973e613334e3)\\n* Update the vendored package path. (\\#1184 <https://github.com/ros2/rviz/issues/1184>)\\n* Update assimp vendor to 5.3.1 (\\#1182 <https://github.com/ros2/rviz/issues/1182>)\\n* Update to assimp 5.2.2 (\\#968 <https://github.com/ros2/rviz/issues/968>)\\n* Fix the vendoring flags for clang compilation. (\\#1003 <https://github.com/ros2/rviz/issues/1003>)\\n* Switch to ament_cmake_vendor_package (\\#995 <https://github.com/ros2/rviz/issues/995>)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ROS 2 Binary: bash\nDESCRIPTION: This command removes the installed ROS 2 binary, effectively 'uninstalling' it. It either involves opening a new terminal (if the workspace was not sourced), or removing the entire workspace directory by executing `rm -rf ~/ros2_{DISTRO}`. This second method will free up disk space. It requires no specific prerequisites beyond an existing installation. The DISTRO variable is a placeholder for the ROS 2 distribution name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/ros2_{DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Set Console Output Format (Windows)\nDESCRIPTION: This command sets the `RCUTILS_CONSOLE_OUTPUT_FORMAT` environment variable and then runs the `logging_demo_main` executable, changing the console output format to include timestamp and location of log calls. This applies to Windows systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nset \"RCUTILS_CONSOLE_OUTPUT_FORMAT=[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})\"\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Adding Allocation Counting to Custom Allocator Override Methods in C++\nDESCRIPTION: This snippet shows how to instrument the custom allocator's do_allocate and do_deallocate methods with counters to track how often memory allocation and deallocation occur. This is useful for verifying if the custom allocator is used instead of the global new/delete. Variables num_allocs and num_deallocs are global counters incremented upon each allocation or deallocation respectively.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n void * do_allocate(std::size_t size, std::size_t alignment) override\n {\n   // ...\n   num_allocs++;\n   // ...\n }\n\n void do_deallocate(\n   void * p, std::size_t bytes,\n   std::size_t alignment) override\n {\n   // ...\n   num_deallocs++;\n   // ...\n }\n```\n\n----------------------------------------\n\nTITLE: Extending ament_cmake by Appending to CONFIG_EXTRAS Variable in CMake\nDESCRIPTION: Demonstrates one method for registering custom CMake files (containing macros or functions) with ament_cmake, making them available to downstream packages. This involves appending the paths to these files to the `${PROJECT_NAME}_CONFIG_EXTRAS` list variable *before* calling `ament_package()`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND ${PROJECT_NAME}_CONFIG_EXTRAS\n  path/to/file.cmake\"\n  other/pathto/file.cmake\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Deployment Tutorial (Bash)\nDESCRIPTION: Builds a Docker image tagged `ros2_security/deployment_tutorial` using the Dockerfile downloaded in the previous step. The `docker build` command requires Docker to be installed. The `--build-arg ROS_DISTRO={DISTRO}` flag passes the specific ROS 2 distribution name to the build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build the base image\ndocker build -t ros2_security/deployment_tutorial --build-arg ROS_DISTRO={DISTRO} .\n```\n\n----------------------------------------\n\nTITLE: Increasing Shared Memory Settings (Console)\nDESCRIPTION: This snippet demonstrates how to temporarily increase shared memory resources on OSX to resolve issues when running RTI Connext. These sysctl commands are run as root and modify shared memory settings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ /usr/sbin/sysctl -w kern.sysv.shmmax=419430400\n$ /usr/sbin/sysctl -w kern.sysv.shmmin=1\n$ /usr/sbin/sysctl -w kern.sysv.shmmni=128\n$ /usr/sbin/sysctl -w kern.sysv.shmseg=1024\n$ /usr/sbin/sysctl -w kern.sysv.shmall=262144\n```\n\n----------------------------------------\n\nTITLE: Cloning ROS 2 Repositories into a Workspace\nDESCRIPTION: This code snippet creates a ROS 2 workspace directory and clones all necessary ROS 2 repositories into the 'src' subdirectory using 'vcs import'. It relies on a 'ros2.repos' file located on GitHub.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_{DISTRO}/src\ncd ~/ros2_{DISTRO}\nvcs import --input https://raw.githubusercontent.com/ros2/ros2/{REPOS_FILE_BRANCH}/ros2.repos src\n```\n\n----------------------------------------\n\nTITLE: Registering WebotsSupervisor and Shutdown Event in ROS 2 Launch File in Python\nDESCRIPTION: Provides the structure of a ROS 2 LaunchDescription including the WebotsLauncher instance and its supervisor node for run-time control. It registers an event handler to emit a ROS 2 shutdown event when the Webots simulation process terminates, ensuring graceful exit of all nodes. This snippet requires ROS 2 launch and Webots ROS 2 packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nreturn LaunchDescription([\n    webots,\n    webots._supervisor,\n\n    # This action will kill all nodes once the Webots simulation has exited\n    launch.actions.RegisterEventHandler(\n        event_handler=launch.event_handlers.OnProcessExit(\n            target_action=webots,\n            on_exit=[\n                launch.actions.EmitEvent(event=launch.events.Shutdown())\n            ],\n        )\n    )\n])\n```\n\n----------------------------------------\n\nTITLE: Launching ROS 2 Talker Node with Specific Enclave in Bash\nDESCRIPTION: Runs the 'talker' node from the 'demo_nodes_cpp' package, specifying the security enclave '/talker_listener/talker' using ROS arguments. This command is used to test node communication within the defined security settings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker\n```\n\n----------------------------------------\n\nTITLE: Testing ROS 2 Content Filtering Unsupported RMW Bash\nDESCRIPTION: Runs the `content_filtering_subscriber` node while explicitly setting the `RMW_IMPLEMENTATION` environment variable to `rmw_cyclonedds_cpp`. This demonstrates the behavior when the underlying RMW does not support content filtering. Expected output includes a warning message indicating that content filtering is not enabled, followed by logs for *all* received temperature data, regardless of the value.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Content-Filtering-Subscription.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ RMW_IMPLEMENTATION=rmw_cyclonedds_cpp ros2 run demo_nodes_cpp content_filtering_subscriber\n```\n\n----------------------------------------\n\nTITLE: Running Secured Talker Node (Bash)\nDESCRIPTION: Executes the C++ talker demo node (`demo_nodes_cpp talker`) ensuring it uses its designated security enclave. The `--ros-args --enclave /talker_listener/talker` argument directs the node to load its specific security keys and certificates from the keystore. Requires the security environment variables to be set.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker\n```\n\n----------------------------------------\n\nTITLE: Launching the ROS2 talker node with enclave (Bash)\nDESCRIPTION: This bash command launches the 'talker' node from the 'demo_nodes_cpp' package, specifying the enclave '/talker_listener/talker'. The '--ros-args -e /talker_listener/talker' arguments ensure the node operates within the specified security context, adhering to the defined access controls.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --enclave /talker_listener/talker\n```\n\n----------------------------------------\n\nTITLE: Defining a Single geometry_msgs/msg/Twist Message in YAML\nDESCRIPTION: Shows the YAML structure representing a single `geometry_msgs/msg/Twist` message. This format includes `linear` and `angular` velocity components (each a `Vector3`). The `---` separator indicates the end of one YAML document/message, allowing multiple messages in one file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Publishing-Messages-Using-YAML-Files.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlinear:\n    x: 1.0\n    y: 0.0\n    z: 0.0\nangular:\n    x: 0.0\n    y: 0.0\n    z: 0.0\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Loaned Messages Temporarily (Windows Cmd/PowerShell)\nDESCRIPTION: Sets the ROS_DISABLE_LOANED_MESSAGES environment variable to '0' for the current command prompt or PowerShell session using the set command. This explicitly enables loaned messages for subscriptions only for the active session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_11\n\nLANGUAGE: batch\nCODE:\n```\nset ROS_DISABLE_LOANED_MESSAGES=0\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Demo with Connext RMW (Windows)\nDESCRIPTION: This code shows how to run the C++ talker and Python listener demo nodes with the Connext RMW implementation on Windows. It sets the RMW_IMPLEMENTATION environment variable using the 'set' command before running the ROS 2 commands.  Comments indicate the need to run the second command in a separate terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\nset RMW_IMPLEMENTATION=rmw_connextdds\nros2 run demo_nodes_cpp talker\n\nREM run in another terminal\nset RMW_IMPLEMENTATION=rmw_connextdds\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: C++ code with style issues for ament_uncrustify\nDESCRIPTION: This C++ code snippet demonstrates common style issues such as incorrect indentation, trailing whitespace, and missing spaces around operators.  It serves as input for the ament_uncrustify tool, showcasing its ability to automatically fix these issues. The code is a simple main function with intentional style violations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nint main()\n{\n     int a = 10;\n     int b = 10;\n     int c = 0;<trailing whitespace>\n     if( a == b)<trailing whitespace>{\n\t      c=a;}<trailing whitespace>\n     return 0;\n }\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test (Non-RT) - Console\nDESCRIPTION: Executes the `performance_test` application without requiring `sudo` or setting a real-time priority. This command is suitable for systems without a real-time kernel. The test configuration is similar, specifying the number of publishers/subscribers, message type, reliability, and runtime, but omits the real-time priority flag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n./install/performance_test/lib/performance_test/perf_test -c rclcpp-single-threaded-executor -p 1 -s 1 -r 0 -m Array1m --reliability RELIABLE --max-runtime 60\n```\n\n----------------------------------------\n\nTITLE: Recording All Services with ros2 bag (Console)\nDESCRIPTION: Records all available service data using the 'ros2 bag record --all-services' command. This is suitable for comprehensive monitoring of service activity across the system, provided Service Introspection is enabled where needed. No parameters required; outputs all introspected service events into a new ROS 2 bag file for later inspection or replay.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record --all-services\n```\n\n----------------------------------------\n\nTITLE: Scoping Environment Variables in XML Launch Files (ROS 2 Foxy Patch 8)\nDESCRIPTION: Illustrates the behavior change in ROS 2 Foxy Patch 8 for XML launch files, where the `<set_env>` tag within a `<group>` element now scopes the environment variable locally to that group. Consequently, the node 'foo' will start with 'my_env_var=1'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <set_env name=\"my_env_var\" value=\"1\"/>\n  <node pkg=\"foo\" exec=\"foo\" output=\"screen\" />\n  <group>\n    <set_env name=\"my_env_var\" value=\"2\"/>\n  </group>\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Installing rmw_connextdds binary packages\nDESCRIPTION: This command updates the apt package index and installs the rmw_connextdds packages from the ROS 2 apt repositories. The {DISTRO} placeholder must be replaced with the ROS 2 distribution name (e.g., humble, iron). It requires apt setup and ROS apt repositories configured. This will install the specific RMW implementation for Connext DDS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install -q -y ros-{DISTRO}-rmw-connextdds\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Model with Origins\nDESCRIPTION: This XML code defines a robot model named 'origins', including a base link (cylinder), a right leg (box), and a joint. The joint and visual elements have origin tags to position and orient the leg relative to the base.  The right leg is also rotated and translated to its correct position.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<robot name=\"origins\">\n  <link name=\"base_link\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n    </visual>\n  </link>\n\n  <link name=\"right_leg\">\n    <visual>\n      <geometry>\n        <box size=\"0.6 0.1 0.2\"/>\n      </geometry>\n      <origin rpy=\"0 1.57075 0\" xyz=\"0 0 -0.3\"/>\n    </visual>\n  </link>\n\n  <joint name=\"base_to_right_leg\" type=\"fixed\">\n    <parent link=\"base_link\"/>\n    <child link=\"right_leg\"/>\n    <origin xyz=\"0 -0.22 0.25\"/>\n  </joint>\n\n</robot>\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requirements (macOS)\nDESCRIPTION: This command installs the Python dependencies listed in 'requirements.txt', using constraints specified in 'constraints.txt'.  This is used to set up the environment for building the ROS 2 documentation on macOS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npip install -r requirements.txt -c constraints.txt\n```\n\n----------------------------------------\n\nTITLE: Running Subscriber Executable\nDESCRIPTION: This command runs the subscriber executable from the examples_rclcpp_minimal_subscriber package. It subscribes to the topic and prints the received messages to the console.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Wait-for-Acknowledgment.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function\n[INFO] [1743121567.030751270] [minimal_subscriber]: I heard: 'Hello, world! 0'\n[INFO] [1743121567.530981660] [minimal_subscriber]: I heard: 'Hello, world! 1'\n[INFO] [1743121568.031032935] [minimal_subscriber]: I heard: 'Hello, world! 2'\n[INFO] [1743121568.531048458] [minimal_subscriber]: I heard: 'Hello, world! 3'\n[INFO] [1743121569.031049351] [minimal_subscriber]: I heard: 'Hello, world! 4'\n[INFO] [1743121569.530980327] [minimal_subscriber]: I heard: 'Hello, world! 5'\n[INFO] [1743121570.030825871] [minimal_subscriber]: I heard: 'Hello, world! 6'\n...\n```\n\n----------------------------------------\n\nTITLE: Console Output for Partition Demonstration\nDESCRIPTION: Terminal output showing that only messages from the asynchronous topic are received because the synchronous topic's publisher and subscriber are in different partitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1612972054.995410057] [sync_async_subscriber]: I heard: 'ASYNC: Hello, world! 10'\n[INFO] [1612972055.995396561] [sync_async_subscriber]: I heard: 'ASYNC: Hello, world! 11'\n[INFO] [1612972056.995473953] [sync_async_subscriber]: I heard: 'ASYNC: Hello, world! 12'\n```\n\n----------------------------------------\n\nTITLE: Example Listing of ROS2 Node Parameters - Console\nDESCRIPTION: Shows an example output of the ros2 param list command displaying the available parameters of a ROS2 node called parameter_blackboard, demonstrating parameters set via CLI or YAML. This illustrates parameter querying functionality and confirms successful parameter setting from command line or config files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Node-arguments.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param list parameter_blackboard\n  a_string\n  qos_overrides./parameter_events.publisher.depth\n  qos_overrides./parameter_events.publisher.durability\n  qos_overrides./parameter_events.publisher.history\n  qos_overrides./parameter_events.publisher.reliability\n  some_int\n  some_lists.some_doubles\n  some_lists.some_integers\n  use_sim_time\n```\n\n----------------------------------------\n\nTITLE: Setting WINDOWS_EXPORT_ALL_SYMBOLS Property in CMake for Automatic Symbol Export on Windows\nDESCRIPTION: Shows how to enable the CMake target property WINDOWS_EXPORT_ALL_SYMBOLS to automatically export all function symbols in a DLL on Windows, simplifying symbol export management. This method works except for cases with global static data requiring explicit exports. If multiple libraries exist, the property should be set for each target separately.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Windows-Tips-and-Tricks.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${LIB_NAME} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE)\n```\n\n----------------------------------------\n\nTITLE: Running talker node with specific enclave using ros2 run (Bash)\nDESCRIPTION: This bash command runs the 'talker' node from the 'demo_nodes_cpp' package with a specific enclave '/talker_listener/talker' using the '--ros-args -e' option. This ensures the node operates within the defined security context.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args -e /talker_listener/talker\n```\n\n----------------------------------------\n\nTITLE: Adding option to disable recorder keyboard controls\nDESCRIPTION: This adds a feature to disable the keyboard controls for the recorder in the `ros2bag` package. This provides a means to prevent accidental input during recording.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Creating internal links to other pages in RST documentation\nDESCRIPTION: Demonstrates how to use the :doc: directive to create in-text links to other pages within the documentation. This example links to a Quality of Service tutorial page.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_36\n\nLANGUAGE: rst\nCODE:\n```\n:doc:`Quality of Service <../Tutorials/Quality-of-Service>`\n```\n\n----------------------------------------\n\nTITLE: Building and Tagging Docker Image for IBM Cloud Registry - IBM Cloud CLI - console\nDESCRIPTION: This command builds a Docker image from your local directory and tags it for upload to the IBM Cloud Container Registry using the ibmcloud CLI. Prerequisites include a valid Dockerfile, the IBM Cloud CLI, and permissions for your registry and namespace. The --tag flag specifies the full target image path and version. Input is the directory with the Dockerfile; output is the build log and the new image pushed to the IBM Cloud registry.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud cr build --tag registry.bluemix.net/ros2nasr/ros2foxy:1 .\n```\n\n----------------------------------------\n\nTITLE: Exporting Include Directories and Libraries (Non-Target Based) in CMake\nDESCRIPTION: Shows the `ament_export_include_directories` and `ament_export_libraries` macros, used for exporting include paths and library locations respectively in non-target-based scenarios. These functions are generally considered superfluous when using modern CMake target-based exports facilitated by `ament_export_targets` with the `HAS_LIBRARY_TARGET` option.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nament_export_include_directories(\"include/${PROJECT_NAME}\")\nament_export_libraries(my_library)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for ROS 2 Talker - CMake\nDESCRIPTION: This snippet configures the talker executable to link against the `rclcpp` and `std_msgs` libraries. It utilizes the `target_link_libraries` function, which is a standard CMake function for linking libraries to a target.  It is crucial for the talker program to function correctly within the ROS 2 framework, establishing communication with other ROS 2 nodes via the ROS 2 middleware.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n   target_link_libraries(talker PUBLIC\n     rclcpp::rclcpp\n     ${std_msgs_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: Set Temporary rmem_max Kernel Parameter for Connext - Linux Bash\nDESCRIPTION: This command temporarily sets the `net.core.rmem_max` kernel parameter to 4194304 bytes (4MB). This parameter defines the maximum size of the receive buffer for a socket. Setting it to 4MB, in conjunction with a specific Connext QoS profile, is a proven solution for achieving reliable delivery of large messages with RTI Connext.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w net.core.rmem_max=4194304\n```\n\n----------------------------------------\n\nTITLE: Call Empty-Type Service Using ros2 CLI (Console, ROS 2)\nDESCRIPTION: This command demonstrates calling a service of type 'Empty', which requires no arguments. Inputs are the service name and type; no YAML arguments supplied. The command will trigger the action (e.g., clearing the turtlesim window) and display any method invocation output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service call /clear std_srvs/srv/Empty\n```\n\n----------------------------------------\n\nTITLE: Comparing rclpy Time/Duration with Other Types in Python\nDESCRIPTION: Demonstrates the changed behavior in `rclpy` where comparing `rclpy.time.Time` or `rclpy.duration.Duration` objects with incompatible types (like `None` using the `in` operator) now returns `False` instead of raising a `TypeError`. This change affects comparison operations involving these time-related classes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Iron-Irwini.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nprint(None in [rclpy.time.Time(), rclpy.duration.Duration()])  # Prints \"False\" instead of raising TypeError\n```\n\n----------------------------------------\n\nTITLE: Declaring GTest Dependency in package.xml\nDESCRIPTION: This XML snippet shows the necessary `<test_depend>` tag to add to the `package.xml` file of a ROS 2 package. This declares a dependency on `ament_cmake_gtest`, informing the build system that GTest is required for building and running the package's tests.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Cpp.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<test_depend>ament_cmake_gtest</test_depend>\n```\n\n----------------------------------------\n\nTITLE: Run ROS 2 talker demo (bash)\nDESCRIPTION: This command runs the `talker` demo node from the `demo_nodes_cpp` package.  It publishes messages to a topic, demonstrating basic communication within ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Examining Verbose Test Results in ROS 2\nDESCRIPTION: Command to view detailed test results including individual test cases that failed. The --verbose flag provides more information about test failures.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/CLI.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ colcon test-result --all --verbose\n```\n\n----------------------------------------\n\nTITLE: Running the talker node - Bash\nDESCRIPTION: Runs the `talker` node from the `demo_nodes_cpp` package. This node publishes messages to a topic, which can be received by the `listener` node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Using tf2::TimePoint() in C++\nDESCRIPTION: This code shows one of the correct way to call the `lookupTransform` to get the transform. This is the same as using `tf2::TimePointZero`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n    try {\n      t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        tf2::TimePoint());\n    } catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Building RMW with colcon\nDESCRIPTION: This command builds the RMW using colcon. This is usually done after the repository has been cloned and the RTI Connext environment has been set up correctly.  Prerequisites are ROS 2 and colcon installed along with the RTI Connext installation. After this step, ensure you source the setup file to make the build available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Changed to not install test header files in rviz_rendering.\nDESCRIPTION: This prevents the installation of test header files within the rviz_rendering package. This improves the organization of the package. Dependencies are the build system and the rviz_rendering package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Reverting sim-time messages change\nDESCRIPTION: This reverts a previous change related to not recording sim-time messages before the first /clock in the `ros2bag` package. This restores the previous behavior related to clock handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Monitoring Remote ROS 2 Parameter (C++)\nDESCRIPTION: Adds code to the node's constructor to set up a parameter change callback for a parameter (`a_double_param`) on a different node (`parameter_blackboard`). This demonstrates monitoring parameters of other nodes using the `ParameterEventHandler`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\n// Now, add a callback to monitor any changes to the remote node's parameter. In this\n// case, we supply the remote node name.\nauto cb2 = [this](const rclcpp::Parameter & p) {\n    RCLCPP_INFO(\n      this->get_logger(), \"cb2: Received an update to parameter \\\"%s\\\" of type: %s: \\\"%.02lf\\\"\",\n      p.get_name().c_str(),\n      p.get_type_name().c_str(),\n      p.as_double());\n  };\nauto remote_node_name = std::string(\"parameter_blackboard\");\nauto remote_param_name = std::string(\"a_double_param\");\ncb_handle2_ = param_subscriber_->add_parameter_callback(remote_param_name, cb2, remote_node_name);\n```\n\n----------------------------------------\n\nTITLE: Launching the Robot State Publisher Node with ROS 2 Python Launch File\nDESCRIPTION: This snippet references a Python launch file used to start the urdf_tutorial_cpp package node and associated components to visualize the robot. It enables easier runtime management by automating node startup and configuration. The launch file is saved as urdf_tutorial_cpp/launch/launch.py and is executed using ros2 launch.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-cpp.rst#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Launching the Event Handler Example ROS 2 Launch File\nDESCRIPTION: This command uses `ros2 launch` to execute the specified Python launch file (`example_event_handlers_launch.py`) from the `launch_tutorial` package. It also passes launch arguments (`turtlesim_ns`, `use_provided_red`, `new_background_r`) to customize the launch behavior, such as setting the namespace and controlling background color changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Event-Handlers.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nros2 launch launch_tutorial example_event_handlers_launch.py turtlesim_ns:='turtlesim3' use_provided_red:='True' new_background_r:=200\n```\n\n----------------------------------------\n\nTITLE: Transform Support for Message Types in tf2_geometry_msgs in C++\nDESCRIPTION: Extends tf2 support by implementing doTransform methods for Point32, Polygon, and PolygonStamped message types, ensuring they can be transformed consistently within ROS2. Dependencies include tf2, geometry_msgs, and standard message types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_65\n\nLANGUAGE: C++\nCODE:\n```\n# Implement doTransform for Point32, Polygon, and PolygonStamped in tf2_geometry_msgs\n# Backport feature from earlier versions to ROS2\n\n```\n\n----------------------------------------\n\nTITLE: Launching URDF Model Visualization in ROS 2\nDESCRIPTION: Command to launch the URDF model visualization with a specified model file. This opens Rviz for visualization and a GUI to control the movable joints.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Movable-Robot-Model-with-URDF.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch urdf_tutorial display.launch.py model:=urdf/06-flexible.urdf\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Launch File to Observe Blocking Behavior\nDESCRIPTION: This console snippet instructs to run a ROS2 launch file again after code changes that add a timeout to lookupTransform. It demonstrates that the call will block until the transform becomes available or the timeout expires, exemplifying successful synchronization of transform availability between broadcaster and listener.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Learning-About-Tf2-And-Time-Cpp.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_cpp turtle_tf2_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: Instantiating Custom Deleter and Allocator for Message Allocation in C++\nDESCRIPTION: Illustrates how to create and link a custom message deleter and allocator to ensure memory is managed through the user-defined allocator. The custom deleter handles proper destruction and deallocation of messages created with the custom allocator. This setup is essential for safe and deterministic message allocation and deletion within ROS 2 nodes using custom memory strategies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n MessageDeleter message_deleter;\n MessageAlloc message_alloc = *alloc;\n rclcpp::allocator::set_allocator_for_deleter(&message_deleter, &message_alloc);\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Humble C++ Header Installation Structure\nDESCRIPTION: Shows the updated C++ header file organization introduced in ROS 2 Humble, where each package's headers are installed into a subdirectory named after the package within the main `include` directory (e.g., `/opt/ros/humble/include/rclcpp/rclcpp/`). This change improves overlay handling.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n/opt/ros/humble/include\n├── rcl\n│   └── rcl\n│       ├── node.h\n├── rclcpp\n│   └── rclcpp\n│       ├── node.hpp\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py with catkin_pkg for ROS 1 - Python\nDESCRIPTION: This setup.py script uses 'setuptools' along with 'catkin_pkg.python_setup' to generate setup arguments for Python package installation in a Catkin-based ROS 1 workspace. It dynamically assigns packages and package_dir and invokes setup with the generated arguments. Inputs: Python source structure; outputs: installed Python package for ROS 1.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\nfrom catkin_pkg.python_setup import generate_distutils_setup\n\nsetup_args = generate_distutils_setup(\n    packages=['talker_py'],\n    package_dir={'': 'src'}\n)\n\nsetup(**setup_args)\n\n```\n\n----------------------------------------\n\nTITLE: Stopping HTML5 Animation Recording via Ros2Supervisor Service Call in Console\nDESCRIPTION: Shows how to stop the ongoing HTML5 animation recording by calling the /Ros2Supervisor/animation_stop_recording service of type webots_ros2_msgs/srv/GetBool. The service expects a boolean 'ask' field to true as input and returns a success status. This snippet is used once animation recording has started.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Supervisor.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service call /Ros2Supervisor/animation_stop_recording webots_ros2_msgs/srv/GetBool \"{ask: True}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing the MyRobotDriver Plugin (C++)\nDESCRIPTION: The `init` method implementation within `MyRobotDriver.cpp`. This function runs once upon plugin load, initializes robot motors, sets initial positions/velocities, and subscribes to the `/cmd_vel` topic using a lambda function callback. It receives pointers to the `WebotsNode` and configuration parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// Content of Code/MyRobotDriver.cpp, lines 13-33\n```\n\n----------------------------------------\n\nTITLE: Defining spawn and parameter change actions with YAML substitutions\nDESCRIPTION: This YAML snippet describes actions for spawning a turtle and modifying turtlesim parameters, such as background color, using the $(var <name>) substitution. It includes conditional actions executed based on evaluated expressions using $(eval <expression>). The purpose is to dynamically manipulate the turtlesim environment based on launch arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: launch/example_substitutions_launch.yaml\n  :language: yaml\n  :lines: 14-28\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Arguments to Components using ros2\nDESCRIPTION: This snippet shows how to pass extra arguments to the component manager using `ros2 component load` with the `-e` option. It sets `use_intra_process_comms` and `forward_global_arguments`.  This controls the component manager's behavior when constructing the node.  The component manager will use these values to configure the node at creation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 component load /ComponentManager composition composition::Talker -e use_intra_process_comms:=true -e forward_global_arguments:=false\n```\n\n----------------------------------------\n\nTITLE: Including Launch Files in Python setup.py (Python)\nDESCRIPTION: Modification to the `setup.py` file for an `ament_python` package. This code snippet adds the `launch` directory and its contents to the `data_files` list, ensuring that launch files are installed with the package and are discoverable by `ros2 launch`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Launch-system.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom glob import glob\n# Other imports ...\n\npackage_name = 'py_launch_example'\n\nsetup(\n    # Other parameters ...\n    data_files=[\n        # ... Other data files\n        # Include all launch files.\n        (os.path.join('share', package_name, 'launch'), glob('launch/*'))\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Installing colcon on Linux using apt - Bash\nDESCRIPTION: Installs colcon and its common extensions using the apt package manager on Linux systems. This step is required before building ROS 2 workspaces and provides all essential colcon command-line utilities. Run this command in a terminal with sudo privileges; no arguments are required. Output indicates successful installation or already-present packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install python3-colcon-common-extensions\n\n```\n\n----------------------------------------\n\nTITLE: Exporting Plugin Description File in CMake\nDESCRIPTION: This snippet illustrates how to register a plugin description file as a resource in the ament index, particularly for pluginlib-based plugins.  The `pluginlib_export_plugin_description_file` macro registers the provided XML file, allowing pluginlib factories to locate and load plugins. This macro creates a file in resource index. Dependencies: Requires pluginlib.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\npluginlib_export_plugin_description_file(rviz_common plugins_description.xml)\n```\n\n----------------------------------------\n\nTITLE: Playing Back Data with QoS Reliability Override CLI\nDESCRIPTION: This snippet demonstrates the CLI usage to play back a bag file (`my_bag`) with QoS overrides.  It utilizes the `--qos-profile-overrides-path` flag of the `ros2 bag play` command, referencing the `reliability_override.yaml` file. This directly depends on an existing bag file and a YAML file to override the policy.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag play --qos-profile-overrides-path reliability_override.yaml my_bag\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers - Docker - console\nDESCRIPTION: This snippet provides the command to list all local Docker containers and images, including stopped containers, using sudo privileges. There are no additional dependencies apart from Docker. The command displays status, size, and other metadata for containers. Takes no parameters; outputs a list of containers and images.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker ps -as\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Using rosdep on Linux Console\nDESCRIPTION: Installs all missing ROS 2 package dependencies recursively from the source directory for a specific ROS distribution. This ensures the workspace has all required system and package dependencies before building. Only applicable on Linux platforms as rosdep does not support macOS or Windows natively.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Cpp.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rosdep install -i --from-path src --rosdistro {DISTRO} -y\n```\n\n----------------------------------------\n\nTITLE: ROS 2 Galactic C++ Header Installation Structure\nDESCRIPTION: Illustrates the previous C++ header file organization in ROS 2 Galactic, where all package headers were installed directly into a single `include` directory (e.g., `/opt/ros/galactic/include/`). This structure could lead to issues with overlays.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n/opt/ros/galactic/include/\n├── rcl\n│   ├── node.h\n├── rclcpp\n│   ├── node.hpp\n```\n\n----------------------------------------\n\nTITLE: Exporting Libraries\nDESCRIPTION: This snippet exports the library '${PROJECT_NAME}' so other packages depending on this one can link against it.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nament_export_libraries(\n  ${PROJECT_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for ROS 2 Core Framework\nDESCRIPTION: BibTeX entry for citing the main ROS 2 framework, referencing the 2022 Science Robotics paper 'Robot Operating System 2: Design, architecture, and uses in the wild' by Macenski et al.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Citations.rst#_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{doi:10.1126/scirobotics.abm6074,\n    author = {Steven Macenski and Tully Foote and Brian Gerkey and Chris Lalancette and William Woodall},\n    title = {Robot Operating System 2: Design, architecture, and uses in the wild},\n    journal = {Science Robotics},\n    volume = {7},\n    number = {66},\n    pages = {eabm6074},\n    year = {2022},\n    doi = {10.1126/scirobotics.abm6074},\n    URL = {https://www.science.org/doi/abs/10.1126/scirobotics.abm6074}\n}\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Image Interactively - Docker - Console\nDESCRIPTION: This command starts a container from the ROS 2 docker image in interactive mode, allowing users to execute shell commands and interact with the ROS 2 environment. Replace \"{DISTRO}\" with your chosen ROS 2 distribution. The \"-it\" flags allocate a pseudo-TTY and keep STDIN open for interactivity.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it osrf/ros:{DISTRO}-desktop\n```\n\n----------------------------------------\n\nTITLE: Running the Python Listener demo node\nDESCRIPTION: This snippet runs the Python \"listener\" demo node after sourcing the ROS 2 environment setup file.  This node subscribes to messages published by the talker node. Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Fixing typo in warning message\nDESCRIPTION: This fixes a typo in a warning message within the `ros2pkg` package. This improves the quality of the tool.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Environment Variables in Shell Hook\nDESCRIPTION: This shell script sets the RMW implementation, enables QoS from XML, and defines the default FastRTPS profiles file. It uses environment variables to configure FastDDS for a ROS 2 package. The script relies on the COLCON_CURRENT_PREFIX environment variable, which should be available when the workspace is sourced.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n$ export RMW_FASTRTPS_USE_QOS_FROM_XML=1\n$ export FASTRTPS_DEFAULT_PROFILES_FILE=\"$COLCON_CURRENT_PREFIX/my_dds_profile.xml\"\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup File (Linux)\nDESCRIPTION: Sources the `setup.bash` script generated by the build process to configure the current terminal environment with necessary ROS 2 paths and variables, making ROS 2 commands and executables available. This specific snippet shows the Linux command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Client in ROS 1 and ROS 2\nDESCRIPTION: This snippet illustrates how to create and use a service client in both ROS 1 and ROS 2.  The ROS 2 version creates a service client using `node.create_client()`, waits for service availability, and then calls the service asynchronously using `call_async()`.  The example also notes the restriction on `rclpy.spin_until_future_complete` usage within ROS 2 callbacks.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Packages.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrospy.wait_for_service('add_two_ints')\nadd_two_ints = rospy.ServiceProxy('add_two_ints', AddTwoInts)\nresp = add_two_ints(req)\n```\n\nLANGUAGE: python\nCODE:\n```\nadd_two_ints = node.create_client(AddTwoInts, 'add_two_ints')\nwhile not add_two_ints.wait_for_service(timeout_sec=1.0):\n    node.get_logger().info('service not available, waiting again...')\nresp = add_two_ints.call_async(req)\nrclpy.spin_until_future_complete(node, resp)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Action Server in ROS2\nDESCRIPTION: CMake configuration to build the Fibonacci action server as a shared library and register it as a component. It sets up include directories, dependencies, and installation paths for the action server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(action_server SHARED\n  src/fibonacci_action_server.cpp)\ntarget_include_directories(action_server PRIVATE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n  $<INSTALL_INTERFACE:include>)\ntarget_compile_definitions(action_server\n  PRIVATE \"CUSTOM_ACTION_CPP_BUILDING_DLL\")\ntarget_link_libraries(action_server PUBLIC\n  ${custom_action_interfaces_TARGETS}\n  rclcpp::rclcpp\n  rclcpp_action::rclcpp_action\n  rclcpp_components::component)\nrclcpp_components_register_node(action_server PLUGIN \"custom_action_cpp::FibonacciActionServer\" EXECUTABLE fibonacci_action_server)\ninstall(TARGETS\n  action_server\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib\n  RUNTIME DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: rosidl Generate Source Code with Bash\nDESCRIPTION: This demonstrates how to use `rosidl generate` to create C, C++, and Python support code from message definitions, specifying include paths, and the output directory. The `-I` options are used to point to the required dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrosidl generate -o gen -t c -t cpp -t py -I$(ros2 pkg prefix --share std_msgs)/.. \\\n    -I$(ros2 pkg prefix --share geometry_msgs)/.. demo msg/Demo.msg\n```\n\n----------------------------------------\n\nTITLE: Illustrating Message Content (ROS 2)\nDESCRIPTION: This snippet provides an example of how service messages might look. Specifically, it describes the contents of a hypothetical service message for adding two numbers, including the fields 'a' and 'b' in the request, and the 'sum' in the response. This clarifies how service servers operate and the data they can exchange.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Services.rst#_snippet_1\n\nLANGUAGE: other\nCODE:\n```\nuint32 a\nuint32 b\n---\nuint32 sum\n```\n\n----------------------------------------\n\nTITLE: Launching talker_py Node in ROS 1 Script - Python\nDESCRIPTION: This executable script runs the talker_py main function when executed. It imports the 'talker_py' module and starts the node when called as a script. The shebang line allows direct invocation in a Unix-like environment. Requires the surrounding Python module and correct Catkin packaging.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n\nimport talker_py\n\nif __name__ == '__main__':\n    talker_py.main()\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Node and Parameter Handler (Python)\nDESCRIPTION: Defines the constructor for the `SampleNodeWithParameters` class, inheriting from `rclpy.node.Node`. It initializes the node with the name 'node_with_parameters', declares an integer parameter 'an_int_param' with a default value, and creates an instance of `ParameterEventHandler` associated with this node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclass SampleNodeWithParameters(Node):\n        def __init__(self):\n            super().__init__('node_with_parameters')\n\n            self.declare_parameter('an_int_param', 0)\n\n            self.handler = ParameterEventHandler(self)\n```\n\n----------------------------------------\n\nTITLE: Check Command Line Tools Installation on macOS\nDESCRIPTION: This command checks if the command line tools are installed on macOS, which is a prerequisite for using xcodebuild. If the tools are not installed, it prompts the user to install them.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Updating Unit Test Framework from GTest in ROS 2\nDESCRIPTION: This snippet explains how to switch from ROS 1's catkin_add_gtest and associated macros to ROS 2's ament_add_gtest, including modifications in CMakeLists.txt and adding the appropriate package.xml dependency for ament_cmake_gtest.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTING)\n  find_package(ament_cmake_gtest REQUIRED)\n  ament_add_gtest(my_test src/test/test_something.cpp)\n  target_link_libraries(my_test\n    #...\n   )\nendif()\n```\n\nLANGUAGE: xml\nCODE:\n```\n<test_depend>ament_cmake_gtest</test_depend>\n```\n\n----------------------------------------\n\nTITLE: Calculating Dynamic Transform Coordinates in Python\nDESCRIPTION: This snippet shows the core logic within the broadcaster's timer callback for calculating the dynamic position of the `carrot1` frame. It retrieves the current time in seconds, calculates an angle `x` proportional to time, and uses `math.sin(x)` and `math.cos(x)` to set the `x` and `y` translation components of the transform, creating circular motion.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nseconds, _ = self.get_clock().now().seconds_nanoseconds()\nx = seconds * math.pi\n...\nt.transform.translation.x = 10 * math.sin(x)\nt.transform.translation.y = 10 * math.cos(x)\n```\n\n----------------------------------------\n\nTITLE: Displaying tf2_echo Usage Information\nDESCRIPTION: Shows the command-line usage for the 'tf2_echo' tool, part of the 'tf2_ros' package. This tool is used to print the transformation (translation and rotation) between a specified source coordinate frame and a target coordinate frame.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run tf2_ros tf2_echo [source_frame] [target_frame]\n```\n\n----------------------------------------\n\nTITLE: Remove roscpp Dependency\nDESCRIPTION: This xml snippet shows how to remove roscpp dependency from `package.xml`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_18\n\nLANGUAGE: null\nCODE:\n```\n<!-- delete this -->\n<depend>roscpp</depend>\n```\n\n----------------------------------------\n\nTITLE: Removing ROS 2 Workspace Directory in Bash\nDESCRIPTION: Deletes the entire ROS 2 workspace directory tree using 'rm -rf'. Useful for uninstalling or reclaiming disk space. Input is the home directory path to the workspace (~/ros2_{DISTRO}). Irreversible operation—ensure all important data is backed up.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf ~/ros2_{DISTRO}\n```\n\n----------------------------------------\n\nTITLE: TimePanel port\nDESCRIPTION: This details the porting of the TimePanel. It suggests changes to the TimePanel code. Dependencies depend on the nature of the port.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Modify setup.py to Include Launch and Config Files for ROS2 Package\nDESCRIPTION: This code snippet instructs how to modify 'setup.py' to include data files such as launch scripts, configuration YAMLs, and RViz files into the installed package. It ensures that these resources are accessible after installation, facilitating modular and portable deployment of launch setups.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# setup.py modifications\nimport os\nfrom glob import glob\nfrom setuptools import setup\n\nsetup(\n    # ... other setup arguments ...\n    data_files=[\n        (os.path.join('share', 'your_package_name', 'launch'), glob('launch/*')),\n        (os.path.join('share', 'your_package_name', 'config'), glob('config/*.yaml')),\n        (os.path.join('share', 'your_package_name', 'rviz'), glob('config/*.rviz')),\n    ],\n)\n\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 Workspace Setup\nDESCRIPTION: These console commands are used to source the workspace setup files after building. This makes the executables and libraries installed by the build process available in the current terminal session. Commands are provided for Linux/macOS bash, Windows cmd, and Windows powershell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n. install/setup.bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ call install\\setup.bat\n```\n\nLANGUAGE: console\nCODE:\n```\n$ .\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Setting Fast DDS XML Env Vars for Publisher (Linux/macOS)\nDESCRIPTION: Sets environment variables on Linux/macOS to use the `rmw_fastrtps_cpp` implementation, enable loading QoS settings from an XML file (`RMW_FASTRTPS_USE_QOS_FROM_XML=1`), and specify the path to the XML configuration file (`FASTRTPS_DEFAULT_PROFILES_FILE`). These are required before running the publisher node to apply custom Fast DDS configurations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ export RMW_IMPLEMENTATION=rmw_fastrtps_cpp\n$ export RMW_FASTRTPS_USE_QOS_FROM_XML=1\n$ export FASTRTPS_DEFAULT_PROFILES_FILE=path/to/SyncAsync.xml\n```\n\n----------------------------------------\n\nTITLE: Inverting a Quaternion in Python\nDESCRIPTION: Provides a simple method to invert a quaternion by negating its w-component, which is especially useful for calculating inverse rotations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Quaternion-Fundamentals.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nq[3] = -q[3]\n```\n\n----------------------------------------\n\nTITLE: Launching rviz2 with tf2 Demo Configuration (Linux)\nDESCRIPTION: Starts the rviz2 visualization tool on Linux, loading a specific configuration file ('turtle_rviz.rviz'). The configuration file path is determined dynamically using `ros2 pkg prefix`. This setup visualizes the turtles and their associated tf2 coordinate frames.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run rviz2 rviz2 -d $(ros2 pkg prefix --share turtle_tf2_py)/rviz/turtle_rviz.rviz\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 Setup Files - Windows\nDESCRIPTION: Command to source the setup files after building a ROS2 package on Windows systems using the call command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ call install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: CMakeLists.txt Customization for ROS2 Package with Custom Interface\nDESCRIPTION: Includes necessary find_package commands for a custom interface package and links executable targets with the interface libraries. Essential for building C++ ROS2 nodes that utilize custom message/service definitions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n#...\n\nfind_package(ament_cmake REQUIRED)\nfind_package(rclcpp REQUIRED)\nfind_package(tutorial_interfaces REQUIRED)\n\nadd_executable(server src/add_two_ints_server.cpp)\ntarget_link_libraries(server PUBLIC rclcpp::rclcpp ${tutorial_interfaces_TARGETS})\n\nadd_executable(client src/add_two_ints_client.cpp)\ntarget_link_libraries(client PUBLIC rclcpp::rclcpp ${tutorial_interfaces_TARGETS})\n\ninstall(TARGETS\n  server\n  client\n  DESTINATION lib/${PROJECT_NAME})\n\nament_package()\n\n```\n\n----------------------------------------\n\nTITLE: Loading Parameters with Bash\nDESCRIPTION: This shows the usage of `ros2 param load` to load parameter values from a YAML file into a ROS 2 node at runtime. The example loads the parameters that were previously dumped to the `parameter_blackboard.yaml` file.  Requires ROS 2 and the `parameter_blackboard` node from the demo_nodes_cpp package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp parameter_blackboard\n```\n\n----------------------------------------\n\nTITLE: Running talker and listener\nDESCRIPTION: This command runs the talker and listener demo nodes to test RTI Connext DDS. Prerequisites are ROS 2 installed,  RMW_IMPLEMENTATION set to rmw_connextdds, and the demo_nodes_cpp package installed.  This command launches the talker and listener nodes, verifying that the communication setup with RTI Connext DDS is working correctly.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker\n```\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp listener\n```\n\n----------------------------------------\n\nTITLE: Installing colcon on macOS using pip - Bash\nDESCRIPTION: Installs colcon and its common extensions on macOS using Python's pip. This installation is necessary for using colcon to build ROS 2 workspaces. Ensure pip and Python 3 are available on your PATH. Output will show install progress or state that requirements are already satisfied.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install colcon-common-extensions\n\n```\n\n----------------------------------------\n\nTITLE: Default YAML Output for ros2 topic echo\nDESCRIPTION: Demonstrates the default multi-line YAML format produced by `ros2 topic echo` when printing complex messages like `/tf_static`. This format emphasizes readability with indentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms:\n- header:\n    stamp:\n      sec: 1651172841\n      nanosec: 433705575\n    frame_id: single_rrbot_link3\n  child_frame_id: single_rrbot_camera_link\n  transform:\n    translation:\n      x: 0.05\n      y: 0.0\n      z: 0.9\n    rotation:\n      x: 0.0\n      y: 0.0\n      z: 0.0\n      w: 1.0\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Demo with Connext RMW (macOS)\nDESCRIPTION: This snippet shows how to run the C++ talker and Python listener demo nodes using the Connext RMW implementation on macOS. It sets the RMW_IMPLEMENTATION environment variable to 'rmw_connextdds' prior to executing the ROS 2 run commands.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRMW_IMPLEMENTATION=rmw_connextdds ros2 run demo_nodes_cpp talker\n\n# Run in another terminal\nRMW_IMPLEMENTATION=rmw_connextdds ros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Adjusting ipfrag_high_thresh Kernel Parameter - Linux Bash\nDESCRIPTION: This command temporarily increases the `net.ipv4.ipfrag_high_thresh` kernel parameter to 128MB (134217728 bytes). This parameter sets the maximum memory the Linux kernel uses for reassembling IP fragments. Increasing it attempts to prevent the buffer from filling up entirely, which can happen on lossy networks.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl net.ipv4.ipfrag_high_thresh=134217728     # (128 MB)\n```\n\n----------------------------------------\n\nTITLE: Setting Parameters in Launch File (Python)\nDESCRIPTION: This Python launch file starts the `turtlesim_node` and sets parameters directly in the launch file. It uses the `Node` action from `launch_ros.actions` to start the node and `parameters` argument to set node's parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-ROS2-Launch-For-Large-Projects.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom launch import LaunchDescription\nfrom launch_ros.actions import Node\n\ndef generate_launch_description():\n    return LaunchDescription([\n        Node(\n            package='turtlesim',\n            executable='turtlesim_node',\n            name='sim',\n            namespace='turtlesim1',\n            parameters=[{\n                'background_r': 255,\n                'background_g': 255,\n                'background_b': 0\n            }]\n        )\n    ])\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 Setup Files - macOS Alternative\nDESCRIPTION: Alternative command to source the setup files after building a ROS2 package on macOS systems using the dot shorthand syntax.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: ROS 1 Talker Node - C++\nDESCRIPTION: This C++ code defines the ROS 1 talker node, which publishes a \"hello world\" message to the \"chatter\" topic. It uses roscpp for ROS communication and std_msgs/String for the message type.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <sstream>\n#include \"ros/ros.h\"\n#include \"std_msgs/String.h\"\nint main(int argc, char **argv)\n{\n  ros::init(argc, argv, \"talker\");\n  ros::NodeHandle n;\n  ros::Publisher chatter_pub = n.advertise<std_msgs::String>(\"chatter\", 1000);\n  ros::Rate loop_rate(10);\n  int count = 0;\n  std_msgs::String msg;\n  while (ros::ok())\n  {\n    std::stringstream ss;\n    ss << \"hello world \" << count++;\n    msg.data = ss.str();\n    ROS_INFO(\"%s\", msg.data.c_str());\n    chatter_pub.publish(msg);\n    ros::spinOnce();\n    loop_rate.sleep();\n  }\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated publisher creation signatures using qos_profile and qos_depth\nDESCRIPTION: These deprecated functions show original methods for creating publishers with a qos_profile or a QoS depth parameter, requiring the user to specify QoS settings directly. They depend on rmw_qos_profile_t structures and are replaced by newer signatures with rclcpp::QoS objects for better configurability.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n[[deprecated(\"use create_publisher(const std::string &, const rclcpp::QoS &, ...) instead\")]]\nstd::shared_ptr<PublisherT> create_publisher(\n  const std::string & topic_name,\n  size_t qos_history_depth,\n  std::shared_ptr<AllocatorT> allocator);\n```\n\nLANGUAGE: cpp\nCODE:\n```\n[[deprecated(\"use create_publisher(const std::string &, const rclcpp::QoS &, ...) instead\")]]\nstd::shared_ptr<PublisherT> create_publisher(\n  const std::string & topic_name,\n  const rmw_qos_profile_t & qos_profile = rmw_qos_profile_default,\n  std::shared_ptr<AllocatorT> allocator = nullptr);\n```\n\n----------------------------------------\n\nTITLE: Setting `package.xml` Format to 2\nDESCRIPTION: Demonstrates how to update the `<package>` tag by adding or setting the `format` attribute to `2`. This signifies that the file now adheres to format 2 specifications as required by ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<package format=\"2\">\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test from a Package\nDESCRIPTION: This snippet demonstrates how to execute a particular test within a package using colcon by specifying the package name and test pattern via command-line arguments.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ colcon test --packages-select YOUR_PKG_NAME --ctest-args -R YOUR_TEST_IN_PKG\n```\n\n----------------------------------------\n\nTITLE: Building the Workspace - Windows\nDESCRIPTION: Builds all ROS2 packages in the workspace using 'colcon', merging the install directories. The `--merge-install` option is needed because windows doesn't allow long paths. Requires that you are in the root of the workspace.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --merge-install\n```\n\n----------------------------------------\n\nTITLE: Querying the ament Index in CMake: get_resource\nDESCRIPTION: This CMake function retrieves the content of a specific resource from the ament index.  It populates the specified variable with the content of the resource's marker file.  It throws an error if the resource does not exist.  Requires a `PREFIX_PATH` for searching.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nament_index_get_resource(var resource_type resource_name PREFIX_PATH <prefix_path>)\n```\n\n----------------------------------------\n\nTITLE: Getting Node Info with ros2 node info\nDESCRIPTION: This command displays detailed information about a specified ROS 2 node, including its subscribers, publishers, service servers, service clients, action servers, and action clients. The output provides insights into the node's connections within the ROS graph. Prerequisites include a running ROS 2 node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Nodes/Understanding-ROS2-Nodes.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 node info <node_name>\n```\n\n----------------------------------------\n\nTITLE: Adjusting ipfrag_time Kernel Parameter - Linux Bash\nDESCRIPTION: This command temporarily reduces the `net.ipv4.ipfrag_time` kernel parameter value to 3 seconds. This parameter controls the time the Linux kernel keeps IP fragments in memory before timing out reassembly. Reducing it helps mitigate issues on lossy networks where dropped fragments can cause long hangs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl net.ipv4.ipfrag_time=3\n```\n\n----------------------------------------\n\nTITLE: Finding and Linking rclcpp_components (CMake)\nDESCRIPTION: These CMake commands are used to integrate `rclcpp_components` into the build process. First, `find_package` ensures that `rclcpp_components` is found. The subsequent commands then replace the standard `add_executable` command, modify linking and install rules to work with the composable node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-a-Composable-Node.rst#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(rclcpp_components REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Using PathJoinSubstitution, Python\nDESCRIPTION: This snippet showcases the PathJoinSubstitution feature in ROS 2's launch system.  It demonstrates how to construct file paths dynamically by concatenating strings and launch configurations within a launch file. The expected input is a list containing strings and launch configurations; the output is a constructed file path.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Kilted-Kaiju.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPathJoinSubstitution(['robot_description', 'urdf', [LaunchConfiguration('model'), '.xacro']])\n```\n\nLANGUAGE: python\nCODE:\n```\n'robot_description/urdf/my_model.xacro'\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Package with rclcpp Using Console Commands\nDESCRIPTION: The snippet shows console commands to create a ROS 2 package named urdf_tutorial_cpp using ament_cmake build type and specifying a dependency on rclcpp. It sets up the package folder structure as the starting point for ROS 2 development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-URDF-with-Robot-State-Publisher-cpp.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cd src\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 urdf_tutorial_cpp --dependencies rclcpp\n$ cd urdf_tutorial_cpp\n```\n\n----------------------------------------\n\nTITLE: Including TF2 Message Filter Headers in C++\nDESCRIPTION: Required header includes for using tf2_ros::MessageFilter, including geometry messages, message filters, and tf2 transformation headers with conditional compilation for different ROS distributions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include \"geometry_msgs/msg/point_stamped.hpp\"\n#include \"message_filters/subscriber.h\"\n#include \"rclcpp/rclcpp.hpp\"\n#include \"tf2_ros/buffer.h\"\n#include \"tf2_ros/create_timer_ros.h\"\n#include \"tf2_ros/message_filter.h\"\n#include \"tf2_ros/transform_listener.h\"\n#ifdef TF2_CPP_HEADERS\n  #include \"tf2_geometry_msgs/tf2_geometry_msgs.hpp\"\n#else\n  #include \"tf2_geometry_msgs/tf2_geometry_msgs.h\"\n#endif\n```\n\n----------------------------------------\n\nTITLE: Publishing a Topic with QoS Durability\nDESCRIPTION: This snippet demonstrates how to publish a topic with a specific QoS durability setting using `ros2 topic pub`. This example sets the durability policy to `transient_local` for the topic `/talker` which is crucial for demonstrating overriding QoS. The command provides the necessary context for later overriding this setting in rosbag2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Overriding-QoS-Policies-For-Recording-And-Playback.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub -r 0.1 --qos-durability transient_local /talker std_msgs/String \"data: Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to Workspace Directory (Bash)\nDESCRIPTION: Creates a directory named `security_gd_tutorial` in the user's home directory and changes the current working directory into it. This directory serves as the workspace for the deployment tutorial example.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/security_gd_tutorial\ncd ~/security_gd_tutorial\n```\n\n----------------------------------------\n\nTITLE: Using tf2_echo to monitor TF2 transforms between 'world' and 'turtle1'\nDESCRIPTION: This command runs 'tf2_echo' to display the current transformation data from the 'world' frame to the 'turtle1' frame. It helps verify if the TF2 broadcaster is correctly publishing the turtle's pose.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_19\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run tf2_ros tf2_echo world turtle1\n```\n\n----------------------------------------\n\nTITLE: Example for CI, docs.ros.org configuration (YAML)\nDESCRIPTION: This is an example configuration for ROS packages to be hosted on docs.ros.org, included in the  ``rosdistro/{DISTRO}/distribution.yaml`` file. This is required for CI and hosting the documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n      <package_name>:\n        doc:\n          type: git\n          url: https://github.com/<github_username>/<package_name>.git\n          version: main\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Workspace Directory - Windows Console\nDESCRIPTION: Initializes a ROS 2 workspace at \\dev\\ros2_ws with a src subdirectory and enters the workspace root. Adapt the path as appropriate for your Windows environment. These commands prepare the directory layout for colcon builds. Requires no arguments and can be run from a Command Prompt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nmd \\dev\\ros2_ws\\src\ncd \\dev\\ros2_ws\n\n```\n\n----------------------------------------\n\nTITLE: Publishing ROS2 Messages to Update RViz2 Panel Label - console\nDESCRIPTION: This snippet shows the ROS2 command-line interface command to publish a string message on the \"/input\" topic. It updates the label text in the RViz2 panel by triggering the subscription callback in the panel widget. Required dependencies include a ROS2 environment with the std_msgs package and a running node subscribing to \"/input\". The input is a std_msgs/msg/String message with the \"data\" field containing the desired label text; no direct output except the RViz2 UI update.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic pub /input std_msgs/msg/String \"{data: 'Please be kind.'}\"\n```\n\n----------------------------------------\n\nTITLE: Generating URDF from Xacro using Console\nDESCRIPTION: This snippet demonstrates how to convert a xacro file to a URDF file using the xacro command-line tool. The output is redirected to create a URDF file. This process is essential for using xacro files with ROS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Using-Xacro-to-Clean-Up-a-URDF-File.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ xacro model.xacro > model.urdf\n```\n\n----------------------------------------\n\nTITLE: XML Profiles for Service and Client Configuration\nDESCRIPTION: XML configuration defining publisher and subscriber profiles for services and clients. The service publisher uses synchronous mode while the client publisher starts with asynchronous mode.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_24\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<profiles xmlns=\"http://www.eprosima.com/XMLSchemas/fastRTPS_Profiles\">\n\n    <!-- default publisher profile -->\n    <publisher profile_name=\"default_publisher\" is_default_profile=\"true\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n    </publisher>\n\n    <!-- default subscriber profile -->\n    <subscriber profile_name=\"default_subscriber\" is_default_profile=\"true\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n    </subscriber>\n\n    <!-- service publisher is SYNC -->\n    <publisher profile_name=\"service\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n        <qos>\n            <publishMode>\n                <kind>SYNCHRONOUS</kind>\n            </publishMode>\n        </qos>\n    </publisher>\n\n    <!-- client publisher is ASYNC -->\n    <publisher profile_name=\"client\">\n        <historyMemoryPolicy>DYNAMIC</historyMemoryPolicy>\n        <qos>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing WebotsLauncher in Launch File (Python)\nDESCRIPTION: Snippet from `robot_launch.py` demonstrating the instantiation of `WebotsLauncher`, a custom action from `webots_ros2_driver`. It specifies the world file (`my_world.wbt`) to be opened by the Webots simulator upon launch.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Content of Code/robot_launch.py, lines 13-15, dedent 4\n```\n\n----------------------------------------\n\nTITLE: Configuring ROS2 Listener Node on Linux\nDESCRIPTION: Sets the environment variable for the ROS Discovery Server to the local discovery server address (127.0.0.1:11811) on Linux. The listener node subscribes to topics and announces itself according to this configuration for peer discovery in ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ export ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"\n```\n\n----------------------------------------\n\nTITLE: Building Performance Test - colcon - Console\nDESCRIPTION: Builds the `performance_test` package using `colcon`. It specifically selects the `performance_test` package and passes a CMake argument to enable the RCLCPP (C++ client library) tests, which are used in this tutorial.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/ROS2-Tracing-Trace-and-Analyze.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select performance_test --cmake-args -DPERFORMANCE_TEST_RCLCPP_ENABLED=ON\n```\n\n----------------------------------------\n\nTITLE: Enabling Thread Safety Analysis with Clang in CMake - CMake\nDESCRIPTION: Activates the Clang -Wthread-safety warning flag for thread safety static analysis in CMake-based ROS 2 packages. The conditional checks if the C++ compiler is Clang, then adds compile options globally or to a specific target. Requires Clang compiler and projects using CMake for build configuration. Inputs are CMake variables (CMAKE_CXX_COMPILER_ID and MY_TARGET); outputs are extra compiler flags for thread safety. Limitations: Only applies when using Clang and will have no effect with other compilers.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wthread-safety)   # for your whole package\n  target_compile_options(${MY_TARGET} PUBLIC -Wthread-safety)  # for a single library or executable\nendif()\n```\n\n----------------------------------------\n\nTITLE: Publishing Fibonacci Action Status with ROS 2 STATUS_TOPIC (YAML)\nDESCRIPTION: This YAML snippet shows a status update message published by the FibonacciActionServer and received by the client via the STATUS_TOPIC. The status_list field contains goal information, including the unique goal_id and the timestamp, as well as the current status code, which helps indicate the action's execution state. Such messages enable clients and tools to monitor the state machine and progress of long-running or asynchronous actions in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: STATUS_TOPIC\nstatus_list: [{goal_info: {goal_id: {uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]}, stamp: {sec: 1742070798, nanosec: 401146752}}, status: 4}]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the Step Logic in MyRobotDriver (C++)\nDESCRIPTION: The `step` method implementation within `MyRobotDriver.cpp`. This function is called at each simulation time step, retrieves desired speeds from `cmd_vel_msg`, converts linear/angular speeds to individual wheel velocities based on robot geometry, and sets motor velocities.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Content of Code/MyRobotDriver.cpp, lines 35-48\n```\n\n----------------------------------------\n\nTITLE: Use rclcpp::ok() in ROS 2 - C++\nDESCRIPTION: This code snippet demonstrates how to use rclcpp::ok() to check if ROS 2 is running, replacing the ROS 1 ros::ok() call.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n//  while (ros::ok())\n  while (rclcpp::ok())\n```\n\n----------------------------------------\n\nTITLE: Making ROS_DOMAIN_ID Persistent on Windows\nDESCRIPTION: This command permanently sets the ROS_DOMAIN_ID variable, making it available in future sessions, via environment variable modification.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_12\n\nLANGUAGE: batch\nCODE:\n```\n$ setx ROS_DOMAIN_ID <your_domain_id>\n```\n\n----------------------------------------\n\nTITLE: Unpacking ROS 2 Binary: bash\nDESCRIPTION: This snippet unpacks the downloaded ROS 2 binary package. It creates a directory, changes the current directory into it, and unpacks the downloaded tar.bz2 file using `tar xf`.  It prepares the environment for running ROS 2. The DISTRO variable is a placeholder for the ROS 2 distribution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Install-Binary.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_{DISTRO}\ncd ~/ros2_{DISTRO}\ntar xf ~/Downloads/ros2-package-linux-x86_64.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment Setup on Windows - console\nDESCRIPTION: Runs the setup.bat script to prepare the command prompt environment for ROS 2 development on Windows. Ensures that required environment variables are set so that ROS 2 executables and libraries can be found. Should be invoked from the root of the ROS 2 workspace after building.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncall install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Building Selected ROS 2 Packages Using Colcon - console\nDESCRIPTION: Compiles the polygon_base and polygon_plugins packages within the ROS 2 workspace using the colcon build tool. Requires colcon to be installed and the current working directory to be the ROS 2 workspace (ros2_ws). No additional arguments are required besides the specified packages. Outputs build artifacts to the install and build directories.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Pluginlib.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select polygon_base polygon_plugins\n```\n\n----------------------------------------\n\nTITLE: Downgrade/Upgrade Entire ROS 2 Installation to Main (sh)\nDESCRIPTION: Upgrades or downgrades all installed packages to match the versions available in the main `ros2` apt repository. After switching the source back and running `apt update`, this command synchronizes the installed ROS 2 packages with the official release versions. Requires root privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt dist-upgrade\n```\n\n----------------------------------------\n\nTITLE: Add executable to CMakeLists.txt\nDESCRIPTION: This CMake code snippet demonstrates how to add an executable target for the 'cpp_parameters_node.cpp' file in the CMakeLists.txt. It links the executable with the 'rclcpp' library and installs the executable to the appropriate directory, allowing ROS2 to locate and run the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n    add_executable(minimal_param_node src/cpp_parameters_node.cpp)\n    target_link_libraries(minimal_param_node rclcpp::rclcpp)\n\n    install(TARGETS\n        minimal_param_node\n      DESTINATION lib/${PROJECT_NAME}\n    )\n```\n\n----------------------------------------\n\nTITLE: Listing Workspace Directories After Build - Shell\nDESCRIPTION: Displays the directories in the workspace root after building, confirming existence of 'build', 'install', 'log', and 'src' directories. This enables verification that the workspace was built correctly. Commands vary due to OS shell differences but all list directory contents.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-A-Workspace/Creating-A-Workspace.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ls\nbuild  install  log  src\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ls\nbuild  install  log  src\n```\n\nLANGUAGE: console\nCODE:\n```\n$ dir\nbuild  install  log  src\n```\n\n----------------------------------------\n\nTITLE: Adjusting rtprio permissions\nDESCRIPTION: This bash code snippet shows how to modify the /etc/security/limits.conf file to set the real-time priority for a specific user. This setting improves performance by increasing the priority for the control loop. The real-time priority is set to 98. The range for rtprio is 0-99, but avoid setting the value to 99.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Real-Time-Programming.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n<your username>    -   rtprio   98\n```\n\n----------------------------------------\n\nTITLE: Initializing Rosdep System\nDESCRIPTION: Initializes the rosdep system, which is used to resolve system dependencies for ROS packages. This command typically needs to be run only once per system setup and may require superuser privileges. It is safe to ignore if it has been initialized previously.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Install-Dependencies.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo rosdep init\n```\n\n----------------------------------------\n\nTITLE: Querying the ament Index in CMake: get_resources\nDESCRIPTION: This CMake function retrieves a list of all packages that have registered a resource of a specific type in the ament index.  The output variable is populated with a list of package names. It requires `PREFIX_PATH` for the search.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nament_index_get_resources(var resource_type PREFIX_PATH <prefix_path>)\n```\n\n----------------------------------------\n\nTITLE: ROS2 Documentation Structure using reStructuredText\nDESCRIPTION: A reStructuredText document that defines the structure of ROS2 tutorials documentation. It includes a table of contents directive that organizes tutorials by experience level.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _Tutorials:\n\nTutorials\n=========\n\nThe tutorials are a collection of step-by-step instructions meant to steadily build skills in ROS 2.\n\nThe best way to approach the tutorials is to walk through them for the first time in order, as they build off of each other and are not meant to be comprehensive documentation.\n\nFor quick solutions to more specific questions, see the :doc:`How-To-Guides`.\n\n.. toctree::\n   :maxdepth: 2\n\n   Tutorials/Beginner-CLI-Tools\n   Tutorials/Beginner-Client-Libraries\n   Tutorials/Intermediate\n   Tutorials/Advanced\n   Tutorials/Demos\n   Tutorials/Miscellaneous\n\nExamples\n--------\n\n* `Python and C++ minimal examples <https://github.com/ros2/examples>`__.\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Directory with Bash\nDESCRIPTION: This snippet shows how to set the logging directory using the `ROS_LOG_DIR` environment variable.  It specifies the path where log files will be stored when running a node.  The ROS_HOME variable also influences the logging directory if ROS_LOG_DIR is unset.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nROS_LOG_DIR=/tmp/foo ros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Sourcing the colcon Install Environment - Linux Bash\nDESCRIPTION: Activates the newly-installed ROS 2 environment by sourcing the setup.bash script under the install directory. This ensures binaries and libraries from the workspace are discoverable in the current shell. Should be run after every build or when opening a new terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsource install/setup.bash\n\n```\n\n----------------------------------------\n\nTITLE: Selecting Upstream VCS Type in Bloom\nDESCRIPTION: Prompt for selecting the version control system (VCS) type of your upstream repository. Options include git, svn, hg, or tar, with git being the default for most modern repositories.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nUpstream VCS Type:\n   svn\n      Upstream URI is a svn repository\n   git\n      Upstream URI is a git repository\n   hg\n      Upstream URI is a hg repository\n   tar\n      Upstream URI is a tarball\n   ['git']:\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Node with Security Enclave (Shell)\nDESCRIPTION: This command demonstrates how to launch a ROS2 node (`talker` from `demo_nodes_py`) and assign it to a specific security enclave (`/my_enclave`) using the `--enclave` ROS argument. This is the Foxy approach for associating nodes with security configurations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nros2 run demo_nodes_py talker --ros-args --enclave /my_enclave\n```\n\n----------------------------------------\n\nTITLE: Undeclaring and Querying Declared Parameters in rclpy.node.Node (Python)\nDESCRIPTION: Provides methods for undeclaring parameters ('undeclare_parameter') and checking if a parameter is declared ('has_parameter') in rclpy nodes. Dependencies are rclpy and potentially rcl_interfaces. Takes parameter name(s) as input and returns None or a boolean. Used for robust parameter management and introspection in nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\ndef undeclare_parameter(name: str) -> None\n\ndef has_parameter(name: str) -> bool\n```\n\n----------------------------------------\n\nTITLE: Run ros2doctor with Report Option\nDESCRIPTION: This command executes the ros2doctor tool with the `--report` argument. It generates a detailed report containing information about network configuration, platform information, RMW middleware, ROS 2 information, and the topic list. Sourcing the ROS 2 environment is required before running the command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Getting-Started-With-Ros2doctor.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 doctor --report\n```\n\n----------------------------------------\n\nTITLE: Playing back rosbag data to ROS 2\nDESCRIPTION: Commands to set up the ROS 1 master, run the bridge, and play back a previously recorded bag file to make the data available in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Shell P:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nroscore\n\n# Shell Q:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS 2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nexport ROS_MASTER_URI=http://localhost:11311\nros2 run ros1_bridge dynamic_bridge --bridge-all-topics\n\n# Shell R:\n. /opt/ros/kinetic/setup.bash\n# Or, on OSX, something like:\n# . ~/ros_catkin_ws/install_isolated/setup.bash\nrosbag play --loop path/to/bag_file\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate MutuallyExclusive Callback Group for Timer - C++\nDESCRIPTION: This snippet creates a MutuallyExclusive callback group and assigns it to the timer callback group (`timer_cb_group_`). The client callback group (`client_cb_group_`) is set to `nullptr`, meaning the client will not use a specific callback group and will default to the node's default callback group (typically mutually exclusive).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nclient_cb_group_ = nullptr;\ntimer_cb_group_ = this->create_callback_group(rclcpp::CallbackGroupType::MutuallyExclusive);\n```\n\n----------------------------------------\n\nTITLE: Running dlopen composition in ROS 2 (Linux)\nDESCRIPTION: This command demonstrates runtime composition by using `dlopen`. It loads the specified shared libraries (.so files) into a generic container process. This example assumes a Linux environment and specifies the paths to the compiled component libraries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run composition dlopen_composition `ros2 pkg prefix composition`/lib/libtalker_component.so `ros2 pkg prefix composition`/lib/liblistener_component.so\n```\n\n----------------------------------------\n\nTITLE: Adding ROS 2 GPG Key for APT Authentication Using Bash\nDESCRIPTION: This snippet updates the package list, installs 'curl' if necessary, and downloads the ROS 2 GPG key to verify the authenticity of ROS 2 packages. The key is saved in the '/usr/share/keyrings' directory for secure package signing verification.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_Apt-Repositories.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install curl -y\nsudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\n```\n\n----------------------------------------\n\nTITLE: Attempt to remap chatter topic for listener node (Bash)\nDESCRIPTION: This bash command attempts to run the 'listener' node from the 'demo_nodes_py' package while remapping the 'chatter' topic to 'not_chatter'. This will fail because the listener node is configured to only subscribe to the 'chatter' topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_py listener --ros-args --enclave /talker_listener/listener \\\n  --remap chatter:=not_chatter\n```\n\n----------------------------------------\n\nTITLE: C++ Program with an Out-of-Bounds Array Access\nDESCRIPTION: This C++ code snippet shows a simple program that accesses an array out of bounds.  The array `a` is defined with 10 elements, but the code attempts to access the 11th element (index 10), which results in undefined behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nint main()\n{\n    char a[10];\n    a[10] = 0;\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Dockerfile for Deployment Example (Bash)\nDESCRIPTION: Uses the `wget` command to download the Dockerfile required for building the custom ROS 2 image used in the deployment tutorial. The `{DISTRO}` placeholder in the URL should be replaced with the target ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Download the Dockerfile\nwget https://raw.githubusercontent.com/ros2/ros2_documentation/{DISTRO}/source/Tutorials/Advanced/Security/resources/deployment_gd/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Code (Windows CMD)\nDESCRIPTION: Uses the `curl` command within a Windows command prompt to download the Python source code for the static TF2 broadcaster (`static_turtle_tf2_broadcaster.py`) from the ROS geometry_tutorials GitHub repository, saving it to the current directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py -o static_turtle_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: Call ConfigLogger Service\nDESCRIPTION: This command calls the `/config_logger` service to set the log level. In this case, it sets the level to `DEBUG` for all loggers (logger_name is empty). This assumes the `LoggerConfig` component is loaded and running.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nros2 service call /config_logger logging_demo/srv/ConfigLogger \"{logger_name: '', level: DEBUG}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Patches Directory in Bloom\nDESCRIPTION: Prompt for specifying an optional directory containing patches to be applied on top of the upstream source during release. This is rarely used for most packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nPatches Directory:\n   <path in bloom branch>\n      This can be any valid relative path in the bloom branch. The contents\n      of this folder will be overlaid onto the upstream branch after each\n      import-upstream.  Additionally, any package.xml files found in the\n      overlay will have the :{version} string replaced with the current\n      version being released.\n   :{none}\n      Use this if you want to disable overlaying of files.\n   [None]:\n```\n\n----------------------------------------\n\nTITLE: Echoing the /chatter Topic (Console)\nDESCRIPTION: Platform-specific commands to display messages published on the `/chatter` topic using the `ros2 topic echo` tool. This requires sourcing the main ROS 2 environment setup script before running the command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# Linux\n. /opt/ros/{DISTRO}/setup.bash\nros2 topic echo /chatter\n```\n\nLANGUAGE: bash\nCODE:\n```\n# macOS\n. /opt/ros/{DISTRO}/setup.bash\nros2 topic echo /chatter\n```\n\nLANGUAGE: batch\nCODE:\n```\nREM Windows\ncall C:\\dev\\ros2\\local_setup.bat\nros2 topic echo /chatter\n```\n\n----------------------------------------\n\nTITLE: Running ament_cppcheck to Detect Array Out of Bounds\nDESCRIPTION: This example shows the output of running `ament_cppcheck` on the `example.cpp` program, which contains an out-of-bounds array access. The tool identifies the error and provides the filename and line number where the error occurs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ament_cppcheck\n[example.cpp:4]: (error: arrayIndexOutOfBounds) Array 'a[10]' accessed at index 10, which is out of bounds.\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Tag in Bloom\nDESCRIPTION: Prompt for specifying which tag, branch, or revision to import code from during release. This can be templated with the version or configured to prompt during each release.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRelease Tag:\n   :{version}\n      This means that the release tag will match the :{version} tag.\n      This can be further templated, for example: \"foo-:{version}\" or \"v:{version}\"\n\n      This can describe any vcs reference. For git that means {tag, branch, hash},\n      for hg that means {tag, branch, hash}, for svn that means a revision number.\n      For tar this value doubles as the sub directory (if the repository is\n      in foo/ of the tar ball, putting foo here will cause the contents of\n      foo/ to be imported to upstream instead of foo itself).\n   :{ask}\n      This means the user will be prompted for the release tag on each release.\n   :{none}\n      For svn and tar only you can set the release tag to :{none}, so that\n      it is ignored.  For svn this means no revision number is used.\n   [':{version}']:\n```\n\n----------------------------------------\n\nTITLE: Sourcing the setup file (Linux/macOS)\nDESCRIPTION: This command sources the setup file to properly configure the environment for ROS2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ . install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Code (Windows PowerShell)\nDESCRIPTION: Uses the `curl` command within Windows PowerShell to download the Python source code for the static TF2 broadcaster (`static_turtle_tf2_broadcaster.py`) from the ROS geometry_tutorials GitHub repository, saving it to the current directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py -o static_turtle_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: Send Transform Message (Python)\nDESCRIPTION: This Python snippet shows the final step in the `handle_turtle_pose` callback: sending the constructed `TransformStamped` message using the `sendTransform` method of the `TransformBroadcaster` instance. This publishes the transform to the ROS 2 topic used by tf2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n# Send the transformation\nself.tf_broadcaster.sendTransform(t)\n```\n\n----------------------------------------\n\nTITLE: Supporting service recording in ros2bag\nDESCRIPTION: This provides support for service 2/2 in the `ros2bag` package (service play) . This introduces the capability to record and play service interactions, enabling improved debugging and data capture for complex systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Configuring turtlesim_node with namespace using YAML substitutions\nDESCRIPTION: This YAML snippet defines a turtlesim node with its namespace set dynamically through a launch configuration variable using the $(var <name>) substitution. It specifies the node's parameters and demonstrates how to link launch arguments to node configurations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Launch/Using-Substitutions.rst#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n.. literalinclude:: launch/example_substitutions_launch.yaml\n  :language: yaml\n  :lines: 4-12\n```\n\n----------------------------------------\n\nTITLE: Autocompleted string example\nDESCRIPTION: This snippet shows an example autocompleted string using the topic pub command and pressing tab. This allows the user to easily publish messages to a topic with the correct data format, reducing the chance of errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist 'linear:\n      x: 0.0\n      y: 0.0\n      z: 0.0\n```\n\n----------------------------------------\n\nTITLE: Assigning Separate Reentrant Callback Group for Client - Python\nDESCRIPTION: This snippet creates a Reentrant callback group instance and assigns it specifically to the client callback group (`client_cb_group`). The timer callback group (`timer_cb_group`) is set to `None`, meaning the timer will default to the node's default callback group. This isolates the client in a reentrant group while the timer uses the default group.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-callback-groups.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclient_cb_group = ReentrantCallbackGroup()\ntimer_cb_group = None\n```\n\n----------------------------------------\n\nTITLE: Adding Condition Support for Package Dependencies\nDESCRIPTION: Enhancement to check the condition attribute in package.xml dependencies. The condition attribute was already parsed when reading the XML file, but needed to be checked when adding dependencies to the list for a particular key/target.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nCheck condition attr in package.xml dependencies The condition attribute was already parsed when reading the XML file. Just needed to check the condition when adding dependencies to the list for a particular key/target.\n```\n\n----------------------------------------\n\nTITLE: Showing interface details\nDESCRIPTION: This command shows the structure of a message type used on a specific topic. This is useful to understand the expected data format for publishing messages to that topic.  It's crucial for understanding the message structure that nodes use to communicate data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show geometry_msgs/msg/Twist\n```\n\n----------------------------------------\n\nTITLE: Build a ROS2 package with colcon\nDESCRIPTION: This console command utilizes 'colcon' to build the specified ROS2 package ('cpp_parameters').  The '--packages-select' argument limits the build to only the 'cpp_parameters' package, optimizing build time. The '--merge-install' option combines install directories for easier deployment on Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select cpp_parameters\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 Executables - Console\nDESCRIPTION: This snippet lists the executables for all installed ROS 2 packages, showing the association between package names and their corresponding binaries. Useful for identifying available nodes to launch. The output displays <package> <executable> pairs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg executables\n(you will see a list of <package> <executable>)\n```\n\n----------------------------------------\n\nTITLE: Scoping Environment Variables in Group Actions - Python Launch File\nDESCRIPTION: Demonstrates how environment variables are now scoped to group actions in launch files, using Python syntax. Variables set inside a group don't affect the global scope.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport launch\nimport launch.actions\n\ndef generate_launch_description():\n    return launch.LaunchDescription([\n        launch.actions.SetEnvironmentVariable(name='FOO', value='1'),\n        launch.actions.GroupAction([\n            launch.actions.SetEnvironmentVariable(name='FOO', value='2'),\n        ]),\n        launch.actions.ExecuteProcess(cmd=['echo', '$FOO'], output='screen', shell=True),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Building a Colcon Workspace with a Virtual Environment (Console)\nDESCRIPTION: Shows the final steps of sourcing the main ROS 2 installation setup file and then building the packages within the Colcon workspace using `colcon build`. ROS 2 will automatically use the Python interpreter and packages from the activated virtual environment for builds.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\ncolcon build\n```\n\n----------------------------------------\n\nTITLE: Echoing ROS2 Topic Messages to Monitor Output from RViz2 Panel - console\nDESCRIPTION: This snippet demonstrates how to use the ROS2 command-line interface to echo messages being published on the \"/output\" topic. The panel button triggers publishing on this topic, and observing the echoed messages on the console helps verify interactions. Dependencies are a running ROS2 system and an active publisher on \"/output\". It takes no inputs and outputs the real-time messages published on the topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/RViz/RViz-Custom-Panel/RViz-Custom-Panel.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /output\n```\n\n----------------------------------------\n\nTITLE: Updating Template Parameters in spin_until_future_complete in C++\nDESCRIPTION: Code diff showing how to update the template parameters in spin_until_future_complete calls to match the new API that takes the full future type rather than just the result type.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_29\n\nLANGUAGE: dpatch\nCODE:\n```\nstd::shared_future<MyResultT> future;\n...\n-executor.spin_until_future_complete<MyResultT>(future);\n+executor.spin_until_future_complete<std::shared_future<MyResultT>>(future);\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Entrypoint and Launching ROS 2 Nodes - Bash\nDESCRIPTION: This snippet configures the Docker image entrypoint to source the built overlay workspace and specifies the ROS 2 launch command to start both demo_nodes_cpp and demo_nodes_py via talker_listener_launch.py. Assumptions include prior building of the workspace and correct overlay paths. The image will execute the launch file upon container start, directing output to the console. Modifications may be required for custom packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# run launch file\nCMD [\"ros2\", \"launch\", \"demo_nodes_cpp\", \"talker_listener_launch.py\"]\n```\n\n----------------------------------------\n\nTITLE: Recording with Exclusion of Topics\nDESCRIPTION: This command-line snippet uses `ros2 bag record` with both `--all` and `--exclude` options. It records all topics except for those within the `/my_namespace/` namespace.  This showcases recording with an exclusion filter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nros2 bag record --all --exclude \"/my_namespace/*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Library Targets\nDESCRIPTION: This snippet uses the install command to install the created library. It specifies the destinations for archive, library, and runtime components. This step ensures that the library is placed in the appropriate directories after the build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS\n  ${PROJECT_NAME}\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib\n  RUNTIME DESTINATION bin\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Package with Dependencies for Bag Reading\nDESCRIPTION: Command to create a new ROS 2 package with the necessary dependencies for reading from bag files. This package will depend on rclcpp for ROS 2 C++ client library, rosbag2_transport for bag reading functionality, and turtlesim for the message types.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-CPP.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg create --build-type ament_cmake --license Apache-2.0 bag_reading_cpp --dependencies rclcpp rosbag2_transport turtlesim\n```\n\n----------------------------------------\n\nTITLE: Fixing reload after mimic joint\nDESCRIPTION: This fixes an issue in `robot_state_publisher` where the model wouldn't reload correctly after a description with a mimic joint. This likely involves properly handling the robot's joint state after a configuration change.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Using tf2::TimePointZero in C++\nDESCRIPTION: This code shows one of the correct way to call the `lookupTransform` to get the transform. Using `tf2::TimePointZero` to obtain the latest available transform. This is equivalent to using an infinite timeout and getting the last available data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n    try {\n      t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        tf2::TimePointZero);\n    } catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Creating cpp_api_docs.rst (RST)\nDESCRIPTION: This snippet provides an example of how to create an rst file (cpp_api_docs.rst) for the C++ API docs which links to the generated documentation to create a less cluttered sidebar.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n    :caption: cpp_api_docs.rst\n\n    C++ API Docs\n    ============\n\n    These are the autogenerated docs for the internal implementation.\n\n    .. toctree::\n       :maxdepth: 3\n       :caption: Contents:\n\n       generated/index\n```\n\n----------------------------------------\n\nTITLE: Old ROS 2 rclcpp_action Goal Response Callback Signature in C++\nDESCRIPTION: Illustrates the legacy callback signature for action client goal responses in rclcpp where a shared future to a goal handle is passed. This is deprecated and replaced by a simpler shared pointer to a goal handle.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_38\n\nLANGUAGE: c++\nCODE:\n```\nvoid goal_response_callback(std::shared_future<GoalHandleFibonacci::SharedPtr> future)\n```\n\n----------------------------------------\n\nTITLE: Downloading Example Code (Linux/macOS)\nDESCRIPTION: Uses the `wget` command to download the Python source code for the static TF2 broadcaster (`static_turtle_tf2_broadcaster.py`) from the ROS geometry_tutorials GitHub repository. This command is suitable for Linux and macOS systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Static-Broadcaster-Py.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/static_turtle_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: C++ Implementation of Service Introspection Client Node\nDESCRIPTION: A partial C++ class implementation showing private members of an IntrospectionClientNode. It includes client, timer, and parameter callback handle declarations for service introspection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Service-Introspection.rst#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nprivate:\n  rclcpp::Client<example_interfaces::srv::AddTwoInts>::SharedPtr client_;\n  rclcpp::TimerBase::SharedPtr timer_;\n  rclcpp::node_interfaces::OnSetParametersCallbackHandle::SharedPtr\n    on_set_parameters_callback_handle_;\n  rclcpp::node_interfaces::PostSetParametersCallbackHandle::SharedPtr\n    post_set_parameters_callback_handle_;\n  bool request_in_progress_{false};\n```\n\n----------------------------------------\n\nTITLE: Removing Devel Space References in CMake Configuration\nDESCRIPTION: This snippet emphasizes the need to eliminate any references to the devel space, such as CATKIN_DEVEL_PREFIX, since ROS 2 does not utilize a devel space concept, simplifying the build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nRemove any references to the *devel space* such as ``CATKIN_DEVEL_PREFIX``. There is no equivalent to the *devel space* in ROS 2.\n```\n\n----------------------------------------\n\nTITLE: Run Python Listener Example\nDESCRIPTION: This command runs the Python `listener` example node in ROS 2. It first sources the setup file to configure the environment, and then uses `ros2 run` to execute the `demo_nodes_py listener` node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/ros2-linux/setup.bash\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: rosbag2 core package versioning and maintainer updates\nDESCRIPTION: Details changes in rosbag2, including version bumps and maintainers update, aimed at ensuring version consistency and accurate contributor attribution for the core recording and playback system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* Bump version number to avoid conflict\\n* Update package maintainers (\\#899 <https://github.com/ros2/rosbag2/issues/899>)\\n* Contributors: Chris Lalancette, Michel Hidalgo\n```\n\n----------------------------------------\n\nTITLE: Installing Python Tools via DNF on RHEL\nDESCRIPTION: Installs the necessary Python packages 'python3-bloom' and 'python3-catkin_pkg' using the dnf package manager. This command requires superuser privileges and is intended for RPM-based systems like RHEL.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Install-Dependencies.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install python3-bloom python3-catkin_pkg\n```\n\n----------------------------------------\n\nTITLE: Download Broadcaster Script (Windows PowerShell)\nDESCRIPTION: This snippet provides the command using `curl` in Windows PowerShell to download the Python script for the tf2 broadcaster node from a GitHub repository. The `-o` flag specifies the output filename.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_broadcaster.py -o turtle_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: Importing Test Modules - Python\nDESCRIPTION: This snippet imports necessary Python modules for creating and running integration tests, including unittest and launch_testing. The import statements set up the foundation for defining tests and interacting with the ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Integration.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport sys\nimport time\nimport unittest\n\nimport launch\nimport launch_ros\nimport launch_testing.actions\nimport rclpy\nfrom turtlesim.msg import Pose\n```\n\n----------------------------------------\n\nTITLE: Starting turtlesim node\nDESCRIPTION: This command starts the turtlesim simulation node. It displays informational messages, including the turtle's initial position. The output is messages from the node and the turtlesim GUI window.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Introducing-Turtlesim/Introducing-Turtlesim.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n[INFO] [turtlesim]: Starting turtlesim with node name /turtlesim\n[INFO] [turtlesim]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]\n```\n\n----------------------------------------\n\nTITLE: Declaring C++ Documentation Dependency with `<doc_depend>`\nDESCRIPTION: Shows how to declare a documentation-specific dependency, such as Doxygen for C++ projects, using the `<doc_depend>` tag introduced in `package.xml` format 2. This tag helps separate documentation dependencies from build or runtime dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<doc_depend>doxygen</doc_depend>\n```\n\n----------------------------------------\n\nTITLE: Add ament_cmake Export Section - XML\nDESCRIPTION: This XML snippet demonstrates how to add the <export> section to a package.xml file, specifying ament_cmake as the build type for a ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n    <export>\n      <build_type>ament_cmake</build_type>\n    </export>\n```\n\n----------------------------------------\n\nTITLE: Adding rmw_count_clients,services & test\nDESCRIPTION: This change introduces functionality to count clients and services in the `rmw_implementation` package, along with corresponding tests. This would enable developers to monitor the number of active clients and services.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Publishing Fibonacci Sequence Feedback with ROS 2 FEEDBACK_TOPIC (YAML)\nDESCRIPTION: These YAML snippets represent feedback messages published by the FibonacciActionServer to the FEEDBACK_TOPIC. Each message contains the goal's UUID and the incremental state of the server's computation of the Fibonacci sequence, allowing clients to monitor progress in real time. No external dependencies are needed beyond ROS 2 action infrastructure; the sequence parameter lists the Fibonacci numbers computed so far, and all feedback is associated with a specific goal_id.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Action-Introspection.rst#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3, 5]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3, 5, 8]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3, 5, 8, 13]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n```\n\nLANGUAGE: YAML\nCODE:\n```\ninterface: FEEDBACK_TOPIC\ngoal_id:\n  uuid: [230, 96, 12, 6, 100, 69, 69, 70, 220, 205, 135, 251, 210, 2, 231, 110]\nfeedback:\n  sequence: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Package Version in Bloom\nDESCRIPTION: Prompt for configuring how the package version is determined during release. Options include automatic detection from package.xml, asking during each release, or setting a fixed version.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nVersion:\n   :{ask}\n      This means that the user will be prompted for the version each release.\n      This also means that the upstream devel will be ignored.\n   :{auto}\n      This means the version will be guessed from the devel branch.\n      This means that the devel branch must be set, the devel branch must exist,\n      and there must be a valid package.xml in the upstream devel branch.\n   <version>\n      This will be the version used.\n      It must be updated for each new upstream version.\n   [':{auto}']:\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Environment - Console\nDESCRIPTION: Sources the ROS 2 environment to update shell paths and environment variables. Replace {DISTRO} with your ROS 2 distribution codename. This step is necessary before building or running ROS 2 packages to ensure proper tool and library paths.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 C++ Talker Example\nDESCRIPTION: Commands to source the ROS 2 setup file and run a C++ talker node, which publishes messages as part of the basic ROS 2 demo.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Ubuntu-Install-Debs.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\nros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Launch File Shutdown on ROS 2 Node Exit (Python)\nDESCRIPTION: Presents a ROS 2 launch file containing all simulation-related nodes *except* the Webots simulator itself. It includes an `OnProcessExit` event handler targeting the main robot driver node. When the driver exits (which happens on Webots reset), the handler triggers a `Shutdown` event for the *entire* launch file, terminating all included nodes. This approach requires manually restarting this launch file after each Webots reset.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Simulation-Reset-Handler.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef generate_launch_description():\n    robot_driver = WebotsController(\n        robot_name='my_robot',\n        parameters=[\n            {'robot_description': robot_description_path}\n        ]\n    )\n\n    ros_control_node = Node(\n        package='controller_manager',\n        executable='spawner',\n        arguments=['diffdrive_controller']\n    )\n\n    nav2_node = IncludeLaunchDescription(\n        PythonLaunchDescriptionSource(os.path.join(\n            get_package_share_directory('nav2_bringup'), 'launch', 'bringup_launch.py')),\n        launch_arguments=[\n            ('map', nav2_map),\n            ('params_file', nav2_params),\n        ],\n    )\n\n    rviz = Node(\n        package='rviz2',\n        executable='rviz2',\n        output='screen'\n    )\n\n    # Declare the handler that shuts all nodes down when robot_driver exits\n    shutdown_handler = launch.actions.RegisterEventHandler(\n        event_handler=launch.event_handlers.OnProcessExit(\n            target_action=robot_driver,\n            on_exit=[launch.actions.EmitEvent(event=launch.events.Shutdown())],\n        )\n    )\n\n    return LaunchDescription([\n        robot_driver,\n        ros_control_node,\n        nav2_node,\n        rviz,\n        shutdown_handler\n    ])\n```\n\n----------------------------------------\n\nTITLE: Install ROS 2 Prerequisites on RHEL using DNF\nDESCRIPTION: This command installs essential tools required for unpacking and using the ROS 2 binary release, including tar, bzip2, and wget. These utilities are necessary for downloading and extracting the ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install tar bzip2 wget -y\n```\n\n----------------------------------------\n\nTITLE: Fix possible nullptr access in robot_joint.cpp.\nDESCRIPTION: This change addresses a potential null pointer access within the robot_joint.cpp file. This prevents unexpected behavior and ensures robustness of the program. This likely involves a check before dereferencing a pointer.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Launching the Turtle TF2 Sensor Message Demo\nDESCRIPTION: Launches the ROS 2 nodes required for the `tf2` sensor message tutorial using a Python launch file. This typically starts `turtlesim` with multiple turtles and the necessary TF broadcasters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\n$ ros2 launch learning_tf2_py turtle_tf2_sensor_message_launch.py\n```\n\n----------------------------------------\n\nTITLE: Requesting tf2 Transform\nDESCRIPTION: This snippet shows the actual request to tf2 by the `lookupTransform` call. It specifies the source and target frames ('turtle3' and 'turtle1' in the first instance) and a time at which to perform the transform.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Debugging-Tf2-Problems.rst#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n    try {\n      t = tf_buffer_->lookupTransform(\n        toFrameRel, fromFrameRel,\n        this->now());\n    } catch (const tf2::TransformException & ex) {\n```\n\n----------------------------------------\n\nTITLE: Launching the tf2 Turtlesim Demo\nDESCRIPTION: Launches the ROS 2 turtlesim demo using the provided launch file 'turtle_tf2_demo.launch.py' from the 'turtle_tf2_py' package. This command starts the simulation environment with two turtles and sets up the necessary tf2 broadcasters and listeners.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Introduction-To-Tf2.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 publisher with node.create_publisher() in Python\nDESCRIPTION: Replaces creating a rospy.Publisher instance with node.create_publisher(), noting the swapped order of topic type and topic name parameters in ROS 2. Creates a String message publisher on topic 'chatter' with queue size 10.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\npub = node.create_publisher(String, 'chatter', 10)\n```\n\n----------------------------------------\n\nTITLE: Building ROS2 Package Colcon\nDESCRIPTION: These console commands show how to build the `learning_tf2_cpp` ROS2 package using the `colcon build` tool. The commands are slightly different for Windows (`--merge-install`). `--packages-select` ensures only the specified package is built.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Cpp.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select learning_tf2_cpp\n```\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select learning_tf2_cpp\n```\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --merge-install --packages-select learning_tf2_cpp\n```\n\n----------------------------------------\n\nTITLE: Fix for mousewheel to zoom in/out\nDESCRIPTION: This describes a fix to address issues related to mousewheel zoom functionality in rviz. This likely involves modifying the input handling or camera controls to correct the zooming behavior. The primary dependency is the rviz framework.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Updating package.xml Description and Maintainer\nDESCRIPTION: This XML snippet shows how to update the `description`, `maintainer`, and `license` tags within the `package.xml` file for the `bag_reader_node_py` package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<description>Python bag reading tutorial</description>\n  <maintainer email=\"you@email.com\">Your Name</maintainer>\n  <license>Apache-2.0</license>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for QoS XML Configuration in ROS2\nDESCRIPTION: Sets the required environment variables to use custom QoS profiles from an XML file with the Fast-RTPS RMW implementation. This configures ROS2 to use the specified XML file for QoS settings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nexport RMW_IMPLEMENTATION=rmw_fastrtps_cpp\nexport RMW_FASTRTPS_USE_QOS_FROM_XML=1\nexport FASTRTPS_DEFAULT_PROFILES_FILE=path/to/ping.xml\n```\n\n----------------------------------------\n\nTITLE: Using the ros2test API with the new domain_coordinator\nDESCRIPTION: Details the usage of ros2test with the updated domain_coordinator API, facilitating testing across ROS2 domains and improving test management. Dependencies include ros_testing and relevant Python modules.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Humble-Hawksbill-Complete-Changelog.rst#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* Use new domain_coordinator API (\\#10 <https://github.com/ros2/ros_testing/issues/10>)\\n* Contributors: Timo Röhling\n```\n\n----------------------------------------\n\nTITLE: Capturing Encrypted ROS 2 Data Traffic - bash\nDESCRIPTION: Captures and displays network packets on any interface (`-i any`) filtered by UDP ports 7401 through 7500 using `tcpdump`. The `-X` option prints packet contents, demonstrating that the actual message data is no longer visible in plain text, indicating successful encryption. Requires root privileges (`sudo`).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Examine-Traffic.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo tcpdump -i any -X udp portrange 7401-7500\n```\n\n----------------------------------------\n\nTITLE: Generating a Default rosdoc2.yaml (Console)\nDESCRIPTION: This snippet shows how to generate a default `rosdoc2.yaml` configuration file. The command is run with the `--package-path` argument to indicate where the package is located, this file can then be customized.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ rosdoc2 default_config --package-path <package-path>\n```\n\n----------------------------------------\n\nTITLE: Adding hyperlinks to images in RST documentation\nDESCRIPTION: Demonstrates how to add a hyperlink to an image by using the :target: attribute. The link uses a relative path to the _images/ directory where all image files are stored after building the documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_34\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: images/turtlesim_follow1.png\n   :target: ../../_images/turtlesim_follow1.png\n```\n\n----------------------------------------\n\nTITLE: Echoing ROS2 topic data\nDESCRIPTION: This command displays the data published on a specific topic.  It allows the user to inspect the messages being sent and received on a given topic in real-time.  The output demonstrates the data structure and content of the messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Topics/Understanding-ROS2-Topics.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo <topic_name>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 topic echo /turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 demo code for logger service using Bash\nDESCRIPTION: Command to execute the demo node 'use_logger_service' from demo_nodes_cpp package that demonstrates how to use logger service APIs to get and set logger levels programmatically.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\n$ ros2 run demo_nodes_cpp use_logger_service\n```\n\n----------------------------------------\n\nTITLE: Prevent rviz_rendering::AssimpLoader from loading materials twice\nDESCRIPTION: This fixes an issue where `rviz_rendering::AssimpLoader` was loading materials multiple times. This would likely improve performance and reduce potential memory usage. Dependencies are rviz_rendering.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Overhauling TopicFilter class\nDESCRIPTION: This change overhauls the `TopicFilter` class and relevant tests in `ros2bag`, improving the handling of topic filtering. This change could enhance performance, and maintainability of the filtering process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Building ROS 2 Without Tracepoints (Binary Installation)\nDESCRIPTION: Commands to clone the ros2_tracing repository and build the tracetools package with the TRACETOOLS_TRACEPOINTS_EXCLUDED option set to ON for a binary installation of ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-ROS-2-with-Tracing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/ws\n$ git clone https://github.com/ros2/ros2_tracing.git -b {DISTRO} src/ros2_tracing\n$ colcon build --packages-select tracetools --cmake-args -DTRACETOOLS_TRACEPOINTS_EXCLUDED=ON\n```\n\n----------------------------------------\n\nTITLE: Bash directive for script file commands\nDESCRIPTION: Example of using the bash directive without '$' for commands meant to be copied into a script file. This format is recommended when creating content that users will directly paste into scripts.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_DOMAIN_ID=42\nros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Getting ROS2 Bag Info\nDESCRIPTION: Displays information about a specific rosbag file. This includes file size, duration, number of messages, and topic information. The command retrieves information for the `subset` rosbag file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag info <bag_file_name>\n```\n\n----------------------------------------\n\nTITLE: Example ROS2 package directory structure with tests\nDESCRIPTION: Standard directory layout for a ROS2 Python package that includes test files. The tests folder contains Python test files that follow the naming pattern test_*.py.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Python.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nawesome_ros_package/\n  awesome_ros_package/\n      __init__.py\n      fozzie.py\n  package.xml\n  setup.cfg\n  setup.py\n  tests/\n      test_init.py\n      test_copyright.py\n      test_fozzie.py\n```\n\n----------------------------------------\n\nTITLE: Defining Robot Model with Cylinder Shape\nDESCRIPTION: This XML code defines a simple robot model named 'myfirst' with a single link named 'base_link'. The link's visual component is a cylinder with a length of 0.6 meters and a radius of 0.2 meters. This represents a basic 'hello world' example for URDF models.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/URDF/Building-a-Visual-Robot-Model-with-URDF-from-Scratch.rst#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<robot name=\"myfirst\">\n  <link name=\"base_link\">\n    <visual>\n      <geometry>\n        <cylinder length=\"0.6\" radius=\"0.2\"/>\n      </geometry>\n    </visual>\n  </link>\n</robot>\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files\nDESCRIPTION: Commands for sourcing the ROS 2 setup files to make the built packages available in the current terminal session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Linux/macOS\n. install/setup.bash\n\n# Windows\ncall install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: Package XML Build Type Tag Example\nDESCRIPTION: An example of the build_type tag used in package.xml to identify an ament CMake package. This is placed within the export tag of the package.xml file and specifies that the package uses the ament_cmake build system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Advanced/About-Build-System.rst#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<build_type>ament_cmake</build_type>\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Directory with ROS_HOME\nDESCRIPTION: This snippet demonstrates configuring the logging directory using the `ROS_HOME` environment variable, which in turn influences the location of log files, particularly when `ROS_LOG_DIR` is not set. Requires a ROS 2 environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nROS_HOME=/path/to/home ros2 run demo_nodes_cpp talker\n```\n\n----------------------------------------\n\nTITLE: Persisting ROS_DOMAIN_ID in Shell Startup on Linux\nDESCRIPTION: This command appends the ROS_DOMAIN_ID export command to `.bashrc` to automatically set the domain ID in future shell sessions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ echo \"export ROS_DOMAIN_ID=<your_domain_id>\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Cloning rmw_connextdds repository\nDESCRIPTION: This command clones the rmw_connextdds repository into the ROS 2 workspace's src directory and selects a specific branch corresponding to the ROS 2 distribution in use. Prerequisites include git installed and a ROS 2 workspace prepared.  The -b option specifies the branch, which must be replaced with the appropriate ROS 2 distribution (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-RTI-Connext-DDS.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ros2_ws/src\ngit clone https://github.com/ros2/rmw_connextdds -b {DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Dependencies\nDESCRIPTION: This snippet installs Docker, git, python3-pip, and vcstool, configures the .bashrc to include the local bin path, and adds the user to the docker group.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt install docker.io git python3-pip\n$ pip3 install vcstool\n$ echo export PATH=$HOME/.local/bin:$PATH >> ~/.bashrc\n$ source ~/.bashrc\n$ sudo groupadd docker\n$ sudo usermod -aG docker $USER\n$ newgrp docker\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Webots Plugin in URDF (C++)\nDESCRIPTION: Example XML snippet demonstrating how to pass parameters (e.g., `parameterName` with value `someValue`) to a C++ based Webots ROS 2 plugin within a URDF file using nested tags inside the `<plugin>` tag. The parameters are accessible within the plugin's `init` method.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<plugin type=\"my_robot_driver::MyRobotDriver\">\n    <parameterName>someValue</parameterName>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed Permissions File Signature using OpenSSL in Bash\nDESCRIPTION: Uses the 'openssl smime' command to verify the digital signature of the 'permissions.p7s' file against the Permissions Certificate Authority (CA) certificate ('permissions_ca.cert.pem'). This ensures the integrity and authenticity of the ROS 2 permissions file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nopenssl smime -verify -in permissions.p7s -CAfile permissions_ca.cert.pem\n```\n\n----------------------------------------\n\nTITLE: Installing colcon on Windows using pip - Console\nDESCRIPTION: Installs and updates colcon common extensions on Windows with pip. Required to enable colcon commands for building ROS 2 on Windows. A Python installation and pip on PATH are prerequisites. The command updates colcon-common-extensions if already installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\npip install -U colcon-common-extensions\n\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Launch File for tf2_ros::MessageFilter Demo\nDESCRIPTION: A Python launch file for the tf2_ros::MessageFilter demonstration. This file would launch the necessary nodes to demonstrate message filtering with tf2, though the actual content isn't shown in the source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This file would contain the launch configuration for the tf2_ros::MessageFilter demo\n```\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Parameter via CLI\nDESCRIPTION: Uses the `ros2 param set` command-line tool to change the value of the `an_int_param` parameter on the running node named `node_with_parameters`. This action is expected to trigger the parameter change callback in the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set node_with_parameters an_int_param 43\n```\n\n----------------------------------------\n\nTITLE: Adding packet loss simulation with Linux tc\nDESCRIPTION: Command utilizing Linux's `tc` utility to introduce 5% packet loss on the loopback device (`lo`), simulating lossy network conditions for testing QoS resilience.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo tc qdisc add dev lo root netem loss 5%\n```\n\n----------------------------------------\n\nTITLE: Encrypting UDP socket buffers on macOS\nDESCRIPTION: Commands to increase the UDP receive buffer sizes on macOS to prevent errors related to small packet sizes in ROS 2 communication, requiring system modifications.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w net.inet.udp.recvspace=209715\n$ sudo sysctl -w net.inet.udp.maxdgram=65500\n```\n\n----------------------------------------\n\nTITLE: Switching to target_link_libraries\nDESCRIPTION: This change in the `rmw_implementation` package switches to using `target_link_libraries` everywhere. This is a CMake directive to link libraries and likely improves build system consistency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for QoS XML Configuration in ROS2 (Windows)\nDESCRIPTION: Sets the required environment variables for Windows systems to use custom QoS profiles from an XML file with the Fast-RTPS RMW implementation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_26\n\nLANGUAGE: console\nCODE:\n```\nSET RMW_IMPLEMENTATION=rmw_fastrtps_cpp\nSET RMW_FASTRTPS_USE_QOS_FROM_XML=1\nSET FASTRTPS_DEFAULT_PROFILES_FILE=path/to/ping.xml\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages Locally with pip (Console)\nDESCRIPTION: Instructs on installing a Python package from PyPI for the current user only, typically placing it in `~/.local/`. The `-U` flag ensures the package is upgraded if a previous version exists.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\npython3 -m pip install -U --user pyserial\n```\n\n----------------------------------------\n\nTITLE: Exporting Plugin Description File\nDESCRIPTION: This snippet uses the pluginlib_export_plugin_description_file command to export a plugin configuration file named 'my_robot_driver.xml'. This file describes the plugins provided by the package to pluginlib, allowing them to be discovered and loaded at runtime.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Code/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npluginlib_export_plugin_description_file(webots_ros2_driver my_robot_driver.xml)\n```\n\n----------------------------------------\n\nTITLE: Updating Rosdep Database\nDESCRIPTION: Updates the local cache of the rosdep database, which contains mappings of ROS package dependencies to system packages. This ensures rosdep can correctly identify and install dependencies for your system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Install-Dependencies.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ rosdep update\n```\n\n----------------------------------------\n\nTITLE: Run ROS 2 listener demo (bash)\nDESCRIPTION: This command runs the `listener` demo node from the `demo_nodes_cpp` package. It subscribes to a topic and prints the messages it receives, demonstrating basic communication within ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp listener\n```\n\n----------------------------------------\n\nTITLE: Running the camera image publisher with predefined images\nDESCRIPTION: Command to execute `cam2image` with parameter `burger_mode:=True`, which publishes predefined images instead of webcam feed, useful when no camera is available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nros2 run image_tools cam2image --ros-args -p burger_mode:=True\n```\n\n----------------------------------------\n\nTITLE: Persistently Enabling Loaned Messages (Linux Bash)\nDESCRIPTION: Appends the export command for ROS_DISABLE_LOANED_MESSAGES=0 to the user's .bashrc file. This makes the enabling of loaned messages persistent across new Bash shell sessions on Linux.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho \"export ROS_DISABLE_LOANED_MESSAGES=0\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Persistently Enabling Loaned Messages (macOS Bash)\nDESCRIPTION: Appends the export command for ROS_DISABLE_LOANED_MESSAGES=0 to the user's .bash_profile file. This makes the enabling of loaned messages persistent across new Bash shell sessions on macOS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Configure-ZeroCopy-loaned-messages.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\necho \"export ROS_DISABLE_LOANED_MESSAGES=0\" >> ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Adding rclpy initialization call in main() function for ROS 2 node startup in Python\nDESCRIPTION: Adds rclpy.init() as the first statement inside the main() function to initialize ROS 2 communication and resources, replacing ROS 1 node initialization steps.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndef main():\n    # Add this line\n    rclpy.init()\n```\n\n----------------------------------------\n\nTITLE: Force Output to stdout (Linux/macOS)\nDESCRIPTION: This command sets the `RCUTILS_LOGGING_USE_STDOUT` environment variable to `1`, forcing all log output to go to stdout. It applies to Linux and macOS systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nexport RCUTILS_LOGGING_USE_STDOUT=1\n```\n\n----------------------------------------\n\nTITLE: Replacing ROS 1 shutdown loop condition with rclpy.ok() API in Python\nDESCRIPTION: Substitutes the ROS 1 'while not rospy.is_shutdown()' loop condition with ROS 2's 'while rclpy.ok()' to detect process shutdown requests within the main publishing loop.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\nwhile rclpy.ok():\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages into a Virtual Environment (Console)\nDESCRIPTION: Demonstrates how to install Python packages from PyPI directly into the currently activated virtual environment using `pip`. This keeps the package dependencies isolated from the system or global ROS 2 Python installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-Python-Packages.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npython3 -m pip install gtsam pyserial… etc\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Publisher Node in CMake\nDESCRIPTION: CMake configuration for building the publisher node. It adds an executable target linked with ROS 2 libraries and sets up installation of the executable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.rst#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(talker src/publisher_lambda_function.cpp)\ntarget_link_libraries(talker PUBLIC rclcpp::rclcpp ${std_msgs_TARGETS})\n\ninstall(TARGETS\n  talker\n  DESTINATION lib/${PROJECT_NAME})\n\nament_package()\n```\n\n----------------------------------------\n\nTITLE: Building Code with Colcon\nDESCRIPTION: This snippet builds the ROS 2 code within the workspace using the `colcon build` command. The `--symlink-install` flag is included to enable symlinking. Includes a note about using the `--packages-skip` flag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/ros2_{DISTRO}/\n   colcon build --symlink-install\n```\n\n----------------------------------------\n\nTITLE: Updated a hack to avoid CMake warning with assimp 5.0.1 and older, applying it cross platforms\nDESCRIPTION: This change addresses CMake warnings with older versions of `assimp`, applying a cross-platform fix. Dependencies: CMake, Assimp.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_45\n\n\n\n----------------------------------------\n\nTITLE: Set Log File Name Prefix\nDESCRIPTION: This command runs the `talker` executable from the `demo_nodes_cpp` package and sets the log file name prefix to `filename` using the `--log-file-name` argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nros2 run demo_nodes_cpp talker --ros-args --log-file-name filename\n```\n\n----------------------------------------\n\nTITLE: Recording a Single ROS2 Topic\nDESCRIPTION: Records all the data published to the specified topic using `ros2 bag`. The recorded data is saved to a file in the current directory.  The command records data from the /turtle1/cmd_vel topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record /turtle1/cmd_vel\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 Timer to Periodically Publish Messages in C++\nDESCRIPTION: Shows how to create a wall timer that calls the publish_msg lambda every 1 second, enabling periodic message publication from the node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Single-Package-Define-And-Use-Interface.rst#_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\ntimer_ = this->create_wall_timer(1s, publish_msg);\n```\n\n----------------------------------------\n\nTITLE: Codespell Dictionary Example\nDESCRIPTION: These are examples of custom corrections that `codespell` should apply automatically.  The format is 'incorrect->correct'. This is helpful for common typos or project-specific abbreviations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\namnet->ament\ncolcn->colcon\nrosabg->rosbag\nrosdistroy->rosdistro\n```\n\n----------------------------------------\n\nTITLE: Setting Upstream Devel Branch in Bloom\nDESCRIPTION: Prompt for specifying the development branch in the upstream repository from which to determine the package version when using automatic version detection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nUpstream Devel Branch:\n   <vcs reference>\n      Branch in upstream repository on which to search for the version.\n      This is used only when version is set to ':{auto}'.\n   [None]:\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS UDP Receive Buffer Size\nDESCRIPTION: Sets the system-wide UDP receive buffer size on macOS to a larger value, which might be necessary for ROS2 demos involving large messages like images to prevent errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w net.inet.udp.recvspace=209715\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple ROS2 Topics with Custom Name\nDESCRIPTION: Records data published to multiple topics and specifies a custom file name for the rosbag. The command records data from /turtle1/cmd_vel and /turtle1/pose topics and names the bag file `subset`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 bag record -o subset /turtle1/cmd_vel /turtle1/pose\n```\n\n----------------------------------------\n\nTITLE: Finding composition install path in ROS 2 (Windows)\nDESCRIPTION: This command retrieves the installation prefix of the `composition` package in a Windows environment. It is used as a step in determining the full paths to the component libraries for `dlopen_composition`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg prefix composition\n```\n\n----------------------------------------\n\nTITLE: Linking C++ API Docs in index.rst (RST)\nDESCRIPTION: This snippet shows how to add a link to the autogenerated C++ API documentation in the index.rst file. It enables the API docs to appear in the table of contents.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n   .. toctree::\n      :maxdepth: 2\n\n      C++ API Docs <generated/index>\n```\n\n----------------------------------------\n\nTITLE: ROS2 Python tf2 Wrappers with Twist Interpolator Support\nDESCRIPTION: Provides Python bindings for tf2 in ROS2, including support for twist interpolators. Dependencies include ROS2 tf2_py package. It facilitates transformation operations and ensures consistent ROS2 Python API functionality.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_66\n\nLANGUAGE: Python\nCODE:\n```\n# Enable twist interpolator support in tf2 Python bindings\n# Provides Python interfaces for ROS2 tf2 transformations\n\n```\n\n----------------------------------------\n\nTITLE: Running RQt\nDESCRIPTION: This command launches the RQt GUI, allowing users to select and run available plugins on the system. It provides a centralized interface for managing various ROS 2 tools within dockable windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-RQt.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ rqt\n```\n\n----------------------------------------\n\nTITLE: Running pendulum_demo\nDESCRIPTION: This snippet demonstrates how to run the pendulum_demo executable.  It redirects the standard output to a file named output.txt. The command may require sudo privileges depending on the user's permissions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Real-Time-Programming.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npendulum_demo > output.txt\n```\n\n----------------------------------------\n\nTITLE: Fixing description for '--ignore-leaf-topics'\nDESCRIPTION: This change fixes a description error in ros2bag record, likely for the '--ignore-leaf-topics' parameter.  This improves the user's understanding of that functionality.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Cloning Fast DDS and RMW Repositories in Bash\nDESCRIPTION: Clones the `rmw_fastrtps` and `Fast-DDS` repositories into the `src` directory of a ROS 2 workspace (`ros2_ws`). Replace `{REPOS_FILE_BRANCH}` with the appropriate branch name corresponding to the ROS 2 distribution. Assumes the current directory is `ros2_ws/src`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-eProsima-Fast-DDS.rst#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd ros2_ws/src\ngit clone https://github.com/ros2/rmw_fastrtps ros2/rmw_fastrtps -b {REPOS_FILE_BRANCH}\ngit clone https://github.com/eProsima/Fast-DDS eProsima/fastrtps\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files (Windows)\nDESCRIPTION: This command calls the generated setup batch file in a Windows environment to make the built ROS 2 packages and commands available in the current terminal session.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ncall install/setup.bat\n```\n\n----------------------------------------\n\nTITLE: CMake Condition Update for ament_index_has_resource\nDESCRIPTION: Updates CMake condition to properly handle the return value of `ament_index_has_resource`. The function now returns the prefix path or FALSE, so the condition needs to check for a string value.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nament_index_has_resource(var ...)\nif(${var})\n```\n\n----------------------------------------\n\nTITLE: Revert \"Support loading meshes other than .mesh and .stl with package URIs\nDESCRIPTION: This reverts changes to support loading meshes beyond .mesh and .stl with package URIs. Dependencies depend on those specific features.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Shutdown ros2doctor hello when ctrl-c is received\nDESCRIPTION: This ensures the `ros2doctor hello` command shuts down when Ctrl+C is received, enabling graceful termination.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Running Turtle Teleop Control in ROS2\nDESCRIPTION: Command to start the turtle teleop node that allows controlling the first turtle with keyboard arrow keys. The second turtle will follow the first one using TF2 transformations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Py.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Data Generator Node\nDESCRIPTION: Executes the custom `data_generator_node` that was added as a console script entry point in `setup.py`. This node will start generating data and writing it to a bag file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nros2 run bag_recorder_nodes_py data_generator_node\n```\n\n----------------------------------------\n\nTITLE: Identifying Format 1 `package.xml` (Explicit Format Attribute)\nDESCRIPTION: Presents another example of a format 1 `<package>` tag, this time explicitly declaring `format=\"1\"`. Files with this tag also need migration to format 2 for ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<package format=\"1\">\n```\n\n----------------------------------------\n\nTITLE: Update status message by removing colon or adjust colon position\nDESCRIPTION: This adjusts how status messages are displayed by modifying the location or removal of colons. Dependencies are the status message display. No specific dependencies are stated.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Building ROS 2 Package with colcon (Windows)\nDESCRIPTION: This command uses the `colcon build` tool with the `--merge-install` option to build the specific ROS 2 package `bag_reader_node_py` for Windows.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Reading-From-A-Bag-File-Python.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --merge-install --packages-select bag_reader_node_py\n```\n\n----------------------------------------\n\nTITLE: Proxy File readme_include.md (Markdown)\nDESCRIPTION: This snippet shows a proxy markdown file that includes the original README.md, which preserves relative image paths and avoids breaking links.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Documenting-a-ROS-2-Package.rst#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n    ```{include} ../README.md\n    :relative-images:\n    ```\n```\n\n----------------------------------------\n\nTITLE: Processing Feedback in ROS 2 Action Client\nDESCRIPTION: A callback function for handling feedback messages from a Fibonacci action server. It extracts the partial_sequence field from the feedback message and prints it to the screen.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef feedback_callback(feedback_msg):\n    feedback = feedback_msg.feedback\n    self.get_logger().info('Received feedback: {0}'.format(feedback.partial_sequence))\n```\n\n----------------------------------------\n\nTITLE: Filter topics in drop down menu\nDESCRIPTION: This implements filtering for topics in the dropdown menu. It improves usability when multiple topics are available. The dependency is the user interface, rviz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Setting ROS 2 Parameter\nDESCRIPTION: Uses the `ros2 param set` command to change the value of the parameter `an_int_param` on the node `node_with_parameters` to `43`. This action triggers the parameter change callback in the running node.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nros2 param set node_with_parameters an_int_param 43\n```\n\n----------------------------------------\n\nTITLE: Downloading the turtle_tf2_message_filter.cpp file in Windows\nDESCRIPTION: Console commands to download the turtle_tf2_message_filter.cpp file from the ROS2 geometry tutorials repository using curl in Windows command prompt or PowerShell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/turtle_tf2_message_filter.cpp -o turtle_tf2_message_filter.cpp\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_cpp/src/turtle_tf2_message_filter.cpp -o turtle_tf2_message_filter.cpp\n```\n\n----------------------------------------\n\nTITLE: Setting ROS_DOMAIN_ID Environment Variable on Linux\nDESCRIPTION: This command sets a unique ROS domain ID for your ROS 2 nodes, which can be made persistent by adding it to your shell startup script.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ export ROS_DOMAIN_ID=<your_domain_id>\n```\n\n----------------------------------------\n\nTITLE: Updating package template for include directories\nDESCRIPTION: This updates the package template in `ros2pkg` for the new include directories structure, likely related to changes in ROS2 build system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: Update maintainers\nDESCRIPTION: This entry describes updates to the maintainers list for each rviz package. This is a routine task to keep the authorship and contact information up to date. No dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Canceling a goal with teleop node\nDESCRIPTION: Using teleop controls to send a goal to rotate the turtle and then cancel it with the 'F' key, demonstrating goal cancellation in ROS 2 actions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nUse arrow keys to move the turtle.\nUse G|B|V|C|D|E|R|T keys to rotate to absolute orientations. 'F' to cancel a rotation.\n```\n\n----------------------------------------\n\nTITLE: Example of Deprecated `<run_depend>` Tag (Format 1)\nDESCRIPTION: Shows the usage of the `<run_depend>` tag in `package.xml` format 1 to declare a runtime dependency named 'foo'. This tag is disallowed in format 2 and must be replaced.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<run_depend>foo</run_depend>\n```\n\n----------------------------------------\n\nTITLE: Defining a Fibonacci Action in ROS 2\nDESCRIPTION: Definition of a Fibonacci action that calculates Fibonacci sequences. It takes an order as a request, returns the complete sequence as a result, and provides partial sequences as feedback.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nint32 order\n---\nint32[] sequence\n---\nint32[] partial_sequence\n```\n\n----------------------------------------\n\nTITLE: Passing ROS Arguments to Node Actions - Python Launch File\nDESCRIPTION: Shows how to provide ROS-specific node arguments directly to a node in a Python launch file using the ros_arguments parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfrom launch import LaunchDescription\nimport launch_ros.actions\n\ndef generate_launch_description():\n    return LaunchDescription([\n        launch_ros.actions.Node(\n            package='demo_nodes_cpp',\n            executable='talker',\n            ros_arguments=['--log-level', 'debug'],\n        ),\n    ])\n```\n\n----------------------------------------\n\nTITLE: Removing ament_target_dependencies\nDESCRIPTION: This involves removing `ament_target_dependencies` from the `robot_state_publisher` package.  This likely simplifies the build process or removes an unnecessary dependency.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Building the documentation (Sphinx)\nDESCRIPTION: This command builds the Sphinx documentation for the current branch.  It generates HTML files from the reStructuredText source files. The command should be run from the top-level directory of the repository.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Running Standalone ROS2 Image View Node (Inter-Process)\nDESCRIPTION: Executes a standalone ROS2 image view node separately from the main image pipeline demo to observe inter-process communication behavior and compare it with intra-process performance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nros2 run intra_process_demo image_view_node\n```\n\n----------------------------------------\n\nTITLE: Downloading the Kernel Source\nDESCRIPTION: Downloads the specified Linux kernel source archive using wget. Requires wget to be installed on the system and a network connection to the kernel.org mirror.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n   $ wget https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.4.78.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Updated CMake Condition for ament_index_has_resource\nDESCRIPTION: Updates the CMake condition to ensure it considers a string value as TRUE. This is necessary because `ament_index_has_resource` now returns a string (prefix path) or FALSE.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(var)\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Installation\nDESCRIPTION: This command verifies that Docker is installed and running correctly by attempting to run the 'hello-world' container. Prerequisites include a properly installed and configured Docker environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Launching a ROS 2 Listener with Default Discovery\nDESCRIPTION: Launch a standard listener node that uses the default Simple Discovery Protocol and will not connect to nodes using the Discovery Server.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp listener --ros-args --remap __node:=simple_listener\n```\n\n----------------------------------------\n\nTITLE: Parameter Substitution in XML Launch File\nDESCRIPTION: Shows how to use the new ParameterSubstitution to substitute the value of a parameter set previously in launch with the SetParameter action.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_12\n\nLANGUAGE: XML\nCODE:\n```\n<launch>\n  <set_parameter name=\"foo\" value=\"bar\" />\n  <log message=\"Parameter foo has value $(param foo)\" />\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Sourcing Environment Setup\nDESCRIPTION: This command sources the local setup file, configuring the environment variables to use the just-built ROS 2 installation, assuming you are using bash. It instructs the user to replace \".bash\" with the correct shell if they are not using bash.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Replace \".bash\" with your shell if you're not using bash\n   # Possible values are: setup.bash, setup.sh, setup.zsh\n   . ~/ros2_{DISTRO}/install/local_setup.bash\n```\n\n----------------------------------------\n\nTITLE: Using Modern CMake Target Include Directories\nDESCRIPTION: Demonstrates how to use target_include_directories() with modern CMake targets, replacing the older include_directories() approach.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(my_library PUBLIC\n   \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n   \"$<INSTALL_INTERFACE:include/${PROJECT_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: rmw_connext_cpp Transport Compatibility Warning Example\nDESCRIPTION: Example of a typical warning message displayed in logs when removing the forced property 'dds.transport.use_510_compatible_locator_kinds' leads to incompatibility between RTI Connext DDS participants in different versions (e.g., Foxy vs Eloquent). The message alerts about transport class ID mismatches affecting communication over shared transport such as 'shmem'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPRESParticipant_checkTransportInfoMatching:Warning: discovered remote participant 'RTI Administration Console' using the 'shmem' transport with class ID 16777216.\\nThis class ID does not match the class ID 2 of the same transport in the local participant 'talker'.\\nThese two participants will not communicate over the 'shmem' transport.\\nCheck the value of the property 'dds.transport.use_510_compatible_locator_kinds' in the local participant.\\nSee https://community.rti.com/kb/what-causes-error-discovered-remote-participant for additional info.\n```\n\n----------------------------------------\n\nTITLE: Copying Cryptographic Keys Between Machines Using SCP in Bash and Batch\nDESCRIPTION: This snippet covers copying the 'talker' program's security keys from machine 'Alice' to 'Bob' using the SCP command over SSH, ensuring that Bob's keystore contains necessary certificates and keys for authenticated encrypted communication. The commands differ slightly for Linux/macOS and Windows, reflecting typical file system paths and shell usage. The key dependency is the prior existence of the talker keys in 'demo_keystore' on Alice. The input consists of the key files in Alice's keystore, and the output is their secure replication on Bob's keystore directory. A warning notes that sharing the entire keystore might raise security concerns in deployment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Security-on-Two.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/sros2_demo/demo_keystore\nscp -r talker USERNAME@Bob:~/sros2_demo/demo_keystore\n```\n\nLANGUAGE: bat\nCODE:\n```\ncd C:\\dev\\ros2\\sros2_demo\\demo_keystore\nscp -r talker USERNAME@Bob:/dev/ros2/sros2_demo/demo_keystore\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Dependencies with rosdep\nDESCRIPTION: This code snippet initializes and updates rosdep, then uses it to install dependencies required for building ROS 2. It ignores source code dependencies and skips certain keys like 'fastcdr', 'rti-connext-dds-7.3.0' and 'urdfdom_headers'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo rosdep init\nrosdep update\nrosdep install --from-paths src --ignore-src -y --skip-keys \"fastcdr rti-connext-dds-7.3.0 urdfdom_headers\"\n```\n\n----------------------------------------\n\nTITLE: C++ Program Violating Coding Standards\nDESCRIPTION: This C++ code snippet demonstrates a program that violates coding standards, including missing copyright, trailing whitespace, tabs instead of spaces, and missing spaces around operators.  These violations are detected by `ament_cpplint`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Ament-Lint-For-Clean-Code.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nint main()\n{\n  int a = 10;\n  int b = 10;\n  int c = 0;/*<trailing whitespace>*/\n  if( a == b)  {/*<tab>*/      c=a;}/*<trailing whitespace>*/\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Install Cyclone DDS dependencies (bash)\nDESCRIPTION: This command installs the necessary dependencies for Cyclone DDS using rosdep.  It assumes that `ros2_ws/src` contains the source code for Cyclone DDS and rmw_cyclonedds. The '-i' flag tells rosdep to try to install dependencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nrosdep install --from src -i\n```\n\n----------------------------------------\n\nTITLE: Configuring Node with Substitutions in XML Launch\nDESCRIPTION: This XML snippet shows how to enable launch substitutions in parameter files using an XML launch file. It defines a node and uses the `<param>` tag to load parameters from a YAML file. The `allow_substs` attribute on the `<param>` tag is set to `true` to enable substitution evaluation, similar to the Python example.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Galactic-Geochelone.rst#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<launch>\n  <node pkg=\"demo_nodes_cpp\" exec=\"parameter_blackboard\">\n    <param from=\"parameter_file_with_substitutions.yaml\" allow_substs=\"true\"/>\n  </node>\n</launch>\n```\n\n----------------------------------------\n\nTITLE: Launching Dummy Robot Demo using Debian Package in ROS 2 (Bash)\nDESCRIPTION: Installs the dummy_robot_bringup package via apt for the current ROS 2 distribution, then launches the dummy robot bringup launch file. Requires ROS 2 installed and ROS_DISTRO defined. Input: bash commands; Output: running robot demo with simulated nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/dummy-robot-demo.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install ros-${ROS_DISTRO}-dummy-robot-bringup\nros2 launch dummy_robot_bringup dummy_robot_bringup_launch.py\n```\n\n----------------------------------------\n\nTITLE: Check for Multicast Flag using ifconfig\nDESCRIPTION: This command uses `ifconfig` to check if the MULTICAST flag is enabled on a specific network interface (eno1 in this example).  The presence of the MULTICAST flag indicates that the interface is configured to send and receive multicast traffic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neno1: flags=4163<...,MULTICAST>\n   ...\n```\n\n----------------------------------------\n\nTITLE: Client Node Output Log with Asynchronous QoS\nDESCRIPTION: Shows the console output from a ROS2 client node configured with asynchronous publication mode. The logs display the client's request and response handling process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1612977404.805799037] [ping_client]: Sending request\n[INFO] [1612977404.825473835] [ping_client]: Response received\n```\n\n----------------------------------------\n\nTITLE: Enable Line Buffered Console Output (Windows)\nDESCRIPTION: This command sets the `RCUTILS_LOGGING_BUFFERED_STREAM` environment variable to `1`, enabling line buffering for console output. This applies to Windows systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nset \"RCUTILS_LOGGING_BUFFERED_STREAM=1\"\n```\n\n----------------------------------------\n\nTITLE: Install ROS 2 Dependencies using Rosdep\nDESCRIPTION: This command initializes rosdep, updates the rosdep database, and then installs the necessary dependencies for ROS 2 from the extracted binary package. It ignores source code dependencies and skips certain keys related to specific DDS implementations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rosdep init\nrosdep update\nrosdep install --from-paths ~/ros2_{DISTRO}/ros2-linux/share --ignore-src -y --skip-keys \"cyclonedds fastcdr fastrtps iceoryx_binding_c rti-connext-dds-7.3.0 urdfdom_headers\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Webots Plugin in URDF (Python Style)\nDESCRIPTION: URDF file content (`my_robot.urdf`) used to declare the `MyRobotDriver` plugin for a Python-based ROS 2 package setup. The `type` attribute specifies the Python module path for `webots_ros2_driver` to load the plugin class.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n// Content of Code/my_robot_python.urdf\n```\n\n----------------------------------------\n\nTITLE: Modernizing Boost Shared Pointers to C++ Standard Library\nDESCRIPTION: This snippet guides converting boost shared pointers to std::shared_ptr by updating include directives and replacing namespace prefixes. Suggests using 'using' aliases for clearer code.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n* Replace ``#include <boost/shared_ptr.hpp>`` with ``#include <memory>``\n* Replace ``boost::shared_ptr`` with ``std::shared_ptr``\n* Use ``using`` instead of ``typedef`` for type aliases\n```\n\n----------------------------------------\n\nTITLE: Accept Xcode License Agreement\nDESCRIPTION: This command accepts the terms and conditions of Xcode by running `xcodebuild` with the `-license accept` flag. This is necessary after installing Xcode or updating the command line tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Installation-Troubleshooting.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo xcodebuild -license accept\n```\n\n----------------------------------------\n\nTITLE: Passing ROS Arguments to Node Actions - YAML Launch File\nDESCRIPTION: Shows how to provide ROS-specific node arguments directly to a node in a YAML launch file without needing to use the --ros-args flag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nlaunch:\n- node:\n    pkg: demo_nodes_cpp\n    exec: talker\n    ros_args: '--log-level debug'\n```\n\n----------------------------------------\n\nTITLE: Set C++ Standard - CMake\nDESCRIPTION: This CMake code snippet sets the C++ standard to 17 and adds compiler options for warnings and extra checks if the compiler is GCC or Clang.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif()\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  add_compile_options(-Wall -Wextra -Wpedantic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: setup.cfg configuration for ROS2 Python\nDESCRIPTION: This configuration file defines the installation directories for scripts in a Python ROS 2 package.  <package-name> should be replaced with the name of your package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Developing-a-ROS-2-Package.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n[develop]\nscript_dir=$base/lib/<package-name>\n[install]\ninstall_scripts=$base/lib/<package-name>\n```\n\n----------------------------------------\n\nTITLE: Creating a ROS 2 rate instance with node.create_rate() for controlling loop frequency in Python\nDESCRIPTION: Replaces rospy.Rate instance creation with node.create_rate() API for timing the publish loop at 10 Hz frequency in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nrate = node.create_rate(10)  # 10hz\n```\n\n----------------------------------------\n\nTITLE: Removing parentheses from assert statement\nDESCRIPTION: This removes parentheses from an assert statement in `ros2topic`. This simplifies code that uses an `assert` to verify conditions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Running the Parameter Blackboard Demo Node\nDESCRIPTION: Console command to run the parameter_blackboard demo node. This node will be used as a remote node whose parameters will be monitored by the parameter event handler.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run demo_nodes_cpp parameter_blackboard\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS2 Setup Files - Linux/macOS\nDESCRIPTION: Command to source the setup files after building a ROS2 package on Linux or macOS systems, making the built packages available in the current terminal.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ source install/setup.bash\n```\n\n----------------------------------------\n\nTITLE: Displaying pytest output while running colcon tests\nDESCRIPTION: Command to show the test output directly in the console while running tests with colcon. The event-handlers flag enables console output during test execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Testing/Python.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon test --event-handlers console_cohesion+\n```\n\n----------------------------------------\n\nTITLE: Action Definition Format in ROS 2\nDESCRIPTION: The general format for defining actions in ROS 2. Actions consist of three parts: request, response, and feedback, each separated by three dashes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Basic/About-Interfaces.rst#_snippet_9\n\nLANGUAGE: code\nCODE:\n```\n<request_type> <request_fieldname>\n---\n<response_type> <response_fieldname>\n---\n<feedback_type> <feedback_fieldname>\n```\n\n----------------------------------------\n\nTITLE: Adding Message Generation Dependencies in package.xml\nDESCRIPTION: Shows the required dependencies in package.xml for packages that generate ROS messages, services, or actions in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<buildtool_depend>rosidl_default_generators</buildtool_depend>\n<exec_depend>rosidl_default_runtime</exec_depend>\n<member_of_group>rosidl_interface_packages</member_of_group>\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 Intra-Process Cyclic Pipeline Demo\nDESCRIPTION: Executes the ROS2 demo application that sets up a cyclic pipeline of nodes within a single process, demonstrating zero-copy communication with integer messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Intra-Process-Communication.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 run intra_process_demo cyclic_pipeline\n```\n\n----------------------------------------\n\nTITLE: Listing ROS2 Services\nDESCRIPTION: Lists all available services in the ROS 2 system. Used to see the available services for recording and replay.  Used to confirm the services are available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 service list\n```\n\n----------------------------------------\n\nTITLE: Setting ROS2 Parameter via Command Line\nDESCRIPTION: Command to set a parameter named 'my_parameter' with value 'earth' for a node named '/minimal_param_node' using the ros2 param set command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 param set /minimal_param_node my_parameter earth\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for Redundant Discovery Servers in Linux\nDESCRIPTION: Set the ROS_DISCOVERY_SERVER environment variable to use multiple discovery servers in Linux, providing redundancy.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ export ROS_DISCOVERY_SERVER=\"127.0.0.1:11811;127.0.0.1:11888\"\n```\n\n----------------------------------------\n\nTITLE: Configuring console output in ROS2 launch file\nDESCRIPTION: Code snippet showing how to ensure node output is printed to the console by setting the output and emulate_tty parameters.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\noutput=\"screen\",\nemulate_tty=True,\n```\n\n----------------------------------------\n\nTITLE: Launching turtlesim nodes for action demonstration\nDESCRIPTION: Commands to start the turtlesim node and its teleoperation node, enabling control of the turtle and testing action behaviors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Actions/Understanding-ROS2-Actions.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtlesim_node\n```\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run turtlesim turtle_teleop_key\n```\n\n----------------------------------------\n\nTITLE: Playing Timer-Generated ROS 2 Bag\nDESCRIPTION: Plays back the ROS 2 bag file named `timed_synthetic_bag` created by the `data_generator_node`. Messages contained within will be published on their respective topics.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nros2 bag play timed_synthetic_bag\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py with entry points for a ROS 2 Python package\nDESCRIPTION: Snippet showing the setup.py configuration for the Python parameters package, including the entry point for the node executable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nmaintainer='YourName',\nmaintainer_email='you@email.com',\ndescription='Python parameter tutorial',\nlicense='Apache-2.0',\n```\n\nLANGUAGE: Python\nCODE:\n```\nentry_points={\n    'console_scripts': [\n        'minimal_param_node = python_parameters.python_parameters_node:main',\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Message 'Num.msg'\nDESCRIPTION: Defines a simple custom message 'Num.msg' with a 64-bit integer field 'num'. Used to transfer a single integer value between ROS2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nint64 num\n```\n\n----------------------------------------\n\nTITLE: Displaying a Custom Message Interface with 'ros2 interface show'\nDESCRIPTION: Command to show details of 'tutorial_interfaces/msg/Num', verifying correct message definition with fields listed as specified.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 interface show tutorial_interfaces/msg/Num\n```\n\n----------------------------------------\n\nTITLE: Building the package\nDESCRIPTION: This command builds the specified ROS2 package using Colcon.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select learning_tf2_py\n```\n\n----------------------------------------\n\nTITLE: Sourcing ROS 2 Setup Files on Windows\nDESCRIPTION: This snippet guides how to source the Windows batch script for ROS 2 in command line to set up the environment for ROS 2 development.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n$ call C:\\dev\\ros2\\local_setup.bat\n```\n\n----------------------------------------\n\nTITLE: Viewing CA X.509 Certificate with OpenSSL - bash\nDESCRIPTION: This snippet demonstrates how to inspect the content of a Certificate Authority (CA) X.509 certificate using the OpenSSL command line tool in a bash shell. It requires OpenSSL to be installed and assumes that 'ca.cert.pem' exists in the specified directory. Usage: execute the commands to change to the public keystore directory and display the certificate details in human-readable format. Output includes the certificate's subject, issuer, validity period, public key, signature algorithm, and extensions. No modification of files is performed; this is a read-only operation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/The-Keystore.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/sros2_demo/demo_keystore/public\nopenssl x509 -in ca.cert.pem -text -noout\n```\n\n----------------------------------------\n\nTITLE: Updating setup.py Metadata (Python)\nDESCRIPTION: Modifies the `setup.py` file to include the correct maintainer, email, description, and license information, matching the data provided in the `package.xml` file for package registration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nmaintainer='YourName',\n    maintainer_email='you@email.com',\n    description='Python parameter tutorial',\n    license='Apache-2.0',\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Environment Variables\nDESCRIPTION: These commands set the CC and CXX environment variables to use the Clang compiler for C and C++ compilation, respectively.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport CC=clang\nexport CXX=clang++\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Kernel Source\nDESCRIPTION: Changes the current working directory to the unpacked Linux kernel source directory. This is necessary to apply the RT-Preempt patch.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n   $ cd linux-5.4.78/\n```\n\n----------------------------------------\n\nTITLE: Sourcing the setup file (PowerShell)\nDESCRIPTION: This command sources the setup file to properly configure the environment for ROS2, specifically for use within PowerShell.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ call install\\setup.bat\n```\n\n----------------------------------------\n\nTITLE: Add ament_cmake_ros Buildtool Dependency - XML\nDESCRIPTION: This XML snippet demonstrates how to add a dependency on ament_cmake_ros in the package.xml file for a ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n    <buildtool_depend>ament_cmake_ros</buildtool_depend>\n```\n\n----------------------------------------\n\nTITLE: reset current line width when calculating text width\nDESCRIPTION: This change resets the current line width when calculating the width of text for correct rendering. Dependencies: rviz rendering.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: Running dlopen composition in ROS 2 (macOS)\nDESCRIPTION: This command executes a dlopen composition on macOS, specifying paths to `.dylib` libraries for components.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Composition.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run composition dlopen_composition `ros2 pkg prefix composition`/lib/libtalker_component.dylib `ros2 pkg prefix composition`/lib/liblistener_component.dylib\n```\n\n----------------------------------------\n\nTITLE: Run Component Container\nDESCRIPTION: This command starts a ROS 2 component container. It is necessary to load components into it.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nros2 run rclcpp_components component_container\n```\n\n----------------------------------------\n\nTITLE: Using the let Tag in ROS 2 Launch Files\nDESCRIPTION: Shows how to use the let tag, which replaces the arg tag with a value attribute in ROS 2 launch files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Launch-Files.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<let name=\"foo\" value=\"asd\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring setup.py for ROS 2 ament_python - Python\nDESCRIPTION: This code demonstrates a simplified setup.py for ROS 2, removing any Catkin/catkin_pkg dependencies. It manually assigns all package metadata (name, version, author/maintainer, license, description, etc.) and defines install_requires, zip_safe, packages, and package_dir. It enables standard setuptools-based installation compatible with ament_python and Colcon. Inputs: static strings for metadata; outputs: installed Python ROS 2 package. Includes support for installing data files (such as package.xml and marker files) when adding the data_files argument.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    name=package_name,\n    version='1.0.0',\n    install_requires=['setuptools'],\n    zip_safe=True,\n    packages=['talker_py'],\n    package_dir={'': 'src'},\n    maintainer='Brian Gerkey',\n    maintainer_email='gerkey@example.com',\n    description='The talker_py package',\n    license='BSD',\n)\n\n```\n\nLANGUAGE: python\nCODE:\n```\ndata_files=[\n    ('share/ament_index/resource_index/packages',\n        ['resource/' + package_name]),\n    ('share/' + package_name, ['package.xml']),\n],\n\n```\n\n----------------------------------------\n\nTITLE: Listing Kernel Packages\nDESCRIPTION: Lists the generated kernel debian packages in the parent directory. Used to verify the successful completion of the kernel build process.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n   $ ls ../*deb\n```\n\n----------------------------------------\n\nTITLE: Checking ROS 2 Environment Variables on Windows\nDESCRIPTION: This command searches all environment variables for 'ROS' entries to verify the correct setup of ROS 2 environment variables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Configuring-ROS2-Environment.rst#_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\n$ set | findstr -i ROS\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for ROS 2\nDESCRIPTION: Sets the minimum required CMake version for ROS 2 compatibility. For ROS Humble, version 3.14.4 is the minimum recommended version.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14.4)\n```\n\n----------------------------------------\n\nTITLE: Setting Discovery Server Environment Variable in Linux\nDESCRIPTION: Configure the ROS_DISCOVERY_SERVER environment variable to point to the discovery server's IP and port in Linux.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ export ROS_DISCOVERY_SERVER=127.0.0.1:11811\n```\n\n----------------------------------------\n\nTITLE: Building with Clang and Forcing CMake Reconfiguration\nDESCRIPTION: This command rebuilds the ROS 2 workspace using colcon, forcing CMake to reconfigure and use the newly specified Clang compiler.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncolcon build --cmake-force-configure\n```\n\n----------------------------------------\n\nTITLE: Enabling EPEL and CRB repositories for ROS 2 on RHEL\nDESCRIPTION: This snippet enables the Extra Packages for Enterprise Linux (EPEL) and CodeReady Builder (CRB, formerly PowerTools) repositories using the dnf package manager. These repositories provide dependencies required for ROS 2 installation on RHEL. The `-y` flag automatically confirms the installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install 'dnf-command(config-manager)' epel-release -y\nsudo dnf config-manager --set-enabled crb\n```\n\n----------------------------------------\n\nTITLE: Flow Style YAML Output for ros2 topic echo\nDESCRIPTION: Illustrates the compact, single-line YAML format generated by `ros2 topic echo` when the `--flow-style` argument is used. This style uses curly braces `{}` for mappings and square brackets `[]` for sequences.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ntransforms: [{header: {stamp: {sec: 1651172841, nanosec: 433705575}, frame_id: single_rrbot_link3}, child_frame_id: single_rrbot_camera_link, transform: {translation: {x: 0.05, y: 0.0, z: 0.9}, rotation: {x: 0.0, y: 0.0, z: 0.0, w: 1.0}}}]\n```\n\n----------------------------------------\n\nTITLE: Running the Compiled ROS2 Action Client Node in Console\nDESCRIPTION: This snippet provides the command to run the compiled ROS2 action client executable using the ROS2 CLI tool. It requires that the ROS2 workspace is sourced and that an action server is already running in a separate terminal. This command executes the client node and begins interaction with the server, displaying logged messages for goal acceptance, feedback, and the final result. Inputs come from the server; outputs are printed logs.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Cpp.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run custom_action_cpp fibonacci_action_client\n```\n\n----------------------------------------\n\nTITLE: Creating Keystore Directory on Remote Machine Using Bash and Batch\nDESCRIPTION: This snippet demonstrates how to create an empty keystore directory on the remote machine 'Bob' for storing cryptographic keys. The commands are tailored for Linux, macOS (bash shell), and Windows (batch shell) environments, using SSH to connect and execute directory creation commands. This step is prerequisite for securing ROS 2 communications by initializing a keystore location. Dependencies include SSH access to machine Bob. No parameters are required, and the output is an empty directory prepared for key storage.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Security-on-Two.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh Bob\nmkdir ~/sros2_demo\nexit\n```\n\nLANGUAGE: bat\nCODE:\n```\nssh Bob\nmd C:\\dev\\ros2\\sros2_demo\nexit\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Build Dependencies - Console\nDESCRIPTION: Installs various build dependencies including pip, rosdep, and colcon via apt. Also initializes rosdep and updates dependency definitions for the given ROS distribution. Required for successful building and dependency resolution of ROS 2 packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo apt install python3-pip python3-rosdep python3-colcon-common-extensions\nsudo rosdep init && rosdep update\nrosdep install --from-paths src --ignore-src --rosdistro {DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Run ROS2 node executable\nDESCRIPTION: This command executes the 'minimal_param_node' executable from the 'cpp_parameters' package. This starts the ROS2 node, which should output \"Hello world!\" every second, based on the parameter's default value.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nros2 run cpp_parameters minimal_param_node\n```\n\n----------------------------------------\n\nTITLE: Installing webots_ros2 via APT Package Manager - Console\nDESCRIPTION: Installs the released webots_ros2 ROS 2 package using apt-get. Requires a compatible ROS 2 distro and root privileges. Replace {DISTRO} with your ROS distribution codename (e.g., 'humble' or 'foxy'). The command pulls all dependencies and sets up the package for immediate use.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-get install ros-{DISTRO}-webots-ros2\n```\n\n----------------------------------------\n\nTITLE: Running the Executable\nDESCRIPTION: Runs the executable 'my_node' within the 'my_package' package using the 'ros2 run' command. Requires the ROS2 environment to be sourced.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run my_package my_node\n```\n\n----------------------------------------\n\nTITLE: Fixing Variable Name in ament_export_libraries.cmake\nDESCRIPTION: Fix for a variable name in the ament_export_libraries.cmake file in the ament_cmake_export_libraries package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nFix variable name in ament_export_libraries.cmake\n```\n\n----------------------------------------\n\nTITLE: Running a ROS 2 Service Node\nDESCRIPTION: Launches the service node which will wait to receive requests from clients.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 run py_srvcli service\n```\n\n----------------------------------------\n\nTITLE: Building the Bag Recorder Package\nDESCRIPTION: Command to build the bag_recorder_nodes package using colcon build system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-CPP.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ colcon build --packages-select bag_recorder_nodes\n```\n\n----------------------------------------\n\nTITLE: Launching the demo\nDESCRIPTION: This command launches the turtle broadcaster demo using the specified launch file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 launch learning_tf2_py turtle_tf2_fixed_frame_demo_launch.py\n```\n\n----------------------------------------\n\nTITLE: In-text code formatting in reStructuredText\nDESCRIPTION: This snippet shows how to format in-text code using backticks in reStructuredText.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_21\n\nLANGUAGE: rst\nCODE:\n```\nIn-text code can be formatted using ``backticks`` for showing ``highlighted`` code.\n```\n\n----------------------------------------\n\nTITLE: Set Temporary rmem_max Kernel Parameter - Linux Bash\nDESCRIPTION: This command temporarily sets the `net.core.rmem_max` kernel parameter to 2147483647 bytes (2GB). This parameter defines the maximum size of the receive buffer for a socket in the Linux kernel. Increasing it is a solution for Cyclone DDS when dealing with large messages that are not delivered reliably.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/DDS-tuning.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w net.core.rmem_max=2147483647\n```\n\n----------------------------------------\n\nTITLE: Running the image display node\nDESCRIPTION: Command to execute the ROS 2 node `showimage` from the `image_tools` package, which subscribes to image topics and displays the incoming images on screen.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nros2 run image_tools showimage\n```\n\n----------------------------------------\n\nTITLE: Remove catkin Buildtool Dependency\nDESCRIPTION: This xml snippet shows how to remove catkin buildtool dependency from `package.xml`.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_16\n\nLANGUAGE: null\nCODE:\n```\n<!-- delete this -->\n<buildtool_depend>catkin</buildtool_depend>`\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Action Client on macOS\nDESCRIPTION: Command to run the Fibonacci action client Python script on a macOS system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ python3 fibonacci_action_client.py\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Action Client on Windows\nDESCRIPTION: Command to run the Fibonacci action client Python script on a Windows system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Writing-an-Action-Server-Client/Py.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ python fibonacci_action_client.py\n```\n\n----------------------------------------\n\nTITLE: Configure ROS_DISCOVERY_SERVER for Single Server Partition (Talker 2 - Linux)\nDESCRIPTION: Sets the `ROS_DISCOVERY_SERVER` environment variable on Linux to connect 'Talker 2' to only Server 1 for the partition example.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nexport ROS_DISCOVERY_SERVER=\"127.0.0.1:11811\"\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 logging demo using Bash\nDESCRIPTION: Shows the command to run the ROS 2 logging demo executable named 'logging_demo_main' using ros2 run. This demo showcases different log calls and logger severity configurations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Enable Line Buffered Console Output (Linux/macOS)\nDESCRIPTION: This command sets the `RCUTILS_LOGGING_BUFFERED_STREAM` environment variable to `1`, enabling line buffering for console output. This applies to Linux and macOS systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nexport RCUTILS_LOGGING_BUFFERED_STREAM=1\n```\n\n----------------------------------------\n\nTITLE: Migrating get_actual_qos Usage in rclcpp C++ API\nDESCRIPTION: This C++ snippet demonstrates how to adapt existing ROS 2 code from the Dashing release to the Eloquent Elusor release after an API change. The method get_actual_qos, previously used directly as an rmw_qos_profile_t argument, now returns an rclcpp::QoS object, requiring a secondary call to get the rmw_qos_profile for legacy API compatibility. Dependencies include ROS 2 Eloquent and rclcpp. Input is a rclcpp publisher instance, output passes the appropriate QoS profile to a function; ensure that my_func is updated accordingly if further changes occur.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Eloquent-Elusor.rst#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nvoid my_func(const rmw_qos_profile_t & rmw_qos);\n\n/* Previously: */\n// my_func(some_pub->get_actual_qos());\n/* Now: */\nmy_func(some_pub->get_actual_qos()->get_rmw_qos_profile());\n```\n\n----------------------------------------\n\nTITLE: Multiple Dependency Tags for a Single Package (Before Simplification)\nDESCRIPTION: Illustrates a common scenario in `package.xml` format 2 where a single dependency ('foo') requires separate `<build_depend>`, `<build_export_depend>`, and `<exec_depend>` tags. This verbose declaration can be simplified using the `<depend>` tag.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Package-XML.rst#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<build_depend>foo</build_depend>\n<build_export_depend>foo</build_export_depend>\n<exec_depend>foo</exec_depend>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via Homebrew in Bash\nDESCRIPTION: Installs required development libraries and tools for building ROS 2 using 'brew install' in Bash. Dependencies include asio, assimp, bison, bullet, cmake, and several others. Requires Homebrew to be installed and available in your system PATH. Output shows the installation progress of each package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/macOS-Development-Setup.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install asio assimp bison bullet cmake console_bridge cppcheck \\\n  cunit eigen freetype graphviz opencv openssl orocos-kdl pcre poco \\\n  pyqt@5 python qt@5 sip spdlog tinyxml2\n```\n\n----------------------------------------\n\nTITLE: Stopping the ROS 2 Daemon (Console)\nDESCRIPTION: This snippet shows the command to stop the ROS 2 daemon process.  This is essential when the user wants to switch RMW implementations to prevent issues with nodes or command line tools such as 'ros2 node'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 daemon stop\n```\n\n----------------------------------------\n\nTITLE: Updating Windows Subsystem for Linux (Windows)\nDESCRIPTION: Executes the WSL update command from a Windows command prompt or PowerShell (not within WSL) to update the Windows Subsystem for Linux components. This may resolve issues with GUI applications like RViz in newer WSL versions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ wsl --update\n```\n\n----------------------------------------\n\nTITLE: Example PointStamped Message Output Format\nDESCRIPTION: Shows the typical structure and content of `geometry_msgs/PointStamped` messages published on the `/turtle3/turtle_point_stamped` topic. Each message contains a timestamped header with a frame ID ('world') and the point coordinates (x, y, z).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Using-Stamped-Datatypes-With-Tf2-Ros-MessageFilter.rst#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nheader:\n  stamp:\n    sec: 1629877510\n    nanosec: 902607040\n  frame_id: world\npoint:\n  x: 4.989276885986328\n  y: 3.073937177658081\n  z: 0.0\n---\nheader:\n  stamp:\n    sec: 1629877510\n    nanosec: 918389395\n  frame_id: world\npoint:\n  x: 4.987966060638428\n  y: 3.089883327484131\n  z: 0.0\n---\nheader:\n  stamp:\n    sec: 1629877510\n    nanosec: 934186680\n  frame_id: world\npoint:\n  x: 4.986400127410889\n  y: 3.105806589126587\n  z: 0.0\n---\n```\n\n----------------------------------------\n\nTITLE: Running pendulum_logger\nDESCRIPTION: This bash command is used to execute the pendulum_logger node within a shell environment that has sourced the ROS 2 setup.bash script. This action initializes the logger node, which will provide real-time statistics during demo execution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Real-Time-Programming.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npendulum_logger\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 dependencies - Bash\nDESCRIPTION: Installs the dependencies required to build the `rmw_gurumdds` package using `rosdep`. The `--from src` option specifies that dependencies should be resolved from the source directory.  `-i` enables interactive mode, and `--rosdistro {DISTRO}` specifies the ROS 2 distribution to use. Replace `{DISTRO}` with the ROS 2 distribution name.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-GurumNetworks-GurumDDS.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nrosdep install --from src -i --rosdistro {DISTRO}\n```\n\n----------------------------------------\n\nTITLE: Launching the webots_ros2_universal_robot Example - Console\nDESCRIPTION: Runs the provided 'multirobot_launch.py' ROS 2 launch file to start the universal robot example simulation. Requires the webots_ros2_universal_robot package (installed via apt or built from source) and all environments sourced appropriately. Initiates the demo simulation with Webots and ROS 2 integration.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Ubuntu.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nros2 launch webots_ros2_universal_robot multirobot_launch.py\n```\n\n----------------------------------------\n\nTITLE: Meshfile Message Definition for Embedded Meshes\nDESCRIPTION: Defines the fields within the `Meshfile` message type, designed to embed mesh data directly within messages, primarily for rosbag recording. It includes a `filename` for metadata/debugging and `data` to store the raw mesh file content as bytes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Humble-Hawksbill.rst#_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n# The filename is used for both debug purposes and to provide a file extension\n# for whatever parser is used.\nstring filename\n\n# This stores the raw text of the mesh file.\nuint8[] data\n```\n\n----------------------------------------\n\nTITLE: Checking publisher output in terminal\nDESCRIPTION: Sample output lines from `cam2image` node indicating image publication events, useful for debugging and verifying activity.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n[INFO] [1715662452.055277255] [cam2image]: Publishing image #1\n[INFO] [1715662452.119336061] [cam2image]: Publishing image #2\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for ROS 2 Action Interface Package\nDESCRIPTION: Commands to create a new workspace and a package for custom action interfaces in ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/ros2_ws/src # you can reuse an existing workspace with this naming convention\n$ cd ~/ros2_ws/src\n$ ros2 pkg create --license Apache-2.0 custom_action_interfaces\n```\n\n----------------------------------------\n\nTITLE: Running ROS 2 Listener Node\nDESCRIPTION: Launches the standard ROS 2 Python listener node (`demo_nodes_py`) which subscribes to the `/topic` topic and prints received messages. This is used to verify bag playback.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Sourcing Setup File (Windows PowerShell)\nDESCRIPTION: Executes the generated PowerShell setup script located in the 'install' directory in Windows PowerShell. This updates the current PowerShell session's environment variables, making the built ROS 2 packages available.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Listener-Cpp.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ .\\install\\setup.ps1\n```\n\n----------------------------------------\n\nTITLE: Installing Clang Compiler\nDESCRIPTION: This command installs the Clang compiler on Ubuntu using apt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install clang\n```\n\n----------------------------------------\n\nTITLE: Starting Fast DDS Discovery Server with CLI in Bash\nDESCRIPTION: Initializes a Fast DDS Discovery Server instance with a specific server ID (0), listening on localhost at port 11811. This step is fundamental to enabling nodes to discover each other via the discovery server in the following steps.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ fastdds discovery -i 0 -l 127.0.0.1 -p 11811\n```\n\n----------------------------------------\n\nTITLE: Configuring Bloom Authentication File Format\nDESCRIPTION: Defines the JSON structure for the `~/.config/bloom` file. This file stores the GitHub username and a Personal Access Token (PAT) required for Bloom to authenticate with GitHub during the release process. Replace `<your-github-username>` and `<token-you-created-for-bloom>` with your actual credentials obtained from GitHub.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Personal-Access-Token.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n   \"github_user\": \"<your-github-username>\",\n   \"oauth_token\": \"<token-you-created-for-bloom>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the ROS 2 Publisher Node\nDESCRIPTION: This command uses the `ros2 run` tool to execute the `talker` executable from the `py_pubsub` package. This starts the publisher node, which will begin sending messages on the 'topic'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_18\n\nLANGUAGE: Console\nCODE:\n```\n$ ros2 run py_pubsub talker\n```\n\n----------------------------------------\n\nTITLE: Download Broadcaster Script (Linux/macOS)\nDESCRIPTION: This snippet shows the console command to download the Python script for the tf2 broadcaster node from a GitHub repository using `wget`. This script implements the node that reads turtle pose and broadcasts its transform.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: Building a C++ Service-Client Package in ROS2\nDESCRIPTION: Commands to build a specific C++ service-client package in a ROS2 workspace using colcon across different operating systems.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select cpp_srvcli\n```\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --packages-select cpp_srvcli\n```\n\nLANGUAGE: console\nCODE:\n```\ncolcon build --merge-install --packages-select cpp_srvcli\n```\n\n----------------------------------------\n\nTITLE: Embedding Responsive Google Calendars with HTML\nDESCRIPTION: This HTML code embeds Google Calendars using iframes and utilizes CSS classes to achieve responsive behavior.  It includes separate iframes for desktop and mobile views, toggling their visibility based on screen size using CSS media queries.  The code assumes the existence of associated CSS for responsiveness.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Governance.rst#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n    <div class=\"responsiveCal\">\n      <div class=\"deskContent\">\n        <iframe src=\"https://calendar.google.com/calendar/embed?src=agf3kajirket8khktupm9go748%40group.calendar.google.com\" style=\"border: 0\" width=\"800\" height=\"600\" frameborder=\"0\" scrolling=\"no\"></iframe>\n      </div>\n      <div class=\"phoneContent\"><iframe src=\"https://calendar.google.com/calendar/embed?mode=AGENDA&amp;height=400&amp;wkst=1&amp;src=agf3kajirket8khktupm9go748%40group.calendar.google.com\" style=\"border: 0\" width=\"280\" height=\"500\" frameborder=\"0\" scrolling=\"no\"></iframe>\n      </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 1 Core Development Packages - Bash\nDESCRIPTION: Installs upstream ROS 1 core development packages on Ubuntu 22.04 by updating package lists and using apt. Assumes that the ROS 2 apt repository has been removed from the sources list to avoid conflicts. Prerequisites: Ubuntu 22.04 with internet access and sudo privileges. Outcome is installation of ROS 1 headers and tools for core development tasks.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Using-ros1_bridge-Jammy-upstream.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt update && sudo apt install -y ros-core-dev\n```\n\n----------------------------------------\n\nTITLE: Passing String Parameters in XML Launch Files (Pre-Foxy Patch 7)\nDESCRIPTION: Shows the deprecated method (prior to ROS 2 Foxy Patch 7) for passing a numerical value as a string parameter in an XML launch file. This involved using extra single quotes within the double quotes (`value=\"''3''\"`), which would result in the string value `'3'`. This behavior changed due to a launch frontend parser fix.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<!-- results in the string value \"'3'\" -->\n<param name=\"foo\" value=\"''3''\"/>\n```\n\n----------------------------------------\n\nTITLE: Running Python Listener Node\nDESCRIPTION: This code snippet sources the ROS 2 environment and then runs the Python 'listener' demo node using 'ros2 run'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/Ubuntu-Development-Setup.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n. ~/ros2_{DISTRO}/install/local_setup.bash\nros2 run demo_nodes_py listener\n```\n\n----------------------------------------\n\nTITLE: Installing/Upgrading Python Tools via Pip\nDESCRIPTION: Installs or upgrades the 'bloom' and 'catkin_pkg' Python packages using the pip3 package installer. This method is suitable for platforms not covered by standard package managers or for user-specific installations.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/_Install-Dependencies.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install -U bloom catkin_pkg\n```\n\n----------------------------------------\n\nTITLE: Run Logging Demo\nDESCRIPTION: Runs the logging demo main executable. Used in conjunction with previously set environment variables.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Logging-and-logger-configuration.rst#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nros2 run logging_demo logging_demo_main\n```\n\n----------------------------------------\n\nTITLE: Update Apt Package List (Switching to Testing) (sh)\nDESCRIPTION: Updates the local package index from the configured apt repositories. This command must be run after modifying the `sources.list` file to reflect the available packages in the newly added or modified `ros2-testing` repository. Requires root privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Running the ROS2 Service Client Node\nDESCRIPTION: Command to run the compiled C++ service client node, which sends a request to the service and displays the response.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nros2 run cpp_srvcli client\n[INFO] [minimal_client]: result of 41 + 1: 42\n```\n\n----------------------------------------\n\nTITLE: Download Broadcaster Script (Windows CMD)\nDESCRIPTION: This snippet provides the command using `curl` in a Windows Command Prompt to download the Python script for the tf2 broadcaster node from a GitHub repository. The `-o` flag specifies the output filename.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Tf2/Writing-A-Tf2-Broadcaster-Py.rst#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ curl -sk https://raw.githubusercontent.com/ros/geometry_tutorials/ros2/turtle_tf2_py/turtle_tf2_py/turtle_tf2_broadcaster.py -o turtle_tf2_broadcaster.py\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL Dependency\nDESCRIPTION: Installs the OpenSSL development library, a prerequisite for building ROS 2 security features from source. The specific command varies between Linux (using apt) and macOS (using Homebrew).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install libssl-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Defining ROS 1 Package Metadata in package.xml - XML\nDESCRIPTION: This code snippet shows a ROS 1 package.xml file describing the 'talker_py' Python package. It specifies package name, version, maintainer, license, and dependencies (including catkin, rospy, std_msgs). This file is required for Catkin-based packages and is parsed by ROS 1 build tools to resolve dependencies and build the package. Inputs include package metadata elements, and it outputs ROS package metadata for use by Catkin.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"2\">\n    <name>talker_py</name>\n    <version>1.0.0</version>\n    <description>The talker_py package</description>\n    <maintainer email=\"gerkey@example.com\">Brian Gerkey</maintainer>\n    <license>BSD</license>\n\n    <buildtool_depend>catkin</buildtool_depend>\n\n    <depend>rospy</depend>\n    <depend>std_msgs</depend>\n</package>\n\n```\n\n----------------------------------------\n\nTITLE: Listing Installed ROS 2 Packages - Console\nDESCRIPTION: This command lists all ROS 2 packages installed in the container. It can be used to verify the availability of packages and dependencies required by your nodes or applications. The command outputs a list of package names.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Run-2-nodes-in-single-or-separate-docker-containers.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg list\n(you will see a list of packages)\n```\n\n----------------------------------------\n\nTITLE: Cloning and building demos repository from source\nDESCRIPTION: Command to clone the ROS 2 demos repository from GitHub and checkout a branch matching your ROS 2 installation to build the demo applications from source.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ros2/demos.git -b {REPOS_FILE_BRANCH}\n```\n\n----------------------------------------\n\nTITLE: Listing ROS 2 Packages\nDESCRIPTION: This command lists all installed ROS 2 packages on the system. The output can be used to identify available RQt plugins, which typically have names starting with 'rqt_'.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-RQt.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ros2 pkg list\n```\n\n----------------------------------------\n\nTITLE: Viewing bridged topics in ROS 2\nDESCRIPTION: Commands to list topics and echo data in ROS 2 from the topics that have been bridged from the ROS 1 bag playback.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Rosbag-with-ROS1-Bridge.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Shell S:\n. /opt/ros/ardent/setup.bash\n# Or, if building ROS 2 from source:\n# . <workspace-with-bridge>/install/setup.bash\nros2 topic list\nros2 topic echo /odom\nros2 run image_tools showimage\n```\n\n----------------------------------------\n\nTITLE: Managing ROS2 Daemon Process\nDESCRIPTION: Commands to stop and start the ROS2 daemon, which manages communication infrastructure for nodes. These are necessary to apply new configuration profiles and ensure smooth operation for discovery and topic management.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ ros2 daemon stop\n$ ros2 daemon start\n```\n\n----------------------------------------\n\nTITLE: Clone Cyclone DDS and rmw_cyclonedds repositories (bash)\nDESCRIPTION: These commands clone the Cyclone DDS and rmw_cyclonedds repositories into the ROS 2 workspace source directory. The `-b {REPOS_FILE_BRANCH}` option is used to specify the branch. The cloned repos are placed under the 'ros2' and 'eclipse-cyclonedds' subdirectories within the `ros2_ws/src` directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/DDS-Implementations/Working-with-Eclipse-CycloneDDS.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ros2_ws/src\ngit clone https://github.com/ros2/rmw_cyclonedds ros2/rmw_cyclonedds -b {REPOS_FILE_BRANCH}\ngit clone https://github.com/eclipse-cyclonedds/cyclonedds eclipse-cyclonedds/cyclonedds\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency and Minor Cleanup in rqt_srv (Python)\nDESCRIPTION: This snippet highlights the addition of an explicit dependency on python3-pytest and minor code cleanup for ROS2 compatibility in rqt_srv, a plugin for ROS2 services, to improve testing and maintain code quality.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_50\n\nLANGUAGE: Python\nCODE:\n```\nAdd explicit dependency to python3-pytest. (\\#12 <https://github.com/ros-visualization/rqt_srv/issues/12>)\\nMinor cleanups in rqt_srv for ROS 2 (\\#9 <https://github.com/ros-visualization/rqt_srv/issues/9>)\n```\n\n----------------------------------------\n\nTITLE: Updating ROS2 Repository List on Windows (CMD)\nDESCRIPTION: Updates the ros2.repos file to the latest version for a specific ROS 2 distribution using curl within the Command Prompt.  It navigates to the ros2 directory and uses curl to download the updated ros2.repos file. The `-sk` flag disables SSL certificate verification.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd \\dev\\ros2_{DISTRO}\ncurl -sk https://raw.githubusercontent.com/ros2/ros2/{REPOS_FILE_BRANCH}/ros2.repos -o ros2.repos\n```\n\n----------------------------------------\n\nTITLE: Setting RANDFILE Environment Variable on Windows (Batch)\nDESCRIPTION: Sets the `RANDFILE` environment variable on Windows. This is an optional step to potentially resolve 'unable to write 'random state'' errors that can occur during key generation with OpenSSL by specifying a file path for storing random state.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Introducing-ros2-security.rst#_snippet_6\n\nLANGUAGE: bat\nCODE:\n```\nset RANDFILE=C:\\dev\\ros2\\sros2_demo\\.rnd\n```\n\n----------------------------------------\n\nTITLE: Supporting ros2 action type\nDESCRIPTION: This enhancement adds support for the command `ros2 action type <action name>` in the `ros2action` package. This functionality allows users to determine the data types of action messages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Installing webots_ros2 Debian Package (WSL)\nDESCRIPTION: Installs the pre-compiled `webots_ros2` package for the specified ROS 2 distribution (`{DISTRO}`) using the apt package manager within a WSL environment. Requires `sudo` privileges and assumes ROS 2 repositories are configured.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install ros-{DISTRO}-webots-ros2\n```\n\n----------------------------------------\n\nTITLE: Making handles not inheritable\nDESCRIPTION: This change makes handles non-inheritable in `ros2cli` to prevent blocking during tab completion. This should fix a tab completion issue.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Conditional Compilation for ThreadSanitizer Feature Detection - C++\nDESCRIPTION: This snippet shows how to use the preprocessor directive __has_feature(thread_sanitizer) to conditionally compile code that is specifically required for ThreadSanitizer-initiated builds. This detects if the thread sanitizer is enabled at compile time and allows specialized logic or reporting to be selectively enabled. Requires use with the Clang compiler and is not portable to compilers lacking __has_feature support.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Quality-Guide.rst#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#if __has_feature(thread_sanitizer)\n  // Code to run only under ThreadSanitizer instrumentation\n#endif\n```\n\n----------------------------------------\n\nTITLE: Uninstalling ROS 2 from RHEL\nDESCRIPTION: This snippet removes all ROS 2 packages installed via DNF. Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron). This command is useful for switching to a source-based install or completely removing ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf remove ros-{DISTRO}-*\n```\n\n----------------------------------------\n\nTITLE: Install Specific ROS 2 Package from Testing (sh)\nDESCRIPTION: Installs a single package from the configured apt repositories. After updating the apt index to include the `ros2-testing` repository, this command can be used to install a specific pre-release package. Replace `{DISTRO}` with the ROS 2 distribution name and `my-just-released-package` with the package name. Requires root privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install ros-{DISTRO}-my-just-released-package\n```\n\n----------------------------------------\n\nTITLE: Building multi-version documentation for deployment test\nDESCRIPTION: This snippet shows how to build the ROS 2 multi-version HTML documentation using the make command for testing deployment. It opens the rolling version of the documentation in a browser.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n`make multiversion`\n\n`sensible-browser build/html/rolling/index.html`\n```\n\n----------------------------------------\n\nTITLE: Extending ament_cmake via CONFIG_EXTRAS Argument in ament_package()\nDESCRIPTION: Shows an alternative method to register custom CMake files by passing their paths directly to the `CONFIG_EXTRAS` argument within the `ament_package()` function call. This achieves the same result as appending to the list variable beforehand.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Ament-CMake-Documentation.rst#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nament_package(CONFIG_EXTRAS\n  path/to/file.cmake\n  other/pathto/file.cmake\n)\n```\n\n----------------------------------------\n\nTITLE: rclcpp Node Constructor Usage After Dashing\nDESCRIPTION: Illustrates the updated usage of the `rclcpp::Node()` constructor with `rclcpp::NodeOptions` in Dashing. This example shows how to pass arguments and parameter overrides.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<std::string> args;\nstd::vector<rclcpp::Parameter> params = { rclcpp::Parameter(\"use_sim_time\", true) };\nrclcpp::NodeOptions node_options;\nnode_options.arguments(args);\nnode_options.parameter_overrides(params);\nauto node = std::make_shared<rclcpp::Node>(\"foo_node\", \"bar_namespace\", node_options);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Allocator Aliases and Creating ROS 2 Publisher and Subscriber with Custom Allocator in C++\nDESCRIPTION: This snippet defines alias types to simplify handling polymorphic allocators for ROS 2 messages. It creates a shared pointer to a custom allocator based on a previously implemented memory resource. Then it configures publisher and subscriber options to use the custom allocator. The publisher and subscriber for std_msgs::msg::UInt32 messages are created with the respective options and memory strategies that enforce real-time safe allocation. Dependencies include ROS 2 rclcpp, std::pmr, and the custom memory resource instance.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Allocator-Template-Tutorial.rst#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n using rclcpp::memory_strategies::allocator_memory_strategy::AllocatorMemoryStrategy;\n using Alloc = std::pmr::polymorphic_allocator<void>;\n using MessageAllocTraits =\n   rclcpp::allocator::AllocRebind<std_msgs::msg::UInt32, Alloc>;\n using MessageAlloc = MessageAllocTraits::allocator_type;\n using MessageDeleter = rclcpp::allocator::Deleter<MessageAlloc, std_msgs::msg::UInt32>;\n using MessageUniquePtr = std::unique_ptr<std_msgs::msg::UInt32, MessageDeleter>;\n\n CustomMemoryResource mem_resource{};\n auto alloc = std::make_shared<Alloc>(&mem_resource);\n rclcpp::PublisherOptionsWithAllocator<Alloc> publisher_options;\n publisher_options.allocator = alloc;\n auto publisher = node->create_publisher<std_msgs::msg::UInt32>(\n   \"allocator_tutorial\", 10, publisher_options);\n\n rclcpp::SubscriptionOptionsWithAllocator<Alloc> subscription_options;\n subscription_options.allocator = alloc;\n auto msg_mem_strat = std::make_shared<\n   rclcpp::message_memory_strategy::MessageMemoryStrategy<\n     std_msgs::msg::UInt32, Alloc>>(alloc);\n auto subscriber = node->create_subscription<std_msgs::msg::UInt32>(\n   \"allocator_tutorial\", 10, callback, subscription_options, msg_mem_strat);\n\n std::shared_ptr<rclcpp::memory_strategy::MemoryStrategy> memory_strategy =\n   std::make_shared<AllocatorMemoryStrategy<Alloc>>(alloc);\n\n rclcpp::ExecutorOptions options;\n options.memory_strategy = memory_strategy;\n rclcpp::executors::SingleThreadedExecutor executor(options);\n```\n\n----------------------------------------\n\nTITLE: Cloning webots_ros2 Repository (WSL)\nDESCRIPTION: Navigates to the ROS 2 workspace directory (`~/ros2_ws`) and clones the `webots_ros2` repository from GitHub, including its submodules, into the `src/webots_ros2` subdirectory within WSL. Requires `git` to be installed.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/ros2_ws\n$ git clone --recurse-submodules https://github.com/cyberbotics/webots_ros2.git src/webots_ros2\n```\n\n----------------------------------------\n\nTITLE: Removing the ROS 2 Installation Directory - Bash\nDESCRIPTION: This command removes the entire ROS 2 workspace directory, effectively uninstalling ROS 2. It uses the `rmdir` command with flags to recursively delete the directory and its contents, including subdirectories, and removes them silently.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Windows-Install-Binary.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrmdir /s /q C:\\dev\n```\n\n----------------------------------------\n\nTITLE: Restored compatibility with older Qt versions\nDESCRIPTION: This restores compatibility for the project with earlier Qt versions. Dependencies include the older Qt versions and the build system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_36\n\n\n\n----------------------------------------\n\nTITLE: Downloading Subscriber Node Example Using Console Commands\nDESCRIPTION: These console commands illustrate how to download the example Python subscriber node script 'subscriber_member_function.py' from the ROS2 examples GitHub repository using wget or curl, tailored for Linux, macOS, and Windows. This prepares the subscriber node source file to complement the published talker node, enabling message reception.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_subscriber/examples_rclpy_minimal_subscriber/subscriber_member_function.py\n```\n\n----------------------------------------\n\nTITLE: Export ROS2 Repository Information (Linux/macOS/Windows)\nDESCRIPTION: Exports the current state of the repositories in the workspace to a `my_ros2.repos` file. This file can be used to reproduce the same workspace state on another machine. Assumes that the user is in their ROS2 workspace directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/ros2_{DISTRO}\nvcs export src > my_ros2.repos\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to 3.14.4 for compatibility with ament_cmake functions.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_22\n\nLANGUAGE: null\nCODE:\n```\ncmake_minimum_required(VERSION 3.14.4)\n```\n\n----------------------------------------\n\nTITLE: Updating DNF metadata cache for ROS 2 repository on RHEL\nDESCRIPTION: This snippet updates the dnf package manager's metadata cache, ensuring it has the latest information about available packages from the configured repositories, including the ROS 2 repository. This is a necessary step after adding a new repository.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf makecache\n```\n\n----------------------------------------\n\nTITLE: Updating ROS2 Repository List on Linux/macOS\nDESCRIPTION: Updates the ros2.repos file to the latest version for a specific ROS 2 distribution. It moves the existing ros2.repos file to ros2.repos.old and then downloads the new ros2.repos file using wget. This script assumes the user is in their ROS 2 workspace directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Maintaining-a-Source-Checkout.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/ros2_{DISTRO}\nmv -i ros2.repos ros2.repos.old\nwget https://raw.githubusercontent.com/ros2/ros2/{REPOS_FILE_BRANCH}/ros2.repos\n```\n\n----------------------------------------\n\nTITLE: Passing String Parameters with Type Attribute in XML Launch Files (Foxy Patch 7+)\nDESCRIPTION: Illustrates the corrected method (introduced in ROS 2 Foxy Patch 7) for explicitly passing a value as a string parameter in an XML launch file. Using the `type=\"str\"` attribute ensures the value \"3\" is interpreted as a string, avoiding ambiguity caused by previous parsing behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Foxy-Fitzroy.rst#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<param name=\"foo\" value=\"3\" type=\"str\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz (Linux)\nDESCRIPTION: These commands update the package list and install Graphviz.  Graphviz is a graph visualization software used by Sphinx to generate diagrams for the documentation. Requires sudo privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update ; sudo apt install graphviz\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies\nDESCRIPTION: Installs the necessary build dependencies for compiling the Linux kernel using apt-get. Requires sudo privileges and a working internet connection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n   $ sudo apt-get build-dep linux\n```\n\nLANGUAGE: console\nCODE:\n```\n   $ sudo apt-get install libncurses-dev flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf fakeroot\n```\n\n----------------------------------------\n\nTITLE: Cloning sros2 repository using git (Bash)\nDESCRIPTION: This bash command uses 'git clone' to download the 'sros2' repository from GitHub and store it in the '/tmp/sros2' directory. This repository contains sample policy files that can be used as templates for creating custom security policies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ros2/sros2.git /tmp/sros2\n```\n\n----------------------------------------\n\nTITLE: Running C++ ROS2 Parameter Blackboard Node\nDESCRIPTION: This command starts the 'parameter_blackboard' node from the 'demo_nodes_cpp' package. This node serves as the target for parameter modification in the demonstration. It contains parameters that can be set externally.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-Python.rst#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nros2 run demo_nodes_cpp parameter_blackboard\n```\n\n----------------------------------------\n\nTITLE: Installing ROS 2 Base version on RHEL\nDESCRIPTION: This snippet installs the minimal ROS 2 base environment, which includes communication libraries, message packages, and command-line tools, but without GUI tools. Replace {DISTRO} with the ROS 2 distribution name (e.g., humble, iron).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install ros-{DISTRO}-ros-base\n```\n\n----------------------------------------\n\nTITLE: Checking for Broken Links (Sphinx)\nDESCRIPTION: This command checks the entire site for broken links using Sphinx's linkcheck builder.  The results are outputted to the screen and saved in the build/linkcheck directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nmake linkcheck\n```\n\n----------------------------------------\n\nTITLE: Console Output for Subscriber Matching Limitation\nDESCRIPTION: Terminal output demonstrating how the second subscriber only receives messages from the synchronized topic due to the matched subscribers limitation on the asynchronous topic.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1613127657.088860890] [sync_async_subscriber]: I heard: 'SYNC: Hello, world! 18'\n[INFO] [1613127657.588896594] [sync_async_subscriber]: I heard: 'SYNC: Hello, world! 19'\n[INFO] [1613127658.088849401] [sync_async_subscriber]: I heard: 'SYNC: Hello, world! 20'\n```\n\n----------------------------------------\n\nTITLE: New API in rclcpp::Node for parameter declaration and management\nDESCRIPTION: This snippet summarizes the new methods introduced for parameter management in the rclcpp::Node class. It includes methods to declare parameters with optional default values and descriptors, undeclare parameters, check for parameter existence, get and set parameters, describe parameters, and set callbacks for parameter changes, providing a comprehensive and flexible parameter API.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Release-Dashing-Diademata.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nconst rclcpp::ParameterValue &\n rclcpp::Node::declare_parameter(\n   const std::string & name,\n   const rclcpp::ParameterValue & default_value = rclcpp::ParameterValue(),\n   const rcl_interfaces::msg::ParameterDescriptor & parameter_descriptor =\n   rcl_interfaces::msg::ParameterDescriptor());\n```\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename ParameterT>\n auto\n rclcpp::Node::declare_parameter(\n   const std::string & name,\n   const ParameterT & default_value,\n   const rcl_interfaces::msg::ParameterDescriptor & parameter_descriptor =\n   rcl_interfaces::msg::ParameterDescriptor());\n```\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename ParameterT>\n std::vector<ParameterT>\n rclcpp::Node::declare_parameters(\n   const std::string & namespace_,\n   const std::map<std::string, ParameterT> & parameters);\n```\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename ParameterT>\n std::vector<ParameterT>\n rclcpp::Node::declare_parameters(\n   const std::string & namespace_,\n   const std::map<\n     std::string,\n     std::pair<ParameterT, rcl_interfaces::msg::ParameterDescriptor>\n   > & parameters);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nvoid\n rclcpp::Node::undeclare_parameter(const std::string & name);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nbool\n rclcpp::Node::has_parameter(const std::string & name) const;\n```\n\nLANGUAGE: cpp\nCODE:\n```\nrcl_interfaces::msg::SetParametersResult\n rclcpp::Node::set_parameter(const rclcpp::Parameter & parameter);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nstd::vector<rclcpp::Parameter>\n rclcpp::Node::get_parameters(const std::vector<std::string> & names) const;\n```\n\nLANGUAGE: cpp\nCODE:\n```\nrcl_interfaces::msg::ParameterDescriptor\n rclcpp::Node::describe_parameter(const std::string & name) const;\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing OnParametersSetCallbackType =\n   rclcpp::node_interfaces::NodeParametersInterface::OnParametersSetCallbackType;\n\nOnParametersSetCallbackType\n rclcpp::Node::set_on_parameters_set_callback(\n   OnParametersSetCallbackType callback);\n```\n\nLANGUAGE: cpp\nCODE:\n```\n[[deprecated(\"use declare_parameter() instead\")]]\nvoid\n rclcpp::Node::set_parameter_if_not_set(\n   const std::string & name,\n   const ParameterT & value);\n```\n\n----------------------------------------\n\nTITLE: Changed to use a dedicated TransformListener thread.\nDESCRIPTION: This utilizes a dedicated thread for the `TransformListener`. This improves performance, especially when dealing with transforms. Dependencies are the rviz and the `TransformListener` class.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Installing ROS 2 development tools on RHEL\nDESCRIPTION: This snippet installs essential development tools required for building ROS 2 packages on RHEL. It includes cmake, gcc-c++, git, make, patch, python-related tools (colcon, mypy, pip, pytest, rosdep, setuptools, vcstool), and wget. The `-y` flag automatically confirms the installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/RHEL-Install-RPMs.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y \\\n  cmake \\\n  gcc-c++ \\\n  git \\\n  make \\\n  patch \\\n  python3-colcon-common-extensions \\\n  python3-mypy \\\n  python3-pip \\\n  python3-pytest \\\n  python3-pytest-repeat \\\n  python3-pytest-rerunfailures \\\n  python3-rosdep \\\n  python3-setuptools \\\n  python3-vcstool \\\n  wget\n\n# install some pip packages needed for testing and\n# not available as RPMs\npython3 -m pip install -U --user \\\n  flake8-blind-except==0.1.1 \\\n  flake8-class-newline \\\n  flake8-deprecated\n```\n\n----------------------------------------\n\nTITLE: Downloading Publisher Node Example Using Console Commands\nDESCRIPTION: These console commands demonstrate how to download the example Python publisher node script 'publisher_member_function.py' from the ROS2 examples GitHub repository using wget or curl, adapted for Linux, macOS, and Windows environments. This prepares the node source file necessary for the publisher.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Publisher-And-Subscriber.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ wget https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl -sk https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py -o publisher_member_function.py\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/ros2/examples/{REPOS_FILE_BRANCH}/rclpy/topics/minimal_publisher/examples_rclpy_minimal_publisher/publisher_member_function.py -o publisher_member_function.py\n```\n\n----------------------------------------\n\nTITLE: Enable EPEL and CRB Repositories on RHEL using DNF\nDESCRIPTION: This command enables the EPEL (Extra Packages for Enterprise Linux) and CRB (CodeReady Builder) repositories using the DNF package manager. These repositories provide additional packages required for ROS 2 installation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install 'dnf-command(config-manager)' epel-release -y\nsudo dnf config-manager --set-enabled crb\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Configuration File (Bash)\nDESCRIPTION: Uses the `wget` command to download the `compose.deployment.yaml` file. This file defines the Docker Compose services (keystore-creator, listener, talker) and their configurations for the deployment example. The `{DISTRO}` placeholder needs to be replaced with the appropriate ROS 2 distribution.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Download the compose file\nwget https://raw.githubusercontent.com/ros2/ros2_documentation/{DISTRO}/source/Tutorials/Advanced/Security/resources/deployment_gd/compose.deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Examining Filesystem within Listener Docker Container (Bash)\nDESCRIPTION: Executes a sequence of commands to inspect the deployed security files within the running `tutorial-listener-1` container. It opens an interactive bash shell, navigates to the shared `/keystore` volume, and uses the `tree` command to list the directory structure. This is used to verify that only the necessary files (public CAs, specific enclave) are present.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Deployment-Guidelines.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1\ndocker exec -it tutorial-listener-1 bash\ncd keystore\ntree\n```\n\n----------------------------------------\n\nTITLE: Plotting pendulum_demo results\nDESCRIPTION: This snippet shows how to execute the rttest_plot script to generate plots of the data collected during the demo's execution.  The script takes the output file from pendulum_demo as an argument and processes it to create various plot files that can be used to analyze the demo's performance regarding page faults and latencies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Real-Time-Programming.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nros2 run rttest rttest_plot pendulum_demo_results\n```\n\n----------------------------------------\n\nTITLE: Update Apt Package List (Switching Back from Testing) (sh)\nDESCRIPTION: Updates the local package index after changing the apt source back to the main `ros2` repository. This command ensures `apt` is aware of the package versions available in the main repository, which are typically older official releases compared to the testing repository. Requires root privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Install ROS 2 Development Tools on RHEL using DNF and pip\nDESCRIPTION: This command installs development tools needed for building ROS 2 packages and contributing to ROS 2 development. It installs cmake, gcc-c++, git, make, patch, colcon extensions, mypy, pip, pytest, rosdep, setuptools, vcstool, and wget using DNF. Additionally, it installs specific pip packages (flake8-blind-except, flake8-class-newline, flake8-deprecated) for testing and development purposes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install -y \\\n  cmake \\\n  gcc-c++ \\\n  git \\\n  make \\\n  patch \\\n  python3-colcon-common-extensions \\\n  python3-mypy \\\n  python3-pip \\\n  python3-pytest \\\n  python3-pytest-repeat \\\n  python3-pytest-rerunfailures \\\n  python3-rosdep \\\n  python3-setuptools \\\n  python3-vcstool \\\n  wget\n\n# install some pip packages needed for testing and\n# not available as RPMs\npython3 -m pip install -U --user \\\n  flake8-blind-except==0.1.1 \\\n  flake8-class-newline \\\n  flake8-deprecated\n```\n\n----------------------------------------\n\nTITLE: Creating a reference link to a target in RST documentation\nDESCRIPTION: Demonstrates how to create a link to a previously defined target. This example creates a link to the 'talker-listener' target, which will navigate to that section with an anchor link.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_38\n\nLANGUAGE: rst\nCODE:\n```\n:ref:`talker-listener demo <talker-listener>`\n```\n\n----------------------------------------\n\nTITLE: Pull ROS 2 Nightly Docker Image (sh)\nDESCRIPTION: Downloads the latest nightly ROS 2 Docker image from the Docker registry (`osrf/ros2`). This command fetches the pre-built image containing a pre-release ROS 2 installation based on nightly builds. Requires Docker installed and running.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull osrf/ros2:nightly\n```\n\n----------------------------------------\n\nTITLE: Adding python3-yaml as dependency\nDESCRIPTION: This adds python3-yaml as a dependency for `ros2bag`, likely required for parsing or serializing YAML data.  This dependency is needed for certain functionalities to work as intended.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Persisting DISPLAY Variable Setting in .bashrc (WSL)\nDESCRIPTION: Appends the command to set the `DISPLAY` environment variable (for X11 forwarding) to the user's `.bashrc` file within WSL. This ensures the variable is automatically set every time a new WSL bash shell is opened, making the X11 forwarding setup persistent.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Installation-Windows.rst#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"export DISPLAY=$(ip route list default | awk '{print $3}'):0\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Updating to C++17\nDESCRIPTION: This updates the `ros2cli_test_interfaces` package to use C++17.  This incorporates modern C++ features.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_31\n\n\n\n----------------------------------------\n\nTITLE: Adding Test Dependency in rqt_service_caller (Python)\nDESCRIPTION: This snippet indicates adding pytest as a test dependency in rqt_service_caller, a ROS2 plugin for calling services via Python, ensuring better test automation and stability.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\nAdd in a pytest test dependency. (\\#28 <https://github.com/ros-visualization/rqt_service_caller/issues/28>)\n```\n\n----------------------------------------\n\nTITLE: Deleting Docker Images Locally and from IBM Cloud Registry - Console\nDESCRIPTION: This snippet demonstrates how to remove Docker containers and images both locally and remotely using docker rm and docker rmi. It assumes correct permissions and that the containers and images match the names provided. Input parameters are the local container names and the IBM Cloud Registry image tag. Proper deletion helps manage storage and keep the registry organized.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker rm your_docker_NAMES\n\n$ docker rmi registry.ng.bluemix.net/ros2nasr/ros2foxy:2\n```\n\n----------------------------------------\n\nTITLE: Heading examples in reStructuredText\nDESCRIPTION: This snippet provides examples of how to format different heading levels in reStructuredText, from page titles to subsubsections. The number of symbols must match the length of the title.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_19\n\nLANGUAGE: rst\nCODE:\n```\nPage Title Header\n=================\n\nSection Header\n--------------\n\n2 Subsection Header\n^^^^^^^^^^^^^^^^^^^\n\n2.4 Subsubsection Header\n~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\n----------------------------------------\n\nTITLE: Building ROS 2 Without Tracepoints (Source Installation)\nDESCRIPTION: Command to build the tracetools package with the TRACETOOLS_TRACEPOINTS_EXCLUDED option set to ON to remove tracepoints from a source installation of ROS 2.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Building-ROS-2-with-Tracing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/ros2_{DISTRO}\n$ colcon build --packages-select tracetools --cmake-clean-cache --cmake-args -DTRACETOOLS_TRACEPOINTS_EXCLUDED=ON\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Spell Check (codespell)\nDESCRIPTION: This command runs a spell check on the documentation files using codespell to identify and flag misspellings.  This helps ensure the documentation is free of grammatical errors.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nmake spellcheck\n```\n\n----------------------------------------\n\nTITLE: Upgrade Entire ROS 2 Installation to Testing (sh)\nDESCRIPTION: Upgrades all installed packages to their latest versions available in the configured apt repositories. After configuring the `ros2-testing` repository and running `apt update`, this command upgrades the entire ROS 2 installation to the versions found in the testing repository. Requires root privileges.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Testing.rst#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt dist-upgrade\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Tests (doc8)\nDESCRIPTION: This command runs documentation tests using doc8 to check for style and formatting issues in the reStructuredText files. It helps ensure consistency and quality of the documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Enabling EPEL and PowerTools Repositories (RHEL)\nDESCRIPTION: This snippet enables the EPEL and PowerTools repositories, which are required for some dependencies used by ROS 2 on RHEL.  It uses `dnf` which is the package manager for Fedora and RHEL.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Development-Setup.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install 'dnf-command(config-manager)' epel-release -y\n      sudo dnf config-manager --set-enabled crb\n```\n\n----------------------------------------\n\nTITLE: Setting Release Repository Push URL in Bloom\nDESCRIPTION: Prompt for specifying an optional custom push URL for the release repository, which is useful when the default URL in the rosdistro file is not writable, such as when using SSH instead of HTTPS.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Releasing/Release-Track.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nRelease Repository Push URL:\n   :{none}\n      This indicates that the default release url should be used.\n   <url>\n      (optional) Used when pushing to remote release repositories. This is only\n      needed when the release uri which is in the rosdistro file is not writable.\n      This is useful, for example, when a releaser would like to use a ssh url\n      to push rather than a https:// url.\n   [None]:\n```\n\n----------------------------------------\n\nTITLE: Removing packet loss simulation on Linux\nDESCRIPTION: Command to delete the `tc` qdisc rules previously set, restoring normal network conditions after testing.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Demos/Quality-of-Service.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo tc qdisc delete dev lo root netem loss 5%\n```\n\n----------------------------------------\n\nTITLE: Installing Kernel Packages\nDESCRIPTION: Installs the generated kernel debian packages using dpkg. Requires sudo privileges. Installs the new kernel and related modules on the system.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n   $ sudo dpkg -i ../*.deb\n```\n\n----------------------------------------\n\nTITLE: Using console directive for terminal commands with output\nDESCRIPTION: Demonstrates how to use the console directive for terminal commands that include output. The '$' symbol indicates command lines, with output shown as regular text. The copy button only copies the commands, not outputs or prompt symbols.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ export ROS_DOMAIN_ID=42\n$ ros2 run turtlesim turtlesim_node --ros-args --remap \"__node:=my_turtle\"\n[INFO] [1742150439.022947971] [my_turtle]: Starting turtlesim with node name /my_turtle\n[INFO] [1742150439.026043867] [my_turtle]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]\n```\n\n----------------------------------------\n\nTITLE: Add linters and use ament_lint_auto\nDESCRIPTION: This entry describes the integration of linters and the use of `ament_lint_auto` within the rviz packages. This ensures code style consistency and helps detect potential issues early in the development process. Dependencies include ament_lint_auto and relevant linting tools.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Unpack ROS 2 Binary Package\nDESCRIPTION: This command extracts the downloaded ROS 2 binary package into a designated directory. It creates the directory and then uses the `tar` command to decompress the archive.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/Alternatives/RHEL-Install-Binary.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/ros2_{DISTRO}\ncd ~/ros2_{DISTRO}\ntar xf ~/Downloads/ros2-package-linux-x86_64.tar.bz2\n```\n\n----------------------------------------\n\nTITLE: Starting Local Webots Simulation Server on macOS Host using Shell and Python\nDESCRIPTION: On macOS systems, a local simulation server is required to run Webots in a VM context. These commands set the WEBOTS_HOME environment variable to the Webots.app directory and execute the local_simulation_server.py Python script downloaded from the webots-server repository. This server enables communication between the VM and Webots. Prerequisites include having both the Webots installation and Python 3 available on the host.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Simulators/Webots/Setting-Up-Simulation-Webots-Basic.rst#_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\n$ export WEBOTS_HOME=/Applications/Webots.app\n$ python3 local_simulation_server.py\n```\n\n----------------------------------------\n\nTITLE: Service Node Output Log with Synchronous QoS\nDESCRIPTION: Shows the console output from a ROS2 service node configured with synchronous publication mode. The logs display the service's lifecycle from initialization to request handling and response sending.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/FastDDS-Configuration.rst#_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1612977403.805799037] [ping_server]: Ready to serve.\n[INFO] [1612977404.807314904] [ping_server]: Incoming request\n[INFO] [1612977404.836405125] [ping_server]: Sending back response\n```\n\n----------------------------------------\n\nTITLE: Error Message for Missing RMW Implementation (Bash)\nDESCRIPTION: This snippet shows an example of the error message displayed when attempting to use an RMW implementation that is not installed.  The error points to a problem with the installation or the identifier used in the RMW_IMPLEMENTATION variable.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Working-with-multiple-RMW-implementations.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nError getting RMW implementation identifier / RMW implementation not installed (expected identifier of 'rmw_connextdds'), exiting with 1.\n```\n\n----------------------------------------\n\nTITLE: Adding Tests and Fixes in rqt_bag (Python)\nDESCRIPTION: This code snippet discusses the addition of copyright tests, pytest dependency, and bug fixes in the rqt_bag module. It aims to improve test coverage and stability for the ROS2 visualization component written in Python, with key dependencies on pytest and test-related issues referenced via GitHub links.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nAdd in copyright tests to rqt_bag. (\\#95 <https://github.com/ros-visualization/rqt_plot/issues/95>)\\nAdd a test dependency on pytest. (\\#94 <https://github.com/ros-visualization/rqt_plot/issues/94>)\\nAdd in a pytest dependency for running tests. (\\#92 <https://github.com/ros-visualization/rqt_plot/issues/92>)\\nFix regression from \\#87 (\\#90 <https://github.com/ros-visualization/rqt_plot/issues/90>)\n```\n\n----------------------------------------\n\nTITLE: Modifying permissions.xml file using bash commands\nDESCRIPTION: These bash commands are used to navigate to the talker directory, create backups of the existing permissions files (permissions.p7s and permissions.xml) by renaming them with a '~' suffix, and then opening the permissions.xml file in the vi editor for modification. This prepares the environment for manually editing the XML file to adjust access control policies.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Security/Access-Controls.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/sros2_demo/demo_keystore/enclaves/talker_listener/talker\nmv permissions.p7s permissions.p7s~\nmv permissions.xml permissions.xml~\nvi permissions.xml\n```\n\n----------------------------------------\n\nTITLE: Creating and activating a Python virtual environment (venv)\nDESCRIPTION: This snippet demonstrates how to create and activate a Python virtual environment named 'ros2doc' using the venv module. It installs the required packages from requirements.txt while respecting the versions specified in constraints.txt and then deactivates the virtual environment.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# activate the venv\npython3 -m venv ros2doc\n\n# activate venv\nsource ros2doc/bin/activate\n\n# install required packages\npip install -r requirements.txt -c constraints.txt\n\n# deactivate the venv\n(ros2doc) deactivate\n```\n\n----------------------------------------\n\nTITLE: Preserve Source Permissions in Vendor Packages\nDESCRIPTION: This change ensures that the source permissions of vendor packages are preserved during the build process. It addresses an issue (#647) related to the handling of permissions for vendored dependencies. No dependencies were stated.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Updating System Packages Using DNF - Bash\nDESCRIPTION: This Bash command updates all installed packages to their latest versions using the dnf package manager on RHEL-based systems. It is a prerequisite step before installing additional software, such as ROS 2 packages, to ensure system stability and compatibility. The command must be run with root or sudo privileges, and requires an active internet connection.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Installation/_Dnf-Update-Admonition.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\n```\n\n----------------------------------------\n\nTITLE: ROS 1 Package Manifest - XML\nDESCRIPTION: This XML file is the package manifest for the ROS 1 talker package. It defines the package name, version, description, maintainer, license, buildtool dependencies (catkin), and runtime dependencies (roscpp, std_msgs).\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Package-Example.rst#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<?xml-model href=\"http://download.ros.org/schema/package_format2.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"2\">\n  <name>talker</name>\n  <version>0.0.0</version>\n  <description>talker</description>\n  <maintainer email=\"gerkey@example.com\">Brian Gerkey</maintainer>\n  <license>Apache-2.0</license>\n  <buildtool_depend>catkin</buildtool_depend>\n  <depend>roscpp</depend>\n  <depend>std_msgs</depend>\n</package>\n```\n\n----------------------------------------\n\nTITLE: Do not use assume every RenderPanel has a ViewController.\nDESCRIPTION: This alters the assumption that every `RenderPanel` necessarily has a `ViewController`. Dependencies are RenderPanel and the ViewController, related to the view handling within rviz.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Fixing PackageCheck in ros2doctor\nDESCRIPTION: This fixes an issue in `PackageCheck` for `ros2doctor`. This improves the ability of the ros2doctor package to validate packages.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_34\n\n\n\n----------------------------------------\n\nTITLE: Installing VS Code\nDESCRIPTION: This snippet installs VS Code by first updating the apt package index, installing necessary dependencies, adding the Microsoft package repository, and finally installing VS Code using the apt package manager. Prerequisites include an updated system with apt.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt update\n$ sudo apt install software-properties-common apt-transport-https wget -y\n$ wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -\n$ sudo add-apt-repository \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\"\n$ sudo apt install code\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz (macOS)\nDESCRIPTION: This command installs Graphviz using the Homebrew package manager. Graphviz is a graph visualization software used by Sphinx to generate diagrams for the documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nbrew install graphviz\n```\n\n----------------------------------------\n\nTITLE: JavaScript Calculate DDS Ports from Domain and Participant ID\nDESCRIPTION: This JavaScript snippet provides the logic to calculate DDS UDP ports based on the provided Domain ID and Participant ID. It defines constants used in the DDS port calculation formula (PB, DG, PG) and specific offsets for different port types (d0, d1, d2, d3). The `calculate` function retrieves input values from HTML elements, applies the formulas, and updates the value of corresponding output HTML elements. It is triggered by changes in the Domain ID or Participant ID input fields and on page load.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Concepts/Intermediate/About-Domain-ID.rst#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n  window.addEventListener('load', (event) => {\n     calculate(event);\n  });\n  const discoveryMcastPort = document.querySelector('.discoveryMulticastPort');\n  const userMcastPort = document.querySelector('.userMulticastPort');\n  const discoveryUnicastPort = document.querySelector('.discoveryUnicastPort');\n  const userUnicastPort = document.querySelector('.userUnicastPort');\n\n  const domainID = document.getElementById('domainID');\n  const participantID = document.getElementById('participantID');\n\n  // calculate function\n  function calculate(event) {\n    const d0 = 0;\n    const d2 = 1;\n    const d1 = 10;\n    const d3 = 11;\n    const PB = 7400;\n    const DG = 250;\n    const PG = 2;\n\n    discoveryMcastPort.value = PB + (DG * domainID.value) + d0;\n    userMcastPort.value = PB + (DG * domainID.value) + d2;\n    discoveryUnicastPort.value = PB + (DG * domainID.value) + d1 + (PG * participantID.value);\n    userUnicastPort.value = PB + (DG * domainID.value) + d3 + (PG * participantID.value);\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Catkin Build in CMakeLists.txt - CMake\nDESCRIPTION: This build script is for Catkin (ROS 1) and specifies the minimum CMake version, project name, required dependencies, and how to install Python scripts. It uses 'catkin_python_setup' to prepare Python packaging, defines a catkin_package, and installs the 'talker_py_node' script in the appropriate binary directory. It is required for ROS 1 Python packages using Catkin.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/How-To-Guides/Migrating-from-ROS1/Migrating-Python-Package-Example.rst#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0.2)\nproject(talker_py)\n\nfind_package(catkin REQUIRED)\n\ncatkin_python_setup()\n\ncatkin_package()\n\ncatkin_install_python(PROGRAMS\n    scripts/talker_py_node\n    DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Fix topic IntProperty number ranges\nDESCRIPTION: This fixes the number ranges for `IntProperty` related to topics. This ensures that the ranges are properly configured and prevents unexpected behaviour. Dependency: rviz topic management.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Handling empty lists in ros2 param dump\nDESCRIPTION: This ensures `ros2 param dump` handles empty lists as an exception. This fixes an edge case.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_38\n\n\n\n----------------------------------------\n\nTITLE: Creating a directory for the kernel\nDESCRIPTION: Creates a directory named 'kernel' in the home directory and changes the current working directory to it. This isolates the kernel build files.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Building-Realtime-rt_preempt-kernel-for-ROS-2.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n   $ mkdir ~/kernel\n```\n\nLANGUAGE: console\nCODE:\n```\n   $ cd ~/kernel\n```\n\n----------------------------------------\n\nTITLE: Testing & Building Trace Tools in ROS2 with C++\nDESCRIPTION: Enhances and simplifies the trace testing framework in ROS2, including process marking, string handling, and parallel execution controls. Dependencies include standard C++ libraries and ROS2 tracing modules. Key functions include process tracing, string comparisons, and test assertions to verify tracing integrity.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_59\n\nLANGUAGE: C++\nCODE:\n```\n# Improve trace tools testing framework and simplify code\n# Install process mark functions and manage string includes\n# Use lttng_ust_tracef for tracing rather than deprecated methods\n\n```\n\n----------------------------------------\n\nTITLE: Building HTML documentation locally\nDESCRIPTION: This snippet shows how to build the ROS 2 HTML documentation locally using the make command.  It then opens the index.html file in a browser.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`make html`\n\n`sensible-browser build/html/index.html`\n```\n\n----------------------------------------\n\nTITLE: ROS2 tf2_ros library with API fixes and Node Interface Extensions in C++\nDESCRIPTION: Enhances tf2_ros by addressing upcoming API changes in rclcpp::Executor, adding NodeInterfaces to the Buffer, and refactoring code for style improvements. Dependencies include tf2_ros, rclcpp, and tf2_core. This facilitates robust transformation management in ROS2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_67\n\nLANGUAGE: C++\nCODE:\n```\n# Fix for upcoming rclcpp::Executor API changes\n# Add NodeInterfaces to Buffer\n# Reformat code for better style compliance\n\n```\n\n----------------------------------------\n\nTITLE: Fix Installation Directory in tf2_eigen_kdl in C++\nDESCRIPTION: Adjusts the build configuration for tf2_eigen_kdl to correctly install DLL files and simplifies dependencies setup by removing unnecessary target dependencies. Dependencies include CMake and tf2_eigen_kdl-specific libraries.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_64\n\nLANGUAGE: C++\nCODE:\n```\n# Fix installation directory of DLL files\n# Remove unnecessary ament_target_dependencies\n\n```\n\n----------------------------------------\n\nTITLE: Fixed alphabetical include order\nDESCRIPTION: This fixes the include order of header files for consistency. This improves code readability and maintainability. Dependencies are the C++ code and includes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_30\n\n\n\n----------------------------------------\n\nTITLE: use reference in range loops to avoid copy\nDESCRIPTION: This applies the use of references within range-based loops to prevent unnecessary object copying. Dependencies are the C++ compiler and the relevant code using range-based loops.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Fixing tests with get_type_description\nDESCRIPTION: This fixes tests that use the `get_type_description` service, especially when parameters are present within the `ros2cli` package. This corrects test behavior.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Adding marshalling functions\nDESCRIPTION: This adds marshalling functions for `rclpy.type_hash.TypeHash` (rep2011) in the `ros2cli` and `ros2topic` packages. This provides a means to process the new type hash format.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_29\n\n\n\n----------------------------------------\n\nTITLE: Creating reference targets and links in RST documentation\nDESCRIPTION: Shows how to create targets that can be referenced from anywhere in the documentation. This example defines a target called 'talker-listener' and then creates a link to that target.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_37\n\nLANGUAGE: rst\nCODE:\n```\n.. _talker-listener:\n\nTry some examples\n-----------------\n```\n\n----------------------------------------\n\nTITLE: Fixing parameter '--topics' description\nDESCRIPTION: This change fixes the description of the '--topics' parameter for the play functionality in `ros2bag`. This clarifies the usage of the parameter.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Creating Directory for Bag Files - macOS\nDESCRIPTION: Creates a directory named `bag_files` and navigates into it using the command line on a macOS system. This directory is used to store the rosbag recordings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmkdir bag_files\ncd bag_files\n```\n\n----------------------------------------\n\nTITLE: Inserting images in RST documentation\nDESCRIPTION: Shows how to insert images using the image directive. This example references an image file located in the images/ directory relative to the RST file.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_33\n\nLANGUAGE: rst\nCODE:\n```\n.. image:: images/turtlesim_follow1.png\n```\n\n----------------------------------------\n\nTITLE: Removing references to index.ros.org\nDESCRIPTION: This removes references to `https://index.ros.org` from the `ros2doctor` package.  This could be the result of changes in infrastructure.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Jazzy-Jalisco-Complete-Changelog.rst#_snippet_33\n\n\n\n----------------------------------------\n\nTITLE: Bash directive for terminal commands without output\nDESCRIPTION: Shows how to use the bash directive for terminal commands that don't include output lines. This is one approach for commands meant to be run in a terminal without showing any output.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsource /opt/ros/{DISTRO}/setup.bash\nros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: Service Node Log Output\nDESCRIPTION: Log output from the service node showing the received request data.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.rst#_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [minimal_service]: request: 41 + 1\n```\n\n----------------------------------------\n\nTITLE: Create local table of contents in reStructuredText\nDESCRIPTION: This snippet shows how to create a local table of contents in reStructuredText with a specified depth and title.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_18\n\nLANGUAGE: rst\nCODE:\n```\n.. contents:: Table of Contents\n   :depth: 2\n   :local:\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace to IBM Cloud Container Registry - IBM Cloud CLI - console\nDESCRIPTION: This snippet illustrates how to add a new namespace to the IBM Cloud Container Registry for organizing images. Prerequisites include access to an IBM Cloud account, the IBM Cloud CLI, and the container registry plugin. The namespace parameter should be unique and descriptive. Input is the namespace name; output is confirmation of the new namespace creation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Miscellaneous/Deploying-ROS-2-on-IBM-Cloud.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ibmcloud cr namespace-add ros2nasr\n```\n\n----------------------------------------\n\nTITLE: Creating the Action Directory\nDESCRIPTION: Commands to create a directory for storing action definitions within the ROS 2 package.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Creating-an-Action.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd custom_action_interfaces\n$ mkdir action\n```\n\n----------------------------------------\n\nTITLE: Navigating to the src directory - Windows\nDESCRIPTION: This command changes the current directory to the 'src' directory within the 'ros2_ws' workspace. This is where the package will be created. Note the different path separator.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-Client-Libraries/Creating-Your-First-ROS2-Package.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd \\ros2_ws\\src\n```\n\n----------------------------------------\n\nTITLE: Change directory to ROS 2 Documentation\nDESCRIPTION: Changes the current directory to the cloned ROS 2 documentation directory.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_25\n\nLANGUAGE: console\nCODE:\n```\ncd ./ros2_documentation\n```\n\n----------------------------------------\n\nTITLE: bash code block example\nDESCRIPTION: Demonstrates the use of the `bash` code block for displaying bash scripts. Includes example commands for setting environment variables and running ROS 2 nodes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nexport ROS_DOMAIN_ID=42\nros2 run turtlesim turtlesim_node\n```\n\n----------------------------------------\n\nTITLE: rviz_common: Remove variadic macro warning check\nDESCRIPTION: This removes the warning check for variadic macros. Dependencies are rviz_common and the code using the macros.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_27\n\n\n\n----------------------------------------\n\nTITLE: Fix the order of destructors\nDESCRIPTION: This changes the order in which destructors are called to avoid potential issues when objects depend on each other. Dependencies depend on what the destructors manage.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Galactic-Geochelone-Complete-Changelog.rst#_snippet_28\n\n\n\n----------------------------------------\n\nTITLE: Running a spelling check\nDESCRIPTION: This snippet demonstrates how to run a spelling check on the ROS 2 documentation using the make command. It also mentions the files used to whitelist ignored words and include custom corrections.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n`make spellcheck`\n```\n\n----------------------------------------\n\nTITLE: Updating to C++17 in Examples\nDESCRIPTION: This snippet indicates that examples in the `examples_rclcpp_*` packages have been updated to use C++17. This likely involves changes to the build configuration and potentially the source code to leverage C++17 features. The specific changes depend on the exact examples.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Releases/Iron-Irwini-Complete-Changelog.rst#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Creating Directory for Bag Files - Linux\nDESCRIPTION: Creates a directory named `bag_files` and navigates into it using the command line on a Linux system.  This directory is used to store the rosbag recordings.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-Playing-Back-Data.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nmkdir bag_files\ncd bag_files\n```\n\n----------------------------------------\n\nTITLE: Using bash directive for terminal commands\nDESCRIPTION: Shows the same terminal commands using the bash directive. Unlike the console directive, bash doesn't differentiate between commands and output, making it less suitable when outputs need to be shown.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ export ROS_DOMAIN_ID=42\n$ ros2 run turtlesim turtlesim_node --ros-args --remap \"__node:=my_turtle\"\n[INFO] [1742150439.022947971] [my_turtle]: Starting turtlesim with node name /my_turtle\n[INFO] [1742150439.026043867] [my_turtle]: Spawning turtle [turtle1] at x=[5.544445], y=[5.544445], theta=[0.000000]\n```\n\n----------------------------------------\n\nTITLE: Downloading ROS Wiki Page (wget)\nDESCRIPTION: This is an example of how to download a ROS Wiki page to an HTML file using wget. This is a step in migrating content from the ROS Wiki to the ROS 2 documentation.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/The-ROS2-Project/Contributing/Contributing-To-ROS-2-Documentation.rst#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nwget -O urdf.html https://wiki.ros.org/urdf\n```\n\n----------------------------------------\n\nTITLE: Parameter Update Callback Output\nDESCRIPTION: Console output showing the log message from the parameter event handler when it detects a parameter change. This demonstrates successful monitoring of remote parameter changes.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Intermediate/Monitoring-For-Parameter-Changes-CPP.rst#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n[INFO] [1606952588.237531933] [node_with_parameters]: cb2: Received an update to parameter \"a_double_param\" of type: double: \"3.45\"\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for ROS 2 Composition\nDESCRIPTION: BibTeX entry for citing ROS 2 Composition functionality, referencing the 2023 IEEE RA-L paper 'Impact of ROS 2 Node Composition in Robotic Systems' by Macenski et al.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Citations.rst#_snippet_1\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{doi:10.48550/arXiv.2305.09933,\n    author = {Steven Macenski and Alberto Soragna and Michael Carroll and Zhenpeng Ge},\n    title = {Impact of ROS 2 Node Composition in Robotic Systems},\n    journal = {IEEE Robotics and Autonomous Letters (RA-L)},\n    year = {2023},\n    doi = {10.48550/arXiv.2305.09933},\n    URL = {https://arxiv.org/abs/2305.09933}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment for Redundant Discovery Servers in Windows\nDESCRIPTION: Empty placeholder for setting up redundant discovery servers in Windows, as the tutorial does not provide the specific command.\nSOURCE: https://github.com/ros2/ros2_documentation/blob/rolling/source/Tutorials/Advanced/Discovery-Server/Discovery-Server.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n\n```"
  }
]