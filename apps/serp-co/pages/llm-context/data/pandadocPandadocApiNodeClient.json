[
  {
    "owner": "pandadoc",
    "repo": "pandadoc-api-node-client",
    "content": "TITLE: Retrieving Document Details with PandaDoc API in TypeScript\nDESCRIPTION: This snippet shows how to retrieve details of a specific document using the PandaDoc API client. It initializes the API client with an API key and calls the detailsDocument method with the document ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiDetailsDocumentRequest = {\n  // string | Document ID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n};\n\napiInstance.detailsDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with PandaDoc API in TypeScript\nDESCRIPTION: This example shows how to create a new document using a PandaDoc template with the Node.js client. It demonstrates configuring the API client, setting document properties like name, recipients, tokens, pricing tables, and content placeholders, and handling the API response.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiCreateDocumentRequest = {\n  // DocumentCreateRequest | Use a PandaDoc template or an existing PDF to create a document. See the creation request examples [by template](/schemas/DocumentCreateByTemplateRequest) and [by pdf](/schemas/DocumentCreateByPdfRequest) \n  documentCreateRequest: {\n    name: \"API Sample Document from PandaDoc Template\",\n    detectTitleVariables: true,\n    templateUuid: \"hryJY9mqYZHjQCYQuSjRQg\",\n    folderUuid: \"QMDSzwabfFzTgjW4kUijqQ\",\n    owner: {\n      \"key\": \"key_example\",\n    },\n    recipients: [\n      {\n        email: \"josh@example.com\",\n        phone: \"+14842634627\",\n        deliveryMethods: {\n          email: true,\n          sms: false,\n        },\n        firstName: \"Josh\",\n        lastName: \"Ron\",\n        role: \"user\",\n        signingOrder: 1,\n        redirect: {\n          isEnabled: true,\n          url: \"https://example.com\",\n        },\n      },\n    ],\n    tokens: [\n      {\n        name: \"Favorite.Pet\",\n        value: \"Panda\",\n      },\n    ],\n    fields: {},\n    metadata: {},\n    tags: [\"created_via_api\",\"test_document\"],\n    images: [\n      {\n        urls: [\"https://s3.amazonaws.com/pd-static-content/public-docs/pandadoc-panda-bear.png\"],\n        name: \"Image 1\",\n      },\n    ],\n    pricingTables: [\n      {\n        name: \"Pricing Table 1\",\n        dataMerge: true,\n        options: {},\n        sections: [\n          {\n            title: \"Sample Section\",\n            _default: true,\n            multichoiceEnabled: false,\n            rows: [\n              {\n                options: {\n                  qtyEditable: true,\n                  optionalSelected: true,\n                  optional: true,\n                },\n                data: {},\n                customFields: {},\n              },\n            ],\n          },\n        ],\n      },\n    ],\n    contentPlaceholders: [\n      {\n        blockId: \"Content Placeholder 1\",\n        contentLibraryItems: [\n          {\n            id: \"hryJY9mqYZHjQCYQuSjRQg\",\n            pricingTables: [\n              {\n                name: \"Pricing Table 1\",\n                dataMerge: true,\n                options: {},\n                sections: [\n                  {\n                    title: \"Sample Section\",\n                    _default: true,\n                    multichoiceEnabled: false,\n                    rows: [\n                      {\n                        options: {\n                          qtyEditable: true,\n                          optionalSelected: true,\n                          optional: true,\n                        },\n                        data: {},\n                        customFields: {},\n                      },\n                    ],\n                  },\n                ],\n              },\n            ],\n            fields: {},\n            recipients: [\n              {\n                email: \"josh@example.com\",\n                phone: \"+14842634627\",\n                deliveryMethods: {\n                  email: true,\n                  sms: false,\n                },\n                firstName: \"Josh\",\n                lastName: \"Ron\",\n                role: \"user\",\n                signingOrder: 1,\n                redirect: {\n                  isEnabled: true,\n                  url: \"https://example.com\",\n                },\n              },\n            ],\n          },\n        ],\n      },\n    ],\n    url: \"https://s3.amazonaws.com/pd-static-content/public-docs/pandadoc-panda-bear.png\",\n    parseFormFields: true,\n  },\n  // string | Set this parameter as `ev1` if you want to create a document from PDF with Classic Editor when both editors are enabled for the workspace. (optional)\n  editorVer: \"ev2\",\n};\n\napiInstance.createDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using PandaDoc SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the PandaDoc SDK with an API key, create a configuration object, and use the TemplatesApi to list templates. It shows the basic setup and a simple API call.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from \"pandadoc-node-client\";\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\n\nconst apiInstance = new pd_api.TemplatesApi(configuration);\n\napiInstance.listTemplates({ deleted: false, tag: [\"doe-inc-proposals\"] }).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Documents with PandaDoc Node.js Client\nDESCRIPTION: Example of retrieving a list of documents using the PandaDoc API with Node.js client. It demonstrates comprehensive filtering options including date ranges, status filters, metadata search, and pagination. The response is a DocumentListResponse containing matching documents.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiListDocumentsRequest = {\n  // string | Return results where the `date_completed` field (ISO 8601) is greater than or equal to this value. (optional)\n  completedFrom: \"2021-10-27T15:22:23.132757Z\",\n  // string | Return results where the `date_completed` field (ISO 8601) is less than or equal to this value. (optional)\n  completedTo: \"2021-10-27T15:22:23.132757Z\",\n  // string | Returns results where 'contact_id' is present in document as recipient or approver (optional)\n  contactId: \"9FeAY2NB3C9qDdtQRb4tTL\",\n  // number | Specify how many document results to return. Default is 50 documents, maximum is 100 documents. (optional)\n  count: 50,\n  // string | Return results where the `date_created` field (ISO 8601) is greater than or equal to this value. (optional)\n  createdFrom: \"2021-10-27T15:22:23.132757Z\",\n  // string | Return results where the `date_created` field (ISO 8601) is less than this value. (optional)\n  createdTo: \"2021-10-27T15:22:23.132757Z\",\n  // boolean | Returns only the deleted documents. (optional)\n  deleted: true,\n  // string (optional)\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | The UUID of the folder where the documents are stored. (optional)\n  folderUuid: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Specify the form used for documents creation. This parameter can't be used with template_id. (optional)\n  formId: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Returns results where 'membership_id' is present in document as owner (should be member uuid) (optional)\n  membershipId: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // Array<string> | Specify metadata to filter by in the format of `metadata_{metadata-key}={metadata-value}` such as `metadata_opportunity_id=2181432`. The `metadata_` prefix is always required. (optional)\n  metadata: [\"metadata_opportunity_id=2181432\",\"metadata_custom_key=custom_value\"],\n  // string | Return results where the `date_modified` field (iso-8601) is greater than or equal to this value. (optional)\n  modifiedFrom: \"2021-10-27T15:22:23.132757Z\",\n  // string | Return results where the `date_modified` field (iso-8601) is less than this value. (optional)\n  modifiedTo: \"2021-10-27T15:22:23.132757Z\",\n  // DocumentOrderingFieldsEnum | Specify the order of documents to return. Use `value` (for example, `date_created`) for ASC and `-value` (for example, `-date_created`) for DESC. (optional)\n  orderBy: \"name\",\n  // number | Specify which page of the dataset to return. (optional)\n  page: 1,\n  // string | Search query. Filter by document reference number (this token is stored on the template level) or name. (optional)\n  q: \"Sample Document\",\n  // DocumentStatusRequestEnum | Specify the status of documents to return.   * 0: document.draft   * 1: document.sent   * 2: document.completed   * 3: document.uploaded   * 4: document.error   * 5: document.viewed   * 6: document.waiting_approval   * 7: document.approved   * 8: document.rejected   * 9: document.waiting_pay   * 10: document.paid   * 11: document.voided   * 12: document.declined   * 13: document.external_review  (optional)\n  status: 12,\n  // DocumentStatusRequestEnum | Specify the status of documents to return (exclude).   * 0: document.draft   * 1: document.sent   * 2: document.completed   * 3: document.uploaded   * 4: document.error   * 5: document.viewed   * 6: document.waiting_approval   * 7: document.approved   * 8: document.rejected   * 9: document.waiting_pay   * 10: document.paid   * 11: document.voided   * 12: document.declined   * 13: document.external_review  (optional)\n  statusNe: 12,\n  // string | Search tag. Filter by document tag. (optional)\n  tag: \"tag_1\",\n  // string | Specify the template used for documents creation. Parameter can't be used with form_id. (optional)\n  templateId: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n};\n\napiInstance.listDocuments(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Downloading a Protected Document with PandaDoc Node.js Client\nDESCRIPTION: Example of downloading a protected (signed) PDF document using the PandaDoc API with Node.js client. This demonstrates how to download a document that has been completed and signed, with an option to receive multiple documents as separate files in a ZIP archive.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiDownloadProtectedDocumentRequest = {\n  // string | Specify document ID.\n  id: \"Mebvyy3NGsGBnY2rPLkH84\",\n  // boolean | Set as `true` if you want to receive a zip file with all documents in separate when document transaction contains more than 1. (optional)\n  separateFiles: true,\n};\n\napiInstance.downloadProtectedDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating Document Details with PandaDoc API in TypeScript\nDESCRIPTION: This snippet demonstrates how to update an existing document's details including name, recipients, fields, tokens, metadata, and pricing tables. It uses the PandaDoc API client with an API key for authentication and requires the document ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiUpdateDocumentRequest = {\n  // string | Document ID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // DocumentUpdateRequest\n  documentUpdateRequest: {\n    name: \"Contract\",\n    recipients: [\n      {\n        id: \"id_example\",\n        email: \"josh@example.com\",\n        phone: \"+14842634627\",\n        firstName: \"Josh\",\n        lastName: \"Ron\",\n        deliveryMethods: {\n          email: true,\n          sms: false,\n        },\n        redirect: {\n          isEnabled: true,\n          url: \"https://example.com\",\n        },\n      },\n    ],\n    fields: {},\n    tokens: [\n      {\n        name: \"Favorite.Pet\",\n        value: \"Panda\",\n      },\n    ],\n    metadata: {},\n    pricingTables: [\n      {\n        name: \"Pricing Table 1\",\n        dataMerge: true,\n        options: {},\n        sections: [\n          {\n            title: \"Sample Section\",\n            _default: true,\n            multichoiceEnabled: false,\n            rows: [\n              {\n                options: {\n                  qtyEditable: true,\n                  optionalSelected: true,\n                  optional: true,\n                },\n                data: {},\n                customFields: {},\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n};\n\napiInstance.updateDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Sending Document Example - TypeScript PandaDoc API\nDESCRIPTION: Example demonstrating how to send a document using the PandaDoc API client. Includes options for message, subject, silent mode, and forwarding settings.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiSendDocumentRequest = {\n  // string | Document ID\n  id: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n  // DocumentSendRequest\n  documentSendRequest: {\n    message: \"Hello! This document was sent from the PandaDoc API\",\n    subject: \"Please check this test API document from PandaDoc\",\n    silent: true,\n    sender: {\n      \"key\": \"key_example\",\n    },\n    forwardingSettings: {\n      forwardingAllowed: true,\n      forwardingWithReassigningAllowed: true,\n    },\n    selectedApprovers: {\n      steps: [\n        {\n          id: \"LzWmancTxrgfTMpsJP9Eqd\",\n          group: {\n            id: \"op9MA75HygJHiV4aeVHXCH\",\n            type: \"selectable\",\n            assignees: [\n              {\n                user: \"tpBLrk3vJoLggypMSRt92i\",\n                isSelected: true,\n              },\n            ],\n          },\n        },\n      ],\n    },\n  },\n};\n\napiInstance.sendDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Changing Document Status with PandaDoc API in TypeScript\nDESCRIPTION: This example demonstrates how to change a document's status using the PandaDoc API. It includes setting up the API client with authentication, specifying the document ID, and updating its status with optional parameters like adding a note and notifying recipients.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiChangeDocumentStatusRequest = {\n  // string | Specify document ID.\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // DocumentStatusChangeRequest\n  documentStatusChangeRequest: {\n    status: 12,\n    note: \"A private note\",\n    notifyRecipients: true,\n  },\n};\n\napiInstance.changeDocumentStatus(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Webhook Subscription in PandaDoc API using TypeScript\nDESCRIPTION: Example of creating a new webhook subscription using the PandaDoc API. This includes configuring the API client with authentication and sending a create request with subscription details like name, URL, payload and triggers.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookSubscriptionsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookSubscriptionsApi(configuration);\n\nconst body:pd_api.WebhookSubscriptionsApiCreateWebhookSubscriptionRequest = {\n  webhookSubscriptionCreateRequest: {\n    name: \"My Subscription\",\n    url: \"https://example.com\",\n    payload: [\n      \"pricing\",\n    ],\n    triggers: [\n      \"document_state_changed\",\n    ],\n  },\n};\n\napiInstance.createWebhookSubscription(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact using PandaDoc Node.js Client\nDESCRIPTION: This snippet demonstrates how to create a new contact using the PandaDoc Node.js client library. It initializes the API instance with an API key and sends a POST request to create a contact with specified details.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContactsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContactsApi(configuration);\n\nconst body:pd_api.ContactsApiCreateContactRequest = {\n  // ContactCreateRequest\n  contactCreateRequest: {\n    email: \"user01@pandadoc.com\",\n    firstName: \"John\",\n    lastName: \"Doe\",\n    company: \"John Doe Inc.\",\n    jobTitle: \"CTO\",\n    phone: \"+14842634627\",\n    state: \"Texas\",\n    streetAddress: \"1313 Mockingbird Lane\",\n    city: \"Austin\",\n    postalCode: \"75001\",\n  },\n};\n\napiInstance.createContact(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Downloading a Document with PandaDoc Node.js Client\nDESCRIPTION: Example of downloading a document using the PandaDoc API with Node.js client. It demonstrates API initialization with an API key, setting optional watermark parameters, and handling document download. The response is an HttpFile object containing the PDF document.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiDownloadDocumentRequest = {\n  // string | Specify document ID.\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | HEX code (for example `#FF5733`). (optional)\n  watermarkColor: \"#FF5733\",\n  // number | Font size of the watermark. (optional)\n  watermarkFontSize: 12,\n  // number | In range 0.0-1.0 (optional)\n  watermarkOpacity: 0.5,\n  // string | Specify watermark text. (optional)\n  watermarkText: \"John Doe inc.\",\n  // boolean | Set as `true` if you want to receive a zip file with all documents in separate when document transaction contains more than 1. (optional)\n  separateFiles: true,\n};\n\napiInstance.downloadDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Templates with PandaDoc Node.js Client\nDESCRIPTION: Example showing how to list templates with optional filtering using the PandaDoc Node.js client library. The code initializes the API client with an API key, then calls the listTemplates endpoint with various optional parameters for filtering the results.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/TemplatesApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.TemplatesApi(configuration);\n\nconst body:pd_api.TemplatesApiListTemplatesRequest = {\n  // string | Optional search query. Filter by template name. (optional)\n  q: \"Sample onboarding template\",\n  // boolean | Returns only the shared templates. (optional)\n  shared: true,\n  // boolean | Optional. Returns only the deleted templates. (optional)\n  deleted: true,\n  // number | Optionally, specify how many templates to return. Default is 50 templates, maximum is 100 templates. (optional)\n  count: 10,\n  // number | Optionally, specify which page of the dataset to return. (optional)\n  page: 1,\n  // string | Optionally, specify template ID. (optional)\n  id: \"e9LxBesSL73AeZMzeYdfvV\",\n  // string | UUID of the folder where the templates are stored. (optional)\n  folderUuid: \"xDKHoJ8DkwhiTQSUzNveCJ\",\n  // Array<string> | Optional search tag. Filter by template tag. (optional)\n  tag: [\n    \"tag_example\",\n  ],\n  // string | A comma-separated list of additional fields to include in the response.  Each field must be a valid template property.  Currently, only one additional field, `content_date_modified`, is supported.  For example, `GET /templates?fields=content_date_modified`. (optional)\n  fields: \"fields_example\",\n};\n\napiInstance.listTemplates(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth 2.0 Access Token with PandaDoc API\nDESCRIPTION: Example of creating or refreshing an OAuth 2.0 access token using the PandaDoc Node.js client. Demonstrates configuration setup and making an access token request with optional parameters including grant type, client credentials, authorization code, scope, and refresh token.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/OAuth20AuthenticationApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.OAuth20AuthenticationApi(configuration);\n\nconst body:pd_api.OAuth20AuthenticationApiAccessTokenRequest = {\n  // string | This value must be set to `refresh_token`. (optional)\n  grantType: \"refresh_token\",\n  // string | Client ID that is automatically generated after application creation in the Developer Dashboard. (optional)\n  clientId: \"479a3c7ba4a8d3cf28702\",\n  // string | Client secret that is automatically generated after application creation in the Developer Dashboard. (optional)\n  clientSecret: \"a66515d3caf9183b8cad3eee546bcba892b45b01\",\n  // string | `auth_code` from the server on the previous step (Authorize a PandaDoc User).  (optional)\n  code: \"a9a60d4dabb61ade665c712d2b41766e7bb9a2f9\",\n  // string | Requested permissions. Use `read+write` as our default value to send documents. (optional)\n  scope: \"read+write\",\n  // string | `refresh_token` you received and stored from the server when initially creating an `access_token`.  (optional)\n  refreshToken: \"f61cc0cffd437c9a596f0acc8eb6f502a7a429d7\",\n};\n\napiInstance.accessToken(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a Document Link with PandaDoc API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a document link using the PandaDoc API client for Node.js. It initializes the API client with an API key, sets up the request parameters, and calls the createDocumentLink method.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiCreateDocumentLinkRequest = {\n  // string | Document ID\n  id: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n  // DocumentCreateLinkRequest\n  documentCreateLinkRequest: {\n    recipient: \"josh@example.com\",\n    lifetime: 900,\n  },\n};\n\napiInstance.createDocumentLink(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Moving a Document to a Folder with PandaDoc API in TypeScript\nDESCRIPTION: This example demonstrates how to move a document to a specific folder using the PandaDoc API client. It configures the API instance and calls the documentMoveToFolder method with the document ID and target folder ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiDocumentMoveToFolderRequest = {\n  // string | Specify document ID.\n  id: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n  // string | Specify folder ID.\n  folderId: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n};\n\napiInstance.documentMoveToFolder(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Document Attachments with PandaDoc API in TypeScript\nDESCRIPTION: This code demonstrates how to create an attachment for a document using the PandaDoc API. It shows authentication with an API key, configuring the client, and making a request with optional parameters for file upload, source URL, and custom name.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentAttachmentsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentAttachmentsApi(configuration);\n\nconst body:pd_api.DocumentAttachmentsApiCreateDocumentAttachmentRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // HttpFile | Binary file to be attached to a document (optional)\n  file: { data: Buffer.from(fs.readFileSync('/path/to/file', 'utf-8')), name: '/path/to/file' },\n  // string | URL link to the file to be attached to a document (optional)\n  source: \"https://is3-ssl.mzstatic.com/1e7fbd74-d10c-8e3a-63c3-0beb3ea231a5/512x512bb.jpg\",\n  // string | Optional name to set for uploaded file (optional)\n  name: \"Additional agreement\",\n};\n\napiInstance.createDocumentAttachment(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating Quotes with PandaDoc API using TypeScript\nDESCRIPTION: Example of how to update a quote using the PandaDoc Node.js client library. The code demonstrates configuring the API client with authentication and making a PUT request to update quote details including sections, items, pricing, and various settings.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/QuotesApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.QuotesApi(configuration);\n\nconst body:pd_api.QuotesApiQuoteUpdateRequest = {\n  // string | Document ID\n  documentId: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Quote ID\n  quoteId: \"99aaa4f9-3250-4f5b-a953-6d7bfc5d8c9e\",\n  // QuoteUpdateRequest\n  quoteUpdateRequest: {\n    sections: [\n      {\n        id: \"id_example\",\n        name: \"Section name\",\n        items: [\n          {\n            id: \"id_example\",\n            sku: \"#\",\n            name: \"\",\n            description: \"\",\n            qty: 10,\n            price: 42.42,\n            priceSettings: {\n              baseValue: 3.14,\n              tiers: [\n                {\n                  minQty: 1,\n                  value: 3.14,\n                },\n              ],\n            },\n            cost: 42.42,\n            billingFrequency: \"weekly\",\n            contractTerm: 1,\n            referenceId: \"referenceId_example\",\n            options: {\n              selected: true,\n              qtyEditable: true,\n              optional: false,\n            },\n            customColumns: {\n              \"key\": \"key_example\",\n            },\n            discounts: {\n              \"key\": {\n                type: \"percent\",\n                value: 3.14,\n              },\n            },\n            taxes: {\n              \"key\": {\n                type: \"percent\",\n                value: 3.14,\n              },\n            },\n            fees: {\n              \"key\": {\n                type: \"percent\",\n                value: 3.14,\n              },\n            },\n            multipliers: {\n              \"key\": 3.14,\n            },\n          },\n        ],\n        settings: {\n          optional: true,\n          selected: true,\n          selectionType: \"custom\",\n        },\n      },\n    ],\n    settings: {\n      selectionType: \"custom\",\n    },\n  },\n};\n\napiInstance.quoteUpdate(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Contacts using PandaDoc Node.js Client\nDESCRIPTION: This snippet shows how to list contacts using the PandaDoc Node.js client library. It initializes the API instance with an API key and sends a GET request to retrieve a list of contacts, with an optional email filter.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContactsApi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContactsApi(configuration);\n\nconst body:pd_api.ContactsApiListContactsRequest = {\n  // string | Optional search parameter. Filter results by exact match. (optional)\n  email: \"josh@example.com\",\n};\n\napiInstance.listContacts(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Subscription in PandaDoc API using TypeScript\nDESCRIPTION: Example of updating an existing webhook subscription with new parameters like name, URL, active status, payload and triggers. Shows complete request configuration and error handling.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookSubscriptionsApi.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookSubscriptionsApi(configuration);\n\nconst body:pd_api.WebhookSubscriptionsApiUpdateWebhookSubscriptionRequest = {\n  id: \"id_example\",\n  webhookSubscriptionPatchRequest: {\n    name: \"My Subscription\",\n    url: \"https://example.com\",\n    active: true,\n    payload: [\n      \"pricing\",\n    ],\n    triggers: [\n      \"document_state_changed\",\n    ],\n  },\n};\n\napiInstance.updateWebhookSubscription(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Checking Document Status Example - TypeScript PandaDoc API\nDESCRIPTION: Example showing how to check the status of a document using the PandaDoc API client. Requires document ID and returns status information.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiStatusDocumentRequest = {\n  // string | Specify document ID.\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n};\n\napiInstance.statusDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Document Attachments with PandaDoc API in TypeScript\nDESCRIPTION: This code demonstrates how to retrieve a list of all attachments associated with a specific document using the PandaDoc API. It only requires the document UUID to return all attached objects.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentAttachmentsApi.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentAttachmentsApi(configuration);\n\nconst body:pd_api.DocumentAttachmentsApiListDocumentAttachmentsRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n};\n\napiInstance.listDocumentAttachments(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Details with PandaDoc Node.js Client\nDESCRIPTION: Example showing how to retrieve detailed information about a template using the PandaDoc Node.js client library. The code initializes the API client with an API key, then calls the detailsTemplate endpoint with a template ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/TemplatesApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.TemplatesApi(configuration);\n\nconst body:pd_api.TemplatesApiDetailsTemplateRequest = {\n  // string | Template ID\n  id: \"EE8yUNg5HztqVAuH85He8V\",\n};\n\napiInstance.detailsTemplate(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Downloading Document Attachments with PandaDoc API in TypeScript\nDESCRIPTION: This code shows how to download a document attachment file using the PandaDoc API. The method returns the file content as an HttpFile object, which can be saved or processed as needed.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentAttachmentsApi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentAttachmentsApi(configuration);\n\nconst body:pd_api.DocumentAttachmentsApiDownloadDocumentAttachmentRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Attachment UUID\n  attachmentId: \"89ce2f49-10fb-4e9b-b5f3-e28be2a5c042\",\n};\n\napiInstance.downloadDocumentAttachment(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Webhook Events with Filtering Options Using PandaDoc API\nDESCRIPTION: Example of using the listWebhookEvent method to retrieve a paginated list of webhook events with various filtering options. Parameters include pagination controls and filtering by timestamp, event type, HTTP status code, and error type.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookEventsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookEventsApi(configuration);\n\nconst body:pd_api.WebhookEventsApiListWebhookEventRequest = {\n  // number | Number of element in page\n  count: 0,\n  // number | Page number\n  page: 0,\n  // Date | Filter option: all events from specified timestamp (optional)\n  since: new Date('1970-01-01T00:00:00.00Z'),\n  // Date | Filter option: all events up to specified timestamp (optional)\n  to: new Date('1970-01-01T00:00:00.00Z'),\n  // Array<WebhookEventTriggerEnum> | Filter option: all events of type (optional)\n  type: [\n    \"document_state_changed\",\n  ],\n  // Array<WebhookEventHttpStatusCodeGroupEnum> | Filter option: all events of http status code (optional)\n  httpStatusCode: [\n    400,\n  ],\n  // Array<WebhookEventErrorEnum> | Filter option: all events with following error (optional)\n  error: [\n    \"TIMEOUT_ERROR\",\n  ],\n};\n\napiInstance.listWebhookEvent(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a User using PandaDoc API in TypeScript\nDESCRIPTION: This snippet shows how to create a user using the PandaDoc API. It includes setting up the API configuration, creating an instance of the UserAndWorkspaceManagementApi, and calling the createUser method with the required parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/UserAndWorkspaceManagementApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.UserAndWorkspaceManagementApi(configuration);\n\nconst body:pd_api.UserAndWorkspaceManagementApiCreateUserRequest = {\n  // CreateUserRequest\n  createUserRequest: {\n    user: {\n      email: \"email@example.com\",\n      firstName: \"John\",\n      lastName: \"Doe\",\n      phoneNumber: \"+14842634627\",\n    },\n    workspaces: [\n      {\n        workspaceId: \"2eWSKSvVqmuVCnuUK3iWwD\",\n        role: \"Admin\",\n      },\n    ],\n    license: \"Full\",\n  },\n  // boolean | Send a confirmation email to the user that was added to workspace(s). (optional)\n  notifyUser: true,\n  // boolean | Send a confirmation email to all workspace admins indicating that the user has been added to the workspace. (optional)\n  notifyWsAdmins: true,\n};\n\napiInstance.createUser(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contact Details using PandaDoc Node.js Client\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a specific contact by their ID using the PandaDoc Node.js client library. It initializes the API instance with an API key and sends a GET request to fetch the contact details.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContactsApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContactsApi(configuration);\n\nconst body:pd_api.ContactsApiDetailsContactRequest = {\n  // string | Contact id.\n  id: \"SyoufNkJiHRn24LpuJ7RXb\",\n};\n\napiInstance.detailsContact(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Adding Document Recipient in PandaDoc API - TypeScript\nDESCRIPTION: Demonstrates how to add a recipient as CC to a document using the PandaDoc API. Requires API key authentication and accepts document UUID and recipient details as parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentRecipientsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentRecipientsApi(configuration);\n\nconst body:pd_api.DocumentRecipientsApiAddDocumentRecipientRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // DocumentRecipientCreateRequest\n  documentRecipientCreateRequest: {\n    id: \"2eWSKSvVqmuVCnuUK3iWwD\",\n    kind: \"contact\",\n  },\n};\n\napiInstance.addDocumentRecipient(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Forms with PandaDoc API in TypeScript\nDESCRIPTION: Example of how to list forms using the PandaDoc Node.js client. This code demonstrates initializing the API client with an API key and making a request to retrieve forms with various filtering options such as count, page, status, and sorting preferences.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FormsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FormsApi(configuration);\n\nconst body:pd_api.FormsApiListFormRequest = {\n  // number | Optionally, specify how many forms to return. Default is 50 forms, maximum is 100 forms. (optional)\n  count: 10,\n  // number | Optionally, specify which page of the dataset to return. (optional)\n  page: 1,\n  // Array<'draft' | 'active' | 'disabled'> | Optionally, specify which status of the forms dataset to return. (optional)\n  status: [\n    \"draft\",\n  ],\n  // 'name' | 'responses' | 'status' | 'created_date' | 'modified_date' | Optionally, specify the form dataset order to return. (optional)\n  orderBy: \"name\",\n  // boolean | Optionally, specify sorting the result-set in ascending or descending order. (optional)\n  asc: true,\n  // string | Specify the form name. (optional)\n  name: \"New Form\",\n};\n\napiInstance.listForm(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing API Logs using TypeScript PandaDoc Client\nDESCRIPTION: Shows how to retrieve a list of API logs with optional filtering by date range, pagination, status codes, HTTP methods, and environment type. Supports comprehensive query parameters for filtered results.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/APILogsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.APILogsApi(configuration);\n\nconst body:pd_api.APILogsApiListLogsRequest = {\n  since: \"-7d\",\n  to: \"now\",\n  count: 10,\n  page: 1,\n  statuses: [400,500],\n  methods: [\"GET\",\"POST\"],\n  search: \"documents/hryJY9mqYZHjQCYQuSjRQg/send\",\n  environmentType: \"PRODUCTION\",\n};\n\napiInstance.listLogs(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Details of a Content Library Item in TypeScript\nDESCRIPTION: This example demonstrates how to retrieve detailed information about a specific content library item by its ID. It uses the PandaDoc Node.js client to authenticate with an API key and make a request to the details endpoint.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContentLibraryItemsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContentLibraryItemsApi(configuration);\n\nconst body:pd_api.ContentLibraryItemsApiDetailsContentLibraryItemRequest = {\n  // string | Content Library Item ID\n  id: \"UXdP7Lnbvvr4WEb2wzM2hc\",\n};\n\napiInstance.detailsContentLibraryItem(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Renaming Document Folder with PandaDoc API in TypeScript\nDESCRIPTION: Updates the name of an existing document folder using the PandaDoc API. Requires folder UUID and new name as parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FoldersAPIApi.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FoldersAPIApi(configuration);\n\nconst body:pd_api.FoldersAPIApiRenameDocumentFolderRequest = {\n  // string | The UUID of the folder that you are renaming.\n  id: \"Nq8htXxFssmhRxAPSP4SBP\",\n  // DocumentsFolderRenameRequest\n  documentsFolderRenameRequest: {\n    name: \"Another document folder\",\n  },\n};\n\napiInstance.renameDocumentFolder(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace using PandaDoc API in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a workspace using the PandaDoc API. It includes setting up the API configuration, creating an instance of the UserAndWorkspaceManagementApi, and calling the createWorkspace method with the required parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/UserAndWorkspaceManagementApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.UserAndWorkspaceManagementApi(configuration);\n\nconst body:pd_api.UserAndWorkspaceManagementApiCreateWorkspaceRequest = {\n  // CreateWorkspaceRequest\n  createWorkspaceRequest: {\n    name: \"A new workspace\",\n  },\n};\n\napiInstance.createWorkspace(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Document Folder with PandaDoc API in TypeScript\nDESCRIPTION: Creates a new folder for storing documents using the PandaDoc API. Requires API key authentication and accepts folder name and optional parent UUID as parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FoldersAPIApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FoldersAPIApi(configuration);\n\nconst body:pd_api.FoldersAPIApiCreateDocumentFolderRequest = {\n  // DocumentsFolderCreateRequest\n  documentsFolderCreateRequest: {\n    name: \"A new document folder\",\n    parentUuid: \"Nq8htXxFssmhRxAPSP4SBP\",\n  },\n};\n\napiInstance.createDocumentFolder(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating a Linked Object with PandaDoc API in TypeScript\nDESCRIPTION: This example shows how to create a linked object for a document using the PandaDoc API client. It sets up the API configuration, prepares the request body with document ID and linked object details, and calls the createLinkedObject method.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiCreateLinkedObjectRequest = {\n  // string | Specify document ID.\n  id: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n  // LinkedObjectCreateRequest\n  linkedObjectCreateRequest: {\n    provider: \"pipedrive\",\n    entityType: \"deal\",\n    entityId: \"9372\",\n  },\n};\n\napiInstance.createLinkedObject(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Member Details by ID with PandaDoc API in TypeScript\nDESCRIPTION: Example of using the detailsMember method to retrieve a specific member's details by their ID. This endpoint requires the member ID parameter and returns a MemberDetailsResponse object with the member's information.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/MembersApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.MembersApi(configuration);\n\nconst body:pd_api.MembersApiDetailsMemberRequest = {\n  // string | Membership id\n  id: \"radQBiBkU7MBk59NSgaGf5\",\n};\n\napiInstance.detailsMember(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Attachment Details with PandaDoc API in TypeScript\nDESCRIPTION: This code demonstrates how to retrieve detailed information about a specific document attachment using the PandaDoc API. It requires both the document UUID and attachment UUID to identify the specific attachment.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentAttachmentsApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentAttachmentsApi(configuration);\n\nconst body:pd_api.DocumentAttachmentsApiDetailsDocumentAttachmentRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Attachment UUID\n  attachmentId: \"89ce2f49-10fb-4e9b-b5f3-e28be2a5c042\",\n};\n\napiInstance.detailsDocumentAttachment(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating a Contact using PandaDoc Node.js Client\nDESCRIPTION: This snippet demonstrates how to update an existing contact's information using the PandaDoc Node.js client library. It initializes the API instance with an API key and sends a PATCH request to update the specified contact details.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContactsApi.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContactsApi(configuration);\n\nconst body:pd_api.ContactsApiUpdateContactRequest = {\n  // string | Contact id.\n  id: \"SyoufNkJiHRn24LpuJ7RXb\",\n  // ContactUpdateRequest\n  contactUpdateRequest: {\n    email: \"user01@pandadoc.com\",\n    firstName: \"John\",\n    lastName: \"Doe\",\n    company: \"John Doe Inc.\",\n    jobTitle: \"CTO\",\n    phone: \"+14842634627\",\n    state: \"Texas\",\n    streetAddress: \"1313 Mockingbird Lane\",\n    city: \"Austin\",\n    postalCode: \"75001\",\n  },\n};\n\napiInstance.updateContact(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Log Details using TypeScript PandaDoc Client\nDESCRIPTION: Demonstrates how to retrieve detailed information about a specific API log event using the PandaDoc Node.js client. Requires API key authentication and accepts a log event ID as input.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/APILogsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.APILogsApi(configuration);\n\nconst body:pd_api.APILogsApiDetailsLogRequest = {\n  // string | Log event id.\n  id: \"AXp2jrHMK2MKv_lRqmQ\",\n};\n\napiInstance.detailsLog(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Transferring Single Document Ownership with PandaDoc API in TypeScript\nDESCRIPTION: This snippet shows how to transfer ownership of a specific document to another user. It requires the document ID and the target membership ID, using the PandaDoc API client with proper authentication.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiTransferDocumentOwnershipRequest = {\n  // string | Specify document ID.\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // DocumentTransferOwnershipRequest\n  documentTransferOwnershipRequest: {\n    membershipId: \"radQBiBkU7MBk59NSgaGfd\",\n  },\n};\n\napiInstance.transferDocumentOwnership(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Transferring All Documents Ownership with PandaDoc API in TypeScript\nDESCRIPTION: This snippet demonstrates how to transfer ownership of all documents from one user to another using the PandaDoc API. It initializes the API client with an API key and makes a request with source and target membership IDs.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiTransferAllDocumentsOwnershipRequest = {\n  // DocumentTransferAllOwnershipRequest\n  documentTransferAllOwnershipRequest: {\n    fromMembershipId: \"Dqsxp4jNnFcS63tJEgLJGN\",\n    toMembershipId: \"radQBiBkU7MBk59NSgaGfd\",\n  },\n};\n\napiInstance.transferAllDocumentsOwnership(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Event Details with TypeScript PandaDoc API Client\nDESCRIPTION: Example of using the detailsWebhookEvent method to retrieve details of a specific webhook event by UUID. The API key authentication method is used to authorize the request.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookEventsApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookEventsApi(configuration);\n\nconst body:pd_api.WebhookEventsApiDetailsWebhookEventRequest = {\n  // string | Webhook event uuid\n  id: \"id_example\",\n};\n\napiInstance.detailsWebhookEvent(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing All Workspace Members with PandaDoc API in TypeScript\nDESCRIPTION: Example of using the listMembers method to retrieve details for all members in the workspace. This endpoint requires API key or OAuth2 authentication and returns a MemberListResponse object containing all members' information.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/MembersApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.MembersApi(configuration);\n\nlet body:any = {};\n\napiInstance.listMembers(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Content Library Items with Optional Filtering in TypeScript\nDESCRIPTION: This example shows how to retrieve a list of content library items with optional filtering parameters. It supports filtering by name, ID, folder, tags, and also includes pagination options to control the number of results returned.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContentLibraryItemsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContentLibraryItemsApi(configuration);\n\nconst body:pd_api.ContentLibraryItemsApiListContentLibraryItemsRequest = {\n  // string | Search query. Filter by content library item name. (optional)\n  q: \"Sample Pricing Table\",\n  // string | Specify content library item ID. (optional)\n  id: \"UXdP7Lnbvvr4WEb2wzM2hc\",\n  // boolean | Returns only the deleted content library items. (optional)\n  deleted: true,\n  // string | The UUID of the folder where the content library items are stored. (optional)\n  folderUuid: \"S6xX7saJfA44mtJxGWd95L\",\n  // number | Specify how many content library items to return. Default is 50 content library items, maximum is 100 content library items. (optional)\n  count: 10,\n  // number | Specify which page of the dataset to return. (optional)\n  page: 1,\n  // string | Search tag. Filter by content library item tag. (optional)\n  tag: \"pricing_tables\",\n};\n\napiInstance.listContentLibraryItems(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Regenerating Webhook Subscription Shared Key API Endpoint\nDESCRIPTION: PATCH endpoint to regenerate the shared key for an existing webhook subscription using its ID. Accessed through the WebhookSubscriptionsApi class.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPATCH /public/v1/webhook-subscriptions/{id}/shared-key\n```\n\n----------------------------------------\n\nTITLE: Listing Linked Objects Example - TypeScript PandaDoc API\nDESCRIPTION: Example showing how to list linked objects for a document using the PandaDoc API client. Requires API key authentication and returns linked object data.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiListLinkedObjectsRequest = {\n  // string | Specify document ID.\n  id: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n};\n\napiInstance.listLinkedObjects(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing All Webhook Subscriptions in PandaDoc API using TypeScript\nDESCRIPTION: Example of retrieving a list of all webhook subscriptions. Demonstrates API client setup and making the list request.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookSubscriptionsApi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookSubscriptionsApi(configuration);\n\nlet body:any = {};\n\napiInstance.listWebhookSubscriptions(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Subscription Shared Key with PandaDoc API in TypeScript\nDESCRIPTION: Example of how to update a webhook subscription shared key using the PandaDoc Node.js API client. The code demonstrates API key authentication setup and making a request to update the shared key for a specific webhook subscription ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookSubscriptionsApi.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookSubscriptionsApi(configuration);\n\nconst body:pd_api.WebhookSubscriptionsApiUpdateWebhookSubscriptionSharedKeyRequest = {\n  // string | Webhook subscription uuid\n  id: \"id_example\",\n};\n\napiInstance.updateWebhookSubscriptionSharedKey(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Getting Webhook Subscription Details in PandaDoc API using TypeScript\nDESCRIPTION: Example of retrieving details for a specific webhook subscription using its UUID. Shows how to configure the API client and make the details request.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookSubscriptionsApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookSubscriptionsApi(configuration);\n\nconst body:pd_api.WebhookSubscriptionsApiDetailsWebhookSubscriptionRequest = {\n  id: \"id_example\",\n};\n\napiInstance.detailsWebhookSubscription(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Editing Document Recipient in PandaDoc API - TypeScript\nDESCRIPTION: Demonstrates how to edit a document recipient's details using the PandaDoc API. Accepts comprehensive recipient information including contact details and verification settings.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentRecipientsApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentRecipientsApi(configuration);\n\nconst body:pd_api.DocumentRecipientsApiEditDocumentRecipientRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Recipient UUID\n  recipientId: \"tf5dGS3Tmu3cj228ao6fnc\",\n  // DocumentRecipientEditRequest\n  documentRecipientEditRequest: {\n    email: \"user01@pandadoc.com\",\n    phone: \"+14842634627\",\n    deliveryMethods: {\n      email: true,\n      sms: false,\n    },\n    firstName: \"John\",\n    lastName: \"Doe\",\n    company: \"John Doe Inc.\",\n    jobTitle: \"CTO\",\n    state: \"Texas\",\n    streetAddress: \"1313 Mockingbird Lane\",\n    city: \"Austin\",\n    postalCode: \"75001\",\n    verificationSettings: {\n      verificationPlace: \"before_open\",\n      passcodeVerification: {\n        passcode: \"SimpleCode1\",\n      },\n      phoneVerification: {\n        phoneNumber: \"+1234567890\",\n      },\n    },\n    redirect: {\n      isEnabled: true,\n      url: \"https://example.com\",\n    },\n  },\n};\n\napiInstance.editDocumentRecipient(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Deleting Webhook Subscription in PandaDoc API using TypeScript\nDESCRIPTION: Example of deleting an existing webhook subscription by its UUID using the PandaDoc API. Includes authentication setup and error handling.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/WebhookSubscriptionsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.WebhookSubscriptionsApi(configuration);\n\nconst body:pd_api.WebhookSubscriptionsApiDeleteWebhookSubscriptionRequest = {\n  id: \"id_example\",\n};\n\napiInstance.deleteWebhookSubscription(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Reassigning Document Recipient in PandaDoc API - TypeScript\nDESCRIPTION: Shows how to replace a document recipient with another contact using the PandaDoc API. Requires document UUID, current recipient UUID, and new recipient details.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentRecipientsApi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentRecipientsApi(configuration);\n\nconst body:pd_api.DocumentRecipientsApiReassignDocumentRecipientRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Recipient UUID\n  recipientId: \"tf5dGS3Tmu3cj228ao6fnc\",\n  // DocumentRecipientCreateRequest\n  documentRecipientCreateRequest: {\n    id: \"2eWSKSvVqmuVCnuUK3iWwD\",\n    kind: \"contact\",\n  },\n};\n\napiInstance.reassignDocumentRecipient(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Creating Template Folder with PandaDoc API in TypeScript\nDESCRIPTION: Creates a new folder for storing templates using the PandaDoc API. Requires API key authentication and accepts folder name and optional parent UUID as parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FoldersAPIApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FoldersAPIApi(configuration);\n\nconst body:pd_api.FoldersAPIApiCreateTemplateFolderRequest = {\n  // TemplatesFolderCreateRequest\n  templatesFolderCreateRequest: {\n    name: \"A new template folder\",\n    parentUuid: \"Nq8htXxFssmhRxAPSP4SBP\",\n  },\n};\n\napiInstance.createTemplateFolder(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Document Folders with PandaDoc API in TypeScript\nDESCRIPTION: Retrieves a list of document folders from PandaDoc API. Supports pagination and filtering by parent folder UUID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FoldersAPIApi.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FoldersAPIApi(configuration);\n\nconst body:pd_api.FoldersAPIApiListDocumentFoldersRequest = {\n  // string | The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)\n  parentUuid: \"Nq8htXxFssmhRxAPSP4SBP\",\n  // number | Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)\n  count: 10,\n  // number | Optionally, specify which page of the dataset to return. (optional)\n  page: 1,\n};\n\napiInstance.listDocumentFolders(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Listing Template Folders with PandaDoc API in TypeScript\nDESCRIPTION: Retrieves a list of template folders from PandaDoc API. Supports pagination and filtering by parent folder UUID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FoldersAPIApi.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FoldersAPIApi(configuration);\n\nconst body:pd_api.FoldersAPIApiListTemplateFoldersRequest = {\n  // string | The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)\n  parentUuid: \"Nq8htXxFssmhRxAPSP4SBP\",\n  // number | Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)\n  count: 10,\n  // number | Optionally, specify which page of the dataset to return. (optional)\n  page: 1,\n};\n\napiInstance.listTemplateFolders(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Member Details with PandaDoc API in TypeScript\nDESCRIPTION: Example of using the detailsCurrentMember method to retrieve details about the currently authenticated member. This endpoint requires API key or OAuth2 authentication and returns a MemberDetailsResponse object.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/MembersApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.MembersApi(configuration);\n\nlet body:any = {};\n\napiInstance.detailsCurrentMember(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Deleting Document Attachments with PandaDoc API in TypeScript\nDESCRIPTION: This code shows how to delete a specific attachment from a document using the PandaDoc API. It requires both the document UUID and the attachment UUID to identify which attachment to remove.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentAttachmentsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentAttachmentsApi(configuration);\n\nconst body:pd_api.DocumentAttachmentsApiDeleteDocumentAttachmentRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Attachment UUID\n  attachmentId: \"89ce2f49-10fb-4e9b-b5f3-e28be2a5c042\",\n};\n\napiInstance.deleteDocumentAttachment(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Renaming Template Folder using PandaDoc Node.js API\nDESCRIPTION: Example of how to rename a template folder using the PandaDoc Node.js client. Demonstrates API key configuration, client initialization, and making a rename request with proper parameters. Returns a TemplatesFolderRenameResponse on success.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/FoldersAPIApi.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.FoldersAPIApi(configuration);\n\nconst body:pd_api.FoldersAPIApiRenameTemplateFolderRequest = {\n  // string | The UUID of the folder which you are renaming.\n  id: \"Nq8htXxFssmhRxAPSP4SBP\",\n  // TemplatesFolderRenameRequest\n  templatesFolderRenameRequest: {\n    name: \"Another template folder\",\n  },\n};\n\napiInstance.renameTemplateFolder(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document with PandaDoc API in TypeScript\nDESCRIPTION: This code snippet demonstrates how to delete a document using the PandaDoc API client. It configures the API instance with an API key and calls the deleteDocument method with the specified document ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiDeleteDocumentRequest = {\n  // string | Document ID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n};\n\napiInstance.deleteDocument(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Linked Object with PandaDoc API in TypeScript\nDESCRIPTION: This example illustrates how to delete a linked object associated with a document using the PandaDoc API client. It sets up the API configuration and calls the deleteLinkedObject method with the document ID and linked object ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentsApi.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentsApi(configuration);\n\nconst body:pd_api.DocumentsApiDeleteLinkedObjectRequest = {\n  // string | Specify document ID.\n  id: \"ZPeAfcpzr9aiVs5vqUf6jg\",\n  // string | Specify linked object ID.\n  linkedObjectId: \"deb0d530-d759-4189-a422-8d2265e01b2e\",\n};\n\napiInstance.deleteLinkedObject(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Adding a Member to a Workspace using PandaDoc API in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a member to a workspace using the PandaDoc API. It includes setting up the API configuration, creating an instance of the UserAndWorkspaceManagementApi, and calling the addMember method with the required parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/UserAndWorkspaceManagementApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.UserAndWorkspaceManagementApi(configuration);\n\nconst body:pd_api.UserAndWorkspaceManagementApiAddMemberRequest = {\n  // string\n  workspaceId: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // AddMemberRequest\n  addMemberRequest: {\n    userId: \"2eWSKSvVqmuVCnuUK3iWwD\",\n    role: \"Admin\",\n  },\n  // boolean | Send a confirmation email to the user that was added to workspace(s). (optional)\n  notifyUser: true,\n  // boolean | Send a confirmation email to all workspace admins indicating that the user has been added to the workspace. (optional)\n  notifyWsAdmins: true,\n};\n\napiInstance.addMember(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Deleting a Contact using PandaDoc Node.js Client\nDESCRIPTION: This snippet shows how to delete a contact by their ID using the PandaDoc Node.js client library. It initializes the API instance with an API key and sends a DELETE request to remove the specified contact.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/ContactsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.ContactsApi(configuration);\n\nconst body:pd_api.ContactsApiDeleteContactRequest = {\n  // string | Contact id.\n  id: \"SyoufNkJiHRn24LpuJ7RXb\",\n};\n\napiInstance.deleteContact(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Installing PandaDoc Node.js SDK via npm\nDESCRIPTION: Commands to install the PandaDoc Node.js SDK using npm. It provides two options: installing from the npm registry or directly from the GitHub repository.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pandadoc-node-client\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install git+https://github.com/PandaDoc/pandadoc-api-node-client.git\n```\n\n----------------------------------------\n\nTITLE: Deleting Document Recipient in PandaDoc API - TypeScript\nDESCRIPTION: Shows how to delete a recipient from a document using the PandaDoc API. Requires API key authentication and accepts document UUID and recipient UUID as parameters.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/DocumentRecipientsApi.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.DocumentRecipientsApi(configuration);\n\nconst body:pd_api.DocumentRecipientsApiDeleteDocumentRecipientRequest = {\n  // string | Document UUID\n  id: \"BhVzRcxH9Z2LgfPPGXFUBa\",\n  // string | Recipient UUID\n  recipientId: \"tf5dGS3Tmu3cj228ao6fnc\",\n};\n\napiInstance.deleteDocumentRecipient(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Deleting Templates with PandaDoc Node.js Client\nDESCRIPTION: Example showing how to delete a template using the PandaDoc Node.js client library. The code initializes the API client with an API key, then calls the deleteTemplate endpoint with a template ID.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/docs/TemplatesApi.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as pd_api from 'pandadoc-node-client';\n\n// replace it with your API key\nconst API_KEY = \"YOUR_API_KEY\";\nconst configuration = pd_api.createConfiguration(\n    { authMethods: {apiKey: `API-Key ${API_KEY}`} }\n);\nconst apiInstance = new pd_api.TemplatesApi(configuration);\n\nconst body:pd_api.TemplatesApiDeleteTemplateRequest = {\n  // string | Template ID\n  id: \"EE8yUNg5HztqVAuH85He8V\",\n};\n\napiInstance.deleteTemplate(body).then((data) => {\n  console.log('API called successfully. Returned data: %o', data);\n}).catch((error) => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Subscription API Endpoint\nDESCRIPTION: PATCH endpoint to update an existing webhook subscription using its ID. Accessed through the WebhookSubscriptionsApi class.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nPATCH /public/v1/webhook-subscriptions/{id}\n```\n\n----------------------------------------\n\nTITLE: Listing Webhook Subscriptions API Endpoint\nDESCRIPTION: GET endpoint to retrieve all webhook subscriptions from the PandaDoc API. Accessed through the WebhookSubscriptionsApi class.\nSOURCE: https://github.com/pandadoc/pandadoc-api-node-client/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nGET /public/v1/webhook-subscriptions\n```"
  }
]